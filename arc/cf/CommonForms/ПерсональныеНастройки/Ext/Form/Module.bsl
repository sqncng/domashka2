
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВыполнитьПроверкуПравДоступа("СохранениеДанныхПользователя", Метаданные);
	
	ИспользоватьУчетВремени = ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени");
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	ЗапрашиватьПодтверждениеПриЗавершенииПрограммы = СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Пользователи
	АвторизованныйПользователь = Пользователи.АвторизованныйПользователь();
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаСФайлами
	СпрашиватьРежимРедактированияПриОткрытииФайла = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОткрытияФайлов", 
		"СпрашиватьРежимРедактированияПриОткрытииФайла",
		Истина);
	
	ДействиеПоДвойномуЩелчкуМыши = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОткрытияФайлов", 
		"ДействиеПоДвойномуЩелчкуМыши",
		Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл);
	
	СпособСравненияВерсийФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСравненияФайлов", 
		"СпособСравненияВерсийФайлов",
		Перечисления.СпособыСравненияВерсийФайлов.ПустаяСсылка());
	
	ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ПоказыватьПодсказкиПриРедактированииФайлов",
		Ложь);
	
	ПоказыватьИнформациюЧтоФайлНеБылИзменен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ПоказыватьИнформациюЧтоФайлНеБылИзменен",
		Ложь);
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
		Истина);
	
	ПоказыватьКолонкуРазмер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", 
		"ПоказыватьКолонкуРазмер",
		Ложь);
	
	// Заполняем настройки открытия файлов
	СтрокаНастройки = НастройкиОткрытияФайлов.Добавить();
	СтрокаНастройки.ТипФайла = Перечисления.ТипыФайловДляВстроенногоРедактора.ТекстовыеФайлы;
	
	СтрокаНастройки.Расширение =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОткрытияФайлов\ТекстовыеФайлы",
			"Расширение",
			"TXT XML INI");
	
	СтрокаНастройки.СпособОткрытия =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиОткрытияФайлов\ТекстовыеФайлы",
			"СпособОткрытия",
			Перечисления.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	ИсторияКаталогИсполняемогоФайла = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"КаталогИсполняемогоФайла",
		Новый Массив);
	Элементы.КаталогИсполняемогоФайла.СписокВыбора.ЗагрузитьЗначения(ИсторияКаталогИсполняемогоФайла);
	Если ИсторияКаталогИсполняемогоФайла.Количество() > 0 Тогда
		КаталогИсполняемогоФайла = ИсторияКаталогИсполняемогоФайла[ИсторияКаталогИсполняемогоФайла.Количество()-1];
	КонецЕсли; 
	
	ДополнительныеПараметрыЗапуска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"ДополнительныеПараметрыЗапуска");
	
	ТипБазыПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"ТипБазыПоУмолчанию",
		Перечисления.ТипБазы.Файловый);
	
	РасположениеЛокальнойКопииБазы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"РасположениеЛокальнойКопииБазы");
	
	СпособСозданияЛокальнойКопииБазыОшибки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"СпособСозданияЛокальнойКопииБазыОшибки",
		Перечисления.СпособыСозданияЛокальнойКопииБазыОшибки.СоздаватьКаталогПоКодуОшибки);
	
	НастройкиСерверныхБаз = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"НастройкиСерверныхБаз",
		Новый Структура);
	
	
	НастройкиСерверныхБаз.Свойство("КластерСерверов1С",      КластерСерверов1С);
	НастройкиСерверныхБаз.Свойство("ТипСУБД",                ТипСУБД);
	НастройкиСерверныхБаз.Свойство("СмещениеДат",            СмещениеДат);
	НастройкиСерверныхБаз.Свойство("СерверБазыДанных",       СерверБазыДанных);
	НастройкиСерверныхБаз.Свойство("ПользовательСервераБазыДанных",         ПользовательСервераБазыДанных);
	НастройкиСерверныхБаз.Свойство("ПарольПользователяСервераБазыДанных",   ПарольПользователяСервераБазыДанных);
	
	Если НастройкиСерверныхБаз.Свойство("СоздаватьБазуДанныхВСлучаеОтстутствия") Тогда 
		СоздаватьБазуДанныхВСлучаеОтстутствия = НастройкиСерверныхБаз.СоздаватьБазуДанныхВСлучаеОтстутствия;
	Иначе 
		СоздаватьБазуДанныхВСлучаеОтстутствия = Истина;
	КонецЕсли;
	
	ИспользоватьЛокальныеКопииБазОшибок = ЗначениеЗаполнено(РасположениеЛокальнойКопииБазы)
	                                  ИЛИ ЗначениеЗаполнено(КластерСерверов1С)
	                                  ИЛИ ЗначениеЗаполнено(ТипСУБД)
	                                  ИЛИ ЗначениеЗаполнено(СмещениеДат)
	                                  ИЛИ ЗначениеЗаполнено(СерверБазыДанных)
	                                  ИЛИ ЗначениеЗаполнено(ПользовательСервераБазыДанных)
	                                  ИЛИ ЗначениеЗаполнено(ПарольПользователяСервераБазыДанных);
	
	
	РасположениеЛокальногоПутиРазработки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСБазамиРазработки", 
		"РасположениеЛокальногоПутиРазработки");
	
	
	КаталогДляДанныхТестирования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Тестирование", 
		"КаталогДляДанныхТестирования");
	
	ФреймворкДляЗапускаТестов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Тестирование", 
		"ФреймворкДляЗапускаТестов");
	
	ФайлСодержащийТокен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Тестирование", 
		"ФайлСодержащийТокен");
	
	РепозиторийТестов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Тестирование", 
		"РепозиторийТестов");
	
	ТекстовыйРедактор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Тестирование", 
		"ТекстовыйРедактор");
	
	БиблиотекиТестовИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Тестирование", 
		"БиблиотекиТестов");
	
	БиблиотекиТестов.Очистить();
	Если БиблиотекиТестовИзНастроек <> Неопределено Тогда
		Для Каждого ПутьКБиблиотеке Из БиблиотекиТестовИзНастроек Цикл
			СтрокаБиблиотекиТестов = БиблиотекиТестов.Добавить();
			СтрокаБиблиотекиТестов.Путь = ПутьКБиблиотеке;
		КонецЦикла;	
	КонецЕсли;
	
	ИспользоватьЛокальныеБазыРазработки = ЗначениеЗаполнено(РасположениеЛокальногоПутиРазработки);
	
	МенеджерЗаписиНастроекУведомлений = РегистрыСведений.ПерсональныеНастройкиУведомленийПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписиНастроекУведомлений.Пользователь = АвторизованныйПользователь;
	МенеджерЗаписиНастроекУведомлений.Прочитать();
	
	УведомлятьОНаправленииЗадачЭлектроннаяПочта = МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииЗадачЭлектроннаяПочта;
		
	УведомлятьОНаправленииОшибокИсполнителю = МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииОшибокИсполнителю;
	
	УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем =
		МенеджерЗаписиНастроекУведомлений.УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем;
	
	УведомлятьОНаправленииЗадачСистемаВзаимодействия = МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииЗадачСистемаВзаимодействия;
	
	ЗаполнитьТаблицуНастроекУведомлений();
	
	ПроектДляУчетаВремени = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"УчетВремени", 
		"ПроектПоУмолчанию");
	
	ИспользоватьОкруглениеВременныхИнтервалов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"УчетВремени", 
		"ИспользоватьОкруглениеВременныхИнтервалов");
	
	УправлениеДоступностью(ЭтаФорма);
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьПредставлениеСпособаСозданияЛокальнойКопииБазыОшибки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ИспользоватьЛокальныеКопииБазОшибок Тогда
		
		Если ТипБазыПоУмолчанию = Перечисления.ТипБазы.Серверный Тогда
			
			НепроверяемыеРеквизиты.Добавить("РасположениеЛокальнойКопииБазы");
			
		ИначеЕсли ТипБазыПоУмолчанию = Перечисления.ТипБазы.Файловый Тогда
			
			НепроверяемыеРеквизиты.Добавить("КластерСерверов1С");
			НепроверяемыеРеквизиты.Добавить("ТипСУБД");
			НепроверяемыеРеквизиты.Добавить("СерверБазыДанных");
			
		КонецЕсли; 
		
	Иначе 
		
		НепроверяемыеРеквизиты.Добавить("РасположениеЛокальнойКопииБазы");
		НепроверяемыеРеквизиты.Добавить("КластерСерверов1С");
		НепроверяемыеРеквизиты.Добавить("ТипСУБД");
		НепроверяемыеРеквизиты.Добавить("СерверБазыДанных");
		
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьЛокальныеКопииБазОшибокПриИзменении(Элемент)
	
	Если НЕ ИспользоватьЛокальныеКопииБазОшибок И ЗначениеЗаполнено(РасположениеЛокальнойКопииБазы) Тогда
		РасположениеЛокальнойКопииБазы = "";
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеЛокальнойКопииБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = РасположениеЛокальнойКопииБазы;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		РасположениеЛокальнойКопииБазы = ДиалогВыбораФайла.Каталог;
		ЗаполнитьПредставлениеСпособаСозданияЛокальнойКопииБазыОшибки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеЛокальнойКопииБазыПриИзменении(Элемент)
	
	ЗаполнитьПредставлениеСпособаСозданияЛокальнойКопииБазыОшибки();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогИсполняемогоФайла;
	ДиалогВыбораФайла.Заголовок = "Выбор каталога программных файлов 1С:Предприятия";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогИсполняемогоФайла = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогИсполняемогоФайла) 
		И Элементы.КаталогИсполняемогоФайла.СписокВыбора.НайтиПоЗначению(КаталогИсполняемогоФайла) = Неопределено Тогда
		Элементы.КаталогИсполняемогоФайла.СписокВыбора.Добавить(КаталогИсполняемогоФайла);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаПриИзменении(Элемент)
	
	
	Если ЗначениеЗаполнено(КаталогИсполняемогоФайла) Тогда
		Если Элементы.КаталогИсполняемогоФайла.СписокВыбора.НайтиПоЗначению(КаталогИсполняемогоФайла) <> Неопределено Тогда
			Элементы.КаталогИсполняемогоФайла.СписокВыбора.Удалить(Элементы.КаталогИсполняемогоФайла.СписокВыбора.НайтиПоЗначению(КаталогИсполняемогоФайла));
		КонецЕсли;	 
		
		Элементы.КаталогИсполняемогоФайла.СписокВыбора.Добавить(КаталогИсполняемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеЛокальногоПутиРазработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = РасположениеЛокальногоПутиРазработки;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		РасположениеЛокальногоПутиРазработки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КаталогДляДанныхТестированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог = КаталогДляДанныхТестирования;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогДляДанныхТестирования = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФреймворкДляЗапускаТестовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Каталог = ФреймворкДляЗапускаТестов;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФреймворкДляЗапускаТестов = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлСодержащийТокенНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Каталог = ФайлСодержащийТокен;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ФайлСодержащийТокен = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипСУБДПриИзменении(Элемент)
	
	Если ТипСУБД = ПредопределенноеЗначение("Перечисление.СУБД.MSSQLServer") Тогда
		СмещениеДат = "2000";
	Иначе 
		СмещениеДат = "";
	КонецЕсли; 
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЛокальныеБазыРазработкиПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура БиблиотекиТестовПутьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ТекущиеДанные = Элементы.БиблиотекиТестов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ДиалогВыбораФайла.Каталог = ТекущиеДанные.Путь;
	КонецЕсли;	 
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ТекущиеДанные.Путь = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	МассивСтруктур = Новый Массив;
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "ОбщиеНастройкиПользователя",
	    "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
	    ЗапрашиватьПодтверждениеПриЗавершенииПрограммы));
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.РаботаСФайлами
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "НастройкиОткрытияФайлов",
	    "ДействиеПоДвойномуЩелчкуМыши",
	    ДействиеПоДвойномуЩелчкуМыши));
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "НастройкиОткрытияФайлов",
	    "СпрашиватьРежимРедактированияПриОткрытииФайла",
	    СпрашиватьРежимРедактированияПриОткрытииФайла));
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "НастройкиПрограммы",
	    "ПоказыватьПодсказкиПриРедактированииФайлов",
	    ПоказыватьПодсказкиПриРедактированииФайлов));
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "НастройкиПрограммы",
	    "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
	    ПоказыватьЗанятыеФайлыПриЗавершенииРаботы));
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "НастройкиСравненияФайлов",
	    "СпособСравненияВерсийФайлов",
	    СпособСравненияВерсийФайлов));
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "НастройкиПрограммы",
	    "ПоказыватьКолонкуРазмер",
	    ПоказыватьКолонкуРазмер));
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "НастройкиПрограммы",
	    "ПоказыватьИнформациюЧтоФайлНеБылИзменен",
	    ПоказыватьИнформациюЧтоФайлНеБылИзменен));
	// Настройки открытия файлов
	Если НастройкиОткрытияФайлов.Количество() >= 1 Тогда 
		ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов\ТекстовыеФайлы", "Расширение", 
			НастройкиОткрытияФайлов[0].Расширение);
		ДобавитьСтруктуруНастройки(МассивСтруктур, "НастройкиОткрытияФайлов\ТекстовыеФайлы", "СпособОткрытия", 
			НастройкиОткрытияФайлов[0].СпособОткрытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// РаботаСОшибками
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "РаботаСОшибками",
	    "КаталогИсполняемогоФайла",
	    Элементы.КаталогИсполняемогоФайла.СписокВыбора.ВыгрузитьЗначения()));
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "РаботаСОшибками",
	    "ДополнительныеПараметрыЗапуска",
	    ДополнительныеПараметрыЗапуска));
	
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "РаботаСОшибками",
	    "ТипБазыПоУмолчанию",
	    ТипБазыПоУмолчанию));

	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "РаботаСОшибками",
	    "РасположениеЛокальнойКопииБазы",
	    РасположениеЛокальнойКопииБазы));
	
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "РаботаСОшибками",
	    "СпособСозданияЛокальнойКопииБазыОшибки",
	    СпособСозданияЛокальнойКопииБазыОшибки));
	
	НастройкиСерверныхБаз = Новый Структура;
	Если ИспользоватьЛокальныеКопииБазОшибок Тогда
		НастройкиСерверныхБаз.Вставить("КластерСерверов1С",      КластерСерверов1С);
		НастройкиСерверныхБаз.Вставить("ТипСУБД",                ТипСУБД);
		НастройкиСерверныхБаз.Вставить("СмещениеДат",            СмещениеДат);
		НастройкиСерверныхБаз.Вставить("СерверБазыДанных",       СерверБазыДанных);
		НастройкиСерверныхБаз.Вставить("ПользовательСервераБазыДанных",       ПользовательСервераБазыДанных);
		НастройкиСерверныхБаз.Вставить("ПарольПользователяСервераБазыДанных", ПарольПользователяСервераБазыДанных);
		НастройкиСерверныхБаз.Вставить("СоздаватьБазуДанныхВСлучаеОтстутствия", СоздаватьБазуДанныхВСлучаеОтстутствия);
	КонецЕсли; 
	
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "РаботаСОшибками",
	    "НастройкиСерверныхБаз",
	    НастройкиСерверныхБаз));
	
	// РаботаСБазамиРазработки
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "РаботаСБазамиРазработки",
	    "РасположениеЛокальногоПутиРазработки",
	    РасположениеЛокальногоПутиРазработки));

	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "КаталогДляДанныхТестирования",
	    КаталогДляДанныхТестирования));

	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "ФреймворкДляЗапускаТестов",
	    ФреймворкДляЗапускаТестов));

	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "ФайлСодержащийТокен",
	    ФайлСодержащийТокен));

	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "РепозиторийТестов",
	    РепозиторийТестов));

	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "ТекстовыйРедактор",
	    ТекстовыйРедактор));

	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "БиблиотекиТестов",
	    БиблиотекиТестовВНастройки()));

	Если ИспользоватьУчетВремени ТОгда
			
		МассивСтруктур.Добавить(ОписаниеНастройки(
	    	"УчетВремени",
	    	"ПроектПоУмолчанию",
	    	ПроектДляУчетаВремени));	
		
		МассивСтруктур.Добавить(ОписаниеНастройки(
	    	"УчетВремени",
	    	"ИспользоватьОкруглениеВременныхИнтервалов",
	    	ИспользоватьОкруглениеВременныхИнтервалов));
			
	КонецЕсли;
	
	Если СохранитьНастройки(МассивСтруктур) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СведенияОПользователе(Команда)
	
	ПоказатьЗначение(Неопределено, АвторизованныйПользователь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСФайламиНаКлиенте(Команда)
	
	НачатьУстановкуРасширенияРаботыСФайлами(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыСистемы(Команда)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталога(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаРабочегоКаталога",,,,,, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканирования(Команда)
	
	РаботаСФайламиКлиент.ОткрытьФормуНастройкиСканирования();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭлектроннойПодписиИШифрования(Команда)
	
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыАвторизацииВ1СДокументооборот(Команда)
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот",,,,,, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьСтруктуруНастройки(МассивСтруктур, Объект, Настройка = Неопределено, Значение)
	
	МассивСтруктур.Добавить(Новый Структура ("Объект, Настройка, Значение", Объект, Настройка, Значение));
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеНастройки(Объект, Настройка, Значение)
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", Объект);
	Элемент.Вставить("Настройка", Настройка);
	Элемент.Вставить("Значение", Значение);
	
	Возврат Элемент;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуНастроекУведомлений()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.Ссылка КАК Проект,
	|	&ТекущийПользователь КАК Пользователь,
	|	ЕСТЬNULL(НастройкиУведомленийПользователей.УведомлятьОбИзмененииСтатусовТехническихПроектов, ЛОЖЬ) КАК УведомлятьОбИзмененииСтатусовТехническихПроектов
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУведомленийПользователей КАК НастройкиУведомленийПользователей
	|		ПО (НастройкиУведомленийПользователей.Проект = Проекты.Ссылка)
	|			И (НастройкиУведомленийПользователей.Пользователь = &ТекущийПользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проекты.Наименование"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийПользователь", АвторизованныйПользователь);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(ТаблицаНастроек, "НастройкиУведомлений");
	ЗначениеВРеквизитФормы(ТаблицаНастроек, "ИмеющиесяНастройки");
	
КонецПроцедуры

&НаСервере
Функция СохранитьНастройки(МассивСтруктурНастроек)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ЗаписатьНастройкиУведомлений();
	
	Для Каждого СтруктураНастройки из МассивСтруктурНастроек Цикл
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(СтруктураНастройки.Объект,
		                                                 СтруктураНастройки.Настройка,
														 СтруктураНастройки.Значение,
														 ,
														 ,
														 Истина);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНастройкиУведомлений()
	
	// Обработка настроек уведомлений о ходе выполнения технических проектов
	ЕстьИзменения = Ложь;
	
	Для Каждого СтрокаТаблицаНастроек из НастройкиУведомлений Цикл
		
		СтруктураПоиска = Новый Структура("Проект", СтрокаТаблицаНастроек.Проект);
		МассивСтрок = ИмеющиесяНастройки.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество()=0 Тогда
			ЕстьИзменения = Истина;
			Прервать;
		Иначе
			СтрокаНастроек = МассивСтрок[0];
			
			Если СтрокаТаблицаНастроек.УведомлятьОбИзмененииСтатусовТехническихПроектов <> СтрокаНастроек.УведомлятьОбИзмененииСтатусовТехническихПроектов Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		
		НаборЗаписей = РегистрыСведений.НастройкиУведомленийПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(АвторизованныйПользователь, Истина);
		
		Для Каждого СтрокаНастроек из НастройкиУведомлений Цикл
			Если СтрокаНастроек.УведомлятьОбИзмененииСтатусовТехническихПроектов Тогда
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаНастроек);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	// Обработка настроек уведомлений о согласовании технических проектов
	
	МенеджерЗаписиНастроекУведомлений = РегистрыСведений.ПерсональныеНастройкиУведомленийПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписиНастроекУведомлений.Пользователь = АвторизованныйПользователь;
	МенеджерЗаписиНастроекУведомлений.Прочитать();
	
	Если УведомлятьОНаправленииЗадачЭлектроннаяПочта <> МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииЗадачЭлектроннаяПочта Тогда
		МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииЗадачЭлектроннаяПочта = УведомлятьОНаправленииЗадачЭлектроннаяПочта;
	КонецЕсли;
		
	Если УведомлятьОНаправленииОшибокИсполнителю <> МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииОшибокИсполнителю Тогда
		МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииОшибокИсполнителю = УведомлятьОНаправленииОшибокИсполнителю;
	КонецЕсли;
	
	Если УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем <> МенеджерЗаписиНастроекУведомлений.УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем Тогда
		МенеджерЗаписиНастроекУведомлений.УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем =
			УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем;
	КонецЕсли;
	
	Если УведомлятьОНаправленииЗадачСистемаВзаимодействия <> МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииЗадачСистемаВзаимодействия Тогда
		МенеджерЗаписиНастроекУведомлений.УведомлятьОНаправленииЗадачСистемаВзаимодействия = УведомлятьОНаправленииЗадачСистемаВзаимодействия;
	КонецЕсли;
	
	Если МенеджерЗаписиНастроекУведомлений.Модифицированность() Тогда
		МенеджерЗаписиНастроекУведомлений.Пользователь = АвторизованныйПользователь;
		МенеджерЗаписиНастроекУведомлений.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПредставлениеСпособаСозданияЛокальнойКопииБазыОшибки()
	
	СписокВыбора = Элементы.СпособСозданияЛокальнойКопииБазыОшибки.СписокВыбора;
	
	СимволСлеша = ПолучитьРазделительПути();
	
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СпособыСозданияЛокальнойКопииБазыОшибки.СоздаватьКаталогПоКодуОшибки"));
	ЭлементСписка.Представление = НСтр("ru = 'Создавать каталог по коду ошибки'");
	Если ЗначениеЗаполнено(РасположениеЛокальнойКопииБазы) Тогда
		ЭлементСписка.Представление = ЭлементСписка.Представление 
										+ " ("
										+ ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РасположениеЛокальнойКопииБазы)
										+ НСтр("ru = '<Проект>'")
										+ СимволСлеша
										+ НСтр("ru = '<Код ошибки>'")
										+ ")";
	КонецЕсли; 
	
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПредопределенноеЗначение("Перечисление.СпособыСозданияЛокальнойКопииБазыОшибки.ИспользоватьОдинКаталог"));
	ЭлементСписка.Представление = НСтр("ru = 'Использовать один каталог'");
	Если ЗначениеЗаполнено(РасположениеЛокальнойКопииБазы) Тогда
		ЭлементСписка.Представление = ЭлементСписка.Представление 
										+ " ("
										+ ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РасположениеЛокальнойКопииБазы)
										+ НСтр("ru = '<Проект>'")
										+ ")";
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ТипБазыПоУмолчанию.Доступность                     = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.РасположениеЛокальнойКопииБазы.Доступность         = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.СпособСозданияЛокальнойКопииБазыОшибки.Доступность = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.КластерСерверов1С.Доступность                      = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.ТипСУБД.Доступность                                = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.СмещениеДат.Доступность                            = Форма.ИспользоватьЛокальныеКопииБазОшибок
	                                                              И Форма.ТипСУБД = ПредопределенноеЗначение("Перечисление.СУБД.MSSQLServer");
	Элементы.СерверБазыДанных.Доступность                       = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.ПользовательСервераБазыДанных.Доступность          = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.ПарольПользователяСервераБазыДанных.Доступность    = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.СоздаватьБазуДанныхВСлучаеОтстутствия.Доступность  = Форма.ИспользоватьЛокальныеКопииБазОшибок;
	Элементы.РасположениеЛокальногоПутиРазработки.Доступность   = Форма.ИспользоватьЛокальныеБазыРазработки;
	
КонецПроцедуры

&НаКлиенте
Функция  БиблиотекиТестовВНастройки()
	
	Массив = Новый Массив;
	Для Каждого СтрокаБиблиотекиТестов Из БиблиотекиТестов Цикл
		Массив.Добавить(СтрокаБиблиотекиТестов.Путь);
	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции	

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ДекорацияПояснениеДляПроектаПоУчетуВремени.Видимость = ИспользоватьУчетВремени;
	
КонецПроцедуры

#КонецОбласти
