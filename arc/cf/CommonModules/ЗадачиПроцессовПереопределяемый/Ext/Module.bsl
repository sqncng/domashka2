////////////////////////////////////////////////////////////////////////////////
// Серверные переопределяемые процедуры и функции подсистемы "Задачи процессов"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Переопределяет стандартное поведение подсистемы Задачи процессов.
//
// Параметры:
//  Настройки - Структура - со свойствами:
//   * ПараметрыСозданияЗадачПоШаблону - Структура - со свойствами.
//       * ИсполнительЗадач - Строка - имя реквизита предмета, в котором содержится исполнитель задач.
//       * ДатаПервойЗадачи - Строка - имя реквизита предамета, в котором содержитася дата первой задачи.
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	ПараметрыСозданияЗадачТехническиеПроекты = Настройки.ПараметрыСозданияЗадачПоШаблону.Получить("Справочник.ТехническиеПроекты");
	Если ПараметрыСозданияЗадачТехническиеПроекты <> Неопределено Тогда
		ПараметрыСозданияЗадачТехническиеПроекты.ИсполнительЗадач = "Ответственный";
		ПараметрыСозданияЗадачТехническиеПроекты.ДатаПервойЗадачи = "ПлановаяДатаНачала";
	КонецЕсли;
	
	ПараметрыСозданияЗадачТехническиеПроекты = Настройки.ПараметрыСозданияЗадачПоШаблону.Получить("Справочник.Ошибки");
	Если ПараметрыСозданияЗадачТехническиеПроекты <> Неопределено Тогда
		ПараметрыСозданияЗадачТехническиеПроекты.ИсполнительЗадач = "КомуНаправлена";
		ПараметрыСозданияЗадачТехническиеПроекты.ДатаПервойЗадачи = "СрокОтработки";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСрокОтработкиПорученияПоЗадачеПриЗаписи(ЗадачаОбъект) Экспорт

	 Если ЗначениеЗаполнено(ЗадачаОбъект.ИсполнительПорученияПоЗадаче) Тогда
		Проект = ВладелецШаблонаПоПредметуЗадачи(ЗадачаОбъект.Предмет);
		ЗадачаОбъект.СрокОтработкиПоручения = ОбщегоНазначенияСППР.СрокОтработкиПоручения(ЗадачаОбъект.ДатаПорученияПоЗадаче, Проект);
	Иначе
		ЗадачаОбъект.СрокОтработкиПоручения = '00010101';
	КонецЕсли;

КонецПроцедуры

// Получает владельца шаблона по предмету задачи
//
// Параметры:
//  Предмет  - ОпределяемыйТип.ПредметПроцесса - предмет задачи процесса
//
// Возвращаемое значение:
//   ОпределяемыйТип.ВладелецШаблонаПроцесса   - владелец шаблона процесса
//
Функция ВладелецШаблонаПоПредметуЗадачи(Предмет) Экспорт
	
	Возврат ПроектПредметаЗадачи(Предмет);
	
КонецФункции 

// Формирует текст запроса который получает ответственных предметов для массива задач
//
// Параметры:
//  Предмет  - ОпределяемыйТип.ПредметПроцесса - предмет задачи процесса
//
// Возвращаемое значение:
//   ОпределяемыйТип.ВладелецШаблонаПроцесса   - владелец шаблона процесса
//
Функция ТекстЗапросаОтветственныеПредметовМассиваЗадач() Экспорт
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиПроцесса.Предмет КАК Предмет
	|ПОМЕСТИТЬ Предметы
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Предметы.Предмет КАК Предмет,
	|	ВЫБОР
	|		КОГДА Предметы.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|			ТОГДА Предметы.Предмет.Ответственный
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Ответственный
	|ПОМЕСТИТЬ ПредметыОтветственные
	|ИЗ
	|	Предметы КАК Предметы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Процедура ЗаполнитьНаборыЗначенийДоступаЗадачиПроцесса(Предмет, Таблица) Экспорт

	ЗначениеДоступа = Перечисления.ДополнительныеЗначенияДоступа.ДоступРазрешен;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		Проект = ПроектПредметаЗадачи(Предмет);
		
		Если ЗначениеЗаполнено(Проект) Тогда
			ЗначениеДоступа = Проект;
		Иначе
			ЗначениеДоступа = Перечисления.ДополнительныеЗначенияДоступа.ДоступРазрешен;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ЗначениеДоступа = ЗначениеДоступа;

КонецПроцедуры

Функция ПроектПредметаЗадачи(Предмет) Экспорт
	
	Проект = Неопределено;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.СборкиВерсии") Тогда
			
			Проект = ВладелецВладельца(Предмет, "СборкиВерсии");
			
		ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ФункцииМеханизмов") Тогда
			
			Проект = ВладелецВладельца(Предмет, "ФункцииМеханизмов");
			
		Иначе
			
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Владелец", Истина);
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Проект;
	
КонецФункции

Процедура ПриОпределенииПраваИзмененияЗадачБезКонтроля(ЕстьПраво, Задача, Предмет) Экспорт
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		Проект = ПроектПредметаЗадачи(Предмет);
		
	ИначеЕсли ЗначениеЗаполнено(Задача) Тогда
		
		Проект = ПроектПредметаЗадачи(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.Предмет));
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьПраво = УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеЗадачБезКонтроля", Проект);
	
	
КонецПроцедуры

Функция ОтветственныйПредметаЗадачи(Предмет) Экспорт
	
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		
		Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Ответственный", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Ответственный;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВладелецВладельца(Предмет, ИмяСправочника)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникПредметов.Владелец.Владелец КАК Владелец
	|ИЗ
	|	Справочник.СборкиВерсии КАК СправочникПредметов
	|ГДЕ
	|	СправочникПредметов.Ссылка = &Предмет";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СборкиВерсии", ИмяСправочника);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ВладелецВладельца = Выборка.Владелец;
	КонецЕсли;
	
	Возврат ВладелецВладельца;
	
КонецФункции

#КонецОбласти
