#Область ПрограммныйИнтерфейс

// Получает параметры создания базы из настроек.
//
// Параметры:
//  ЭталоннаяБаза - СправочникСсылка.ЭталонныеБазы - Ссылка на эталон из которого будут взяты настройки
// 
// Возвращаемое значение:
//  Структура
//
Функция ПодготовитьПараметрыДляСозданияБазыИзФайлаВыгрузки(ЭталоннаяБаза) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("ТипБазыПоУмолчанию",ТипБазыПоУмолчанию());
	Структура.Вставить("ЛокальныйКаталог",КаталогЛокальнойБазы());
	Структура.Вставить("КаталогИсполняемогоФайла",КаталогИсполняемогоФайла());
	Структура.Вставить("КаталогДляДанныхТестирования",КаталогДляДанныхТестирования());
	Структура.Вставить("ФреймворкДляЗапускаТестов",ФреймворкДляЗапускаТестов());
	Структура.Вставить("РепозиторийТестов",РепозиторийТестов());
	
	Параметрыбазы = ПараметрыЭталоннойБазы(ЭталоннаяБаза);
	Структура.Вставить("ИмяБазы",Параметрыбазы.ИмяБазы);
	Структура.Вставить("ИмяФайлаЭталона",Параметрыбазы.ИмяФайлаЭталона);
	Структура.Вставить("Пользователь",Параметрыбазы.Пользователь);
	Структура.Вставить("Пароль",Параметрыбазы.Пароль);
	Структура.Вставить("КаталогБазы",
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Структура.ЛокальныйКаталог) + Структура.ИмяБазы);
	
	Возврат Структура;
КонецФункции	

//Получает каталог локальной базы из настроек
//
// Возвращаемое значение:
//  Cтрока - Расположение локальной копии базы.
//
Функция КаталогЛокальнойБазы() Экспорт
	Возврат ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РаботаСОшибками",
	                                                       "РасположениеЛокальнойКопииБазы");
КонецФункции	

//Возвращает путь к фреймворку для запуска тестов
//
// Возвращаемое значение:
//  Cтрока - Путь к обработке.
//
Функция ФреймворкДляЗапускаТестов() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "ФреймворкДляЗапускаТестов");
КонецФункции

//Возвращает пути к библиотекам тестов
//
// Возвращаемое значение:
//  Массив - Путь к библиотекам тестов.
//
Функция БиблиотекиТестов() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "БиблиотекиТестов");
КонецФункции

//Возвращает путь к репозиторию тестов
//
// Возвращаемое значение:
//  Сстрока - Путь к репозиторию.
//
Функция РепозиторийТестов() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "РепозиторийТестов");
КонецФункции

//Возвращает значение команды для запуска внешнего текстового редактора
//
// Возвращаемое значение:
//  Строка - Значение команды.
//
Функция КомандаЗапускаВнешнегоТекстовогоРедактора() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "ТекстовыйРедактор");
КонецФункции

//Возвращает настройки БД для запуска тестов
//
// Возвращаемое значение:
//  Структура - Набор настроек
//
Функция НастройкиБДДляЗапускаТестовИзСценария() Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.НастройкиБДДляЗапускаТестовИзСценария();
КонецФункции	

//Возвращает настройки для выгрузки тестов
//
// Возвращаемое значение:
//  Структура - Набор настроек
//
Функция НастройкиВыгрузкиТестов() Экспорт
	СохраненныеНастройки =  ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаТестов", "НастройкиВыгрузки");
	Возврат СохраненныеНастройки;
КонецФункции	

//Возвращает соответствие по данным переданной базы
//
//
// Параметры:
//  ЭталоннаяБазаТестирования - Справочник.ЭталонныеБазыТестирования
//
// Возвращаемое значение:
//  Структура - Набор настроек
//
Функция ДанныеПользователейЭталоннойБазы(ЭталоннаяБазаТестирования) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ДанныеПользователейЭталоннойБазы(ЭталоннаяБазаТестирования);
КонецФункции	

//Возвращает значение настройки: показывать обычный текст или форматированный документ
//
// Возвращаемое значение:
//  Булево
//
Функция НастройкиПоказыватьОбычныйТекстВРедактореСценария() Экспорт
	Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование",
	                                 "ПоказыватьОбычныйТекстВРедактореСценария");
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Значение;
КонецФункции	

//Сохраняет настройки БД TestClient для запуска тестов
//
// Параметры:
//  Структура - Настройки
//
Процедура СохранитьНастройкиЗапускаБазыTestClient(Настройки) Экспорт
	МассивСтруктур = Новый Массив;
	
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "НастройкиЗапускаБазыTestClient_" + НРег(Настройки.АдресИБ),
	    Настройки));
		
	Для Каждого СтруктураНастройки из МассивСтруктур Цикл
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(СтруктураНастройки.Объект,
		                                                 СтруктураНастройки.Настройка,
														 СтруктураНастройки.Значение,
														 ,
														 ,
														 Истина);
	КонецЦикла;
КонецПроцедуры

//Сохраняет настройки БД для запуска тестов
//
// Параметры:
//  Структура - Настройки
//
Процедура СохранитьНастройкиБДДляЗапускаТестовИзСценария(Настройки) Экспорт
	МассивСтруктур = Новый Массив;
	
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "Тестирование",
	    "НастройкиДляЗапускаТестовИзСценария",
	    Настройки));
		
	Для Каждого СтруктураНастройки из МассивСтруктур Цикл
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(СтруктураНастройки.Объект,
		                                                 СтруктураНастройки.Настройка,
														 СтруктураНастройки.Значение,
														 ,
														 ,
														 Истина);
	КонецЦикла;
КонецПроцедуры

//Сохраняет настройки для выгрузки тестов
//
// Параметры:
//  Структура - Настройки
//
Процедура СохранитьНастройкиВыгрузкиТестов(Настройки) Экспорт
	МассивСтруктур = Новый Массив;
	
	МассивСтруктур.Добавить(ОписаниеНастройки(
	    "ВыгрузкаТестов",
	    "НастройкиВыгрузки",
	    Настройки));
		
	Для Каждого СтруктураНастройки из МассивСтруктур Цикл
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(СтруктураНастройки.Объект,
		                                                 СтруктураНастройки.Настройка,
														 СтруктураНастройки.Значение,
														 ,
														 ,
														 Истина);
	КонецЦикла;
КонецПроцедуры

//Возвращает значение каталога данных, в который выгружаются данные для запуска сценария.
//
// Возвращаемое значение:
//   Строка
//
Функция КаталогДляДанныхТестирования() Экспорт
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "КаталогДляДанныхТестирования");
КонецФункции

//Возвращает тест сценария по переданным параметрам
//
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстСценария(Параметры) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ТекстСценария(Параметры);
КонецФункции

//Возвращает тест процесса по переданным параметрам
//
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//   Строка
//
Функция ТекстПроцесса(Параметры) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ТекстПроцесса(Параметры);
КонецФункции

//Возвращает имя профиля для подключения TestClient
//
// Параметры:
//  Роль - СправочникСсылка.ПрофилиПользователей
//  НастройкиБДДляЗапускаТестовИзСценария - Структура
//  ЭкранироватьСпецСимволы - Булево
//
// Возвращаемое значение:
//   Строка
//
Функция ИмяПрофиляTestClient(Роль,НастройкиБДДляЗапускаТестовИзСценария,ЭкранироватьСпецСимволы) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ИмяПрофиляTestClient(Роль,НастройкиБДДляЗапускаТестовИзСценария,ЭкранироватьСпецСимволы);
КонецФункции	

//Возвращает таблицу сценариев с их версиями
//
// Параметры:
//  Сценарии - Массив - Содержит элементы справочника Сценарии.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ВерсииСценариевБД(Сценарии) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сценарии.Ссылка КАК Сценарий,
		|	Сценарии.ВерсияСценария КАК Версия
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК Сценарии
		|ГДЕ
		|	Сценарии.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Сценарии);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	 

//Возвращает данные для подключения TestClient
//
// Параметры:
//  ПрофильПользователя - СправочникСсылка.ПрофилиПользователей
//  БазаДанных - СправочникСсылка.ЭталонныеБазы
//
// Возвращаемое значение:
//  - Структура
//  - Неопределено
//
Функция ДанныеДляПодключенияКБДTestClient(ПрофильПользователя,БазаДанных) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ДанныеДляПодключенияКБДTestClient(ПрофильПользователя,БазаДанных)
КонецФункции	

// Подставляет в текст сценария строку подключения TestClient
//
// Параметры:
//  ТекстСценариев - Строка
//  НастройкиБДДляЗапускаТестовИзСценария - Структура
//  СправочникСсылка.ПрофилиПользователей - Роль
//
Процедура ЗаменитьСтрокуПодключенияПрофиляTestClient(ТекстСценариев,НастройкиБДДляЗапускаТестовИзСценария,Роль) Экспорт
	МассивСтрок    = СтрРазделить(ТекстСценариев,Символы.ПС);
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Ккк];
		
		Поз = Найти(Стр,"И я подключаю TestClient");
		Если Поз > 0 Тогда
			ПрофильПользователя = ТестированиеСлужебныйВызовСервера.ИмяПрофиляTestClient(Роль,
			НастройкиБДДляЗапускаТестовИзСценария,Истина);
			
			Если Найти(ТекстСценариев,"#language: en") > 0 Тогда
				МассивСтрок[Ккк] = Лев(Стр,Поз-1) + "And I connect """ + ПрофильПользователя + """ profile of TestClient";
			Иначе												   
				МассивСтрок[Ккк] = Лев(Стр,Поз-1) + "И я подключаю профиль TestClient """ + ПрофильПользователя + """";
			КонецЕсли;	 											   
		КонецЕсли;	 											   
		
		Поз = Найти(Стр,"И Я закрыл все окна клиентского приложения");
		Если Поз > 0 Тогда
			ПрофильПользователя = ТестированиеСлужебныйВызовСервера.ИмяПрофиляTestClient(Роль,
			НастройкиБДДляЗапускаТестовИзСценария,Истина);
			
			Если Найти(ТекстСценариев,"#language: en") > 0 Тогда
				МассивСтрок[Ккк] = Лев(Стр,Поз-1) + "And I close all client application windows";
			КонецЕсли;	 											   
		КонецЕсли;	 											   
		
	КонецЦикла;	
	
	ТекстСценариев = СтрСоединить(МассивСтрок,Символы.ПС);
КонецПроцедуры

// Заменяет служебные слова в тексте сценария на нужный язык
//
// Параметры:
//  Текст - Строка
//
// Возвращаемое значение:
//   Строка
//
Функция ОбработкаСлужебныхСловНаДругихЯзыках(Текст) Экспорт
	Если Найти(Текст,"#language: en") > 0 Тогда
		Текст = СтрЗаменить(Текст,"#language: en","");
		Текст = СтрЗаменить(Текст,"#language: ru","#language: en");
		Текст = СтрЗаменить(Текст,"Функциональность:","Feature:");
		Текст = СтрЗаменить(Текст,"Запуск нескольких сценариев","Run scenarios");
		Текст = СтрЗаменить(Текст,"Сценарий:","Scenario:");
	КонецЕсли;	 
	
	Возврат Текст; 
КонецФункции	 

// Добавляет файлы в переданный массив по указанному сценарию
//
// Параметры:
//  Массив - Массив
//  Справочник.СценарииРаботыПользователей - Сценарий
//
Процедура ДополнитьВложенныеСценарии(Массив,Сценарий) Экспорт
	
	ВложенныеСценарии = Новый ТаблицаЗначений;
	ВложенныеСценарии.Колонки.Добавить("Шаблон");
	ВложенныеСценарии.Колонки.Добавить("Версия");
	ВложенныеСценарии.Колонки.Добавить("Сценарий");
	ВложенныеСценарии.Колонки.Добавить("ШаблонНаименование");
	
	ВложенныеСценарии.Индексы.Добавить("Шаблон,Сценарий");
	
	СценарииДляВыгрузки = Новый Массив;
	СценарииДляВыгрузки.Добавить(Сценарий);
	ВложенныеСценарииРекурсивно(СценарииДляВыгрузки,ВложенныеСценарии);
	
	Для Каждого СтрокаВложенныеСценарии Из ВложенныеСценарии Цикл
		Массив.Добавить(СтрокаВложенныеСценарии.Шаблон);
	КонецЦикла;	 
	
	Массив.Добавить(Сценарий);
КонецПроцедуры

// Получает двоичные данные файлов 
//
// Параметры:
//  МассивВладельцев - Массив
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ДанныеФайлов(МассивВладельцев) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ВладелецФайла КАК Сценарий
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В(&МассивВладельцев)
		|	И НЕ Файлы.ПометкаУдаления
		|	И НЕ Файлы.Наименование ПОДОБНО ""НеВыгружать%""";
	
	Запрос.УстановитьПараметр("МассивВладельцев", МассивВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	КонтрольФайлов = Новый Массив;
	Для Каждого СтрокаРезультат Из Результат Цикл
		ИмяФайлаПолное = СтрокаРезультат.Наименование + "." + СтрокаРезультат.Расширение;
		ИмяФайла       = НРег(ИмяФайлаПолное);
		Если КонтрольФайлов.Найти(ИмяФайла) = Неопределено Тогда
			КонтрольФайлов.Добавить(ИмяФайла);
		Иначе
			ИдСтроки = КонтрольФайлов.Найти(ИмяФайла);
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл: <%1> присутствует в сценарии или процессе <%2> и <%3>'"),ИмяФайлаПолное,
				СтрокаРезультат.Сценарий,Результат[ИдСтроки].Сценарий);
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат  Результат;
КонецФункции	

// Получает данные по параметрам сценария
//
// Параметры:
//  Сценарий - Справочник.СценарииРаботыПользователей
//
// Возвращаемое значение:
//  Массив
//
Функция ПараметрыСценария(Сценарий) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка КАК Ссылка,
		|	СценарииРаботыПользователейПараметрыВходящие.НомерСтроки КАК НомерСтроки,
		|	СценарииРаботыПользователейПараметрыВходящие.Имя КАК Имя,
		|	СценарииРаботыПользователейПараметрыВходящие.Значение КАК Значение,
		|	СценарииРаботыПользователейПараметрыВходящие.ФО КАК ФО,
		|	СценарииРаботыПользователейПараметрыВходящие.ТипПараметра КАК ТипПараметра,
		|	СценарииРаботыПользователейПараметрыВходящие.ИсходящийПараметр КАК ИсходящийПараметр
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ПараметрыВходящие КАК СценарииРаботыПользователейПараметрыВходящие
		|ГДЕ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("НомерСтроки",Неопределено);
		Структура.Вставить("Имя",Неопределено);
		Структура.Вставить("ТипПараметра",Неопределено);
		Структура.Вставить("ИсходящийПараметр",Неопределено);
		Структура.Вставить("Значение",Неопределено);
		
		ЗаполнитьЗначенияСвойств(Структура,ВыборкаДетальныеЗаписи);
		
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции	 

// Возвращает таблицу параметров, которые возможно выбрать по ссылке для данного шага процесса
//
// Параметры:
//  Процесс - Справочник.Процессы
//  ШагПроцесса - Справочник.ШагиПроцесса
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПараметрыШаговПроцессаПоСценарию(Процесс,ШагПроцесса) Экспорт
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("ТипПараметра");
	Таблица.Колонки.Добавить("ИсходящийПараметр");
	Таблица.Колонки.Добавить("ЗначениеПоСсылке");
	Таблица.Колонки.Добавить("ЗначениеПроизвольное");
	Таблица.Колонки.Добавить("ШагПроцесса");
	
	Если НЕ ЗначениеЗаполнено(ШагПроцесса) Тогда
		Возврат Таблица; 
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШагиПроцессаПараметрыСценария.Ссылка КАК ШагПроцесса,
		|	ШагиПроцессаПараметрыСценария.НомерСтроки КАК НомерСтроки,
		|	ШагиПроцессаПараметрыСценария.Имя КАК Имя,
		|	ШагиПроцессаПараметрыСценария.ЗначениеПоСсылке КАК ЗначениеПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ТипПараметра КАК ТипПараметра,
		|	ШагиПроцессаПараметрыСценария.ИсходящийПараметр КАК ИсходящийПараметр,
		|	ШагиПроцессаПараметрыСценария.ШагПроцессаЗначениеПоСсылке КАК ШагПроцессаЗначениеПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ИмяПараметраПоСсылке КАК ИмяПараметраПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ЗначениеПроизвольное КАК ЗначениеПроизвольное,
		|	ШагиПроцессаПараметрыСценария.Ссылка.ПолныйКод КАК ПолныйКод
		|ИЗ
		|	Справочник.ШагиПроцесса.ПараметрыСценария КАК ШагиПроцессаПараметрыСценария
		|ГДЕ
		|	ШагиПроцессаПараметрыСценария.Ссылка.Владелец = &Владелец
		|	И НЕ ШагиПроцессаПараметрыСценария.Ссылка.ПометкаУдаления
		|	И ШагиПроцессаПараметрыСценария.ИсходящийПараметр
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолныйКод";
	
	Запрос.УстановитьПараметр("Владелец", Процесс);
	
	ДанныеЗапроса =  Запрос.Выполнить().Выгрузить();
	
	//Надо оставить только параметры шагов, которые находятся до данного шага процесса.
	
	НомерСтроки = Неопределено;
	СтрокаДанныеЗапроса = ДанныеЗапроса.Найти(ШагПроцесса,"ШагПроцесса");
	Если СтрокаДанныеЗапроса <> Неопределено Тогда
		НомерСтроки = ДанныеЗапроса.Индекс(СтрокаДанныеЗапроса)+1;
	КонецЕсли;	 
	
	Ном = 0;
	Для Каждого СтрокаДанныеЗапроса Из ДанныеЗапроса Цикл
		Ном = Ном + 1;
		Если Ном = НомерСтроки Тогда
			Прервать;
		КонецЕсли;	 
		
		СтрокаТаблица = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблица,СтрокаДанныеЗапроса);
	КонецЦикла;	 
	
	Возврат Таблица;
КонецФункции	 

// Возвращает таблицу параметров, которые находятся на вкладке "Параметры" процесса
//
// Параметры:
//  Процесс - Справочник.Процессы
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПараметрыПроцесса(Процесс) Экспорт
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Имя");
	Таблица.Колонки.Добавить("ТипПараметра");
	Таблица.Колонки.Добавить("НомерПараметра");
	Таблица.Колонки.Добавить("Значение");
	
	Если НЕ ЗначениеЗаполнено(Процесс) Тогда
		Возврат Таблица; 
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроцессыПараметрыПроцесса.НомерСтроки КАК НомерПараметра,
		|	ПроцессыПараметрыПроцесса.Имя КАК Имя,
		|	ПроцессыПараметрыПроцесса.ТипПараметра КАК ТипПараметра,
		|	ПроцессыПараметрыПроцесса.Значение КАК Значение,
		|	ПроцессыПараметрыПроцесса.ИсходящийПараметр КАК ИсходящийПараметр
		|ИЗ
		|	Справочник.Процессы.ПараметрыПроцесса КАК ПроцессыПараметрыПроцесса
		|ГДЕ
		|	ПроцессыПараметрыПроцесса.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроцессыПараметрыПроцесса.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", Процесс);
	
	ДанныеЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеЗапроса; 
КонецФункции	 

// Возвращает упорядоченную таблицу сценариев, которые используются в процессе
//
// Параметры:
//  Процесс - Справочник.Процессы
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция СценарииПроцесса(Процесс) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцесса.СценарийРаботыПользователя КАК Сценарий,
		|	ШагиПроцесса.Ссылка КАК ШагПроцесса,
		|	ШагиПроцесса.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	НЕ ШагиПроцесса.ПометкаУдаления
		|	И ШагиПроцесса.Владелец = &Процесс
		|	И НЕ ШагиПроцесса.ЭтоГруппа
		|	И ШагиПроцесса.СценарийРаботыПользователя <> ЗНАЧЕНИЕ(Справочник.СценарииРаботыПользователей.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШагиПроцесса.ПолныйКод";
	
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Возврат Запрос.Выполнить().Выгрузить(); 
КонецФункции	 

// Возвращает отформатированный текст процесса
//
// Параметры:
//  ДополнительныеПараметры - Структура
//  МассивРолей - Массив
//  Процесс - Справочники.Процессы
//
// Возвращаемое значение:
//  Строка
//
Функция ОтформатированныеТекстыСценариевПроцесса(ДополнительныеПараметры,МассивРолей,Процесс) Экспорт
	ФД = Новый ФорматированныйДокумент;
	
	ПараметрыФормированияТекстаСценария = Новый Структура;
	ПараметрыФормированияТекстаСценария.Вставить("ПросмотрСценария",Ложь);
	ПараметрыФормированияТекстаСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
	ПараметрыФормированияТекстаСценария.Вставить("ЧтениеИзТекста",Ложь);
	
	СценарииПроцесса = Тестирование.СценарииПроцесса(Процесс);
	
	Если ДополнительныеПараметры.Свойство("ПрисоединенныеФайлы") Тогда
		ДополнительныеПараметры.ПрисоединенныеФайлы = ПрисоединенныеФайлы(СценарииПроцесса,Процесс);
	КонецЕсли;	 
	
	МассивРолей = ЗаполнитьМассивРолей(СценарииПроцесса);
	
	ТекстСценария = ТекстыСценариевПроцесса(ПараметрыФормированияТекстаСценария,Процесс);
	Если Не ДополнительныеПараметры.ДелатьРаскраску Тогда
		ТестированиеГрафическиеСхемыСервер.ВернутьУгловыеСкобки(ТекстСценария);
		Возврат ТекстСценария;
	КонецЕсли;	 
	
	ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры);
	
	Возврат ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры);
КонецФункции	 

// Возвращает отформатированный текст процесса
//
// Параметры:
//  ПараметрыФормированияТекстаСценария - Структура
//  Процесс - Справочники.Процессы
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстыСценариевПроцесса(ПараметрыФормированияТекстаСценария,Процесс) Экспорт
	ОбъектТекстыСценариев = ОбъектнуюМодельТекстыСценариевСервер(Процесс,ПараметрыФормированияТекстаСценария);
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ОбъектТекстыСценариев",ОбъектТекстыСценариев);
	ПараметрыСценария.Вставить("Процесс",Процесс);
	ПараметрыСценария.Вставить("ШагиДоТеста",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПроверка",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПослеТеста",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ЭтоПроцесс",Истина);
	ПараметрыСценария.Вставить("ЧтениеИзТекста",Ложь);
	
	НастройкиБДДляЗапускаТестовИзСценария = Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
	
	Если НастройкиБДДляЗапускаТестовИзСценария <> Неопределено Тогда
		ПараметрыСценария.Вставить("БазаДанных",НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза);
	Иначе	
		ПараметрыСценария.Вставить("БазаДанных",Неопределено);
	КонецЕсли;	 
	
	Возврат Тестирование.ТекстПроцесса(ПараметрыСценария);
КонецФункции

//Возвращает набор параметров для запуска данной настройки сценария тестирования
//
// Параметры:
//  ПараметрыНастройки - ТаблицаЗначений
//  СценарийРаботыПользователя - Справочники.СценарииРаботыПользователей
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПараметрыЗапускаНастройкиСценарияТестирования(ПараметрыНастройки, СценарийРаботыПользователя) Экспорт
	ПараметрыНастройкиЗапускаСценариев = ПараметрыНастройки.Скопировать();
	ПараметрыСценарияРаботыПользователей = ПараметрыСценарияРаботыПользователейИзНастройкиЗапуска(СценарийРаботыПользователя);
	
	Для Каждого ПараметрСценария Из ПараметрыСценарияРаботыПользователей Цикл
		ПараметрНастройки = ПараметрыНастройкиЗапускаСценариев.Найти(ПараметрСценария.Имя,"Имя");
		Если ПараметрНастройки <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПараметрНастройки = ПараметрыНастройкиЗапускаСценариев.Добавить();
		ЗаполнитьЗначенияСвойств(ПараметрНастройки,ПараметрСценария);
		
		МассивЗначений = СтрРазделить(ПараметрНастройки.Значение,";");
		Если МассивЗначений.Количество() <= 1 Тогда
			ПараметрНастройки.НесколькоЗначений = Ложь;
		Иначе	
			ПараметрНастройки.НесколькоЗначений = Истина;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат ПараметрыНастройкиЗапускаСценариев;
КонецФункции	 

// Возвращает данные иерархии сценариев по данным репозитория
// Параметры:
//  Проект - Справочники.Проекты
//  ТокенПользователя - Строка
//  Ветка - Справочник.Ветки
//  ИдентификаторКоммита - Строка
//
// Возвращаемое значение:
//  ДвоичныеДанные
//
Функция ДанныеИерархииПоДаннымGit(Проект, ТокенПользователя, Ветка, ИдентификаторКоммита) Экспорт
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(Проект);
	
	Возврат ДвоичныеДанныеФайлаИерархии(ДанныеПодключенияПроекта, ТокенПользователя, Ветка, ИдентификаторКоммита);
			
КонецФункции

// Возвращает данные сценария работы пользователя из репозитория
// Параметры:
//  Проект - Справочники.Проекты
//  ДанныеСценария - Структура
//  ТокенПользователя - Строка
//  Ветка - Справочник.Ветки
//  ИдентификаторКоммита - Строка
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеСценарияИзРепозитория(Проект, ДанныеСценария, ТокенПользователя,  Ветка, ИдентификаторКоммита) Экспорт
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(Проект);
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	
	Если ДанныеСценария.Свойство("АдресСлужебныеДанныеСценариев")
			И ДанныеСценария.АдресСлужебныеДанныеСценариев = Неопределено Тогда
		СлужебныеДанные = ТестированиеСлужебныйВызовСервера.СлужебныеДанныеСценариев(ДанныеСценария);
		ДанныеСценария.Вставить("АдресСлужебныеДанныеСценариев", СлужебныеДанные.АдресСлужебныеДанныеСценариев);
		ДанныеСценария.Вставить("АдресКешСнипетовИменСценариевИменСценариев", СлужебныеДанные.АдресКешСнипетовИменСценариевИменСценариев);
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ТокенПользователя) Тогда
		Токен = ТокенПользователя;
	ИначеЕсли ЗначениеЗаполнено(ДанныеПодключенияПроекта.ТокенПроекта) Тогда
		Токен = ДанныеПодключенияПроекта.ТокенПроекта;
	Иначе	
		ВызватьИсключение НСтр("ru = 'Не указан токен пользователя или токен проекта.'");
	КонецЕсли;	 
	
	Возврат ДанныеСценарияИзРепозиторияСлужебный(Проект, ДанныеСценария, Токен, Ветка, Соединение,
		ДанныеПодключенияПроекта, ИдентификаторКоммита);
КонецФункции	 

// Возвращает данные настройки сценария работы пользователя из репозитория
// Параметры:
//  Проект - Справочники.Проекты
//  ДанныеНастройки - Структура
//  ТокенПользователя - Строка
//  Ветка - Справочник.Ветки
//  ИдентификаторКоммита - Строка
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеНастройкиСценарияИзРепозитория(Проект, ДанныеНастройки, ТокенПользователя,  Ветка, ИдентификаторКоммита) Экспорт
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(Проект);
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	Возврат ДанныеНастройкиСценарияИзРепозиторияСлужебный(Проект, ДанныеНастройки, ТокенПользователя, Ветка, Соединение,
		ДанныеПодключенияПроекта, ИдентификаторКоммита);
КонецФункции	 

// Устанавливает текст сценария пользователя в форматированный документ
// Параметры:
//  Текст - Строка
//  ФорматированныйДокумент - ФорматированныйДокумент
Процедура УстановитьТекстВФорматированныйДокумент(Текст, ФорматированныйДокумент) Экспорт
	ТестированиеГрафическиеСхемыСервер.ЭкранироватьУгловыеСкобки(Текст);
	ТестированиеГрафическиеСхемыСервер.СделатьСтандартнуюПодготовкуТекстаHTML(Текст);
	ШаблонHTML = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML");
	ТекстHTML  = ШаблонHTML.ПолучитьТекст();
	ТекстHTML  = СтрЗаменить(ТекстHTML,"<ПроизвольныйТекст>",Текст);
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура);
КонецПроцедуры 

// Возвращает таблицу параметров сценария по данным, прочитанным из yaml файла
// Параметры:
//  МассивДанных - Массив
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПараметрыСценарияИзТекстовыхДанных(МассивДанных) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ПараметрыСценарияИзТекстовыхДанных(МассивДанных);
КонецФункции	 

// Возвращает таблицу тегов сценария по данным, прочитанным из yaml файла
// Параметры:
//  МассивДанных - Массив
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ТегиСценарияИзТекстовыхДанных(МассивДанных) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ТегиСценарияИзТекстовыхДанных(МассивДанных);
КонецФункции	 

// Возвращает таблицу вызывающих сценариев по данным, прочитанным из yaml файла
// Параметры:
//  МассивДанных - Массив
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ВызывающиеСценарииТекстовыхДанных(МассивДанных) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ВызывающиеСценарииТекстовыхДанных(МассивДанных);
КонецФункции	 

// Возвращает таблицу вложенных сценариев по данным, прочитанным из yaml файла
// Параметры:
//  МассивДанных - Массив
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ВложенныеСценарииТекстовыхДанных(МассивДанных) Экспорт
	СборщикСценариев = СборщикСценариев();
	Возврат СборщикСценариев.ВложенныеСценарииТекстовыхДанных(МассивДанных);
КонецФункции	 

// Заполняет таблицу параметров сценария по переданным данным, прочитанным из yaml файла
// Параметры:
//  ПараметрыВходящие - ТаблицаЗначений
//  ПереданныеПараметрыВходящие - Массив
Процедура ЗаполнитьПараметрыВходящиеИзТекстовыхДанных(ПараметрыВходящие, ПереданныеПараметрыВходящие) Экспорт
	СборщикСценариев = СборщикСценариев();
	ПараметрыВходящие.Очистить();
	НомСтр = 0;
	Для Каждого СтрокаПереданныеПараметрыВходящие Из ПереданныеПараметрыВходящие Цикл
		СтрокаПараметрыВходящие = ПараметрыВходящие.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметрыВходящие, СтрокаПереданныеПараметрыВходящие);
		СтрокаПараметрыВходящие.ТипПараметра = СборщикСценариев.ТипПараметра(СтрокаПереданныеПараметрыВходящие.ТипПараметра);
		НомСтр = НомСтр + 1;
		СтрокаПараметрыВходящие.НомСтр = НомСтр;
	КонецЦикла;	 
КонецПроцедуры 

// Возвращает данные файла эталонных баз, дополняя его данными эталонных баз СППР
// Параметры:
//  ДанныеИзмененныхСценариев - Массив
//  ДанныеПодключения - Структура
//  ДанныеФиксацииИзменений - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеФайлаЭталонныхБаз(ДанныеИзмененныхСценариев, ДанныеПодключения, ДанныеФиксацииИзменений) Экспорт
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(ДанныеПодключения.Проект);
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	
	ИмяФайла = ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/bases.yaml";
	ДанныеФайла = ДанныеФайлаИзРепозитория(Соединение, ДанныеПодключенияПроекта,
		ДанныеПодключения.ТокенПользователя, ДанныеПодключения.Ветка, ИмяФайла, ДанныеПодключения.ИдентификаторКоммита);
		
	ДанныеПоЭталоннымБазамИзРепозитория = Новый Соответствие;
	
	Если НЕ ДанныеФайла.Ошибка Тогда
		СборщикСценариев = СборщикСценариев();
		СчетчикСтрок = -1;
		СборщикСценариев.ЧтениеДанныхYaml(ДанныеПоЭталоннымБазамИзРепозитория,
			ДанныеФайла.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(), СчетчикСтрок);
			
		ДанныеПоЭталоннымБазамИзСППР = ДанныеПоЭталоннымБазамИзСППР(ДанныеПодключения.Проект);
		
		КешДанныхИзРепо = Новый Соответствие;
		Ид = -1;
		Для Каждого ДанныеЭталоннойБазыИзРепозитория Из ДанныеПоЭталоннымБазамИзРепозитория["ЭталонныеБД"] Цикл
			Ид = Ид + 1;
			Наименование = ДанныеЭталоннойБазыИзРепозитория["Наименование"];
			КешДанныхИзРепо.Вставить(Наименование, Ид);
		КонецЦикла;	 
		
		Для Каждого ДанныеИзСППР Из ДанныеПоЭталоннымБазамИзСППР Цикл
			Наименование = ДанныеИзСППР.Значение.Наименование;
			Ид = КешДанныхИзРепо[Наименование];
			Если Ид = Неопределено Тогда
				ДанныеБазы = Новый Соответствие;
				ДанныеПоЭталоннымБазамИзРепозитория["ЭталонныеБД"].Добавить(ДанныеБазы);
			Иначе
				ДанныеБазы = ДанныеПоЭталоннымБазамИзРепозитория["ЭталонныеБД"][Ид];
			КонецЕсли;	 
			
			ДанныеБазы.Вставить("Наименование", ДанныеИзСППР.Значение.Наименование);
			ДанныеБазы.Вставить("ПутьКФайлуВыгрузки", ДанныеИзСППР.Значение.ПутьКФайлуВыгрузки);
			ДанныеБазы.Вставить("ИдентификаторБазы", ДанныеИзСППР.Значение.ИдентификаторБазы);
			ДанныеБазы.Вставить("ПрофилиПользователей", Новый Массив);
			ДанныеПользователейЭталоннойБазы = ДанныеПользователейЭталоннойБазы(ДанныеИзСППР.Значение.Ссылка);
			Для Каждого ТекПользователь Из ДанныеПользователейЭталоннойБазы Цикл
				ДанныеПользователя = Новый Соответствие;
				ДанныеПользователя.Вставить("ПрофильПользователя", ТекПользователь.Значение.ИмяПрофиля);
				ДанныеПользователя.Вставить("Логин", ТекПользователь.Значение.Логин);
				ДанныеПользователя.Вставить("Пароль", ТекПользователь.Значение.Пароль);
				ДанныеБазы["ПрофилиПользователей"].Добавить(ДанныеПользователя);
			КонецЦикла;	 
		КонецЦикла;	 
	Иначе
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ДанныеПоЭталоннымБазамИзРепозитория; 
КонецФункции	 

// Фиксирует изменения в системе контроля версий
// Параметры:
//  ДанныеИзмененныхСценариев - Массив
//  ДанныеПодключения - Структура
//  ДанныеФиксацииИзменений - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция ФиксироватьИзменения(ДанныеИзмененныхСценариев, ДанныеПодключения, ДанныеФиксацииИзменений) Экспорт
	ТекПользователь = Пользователи.ТекущийПользователь();
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ТекПользователь);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивСсылок,,Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		
	СтрокаКонтактнойИнформации = КонтактнаяИнформация.Найти(ТекПользователь, "Объект");
	email = Неопределено;
	Если СтрокаКонтактнойИнформации <> Неопределено Тогда
		email = СтрокаКонтактнойИнформации.Представление;
	КонецЕсли;	 
	Если НЕ ЗначениеЗаполнено(email) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У пользователя <%1> не указан адрес электронной почты.'"), ТекПользователь);
	КонецЕсли;	 
	
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(ДанныеФиксацииИзменений.АдресСлужебныеДанныеСценариев);
	НадоОбновитьДанныеКеш = Ложь;
	
	КешПеремещенныхФайлов = Новый Соответствие;
	КешСценариевСПометкойУдаления = Новый Соответствие;
	Для Каждого ТекДанныеСценария Из ДанныеИзмененныхСценариев.СценарииСПометкойНаУдаление Цикл
		КешСценариевСПометкойУдаления.Вставить(ТекДанныеСценария.UID, ТекДанныеСценария.UID);
	КонецЦикла;	 
	КешНастроекСПометкойУдаления = Новый Соответствие;
	Для Каждого ТекДанныеНастройки Из ДанныеИзмененныхСценариев.УдаленныеНастройки Цикл
		КешНастроекСПометкойУдаления.Вставить(ТекДанныеНастройки.UID, ТекДанныеНастройки.UID);
	КонецЦикла;	 
	
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(ДанныеПодключения.Проект);
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	
	ВеткаСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПодключения.Ветка, "Имя");
	
	Если НЕ ДанныеФиксацииИзменений.СоздатьМерджРеквест Тогда
		ДанныеВеткиРепозитория = ДанныеВеткиРепозитория(
			Соединение, ДанныеПодключенияПроекта, ДанныеПодключения.ТокенПользователя, ВеткаСтрокой);
			
		Если ЗапрещеныПомещенияВЗащищенныеВетки() Тогда
			Если ДанныеВеткиРепозитория.ДанныеВетки.protected Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нельзя помещать изменения в ветку <%1> напрямую. Используйте запрос на слияние.'"), ВеткаСтрокой);
			КонецЕсли;	 
		КонецЕсли;	 	
	КонецЕсли;	 
	
	АдресПользователяПринимаюшегоЗапрос = Неопределено;
	СтруктураЗаписи = Новый Структура;
	Если ДанныеФиксацииИзменений.СоздатьМерджРеквест Тогда
		Если НЕ ЗначениеЗаполнено(ДанныеФиксацииИзменений.ИмяВеткиМерджРеквеста) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указана ветка для слияния в ветку <%1>.'"), ВеткаСтрокой);
		КонецЕсли;	 
		Если НЕ ЗначениеЗаполнено(ДанныеФиксацииИзменений.КомуОтправить) Тогда
			ВызватьИсключение НСтр("ru = 'Не указано кому направить запрос на слияние.'");
		КонецЕсли;	 
		
		АдресПользователяПринимаюшегоЗапрос = ЭлектроннаяПочтаПользователя(ДанныеФиксацииИзменений.КомуОтправить);
		
		Если НЕ ЗначениеЗаполнено(АдресПользователяПринимаюшегоЗапрос) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У пользователя <%1> не указан адрес электронной почты.'"), ДанныеФиксацииИзменений.КомуОтправить);
		КонецЕсли;	 
		
		СтруктураЗаписи.Вставить("start_sha", ДанныеПодключения.ИдентификаторКоммита);
		СтруктураЗаписи.Вставить("branch", ДанныеФиксацииИзменений.ИмяВеткиМерджРеквеста);
	Иначе	
		СтруктураЗаписи.Вставить("branch", ВеткаСтрокой);
	КонецЕсли;	 
	СтруктураЗаписи.Вставить("commit_message", ДанныеФиксацииИзменений.ТекстСообщения);
	СтруктураЗаписи.Вставить("author_email", email);
	СтруктураЗаписи.Вставить("author_name", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекПользователь, "Наименование"));
	
	Изменения = Новый Массив;
	
	Если ДанныеИзмененныхСценариев.НовыеНастройки.Количество() > 0 Тогда
		НадоОбновитьДанныеКеш = Истина;
	КонецЕсли;	 
	
	Для Каждого ТекДанныеНастройки Из ДанныеИзмененныхСценариев.УдаленныеНастройки Цикл
		ЭтоНоваяНастройка = Ложь;
		Для Каждого ТекНоваяНастройка Из ДанныеИзмененныхСценариев.НовыеНастройки Цикл
			Если ТекДанныеНастройки.UID = ТекНоваяНастройка["ДанныеТеста"]["UID"] Тогда
				ЭтоНоваяНастройка = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
		
		Если ЭтоНоваяНастройка Тогда
			Продолжить;
		КонецЕсли;	 
		
		ИзмененияОдногоФайла = Новый Структура;
		ИзмененияОдногоФайла.Вставить("action", "delete");
		ИзмененияОдногоФайла.Вставить("file_path", ТекДанныеНастройки.ПутьВРепозитории);
		Изменения.Добавить(ИзмененияОдногоФайла);
		НадоОбновитьДанныеКеш = Истина;
	КонецЦикла;	 
	
	Для Каждого ТекДанныеСценария Из ДанныеИзмененныхСценариев.СценарииСПометкойНаУдаление Цикл
		ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[ТекДанныеСценария.UID];
		Если ДанныеСценарияИзКеш = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		Если ДанныеСценарияИзКеш.Свойство("ЭтоНовыйЭлемент") И ДанныеСценарияИзКеш.ЭтоНовыйЭлемент Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Соединение", Соединение);
		СтруктураПараметров.Вставить("Ветка", ДанныеПодключения.Ветка);
		СтруктураПараметров.Вставить("ТокенПользователя", ДанныеПодключения.ТокенПользователя);
		СтруктураПараметров.Вставить("ИдентификаторКоммита", ДанныеПодключения.ИдентификаторКоммита);
		СтруктураПараметров.Вставить("ДанныеПодключенияПроекта", ДанныеПодключенияПроекта);
		
		ФайлПолноеИмяФайла = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
		ФайлПуть = Новый Файл(ФайлПолноеИмяФайла.Путь);
		
		СписокФайлов = СписокФайловВКаталогеРепозитория(СтруктураПараметров,
			СтруктураПараметров.ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ФайлПуть.ПолноеИмя, Истина);
			
		Для Каждого ТекФайл Из СписокФайлов Цикл
			Если ТекФайл.type = "tree" Тогда
				Продолжить;
			КонецЕсли;	 
			
			ИзмененияОдногоФайла = Новый Структура;
			ИзмененияОдногоФайла.Вставить("action", "delete");
			ИзмененияОдногоФайла.Вставить("file_path", ТекФайл.path);
			Изменения.Добавить(ИзмененияОдногоФайла);
			НадоОбновитьДанныеКеш = Истина;
		КонецЦикла;	 	
		
	КонецЦикла;	 
	
	Для Каждого Элем Из ДанныеИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[Элем["ДанныеСценария"]["UID"]];
		ЭтоНовыйЭлемент = (Элем["ЭтоНовыйЭлемент"] = Истина);
		
		ЕстьПометкаНаУдаление = (КешСценариевСПометкойУдаления[Элем["ДанныеСценария"]["UID"]] <> Неопределено);
		
		Если ЕстьПометкаНаУдаление Тогда
			Продолжить;
		КонецЕсли;	 
		
		СценарийПеремещен = Ложь;
		Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
			СценарийПеремещен = Истина;
			НадоОбновитьДанныеКеш = Истина;
		КонецЕсли;	 
		
		Если НЕ ЭтоНовыйЭлемент Тогда
			ТекущиеДанныеСценарияВРепозитории = ДанныеСценарияИзРепозиторияСлужебный(
			ДанныеПодключения.Проект,
			ДанныеСценарияИзКеш,
			ДанныеПодключения.ТокенПользователя,
			ДанныеПодключения.Ветка,
			Соединение,
			ДанныеПодключенияПроекта,
			Неопределено);
			
			Если ТекущиеДанныеСценарияВРепозитории.Ошибка Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при получении текущих данных сценария <%1>.'"), ДанныеСценарияИзКеш.ИмяСценария);
			КонецЕсли;	 	
			
			//Проверка изменения текста сценария
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ТекущиеДанныеСценарияВРепозитории.ДвоичныеДанныеТекстСценария.ОткрытьПотокДляЧтения(),"UTF-8");
			ТекущийТекстСценарияВРепозитории = Текст.Прочитать();
			Текст.Закрыть();
		Иначе
			ТекущийТекстСценарияВРепозитории = "";
			
		КонецЕсли;	 
		
		
		Если НЕ ЭтоНовыйЭлемент И НЕ ДанныеФиксацииИзменений.СоздатьМерджРеквест
			И ТекущийТекстСценарияВРепозитории <> Элем["ИсходныйТекстСценария"] Тогда
			// Для мерджреквеста не нужно проверять, что кто-то мог поменять файл в ветке, пока редактировался сценарий.
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Текст сценария <%1> уже был изменен в ветке <%2>. Вы можете создать запрос на слияние или отменить изменения.'"), ДанныеСценарияИзКеш.ИмяСценария, ВеткаСтрокой);
		КонецЕсли;	 
		
		ФайлСценария = Неопределено;
		ФайлКаталогСценария = Неопределено;
		
		Если ЭтоНовыйЭлемент ИЛИ ТекущийТекстСценарияВРепозитории <> Элем["ТекстСценария"] ИЛИ СценарийПеремещен Тогда
			ИмяФайлаТекстаСценария = СтрЗаменить(ДанныеСценарияИзКеш.ПолноеИмяФайла, "meta.yaml", "scen.feature");
			ИмяФайлаТекстаСценария
				= ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ИмяФайлаТекстаСценария;
			
			ИзмененияОдногоСценария = Новый Структура;
			Если ЭтоНовыйЭлемент Тогда
				ИзмененияОдногоСценария.Вставить("action", "create");
			Иначе	
				Если СценарийПеремещен Тогда
					ИзмененияОдногоСценария.Вставить("action", "move");
				Иначе	
					ИзмененияОдногоСценария.Вставить("action", "update");
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СценарийПеремещен Тогда
				ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
				ФайлКаталогСценария = Новый Файл(ФайлСценария.Путь);
				ИзмененияОдногоСценария.Вставить("file_path",
					ДанныеПодключенияПроекта.КаталогТестовВРепозитории
						+ "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/" + ФайлКаталогСценария.Имя + "/scen.feature");
				ИзмененияОдногоСценария.Вставить("previous_path", ИмяФайлаТекстаСценария);
			Иначе	
				ИзмененияОдногоСценария.Вставить("file_path", ИмяФайлаТекстаСценария);
			КонецЕсли;	 
			
			ИзмененияОдногоСценария.Вставить("content", Base64ИзТекста(Элем["ТекстСценария"]));
			ИзмененияОдногоСценария.Вставить("encoding", "base64");
			
			Изменения.Добавить(ИзмененияОдногоСценария);
		КонецЕсли;	 
		
		//Проверка изменения метаданных сценария
		ТекстМетаданныеСценария = Элем["ТекстМетаданныеСценария"];
		
		Если ЭтоНовыйЭлемент Тогда
			ТекущийТекстМетаданныеСценарияВРепозитории = "";
		Иначе	
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ТекущиеДанныеСценарияВРепозитории.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),"UTF-8");
			ТекущийТекстМетаданныеСценарияВРепозитории = Текст.Прочитать();
			Текст.Закрыть();
		КонецЕсли;	 
		
		Если НЕ ЭтоНовыйЭлемент И НЕ ДанныеФиксацииИзменений.СоздатьМерджРеквест
			И Элем["ОригинальныйТекстМетаданныеСценария"] <> ТекущийТекстМетаданныеСценарияВРепозитории Тогда
			// Для мерджреквеста не нужно проверять, что кто-то мог поменять файл в ветке, пока редактировался сценарий.
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Метаданные сценария <%1> уже были изменены в ветке <%2>. Вы можете создать запрос на слияние или отменить изменения.'"), ДанныеСценарияИзКеш.ИмяСценария, ВеткаСтрокой);
		КонецЕсли;	 
		
		Если ЭтоНовыйЭлемент ИЛИ ТекстМетаданныеСценария <> ТекущийТекстМетаданныеСценарияВРепозитории ИЛИ СценарийПеремещен Тогда
			Если ДанныеСценарияИзКеш.ИмяСценария <> Элем["ДанныеСценария"]["Имя"] Тогда
				НадоОбновитьДанныеКеш = Истина;
				ДанныеСценарияИзКеш.ИмяСценария = Элем["ДанныеСценария"]["Имя"];
			ИначеЕсли ДанныеСценарияИзКеш.UIDОтветственный <> Элем["ДанныеСценария"]["ДанныеСценарияИзКеш.UIDОтветственный"] Тогда
				НадоОбновитьДанныеКеш = Истина;
				ДанныеСценарияИзКеш.UIDОтветственный = Элем["ДанныеСценария"]["UIDОтветственный"];
			КонецЕсли;	 
			
			ИзмененияОдногоСценария = Новый Структура;
			Если ЭтоНовыйЭлемент Тогда
				ИзмененияОдногоСценария.Вставить("action", "create");
			Иначе	
				Если СценарийПеремещен Тогда
					ИзмененияОдногоСценария.Вставить("action", "move");
				Иначе	
					ИзмененияОдногоСценария.Вставить("action", "update");
				КонецЕсли;	 
			КонецЕсли;
			Если СценарийПеремещен Тогда
				ИзмененияОдногоСценария.Вставить("file_path",
					ДанныеПодключенияПроекта.КаталогТестовВРепозитории
						+ "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/" + ФайлКаталогСценария.Имя + "/meta.yaml");
				ИзмененияОдногоСценария.Вставить("previous_path",
					ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.ПолноеИмяФайла);
			Иначе	
				ИзмененияОдногоСценария.Вставить("file_path",
					ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.ПолноеИмяФайла);
			КонецЕсли;	 
			ИзмененияОдногоСценария.Вставить("content", Base64ИзТекста(ТекстМетаданныеСценария));
			ИзмененияОдногоСценария.Вставить("encoding", "base64");
			
			Изменения.Добавить(ИзмененияОдногоСценария);
			
			Если СценарийПеремещен Тогда
				// надо переместить присоединенные файлы и файлы настроек сценариев, которые не изменялись
				ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
				Путь = ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + СтрЗаменить(ФайлСценария.Путь, "\", "/");
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Соединение", Соединение);
				СтруктураПараметров.Вставить("Ветка", ДанныеПодключения.Ветка);
				СтруктураПараметров.Вставить("ТокенПользователя", ДанныеПодключения.ТокенПользователя);
				СтруктураПараметров.Вставить("ИдентификаторКоммита", ДанныеПодключения.ИдентификаторКоммита);
				СтруктураПараметров.Вставить("ДанныеПодключенияПроекта", ДанныеПодключенияПроекта);
				
				СписокФайловВКаталогеСценария = СписокФайловВКаталогеРепозитория(СтруктураПараметров, Путь, Истина);
				
				Для Каждого ТекФайл Из СписокФайловВКаталогеСценария Цикл
					Если ТекФайл.type = "tree" Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если НРег(ТекФайл.name) = "meta.yaml" Тогда
						Продолжить;
					ИначеЕсли НРег(ТекФайл.name) = "scen.feature" Тогда
						Продолжить;
					КонецЕсли;	 
					
					ЭтоИзменныйФайл = Ложь;
					Для Каждого ДанныеИзмененногоФайла Из ДанныеИзмененныхСценариев.ИзмененныеФайлы Цикл
						Если ДанныеИзмененногоФайла.UIDСценария = ДанныеСценарияИзКеш.UID Тогда
							Если ДанныеИзмененногоФайла.ПутьВРепозитории = (Путь + "files/" + ТекФайл.name) Тогда
								ЭтоИзменныйФайл = Истина;
								Прервать;
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЦикла;	 
					
					Если ЭтоИзменныйФайл Тогда
						Продолжить;
					КонецЕсли;	 
					
					ФайлНастройки = Новый Файл(ТекФайл.path);
					ФайлКаталогНастройки = Новый Файл(ФайлНастройки.Путь);
					
					ЭтоИзмененнаяНастройка = Ложь;
					Для Каждого ДанныеИзмененнойНастройки Из ДанныеИзмененныхСценариев.ИзмененныеНастройки Цикл
						Если ФайлКаталогНастройки.Имя <> "test" Тогда
							Продолжить;
						КонецЕсли;	 
						
						Если ДанныеИзмененнойНастройки["ДанныеТеста"]["Код"] = ФайлНастройки.ИмяБезРасширения Тогда
							ЭтоИзмененнаяНастройка = Истина;
							Прервать;
						КонецЕсли;	 
						
					КонецЦикла;	
					
					Если ЭтоИзмененнаяНастройка Тогда
						Продолжить;
					КонецЕсли;	 
					
					ЭтоУдаленнаяНастройка = Ложь;
					Для Каждого ДанныеУдаленнойНастройки Из ДанныеИзмененныхСценариев.УдаленныеНастройки Цикл
						Если ФайлКаталогНастройки.Имя <> "test" Тогда
							Продолжить;
						КонецЕсли;	 
						
						Если ДанныеУдаленнойНастройки.Код = ФайлНастройки.ИмяБезРасширения Тогда
							ЭтоУдаленнаяНастройка = Истина;
							Прервать;
						КонецЕсли;	 
					КонецЦикла;	 

					Если ЭтоУдаленнаяНастройка Тогда
						Продолжить;
					КонецЕсли;	 
					
					Файл = Новый Файл(ТекФайл.path);
					КаталогФайла = Новый Файл(Файл.Путь);
					
					ИзмененияОдногоСценария = Новый Структура;
					ИзмененияОдногоСценария.Вставить("action", "move");
					ИзмененияОдногоСценария.Вставить("previous_path", ТекФайл.path);
					Если КаталогФайла.Имя = "test" Тогда
						ИзмененияОдногоСценария.Вставить("file_path", ДанныеПодключенияПроекта.КаталогТестовВРепозитории
							+ "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/" + ФайлКаталогСценария.Имя + "/test/" + ТекФайл.name);
					Иначе	
						ИзмененияОдногоСценария.Вставить("file_path", ДанныеПодключенияПроекта.КаталогТестовВРепозитории
							+ "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/" + ФайлКаталогСценария.Имя + "/files/" + ТекФайл.name);
					КонецЕсли;	 
					Изменения.Добавить(ИзмененияОдногоСценария);
					КешПеремещенныхФайлов.Вставить(ИзмененияОдногоСценария.previous_path, Истина);
					
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	ФайлСценария = Неопределено;
	ФайлКаталогСценария = Неопределено;
	
	ДанныеСценариевСУдаленнымиИДобавленнымиФайлами = Новый Соответствие;
	
	Для Каждого ДанныеИзмененногоФайла Из ДанныеИзмененныхСценариев.ИзмененныеФайлы Цикл
		ФайлСценария = Неопределено;
		ФайлКаталогСценария = Неопределено;
		
		ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[ДанныеИзмененногоФайла.UIDСценария];
			
		Если ДанныеИзмененногоФайла.Действие = "Удаление" Тогда
			ДанныеЭтогоСценария = ДанныеСценариевСУдаленнымиИДобавленнымиФайлами[ДанныеИзмененногоФайла.UIDСценария];
			Если ДанныеЭтогоСценария = Неопределено Тогда
				ДанныеЭтогоСценария = Новый Структура;
				ДанныеЭтогоСценария.Вставить("КоличествоФайлов", ДанныеИзмененногоФайла.КоличествоФайлов);
				ДанныеЭтогоСценария.Вставить("КоличествоУдаленныхФайлов", 0);
				ДанныеЭтогоСценария.Вставить("КоличествоДобавленныхФайлов", 0);
				
				ДанныеСценариевСУдаленнымиИДобавленнымиФайлами.Вставить(ДанныеИзмененногоФайла.UIDСценария, ДанныеЭтогоСценария);
			КонецЕсли;	 
			
			ДанныеЭтогоСценария.КоличествоУдаленныхФайлов = ДанныеЭтогоСценария.КоличествоУдаленныхФайлов + 1;
			
			ИзмененияОдногоСценария = Новый Структура;
			ИзмененияОдногоСценария.Вставить("action", "delete");
			ИзмененияОдногоСценария.Вставить("file_path", ДанныеИзмененногоФайла.ПутьВРепозитории);
			Изменения.Добавить(ИзмененияОдногоСценария);
		ИначеЕсли ДанныеИзмененногоФайла.Действие = "Добавление" Тогда
			ДанныеЭтогоСценария = ДанныеСценариевСУдаленнымиИДобавленнымиФайлами[ДанныеИзмененногоФайла.UIDСценария];
			Если ДанныеЭтогоСценария = Неопределено Тогда
				ДанныеЭтогоСценария = Новый Структура;
				ДанныеЭтогоСценария.Вставить("КоличествоФайлов", ДанныеИзмененногоФайла.КоличествоФайлов);
				ДанныеЭтогоСценария.Вставить("КоличествоУдаленныхФайлов", 0);
				ДанныеЭтогоСценария.Вставить("КоличествоДобавленныхФайлов", 0);
				
				ДанныеСценариевСУдаленнымиИДобавленнымиФайлами.Вставить(ДанныеИзмененногоФайла.UIDСценария, ДанныеЭтогоСценария);
			КонецЕсли;	 
			
			ДанныеЭтогоСценария.КоличествоДобавленныхФайлов = ДанныеЭтогоСценария.КоличествоДобавленныхФайлов + 1;
			
			Файл = Новый Файл(ДанныеИзмененногоФайла.ПутьЛокально); 
			
			ПутьВРепозитории = ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/"
				+ СтрЗаменить(ДанныеСценарияИзКеш.ПолноеИмяФайла, "/meta.yaml", "") + "/files/" + ДанныеИзмененногоФайла.Наименование;
			
			ИзмененияОдногоСценария = Новый Структура;
			ИзмененияОдногоСценария.Вставить("action", "create");
			ИзмененияОдногоСценария.Вставить("encoding", "base64");
			ИзмененияОдногоСценария.Вставить("content",Base64Строка(ДанныеИзмененногоФайла.ДвоичныеДанные));
			ИзмененияОдногоСценария.Вставить("file_path", ПутьВРепозитории);
			Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
				ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
				ФайлКаталогСценария = Новый Файл(ФайлСценария.Путь);
				ИзмененияОдногоСценария.Вставить("file_path",
					ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/"
					+ ФайлКаталогСценария.Имя + "/files/" + ДанныеИзмененногоФайла.Наименование);
			КонецЕсли;	 
			Изменения.Добавить(ИзмененияОдногоСценария);
		ИначеЕсли ДанныеИзмененногоФайла.Действие = "Изменение" Тогда
			ИзмененияОдногоСценария = Новый Структура;
			
			Если ДанныеИзмененногоФайла.ИзмененоИмяФайла Тогда
				ИзмененияОдногоСценария.Вставить("action", "move");
				ИзмененияОдногоСценария.Вставить("encoding", "base64");
				ИзмененияОдногоСценария.Вставить("content",Base64Строка(ДанныеИзмененногоФайла.ДвоичныеДанные));
				ИзмененияОдногоСценария.Вставить("previous_path", ДанныеИзмененногоФайла.ПутьВРепозитории);
				
				Файл = Новый Файл(ДанныеИзмененногоФайла.ПутьВРепозитории);
				НовыйПуть = Файл.Путь + ДанныеИзмененногоФайла.Наименование;
				НовыйПуть = СтрЗаменить(НовыйПуть, "\", "/");
				ИзмененияОдногоСценария.Вставить("file_path", НовыйПуть);
				
				Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
					ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
					ФайлКаталогСценария = Новый Файл(ФайлСценария.Путь);
					ИзмененияОдногоСценария.Вставить("action", "move");
					ИзмененияОдногоСценария.Вставить("previous_path", ДанныеИзмененногоФайла.ПутьВРепозитории);
					ИзмененияОдногоСценария.Вставить("file_path",
						ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/"
						+ ФайлКаталогСценария.Имя + "/files/" + ДанныеИзмененногоФайла.Наименование);
				КонецЕсли;	 
				
			Иначе	
				ИзмененияОдногоСценария.Вставить("action", "update");
				ИзмененияОдногоСценария.Вставить("encoding", "base64");
				ИзмененияОдногоСценария.Вставить("content",Base64Строка(ДанныеИзмененногоФайла.ДвоичныеДанные));
				ИзмененияОдногоСценария.Вставить("file_path", ДанныеИзмененногоФайла.ПутьВРепозитории);
				
				Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
					ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
					ФайлКаталогСценария = Новый Файл(ФайлСценария.Путь);
					ИзмененияОдногоСценария.Вставить("action", "move");
					ИзмененияОдногоСценария.Вставить("previous_path", ДанныеИзмененногоФайла.ПутьВРепозитории);
					ИзмененияОдногоСценария.Вставить("file_path",
						ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/"
						+ ФайлКаталогСценария.Имя + "/files/" + ДанныеИзмененногоФайла.Наименование);
				КонецЕсли;	 
				
			КонецЕсли;	 
			
			Изменения.Добавить(ИзмененияОдногоСценария);
		ИначеЕсли ДанныеИзмененногоФайла.ИзмененоИмяФайла Тогда
			ИзмененияОдногоСценария = Новый Структура;
			ИзмененияОдногоСценария.Вставить("action", "move");
			ИзмененияОдногоСценария.Вставить("previous_path", ДанныеИзмененногоФайла.ПутьВРепозитории);
			
			Файл = Новый Файл(ДанныеИзмененногоФайла.ПутьВРепозитории);
			НовыйПуть = Файл.Путь + ДанныеИзмененногоФайла.Наименование;
			НовыйПуть = СтрЗаменить(НовыйПуть, "\", "/");
			ИзмененияОдногоСценария.Вставить("file_path", НовыйПуть);
			
			Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
				ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
				ФайлКаталогСценария = Новый Файл(ФайлСценария.Путь);
				ИзмененияОдногоСценария.Вставить("action", "move");
				ИзмененияОдногоСценария.Вставить("previous_path", ДанныеИзмененногоФайла.ПутьВРепозитории);
				ИзмененияОдногоСценария.Вставить("file_path",
					ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/"
					+ ФайлКаталогСценария.Имя + "/files/" + ДанныеИзмененногоФайла.Наименование);
			КонецЕсли;	 
			
			Изменения.Добавить(ИзмененияОдногоСценария);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого Элем Из ДанныеСценариевСУдаленнымиИДобавленнымиФайлами Цикл
		ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[Элем.Ключ];
		
		Если ДанныеСценарияИзКеш.ЕстьПрисоединенныеФайлы Тогда
			Если Элем.Значение.КоличествоФайлов - Элем.Значение.КоличествоУдаленныхФайлов
					+ Элем.Значение.КоличествоДобавленныхФайлов <= 0 Тогда
				//Значит все файлы удалены
				ДанныеСценарияИзКеш.ЕстьПрисоединенныеФайлы = Ложь;
				НадоОбновитьДанныеКеш = Истина;
			КонецЕсли;	 
		ИначеЕсли Элем.Значение.КоличествоДобавленныхФайлов > 0 Тогда	
			ДанныеСценарияИзКеш.ЕстьПрисоединенныеФайлы = Истина;
			НадоОбновитьДанныеКеш = Истина;
		КонецЕсли;	 
		
	КонецЦикла;	 
	
	КешДанныхНастроекИзРепозитория = Новый Соответствие;
	Если ДанныеИзмененныхСценариев.ИзмененныеНастройки.Количество() > 0 Тогда
		ДанныеДляПолученияНастроек = Новый Структура;
		ДанныеДляПолученияНастроек.Вставить("Соединение", Соединение);
		ДанныеДляПолученияНастроек.Вставить("Проект", ДанныеПодключения.Проект);
		ДанныеДляПолученияНастроек.Вставить("Ветка", ДанныеПодключения.Ветка);
		ДанныеДляПолученияНастроек.Вставить("ТокенПользователя", ДанныеПодключения.ТокенПользователя);
		ДанныеДляПолученияНастроек.Вставить("АдресСлужебныеДанныеСценариев", ДанныеФиксацииИзменений.АдресСлужебныеДанныеСценариев);
		ДанныеДляПолученияНастроек.Вставить("ИдентификаторКоммита", Неопределено);
		ДанныеДляПолученияНастроек.Вставить("ПолучатьДвоичныеДанныеФайлов", Истина);
		
		Для Каждого Элем Из ДанныеИзмененныхСценариев.ИзмененныеНастройки Цикл
			
			ДанныеНастроек = Новый Структура;
			ДанныеНастроек.Вставить("UIDСценария", Элем["ДанныеТеста"]["UIDСценария"]);
			ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[ДанныеНастроек.UIDСценария];
			ДанныеНастроек.Вставить("ПолноеИмяФайла", ДанныеСценарияИзКеш.ПолноеИмяФайла);
			ДанныеДляПолученияНастроек.Вставить("ДанныеДляПолученияНастроек", ДанныеНастроек);
			
			Если КешДанныхНастроекИзРепозитория[ДанныеНастроек.UIDСценария] = Неопределено Тогда
				Если НЕ ДанныеСценарияИзКеш.Свойство("ЭтоНовыйЭлемент")
					ИЛИ (ДанныеСценарияИзКеш.Свойство("ЭтоНовыйЭлемент") И НЕ ДанныеСценарияИзКеш.ЭтоНовыйЭлемент) Тогда
					КешДанныхНастроекИзРепозитория.Вставить(ДанныеНастроек.UIDСценария,
						ДанныеНастроекСценарияИзРепозитория(ДанныеДляПолученияНастроек));
				КонецЕсли;	
			КонецЕсли;	 
			
			ДанныеНастроекСценарияИзРепозитория = КешДанныхНастроекИзРепозитория[ДанныеНастроек.UIDСценария];
			
			UIDНастройки = Элем["ДанныеТеста"]["UID"];
			Если КешНастроекСПометкойУдаления[UIDНастройки] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			ЭтоНоваяНастройка = Ложь;
			Для Каждого ТекНоваяНастройка Из ДанныеИзмененныхСценариев.НовыеНастройки Цикл
				Если ТекНоваяНастройка["ДанныеТеста"]["UID"] = UIDНастройки Тогда
					ЭтоНоваяНастройка = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
			
			Если НЕ ЭтоНоваяНастройка Тогда
				НайденаНастройкаВРепозитории = Ложь;
				ДанныеНастройкиВРепозитории = Неопределено;
				КодНастройки = Элем["ДанныеТеста"]["Код"];
				Для Каждого ТекНастройкаРепозитория Из ДанныеНастроекСценарияИзРепозитория.ДанныеНастроек Цикл
					КодНастройкиРепозитория = СтрЗаменить(ТекНастройкаРепозитория.name, ".yaml", "");
					Если КодНастройкиРепозитория = КодНастройки Тогда
						НайденаНастройкаВРепозитории = Истина;
						ДанныеНастройкиВРепозитории = ТекНастройкаРепозитория;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если НЕ НайденаНастройкаВРепозитории Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не найдены метаданные настройки <%1> для сценария <%2>.'"),КодНастройки, ДанныеСценарияИзКеш.ИмяСценария);
				КонецЕсли;	 
				
				Текст = Новый ЧтениеТекста;
				Текст.Открыть(ДанныеНастройкиВРепозитории.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),"UTF-8");
				ТекущийТекстМетаданныхВРепозитории = Текст.Прочитать();
				Текст.Закрыть();
				
				Если НЕ ДанныеФиксацииИзменений.СоздатьМерджРеквест
					И ТекущийТекстМетаданныхВРепозитории <> Элем["ОригинальныйТекстМетаданныхНастройки"] Тогда
					// Для мерджреквеста не нужно проверять, что кто-то мог поменять файл в ветке, пока редактировался сценарий.
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Метаданные настройки <%1> сценария <%2> уже были изменены в ветке <%3>.'"),
							КодНастройки, ДанныеСценарияИзКеш.ИмяСценария, ВеткаСтрокой);
				КонецЕсли;
						
				Если СокрЛП(ТекущийТекстМетаданныхВРепозитории) = СокрЛП(Элем["ТекстМетаданныхНастройки"]) Тогда
					//Значит эта настройка совпадает с тем что сейчас в репозитории
					Продолжить;
				КонецЕсли;	 		
						
			КонецЕсли;	 
			
			ПолноеИмяФайлаСценария = ДанныеСценариевКеш.UIDCценариев[Элем["ДанныеТеста"]["UIDСценария"]].ПолноеИмяФайла;
			ПолноеИмяФайлаСценария = СтрЗаменить(ПолноеИмяФайлаСценария, "meta.yaml", "");
			
			ИзмененияОдногоСценария = Новый Структура;
			Если ЭтоНоваяНастройка Тогда
				ИзмененияОдногоСценария.Вставить("action", "create");
				ИзмененияОдногоСценария.Вставить("file_path",ДанныеПодключенияПроекта.КаталогТестовВРепозитории
					+ "/" + ПолноеИмяФайлаСценария + "test/" + Элем["ДанныеТеста"]["Код"] + ".yaml");
					
				Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
					ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
					ФайлКаталогСценария = Новый Файл(ФайлСценария.Путь);
					ИзмененияОдногоСценария.Вставить("file_path",
						ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/"
						+ ФайлКаталогСценария.Имя + "/test/" + Элем["ДанныеТеста"]["Код"] + ".yaml");
				КонецЕсли;	 
			Иначе	
				ИзмененияОдногоСценария.Вставить("action", "update");
				ИзмененияОдногоСценария.Вставить("file_path", ДанныеНастройкиВРепозитории.path);
				
				Если ДанныеСценарияИзКеш.Свойство("НовыйПутьВДереве") Тогда
					ФайлСценария = Новый Файл(ДанныеСценарияИзКеш.ПолноеИмяФайла);
					ФайлКаталогСценария = Новый Файл(ФайлСценария.Путь);
					ИзмененияОдногоСценария.Вставить("action", "move");
					ИзмененияОдногоСценария.Вставить("previous_path", ДанныеНастройкиВРепозитории.path);
					ИзмененияОдногоСценария.Вставить("file_path",
						ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/" + ДанныеСценарияИзКеш.НовыйПутьВДереве + "/"
						+ ФайлКаталогСценария.Имя + "/test/" + Элем["ДанныеТеста"]["Код"] + ".yaml");
				КонецЕсли;	 
			КонецЕсли;	 
			ИзмененияОдногоСценария.Вставить("content", Base64ИзТекста(Элем["ТекстМетаданныхНастройки"]));
			ИзмененияОдногоСценария.Вставить("encoding", "base64");
			
			
			Изменения.Добавить(ИзмененияОдногоСценария);
			
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если НадоОбновитьДанныеКеш Тогда
		ТаблицаДанных = Новый ТаблицаЗначений;
		ТаблицаДанных.Колонки.Добавить("ПолноеИмяФайла");
		ТаблицаДанных.Колонки.Добавить("ИмяСценария");
		ТаблицаДанных.Колонки.Добавить("UID");
		ТаблицаДанных.Колонки.Добавить("ЕстьПрисоединенныеФайлы");
		ТаблицаДанных.Колонки.Добавить("UIDОтветственный");
		ТаблицаДанных.Колонки.Добавить("НастройкиСценария");
		
		Для Каждого Элем Из ДанныеСценариевКеш.UIDCценариев Цикл
			Если КешСценариевСПометкойУдаления[Элем.Значение.UID] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			СтрокаТаблицаДанных = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаДанных, Элем.Значение);
			
			Если Элем.Значение.Свойство("НовыйПутьВДереве") Тогда
				ФайлСценария = Новый Файл(СтрокаТаблицаДанных.ПолноеИмяФайла);
				ФайлКаталог = Новый Файл(ФайлСценария.Путь);
				СтрокаТаблицаДанных.ПолноеИмяФайла = Элем.Значение.НовыйПутьВДереве + "/" + ФайлКаталог.Имя + "/meta.yaml";
			КонецЕсли;	 
		КонецЦикла;	 
		
		ТаблицаДанных.Сортировать("ПолноеИмяФайла");
		
		Результат = Новый Массив;
		Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
			ДанныеСценария = Новый Структура("ПолноеИмяФайла, ИмяСценария, UID, ЕстьПрисоединенныеФайлы, UIDОтветственный",
				СтрокаТаблицаДанных.ПолноеИмяФайла,
				СтрокаТаблицаДанных.ИмяСценария,
				СтрокаТаблицаДанных.UID,
				СтрокаТаблицаДанных.ЕстьПрисоединенныеФайлы,
				СтрокаТаблицаДанных.UIDОтветственный);
				
			МассивНастроек = Новый Массив;
			Если СтрокаТаблицаДанных.НастройкиСценария <> Неопределено Тогда
				Для Каждого UIDНастройки Из СтрокаТаблицаДанных.НастройкиСценария Цикл
					Если КешНастроекСПометкойУдаления[UIDНастройки] <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					МассивНастроек.Добавить(UIDНастройки);
				КонецЦикла;	 
			КонецЕсли;	 	
				
			Для Каждого ДанныеНовойНастройки Из ДанныеИзмененныхСценариев.НовыеНастройки Цикл
				Если ДанныеНовойНастройки["ДанныеТеста"]["UIDСценария"] = СтрокаТаблицаДанных.UID Тогда
					UIDНастройки = ДанныеНовойНастройки["ДанныеТеста"]["UID"];
					Если КешНастроекСПометкойУдаления[UIDНастройки] <> Неопределено Тогда
						Продолжить;
					КонецЕсли;	 
					
					Если МассивНастроек.Найти(UIDНастройки) = Неопределено Тогда
						МассивНастроек.Добавить(UIDНастройки);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;	 
			
			Если МассивНастроек.Количество() > 0 Тогда
				ДанныеСценария.Вставить("НастройкиСценария", МассивНастроек);
			КонецЕсли;	 
				
			Результат.Добавить(ДанныеСценария);
		КонецЦикла;	 
		
		ДвоичныеДанныеJson = ДвоичныеДанныеJson(Результат);
		
		ИзмененияОдногоСценария = Новый Структура;
		ИзмененияОдногоСценария.Вставить("action", "update");
		ИзмененияОдногоСценария.Вставить("encoding", "base64");
		ИзмененияОдногоСценария.Вставить("content",Base64Строка(ДвоичныеДанныеJson));
		ИзмененияОдногоСценария.Вставить("file_path", ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/scencache.json");
		Изменения.Добавить(ИзмененияОдногоСценария);
		
	КонецЕсли;	 
	
	Если ДанныеФиксацииИзменений.Свойство("ОбновленныйТекстЭталонныхБаз")
		И ДанныеФиксацииИзменений.ОбновленныйТекстЭталонныхБаз <> Неопределено Тогда
		
		ИмяФайла = ДанныеПодключенияПроекта.КаталогТестовВРепозитории + "/bases.yaml";
		ДанныеФайла = ДанныеФайлаИзРепозитория(Соединение, ДанныеПодключенияПроекта,
			ДанныеПодключения.ТокенПользователя, ДанныеПодключения.Ветка, ИмяФайла, ДанныеПодключения.ИдентификаторКоммита);
			
		Если НЕ ДанныеФайла.Ошибка Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ДанныеФайла.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),"UTF-8");
			ТекущийТекстФайлаЭталонныхБаз = Текст.Прочитать();
			Текст.Закрыть();
			
			Если СокрЛП(ТекущийТекстФайлаЭталонныхБаз) <> СокрЛП(ДанныеФиксацииИзменений.ОбновленныйТекстЭталонныхБаз) Тогда
				ИзмененияФайлаЭталонныхБД = Новый Структура;
				ИзмененияФайлаЭталонныхБД.Вставить("action", "update");
				ИзмененияФайлаЭталонныхБД.Вставить("encoding", "base64");
				ИзмененияФайлаЭталонныхБД.Вставить("content", Base64ИзТекста(ДанныеФиксацииИзменений.ОбновленныйТекстЭталонныхБаз));
				ИзмененияФайлаЭталонныхБД.Вставить("file_path", ИмяФайла);
				Изменения.Добавить(ИзмененияФайлаЭталонныхБД);
			КонецЕсли;	 
		КонецЕсли;	 	
	КонецЕсли;	 
	
	Если Изменения.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет изменений для фиксации в ветке <%1>.'"), ВеткаСтрокой);
	КонецЕсли;	 
	
	КешКонтрольИзменений = Новый Соответствие;
	Для Каждого Элем Из Изменения Цикл
		Если КешКонтрольИзменений[Элем.file_path] <> Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Изменения файла отправляются на сервер несколько раз <%1>.'"), Элем.file_path);
		КонецЕсли;	 
		КешКонтрольИзменений.Вставить(Элем.file_path, Истина);
	КонецЦикла;	 
	
	СтруктураЗаписи.Вставить("actions", Изменения);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗаписи);
	СтрокаJson = ЗаписьJSON.Закрыть();
	
	Адрес = "/api/v4/projects/%ИмяПроекта/repository/commits";
	Адрес = СтрЗаменить(Адрес, "%ИмяПроекта",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
		
	РезультатФиксации = Новый Структура;
	РезультатФиксации.Вставить("Ошибка", Ложь);
	
	Попытка
		ОтветСервера = ЗапросФиксироватьИзменения(Соединение, Адрес, СтрокаJson, ДанныеПодключения.ТокенПользователя);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Если Найти(НРег(ОписаниеОшибки), НРег("A file with this name already exists")) > 0 Тогда
			Для Каждого Элем Из СтруктураЗаписи.actions Цикл
				Если НРег(Элем.action) = НРег("create") ИЛИ НРег(Элем.action) = НРег("move") Тогда
					ОтносительныйПуть = Элем.file_path;
					
					ДанныеФайла = ДанныеФайлаИзРепозитория(
						Соединение,
						ДанныеПодключенияПроекта,
						ДанныеПодключения.ТокенПользователя,
						ДанныеПодключения.Ветка,
						ОтносительныйПуть,
						ДанныеПодключения.ИдентификаторКоммита);
						
					Если НЕ ДанныеФайла.Ошибка Тогда
						// значит такой файл уже есть в репозитории
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ОтносительныйПуть;
					КонецЕсли;	 	
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
		ОтветСервера = Неопределено;
		РезультатФиксации.Вставить("Ошибка", Истина);
		РезультатФиксации.Вставить("ТекстОшибки", ОписаниеОшибки);
	КонецПопытки;
	
	Если РезультатФиксации.Ошибка Тогда
		Возврат РезультатФиксации; 
	КонецЕсли;	 
	
	Если НЕ ДанныеФиксацииИзменений.СоздатьМерджРеквест Тогда
		РезультатФиксации.Вставить("ОтветСервера", ОтветСервера);
		Возврат РезультатФиксации;
	КонецЕсли;	 
	
	// Создаётся запрос на слияние
	СтруктураЗаписи = Новый Структура;

	СтруктураЗаписи.Вставить("id", Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
	СтруктураЗаписи.Вставить("description", ДанныеФиксацииИзменений.ТекстСообщения);
	СтруктураЗаписи.Вставить("title", ДанныеФиксацииИзменений.ЗаголовокЗапросаНаСлияние);
	СтруктураЗаписи.Вставить("assignee_id", ИдентификаторПользователяСистемыКонтроляВерсий(
		АдресПользователяПринимаюшегоЗапрос, Соединение, ДанныеПодключения.ТокенПользователя));
	СтруктураЗаписи.Вставить("remove_source_branch", Истина);
	СтруктураЗаписи.Вставить("source_branch", ДанныеФиксацииИзменений.ИмяВеткиМерджРеквеста);
	СтруктураЗаписи.Вставить("target_branch", ВеткаСтрокой);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗаписи);
	СтрокаJson = ЗаписьJSON.Закрыть();
	
	Адрес = "/api/v4/projects/%ИмяПроекта/merge_requests";
	Адрес = СтрЗаменить(Адрес, "%ИмяПроекта",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
		
	РезультатФиксации = Новый Структура;
	РезультатФиксации.Вставить("Ошибка", Ложь);
		
	Попытка
		ОтветСервера = ЗапросСоздатьЗапросНаСлияниеВеток(Соединение, Адрес, СтрокаJson, ДанныеПодключения.ТокенПользователя);
		РезультатФиксации.Вставить("WebСсылка", ОтветСервера.web_url);
	Исключение
		ОтветСервера = Неопределено;
		РезультатФиксации.Вставить("Ошибка", Истина);
		РезультатФиксации.Вставить("ТекстОшибки", ОписаниеОшибки());
	КонецПопытки;
	
	РезультатФиксации.Вставить("ОтветСервера", ОтветСервера);
	
	Возврат РезультатФиксации;
	
КонецФункции 

// Возвращает двоичные данные файлов сценария работы пользователя из репозитория
// Параметры:
//  ДанныеДляПолученияФайлов - Структура
//
// Возвращаемое значение:
//  Массив
//
Функция ФайлыСценарияИзРепозитория(ДанныеДляПолученияФайлов) Экспорт
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(ДанныеДляПолученияФайлов.АдресСлужебныеДанныеСценариев);
	
	Если ДанныеСценариевКеш = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Проект", ДанныеДляПолученияФайлов.Проект);
		СтруктураПараметров.Вставить("ТокенПользователя", ДанныеДляПолученияФайлов.ТокенПользователя);
		СтруктураПараметров.Вставить("Ветка", ДанныеДляПолученияФайлов.Ветка);
		СтруктураПараметров.Вставить("ИдентификаторКоммита", ДанныеДляПолученияФайлов.ИдентификаторКоммита);
		СтруктураПараметров.Вставить("АдресСлужебныеДанныеСценариев", "");
		СтруктураПараметров.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеДляПолученияФайлов.ДанныеРанееИзмененныхСценариев);
		СлужебныеДанныеСценариев = Тестирование.СлужебныеДанныеСценариев(СтруктураПараметров);
		АдресСлужебныеДанныеСценариев = СлужебныеДанныеСценариев.АдресСлужебныеДанныеСценариев;
		ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
		ДанныеДляПолученияФайлов.АдресСлужебныеДанныеСценариев = АдресСлужебныеДанныеСценариев;
	КонецЕсли;	 
	
	ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[ДанныеДляПолученияФайлов.ДанныеСценария.UIDСценария];
	
	Если НЕ ДанныеСценариевКеш.UIDCценариев[ДанныеДляПолученияФайлов.ДанныеСценария.UIDСценария].ЕстьПрисоединенныеФайлы Тогда
		Возврат Новый Массив;
	КонецЕсли;	 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеСценариевКеш", ДанныеСценариевКеш);
	СтруктураПараметров.Вставить("Проект", ДанныеДляПолученияФайлов.Проект);
	СтруктураПараметров.Вставить("ДанныеСценария", ДанныеДляПолученияФайлов.ДанныеСценария);
	СтруктураПараметров.Вставить("ТокенПользователя", ДанныеДляПолученияФайлов.ТокенПользователя);
	СтруктураПараметров.Вставить("Ветка", ДанныеДляПолученияФайлов.Ветка);
	СтруктураПараметров.Вставить("ИдентификаторКоммита", ДанныеДляПолученияФайлов.ИдентификаторКоммита);
	СтруктураПараметров.Вставить("АдресСлужебныеДанныеСценариев", ДанныеДляПолученияФайлов.АдресСлужебныеДанныеСценариев);
	
	Если ДанныеДляПолученияФайлов.Свойство("ПолучатьДвоичныеДанныеФайлов") Тогда
		СтруктураПараметров.Вставить("ПолучатьДвоичныеДанныеФайлов", ДанныеДляПолученияФайлов.ПолучатьДвоичныеДанныеФайлов);
	КонецЕсли;	 
	
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(ДанныеДляПолученияФайлов.Проект);
	
	СтруктураПараметров.Вставить("ДанныеПодключенияПроекта", ДанныеПодключенияПроекта);
	
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	СтруктураПараметров.Вставить("Соединение", Соединение);
	
	Возврат ФайлыСценарияИзРепозиторияСлужебный(СтруктураПараметров);
КонецФункции	 

// Возвращает данные настроек сценария работы пользователя из репозитория
// Параметры:
//  ДанныеДляПолучения - Структура
//
// Возвращаемое значение:
//  Массив
//
Функция ДанныеНастроекСценарияИзРепозитория(ДанныеДляПолучения) Экспорт
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(ДанныеДляПолучения.АдресСлужебныеДанныеСценариев);
	Если ДанныеСценариевКеш = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Проект", ДанныеДляПолучения.Проект);
		СтруктураПараметров.Вставить("ТокенПользователя", ДанныеДляПолучения.ТокенПользователя);
		СтруктураПараметров.Вставить("Ветка", ДанныеДляПолучения.Ветка);
		СтруктураПараметров.Вставить("ИдентификаторКоммита", ДанныеДляПолучения.ИдентификаторКоммита);
		СтруктураПараметров.Вставить("АдресСлужебныеДанныеСценариев", "");
		СтруктураПараметров.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеДляПолучения.ДанныеРанееИзмененныхСценариев);
		СлужебныеДанныеСценариев = Тестирование.СлужебныеДанныеСценариев(СтруктураПараметров);
		АдресСлужебныеДанныеСценариев = СлужебныеДанныеСценариев.АдресСлужебныеДанныеСценариев;
		ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
		ДанныеДляПолучения.АдресСлужебныеДанныеСценариев = АдресСлужебныеДанныеСценариев;
		ДанныеДляПолучения.ДанныеДляПолученияНастроек.АдресСлужебныеДанныеСценариев = АдресСлужебныеДанныеСценариев;
	КонецЕсли;	 
	
	ДанныеСценарияИзКеш = ДанныеСценариевКеш.UIDCценариев[ДанныеДляПолучения.ДанныеДляПолученияНастроек.UIDСценария];
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДанныеСценариевКеш", ДанныеСценариевКеш);
	СтруктураПараметров.Вставить("Проект", ДанныеДляПолучения.Проект);
	СтруктураПараметров.Вставить("ДанныеДляПолученияНастроек", ДанныеДляПолучения.ДанныеДляПолученияНастроек);
	СтруктураПараметров.Вставить("ТокенПользователя", ДанныеДляПолучения.ТокенПользователя);
	СтруктураПараметров.Вставить("Ветка", ДанныеДляПолучения.Ветка);
	СтруктураПараметров.Вставить("ИдентификаторКоммита", ДанныеДляПолучения.ИдентификаторКоммита);
	СтруктураПараметров.Вставить("АдресСлужебныеДанныеСценариев", ДанныеДляПолучения.АдресСлужебныеДанныеСценариев);
	
	Если ДанныеДляПолучения.Свойство("ПолучатьДвоичныеДанныеФайлов") Тогда
		СтруктураПараметров.Вставить("ПолучатьДвоичныеДанныеФайлов", ДанныеДляПолучения.ПолучатьДвоичныеДанныеФайлов);
	КонецЕсли;	 
	
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(ДанныеДляПолучения.Проект);
	
	СтруктураПараметров.Вставить("ДанныеПодключенияПроекта", ДанныеПодключенияПроекта);
	СтруктураПараметров.Вставить("ПолучатьДвоичныеДанныеФайлов", Истина);
	
	Если ДанныеДляПолучения.Свойство("Соединение") Тогда
		Соединение = ДанныеДляПолучения.Соединение;
	Иначе	
		Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	КонецЕсли;	 
	СтруктураПараметров.Вставить("Соединение", Соединение);
	
	ДанныеДляПолучения.ДанныеДляПолученияНастроек.Вставить("ТолькоМетаданныеСценария", Истина);
	
	ДанныеСценария = ДанныеСценарияИзРепозиторияСлужебный(ДанныеДляПолучения.Проект,
		ДанныеДляПолучения.ДанныеДляПолученияНастроек, ДанныеДляПолучения.ТокенПользователя, ДанныеДляПолучения.Ветка, Соединение,
		ДанныеПодключенияПроекта, ДанныеДляПолучения.ИдентификаторКоммита);
		
	Результат = Новый Структура;	
	Результат.Вставить("ДанныеНастроек", ДанныеНастроекСценарияИзРепозиторияСлужебный(СтруктураПараметров));
	Результат.Вставить("ДанныеСценария", ДанныеСценария);
	Возврат Результат;
КонецФункции	 

// Возвращает данные проекта для работы с git сервером
// Параметры:
//  Проект - Справочник.Проекты
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеПодключенияПроектаКGitСерверу(Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.ХранитьСценарииРаботыПользователейВРепозитории КАК ХранитьСценарииРаботыПользователейВРепозитории,
		|	Проекты.КаталогТестовВРепозитории КАК КаталогТестовВРепозитории,
		|	Проекты.РезультатыВыполненияТестовАдресСервера КАК РедактированиеСценариевВGitАдресСервера,
		|	Проекты.РезультатыВыполненияТестовИмяПроектаНаСервере КАК РедактированиеСценариевВGitИмяПроекта,
		|	Проекты.РезультатыВыполненияТестовТокен КАК РезультатыВыполненияТестовТокен
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Проект); 
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("ХранитьСценарииРаботыПользователейВРепозитории",
			ВыборкаДетальныеЗаписи.ХранитьСценарииРаботыПользователейВРепозитории);
		Структура.Вставить("КаталогТестовВРепозитории",
			ВыборкаДетальныеЗаписи.КаталогТестовВРепозитории);
		Структура.Вставить("РедактированиеСценариевВGitАдресСервера",
			ВыборкаДетальныеЗаписи.РедактированиеСценариевВGitАдресСервера);
		Структура.Вставить("РедактированиеСценариевВGitИмяПроекта",
			ВыборкаДетальныеЗаписи.РедактированиеСценариевВGitИмяПроекта);
		Структура.Вставить("ТокенПроекта",
			ВыборкаДетальныеЗаписи.РезультатыВыполненияТестовТокен);
			
		Если НЕ Структура.ХранитьСценарииРаботыПользователейВРепозитории Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У проекта <%1> не включена опция хранить сценарии работы пользователя в репозитории.'"),Проект);
		КонецЕсли;	 		
				
		Если ПустаяСтрока(Структура.КаталогТестовВРепозитории) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У проекта <%1> не указано значение каталога тестов репозитория.'"),Проект);
		КонецЕсли;	 		
				
		Если ПустаяСтрока(Структура.РедактированиеСценариевВGitАдресСервера) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У проекта <%1> не указано значение адреса git сервера тестов.'"),Проект);
		КонецЕсли;	 
			
		Возврат Структура; 	
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не найдены настройки подключения для проекта <%1>.'"),Проект);

КонецФункции	 

// Возвращает двоичные данные файла из репозитория
// Параметры:
//  ДанныеДляПолученияФайла - Структура
//
// Возвращаемое значение:
//  ДвоичныеДанные
//
Функция ДвоичныеДанныеФайлаИзРепозитория(ДанныеДляПолученияФайла) Экспорт
	Если НЕ ДанныеДляПолученияФайла.Свойство("ДанныеПодключенияПроекта") Тогда
		ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(ДанныеДляПолученияФайла.Проект);
	Иначе	
		ДанныеПодключенияПроекта = ДанныеДляПолученияФайла.ДанныеПодключенияПроекта;
	КонецЕсли;	 
	
	Если НЕ ДанныеДляПолученияФайла.Свойство("Соединение") Тогда
		Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	Иначе	
		Соединение = ДанныеДляПолученияФайла.Соединение;
	КонецЕсли;	 
	
	Результат = ДанныеФайлаИзРепозитория(
		Соединение,
		ДанныеПодключенияПроекта,
		ДанныеДляПолученияФайла.ТокенПользователя,
		ДанныеДляПолученияФайла.Ветка,
		ДанныеДляПолученияФайла.ПутьВРепозитории,
		ДанныеДляПолученияФайла.ИдентификаторКоммита);
		
	Если Результат.Ошибка Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не получилось прочитать двоичные данные файла <%1>.'"), ДанныеДляПолученияФайла.ПутьВРепозитории)
			+ Символы.ПС + Результат.ТекстОшибки;
	КонецЕсли;	 
		
	Возврат Результат.ДвоичныеДанныеФайла;
	
КонецФункции	 

// Возвращает двоичные данные файла из репозитория
// Параметры:
//  ДанныеСценария - Структура
//  АдресСлужебныеДанныеСценариев - Строка
//
Процедура ЗаписатьНовыйСценарийВКеш(ДанныеСценария, АдресСлужебныеДанныеСценариев) Экспорт
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	
	ДанныеСценариевКеш.UIDCценариев.Вставить(ДанныеСценария.UID, ДанныеСценария);
	ДанныеСценариевКеш.КодыСценариев.Вставить(ДанныеСценария.Код, Истина);
	ДанныеСценариевКеш.Снипеты.Вставить(НРег(ДанныеСценария.Снипет), ДанныеСценария.UID);
	
	ПоместитьВоВременноеХранилище(ДанныеСценариевКеш, АдресСлужебныеДанныеСценариев);
КонецПроцедуры

// Возвращает данные для выгрузки сценариев
// Параметры:
//  МассивТестов - Массив
//
Функция ДанныеДляВыгрузки(МассивТестов) Экспорт
	ДанныеДляВыгрузки = Новый Массив;	
	ДополнитьНастройкиЗапускаСценариев(ДанныеДляВыгрузки,МассивТестов);
	ДополнитьНастройкиТестированияПроцессов(ДанныеДляВыгрузки,МассивТестов);
	Возврат ДанныеДляВыгрузки;
КонецФункции	

// Возвращает считанные служебные данные сценариев из репозитория
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция СлужебныеДанныеСценариев(Параметры) Экспорт
	Возврат ТестированиеСлужебныйВызовСервера.СлужебныеДанныеСценариев(Параметры); 
КонецФункции

//Создает новый запрос на слияние по указанным параметрам
//
// Параметры:
//  ДанныеДляСозданияЗапросаНаСлияние - Структура
// 
// Возвращаемое значение:
//   Структура
//
Функция НовыйЗапросНаСлияние(ДанныеДляСозданияЗапросаНаСлияние) Экспорт
	
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(ДанныеДляСозданияЗапросаНаСлияние.Проект);
	
	СтруктураЗаписи = Новый Структура;

	ОтветственныйЗаВетку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляСозданияЗапросаНаСлияние.ВеткаПриемник, "Ответственный");
	АдресПользователяПринимаюшегоЗапрос = ЭлектроннаяПочтаПользователя(ОтветственныйЗаВетку);
	
	Если НЕ ЗначениеЗаполнено(АдресПользователяПринимаюшегоЗапрос) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У пользователя <%1> не указан адрес электронной почты.'"), ОтветственныйЗаВетку);
	КонецЕсли;	 
	
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	
	СтруктураЗаписи.Вставить("id", Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
	СтруктураЗаписи.Вставить("description", ДанныеДляСозданияЗапросаНаСлияние.Описание);
	СтруктураЗаписи.Вставить("title", ДанныеДляСозданияЗапросаНаСлияние.Заголовок);
	СтруктураЗаписи.Вставить("assignee_id", ИдентификаторПользователяСистемыКонтроляВерсий(
		АдресПользователяПринимаюшегоЗапрос, Соединение, ДанныеДляСозданияЗапросаНаСлияние.ТокенПользователя));
	СтруктураЗаписи.Вставить("remove_source_branch", Истина);
	СтруктураЗаписи.Вставить("source_branch", ДанныеДляСозданияЗапросаНаСлияние.ИмяВеткиИсточник);
	СтруктураЗаписи.Вставить("target_branch", ДанныеДляСозданияЗапросаНаСлияние.ИмяВеткиПриемник);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗаписи);
	СтрокаJson = ЗаписьJSON.Закрыть();
	
	Адрес = "/api/v4/projects/%ИмяПроекта/merge_requests";
	Адрес = СтрЗаменить(Адрес, "%ИмяПроекта",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
		
	РезультатФиксации = Новый Структура;
	РезультатФиксации.Вставить("Ошибка", Ложь);
		
	Попытка
		ОтветСервера = ЗапросСоздатьЗапросНаСлияниеВеток(Соединение, Адрес, СтрокаJson, ДанныеДляСозданияЗапросаНаСлияние.ТокенПользователя);
		РезультатФиксации.Вставить("ДанныеЗапросаНаСлияние", ОтветСервера);
	Исключение
		ОтветСервера = Неопределено;
		РезультатФиксации.Вставить("Ошибка", Истина);
		РезультатФиксации.Вставить("ТекстОшибки", ОписаниеОшибки());
	КонецПопытки;
	
	РезультатФиксации.Вставить("ОтветСервера", ОтветСервера);
	
	Возврат РезультатФиксации;
	
КонецФункции	 

//Закрывает запрос на слияние по указанным параметрам
//
// Параметры:
//  ДанныеДляСозданияЗапросаНаСлияние - Структура
// 
// Возвращаемое значение:
//   Структура или Неопределено
//
Функция ЗакрытьЗапросНаСлияние(ДанныеДляСозданияЗапросаНаСлияние) Экспорт
	
	ДанныеПодключенияПроекта = ДанныеПодключенияПроектаКGitСерверу(ДанныеДляСозданияЗапросаНаСлияние.Проект);
	
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("id", Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
	СтруктураЗаписи.Вставить("state_event", "close");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗаписи);
	СтрокаJson = ЗаписьJSON.Закрыть();
	
	Адрес = "/api/v4/projects/%ИмяПроекта/merge_requests/%ИдРеквеста";
	Адрес = СтрЗаменить(Адрес, "%ИмяПроекта",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
	Адрес = СтрЗаменить(Адрес, "%ИдРеквеста", XMLСтрока(ДанныеДляСозданияЗапросаНаСлияние.ИдЗапросаНаСлияние));
		
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("Ошибка", Ложь);
		
	Попытка
		ОтветСервера = ЗапросНаЗакрытиеМерджРеквеста(Соединение, Адрес, СтрокаJson, ДанныеДляСозданияЗапросаНаСлияние.ТокенПользователя);
		РезультатЗакрытия.Вставить("ДанныеЗапросаНаСлияние", ОтветСервера);
	Исключение
		ОтветСервера = Неопределено;
		РезультатЗакрытия.Вставить("Ошибка", Истина);
		РезультатЗакрытия.Вставить("ТекстОшибки", ОписаниеОшибки());
	КонецПопытки;
	
	РезультатЗакрытия.Вставить("ОтветСервера", ОтветСервера);
	
	Возврат РезультатЗакрытия;	
КонецФункции	 

//Возвращает состояние тестирования ветки
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки
// 
// Возвращаемое значение:
//   Перечисление.СостоянияТестированияВетки
//
Функция СостояниеТестированияВетки(Ветка) Экспорт
	
	Если Ветка = Справочники.Ветки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеТестированияВетокСрезПоследних.СостояниеТестирования КАК СостояниеТестирования
		|ИЗ
		|	РегистрСведений.СостояниеТестированияВеток.СрезПоследних(, Ветка = &Ветка) КАК СостояниеТестированияВетокСрезПоследних";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СостояниеТестирования; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	 

// Добавляет сообщение системы взаимодействия указанному объекту
// Параметры:
//  СсылкаНаОбъект - Ссылка
//  ПользовательПолучательСообщения - СправочникСсылка.Пользователи
//  ПользовательАвторСообщения - СправочникСсылка.Пользователи
//  ДатаНачала - Дата
//  ТекстСообщения - Строка
//  ШаблонСообщения - Строка
//
Процедура ДобавитьСообщениеПоОбъекту(СсылкаНаОбъект, ПользовательПолучательСообщения, ПользовательАвторСообщения, ДатаНачала, 
									ТекстСообщения, ШаблонСообщения = Неопределено) Экспорт
									
	Попытка
	
		СистемаВзаимодействияДоступна = СистемаВзаимодействия.ИспользованиеДоступно();
		Если НЕ СистемаВзаимодействияДоступна Тогда
			ЗаписьЖурналаРегистрации("ОповещениеСистемыВзаимодействия",
									УровеньЖурналаРегистрации.Ошибка,,,
									НСтр("ru = 'Система взаимодействия недоступна.'"));
			Возврат;
		КонецЕсли;	
		Если ПользовательПолучательСообщения = ПользовательАвторСообщения Тогда
			ЗаписьЖурналаРегистрации("ОповещениеСистемыВзаимодействия",
				УровеньЖурналаРегистрации.Информация,,,
				СтрШаблон(НСтр("ru = 'Сообщение в системе взаимодействия не будет отправлено, т.к. совпадает отправитель и получатель сообщения: <%1>.'"),
					ПользовательПолучательСообщения));
			Возврат;
		КонецЕсли;
		
		ЗаголовокОбсуждения = НСтр("ru='Тестирование'"); 
		Если ШаблонСообщения <> Неопределено Тогда
			ИмеющиесяСообщения = СобщенияПоОбъектуБезОтбораПоЗаголовку(
												 СсылкаНаОбъект,
												 ПользовательПолучательСообщения,
												 ПользовательАвторСообщения,
												 ДатаНачала,
												 ШаблонСообщения);
				
			Если ИмеющиесяСообщения.Количество()>0 Тогда
				ЗаписьЖурналаРегистрации("ОповещениеСистемыВзаимодействия",
					УровеньЖурналаРегистрации.Информация,,,
					СтрШаблон(НСтр("ru = 'Сообщение <%1> в системе взаимодействия не будет отправлено, т.к. уже было такое сообщение, начиная с <%2>.'"), 
						ТекстСообщения, ДатаНачала));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПользовательПолучательСообщения) Тогда					
			РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(СсылкаНаОбъект, 
														 ПользовательПолучательСообщения,
														 ПользовательАвторСообщения,
														 ЗаголовокОбсуждения,
														 ТекстСообщения);
		 Иначе         
			 ДобавитьСообщениеПоОбъектуНикогоНеОповещать(СсылкаНаОбъект, 
														 ПользовательАвторСообщения,
														 ЗаголовокОбсуждения,
														 ТекстСообщения);
		 КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запуск тестирования. Ошибка при работе с системой взаимодействия.'"),
								УровеньЖурналаРегистрации.Ошибка,,
								Неопределено,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
							
КонецПроцедуры 

// Добавляет неконтекстное сообщение системы взаимодействия
// Параметры:
//  ПользовательПолучательСообщения - СправочникСсылка.Пользователи
//  ПользовательАвторСообщения - СправочникСсылка.Пользователи
//  ДатаНачала - Дата
//  ТекстСообщения - Строка
//  ШаблонСообщения - Строка
//
Процедура ДобавитьНеКонтекстноеСообщение(ПользовательПолучательСообщения, ПользовательАвторСообщения, ДатаНачала, 
									ТекстСообщения, ШаблонСообщения = Неопределено) Экспорт
									
	Попытка
		СистемаВзаимодействияДоступна = СистемаВзаимодействия.ИспользованиеДоступно();
		Если НЕ СистемаВзаимодействияДоступна Тогда
			ЗаписьЖурналаРегистрации("ОповещениеСистемыВзаимодействия",
									УровеньЖурналаРегистрации.Ошибка,,,
									НСтр("ru = 'Система взаимодействия недоступна.'"));
			Возврат;
		КонецЕсли;	
		Если ПользовательПолучательСообщения = ПользовательАвторСообщения Тогда
			ЗаписьЖурналаРегистрации("ОповещениеСистемыВзаимодействия",
				УровеньЖурналаРегистрации.Информация,,,
				СтрШаблон(НСтр("ru = 'Сообщение в системе взаимодействия не будет отправлено, т.к. совпадает отправитель и получатель сообщения: <%1>.'"),
					ПользовательПолучательСообщения));
			Возврат;
		КонецЕсли;
		
		Если ШаблонСообщения <> Неопределено Тогда
			ИмеющиесяСообщения = НеКонтекстныеСобщенияБезОтбораПоЗаголовку(
												 ПользовательПолучательСообщения,
												 ПользовательАвторСообщения,
												 ДатаНачала,
												 ШаблонСообщения);
												 
			Если ИмеющиесяСообщения.Количество()>0 Тогда
				ЗаписьЖурналаРегистрации("ОповещениеСистемыВзаимодействия",
					УровеньЖурналаРегистрации.Информация,,,
					СтрШаблон(НСтр("ru = 'Сообщение <%1> в системе взаимодействия не будет отправлено, т.к. уже было такое сообщение, начиная с <%2>.'"), 
						ТекстСообщения, ДатаНачала));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПользовательПолучательСообщения) Тогда					
			РаботаССистемойВзаимодействия.ДобавитьНеконтекстноеСообщение(
														 ПользовательПолучательСообщения,
														 ПользовательАвторСообщения,
														 ТекстСообщения,
														 Неопределено);
		 КонецЕсли;
	 Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запуск тестирования. Ошибка при работе с системой взаимодействия.'"),
								УровеньЖурналаРегистрации.Ошибка,,
								Неопределено,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
	КонецПопытки;
							
КонецПроцедуры 

// Возвращает сообщения системы взаимодействия по указанному объекту согласно переданным параметрам
// Параметры:
//  СсылкаНаОбъект - Ссылка
//  ПользовательПолучательСообщения - СправочникСсылка.Пользователи
//  ПользовательАвторСообщения - СправочникСсылка.Пользователи
//  ДатаНачала - Дата
//  ТекстСообщения - Строка
//
Функция СобщенияПоОбъектуБезОтбораПоЗаголовку(СсылкаНаОбъект, ПользовательПолучательСообщения, ПользовательАвторСообщения, ДатаНачала, ТекстСообщения = Неопределено) Экспорт

	ИдентификаторАдресатаСообщения = РаботаССистемойВзаимодействия.ПользовательДляСистемыВзаимодействия(ПользовательПолучательСообщения);
	ИдентификаторАвтораСообщения = РаботаССистемойВзаимодействия.ПользовательДляСистемыВзаимодействия(ПользовательАвторСообщения);
	
	НавигационнаяСсылкаПредмета = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	КонтекстОбсуждения = Новый КонтекстОбсужденияСистемыВзаимодействия(НавигационнаяСсылкаПредмета);
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия;
	
	ОтборОбсуждений.Групповое = Истина;
	ОтборОбсуждений.КонтекстноеОбсуждение = Истина;
	ОтборОбсуждений.КонтекстОбсуждения = КонтекстОбсуждения;
	ОтборОбсуждений.Отображаемое = Истина;
	ОтборОбсуждений.НаправлениеСортировки = НаправлениеСортировки.Возр;
	ОтборОбсуждений.ДатаНачала = ДатаНачала;
	ОтборОбсуждений.ТекущийПользовательЯвляетсяУчастником = Ложь;
	
	НайденныеОбсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	НайденныеСообщения = Новый Массив;
	Для Каждого Обсуждение из НайденныеОбсуждения Цикл
		ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
		ОтборСообщений.Обсуждение = Обсуждение.Идентификатор;
		ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Убыв;
		
		Сообщения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
		
		Для Каждого Сообщение из Сообщения Цикл

			АдресатВСпискеПолучателей = Ложь;
			Если ИдентификаторАдресатаСообщения <> Неопределено Тогда
				АдресатВСпискеПолучателей = Сообщение.Получатели.Содержит(ИдентификаторАдресатаСообщения);
			КонецЕсли;        
			
			Если Сообщение.Дата >= ДатаНачала 
				И ((ИдентификаторАдресатаСообщения = Неопределено И Сообщение.Получатели.Количество() = 0) ИЛИ АдресатВСпискеПолучателей)
				И (ТекстСообщения = Неопределено ИЛИ СтрНайти(Сообщение.Текст, ТекстСообщения) > 0) Тогда
				НайденныеСообщения.Добавить(Сообщение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат НайденныеСообщения;
КонецФункции

// Возвращает соединение с git сервером
// Параметры:
//  Сервер - Ссылка
//
Функция GitLabСоединение(Сервер) Экспорт
	
	OpenSSL = Новый ЗащищенноеСоединениеOpenSSL;
	Соединение = Новый HTTPСоединение(Сервер,,,,, 10, OpenSSL);
	
	Возврат Соединение;
	
КонецФункции

// Возвращает гиперссылку на запрос на слияние
// Параметры:
//  Сервер - Ссылка
//
Функция ГиперссылкаНаЗапросНаСлияние(Проект, ИдентификаторЗапросаНаСлияние) Экспорт
	
	ДанныеПодключенияПроектаКGitСерверу = Тестирование.ДанныеПодключенияПроектаКGitСерверу(Проект);
	Стр = "https://" + ДанныеПодключенияПроектаКGitСерверу.РедактированиеСценариевВGitАдресСервера + "/"
		+ ДанныеПодключенияПроектаКGitСерверу.РедактированиеСценариевВGitИмяПроекта + "/-/merge_requests/"
		+ СокрЛП(УбратьСлужебныеСимволыИзИдентификатораЗапросаНаСлияние(ИдентификаторЗапросаНаСлияние));
		
	Стр = Тестирование.ЭкранироватьСпецсимволыWeb(Стр);
	Стр = СтрЗаменить(Стр, "%2F", "/");
	
	Возврат Стр;
	
КонецФункции	

// Выполняет экранирование спецсимволов при формировании строке, содержащий обращение ресурсу по http или https
// Параметры:
//  Стр - Строка
//
Функция ЭкранироватьСпецсимволыWeb(Знач Стр) Экспорт
	
	Стр = СтрЗаменить(Стр, "%25", "_ЭкранинированиеСпецимвола1_");
	Стр = СтрЗаменить(Стр, "%23", "_ЭкранинированиеСпецимвола2_");
	Стр = СтрЗаменить(Стр, "%3F", "_ЭкранинированиеСпецимвола3_");
	Стр = СтрЗаменить(Стр, "%26", "_ЭкранинированиеСпецимвола4_");
	Стр = СтрЗаменить(Стр, "%3D", "_ЭкранинированиеСпецимвола5_");
	Стр = СтрЗаменить(Стр, "%20", "_ЭкранинированиеСпецимвола6_");
	Стр = СтрЗаменить(Стр, "%22", "_ЭкранинированиеСпецимвола7_");
	Стр = СтрЗаменить(Стр, "%2F", "_ЭкранинированиеСпецимвола8_");
	Стр = СтрЗаменить(Стр, "%5C", "_ЭкранинированиеСпецимвола9_");
	Стр = СтрЗаменить(Стр, "%3C", "_ЭкранинированиеСпецимвола10_");
	Стр = СтрЗаменить(Стр, "%3E", "_ЭкранинированиеСпецимвола11_");
	Стр = СтрЗаменить(Стр, "%7C", "_ЭкранинированиеСпецимвола12_");
	Стр = СтрЗаменить(Стр, "%2B", "_ЭкранинированиеСпецимвола13_");
	
	Стр = СтрЗаменить(Стр, "%", "%25");
	Стр = СтрЗаменить(Стр, "#", "%23");
	Стр = СтрЗаменить(Стр, "?", "%3F");
	Стр = СтрЗаменить(Стр, "&", "%26");
	Стр = СтрЗаменить(Стр, "=", "%3D");
	Стр = СтрЗаменить(Стр, " ", "%20");
	Стр = СтрЗаменить(Стр, """", "%22");
	Стр = СтрЗаменить(Стр, "/", "%2F");
	Стр = СтрЗаменить(Стр, "\", "%5C");
	Стр = СтрЗаменить(Стр, "<", "%3C");
	Стр = СтрЗаменить(Стр, ">", "%3E");
	Стр = СтрЗаменить(Стр, "|", "%7C");
	Стр = СтрЗаменить(Стр, "+", "%2B");
	
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола1_", "%25");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола2_", "%23");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола3_", "%3F");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола4_", "%26");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола5_", "%3D");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола6_", "%20");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола7_", "%22");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола8_", "%2F");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола9_", "%5C");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола10_", "%3C");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола11_", "%3E");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола12_", "%7C");
	Стр = СтрЗаменить(Стр, "_ЭкранинированиеСпецимвола13_", "%2B");
	
	Возврат Стр;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТипБазыПоУмолчанию()
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСОшибками", "ТипБазыПоУмолчанию",
	                                                                   Перечисления.ТипБазы.Файловый);
КонецФункции	

Функция КаталогИсполняемогоФайла()
	ИсторияКаталогИсполняемогоФайла = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                       "РаботаСОшибками", "КаталогИсполняемогоФайла",Новый Массив);
	
	Если ИсторияКаталогИсполняемогоФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 	
	
	Если ИсторияКаталогИсполняемогоФайла.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ИсторияКаталогИсполняемогоФайла[ИсторияКаталогИсполняемогоФайла.Количество()-1];
КонецФункции	

Функция ПараметрыЭталоннойБазы(ЭталоннаяБаза)
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяБазы",Неопределено);
	Структура.Вставить("ИмяФайлаЭталона",Неопределено);
	Структура.Вставить("Пользователь",Неопределено);
	Структура.Вставить("Пароль",Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭталонныеБазы.Наименование КАК ИмяБазы,
		|	ЭталонныеБазы.ПутьКФайлуВыгрузки КАК ИмяФайлаЭталона,
		|	ЭталонныеБазы.Пользователь,
		|	ЭталонныеБазы.Пароль
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования КАК ЭталонныеБазы
		|ГДЕ
		|	ЭталонныеБазы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭталоннаяБаза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Структура,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Возврат Структура;
КонецФункции	

Функция ОписаниеНастройки(Объект, Настройка, Значение)
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", Объект);
	Элемент.Вставить("Настройка", Настройка);
	Элемент.Вставить("Значение", Значение);
	
	Возврат Элемент;
	
КонецФункции

Функция СборщикСценариев()
	Возврат Обработки.СборкаТекстовСценариев.Создать();
КонецФункции	

Функция ПрисоединенныеФайлы(СценарииПроцесса,Ссылка)
	Массив = Новый Массив;
	
	МассивСценариевДляПолученияФайлов = Новый Массив;
	МассивОбработанныхСценариев = Новый Массив;
	
	Для Каждого СтрокаШагиПроцесса Из СценарииПроцесса Цикл
		Если МассивОбработанныхСценариев.Найти(СтрокаШагиПроцесса.Сценарий) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		МассивСценариевДляПолученияФайлов.Добавить(СтрокаШагиПроцесса.Сценарий);
		Тестирование.ДополнитьВложенныеСценарии(МассивСценариевДляПолученияФайлов,СтрокаШагиПроцесса.Сценарий);
		МассивОбработанныхСценариев.Добавить(СтрокаШагиПроцесса.Сценарий);
	КонецЦикла;	 
	
	МассивСценариевДляПолученияФайлов.Добавить(Ссылка);
	
	ДанныеФайлов = Тестирование.ДанныеФайлов(МассивСценариевДляПолученияФайлов);
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеФайла.Файл);
		Массив.Добавить(Новый Структура("ДвоичныеДанныеФайла,Имя,Расширение",
		      ДвоичныеДанныеФайла,ДанныеФайла.Наименование,ДанныеФайла.Расширение));
	КонецЦикла;	
		  
	Возврат Массив;
КонецФункции	

Функция ЗаполнитьМассивРолей(СценарииПроцесса)
	МассивСценариев = Новый Массив;
	
	Для Каждого СтрокаШагиПроцесса Из СценарииПроцесса Цикл
		МассивСценариев.Добавить(СтрокаШагиПроцесса.Сценарий);
	КонецЦикла;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииРаботыПользователей.ПрофильПользователя КАК ПрофильПользователя
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
		|ГДЕ
		|	СценарииРаботыПользователей.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивСценариев);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПрофильПользователя");
КонецФункции

Процедура ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры)
	ТестированиеГрафическиеСхемыСервер.ТекстФорматированныйТекстСценарияИзОбычногоТекста(ТекстСценария,
	                 ФД,Неопределено,Неопределено,ДополнительныеПараметры);
КонецПроцедуры

Функция ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры)
	Возврат ТестированиеГрафическиеСхемыСервер.ОбычныйТекстСценарияИзФорматированногоДокумента(ФД,ДополнительныеПараметры);
КонецФункции	

Функция ОбъектнуюМодельТекстыСценариевСервер(Процесс,ПараметрыФормированияТекстаСценария)
	Возврат ТестированиеГрафическиеСхемыСервер.ДанныеДляТекстаСценарияПроцесса(Процесс,
		ПараметрыФормированияТекстаСценария);
КонецФункции	

Функция ПараметрыСценарияРаботыПользователейИзНастройкиЗапуска(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка КАК Ссылка,
		|	СценарииРаботыПользователейПараметрыВходящие.НомерСтроки КАК НомерСтроки,
		|	СценарииРаботыПользователейПараметрыВходящие.Имя КАК Имя,
		|	СценарииРаботыПользователейПараметрыВходящие.Значение КАК Значение,
		|	СценарииРаботыПользователейПараметрыВходящие.ФО КАК ФО,
		|	СценарииРаботыПользователейПараметрыВходящие.ТипПараметра КАК ТипПараметра,
		|	СценарииРаботыПользователейПараметрыВходящие.ИсходящийПараметр КАК ИсходящийПараметр
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ПараметрыВходящие КАК СценарииРаботыПользователейПараметрыВходящие
		|ГДЕ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	 

Функция ДанныеВеткиРепозитория(Соединение, ДанныеПодключенияПроекта, ТокенПользователя, ИмяВеткиСтрокой)
	Ресурс = "/api/v4/projects/%ИмяПроекта/repository/branches/%ИмяВетки";
	Ресурс = СтрЗаменить(Ресурс, "%ИмяПроекта",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
		
	Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", Тестирование.ЭкранироватьСпецсимволыWeb(ИмяВеткиСтрокой));
	
	Результат = Новый Структура;	
	Результат.Вставить("Ошибка", Ложь);
	
	ИменаСвойствСоЗначениямиДата = Новый Массив;
	ИменаСвойствСоЗначениямиДата.Добавить("authored_date");
	ИменаСвойствСоЗначениямиДата.Добавить("committed_date");
	ИменаСвойствСоЗначениямиДата.Добавить("created_at");
	
	
	Попытка
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ТокенПользователя,, ИменаСвойствСоЗначениямиДата);
	Исключение
		ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОшибкаКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение данных ветки из репозитория'"),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ИмяВеткиСтрокой + Символы.ПС + ДанныеОшибки);
			
		Результат.Вставить("Ошибка", Истина);	
		Результат.Вставить("ТекстОшибки", ОшибкаКратко);	
		Возврат Результат; 	
	КонецПопытки;
	
	Результат.Вставить("ДанныеВетки", ТекущийОтвет);
	
	Возврат Результат; 
КонецФункции	 

Функция ДвоичныеДанныеФайлаИерархии(ДанныеПодключенияПроекта, ТокенПользователя, Ветка, ИдентификаторКоммита)
	Соединение = GitLabСоединение(ДанныеПодключенияПроекта.РедактированиеСценариевВGitАдресСервера);
	
	ИмяВеткиСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя");
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторКоммита) Тогда
		Ресурс = "/api/v4/projects/%ИмяПроекта/repository/branches/%ИмяВетки";
		Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", Тестирование.ЭкранироватьСпецсимволыWeb(ИмяВеткиСтрокой));
		Ресурс = СтрЗаменить(Ресурс, "%ИмяПроекта",
			Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
		Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", Тестирование.ЭкранироватьСпецсимволыWeb(ИмяВеткиСтрокой));
		
		Результат = Новый Структура;	
		Результат.Вставить("Ошибка", Ложь);
		
		Попытка
			ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ТокенПользователя);
		Исключение
			ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОшибкаКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если Найти(НРег(ОшибкаКратко), НРег("Branch Not Found")) > 0 Тогда
				ОшибкаКратко = СтрШаблон(НСтр("ru = 'Ветка <%1> не найдена в проекте <%2>.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					ИмяВеткиСтрокой, ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта);
			КонецЕсли;	 
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Получение данных иерархии тестов из репозитория'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,,
				ДанныеОшибки);
				
			Результат.Вставить("Ошибка", Истина);	
			Результат.Вставить("ТекстОшибки", ОшибкаКратко);	
			Возврат Результат; 	
		КонецПопытки;
	КонецЕсли;	 
	
	Ресурс = "/api/v4/projects/%ИмяПроекта/repository/files/%ПутьКФайлу?ref=%ИмяВетки";
	Ресурс = СтрЗаменить(Ресурс, "%ИмяПроекта",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
	Ресурс = СтрЗаменить(Ресурс, "%ПутьКФайлу",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.КаталогТестовВРепозитории) + "%2Fscencache.json");
		
	Если ЗначениеЗаполнено(ИдентификаторКоммита) Тогда
		Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", ИдентификаторКоммита);
	Иначе	
		Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", Тестирование.ЭкранироватьСпецсимволыWeb(ИмяВеткиСтрокой));
	КонецЕсли;	 
		
	Результат = Новый Структура;	
	Результат.Вставить("Ошибка", Ложь);
		
	Попытка
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ТокенПользователя);
	Исключение
		ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОшибкаКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение данных иерархии тестов из репозитория'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ДанныеОшибки);
			
		Результат.Вставить("Ошибка", Истина);	
		Результат.Вставить("ТекстОшибки", ОшибкаКратко);	
		Возврат Результат; 	
	КонецПопытки;
	
	ДанныеВеткиРепозитория = ДанныеВеткиРепозитория(Соединение, ДанныеПодключенияПроекта, ТокенПользователя, ИмяВеткиСтрокой);
	Если ДанныеВеткиРепозитория.Ошибка Тогда
		Результат.Вставить("Ошибка", Истина);	
		Результат.Вставить("ТекстОшибки", ДанныеВеткиРепозитория.ТекстОшибки);	
		Возврат Результат; 	
	КонецЕсли;	 
	
	ДвоичныеДанныеФайла = Base64Значение(ТекущийОтвет.content);
	Результат.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
	Результат.Вставить("ИдентификаторКоммита", ДанныеВеткиРепозитория.ДанныеВетки.commit.id);
	Результат.Вставить("ДатаКоммита", ДанныеВеткиРепозитория.ДанныеВетки.commit.committed_date);
	Результат.Вставить("АвторКоммита", ДанныеВеткиРепозитория.ДанныеВетки.commit.committer_name);
	Результат.Вставить("СсылкаНаКоммит", ДанныеВеткиРепозитория.ДанныеВетки.commit.web_url);
	
	Возврат Результат; 
КонецФункции	 

Функция GitLabЗапрос(Соединение, Ресурс, Токен, ПолучениеФайла = Ложь, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = Ресурс;
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
	Исключение
		Если ПолучениеФайла Тогда
			// Если возникло исключение при получении файлов, все равно нужно создавать запись.
			// Случается исключение когда артефакты слишком большие для загрузки (например, в них хранятся базы).
			Возврат Неопределено;
		Иначе
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При запросе: %1
			           |Сервер вернул код состояния: %2'"),
			Запрос.АдресРесурса,
			Ответ.КодСостояния) + Символы.ПС + Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Если ПолучениеФайла Тогда
		ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Ответ = Неопределено;
		Возврат ДвоичныеДанные;
	Иначе	
		СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;	 
	
	Запрос = Неопределено;
	
	Возврат СтрокаJSONВСтруктуру(СтрокаJSON, ИменаСвойствСоЗначениямиДата);
	
КонецФункции

Функция СтрокаJSONВСтруктуру(Значение, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Если ИменаСвойствСоЗначениямиДата = Неопределено Тогда
		ИменаСвойствСоЗначениямиДата = Новый Массив;
	КонецЕсли;	 
	ИменаСвойствСоЗначениямиДата.Добавить("created_at");
	ИменаСвойствСоЗначениямиДата.Добавить("ДатаПоследнейПроверки");
	
	Результат = ПрочитатьJSON(ЧтениеJSON,, ИменаСвойствСоЗначениямиДата);
	
	ИменаСвойствДатаНеопределено = Новый Массив;
	ИменаСвойствДатаНеопределено.Добавить("updated_at");
	ИменаСвойствДатаНеопределено.Добавить("finished_at");
	ИменаСвойствДатаНеопределено.Добавить("started_at");
	ИменаСвойствДатаНеопределено.Добавить("artifacts_expire_at");
	
	РезультатМассив = Новый Массив;
	Если Тип("Структура") = ТипЗнч(Результат) Тогда
		РезультатМассив.Добавить(Результат);
	Иначе 
		РезультатМассив = Результат;
	КонецЕсли;
	Для Каждого ЭлементРезультата Из РезультатМассив Цикл
		Если НЕ Тип("Структура") = ТипЗнч(ЭлементРезультата) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Имя Из ИменаСвойствДатаНеопределено Цикл
			Если ЭлементРезультата.Свойство(Имя) 
				И ЭлементРезультата[Имя] <> Неопределено Тогда
				ЭлементРезультата[Имя] = ПрочитатьДатуJSON(ЭлементРезультата[Имя], ФорматДатыJSON.ISO);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИменаСвойствСоЗначениямиДата = Неопределено;
	ИменаСвойствДатаНеопределено = Неопределено;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеФайлаИзРепозитория(Соединение, ДанныеПодключенияПроекта, ТокенПользователя, Ветка, ОтносительныйПутьКФайлу, ИдентификаторКоммита)
	Ресурс = "/api/v4/projects/%ИмяПроекта/repository/files/%ПутьКФайлу?ref=%ИмяВетки";
	Ресурс = СтрЗаменить(Ресурс, "%ИмяПроекта",
		Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
		
	Ресурс = СтрЗаменить(Ресурс, "%ПутьКФайлу", Тестирование.ЭкранироватьСпецсимволыWeb(ОтносительныйПутьКФайлу));
		
	Если ИдентификаторКоммита = Неопределено Тогда
		ИмяВеткиСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя");
		Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", Тестирование.ЭкранироватьСпецсимволыWeb(ИмяВеткиСтрокой));
	Иначе		
		Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", ИдентификаторКоммита);
	КонецЕсли;	 	
		
	Результат = Новый Структура;	
	Результат.Вставить("Ошибка", Ложь);
		
	Попытка
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ТокенПользователя);
	Исключение
		ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОшибкаКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение данных файла из репозитория'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ДанныеОшибки);
			
		Результат.Вставить("Ошибка", Истина);	
		Результат.Вставить("ТекстОшибки", ОшибкаКратко);	
		Возврат Результат; 	
	КонецПопытки;
	
	ДвоичныеДанныеФайла = Base64Значение(ТекущийОтвет.content);
	Результат.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
	
	Возврат Результат; 
КонецФункции	 

Функция ДанныеСценарияИзРепозиторияСлужебный(Проект, ПараметрыПолученияСценария, ТокенПользователя, Ветка, Соединение, ДанныеПодключенияПроекта, ИдентификаторКоммита)
	Если ПараметрыПолученияСценария.Свойство("ПолноеИмяФайлаСценария") Тогда
		ИмяФайлаМетаданные = ДанныеПодключенияПроекта.КаталогТестовВРепозитории +
			"/" + ПараметрыПолученияСценария.ПолноеИмяФайлаСценария;
	Иначе	
		Если ПараметрыПолученияСценария.Свойство("ПолноеИмяФайла") Тогда
			ПолноеИмяФайла = ПараметрыПолученияСценария.ПолноеИмяФайла;
		Иначе
			АдресСлужебныеДанныеСценариев = ПараметрыПолученияСценария.АдресСлужебныеДанныеСценариев;
			ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
			ПолноеИмяФайла = ДанныеСценариевКеш.UIDCценариев[ПараметрыПолученияСценария.UIDСценария].ПолноеИмяФайла;
		КонецЕсли;	 
		
		ИмяФайлаМетаданные = ДанныеПодключенияПроекта.КаталогТестовВРепозитории +
			"/" + ПолноеИмяФайла;
	КонецЕсли;	 
	РезультатМетаданныеСценария = ДанныеФайлаИзРепозитория(
		Соединение, ДанныеПодключенияПроекта, ТокенПользователя, Ветка, ИмяФайлаМетаданные, ИдентификаторКоммита);
			
	Если ПараметрыПолученияСценария.Свойство("ТолькоМетаданныеСценария")
				И ПараметрыПолученияСценария.ТолькоМетаданныеСценария Тогда
		Возврат РезультатМетаданныеСценария; 
	КонецЕсли;	 	
		
	РезультатТекстСценария = ДанныеФайлаИзРепозитория(
		Соединение, ДанныеПодключенияПроекта, ТокенПользователя, Ветка,
			СтрЗаменить(ИмяФайлаМетаданные, "/meta.yaml", "/scen.feature"), ИдентификаторКоммита);
			
	Если РезультатТекстСценария.Свойство("Ошибка") И РезультатТекстСценария.Ошибка Тогда
		ВызватьИсключение РезультатТекстСценария.ТекстОшибки;
	КонецЕсли;	 		
			
	РезультатМетаданныеСценария.Вставить("ДвоичныеДанныеТекстСценария", РезультатТекстСценария.ДвоичныеДанныеФайла);		
			
	Возврат РезультатМетаданныеСценария; 
КонецФункции	 

Функция ДанныеНастройкиСценарияИзРепозиторияСлужебный(Проект, ДанныеНастройки, ТокенПользователя, Ветка, Соединение, ДанныеПодключенияПроекта, ИдентификаторКоммита)
	Если ДанныеНастройки.Свойство("path") Тогда
		ИмяФайлаМетаданные = ДанныеНастройки.path;
	Иначе	
		ИмяФайлаМетаданные = ДанныеНастройки.ПутьВРепозитории;
	КонецЕсли;	 
	
	РезультатМетаданныеСценария = ДанныеФайлаИзРепозитория(
		Соединение, ДанныеПодключенияПроекта, ТокенПользователя, Ветка, ИмяФайлаМетаданные, ИдентификаторКоммита);
			
	Возврат РезультатМетаданныеСценария; 
КонецФункции	 

Функция ФайлыСценарияИзРепозиторияСлужебный(СтруктураПараметров)
	ПолноеИмяФайла = СтруктураПараметров.ДанныеСценариевКеш.UIDCценариев[СтруктураПараметров.ДанныеСценария.UIDСценария].ПолноеИмяФайла;
	ПутьККаталогуСценария = СтруктураПараметров.ДанныеПодключенияПроекта.КаталогТестовВРепозитории
		+ "/" + СтрЗаменить(ПолноеИмяФайла, "/meta.yaml", "");
		
	ФайлыСценария = Новый Массив;	
		
	ЕстьКаталогСФайлами = Ложь;	
	СписокФайловВКаталогеСценария = СписокФайловВКаталогеРепозитория(СтруктураПараметров, ПутьККаталогуСценария, Ложь);
	Для Каждого ТекФайл Из СписокФайловВКаталогеСценария Цикл
		Если НРег(ТекФайл.name = "files") И НРег(ТекФайл.type = "tree") Тогда
			ЕстьКаталогСФайлами = Истина;	
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если НЕ ЕстьКаталогСФайлами Тогда
		Возврат ФайлыСценария;
	КонецЕсли;	 
	
	ПутьКФайламСценария = ПутьККаталогуСценария + "/files";
	СписокФайловВКаталогеФайлов = СписокФайловВКаталогеРепозитория(СтруктураПараметров, ПутьКФайламСценария, Истина);
	
	Если СтруктураПараметров.Свойство("ПолучатьДвоичныеДанныеФайлов") И СтруктураПараметров.ПолучатьДвоичныеДанныеФайлов Тогда
		Для Каждого ТекФайл Из СписокФайловВКаталогеФайлов Цикл
			СтруктураПараметров.Вставить("ПутьВРепозитории", ТекФайл.path);
			ДвоичныеДанныеФайла = ДвоичныеДанныеФайлаИзРепозитория(СтруктураПараметров);
			ТекФайл.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
		КонецЦикла;	 
	КонецЕсли;	 
	
	Возврат СписокФайловВКаталогеФайлов; 
	
КонецФункции	 

Функция ДанныеНастроекСценарияИзРепозиторияСлужебный(СтруктураПараметров)
	ПолноеИмяФайла =
		СтруктураПараметров.ДанныеСценариевКеш.UIDCценариев[СтруктураПараметров.ДанныеДляПолученияНастроек.UIDСценария].ПолноеИмяФайла;
	ПутьККаталогуСценария = СтруктураПараметров.ДанныеПодключенияПроекта.КаталогТестовВРепозитории
		+ "/" + СтрЗаменить(ПолноеИмяФайла, "/meta.yaml", "");
		
	ПутьКНастройкамСценария = ПутьККаталогуСценария + "/test";
	СписокФайловВКаталогеФайлов = СписокФайловВКаталогеРепозитория(СтруктураПараметров, ПутьКНастройкамСценария, Истина);
	
	Если СтруктураПараметров.Свойство("ПолучатьДвоичныеДанныеФайлов") И СтруктураПараметров.ПолучатьДвоичныеДанныеФайлов Тогда
		Для Каждого ТекФайл Из СписокФайловВКаталогеФайлов Цикл
			СтруктураПараметров.Вставить("ПутьВРепозитории", ТекФайл.path);
			ДвоичныеДанныеФайла = ДвоичныеДанныеФайлаИзРепозитория(СтруктураПараметров);
			ТекФайл.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
		КонецЦикла;	 
	КонецЕсли;	 
	
	Возврат СписокФайловВКаталогеФайлов; 
	
КонецФункции	 

Функция СписокФайловВКаталогеРепозитория(СтруктураПараметров, Путь, ИскатьВПодкаталогах)
	ДанныеПодключенияПроекта = СтруктураПараметров.ДанныеПодключенияПроекта;
	Ветка = СтруктураПараметров.Ветка;
	
	НомерСтраницы = 0;
	
	Результат = Новый Массив;
	
	Пока Истина Цикл
		НомерСтраницы = НомерСтраницы + 1;
		
		Ресурс = "/api/v4/projects/%ИмяПроекта/repository/tree?per_page=100&page=%НомерСтраницы&recursive=%ИскатьВПодкаталогах&ref=%ИмяВетки&path=%Путь";	
		Ресурс = СтрЗаменить(Ресурс, "%ИмяПроекта",
			Тестирование.ЭкранироватьСпецсимволыWeb(ДанныеПодключенияПроекта.РедактированиеСценариевВGitИмяПроекта));
			
		Если ИскатьВПодкаталогах Тогда
			Ресурс = СтрЗаменить(Ресурс, "%ИскатьВПодкаталогах", "true");
		Иначе	
			Ресурс = СтрЗаменить(Ресурс, "%ИскатьВПодкаталогах", "false");
		КонецЕсли;	 
			
		Ресурс = СтрЗаменить(Ресурс, "%НомерСтраницы", XMLСтрока(НомерСтраницы));
		
		Ресурс = СтрЗаменить(Ресурс, "%Путь", СтрЗаменить(Путь, "\", "/"));
			
		ИмяВеткиСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя");
		Если СтруктураПараметров.Свойство("ИдентификаторКоммита")
				И ЗначениеЗаполнено(СтруктураПараметров.ИдентификаторКоммита) Тогда
			Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", СтруктураПараметров.ИдентификаторКоммита);
		Иначе	
			Ресурс = СтрЗаменить(Ресурс, "%ИмяВетки", Тестирование.ЭкранироватьСпецсимволыWeb(ИмяВеткиСтрокой));
		КонецЕсли;	 
		
		ТекущийОтвет = GitLabЗапрос(СтруктураПараметров.Соединение, Ресурс, СтруктураПараметров.ТокенПользователя);
		Если ТипЗнч(ТекущийОтвет) = Тип("Массив") Тогда
			Если ТекущийОтвет.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;	 
			
			Для Каждого Элем Из ТекущийОтвет Цикл
				Результат.Добавить(Элем);
			КонецЦикла;	 
			
			Если ТекущийОтвет.Количество() < 100 Тогда
				Прервать;
			КонецЕсли;	 
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	 

Функция ЗапросФиксироватьИзменения(Соединение, Адрес, СтрокаJsonЗапроса, ТокенПользователя)
	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", ТокенПользователя);
	Запрос.Заголовки.Вставить("Content-Type","application/json");
	Запрос.Заголовки.Вставить("Accept","application/json");
	Запрос.УстановитьТелоИзСтроки(СтрокаJsonЗапроса);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 201 Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При запросе: %1
			           |Сервер вернул код состояния: %2'"),
			Запрос.АдресРесурса,
			Строка(Ответ.КодСостояния) + Символы.ПС + Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	
	Запрос = Неопределено;
	
	Возврат СтрокаJSONВСтруктуру(СтрокаJSON);
КонецФункции 

Функция ИдентификаторПользователяСистемыКонтроляВерсий(email, Соединение, ТокенПользователя)
	Ресурс = "/api/v4/users?search=" + email;
	
	Результат = Новый Структура;	
	Результат.Вставить("Ошибка", Ложь);
		
	Если НЕ ЗначениеЗаполнено(ТокенПользователя) Тогда
		ВызватьИсключение НСтр("ru = 'В персональных настройках не задан токен пользователя.'");
	КонецЕсли;	
	
	Попытка
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ТокенПользователя);
	Исключение
		ДанныеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОшибкаКратко = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение идентификатора пользователя из системы контроля версий.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ДанныеОшибки);
			
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(ТекущийОтвет) = Тип("Массив") Тогда
		Для Каждого Элем Из ТекущийОтвет Цикл
			Возврат Элем.id; 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
	
КонецФункции	 

Функция ЗапросСоздатьЗапросНаСлияниеВеток(Соединение, Адрес, СтрокаJsonЗапроса, Токен)
	
	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Запрос.Заголовки.Вставить("Content-Type","application/json");
	Запрос.Заголовки.Вставить("Accept","application/json");
	Запрос.УстановитьТелоИзСтроки(СтрокаJsonЗапроса);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 201 Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При запросе: %1
			           |Сервер вернул код состояния: %2
					   |%3'"),
			Запрос.АдресРесурса,
			Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	
	Запрос = Неопределено;
	
	Возврат СтрокаJSONВСтруктуру(СтрокаJSON);
	
КонецФункции

Функция ЗапросНаЗакрытиеМерджРеквеста(Соединение, Адрес, СтрокаJsonЗапроса, Токен)
	Запрос = Новый HTTPЗапрос(Адрес);
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	Запрос.Заголовки.Вставить("Content-Type","application/json");
	Запрос.Заголовки.Вставить("Accept","application/json");
	Запрос.УстановитьТелоИзСтроки(СтрокаJsonЗапроса);
	
	Попытка
		Ответ = Соединение.Записать(Запрос);
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При запросе: %1
			           |Сервер вернул код состояния: %2
					   |%3'"),
			Запрос.АдресРесурса,
			Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	
	Запрос = Неопределено;
	
	Возврат СтрокаJSONВСтруктуру(СтрокаJSON);
КонецФункции	

Функция Base64ИзТекста(Текст)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Ложь); 
	ЗТ.Записать(Текст); 
	ЗТ.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписьЖурналаРегистрации(
			СтрШаблон(НСтр("ru = 'Не получилось удалить файл.'"), ),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ОписаниеОшибки());
	КонецПопытки;
		
	Возврат Base64Строка(ДвоичныеДанные); 
	
КонецФункции	 

Функция ДвоичныеДанныеJson(Результат)

	ИмяВременныхФайла = ПолучитьИмяВременногоФайла("json");
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяВременныхФайла, "UTF-8");
	ЗаписатьJSON(ЗаписьJSON, Результат);
	ЗаписьJSON.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременныхФайла);
	УдалитьФайлы(ИмяВременныхФайла);
	
	Возврат ДвоичныеДанные; 
	
КонецФункции	 

Процедура ДополнитьНастройкиЗапускаСценариев(ДанныеДляВыгрузки,МассивТестов)
	ТаблицаНастроекТестов   = Неопределено;
	ТаблицаПараметровТестов = Неопределено;
	ТаблицаТеговТестов = Неопределено;
	ТаблицаНастроекТестов(МассивТестов,ТаблицаНастроекТестов, ТаблицаПараметровТестов, ТаблицаТеговТестов);
	ТаблицаНастроекТестов.Индексы.Добавить("Сценарий");
	
	ОсновныеСценарии = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкиЗапускаСценариев.Сценарий КАК Сценарий
		|ИЗ
		|	Справочник.НастройкиЗапускаСценариев КАК НастройкиЗапускаСценариев
		|ГДЕ
		|	НастройкиЗапускаСценариев.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивТестов);
	
	ОсновныеСценарии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сценарий");
	
	ДополнитьДанныеДляВыгрузкиПоПереданнымСценариям(ДанныеДляВыгрузки,ОсновныеСценарии,
		ТаблицаНастроекТестов,ТаблицаПараметровТестов,ТаблицаТеговТестов);
КонецПроцедуры 

Процедура ДополнитьНастройкиТестированияПроцессов(ДанныеДляВыгрузки,МассивТестов)
	ОсновныеПроцессы = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкиЗапускаПроцессов.Владелец КАК Процесс
		|ИЗ
		|	Справочник.НастройкиЗапускаПроцессов КАК НастройкиЗапускаПроцессов
		|ГДЕ
		|	НастройкиЗапускаПроцессов.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивТестов);
	
	ОсновныеПроцессы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Процесс");
	ТаблицаДанных = ТаблицаДанныхПроцессов(ОсновныеПроцессы);
	СценарииПроцессов = СценарииПроцессов(ТаблицаДанных.ВыгрузитьКолонку("Процесс"));
	ДополнитьДанныеДляВыгрузкиПоПереданнымСценариям(ДанныеДляВыгрузки,СценарииПроцессов,Неопределено,Неопределено,Неопределено);
	
	ДанныеСценариев = Новый Соответствие;
	Для Каждого Элем Из ДанныеДляВыгрузки Цикл
		ДанныеСценариев.Вставить(Элем.Сценарий,Элем);
	КонецЦикла;	 
	
	ТаблицаНастроекПроцессов   = Неопределено;
	ТаблицаПараметровПроцессов = Неопределено;
	ТаблицаТеговТестов = Неопределено;
	ТаблицаНастроекПроцессов(МассивТестов, ТаблицаНастроекПроцессов, ТаблицаПараметровПроцессов, ТаблицаТеговТестов);
	ТаблицаНастроекПроцессов.Индексы.Добавить("Процесс");
	
	БазыДанных = ТаблицаНастроекПроцессов.ВыгрузитьКолонку("ЭталоннаяБаза");
	
	ТаблицаБазДанных = ТаблицаБазДанных(БазыДанных);
	ТаблицаБазДанных.Индексы.Добавить("ЭталоннаяБаза");
	
	ПроцессыДляВыгрузки    = ТаблицаДанных.ВыгрузитьКолонку("Процесс");
	ПараметрыВсехПроцессов = ПараметрыВсехПроцессов(ПроцессыДляВыгрузки);
	ПараметрыВсехПроцессов.Индексы.Добавить("Процесс");
	ПрисоединенныеФайлыПроцессов = ПрисоединенныеФайлыПроцессов(ПроцессыДляВыгрузки);
	ПрисоединенныеФайлыПроцессов.Индексы.Добавить("Процесс");
	
	ТегиВсехПроцессов = ТегиВсехПроцессов(ПроцессыДляВыгрузки, ТаблицаДанных);
	ТегиВсехПроцессов.Индексы.Добавить("ВладелецСвойств");
	
	ШагиПроцессов = ШагиПроцессов(ПроцессыДляВыгрузки);
	ПараметрыШаговПроцессов = ПараметрыШаговПроцессов(ШагиПроцессов);
	
	Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
		ДанныеПроцесса = Новый Структура;
		ДанныеПроцесса.Вставить("ТипЭлементаВыгрузки","Процесс");
		ДанныеПроцесса.Вставить("Процесс",СтрокаТаблицаДанных.Процесс);
		ДанныеПроцесса.Вставить("UID",Строка(СтрокаТаблицаДанных.Процесс.УникальныйИдентификатор()));
		ДанныеПроцесса.Вставить("Код",СтрокаТаблицаДанных.Код);
		ДанныеПроцесса.Вставить("ПолныйКод",СтрокаТаблицаДанных.ПолныйКод);
		ДанныеПроцесса.Вставить("Родители",РодителиПроцесса(СтрокаТаблицаДанных.Процесс));
		
		УровеньОтчета1 = "";
		УровеньОтчета2 = "";
		Если ДанныеПроцесса.Родители.Количество() = 1 Тогда
			УровеньОтчета1 = ДанныеПроцесса.Родители[0];
			УровеньОтчета2 = ДанныеПроцесса.Родители[0];
		ИначеЕсли ДанныеПроцесса.Родители.Количество() > 1 Тогда
			УровеньОтчета1 = ДанныеПроцесса.Родители[0];
			УровеньОтчета2 = ДанныеПроцесса.Родители[1];
		КонецЕсли;	 
		ДанныеПроцесса.Вставить("УровеньОтчета1",УровеньОтчета1);
		ДанныеПроцесса.Вставить("УровеньОтчета2",УровеньОтчета2);
		
		ДанныеПроцесса.Вставить("Проект",СтрокаТаблицаДанных.Проект);
		ДанныеПроцесса.Вставить("ПроектUID",Строка(СтрокаТаблицаДанных.Проект.УникальныйИдентификатор()));
		ДанныеПроцесса.Вставить("ПроцессНаименование",СтрокаТаблицаДанных.ПроцессНаименование);
		ДанныеПроцесса.Вставить("Наименование",СтрокаТаблицаДанных.ПроцессНаименование);
		ДанныеПроцесса.Вставить("UIDОтветственный",Строка(СтрокаТаблицаДанных.ПроцессОтветственный.УникальныйИдентификатор()));
		ДанныеПроцесса.Вставить("Ответственный",СтрокаТаблицаДанных.ПроцессОтветственныйНаименование);
		ДанныеПроцесса.Вставить("ПроектНаименование",СтрокаТаблицаДанных.ПроектНаименование);
		ДанныеПроцесса.Вставить("ОписаниеСценария",Строка(СтрокаТаблицаДанных.Описание));
		
		ПараметрыОдногоПроцесса = ПараметрыВсехПроцессов.НайтиСтроки(
		        Новый Структура("Процесс",СтрокаТаблицаДанных.Процесс));
				
		ТаблицаПараметров = Новый ТаблицаЗначений;
		ТаблицаПараметров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
		ТаблицаПараметров.Колонки.Добавить("Имя"); 
		ТаблицаПараметров.Колонки.Добавить("Значение"); 
		ТаблицаПараметров.Колонки.Добавить("ТипПараметра"); 
		ТаблицаПараметров.Колонки.Добавить("ИсходящийПараметр"); 
		
		Для Каждого Элем Из ПараметрыОдногоПроцесса Цикл
			СтрокаТаблицаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаПараметров,Элем);
		КонецЦикла;	
		
		ТаблицаПараметров.Сортировать("НомерСтроки");
				
		ПараметрыПроцесса = Новый Массив;
		Для Каждого Элем Из ТаблицаПараметров Цикл
			ДанныеПараметра = Новый Структура;
			ДанныеПараметра.Вставить("НомерСтроки",Элем.НомерСтроки);
			ДанныеПараметра.Вставить("Имя",Элем.Имя);
			ДанныеПараметра.Вставить("Значение",Элем.Значение);
			ДанныеПараметра.Вставить("ТипПараметра",Элем.ТипПараметра);
			ДанныеПараметра.Вставить("ИсходящийПараметр",Элем.ИсходящийПараметр);
			
			ПараметрыПроцесса.Добавить(ДанныеПараметра);
		КонецЦикла;	
		
		ДанныеПроцесса.Вставить("ПараметрыПроцесса",ПараметрыПроцесса);
		
		
		
		ТегиОдногоПроцесса = ТегиВсехПроцессов.НайтиСтроки(
		        Новый Структура("ВладелецСвойств",СтрокаТаблицаДанных.Процесс));
				
		ТаблицаТегов = Новый ТаблицаЗначений;
		ТаблицаТегов.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
		ТаблицаТегов.Колонки.Добавить("Имя"); 
		
		НомерСтроки = 0;
		Для Каждого Элем Из ТегиОдногоПроцесса Цикл
			Если Элем.Значение <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицаТегов = ТаблицаТегов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаТегов,Элем);
			СтрокаТаблицаТегов.Имя = Элем.Свойство.Наименование;
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицаТегов.НомерСтроки = НомерСтроки;
		КонецЦикла;	
		
		ТаблицаТегов.Сортировать("НомерСтроки");
				
		ТегиПроцесса = Новый Массив;
		Для Каждого Элем Из ТаблицаТегов Цикл
			ДанныеТега = Новый Структура;
			ДанныеТега.Вставить("НомерСтроки",Элем.НомерСтроки);
			ДанныеТега.Вставить("Имя",Элем.Имя);
			
			ТегиПроцесса.Добавить(ДанныеТега);
		КонецЦикла;	
		
		ДанныеПроцесса.Вставить("ТегиПроцесса",ТегиПроцесса);
		
		ШагиОдногоПроцесса = ШагиПроцессов.НайтиСтроки(
		        Новый Структура("Процесс",СтрокаТаблицаДанных.Процесс));
		ТаблицаШаговПроцесса = Новый ТаблицаЗначений;
		ТаблицаШаговПроцесса.Колонки.Добавить("ШагПроцесса"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("UID"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("Процесс"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("Наименование"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("Сценарий"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("СценарийНаименование"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("СценарийКод"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("ПолныйКод"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("ИсполнительНаименование"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("ТипШага"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("ВложенныйПроцесс"); 
		ТаблицаШаговПроцесса.Колонки.Добавить("ВложенныйПроцессНаименование"); 
		
		Для Каждого Элем Из ШагиОдногоПроцесса Цикл
			СтрокаТаблицаШаговПроцесса = ТаблицаШаговПроцесса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаШаговПроцесса,Элем);
		КонецЦикла;	
		
		ТаблицаШаговПроцесса.Сортировать("ПолныйКод");
				
		ШагиПроцесса = Новый Массив;
		Для Каждого Элем Из ТаблицаШаговПроцесса Цикл
			ДанныеШага = Новый Структура;
			ДанныеШага.Вставить("ШагПроцесса",Элем.ШагПроцесса);
			ДанныеШага.Вставить("UID",Строка(Элем.ШагПроцесса.УникальныйИдентификатор()));
			ДанныеШага.Вставить("Процесс",Элем.Процесс);
			ДанныеШага.Вставить("Наименование",Элем.Наименование);
			ДанныеШага.Вставить("Сценарий",Элем.Сценарий);
			ДанныеШага.Вставить("СценарийНаименование",Элем.СценарийНаименование);
			ДанныеШага.Вставить("СценарийКод",Элем.СценарийКод);
			ДанныеШага.Вставить("СценарийUID",Строка(Элем.Сценарий.УникальныйИдентификатор()));
			ДанныеШага.Вставить("ПолныйКод",Элем.ПолныйКод);
			ДанныеШага.Вставить("ТипШага",Элем.ТипШага);
			ДанныеШага.Вставить("ВложенныйПроцесс",Элем.ВложенныйПроцесс);
			ДанныеШага.Вставить("ВложенныйПроцессНаименование",Элем.ВложенныйПроцессНаименование);
			ДанныеШага.Вставить("ВложенныйПроцессUID",Строка(Элем.ВложенныйПроцесс.УникальныйИдентификатор()));
			Если ЗначениеЗаполнено(Элем.ИсполнительНаименование) Тогда
				ДанныеШага.Вставить("ИсполнительНаименование",Элем.ИсполнительНаименование);
			Иначе
				//берём исполнителя из сценария
				ДанныеСценария = ДанныеСценариев[Элем.Сценарий];
				Если ДанныеСценария <> Неопределено Тогда
					Если ЗначениеЗаполнено(ДанныеСценариев[Элем.Сценарий].ПрофильПользователя) Тогда
						ДанныеШага.Вставить("ИсполнительНаименование",ДанныеСценариев[Элем.Сценарий].ПрофильПользователя);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			//параметры настройки теста
			ТаблицаПараметровШага = Новый ТаблицаЗначений;
			ТаблицаПараметровШага.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
			ТаблицаПараметровШага.Колонки.Добавить("Имя"); 
			ТаблицаПараметровШага.Колонки.Добавить("ЗначениеПоСсылке"); 
			ТаблицаПараметровШага.Колонки.Добавить("ЗначениеПроизвольное"); 
			ТаблицаПараметровШага.Колонки.Добавить("ИмяПараметраПоСсылке"); 
			ТаблицаПараметровШага.Колонки.Добавить("ИсходящийПараметр"); 
			ТаблицаПараметровШага.Колонки.Добавить("ТипПараметра"); 
			ТаблицаПараметровШага.Колонки.Добавить("ШагПроцессаЗначениеПоСсылке"); 
			ТаблицаПараметровШага.Колонки.Добавить("ШагПроцессаЗначениеПоСсылкеUID"); 
			
			ПараметрыШага = Новый Массив;
			ОтборПараметрыШага = ПараметрыШаговПроцессов.НайтиСтроки(
			       Новый Структура("Ссылка",Элем.ШагПроцесса));
			Для Каждого Элем Из ОтборПараметрыШага Цикл
				СтрокаТаблицаПараметров = ТаблицаПараметровШага.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаПараметров,Элем);
			КонецЦикла;	
			ТаблицаПараметровШага.Сортировать("НомерСтроки");
			
			Для Каждого СтрокаТаблицаПараметров Из ТаблицаПараметровШага Цикл
				ПараметрыОдногоШага = Новый Структура;
				ПараметрыОдногоШага.Вставить("Имя",СтрокаТаблицаПараметров.Имя);
				ПараметрыОдногоШага.Вставить("НомерСтроки",СтрокаТаблицаПараметров.НомерСтроки);
				ПараметрыОдногоШага.Вставить("ТипПараметра",СтрокаТаблицаПараметров.ТипПараметра);
				ПараметрыОдногоШага.Вставить("ЗначениеПоСсылке",СтрокаТаблицаПараметров.ЗначениеПоСсылке);
				ПараметрыОдногоШага.Вставить("ЗначениеПроизвольное",СтрокаТаблицаПараметров.ЗначениеПроизвольное);
				ПараметрыОдногоШага.Вставить("ИмяПараметраПоСсылке",СтрокаТаблицаПараметров.ИмяПараметраПоСсылке);
				ПараметрыОдногоШага.Вставить("ИсходящийПараметр",СтрокаТаблицаПараметров.ИсходящийПараметр);
				ПараметрыОдногоШага.Вставить("ШагПроцессаЗначениеПоСсылке",СтрокаТаблицаПараметров.ШагПроцессаЗначениеПоСсылке);
				ПараметрыОдногоШага.Вставить("ШагПроцессаЗначениеПоСсылкеUID",Строка(СтрокаТаблицаПараметров.ШагПроцессаЗначениеПоСсылке.УникальныйИдентификатор()));
				
				ПараметрыШага.Добавить(ПараметрыОдногоШага);
			КонецЦикла;	
			ДанныеШага.Вставить("ПараметрыШага",ПараметрыШага);
			
			ШагиПроцесса.Добавить(ДанныеШага);
		КонецЦикла;	
		
		ДанныеПроцесса.Вставить("ШагиПроцесса",ШагиПроцесса);
		
		ФайлыСценария = Новый Массив;
		ФайлыОдногоСценария = ПрисоединенныеФайлыПроцессов.НайтиСтроки(
		        Новый Структура("Процесс",СтрокаТаблицаДанных.Процесс));
				
		Для Каждого Элем Из ФайлыОдногоСценария Цикл
			ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Элем.Файл);
			ФайлыСценария.Добавить(
			    Новый Структура("ДанныеФайла,Расширение,Наименование",ДанныеФайла,Элем.Расширение,Элем.Наименование));
		КонецЦикла;	
		ДанныеПроцесса.Вставить("ФайлыСценария",ФайлыСценария);
		
		
		НастройкиОдногоПроцесса = ТаблицаНастроекПроцессов.НайтиСтроки(Новый Структура("Процесс",СтрокаТаблицаДанных.Процесс));
		НастройкиСценария = Новый Массив;
		Для Каждого НастройкаПроцесса Из НастройкиОдногоПроцесса Цикл
			ДанныеНастройки = Новый Структура;
			ДанныеНастройки.Вставить("Имя",НастройкаПроцесса.Наименование);
			ДанныеНастройки.Вставить("Код",НастройкаПроцесса.Код);
			ДанныеНастройки.Вставить("Ссылка",НастройкаПроцесса.Ссылка);
			ДанныеНастройки.Вставить("UID",Строка(НастройкаПроцесса.Ссылка.УникальныйИдентификатор()));
			ДанныеНастройки.Вставить("UIDПроцесса",Строка(НастройкаПроцесса.Процесс.УникальныйИдентификатор()));
			ДанныеНастройки.Вставить("ЭталоннаяБаза",НастройкаПроцесса.ЭталоннаяБаза);
			ДанныеНастройки.Вставить("ЭталоннаяБазаНаименование",НастройкаПроцесса.ЭталоннаяБазаНаименование);
			ДанныеНастройки.Вставить("ПроцессНаименование",НастройкаПроцесса.ПроцессНаименование);
			ДанныеНастройки.Вставить("ИдентификаторБазы",НастройкаПроцесса.ИдентификаторБазы);
			ДанныеНастройки.Вставить("Проект",НастройкаПроцесса.Проект);
			ДанныеНастройки.Вставить("ПроектUID",Строка(НастройкаПроцесса.Проект.УникальныйИдентификатор()));
			ДанныеНастройки.Вставить("ПараметрыЗапуска",НастройкаПроцесса.ПараметрыЗапуска);
			
			
			//данные эталонной базы
			ДанныеБазыДанных = Новый Структура;
			ДанныеБазыДанных.Вставить("ПутьКФайлуВыгрузки",СтрЗаменить(НастройкаПроцесса.ПутьКФайлуВыгрузки,"\","\\"));
			
			
			//профили пользователей	   
			ДанныеОднойБазыДанных = ТаблицаБазДанных.НайтиСтроки(
			       Новый Структура("ЭталоннаяБаза",НастройкаПроцесса.ЭталоннаяБаза));
			ДанныеПользователей = Новый Массив;
			Для Каждого Элем Из ДанныеОднойБазыДанных Цикл
				ДанныеПользователя = Новый Структура;
				ДанныеПользователя.Вставить("ПрофильПользователя",Элем.ПрофильПользователя);
				
				ДанныеПользователей.Добавить(ДанныеПользователя);
			КонецЦикла;		   
			ДанныеБазыДанных.Вставить("ДанныеПользователей",ДанныеПользователей);
				   
			ДанныеНастройки.Вставить("ДанныеБазыДанных",ДанныеБазыДанных);
			
			//параметры настройки теста
			ТаблицаПараметров = Новый ТаблицаЗначений;
			ТаблицаПараметров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
			ТаблицаПараметров.Колонки.Добавить("Имя"); 
			ТаблицаПараметров.Колонки.Добавить("Значение"); 
			ТаблицаПараметров.Колонки.Добавить("ТипПараметра"); 
			
			ПараметрыТеста = Новый Массив;
			ОтборПараметрыТеста = ТаблицаПараметровПроцессов.НайтиСтроки(
			       Новый Структура("Ссылка",НастройкаПроцесса.Ссылка));
			Для Каждого Элем Из ОтборПараметрыТеста Цикл
				СтрокаТаблицаПараметров = ТаблицаПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаПараметров,Элем);
			КонецЦикла;	
			ТаблицаПараметров.Сортировать("НомерСтроки");
			
			Для Каждого СтрокаТаблицаПараметров Из ТаблицаПараметров Цикл
				ДанныеПараметраНастройкиТеста = Новый Структура;
				ДанныеПараметраНастройкиТеста.Вставить("Имя",СтрокаТаблицаПараметров.Имя);
				ДанныеПараметраНастройкиТеста.Вставить("НомерСтроки",СтрокаТаблицаПараметров.НомерСтроки);
				ДанныеПараметраНастройкиТеста.Вставить("ТипПараметра",СтрокаТаблицаПараметров.ТипПараметра);
				ДанныеПараметраНастройкиТеста.Вставить("Значение",СтрокаТаблицаПараметров.Значение);
				
				ПараметрыТеста.Добавить(ДанныеПараметраНастройкиТеста);
			КонецЦикла;	
			ДанныеНастройки.Вставить("ПараметрыТеста",ПараметрыТеста);
			
			
			ТаблицаТегов = Новый ТаблицаЗначений;
			ТаблицаТегов.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
			ТаблицаТегов.Колонки.Добавить("Имя"); 
			
			ТегиТеста = Новый Массив;
			ОтборТеги = ТаблицаТеговТестов.НайтиСтроки(
			       Новый Структура("ВладелецСвойств",НастройкаПроцесса.Ссылка));
			НомерСтроки = 0;	   
			Для Каждого Элем Из ОтборТеги Цикл
				Если Элем.Значение <> Истина Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицаТегов = ТаблицаТегов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаТегов,Элем);
				СтрокаТаблицаТегов.Имя = Элем.Свойство.Наименование;
				НомерСтроки = НомерСтроки + 1;
				СтрокаТаблицаТегов.НомерСтроки = НомерСтроки;
			КонецЦикла;	
			ТаблицаТегов.Сортировать("НомерСтроки");
			
			Для Каждого СтрокаТаблицаТегов Из ТаблицаТегов Цикл
				ДанныеТегаНастройкиТеста = Новый Структура;
				ДанныеТегаНастройкиТеста.Вставить("Имя",СтрокаТаблицаТегов.Имя);
				ДанныеТегаНастройкиТеста.Вставить("НомерСтроки",СтрокаТаблицаТегов.НомерСтроки);
				
				ТегиТеста.Добавить(ДанныеТегаНастройкиТеста);
			КонецЦикла;	
			ДанныеНастройки.Вставить("ТегиТеста",ТегиТеста);
			
			НастройкиСценария.Добавить(ДанныеНастройки);
		КонецЦикла;	
		ДанныеПроцесса.Вставить("НастройкиСценария",НастройкиСценария);
		
		ДанныеДляВыгрузки.Добавить(ДанныеПроцесса);
	КонецЦикла;	
	
КонецПроцедуры 

Процедура ТаблицаНастроекТестов(МассивТестов, ТаблицаТестов, ТаблицаПараметровТестов, ТаблицаТеговТестов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаСценариев.Ссылка КАК Ссылка,
		|	НастройкиЗапускаСценариев.Наименование КАК Наименование,
		|	НастройкиЗапускаСценариев.Сценарий КАК Сценарий,
		|	НастройкиЗапускаСценариев.Владелец КАК ЭталоннаяБаза,
		|	НастройкиЗапускаСценариев.Владелец.ПутьКФайлуВыгрузки КАК ПутьКФайлуВыгрузки,
		|	НастройкиЗапускаСценариев.Владелец.Наименование КАК ЭталоннаяБазаНаименование,
		|	НастройкиЗапускаСценариев.Код КАК Код,
		|	НастройкиЗапускаСценариев.Владелец.ИдентификаторБазы КАК ИдентификаторБазы,
		|	НастройкиЗапускаСценариев.Сценарий.Наименование КАК СценарийНаименование,
		|	НастройкиЗапускаСценариев.Сценарий.Владелец КАК Проект,
		|	НастройкиЗапускаСценариев.ПрофильПользователя.Наименование КАК ПрофильПользователя,
		|	НастройкиЗапускаСценариев.ПараметрыЗапуска КАК ПараметрыЗапуска,
		|	НастройкиЗапускаСценариев.Публикуется КАК Публикуется
		|ИЗ
		|	Справочник.НастройкиЗапускаСценариев КАК НастройкиЗапускаСценариев
		|ГДЕ
		|	НастройкиЗапускаСценариев.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивТестов);
	
	ТаблицаТестов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТестов.Колонки.Добавить("ПараметрыТеста");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаСценариевПараметрыТеста.НомерСтроки КАК НомерСтроки,
		|	НастройкиЗапускаСценариевПараметрыТеста.Имя КАК Имя,
		|	НастройкиЗапускаСценариевПараметрыТеста.Значение КАК Значение,
		|	НастройкиЗапускаСценариевПараметрыТеста.ТипПараметра КАК ТипПараметра,
		|	НастройкиЗапускаСценариевПараметрыТеста.Ссылка КАК Ссылка,
		|	НастройкиЗапускаСценариевПараметрыТеста.ИсходящийПараметр КАК ИсходящийПараметр,
		|	НастройкиЗапускаСценариевПараметрыТеста.НесколькоЗначений КАК НесколькоЗначений
		|ИЗ
		|	Справочник.НастройкиЗапускаСценариев.ПараметрыТеста КАК НастройкиЗапускаСценариевПараметрыТеста
		|ГДЕ
		|	НастройкиЗапускаСценариевПараметрыТеста.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивТестов);
	
	ТаблицаПараметровТестов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаТестов.Количество() = 0 Тогда
		ТаблицаТеговТестов = ПустаяТаблицаДопРеквизитов();
	Иначе	
		НаборСвойств = Обработки.СборкаТекстовСценариев.НаборСвойствОбъекта(ТаблицаТестов[0].Проект,
			"НаборСвойствДляНастроекЗапускаСценариевВыгружаемый");
		
		ЗначенияСвойств = УправлениеСвойствами.ЗначенияСвойств(ТаблицаТестов.ВыгрузитьКолонку("Ссылка"),
			Истина, Ложь, НаборСвойств.ВыгрузитьКолонку("Свойство"));
			
		ТаблицаТеговТестов = ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств);	
	КонецЕсли;	 
	
КонецПроцедуры

Процедура ДополнитьДанныеДляВыгрузкиПоПереданнымСценариям(ДанныеДляВыгрузки,ОсновныеСценарии,ТаблицаНастроекТестов,ТаблицаПараметровТестов,ТаблицаТеговТестов)
	ТаблицаДанных = ТаблицаДанныхСценариев(ОсновныеСценарии);
	
	Если ТаблицаНастроекТестов <> Неопределено Тогда
		БазыДанных = ТаблицаНастроекТестов.ВыгрузитьКолонку("ЭталоннаяБаза");
	Иначе	
		БазыДанных = Новый Массив;
	КонецЕсли;
	
	ТаблицаБазДанных = ТаблицаБазДанных(БазыДанных);
	ТаблицаБазДанных.Индексы.Добавить("ЭталоннаяБаза");
	
	СценарииДляВыгрузки    = ТаблицаДанных.ВыгрузитьКолонку("Сценарий");
	ПараметрыВсехСценариев = ПараметрыВсехСценариев(СценарииДляВыгрузки);
	ПараметрыВсехСценариев.Индексы.Добавить("Сценарий");
	
	ТегиВсехСценариев = ТегиВсехСценариев(СценарииДляВыгрузки, ТаблицаДанных);
	ТегиВсехСценариев.Индексы.Добавить("ВладелецСвойств");
	
	ПрисоединенныеФайлыСценариев = ПрисоединенныеФайлыСценариев(СценарииДляВыгрузки);
	ПрисоединенныеФайлыСценариев.Индексы.Добавить("Сценарий");
	
	ВложенныеСценарии = Новый ТаблицаЗначений;
	ВложенныеСценарии.Колонки.Добавить("Шаблон");
	ВложенныеСценарии.Колонки.Добавить("Версия");
	ВложенныеСценарии.Колонки.Добавить("Сценарий");
	ВложенныеСценарии.Колонки.Добавить("ШаблонНаименование");
	ВложенныеСценарии.Колонки.Добавить("СценарийНаименование");
	
	ВложенныеСценарии.Индексы.Добавить("Сценарий");
	ВложенныеСценарии.Индексы.Добавить("Шаблон,Сценарий");
	
	ВложенныеСценарииРекурсивно(СценарииДляВыгрузки,ВложенныеСценарии);
	СценарииВызывающиеПодсценарии = СценарииВызывающиеПодсценарии(ВложенныеСценарии);
	СценарииВызывающиеПодсценарии.Индексы.Добавить("Шаблон");
	
	Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
		ДанныеСценария = Новый Структура;
		ДанныеСценария.Вставить("ТипЭлементаВыгрузки","Сценарий");
		ДанныеСценария.Вставить("Сценарий",СтрокаТаблицаДанных.Сценарий);
		ДанныеСценария.Вставить("UID",Строка(СтрокаТаблицаДанных.Сценарий.УникальныйИдентификатор()));
		ДанныеСценария.Вставить("Код",СтрокаТаблицаДанных.Код);
		ДанныеСценария.Вставить("Родители",РодителиСценария(СтрокаТаблицаДанных.Сценарий));
		
		УровеньОтчета1 = "";
		УровеньОтчета2 = "";
		Если ДанныеСценария.Родители.Количество() = 1 Тогда
			УровеньОтчета1 = ДанныеСценария.Родители[0];
			УровеньОтчета2 = ДанныеСценария.Родители[0];
		ИначеЕсли ДанныеСценария.Родители.Количество() > 1 Тогда
			УровеньОтчета1 = ДанныеСценария.Родители[0];
			УровеньОтчета2 = ДанныеСценария.Родители[1];
		КонецЕсли;	 
		ДанныеСценария.Вставить("УровеньОтчета1",УровеньОтчета1);
		ДанныеСценария.Вставить("УровеньОтчета2",УровеньОтчета2);
		
		ДанныеСценария.Вставить("Проект",СтрокаТаблицаДанных.Проект);
		ДанныеСценария.Вставить("ПроектUID",Строка(СтрокаТаблицаДанных.Проект.УникальныйИдентификатор()));
		ДанныеСценария.Вставить("ПрофильПользователяСсылка",СтрокаТаблицаДанных.ПрофильПользователяСсылка);
		ДанныеСценария.Вставить("ПрофильПользователя",СтрокаТаблицаДанных.ПрофильПользователя);
		ДанныеСценария.Вставить("СценарийНаименование",СтрокаТаблицаДанных.СценарийНаименование);
		ДанныеСценария.Вставить("Наименование",СтрокаТаблицаДанных.СценарийНаименование);
		ДанныеСценария.Вставить("ФункцияСистемыНаименование",СтрокаТаблицаДанных.ФункцияСистемыНаименование);
		ДанныеСценария.Вставить("РазрешеноИспользоватьВДругихФункциях",СтрокаТаблицаДанных.РазрешеноИспользоватьВДругихФункциях);
		ДанныеСценария.Вставить("НеобратимоМеняетДанные",СтрокаТаблицаДанных.НеобратимоМеняетДанные);
		ДанныеСценария.Вставить("UIDОтветственный",Строка(СтрокаТаблицаДанных.СценарийОтветственный.УникальныйИдентификатор()));
		ДанныеСценария.Вставить("UIDРазделПроекта",Строка(СтрокаТаблицаДанных.СценарийРазделПроекта.УникальныйИдентификатор()));
		ДанныеСценария.Вставить("Ответственный",СтрокаТаблицаДанных.СценарийОтветственныйНаименование);
		ДанныеСценария.Вставить("Публикуется",СтрокаТаблицаДанных.СценарийПубликуется);
		ДанныеСценария.Вставить("UIDФункцияСистемы",Строка(СтрокаТаблицаДанных.ФункцияСистемы.УникальныйИдентификатор()));
		ДанныеСценария.Вставить("ПроектНаименование",СтрокаТаблицаДанных.ПроектНаименование);
		ДанныеСценария.Вставить("ТекстСценария",СтрокаТаблицаДанных.ТекстСценария.Получить().ПолучитьТекст());
		Попытка
			ОписаниеСценария = СтрокаТаблицаДанных.ОписаниеСценария.Получить();
			Если ОписаниеСценария <> Неопределено Тогда
				ТекстHTML = "";
				ПростойТекст = ОписаниеСценария.ПолучитьТекст();
				Если НЕ ПустаяСтрока(ПростойТекст) Тогда
					Вложения = Новый Структура;
					ОписаниеСценария.ПолучитьHTML(ТекстHTML, Вложения);
				КонецЕсли;	 
				ДанныеСценария.Вставить("ОписаниеСценария", ТекстHTML);
			Иначе	
				ДанныеСценария.Вставить("ОписаниеСценария","");
			КонецЕсли;	 
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не получилось получить описание у сценария <%1>. Код <%2>.'"),
				СтрокаТаблицаДанных.СценарийНаименование,СтрокаТаблицаДанных.Код);
		КонецПопытки;
		
		
		ВложенныеСценариОдногоСценария = ВложенныеСценарии.НайтиСтроки(
		        Новый Структура("Сценарий",СтрокаТаблицаДанных.Сценарий));
				
		ВложенныеСценарииСценария = Новый Массив;				
		Для Каждого Элем Из ВложенныеСценариОдногоСценария Цикл
			СтруктураВложенногоСценария = Новый Структура;
			СтруктураВложенногоСценария.Вставить("UIDВложенныйСценарий",Строка(Элем.Шаблон.УникальныйИдентификатор()));
			СтруктураВложенногоСценария.Вставить("ИмяСценария",Элем.ШаблонНаименование);
			
			ВложенныеСценарииСценария.Добавить(СтруктураВложенногоСценария);
		КонецЦикла;	
		ДанныеСценария.Вставить("ВложенныеСценарии",ВложенныеСценарииСценария);

		
		
		ВызовыДанногоПодсценария = СценарииВызывающиеПодсценарии.НайтиСтроки(
		        Новый Структура("Шаблон",СтрокаТаблицаДанных.Сценарий));
				
		ВызывающиеСценарии = Новый Массив;
		ТаблицаВызывающиеСценарии = Новый ТаблицаЗначений;
		ТаблицаВызывающиеСценарии.Колонки.Добавить("UIDВызывающийСценарий");
		ТаблицаВызывающиеСценарии.Колонки.Добавить("ИмяСценария");
		Для Каждого Элем Из ВызовыДанногоПодсценария Цикл
			СтрокаТаблицаВызывающиеСценарии = ТаблицаВызывающиеСценарии.Добавить();
			СтрокаТаблицаВызывающиеСценарии.UIDВызывающийСценарий = Строка(Элем.Сценарий.УникальныйИдентификатор());
			СтрокаТаблицаВызывающиеСценарии.ИмяСценария = Элем.СценарийНаименование;
		КонецЦикла;	
		
		ТаблицаВызывающиеСценарии.Сортировать("ИмяСценария");
		Для Каждого СтрокаТаблицаВызывающиеСценарии Из ТаблицаВызывающиеСценарии Цикл
			СтруктураВызывающегоСценария = Новый Структура;
			СтруктураВызывающегоСценария.Вставить("UIDВызывающийСценарий",СтрокаТаблицаВызывающиеСценарии.UIDВызывающийСценарий);
			СтруктураВызывающегоСценария.Вставить("ИмяСценария",СтрокаТаблицаВызывающиеСценарии.ИмяСценария);
			
			ВызывающиеСценарии.Добавить(СтруктураВызывающегоСценария);
		КонецЦикла;	 
		
		ДанныеСценария.Вставить("ВызывающиеСценарии",ВызывающиеСценарии);
		
		ПараметрыОдногоСценария = ПараметрыВсехСценариев.НайтиСтроки(
		        Новый Структура("Сценарий",СтрокаТаблицаДанных.Сценарий));
				
		ТаблицаПараметров = Новый ТаблицаЗначений;
		ТаблицаПараметров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
		ТаблицаПараметров.Колонки.Добавить("Имя"); 
		ТаблицаПараметров.Колонки.Добавить("Значение"); 
		ТаблицаПараметров.Колонки.Добавить("ТипПараметра"); 
		ТаблицаПараметров.Колонки.Добавить("ИсходящийПараметр"); 
		
		Для Каждого Элем Из ПараметрыОдногоСценария Цикл
			СтрокаТаблицаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаПараметров,Элем);
		КонецЦикла;	
		
		ТаблицаПараметров.Сортировать("НомерСтроки");
				
		ПараметрыСценария = Новый Массив;
		Для Каждого Элем Из ТаблицаПараметров Цикл
			ДанныеПараметра = Новый Структура;
			ДанныеПараметра.Вставить("НомерСтроки",Элем.НомерСтроки);
			ДанныеПараметра.Вставить("Имя",Элем.Имя);
			ДанныеПараметра.Вставить("Значение",Элем.Значение);
			ДанныеПараметра.Вставить("ТипПараметра",Элем.ТипПараметра);
			ДанныеПараметра.Вставить("ИсходящийПараметр",Элем.ИсходящийПараметр);
			
			ПараметрыСценария.Добавить(ДанныеПараметра);
		КонецЦикла;	
		
		ДанныеСценария.Вставить("ПараметрыСценария",ПараметрыСценария);
		
		
		
		
		ТегиОдногоСценария = ТегиВсехСценариев.НайтиСтроки(
		        Новый Структура("ВладелецСвойств",СтрокаТаблицаДанных.Сценарий));
				
		ТаблицаТегов = Новый ТаблицаЗначений;
		ТаблицаТегов.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
		ТаблицаТегов.Колонки.Добавить("Имя"); 
		
		НомерСтроки = 0;
		Для Каждого Элем Из ТегиОдногоСценария Цикл
			Если Элем.Значение <> Истина Тогда
				Продолжить;
			КонецЕсли;	 
			
			СтрокаТаблицаТегов = ТаблицаТегов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицаТегов,Элем);
			СтрокаТаблицаТегов.Имя = Элем.Свойство.Наименование;
			НомерСтроки = НомерСтроки + 1;
			СтрокаТаблицаТегов.НомерСтроки = НомерСтроки;
		КонецЦикла;	
		
		ТаблицаТегов.Сортировать("НомерСтроки");
				
		ТегиСценария = Новый Массив;
		Для Каждого Элем Из ТаблицаТегов Цикл
			ДанныеТега = Новый Структура;
			ДанныеТега.Вставить("НомерСтроки",Элем.НомерСтроки);
			ДанныеТега.Вставить("Имя",Элем.Имя);
			
			ТегиСценария.Добавить(ДанныеТега);
		КонецЦикла;	
		
		ДанныеСценария.Вставить("ТегиСценария",ТегиСценария);
		
		
		
		
		ФайлыСценария = Новый Массив;
		
		ФайлыОдногоСценария = ПрисоединенныеФайлыСценариев.НайтиСтроки(
		        Новый Структура("Сценарий",СтрокаТаблицаДанных.Сценарий));
				
		Для Каждого Элем Из ФайлыОдногоСценария Цикл
			ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(Элем.Файл);
			ФайлыСценария.Добавить(
			    Новый Структура("ДанныеФайла,Расширение,Наименование",ДанныеФайла,Элем.Расширение,Элем.Наименование));
		КонецЦикла;	
		ДанныеСценария.Вставить("ФайлыСценария",ФайлыСценария);
		
		Если ТаблицаНастроекТестов <> Неопределено Тогда
			НастройкиОдногоСценария = ТаблицаНастроекТестов.НайтиСтроки(Новый Структура("Сценарий",СтрокаТаблицаДанных.Сценарий));
		Иначе
			НастройкиОдногоСценария = Новый Массив;
		КонецЕсли;	 
		
		НастройкиСценария = Новый Массив;
		Для Каждого НастройкаСценария Из НастройкиОдногоСценария Цикл
			ДанныеНастройки = Новый Структура;
			ДанныеНастройки.Вставить("Имя",НастройкаСценария.Наименование);
			ДанныеНастройки.Вставить("Код",НастройкаСценария.Код);
			ДанныеНастройки.Вставить("Ссылка",НастройкаСценария.Ссылка);
			ДанныеНастройки.Вставить("UID",Строка(НастройкаСценария.Ссылка.УникальныйИдентификатор()));
			ДанныеНастройки.Вставить("UIDСценария",Строка(НастройкаСценария.Сценарий.УникальныйИдентификатор()));
			ДанныеНастройки.Вставить("ЭталоннаяБаза",НастройкаСценария.ЭталоннаяБаза);
			ДанныеНастройки.Вставить("ЭталоннаяБазаНаименование",НастройкаСценария.ЭталоннаяБазаНаименование);
			ДанныеНастройки.Вставить("ПрофильПользователя",НастройкаСценария.ПрофильПользователя);
			ДанныеНастройки.Вставить("СценарийНаименование",НастройкаСценария.СценарийНаименование);
			ДанныеНастройки.Вставить("Проект",НастройкаСценария.Проект);
			ДанныеНастройки.Вставить("ПроектUID",Строка(НастройкаСценария.Проект.УникальныйИдентификатор()));
			ДанныеНастройки.Вставить("ИдентификаторБазы",НастройкаСценария.ИдентификаторБазы);
			ДанныеНастройки.Вставить("Публикуется",НастройкаСценария.Публикуется);
			ДанныеНастройки.Вставить("ПараметрыЗапуска",НастройкаСценария.ПараметрыЗапуска);
			
			
			//данные эталонной базы
			ДанныеБазыДанных = Новый Структура;
			ДанныеБазыДанных.Вставить("ПутьКФайлуВыгрузки",СтрЗаменить(НастройкаСценария.ПутьКФайлуВыгрузки,"\","\\"));
			
			
			//профили пользователей	   
			ДанныеОднойБазыДанных = ТаблицаБазДанных.НайтиСтроки(
			       Новый Структура("ЭталоннаяБаза",НастройкаСценария.ЭталоннаяБаза));
			ДанныеПользователей = Новый Массив;
			Для Каждого Элем Из ДанныеОднойБазыДанных Цикл
				ДанныеПользователя = Новый Структура;
				ДанныеПользователя.Вставить("ПрофильПользователя",Элем.ПрофильПользователя);
				
				ДанныеПользователей.Добавить(ДанныеПользователя);
			КонецЦикла;		   
			ДанныеБазыДанных.Вставить("ДанныеПользователей",ДанныеПользователей);
				   
			ДанныеНастройки.Вставить("ДанныеБазыДанных",ДанныеБазыДанных);
			
			//параметры настройки теста
			ТаблицаПараметров = Новый ТаблицаЗначений;
			ТаблицаПараметров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
			ТаблицаПараметров.Колонки.Добавить("Имя"); 
			ТаблицаПараметров.Колонки.Добавить("Значение"); 
			ТаблицаПараметров.Колонки.Добавить("ТипПараметра"); 
			ТаблицаПараметров.Колонки.Добавить("ИсходящийПараметр"); 
			ТаблицаПараметров.Колонки.Добавить("НесколькоЗначений"); 
			
			ПараметрыТеста = Новый Массив;
			Если ТаблицаПараметровТестов <> Неопределено Тогда
					ОтборПараметрыТеста = ТаблицаПараметровТестов.НайтиСтроки(
					       Новый Структура("Ссылка",НастройкаСценария.Ссылка));
			Иначе			   
				ОтборПараметрыТеста = Новый Массив;
			КонецЕсли;	 
				   
			Для Каждого Элем Из ОтборПараметрыТеста Цикл
				СтрокаТаблицаПараметров = ТаблицаПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаПараметров,Элем);
			КонецЦикла;	
			ТаблицаПараметров.Сортировать("НомерСтроки");
			
			Для Каждого СтрокаТаблицаПараметров Из ТаблицаПараметров Цикл
				ДанныеПараметраНастройкиТеста = Новый Структура;
				ДанныеПараметраНастройкиТеста.Вставить("Имя",СтрокаТаблицаПараметров.Имя);
				ДанныеПараметраНастройкиТеста.Вставить("НомерСтроки",СтрокаТаблицаПараметров.НомерСтроки);
				ДанныеПараметраНастройкиТеста.Вставить("ТипПараметра",СтрокаТаблицаПараметров.ТипПараметра);
				ДанныеПараметраНастройкиТеста.Вставить("Значение",СтрокаТаблицаПараметров.Значение);
				ДанныеПараметраНастройкиТеста.Вставить("ИсходящийПараметр",СтрокаТаблицаПараметров.ИсходящийПараметр);
				ДанныеПараметраНастройкиТеста.Вставить("НесколькоЗначений",СтрокаТаблицаПараметров.НесколькоЗначений);
				
				ПараметрыТеста.Добавить(ДанныеПараметраНастройкиТеста);
			КонецЦикла;	
			ДанныеНастройки.Вставить("ПараметрыТеста",ПараметрыТеста);
			
			
			//теги настройки теста
			ТаблицаТегов = Новый ТаблицаЗначений;
			ТаблицаТегов.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число")); 
			ТаблицаТегов.Колонки.Добавить("Имя"); 
			
			ТегиТеста = Новый Массив;
			ОтборТеги = ТаблицаТеговТестов.НайтиСтроки(
			       Новый Структура("ВладелецСвойств",НастройкаСценария.Ссылка));
			НомерСтроки = 0;	   
			Для Каждого Элем Из ОтборТеги Цикл
				Если Элем.Значение <> Истина Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТаблицаТегов = ТаблицаТегов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицаТегов,Элем);
				СтрокаТаблицаТегов.Имя = Элем.Свойство.Наименование;
				НомерСтроки = НомерСтроки + 1;
				СтрокаТаблицаТегов.НомерСтроки = НомерСтроки;
			КонецЦикла;	
			ТаблицаТегов.Сортировать("НомерСтроки");
			
			Для Каждого СтрокаТаблицаТегов Из ТаблицаТегов Цикл
				ДанныеТегаНастройкиТеста = Новый Структура;
				ДанныеТегаНастройкиТеста.Вставить("Имя",СтрокаТаблицаТегов.Имя);
				ДанныеТегаНастройкиТеста.Вставить("НомерСтроки",СтрокаТаблицаТегов.НомерСтроки);
				
				ТегиТеста.Добавить(ДанныеТегаНастройкиТеста);
			КонецЦикла;	
			ДанныеНастройки.Вставить("ТегиТеста",ТегиТеста);
			
			НастройкиСценария.Добавить(ДанныеНастройки);
		КонецЦикла;	
		ДанныеСценария.Вставить("НастройкиСценария",НастройкиСценария);
		
		ДанныеДляВыгрузки.Добавить(ДанныеСценария);
	КонецЦикла;	
	
КонецПроцедуры 

Функция ТаблицаДанныхПроцессов(ОсновныеПроцессы)
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаДляПолучненияДанныхПроцессов();
	Запрос.УстановитьПараметр("Ссылка", ОсновныеПроцессы);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДанныхПроцессовРекурсивно(ТаблицаДанных);
	
	Возврат ТаблицаДанных; 
КонецФункции	 

Функция СценарииПроцессов(ОсновныеПроцессы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцесса.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ШагиПроцессов
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	ШагиПроцесса.Владелец В(&Процессы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ШагиПроцесса.СценарийРаботыПользователя КАК СценарийРаботыПользователя
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	ШагиПроцесса.Ссылка В
		|			(ВЫБРАТЬ
		|				ШагиПроцессов.Ссылка
		|			ИЗ
		|				ШагиПроцессов)
		|	И ШагиПроцесса.СценарийРаботыПользователя <> ЗНАЧЕНИЕ(Справочник.СценарииРаботыПользователей.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Процессы", ОсновныеПроцессы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СценарийРаботыПользователя");
КонецФункции	

Процедура ТаблицаНастроекПроцессов(МассивТестов, ТаблицаТестов, ТаблицаПараметровПроцессов, ТаблицаТеговТестов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаПроцессов.Ссылка КАК Ссылка,
		|	НастройкиЗапускаПроцессов.Наименование КАК Наименование,
		|	НастройкиЗапускаПроцессов.Код КАК Код,
		|	НастройкиЗапускаПроцессов.Владелец КАК Процесс,
		|	НастройкиЗапускаПроцессов.Владелец.Наименование КАК ПроцессНаименование,
		|	НастройкиЗапускаПроцессов.Владелец.Владелец КАК Проект,
		|	НастройкиЗапускаПроцессов.ЭталоннаяБаза КАК ЭталоннаяБаза,
		|	НастройкиЗапускаПроцессов.ЭталоннаяБаза.Наименование КАК ЭталоннаяБазаНаименование,
		|	НастройкиЗапускаПроцессов.ЭталоннаяБаза.ИдентификаторБазы КАК ИдентификаторБазы,
		|	НастройкиЗапускаПроцессов.ЭталоннаяБаза.ПутьКФайлуВыгрузки КАК ПутьКФайлуВыгрузки,
		|	НастройкиЗапускаПроцессов.ПараметрыЗапуска КАК ПараметрыЗапуска
		|ИЗ
		|	Справочник.НастройкиЗапускаПроцессов КАК НастройкиЗапускаПроцессов
		|ГДЕ
		|	НастройкиЗапускаПроцессов.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивТестов);
	
	ТаблицаТестов = Запрос.Выполнить().Выгрузить();
	
	ТаблицаТестов.Колонки.Добавить("ПараметрыТеста");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаПроцессовПараметрыПроцесса.НомерСтроки КАК НомерСтроки,
		|	НастройкиЗапускаПроцессовПараметрыПроцесса.Имя КАК Имя,
		|	НастройкиЗапускаПроцессовПараметрыПроцесса.Значение КАК Значение,
		|	НастройкиЗапускаПроцессовПараметрыПроцесса.ТипПараметра КАК ТипПараметра,
		|	НастройкиЗапускаПроцессовПараметрыПроцесса.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиЗапускаПроцессов.ПараметрыПроцесса КАК НастройкиЗапускаПроцессовПараметрыПроцесса
		|ГДЕ
		|	НастройкиЗапускаПроцессовПараметрыПроцесса.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", МассивТестов);
	
	ТаблицаПараметровПроцессов = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаТестов.Количество() = 0 Тогда
		ТаблицаТеговТестов = ПустаяТаблицаДопРеквизитов();
	Иначе	
		НаборСвойств = Обработки.СборкаТекстовСценариев.НаборСвойствОбъекта(ТаблицаТестов[0].Проект,
			"НаборСвойствДляНастроекЗапускаПроцессовВыгружаемый");
		
		ЗначенияСвойств = УправлениеСвойствами.ЗначенияСвойств(ТаблицаТестов.ВыгрузитьКолонку("Ссылка"),
			Истина, Ложь, НаборСвойств.ВыгрузитьКолонку("Свойство"));
			
		ТаблицаТеговТестов = ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств);	
	КонецЕсли;	 
	
КонецПроцедуры

Функция ТаблицаБазДанных(БазыДанных)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭталонныеБазыТестированияПользователи.ПрофильПользователя КАК ПрофильПользователяСсылка,
		|	ЭталонныеБазыТестированияПользователи.Логин КАК Логин,
		|	ЭталонныеБазыТестированияПользователи.Пароль КАК Пароль,
		|	ЭталонныеБазыТестированияПользователи.Ссылка КАК ЭталоннаяБаза,
		|	ЭталонныеБазыТестированияПользователи.ПрофильПользователя.Наименование КАК ПрофильПользователя
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования.Пользователи КАК ЭталонныеБазыТестированияПользователи
		|ГДЕ
		|	ЭталонныеБазыТестированияПользователи.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", БазыДанных);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ПараметрыВсехПроцессов(ПроцессыДляВыгрузки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроцессыПараметрыПроцесса.Ссылка КАК Процесс,
		|	ПроцессыПараметрыПроцесса.НомерСтроки КАК НомерСтроки,
		|	ПроцессыПараметрыПроцесса.Имя КАК Имя,
		|	ПроцессыПараметрыПроцесса.Значение КАК Значение,
		|	ПроцессыПараметрыПроцесса.ТипПараметра КАК ТипПараметра
		|ИЗ
		|	Справочник.Процессы.ПараметрыПроцесса КАК ПроцессыПараметрыПроцесса
		|ГДЕ
		|	ПроцессыПараметрыПроцесса.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ПроцессыДляВыгрузки);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ПрисоединенныеФайлыПроцессов(МассивПроцессов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.ВладелецФайла КАК Процесс,
		|	Файлы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В(&МассивПроцессов)
		|	И НЕ Файлы.ПометкаУдаления
		|	И НЕ Файлы.Наименование ПОДОБНО ""НеВыгружать%""";
	
	Запрос.УстановитьПараметр("МассивПроцессов", МассивПроцессов);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ТегиВсехПроцессов(ПроцессыДляВыгрузки, ТаблицаДанных)
	Если ПроцессыДляВыгрузки.Количество() = 0 Тогда
		Возврат ПустаяТаблицаДопРеквизитов();
	КонецЕсли;	 
	
	НаборСвойств = Обработки.СборкаТекстовСценариев.НаборСвойствОбъекта(ТаблицаДанных[0].Проект,
		"НаборСвойствДляПроцессовВыгружаемый");
	
	ЗначенияСвойств = УправлениеСвойствами.ЗначенияСвойств(ПроцессыДляВыгрузки,
		Истина, Ложь, НаборСвойств.ВыгрузитьКолонку("Свойство"));
		
	Возврат ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств);	
	
КонецФункции

Функция ШагиПроцессов(ПроцессыДляВыгрузки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцесса.Ссылка КАК ШагПроцесса,
		|	ШагиПроцесса.Владелец КАК Процесс,
		|	ШагиПроцесса.Наименование КАК Наименование,
		|	ШагиПроцесса.СценарийРаботыПользователя КАК Сценарий,
		|	ШагиПроцесса.СценарийРаботыПользователя.Наименование КАК СценарийНаименование,
		|	ШагиПроцесса.ПолныйКод КАК ПолныйКод,
		|	ШагиПроцесса.Исполнитель КАК Исполнитель,
		|	ШагиПроцесса.Исполнитель.Наименование КАК ИсполнительНаименование,
		|	ШагиПроцесса.СценарийРаботыПользователя.Код КАК СценарийКод,
		|	ШагиПроцесса.ТипШага КАК ТипШага,
		|	ШагиПроцесса.ВложенныйПроцесс КАК ВложенныйПроцесс,
		|	ШагиПроцесса.ВложенныйПроцесс.Наименование КАК ВложенныйПроцессНаименование
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	ШагиПроцесса.Владелец В(&ПроцессыДляВыгрузки)
		|	И НЕ ШагиПроцесса.ЭтоГруппа
		|	И НЕ ШагиПроцесса.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПроцессыДляВыгрузки", ПроцессыДляВыгрузки);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	 

Функция ПараметрыШаговПроцессов(ШагиПроцессов)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцессаПараметрыСценария.Ссылка КАК Ссылка,
		|	ШагиПроцессаПараметрыСценария.НомерСтроки КАК НомерСтроки,
		|	ШагиПроцессаПараметрыСценария.Имя КАК Имя,
		|	ШагиПроцессаПараметрыСценария.ЗначениеПоСсылке КАК ЗначениеПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ТипПараметра КАК ТипПараметра,
		|	ШагиПроцессаПараметрыСценария.ИсходящийПараметр КАК ИсходящийПараметр,
		|	ШагиПроцессаПараметрыСценария.ШагПроцессаЗначениеПоСсылке КАК ШагПроцессаЗначениеПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ИмяПараметраПоСсылке КАК ИмяПараметраПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ЗначениеПроизвольное КАК ЗначениеПроизвольное
		|ИЗ
		|	Справочник.ШагиПроцесса.ПараметрыСценария КАК ШагиПроцессаПараметрыСценария
		|ГДЕ
		|	ШагиПроцессаПараметрыСценария.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ШагиПроцессов);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	 

Функция РодителиПроцесса(Процесс)
	Массив = Новый Массив;
	
	ТекРодитель = Процесс.Родитель;
	Пока Истина Цикл
		Если ЗначениеЗаполнено(ТекРодитель) Тогда
			Массив.Вставить(0,СокрЛП(ТекРодитель.Наименование));
		Иначе
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;	
	
	//оставляем только родителя первого уровня
	Результат = Новый Массив;
	Если Массив.Количество() > 1 Тогда
		Результат.Добавить(Массив[0]);
		Результат.Добавить(Массив[1]);
	ИначеЕсли Массив.Количество() > 0 Тогда
		Результат.Добавить(Массив[0]);
	КонецЕсли;	 
	
	Возврат Результат;
КонецФункции	

Функция РодителиСценария(Сценарий)
	Массив = Новый Массив;
	
	ТекРодитель = Сценарий.Родитель;
	Пока Истина Цикл
		Если ЗначениеЗаполнено(ТекРодитель) Тогда
			Массив.Вставить(0,СокрЛП(ТекРодитель.Наименование));
		Иначе
			Прервать;
		КонецЕсли;	 
		
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

Функция ПараметрыВсехСценариев(СценарииДляВыгрузки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка КАК Сценарий,
		|	СценарииРаботыПользователейПараметрыВходящие.НомерСтроки КАК НомерСтроки,
		|	СценарииРаботыПользователейПараметрыВходящие.Имя КАК Имя,
		|	СценарииРаботыПользователейПараметрыВходящие.Значение КАК Значение,
		|	СценарииРаботыПользователейПараметрыВходящие.ТипПараметра КАК ТипПараметра,
		|	СценарииРаботыПользователейПараметрыВходящие.ИсходящийПараметр КАК ИсходящийПараметр
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ПараметрыВходящие КАК СценарииРаботыПользователейПараметрыВходящие
		|ГДЕ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СценарииДляВыгрузки);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция ПустаяТаблицаДопРеквизитов()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ВладелецСвойств");
	Возврат Тзн;
КонецФункции	 

Функция ТегиВсехСценариев(СценарииДляВыгрузки, ТаблицаДанных)
	Если СценарииДляВыгрузки.Количество() = 0 Тогда
		Возврат ПустаяТаблицаДопРеквизитов(); 
	КонецЕсли;	 
	
	НаборСвойств = Обработки.СборкаТекстовСценариев.НаборСвойствОбъекта(ТаблицаДанных[0].Проект,
		"НаборСвойствДляСценариевРаботыПользователейВыгружаемый");
	
	ЗначенияСвойств = УправлениеСвойствами.ЗначенияСвойств(СценарииДляВыгрузки,
		Истина, Ложь, НаборСвойств.ВыгрузитьКолонку("Свойство"));
		
	Возврат ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств);	
КонецФункции

Функция ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств)
	ЗначенияСвойств.Колонки.Добавить("Имя");
	Для Каждого СтрокаЗначенияСвойств Из ЗначенияСвойств Цикл
		СтрокаНаборСвойств = НаборСвойств.Найти(СтрокаЗначенияСвойств.Свойство, "Свойство");
		Если СтрокаНаборСвойств <> Неопределено Тогда
			СтрокаЗначенияСвойств.Имя = СтрокаНаборСвойств.Наименование;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат ЗначенияСвойств;
КонецФункции	 

Функция ПрисоединенныеФайлыСценариев(МассивСценариев)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Файл,
		|	Файлы.Расширение КАК Расширение,
		|	Файлы.ВладелецФайла КАК Сценарий,
		|	Файлы.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла В(&МассивСценариев)
		|	И НЕ Файлы.ПометкаУдаления
		|	И НЕ Файлы.Наименование ПОДОБНО ""НеВыгружать%""";
	
	Запрос.УстановитьПараметр("МассивСценариев", МассивСценариев);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	

Функция СценарииВызывающиеПодсценарии(ВложенныеСценарии)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Шаблон КАК Шаблон,
		|	СценарииРаботыПользователейВерсииШаблонов.Версия КАК Версия,
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка КАК Сценарий,
		|	СценарииРаботыПользователейВерсииШаблонов.Шаблон.Наименование КАК ШаблонНаименование,
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка.Наименование КАК СценарийНаименование
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ВерсииШаблонов КАК СценарииРаботыПользователейВерсииШаблонов
		|ГДЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Шаблон В(&Шаблон)";
	
	Запрос.УстановитьПараметр("Шаблон", ВложенныеСценарии.ВыгрузитьКолонку("Шаблон"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВложенныеСценарииРекурсивно(СценарииДляВыгрузки,ВложенныеСценарии)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Шаблон КАК Шаблон,
		|	СценарииРаботыПользователейВерсииШаблонов.Версия КАК Версия,
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка КАК Сценарий,
		|	СценарииРаботыПользователейВерсииШаблонов.Шаблон.Наименование КАК ШаблонНаименование,
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка.Наименование КАК СценарийНаименование
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ВерсииШаблонов КАК СценарииРаботыПользователейВерсииШаблонов
		|ГДЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка В(&Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СценарииРаботыПользователейВерсииШаблонов.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", СценарииДляВыгрузки);
	
	ТаблицаСценариев = Запрос.Выполнить().Выгрузить();
	
	ДобавлялиСценарий = Ложь;
	
	Для Каждого СтрокаТаблицаСценариев Из ТаблицаСценариев Цикл
		ЗначениеПоиска = Новый Структура("Шаблон,Сценарий",СтрокаТаблицаСценариев.Шаблон,СтрокаТаблицаСценариев.Сценарий);
		СтрокаВложенныеСценарии = ВложенныеСценарии.НайтиСтроки(ЗначениеПоиска);
		
		Если СтрокаВложенныеСценарии.Количество() = 0 Тогда
			ДобавлялиСценарий = Истина;
			
			СтрокаВложенныеСценарии = ВложенныеСценарии.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВложенныеСценарии,СтрокаТаблицаСценариев)
		КонецЕсли;	 

	КонецЦикла;	
	
	Если ДобавлялиСценарий Тогда
		ВременныеСценарииДляВыгрузки = ВложенныеСценарии.ВыгрузитьКолонку("Шаблон");
		ВложенныеСценарииРекурсивно(ВременныеСценарииДляВыгрузки,ВложенныеСценарии);
	КонецЕсли;	 
	
КонецПроцедуры

Функция ТекстЗапросаДляПолучненияДанныхСценариев()
	Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Шаблон КАК Сценарий
		|ПОМЕСТИТЬ СценарииДляВыгрузки
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ВерсииШаблонов КАК СценарииРаботыПользователейВерсииШаблонов
		|ГДЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	СценарииРаботыПользователей.Ссылка
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
		|ГДЕ
		|	СценарииРаботыПользователей.Ссылка В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииДляВыгрузки.Сценарий КАК Сценарий,
		|	СценарииДляВыгрузки.Сценарий.ФункцияСистемы КАК ФункцияСистемы,
		|	СценарииДляВыгрузки.Сценарий.ФункцияСистемы.Наименование КАК ФункцияСистемыНаименование,
		|	СценарииДляВыгрузки.Сценарий.Наименование КАК СценарийНаименование,
		|	СценарииДляВыгрузки.Сценарий.ФункцияСистемы.Владелец.Наименование КАК ПроектНаименование,
		|	СценарииДляВыгрузки.Сценарий.ПрофильПользователя КАК ПрофильПользователяСсылка,
		|	СценарииДляВыгрузки.Сценарий.ПрофильПользователя.Наименование КАК ПрофильПользователя,
		|	СценарииДляВыгрузки.Сценарий.ХранилищеСхемаТекст КАК ТекстСценария,
		|	СценарииДляВыгрузки.Сценарий.ХранилищеОписания КАК ОписаниеСценария,
		|	СценарииДляВыгрузки.Сценарий.Код КАК Код,
		|	СценарииДляВыгрузки.Сценарий.РазрешеноИспользоватьВДругихФункциях КАК РазрешеноИспользоватьВДругихФункциях,
		|	СценарииДляВыгрузки.Сценарий.ВерсияСценария КАК ВерсияСценария,
		|	СценарииДляВыгрузки.Сценарий.Ответственный КАК СценарийОтветственный,
		|	СценарииДляВыгрузки.Сценарий.Ответственный.Наименование КАК СценарийОтветственныйНаименование,
		|	СценарииДляВыгрузки.Сценарий.Владелец КАК Проект,
		|	СценарииДляВыгрузки.Сценарий.РазделПроекта КАК СценарийРазделПроекта,
		|	СценарииДляВыгрузки.Сценарий.Публикуется КАК СценарийПубликуется,
		|	СценарииДляВыгрузки.Сценарий.НеобратимоМеняетДанные КАК НеобратимоМеняетДанные
		|ИЗ
		|	СценарииДляВыгрузки КАК СценарииДляВыгрузки
		|
		|УПОРЯДОЧИТЬ ПО
		|	СценарииДляВыгрузки.Сценарий.Наименование";
	
	
	Возврат Текст; 
КонецФункции	 

Функция ТекстЗапросаДляПолучненияДанныхПроцессов()
	Текст = 
		"ВЫБРАТЬ
		|	Процессы.Ссылка КАК Процесс,
		|	Процессы.Владелец КАК Проект,
		|	Процессы.Код КАК Код,
		|	Процессы.Наименование КАК ПроцессНаименование,
		|	Процессы.Ответственный КАК ПроцессОтветственный,
		|	Процессы.Ответственный.Наименование КАК ПроцессОтветственныйНаименование,
		|	Процессы.Владелец.Наименование КАК ПроектНаименование,
		|	Процессы.Описание КАК Описание,
		|	Процессы.ПолныйКод КАК ПолныйКод
		|ИЗ
		|	Справочник.Процессы КАК Процессы
		|ГДЕ
		|	НЕ Процессы.ЭтоГруппа
		|	И НЕ Процессы.ПометкаУдаления
		|	И Процессы.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ШагиПроцесса.ВложенныйПроцесс,
		|	ШагиПроцесса.ВложенныйПроцесс.Владелец,
		|	ШагиПроцесса.ВложенныйПроцесс.Код,
		|	ШагиПроцесса.ВложенныйПроцесс.Наименование,
		|	ШагиПроцесса.ВложенныйПроцесс.Ответственный,
		|	ШагиПроцесса.ВложенныйПроцесс.Ответственный.Наименование,
		|	ШагиПроцесса.ВложенныйПроцесс.Владелец.Наименование,
		|	ШагиПроцесса.ВложенныйПроцесс.Описание,
		|	ШагиПроцесса.ВложенныйПроцесс.ПолныйКод
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	НЕ ШагиПроцесса.ЭтоГруппа
		|	И ТИПЗНАЧЕНИЯ(ШагиПроцесса.ВложенныйПроцесс) = ТИП(Справочник.Процессы)
		|	И ШагиПроцесса.ВложенныйПроцесс <> ЗНАЧЕНИЕ(Справочник.Процессы.ПустаяСсылка)
		|	И НЕ ШагиПроцесса.ПометкаУдаления
		|	И ШагиПроцесса.Ссылка.Владелец В(&Ссылка)";
	
	Возврат Текст; 
КонецФункции	 

Процедура ТаблицаДанныхРекурсивно(ОсновнаяТаблицаДанных)
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаДляПолучненияДанныхСценариев();
	Запрос.УстановитьПараметр("Ссылка", ОсновнаяТаблицаДанных.ВыгрузитьКолонку("Сценарий"));
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	//в ТаблицаДанных содержатся все сценарии, которые надо выгрузить
	
	ДобавлялиСценарий = Ложь;
	
	Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
		СтрокаОсновнаяТаблицаДанных = ОсновнаяТаблицаДанных.Найти(СтрокаТаблицаДанных.Сценарий,"Сценарий");
		Если СтрокаОсновнаяТаблицаДанных = Неопределено Тогда
			ДобавлялиСценарий = Истина;
			
			СтрокаОсновнаяТаблицаДанных = ОсновнаяТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОсновнаяТаблицаДанных,СтрокаТаблицаДанных);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если ДобавлялиСценарий Тогда
		ТаблицаДанныхРекурсивно(ОсновнаяТаблицаДанных);
	КонецЕсли;	 
	
КонецПроцедуры

Процедура ТаблицаДанныхПроцессовРекурсивно(ОсновнаяТаблицаДанных)
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаДляПолучненияДанныхПроцессов();
	Запрос.УстановитьПараметр("Ссылка", ОсновнаяТаблицаДанных.ВыгрузитьКолонку("Процесс"));
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	//в ТаблицаДанных содержатся все сценарии, которые надо выгрузить
	
	ДобавлялиПроцесс = Ложь;
	
	Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
		СтрокаОсновнаяТаблицаДанных = ОсновнаяТаблицаДанных.Найти(СтрокаТаблицаДанных.Процесс,"Процесс");
		Если СтрокаОсновнаяТаблицаДанных = Неопределено Тогда
			ДобавлялиПроцесс = Истина;
			
			СтрокаОсновнаяТаблицаДанных = ОсновнаяТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОсновнаяТаблицаДанных,СтрокаТаблицаДанных);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если ДобавлялиПроцесс Тогда
		ТаблицаДанныхПроцессовРекурсивно(ОсновнаяТаблицаДанных);
	КонецЕсли;	 
	
КонецПроцедуры

Функция ТаблицаДанныхСценариев(ОсновныеСценарии)
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаДляПолучненияДанныхСценариев();
	Запрос.УстановитьПараметр("Ссылка", ОсновныеСценарии);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	//в ТаблицаДанных содержатся все сценарии, которые надо выгрузить
	
	ТаблицаДанныхРекурсивно(ТаблицаДанных);
	
	Возврат ТаблицаДанных; 
КонецФункции	 

Функция ДанныеПоЭталоннымБазамИзСППР(Проект)
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭталонныеБазыТестирования.Ссылка КАК Ссылка,
		|	ЭталонныеБазыТестирования.Наименование КАК Наименование,
		|	ЭталонныеБазыТестирования.ИдентификаторБазы КАК ИдентификаторБазы,
		|	ЭталонныеБазыТестирования.ПутьКФайлуВыгрузки КАК ПутьКФайлуВыгрузки
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования КАК ЭталонныеБазыТестирования
		|ГДЕ
		|	НЕ ЭталонныеБазыТестирования.ПометкаУдаления
		|	И НЕ ЭталонныеБазыТестирования.ПутьКФайлуВыгрузки ПОДОБНО &ПутьКФайлуВыгрузки
		|	И ЭталонныеБазыТестирования.Владелец = &Проект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	Запрос.УстановитьПараметр("ПутьКФайлуВыгрузки", "");
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеЭталоннойБазы = Новый Структура;
		ДанныеЭталоннойБазы.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		ДанныеЭталоннойБазы.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		ДанныеЭталоннойБазы.Вставить("ИдентификаторБазы", ВыборкаДетальныеЗаписи.ИдентификаторБазы);
		ДанныеЭталоннойБазы.Вставить("ПутьКФайлуВыгрузки", ВыборкаДетальныеЗаписи.ПутьКФайлуВыгрузки);
		
		Результат.Вставить(ДанныеЭталоннойБазы.Наименование, ДанныеЭталоннойБазы);
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции	 

Функция ЗапрещеныПомещенияВЗащищенныеВетки()
	Возврат Истина;
КонецФункции	 

Функция ЭлектроннаяПочтаПользователя(Пользователь)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Пользователь);
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивСсылок,,Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		
	СтрокаКонтактнойИнформации = КонтактнаяИнформация.Найти(Пользователь, "Объект");
	Если СтрокаКонтактнойИнформации <> Неопределено Тогда
		Возврат СтрокаКонтактнойИнформации.Представление;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции	 

Процедура ДобавитьСообщениеПоОбъектуНикогоНеОповещать(СсылкаНаОбъект, ПользовательАвторСообщения, ЗаголовокОбсуждения, ТекстСообщения)
	
	// Никого не оповещать
	ИдентификаторАдресатаСообщения = Новый ИдентификаторПользователяСистемыВзаимодействия(); 
	ИдентификаторАвтораСообщения = РаботаССистемойВзаимодействия.ПользовательДляСистемыВзаимодействия(ПользовательАвторСообщения);

	Если ИдентификаторАдресатаСообщения = Неопределено
		ИЛИ ИдентификаторАвтораСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбсуждения = РаботаССистемойВзаимодействия.ДобавитьКонтекстноеОбсуждение(СсылкаНаОбъект, ЗаголовокОбсуждения);
	
	ИдентификаторыПолучателей = Новый Массив;
	ИдентификаторыПолучателей.Добавить(ИдентификаторАдресатаСообщения);
	
	РаботаССистемойВзаимодействия.ДобавитьСообщениеОбсуждения(ИдентификаторОбсуждения, ТекстСообщения,
															  ИдентификаторыПолучателей, ИдентификаторАвтораСообщения);

КонецПроцедуры

Функция УбратьСлужебныеСимволыИзИдентификатораЗапросаНаСлияние(Знач Стр)
	Возврат СтрЗаменить(Стр, Символы.НПП, "");
КонецФункции

Функция НеКонтекстныеСобщенияБезОтбораПоЗаголовку(ПользовательПолучательСообщения, ПользовательАвторСообщения, ДатаНачала, ТекстСообщения = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторАдресатаСообщения = РаботаССистемойВзаимодействия.ПользовательДляСистемыВзаимодействия(ПользовательПолучательСообщения);
	ИдентификаторАвтораСообщения = РаботаССистемойВзаимодействия.ПользовательДляСистемыВзаимодействия(ПользовательАвторСообщения);
	
	ОтборОбсуждений = Новый ОтборОбсужденийСистемыВзаимодействия;
	
	ОтборОбсуждений.Групповое = Ложь;
	ОтборОбсуждений.КонтекстноеОбсуждение = Ложь;
	
	НайденныеОбсуждения = СистемаВзаимодействия.ПолучитьОбсуждения(ОтборОбсуждений);
	НайденныеСообщения = Новый Массив;
	Для Каждого Обсуждение из НайденныеОбсуждения Цикл
		Если НЕ Обсуждение.Участники.Содержит(ИдентификаторАдресатаСообщения) 
				ИЛИ НЕ Обсуждение.Участники.Содержит(ИдентификаторАвтораСообщения) Тогда
				
			Продолжить;
		КонецЕсли;
		
		ОтборСообщений = Новый ОтборСообщенийСистемыВзаимодействия;
		ОтборСообщений.Обсуждение = Обсуждение.Идентификатор;
		ОтборСообщений.НаправлениеСортировки = НаправлениеСортировки.Убыв;
		
		Сообщения = СистемаВзаимодействия.ПолучитьСообщения(ОтборСообщений);
		
		Для Каждого Сообщение из Сообщения Цикл

			АдресатВСпискеПолучателей = Ложь;
			Если ИдентификаторАдресатаСообщения <> Неопределено Тогда
				АдресатВСпискеПолучателей = Сообщение.Получатели.Содержит(ИдентификаторАдресатаСообщения);
			КонецЕсли;        
			
			Если Сообщение.Дата >= ДатаНачала 
				И ((ИдентификаторАдресатаСообщения = Неопределено И Сообщение.Получатели.Количество() = 0) ИЛИ АдресатВСпискеПолучателей)
				И (ТекстСообщения = Неопределено ИЛИ СтрНайти(Сообщение.Текст, ТекстСообщения) > 0) Тогда
				НайденныеСообщения.Добавить(Сообщение);
			КонецЕсли;
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат НайденныеСообщения;
	
КонецФункции

#КонецОбласти