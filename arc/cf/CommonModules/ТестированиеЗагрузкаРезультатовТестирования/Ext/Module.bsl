
#Область ПрограммныйИнтерфейс

// Загружает результаты прохождения тестов из системы непрерывного тестирования
//
Процедура ЗагрузитьРезультатыТестирования() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	ПроектыКОбработке = ПроектыКОбработке();
	
	Для Каждого ПроектКОбработке Из ПроектыКОбработке Цикл
		ЗагруженныеВетки = Новый Массив;
		
		ДанныеПроекта = Новый Структура;
		ДанныеПроекта.Вставить("АдресСервера",ПроектКОбработке.РезультатыВыполненияТестовАдресСервера);
		ДанныеПроекта.Вставить("Токен",ПроектКОбработке.РезультатыВыполненияТестовТокен);
		ДанныеПроекта.Вставить("ИмяПроектаНаСервере",ПроектКОбработке.РезультатыВыполненияТестовИмяПроектаНаСервере);
		ДанныеПроекта.Вставить("Проект",ПроектКОбработке.Проект);
		ДанныеПроекта.Вставить("Наименование", ПроектКОбработке.Наименование);
		
		Если НЕ ЗначениеЗаполнено(ДанныеПроекта.ИмяПроектаНаСервере) Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗагрузитьРезультатыТестовПроекта(ДанныеПроекта, ЗагруженныеВетки);
		
		ДанныеПроекта.Очистить();
		Если ПроектКОбработке.АвтоматическиПроверятьИсправлениеОшибок Тогда
			ПроверитьИсправлениеОшибок(ПроектКОбработке.Проект, ЗагруженныеВетки);
		КонецЕсли;
		
		ОбновитьКоличествоЗапусковТестирования(ЗагруженныеВетки);
		
		Если ПроектКОбработке.ЗапускатьАвтоматическоеТестирование Тогда
			ВеткиПроектаДляОбновления = ВеткиПроектаВСтатусе(ПроектКОбработке.Проект, Перечисления.СтатусыВеток.Тестируется);
			ДополнитьВетки(ВеткиПроектаДляОбновления, ЗагруженныеВетки);
			ДополнитьВетки(ВеткиПроектаДляОбновления, ВеткиВСтатусеПомещенаКоторымНадоОбновитьСостояниеТестирования(ПроектКОбработке.Проект));
			ДополнитьВетки(ВеткиПроектаДляОбновления, ВеткиВСтатусеРазрабатывается(ПроектКОбработке.Проект));
			ОбновитьСостояниеТестированияВеток(ВеткиПроектаДляОбновления);
			
			ВеткиДляОповещения = ВеткиПроектаВСтатусе(ПроектКОбработке.Проект, Перечисления.СтатусыВеток.Разрабатывается);
			ДополнитьВетки(ВеткиДляОповещения, ЗагруженныеВетки);
			ДобавитьОповещенияДляВеток(ВеткиДляОповещения);
		КонецЕсли;	
		
	КонецЦикла; 
	
КонецПроцедуры 

//Возвращает элемент справочника Тесты по настройке сценария или создаёт новый, если его нет.
//
// Параметры:
//  НастройкаСценария - СправочникСсылка.НастройкиЗапускаСценариев - Настройка сценария для теста.
//  Проект            - СправочникСсылка.Проекты - Владелец теста. 
// 
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест.
//
Функция ТестПоНастройкеСценария(НастройкаСценария, Проект, ЗаданиеGitLab = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.НастройкаЗапускаСценария = &Ссылка
		|	И Тесты.Владелец = &Проект
		|	И НЕ Тесты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаСценария);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	СпрОбъект.Наименование = НастройкаСценария.Наименование;
	СпрОбъект.НастройкаЗапускаСценария = НастройкаСценария;
	СпрОбъект.Ответственный = НастройкаСценария.Сценарий.Ответственный;
	СпрОбъект.Владелец = Проект;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу("scen", Проект);
	СпрОбъект.Записать();

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИД <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	 

//Возвращает элемент справочника Тесты по настройке процесса или создаёт новый , если его нет.
//
// Параметры:
//  НастройкаПроцесса - СправочникСсылка.НастройкиЗапускаПроцессов - Настройка процесса для теста.
//  Проект            - СправочникСсылка.Проекты - Владелец теста.
//
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест
//
Функция ТестПоНастройкеПроцесса(НастройкаПроцесса, Проект, ЗаданиеGitLab = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.НастройкаЗапускаПроцесса = &Ссылка
		|	И Тесты.Владелец = &Проект
		|	И НЕ Тесты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", НастройкаПроцесса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	СпрОбъект.Наименование = НастройкаПроцесса.Наименование;
	СпрОбъект.НастройкаЗапускаПроцесса = НастройкаПроцесса;
	СпрОбъект.Ответственный = НастройкаПроцесса.Владелец.Ответственный;
	СпрОбъект.Владелец = Проект;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу("proc", Проект);
	СпрОбъект.Записать();
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	 

//Возвращает элемент справочника Тесты по имени задания из карты системы сборки или создаёт новый, если его нет.
//
// Параметры:
//  ИмяВСистемеСборки - Строка - Уникальное имя теста из системы сборки.
//  Проект            - СправочникСсылка.Проекты - Владелец теста.
//  Наименование      - Строка - Текстовое наименование теста.
// 
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест.
//
Функция ТестСППРПоСтроке(Знач ИмяВСистемеСборки, Проект, Знач Наименование="", ЗаданиеGitLab = Неопределено, ДанныеТеста = Неопределено) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка", Неопределено);
	Структура.Вставить("РезультатыТестаДетализируютсяПоОбъектамМетаданных", Ложь);
	Если НЕ ЗначениеЗаполнено(ИмяВСистемеСборки) Тогда
		ИмяВСистемеСборки = "";
	КонецЕсли;
	Префикс = ПрефиксГруппыПоИмениВСистемеСборки(ИмяВСистемеСборки);
	
	ИмяВСистемеСборки = УбратьИзИмениВСистемеСборкиЧисловыеИндексы(ИмяВСистемеСборки);
	Наименование = УбратьИзИмениВСистемеСборкиЧисловыеИндексы(Наименование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка,
		|	Тесты.РезультатыТестаДетализируютсяПоОбъектамМетаданных КАК РезультатыТестаДетализируютсяПоОбъектамМетаданных,
		|	Тесты.ИмяВСистемеСборки КАК ИмяВСистемеСборки
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.Владелец = &Проект
		|	И Тесты.ИмяВСистемеСборки = &ИмяВСистемеСборки
		|	И НЕ Тесты.ПометкаУдаления
		|	И Тесты.НастройкаЗапускаСценария = ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаСценариев.ПустаяСсылка)
		|	И Тесты.НастройкаЗапускаПроцесса = ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаПроцессов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ИмяВСистемеСборки", ИмяВСистемеСборки);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		Структура.Вставить("ИмяВСистемеСборки", ВыборкаДетальныеЗаписи.ИмяВСистемеСборки);
		Структура.Вставить("РезультатыТестаДетализируютсяПоОбъектамМетаданных",
			ВыборкаДетальныеЗаписи.РезультатыТестаДетализируютсяПоОбъектамМетаданных);
		Возврат Структура;
	КонецЦикла;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	Если Найти(Префикс, "meta") > 0 Тогда
		СпрОбъект.РезультатыТестаДетализируютсяПоОбъектамМетаданных = Истина;
		СпрОбъект.Универсальный = Истина;
	ИначеЕсли Найти(Префикс, "smoke") > 0 Тогда
		СпрОбъект.Универсальный = Истина;
	КонецЕсли;
	СпрОбъект.Наименование = ?(ЗначениеЗаполнено(Наименование), 
								Наименование, ИмяВСистемеСборки);
	СпрОбъект.Владелец = Проект;
	СпрОбъект.ИмяВСистемеСборки = ИмяВСистемеСборки;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу(Префикс, Проект);
	СпрОбъект.Записать();  
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	Структура.Вставить("Ссылка", СпрОбъект.Ссылка);
	Структура.Вставить("ИмяВСистемеСборки", СпрОбъект.ИмяВСистемеСборки);
	Структура.Вставить("РезультатыТестаДетализируютсяПоОбъектамМетаданных",
		СпрОбъект.РезультатыТестаДетализируютсяПоОбъектамМетаданных);
	
	Возврат Структура;
	
КонецФункции

//Возвращает элемент справочника Тесты по uid настройки сценария или создаёт новый, если его нет.
//
// Параметры:
//  UIDНастройкиСценария - Строка - UID настройки сценария для теста.
//  ИмяНастройкиСценария - Строка - Имя настройки сценария для теста.
//  Проект               - СправочникСсылка.Проекты - Владелец теста.
//  UIDОтветственного    - Строка - UID ответственный за тест.
// 
// Возвращаемое значение:
//  СправочникСсылка.Тесты - Созданный или найденный тест.
//
Функция ТестПоUIDНастройкиСценария(ДанныеТеста, ИмяНастройкиСценария, Проект) Экспорт
	UidНастройкиСценария = ДанныеТеста.UidНастройкиСценария;
	UIDОтветственного = Неопределено;
	Если ДанныеТеста.Свойство("UIDОтветственный") Тогда
		UIDОтветственного = ДанныеТеста.UIDОтветственный;
	КонецЕсли;
	
	UIDРазделПроекта = Неопределено;
	Если ДанныеТеста.Свойство("uidразделпроекта") Тогда
		UIDРазделПроекта = ДанныеТеста.uidразделпроекта;
	КонецЕсли;
	
	ЗаданиеGitLab = Неопределено;
	Если ДанныеТеста.Свойство("ЗаданиеGitLab") Тогда
		ЗаданиеGitLab = ДанныеТеста.ЗаданиеGitLab;
	КонецЕсли;	 
	
	КешОтветственный = Неопределено;
	Если ДанныеТеста.Свойство("КешОтветственный") Тогда
		КешОтветственный = ДанныеТеста.КешОтветственный;
	КонецЕсли;
	
	КешРазделПроекта = Неопределено;
	Если ДанныеТеста.Свойство("КешРазделПроекта") Тогда
		КешРазделПроекта = ДанныеТеста.КешРазделПроекта;
	КонецЕсли;	
	
	ЭтоОсновнаяВеткаПроекта = Ложь;
	Если ДанныеТеста.Свойство("ЭтоОсновнаяВеткаПроекта") Тогда
		ЭтоОсновнаяВеткаПроекта = ДанныеТеста.ЭтоОсновнаяВеткаПроекта;
	КонецЕсли;
	
	ИмяВСистемеСборки = ""; 
	Если ДанныеТеста.Свойство("ИдентификаторБазы") 
		И ЗначениеЗаполнено(ДанныеТеста.ИдентификаторБазы) Тогда
		ИмяВСистемеСборки = ДанныеТеста.ИдентификаторБазы;
	ИначеЕсли ДанныеТеста.Свойство("ИмяВСистемеСборки") 
		И ЗначениеЗаполнено(ДанныеТеста.ИмяВСистемеСборки) Тогда
		ИмяВСистемеСборки = ДанныеТеста.ИмяВСистемеСборки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Тесты.Ссылка КАК Ссылка,
		|	Тесты.Ответственный КАК Ответственный,
		|	Тесты.РазделПроекта КАК РазделПроекта,
		|	Тесты.Наименование КАК Наименование,
		|	Тесты.ИмяВСистемеСборки КАК ИмяВСистемеСборки
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.UIDНастройкиСценария = &UIDНастройкиСценария
		|	И Тесты.Владелец = &Проект
		|	И НЕ Тесты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("UIDНастройкиСценария", UIDНастройкиСценария);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ЭтоОсновнаяВеткаПроекта Тогда
			Ответственный = ОтветственныйПоUID(UIDОтветственного, ЗаданиеGitLab, КешОтветственный);
			Если ЗначениеЗаполнено(Ответственный) И Ответственный <> ВыборкаДетальныеЗаписи.Ответственный Тогда
				СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СпрОбъект.Ответственный = Ответственный;
				СпрОбъект.Записать();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
										УровеньЖурналаРегистрации.Информация,,,
										СтрШаблон(НСтр("ru = 'Обновлен ответственный в тесте. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
										СпрОбъект.Наименование,
										СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
				
			КонецЕсли;
			
			РазделПроекта = РазделПроектаПоUID(UIDРазделПроекта, ЗаданиеGitLab, КешРазделПроекта);
			Если ЗначениеЗаполнено(РазделПроекта) И РазделПроекта <> ВыборкаДетальныеЗаписи.РазделПроекта Тогда
				СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СпрОбъект.РазделПроекта = РазделПроекта;
				СпрОбъект.Записать();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
										УровеньЖурналаРегистрации.Информация,,,
										СтрШаблон(НСтр("ru = 'Обновлен раздел проекта в тесте. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
										СпрОбъект.Наименование,
										СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяНастройкиСценария) И ИмяНастройкиСценария <> ВыборкаДетальныеЗаписи.Наименование Тогда
				СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СпрОбъект.Наименование = ИмяНастройкиСценария;
				СпрОбъект.Записать();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
										УровеньЖурналаРегистрации.Информация,,,
										СтрШаблон(НСтр("ru = 'Обновлено наименование теста. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
										СпрОбъект.Наименование,
										СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИмяВСистемеСборки) И ИмяВСистемеСборки <> ВыборкаДетальныеЗаписи.ИмяВСистемеСборки Тогда
				СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СпрОбъект.ИмяВСистемеСборки = ИмяВСистемеСборки;
				СпрОбъект.Записать();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
										УровеньЖурналаРегистрации.Информация,,,
										СтрШаблон(НСтр("ru = 'Обновлено имя в системе сборки. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
										СпрОбъект.Наименование,
										СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
			КонецЕсли;
		Иначе
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ответственный) Тогда
				Ответственный = ОтветственныйПоUID(UIDОтветственного, ЗаданиеGitLab, КешОтветственный);
				Если ЗначениеЗаполнено(Ответственный) И Ответственный <> ВыборкаДетальныеЗаписи.Ответственный Тогда
					СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					СпрОбъект.Ответственный = Ответственный;
					СпрОбъект.Записать();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
						УровеньЖурналаРегистрации.Информация,,,
						СтрШаблон(НСтр("ru = 'Обновлен ответственный в тесте. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
						СпрОбъект.Наименование,
						СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
					
				КонецЕсли;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.РазделПроекта) Тогда
				РазделПроекта = РазделПроектаПоUID(UIDРазделПроекта, ЗаданиеGitLab, КешРазделПроекта);
				Если ЗначениеЗаполнено(РазделПроекта) И РазделПроекта <> ВыборкаДетальныеЗаписи.РазделПроекта Тогда
					СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					СпрОбъект.РазделПроекта = РазделПроекта;
					СпрОбъект.Записать();
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
											УровеньЖурналаРегистрации.Информация,,,
											СтрШаблон(НСтр("ru = 'Обновлен раздел проекта в тесте. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
											СпрОбъект.Наименование,
											СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
					
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИмяВСистемеСборки) И ЗначениеЗаполнено(ИмяВСистемеСборки) Тогда
				СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				СпрОбъект.ИмяВСистемеСборки = ИмяВСистемеСборки;
				СпрОбъект.Записать();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
										УровеньЖурналаРегистрации.Информация,,,
										СтрШаблон(НСтр("ru = 'Обновлено имя в системе сборки. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
										СпрОбъект.Наименование,
										СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
			КонецЕсли;
		КонецЕсли;	 
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	СпрОбъект = Справочники.Тесты.СоздатьЭлемент();
	СпрОбъект.Наименование = ИмяНастройкиСценария;
	СпрОбъект.UIDНастройкиСценария = UIDНастройкиСценария;
	СпрОбъект.Владелец = Проект;
	СпрОбъект.Родитель = ГруппаТестовПоПрефиксу("scen", Проект);
	СпрОбъект.Ответственный = ОтветственныйПоUID(UIDОтветственного, ЗаданиеGitLab, КешОтветственный);
	СпрОбъект.РазделПроекта = РазделПроектаПоUID(UIDРазделПроекта, ЗаданиеGitLab, КешРазделПроекта);
	СпрОбъект.Записать(); 
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Записан новый тест. Наименование <%1>. Код: <%2>. ИДЗаданияВСистемеСборки <%3>'"), 
							СпрОбъект.Наименование,
							СпрОбъект.Код, ИдЗаданияGitlab(ЗаданиеGitLab)));
	
	Возврат СпрОбъект.Ссылка;
	
КонецФункции	 

//Обновляет данные по состоянию тестирования веток.
//
// Параметры:
//  Ветки - Массив
//
Процедура ОбновитьСостояниеТестированияВеток(Ветки) Экспорт
	
	ТекущееСостояниеТестированияВеток = ТекущееСостояниеТестированияВеток(Ветки);
	Для Каждого ДанныеВетки Из ТекущееСостояниеТестированияВеток Цикл
		
		Если ДанныеВетки.Статус = Перечисления.СтатусыВеток.Помещена Тогда
			Попытка
				УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
					Перечисления.СостоянияТестированияВетки.Помещена, ДанныеВетки.СостояниеТестирования);
			Исключение
				ЗаписьЖурналаРегистрации(
					СтрШаблон(НСтр("ru = 'Ошибка при записи нового состояния тестирования <%1> у ветки <%2>.'"),
						Перечисления.СостоянияТестированияВетки.Помещена, ДанныеВетки.Наименование),
					УровеньЖурналаРегистрации.Ошибка,,
					Неопределено,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДанныеВетки.Статус <> Перечисления.СтатусыВеток.Тестируется И ДанныеВетки.Статус <> Перечисления.СтатусыВеток.Разрабатывается Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеПоследнегоЗапускаПоВетке = ДанныеПоследнегоЗапускаПоВетке(ДанныеВетки.Ссылка);
		
		ЕстьИзмененияСПоследнегоПайпа = ТестированиеЗапускТестирования.ЕстьИзмененияВВетке(
			ДанныеВетки.Проект,ДанныеВетки.Имя, ДанныеВетки.ИмяВеткиПриемника,ДанныеПоследнегоЗапускаПоВетке.Pipeline_ID);
			
		ДанныеПоЗаблокированнымТестамВВетке = ДанныеПоЗаблокированнымТестамВВетке(ДанныеВетки.Ссылка);
		
		ГотоваКПомещению = ДанныеПоЗаблокированнымТестамВВетке.ГотоваКПомещению;
		ТребуетсяРешение = ДанныеПоЗаблокированнымТестамВВетке.ТребуетсяРешение; 
		
		ДанныеПредшественника = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеВетки.Ссылка, "Предшественник, Предшественник.Статус");
		
		Если ДанныеВетки.Статус = Перечисления.СтатусыВеток.Тестируется
			И ДанныеПоследнегоЗапускаПоВетке.Pipeline_ID <> Неопределено
			И НЕ ЗначениеЗаполнено(ДанныеПоследнегоЗапускаПоВетке.ДатаЗавершения) Тогда
			// Значит сборка всё ещё выполняется
			УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
				Перечисления.СостоянияТестированияВетки.ЖдетЗавершенияТестирования, ДанныеВетки.СостояниеТестирования);
			Продолжить;
		КонецЕсли;	
		
		ВВеткеИсправленыВсеОшибки = ВВеткеИсправленыВсеОшибки(ДанныеВетки.Ссылка);
		
		Если ДанныеВетки.Статус = Перечисления.СтатусыВеток.Тестируется Тогда
			Если ДанныеПоследнегоЗапускаПоВетке.Pipeline_ID <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(ДанныеПоследнегоЗапускаПоВетке.ДатаЗавершения) И НЕ ВВеткеИсправленыВсеОшибки Тогда
					УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
					Перечисления.СостоянияТестированияВетки.ТребуетсяИсправлениеОшибок, ДанныеВетки.СостояниеТестирования);
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если НЕ ВВеткеИсправленыВсеОшибки Тогда
					УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
					Перечисления.СостоянияТестированияВетки.ТребуетсяИсправлениеОшибок, ДанныеВетки.СостояниеТестирования);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
	
		Если ДанныеВетки.Статус = Перечисления.СтатусыВеток.Разрабатывается Тогда
			Если ВВеткеИсправленыВсеОшибки И ЗначениеЗаполнено(ДанныеПредшественника.Предшественник)
				И ДанныеПредшественника.ПредшественникСтатус <> Перечисления.СтатусыВеток.Помещена Тогда
				
				УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
				Перечисления.СостоянияТестированияВетки.ОжидаетВеткуПредшественник, ДанныеВетки.СостояниеТестирования);
				Продолжить;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеПредшественника.Предшественник)
				И ДанныеВетки.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
					УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
						Перечисления.СостоянияТестированияВетки.ОжидаетОкончанияРазработки, ДанныеВетки.СостояниеТестирования);
					Продолжить;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ДанныеПредшественника.Предшественник)
				И ДанныеВетки.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
				
					Если ВВеткеЕстьИсправленыеОшибки(ДанныеВетки.Ссылка) Тогда
						УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
							Перечисления.СостоянияТестированияВетки.НеобходимоПередатьНаТестирование, ДанныеВетки.СостояниеТестирования);
					Иначе	
						УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
							Перечисления.СостоянияТестированияВетки.ОжидаетИсправленияОшибок, ДанныеВетки.СостояниеТестирования);
					КонецЕсли;	
					
					Продолжить;
				
			КонецЕсли;
				
			Если ВВеткеИсправленыВсеОшибки И
				(НЕ ЗначениеЗаполнено(ДанныеПредшественника.Предшественник)
				ИЛИ ЗначениеЗаполнено(ДанныеПредшественника.Предшественник)
				И ДанныеПредшественника.ПредшественникСтатус = Перечисления.СтатусыВеток.Помещена
				) Тогда
				
				УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
				Перечисления.СостоянияТестированияВетки.НеобходимоПередатьНаТестирование, ДанныеВетки.СостояниеТестирования);
				Продолжить;
				
			КонецЕсли;	
		КонецЕсли;	
		
		Если ДанныеВетки.Статус <> Перечисления.СтатусыВеток.Тестируется Тогда
			Продолжить;
		КонецЕсли;	

		Если ЕстьИзмененияСПоследнегоПайпа ИЛИ ДанныеПоследнегоЗапускаПоВетке.Pipeline_ID = Неопределено Тогда
			УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
				Перечисления.СостоянияТестированияВетки.ЖдетТестирования, ДанныеВетки.СостояниеТестирования);
			Продолжить;
		КонецЕсли;	 
			
		Если ТребуетсяРешение Тогда
			УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
				Перечисления.СостоянияТестированияВетки.ТребуетсяРешение, ДанныеВетки.СостояниеТестирования);
			Продолжить;
		КонецЕсли;	 
		
		Если ГотоваКПомещению Тогда
			
			Если ЕстьНеСогласованныеИзмененияОМ(ДанныеВетки.Ссылка) Тогда
				УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
					Перечисления.СостоянияТестированияВетки.ТребуетсяРешение, ДанныеВетки.СостояниеТестирования);
			Иначе	
				УстановитьСостояниеТестированияВетки(ДанныеВетки.Ссылка,
					Перечисления.СостоянияТестированияВетки.ГотоваКПомещению, ДанныеВетки.СостояниеТестирования);
			КонецЕсли;
				
			Продолжить;
		КонецЕсли;	 
		
	КонецЦикла;	 
	
КонецПроцедуры 

//Обновляет состояние тестирование ветки 
//
// Параметры:
//  Ветка - Справочник.Ветки
//
Функция ОбновитьСостояниеТестированияВетки(Ветка) Экспорт
	
	Если Ветка = Справочники.Ветки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Владелец");
	ЗапускатьАвтоматическоеТестирование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект,"ЗапускатьАвтоматическоеТестирование");
	Если НЕ ЗапускатьАвтоматическоеТестирование Тогда
		Возврат Неопределено;
	КонецЕсли;		
	
	Массив = Новый Массив;
	Массив.Добавить(Ветка);
	ОбновитьСостояниеТестированияВеток(Массив);
	
	Возврат Тестирование.СостояниеТестированияВетки(Ветка); 
	
КонецФункции	 

// Формирует оповещение о том, что ветку надо поставить на тестирование
//
// Параметры:
//  Ветки - Массив
//
Процедура ДобавитьОповещенияДляВеток(Ветки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Ветки.Ссылка КАК Ссылка,
	               |	Ветки.Ответственный КАК Ответственный
	               |ПОМЕСТИТЬ ВеткиОтбор
	               |ИЗ
	               |	Справочник.Ветки КАК Ветки
	               |ГДЕ
	               |	Ветки.Ссылка В(&Ветки)
	               |	И Ветки.Статус = &СтатусРазрабатывается
	               |	И Ветки.Тип = &ВеткаДляИсправленияОшибок
	               |	И (Ветки.Предшественник <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	               |				И Ветки.Предшественник.Статус = &СтатусПомещена
	               |			ИЛИ Ветки.Предшественник = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка))
	               |	И НЕ Ветки.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Ветки.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ВеткиЕстьИсправленныеОшибки
	               |ИЗ
	               |	ВеткиОтбор КАК Ветки
	               |ГДЕ
	               |	(ИСТИНА В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ИСТИНА
	               |				ИЗ
	               |					Справочник.Ошибки КАК ОшибкиОбнаруженныеВВетке
	               |				ГДЕ
	               |					ОшибкиОбнаруженныеВВетке.Исправляется <> ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхветках)
	               |					И (ОшибкиОбнаруженныеВВетке.ВеткаИсправления = Ветки.Ссылка
	               |						ИЛИ ОшибкиОбнаруженныеВВетке.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	               |							И ОшибкиОбнаруженныеВВетке.ВеткаОбнаружения = Ветки.Ссылка)
	               |					И ОшибкиОбнаруженныеВВетке.Исправлена)
	               |			ИЛИ ИСТИНА В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ИСТИНА
	               |				ИЗ
	               |					Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	               |				ГДЕ
	               |					ОшибкиИсправлениеВВетках.ВеткаИсправления = Ветки.Ссылка
	               |					И ОшибкиИсправлениеВВетках.СостояниеИсправления = ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.Исправлена)))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Ветки.Ссылка КАК Ветка,
	               |	НЕ ВеткиЕстьИсправленныеОшибки.Ссылка ЕСТЬ NULL КАК ЕстьИсправленныеОшибки,
	               |	Ветки.Ответственный КАК Ответственный
	               |ИЗ
	               |	ВеткиОтбор КАК Ветки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВеткиЕстьИсправленныеОшибки КАК ВеткиЕстьИсправленныеОшибки
	               |		ПО (ВеткиЕстьИсправленныеОшибки.Ссылка = Ветки.Ссылка)";
	
	Запрос.УстановитьПараметр("Ветки", Ветки);
	Запрос.УстановитьПараметр("СтатусРазрабатывается", Перечисления.СтатусыВеток.Разрабатывается);
	Запрос.УстановитьПараметр("ВеткаДляИсправленияОшибок", Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок);
	Запрос.УстановитьПараметр("СтатусПомещена", Перечисления.СтатусыВеток.Помещена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ветка = ВыборкаДетальныеЗаписи.Ветка;
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Владелец");
		Если ВыборкаДетальныеЗаписи.ЕстьИсправленныеОшибки Тогда
			АвторСообщения = АвторСообщения(Проект);
			ТекстСообщения = НСтр("ru = 'Ветку надо направить на тестирование. Если ветка помещается после другой ветки, укажите другую ветку в поле ""помещается после""'");
			Тестирование.ДобавитьСообщениеПоОбъекту(
				Ветка,
				ВыборкаДетальныеЗаписи.Ответственный,
				АвторСообщения,
				ТекущаяДата() - 24*60*60,
				ТекстСообщения,
				ТекстСообщения
				);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные о заданиях указанного запуска тестирования
//
// Параметры:
//  Соединение - HTTPСоединение
//  Токен - Строка
//  Проект - Строка
//  НомерЗапускТестированияGitLab - Число
//
Функция ИнформацияОЗаданияхGitLab(Соединение, Токен, Проект, НомерЗапускТестированияGitLab) Экспорт
	
	Ответ = Новый Массив;
	Сч = 1;
	Пока Истина Цикл
		Ресурс = СтрШаблон("/api/v4/projects/%1/pipelines/%2/jobs/?page=%3&per_page=100", 
			Тестирование.ЭкранироватьСпецсимволыWeb(Проект), Формат(НомерЗапускТестированияGitLab, "ЧГ="), Сч);
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, Токен);
		Если ТекущийОтвет.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		Для Каждого Элем Из ТекущийОтвет Цикл
			Ответ.Добавить(Элем);
		КонецЦикла;
		Сч = Сч + 1;
	КонецЦикла;	
	
	Возврат Ответ;
КонецФункции

//Возвращает данные о том, есть ли в ветке неисправленные ошибки
//
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Булево
//
Функция ВВеткеИсправленыВсеОшибки(Ветка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Ветки.Ссылка КАК Ветка
	               |ИЗ
	               |	Справочник.Ветки КАК Ветки
	               |ГДЕ
	               |	Ветки.Ссылка = &Ветка
	               |	И (ИСТИНА В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ИСТИНА
	               |				ИЗ
	               |					Справочник.Ошибки КАК ОшибкиОбнаруженныеВВетке
	               |				ГДЕ
	               |					ОшибкиОбнаруженныеВВетке.Исправляется <> ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхветках)
	               |					И (ОшибкиОбнаруженныеВВетке.ВеткаИсправления = Ветки.Ссылка
	               |						ИЛИ ОшибкиОбнаруженныеВВетке.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	               |							И ОшибкиОбнаруженныеВВетке.ВеткаОбнаружения = Ветки.Ссылка)
	               |					И НЕ ОшибкиОбнаруженныеВВетке.Исправлена
	               |					И НЕ ОшибкиОбнаруженныеВВетке.НеПризнана
	               |					И НЕ ОшибкиОбнаруженныеВВетке.Отозвана)
	               |			ИЛИ ИСТИНА В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ИСТИНА
	               |				ИЗ
	               |					Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	               |				ГДЕ
	               |					ОшибкиИсправлениеВВетках.ВеткаИсправления = Ветки.Ссылка
	               |					И ОшибкиИсправлениеВВетках.СостояниеИсправления = ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.ТребуетсяИсправление)
	               |					И НЕ ОшибкиИсправлениеВВетках.Ссылка.НеПризнана
	               |					И НЕ ОшибкиИсправлениеВВетках.Ссылка.Отозвана))";
			
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Ложь; 
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции	 

//Возвращает данные открытого запроса на слияние
//
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеОткрытогоЗапросаНаСлияниеПоВетке(Ветка) Экспорт
	
	ВеткаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Приемник");
	ДанныеОткрытогоЗапросаНаСлияниеПоВетке =
		ТестированиеЗапускТестирования.ДанныеОткрытогоЗапросаНаСлияниеПоВетке(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Владелец"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаПриемник, "Имя"));
		
	Возврат ДанныеОткрытогоЗапросаНаСлияниеПоВетке;
	
КонецФункции

//Возвращает данные открытого запроса на слияние
//
// Параметры:
//  Статус - Строка
//
// Возвращаемое значение:
//  Булево
//
Функция СтатусЗапросаНаСлияниеОзначаетКонфликтПомещенияИзменений(Статус) Экспорт
	Возврат Статус = "cannot_be_merged";
КонецФункции	

//Проверяет есть ли несогласованные изменения ОМ
//
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьНеСогласованныеИзмененияОМ(Ветка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзмененияВВетках.Ветка КАК Ветка
		|ИЗ
		|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|ГДЕ
		|	(ИзмененияВВетках.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования)
		|			ИЛИ ИзмененияВВетках.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.НеСогласовано))
		|	И ИзмененияВВетках.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

//Проверяет, что все ошибки исправляемые в ветке либо проверены либо отозваны
//
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Булево
//
Функция ВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны(Ветка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СправочникОшибки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ошибки КАК СправочникОшибки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
		|		ПО СправочникОшибки.Ссылка = ОшибкиИсправлениеВВетках.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА СправочникОшибки.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках)
		|				ТОГДА ОшибкиИсправлениеВВетках.ВеткаИсправления
		|			КОГДА СправочникОшибки.ВеткаИсправления <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяССылка)
		|				ТОГДА СправочникОшибки.ВеткаИсправления
		|			ИНАЧЕ СправочникОшибки.ВеткаОбнаружения
		|		КОНЕЦ = &Ветка
		|	И НЕ(СправочникОшибки.Отозвана
		|				ИЛИ СправочникОшибки.Проверена
		|				ИЛИ СправочникОшибки.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках)
		|					И ОшибкиИсправлениеВВетках.СостояниеИсправления <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.ТребуетсяИсправление))";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Ложь;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции	

//Проверяет, есть ли тесты заблокированные ошибками
//
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеПоЗаблокированнымТестамВВетке(Ветка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыВыполненияТестовСрезПоследних.Ветка КАК Ветка,
		|	РезультатыВыполненияТестовСрезПоследних.Тест КАК Тест,
		|	РезультатыВыполненияТестовСрезПоследних.ЗапускТестирования КАК ЗапускТестирования
		|ПОМЕСТИТЬ СрезПоследних
		|ИЗ
		|	РегистрСведений.РезультатыВыполненияТестов.СрезПоследних(
		|			,
		|			Ветка = &Ветка
		|				И Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.НеЗапускался)) КАК РезультатыВыполненияТестовСрезПоследних
		|ГДЕ
		|	РезультатыВыполненияТестовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненСОшибкой)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ветка,
		|	Тест
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РезультатыРегистрацииОшибокСрезПоследних.Ветка КАК Ветка,
		|	РезультатыРегистрацииОшибокСрезПоследних.Тест КАК Тест,
		|	РезультатыРегистрацииОшибокСрезПоследних.ЗапускТестирования КАК ЗапускТестирования,
		|	РезультатыРегистрацииОшибокСрезПоследних.Ошибка КАК Ошибка,
		|	ВЫБОР
		|		КОГДА РезультатыРегистрацииОшибокСрезПоследних.Ошибка.Обнаружена = ЗНАЧЕНИЕ(Перечисление.МестаОбнаруженияОшибок.ВВетке)
		|			ТОГДА РезультатыРегистрацииОшибокСрезПоследних.Ошибка.ВеткаОбнаружения
		|		КОГДА РезультатыРегистрацииОшибокСрезПоследних.Ошибка.Обнаружена = ЗНАЧЕНИЕ(Перечисление.МестаОбнаруженияОшибок.ВСборке)
		|			ТОГДА РезультатыРегистрацииОшибокСрезПоследних.Ошибка.СборкаОбнаружения.Ветка
		|		ИНАЧЕ РезультатыРегистрацииОшибокСрезПоследних.Ошибка.ВеткаОбнаружения
		|	КОНЕЦ КАК ВеткаОбнаруженияОшибки,
		|	ВЫБОР
		|		КОГДА РезультатыРегистрацииОшибокСрезПоследних.Ошибка.НеПризнана
		|				ИЛИ РезультатыРегистрацииОшибокСрезПоследних.Ошибка.Отозвана
		|				ИЛИ РезультатыРегистрацииОшибокСрезПоследних.Ошибка.Исправлена
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаИсправленаНеПризнана,
		|	ВЫБОР
		|		КОГДА НЕ ИсправлениеВВетках.ВеткаИсправления ЕСТЬ NULL
		|			ТОГДА ИсправлениеВВетках.ВеткаИсправления
		|		ИНАЧЕ РезультатыРегистрацииОшибокСрезПоследних.Ошибка.ВеткаИсправления
		|	КОНЕЦ КАК ВеткаИсправления
		|ПОМЕСТИТЬ СрезПоследнихОшибок
		|ИЗ
		|	РегистрСведений.РезультатыРегистрацииОшибок.СрезПоследних(
		|			,
		|			(Ветка, Тест) В
		|				(ВЫБРАТЬ
		|					СрезПоследних.Ветка,
		|					СрезПоследних.Тест
		|				ИЗ
		|					СрезПоследних)) КАК РезультатыРегистрацииОшибокСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ИсправлениеВВетках
		|		ПО (ИсправлениеВВетках.Ссылка = РезультатыРегистрацииОшибокСрезПоследних.Ошибка)
		|			И (ИсправлениеВВетках.ВеткаИсправления = &Ветка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ветка,
		|	Тест
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СрезПоследних.Ветка КАК Ветка,
		|	СрезПоследних.Тест КАК Тест,
		|	СрезПоследних.ЗапускТестирования КАК ЗапускТестирования,
		|	СрезПоследнихОшибок.Ошибка КАК Ошибка,
		|	СрезПоследнихОшибок.ВеткаОбнаруженияОшибки КАК ВеткаОбнаруженияОшибки,
		|	ЕСТЬNULL(СрезПоследнихОшибок.ОшибкаИсправленаНеПризнана, ИСТИНА) КАК ОшибкаИсправленаНеПризнана
		|ИЗ
		|	СрезПоследних КАК СрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ СрезПоследнихОшибок КАК СрезПоследнихОшибок
		|		ПО СрезПоследних.Ветка = СрезПоследнихОшибок.Ветка
		|			И СрезПоследних.Тест = СрезПоследнихОшибок.Тест
		|			И СрезПоследних.ЗапускТестирования = СрезПоследнихОшибок.ЗапускТестирования
		|ГДЕ
		|	(СрезПоследнихОшибок.Ошибка ЕСТЬ NULL
		|			ИЛИ (СрезПоследнихОшибок.ВеткаОбнаруженияОшибки = &Ветка
		|				ИЛИ СрезПоследнихОшибок.ВеткаИсправления = &Ветка))";    

	Запрос.УстановитьПараметр("Ветка", Ветка);	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДопПараметры = Новый Структура;
	
	ДопПараметры.Вставить("ГотоваКПомещению", Ложь);
	ДопПараметры.Вставить("ТребуетсяРешение", Ложь);
	
	ЕстьЗаписи = Ложь; 
	ЕстьНеисправленныеОшибки = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЕстьЗаписи = Истина;        
		Если НЕ ВыборкаДетальныеЗаписи.ОшибкаИсправленаНеПризнана Тогда
			ЕстьНеисправленныеОшибки = Истина;
			Прервать;
		КонецЕсли;                            
	КонецЦикла;
	
	Если НЕ ЕстьЗаписи Тогда  
		// Нет ни одной ошибки, которая блокирует выполнение тестов, и которая исправляется в данной ветке
		ДопПараметры.Вставить("ГотоваКПомещению", Истина);
		ДопПараметры.Вставить("ТребуетсяРешение", Ложь);  
	ИначеЕсли ЕстьНеисправленныеОшибки Тогда                   
		// Есть ошибки, которые блокирует выполнения тестов и исправляются в данной ветке, и ещё не исправлены/отозваны
		ДопПараметры.Вставить("ГотоваКПомещению", Ложь);
		ДопПараметры.Вставить("ТребуетсяРешение", Ложь);  
	Иначе
		// Есть ошибки, которые блокирует выполнения тестов и исправляются в данной ветке, но они уже все исправлены или отозваны
		// или есть упавшие тесты, но не зарегистрировавшие ошибки. 
		// Поэтому требуется решение.
		ДопПараметры.Вставить("ГотоваКПомещению", Ложь);
		ДопПараметры.Вставить("ТребуетсяРешение", Истина);  	
	КонецЕсли;	
	
	Возврат ДопПараметры; 
	
КонецФункции	 

// Загружает результаты тестирования по одному запуску тестирования, а не по всем последним запускам
//
// Параметры:
//  НомерЗапускТестированияGitLab - Число                    - Номер запуска тестирования.
//  Проект                        - СправочникСсылка.Проекты - Проект, для которого будет выполнена загрузка запуска тестирования.
//  ТаблицаРезультатовЗагрузки    - ТаблицаЗначений          - Таблица, в которую будут записаны результаты загрузки, см. ТаблицаРезультатовТестированияПоЗапуску
//  ПринудительнаяЗагрузка        - Булево                   - Если задано, то запуск тестирования будет загружен полностью, даже если предварительно он уже был загружен.
//
Процедура ЗагрузитьРезультатыТестированияПоЗапуску(НомерЗапускТестированияGitLab, Проект, ТаблицаРезультатовЗагрузки=Неопределено, ПринудительнаяЗагрузка=Ложь) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПроекта = Новый Структура;
	ПроектКОбработке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, 
					"РезультатыВыполненияТестовАдресСервера, 
					|РезультатыВыполненияТестовТокен, 
					|РезультатыВыполненияТестовИмяПроектаНаСервере,
					|Наименование");                                                               
	ДанныеПроекта.Вставить("Проект",Проект);
	ДанныеПроекта.Вставить("АдресСервера",ПроектКОбработке.РезультатыВыполненияТестовАдресСервера);
	ДанныеПроекта.Вставить("Токен",ПроектКОбработке.РезультатыВыполненияТестовТокен);
	ДанныеПроекта.Вставить("ИмяПроектаНаСервере",ПроектКОбработке.РезультатыВыполненияТестовИмяПроектаНаСервере);
	ДанныеПроекта.Вставить("Наименование", ПроектКОбработке.Наименование);
	ДанныеПроекта.Вставить("КешОтветственный", Новый Соответствие);
	ДанныеПроекта.Вставить("КешРазделПроекта", Новый Соответствие);

	Соединение = GitLabСоединение(ДанныеПроекта.АдресСервера);
	
	ИнформацияОЗапуске = ИнформацияОЗапускеТестированияGitLab(Соединение, ДанныеПроекта.Токен, ДанныеПроекта.ИмяПроектаНаСервере, НомерЗапускТестированияGitLab);
	
	ЗагруженныеВетки = Новый Массив;
	ОбработатьДанныеЗапускаТестированияGitLab(ИнформацияОЗапуске, ДанныеПроекта, Соединение, ЗагруженныеВетки, ТаблицаРезультатовЗагрузки, ПринудительнаяЗагрузка);	
	Соединение = Неопределено;
КонецПроцедуры

// Формирует таблицу для передачи в процедуру ЗагрузитьРезультатыТестированияПоЗапуску
// 
// Возвращаемое значение:
//  ТаблицаРезультатовЗагрузки - ТаблицаЗначений - таблица с колонками:
//   *Проект - СправочникСсылка.Проект
//   *Ветка - СправочникСсылка.Ветки
//   *Тест - СправочникСсылка.Тесты
//   *Уточнение - Строка - Информация о результате выполнения теста.
//   *Комментарий - Строка - Дополнительная информация о результате выполнения.
//
Функция ТаблицаРезультатовТестированияПоЗапуску() Экспорт
	 ТаблицаРезультатовЗагрузки = Новый ТаблицаЗначений;
	 ТаблицаРезультатовЗагрузки.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	 ТаблицаРезультатовЗагрузки.Колонки.Добавить("Ветка", Новый ОписаниеТипов("СправочникСсылка.Ветки"));
	 ТаблицаРезультатовЗагрузки.Колонки.Добавить("Тест", Новый ОписаниеТипов("СправочникСсылка.Тесты"));
	 ТаблицаРезультатовЗагрузки.Колонки.Добавить("Уточнение", Новый ОписаниеТипов("Строка"));
	 ТаблицаРезультатовЗагрузки.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	 Возврат ТаблицаРезультатовЗагрузки;
КонецФункции

// Возвращает данные о серверах выполнения заданий
//
// Параметры:
//  Проект - СправочникСсылка.Проекты
//
// Возвращаемое значение:
//   Массив
Функция ИнформацияОСерверахGitLab(Проект) Экспорт
	
	ДанныеПроекта = ДанныеПроектаДляЗагрузкиРезультатовТестов(Проект);
	Соединение = GitLabСоединение(ДанныеПроекта.РезультатыВыполненияТестовАдресСервера);
	
	Ответ = Новый Массив;
	Сч = 1;
	Пока Истина Цикл
		Ресурс = СтрШаблон("/api/v4/runners/?page=%1&per_page=100", Сч);
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ДанныеПроекта.РезультатыВыполненияТестовТокен);
		Если ТекущийОтвет.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		Для Каждого Элем Из ТекущийОтвет Цикл
			Ответ.Добавить(Элем);
		КонецЦикла;
		Сч = Сч + 1;
	КонецЦикла;	
	
	Возврат Ответ;
	
КонецФункции

// Возвращает данные о сервере выполнения заданий
//
// Параметры:
//  Проект - СправочникСсылка.Проекты
//  Идентификатор - Число
//
//
// Возвращаемое значение:
//   Структура
Функция ИнформацияОСервереGitLab(Проект, Идентификатор) Экспорт
	
	ДанныеПроекта = ДанныеПроектаДляЗагрузкиРезультатовТестов(Проект);
	Соединение = GitLabСоединение(ДанныеПроекта.РезультатыВыполненияТестовАдресСервера);
	
	Ресурс = СтрШаблон("/api/v4/runners/%1", XMLСтрока(Идентификатор));
	ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ДанныеПроекта.РезультатыВыполненияТестовТокен);
	Возврат ТекущийОтвет;
	
КонецФункции

// Возвращает данные о заданиях, которые выполняет данный сервер
//
// Параметры:
//  Проект - СправочникСсылка.Проекты
//  ИдентификаторСервера - Число
//  Статус - Строка
//
// Возвращаемое значение:
//   Массив
Функция ИнформацияОЗаданияхВыполняемыхНаСервере(Проект, ИдентификаторСервера, Статус) Экспорт
	
	ДанныеПроекта = ДанныеПроектаДляЗагрузкиРезультатовТестов(Проект);
	Соединение = GitLabСоединение(ДанныеПроекта.РезультатыВыполненияТестовАдресСервера);
	
	Ресурс = СтрШаблон("/api/v4/runners/%1/jobs?status=%2", XMLСтрока(ИдентификаторСервера), Статус);
	ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ДанныеПроекта.РезультатыВыполненияТестовТокен);
	Возврат ТекущийОтвет;
	
КонецФункции

// Возвращает данные о заданиях, которые выполнялись на данном сервере
//
// Параметры:
//  Проект - СправочникСсылка.Проекты
//  ИдентификаторСервера - Число
//  Дата - Дата
//
// Возвращаемое значение:
//   Массив
Функция ИнформацияОЗаданияхВыполнявшихсяНаСервере(Проект, ИдентификаторСервера, Дата) Экспорт
	
	ДанныеПроекта = ДанныеПроектаДляЗагрузкиРезультатовТестов(Проект);
	Соединение = GitLabСоединение(ДанныеПроекта.РезультатыВыполненияТестовАдресСервера);
	
	Ресурс = СтрШаблон("/api/v4/runners/%1/jobs?order_by=id&sort=desc", XMLСтрока(ИдентификаторСервера));
	ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, ДанныеПроекта.РезультатыВыполненияТестовТокен);
	
	Результат = Новый Массив;
	Для Каждого Элем Из ТекущийОтвет Цикл
		Если Элем.created_at < Дата Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Элем);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

// Возвращает соединение с сервером Gitlab
//
// Параметры:
//  Сервер - Строка
//
//
// Возвращаемое значение:
//   HTTPСоединение
Функция GitLabСоединение(Сервер) Экспорт
	
	OpenSSL = Новый ЗащищенноеСоединениеOpenSSL;
	Соединение = Новый HTTPСоединение(Сервер,,,,, 10, OpenSSL);
	
	Возврат Соединение;
	
КонецФункции

// Возвращает данные о раннерах указанного проекта
//
// Параметры:
//  Проект     - Строка
//  Соединение - HTTPСоединение
//  Токен      - Строка
//
Функция ИнформацияОРаннерахПроекта(Проект, Соединение, Токен) Экспорт
	
	Ответ = Новый Массив;
	Сч = 1;
	Пока Истина Цикл
		Ресурс = СтрШаблон("/api/v4/projects/%1/runners/?page=%2&per_page=100", 
			Тестирование.ЭкранироватьСпецсимволыWeb(Проект), Формат(Сч, "ЧГ="));
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, Токен);
		Если ТекущийОтвет.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		Для Каждого Элем Из ТекущийОтвет Цикл
			Ответ.Добавить(Элем);
		КонецЦикла;
		Сч = Сч + 1;
	КонецЦикла;	
	
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроектыКОбработке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Наименование КАК Наименование,
		|	Проекты.РезультатыВыполненияТестовАдресСервера КАК РезультатыВыполненияТестовАдресСервера,
		|	Проекты.РезультатыВыполненияТестовТокен КАК РезультатыВыполненияТестовТокен,
		|	Проекты.РезультатыВыполненияТестовИмяПроектаНаСервере КАК РезультатыВыполненияТестовИмяПроектаНаСервере,
		|	Проекты.АвтоматическиПроверятьИсправлениеОшибок КАК АвтоматическиПроверятьИсправлениеОшибок,
		|	Проекты.ЗапускатьАвтоматическоеТестирование КАК ЗапускатьАвтоматическоеТестирование
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ЗагружатьРезультатыВыполненияТестов";
	
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ДанныеПроектаДляЗагрузкиРезультатовТестов(Проект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Наименование КАК Наименование,
		|	Проекты.РезультатыВыполненияТестовАдресСервера КАК РезультатыВыполненияТестовАдресСервера,
		|	Проекты.РезультатыВыполненияТестовТокен КАК РезультатыВыполненияТестовТокен,
		|	Проекты.РезультатыВыполненияТестовИмяПроектаНаСервере КАК РезультатыВыполненияТестовИмяПроектаНаСервере,
		|	Проекты.АвтоматическиПроверятьИсправлениеОшибок КАК АвтоматическиПроверятьИсправлениеОшибок,
		|	Проекты.ЗапускатьАвтоматическоеТестирование КАК ЗапускатьАвтоматическоеТестирование
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = Новый Структура;
		Результат.Вставить("Проект", ВыборкаДетальныеЗаписи.Проект);
		Результат.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Результат.Вставить("РезультатыВыполненияТестовАдресСервера", ВыборкаДетальныеЗаписи.РезультатыВыполненияТестовАдресСервера);
		Результат.Вставить("РезультатыВыполненияТестовТокен", ВыборкаДетальныеЗаписи.РезультатыВыполненияТестовТокен);
		Результат.Вставить("РезультатыВыполненияТестовИмяПроектаНаСервере", ВыборкаДетальныеЗаписи.РезультатыВыполненияТестовИмяПроектаНаСервере);
		Результат.Вставить("АвтоматическиПроверятьИсправлениеОшибок", ВыборкаДетальныеЗаписи.АвтоматическиПроверятьИсправлениеОшибок);
		Результат.Вставить("ЗапускатьАвтоматическоеТестирование", ВыборкаДетальныеЗаписи.ЗапускатьАвтоматическоеТестирование);
		Возврат Результат; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Процедура ОбработатьДанныеЗапускаТестированияGitLab(Pipe, ДанныеПроекта, Соединение, ЗагруженныеВетки=Неопределено,
													ТаблицаРезультатовЗагрузки=Неопределено, ПринудительнаяЗагрузка=Ложь)
	
	КешСтатусовТестов = Новый Соответствие;
	ДанныеПроекта.Вставить("КешСтатусовТестов", КешСтатусовТестов);
	
	Если ЗагруженныеВетки = Неопределено Тогда
		ЗагруженныеВетки = Новый Массив;
	КонецЕсли;
	
	ВеткаСППР = Неопределено;
	
	ИмяПроекта = ДанныеПроекта.Наименование;

	НомерЗапускТестированияGitLab = Pipe.id; 

	ЗапускЗавершен = СтатусGitlabЗавершен(Pipe.status);
	
	Если ДанныеПроекта.Свойство("project_id") Тогда
		ИмяПроектаНаСервере = XMLСтрока(ДанныеПроекта.project_id);
	Иначе	
		ИмяПроектаНаСервере = ДанныеПроекта.ИмяПроектаНаСервере;
	КонецЕсли;	
	
	Если НЕ ПодчиненныеЗапускиЗавершены(НомерЗапускТестированияGitLab, ДанныеПроекта) Тогда
		ЗапускЗавершен = Ложь;
	КонецЕсли;	
	
	Если НЕ ПринудительнаяЗагрузка
		И ЗапускЗавершен 
		И ЗапускТестированияЗагружен(НомерЗапускТестированияGitLab, Pipe.updated_at, ДанныеПроекта.Проект) Тогда
		
		Если ДанныеПроекта.Свойство("РодительскийЗапуск") Тогда
			ПроставитьЗапускуТестированияРодительскийЗапуск(ДанныеПроекта, Pipe.id);
		КонецЕсли;	
		
		Возврат;
	КонецЕсли; 
	
	Информация = ИнформацияОЗапускеТестированияGitLab(Соединение, ДанныеПроекта.Токен, ИмяПроектаНаСервере, НомерЗапускТестированияGitLab);
	ИмяАвтора = "";
	Если Информация.Свойство("user") И Информация.user.Свойство("name") Тогда
		ИмяАвтора = Информация.user.name;
	КонецЕсли;
	ДатаСборки = Информация.created_at;
	ДатаЗавершения = ?(ЗапускЗавершен, Pipe.updated_at, Неопределено);
	
	ВеткаСтрокой = "";
	Если ДанныеПроекта.Свойство("ВеткаСППР") Тогда
		ВеткаСППР = ДанныеПроекта.ВеткаСППР;
	Иначе	
		ВеткаСППР = ВеткаСППР(Информация.ref, ДанныеПроекта.Проект, ВеткаСтрокой);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВеткаСППР) Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.Создание ветки'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'Не найдена Ветка по строке %1. Идентификатор сборки: %2'"), 
							Информация.ref,
							XMLСтрока(НомерЗапускТестированияGitLab)));

		Возврат;
	КонецЕсли;

	ПараметрыЗапускаТестирования = Новый Структура;
	ПараметрыЗапускаТестирования.Вставить("НомерЗапускТестированияGitLab", НомерЗапускТестированияGitLab);
	ПараметрыЗапускаТестирования.Вставить("ДатаСоздания", ДатаСборки);
	ПараметрыЗапускаТестирования.Вставить("Ветка", ВеткаСППР);
	ПараметрыЗапускаТестирования.Вставить("ref", Информация.ref);
	ПараметрыЗапускаТестирования.Вставить("Проект", ДанныеПроекта.Проект);
	ПараметрыЗапускаТестирования.Вставить("ИмяАвтора", ИмяАвтора);
	Если ДанныеПроекта.Свойство("РодительскийЗапуск") Тогда
		ПараметрыЗапускаТестирования.Вставить("РодительскийЗапуск", ДанныеПроекта.РодительскийЗапуск);
	КонецЕсли;	
	
	ЗапускТестирования = НовыйИлиСуществующийЗапускТестирования(ПараметрыЗапускаТестирования);
	
	// При создании новой релизной ветки ветка могла поменяться и надо оставить ту ветку, что была при создании ЗапускаТестирования 
	ВеткаСППРЗапускТестирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗапускТестирования, "Ветка");
	Если ЗначениеЗаполнено(ВеткаСППРЗапускТестирования) Тогда
		ВеткаСППРЗапускТестирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗапускТестирования, "Ветка");
	КонецЕсли;

	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"),
						УровеньЖурналаРегистрации.Информация,,ВеткаСППР,
						СтрШаблон(НСтр("ru = 'Загрузка результатов по ветке <%1>. Идентификатор сборки: %2'"), 
						ВеткаСППР,
						XMLСтрока(НомерЗапускТестированияGitLab)));

	ЭтоОсновнаяВеткаПроекта = ЭтоОсновнаяВеткаПроекта(ВеткаСППР);
	
	Тег = "";
	Если Информация.tag Тогда
		Тег = Информация.ref;
	КонецЕсли;
	
	ДлительностьЗапускаТестирования = 0;
	ВсеЗаданияGitLab = ИнформацияОЗаданияхGitLab(Соединение, ДанныеПроекта.Токен, ИмяПроектаНаСервере, НомерЗапускТестированияGitLab);
	КоличествоЗаданийДляАнализа = 0;
	Для Каждого ЗаданиеGitLab Из ВсеЗаданияGitLab Цикл
		Если ЗаданиеGitLab.duration <> Неопределено Тогда
			ДлительностьЗапускаТестирования = ДлительностьЗапускаТестирования + ЗаданиеGitLab.duration;
		КонецЕсли;	
		Если НЕ Лев(ЗаданиеGitLab.name, 4) = "util" Тогда
			КоличествоЗаданийДляАнализа = КоличествоЗаданийДляАнализа + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если КоличествоЗаданийДляАнализа = 0 Тогда
		// В запуске тестирования нет ни одного задания для загрузки.
		Если ЗапускЗавершен Тогда
			ЗапускТестирования = ЗапускТестированияПоИдентификатору(ДанныеПроекта.Проект, НомерЗапускТестированияGitLab);
			Если ЗначениеЗаполнено(ЗапускТестирования) Тогда
				ЗапускТестированияОбъект = ЗапускТестирования.ПолучитьОбъект();
				ЗапускТестированияОбъект.ДатаЗавершения = ДатаЗавершения;
				ЗаписатьЗапускТестирования(ЗапускТестированияОбъект);
			КонецЕсли;	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;

	ЗаданияGitLabСоСценарнымиТестами = Новый Массив;
	ПрочиеЗаданияGitLab = Новый Массив;
	
	ПодчиненныеЗапускиТестирования = ПодчиненныеЗапускиТестирования(ЗапускТестирования);
	Если ПодчиненныеЗапускиТестирования <>  Неопределено Тогда
		Для Каждого ТекЗапуск Из ПодчиненныеЗапускиТестирования Цикл
			ДанныеДочернегоЗапуска = Новый Структура;
			ДанныеДочернегоЗапуска.Вставить("id", ТекЗапуск.Pipeline_ID);
			ДанныеДочернегоЗапуска.Вставить("project_id", ИмяПроектаНаGitСервереИзАдресGitСервера(ТекЗапуск.ПроектАдресGitСервера));
			
			Попытка
				ДанныеДочернегоПроекта = ДанныеДочернегоПроекта(ТекЗапуск.Проект, ДанныеПроекта, ДанныеДочернегоЗапуска, ВеткаСППР, ЗапускТестирования);
				ПодчиненныйЗапуск =
					ТестированиеЗапускТестирования.ИнформацияОЗапускеДочернегоПроекта(
						ДанныеПроекта.Проект, ДанныеДочернегоЗапуска.project_id, ДанныеДочернегоЗапуска.id);
						
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Загрузка результатов тестирования.'"),
					УровеньЖурналаРегистрации.Информация,,
					ДанныеДочернегоПроекта.Проект,
					СтрШаблон(НСтр("ru = 'Загрузка результатов тестирования дочернего запуска <%1>'"),
						ДанныеДочернегоЗапуска.id));
						
				ОбработатьДанныеЗапускаТестированияGitLab(ПодчиненныйЗапуск, ДанныеДочернегоПроекта, Соединение);
				
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"),
								УровеньЖурналаРегистрации.Ошибка,,,
								СтрШаблон(
								НСтр("ru = 'Ошибка при получении данных дочернего проекта <%1>.
								|%2'"), 
								ТекЗапуск.Проект,
								ОписаниеОшибки()));
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;
	
	Если НЕ ПринудительнаяЗагрузка Тогда
		ЗаданияGitLab = ОтфильтроватьЗаданияGitLab(ЗапускТестирования, ВсеЗаданияGitLab);  
	Иначе
		ЗаданияGitLab = ВсеЗаданияGitLab;
	КонецЕсли;
	
	Для Каждого ЗаданиеGitLab Из ЗаданияGitLab Цикл
		
		Если Лев(ЗаданиеGitLab.name, 4) = "bdd " Тогда
			ЗаданияGitLabСоСценарнымиТестами.Добавить(ЗаданиеGitLab);
			Продолжить;
		КонецЕсли;
		
		Если Лев(ЗаданиеGitLab.name, 4) = "util" Тогда
			Продолжить;
		КонецЕсли; 
		ПрочиеЗаданияGitLab.Добавить(ЗаданиеGitLab);
		
	КонецЦикла;
	
	Если ПрочиеЗаданияGitLab.Количество() = 0 И ЗаданияGitLabСоСценарнымиТестами.Количество() = 0 Тогда
		// Не найдено ни одного задания GitLab для загрузки.
		
		ЗапускТестированияОбъект = ЗапускТестирования.ПолучитьОбъект();
		ЗапускТестированияОбъект.ДатаЗавершения = ДатаЗавершения;
		ЗаписатьЗапускТестирования(ЗапускТестированияОбъект);
		Возврат;
	КонецЕсли;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеXML = Новый ЧтениеXML;
	Построитель = Новый ПостроительDOM;
	
	ТаблицаТестовПроцессовДляЗапуска = ТаблицаТестовДляЗапуска();
	ТаблицаТестовСценариевДляЗапуска = ТаблицаТестовДляЗапуска();
	
	КешНаборовЗаписей = Новый Соответствие;
	ТестыСИзменениямиДымовыхТестов = Новый Соответствие;
	
	ПодчиненныеЗапуски = Новый Массив;
	НадоВыполнитьЗаписьРезультатовДымовыхТестов = Ложь;
	
	КешДлительностьТестов = Новый Соответствие;
	ДанныеПроекта.Вставить("КешДлительностьТестов", КешДлительностьТестов);
	
	Для Каждого ЗаданиеGitLab Из ПрочиеЗаданияGitLab Цикл
		
		Если НЕ СтатусGitlabЗавершен(ЗаданиеGitLab.status) Тогда
			Продолжить;
		КонецЕсли;    
		
		ИмяВСистемеСборки = ЗаданиеGitLab.name; 
		
		ДанныеТеста = ДанныеТестаПоУмолчанию(ЗаданиеGitLab, ДатаСборки);
		ДанныеТеста.Вставить("ИмяВСистемеСборки", УбратьИзИмениВСистемеСборкиЧисловыеИндексы(ИмяВСистемеСборки));
		
		ДвДанныеАртефактов = Неопределено;
		Попытка
			Если ЗаданиеGitLab.Свойство("artifacts_file") И ФайлыАртефактовИмеютДопустимыйРазмер(ЗаданиеGitLab.artifacts_file.size) Тогда
				ДвДанныеАртефактов = АртефактыЗаданияGitLab(Соединение, ДанныеПроекта.Токен, ИмяПроектаНаСервере, НомерЗапускТестированияGitLab, ЗаданиеGitLab);
			КонецЕсли;	
		Исключение
			ДвДанныеАртефактов = Неопределено;
		КонецПопытки;
		
		Если ДвДанныеАртефактов = Неопределено Тогда 
			ДанныеТестаСППР = ТестСППРПоСтроке(ИмяВСистемеСборки, ОсновнойПроектЗагрузкиРезультатов(ДанныеПроекта),,ЗаданиеGitLab);
			ДанныеТеста.Вставить("Тест", ДанныеТестаСППР.Ссылка);
			// Если не удалось получить артефакты из-за ошибки выполнения запроса (а не потому что они уже удалены) запись всё равно создается.
			ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта, ЗаданиеGitLab, ДанныеПроекта);
			Продолжить;
		КонецЕсли;

		ИмяКаталога = РаспаковатьАртефактыВоВременныйКаталог(ЧтениеZipФайла,ДвДанныеАртефактов);
		
		Файлы = НайтиФайлы(ИмяКаталога,"trigger.json",Истина);
		Для Каждого Файл Из Файлы Цикл
			
			ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя);
			ДанныеДочернегоЗапуска = ПрочитатьJSON(ЧтениеJSON); 
			
			ИнформацияОДочернемПроекте = ТестированиеЗапускТестирования.ИнформацияОПроекте(
				ДанныеПроекта.Проект, ДанныеДочернегоЗапуска.project_id);
			ДочернийПроект = ДочернийПроект(ИнформацияОДочернемПроекте.ssh_url_to_repo);
			Если ЗначениеЗаполнено(ДочернийПроект) Тогда
				
				ДанныеДочернегоПроекта = ДанныеДочернегоПроекта(ДочернийПроект, ДанныеПроекта, ДанныеДочернегоЗапуска, ВеткаСППР, ЗапускТестирования);
				
				ПодчиненныйЗапуск =
					ТестированиеЗапускТестирования.ИнформацияОЗапускеДочернегоПроекта(
						ДанныеПроекта.Проект, ДанныеДочернегоЗапуска.project_id, ДанныеДочернегоЗапуска.id);
						
				ПодчиненныеЗапуски.Добавить(ПодчиненныйЗапуск);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Загрузка результатов тестирования.'"),
					УровеньЖурналаРегистрации.Информация,,
					ДанныеДочернегоПроекта.Проект,
					СтрШаблон(НСтр("ru = 'Загрузка результатов тестирования дочернего запуска <%1>'"),
						ДанныеДочернегоЗапуска.id));
				ОбработатьДанныеЗапускаТестированияGitLab(ПодчиненныйЗапуск, ДанныеДочернегоПроекта, Соединение);
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("project_id", ДанныеДочернегоЗапуска.project_id);
				ПараметрыПоиска.Вставить("id", ДанныеДочернегоЗапуска.id);
			Иначе
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Загрузка результатов тестирования.'"),
					УровеньЖурналаРегистрации.Ошибка,,
					Неопределено,
					СтрШаблон(НСтр("ru = 'Не найден проект по данным дочернего запуска <%1>'"),
						ИнформацияОДочернемПроекте.ssh_url_to_repo));
			КонецЕсли;	
			ЧтениеJSON.Закрыть();
		КонецЦикла;
		
		КаталогПоиска = ИмяКаталога + ПолучитьРазделительПути() + "junit";
		Файлы = НайтиФайлы(КаталогПоиска,"*.xml",Истина);
		Если Файлы.Количество() = 0 Тогда
			ДанныеТестаСППР = ТестСППРПоСтроке(ИмяВСистемеСборки, ОсновнойПроектЗагрузкиРезультатов(ДанныеПроекта),,ЗаданиеGitLab);
			ДанныеТеста.Вставить("Тест", ДанныеТестаСППР.Ссылка);
			ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта, ЗаданиеGitLab, ДанныеПроекта);
			Продолжить;
		КонецЕсли;

		Для Каждого Файл Из Файлы Цикл
			ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
			Документ = Построитель.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			
			testsuites = Документ.ПервыйДочерний;
			Для Каждого testsuite Из testsuites.ДочерниеУзлы Цикл
				ВидТеста = Неопределено;
				Для Каждого Атрибут Из testsuite.Атрибуты Цикл
					Если НРег(Атрибут.Имя) = "name" Тогда
						ВидТеста = Атрибут.Значение;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
				Если ВидТеста = Неопределено Тогда
					Продолжить;
				КонецЕсли;	 
				
				ЗаписатьВСтруктуруЗначенияИзXML(ДанныеТеста, testsuite);
				
				ДанныеТестаСППР = ТестСППРПоСтроке(ИмяВСистемеСборки, ОсновнойПроектЗагрузкиРезультатов(ДанныеПроекта),
												   ВидТеста + " " + ИмяВСистемеСборки,ЗаданиеGitLab,ДанныеТеста);
				ДанныеТеста.Вставить("Тест", ДанныеТестаСППР.Ссылка);
				ДобавитьДанныеВТаблицуРезультатов(ДанныеПроекта.Проект, ВеткаСППР, ДанныеТеста.Тест, testsuite, ТаблицаРезультатовЗагрузки);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
								УровеньЖурналаРегистрации.Информация,,ДанныеТеста.Тест,
								НСтр("ru = 'Загрузка дымового теста.'"));
								
				Если КешНаборовЗаписей[ДанныеТеста.Тест] = Неопределено Тогда
					НаборЗаписей = РегистрыСведений.РезультатыВыполненияТестов.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Период.Установить(ДатаСборки);
					НаборЗаписей.Отбор.Проект.Установить(ДанныеПроекта.Проект);
					НаборЗаписей.Отбор.Ветка.Установить(ВеткаСППР);
					НаборЗаписей.Отбор.Тест.Установить(ДанныеТеста.Тест);
					НаборЗаписей.Прочитать(); //Нужно прочитать, т.к. часть джобов могла быть загружена раньше
					КешНаборовЗаписей.Вставить(ДанныеТеста.Тест, НаборЗаписей);
					
					ЕстьИтоговаяЗапись = Ложь;
					Для Каждого ЗаписьРС Из НаборЗаписей Цикл
						Если НЕ ЗначениеЗаполнено(ЗаписьРС.ЭлементТеста) Тогда
							ЕстьИтоговаяЗапись = Истина;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
					
					Если НЕ ЕстьИтоговаяЗапись Тогда
						// Для всех тестов - с группировкой по элементам и без - создается сначала общая запись в регистре.
						//ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта, ЗаданиеGitLab, ДанныеПроекта);
						ЗаписьРС = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьРС, ДанныеТеста);
						ЗаписьРС.Ветка = ВеткаСППР;
						ЗаписьРС.ЗапускТестирования = ЗапускТестирования;
						ЗаписьРС.Проект = ДанныеПроекта.Проект;
						ЗаписьРС.Статус = ДанныеТеста.Статус;
						ЗаписьРС.НачалоВыполнения = ЗаданиеGitLab.started_at;
						ЗаписьРС.ОкончаниеВыполнения = ЗаданиеGitLab.finished_at;
						ОбновитьСтатусЗаписиРСИзКеша(ЗаписьРС, ДанныеПроекта.КешСтатусовТестов, ДанныеТеста.ИмяВСистемеСборки);
						НадоВыполнитьЗаписьРезультатовДымовыхТестов = Истина;
						ТестыСИзменениямиДымовыхТестов.Вставить(ДанныеТеста.Тест, Истина);
					КонецЕсли;
					
				Иначе
					НаборЗаписей = КешНаборовЗаписей[ДанныеТеста.Тест];
					Для Каждого ЗаписьРС Из НаборЗаписей Цикл
						Если НЕ ЗначениеЗаполнено(ЗаписьРС.ЭлементТеста) Тогда
							ЗаписьРС.Статус = ДанныеТеста.Статус;
							ТекСатус = ЗаписьРС.Статус;
							ОбновитьСтатусЗаписиРСИзКеша(ЗаписьРС, ДанныеПроекта.КешСтатусовТестов, ДанныеТеста.ИмяВСистемеСборки);
							Если ЗаписьРС.Статус <> ТекСатус Тогда
								НадоВыполнитьЗаписьРезультатовДымовыхТестов = Истина;
								ТестыСИзменениямиДымовыхТестов.Вставить(ДанныеТеста.Тест, Истина);
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;					
												
				КешЭлементовТеста = Новый Соответствие;
				Для Каждого ТекЗапись Из НаборЗаписей Цикл
					КешЭлементовТеста.Вставить(ТекЗапись.ЭлементТеста, ТекЗапись);
				КонецЦикла;	
				
				ТаблицаМетаданных = ИнтеграцияСВНешнимиСистемами.ПолучитьТаблицуМетаданных();
				
				Если ДанныеТестаСППР.РезультатыТестаДетализируютсяПоОбъектамМетаданных Тогда
					Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
						Если ДочерниеУзлы_testsuite.ИмяУзла = "testcase" Тогда
							ЭлементТеста = Неопределено;
							НоваяСтрока = ТаблицаМетаданных.Добавить();
							Для Каждого Атрибут Из ДочерниеУзлы_testsuite.Атрибуты Цикл
								Если Атрибут.ИмяУзла = "name" Тогда
									НоваяСтрока.ИмяМетаданного = Атрибут.Значение;
								КонецЕсли; 
							КонецЦикла;
							
							НоваяСтрока.Уточнение = "";
							Для Каждого ДочерниеУзлы_testcase Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
								Если ДочерниеУзлы_testcase.ИмяУзла = "error" 
									ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "failure"
									ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "skipped"
									ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "success" Тогда
									НоваяСтрока.Уточнение = ДочерниеУзлы_testcase.ИмяУзла;
									Прервать;
								КонецЕсли; 
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
					ОбъектыМетаданных = ИнтеграцияСВнешнимиСистемами.НайтиОбъектыМетаданных(ТаблицаМетаданных, ИмяПроекта);
					Для Каждого Строка Из ОбъектыМетаданных Цикл
						Если ЗначениеЗаполнено(Строка.ПодчиненныйОбъект) Тогда
							ЭлементТеста = Строка.ПодчиненныйОбъект;
						ИначеЕсли ЗначениеЗаполнено(Строка.ПроблемныйОбъект) Тогда
							ЭлементТеста = Строка.ПроблемныйОбъект;
						Иначе
							Продолжить;
						КонецЕсли;

						ДанныеТеста.Вставить("ЭлементТеста", ЭлементТеста);
						ДанныеТеста.Вставить("Статус", СтатусЭлементаПоСтроке(Строка.Уточнение));
						
						Если КешЭлементовТеста[ЭлементТеста] = Неопределено Тогда
							ТекЗапись = ДобавитьСтрокуВНаборЗаписейРезультатТеста(НаборЗаписей, ДанныеПроекта.Проект, ВеткаСППР, ДанныеТестаСППР.Ссылка, ЭлементТеста, ЗапускТестирования, ДатаСборки, ДанныеТеста.Статус, ДанныеТеста);
							КешЭлементовТеста.Вставить(ЭлементТеста, ТекЗапись);
							НадоВыполнитьЗаписьРезультатовДымовыхТестов = Истина;
							ТестыСИзменениямиДымовыхТестов.Вставить(ДанныеТеста.Тест, Истина);
						Иначе      
							
							ТекЗапись = КешЭлементовТеста[ЭлементТеста];
							
							Если ТекЗапись.Статус <> Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой Тогда
								Если ДанныеТеста.Статус <> Перечисления.СтатусыВыполненияТеста.НеЗапускался Тогда
									Если ТекЗапись.Статус <> ДанныеТеста.Статус Тогда
										ТекЗапись.Статус = ДанныеТеста.Статус;
										НадоВыполнитьЗаписьРезультатовДымовыхТестов = Истина;
										ТестыСИзменениямиДымовыхТестов.Вставить(ДанныеТеста.Тест, Истина);
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;	
						
					КонецЦикла;
				Иначе
					Если НаборЗаписей.Количество() = 1 Тогда
						//Возможно надо обновить общую запись
						Если НаборЗаписей[0].Статус <> ДанныеТеста.Статус Тогда
							НаборЗаписей[0].Статус = ДанныеТеста.Статус;
							НадоВыполнитьЗаписьРезультатовДымовыхТестов = Истина;
							ТестыСИзменениямиДымовыхТестов.Вставить(ДанныеТеста.Тест, Истина);
						КонецЕсли;	
						
					КонецЕсли;	
				КонецЕсли;
				
			КонецЦикла;	 
			
		КонецЦикла;	
		
		Попытка
			УдалитьФайлы(ИмяКаталога);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Загрузка результатов тестирования. Ошибка удаления временных файлов'"),
				УровеньЖурналаРегистрации.Ошибка,,
				Неопределено,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	Если НадоВыполнитьЗаписьРезультатовДымовыхТестов Тогда
		Для Каждого Элем Из КешНаборовЗаписей Цикл
			Если ТестыСИзменениямиДымовыхТестов[Элем.Ключ] = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			НаборЗаписей = Элем.Значение;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				Попытка
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
					УровеньЖурналаРегистрации.Информация,,ДанныеТеста.Тест,
					СтрШаблон(НСтр("ru = 'Запись набора записей дымового теста. Количество записей: %1'"), XMLСтрока(НаборЗаписей.Количество())));
					НаборЗаписей.Записать(Истина);
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"),
					УровеньЖурналаРегистрации.Ошибка,,,
					СтрШаблон(
					НСтр("ru = 'Ошибка при записи набора тестов ветки <%1>, теста <%2>.
					| %3.'"), 
					ВеткаСППР,
					ДанныеТестаСППР.Ссылка,
					ОписаниеОшибки()));
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	    
	
	КоличествоТестов = 0;
	АртефактыУдалены = Ложь;
	Для Каждого ЗаданиеGitLab Из ЗаданияGitLabСоСценарнымиТестами Цикл
		
		Если НЕ СтатусGitlabЗавершен(ЗаданиеGitLab.status) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЗначениеЗаполнено(ЗаданиеGitLab.artifacts_expire_at) И ЗаданиеGitLab.artifacts_expire_at < ТекущаяДата() Тогда
			АртефактыУдалены = Истина;
		КонецЕсли;	 
		
		Попытка
			ДвДанныеАртефактов = АртефактыЗаданияGitLab(Соединение, ДанныеПроекта.Токен, ИмяПроектаНаСервере, НомерЗапускТестированияGitLab, ЗаданиеGitLab);
		Исключение
			//артефактов может уже не быть
			Продолжить;
		КонецПопытки;
		
		Поток = ДвДанныеАртефактов.ОткрытьПотокДляЧтения();
		
		ЧтениеZipФайла.Открыть(Поток);
		
		ИмяКаталога = ПолучитьИмяВременногоФайла("");
		СоздатьКаталог(ИмяКаталога);
		ЧтениеZipФайла.ИзвлечьВсе(ИмяКаталога,РежимВосстановленияПутейФайловZIP.Восстанавливать);
		ЧтениеZipФайла.Закрыть();
		Поток.Закрыть();  
		
		КоличествоСценариевВЗадании = 0;
		
		ФайлыСценарныеТестыДляЗапуска = НайтиФайлы(ИмяКаталога,"compile_tests.txt",Истина);
		Для Каждого ФайлСценарныеТестыДляЗапуска Из ФайлыСценарныеТестыДляЗапуска Цикл
			ЧтениеJSON.ОткрытьФайл(ФайлСценарныеТестыДляЗапуска.ПолноеИмя);
			Данные = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			КоличествоСценариевВЗадании = КоличествоСценариевВЗадании + Данные.process_tests.Количество();
			Для Каждого Тест Из Данные.process_tests Цикл
				СтрокаТаблицы = ТаблицаТестовПроцессовДляЗапуска.Найти(Тест,"Тест");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаТестовПроцессовДляЗапуска.Добавить();
					СтрокаТаблицы.Тест = Тест;
				КонецЕсли;	 
			КонецЦикла;	
			
			КоличествоСценариевВЗадании = КоличествоСценариевВЗадании + Данные.scenario_tests.Количество();
			Для Каждого Тест Из Данные.scenario_tests Цикл
				СтрокаТаблицы = ТаблицаТестовСценариевДляЗапуска.Найти(Тест,"Тест");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = ТаблицаТестовСценариевДляЗапуска.Добавить();
					СтрокаТаблицы.Тест = Тест;
				КонецЕсли;	 
			КонецЦикла;	
			
		КонецЦикла; 
		
		ФайлыjUnit = НайтиФайлы(ИмяКаталога,"*.xml",Истина);
		
		НомерСценария = 0;
		Для Каждого ФайлjUnit Из ФайлыjUnit Цикл
			УчитыватьТолькоТестыВыполненныеСОшибкой = Ложь;
			Если НРег(ФайлjUnit.Имя) = "junit_compile.xml" Тогда
				// Значит выполняется загрузка junit с результатами компиляции. 
				// Если тест скомпилировался успешно - он запустится и у него будет отдельный junit, который мы загрузим далее
				// и тогда делать запись в регистр не нужно.
				// Если произошла ошибка при компиляции - её нужно загрузить, т.к. больше никакой информации в отдельном Junit о ней нет.
				УчитыватьТолькоТестыВыполненныеСОшибкой = Истина;
			ИначеЕсли НРег(ФайлjUnit.Имя) <> "junit.xml" Тогда
				Продолжить;
			КонецЕсли;
			
			ЧтениеXML.ОткрытьФайл(ФайлjUnit.ПолноеИмя);
			Документ = Построитель.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			testsuites = Документ.ПервыйДочерний;
			Для Каждого testsuite Из testsuites.ДочерниеУзлы Цикл
				
				ДанныеТеста = ДанныеТестаПоУмолчанию(ЗаданиеGitLab, ДатаСборки);
				ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.ВыполненУспешно);
				ДанныеТеста.Вставить("КешОтветственный", ДанныеПроекта.КешОтветственный);
				ДанныеТеста.Вставить("КешРазделПроекта", ДанныеПроекта.КешРазделПроекта);
				ДанныеТеста.Вставить("ЭтоОсновнаяВеткаПроекта", ЭтоОсновнаяВеткаПроекта);

				Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
					Если ДочерниеУзлы_testsuite.ИмяУзла = "properties" Тогда
						Для Каждого property Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
							name = "";
							value = "";
							Для Каждого Атрибут Из property.Атрибуты Цикл
								Если Атрибут.ИмяУзла = "name" Тогда
									name = Атрибут.ЗначениеУзла;
								ИначеЕсли Атрибут.ИмяУзла = "value" Тогда
									value = Атрибут.ЗначениеУзла;
								КонецЕсли;	 
							КонецЦикла;	 
							Если name <> "" Тогда
								ДанныеТеста.Вставить(ИмяСвойстваДляСценарныхТестов(name),value);
							КонецЕсли;	 
						КонецЦикла;	 
					ИначеЕсли ДочерниеУзлы_testsuite.ИмяУзла = "testcase" Тогда
						Для Каждого Атрибут Из ДочерниеУзлы_testsuite.Атрибуты Цикл
							Если Атрибут.ИмяУзла = "time" Тогда
								ДанныеТеста.Вставить("time", Атрибут.ЗначениеУзла);
							ИначеЕсли Атрибут.ИмяУзла = "timestamp" Тогда
								ДанныеТеста.Вставить("timestamp", Атрибут.ЗначениеУзла);
							КонецЕсли;	
						КонецЦикла;	
						
						Для Каждого ДочерниеУзлы_testcase Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
							Если ДочерниеУзлы_testcase.ИмяУзла = "error" 
								ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "failure" Тогда
								ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой);
							ИначеЕсли ДочерниеУзлы_testcase.ИмяУзла = "skipped" Тогда
								ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
							ИначеЕсли ДочерниеУзлы_testcase.ИмяУзла = "name" Тогда
								ДанныеТеста.Вставить("TestCase",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;
				КонецЦикла;
				Если УчитыватьТолькоТестыВыполненныеСОшибкой И ДанныеТеста.Статус <> Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой Тогда
					Продолжить;
				КонецЕсли;
			
				КоличествоТестов = КоличествоТестов + 1;
				НомерСценария = НомерСценария + 1;
				ДопПараметрыЗаписиТеста = Новый Структура;
				Если ДанныеТеста.Свойство("timestamp") И ДанныеТеста.Свойство("time") Тогда
					Попытка
						ДатаИзСтроки = ДатаИзСтрокиjUnit(ДанныеТеста.timestamp);
						Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
							НачалоВыполнения = ДатаИзСтроки;
							ДлительностьСтрока = ДанныеТеста.time;
							ДлительностьСтрока = СтрЗаменить(ДлительностьСтрока, ",", ".");
							ДлительностьСтрока = СтрЗаменить(ДлительностьСтрока, Символы.НПП, "");
							Длительность = Число(ДлительностьСтрока);
							ОкончаниеВыполнения = НачалоВыполнения + Длительность;
							ДопПараметрыЗаписиТеста.Вставить("НачалоВыполнения", НачалоВыполнения);
							ДопПараметрыЗаписиТеста.Вставить("ОкончаниеВыполнения", ОкончаниеВыполнения);
						КонецЕсли;	
					Исключение
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"), 
						                         УровеньЖурналаРегистрации.Ошибка,,
						                         ,
						                         ОписаниеОшибки());
					КонецПопытки;
				ИначеЕсли ДанныеТеста.Свойство("StartDate") И ДанныеТеста.Свойство("EndDate") Тогда
					Попытка
						НачалоВыполнения = Дата(ДанныеТеста.StartDate);
						ОкончаниеВыполнения = Дата(ДанныеТеста.EndDate);
						ДопПараметрыЗаписиТеста.Вставить("НачалоВыполнения", НачалоВыполнения);
						ДопПараметрыЗаписиТеста.Вставить("ОкончаниеВыполнения", ОкончаниеВыполнения);
					Исключение
						ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"), 
						                         УровеньЖурналаРегистрации.Ошибка,,
						                         ,
						                         ОписаниеОшибки());
					КонецПопытки;
				Иначе	
					Если КоличествоСценариевВЗадании > 0 Тогда
						ДлительностьЗадания = ЗаданиеGitLab.finished_at - ЗаданиеGitLab.started_at;
						НачалоВыполнения = ЗаданиеGitLab.started_at + Окр(ДлительностьЗадания / КоличествоСценариевВЗадании * (НомерСценария-1));
						ОкончаниеВыполнения = ЗаданиеGitLab.started_at + Окр(ДлительностьЗадания / КоличествоСценариевВЗадании * НомерСценария);
						ДопПараметрыЗаписиТеста.Вставить("НачалоВыполнения", НачалоВыполнения);
						ДопПараметрыЗаписиТеста.Вставить("ОкончаниеВыполнения", ОкончаниеВыполнения);
					КонецЕсли;
				КонецЕсли;	
				
				Если ДанныеТеста.Свойство("uid_scenario_setting") И ЗначениеЗаполнено(ДанныеТеста.uid_scenario_setting) Тогда
					ДанныеТеста.Вставить("UidНастройкиСценария", ДанныеТеста.uid_scenario_setting);
				КонецЕсли;	
				
				ЗаписатьРезультатТеста(ВеткаСППР, ДанныеТеста, ЗапускТестирования, ДанныеПроекта, ЗаданиеGitLab, ДопПараметрыЗаписиТеста);
				Если ДанныеТеста.Свойство("Тест") Тогда
					ДобавитьДанныеВТаблицуРезультатов(ДанныеПроекта.Проект, ВеткаСППР, ДанныеТеста.Тест, testsuite, ТаблицаРезультатовЗагрузки);
				КонецЕсли;
				
				Если ДанныеТеста.КодНастройкиПроцесса <> Неопределено И ДанныеТеста.КодНастройкиПроцесса <> "" Тогда
					УстановитьОтметкуТестЗапускался(ТаблицаТестовПроцессовДляЗапуска,ДанныеТеста.КодНастройкиПроцесса);
				ИначеЕсли ДанныеТеста.КодНастройкиСценария <> Неопределено И ДанныеТеста.КодНастройкиСценария <> "" Тогда
					УстановитьОтметкуТестЗапускался(ТаблицаТестовСценариевДляЗапуска,ДанныеТеста.КодНастройкиСценария);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	 
		
		Попытка
			УдалитьФайлы(ИмяКаталога);
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
	ЗапускЗавершен = СтатусGitlabЗавершен(Pipe.status);
	Если НЕ ПодчиненныеЗапускиЗавершены(НомерЗапускТестированияGitLab, ДанныеПроекта) Тогда
		ЗапускЗавершен = Ложь;
	КонецЕсли;	
	ДатаЗавершения = ?(ЗапускЗавершен, Pipe.updated_at, Неопределено);
	
	ЗапускТестированияОбъект = ЗапускТестирования.ПолучитьОбъект();
	ЗапускТестированияОбъект.ДатаЗавершения = ДатаЗавершения;
	ЗапускТестированияОбъект.КоличествоТестов = КоличествоТестов;
	ЗапускТестированияОбъект.Тег = Тег;
	ЗапускТестированияОбъект.СборкаВерсии = СборкаВерсииПоТегу(ВеткаСППР,Информация);
	ПодчиненныеЗапуски = ПодчиненныеЗапускиТестирования(ЗапускТестирования);
	Для Каждого ТекЗапуск Из ПодчиненныеЗапуски Цикл
		ДлительностьЗапускаТестирования = ДлительностьЗапускаТестирования + (ТекЗапуск.Длительность*3600);
	КонецЦикла;	
	ЗапускТестированияОбъект.Длительность = Окр(ДлительностьЗапускаТестирования / 3600, 2);
	ЗаписатьЗапускТестирования(ЗапускТестированияОбъект);
	
	Если ЗагруженныеВетки.Найти(ВеткаСППР) = Неопределено Тогда
		ЗагруженныеВетки.Добавить(ВеткаСППР);
	КонецЕсли;
	
	Если ЗапускЗавершен И ДатаЗавершения <> Неопределено И НЕ АртефактыУдалены Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаТестовПроцессовДляЗапуска Цикл
			Если НЕ СтрокаТаблицы.Запускался Тогда
				ДанныеТеста = ДанныеТестаПоУмолчанию(, ДатаСборки);
				ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
				ДанныеТеста.Вставить("коднастройкипроцесса",СтрокаТаблицы.Тест);
				
				ЗаписатьРезультатТеста(ВеткаСППР,
				ДанныеТеста, ЗапускТестирования, ДанныеПроекта, ЗаданиеGitLab);
			КонецЕсли;	 
		КонецЦикла;	 
		Для Каждого СтрокаТаблицы Из ТаблицаТестовСценариевДляЗапуска Цикл
			Если НЕ СтрокаТаблицы.Запускался Тогда
				ДанныеТеста = ДанныеТестаПоУмолчанию(, ДатаСборки);
				ДанныеТеста.Вставить("Статус",Перечисления.СтатусыВыполненияТеста.НеЗапускался);
				ДанныеТеста.Вставить("коднастройкисценария",СтрокаТаблицы.Тест);
				
				ЗаписатьРезультатТеста(ВеткаСППР,
				ДанныеТеста, ЗапускТестирования, ДанныеПроекта, ЗаданиеGitLab);
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
КонецПроцедуры

Процедура ДобавитьДанныеВТаблицуРезультатов(Проект, Ветка, Тест, testsuite, Таблица)
	Если Таблица = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Тест) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваТеста = Новый Соответствие;
	Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
		Если ДочерниеУзлы_testsuite.ИмяУзла = "properties" Тогда
			Для Каждого property Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
				name = "";
				value = "";
				Для Каждого Атрибут Из property.Атрибуты Цикл
					Если Атрибут.ИмяУзла = "name" Тогда
						name = Атрибут.ЗначениеУзла;
					ИначеЕсли Атрибут.ИмяУзла = "value" Тогда
						value = Атрибут.ЗначениеУзла;
					КонецЕсли;	 
				КонецЦикла;	 
				СвойстваТеста.Вставить(ИмяСвойстваДляСценарныхТестов(name),value);	 
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
	
	Если СвойстваТеста.Получить("specification") <> Неопределено Тогда
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Проект = Проект;
		НоваяСтрока.Ветка = Ветка;
		НоваяСтрока.Тест = Тест;
		НоваяСтрока.Уточнение = СвойстваТеста["specification"]; 
		Если СвойстваТеста.Получить("description") <> Неопределено Тогда
			НоваяСтрока.Комментарий = СвойстваТеста["description"];
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
		Если ДочерниеУзлы_testsuite.ИмяУзла = "testcase" Тогда
			Для Каждого ДочерниеУзлы_testcase Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл  
				Если ДочерниеУзлы_testcase.ИмяУзла = "error" 
					ИЛИ ДочерниеУзлы_testcase.ИмяУзла = "failure" Тогда
					НоваяСтрока = Таблица.Добавить();
					НоваяСтрока.Проект = Проект;
					НоваяСтрока.Ветка = Ветка;
					НоваяСтрока.Тест = Тест;
					НоваяСтрока.Уточнение = ДочерниеУзлы_testcase.ТекстовоеСодержимое;   
					Для Каждого Атрибут Из ДочерниеУзлы_testcase.Атрибуты Цикл        
						Если Атрибут.ИмяУзла = "message" Тогда
							НоваяСтрока.Комментарий = Атрибут.ЗначениеУзла;
							Прервать;
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ДочернийПроект(АдресGitСервера)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.АдресGitСервера ПОДОБНО &АдресGitСервера";
	
	Запрос.УстановитьПараметр("АдресGitСервера", АдресGitСервера);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции	

Процедура ЗаписатьЗапускТестирования(Запуск)
	// При загрузке запусков, они уже запущены, поэтому при проведении их не надо запускать. 
	// Поэтому они создаются уже проведенными.
	Запуск.Проведен = Истина;
	Запуск.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура ПроверитьИсправлениеОшибок(Проект, ЗагруженныеВетки)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ошибки.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ОшибкиДляПроверки
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|ГДЕ
		|	Ошибки.Владелец = &Проект
		|	И НЕ Ошибки.Проверена
		|	И НЕ Ошибки.Отозвана
		|	И Ошибки.МетодВыявленияОшибки = ЗНАЧЕНИЕ(Перечисление.МетодыВыявленияОшибок.Автотесты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОшибкиДляПроверки.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ОшибкиДляПроверки.Ссылка.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках)
		|			ТОГДА ИсправлениеВВетках.Ветка
		|		ИНАЧЕ ОшибкиДляПроверки.Ссылка.ВеткаОбнаружения
		|	КОНЕЦ КАК ВеткаОбнаружения,
		|	ВЫБОР
		|		КОГДА ОшибкиДляПроверки.Ссылка.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках)
		|				И НЕ ИсправлениеВВетках.ВеткаИсправления ЕСТЬ NULL
		|				И НЕ ИсправлениеВВетках.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
		|			ТОГДА ИсправлениеВВетках.ВеткаИсправления
		|		КОГДА НЕ ОшибкиДляПроверки.Ссылка.ВеткаИсправления ЕСТЬ NULL
		|				И НЕ ОшибкиДляПроверки.Ссылка.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
		|			ТОГДА ОшибкиДляПроверки.Ссылка.ВеткаИсправления
		|		ИНАЧЕ ОшибкиДляПроверки.Ссылка.ВеткаОбнаружения
		|	КОНЕЦ КАК ВеткаИсправления
		|ПОМЕСТИТЬ ВеткиОбнаруженияИИсправления
		|ИЗ
		|	ОшибкиДляПроверки КАК ОшибкиДляПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ИсправлениеВВетках
		|		ПО ОшибкиДляПроверки.Ссылка = ИсправлениеВВетках.Ссылка
		|			И (ИсправлениеВВетках.СостояниеИсправления <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.ИсправлениеНеПланируется))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВеткиОбнаруженияИИсправления.Ссылка КАК Ссылка,
		|	ВеткиОбнаруженияИИсправления.ВеткаОбнаружения КАК ВеткаОбнаружения,
		|	ВеткиОбнаруженияИИсправления.ВеткаИсправления КАК ВеткаИсправления
		|ПОМЕСТИТЬ ОшибкиСОбновленнымиДанными
		|ИЗ
		|	ВеткиОбнаруженияИИсправления КАК ВеткиОбнаруженияИИсправления
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ВеткиОбнаруженияИИсправления КАК ВеткиОбнаружения
		|			ГДЕ
		|				ВеткиОбнаружения.Ссылка = ВеткиОбнаруженияИИсправления.Ссылка
		|				И ВеткиОбнаружения.ВеткаИсправления В (&ЗагруженныеВетки))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОшибкиСОбновленнымиДанными.Ссылка КАК Ссылка,
		|	ОшибкиСОбновленнымиДанными.ВеткаОбнаружения КАК ВеткаОбнаружения,
		|	ОшибкиСОбновленнымиДанными.ВеткаИсправления КАК ВеткаИсправления
		|ПОМЕСТИТЬ ОшибкиСПовторяющимисяЗагруженные
		|ИЗ
		|	ОшибкиСОбновленнымиДанными КАК ОшибкиСОбновленнымиДанными
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.РезультатыРегистрацииОшибок.СрезПервых(, НЕ Дубликат
		|					И ЗапускТестирования <> ЗНАЧЕНИЕ(Документ.ЗапускТестирования.ПустаяСсылка)) КАК РезультатыРегистрацииОшибокСрезПервых
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияТестов КАК РезультатыВыполненияТестов
		|					ПО
		|						РезультатыРегистрацииОшибокСрезПервых.Ветка = РезультатыВыполненияТестов.Ветка
		|							И РезультатыРегистрацииОшибокСрезПервых.Тест = РезультатыВыполненияТестов.Тест
		|							И РезультатыРегистрацииОшибокСрезПервых.ЭлементТеста = РезультатыВыполненияТестов.ЭлементТеста
		|							И РезультатыРегистрацииОшибокСрезПервых.ЗапускТестирования = РезультатыВыполненияТестов.ЗапускТестирования
		|			ГДЕ
		|				РезультатыРегистрацииОшибокСрезПервых.Ошибка = ОшибкиСОбновленнымиДанными.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыРегистрацииОшибокСрезПервых.Тест КАК Тест,
		|	РезультатыРегистрацииОшибокСрезПервых.ЭлементТеста КАК ЭлементТеста,
		|	РезультатыРегистрацииОшибокСрезПервых.Ошибка КАК Ошибка,
		|	ОшибкиСОбновленнымиДанными.ВеткаОбнаружения КАК ВеткаОбнаружения,
		|	ОшибкиСОбновленнымиДанными.ВеткаИсправления КАК ВеткаИсправления,
		|	РезультатыРегистрацииОшибокСрезПервых.ЗапускТестирования КАК ЗапускТестирования
		|ПОМЕСТИТЬ ТестыЗаблокированныеИсходнойОшибкой
		|ИЗ
		|	РегистрСведений.РезультатыРегистрацииОшибок.СрезПервых КАК РезультатыРегистрацииОшибокСрезПервых
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОшибкиСПовторяющимисяЗагруженные КАК ОшибкиСОбновленнымиДанными
		|		ПО РезультатыРегистрацииОшибокСрезПервых.Ошибка = ОшибкиСОбновленнымиДанными.Ссылка
		|			И РезультатыРегистрацииОшибокСрезПервых.Ветка = ОшибкиСОбновленнымиДанными.ВеткаОбнаружения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыВыполненияТестовСрезПоследних.Период КАК Период,
		|	РезультатыВыполненияТестовСрезПоследних.Тест КАК Тест,
		|	РезультатыВыполненияТестовСрезПоследних.Ветка КАК Ветка,
		|	РезультатыВыполненияТестовСрезПоследних.Статус КАК Статус,
		|	РезультатыВыполненияТестовСрезПоследних.НомерЗаданияТестирования КАК НомерЗаданияТестирования,
		|	РезультатыВыполненияТестовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненУспешно) КАК ТестВыполненУспешно,
		|	ТестыЗаблокированныеИсходнойОшибкой.Ошибка КАК Ошибка,
		|	ТестыЗаблокированныеИсходнойОшибкой.ЗапускТестирования КАК ПервыйЗапускТестирования,
		|	РезультатыВыполненияТестовСрезПоследних.ЗапускТестирования КАК ЗапускТестирования,
		|	РезультатыВыполненияТестовСрезПоследних.ЗапускТестирования.Дата КАК ДатаЗапускаТестирования,
		|	ТестыЗаблокированныеИсходнойОшибкой.Ошибка.ДатаИсправления КАК ДатаИсправления
		|ПОМЕСТИТЬ ТекущееСостояниеТестовЗаблокированныхОшибкой
		|ИЗ
		|	ТестыЗаблокированныеИсходнойОшибкой КАК ТестыЗаблокированныеИсходнойОшибкой
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияТестов.СрезПоследних(, Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.НеЗапускался)) КАК РезультатыВыполненияТестовСрезПоследних
		|		ПО (РезультатыВыполненияТестовСрезПоследних.Тест = ТестыЗаблокированныеИсходнойОшибкой.Тест)
		|			И (РезультатыВыполненияТестовСрезПоследних.Ветка = ТестыЗаблокированныеИсходнойОшибкой.ВеткаИсправления)
		|			И (РезультатыВыполненияТестовСрезПоследних.ЭлементТеста = ТестыЗаблокированныеИсходнойОшибкой.ЭлементТеста)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка КАК Ошибка,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА ТекущееСостояниеТестовЗаблокированныхОшибкой.ТестВыполненУспешно
		|				ТОГДА ТекущееСостояниеТестовЗаблокированныхОшибкой.Статус
		|		КОНЕЦ) КАК КоличествоУспешных,
		|	КОЛИЧЕСТВО(ВЫБОР
		|			КОГДА НЕ ТекущееСостояниеТестовЗаблокированныхОшибкой.ТестВыполненУспешно
		|				ТОГДА ТекущееСостояниеТестовЗаблокированныхОшибкой.Статус
		|		КОНЕЦ) КАК КоличествоСОшибкой
		|ПОМЕСТИТЬ СостояниеПоОшибкам
		|ИЗ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой КАК ТекущееСостояниеТестовЗаблокированныхОшибкой
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СостояниеПоОшибкам.Ошибка КАК Ошибка
		|ИЗ
		|	СостояниеПоОшибкам КАК СостояниеПоОшибкам
		|ГДЕ
		|	СостояниеПоОшибкам.КоличествоСОшибкой = 0
		|	И СостояниеПоОшибкам.КоличествоУспешных > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка КАК Ошибка,
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой.НомерЗаданияТестирования КАК НомерЗаданияТестирования
		|ИЗ
		|	ТекущееСостояниеТестовЗаблокированныхОшибкой КАК ТекущееСостояниеТестовЗаблокированныхОшибкой
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостояниеПоОшибкам КАК СостояниеПоОшибкам
		|		ПО (СостояниеПоОшибкам.Ошибка = ТекущееСостояниеТестовЗаблокированныхОшибкой.Ошибка)
		|			И (СостояниеПоОшибкам.КоличествоСОшибкой = 0)
		|			И (СостояниеПоОшибкам.КоличествоУспешных > 0)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ЗагруженныеВетки", ЗагруженныеВетки);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Выборка = МассивРезультатов[МассивРезультатов.Количество()-2].Выбрать();
	ИдентификаторыЗапусков = МассивРезультатов[МассивРезультатов.Количество()-1].Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			АвторСообщения = Пользователи.ТекущийПользователь();
			Комментарий = НСтр("ru = 'Все заблокированные тесты выполняются успешно'");
			Строки = Выборка.Ошибка.Протокол.НайтиСтроки(Новый Структура("Автор", АвторСообщения));
			УжеВыполняласьПроверка = Ложь;
			Для Каждого Строка Из Строки Цикл
				Если СтрНайти(НРег(Строка.Комментарий), НРег(Комментарий)) > 0 Тогда
					// Уже выполнялась проверка
					УжеВыполняласьПроверка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если УжеВыполняласьПроверка Тогда
				Продолжить;
			КонецЕсли;

			ОшибкаОбъект = Выборка.Ошибка.ПолучитьОбъект();
			Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПризнана Тогда
				ОшибкаОбъект.Статус     = Перечисления.СтатусыОшибок.Отозвана;
				ОшибкаОбъект.НеПризнана = Истина;
				ОшибкаОбъект.Отозвана = Истина;
				ОшибкаОбъект.Признана   = Ложь;
				Комментарий = НСтр("ru = 'Все заблокированные тесты выполняются успешно.'");
				Если НЕ ЗначениеЗаполнено(ОшибкаОбъект.ПричиныНепризнания) Тогда
					ОшибкаОбъект.ПричиныНепризнания = Комментарий;
				КонецЕсли;
			Иначе
				Комментарий = НСтр("ru = 'Обратите внимание: все заблокированные тесты выполняются успешно.'");
			КонецЕсли;
			СтрокиСИдентификаторами = ИдентификаторыЗапусков.НайтиСтроки(Новый Структура("Ошибка", Выборка.Ошибка));
			Если СтрокиСИдентификаторами.Количество() > 0 Тогда
				 Комментарий = Комментарий + Символы.ПС + НСтр("ru = 'Ссылки на успешные задания:'");
				 Для Каждого Строка Из СтрокиСИдентификаторами Цикл
				 	Комментарий = Комментарий + Символы.ПС + Символы.Таб 
								+ Документы.ЗапускТестирования.АдресЗаданияТестирования(Проект, Строка.НомерЗаданияТестирования);
				 КонецЦикла;
			КонецЕсли;
			
			ОшибкаОбъект.ДобавитьЗаписьВПротокол(АвторСообщения, Комментарий);
			ОшибкаОбъект.Записать();
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проверка исправления ошибок'"), 
			                         УровеньЖурналаРегистрации.Ошибка,,
			                         Выборка.Ошибка, 
			                         ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЦикла;

	
КонецПроцедуры

Функция СтатусGitlabЗавершен(Статус)
	Если Статус = "manual" ИЛИ
		Статус = "created" ИЛИ 
		Статус = "pending" ИЛИ 
		Статус = "running" Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ИмяСвойстваДляСценарныхТестов(ИмяСвойства)
	Если ИмяСвойства = "scenario_setting" Тогда
		Возврат "КодНастройкиСценария";
	ИначеЕсли ИмяСвойства = "process_setting" Тогда
		Возврат "КодНастройкиПроцесса";
	КонецЕсли;
	Возврат ИмяСвойства;
КонецФункции

Функция СтатусТестаПоСтроке(СтрокаСтатуса)
	Если СтрокаСтатуса = "error" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой; 
	ИначеЕсли СтрокаСтатуса = "failed" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой; 
	ИначеЕсли СтрокаСтатуса = "skipped" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался; 
	ИначеЕсли СтрокаСтатуса = "created" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался; 
	ИначеЕсли СтрокаСтатуса = "success" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненУспешно; 
	КонецЕсли;	 
	
	Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался;
КонецФункции	 

Функция СтатусЭлементаПоСтроке(СтрокаСтатуса)
	Если СтрокаСтатуса = "" 
		ИЛИ СтрокаСтатуса = "success" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненУспешно;
	ИначеЕсли СтрокаСтатуса = "error" 
		ИЛИ СтрокаСтатуса = "failed" 
		ИЛИ СтрокаСтатуса = "failure" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой; 
	ИначеЕсли СтрокаСтатуса = "skipped" Тогда
		Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался;
	КонецЕсли;
	Возврат Перечисления.СтатусыВыполненияТеста.НеЗапускался;
КонецФункции

Функция ПрефиксГруппыПоИмениВСистемеСборки(ИмяВСистемеСборки)
	Префикс = Неопределено;
	Поз1 = Найти(ИмяВСистемеСборки, " ");
	Поз2 = Найти(ИмяВСистемеСборки, "_");
	Если Поз1 = 0 И Поз2 = 0 Тогда
		Префикс = ИмяВСистемеСборки;
	ИначеЕсли Поз1 > 1 И Поз2 > 1 Тогда
		Поз = Мин(Поз1, Поз2);
		Префикс = Лев(ИмяВСистемеСборки, Поз-1);
	ИначеЕсли Поз1 > 1 Тогда
		Префикс = Лев(ИмяВСистемеСборки, Поз1-1);
	ИначеЕсли Поз2 > 1 Тогда
		Префикс = Лев(ИмяВСистемеСборки, Поз2-1);
	Иначе	
		Префикс = ИмяВСистемеСборки;
	КонецЕсли;	 
	
	Возврат Префикс;
КонецФункции	 

Процедура УстановитьОтметкуТестЗапускался(ТаблицаТестов,Тест)
	СтрокаТаблицаТестов = ТаблицаТестов.Найти(Тест,"Тест");
	Если СтрокаТаблицаТестов <> Неопределено Тогда
		СтрокаТаблицаТестов.Запускался = Истина;
	КонецЕсли;	 
КонецПроцедуры 

Функция ТаблицаТестовДляЗапуска()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Тест");
	Тзн.Колонки.Добавить("Запускался",Новый ОписаниеТипов("Булево"));
	
	Тзн.Индексы.Добавить("Тест");
	
	Возврат Тзн; 
КонецФункции	 

Функция ОтфильтроватьЗаданияGitLab(ЗапускТестирования, ЗаданияGitLab)
	
	ТаблицаЗаданий = Новый ТаблицаЗначений;
	ТаблицаЗаданий.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(255)));
	ТаблицаЗаданий.Колонки.Добавить("name", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(255)));
	ТаблицаЗаданий.Колонки.Добавить("Завершен", Новый ОписаниеТипов("Булево"));
	
	СтруктураЗаданий = Новый Соответствие;
	
	Счетчик = ЗаданияGitlab.Количество();
	Пока Счетчик > 0 Цикл
		
		Счетчик = Счетчик - 1;
		Задание = ЗаданияGitLab[Счетчик];
		ИдентификаторЗадания = XMLСтрока(Задание.id);
		
		Если СтруктураЗаданий.Получить(Задание.name) <> Неопределено 
			И Число(XMLСтрока(СтруктураЗаданий[Задание.name].id)) >= Число(ИдентификаторЗадания) Тогда
			// Берется только последнее выполненное задание с уникальным именем.
			// Т.е. если джоб перезапускался, то будет взят только последний.
			Продолжить;
		КонецЕсли;
		
		СтруктураЗаданий.Вставить(Задание.name, Задание);
		
		Строка = ТаблицаЗаданий.Добавить();
		Строка.ID = ИдентификаторЗадания;
		Строка.name = Задание.name;
		Строка.Завершен = СтатусGitlabЗавершен(Задание.status);
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЗаданий.ID КАК ID,
		|	ТаблицаЗаданий.name КАК name
		|ПОМЕСТИТЬ ТаблицаЗаданий
		|ИЗ
		|	&ТаблицаЗаданий КАК ТаблицаЗаданий
		|ГДЕ
		|	ТаблицаЗаданий.Завершен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РезультатыВыполненияТестов.НомерЗаданияТестирования КАК НомерЗаданияТестирования
		|ПОМЕСТИТЬ ЗагруженныеИВыполненныеЗадания
		|ИЗ
		|	РегистрСведений.РезультатыВыполненияТестов КАК РезультатыВыполненияТестов
		|ГДЕ
		|	РезультатыВыполненияТестов.ЗапускТестирования = &ЗапускТестирования
		|	И (РезультатыВыполненияТестов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненУспешно)
		|			ИЛИ РезультатыВыполненияТестов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненСОшибкой))
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатыВыполненияТестов.НомерЗаданияТестирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗаданий.ID КАК ID,
		|	ТаблицаЗаданий.name КАК name
		|ИЗ
		|	ТаблицаЗаданий КАК ТаблицаЗаданий
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗагруженныеИВыполненныеЗадания КАК ЗагруженныеИВыполненныеЗадания
		|		ПО (ЗагруженныеИВыполненныеЗадания.НомерЗаданияТестирования = ТаблицаЗаданий.ID)
		|ГДЕ
		|	ЗагруженныеИВыполненныеЗадания.НомерЗаданияТестирования ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаЗаданий", ТаблицаЗаданий);
	Запрос.УстановитьПараметр("ЗапускТестирования", ЗапускТестирования);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	РезультатЗаданияGitlab = Новый Массив;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатЗаданияGitlab.Добавить(СтруктураЗаданий[ВыборкаДетальныеЗаписи.name]);
	КонецЦикла;
	ТаблицаЗаданий = Неопределено;
	СтруктураЗаданий = Неопределено;
	
	Возврат РезультатЗаданияGitlab;
КонецФункции

Процедура ЗагрузитьРезультатыТестовПроекта(ДанныеПроекта, ЗагруженныеВетки=Неопределено)
	Соединение = GitLabСоединение(ДанныеПроекта.АдресСервера);
	Если ЗагруженныеВетки = Неопределено Тогда
		ЗагруженныеВетки = Новый Массив;
	КонецЕсли;
	
	Попытка
		Pipes = ДанныеЗапусковТестированияGitLabВсехВеток(Соединение, ДанныеПроекта.Токен, ДанныеПроекта.ИмяПроектаНаСервере);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования. Получение списка запусков тестирования.'"),
						УровеньЖурналаРегистрации.Ошибка,,,
						СтрШаблон(
						НСтр("ru = 'Не удалось загрузить список запусков тестирования проекта: %1.
						| %2.'"), 
						ДанныеПроекта.Проект,
						ОписаниеОшибки()));
		Возврат;
	КонецПопытки;
	
	КешОтветственный = Новый Соответствие;
	КешРазделПроекта = Новый Соответствие;
	ДанныеПроекта.Вставить("КешОтветственный", КешОтветственный);
	ДанныеПроекта.Вставить("КешРазделПроекта", КешРазделПроекта);
	
	Для Каждого Pipe Из Pipes Цикл 
		
		Попытка
			ОбработатьДанныеЗапускаТестированияGitLab(Pipe, ДанныеПроекта, Соединение, ЗагруженныеВетки);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.Загрузка запуска сборки'"),
							УровеньЖурналаРегистрации.Ошибка,,,
							СтрШаблон(
							НСтр("ru = 'Не удалось загрузить запуск сборки: %1.
							| %2.'"), 
							Pipe.id,
							ОписаниеОшибки()));
		КонецПопытки;
	КонецЦикла;
	
	ЗакрытьЗапускиТестирования(ДанныеПроекта.Проект);
	
	Соединение = Неопределено;
	Pipes.Очистить();
	
КонецПроцедуры 

Процедура ЗакрытьЗапускиТестирования(Проект)

	ЗаписьЖурналаРегистрации("Загрузка результатов тестирования",
							УровеньЖурналаРегистрации.Информация,,Проект,
							НСтр("ru = 'Закрытие документов запуск тестирования по проекту.'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапускТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Дата < &Дата
		|	И НЕ ЗапускТестирования.ПометкаУдаления
		|	И ЗапускТестирования.ДатаЗавершения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И (ЗапускТестирования.Проект = &Проект
		|			ИЛИ ЗапускТестирования.РодительскийЗапуск.Проект = &Проект)";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата() - 2*24*60*60);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ЗапускТестированияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗапускТестированияОбъект.ДатаЗавершения = ЗапускТестированияОбъект.Дата;
			ЗаписатьЗапускТестирования(ЗапускТестированияОбъект);
			ЗаписьЖурналаРегистрации("Загрузка результатов тестирования.Закрытие документа запуск тестирования",
									УровеньЖурналаРегистрации.Информация,,ВыборкаДетальныеЗаписи.Ссылка,
									НСтр("ru = 'Закрытие документа запуск тестирования.'"));
		Исключение
			ЗаписьЖурналаРегистрации("Загрузка результатов тестирования.Закрытие документа запуск тестирования",
									УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры 

Функция ДанныеЗапусковТестированияGitLabВсехВеток(Соединение, Токен, Проект)
	Ответ = Новый Массив;
	Для Сч = 1 По 6 Цикл
		Ресурс = СтрШаблон("/api/v4/projects/%1/pipelines/?order_by=updated_at&page=%2&per_page=100",
			Тестирование.ЭкранироватьСпецсимволыWeb(Проект),Сч);
		ТекущийОтвет = GitLabЗапрос(Соединение, Ресурс, Токен);
		Для Каждого Элем Из ТекущийОтвет Цикл
			Ответ.Добавить(Элем);
		КонецЦикла;	 
	КонецЦикла;	
	
	Возврат Ответ;
КонецФункции	 

Функция GitLabЗапрос(Соединение, Ресурс, Токен, ПолучениеФайла = Ложь, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = Ресурс;
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", Токен);
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
	Исключение
		Если ПолучениеФайла Тогда
			// Если возникло исключение при получении файлов, все равно нужно создавать запись.
			// Случается исключение когда артефакты слишком большие для загрузки (например, в них хранятся базы).
			Возврат Неопределено;
		Иначе
			ВызватьИсключение ОписаниеОшибки();
		КонецЕсли;
	КонецПопытки;
	
	Если Ответ.КодСостояния <> 200 Тогда 
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При запросе: %1
			           |Сервер вернул код состояния: %2'"),
			Запрос.АдресРесурса,
			Ответ.КодСостояния);
	КонецЕсли;
	
	Если ПолучениеФайла Тогда
		ДвоичныеДанные = Ответ.ПолучитьТелоКакДвоичныеДанные();
		Ответ = Неопределено;
		Возврат ДвоичныеДанные;
	Иначе	
		СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;	 
	
	Запрос = Неопределено;
	
	Возврат СтрокаJSONВСтруктуру(СтрокаJSON, ИменаСвойствСоЗначениямиДата);
	
КонецФункции

Функция СтрокаJSONВСтруктуру(Значение, ИменаСвойствСоЗначениямиДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Значение);
	
	Если ИменаСвойствСоЗначениямиДата = Неопределено Тогда
		ИменаСвойствСоЗначениямиДата = Новый Массив;
	КонецЕсли;	 
	ИменаСвойствСоЗначениямиДата.Добавить("created_at");
	ИменаСвойствСоЗначениямиДата.Добавить("ДатаПоследнейПроверки");
	
	Результат = ПрочитатьJSON(ЧтениеJSON,, ИменаСвойствСоЗначениямиДата);
	
	ИменаСвойствДатаНеопределено = Новый Массив;
	ИменаСвойствДатаНеопределено.Добавить("updated_at");
	ИменаСвойствДатаНеопределено.Добавить("finished_at");
	ИменаСвойствДатаНеопределено.Добавить("started_at");
	ИменаСвойствДатаНеопределено.Добавить("artifacts_expire_at");
	
	РезультатМассив = Новый Массив;
	Если Тип("Структура") = ТипЗнч(Результат) Тогда
		РезультатМассив.Добавить(Результат);
	Иначе 
		РезультатМассив = Результат;
	КонецЕсли;
	Для Каждого ЭлементРезультата Из РезультатМассив Цикл
		Если НЕ Тип("Структура") = ТипЗнч(ЭлементРезультата) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Имя Из ИменаСвойствДатаНеопределено Цикл
			Если ЭлементРезультата.Свойство(Имя) 
				И ЭлементРезультата[Имя] <> Неопределено Тогда
				ЭлементРезультата[Имя] = ПрочитатьДатуJSON(ЭлементРезультата[Имя], ФорматДатыJSON.ISO);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИменаСвойствСоЗначениямиДата = Неопределено;
	ИменаСвойствДатаНеопределено = Неопределено;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ЗапускТестированияЗагружен(Знач Pipeline_ID, Знач ДатаЗавершения, Проект)
	Pipeline_ID = XMLСтрока(Pipeline_ID);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапускТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Pipeline_ID = &Pipeline_ID
		|	И ЗапускТестирования.ДатаЗавершения = &ДатаЗавершения
		|	И ЗапускТестирования.ДатаЗавершения > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ ЗапускТестирования.ПометкаУдаления
		|	И ЗапускТестирования.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Pipeline_ID", Pipeline_ID);
	Запрос.УстановитьПараметр("ДатаЗавершения", ДатаЗавершения);
	// Если дата завершения в документе не равна переданной дате завершения,
	//  значит запуск тестирования изменился с момента последней загрузки и его нужно загрузить опять.
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина; 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИнформацияОЗапускеТестированияGitLab(Соединение, Токен, Проект, НомерЗапускТестированияGitLab)
	
	Ресурс = СтрШаблон("/api/v4/projects/%1/pipelines/%2", Тестирование.ЭкранироватьСпецсимволыWeb(Проект), Формат(НомерЗапускТестированияGitLab, "ЧГ="));
	
	Ответ = GitLabЗапрос(Соединение, Ресурс, Токен);
	
	Возврат Ответ;
	
КонецФункции

Функция ВеткаСППР(ref, Проект, ВеткаСтрокой)
	
	ИмяВетки = ref;
	
	ВладелецВетки = Неопределено;
	РодительВетки = Неопределено;
	
	Если Лев(ref,2) = "v." И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ref, 3, 1)) Тогда
		ИмяВетки = Сред(ref,3);
		Поз = СтрНайти(ИмяВетки,".",НаправлениеПоиска.СКонца);
		ИмяВетки = Лев(ИмяВетки,Поз-1);
		ВладелецВетки = ВерсияПроектаПоНомеру(ИмяВетки, Проект);
		Если ВладелецВетки = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Версия проекта <%1> не найдена.'"),ИмяВетки);
			КонецЕсли;	 
			
	ИначеЕсли Лев(ref,1) = "v" И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(ref, 2, 1)) Тогда
		ИмяВетки = Сред(ref,2);
		Поз = СтрНайти(ИмяВетки,".",НаправлениеПоиска.СКонца);
		ИмяВетки = Лев(ИмяВетки,Поз-1);
		
		Пока СтрЧислоВхождений(ИмяВетки,".") > 2 Цикл
			Поз = СтрНайти(ИмяВетки,".",НаправлениеПоиска.СКонца);
			ИмяВетки = Лев(ИмяВетки,Поз-1);
		КонецЦикла;	
		
		ВладелецВетки = ВерсияПроектаПоНомеру(ИмяВетки, Проект);
		Если ВладелецВетки = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Версия проекта <%1> не найдена.'"),ИмяВетки);
		КонецЕсли;	 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецВетки) И ЗначениеЗаполнено(ВладелецВетки.Ветка) Тогда
		Возврат ВладелецВетки.Ветка;
	КонецЕсли; 
	
	ВеткаСтрокой = ИмяВетки;
	Возврат Справочники.Ветки.ВеткаПоИмени(Проект, ИмяВетки);
	
КонецФункции

Функция ВерсияПроектаПоНомеру(НомерВерсии, Проект)
	
	КомпонентыСборки = СтрРазделить(НомерВерсии, ".");
	Если КомпонентыСборки.Количество() >= 3 Тогда
		НомерВерсии = СтрШаблон("%1.%2.%3", КомпонентыСборки[0], КомпонентыСборки[1], КомпонентыСборки[2]);
	КонецЕсли;

	Запрос = Новый Запрос;	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВерсииПроекта.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВерсииПроекта КАК ВерсииПроекта
	               |ГДЕ
	               |	ВерсииПроекта.Владелец = &Проект
	               |	И (ВерсииПроекта.Код = &НомерВерсии
	               |			ИЛИ ВерсииПроекта.ПубликуемыйНомерВерсии = &НомерВерсии)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции 

Функция НовыйИлиСуществующийЗапускТестирования(Параметры)
	НомерЗапускТестированияGitLab = XMLСтрока(Параметры.НомерЗапускТестированияGitLab);
	ДатаСоздания = Параметры.ДатаСоздания;
	Ветка = Параметры.Ветка;
	ref = Параметры.ref;
	Проект = Параметры.Проект;
	ИмяАвтора = Параметры.ИмяАвтора;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗапускТестирования.Ссылка КАК Ссылка,
		|	ЗапускТестирования.РодительскийЗапуск КАК РодительскийЗапуск
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Pipeline_ID = &Pipeline_ID
		|	И ЗапускТестирования.Проект = &Проект
		|	И НЕ ЗапускТестирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Pipeline_ID", НомерЗапускТестированияGitLab);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если Параметры.Свойство("РодительскийЗапуск")
			И ВыборкаДетальныеЗаписи.РодительскийЗапуск <> Параметры.РодительскийЗапуск Тогда
			ДокОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ДокОбъект.РодительскийЗапуск = Параметры.РодительскийЗапуск;
			ДокОбъект.Записать();
		КонецЕсли;	
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование = &Наименование";
	Запрос.УстановитьПараметр("Наименование", ИмяАвтора);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Автор = Справочники.Пользователи.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		Автор = Выборка.Ссылка;
	КонецЕсли;
	
	ДокОбъект = Документы.ЗапускТестирования.СоздатьДокумент();
	ДокОбъект.Дата = ДатаСоздания;
	ДокОбъект.Автор = Автор;
	ДокОбъект.Pipeline_ID = НомерЗапускТестированияGitLab;
	ДокОбъект.Проект = Проект;
	ДокОбъект.Ветка = Ветка;
	ДокОбъект.ВеткаСтрокой = ref;
	
	Если Параметры.Свойство("РодительскийЗапуск") Тогда
		ДокОбъект.РодительскийЗапуск = Параметры.РодительскийЗапуск;
	КонецЕсли;
	
	ДокОбъект.ДополнительныеСвойства.Вставить("НеЗапускатьАвтоматическоеТестирование", Истина);	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

Функция АртефактыЗаданияGitLab(Соединение, Токен, Проект, НомерЗапускТестированияGitLab, ЗаданиеGitLab)
	Ресурс = СтрШаблон("/api/v4/projects/%1/jobs/%2/artifacts", Тестирование.ЭкранироватьСпецсимволыWeb(Проект), Формат(ИдЗаданияGitlab(ЗаданиеGitLab), "ЧГ="));
	Ответ = GitLabЗапрос(Соединение, Ресурс, Токен, Истина);
	Возврат Ответ;
	
КонецФункции

Функция ДанныеТестаПоУмолчанию(ЗаданиеGitLab = Неопределено, ДатаСборки = Неопределено)
	Структура = Новый Структура;
	Структура.Вставить("Тест",Неопределено);
	Структура.Вставить("КодСценария",Неопределено);
	Структура.Вставить("UidНастройкиСценария",Неопределено);
	Структура.Вставить("ИмяНастройкиСценария","");
	Структура.Вставить("КодНастройкиСценария",Неопределено);
	Структура.Вставить("КодНастройкиПроцесса",Неопределено);
	Структура.Вставить("Статус",Неопределено);
	Структура.Вставить("Период",Неопределено);
	Структура.Вставить("ИмяТеста",Неопределено);
	Структура.Вставить("ЭлементТеста",Неопределено);
	Структура.Вставить("НомерЗаданияТестирования",Неопределено);
	Структура.Вставить("ИмяВСистемеСборки",Неопределено);
	
	
	Если ЗаданиеGitLab <> Неопределено Тогда
		Структура.Статус = СтатусТестаПоСтроке(ЗаданиеGitLab.status);
		НомерЗаданияGitLab = XMLСтрока(ЗаданиеGitLab.ID);
		Структура.НомерЗаданияТестирования = СтрЗаменить(НомерЗаданияGitLab, " ", "");
	КонецЕсли;
	Если ДатаСборки <> Неопределено Тогда
		Структура.Период = ДатаСборки;
	КонецЕсли;
	
	Возврат Структура; 
КонецФункции	 

Функция ГруппаТестовПоПрефиксу(Префикс, Проект)
	Если Префикс = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Тесты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Тесты КАК Тесты
		|ГДЕ
		|	Тесты.ПрефиксГруппы = &Префикс
		|	И Тесты.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Префикс", Префикс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции	 

Процедура ЗаписатьРезультатТеста(Ветка, ДанныеТеста, ЗапускТестирования, ДанныеПроекта, ЗаданиеGitLab, СтруктураПараметров = Неопределено)

	Если СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "UidНастройкиСценария") Тогда 
		ИмяНастройкиСценария = "";
		Если СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "ИмяНастройкиСценария") Тогда
			ИмяНастройкиСценария = ДанныеТеста.ИмяНастройкиСценария;
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "scenario_setting_name") Тогда
			ИмяНастройкиСценария = ДанныеТеста.scenario_setting_name;
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "имясценария") Тогда
			ИмяНастройкиСценария = ДанныеТеста.имясценария;
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "TestCase") Тогда
			ИмяНастройкиСценария = ДанныеТеста.TestCase;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяНастройкиСценария) Тогда
			ДанныеТеста.Вставить("ЗаданиеGitLab", ЗаданиеGitLab);
			ДанныеТеста.Тест = ТестПоUIDНастройкиСценария(ДанныеТеста, ИмяНастройкиСценария, ОсновнойПроектЗагрузкиРезультатов(ДанныеПроекта));
		КонецЕсли;
	КонецЕсли; 
	
	Если ДанныеТеста.Тест = Неопределено Тогда
		Если СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "коднастройкисценария") Тогда
			Тест = НастройкаСценарияПоКоду(ДанныеТеста.коднастройкисценария);
		ИначеЕсли СвойствоЕстьВСтруктуреИОноЗаполнено(ДанныеТеста, "коднастройкипроцесса") Тогда
			Тест = НастройкаПроцессаПоКоду(ДанныеТеста.коднастройкипроцесса);
		Иначе
			Тест = Неопределено;
		КонецЕсли;	 
		
		ДанныеТеста.Тест = Тест;
	КонецЕсли;	 
		
	Если ТипЗнч(ДанныеТеста.Тест) = Тип("СправочникСсылка.НастройкиЗапускаСценариев") Тогда
		ДанныеТеста.Тест = ТестПоНастройкеСценария(ДанныеТеста.Тест, ОсновнойПроектЗагрузкиРезультатов(ДанныеПроекта), ЗаданиеGitLab);
	ИначеЕсли ТипЗнч(ДанныеТеста.Тест) = Тип("СправочникСсылка.НастройкиЗапускаПроцессов") Тогда
		ДанныеТеста.Тест = ТестПоНастройкеПроцесса(ДанныеТеста.Тест, ОсновнойПроектЗагрузкиРезультатов(ДанныеПроекта), ЗаданиеGitLab);
	КонецЕсли;
	
	Если ДанныеТеста.Тест = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования.'"),
					УровеньЖурналаРегистрации.Информация,,ДанныеТеста.Тест,
					НСтр("ru = 'Запись данных по тесту в регистр.'"));
					
	ЗаписьРС = РегистрыСведений.РезультатыВыполненияТестов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьРС, ДанныеТеста);
	ЗаписьРС.Ветка = Ветка;
	ЗаписьРС.ЗапускТестирования = ЗапускТестирования;
	ЗаписьРС.Проект = ДанныеПроекта.Проект;
	
	НачалоВыполнения = Неопределено;
	ОкончаниеВыполнения = Неопределено;
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Если СтруктураПараметров.Свойство("НачалоВыполнения") И СтруктураПараметров.Свойство("ОкончаниеВыполнения") Тогда
			ЗаписьРС.НачалоВыполнения = СтруктураПараметров.НачалоВыполнения;
			ЗаписьРС.ОкончаниеВыполнения = СтруктураПараметров.ОкончаниеВыполнения;
			
			НачалоВыполнения = ЗаписьРС.НачалоВыполнения;
			ОкончаниеВыполнения = ЗаписьРС.ОкончаниеВыполнения;
		КонецЕсли;	
	КонецЕсли;

	Если ЗаданиеGitLab <> Неопределено И НачалоВыполнения = Неопределено И ОкончаниеВыполнения = Неопределено Тогда
		ЗаписьРС.НачалоВыполнения = ЗаданиеGitLab.started_at;
		ЗаписьРС.ОкончаниеВыполнения = ЗаданиеGitLab.finished_at;
		
		НачалоВыполнения = ЗаписьРС.НачалоВыполнения;
		ОкончаниеВыполнения = ЗаписьРС.ОкончаниеВыполнения;
	КонецЕсли;	

	
	Если ЗначениеЗаполнено(НачалоВыполнения) И ЗначениеЗаполнено(ОкончаниеВыполнения)
		И НЕ ЗначениеЗаполнено(ЗаписьРС.ЭлементТеста) Тогда
		
		ДанныеДлительности = ДанныеПроекта.КешДлительностьТестов[ДанныеТеста.Тест];
		Если ДанныеДлительности = Неопределено Тогда
			ДанныеДлительности = Новый Структура;
			ДанныеДлительности.Вставить("НачалоВыполнения", НачалоВыполнения);
			ДанныеДлительности.Вставить("ОкончаниеВыполнения", ОкончаниеВыполнения);
			ДанныеДлительности.Вставить("Длительность", ОкончаниеВыполнения - НачалоВыполнения);
			ДанныеПроекта.КешДлительностьТестов.Вставить(ДанныеТеста.Тест, ДанныеДлительности);
		Иначе
			ТекДлительность = ОкончаниеВыполнения - НачалоВыполнения;
			ДанныеДлительности.НачалоВыполнения = Мин(ДанныеДлительности.НачалоВыполнения, НачалоВыполнения);
			ДанныеДлительности.Длительность = ДанныеДлительности.Длительность + ТекДлительность;
			ДанныеДлительности.ОкончаниеВыполнения = ДанныеДлительности.НачалоВыполнения + ДанныеДлительности.Длительность;
		КонецЕсли;
		
		ЗаписьРС.НачалоВыполнения = ДанныеДлительности.НачалоВыполнения;
		ЗаписьРС.ОкончаниеВыполнения = ДанныеДлительности.ОкончаниеВыполнения;
		
	КонецЕсли;	
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура")
		И СтруктураПараметров.Свойство("КешСтатусовТестов")
		И ДанныеТеста.Свойство("ИмяВСистемеСборки")
		И ЗначениеЗаполнено(ДанныеТеста.ИмяВСистемеСборки)
		Тогда       
		
		ОбновитьСтатусЗаписиРСИзКеша(ЗаписьРС, СтруктураПараметров.КешСтатусовТестов, ДанныеТеста.ИмяВСистемеСборки);
		
	КонецЕсли;	

	ЗаписьРС.Записать();
	
КонецПроцедуры 

Функция СборкаВерсииПоТегу(ВеткаСППР,Информация)
	Если  Лев(Информация.ref,1) = "v"
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(Информация.ref, 2, 1)) Тогда
		ref = Сред(Информация.ref,2);
		Возврат СборкаВерсииПоПубликуемыйНомерСборки(ВеткаСППР,ref); 
	КонецЕсли;	 
КонецФункции	

Функция НастройкаСценарияПоКоду(Код)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаСценариев.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиЗапускаСценариев КАК НастройкиЗапускаСценариев
		|ГДЕ
		|	НастройкиЗапускаСценариев.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	 

Функция СвойствоЕстьВСтруктуреИОноЗаполнено(СтруктураДляПроверки, ИмяСвойства)
	Возврат СтруктураДляПроверки.Свойство(ИмяСвойства)
		И СтруктураДляПроверки[ИмяСвойства] <> Неопределено
		И СтруктураДляПроверки[ИмяСвойства] <> "";
КонецФункции

Функция НастройкаПроцессаПоКоду(Код)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиЗапускаПроцессов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиЗапускаПроцессов КАК НастройкиЗапускаПроцессов
		|ГДЕ
		|	НастройкиЗапускаПроцессов.Код = &Код";
	
	Запрос.УстановитьПараметр("Код", Код);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции	 

Функция СборкаВерсииПоПубликуемыйНомерСборки(ВеткаСППР,ПубликуемыйНомерСборки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СборкиВерсии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|ГДЕ
		|	СборкиВерсии.ПубликуемыйНомерСборки = &ПубликуемыйНомерСборки
		|	И СборкиВерсии.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ВеткаСППР.Владелец);
	Запрос.УстановитьПараметр("ПубликуемыйНомерСборки", ПубликуемыйНомерСборки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции	 

Функция РаспаковатьАртефактыВоВременныйКаталог(ЧтениеZipФайла, ДвДанныеАртефактов)
	Поток = ДвДанныеАртефактов.ОткрытьПотокДляЧтения();
	
	ЧтениеZipФайла.Открыть(Поток);
	
	ИмяКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяКаталога);
	ЧтениеZipФайла.ИзвлечьВсе(ИмяКаталога,РежимВосстановленияПутейФайловZIP.Восстанавливать);
	ЧтениеZipФайла.Закрыть();
	Поток.Закрыть();
	
	Возврат ИмяКаталога;
КонецФункции	 

Функция ИдЗаданияGitlab(ЗаданиеGitLab)
	Если ЗаданиеGitLab = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат ЗаданиеGitLab.id; 
	
КонецФункции	 

Функция ОтветственныйПоUID(UIDОтветственного, ЗаданиеGitLab, Кеш)
	
	Если UIDОтветственного = Неопределено Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	 
	
	Если Кеш <> Неопределено Тогда
		Результат = Кеш[UIDОтветственного];
		Если Результат <> Неопределено Тогда
			Возврат Результат; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Ответственный = Справочники.Пользователи.ПустаяСсылка();
	Если UIDОтветственного <> Неопределено И ЗначениеЗаполнено(UIDОтветственного) Тогда
		Попытка
			UID = Новый УникальныйИдентификатор(UIDОтветственного);
			Ответственный = Справочники.Пользователи.ПолучитьСсылку(UID);
			Кеш.Вставить(UIDОтветственного, Ответственный);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования. Не найден ответственный по UID.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'UID <%1>. ИДЗаданияВСистемеСборки: <%2>.'"), 
							UIDОтветственного,
							ИдЗаданияGitlab(ЗаданиеGitLab)));
			Возврат Ответственный;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

Функция РазделПроектаПоUID(UIDРазделПроекта, ЗаданиеGitLab, Кеш)
	
	Если UIDРазделПроекта = Неопределено Тогда
		Возврат Справочники.РазделыПроекта.ПустаяСсылка();
	КонецЕсли;	 
	
	Если Кеш <> Неопределено Тогда
		Результат = Кеш[UIDРазделПроекта];
		Если Результат <> Неопределено Тогда
			Возврат Результат; 
		КонецЕсли;	 
	КонецЕсли;	 
	
	РазделПроекта = Справочники.РазделыПроекта.ПустаяСсылка();
	Если UIDРазделПроекта <> Неопределено И ЗначениеЗаполнено(UIDРазделПроекта) Тогда
		Попытка
			UID = Новый УникальныйИдентификатор(UIDРазделПроекта);
			РазделПроекта = Справочники.РазделыПроекта.ПолучитьСсылку(UID);
			Кеш.Вставить(UIDРазделПроекта, РазделПроекта);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования. Не найден раздел проекта по UID.'"),
							УровеньЖурналаРегистрации.Информация,,,
							СтрШаблон(НСтр("ru = 'UID <%1>. ИДЗаданияВСистемеСборки: <%2>.'"), 
							UIDРазделПроекта,
							ИдЗаданияGitlab(ЗаданиеGitLab)));
			Возврат РазделПроекта;
		КонецПопытки;
	КонецЕсли;
	
	Возврат РазделПроекта;
	
КонецФункции

Функция ТекущееСостояниеТестированияВеток(Ветки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка,
		|	Ветки.Статус КАК Статус,
		|	СостояниеТестированияВетокСрезПоследних.СостояниеТестирования КАК СостояниеТестирования,
		|	Ветки.Наименование КАК Наименование,
		|	Ветки.Владелец КАК Проект,
		|	Ветки.Имя КАК Имя,
		|	Ветки.Приемник.Имя КАК ИмяВеткиПриемника,
		|	Ветки.Тип КАК Тип
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеТестированияВеток.СрезПоследних(, Ветка В (&Ветки)) КАК СостояниеТестированияВетокСрезПоследних
		|		ПО (СостояниеТестированияВетокСрезПоследних.Ветка = Ветки.Ссылка)
		|ГДЕ
		|	Ветки.Ссылка В(&Ветки)
		|	И Ветки.Тип В(&ТипыВеток)";
	
	Запрос.УстановитьПараметр("Ветки", Ветки);
	ТипыВеток = Новый Массив;
	ТипыВеток.Добавить(Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок);
	ТипыВеток.Добавить(Перечисления.ТипыВеток.ВеткаТехническогоПроекта);
	Запрос.УстановитьПараметр("ТипыВеток", ТипыВеток);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	 

Процедура УстановитьСостояниеТестированияВетки(Ветка, НовыйСтатусТестирования, ТекущееСостояние)
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Владелец");
	АвторСообщения = АвторСообщения(Проект);
	
	Если НовыйСтатусТестирования = Перечисления.СостоянияТестированияВетки.ГотоваКПомещению Тогда
		ВеткаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Приемник");
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ветка <%1> готова к помещению.'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"));
		Тестирование.ДобавитьСообщениеПоОбъекту(
			Ветка,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаПриемник, "Ответственный"),
			АвторСообщения,
			ТекущаяДата() - 24*60*60,
			ТекстСообщения,
			ТекстСообщения
			);
	ИначеЕсли НовыйСтатусТестирования = Перечисления.СостоянияТестированияВетки.ТребуетсяРешение Тогда
		ВеткаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Приемник");
		//Сообщение ответственному за ветку приемник.
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ветка <%1> готова к помещению, но нужно принять решение о заливке ветки (тесты не прошли, но ошибки не признаны).'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"));
		Тестирование.ДобавитьСообщениеПоОбъекту(
			Ветка,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаПриемник, "Ответственный"),
			АвторСообщения,
			ТекущаяДата() - 24*60*60,
			ТекстСообщения,
			ТекстСообщения
			);
			
		//Сообщение ответственному за ветку.
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ветка <%1> готова к помещению, но нужно принять решение о заливке ветки (тесты не прошли, но ошибки не признаны).'"),
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"));
		Тестирование.ДобавитьСообщениеПоОбъекту(
			Ветка,
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Ответственный"),
			АвторСообщения,
			ТекущаяДата() - 24*60*60,
			ТекстСообщения,
			ТекстСообщения
			);
	ИначеЕсли НовыйСтатусТестирования = Перечисления.СостоянияТестированияВетки.ТребуетсяИсправлениеОшибок Тогда
		//Сообщение ответсвенному за ветку при изменении состояния тестирования		
	        ТекстСообщения = СтрШаблон(НСтр("ru = 'Состояние тестирования ветки <%1> изменилось на <%2>.'"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"), НовыйСтатусТестирования);
			Тестирование.ДобавитьСообщениеПоОбъекту(
				Ветка,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Ответственный"),
				АвторСообщения,
				ТекущаяДата() - 24*60*60,
				ТекстСообщения,
				ТекстСообщения
				);
				
	КонецЕсли;	 
	
	Если НовыйСтатусТестирования <> Перечисления.СостоянияТестированияВетки.Помещена Тогда
		Попытка
			СоздатьОшибкуЗапросаНаПомещение(Ветка);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Ошибка при попытке поиска конфликтов запроса на слияние у ветки'"),
				УровеньЖурналаРегистрации.Ошибка,,
				Ветка, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;	
	
	Если ТекущееСостояние = НовыйСтатусТестирования Тогда
		Возврат;
	КонецЕсли;	

	УстановитьПривилегированныйРежим(Истина);
	ЗаписьРС = РегистрыСведений.СостояниеТестированияВеток.СоздатьМенеджерЗаписи();
	ЗаписьРС.Период = ТекущаяДата();
	ЗаписьРС.Ветка = Ветка;
	ЗаписьРС.СостояниеТестирования = НовыйСтатусТестирования;
	ЗаписьРС.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

Процедура ЗаполнениеРеквизитовОшибкиЗапросаНаПомещение(ОшибкаОбъект)
	
	ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке;
	ОшибкаОбъект.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее;
	ОшибкаОбъект.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты;
	ОшибкаОбъект.ДатаОбнаружения = ТекущаяДата();

КонецПроцедуры

Процедура СоздатьОшибкуЗапросаНаПомещение(Ветка)
	
	ДанныеОткрытогоЗапросаНаСлияниеПоВетке = ДанныеОткрытогоЗапросаНаСлияниеПоВетке(Ветка);
	
	Если ДанныеОткрытогоЗапросаНаСлияниеПоВетке = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	Если НЕ СтатусЗапросаНаСлияниеОзначаетКонфликтПомещенияИзменений(ДанныеОткрытогоЗапросаНаСлияниеПоВетке.merge_status) Тогда
		Возврат;
	КонецЕсли;	
	
	Попытка
		ОшибкаОбъект = Справочники.Ошибки.СоздатьЭлемент();	
		ОшибкаОбъект.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Владелец");
		СтрокаСписокОбъектов = ОшибкаОбъект.СписокОбъектов.Добавить();
		
		ИдентификаторЗапросаНаСлияние = XMLСтрока(ДанныеОткрытогоЗапросаНаСлияниеПоВетке.iid);
		ДанныеПодключенияПроектаКGitСерверу = Тестирование.ДанныеПодключенияПроектаКGitСерверу(ОшибкаОбъект.Владелец);
		Стр = "https://" + ДанныеПодключенияПроектаКGitСерверу.РедактированиеСценариевВGitАдресСервера + "/"
			+ ДанныеПодключенияПроектаКGitСерверу.РедактированиеСценариевВGitИмяПроекта + "/-/merge_requests/"
			+ СокрЛП(УбратьСлужебныеСимволыИзИдентификатораЗапросаНаСлияние(ИдентификаторЗапросаНаСлияние));
		Стр = Тестирование.ЭкранироватьСпецсимволыWeb(Стр);	
		СтрокаСписокОбъектов.Уточнение = СтрШаблон(НСтр("ru = 'Конфликт запроса на помещение %1'"), Стр);
			
		ОшибкаОбъект.Наименование = СтрШаблон(НСтр("ru = 'Конфликт запроса на помещение №%1'"),
			XMLСтрока(ДанныеОткрытогоЗапросаНаСлияниеПоВетке.iid));
		ОшибкаОбъект.КомуНаправлена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Ответственный");
		ОшибкаОбъект.ВеткаОбнаружения = Ветка;
		
		ЗаполнениеРеквизитовОшибкиЗапросаНаПомещение(ОшибкаОбъект);
		
		ПараметрыРегистрации = Новый Структура;
		ПараметрыРегистрации.Вставить("АвторВПротоколе",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаОбъект.Владелец,
				"ПользовательАвторСообщенийСистемыВзаимодействия"));
		
		ПараметрыОшибки = Неопределено;
		ДанныеОшибки = Справочники.Ошибки.ЗарегистрироватьОшибкуСУчетомДублей(ОшибкаОбъект, ПараметрыРегистрации);
		
		СлужебныйПользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ОшибкаОбъект.Владелец, "ПользовательАвторСообщенийСистемыВзаимодействия");
		Если ЗначениеЗаполнено(СлужебныйПользователь) Тогда
			ОшибкаОбъект = ДанныеОшибки.СсылкаНаОшибку.ПолучитьОбъект();
			ОшибкаОбъект.Автор = СлужебныйПользователь; 
			ОшибкаОбъект.Зарегистрировал = СлужебныйПользователь;
			ОшибкаОбъект.Записать();	
		КонецЕсли;	
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Регистрация ошибки по конфликту запроса на помещение.'"),
						УровеньЖурналаРегистрации.Ошибка,,,
						СтрШаблон(НСтр("ru = 'Не получилось зарегистрировать ошибку по запросу на помещение №%1'"),
						XMLСтрока(ДанныеОткрытогоЗапросаНаСлияниеПоВетке.iid)) + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ДанныеПоследнегоЗапускаПоВетке(Ветка)
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Pipeline_ID", Неопределено);
	Результат.Вставить("Дата", Неопределено);
	Результат.Вставить("ДатаЗавершения", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗапускТестирования.Ссылка КАК Ссылка,
		|	ЗапускТестирования.Pipeline_ID КАК Pipeline_ID,
		|	ЗапускТестирования.ДатаЗавершения КАК ДатаЗавершения,
		|	ЗапускТестирования.Настройка КАК Настройка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	НЕ ЗапускТестирования.ПометкаУдаления
		|	И ЗапускТестирования.Ветка = &Ветка
		|	И ЗапускТестирования.Проведен
		|	И НЕ ЗапускТестирования.Pipeline_ID = """"""""
		|	И ЗапускТестирования.Настройка <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗапускТестирования.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);
		Возврат Результат; 
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	 

Функция ВВеткеЕстьИсправленыеОшибки(Ветка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Ветки.Ссылка КАК Ветка
	               |ИЗ
	               |	Справочник.Ветки КАК Ветки
	               |ГДЕ
	               |	Ветки.Ссылка = &Ветка
	               |	И (ИСТИНА В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ИСТИНА
	               |				ИЗ
	               |					Справочник.Ошибки КАК ОшибкиОбнаруженныеВВетке
	               |				ГДЕ
	               |					ОшибкиОбнаруженныеВВетке.Исправляется <> ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхветках)
	               |					И (ОшибкиОбнаруженныеВВетке.ВеткаИсправления = Ветки.Ссылка
	               |						ИЛИ ОшибкиОбнаруженныеВВетке.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	               |							И ОшибкиОбнаруженныеВВетке.ВеткаОбнаружения = Ветки.Ссылка)
	               |					И ОшибкиОбнаруженныеВВетке.Исправлена)
	               |			ИЛИ ИСТИНА В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ИСТИНА
	               |				ИЗ
	               |					Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	               |				ГДЕ
	               |					ОшибкиИсправлениеВВетках.ВеткаИсправления = Ветки.Ссылка
	               |					И ОшибкиИсправлениеВВетках.СостояниеИсправления = ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.Исправлена)))";
			
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	 

Процедура ЗаписатьВСтруктуруЗначенияИзXML(Структура, testsuite)
	Для Каждого ДочерниеУзлы_testsuite Из testsuite.ДочерниеУзлы Цикл
		Если ДочерниеУзлы_testsuite.ИмяУзла = "properties" Тогда
			Для Каждого property Из ДочерниеУзлы_testsuite.ДочерниеУзлы Цикл
				name = "";
				value = "";
				Для Каждого Атрибут Из property.Атрибуты Цикл
					Если Атрибут.ИмяУзла = "name" Тогда
						name = Атрибут.ЗначениеУзла;
					ИначеЕсли Атрибут.ИмяУзла = "value" Тогда
						value = Атрибут.ЗначениеУзла;
					КонецЕсли;	 
				КонецЦикла;	 
				Если name <> "" Тогда
					Попытка
						Структура.Вставить(ИмяСвойстваДляСценарныхТестов(name),value);
					Исключение
						//Возможно запрещенное имя для структуры
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Загрузка результатов тестирования. Ошибка при копировании атрибута в структуру.'"),
							УровеньЖурналаРегистрации.Ошибка,,
							Неопределено,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Функция ЭтоОсновнаяВеткаПроекта(Ветка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Тип КАК Тип
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	 

Функция УбратьИзИмениВСистемеСборкиЧисловыеИндексы(Знач Стр)
	
	Стр = УбратьЗначенияРазделенныеКосойЧертой(Стр);
	Стр = УбратьЗначенияРазделенныеДвоеточием(Стр);
	Стр = УбратьЗначенияРазделенныеДвоеточием(Стр);
	Стр = УбратьЗначенияРазделенныеПробелом(Стр);
	Возврат Стр; 
	
КонецФункции	 

Функция УбратьЗначенияРазделенныеКосойЧертой(Знач Стр)
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Если МассивСтрок.Количество() >=2 Тогда
		
		ПоследнееЗначение = МассивСтрок[МассивСтрок.Количество() - 1];
		МассивСтрокСлеш = СтрРазделить(ПоследнееЗначение, "/");
		
		Если МассивСтрокСлеш.Количество() = 2 Тогда
			
			Зн1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-1]);
			Зн2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-2]);
			Если Зн1 = Неопределено ИЛИ Зн2 = Неопределено Тогда
				Возврат Стр;
			ИначеЕсли Зн1 = 0 И Зн2 = 0 Тогда
				Возврат Стр;
			КонецЕсли;	 
			
			Возврат СокрЛП(Лев(Стр, СтрДлина(Стр) - СтрДлина(ПоследнееЗначение)));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	 

Функция УбратьЗначенияРазделенныеДвоеточием(Знач Стр)
	
	Если Прав(Стр, 4) = " 0:0" Тогда
		Возврат Лев(Стр, СтрДлина(Стр) - 4); 
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Если МассивСтрок.Количество() >=2 Тогда
		
		ПоследнееЗначение = МассивСтрок[МассивСтрок.Количество() - 1];
		МассивСтрокСлеш = СтрРазделить(ПоследнееЗначение, ":");
		
		Если МассивСтрокСлеш.Количество() = 2 Тогда
			
			Зн1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-1]);
			Зн2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(МассивСтрокСлеш[МассивСтрокСлеш.Количество()-2]);
			Если Зн1 = Неопределено ИЛИ Зн2 = Неопределено Тогда
				Возврат Стр;
			ИначеЕсли Зн1 = 0 И Зн2 = 0 Тогда
				Возврат Стр;
			КонецЕсли;	 
			
			Возврат СокрЛП(Лев(Стр, СтрДлина(Стр) - СтрДлина(ПоследнееЗначение)));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	 

Функция УбратьЗначенияРазделенныеПробелом(Знач Стр)
	
	МассивСтрок = СтрРазделить(Стр, " ");
	Если МассивСтрок.Количество() >=3 Тогда
		Стр1 = МассивСтрок[МассивСтрок.Количество()-1];
		Стр2 = МассивСтрок[МассивСтрок.Количество()-2];
		Зн1 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Стр1);
		Зн2 = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Стр2);
		Если Зн1 = Неопределено ИЛИ Зн2 = Неопределено Тогда
			Возврат Стр;
		ИначеЕсли Зн1 = 0 И Зн2 = 0 Тогда
			Возврат Стр;
		КонецЕсли;	 
		
		Возврат СокрЛП(Лев(Стр, СтрДлина(Стр) - СтрДлина(Стр1 + " " + Стр2)));
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	 

Процедура ОбновитьКоличествоЗапусковТестирования(Ветки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапускТестирования.Ветка КАК Ветка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапускТестирования.Ссылка) КАК КоличествоЗапусков
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	НЕ ЗапускТестирования.ПометкаУдаления
		|	И ЗапускТестирования.Ветка В(&Ветки)
		|	И ЗапускТестирования.Настройка <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапускТестирования.Ветка";
	
	Запрос.УстановитьПараметр("Ветки", Ветки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаписьРС = РегистрыСведений.КоличествоЗапусковТестирования.СоздатьМенеджерЗаписи();
		ЗаписьРС.Ветка = ВыборкаДетальныеЗаписи.Ветка;
		ЗаписьРС.КоличествоЗапусков = ВыборкаДетальныеЗаписи.КоличествоЗапусков;
		ЗаписьРС.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ВеткиПроектаВСтатусе(Проект, Статус)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Владелец = &Владелец
		|	И НЕ Ветки.ПометкаУдаления
		|	И Ветки.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("Статус", Статус);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ДополнитьВетки(Куда, Откуда)
	Для Каждого ТекВетка Из Откуда Цикл
		Если Куда.Найти(ТекВетка) = Неопределено Тогда
			Куда.Добавить(ТекВетка);				
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция ВеткиВСтатусеПомещенаКоторымНадоОбновитьСостояниеТестирования(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеТестированияВеток.СрезПоследних КАК СостояниеТестированияВетокСрезПоследних
		|		ПО СостояниеТестированияВетокСрезПоследних.Ветка = Ветки.Ссылка
		|ГДЕ
		|	Ветки.Владелец = &Владелец
		|	И НЕ Ветки.ПометкаУдаления
		|	И Ветки.Статус = &Статус
		|	И СостояниеТестированияВетокСрезПоследних.СостояниеТестирования <> &СостояниеТестирования";
	
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("СостояниеТестирования", Перечисления.СостоянияТестированияВетки.Помещена);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВеток.Помещена);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

Функция ВеткиВСтатусеРазрабатывается(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Владелец = &Владелец
		|	И НЕ Ветки.ПометкаУдаления
		|	И Ветки.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВеток.Разрабатывается);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции	

Функция АвторСообщения(Проект)
	ТекПользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ПользовательАвторСообщенийСистемыВзаимодействия");
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
		ТекПользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Возврат ТекПользователь;
КонецФункции	

Функция УбратьСлужебныеСимволыИзИдентификатораЗапросаНаСлияние(Знач Стр)
	Возврат СтрЗаменить(Стр, Символы.НПП, "");
КонецФункции

Функция ОсновнойПроектЗагрузкиРезультатов(ДанныеПроекта)
	
	Если ДанныеПроекта.Свойство("РодительскийПроект") Тогда
		Возврат ДанныеПроекта.РодительскийПроект;
	Иначе	
		Возврат ДанныеПроекта.Проект;
	КонецЕсли;	
	
КонецФункции

Функция ДобавитьСтрокуВНаборЗаписейРезультатТеста(НаборЗаписей, Проект, Ветка, Тест, ЭлементТеста, ЗапускТестирования, Период, Статус, ДанныеТеста)
	ЗаписьРС = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьРС, ДанныеТеста);
	ЗаписьРС.Проект = Проект;
	ЗаписьРС.Ветка = Ветка;
	ЗаписьРС.Тест = Тест;
	ЗаписьРС.ЭлементТеста = ЭлементТеста;
	ЗаписьРС.Период = Период;
	ЗаписьРС.ЗапускТестирования = ЗапускТестирования;
	ЗаписьРС.Статус = Статус;
	Возврат ЗаписьРС;
КонецФункции

Функция ФайлыАртефактовИмеютДопустимыйРазмер(Размер)
	
	Если Размер > 50000000 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Функция ПодчиненныеЗапускиТестирования(РодительскийЗапуск)
	
	Если НЕ ЗначениеЗаполнено(РодительскийЗапуск) Тогда
		Возврат Неопределено;
	КонецЕсли;	       
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапускТестирования.Ссылка КАК Ссылка,
		|	ЗапускТестирования.Проект КАК Проект,
		|	ЗапускТестирования.Ветка КАК Ветка,
		|	ЗапускТестирования.Pipeline_ID КАК Pipeline_ID,
		|	ЗапускТестирования.Проект.АдресGitСервера КАК ПроектАдресGitСервера,
		|	ЗапускТестирования.Длительность КАК Длительность
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.РодительскийЗапуск = &РодительскийЗапуск";
	
	Запрос.УстановитьПараметр("РодительскийЗапуск", РодительскийЗапуск);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

Функция ДанныеДочернегоПроекта(ДочернийПроект, ДанныеПроекта, ДанныеДочернегоЗапуска, ВеткаСППР, ЗапускТестирования)
	ДанныеПроектаДляЗагрузкиРезультатовТестов = ДанныеПроектаДляЗагрузкиРезультатовТестов(ДочернийПроект);
	
	ДанныеДочернегоПроекта = Новый Структура;
	ДанныеДочернегоПроекта.Вставить("АдресСервера",ДанныеПроектаДляЗагрузкиРезультатовТестов.РезультатыВыполненияТестовАдресСервера);
	ДанныеДочернегоПроекта.Вставить("Токен",ДанныеПроектаДляЗагрузкиРезультатовТестов.РезультатыВыполненияТестовТокен);
	ДанныеДочернегоПроекта.Вставить("ИмяПроектаНаСервере",ДанныеПроектаДляЗагрузкиРезультатовТестов.РезультатыВыполненияТестовИмяПроектаНаСервере);
	ДанныеДочернегоПроекта.Вставить("Проект",ДанныеПроектаДляЗагрузкиРезультатовТестов.Проект);
	ДанныеДочернегоПроекта.Вставить("Наименование", ДанныеПроектаДляЗагрузкиРезультатовТестов.Наименование);
	Если ДанныеПроекта.Свойство("РодительскийПроект") И ЗначениеЗаполнено(ДанныеПроекта.РодительскийПроект) Тогда
		ДанныеДочернегоПроекта.Вставить("РодительскийПроект", ДанныеПроекта.РодительскийПроект);
	Иначе	
		ДанныеДочернегоПроекта.Вставить("РодительскийПроект", ДанныеПроекта.Проект);
	КонецЕсли;	
	ДанныеДочернегоПроекта.Вставить("project_id", ДанныеДочернегоЗапуска.project_id);
	ДанныеДочернегоПроекта.Вставить("ВеткаСППР", ВеткаСППР);
	ДанныеДочернегоПроекта.Вставить("ЗагрузкаДочернегоПроекта", Истина);
	Если ДанныеПроекта.Свойство("РодительскийЗапуск") И ЗначениеЗаполнено(ДанныеПроекта.РодительскийЗапуск) Тогда
		ДанныеДочернегоПроекта.Вставить("РодительскийЗапуск", ДанныеПроекта.РодительскийЗапуск);
	Иначе	
		ДанныеДочернегоПроекта.Вставить("РодительскийЗапуск", ЗапускТестирования);
	КонецЕсли;	
	
	ДанныеДочернегоПроекта.Вставить("КешОтветственный", ДанныеПроекта.КешОтветственный);
	ДанныеДочернегоПроекта.Вставить("КешРазделПроекта", ДанныеПроекта.КешРазделПроекта);
	
	Если НЕ ЗначениеЗаполнено(ДанныеДочернегоПроекта.Токен) Тогда
		ДанныеДочернегоПроекта.Вставить("Токен",ДанныеПроекта.Токен);
	КонецЕсли;  
	
	Возврат ДанныеДочернегоПроекта;
	
КонецФункции	

Функция ИмяПроектаНаGitСервереИзАдресGitСервера(Знач Стр)
	Поз = Найти(Стр, ":");
	Если Поз > 0 Тогда
		Стр = Сред(Стр, Поз+1);
	КонецЕсли;
	Стр = СтрЗаменить(Стр, ".git", "");
	Возврат Стр;
КонецФункции	

Функция ЗапускТестированияПоИдентификатору(Проект, ИД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗапускТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Pipeline_ID = &Pipeline_ID
		|	И НЕ ЗапускТестирования.ПометкаУдаления
		|	И ЗапускТестирования.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Pipeline_ID", XMLСтрока(ИД));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции	

Функция ПодчиненныеЗапускиЗавершены(ИдОсновногоЗапуска, ДанныеПроекта)
	ЗапускТестирования = ЗапускТестированияПоИдентификатору(ДанныеПроекта.Проект, ИдОсновногоЗапуска);
	Если ЗапускТестирования <> Неопределено Тогда
		ПодчиненныеЗапускиТестирования = ПодчиненныеЗапускиТестирования(ЗапускТестирования);
		Для Каждого ТекЗапуск Из ПодчиненныеЗапускиТестирования Цикл
			ДанныеДочернегоЗапуска = Новый Структура;
			ДанныеДочернегоЗапуска.Вставить("id", ТекЗапуск.Pipeline_ID);
			ДанныеДочернегоЗапуска.Вставить("project_id", ИмяПроектаНаGitСервереИзАдресGitСервера(ТекЗапуск.ПроектАдресGitСервера));
			Попытка
				ПодчиненныйЗапуск =
					ТестированиеЗапускТестирования.ИнформацияОЗапускеДочернегоПроекта(
						ДанныеПроекта.Проект, ДанныеДочернегоЗапуска.project_id, ДанныеДочернегоЗапуска.id);
						
				Если НЕ ( СтатусGitlabЗавершен(ПодчиненныйЗапуск.status)
						И ЗапускТестированияЗагружен(ПодчиненныйЗапуск.id, ПодчиненныйЗапуск.updated_at, ТекЗапуск.Проект) ) Тогда
					Возврат Ложь;
				КонецЕсли;			
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка результатов тестирования'"),
								УровеньЖурналаРегистрации.Ошибка,,,
								СтрШаблон(
								НСтр("ru = 'Ошибка при получении данных дочернего проекта <%1>.
								|%2'"), 
								ТекЗапуск.Проект,
								ОписаниеОшибки()));
			КонецПопытки;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ПроставитьЗапускуТестированияРодительскийЗапуск(ДанныеПроекта, ИД)
	ЗапускТестирования = ЗапускТестированияПоИдентификатору(ДанныеПроекта.Проект, ИД);
	Если ЗначениеЗаполнено(ЗапускТестирования) Тогда
		Попытка
			ДокОбъект = ЗапускТестирования.ПолучитьОбъект();
			ДокОбъект.РодительскийЗапуск = ДанныеПроекта.РодительскийЗапуск;
			ДокОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(
				СтрШаблон(НСтр("ru = 'Ошибка установки родительского запуска у <%1>.'"),
					ЗапускТестирования),
				УровеньЖурналаРегистрации.Ошибка,,
				ЗапускТестирования,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;	
КонецПроцедуры

Процедура ОбновитьСтатусЗаписиРСИзКеша(ЗаписьРС, КешСтатусовТестов, ИмяВСистемеСборки)
	Если ЗаписьРС.Статус = Перечисления.СтатусыВыполненияТеста.ВыполненСОшибкой Тогда
		КешСтатусовТестов.Вставить(ИмяВСистемеСборки, ЗаписьРС.Статус);
	Иначе	
		Если КешСтатусовТестов[ИмяВСистемеСборки] <> Неопределено Тогда
			ЗаписьРС.Статус = КешСтатусовТестов[ИмяВСистемеСборки];
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Функция ДатаИзСтрокиjUnit(Стр)
	
	Поз = Найти(Стр, "T");
	Если Поз = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Стр1 = Лев(Стр, Поз - 1);
	Стр2 = Сред(Стр, Поз + 1);
	
	МассивСтрок = СтрРазделить(Стр1, "-");
	Если МассивСтрок.Количество() = 3 Тогда
		Год = Число(МассивСтрок[0]);
		Месяц = Число(МассивСтрок[1]);
		День = Число(МассивСтрок[2]);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	МассивСтрок = СтрРазделить(Стр2, ":");
	Если МассивСтрок.Количество() = 3 Тогда
		Часы = Число(МассивСтрок[0]);
		Минуты = Число(МассивСтрок[1]);
		Секунды = Число(МассивСтрок[2]);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	
КонецФункции	

#КонецОбласти