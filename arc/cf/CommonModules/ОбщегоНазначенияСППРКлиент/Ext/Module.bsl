#Область СлужебныйПрограммныйИнтерфейс

// Открытие описания и схемы объекта (если она есть) для заданной версии
Процедура ОткрытьОписаниеСхемуВерсииОбъекта(Ссылка, ДатаВерсии = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Объект", Ссылка);
	ПараметрыФормы.Вставить("ДатаВерсии", ДатаВерсии);
	
	ОткрытьФорму("ОбщаяФорма.ОписаниеОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// Формирование образца форматирования
// выполняются некоторые, но не все подмены стилей форматирования
Функция СформироватьОбразецФорматирования(Шаблон) Экспорт
	
	ТекстовыйМакет = Новый ТекстовыйДокумент;
	ТекстовыйМакет.УстановитьТекст(Шаблон);
	
	// Шаблон содержит много лишней текстовой информации
	// Перед тем как показать макет, ее нужно удалить
	КоличествоСтрок = ТекстовыйМакет.КоличествоСтрок() + 1;
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		СтрокаМакета = ТекстовыйМакет.ПолучитьСтроку(КоличествоСтрок - ОбратныйИндекс);
		Если ПустаяСтрока(СтрокаМакета) ИЛИ Сред(СтрокаМакета,1,1) = "#" Тогда
			ТекстовыйМакет.УдалитьСтроку(КоличествоСтрок - ОбратныйИндекс);
		КонецЕсли;
	КонецЦикла;
	
	ТекстПримера = ТекстовыйМакет.ПолучитьТекст();
	
	ТекстПримера =СтрЗаменить(ТекстПримера, "[ТекстЗаголовка]", "Пример заголовка");
	ТекстПримера =СтрЗаменить(ТекстПримера, "[ТекстОписания]", "Пример описания. Первый абзац. Пример описания. Первый абзац. Пример описания. Первый абзац. Пример описания. Первый абзац. Пример описания. Первый абзац. <BR> Пример описания. Второй абзац. Пример описания. Второй абзац. Пример описания. Второй абзац. Пример описания. Второй абзац. ");
	ТекстПримера =СтрЗаменить(ТекстПримера, "[ОтступСлева]", "20");
	ТекстПримера =СтрЗаменить(ТекстПримера, "[НазваниеФункции]", "Пример названия функции");
	ТекстПримера =СтрЗаменить(ТекстПримера, "[СвязаннаяПодсистема]", "Пример названия подсистемы");
	
	ТекстПримера =СтрЗаменить(ТекстПримера, "[ИмяФункции]", "Пример названия функции");
	ТекстПримера =СтрЗаменить(ТекстПримера, "[ИмяОбъектаМетаданных]", "Пример названия объекта метаданных");	
	ТекстПримера =СтрЗаменить(ТекстПримера, "[URLКартинки]", КартинкаИзБазы());
	
	ТекстПримера ="<HR>" + ТекстПримера + "<HR>";
	
	ТекстПримера ="<HTML>" + ТекстПримера + "<HTML>";
	
	Возврат ТекстПримера;
	
КонецФункции

// Выполняет печать описаний и графических схем объектов
//
Процедура НапечататьОписанияСхемы(ПечатныеФормы) Экспорт
	
	Для Каждого Элемент из ПечатныеФормы Цикл
		
		Если ТипЗнч(Элемент) = Тип("КлючИЗначение") Тогда
			
			ДанныеЭлемента = Элемент.Значение;
			
			Если ДанныеЭлемента.Свойство("Описание") Тогда
				ДанныеЭлемента.Описание.Напечатать();
			КонецЕсли;
			
			Если ДанныеЭлемента.Свойство("Схема") Тогда
				ДанныеЭлемента.Схема.Напечатать();
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет открытие формы для выбора гиперссылки
//
// Параметры:
//  НачальноеЗначениеВыбора - ссылка, которая используется для
//  позиционирования в форме выбора
//  ЭлементВладелец - элемент управления, в котором осуществляется выбор
//  Проект - СправочникСсылка.Проекты - проект, в рамках которого делается выбор
//  ПараметрыВыбора - структура, содержащая параметры, определяющие доступность
// 	тех или иных типов данных для выбора.
//  Возможные ключи структуры:
//   ВыборФункций
//   ВыборЭлементовСправки
//   ВыборОпераций
//   ВыборОбъектовМетаданных
//   ВыборПодсистем
//  Значения структуры - Истина или Ложь
//
Процедура ОткрытьФормуВыбораГиперссылки(ЭлементВладелец, Проект, ПараметрыВыбора, НачальноеЗначениеВыбора = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", НачальноеЗначениеВыбора);
	ПараметрыФормы.Вставить("Проект", Проект);
	
	ПараметрыФормы.Вставить("ВыборФункций",    						Ложь);
	ПараметрыФормы.Вставить("ВыборЭлементовСправки",    			Ложь);
	ПараметрыФормы.Вставить("ВыборОпераций", 		    			Ложь);
	ПараметрыФормы.Вставить("ВыборОбъектовМетаданных",  			Ложь);
	ПараметрыФормы.Вставить("ВыборФормОбъектовМетаданных", 			Ложь);
	ПараметрыФормы.Вставить("ВыборКомандОбъектовМетаданных",		Ложь);
	ПараметрыФормы.Вставить("ВыборОсновныхФормОбъектовМетаданных",	Ложь);
	ПараметрыФормы.Вставить("ВыборПодсистем", 						Ложь);
	ПараметрыФормы.Вставить("ИмяКласса", 							"");
	
	Если ПараметрыВыбора.Свойство("МножественныйВыбор") Тогда
		ПараметрыФормы.Вставить("МножественныйВыбор", ПараметрыВыбора.МножественныйВыбор);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ЗакрыватьПриВыборе") Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", ПараметрыВыбора.ЗакрыватьПриВыборе);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборФункций") Тогда
		ПараметрыФормы.Вставить("ВыборФункций", ПараметрыВыбора.ВыборФункций);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборЭлементовСправки") Тогда
		ПараметрыФормы.Вставить("ВыборЭлементовСправки", ПараметрыВыбора.ВыборЭлементовСправки);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборОпераций") Тогда
		ПараметрыФормы.Вставить("ВыборОпераций", ПараметрыВыбора.ВыборОпераций);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборОбъектовМетаданных") Тогда
		ПараметрыФормы.Вставить("ВыборОбъектовМетаданных", ПараметрыВыбора.ВыборОбъектовМетаданных);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборФормОбъектовМетаданных") Тогда
		ПараметрыФормы.Вставить("ВыборФормОбъектовМетаданных", ПараметрыВыбора.ВыборФормОбъектовМетаданных);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборОсновныхФормОбъектовМетаданных") Тогда
		ПараметрыФормы.Вставить("ВыборОсновныхФормОбъектовМетаданных", ПараметрыВыбора.ВыборОсновныхФормОбъектовМетаданных);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборКомандОбъектовМетаданных") Тогда
		ПараметрыФормы.Вставить("ВыборКомандОбъектовМетаданных", ПараметрыВыбора.ВыборКомандОбъектовМетаданных);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ВыборПодсистем") Тогда
		ПараметрыФормы.Вставить("ВыборПодсистем", ПараметрыВыбора.ВыборПодсистем);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("Функция") Тогда
		ПараметрыФормы.Вставить("Функция", ПараметрыВыбора.Функция);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ИмяКласса") Тогда
		ПараметрыФормы.Вставить("ИмяКласса", ПараметрыВыбора.ИмяКласса);
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ТипФормы") Тогда
		ПараметрыФормы.Вставить("ТипФормы", ПараметрыВыбора.ТипФормы);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораГиперссылки", ПараметрыФормы, ЭлементВладелец,,,, Неопределено);
	
КонецПроцедуры

// Выполняет переход по навигационной ссылке в поле указанного
// форматированного документа
//
// Параметры:
//  ПолеДокумента - Тип - поле форматированного документа
//
Процедура ПерейтиПоСсылкеФорматированногоДокумента(ПолеДокумента, ФорматированныйДокумент) Экспорт
	
	Начало = Неопределено;
	Конец = Неопределено;
	
	ПолеДокумента.ПолучитьГраницыВыделения(Начало,Конец);
	ЭлементыДокумента = ФорматированныйДокумент.ПолучитьЭлементы(Начало, Конец);
	
	Для Каждого ЭлементДокумента из ЭлементыДокумента Цикл
		Если ТипЗнч(ЭлементДокумента) = Тип("ТекстФорматированногоДокумента") Тогда
			
			НавигационнаяСсылка = ЭлементДокумента.НавигационнаяСсылка;
			Если НЕ ПустаяСтрока(НавигационнаяСсылка) Тогда
				ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыбратьБазуИзСписка(ОписаниеОповещенияПослеВыбора, УникальныйИдентификаторФормы,
	     ФайловыйРежим,ДополнительныеПараметры = Неопределено) Экспорт
	
	АдресФайлаСоСпискомИБ = ПоместитьВХранилищеФайлСоСпискомБаз(УникальныйИдентификаторФормы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресФайлаСоСпискомИБ", АдресФайлаСоСпискомИБ);
	ПараметрыФормы.Вставить("ФайловыйРежим", ФайловыйРежим);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("БазыДоступныеПоВебСсылке") Тогда
			ПараметрыФормы.Вставить("БазыДоступныеПоВебСсылке", ДополнительныеПараметры.БазыДоступныеПоВебСсылке);
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьБазуИзСпискаЗавершение", ЭтотОбъект, ОписаниеОповещенияПослеВыбора);
	ОткрытьФорму("ОбщаяФорма.ВыборЗарегистрированнойИБ", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОткрытьИБДляВоспроизведенияОшибки(Объект, Режим) Экспорт

	Если Не ЗначениеЗаполнено(Объект.ИнформационнаяБазаДляВоспроизведения) Тогда
		СписокШаблонов = ОбщегоНазначенияСППРВызовСервера.СписокШаблоновИнформационныхБазОшибки(Объект.Ссылка);
		Если СписокШаблонов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не указана информационная база для воспроизведения'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИнформационнаяБазаДляВоспроизведения", "Объект");
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КаталогИсходнойБазы", Объект.ИнформационнаяБазаДляВоспроизведения);
	ПараметрыФормы.Вставить("НомерОшибки", Объект.Код);
	ПараметрыФормы.Вставить("Проект", Объект.Владелец);
	ПараметрыФормы.Вставить("Ошибка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВерсияПлатформы", Объект.ВерсияПлатформы);
	ПараметрыФормы.Вставить("Клиент", Объект.Клиент);
	ПараметрыФормы.Вставить("Режим", Режим);
	
	Если Режим = "ЗапуститьПредприятие" Тогда
		ПараметрыФормы.Вставить("ЗапуститьПредприятие", Истина);
	ИначеЕсли Режим = "ЗапуститьКонфигуратор" Тогда
		ПараметрыФормы.Вставить("ЗапуститьКонфигуратор", Истина);
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Ошибки.Форма.Запустить1СПредприятиеКонфигуратор", 
		ПараметрыФормы,
		, 
		Объект.Ссылка,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура СоздатьЛокальнуюКопиюБазыОшибки(Объект, Режим = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Объект.ИнформационнаяБазаДляВоспроизведения) Тогда
		СписокШаблонов = ОбщегоНазначенияСППРВызовСервера.СписокШаблоновИнформационныхБазОшибки(Объект.Ссылка);
		Если СписокШаблонов.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не указана информационная база для воспроизведения'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИнформационнаяБазаДляВоспроизведения", "Объект");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КаталогИсходнойБазы", Объект.ИнформационнаяБазаДляВоспроизведения);
	ПараметрыФормы.Вставить("НомерОшибки", Объект.Код);
	ПараметрыФормы.Вставить("Проект", Объект.Владелец);
	ПараметрыФормы.Вставить("Ошибка", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВерсияПлатформы", Объект.ВерсияПлатформы);
	ПараметрыФормы.Вставить("Клиент", Объект.Клиент);
	ПараметрыФормы.Вставить("СкопироватьИБИзОбщейВЛокальнуюКопию", Истина);
	ПараметрыФормы.Вставить("Режим", Режим);
	
	Если Режим = "ЗапуститьПредприятие" Тогда
		ПараметрыФормы.Вставить("ЗапуститьПредприятие", Истина);
	ИначеЕсли Режим = "ЗапуститьКонфигуратор" Тогда
		ПараметрыФормы.Вставить("ЗапуститьКонфигуратор", Истина);
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Ошибки.Форма.Запустить1СПредприятиеКонфигуратор", 
		ПараметрыФормы,
		, 
		Объект.Ссылка,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Создает каталог и копирует туда все файлы
//
// Параметры:
//  КаталогПриемник	- Строка - путь к каталогу в который нужно скопировать файлы
//  ИсходнойКаталог	- Строка - путь к каталогу, который нужно скопировать
//
Процедура СоздатьКопиюКаталогаФайлов(КаталогПриемник, ИсходнойКаталог, 
		ДождатьсяЗавершения = Истина, ОписаниеОповещения = Неопределено) Экспорт
	
	КаталогПриемник = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПриемник);
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДождатьсяЗавершения", ДождатьсяЗавершения);
	ДополнительныеПараметры.Вставить("ИсходнойКаталог",     ИсходнойКаталог);
	ДополнительныеПараметры.Вставить("КаталогПриемник",     КаталогПриемник);
	ДополнительныеПараметры.Вставить("ОписаниеОповещения",  ОписаниеОповещения);
	ОписаниеСозданияКаталога = Новый ОписаниеОповещения("СоздатьКопиюКаталогаФайловЗавершение1", ЭтотОбъект, ДополнительныеПараметры);
	НачатьСозданиеКаталога(ОписаниеСозданияКаталога, КаталогПриемник);
	
КонецПроцедуры

Процедура СоздатьКопиюКаталогаФайловЗавершение1(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ДождатьсяЗавершения = ДополнительныеПараметры.ДождатьсяЗавершения;
	ИсходнойКаталог     = ДополнительныеПараметры.ИсходнойКаталог;
	КаталогПриемник     = ДополнительныеПараметры.КаталогПриемник;
	ОписаниеПродолжения = ДополнительныеПараметры.ОписаниеОповещения;
	
	ТипПлатформыКлиента = ОбщегоНазначенияКлиент.ТипПлатформыКлиента();
	Если (ТипПлатформыКлиента = ТипПлатформы.Windows_x86
		ИЛИ ТипПлатформыКлиента = ТипПлатформы.Windows_x86_64)
		И НЕ ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		ШаблонКопирования = ИсходнойКаталог + ?(Прав(ИсходнойКаталог, 1) = "\", "", "\") + "*.*";
		
		Если ДождатьсяЗавершения Тогда
			
			objShell = Новый COMОбъект("Shell.Application");
			objFolder = objShell.NameSpace(КаталогПриемник);
			
			objFolder.CopyHere(ШаблонКопирования);
			
			Если ОписаниеПродолжения <> Неопределено Тогда
				ВыполнитьОбработкуОповещения(ОписаниеПродолжения);
			КонецЕсли; 
			
		Иначе
			#Если НЕ ВебКлиент Тогда
				ИмяФайла = ПолучитьИмяВременногоФайла("vbs");
				ТекстФайла = Новый ТекстовыйДокумент;
				
				ДобавляемаяСтрока = 
				"set objShell = CreateObject(""shell.application"")
				|set objFolder = objShell.NameSpace(""%КаталогПриемник%"")
				|
				|if not objFolder is nothing then
				|	objFolder.CopyHere(""%ШаблонКопирования%"")
				|end if
				|
				|set objShell = nothing
				|set objFolder = nothing";
				
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%КаталогПриемник%", КаталогПриемник);
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%ШаблонКопирования%", ШаблонКопирования);
				
				ТекстФайла.ДобавитьСтроку(ДобавляемаяСтрока);
				
				ТекстФайла.Записать(ИмяФайла, КодировкаТекста.ANSI);
				ЗапуститьПриложение(ИмяФайла,, Ложь);
			#КонецЕсли
		КонецЕсли;
		
	Иначе
		
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
			КаталогИсточник = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДополнительныеПараметры.ИсходнойКаталог);
			КаталогПриемник = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДополнительныеПараметры.КаталогПриемник);
			
			ПередаваемыеДополнительныеПараметры = Новый Структура;
			ПередаваемыеДополнительныеПараметры.Вставить("КаталогИсточник",     КаталогИсточник);
			ПередаваемыеДополнительныеПараметры.Вставить("КаталогПриемник",     КаталогПриемник);
			ПередаваемыеДополнительныеПараметры.Вставить("ОписаниеПродолжения", ОписаниеПродолжения);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьПродолжение", ЭтотОбъект, ПередаваемыеДополнительныеПараметры);
			НачатьПоискФайлов(ОписаниеОповещения, КаталогИсточник, "*", Истина); 
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КопироватьПродолжение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("НайденныеФайлы", НайденныеФайлы);
	ДополнительныеПараметры.Вставить("Каталоги",       Новый Массив);
	ДополнительныеПараметры.Вставить("Счетчик",        -1);
	
	ДополнительныеПараметры.Каталоги.Добавить(ДополнительныеПараметры.КаталогИсточник);
	
	ПроверкаКаталогов(Неопределено, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПроверкаКаталогов(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог = Истина И ДополнительныеПараметры.Счетчик >= 0 Тогда
		
		Каталог = ДополнительныеПараметры.НайденныеФайлы[ДополнительныеПараметры.Счетчик];
		ДополнительныеПараметры.Каталоги.Добавить(Каталог.ПолноеИмя);
		
	КонецЕсли; 
	
	ДополнительныеПараметры.Счетчик = ДополнительныеПараметры.Счетчик + 1;
	
	Если ДополнительныеПараметры.Счетчик > ДополнительныеПараметры.НайденныеФайлы.Количество() - 1 Тогда
		ДополнительныеПараметры.Счетчик = -1;
		СоздатьКаталоги(Неопределено, ДополнительныеПараметры);
	Иначе 
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаКаталогов", ЭтотОбъект, ДополнительныеПараметры);
		ДополнительныеПараметры.НайденныеФайлы[ДополнительныеПараметры.Счетчик].НачатьПроверкуЭтоКаталог(ОписаниеОповещения)
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьКаталоги(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Счетчик = ДополнительныеПараметры.Счетчик + 1;
	
	Если ДополнительныеПараметры.Счетчик > ДополнительныеПараметры.Каталоги.Количество() - 1 Тогда
		ДополнительныеПараметры.Счетчик = -1;
		СкопироватьФайлы(Неопределено, ДополнительныеПараметры);
	Иначе 
		
		КаталогИсточник    = ДополнительныеПараметры.КаталогИсточник;
		КаталогПриемник    = ДополнительныеПараметры.КаталогПриемник;
		СубКаталогИсточник = ДополнительныеПараметры.Каталоги[ДополнительныеПараметры.Счетчик];
		СубКаталогПриемник = КаталогПриемник + Сред(СубКаталогИсточник, СтрДлина(КаталогИсточник) + 1);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьКаталоги", ЭтотОбъект, ДополнительныеПараметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, СубКаталогПриемник);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СкопироватьФайлы(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Счетчик = ДополнительныеПараметры.Счетчик + 1;
	
	Если ДополнительныеПараметры.Счетчик > ДополнительныеПараметры.НайденныеФайлы.Количество() - 1 Тогда
		
		Если ДополнительныеПараметры.ОписаниеПродолжения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеПродолжения);
		КонецЕсли; 
		
	Иначе 
		
		КаталогИсточник     = ДополнительныеПараметры.КаталогИсточник;
		КаталогПриемник     = ДополнительныеПараметры.КаталогПриемник;
		ФайлИсточник = ДополнительныеПараметры.НайденныеФайлы[ДополнительныеПараметры.Счетчик].ПолноеИмя;
		ФайлПриемник = КаталогПриемник + Сред(ФайлИсточник, СтрДлина(КаталогИсточник) + 1);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьФайлы", ЭтотОбъект, ДополнительныеПараметры);
		
		Если ДополнительныеПараметры.Каталоги.Найти(ФайлИсточник) <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения);
		Иначе 
			НачатьКопированиеФайла(ОписаниеОповещения, ФайлИсточник, ФайлПриемник);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура запускает 1С:Предприятие с различными параметрами
//
// Параметры:
//  Параметры	- Структура - Дополнительные параметры для открытия 1С:Предприятия
//
Процедура ЗапуститьПредприятие(Параметры) Экспорт 
	
	Клиент = Неопределено;
	Параметры.Свойство("Клиент", Клиент);
	
	
	Если Клиент = ПредопределенноеЗначение("Перечисление.ВидыКлиентов1СПредприятия.Тонкий") Тогда
		
		ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8c ENTERPRISE /visible";
		
	ИначеЕсли Клиент = ПредопределенноеЗначение("Перечисление.ВидыКлиентов1СПредприятия.Толстый") Тогда
		
		ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8 ENTERPRISE /visible";
		
	ИначеЕсли Параметры.Свойство("КаталогИсполняемогоФайла") И ЗначениеЗаполнено(Параметры.КаталогИсполняемогоФайла)
		ИЛИ Параметры.Свойство("ВерсияПлатформы") И ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
		ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8 ENTERPRISE /visible /AppAutoCheckMode";
	Иначе
		ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8s ENTERPRISE /visible /AppAutoCheckMode";
	КонецЕсли; 
	
	ЗапуститьПриложение1СНаКлиенте(ШаблонКоманды, Параметры);
	
КонецПроцедуры

// Процедура запускает Конфигуратор с различными параметрами
//
// Параметры:
//  Параметры	- Структура - Дополнительные параметры для открытия Конфигуратора
//
Процедура ЗапуститьКонфигуратор(Параметры) Экспорт 
	
	Если Параметры.Свойство("КаталогИсполняемогоФайла") И ЗначениеЗаполнено(Параметры.КаталогИсполняемогоФайла) Тогда
		ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /visible";
	Иначе
		ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8s DESIGNER /visible";
	КонецЕсли;
	
	ЗапуститьПриложение1СНаКлиенте(ШаблонКоманды, Параметры);

КонецПроцедуры

// Процедура запускает 1С:Предприятие с различными параметрами
//
// Параметры:
//  ШаблонКоманды	 - Строка	 - Строка запуска приложения
//  Параметры		 - Структура - Содержит дополнительные параметры (см. ОбщегоНазначенияСППРКлиентСервер.ПараметрыКомандыЗапускаПриложения1С)
//
Процедура ЗапуститьПриложение1СНаКлиенте(Знач ШаблонКоманды, Параметры) Экспорт 
	
	ДополнительныеПараметры = Новый Структура("ШаблонКоманды, Параметры", ШаблонКоманды, Параметры);
	Оповещение = Новый ОписаниеОповещения("ЗапуститьПриложение1СНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ТекстПредложения = НСтр("ru = 'Для запуска 1С:Предприятия/Конфигуратора необходимо установить расширение для работы с файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);
	
КонецПроцедуры

Функция ОбработатьЗаписьОбъектаВФорме(Форма, ПараметрыЗаписи, Отказ = Ложь) Экспорт
	
	ДействиеПослеЗаписи = Неопределено;
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Форма.НеВыполнятьПроверкуПередЗаписью = Истина;
	
	Отказ = Истина;
	ПараметрыЗаписи.Вставить(
		"ПринудительноЗакрытьФорму", Форма.ПринудительноЗакрытьФорму);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Форма.Объект.Ссылка));
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Форма.ПринудительноЗакрытьФорму = Ложь;
	Форма.НеВыполнятьПроверкуПередЗаписью = Ложь;
	
	Если Результат И ДействиеПослеЗаписи <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ВыполнитьДействияПослеЗаписи(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Если Не ПараметрыЗаписи.Свойство("НовыйОбъект") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.НовыйОбъект Тогда
		ТекстЗаголовка = НСтр("ru='Создание:'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ОповеститьПользователяОбИзмененииОбъекта(Объект.Ссылка, ТекстЗаголовка);
	
	Если Форма.ПринудительноЗакрытьФорму Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИЗакрыть(Форма) Экспорт
	
	ОчиститьСообщения();
	Форма.ПринудительноЗакрытьФорму = Истина;
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Форма.Объект.Ссылка));
	
	Форма.Записать(ПараметрыЗаписи);
	
КонецПроцедуры

// Процедура оповещение и записывает в историю пользователя изменение объекта, как делает платформа
//
// Параметры:
//	СсылкаНаОбъект       - ЛюбаяСсылка - измененный объект
//
Процедура ОповеститьПользователяОбИзмененииОбъекта(СсылкаНаОбъект, ТекстЗаголовка = "") Экспорт
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда	
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ТекстСообщения = Строка(СсылкаНаОбъект);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);

	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	
КонецПроцедуры

Процедура ОповеститьОНаличииОшибокСНемедленнойОтработкой() Экспорт
	
	КоличествоОшибок = ОбщегоНазначенияСППРВызовСервера.КоличествоОшибокТребующиеНемедленнойОбработкиПользователем();
	
	Если КоличествоОшибок>0 Тогда
		
		ТекстОповещения = НСтр("ru='Ошибки требуют отработки (%Количество%)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОшибок);
		ТекстКомментария = НСтр("ru='Имеются ошибки, требующие немедленной отработки. Для перехода к списку ошибок щелкните по этому сообщению'");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КоличествоОшибок", КоличествоОшибок);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияОНаличииОшибок", ЭтотОбъект, СтруктураПараметров);
		
		ПоказатьОповещениеПользователя(ТекстОповещения,
									   ОписаниеОповещения,
									   ТекстКомментария,
									   БиблиотекаКартинок.Информация32,
									   СтатусОповещенияПользователя.Информация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереключитьОбработчикОжиданияНапоминанийОСобытияхКалендаря(ИспользоватьНапоминания) Экспорт
	
	Если ИспользоватьНапоминания Тогда
		// Подключается обработчик ожидания
		ПодключитьОбработчикОжидания("ВыполнитьНапоминаниеОСобытияхКалендаря", 60);
	Иначе
		ОтключитьОбработчикОжидания("ВыполнитьНапоминаниеОСобытияхКалендаря");	
	КонецЕсли;
	
КонецПроцедуры

Процедура НапомнитьОСобытияхКалендаря() Экспорт
	
	ДанныеСобытий = ОбщегоНазначенияСППРВызовСервера.ДанныеСобытийКалендаряДляНапоминаний();
	
	КоличествоСобытий = ДанныеСобытий.Количество();
	
	Если КоличествоСобытий = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСобытия = ДанныеСобытий[0];
		
	ТекстОповещения = НСтр("ru='Напоминание о событии календаря'");
	
	ТекстКомментария = "";
	
	Если ЗначениеЗаполнено(ДанныеСобытия.Название) Тогда
		ТекстКомментария = ДанныеСобытия.Название;
	ИначеЕсли ЗначениеЗаполнено(ДанныеСобытия.Работа) Тогда
		ТекстКомментария = Строка(ДанныеСобытия.Работа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстКомментария) Тогда
		Если КоличествоСобытий>1 Тогда
			ДополнениеКоличествоСобытий = НСтр("ru='(и еще %количество%)'");
			ДополнениеКоличествоСобытий = СтрЗаменить(ДополнениеКоличествоСобытий, "%количество%", КоличествоСобытий-1);
			
			ТекстКомментария = ТекстКомментария + " " + ДополнениеКоличествоСобытий;
		КонецЕсли;
	Иначе
		Если КоличествоСобытий>1 Тогда
			ТекстКомментария = НСтр("ru='Событий: %количество%'");
			ТекстКомментария = СтрЗаменить(ТекстКомментария, "%количество%", КоличествоСобытий);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстКомментария) Тогда
		ТекстКомментария = ТекстКомментария + Символы.ПС;
	КонецЕсли;
	
	ИнформацияНачало = НСтр("ru='Начало:'");
	ИнформацияНачало = ИнформацияНачало + Формат(ДанныеСобытия.Начало, "ДФ=ЧЧ:мм");
	
	ТекстКомментария = ТекстКомментария + ИнформацияНачало;
	
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Пользователь", ДанныеСобытия.Пользователь);
	СтруктураПараметров.Вставить("ИдентификаторЗаписи", ДанныеСобытия.ИдентификаторЗаписи);
	СтруктураПараметров.Вставить("КоличествоСобытий", КоличествоСобытий);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаНапоминанияОСобытииКалендаря", ЭтотОбъект, СтруктураПараметров);
		
	ПоказатьОповещениеПользователя(ТекстОповещения,
								   ОписаниеОповещения,
								   ТекстКомментария,
								   БиблиотекаКартинок.Информация32,
								   СтатусОповещенияПользователя.Информация,
								   Строка(ДанныеСобытия.ИдентификаторЗаписи));
	
КонецПроцедуры

// Возвращает список измененных файлов для выбора пользователем нужного файла
//
// Параметры:
//	ИзмененыеФайлы - Массив
//
Функция СписокИзмененныхФайловДляВыбора(ИзмененыеФайлы) Экспорт
	
	Спс = Новый СписокЗначений;
	Для Каждого Элем Из ИзмененыеФайлы Цикл
		Файл = Новый Файл(Элем.ИмяФайла);
		
		Спс.Добавить(Элем, Файл.Имя + " (" + Элем.ИмяФайла + ")");
	КонецЦикла;	
	
	Спс.СортироватьПоПредставлению();
	
	Возврат Спс;
		
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПослеНачалаРаботыСистемы() Экспорт
	
	Параметры = ОбщегоНазначенияСППРВызовСервера.ВыполнитьДействияПослеНачалаРаботыСистемы();
	
	// Оповещения о наличии ошибок с немедленной отработкой
	
	Если Параметры.ЕстьПравоДоступаКОшибкам И Параметры.ВыполнятьОповещениеОНаличииОшибок
		И Параметры.ИнтервалОповещенийОНаличииОшибок >0 Тогда
		
		// Выполняется однократное оповещение при старте
		ОповеститьОНаличииОшибокСНемедленнойОтработкой();
		
		// Подключается обработчик ожидания
		ПодключитьОбработчикОжидания("ВыполнитьОповещениеОНаличииОшибокСНемедленнойОтработкой",
			Параметры.ИнтервалОповещенийОНаличииОшибок*60);
			
	КонецЕсли;
	
	// Напоминания о событиях календаря пользователя
	
	Если Параметры.ИспользоватьНапоминанияОСобытияхКалендаря Тогда
		
		// Выполняется однократная выдача напоминаний при старте
		НапомнитьОСобытияхКалендаря();
		
		// Подключается обработчик ожидания
		ПодключитьОбработчикОжидания("ВыполнитьНапоминаниеОСобытияхКалендаря", 60);
			
	КонецЕсли;
		
	// Оповещения о необходимости отработки ошибок
	Если СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		ОписаниеОповещенияДействияПоСообщению = Новый ОписаниеОповещения("ОбработатьДействиеПоСообщению", ЭтотОбъект);
		СистемаВзаимодействия.ПодключитьОбработчикДействияСообщения(ОписаниеОповещенияДействияПоСообщению);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоместитьВХранилищеФайлСоСпискомБаз(УникальныйИдентификаторФормы) Экспорт
	
	ПутьКБазам = "\1C\1CEStart\ibases.v8i";
	
	Попытка
		Скрипт = Новый COMОбъект("WScript.Shell");
		ФайлСписокБаз = Скрипт.ExpandEnvironmentStrings("%appdata%") + ПутьКБазам;
	Исключение
		Сообщить(ОписаниеОшибки()); 
		Возврат Неопределено;
	КонецПопытки;
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещенныеФайлы = Новый Массив;
	Файл = Новый Файл(ФайлСписокБаз);
	ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя,));
	
	Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификаторФормы) Тогда
		Возврат ПомещенныеФайлы[0].Хранение;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Процедура ВыбратьБазуИзСпискаЗавершение(РезультатЗакрытия, ОписаниеОповещенияПослеВыбора) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияПослеВыбора, РезультатЗакрытия);
	
КонецПроцедуры

Процедура ЗапуститьПриложение1СНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт 

	ШаблонКоманды = ДополнительныеПараметры.ШаблонКоманды;
	Параметры = ДополнительныеПараметры.Параметры;
	
	ПутьИБ = "";
	ВерсияПлатформы = "";
	КаталогИсполняемогоФайла = "";
	КаталогПрограммы = "";
	ДополнительныеПараметрыЗапуска = "";
	
	Параметры.Свойство("ПутьИБ", ПутьИБ);
	Параметры.Свойство("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Свойство("КаталогИсполняемогоФайла", КаталогИсполняемогоФайла);
	Параметры.Свойство("ДополнительныеПараметрыЗапуска", ДополнительныеПараметрыЗапуска);
	
	СимволСлеша = ПолучитьРазделительПути();
	
	Если ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(ПутьИБ) Тогда
		// Замена всех ковычек на двойные обязательна
		Если Найти(ПутьИБ, """""") = 0 Тогда
			ПутьИБ = СтрЗаменить(ПутьИБ, """", """""");
		КонецЕсли; 
		СтрокаПодключенияИБ = " /IBConnectionString """ + ПутьИБ + """";
	Иначе
		МассивПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьИБ, "\");
		Если МассивПути.Количество() = 2 И Лев(ПутьИБ, 1) <> СимволСлеша И Найти(ПутьИБ, ":\") = 0 И Найти(ПутьИБ, "\\") = 0 Тогда
			// Это ИБ на сервере 1С:Предприятия
			СтрокаПодключенияИБ = " /S """+ ПутьИБ + """";
		
		Иначе
			
			Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
				Файл = Новый Файл(ПутьИБ);
				Если НЕ Файл.Существует() Тогда
					ТекстОшибки = НСтр("ru = 'По указанному пути не найдена информационная база.'");
					ПоказатьПредупреждение(,ТекстОшибки);
					
					НачалоИмениФайлаДампа = СтрНайти(Параметры.ДополнительныеПараметрыЗапуска, "/DumpResult");
					
					Если НачалоИмениФайлаДампа <> 0 Тогда 
						
						КонецИмениФайлаДампа = СтрНайти(Параметры.ДополнительныеПараметрыЗапуска,"""",, НачалоИмениФайлаДампа, 2);
						
						ИмяФайлаДампа = Сред(Параметры.ДополнительныеПараметрыЗапуска, НачалоИмениФайлаДампа+11, КонецИмениФайлаДампа-НачалоИмениФайлаДампа-11); 
						
						ИмяФайлаДампа = СокрЛП(СтрЗаменить(ИмяФайлаДампа, """", ""));
						
						ТекстовыйДокумент = Новый ТекстовыйДокумент;
						ТекстовыйДокумент.ДобавитьСтроку(ТекстОшибки);
						Попытка
							ТекстовыйДокумент.Записать(ИмяФайлаДампа);
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
			
			КонецЕсли; 
			
			СтрокаПодключенияИБ = " /F """+ ПутьИБ+ """";
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	ВерсияУказана = ЗначениеЗаполнено(КаталогИсполняемогоФайла);
	#Если ВебКлиент Тогда
		Параметры.Свойство("КаталогПрограммы", КаталогПрограммы);
	#Иначе
		Параметры.Свойство("КаталогПрограммы", КаталогПрограммы);
		Если НЕ ЗначениеЗаполнено(КаталогПрограммы) Тогда
			КаталогПрограммы = СокрЛП(КаталогПрограммы());
		КонецЕсли; 
	#КонецЕсли
	
	КаталогПрограммы = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПрограммы);
	
	Если ЗначениеЗаполнено(ВерсияПлатформы) 
		И НЕ ЗначениеЗаполнено(КаталогИсполняемогоФайла) Тогда
		
		КаталогИсполняемогоФайла = КаталогПрограммы;
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		ТекущаяВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
		Если Найти(КаталогПрограммы, ТекущаяВерсияПриложения) > 0 Тогда
			
			КаталогПроверки = СтрЗаменить(КаталогПрограммы, ТекущаяВерсияПриложения, ВерсияПлатформы);
			Файл = Новый Файл(КаталогПроверки);
			Если Файл.Существует() Тогда
				ВерсияУказана = Истина;
				КаталогИсполняемогоФайла = КаталогПроверки;
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли НЕ ЗначениеЗаполнено(КаталогИсполняемогоФайла) Тогда
		КаталогИсполняемогоФайла = КаталогПрограммы;
	КонецЕсли;
	
	Если НЕ ВерсияУказана Тогда
		ШаблонКоманды = ШаблонКоманды + " /AppAutoCheckVersion";
	КонецЕсли; 
	
	КаталогИсполняемогоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(ШаблонКоманды, "%КаталогИсполняемогоФайла%", КаталогИсполняемогоФайла);
	
	СтрокаКоманды = СтрокаКоманды + СтрокаПодключенияИБ;
	
	Если Параметры.Свойство("ИмяПользователя") И ЗначениеЗаполнено(Параметры.ИмяПользователя) Тогда
	
		СтрокаКоманды = СтрокаКоманды + " /N """+ СокрЛП(Параметры.ИмяПользователя) + """";
		Если Параметры.Свойство("ПарольПользователя") И ЗначениеЗаполнено(Параметры.ПарольПользователя) Тогда
			
			СтрокаКоманды = СтрокаКоманды + " /P """+ СокрЛП(Параметры.ПарольПользователя) + """";
			
			СтрокаКоманды = СтрокаКоманды + " /DisableStartupDialogs"
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	Если Параметры.Свойство("Отладка") И Параметры.Отладка = Истина Тогда
		СтрокаКоманды = СтрокаКоманды + " /Debug"
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДополнительныеПараметрыЗапуска) Тогда
	
		СтрокаКоманды = СтрокаКоманды + " " + ДополнительныеПараметрыЗапуска;
	
	КонецЕсли; 
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла);
	
КонецПроцедуры

Функция КартинкаИзБазы()
	
	Картинка = БиблиотекаКартинок.РазделГлавное;
	ПолноеИмяФайла = КаталогВременныхФайлов() + "." + Картинка.Формат();
	Картинка.Записать(ПолноеИмяФайла);
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

Процедура ОбработкаОповещенияОНаличииОшибок(Параметры) Экспорт
	
	СписокСроков = Новый СписокЗначений;
	СписокСроков.Добавить("Вчера");
	СписокСроков.Добавить("Сегодня");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("СрокОтработки", СписокСроков);
	ПараметрыОтбора.Вставить("СостояниеИсправления", ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ПустаяСсылка"));
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.Добавить("Рассмотреть, исправить, проверить");
	
	ПараметрыОтбора.Вставить("Действие", СписокДействий);
	
	СписокСрочностьИсправления = Новый СписокЗначений;
	СписокСрочностьИсправления.Добавить(ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.Немедленно"));
	
	ПараметрыОтбора.Вставить("СрочностьИсправления", СписокСрочностьИсправления);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ОповещениеОНаличииОшибок");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	
	ОткрытьФорму("Справочник.Ошибки.Форма.ОшибкиНаправленныеМне", ПараметрыФормы);
	
КонецПроцедуры

Процедура ОбработатьДействиеПоСообщению(Сообщение, Действие, ДополнительныеПараметры) Экспорт
	
	Если Действие = "ПерейтиКСпискуОшибок" Тогда
		
		ПараметрыОтбора = Новый Структура;
		
		СписокСроков = Новый СписокЗначений;
		СписокСроков.Добавить("Вчера");
		СписокСроков.Добавить("Сегодня");
		
		СписокДействий = Новый СписокЗначений;
		СписокДействий.Добавить("Рассмотреть, исправить, проверить");
		СписокДействий.Добавить("Отработать поручение");
		
		СписокСрочность = Новый СписокЗначений;
		СписокСрочность.Добавить(ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.Немедленно"));
		СписокСрочность.Добавить(ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.ЖелательноБыстрее"));
		СписокСрочность.Добавить(ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.ВПлановомПорядке"));
		
		ПараметрыОтбора.Вставить("Действие", СписокДействий);
		ПараметрыОтбора.Вставить("СрочностьИсправления", СписокСрочность);
		ПараметрыОтбора.Вставить("СрокОтработки", СписокСроков);
		
		ПараметрыОтбора.Вставить("СостояниеИсправления", ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ПустаяСсылка"));
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлюЧНазначенияИспользования", "ОбработкаДействияПоСообщениюВзаимодействия");
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ОшибкиНаправленныеМне", ПараметрыФормы);
		
	ИначеЕсли СтрНачинаетсяС(Действие, ОбъектыНаКонтролеКлиентСервер.ИмяКомандыПереходаИзСообщенияСистемыВзаимодействия()) Тогда
		
		ОбъектыНаКонтролеКлиент.ОтработатьНапоминаниеСистемыВзаимодействия(Действие);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНапоминанияОСобытииКалендаря(Параметры) Экспорт
	
	Если Параметры.КоличествоСобытий = 1 Тогда
		// Открывается форма записи конкретного события
		ДанныеКлюча = Новый Структура;
		ДанныеКлюча.Вставить("Пользователь", Параметры.Пользователь);
		ДанныеКлюча.Вставить("ИдентификаторЗаписи", Параметры.ИдентификаторЗаписи);
		
		ПараметрыСозданияКлюча = Новый Массив;
		ПараметрыСозданияКлюча.Добавить(ДанныеКлюча);
		
		КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.КалендариПользователей", ПараметрыСозданияКлюча);
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("Ключ", КлючЗаписи);
		
		ОткрытьФорму("РегистрСведений.КалендариПользователей.Форма.ЗаписьКалендаря", ПараметрыЗаписи, ЭтотОбъект);
		
	ИначеЕсли Параметры.КоличествоСобытий > 1 Тогда
		// Открывается форма записи календаря
		Оповестить("ОбработаноНапоминаниеОСобытииКалендаря");
		ОткрытьФорму("РегистрСведений.КалендариПользователей.Форма.КалендарьПользователя",, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
