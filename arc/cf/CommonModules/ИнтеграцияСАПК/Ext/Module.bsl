
#Область ПрограммныйИнтерфейс

//Создает прокси веб-сервиса АПК. В случае ошибки при создании вызывается исключение.
//
// Возвращаемое значение:
//	WSПрокси - Прокси веб-сервиса
//
Функция ПолучитьПрокси() Экспорт
	
	МестоположениеWSDL = Константы.АдресВебСервисаАПК.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL) И 
		Прав(МестоположениеWSDL, 1) <> "/" И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	МестоположениеWSDL = МестоположениеWSDL + "ws/ErrorsExchange.1cws?wsdl";
	
	ПараметрыАвторизации = Константы.ПараметрыПодключенияАПК.СоздатьМенеджерЗначения().ПолучитьПараметры();
	
	Если НЕ ЗначениеЗаполнено(ПараметрыАвторизации.ИмяПользователя) Тогда
		ВызватьИсключение 
			НСтр("ru = 'Ошибка подключения к АПК: не заполнены параметры подключения. 
					   |Обратитесь к администратору системы.'");
	КонецЕсли;
	
	Попытка
		Определение = Новый WSОпределения(
			МестоположениеWSDL, 
			ПараметрыАвторизации.ИмяПользователя,
			ПараметрыАвторизации.ПарольПользователя);
		
		Прокси = Новый WSПрокси(
			Определение,
			"http://www.1c.ru/acc",
			"ErrorsExchange",
			"ErrorsExchangeSoap");
		
	Исключение	
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с АПК'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ВызватьИсключение НСтр("ru = 'Ошибка подключения к АПК. 
			|Возможно не прошла авторизация, указан неверный адрес веб-сервиса или база АПК не опубликована на веб-сервере. 
			|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		
	КонецПопытки;
	
	Прокси.Пользователь = ПараметрыАвторизации.ИмяПользователя;
	Прокси.Пароль 		= ПараметрыАвторизации.ПарольПользователя;
	
	Возврат Прокси;
	
КонецФункции

// Проверяет результат, возвращенный операцией WEB-сервиса.
// В случае возврата объекта типа Структура с свойством ОшибкаСервиса вызывается исключение.
//
// Параметры:
//	Ответ - Произвольный - возвращаемое значение web-сервиса
//	Действие - Строка - описание текущей операции web-сервиса
//
Процедура ПроверитьРезультатОперацииВебСервиса(Ответ, Действие) Экспорт
	
	Если ТипЗнч(Ответ)  = Тип("ХранилищеЗначения") Тогда
		
		Значение = Ответ.Получить();
		Если ТипЗнч(Значение) = Тип("Структура") И Значение.Свойство("ОшибкаСервиса") Тогда
			
			ТекстОшибки = Значение.Описание;
			Пока Найти(ТекстОшибки,"}") > 0 Цикл
				ТекстОшибки = Сред(ТекстОшибки,Найти(ТекстОшибки,"}")+3);
			КонецЦикла;
			
			ПозицияТекстаПоПричине = Найти(ТекстОшибки, Символы.ПС + НСтр("ru='по причине:'"));
			Если ПозицияТекстаПоПричине <> 0 Тогда
				ТекстОшибки = Сред(ТекстОшибки, ПозицияТекстаПоПричине + 13);
			КонецЕсли;
			
			Если Найти(ТекстОшибки, "ВызватьИсключение") Тогда
				ТекстОшибки = Сред(ТекстОшибки, 1, Найти(ТекстОшибки, "ВызватьИсключение")-1);
			КонецЕсли;
			
			ВызватьИсключение
				Действие + ":" + Символы.ПС + Значение.Заголовок + ":" + Символы.ПС + ТекстОшибки;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры


// Регистрирует новую ошибку по данным проверки АПК.
//
// Параметры:
// 	Данные - Структура - реквизиты ошибки
//  ОбъектыМетаданных - Соответствие, ключи - идентификаторы объектов метаданных в СППР, на которых регистрируется ошибка
//
// Возвращаемое значение:
//	СправочникСсылка.Ошибки - зарегистрированная ошибка
//
Функция ЗарегистрироватьОшибку(Данные, ОбъектыМетаданных = Неопределено) Экспорт
	
	ДатаОшибки = ТекущаяДатаСеанса();
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Статус",                Перечисления.СтатусыОшибок.Зарегистрирована);
	ОписаниеОшибки.Вставить("Зарегистрирована",      Истина);
	ОписаниеОшибки.Вставить("ЗарегистрированаИзАПК", Истина);
	ОписаниеОшибки.Вставить("Обнаружена");
	ОписаниеОшибки.Вставить("ВеткаОбнаружения");
	ОписаниеОшибки.Вставить("СборкаОбнаружения");
	
	ВводНаОсновании = Данные.Свойство("Основание");
	
	Если ВводНаОсновании Тогда // регистрируется новая ошибка на основании ранее зарегистрированной ошибки
		
		ОшибкаОснование = Данные.Основание;
		
		ОписаниеОшибки.Вставить("Основание",       ОшибкаОснование);
		ОписаниеОшибки.Вставить("КомуНаправлена",  Данные.КомуНаправлена);
		ОписаниеОшибки.Вставить("Автор",           Пользователи.ТекущийПользователь());
		ОписаниеОшибки.Вставить("Зарегистрировал", Пользователи.ТекущийПользователь());
		ОписаниеОшибки.Вставить("ДатаСоздания",    ДатаОшибки);
		
		ОписаниеОшибки.Вставить("Владелец");
		
		ОписаниеОшибки.Вставить("ДатаОбнаружения");
		ОписаниеОшибки.Вставить("ВерсияИсправления");
		ОписаниеОшибки.Вставить("Исправляется");
		ОписаниеОшибки.Вставить("СрочностьИсправления");
		
		ОписаниеОшибки.Вставить("Наименование");
		ОписаниеОшибки.Вставить("ПорядокВоспроизведения");
		
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки, ОшибкаОснование,
			"Владелец, СборкаОбнаружения, ВерсияИсправления, Исправляется,
			|Наименование, ПорядокВоспроизведения, СрочностьИсправления,
			|Обнаружена, ВеткаОбнаружения, ДатаОбнаружения");
		
	Иначе // регистрируется новая ошибка
		
		ОписаниеОшибки.Вставить("Наименование",         Данные.Наименование);
		ОписаниеОшибки.Вставить("Автор",                Пользователи.ТекущийПользователь());
		ОписаниеОшибки.Вставить("Зарегистрировал",      Пользователи.ТекущийПользователь());
		ОписаниеОшибки.Вставить("ДатаСоздания",         Данные.ДатаСоздания);
		ОписаниеОшибки.Вставить("ДатаОбнаружения",      Данные.ДатаСоздания);
		ОписаниеОшибки.Вставить("СрочностьИсправления", Данные.СрочностьИсправления);
		
		ОписаниеОшибки.Вставить("Владелец", ИнтеграцияСАПКПовтИсп.ПодобратьПроектПоИмениКонфигурации(Данные.ИмяКонфигурации));
		ОписаниеОшибки.Вставить("МетодВыявленияОшибки", Перечисления.МетодыВыявленияОшибок.АудитКода);
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки.Владелец) Тогда
			ВызватьИсключение
				НСтр("ru='Не удалось определить проект ошибки'");
		КонецЕсли;
		
		МестоОбнаружения =
			ИнтеграцияСАПКПовтИсп.ОпределитьМестоОбнаруженияОшибки(
				ОписаниеОшибки.Владелец,
				Данные.ВерсияКонфигурации,
				ОписаниеОшибки.ДатаСоздания);
		
		ЗаполнитьЗначенияСвойств(ОписаниеОшибки, МестоОбнаружения);
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки.СборкаОбнаружения)
		 И НЕ ЗначениеЗаполнено(ОписаниеОшибки.ВеткаОбнаружения) Тогда
			ВызватьИсключение
				НСтр("ru='Не удалось определить сборку или ветку обнаружения ошибки'");
		КонецЕсли;
		
		ОписаниеОшибки.Вставить("ВерсияИсправления", 
			ИнтеграцияСАПКПовтИсп.ПодобратьВерсиюИсправленияДляОшибки(
				ОписаниеОшибки.Владелец,
				ОписаниеОшибки.Обнаружена,
				ОписаниеОшибки.ВеткаОбнаружения,
				ОписаниеОшибки.СборкаОбнаружения,
				ОписаниеОшибки.ДатаОбнаружения,
				ОписаниеОшибки.СрочностьИсправления));
		ОписаниеОшибки.Вставить("Исправляется", Справочники.Ошибки.ВариантИсправления(
														ОписаниеОшибки.ВеткаОбнаружения, 
														ОписаниеОшибки.МетодВыявленияОшибки, 
														ОписаниеОшибки.ВерсияИсправления));

		ОписаниеОшибки.Вставить("КомуНаправлена", НайтиПользователя(Данные.КомуНаправлена));
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки.КомуНаправлена) Тогда
			ВызватьИсключение
				СтрЗаменить(
					НСтр("ru='Не найден адресат ошибки ""%КомуНаправлена""'"),
					"%КомуНаправлена",
					Данные.КомуНаправлена);
		КонецЕсли;
		
		Если Данные.Свойство("ДополнениеКТекстуОшибки") И ЗначениеЗаполнено(Данные.ДополнениеКТекстуОшибки) Тогда
			ДополнениеКТекстуОшибки = "
				|" + Данные.ДополнениеКТекстуОшибки;
		Иначе
			ДополнениеКТекстуОшибки = "";
		КонецЕсли;
		
		ПорядокВоспроизведения = СтрЗаменить(
			НСтр("ru='В результате проверки АПК найдены ошибки.
				|Для просмотра списка ошибок АПК необходимо перейти по ссылке
				|""Ошибки (Автоматизированная проверка конфигурации)"" в панели навигации формы.
				|%ДополнениеКТекстуОшибки'"),
			"%ДополнениеКТекстуОшибки",
			ДополнениеКТекстуОшибки);
		
		ОписаниеОшибки.Вставить("ПорядокВоспроизведения", ПорядокВоспроизведения);
		
	КонецЕсли;
	
	ОписаниеОшибки.Вставить("ДатаРегистрации",      ДатаОшибки);
	
	Ошибка = Справочники.Ошибки.СоздатьЭлемент();
	Ошибка.Заполнить(Неопределено);
	ЗаполнитьЗначенияСвойств(Ошибка, ОписаниеОшибки);
	
	Если ОбъектыМетаданных <> Неопределено Тогда
		ЗаполнитьРазделыПроекта(Ошибка, ОбъектыМетаданных);
	КонецЕсли;
	
	Если ВводНаОсновании И НЕ ПустаяСтрока(Данные.Комментарий) Тогда
		
		// Добавим строку в протокол
		НоваяСтрока = Ошибка.Протокол.Добавить();
		
		НоваяСтрока.Автор          = ОписаниеОшибки.Автор;
		НоваяСтрока.Дата           = ДатаОшибки;
		НоваяСтрока.Комментарий    = Данные.Комментарий;
		НоваяСтрока.КомуНаправлена = ОписаниеОшибки.КомуНаправлена;
		НоваяСтрока.Статус         = ОписаниеОшибки.Статус;
		
	КонецЕсли;
	
	// Если для пользователя настроено замещение, то в поле Кому направлена подставляется замещающий
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Ошибка.КомуНаправлена, Ошибка.Владелец, "", Ложь);
		
	Ошибка.Записать();
	
	Возврат Ошибка.Ссылка;
	
КонецФункции

Функция СгруппироватьИЗаписатьОшибкиИзАПК(ДанныеАПК, ДополненныеДанные, ТаблицаОшибок) Экспорт
	
	СтруктураОтбора = Новый Структура("Ошибка, Ответственный, СрочностьИсправления");
	
	ГруппыОшибокКЗаписи = ТаблицаОшибок.Скопировать();
	ГруппыОшибокКЗаписи.Свернуть("Ошибка,Ответственный,СрочностьИсправления");
	
	ДатаОшибки = ТекущаяДатаСеанса();
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("Статус",                   Перечисления.СтатусыОшибок.Зарегистрирована);
	ОписаниеОшибки.Вставить("Зарегистрирована",         Истина);
	ОписаниеОшибки.Вставить("Обнаружена");
	ОписаниеОшибки.Вставить("СборкаОбнаружения");
	ОписаниеОшибки.Вставить("ВеткаОбнаружения");
	ОписаниеОшибки.Вставить("Владелец",        ДополненныеДанные.Проект);
	ОписаниеОшибки.Вставить("Автор",           Пользователи.ТекущийПользователь());
	ОписаниеОшибки.Вставить("ДатаСоздания",    ДанныеАПК.ДатаСоздания);
	ОписаниеОшибки.Вставить("ДатаОбнаружения", ДанныеАПК.ДатаСоздания);
	ОписаниеОшибки.Вставить("ДатаНаправления", ДанныеАПК.ДатаСоздания);
	
	ПорядокВоспроизведения = СтрЗаменить(
	НСтр("ru='В результате проверки АПК найдены ошибки.
	|%ДополнениеКТекстуОшибки'"),
	"%ДополнениеКТекстуОшибки",
	ДанныеАПК.ДополнениеКТекстуОшибки);
	
	ФорматированнаяСтрока   = Новый ФорматированнаяСтрока(ПорядокВоспроизведения);
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(ФорматированнаяСтрока);
	
	ОписаниеОшибки.Вставить("ХранилищеПорядкаВоспроизведения", Новый ХранилищеЗначения(ФорматированныйДокумент));
	ОписаниеОшибки.Вставить("ПорядокВоспроизведения",          ПорядокВоспроизведения);
	ОписаниеОшибки.Вставить("МетодВыявленияОшибки",            Перечисления.МетодыВыявленияОшибок.АудитКода);
	
	ЗаполнитьЗначенияСвойств(ОписаниеОшибки,ДополненныеДанные.МестоОбнаружения);
	
	Для Каждого ГруппаОшибок Из ГруппыОшибокКЗаписи Цикл
			
		ЗаполнитьЗначенияСвойств(СтруктураОтбора,ГруппаОшибок);
		ОшибкиКЗаписи = ТаблицаОшибок.НайтиСтроки(СтруктураОтбора);
		
		ОписаниеОшибки.Вставить("Наименование",         СтруктураОтбора.Ошибка);
		ОписаниеОшибки.Вставить("КомуНаправлена",       СтруктураОтбора.Ответственный);
		ОписаниеОшибки.Вставить("СрочностьИсправления", ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок." + СтруктураОтбора.СрочностьИсправления));
		ОписаниеОшибки.Вставить("Стандарт",             ОшибкиКЗаписи[0].Стандарт);
		
		ИсходнаяИнформацияОбОшибке = ОшибкиКЗаписи[0].ИсходнаяИнформацияОбОшибке;
		ФорматированнаяСтрока   = Новый ФорматированнаяСтрока(ИсходнаяИнформацияОбОшибке);
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьФорматированнуюСтроку(ФорматированнаяСтрока);
		
		ОписаниеОшибки.Вставить("ХранилищеИсходнойИнформацииОбОшибке", Новый ХранилищеЗначения(ФорматированныйДокумент));
		ОписаниеОшибки.Вставить("ИсходнаяИнформацияОбОшибке",          ИсходнаяИнформацияОбОшибке);
		
		ОписаниеОшибки.Вставить("ВерсияИсправления", 
			ИнтеграцияСАПКПовтИсп.ПодобратьВерсиюИсправленияДляОшибки(
				ОписаниеОшибки.Владелец,
				ОписаниеОшибки.Обнаружена,
				ОписаниеОшибки.ВеткаОбнаружения,
				ОписаниеОшибки.СборкаОбнаружения,
				ОписаниеОшибки.ДатаОбнаружения,
				ОписаниеОшибки.СрочностьИсправления));
		ОписаниеОшибки.Вставить("Исправляется", Справочники.Ошибки.ВариантИсправления(
														ОписаниеОшибки.ВеткаОбнаружения, 
														ОписаниеОшибки.МетодВыявленияОшибки, 
														ОписаниеОшибки.ВерсияИсправления));
		
		ОписаниеОшибки.Вставить("РазделПроекта",ОпределитьРазделПроектаГруппыОшибок(ОшибкиКЗаписи));
		
		СоздаваемаяОшибка = Справочники.Ошибки.СоздатьЭлемент();
		СоздаваемаяОшибка.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(СоздаваемаяОшибка,ОписаниеОшибки);
		
		ЕстьНенайденныеМетаданные      = Ложь;
		СчетчикНенайденныхМетаданных   = 1;
		ЗаголовокНенайденныхМетаданных = НСтр("ru = 'Метаданные:'");
		ШаблонНенайденныхМетаданных = НСтр("ru = '
		                                   |%1) %2
		                                   |%3
		                                   |%4'");
		
		Для Каждого СтрокаОшибки Из ОшибкиКЗаписи Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаОшибки.ОбъектМетаданных) Тогда
				
				ЕстьНенайденныеМетаданные = Истина;
				ЗаголовокНенайденныхМетаданных = ЗаголовокНенайденныхМетаданных 
				                               + СтрШаблон(ШаблонНенайденныхМетаданных,
				                                           Строка(СчетчикНенайденныхМетаданных),
				                                           СтрокаОшибки.ПолноеИмяОбъекта,
				                                           СтрокаОшибки.МестоОбнаружения,
				                                           СтрокаОшибки.Уточнение);
				СчетчикНенайденныхМетаданных = СчетчикНенайденныхМетаданных + 1;
				
			Иначе 
				
				СтрокаМетаданных = СоздаваемаяОшибка.СписокОбъектов.Добавить();
				СтрокаМетаданных.ПроблемныйОбъект = СтрокаОшибки.ОбъектМетаданных;
				ЗаполнитьЗначенияСвойств(СтрокаМетаданных, СтрокаОшибки, "ПодчиненныйОбъект");
				СтрокаМетаданных.Уточнение = СтрокаОшибки.Уточнение;
				СтрокаМетаданных.Комментарий = СтрокаОшибки.Комментарий;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		СоздаваемаяОшибка.СписокОбъектов.Сортировать("ПроблемныйОбъект,ПодчиненныйОбъект,УточнениеРасположения");
		
		Если ЕстьНенайденныеМетаданные Тогда
			
			КомментарийВЖурнал = ОписаниеОшибки.Наименование + Символы.ПС
			                   + ИсходнаяИнформацияОбОшибке + Символы.ПС
			                   + ЗаголовокНенайденныхМетаданных;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с АПК. Ненайденные метаданные'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				КомментарийВЖурнал);
			
			// Данных для регистрации нет, ошибка не регистрируется 
			Если СоздаваемаяОшибка.СписокОбъектов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли; 
		
		СтрокаПротокола = СоздаваемаяОшибка.Протокол.Добавить();
		СтрокаПротокола.Дата           = ДатаОшибки;
		СтрокаПротокола.Автор          = Пользователи.ТекущийПользователь();
		СтрокаПротокола.КомуНаправлена = СтруктураОтбора.Ответственный;
		СтрокаПротокола.Статус         = Перечисления.СтатусыОшибок.Зарегистрирована;
		
		// Если для пользователя настроено замещение, то в поле Кому направлена подставляется замещающий
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(СоздаваемаяОшибка.КомуНаправлена, СоздаваемаяОшибка.Владелец, "", Ложь);
		
		СоздаваемаяОшибка.Записать();
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает описание ошибки сервиса.
//
// Параметры:
//	Заголовок - Строка - заголовок ошибки
//	Описание - Строка - описание ошибки
//
// Возвращаемое значение:
//	Структура - описание ошибки
//
Функция ВернутьОшибкуСервиса(Заголовок, Описание) Экспорт
	
	ОписаниеОшибки = Новый Структура("ОшибкаСервиса, Заголовок, Описание", Истина, Заголовок, Описание);
	
	Возврат ВернутьХранилищеЗначения(ОписаниеОшибки);
	
КонецФункции

// Возвращает хранилище значения с помещенным в него переданным значением.
// 
// Параметры:
//	Значение - Произвольный - любое значение
//
// Возвращаемое значение:
//	ХранилищеЗначения
//
Функция ВернутьХранилищеЗначения(Значение) Экспорт
	
	Возврат Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
	
КонецФункции

// Возвращает строковое представление идентификатора объекта ИБ, полученного по ссылке.
//
// Параметры:
//	Ссылка - ЛюбаяСсылка - произвольная ссылка
//
// Возвращаемое значение:
//	Строка - строковое представление идентификатора объекта с этой ссылкой или пустая строка для пустой ссылки
//
Функция ИдентификаторПоСсылке(Ссылка) Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат СокрЛП(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Возвращает строковое представление идентификатора объекта ИБ, полученного по ссылке.
//
// Параметры:
//	МенеджерОбъекта - Менеджер - менеджер объекта
//	Идентификатор   - Строка - уникальный идентификатор
//
// Возвращаемое значение:
//	ЛюбаяСсылка - ссылка на объект с указанным идентификатором
//
Функция СсылкаПоИдентификатору(МенеджерОбъекта, УИД) Экспорт
	
	Если ЗначениеЗаполнено(УИД) Тогда
		Возврат МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	КонецЕсли;
	
	Возврат МенеджерОбъекта.ПустаяСсылка();
	
КонецФункции


// Возвращает соответствие значений перечисления и их имен.
//
// Параметры:
//	ИмяПеречисления - Строка - имя перечисления в метаданных конфигурации
//
// Возвращаемое значение:
//	Соответствие - Ключ: значение перечисления, Значение: имя значения перечисления в метаданных конфигурации
//
Функция СоответствиеНазванийПеречисления(ИмяПеречисления) Экспорт
	
	СоответствиеЗначений = Новый Соответствие;
	СоответствиеЗначений.Вставить(Перечисления[ИмяПеречисления].ПустаяСсылка(), "");
	Для Каждого Мета Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		СоответствиеЗначений.Вставить(Перечисления[ИмяПеречисления][Мета.Имя], Мета.Имя);
	КонецЦикла;
	
	Возврат СоответствиеЗначений;
	
КонецФункции

// Возвращает ссылку на пользователя по его имени.
//
// Параметры:
//	ИмяПользователя - Строка - имя пользователя
//
// Возвращаемое значение:
//	Соответствие - Ключ: значение перечисления, Значение: имя значения перечисления в метаданных конфигурации
//
Функция НайтиПользователя(ИмяПользователя) Экспорт
	
	Возврат Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя, Истина);
	
КонецФункции


// Заполняет разделы проекта в ошибке на основании объектов метаданных, по которым зарегистрирована ошибка.
//
// Параметры:
//	Ошибка - СправочникОбъект.Ошибки - ошибка
//	ОбъектыМетаданных - см. ЗарегистрироватьОшибку()
//
Процедура ЗаполнитьРазделыПроекта(Ошибка, ОбъектыМетаданных)
	
	Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка.Владелец, "УказыватьВОшибкахРазделПроекта") Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка.РазделПроекта = Неопределено;
	Ошибка.РазделыПроекта.Очистить();
	
	МассивОбъектов = Новый Массив;
	
	Для Каждого КлючИЗначение Из ОбъектыМетаданных Цикл
		ОбъектМетаданных = СсылкаПоИдентификатору(Справочники.ОбъектыМетаданных, КлючИЗначение.Ключ);
		Если ЗначениеЗаполнено(ОбъектМетаданных) И МассивОбъектов.Найти(ОбъектМетаданных) = Неопределено Тогда
			МассивОбъектов.Добавить(ОбъектМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыМетаданных.РазделПроекта КАК Раздел,
	|	СУММА(1) КАК Количество
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Ссылка В(&МассивОбъектов)
	|	И ОбъектыМетаданных.РазделПроекта <> ЗНАЧЕНИЕ(Справочник.РазделыПроекта.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыМетаданных.РазделПроекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество УБЫВ,
	|	Раздел
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ТаблицаРазделов = Запрос.Выполнить().Выгрузить();
	
	Ошибка.РазделыПроекта.Загрузить(ТаблицаРазделов);
	
	Если ТаблицаРазделов.Количество() > 0 Тогда
		Ошибка.РазделПроекта = ТаблицаРазделов[0].Раздел; // наиболее часто используемый раздел в объектах метаданных этой ошибки
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьНаименованиеОбъектаМетаданныхКЕдинственномуЧислу(Знач НаименованиеОбъекта) Экспорт
	
	Результат = НаименованиеОбъекта;
	
	ЗаменяемыеЧастиНаименования = Новый Массив;
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Общие.",               ""));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("HTTPСервисы.",         "HTTPСервис."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("WSСсылки.",            "WSСсылка."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("WebСервисы.",          "WebСервис."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("БизнесПроцессы.",      "БизнесПроцесс."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ВнешниеИсточникиДанных.", "ВнешнийИсточникДанных."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ГруппыКоманд.",        "ГруппаКоманд."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Документы.",           "Документ."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ЖурналыДокументов.",   "ЖурналДокументов."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Задачи.",              "Задача."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Константы.",           "Константа."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("КритерииОтбора.",      "КритерийОтбора."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Нумераторы.",          "Нумератор."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Обработки.",           "Обработка."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ОбщиеКартинки.",       "ОбщаяКартинка."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ОбщиеКоманды.",        "ОбщаяКоманда."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ОбщиеМакеты.",         "ОбщийМакет."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ОбщиеМодули.",         "ОбщийМодуль."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ОбщиеРеквизиты.",      "ОбщийРеквизит."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ОбщиеФормы.",          "ОбщаяФорма."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ОпределяемыеТипы.",    "ОпределяемыйТип."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Отчеты.",              "Отчет."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПакетыXDTO.",          "ПакетXDTO."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПараметрыСеанса.",     "ПараметрСеанса."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПараметрыФункциональныхОпций.", "Параметр."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Перечисления.",        "Перечисление."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПланыВидовРасчета.",   "ПланВидовРасчета."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПланыВидовХарактеристик.", "ПланВидовХарактеристик."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПланыОбмена.",         "ПланОбмена."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПланыСчетов.",         "ПланСчетов."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ПодпискиНаСобытия.",   "ПодпискаНаСобытие."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Подсистемы.",          "Подсистема."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Последовательности.",  "Последовательность."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("РегистрыБухгалтерии.", "РегистрБухгалтерии."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("РегистрыНакопления.",  "РегистрНакопления."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("РегистрыРасчета.",     "РегистрРасчета."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("РегистрыСведений.",    "РегистрСведений."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("РегламентныеЗадания.", "РегламентноеЗадание."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Роли.",                "Роль."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Справочники.",         "Справочник."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Стили.",               "Стиль."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ФункциональныеОпции.", "ФункциональнаяОпция."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ХранилищаНастроек.",   "ХранилищеНастроек."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("ЭлементыСтиля.",       "ЭлементСтиля."));
	ЗаменяемыеЧастиНаименования.Добавить(ПолучитьСтруктуруЗаменыПодстрок("Языки.",               "Язык."));
	
	Для Каждого СтруктураЗамены Из ЗаменяемыеЧастиНаименования Цикл
		Если СтрНачинаетсяС(Результат,СтруктураЗамены.ЗаменяемоеЗначение) Тогда
			Результат = СтрЗаменить(Результат,СтруктураЗамены.ЗаменяемоеЗначение
				,СтруктураЗамены.ЗначениеЗамены);
			
			//Небольшая экономия, т.к. любой другой вариант исключает остальные
			Если СтруктураЗамены.ЗаменяемоеЗначение <> "Общие." Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруЗаменыПодстрок(ЗаменяемоеЗначение,ЗначениеЗамены)
	Возврат Новый Структура("ЗаменяемоеЗначение,ЗначениеЗамены",ЗаменяемоеЗначение,ЗначениеЗамены);
КонецФункции

// Получает соответствие ссылок на объекты метаданных и подчиненные им объекты по строковому представлению
//
// Параметры:
//  ТаблицаИмен - ТаблицаЗначений:
//   Имя - имя объекта в единственном числе
//  Проект - СправочникСсылка.Проект - проект-владелец
Функция ПолучитьСоответствиеМетаданныхИменам(ТаблицаИмен, Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИмен",ТаблицаИмен);
	Запрос.УстановитьПараметр("Владелец",Проект);
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Ответственный, ОтветственныйЗаМетаданныеПоУмолчанию");
	Если ЗначениеЗаполнено(РеквизитыПроекта.ОтветственныйЗаМетаданныеПоУмолчанию) Тогда
		Запрос.УстановитьПараметр("ОтветственныйЗаМетаданныеПоУмолчанию", РеквизитыПроекта.ОтветственныйЗаМетаданныеПоУмолчанию);
	Иначе
		Запрос.УстановитьПараметр("ОтветственныйЗаМетаданныеПоУмолчанию", РеквизитыПроекта.Ответственный);
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИмен.ПолноеИмяОбъекта КАК Имя
	|ПОМЕСТИТЬ ИменаОбъектов
	|ИЗ
	|	&ТаблицаИмен КАК ТаблицаИмен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка КАК Ссылка,
	|	ОбъектыМетаданных.Наименование КАК Наименование,
	|	ОбъектыМетаданных.РазделПроекта КАК РазделПроекта,
	|	ВЫБОР
	|		КОГДА ОбъектыМетаданных.ПравилоПоддержки = ЗНАЧЕНИЕ(Перечисление.ПравилаПоддержки.НеРедактируется)
	|				И ОбъектыМетаданных.Поставщик <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|				И ЕСТЬNULL(ОбъектыМетаданных.Поставщик.ОтветственныйЗаМетаданныеПоУмолчанию, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ОбъектыМетаданных.Поставщик.ОтветственныйЗаМетаданныеПоУмолчанию, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		КОГДА ОбъектыМетаданных.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ОбъектыМетаданных.Ответственный
	|		КОГДА ЕСТЬNULL(СпрРазделыПроекта.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпрРазделыПроекта.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ &ОтветственныйЗаМетаданныеПоУмолчанию
	|	КОНЕЦ КАК Ответственный
	|ПОМЕСТИТЬ ОбъектыМетаданных
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РазделыПроекта КАК СпрРазделыПроекта
	|		ПО ОбъектыМетаданных.РазделПроекта = СпрРазделыПроекта.Ссылка
	|			И (ОбъектыМетаданных.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|ГДЕ
	|	ОбъектыМетаданных.Владелец = &Владелец
	|	И НЕ ОбъектыМетаданных.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подсистемы.Ссылка КАК Ссылка,
	|	""Подсистема."" + Подсистемы.Наименование КАК Наименование,
	|	Подсистемы.РазделПроекта КАК РазделПроекта,
	|	ВЫБОР
	|		КОГДА Подсистемы.ПравилоПоддержки = ЗНАЧЕНИЕ(Перечисление.ПравилаПоддержки.НеРедактируется)
	|				И Подсистемы.Поставщик <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|				И ЕСТЬNULL(Подсистемы.Поставщик.ОтветственныйЗаМетаданныеПоУмолчанию, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(Подсистемы.Поставщик.ОтветственныйЗаМетаданныеПоУмолчанию, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		КОГДА Подсистемы.Ответственный <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА Подсистемы.Ответственный
	|		КОГДА ЕСТЬNULL(СпрРазделыПроекта.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СпрРазделыПроекта.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ &ОтветственныйЗаМетаданныеПоУмолчанию
	|	КОНЕЦ КАК Ответственный
	|ПОМЕСТИТЬ Подсистемы
	|ИЗ
	|	Справочник.Подсистемы КАК Подсистемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РазделыПроекта КАК СпрРазделыПроекта
	|		ПО Подсистемы.РазделПроекта = СпрРазделыПроекта.Ссылка
	|			И (Подсистемы.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|ГДЕ
	|	Подсистемы.Владелец = &Владелец
	|	И НЕ Подсистемы.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК ПорядокВыбора,
	|	Подсистемы.Ссылка,
	|	NULL КАК ОбъектВладелец,
	|	Подсистемы.Наименование КАК Наименование,
	|	Подсистемы.РазделПроекта КАК РазделПроекта,
	|	Подсистемы.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВсеОбъектыПоПроекту
	|ИЗ
	|	Подсистемы КАК Подсистемы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК ПорядокВыбора,
	|	ОбъектыМетаданных.Ссылка,
	|	NULL КАК ОбъектВладелец,
	|	ОбъектыМетаданных.Наименование КАК Наименование,
	|	ОбъектыМетаданных.РазделПроекта КАК РазделПроекта,
	|	ОбъектыМетаданных.Ответственный КАК Ответственный
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК ПорядокВыбора,
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ФормыОбъектовМетаданных.Владелец,
	|	ФормыОбъектовМетаданных.Владелец.Наименование + ""."" + ФормыОбъектовМетаданных.Имя,
	|	ФормыОбъектовМетаданных.Владелец.РазделПроекта,
	|	ВЫБОР
	|		КОГДА ФормыОбъектовМетаданных.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ОбъектыМетаданных.Ответственный
	|		ИНАЧЕ ФормыОбъектовМетаданных.Ответственный
	|	КОНЕЦ
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|		ПО ОбъектыМетаданных.Ссылка = ФормыОбъектовМетаданных.Владелец
	|ГДЕ
	|	НЕ ФормыОбъектовМетаданных.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4 КАК ПорядокВыбора,
	|	РеквизитыОбъектовМетаданных.Ссылка,
	|	РеквизитыОбъектовМетаданных.Владелец,
	|	РеквизитыОбъектовМетаданных.Наименование,
	|	ОбъектыМетаданных.РазделПроекта,
	|	ОбъектыМетаданных.Ответственный
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
	|		ПО ОбъектыМетаданных.Ссылка = РеквизитыОбъектовМетаданных.Владелец
	|ГДЕ
	|	РеквизитыОбъектовМетаданных.ВидРеквизита <> ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизит)
	|	И НЕ РеквизитыОбъектовМетаданных.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5 КАК ПорядокВыбора,
	|	РеквизитыОбъектовМетаданных.Ссылка,
	|	РеквизитыОбъектовМетаданных.Владелец,
	|	ВЫБОР
	|		КОГДА РеквизитыОбъектовМетаданных.Родитель.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.ТабличнаяЧасть)
	|			ТОГДА РеквизитыОбъектовМетаданных.Владелец.Наименование + ""."" + РеквизитыОбъектовМетаданных.Родитель.Имя + ""."" + РеквизитыОбъектовМетаданных.Имя
	|		ИНАЧЕ РеквизитыОбъектовМетаданных.Владелец.Наименование + ""."" + РеквизитыОбъектовМетаданных.Имя
	|	КОНЕЦ,
	|	ОбъектыМетаданных.РазделПроекта,
	|	ОбъектыМетаданных.Ответственный
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
	|		ПО ОбъектыМетаданных.Ссылка = РеквизитыОбъектовМетаданных.Владелец
	|ГДЕ
	|	(    РеквизитыОбъектовМетаданных.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизит)
	|	 ИЛИ РеквизитыОбъектовМетаданных.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Измерение)
	|	 ИЛИ РеквизитыОбъектовМетаданных.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Ресурс)
	|	 ИЛИ РеквизитыОбъектовМетаданных.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
	|	)
	|	И НЕ РеквизитыОбъектовМетаданных.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	6 КАК ПорядокВыбора,
	|	МакетыОбъектовМетаданных.Ссылка,
	|	МакетыОбъектовМетаданных.Владелец,
	|	МакетыОбъектовМетаданных.Наименование,
	|	ОбъектыМетаданных.РазделПроекта,
	|	ВЫБОР
	|		КОГДА МакетыОбъектовМетаданных.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА ОбъектыМетаданных.Ответственный
	|		ИНАЧЕ МакетыОбъектовМетаданных.Ответственный
	|	КОНЕЦ
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МакетыОбъектовМетаданных КАК МакетыОбъектовМетаданных
	|		ПО ОбъектыМетаданных.Ссылка = МакетыОбъектовМетаданных.Владелец
	|ГДЕ
	|	НЕ МакетыОбъектовМетаданных.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	7 КАК ПорядокВыбора,
	|	КомандыОбъектовМетаданных.Ссылка,
	|	КомандыОбъектовМетаданных.Владелец,
	|	КомандыОбъектовМетаданных.Наименование,
	|	ОбъектыМетаданных.РазделПроекта,
	|	ОбъектыМетаданных.Ответственный
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомандыОбъектовМетаданных КАК КомандыОбъектовМетаданных
	|		ПО ОбъектыМетаданных.Ссылка = КомандыОбъектовМетаданных.Владелец
	|ГДЕ
	|	НЕ КомандыОбъектовМетаданных.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИменаОбъектов.Имя КАК Имя,
	|	ВсеОбъектыПоПроекту.Ссылка КАК Ссылка,
	|	ВсеОбъектыПоПроекту.ОбъектВладелец КАК ОбъектВладелец,
	|	ВсеОбъектыПоПроекту.РазделПроекта КАК РазделПроекта,
	|	ВсеОбъектыПоПроекту.Ответственный КАК Ответственный
	|ИЗ
	|	ИменаОбъектов КАК ИменаОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеОбъектыПоПроекту КАК ВсеОбъектыПоПроекту
	|		ПО ИменаОбъектов.Имя = ВсеОбъектыПоПроекту.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеОбъектыПоПроекту.ПорядокВыбора";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Индексы.Добавить("Имя");
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ОпределитьРазделПроектаГруппыОшибок(МассивОшибок)
	
	СуммаПоРазделам = Новый ТаблицаЗначений;
	СуммаПоРазделам.Колонки.Добавить("РазделПроекта",Новый ОписаниеТипов("СправочникСсылка.РазделыПроекта"));
	СуммаПоРазделам.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(4,0,ДопустимыйЗнак.Неотрицательный)));
	
	Для Каждого СтрокаОшибки Из МассивОшибок Цикл
		РазделОшибки = СтрокаОшибки.ОбъектМетаданных.РазделПроекта;
		Если РазделОшибки <> Справочники.РазделыПроекта.ПустаяСсылка() Тогда
			СтрокаРаздела = СуммаПоРазделам.Найти(РазделОшибки);
			Если СтрокаРаздела = Неопределено Тогда
				СтрокаРаздела = СуммаПоРазделам.Добавить();
				СтрокаРаздела.РазделПроекта = РазделОшибки;
			КонецЕсли;
			СтрокаРаздела.Количество = СтрокаРаздела.Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаПоРазделам.Количество()>0 Тогда
		СуммаПоРазделам.Сортировать("Количество убыв");
		Возврат СуммаПоРазделам[0].РазделПроекта;
	Иначе
		Возврат Справочники.РазделыПроекта.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти
