////////////////////////////////////////////////////////////////////////////////
//  Клиентские процедуры и функции подсистемы "Задачи процессов"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Раскрывает строки верхнего уровня дерева
//
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой находится дерево.
//  ИмяДерева - Строка                     - имя элемента формы, который содержит дерево.
//
Процедура РаскрытьСтрокиВерхнегоУровня(Форма, ИмяДерева) Экспорт

	СтрокиДереваВерхнегоУровня = Форма[ИмяДерева].ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДереваВерхнегоУровня Цикл
		Форма.Элементы[ИмяДерева].Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
	КонецЦикла;

КонецПроцедуры

// Конструктор параметров выбора задачи
//
// Возвращаемое значение:
//   Структура   - содержит:
//    * ТекущаяЗадача               - СправочникСсылка.ЗадачиПроцесса - задача от которой происходит выбор.
//    * ИсключатьПодчиненныеЗадачи  - Булево - признак необходимости исключения подчиненных задач.
//    * ИсключатьВышестоящиеЗадачи  - Булево - признак необходимости исключения вышестоящих задач.
//    * УжеПодобранныеЗадачи        - Массив - ранее подобранные задачи.
//
Функция ПараметрыВыбораЗадачи() Экспорт
	
	ПараметрыВыбораЗадачи = Новый Структура;
	
	ПараметрыВыбораЗадачи.Вставить("ТекущаяЗадача", ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	ПараметрыВыбораЗадачи.Вставить("ИсключатьПодчиненныеЗадачи", Ложь);
	ПараметрыВыбораЗадачи.Вставить("ИсключатьВышестоящиеЗадачи", Ложь);
	ПараметрыВыбораЗадачи.Вставить("УжеПодобранныеЗадачи", Новый Массив);
	
	Возврат ПараметрыВыбораЗадачи;
	
КонецФункции

// Обработчик создания задачи из списка
//
// Параметры:
//  Список    - ТаблицаФормы - элемент формы, который содержит список задач.
//  ВидЗадачи - Строка - может принимать значения - "Паралельная", "Последующая", "Подчиненная".
//  Предмет   - ОпределяемыйТип.ПредметПроцесса - предмет создаваемой задачи
//
Процедура СоздатьЗадачуИзСписка(Список , ВидЗадачи, Предмет) Экспорт
	
	Если ВидЗадачи = "" Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ВыборКорректен(Список, Истина) Тогда
		ТекущаяЗадача = Неопределено;
	Иначе
		ТекущаяЗадача = Список.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	СоздатьЗадачу(ТекущаяЗадача, ВидЗадачи, Предмет);
	
КонецПроцедуры

// Обработчик создания задачи из списка
//
// Параметры:
//  ЗадачаОснование - СправочникСсылка.ЗадачиПроцесса   - задача, относительно которой создается новая задача.
//  ВидЗадачи       - Строка - может принимать значения - "Паралельная", "Последующая", "Подчиненная".
//  Предмет         - ОпределяемыйТип.ПредметПроцесса   - предмет создаваемой задачи
//
Процедура СоздатьЗадачу(ЗадачаОснование, ВидЗадачи, Предмет) Экспорт
	
	Основание = Новый Структура;
	Основание.Вставить("ЗадачаПроцесса", ЗадачаОснование);
	Основание.Вставить("ВидЗадачи",      ВидЗадачи);
	Основание.Вставить("Предмет",        Предмет);

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Основание);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ФормаЭлемента", ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

// Проверяет, корректен ли выбор строк динамического списка для выполнения команд по изменению задач
//
// Параметры:
//  Список            - ТаблицаФормы - элемент формы, который содержит список задач.
//  ПоТекущейСтроке   - Булево - признак того, что нужно учитывать только текущую строку.
//
Функция ВыборКорректен(Список, ПоТекущейСтроке = Ложь) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
	Если ПоТекущейСтроке Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) <> ТипГруппировка И Список.ТекущиеДанные <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		
		Для Каждого Элемент Из Список.ВыделенныеСтроки Цикл
			Если ТипЗнч(Элемент) <> ТипГруппировка Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СогласующиеПоПредметам

Процедура ОбработкаНавигационнойСсылкиСогласующиеРесурс(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьФормуСогласующиеПоПредмету" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресСогласующиеПоПредмету", Форма.АдресСогласующиеПоПредмету);
		ПараметрыФормы.Вставить("ТолькоПросмотр",             Форма.ТолькоПросмотр);
		
		ОповещениеОИзмененииСогласующих = Новый ОписаниеОповещения("ИзменениеСогласующихЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("ОбщаяФорма.СогласующиеРесурсыПредмета", ПараметрыФормы, Форма,,,,
		             ОповещениеОИзмененииСогласующих, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменениеСогласующихЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.Форма.Подключаемый_ОбработатьИзменениеСогласующихРесурсыПоПредмету();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьИзменениеЕдинственногоСогласующегоРесурса(Форма) Экспорт
	
	Форма.СогласующиеПоПредмету[0].Согласующий = Форма.СогласующийРесурс;
	
КонецПроцедуры

#КонецОбласти

Процедура МножественныйОтборСпискаНачалоВыбора(Форма, Элемент, Значения, ТипПеречисления, Заголовок, ДоступныеЗначения = Неопределено) Экспорт

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокОтбор",       Значения);
	ПараметрыОткрытия.Вставить("ТипПеречисления",   ТипПеречисления);
	ПараметрыОткрытия.Вставить("Заголовок",         Заголовок);
	ПараметрыОткрытия.Вставить("ДоступныеЗначения", ДоступныеЗначения);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ФормаМножественногоОтбораПослеЗакрытия", Форма, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.МножественныйОтборСписка", ПараметрыОткрытия, Элемент,,,, ОповещениеОЗакрытии);

КонецПроцедуры

Процедура СписокЗадачПриПеретаскивании(ЭлементСписок, Строка, ПараметрыПеретаскивания) Экспорт
	
	ТекущиеДанные = ЭлементСписок.ДанныеСтроки(Строка);
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗадачКПеретаскиванию = Новый Массив;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
			
			Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
				МассивЗадачКПеретаскиванию.Добавить(ЭлементМассива);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		МассивЗадачКПеретаскиванию.Добавить(ПараметрыПеретаскивания.Значение);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	Если МассивЗадачКПеретаскиванию.Количество() > 0 Тогда
		
		РезультатИзменения = ЗадачиПроцессовВызовСервера.РезультатИзмененияРодителяУМассиваЗадач(МассивЗадачКПеретаскиванию, ТекущиеДанные.Ссылка);
		
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Выполнено изменение родителя у задач - %1 из %2'"), 
		                            РезультатИзменения.КоличествоИзменено, 
		                            РезультатИзменения.КоличествоКИзменению);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение родителя у задач'") ,, ТекстОповещения, БиблиотекаКартинок.Информация32);
		
		Для Каждого ИнформацияОбИзменении Из РезультатИзменения.ИнформацияОбИзмененииЗадач Цикл
			
			Если ИнформацияОбИзменении.ИзменениеВыполнено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Не удалось изменить родителя у задачи ""%1"". %2.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ИнформацияОбИзменении.Задача, ИнформацияОбИзменении.ТекстОшибки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ИнформацияОбИзменении.Задача);
			
		КонецЦикла;
		
		Если РезультатИзменения.КоличествоИзменено > 0 Тогда
			ЭлементСписок.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ТекущиеДанныеСписка(Список)
	
	Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка")
		Или Список.ТекущиеДанные = Неопределено Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Список.ТекущиеДанные;
	
КонецФункции

Процедура ВыполнитьКомандуСписка(ИмяКоманды, Список, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	Если Не ПараметрыВыполненияКомандыКорректноЗаполнены(ИмяКоманды, ДополнительныеПараметры) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РежимВыполненияКомандыМножественный = РежимВыполненияКомандыМножественный(ИмяКоманды);
	
	Если РежимВыполненияКомандыМножественный = Истина Тогда
	
		ВыделенныеСтроки = ВыделенныеВСпискеСсылки(Список);
		КоличествоВыделенныхСтрок = ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныхСтрок = 0 Тогда
			Возврат;
		КонецЕсли;
		
		КоличествоОбработанных = 0;
		
		Если ИмяКоманды = "Перенаправить"
			Или ИмяКоманды = "НаправитьИсполнителямЗадачи"
			Или ИмяКоманды = "ИзменитьИсполнителя" Тогда
			
			ВыполнитьКомандуСпискаНаКлиенте(ВыделенныеСтроки, ИмяКоманды, Список, ДополнительныеПараметры);
			
		Иначе
			
			ЗадачиПроцессовВызовСервера.ВыполнитьДействиеНадМассивомЗадач(ВыделенныеСтроки, ИмяКоманды, КоличествоОбработанных, ДополнительныеПараметры);
			ОповеститьПользователяОВыполненииКомандыСписка(ИмяКоманды, КоличествоОбработанных, КоличествоВыделенныхСтрок);
			
			ОбработаноЗадач = ОбработаноЗадачКомандойСписка(КоличествоОбработанных);
			
			Если ОбработаноЗадач > 0 Тогда
				Список.Обновить();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимВыполненияКомандыМножественный = Ложь Тогда
		
		ТекущиеДанные = ТекущиеДанныеСписка(Список);
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьКомандуСпискаНаКлиенте(ТекущиеДанные, ИмяКоманды, Список, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработаноЗадачКомандойСписка(КоличествоОбработанных)
	
	Если ТипЗнч(КоличествоОбработанных) = Тип("Структура") Тогда
		ОбработаноЗадач = КоличествоОбработанных.Обработано;
	Иначе
		ОбработаноЗадач = КоличествоОбработанных;
	КонецЕсли;
	
	Возврат ОбработаноЗадач;
	
КонецФункции

Функция ПараметрыВыполненияКомандыКорректноЗаполнены(ИмяКоманды, ДополнительныеПараметры)
	
	Если ИмяКоманды = "НаправитьНаСогласование"
		Или ИмяКоманды = "Согласовать"
		Или ИмяКоманды = "НеСогласовать"
		Или ИмяКоманды = "ЧастичноСогласовать" Тогда
		
		Если ДополнительныеПараметры = Неопределено 
			Или Не ДополнительныеПараметры.Свойство("СогласуемыйРесурс")
			Или Не ЗначениеЗаполнено(ДополнительныеПараметры.СогласуемыйРесурс) Тогда
			
			ТекстСообщения = НСтр("ru = 'Для выполнения данной команды должен быть установлен отбор в списке по согласуемому ресурсу'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ВыполнитьКомандуСпискаНаКлиенте(ТекущиеДанные, ИмяКоманды, Список, ПараметрыКоманды = Неопределено)
	
	Если ИмяКоманды = "Ответить" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Задача", ТекущиеДанные.Ссылка);
		ДополнительныеПараметры.Вставить("Список", Список);
		ОписаниеОбработчикаЗакрытия = Новый ОписаниеОповещения("ОтветитьПеренаправитьПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыОткрытия.Вставить("Задача", ТекущиеДанные.Ссылка);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПеренаправитьОтветить", 
		             ПараметрыОткрытия, ЭтотОбъект,
		             ,,,ОписаниеОбработчикаЗакрытия);
		
	ИначеЕсли ИмяКоманды = "Перенаправить" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Задача", ТекущиеДанные);
		ДополнительныеПараметры.Вставить("Список", Список);
		ОписаниеОбработчикаЗакрытия = Новый ОписаниеОповещения("ОтветитьПеренаправитьПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыОткрытия.Вставить("Задача", ТекущиеДанные);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПеренаправитьОтветить", 
		             ПараметрыОткрытия, ЭтотОбъект,
		             ,,,ОписаниеОбработчикаЗакрытия);
		
	ИначеЕсли ИмяКоманды = "ИзменитьИсполнителя" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Задача", ТекущиеДанные);
		ДополнительныеПараметры.Вставить("Список", Список);
		ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
		ОписаниеОбработчикаЗакрытия = Новый ОписаниеОповещения("ВыборИсполнителяПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", 
		             ПараметрыОткрытия, ЭтотОбъект,
		             ,,,ОписаниеОбработчикаЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ИмяКоманды = "НаправитьИсполнителямЗадачи" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Задача",     ТекущиеДанные);
		ДополнительныеПараметры.Вставить("Список",     Список);
		ОписаниеОбработчикаЗакрытия = Новый ОписаниеОповещения("ОтветитьПеренаправитьПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИмяКоманды", ИмяКоманды);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПеренаправитьОтветить", 
		             ПараметрыОткрытия, ЭтотОбъект,
		             ,,,ОписаниеОбработчикаЗакрытия);
		
	ИначеЕсли ИмяКоманды = "НеСогласовать"
	       Или ИмяКоманды = "ЧастичноСогласовать" Тогда
		
		Если ИмяКоманды = "НеСогласовать" Тогда
			ИмяПроцедуры =  "НеСогласоватьПослеЗакрытия";
		Иначе
			ИмяПроцедуры =  "ЧастичноСогласоватьПослеЗакрытия";
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Задача",            ТекущиеДанные.Ссылка);
		ДополнительныеПараметры.Вставить("Список",            Список);
		ДополнительныеПараметры.Вставить("СогласуемыйРесурс", ПараметрыКоманды.СогласуемыйРесурс);
		ОписаниеОбработчикаЗакрытия = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИмяКоманды", ИмяКоманды);
		ПараметрыОткрытия.Вставить("Задача", ТекущиеДанные.Ссылка);
		ПараметрыОткрытия.Вставить("СогласуемыйРесурс", ПараметрыКоманды.СогласуемыйРесурс);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПеренаправитьОтветить", 
		             ПараметрыОткрытия, ЭтотОбъект,
		             ,,,ОписаниеОбработчикаЗакрытия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НеСогласоватьПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("ИсполнительПорученияПоЗадаче")
		Или Не Результат.Свойство("ТекстПоручения") Тогда
			Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Задача")
		Или Не ЗначениеЗаполнено(ДополнительныеПараметры.Задача) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат.Вставить("Задача", ДополнительныеПараметры.Задача);
	Результат.Вставить("СогласуемыйРесурс", ДополнительныеПараметры.СогласуемыйРесурс);
	
	ЗадачиПроцессовВызовСервера.НеСогласоватьРесурс(Результат);
	
	ДополнительныеПараметры.Список.Обновить();
	
КонецПроцедуры

Процедура ЧастичноСогласоватьПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("ИсполнительПорученияПоЗадаче")
		Или Не Результат.Свойство("ТекстПоручения") Тогда
			Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Задача")
		Или Не ЗначениеЗаполнено(ДополнительныеПараметры.Задача) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Результат.Вставить("Задача", ДополнительныеПараметры.Задача);
	Результат.Вставить("СогласуемыйРесурс", ДополнительныеПараметры.СогласуемыйРесурс);
	
	ЗадачиПроцессовВызовСервера.ЧастичноСогласоватьРесурс(Результат);
	
	ДополнительныеПараметры.Список.Обновить();
	
КонецПроцедуры

Процедура ОтветитьПеренаправитьПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("ИсполнительПорученияПоЗадаче")
		Или Не Результат.Свойство("ТекстПоручения") Тогда
			Возврат;
	КонецЕсли;
		
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Задача")
		Или Не ЗначениеЗаполнено(ДополнительныеПараметры.Задача) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры.Задача) = Тип("Массив") Тогда
		
		КоличествоОбработанных = 0;
		
		ЗадачиПроцессовВызовСервера.ВыполнитьДействиеНадМассивомЗадач(ДополнительныеПараметры.Задача,
		                                                              Результат.ИмяКоманды,
		                                                              КоличествоОбработанных,
		                                                              Результат);
		
		ОповеститьПользователяОВыполненииКомандыСписка("Перенаправить", КоличествоОбработанных,
		                                               ДополнительныеПараметры.Задача.Количество());
		
	Иначе
		
		Результат.Вставить("Задача", ДополнительныеПараметры.Задача);
		ЗадачиПроцессовВызовСервера.ПеренаправитьЗадачу(Результат);
		
	КонецЕсли;
	
	ДополнительныеПараметры.Список.Обновить();
	
КонецПроцедуры

Процедура ВыборИсполнителяПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Задача")
		Или ТипЗнч(ДополнительныеПараметры.Задача) <> Тип("Массив")
		Или ДополнительныеПараметры.Задача.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КоличествоОбработанных = 0;
	
	ЗадачиПроцессовВызовСервера.ВыполнитьДействиеНадМассивомЗадач(ДополнительныеПараметры.Задача,
		                                                          ДополнительныеПараметры.ИмяКоманды,
		                                                          КоличествоОбработанных,
		                                                          Результат);
		
	ОповеститьПользователяОВыполненииКомандыСписка("ИзменитьИсполнителя", КоличествоОбработанных,
		                                               ДополнительныеПараметры.Задача.Количество());
	
	ДополнительныеПараметры.Список.Обновить();
	
КонецПроцедуры

Функция РежимВыполненияКомандыМножественный(ИмяКоманды) 
	
	РежимВыполненияКомандыМножественный = Неопределено;
	
	Если ИмяКоманды = "ВыполнитьЗадачу"
		Или ИмяКоманды = "Запланировать"
		Или ИмяКоманды = "ПринятьКВыполнению"
		Или ИмяКоманды = "НаправитьНаПроверку"
		Или ИмяКоманды = "Отменить"
		Или ИмяКоманды = "НаправитьНаСогласование"
		Или ИмяКоманды = "НаправитьИсполнителямЗадачи"
		Или ИмяКоманды = "ИзменитьИсполнителя"
		Или ИмяКоманды = "Согласовать"
		Или ИмяКоманды = "Перенаправить"
		Или ИмяКоманды = "Ознакомиться" Тогда
		
		РежимВыполненияКомандыМножественный = Истина;
		
	ИначеЕсли ИмяКоманды = "Ответить"
		Или ИмяКоманды = "НеСогласовать"
		Или ИмяКоманды = "ЧастичноСогласовать" Тогда
		
		РежимВыполненияКомандыМножественный = Ложь;

	КонецЕсли;
	
	Возврат РежимВыполненияКомандыМножественный;
	
КонецФункции

Процедура ОповеститьПользователяОВыполненииКомандыСписка(ИмяКоманды, КоличествоОбработанных, КоличествоВсего)
	
	ТипОперации = ТипОперацииПоИмениКомандыСписка(ИмяКоманды);
	
	Если ПустаяСтрока(ТипОперации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = ПараметрыОповещенияПоТипуОперацииКоманды(ТипОперации,
	                                                               ИмяКоманды,
	                                                               КоличествоОбработанных,
	                                                               КоличествоВсего);
	
	ОбработаноЗадач = ОбработаноЗадачКомандойСписка(КоличествоОбработанных);
	
	Если ОбработаноЗадач > 0 Тогда
		
		Оповестить("Запись_ЗадачаПроцесса");
		
		ТекстСообщения = ТекстСообщенияОповещения(ПараметрыОповещения, ТипОперации, Истина, Ложь);
		ТекстЗаголовка = ТекстСообщенияОповещения(ПараметрыОповещения, ТипОперации, Истина, Истина);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = ТекстСообщенияОповещения(ПараметрыОповещения, ТипОперации, Ложь, Ложь);
		ТекстЗаголовка = ТекстСообщенияОповещения(ПараметрыОповещения, ТипОперации, Ложь, Истина);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстСообщенияОповещения(ПараметрыОповещения, ТипОперации, ЕстьОбработанные, ЭтоЗаголовок)

	ТекстСообщения = "";
	
	Если ЕстьОбработанные Тогда
		
		Если ЭтоЗаголовок Тогда
			
			ШаблонСообщения = ПараметрыОповещения.ТекстЗаголовкаОбработано;
			
			Если ТипОперации = "ПовышениеСтатуса"
				Или ТипОперации = "ОтменаЗадачи" Тогда
				
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыОповещения.Статус);
				
			ИначеЕсли ТипОперации = "НаправлениеНаПроверку"
				Или ТипОперации = "НаправлениеНаСогласование"
				Или ТипОперации = "Согласование"
				Или ТипОперации = "Направление"
				Или ТипОперации = "ИзменениеИсполнителя"
				Или ТипОперации = "Ознакомление" Тогда
				
				ТекстСообщения = ШаблонСообщения;
				
			КонецЕсли;
			
		Иначе
			
			ШаблонСообщения = ПараметрыОповещения.ТекстСообщенияОбработано;
			
			Если ТипОперации = "ПовышениеСтатуса"
				Или ТипОперации = "ОтменаЗадачи" Тогда
				
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
				                           ПараметрыОповещения.КоличествоОбработанных,
				                           ПараметрыОповещения.КоличествоВсего,
				                           ПараметрыОповещения.Статус);
				
			ИначеЕсли ТипОперации = "НаправлениеНаПроверку"
				Или ТипОперации = "НаправлениеНаСогласование"
				Или ТипОперации = "Согласование"
				Или ТипОперации = "Направление"
				Или ТипОперации = "ИзменениеИсполнителя"
				Или ТипОперации = "Ознакомление" Тогда
				
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
				                           ПараметрыОповещения.КоличествоОбработанных,
				                           ПараметрыОповещения.КоличествоВсего);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтоЗаголовок Тогда
			
			ШаблонСообщения = ПараметрыОповещения.ТекстЗаголовкаНеОбработано;
			
			Если ТипОперации = "ПовышениеСтатуса"
				Или ТипОперации = "ОтменаЗадачи" Тогда
				
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыОповещения.Статус);
				
			ИначеЕсли ТипОперации = "НаправлениеНаПроверку"
				Или ТипОперации = "НаправлениеНаСогласование"
				Или ТипОперации = "Согласование"
				Или ТипОперации = "Направление"
				Или ТипОперации = "ИзменениеИсполнителя"
				Или ТипОперации = "Ознакомление" Тогда
				
				ТекстСообщения = ШаблонСообщения;
				
			КонецЕсли;
			
		Иначе
			
			ШаблонСообщения = ПараметрыОповещения.ТекстСообщенияНеОбработано;
			
			Если ТипОперации = "ПовышениеСтатуса"
				Или ТипОперации = "ОтменаЗадачи" Тогда
				
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПараметрыОповещения.Статус);
				
			ИначеЕсли ТипОперации = "НаправлениеНаПроверку"
				Или ТипОперации = "НаправлениеНаСогласование"
				Или ТипОперации = "Согласование"
				Или ТипОперации = "Направление"
				Или ТипОперации = "ИзменениеИсполнителя"
				Или ТипОперации = "Ознакомление" Тогда
				
				ТекстСообщения = ШаблонСообщения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщения;

КонецФункции

Функция ТипОперацииПоИмениКомандыСписка(ИмяКоманды)

	ТипОперации = "";
	Если ИмяКоманды = "ВыполнитьЗадачу"
		Или ИмяКоманды = "Запланировать"
		Или ИмяКоманды = "ПринятьКВыполнению" Тогда
		
		ТипОперации = "ПовышениеСтатуса";
		
	ИначеЕсли ИмяКоманды = "Отменить" Тогда
		
		ТипОперации = "ОтменаЗадачи";
		
	ИначеЕсли ИмяКоманды = "НаправитьНаПроверку" Тогда
		
		ТипОперации = "НаправлениеНаПроверку";
		
	ИначеЕсли ИмяКоманды = "НаправитьНаСогласование" Тогда
		
		ТипОперации = "НаправлениеНаСогласование";
		
	ИначеЕсли ИмяКоманды = "Согласовать" Тогда
		
		ТипОперации = "Согласование";
		
	ИначеЕсли ИмяКоманды = "Перенаправить" Тогда
		
		ТипОперации = "Направление";
		
	ИначеЕсли ИмяКоманды = "ИзменитьИсполнителя" Тогда
		
		ТипОперации = "ИзменениеИсполнителя";
		
	ИначеЕсли ИмяКоманды = "Ознакомиться" Тогда
		
		ТипОперации = "Ознакомление";
		
	КонецЕсли;
	
	Возврат ТипОперации;

КонецФункции

Функция ПараметрыОповещенияПоТипуОперацииКоманды(ТипОперации,
	                                             ИмяКоманды,
	                                             КоличествоОбработанных,
	                                             КоличествоВсего)
	
	ПараметрыОповещения = Новый Структура;
	
	ПараметрыОповещения.Вставить("ТекстСообщенияОбработано",   "");
	ПараметрыОповещения.Вставить("ТекстЗаголовкаОбработано",   "");
	ПараметрыОповещения.Вставить("ТекстСообщенияНеОбработано", "");
	ПараметрыОповещения.Вставить("ТекстЗаголовкаНеОбработано", "");
	ПараметрыОповещения.Вставить("Статус",                     Неопределено);
	
	Если ТипЗнч(КоличествоОбработанных) = Тип("Структура") Тогда
		ПараметрыОповещения.Вставить("КоличествоОбработанных", КоличествоОбработанных.Обработано);
		ПараметрыОповещения.Вставить("КоличествоВсего",        КоличествоОбработанных.Обработано + КоличествоОбработанных.НеОбработано);
	Иначе
		ПараметрыОповещения.Вставить("КоличествоОбработанных",     КоличествоОбработанных);
		ПараметрыОповещения.Вставить("КоличествоВсего",            КоличествоВсего);
	КонецЕсли;
	
	Если ТипОперации = "ПовышениеСтатуса" 
		Или ТипОперации = "ОтменаЗадачи" Тогда
		
		ПараметрыОповещения.ТекстСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке задач установлен статус ""%3""'");
		ПараметрыОповещения.ТекстЗаголовкаОбработано   = НСтр("ru='Статус ""%1"" установлен'");
		ПараметрыОповещения.ТекстСообщенияНеОбработано = НСтр("ru='Статус ""%1"" не установлен ни для одной задачи.'");;
		ПараметрыОповещения.ТекстЗаголовкаНеОбработано = НСтр("ru='Статус ""%1"" не установлен'");
		ПараметрыОповещения.Статус                     = СтатусЗадачиПоИмениКоманды(ИмяКоманды);
		
	ИначеЕсли ТипОперации = "НаправлениеНаПроверку"  Тогда
		
		ПараметрыОповещения.ТекстСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке задач выполнено направление на проверку контролирующему'");
		ПараметрыОповещения.ТекстЗаголовкаОбработано   = НСтр("ru='Направление не проверку выполнено'");
		ПараметрыОповещения.ТекстСообщенияНеОбработано = НСтр("ru='Направление на проверку не выполнено ни для одной задачи.'");;
		ПараметрыОповещения.ТекстЗаголовкаНеОбработано = НСтр("ru='Направление не проверку не выполнено'");
		
	ИначеЕсли ТипОперации = "НаправлениеНаСогласование"  Тогда
		
		ПараметрыОповещения.ТекстСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке задач выполнено направление на согласование ресурсов'");
		ПараметрыОповещения.ТекстЗаголовкаОбработано   = НСтр("ru='Направление не согласование выполнено'");
		ПараметрыОповещения.ТекстСообщенияНеОбработано = НСтр("ru='Направление на согласование не выполнено ни для одной задачи.'");;
		ПараметрыОповещения.ТекстЗаголовкаНеОбработано = НСтр("ru='Направление не согласование не выполнено'");
		
	ИначеЕсли ТипОперации = "Согласование"  Тогда
	
		ПараметрыОповещения.ТекстСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке задач выполнено согласование ресурса'");
		ПараметрыОповещения.ТекстЗаголовкаОбработано   = НСтр("ru='Согласование выполнено'");
		ПараметрыОповещения.ТекстСообщенияНеОбработано = НСтр("ru='Согласование ресурса не выполнено ни для одной задачи.'");;
		ПараметрыОповещения.ТекстЗаголовкаНеОбработано = НСтр("ru='Согласование не выполнено'");
		
	ИначеЕсли ТипОперации = "Направление" Тогда
	
		ПараметрыОповещения.ТекстСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке задач выполнено перенаправление'");
		ПараметрыОповещения.ТекстЗаголовкаОбработано   = НСтр("ru='Перенаправление выполнено'");
		ПараметрыОповещения.ТекстСообщенияНеОбработано = НСтр("ru='Перенаправление не выполнено ни для одной задачи.'");;
		ПараметрыОповещения.ТекстЗаголовкаНеОбработано = НСтр("ru='Перенаправление не выполнено'");
		
	ИначеЕсли ТипОперации = "ИзменениеИсполнителя" Тогда
	
		ПараметрыОповещения.ТекстСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке задач изменен исполнитель'");
		ПараметрыОповещения.ТекстЗаголовкаОбработано   = НСтр("ru='Изменение исполнителя выполнено'");
		ПараметрыОповещения.ТекстСообщенияНеОбработано = НСтр("ru='Изменение исполнителя не выполнено ни для одной задачи.'");;
		ПараметрыОповещения.ТекстЗаголовкаНеОбработано = НСтр("ru='Изменение исполнтиеля не выполнено'");
		
	ИначеЕсли ТипОперации = "Ознакомление" Тогда
	
		ПараметрыОповещения.ТекстСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке задач выполнено ознакомление'");
		ПараметрыОповещения.ТекстЗаголовкаОбработано   = НСтр("ru='Ознакомление выполнено'");
		ПараметрыОповещения.ТекстСообщенияНеОбработано = НСтр("ru='Ознакомление не выполнено ни для одной задачи.'");;
		ПараметрыОповещения.ТекстЗаголовкаНеОбработано = НСтр("ru='Ознакомление не выполнено'");
		
	КонецЕсли;
	
	
	Возврат ПараметрыОповещения;
	
КонецФункции

Функция СтатусЗадачиПоИмениКоманды(ИмяКомнады)

	Статус = Неопределено;
	
	Если ИмяКомнады = "ВыполнитьЗадачу" Тогда
		
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена");
		
	ИначеЕсли ИмяКомнады = "Запланировать" Тогда
		
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована");
		
	ИначеЕсли ИмяКомнады = "ПринятьКВыполнению" Тогда
		
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению");
		
	ИначеЕсли ИмяКомнады = "Отменить" Тогда
		
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Отменена");
		
	КонецЕсли;
	
	Возврат Статус;

КонецФункции

Функция ПараметрыКомандыСписка(Форма) Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("СогласуемыйРесурс", Форма.ВидСогласуемогоРесурсаДляВывода);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти