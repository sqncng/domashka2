
#Область ПрограммныйИнтерфейс

// Функция - Найти или зарегистрировать ошибку
//
// Параметры:
//  ПараметрыОшибки		 - 	Структура - См. ИнтеграцияСВнешнимиСистемами.ИнициироватьПараметрыОшибки()
//  ОбъектыМетаданных	 - 	ТаблицаЗначений - См. ИнтеграцияСВнешнимиСистемами.ИнициироватьПараметрыОшибки()
// 
// Возвращаемое значение:
//   - СправочникСсылка.Ошибки
//
Функция ЗарегистрироватьОшибку(ПараметрыОшибки, ОбъектыМетаданных) Экспорт
	
	Проект = ПодобратьПроект(ПараметрыОшибки.ИмяПроекта);
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		ВызватьИсключение НСтр("ru='Не удалось определить проект ошибки'");
	КонецЕсли;
	
	ДанныеВарианта = ПодобратьДанныеВариантаОбнаружения(ПараметрыОшибки, Проект.Ссылка);
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.МетодВыявленияОшибки) Тогда
		МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок[ПараметрыОшибки.МетодВыявленияОшибки];
	ИначеЕсли ЗначениеЗаполнено(ДанныеВарианта.СценарийПользователя)
		ИЛИ ЗначениеЗаполнено(ДанныеВарианта.Процесс) 
		ИЛИ ЗначениеЗаполнено(ДанныеВарианта.Тест) Тогда
		МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты;
	Иначе
		МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.РаботаСПрограммой;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.СрочностьИсправления) Тогда
		СрочностьИзОшибки = Перечисления.СрочностьИсправленияОшибок[ПараметрыОшибки.СрочностьИсправления];
	Иначе
		СрочностьИзОшибки = Перечисления.СрочностьИсправленияОшибок.ПустаяСсылка();
	КонецЕсли;
		
	СрочностьИсправления = ПодобратьСрочностьИсправления(СрочностьИзОшибки, ДанныеВарианта.СрочностьИсправления);
	
	КомуНаправлена = Неопределено;
	Если ПараметрыОшибки.Свойство("КомуНаправлена") И ЗначениеЗаполнено(ПараметрыОшибки.КомуНаправлена) Тогда
		КомуНаправлена = ПодобратьПользователя(ПараметрыОшибки.КомуНаправлена);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(КомуНаправлена) И ЗначениеЗаполнено(ДанныеВарианта.Ответственный) Тогда
		КомуНаправлена = ДанныеВарианта.Ответственный;
	КонецЕсли;
	
	Ошибка = Справочники.Ошибки.СоздатьЭлемент();
	Если ПараметрыОшибки.Свойство("Идентификатор") Тогда
		Ошибка.УстановитьСсылкуНового(ПараметрыОшибки.Идентификатор);
	КонецЕсли;
	Ошибка.Заполнить(Неопределено);
	
	РазделПроекта = ДанныеВарианта.РазделПроекта;
	
	РазделОтветственныйОбъектовМетаданных = Новый ТаблицаЗначений;
	РазделОтветственныйОбъектовМетаданных.Колонки.Добавить("РазделПроекта");
	РазделОтветственныйОбъектовМетаданных.Колонки.Добавить("КомуНаправлена");

	Если Не ЗначениеЗаполнено(КомуНаправлена) 
	      И ЗначениеЗаполнено(ДанныеВарианта.ОтветственныйТеста) Тогда
		КомуНаправлена = ДанныеВарианта.ОтветственныйТеста;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КомуНаправлена) 
	      И ЗначениеЗаполнено(ДанныеВарианта.ОтветственныйСценария) Тогда
		КомуНаправлена = ДанныеВарианта.ОтветственныйСценария;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КомуНаправлена) 
	      И ЗначениеЗаполнено(ДанныеВарианта.ОтветственныйПроцесса) Тогда
		КомуНаправлена = ДанныеВарианта.ОтветственныйПроцесса;
	КонецЕсли; 

	РазделУказан         = ЗначениеЗаполнено(РазделПроекта);
	КомуНаправленаУказан = ЗначениеЗаполнено(КомуНаправлена);
	
	ДопПараметрыЗаполнитьСписокОбъектов = Новый Структура;
	ДопПараметрыЗаполнитьСписокОбъектов.Вставить("РазделОтветственныйОбъектовМетаданных", РазделОтветственныйОбъектовМетаданных);
	ДопПараметрыЗаполнитьСписокОбъектов.Вставить("РазделУказан", РазделУказан);
	ДопПараметрыЗаполнитьСписокОбъектов.Вставить("КомуНаправленаУказан", КомуНаправленаУказан);
	
	ЗаполнитьСписокОбъектовМетаданныхВОшибке(Ошибка, ОбъектыМетаданных, ДопПараметрыЗаполнитьСписокОбъектов);
	
	Если Не ЗначениеЗаполнено(КомуНаправлена) 
			И ЗначениеЗаполнено(Проект.ОтветственныйЗаМетаданныеПоУмолчанию) Тогда
		
		КомуНаправлена = Проект.ОтветственныйЗаМетаданныеПоУмолчанию;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(КомуНаправлена) 
			И ЗначениеЗаполнено(Проект.Ответственный) Тогда
			
		КомуНаправлена = Проект.Ответственный;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(КомуНаправлена) Тогда 
		КомуНаправлена = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПорядокВоспроизведения              = ПараметрыОшибки.ПорядокВоспроизведения;
	
	Ошибка.Владелец = Проект.Ссылка;
	Ошибка.Наименование                 = ПараметрыОшибки.Наименование;
	Ошибка.ВидПроблемы                  = ПараметрыОшибки.ВидПроблемы;
	Ошибка.МетодВыявленияОшибки         = МетодВыявленияОшибки;
	Ошибка.ДатаОбнаружения              = ДанныеВарианта.ДатаОбнаружения;
	Ошибка.Обнаружена                   = ДанныеВарианта.Обнаружена;
	Ошибка.ВеткаОбнаружения             = ДанныеВарианта.ВеткаОбнаружения;
	Ошибка.СборкаОбнаружения            = ДанныеВарианта.СборкаОбнаружения;
	Ошибка.ВерсияПлатформы              = ПараметрыОшибки.ВерсияПлатформы;
	Ошибка.СценарийПользователя         = ДанныеВарианта.СценарийПользователя;
	Ошибка.Тест                         = ДанныеВарианта.Тест;
	Ошибка.РазделПроекта                = РазделПроекта;
	Ошибка.ПорядокВоспроизведения       = ПорядокВоспроизведения;
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	
	HTMLТекст = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML").ПолучитьТекст();
	ПорядокВоспроизведения = СтрЗаменить(ПорядокВоспроизведения,"<","&lt;");
	ПорядокВоспроизведения = СтрЗаменить(ПорядокВоспроизведения,">","&gt;");
	ПорядокВоспроизведения = СтрЗаменить(ПорядокВоспроизведения,Символы.ПС,"<br>");
	HTMLТекст = СтрЗаменить(HTMLТекст,"<ПроизвольныйТекст>",ПорядокВоспроизведения);
	
	ФорматированныйДокумент.УстановитьHTML(HTMLТекст,Новый Структура);
	
	Ошибка.ХранилищеПорядкаВоспроизведения = Новый ХранилищеЗначения(ФорматированныйДокумент);
	
	СтрокаИсходнойИнформации = СокрЛП(ПараметрыОшибки.ИсходнаяИнформация); 
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.СерверВерсияОС) Тогда
		Если ЗначениеЗаполнено(СтрокаИсходнойИнформации) Тогда
			СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Символы.ПС;
		КонецЕсли;
		Заголовок = НСтр("ru='Версия ОС на сервере: '");
		СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Заголовок + ПараметрыОшибки.СерверВерсияОС;
	КонецЕсли; 
		
	Если ЗначениеЗаполнено(ПараметрыОшибки.СерверПроцессор) Тогда
		Если ЗначениеЗаполнено(СтрокаИсходнойИнформации) Тогда
			СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Символы.ПС;
		КонецЕсли;
		Заголовок = НСтр("ru='Процессор на сервере: '");
		СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Заголовок + ПараметрыОшибки.СерверПроцессор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.СерверОперативнаяПамять) Тогда
		Если ЗначениеЗаполнено(СтрокаИсходнойИнформации) Тогда
			СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Символы.ПС;
		КонецЕсли;
		Заголовок = НСтр("ru='Объем RAM на сервере: '");
		СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Заголовок + ПараметрыОшибки.СерверОперативнаяПамять;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.КлиентВерсияОС) Тогда
		Если ЗначениеЗаполнено(СтрокаИсходнойИнформации) Тогда
			СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Символы.ПС;
		КонецЕсли;
		Заголовок = НСтр("ru='Версия ОС на клиенте: '");
		СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Заголовок + ПараметрыОшибки.КлиентВерсияОС;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.КлиентИнформацияПрограммыПросмотра) Тогда
		Если ЗначениеЗаполнено(СтрокаИсходнойИнформации) Тогда
			СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Символы.ПС;
		КонецЕсли;
		Заголовок = НСтр("ru='Браузер на клиенте: '");
		СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Заголовок + ПараметрыОшибки.КлиентИнформацияПрограммыПросмотра;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.КлиентПроцессор) Тогда
		Если ЗначениеЗаполнено(СтрокаИсходнойИнформации) Тогда
			СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Символы.ПС;
		КонецЕсли;
		Заголовок = НСтр("ru='Процессор на клиенте: '");
		СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Заголовок + ПараметрыОшибки.КлиентПроцессор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.КлиентОперативнаяПамять) Тогда
		Если ЗначениеЗаполнено(СтрокаИсходнойИнформации) Тогда
			СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Символы.ПС;
		КонецЕсли;
		Заголовок = НСтр("ru='Объем RAM на клиенте: '");
		СтрокаИсходнойИнформации = СтрокаИсходнойИнформации + Заголовок + ПараметрыОшибки.КлиентОперативнаяПамять;
	КонецЕсли;
	
	ФорматированнаяСтрокаИсходнойИнформации = Новый ФорматированнаяСтрока(СтрокаИсходнойИнформации);
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьФорматированнуюСтроку(ФорматированнаяСтрокаИсходнойИнформации);
	
	Ошибка.ХранилищеИсходнойИнформацииОбОшибке = Новый ХранилищеЗначения(ФорматированныйДокумент);
	Ошибка.ИсходнаяИнформацияОбОшибке = ФорматированнаяСтрокаИсходнойИнформации;
	
	Ошибка.СрочностьИсправления = СрочностьИсправления;
	Ошибка.Статус               = Перечисления.СтатусыОшибок.Зарегистрирована;
	Ошибка.Зарегистрирована     = Истина;
	Ошибка.КомуНаправлена       = КомуНаправлена;
	Ошибка.Зарегистрировал      = Пользователи.ТекущийПользователь();
	Ошибка.Автор                = Пользователи.ТекущийПользователь();
	
	// Если для пользователя настроено замещение, то в поле Кому направлена подставляется замещающий
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Ошибка.КомуНаправлена, Ошибка.Владелец, "", Ложь);
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("РазделОтветственныйОбъектовМетаданных", РазделОтветственныйОбъектовМетаданных);
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.ДостоверностьОбнаружения) Тогда
		ПараметрыРегистрации.Вставить("ДостоверностьОбнаружения", ПараметрыОшибки.ДостоверностьОбнаружения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.ИдентификаторЗапуска) Тогда
		ПараметрыРегистрации.Вставить("ИдентификаторЗапуска", ПараметрыОшибки.ИдентификаторЗапуска);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.ИдентификаторПроекта) Тогда
		ПараметрыРегистрации.Вставить("ИдентификаторПроекта", ПараметрыОшибки.ИдентификаторПроекта);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.ДатаНаследования) Тогда
		ПараметрыРегистрации.Вставить("ДатаНаследования", ПараметрыОшибки.ДатаНаследования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВарианта.Процесс) Тогда
		ПараметрыРегистрации.Вставить("Процесс", ДанныеВарианта.Процесс);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВарианта.НастройкаЗапускаСценария) Тогда
		ПараметрыРегистрации.Вставить("НастройкаЗапускаСценария", ДанныеВарианта.НастройкаЗапускаСценария);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВарианта.НастройкаЗапускаПроцесса) Тогда
		ПараметрыРегистрации.Вставить("НастройкаЗапускаПроцесса", ДанныеВарианта.НастройкаЗапускаПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.ИнформационнаяБазаДляВоспроизведения) Тогда
		// заполняем из переданного
		Ошибка.ИнформационнаяБазаДляВоспроизведения = ПараметрыОшибки.ИнформационнаяБазаДляВоспроизведения;
	ИначеЕсли ПараметрыОшибки.Свойство("ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе") Тогда
		ПараметрыРегистрации.Вставить("ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе", 
			ПараметрыОшибки.ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.КлиентТипПриложения) Тогда
		СтрокаКлиентТипПриложения = СокрЛП(ПараметрыОшибки.КлиентТипПриложения);
		Если СтрокаКлиентТипПриложения = "ThinClient" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Тонкий;
		ИначеЕсли СтрокаКлиентТипПриложения = "WebClient" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Веб;
		ИначеЕсли СтрокаКлиентТипПриложения = "MobileAppClient" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Мобильный;
		ИначеЕсли СтрокаКлиентТипПриложения = "MobileClient" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Мобильный;
		ИначеЕсли СтрокаКлиентТипПриложения = "ThickClientOrdinaryApplication" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Толстый;
		ИначеЕсли СтрокаКлиентТипПриложения = "ThickClientManagedApplication" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Толстый;
		ИначеЕсли СтрокаКлиентТипПриложения = "ExternalConnection" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Тонкий;
		ИначеЕсли СтрокаКлиентТипПриложения = "Client" Тогда
			Ошибка.Клиент = Перечисления.ВидыКлиентов1СПредприятия.Тонкий;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПараметрыОшибки.КлиентТипПлатформы) Тогда
		Ошибка.КлиентТипПлатформы = ТипПлатформыПоСтроке(ПараметрыОшибки.КлиентТипПлатформы); 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.СерверТипПлатформы) Тогда
		Ошибка.СерверТипПлатформы = ТипПлатформыПоСтроке(ПараметрыОшибки.СерверТипПлатформы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.ТипСУБД) Тогда
		СтрокаТипСУБД = СокрЛП(ПараметрыОшибки.ТипСУБД);
		
		Если СтрокаТипСУБД = "IBMDB2" Тогда
			Ошибка.СУБД = Перечисления.СУБД.IBMDB2;
		ИначеЕсли СтрокаТипСУБД = "MSSQLServer" Тогда
			Ошибка.СУБД = Перечисления.СУБД.MSSQLServer;
		ИначеЕсли СтрокаТипСУБД = "OracleDatabase" Тогда
			Ошибка.СУБД = Перечисления.СУБД.OracleDatabase;
		ИначеЕсли СтрокаТипСУБД = "PostgreSQL" Тогда
			Ошибка.СУБД = Перечисления.СУБД.PostgreSQL;
		КонецЕсли;	
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОшибки.ТипПлатформы) Тогда
		СтрокаТипИБ = СокрЛП(ПараметрыОшибки.ТипПлатформы);
		Если СтрокаТипИБ = "File" Тогда
			Ошибка.СУБД = Перечисления.СУБД.ФайловыйВариант1СПредприятие;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Справочники.Ошибки.ЗарегистрироватьОшибкуСУчетомДублей(Ошибка, ПараметрыРегистрации);
	
КонецФункции

Функция СоздатьКоллекциюОбъектовМетаданных() Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПроблемныйОбъект",           
		Новый ОписаниеТипов("СправочникСсылка.ОбъектыМетаданных,
		                    |СправочникСсылка.Подсистемы,
		                    |СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы"));
	Результат.Колонки.Добавить("ПолноеИмяОбъектаМетаданного", Новый ОписаниеТипов("Строка"));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.МакетыОбъектовМетаданных"));
	Массив.Добавить(Тип("СправочникСсылка.ФормыОбъектовМетаданных"));
	Массив.Добавить(Тип("ПеречислениеСсылка.ТипыМодулейОбъектовМетаданных"));
	Массив.Добавить(Тип("СправочникСсылка.КомандыОбъектовМетаданных"));
	
	Результат.Колонки.Добавить("Ответственный",         Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Результат.Колонки.Добавить("ПодчиненныйОбъект",     Новый ОписаниеТипов(Массив));
	Результат.Колонки.Добавить("РазделПроекта",         Новый ОписаниеТипов("СправочникСсылка.РазделыПроекта"));
	Результат.Колонки.Добавить("Уточнение",             Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Комментарий",           Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("UUIDМетаданного",       Новый ОписаниеТипов("Строка"));

	Возврат Результат;

КонецФункции

Функция ИнициироватьПараметрыОшибки() Экспорт
	
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("ИмяПроекта");
	ПараметрыОшибки.Вставить("ВидПроблемы");
	ПараметрыОшибки.Вставить("Наименование");
	ПараметрыОшибки.Вставить("МетодВыявленияОшибки");
	ПараметрыОшибки.Вставить("ИсходнаяИнформация");
	ПараметрыОшибки.Вставить("ПорядокВоспроизведения");
	ПараметрыОшибки.Вставить("СрочностьИсправления");
	ПараметрыОшибки.Вставить("Сборка");
	ПараметрыОшибки.Вставить("ДатаОбнаружения");
	ПараметрыОшибки.Вставить("ДатаНаследования");
	ПараметрыОшибки.Вставить("ВерсияПроекта");
	ПараметрыОшибки.Вставить("ИмяРазделаПроекта");
	ПараметрыОшибки.Вставить("НомерТехническогоПроекта");
	ПараметрыОшибки.Вставить("ВерсияПлатформы");
	ПараметрыОшибки.Вставить("КомуНаправлена");
	ПараметрыОшибки.Вставить("КодСценария");
	ПараметрыОшибки.Вставить("UIDСценария");
	ПараметрыОшибки.Вставить("КодПроцесса");
	ПараметрыОшибки.Вставить("КодНастройкиСценария");
	ПараметрыОшибки.Вставить("UIDНастройкиСценария");
	ПараметрыОшибки.Вставить("КодНастройкиПроцесса");
	ПараметрыОшибки.Вставить("ИнформационнаяБазаДляВоспроизведения");
	ПараметрыОшибки.Вставить("ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе", Ложь);
	ПараметрыОшибки.Вставить("ДостоверностьОбнаружения");
	ПараметрыОшибки.Вставить("АдресРепозитория");
	ПараметрыОшибки.Вставить("ИмяВетки");
	ПараметрыОшибки.Вставить("ИдентификаторЗапуска");
	ПараметрыОшибки.Вставить("ИдентификаторПроекта");
	ПараметрыОшибки.Вставить("ИмяТеста");
	ПараметрыОшибки.Вставить("ИмяНастройкиСценария");
	
	ПараметрыОшибки.Вставить("КлиентВерсияОС");
	ПараметрыОшибки.Вставить("КлиентОперативнаяПамять");
	ПараметрыОшибки.Вставить("КлиентПроцессор");
	ПараметрыОшибки.Вставить("КлиентИнформацияПрограммыПросмотра");
	ПараметрыОшибки.Вставить("КлиентТипПлатформы");
	ПараметрыОшибки.Вставить("КлиентТипПриложения");
	
	ПараметрыОшибки.Вставить("СерверВерсияОС");
	ПараметрыОшибки.Вставить("СерверОперативнаяПамять");
	ПараметрыОшибки.Вставить("СерверПроцессор");
	ПараметрыОшибки.Вставить("СерверТипПлатформы");
	
	ПараметрыОшибки.Вставить("ТипПлатформы");
	ПараметрыОшибки.Вставить("ТипСУБД");

	
	Возврат ПараметрыОшибки;
	
КонецФункции

Функция ПолучитьТаблицуМетаданных() Экспорт
	
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("ИмяМетаданного");
	ТаблицаМетаданных.Колонки.Добавить("UUIDМетаданного");
	ТаблицаМетаданных.Колонки.Добавить("Уточнение");
	ТаблицаМетаданных.Колонки.Добавить("Комментарий");
	
	Возврат ТаблицаМетаданных;
	
КонецФункции

Процедура ЗагрузитьОшибкиИзФайлов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьИнтеграциюСВнешнимиСистемами = Константы.ИспользоватьИнтеграциюСВнешнимиСистемами.Получить();
	Если Не ИспользоватьИнтеграциюСВнешнимиСистемами Тогда
		Возврат;
	КонецЕсли; 
	
	ДиректорияЗагрузки = Константы.КаталогЗагрузкиОшибок.Получить();
	
	Настройки = Новый ТаблицаЗначений;
	Настройки.Колонки.Добавить("Проект");
	Настройки.Колонки.Добавить("ИмяКонфигурации");
	
	ПараметрыЗагрузки = Константы.ПараметрыЗагрузкиОшибокИзФайлов.Получить().Получить();
	Если ТипЗнч(ПараметрыЗагрузки) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Строка Из ПараметрыЗагрузки Цикл
			НоваяСтрока = Настройки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла; 
	КонецЕсли; 
	
	НайденныеФайлы = НайтиФайлы(ДиректорияЗагрузки, "*.xml", Истина);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов.Обработка файлов'"), 
                 УровеньЖурналаРегистрации.Информация,,, 
                 СтрШаблон(НСтр("ru = 'Найденно файлов %1'"), НайденныеФайлы.Количество()));
	
	Для НомерФайла=0 По НайденныеФайлы.Количество() - 1 Цикл
		
		Попытка
			Файл = НайденныеФайлы[НомерФайла];
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов.Обработка файлов'"), 
                 УровеньЖурналаРегистрации.Информация,,, 
                 СтрШаблон(НСтр("ru = 'Обрабатываю файл %1 %2'"), НомерФайла, Файл.Имя));

			Ответ = ЗарегистрироватьОшибкуПоФайлуXML(Файл, Настройки);
			
			Префикс = ?(Ответ.ЭтоДублирующаяОшибка, НСтр("ru = 'Дубль ошибки.'"), НСтр("ru = 'Загружена ошибка.'"));
			ТекстСообщения = СтрШаблон("%1 %2 %3", Префикс, ПолучитьНавигационнуюСсылку(Ответ.СсылкаНаОшибку), Файл.Имя);
			ЗаписьЛога(Файл.Путь, ТекстСообщения);
			УдалитьФайлОшибки(Файл.ПолноеИмя, Файл.Путь);
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов'"), 
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки);
			
			Префикс = НСтр("ru = 'Не удалось обработать файл. '");
			ТекстСообщения = СтрШаблон("%1 %2
			                           |%3", Префикс, Файл.ПолноеИмя, ПодробноеПредставлениеОшибки);
			ЗаписьЛога(Файл.Путь, ТекстСообщения, "ERR");
			ПеренестиФайлОшибки(Файл, Файл.Путь);
			
		КонецПопытки;
	
	КонецЦикла; 
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов.Обработка файлов'"), 
         УровеньЖурналаРегистрации.Информация,,, НСтр("ru = 'Закончили обработку файлов'"));
	
КонецПроцедуры

// Чтение XML файла и регистрация ошибки
Функция ЗарегистрироватьОшибкуПоФайлуXML(Файл, Настройки) Экспорт 
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Файл.ПолноеИмя);
	
	СтруктураОшибки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Возврат ЗарегистрироватьОшибкуПоДаннымСтруктуры(СтруктураОшибки, Настройки, Файл.ПолноеИмя);
	
КонецФункции

Функция ЗарегистрироватьОшибкуПоДаннымСтруктуры(СтруктураОшибки, Настройки, ИмяФайлаОшибки=Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ДиректорияЗагрузки = Константы.КаталогЗагрузкиОшибок.Получить();
	ДиректорияЗагрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиректорияЗагрузки);
	
	СтрокаНастройки = Настройки.Найти(СтруктураОшибки.ИмяКонфигурации, "ИмяКонфигурации");
	
	Если СтрокаНастройки = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Для конфигурации %1 не настроен импорт ошибок'"), СтруктураОшибки.ИмяКонфигурации);
	КонецЕсли; 
	
	ТаблицаМетаданных = ЗарегистрироватьОшибкуТаблицаМетаданных(СтруктураОшибки.ОбъектыМетаданных);
	
	КомпонентыСборки = СтрРазделить(СтруктураОшибки.ВерсияКонфигурации, ".");
	
	Версия = "";
	ПостфиксПорядкаВоспроизведения = ПостфиксПорядкаВоспроизведения(КомпонентыСборки, Версия, СтруктураОшибки);
	
	ИмяПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаНастройки.Проект, "Наименование");
	ОбъектыМетаданных = ИнтеграцияСВнешнимиСистемами.НайтиОбъектыМетаданных(ТаблицаМетаданных, ИмяПроекта);
	
	ПараметрыОшибки = ЗаполнитьПараметрыОшибки(СтруктураОшибки, ИмяПроекта, ПостфиксПорядкаВоспроизведения, Версия);
	
	ПутьКФайлуОшибки = "";
	Если ЗначениеЗаполнено(ИмяФайлаОшибки) Тогда
		ПутьКФайлуОшибки  = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаОшибки).Путь;
	КонецЕсли;
		
	ИменаФайлов = Новый Массив;
	
	ДанныеОФайлахОшибки = Новый Массив;
	МаксимальныйРазмерФайла = РаботаСФайлами.МаксимальныйРазмерФайла();
	
	ЕстьФайлыБазы = Ложь;

	Для Каждого ИмяФайла Из СтруктураОшибки.ИменаФайлов Цикл
		ПрисоединенныйФайл = Новый Файл(ИмяФайла);          
		Если НЕ ПрисоединенныйФайл.Существует() Тогда
			ОтносительныйФайл = Новый Файл(ПутьКФайлуОшибки + ИмяФайла);
			Если ОтносительныйФайл.Существует() Тогда
				ПрисоединенныйФайл = ОтносительныйФайл;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОФайле = Новый Структура;
		ДанныеОФайлахОшибки.Добавить(ДанныеОФайле);

		ДанныеОФайле.Вставить("Имя", ПрисоединенныйФайл.ПолноеИмя);
		
		Размер = 0;
		Попытка
			Если ПрисоединенныйФайл.Существует() Тогда
				Размер = ПрисоединенныйФайл.Размер();	
			КонецЕсли;
		Исключение 
			Размер = 0;
		КонецПопытки;             
		ИмяФайлаНРег = НРег(ПрисоединенныйФайл.ПолноеИмя);
		ЭтоФайлБазы = Размер > МаксимальныйРазмерФайла
					ИЛИ СтрЗаканчиваетсяНа(ИмяФайлаНРег, ".1cd") 
					ИЛИ СтрЗаканчиваетсяНа(ИмяФайлаНРег, ".dt") 
					ИЛИ СтрЗаканчиваетсяНа(ИмяФайлаНРег, ".cf");
		ДанныеОФайле.Вставить("ЭтоФайлБазы", ЭтоФайлБазы);
		Если ЭтоФайлБазы Тогда
			ЕстьФайлыБазы = Истина;
		КонецЕсли;
	КонецЦикла;		

	ПараметрыОшибки.ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе = ЕстьФайлыБазы;
	
	Ответ = ИнтеграцияСВнешнимиСистемами.ЗарегистрироватьОшибку(ПараметрыОшибки, ОбъектыМетаданных);
	
	ОшибкаСсылка = Ответ.СсылкаНаОшибку;
	ФайлыНеУдалосьПриложить = Новый Массив;
	Если Не Ответ.ЭтоДублирующаяОшибка Тогда
		
		ПутьДоБазы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаСсылка, "ИнформационнаяБазаДляВоспроизведения");
		Попытка
			Если ЗначениеЗаполнено(ПутьДоБазы) Тогда
				ПутьДоБазы = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьДоБазы);
				СоздатьКаталог(ПутьДоБазы);
			КонецЕсли; 
		Исключение
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = ТекстСообщения + Символы.ПС + ПутьДоБазы;
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов.СозданиеКаталога'"), 
					                         УровеньЖурналаРегистрации.Ошибка,,ОшибкаСсылка, ТекстСообщения);
			ВызватьИсключение ТекстСообщения
		КонецПопытки;
		
		Попытка
			Если ЗначениеЗаполнено(ПутьДоБазы) Тогда
				УдалитьФайлы(ПутьДоБазы, "*");
			КонецЕсли;
			ПрисоединенныеФайлы = Новый Массив;
			РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(ОшибкаСсылка, ПрисоединенныеФайлы);
			Для Каждого ПрисоединенныйФайл Из ПрисоединенныеФайлы Цикл
				Если ПрисоединенныйФайл.Автор = Пользователи.ТекущийПользователь() Тогда
					ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
					ФайлОбъект.Заблокировать();
					ФайлОбъект.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
			КонецЦикла;	
		Исключение
					
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов.Очистка файлов'"), 
					                         УровеньЖурналаРегистрации.Ошибка,,ОшибкаСсылка, ПодробноеПредставлениеОшибки);
					
		КонецПопытки;
		
		Для Каждого ДанныеОФайле Из ДанныеОФайлахОшибки Цикл
			
			ДанныеФайла  = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ДанныеОФайле.Имя);
			ИмяФайла = ДанныеФайла.ПолноеИмя;
			ИмяФайлаНРег = НРег(ИмяФайла);
			ЭтоФайлБазы  = ДанныеОФайле.ЭтоФайлБазы;
			ФайлВДиректорииОшибок = СтрНачинаетсяС(ИмяФайлаНРег, НРег(ДиректорияЗагрузки));
			
			Попытка

				Если ЗначениеЗаполнено(ПутьДоБазы) И ЭтоФайлБазы И ФайлВДиректорииОшибок Тогда
					ПереместитьФайл(ИмяФайла, ПутьДоБазы + ДанныеФайла.Имя);
				ИначеЕсли ЗначениеЗаполнено(ПутьДоБазы) И ЭтоФайлБазы И Не ФайлВДиректорииОшибок Тогда
					КопироватьФайл(ИмяФайла, ПутьДоБазы + ДанныеФайла.Имя);
				Иначе
					
					ФайлСсылка = РаботаСФайлами.ДобавитьФайлСДиска(ОшибкаСсылка, ИмяФайла);
					
					Если ФайлВДиректорииОшибок Тогда
						УдалитьФайлы(ИмяФайла);
					КонецЕсли; 
					
				КонецЕсли;
			Исключение
				Файл = Новый Файл(ИмяФайла);
				Если Файл.Существует() Тогда 
					ФайлыНеУдалосьПриложить.Добавить(ИмяФайла);
				КонецЕсли;
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов.Обработка файлов'"), 
				                         УровеньЖурналаРегистрации.Ошибка,,ОшибкаСсылка,
				                         ПодробноеПредставлениеОшибки);
				
			КонецПопытки;
			
		КонецЦикла; 
		
	Иначе
		
		// Удаляем файлы в директории с ошибками, если ошибка - дубль
		Для Каждого ДанныеОФайле Из ДанныеОФайлахОшибки Цикл
			ИмяФайла = ДанныеОФайле.Имя; 	
			ИмяФайлаНРег = НРег(ИмяФайла);
			ФайлВДиректорииОшибок = СтрНачинаетсяС(ИмяФайлаНРег, НРег(ДиректорияЗагрузки));
			
			Если ФайлВДиректорииОшибок Тогда
				УдалитьФайлы(ИмяФайла);
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ФайлыНеУдалосьПриложить.Количество() > 0 Тогда

		ФайлыТекстом = СтрСоединить(ФайлыНеУдалосьПриложить, Символы.ПС);
		Сообщение = НСтр("ru='Не удалось приложить следующие файлы к ошибке:'") + Символы.ПС + ФайлыТекстом;
		
		ОшибкаОбъект = ОшибкаСсылка.ПолучитьОбъект();
		ОшибкаОбъект.ДобавитьЗаписьВПротокол(Пользователи.ТекущийПользователь(), Сообщение);
		ОшибкаОбъект.Записать();

	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ТолькоДублиПоДаннымXML(СтрокаXML, ДанныеДублей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	СтруктураОшибки = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	ПараметрыЗагрузкиОшибокПроектов = Константы.ПараметрыЗагрузкиОшибокИзФайлов.Получить().Получить();
	
	СтрокаПараметрыЗагрузкиОшибокПроектов = ПараметрыЗагрузкиОшибокПроектов.Найти(СтруктураОшибки.ИмяКонфигурации, "ИмяКонфигурации");
	Если СтрокаПараметрыЗагрузкиОшибокПроектов = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Не найден проект по имени конфигурации <%1>'"), СтруктураОшибки.ИмяКонфигурации);
	КонецЕсли;
	
	Проект = СтрокаПараметрыЗагрузкиОшибокПроектов.Проект;
	
	Версия = "";
	КомпонентыСборки = СтрРазделить(СтруктураОшибки.ВерсияКонфигурации, ".");
	ПостфиксПорядкаВоспроизведения = ПостфиксПорядкаВоспроизведения(КомпонентыСборки, Версия, СтруктураОшибки);
	
	ИмяПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование");
	ТаблицаМетаданных = ЗарегистрироватьОшибкуТаблицаМетаданных(СтруктураОшибки.ОбъектыМетаданных);
	ОбъектыМетаданных = ИнтеграцияСВнешнимиСистемами.НайтиОбъектыМетаданных(ТаблицаМетаданных, ИмяПроекта);
	
	ПараметрыОшибки = ЗаполнитьПараметрыОшибки(СтруктураОшибки, ИмяПроекта, ПостфиксПорядкаВоспроизведения, Версия);
	
	ДанныеВарианта = ПодобратьДанныеВариантаОбнаружения(ПараметрыОшибки, Проект);
	
	ДопПараметрыЗаполнитьСписокОбъектов = Новый Структура;
	ДопПараметрыЗаполнитьСписокОбъектов.Вставить("РазделОтветственныйОбъектовМетаданных", Неопределено);
	
	ОшибкаОбъект = Справочники.Ошибки.СоздатьЭлемент();
	ОшибкаОбъект.Владелец = Проект;
	Если ЗначениеЗаполнено(СтруктураОшибки.ИсходнаяИнформация) Тогда
		ОшибкаОбъект.ИсходнаяИнформацияОбОшибке = СтруктураОшибки.ИсходнаяИнформация;
	КонецЕсли;	
	ЗаполнитьСписокОбъектовМетаданныхВОшибке(ОшибкаОбъект, ОбъектыМетаданных, ДопПараметрыЗаполнитьСписокОбъектов);
	
	ТаблицаРегистрации = Справочники.Ошибки.СоздатьТаблицуОписанийОшибок();
	Справочники.Ошибки.ЗаполнитьТаблицуРегистрации(ОшибкаОбъект, ТаблицаРегистрации);
	
	ЗаполнитьЗначенияСвойств(ОшибкаОбъект, ДанныеВарианта);
	
	МестоВозникновения = Справочники.Ошибки.МестоВозникновенияДляРегистрацииОшибки(ОшибкаОбъект);
	
	ПараметрыОшибки.Вставить("НадоРегистрироватьОшибки", Ложь);
	Справочники.Ошибки.ЗарегистрироватьСУчетомДублей(ТаблицаРегистрации, МестоВозникновения, ПараметрыОшибки);
	
	ДанныеДублей = Новый Массив;
	ВсеОшибкиЭтоДубли = Истина;
	Для Каждого СтрокаТаблицаРегистрации Из ТаблицаРегистрации Цикл
		Если СтрокаТаблицаРегистрации.ЭтоДублирующаяОшибка Тогда
			ДанныеОшибки = Новый Структура;         
			
			ДанныеОшибки.Вставить("КодОшибки", СтрокаТаблицаРегистрации.КодОшибки);
			ДанныеОшибки.Вставить("Уточнение", СтрокаТаблицаРегистрации.Уточнение);
			ДанныеОшибки.Вставить("ХешУточнения", СтрокаТаблицаРегистрации.ХешУточнения);
			ДанныеОшибки.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(СтрокаТаблицаРегистрации.СсылкаНаОшибку));
			Если ЗначениеЗаполнено(СтрокаТаблицаРегистрации.ПроблемныйОбъект) Тогда
				Попытка
					ДанныеОшибки.Вставить("ПроблемныйОбъект", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицаРегистрации.ПроблемныйОбъект,"Наименование"));
				Исключение
					ДанныеОшибки.Вставить("ПроблемныйОбъект", Строка(СтрокаТаблицаРегистрации.ПроблемныйОбъект));
				КонецПопытки;
			Иначе	
				ДанныеОшибки.Вставить("ПроблемныйОбъект", "");
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(СтрокаТаблицаРегистрации.ПодчиненныйОбъект) Тогда
				Попытка
					ДанныеОшибки.Вставить("ПодчиненныйОбъект", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицаРегистрации.ПодчиненныйОбъект,"Наименование"));
				Исключение
					ДанныеОшибки.Вставить("ПодчиненныйОбъект", Строка(СтрокаТаблицаРегистрации.ПодчиненныйОбъект));
				КонецПопытки;
			Иначе	
				ДанныеОшибки.Вставить("ПодчиненныйОбъект", "");
			КонецЕсли;	
			
			ДанныеДублей.Добавить(ДанныеОшибки);
			
			ПараметрыРегистрации = Новый Структура;
			ИдентификаторЗапуска = "";
			СтруктураОшибки.Свойство("ИдентификаторЗапуска", ИдентификаторЗапуска);
			ПараметрыРегистрации.Вставить("ИдентификаторЗапуска", ИдентификаторЗапуска);
			
			ИдентификаторПроекта = "";
			СтруктураОшибки.Свойство("ИдентификаторПроекта", ИдентификаторПроекта);
			ПараметрыРегистрации.Вставить("ИдентификаторПроекта", ИдентификаторПроекта);
			
			Справочники.Ошибки.ЗаписатьОшибкуВРегистрРезультатыРегистрацииОшибок(
				ОшибкаОбъект, СтрокаТаблицаРегистрации.СсылкаНаОшибку, Истина, ПараметрыРегистрации);
			
		Иначе	
			ВсеОшибкиЭтоДубли = Ложь;
		КонецЕсли;	
			
	КонецЦикла;	
	
	Возврат ВсеОшибкиЭтоДубли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодобратьПользователя(Имя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование", Имя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.Пользователи.ПустаяСсылка();
	
КонецФункции

Функция ПодобратьПроект(Имя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Имя", Имя);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Проекты.Ссылка,
	               |	Проекты.Ответственный,
	               |	Проекты.ОтветственныйЗаМетаданныеПоУмолчанию
	               |ИЗ
	               |	Справочник.Проекты КАК Проекты
	               |ГДЕ
	               |	НЕ Проекты.ПометкаУдаления
	               |	И Проекты.Наименование = &Имя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Ответ = Новый Структура;
		Ответ.Вставить("Ссылка",                               Выборка.Ссылка);
		Ответ.Вставить("Ответственный",                        Выборка.Ответственный);
		Ответ.Вставить("ОтветственныйЗаМетаданныеПоУмолчанию", Выборка.ОтветственныйЗаМетаданныеПоУмолчанию);
		
		Возврат Ответ;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПодобратьСборкуВерсии(ПроектИлиВерсияПроекта, НомерСборки)
	
	СборкаПроекта = Справочники.ВерсииПроекта.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерСборки", НомерСборки);
	
	Если ТипЗнч(ПроектИлиВерсияПроекта) = Тип("СправочникСсылка.ВерсииПроекта") Тогда
		
		Запрос.УстановитьПараметр("ВерсияПроекта", ПроектИлиВерсияПроекта);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                 |	СборкиВерсии.Ссылка
	                 |ИЗ
	                 |	Справочник.СборкиВерсии КАК СборкиВерсии
	                 |ГДЕ
	                 |	СборкиВерсии.Владелец = &ВерсияПроекта
	                 |	И СборкиВерсии.Код = &НомерСборки";
	
	Иначе // Тип("СправочникСсылка.Проекты")
	
		Запрос.УстановитьПараметр("Проект", ПроектИлиВерсияПроекта);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СборкиВерсии.Ссылка
		               |ИЗ
		               |	Справочник.СборкиВерсии КАК СборкиВерсии
		               |ГДЕ
		               |	СборкиВерсии.Код = &НомерСборки
		               |	И СборкиВерсии.Владелец.Владелец = &Проект";
	
	КонецЕсли; 

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СборкаПроекта = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СборкаПроекта;
	
КонецФункции

Функция ПодобратьДанныеВерсииПроекта(Проект, ПолныйНомерВерсии)
	
	Ответ = Новый Структура;
	Ответ.Вставить("ВерсияПроекта", Справочники.ВерсииПроекта.ПустаяСсылка());
	Ответ.Вставить("ВеткаОбнаружения", Справочники.Ветки.ПустаяСсылка());
	
	ЧастиНомера = СтрРазделить(ПолныйНомерВерсии, ".");   
	НомерРедакции = 0;
	НомерПодредакции = 0;
	НомерВерсии = 0;

	Если ЧастиНомера.Количество() >= 3 Тогда
		НомерРедакции = ЧастиНомера[0];  
		НомерПодредакции = ЧастиНомера[1];
		НомерВерсии = ЧастиНомера[2];
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект",      Проект);
	Запрос.УстановитьПараметр("ПолныйНомерВерсии", ПолныйНомерВерсии);  
	Запрос.УстановитьПараметр("НомерРедакции", НомерРедакции);
	Запрос.УстановитьПараметр("НомерПодредакции", НомерПодредакции);
	Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВерсииПроекта.Ссылка КАК Ссылка,
	               |	ВерсииПроекта.Ветка КАК Ветка
	               |ИЗ
	               |	Справочник.ВерсииПроекта КАК ВерсииПроекта
	               |ГДЕ
	               |	ВерсииПроекта.Владелец = &Проект
	               |	И (ВерсииПроекта.Код = &ПолныйНомерВерсии
	               |			ИЛИ ВерсииПроекта.ПубликуемыйНомерВерсии = &ПолныйНомерВерсии
	               |			ИЛИ ВерсииПроекта.НомерРедакции = &НомерРедакции
	               |				И ВерсииПроекта.НомерПодредакции = &НомерПодредакции
	               |				И ВерсииПроекта.НомерВерсии = &НомерВерсии)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ.ВерсияПроекта    = Выборка.Ссылка;
		Ответ.ВеткаОбнаружения = Выборка.Ветка;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьОсновнуюВеткуПроекта(Проект)
	
	ВеткаОбнаружения = Справочники.ВерсииПроекта.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Проекты.Ветка КАК Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка = &Проект";
	
	ВыборкаОсновнойВеткиПроекта = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОсновнойВеткиПроекта.Следующий() Тогда
		ВеткаОбнаружения = ВыборкаОсновнойВеткиПроекта.Ссылка;
	КонецЕсли; 
	
	Возврат ВеткаОбнаружения;
	
КонецФункции

Функция ПодобратьРазделПроекта(Проект, ИмяРазделаПроекта)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект",            Проект);
	Запрос.УстановитьПараметр("ИмяРазделаПроекта", ИмяРазделаПроекта);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РазделыПроекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РазделыПроекта КАК РазделыПроекта
	|ГДЕ
	|	РазделыПроекта.Владелец = &Проект
	|	И РазделыПроекта.Наименование = &ИмяРазделаПроекта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Справочники.РазделыПроекта.ПустаяСсылка());
	
КонецФункции

Функция ПодобратьДанныеТехническогоПроекта(Проект, НомерТехническогоПроекта)
	
	Ответ = Новый Структура;
	Ответ.Вставить("ВеткаОбнаружения", Справочники.Ветки.ПустаяСсылка());
	Ответ.Вставить("Ответственный",    Справочники.Пользователи.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект",                   Проект);
	Запрос.УстановитьПараметр("НомерТехническогоПроекта", НомерТехническогоПроекта);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТехническиеПроекты.Ветка КАК Ветка,
	|	ТехническиеПроекты.Ответственный КАК Ответственный
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Владелец = &Проект
	|	И ТехническиеПроекты.Код = &НомерТехническогоПроекта";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ.Ветка         = Выборка.Ветка;
		Ответ.Ответственный = Выборка.Ответственный;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьДанныеСценарияРаботыПользователя(КодСценария)
	
	КодСценарияСтрока = СокрЛП(КодСценария);
	НужнаяДлинаКода = Метаданные.Справочники.СценарииРаботыПользователей.ДлинаКода;
	
	Если СтрДлина(КодСценарияСтрока) < НужнаяДлинаКода Тогда
		КодСценарияСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодСценарияСтрока, НужнаяДлинаКода, "0", "Слева");
	КонецЕсли;
	
	Ответ = Новый Структура;
	Ответ.Вставить("СценарийПользователя",  Справочники.СценарииРаботыПользователей.ПустаяСсылка());
	Ответ.Вставить("РазделПроекта",         Справочники.РазделыПроекта.ПустаяСсылка());
	Ответ.Вставить("ОтветственныйСценария", Справочники.Пользователи.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодСценария", КодСценарияСтрока);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СценарииРаботыПользователей.Ссылка КАК Ссылка,
	|	СценарииРаботыПользователей.Ответственный КАК Ответственный,
	|	СценарииРаботыПользователей.РазделПроекта КАК РазделПроекта,
	|	СценарииРаботыПользователей.РазделПроекта.Ответственный КАК ОтветственныйРаздела
	|ИЗ
	|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
	|ГДЕ
	|	СценарииРаботыПользователей.Код = &КодСценария";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ.СценарийПользователя  = Выборка.Ссылка;
		Ответ.РазделПроекта         = Выборка.РазделПроекта;
		Ответ.ОтветственныйСценария = ?(ЗначениеЗаполнено(Выборка.Ответственный), 
		                                Выборка.Ответственный, Выборка.ОтветственныйРаздела);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьДанныеПроцесса(КодПроцесса)
	
	КодПроцессаСтрока = СокрЛП(КодПроцесса);
	НужнаяДлинаКода = Метаданные.Справочники.Процессы.ДлинаКода;
	
	Если СтрДлина(КодПроцессаСтрока) < НужнаяДлинаКода Тогда
		КодПроцессаСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодПроцессаСтрока, НужнаяДлинаКода, "0", "Слева");
	КонецЕсли;
	
	Ответ = Новый Структура;
	Ответ.Вставить("Процесс",               Справочники.Процессы.ПустаяСсылка());
	Ответ.Вставить("РазделПроекта",         Справочники.РазделыПроекта.ПустаяСсылка());
	Ответ.Вставить("ОтветственныйПроцесса", Справочники.Пользователи.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодПроцесса", КодПроцессаСтрока);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Процессы.Ссылка КАК Ссылка,
	|	Процессы.Ответственный КАК Ответственный,
	|	Процессы.РазделПроекта КАК РазделПроекта,
	|	Процессы.РазделПроекта.Ответственный КАК ОтветственныйРаздела
	|ИЗ
	|	Справочник.Процессы КАК Процессы
	|ГДЕ
	|	Процессы.ПолныйКод = &КодПроцесса";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ.Процесс       = Выборка.Ссылка;
		Ответ.РазделПроекта = Выборка.РазделПроекта;
		Ответ.ОтветственныйПроцесса = ?(ЗначениеЗаполнено(Выборка.Ответственный),
		                               Выборка.Ответственный, Выборка.ОтветственныйРаздела);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьДанныеНастройкиЗапускаСценария(КодНастройкиСценария)
	
	КодНастройкиСценарияСтрока = СокрЛП(КодНастройкиСценария);
	НужнаяДлинаКода = Метаданные.Справочники.НастройкиЗапускаСценариев.ДлинаКода;
	
	Если СтрДлина(КодНастройкиСценарияСтрока) < НужнаяДлинаКода Тогда
		КодНастройкиСценарияСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодНастройкиСценарияСтрока, НужнаяДлинаКода, "0", "Слева");
	КонецЕсли;
	
	Ответ = Новый Структура;
	Ответ.Вставить("НастройкаЗапускаСценария", Справочники.НастройкиЗапускаСценариев.ПустаяСсылка());
	Ответ.Вставить("СценарийПользователя",     Справочники.СценарииРаботыПользователей.ПустаяСсылка());
	Ответ.Вставить("ОтветственныйСценария",    Справочники.Пользователи.ПустаяСсылка());
	Ответ.Вставить("РазделПроекта",            Справочники.РазделыПроекта.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодНастройкиСценария", КодНастройкиСценарияСтрока);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЗапускаСценариев.Ссылка КАК Ссылка,
	|	НастройкиЗапускаСценариев.Сценарий.Ссылка КАК Сценарий,
	|	НастройкиЗапускаСценариев.Сценарий.Ответственный КАК Ответственный,
	|	НастройкиЗапускаСценариев.Сценарий.РазделПроекта КАК РазделПроекта,
	|	НастройкиЗапускаСценариев.Сценарий.РазделПроекта.Ответственный КАК ОтветственныйРаздела
	|ИЗ
	|	Справочник.НастройкиЗапускаСценариев КАК НастройкиЗапускаСценариев
	|ГДЕ
	|	НастройкиЗапускаСценариев.Код = &КодНастройкиСценария";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ.НастройкаЗапускаСценария  = Выборка.Ссылка;
		Ответ.СценарийПользователя  = Выборка.Сценарий;
		Ответ.РазделПроекта         = Выборка.РазделПроекта;
		Ответ.ОтветственныйСценария = ?(ЗначениеЗаполнено(Выборка.Ответственный), 
		                                Выборка.Ответственный, Выборка.ОтветственныйРаздела);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьДанныеНастройкиЗапускаПроцесса(КодНастройкиПроцесса)
	
	КодНастройкиПроцессаСтрока = СокрЛП(КодНастройкиПроцесса);
	НужнаяДлинаКода = Метаданные.Справочники.НастройкиЗапускаПроцессов.ДлинаКода;
	
	Если СтрДлина(КодНастройкиПроцессаСтрока) < НужнаяДлинаКода Тогда
		КодНастройкиПроцессаСтрока = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодНастройкиПроцессаСтрока, НужнаяДлинаКода, "0", "Слева");
	КонецЕсли;
	
	Ответ = Новый Структура;
	Ответ.Вставить("НастройкаЗапускаПроцесса", Справочники.НастройкиЗапускаПроцессов.ПустаяСсылка());
	Ответ.Вставить("Процесс",                  Справочники.Процессы.ПустаяСсылка());
	Ответ.Вставить("ОтветственныйПроцесса",    Справочники.Пользователи.ПустаяСсылка());
	Ответ.Вставить("РазделПроекта",            Справочники.РазделыПроекта.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодНастройкиПроцесса", КодНастройкиПроцессаСтрока);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиЗапускаПроцессов.Ссылка КАК Ссылка,
	|	НастройкиЗапускаПроцессов.Владелец.Ссылка КАК Процесс,
	|	НастройкиЗапускаПроцессов.Владелец.Ответственный КАК Ответственный,
	|	НастройкиЗапускаПроцессов.Владелец.РазделПроекта КАК РазделПроекта,
	|	НастройкиЗапускаПроцессов.Владелец.РазделПроекта.Ответственный КАК ОтветственныйРаздела
	|ИЗ
	|	Справочник.НастройкиЗапускаПроцессов КАК НастройкиЗапускаПроцессов
	|ГДЕ
	|	НастройкиЗапускаПроцессов.Код = &КодНастройкиПроцесса";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответ.НастройкаЗапускаПроцесса  = Выборка.Ссылка;
		Ответ.Процесс               = Выборка.Процесс;
		Ответ.РазделПроекта         = Выборка.РазделПроекта;
		Ответ.ОтветственныйПроцесса = ?(ЗначениеЗаполнено(Выборка.Ответственный), 
		                                Выборка.Ответственный, Выборка.ОтветственныйРаздела);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьДанныеВариантаОбнаружения(ПараметрыОшибки, Проект)
	
	Ответ = Новый Структура("Обнаружена, СценарийПользователя, ОтветственныйСценария, НастройкаЗапускаСценария, 
	                        |Процесс, ОтветственныйПроцесса, НастройкаЗапускаПроцесса, Ответственный, РазделПроекта, ВерсияПроекта, СборкаОбнаружения, 
	                        |ДатаОбнаружения, ДатаНаследования, ВеткаОбнаружения, Тест, ОтветственныйТеста, СрочностьИсправления");
	
	Если ПараметрыОшибки.Свойство("НомерТехническогоПроекта") И ЗначениеЗаполнено(ПараметрыОшибки.НомерТехническогоПроекта) Тогда
		
		ДанныеТехническогоПроекта = ПодобратьДанныеТехническогоПроекта(Проект, ПараметрыОшибки.НомерТехническогоПроекта);
		Ответ.ВеткаОбнаружения    = ДанныеТехническогоПроекта.ВеткаОбнаружения;
		Ответ.Ответственный       = ДанныеТехническогоПроекта.Ответственный;
		
		Если Не ЗначениеЗаполнено(Ответ.ВеткаОбнаружения) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось определить технический проект по номеру %1'"),
			                            ПараметрыОшибки.НомерТехническогоПроекта);
		КонецЕсли; 
		
	КонецЕсли;
	
	// Подбор технического проекта по адресу репозитория
	Если ПараметрыОшибки.Свойство("АдресРепозитория") И ЗначениеЗаполнено(ПараметрыОшибки.АдресРепозитория) Тогда
		ДанныеВетки = ПодобратьДанныеВетки(Проект, ПараметрыОшибки.АдресРепозитория);
		
		Ответ.ВеткаОбнаружения  = ДанныеВетки.ВеткаОбнаружения;
		Ответ.Ответственный = ДанныеВетки.Ответственный;
		Ответ.СрочностьИсправления = ДанныеВетки.СрочностьИсправления;
		
		Если Не ЗначениеЗаполнено(Ответ.ВеткаОбнаружения) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось определить ветку по адресу хранилища %1'"),
			                            ПараметрыОшибки.АдресРепозитория);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("КодСценария") И ЗначениеЗаполнено(ПараметрыОшибки.КодСценария) Тогда
		
		ДанныеСценарияРаботыПользователей = ПодобратьДанныеСценарияРаботыПользователя(ПараметрыОшибки.КодСценария);
		Ответ.СценарийПользователя  = ДанныеСценарияРаботыПользователей.СценарийПользователя;
		Ответ.ОтветственныйСценария = ДанныеСценарияРаботыПользователей.ОтветственныйСценария;
		Ответ.РазделПроекта         = ДанныеСценарияРаботыПользователей.РазделПроекта;
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("КодПроцесса") И ЗначениеЗаполнено(ПараметрыОшибки.КодПроцесса) Тогда
		
		ДанныеПроцесса = ПодобратьДанныеПроцесса(ПараметрыОшибки.КодПроцесса);
		Ответ.Процесс  = ДанныеПроцесса.Процесс;
		Ответ.ОтветственныйПроцесса = ДанныеПроцесса.ОтветственныйПроцесса;
		Ответ.РазделПроекта = ?(ЗначениеЗаполнено(Ответ.РазделПроекта),
		                        Ответ.РазделПроекта, ДанныеПроцесса.РазделПроекта);
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("КодНастройкиСценария") И ЗначениеЗаполнено(ПараметрыОшибки.КодНастройкиСценария) Тогда
		
		ДанныеНастройкиЗапускаСценария = ПодобратьДанныеНастройкиЗапускаСценария(ПараметрыОшибки.КодНастройкиСценария);
		Ответ.НастройкаЗапускаСценария = ДанныеНастройкиЗапускаСценария.НастройкаЗапускаСценария;
		Ответ.СценарийПользователя = ?(ЗначениеЗаполнено(Ответ.СценарийПользователя),
		                              Ответ.СценарийПользователя, ДанныеНастройкиЗапускаСценария.СценарийПользователя);
		Ответ.ОтветственныйСценария = ?(ЗначениеЗаполнено(Ответ.ОтветственныйСценария),
		                              Ответ.ОтветственныйСценария, ДанныеНастройкиЗапускаСценария.ОтветственныйСценария);
		Ответ.РазделПроекта = ?(ЗначениеЗаполнено(Ответ.РазделПроекта),
		                        Ответ.РазделПроекта, ДанныеНастройкиЗапускаСценария.РазделПроекта);
		
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("КодНастройкиПроцесса") И ЗначениеЗаполнено(ПараметрыОшибки.КодНастройкиПроцесса) Тогда
		
		ДанныеНастройкиЗапускаПроцесса = ПодобратьДанныеНастройкиЗапускаПроцесса(ПараметрыОшибки.КодНастройкиПроцесса);
		Ответ.НастройкаЗапускаПроцесса = ДанныеНастройкиЗапускаПроцесса.НастройкаЗапускаПроцесса;
		Ответ.Процесс = ?(ЗначениеЗаполнено(Ответ.Процесс),
		                                    Ответ.Процесс, ДанныеНастройкиЗапускаПроцесса.Процесс);
		Ответ.ОтветственныйПроцесса = ?(ЗначениеЗаполнено(Ответ.ОтветственныйПроцесса),
		                               Ответ.ОтветственныйПроцесса, ДанныеНастройкиЗапускаПроцесса.ОтветственныйПроцесса);
		Ответ.РазделПроекта = ?(ЗначениеЗаполнено(Ответ.РазделПроекта),
		                        Ответ.РазделПроекта, ДанныеНастройкиЗапускаПроцесса.РазделПроекта);
		
	КонецЕсли;

	Если ПараметрыОшибки.Свойство("UIDНастройкиСценария") И ЗначениеЗаполнено(ПараметрыОшибки.UIDНастройкиСценария) Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("UIDНастройкиСценария", ПараметрыОшибки.UIDНастройкиСценария);
		Ответ.Тест =  ТестированиеЗагрузкаРезультатовТестирования.ТестПоUIDНастройкиСценария(Параметры,
						ПараметрыОшибки.ИмяНастройкиСценария,
						Проект).Ссылка;
	ИначеЕсли (ПараметрыОшибки.Свойство("ИмяТеста") И ЗначениеЗаполнено(ПараметрыОшибки.ИмяТеста))
				ИЛИ (ПараметрыОшибки.Свойство("ВидПроблемы") И ЗначениеЗаполнено(ПараметрыОшибки.ВидПроблемы)) Тогда 
		Ответ.Тест = ТестированиеЗагрузкаРезультатовТестирования.ТестСППРПоСтроке(ПараметрыОшибки.ИмяТеста, 
						Проект, ПараметрыОшибки.ВидПроблемы).Ссылка;
	ИначеЕсли ЗначениеЗаполнено(Ответ.НастройкаЗапускаПроцесса) Тогда
		Ответ.Тест =  ТестированиеЗагрузкаРезультатовТестирования.ТестПоНастройкеПроцесса(Ответ.НастройкаЗапускаПроцесса, 
						Проект).Ссылка;
	ИначеЕсли ЗначениеЗаполнено(Ответ.НастройкаЗапускаСценария) Тогда
		Ответ.Тест = ТестированиеЗагрузкаРезультатовТестирования.ТестПоНастройкеСценария(Ответ.НастройкаЗапускаСценария, 
						Проект).Ссылка;
	КонецЕсли;

	Если ЗначениеЗаполнено(Ответ.Тест) Тогда
		РеквизитыТеста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ответ.Тест, 
						"Ответственный, НастройкаЗапускаСценария, НастройкаЗапускаПроцесса, UIDНастройкиСценария, РазделПроекта");
		Если НЕ ЗначениеЗаполнено(Ответ.Ответственный)
			И (ЗначениеЗаполнено(РеквизитыТеста.НастройкаЗапускаСценария) 
			ИЛИ ЗначениеЗаполнено(РеквизитыТеста.НастройкаЗапускаПроцесса)
			ИЛИ ЗначениеЗаполнено(РеквизитыТеста.UIDНастройкиСценария)) Тогда
			Ответ.ОтветственныйТеста = РеквизитыТеста.Ответственный;
		КонецЕсли;
		Ответ.РазделПроекта = ?(ЗначениеЗаполнено(Ответ.РазделПроекта),
		                        Ответ.РазделПроекта, РеквизитыТеста.РазделПроекта);
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("ИмяВетки") И ЗначениеЗаполнено(ПараметрыОшибки.ИмяВетки) Тогда
		ДанныеВетки = ПодобратьДанныеВетки(Проект, ПараметрыОшибки.ИмяВетки);
		Если ЗначениеЗаполнено(ДанныеВетки.ВеткаОбнаружения) Тогда
			Ответ.ВеткаОбнаружения = ДанныеВетки.ВеткаОбнаружения;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеВетки.Ответственный) Тогда
			Ответ.Ответственный = ДанныеВетки.Ответственный;
		КонецЕсли;    
		Если ЗначениеЗаполнено(ДанныеВетки.СрочностьИсправления) Тогда
			Ответ.СрочностьИсправления = ДанныеВетки.СрочностьИсправления;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(Ответ.ВеткаОбнаружения) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось найти ветку по имени %1'"), 
								ПараметрыОшибки.ИмяВетки);
		КонецЕсли; 
	КонецЕсли;

	Если ПараметрыОшибки.Свойство("Сборка") И ЗначениеЗаполнено(ПараметрыОшибки.Сборка) Тогда
		
		ПроектИлиВерсияПроекта = ?(ЗначениеЗаполнено(Ответ.ВерсияПроекта), Ответ.ВерсияПроекта, Проект);
		
		Ответ.СборкаОбнаружения = ПодобратьСборкуВерсии(ПроектИлиВерсияПроекта, ПараметрыОшибки.Сборка);
		Если Не ЗначениеЗаполнено(Ответ.СборкаОбнаружения) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось определить сборку версии по номеру %1'"),
								ПараметрыОшибки.Сборка);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("ВерсияПроекта") И ЗначениеЗаполнено(ПараметрыОшибки.ВерсияПроекта) Тогда
			
		ДанныеВерсииПроекта    = ПодобратьДанныеВерсииПроекта(Проект, ПараметрыОшибки.ВерсияПроекта);
		Ответ.ВерсияПроекта    = ДанныеВерсииПроекта.ВерсияПроекта;
		Если НЕ ЗначениеЗаполнено(Ответ.ВеткаОбнаружения) Тогда
			Ответ.ВеткаОбнаружения = ДанныеВерсииПроекта.ВеткаОбнаружения;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Ответ.ВерсияПроекта) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось определить версию проекта по номеру %1'"),
								ПараметрыОшибки.ВерсияПроекта);
		КонецЕсли; 
			
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("ИмяРазделаПроекта") И ЗначениеЗаполнено(ПараметрыОшибки.ИмяРазделаПроекта) Тогда
		
		Ответ.РазделПроекта = ПодобратьРазделПроекта(Проект, ПараметрыОшибки.ИмяРазделаПроекта);
		Если Не ЗначениеЗаполнено(Ответ.РазделПроекта) Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru='Не удалось определить раздел проекта по имени %1'"), 
								ПараметрыОшибки.ИмяРазделаПроекта);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("ДатаОбнаружения") И ЗначениеЗаполнено(ПараметрыОшибки.ДатаОбнаружения) Тогда
		Ответ.ДатаОбнаружения = ПараметрыОшибки.ДатаОбнаружения;
	Иначе 
		Ответ.ДатаОбнаружения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ПараметрыОшибки.Свойство("ДатаНаследования") И ЗначениеЗаполнено(ПараметрыОшибки.ДатаНаследования) Тогда
		Ответ.ДатаНаследования = ПараметрыОшибки.ДатаНаследования;
	Иначе 
		Ответ.ДатаНаследования = Ответ.ДатаОбнаружения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ответ.СборкаОбнаружения) Тогда
		Ответ.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке;
	ИначеЕсли ЗначениеЗаполнено(Ответ.ВеткаОбнаружения) Тогда
		Ответ.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке;
	Иначе
		Ответ.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке;
		Ответ.ВеткаОбнаружения = ПодобратьОсновнуюВеткуПроекта(Проект);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьДанныеВетки(Проект, ИмяВетки)
	
	Ответ = Новый Структура;
	Ответ.Вставить("ВеткаОбнаружения",     Справочники.Ветки.ВеткаПоИмени(Проект, ИмяВетки));
	Ответ.Вставить("Ответственный",        Справочники.Пользователи.ПустаяСсылка());
	Ответ.Вставить("СрочностьИсправления", Перечисления.СрочностьИсправленияОшибок.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Ответ.ВеткаОбнаружения) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ответ.ВеткаОбнаружения, "Тип, Ответственный, СрочностьИсправленияОшибок");
		Ответ.СрочностьИсправления = Реквизиты.СрочностьИсправленияОшибок;
		Если Реквизиты.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта 
			ИЛИ Реквизиты.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда 
			Ответ.Ответственный = Реквизиты.Ответственный;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПодобратьСрочностьИсправления(СрочностьИзПараметровОшибки, СрочностьИзВетки)
	ЗначениеСрочностиИзОшибки = ЧисловоеЗначениеПоСрочности(СрочностьИзПараметровОшибки);
	ЗначениеСрочностьИзВетки = ЧисловоеЗначениеПоСрочности(СрочностьИзВетки);
	Если ЗначениеСрочностиИзОшибки > ЗначениеСрочностьИзВетки И ЗначениеЗаполнено(СрочностьИзПараметровОшибки) Тогда
		СрочностьРезультат = СрочностьИзПараметровОшибки;
	ИначеЕсли ЗначениеЗаполнено(СрочностьИзВетки) Тогда
		СрочностьРезультат = СрочностьИзВетки;  
	Иначе
		СрочностьРезультат = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее;
	КонецЕсли;
	Возврат СрочностьРезультат;	
КонецФункции

Функция ЧисловоеЗначениеПоСрочности(СрочностьИсправления)
	Если СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.Немедленно Тогда
		Возврат 3;
	ИначеЕсли СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее Тогда
		Возврат 2; 
	ИначеЕсли СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ЗаписьЛога(Директория, Текст, УровеньСообщения = "INF")
	
	Попытка
		
		ДиректорияЛогов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Директория);
		ДиректорияЛогов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиректорияЛогов + "logs");
		СоздатьКаталог(ДиректорияЛогов);
		
		ТекущаяДата  = ТекущаяДатаСеанса();
		ИмяФайлаЛога = СтрШаблон("%1%2.txt", 
		                         ДиректорияЛогов,
		                         Формат(ТекущаяДата, "ДФ=yyyy.MM.dd"));
		
		ПотокЗаписи = ФайловыеПотоки.ОткрытьДляДописывания(ИмяФайлаЛога);
		ЗаписьТекста = Новый ЗаписьТекста(ПотокЗаписи, кодировкаТекста.UTF8,,,Ложь);
		ЗаписываемаяСтрока = СтрШаблон("[%1] [%2] %3", Формат(ТекущаяДата, "ДФ=HH:mm:ss"), УровеньСообщения, Текст);
		ЗаписьТекста.ЗаписатьСтроку(ЗаписываемаяСтрока);
		ЗаписьТекста.Закрыть();
	Исключение
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка ошибок из файлов.Запись лога'"), 
		                         УровеньЖурналаРегистрации.Ошибка,,, 
		                         ПодробноеПредставлениеОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьФайлОшибки(ПутьУдаляемогоФайла, Директория)
	
	Попытка
		УдалитьФайлы(ПутьУдаляемогоФайла);
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Префикс = НСтр("ru = 'Не получилось удалить файл. '");
		ТекстСообщения = СтрШаблон("%1 %2
		                           |%3", Префикс, ПутьУдаляемогоФайла, ПодробноеПредставлениеОшибки);
		ЗаписьЛога(ПутьУдаляемогоФайла, ТекстСообщения, "ERR");
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПеренестиФайлОшибки(Файл, Директория)
	
	Попытка
		
		ДиректорияКорзины = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Директория);
		ДиректорияКорзины = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДиректорияКорзины + "failed");
		СоздатьКаталог(ДиректорияКорзины);
		
		НовоеРасположениеФайла = СтрШаблон("%1%2.fail", ДиректорияКорзины, Файл.Имя);
		ПереместитьФайл(Файл.ПолноеИмя , НовоеРасположениеФайла);
		
	Исключение
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Префикс = НСтр("ru = 'Не получилось переместить файл. '");
		ТекстСообщения = СтрШаблон("%1 %2
		                           |%3", Префикс, Директория, ПодробноеПредставлениеОшибки);
		ЗаписьЛога(Директория, ТекстСообщения, "ERR");
		
	КонецПопытки;
	
КонецПроцедуры

// Функция - Ищет объекты метаданных
//
// Параметры:
//  ТаблицаМетаданных - Таблица с параметрами метаданых
//       * ИмяМетаданного - Строка - Полное текстовое имя метаданного
//       * Уточнение      - Строка - Уточнение проблемы
//       * Комментарий    - Строка - Комментарий
//  ИмяПроекта       - Строка - Имя проекта
// 
// Возвращаемое значение:
//   - ТаблицаЗначений = См. ИнтеграцияСВнешнимиСистемами.СоздатьКоллекциюОбъектовМетаданных()
//
Функция НайтиОбъектыМетаданных(ТаблицаМетаданных, ИмяПроекта) Экспорт
	
	ОбъектыМетаданных = ИнтеграцияСВнешнимиСистемами.СоздатьКоллекциюОбъектовМетаданных();
	
	Если ТаблицаМетаданных.Количество() = 0 Тогда
		Возврат ОбъектыМетаданных;
	КонецЕсли; 
	
	Проект = ИнтеграцияСВнешнимиСистемами.ПодобратьПроект(ИмяПроекта);
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		ВызватьИсключение НСтр("ru='Не удалось определить проект ошибки'");
	КонецЕсли;
	
	ВидыОбъектовМетаданных = РаботаСОбъектамиМетаданныхКлиентСервер.СоответствиеИменКлассовОбъектовМетаданных();
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ИмяВидаОбъектаМетаданных");
	ТаблицаОбъектов.Колонки.Добавить("НаименованиеМетаданного");
	ТаблицаОбъектов.Колонки.Добавить("ПолноеНаименованиеМетаданного");
	ТаблицаОбъектов.Колонки.Добавить("UUIDМетаданного");
	ТаблицаОбъектов.Колонки.Добавить("НаименованиеМакета");
	ТаблицаОбъектов.Колонки.Добавить("НаименованиеФормы");
	ТаблицаОбъектов.Колонки.Добавить("ТипФормы");
	ТаблицаОбъектов.Колонки.Добавить("НаименованиеКоманды");
	ТаблицаОбъектов.Колонки.Добавить("Модуль");
	ТаблицаОбъектов.Колонки.Добавить("Уточнение");
	ТаблицаОбъектов.Колонки.Добавить("Комментарий");
	
	Для Каждого Строка Из ТаблицаМетаданных Цикл
		
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.ПолноеНаименованиеМетаданного = Строка.ИмяМетаданного;
		НоваяСтрока.Уточнение                     = Строка.Уточнение;
		НоваяСтрока.Комментарий                   = Строка.Комментарий;
		Если ТаблицаМетаданных.Колонки.Найти("UUIDМетаданного") <> Неопределено Тогда
			НоваяСтрока.UUIDМетаданного               = Строка.UUIDМетаданного;
		КонецЕсли;
		
		МассивИмен = СтрРазделить(НоваяСтрока.ПолноеНаименованиеМетаданного, ".", Ложь);
		Если МассивИмен.Количество() < 2  Тогда
			НоваяСтрока.НаименованиеМетаданного = НоваяСтрока.ПолноеНаименованиеМетаданного;
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.ИмяВидаОбъектаМетаданных = ПодобратьИмяВидаОбъектаМетаданных(МассивИмен[0], ВидыОбъектовМетаданных);
		НоваяСтрока.НаименованиеМетаданного = НоваяСтрока.ИмяВидаОбъектаМетаданных + "." + МассивИмен[1];
		
		Если ЭтоФорма(НоваяСтрока, НоваяСтрока.ПолноеНаименованиеМетаданного) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоКоманда(НоваяСтрока, НоваяСтрока.ПолноеНаименованиеМетаданного) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоМакет(НоваяСтрока, НоваяСтрока.ПолноеНаименованиеМетаданного) Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоМодуль(НоваяСтрока, НоваяСтрока.ПолноеНаименованиеМетаданного) Тогда
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; 
	UUIDМетаданных = Новый Массив;
	Для Каждого UUID Из ТаблицаОбъектов.ВыгрузитьКолонку("UUIDМетаданного") Цикл
		Если UUID <> Неопределено И ЗначениеЗаполнено(Строка(UUID)) Тогда
			UUIDМетаданных.Добавить(Строка(UUID));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект.Ссылка);
	Запрос.УстановитьПараметр("UUIDМетаданных",         UUIDМетаданных);
	Запрос.УстановитьПараметр("НаименованияМетаданных", ТаблицаОбъектов.ВыгрузитьКолонку("НаименованиеМетаданного"));
	Запрос.УстановитьПараметр("НаименованияМакетов",    ТаблицаОбъектов.ВыгрузитьКолонку("НаименованиеМакета"));
	Запрос.УстановитьПараметр("НаименованияФорм",       ТаблицаОбъектов.ВыгрузитьКолонку("НаименованиеФормы"));
	Запрос.УстановитьПараметр("ТипыФорм",               ТаблицаОбъектов.ВыгрузитьКолонку("ТипФормы"));
	Запрос.УстановитьПараметр("НаименованияКоманд",     ТаблицаОбъектов.ВыгрузитьКолонку("НаименованиеКоманды"));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка КАК Ссылка,
	|	ОбъектыМетаданных.Наименование КАК Наименование,
	|	ОбъектыМетаданных.uuid КАК uuid,
	|	ОбъектыМетаданных.Ответственный КАК Ответственный,
	|	ОбъектыМетаданных.РазделПроекта КАК РазделПроекта,
	|	ОбъектыМетаданных.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ОбъектыМетаданных
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	(ОбъектыМетаданных.Наименование В (&НаименованияМетаданных)
	|			ИЛИ ОбъектыМетаданных.uuid В (&UUIDМетаданных))
	|	И ОбъектыМетаданных.Владелец = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка КАК Ссылка,
	|	ОбъектыМетаданных.Наименование КАК Наименование,
	|	ОбъектыМетаданных.Ответственный КАК Ответственный,
	|	ОбъектыМетаданных.РазделПроекта КАК РазделПроекта,
	|	ОбъектыМетаданных.uuid КАК uuid,
	|	ОбъектыМетаданных.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МакетыОбъектовМетаданных.Владелец КАК Владелец,
	|	МакетыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	МакетыОбъектовМетаданных.Имя КАК Имя
	|ИЗ
	|	Справочник.МакетыОбъектовМетаданных КАК МакетыОбъектовМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО МакетыОбъектовМетаданных.Владелец = ОбъектыМетаданных.Ссылка
	|ГДЕ
	|	МакетыОбъектовМетаданных.Имя В(&НаименованияМакетов)
	|	И НЕ МакетыОбъектовМетаданных.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормыОбъектовМетаданных.Владелец КАК Владелец,
	|	ФормыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	ФормыОбъектовМетаданных.Имя КАК Имя,
	|	ТипыФорм.ТипФормы КАК ТипФормы
	|ИЗ
	|	Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО ФормыОбъектовМетаданных.Владелец = ОбъектыМетаданных.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФормыОбъектовМетаданных.ТипыФормы КАК ТипыФорм
	|		ПО (ТипыФорм.Ссылка = ФормыОбъектовМетаданных.Ссылка)
	|ГДЕ
	|	(ФормыОбъектовМетаданных.Имя В (&НаименованияФорм)
	|			ИЛИ ТипыФорм.ТипФормы В (&ТипыФорм))
	|	И НЕ ФормыОбъектовМетаданных.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КомандыОбъектовМетаданных.Владелец КАК Владелец,
	|	КомандыОбъектовМетаданных.Ссылка КАК Ссылка,
	|	КомандыОбъектовМетаданных.Имя КАК Имя
	|ИЗ
	|	Справочник.КомандыОбъектовМетаданных КАК КомандыОбъектовМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО КомандыОбъектовМетаданных.Владелец = ОбъектыМетаданных.Ссылка
	|ГДЕ
	|	КомандыОбъектовМетаданных.Имя В(&НаименованияКоманд)
	|	И НЕ КомандыОбъектовМетаданных.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыгрузкаМетаданные = РезультатЗапроса[1].Выгрузить();
	ВыгрузкаМакеты     = РезультатЗапроса[2].Выгрузить();
	ВыгрузкаФормы      = РезультатЗапроса[3].Выгрузить();
	ВыгрузкаКоманды    = РезультатЗапроса[4].Выгрузить();
	
	Отбор        = Новый Структура("Владелец, Имя");
	ОтборПоUUID  = Новый Структура("uuid, ПометкаУдаления");
	ОтборПоТипу  = Новый Структура("Владелец, ТипФормы");
	ОтборПоИмени = Новый Структура("Наименование, ПометкаУдаления");
	
	Для Каждого Строка Из ТаблицаОбъектов Цикл
		
		ОтборПоИмени.Наименование    = Строка.НаименованиеМетаданного;
		ОтборПоИмени.ПометкаУдаления = Ложь;
		ОтборПоUUID.uuid = Строка.UUIDМетаданного;
		ОтборПоUUID.ПометкаУдаления = Ложь;
		
		НайденныеСтроки = ВыгрузкаМетаданные.НайтиСтроки(ОтборПоUUID);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НайденныеСтроки = ВыгрузкаМетаданные.НайтиСтроки(ОтборПоИмени);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ОтборПоИмени.ПометкаУдаления = Истина;
				НайденныеСтроки = ВыгрузкаМетаданные.НайтиСтроки(ОтборПоИмени);
				
			КонецЕсли;
		КонецЕсли;
		
		НайденныеМетаданные = ?(НайденныеСтроки.Количество() <> 0, НайденныеСтроки[0], Неопределено);
		
		СтрокаОбъектаМетаданных = ОбъектыМетаданных.Добавить();
		СтрокаОбъектаМетаданных.ПолноеИмяОбъектаМетаданного = Строка.ПолноеНаименованиеМетаданного;
		
		СтрокаОбъектаМетаданных.Уточнение   = Строка.Уточнение;
		СтрокаОбъектаМетаданных.Комментарий = Строка.Комментарий;
		
		Если НайденныеМетаданные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъектаМетаданных.ПроблемныйОбъект = НайденныеМетаданные.Ссылка;
		СтрокаОбъектаМетаданных.Ответственный    = НайденныеМетаданные.Ответственный;
		СтрокаОбъектаМетаданных.РазделПроекта    = НайденныеМетаданные.РазделПроекта;
		
		Отбор.Владелец       = СтрокаОбъектаМетаданных.ПроблемныйОбъект;
		ОтборПоТипу.Владелец = СтрокаОбъектаМетаданных.ПроблемныйОбъект;
			
		Если ЗначениеЗаполнено(Строка.НаименованиеФормы) Тогда
			
			Отбор.Имя = Строка.НаименованиеФормы;
			СтрокаОбъектаМетаданных.ПодчиненныйОбъект = НайтиВКоллекции(ВыгрузкаФормы, Отбор);
			
			Если Не ЗначениеЗаполнено(СтрокаОбъектаМетаданных.ПодчиненныйОбъект) Тогда
				СтрокаОбъектаМетаданных.Комментарий = СтрокаОбъектаМетаданных.Комментарий
					+ ?(ЗначениеЗаполнено(СтрокаОбъектаМетаданных.Комментарий), Символы.ПС, "")
					+ СтрШаблон(НСтр("ru = 'Форма: ""%1""'"), Строка.НаименованиеФормы);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Строка.ТипФормы) Тогда
			
			ОтборПоТипу.ТипФормы = Строка.ТипФормы;
			СтрокаОбъектаМетаданных.ПодчиненныйОбъект = НайтиВКоллекции(ВыгрузкаФормы, ОтборПоТипу);
			
			Если Не ЗначениеЗаполнено(СтрокаОбъектаМетаданных.ПодчиненныйОбъект) Тогда
				СтрокаОбъектаМетаданных.Комментарий = СтрокаОбъектаМетаданных.Комментарий
					+ ?(ЗначениеЗаполнено(СтрокаОбъектаМетаданных.Комментарий), Символы.ПС, "")
					+ СтрШаблон(НСтр("ru = 'Форма: ""%1""'"), Строка.ТипФормы);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Строка.НаименованиеКоманды) Тогда
			
			Отбор.Имя = Строка.НаименованиеКоманды;
			СтрокаОбъектаМетаданных.ПодчиненныйОбъект = НайтиВКоллекции(ВыгрузкаКоманды, Отбор);
			
			Если Не ЗначениеЗаполнено(СтрокаОбъектаМетаданных.ПодчиненныйОбъект) Тогда
				СтрокаОбъектаМетаданных.Комментарий = СтрокаОбъектаМетаданных.Комментарий
					+ ?(ЗначениеЗаполнено(СтрокаОбъектаМетаданных.Комментарий), Символы.ПС, "")
					+ СтрШаблон(НСтр("ru = 'Команда: ""%1""'"), Строка.НаименованиеКоманды);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Строка.НаименованиеМакета) Тогда
			
			Отбор.Имя = Строка.НаименованиеМакета;
			СтрокаОбъектаМетаданных.ПодчиненныйОбъект = НайтиВКоллекции(ВыгрузкаМакеты, Отбор);
			Если Не ЗначениеЗаполнено(СтрокаОбъектаМетаданных.ПодчиненныйОбъект) Тогда
				СтрокаОбъектаМетаданных.Комментарий = СтрокаОбъектаМетаданных.Комментарий
					+ ?(ЗначениеЗаполнено(СтрокаОбъектаМетаданных.Комментарий), Символы.ПС, "")
					+ СтрШаблон(НСтр("ru = 'Макет: ""%1""'"), Строка.НаименованиеМакета);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Модуль) Тогда
			
			СтрокаОбъектаМетаданных.ПодчиненныйОбъект = Строка.Модуль;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыМетаданных;
	
КонецФункции
 
Функция НайтиВКоллекции(Коллекция, Отбор)

	НайденныеСтроки = Коллекция.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0].Ссылка
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЭтоФорма(СтрокаТаблицы, ПолноеИмяМетаданных)
	
	Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".Форма.");
	
	Если Результат.Количество() >= 2 Тогда
		
		ИмяФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат[1], ".");
		
		Если ИмяФормы.Количество() > 0 Тогда
			СтрокаТаблицы.НаименованиеФормы = ИмяФормы[0];
		Иначе 
			СтрокаТаблицы.НаименованиеФормы = Результат[1];
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Если СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаВыбора") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаВыбораГруппы") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбораГруппы");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаГруппы") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаГруппы");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаОбъекта") 
			ИЛИ СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаЭлемента")
			ИЛИ СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаДокумента") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаСписка") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".Форма") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФорма");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаВарианта") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаВарианта");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаНастроек") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаНастроек");
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".ФормаЗаписи") Тогда
		
		СтрокаТаблицы.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаЗаписи");
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоМакет(СтрокаТаблицы, ПолноеИмяМетаданных)
	
	Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".Макет.");
	
	Если Результат.Количество() >= 2 Тогда
		
		ИмяМакета = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат[1], ".");
		
		Если ИмяМакета.Количество() > 0 Тогда
			СтрокаТаблицы.НаименованиеМакета = ИмяМакета[0];
		Иначе 
			СтрокаТаблицы.НаименованиеМакета = Результат[1];
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоКоманда(СтрокаТаблицы, ПолноеИмяМетаданных)
	
	Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяМетаданных, ".Команда.");
	
	Если Результат.Количество() >= 2 Тогда
		
		ИмяКоманды = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат[1], ".");
		
		Если ИмяКоманды.Количество() > 0 Тогда
			СтрокаТаблицы.НаименованиеКоманды = ИмяКоманды[0];
		Иначе 
			СтрокаТаблицы.НаименованиеКоманды = Результат[1];
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоМодуль(СтрокаТаблицы, ПолноеИмяМетаданных)
	
	Если СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".МодульМенеджера") Тогда
	
		СтрокаТаблицы.Модуль = Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджера;
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".МодульМенеджераЗначений") Тогда
		
		СтрокаТаблицы.Модуль = Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджераЗначений;
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".МодульНабораЗаписей") Тогда
		
		СтрокаТаблицы.Модуль = Перечисления.ТипыМодулейОбъектовМетаданных.МодульНабораЗаписей;
		Возврат Истина;
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяМетаданных, ".МодульОбъекта") Тогда
		
		СтрокаТаблицы.Модуль = Перечисления.ТипыМодулейОбъектовМетаданных.МодульОбъекта;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПодобратьИмяВидаОбъектаМетаданных(ИмяВидаОбъектаМетаданных, ВидыОбъектовМетаданных)
	
	СтрокаПоиска = ИмяВидаОбъектаМетаданных;
	
	Если СтрЗаканчиваетсяНа(СтрокаПоиска, "Менеджер") Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "Менеджер", "");
	КонецЕсли; 
	
	Если СтрЗаканчиваетсяНа(СтрокаПоиска, "Объект") Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "Объект", "");
	КонецЕсли; 
	
	Если СтрЗаканчиваетсяНа(СтрокаПоиска, "Ссылка") Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "Ссылка", "");
	КонецЕсли; 
	
	Если СтрЗаканчиваетсяНа(СтрокаПоиска, "Manager") Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "Manager", "");
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(СтрокаПоиска, "Object") Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "Object", "");
	КонецЕсли;
	
	Если СтрЗаканчиваетсяНа(СтрокаПоиска, "Ref") Тогда
		СтрокаПоиска = СтрЗаменить(СтрокаПоиска, "Ref", "");
	КонецЕсли;
	
	Значение = ВидыОбъектовМетаданных.Получить(СтрокаПоиска);
	
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ДополнитьВерсиюНулями(Версия)
	
	ПолныйНомер = Новый Массив(4);
	Для Индекс = 0 По ПолныйНомер.Количество() - 1 Цикл
		ПолныйНомер.Установить(Индекс, "0");
	КонецЦикла; 
	
	ЭлементыВерсии = СтрРазделить(Версия, ".");
	Для Индекс = 0 По ЭлементыВерсии.Количество() - 1 Цикл
		ПолныйНомер.Установить(Индекс, ЭлементыВерсии[Индекс]);
	КонецЦикла; 
	
	Возврат СтрСоединить(ПолныйНомер, ".");
	
КонецФункции

Функция ТипПлатформыПоСтроке(СтрокаТипПлатформы)
	СтрокаТипПлатформы = ВРег(СокрЛП(СтрокаТипПлатформы));
	ЗначениеТипПлатформы = "";
	Если ЗначениеЗаполнено(СтрокаТипПлатформы) Тогда
		Если СтрНайти(СтрокаТипПлатформы, "LINUX") > 0 Тогда 
			Если СтрНайти(СтрокаТипПлатформы, "64") > 0 Тогда
				ЗначениеТипПлатформы = Перечисления.ТипПлатформы.Linux_x86_64;
            Иначе
				ЗначениеТипПлатформы = Перечисления.ТипПлатформы.Linux_x86;
			КонецЕсли;	
		ИначеЕсли СтрНайти(СтрокаТипПлатформы, "MAC") > 0 Тогда
			Если СтрНайти(СтрокаТипПлатформы, "64") > 0 Тогда
				ЗначениеТипПлатформы = Перечисления.ТипПлатформы.MacOS_x86_64;
			Иначе	
				ЗначениеТипПлатформы = Перечисления.ТипПлатформы.MacOS_x86;
			КонецЕсли;	
		ИначеЕсли СтрНайти(СтрокаТипПлатформы, "WIN") > 0 Тогда
			Если СтрНайти(СтрокаТипПлатформы, "64") > 0 Тогда
				ЗначениеТипПлатформы = Перечисления.ТипПлатформы.Windows_x86_64;
			Иначе
				ЗначениеТипПлатформы = Перечисления.ТипПлатформы.Windows_x86;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат ЗначениеТипПлатформы;
	
КонецФункции

Функция ЗарегистрироватьОшибкуТаблицаМетаданных(ОбъектыМетаданных)
	ТаблицаМетаданных = ИнтеграцияСВнешнимиСистемами.ПолучитьТаблицуМетаданных();
	Для Каждого Строка Из ОбъектыМетаданных Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ОбъектМетаданных) И Не ЗначениеЗаполнено(Строка.УточнениеРасположения) Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = ТаблицаМетаданных.Добавить();
		НоваяСтрока.ИмяМетаданного = Строка.ОбъектМетаданных;
		НоваяСтрока.Уточнение      = Строка.УточнениеРасположения;
		Строка.Свойство("Комментарий", НоваяСтрока.Комментарий);
		Строка.Свойство("UUIDОбъектаМетаданных", НоваяСтрока.UUIDМетаданного);
		
	КонецЦикла; 
	
	Возврат ТаблицаМетаданных;
	
КонецФункции	

Процедура ЗаполнитьСписокОбъектовМетаданныхВОшибке(Ошибка, ОбъектыМетаданных, ДопПараметры)
	
	РазделОтветственныйОбъектовМетаданных = ДопПараметры.РазделОтветственныйОбъектовМетаданных;
	
	Если ОбъектыМетаданных <> Неопределено Тогда
		
		Для Каждого СтрокаОбъектаМетаданных Из ОбъектыМетаданных Цикл
			
			НоваяСтрока = Ошибка.СписокОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОбъектаМетаданных);
			
			Если Не ЗначениеЗаполнено(СтрокаОбъектаМетаданных.ПроблемныйОбъект) 
			      И ЗначениеЗаполнено(СтрокаОбъектаМетаданных.ПолноеИмяОбъектаМетаданного) Тогда
				НоваяСтрока.Уточнение = СтрокаОбъектаМетаданных.ПолноеИмяОбъектаМетаданного
				                      + Символы.ПС + НоваяСтрока.Уточнение;
			КонецЕсли;
			
			Если РазделОтветственныйОбъектовМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			СтрокаРазделОтветственныйОбъектовМетаданных = РазделОтветственныйОбъектовМетаданных.Добавить();
			Если Не ДопПараметры.РазделУказан И ЗначениеЗаполнено(СтрокаОбъектаМетаданных.РазделПроекта) Тогда
				СтрокаРазделОтветственныйОбъектовМетаданных.РазделПроекта = СтрокаОбъектаМетаданных.РазделПроекта;
			КонецЕсли;
			
			Если Не ДопПараметры.КомуНаправленаУказан И ЗначениеЗаполнено(СтрокаОбъектаМетаданных.Ответственный) Тогда
				СтрокаРазделОтветственныйОбъектовМетаданных.КомуНаправлена = СтрокаОбъектаМетаданных.Ответственный;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗаполнитьПараметрыОшибки(СтруктураОшибки, ИмяПроекта, ПостфиксПорядкаВоспроизведения, Версия)
	ПараметрыОшибки   = ИнтеграцияСВнешнимиСистемами.ИнициироватьПараметрыОшибки();
	
	Если СтруктураОшибки.Свойство("Наименование")
	   И ЗначениеЗаполнено(СтруктураОшибки.Наименование) Тогда
		
		Наименование = СтруктураОшибки.Наименование;
	Иначе
		Наименование = ?(ЗначениеЗаполнено(СтруктураОшибки.ТипОшибки), СтруктураОшибки.ТипОшибки + " ", "")
		             + СтрПолучитьСтроку(СтруктураОшибки.ИсходнаяИнформация, 1);
	КонецЕсли;
	
	ПараметрыОшибки.ИмяПроекта               = ИмяПроекта;
	ПараметрыОшибки.Наименование             = Наименование;
	ПараметрыОшибки.ВидПроблемы              = СтруктураОшибки.ТипОшибки;
	ПараметрыОшибки.МетодВыявленияОшибки     = "Автотесты";
	ПараметрыОшибки.СрочностьИсправления     = "";
	ПараметрыОшибки.ИсходнаяИнформация       = СтруктураОшибки.ИсходнаяИнформация;
	ПараметрыОшибки.ПорядокВоспроизведения   = СтруктураОшибки.ПорядокВоспроизведения + ПостфиксПорядкаВоспроизведения;
	ПараметрыОшибки.ДатаОбнаружения          = СтруктураОшибки.ДатаОбнаружения;
	ПараметрыОшибки.ВерсияПлатформы          = СтруктураОшибки.ВерсияПлатформы;
	ПараметрыОшибки.ВерсияПроекта            = Версия;
	
	Если ЗначениеЗаполнено(СтруктураОшибки.ВерсияФормата) Тогда
		
		ДополненнаяВерсия = ДополнитьВерсиюНулями(СтруктураОшибки.ВерсияФормата);
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.2.0.0") >= 0 Тогда
			ПараметрыОшибки.КомуНаправлена = СтруктураОшибки.Ответственный;
			ПараметрыОшибки.КодСценария    = СтруктураОшибки.КодСценария;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.3.0.0") >= 0 Тогда
			ПараметрыОшибки.ДостоверностьОбнаружения = СтруктураОшибки.ДостоверностьОбнаружения;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.4.0.0") >= 0 Тогда
			ПараметрыОшибки.АдресРепозитория = СтруктураОшибки.АдресРепозитория;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.5.0.0") >= 0 Тогда
			
			Если СтруктураОшибки.Срочность = "Высокая" Тогда
				ПараметрыОшибки.СрочностьИсправления = "Немедленно";
			ИначеЕсли СтруктураОшибки.Срочность = "Средняя" Тогда
				ПараметрыОшибки.СрочностьИсправления = "ЖелательноБыстрее";
			ИначеЕсли СтруктураОшибки.Срочность = "Низкая" Тогда
				ПараметрыОшибки.СрочностьИсправления = "ВПлановомПорядке"
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.6.0.0") >= 0 Тогда
			ПараметрыОшибки.ИмяВетки = СтруктураОшибки.ИмяВетки;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.7.0.0") >= 0 Тогда
			ПараметрыОшибки.КодПроцесса          = СтруктураОшибки.КодПроцесса;
			ПараметрыОшибки.КодНастройкиПроцесса = СтруктураОшибки.КодНастройкиПроцесса;
			ПараметрыОшибки.КодНастройкиСценария = СтруктураОшибки.КодНастройкиСценария;
			ПараметрыОшибки.ИдентификаторЗапуска = СтруктураОшибки.ИдентификаторЗапуска;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.8.0.0") >= 0 Тогда
			ПараметрыОшибки.ИмяТеста = СтруктураОшибки.ИмяТеста;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.9.0.0") >= 0 Тогда
			ПараметрыОшибки.ДатаНаследования = СтруктураОшибки.ДатаНаследования;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.11.0.0") >= 0 Тогда
			ПараметрыОшибки.UIDСценария = СтруктураОшибки.UIDСценария;
			ПараметрыОшибки.UIDНастройкиСценария = СтруктураОшибки.UIDНастройкиСценария;
			ПараметрыОшибки.ИмяНастройкиСценария = СтруктураОшибки.ИмяНастройкиСценария;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.12.0.0") >= 0 Тогда
			Если СтруктураОшибки.Свойство("СерверТипПлатформы")
				И ЗначениеЗаполнено(СтруктураОшибки.СерверТипПлатформы) Тогда
				ПараметрыОшибки.СерверТипПлатформы = СтруктураОшибки.СерверТипПлатформы;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("СерверВерсияОС")
				И ЗначениеЗаполнено(СтруктураОшибки.СерверВерсияОС) Тогда
				ПараметрыОшибки.СерверВерсияОС = СтруктураОшибки.СерверВерсияОС;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("СерверОперативнаяПамять")
				И ЗначениеЗаполнено(СтруктураОшибки.СерверОперативнаяПамять) Тогда
				ПараметрыОшибки.СерверОперативнаяПамять = СтруктураОшибки.СерверОперативнаяПамять;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("СерверПроцессор")
				И ЗначениеЗаполнено(СтруктураОшибки.СерверПроцессор) Тогда
				ПараметрыОшибки.СерверПроцессор = СтруктураОшибки.СерверПроцессор;
			КонецЕсли;

			Если СтруктураОшибки.Свойство("КлиентВерсияОС")
				И ЗначениеЗаполнено(СтруктураОшибки.КлиентВерсияОС) Тогда
				ПараметрыОшибки.КлиентВерсияОС = СтруктураОшибки.КлиентВерсияОС;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("КлиентОперативнаяПамять")
				И ЗначениеЗаполнено(СтруктураОшибки.КлиентОперативнаяПамять) Тогда
				ПараметрыОшибки.КлиентОперативнаяПамять = СтруктураОшибки.КлиентОперативнаяПамять;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("КлиентПроцессор")
				И ЗначениеЗаполнено(СтруктураОшибки.КлиентПроцессор) Тогда
				ПараметрыОшибки.КлиентПроцессор = СтруктураОшибки.КлиентПроцессор;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("КлиентИнформацияПрограммыПросмотра")
				И ЗначениеЗаполнено(СтруктураОшибки.КлиентИнформацияПрограммыПросмотра) Тогда
				ПараметрыОшибки.КлиентИнформацияПрограммыПросмотра = СтруктураОшибки.КлиентИнформацияПрограммыПросмотра;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("КлиентТипПлатформы")
				И ЗначениеЗаполнено(СтруктураОшибки.КлиентТипПлатформы) Тогда
				ПараметрыОшибки.КлиентТипПлатформы = СтруктураОшибки.КлиентТипПлатформы;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("КлиентТипПриложения")
				И ЗначениеЗаполнено(СтруктураОшибки.КлиентТипПриложения) Тогда
				ПараметрыОшибки.КлиентТипПриложения = СтруктураОшибки.КлиентТипПриложения;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("ТипПлатформы")
				И ЗначениеЗаполнено(СтруктураОшибки.ТипПлатформы) Тогда
				ПараметрыОшибки.ТипПлатформы = СтруктураОшибки.ТипПлатформы;
			КонецЕсли;
			Если СтруктураОшибки.Свойство("ТипСУБД")
				И ЗначениеЗаполнено(СтруктураОшибки.ТипСУБД) Тогда
				ПараметрыОшибки.ТипСУБД = СтруктураОшибки.ТипСУБД;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ДополненнаяВерсия, "1.13.0.0") >= 0 Тогда
			ПараметрыОшибки.ИдентификаторПроекта = СтруктураОшибки.ИдентификаторПроекта;
		КонецЕсли;

	КонецЕсли; 
	
	Возврат ПараметрыОшибки;
	
КонецФункции	

Функция ПостфиксПорядкаВоспроизведения(КомпонентыСборки, Версия, СтруктураОшибки)
	
	ПостфиксПорядкаВоспроизведения = "";
	Если КомпонентыСборки.Количество() > 3 Тогда
		Версия = СтрШаблон("%1.%2.%3", КомпонентыСборки[0], КомпонентыСборки[1], КомпонентыСборки[2]);
		ПостфиксПорядкаВоспроизведения = СтрШаблон("%1
		                                           |Сборка: %2",
		                                           ПостфиксПорядкаВоспроизведения,
		                                           СтруктураОшибки.ВерсияКонфигурации);
	Иначе 
		Версия = СтруктураОшибки.ВерсияКонфигурации;
	КонецЕсли;
	
	Возврат ПостфиксПорядкаВоспроизведения;
	
КонецФункции	

#КонецОбласти

#Область ПроцедурыРегистрацииОшибок

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьОписаниеОшибки() Экспорт 

	Ошибка = Новый Структура;
	
	Ошибка.Вставить("ВерсияФормата", "1.13");
	Ошибка.Вставить("УИ",                       Строка(Новый УникальныйИдентификатор));
	Ошибка.Вставить("ТипОшибки",                "");
	Ошибка.Вставить("ИсходнаяИнформация",       "");
	Ошибка.Вставить("ПорядокВоспроизведения",   "");
	Ошибка.Вставить("ОжидаемоеПоведение",       "");
	Ошибка.Вставить("Ответственный",            "");
	Ошибка.Вставить("КодСценария",              "");
	Ошибка.Вставить("КодНастройкиСценария",     "");
	Ошибка.Вставить("КодПроцесса",              "");
	Ошибка.Вставить("КодНастройкиПроцесса",     "");
	Ошибка.Вставить("UIDСценария",              "");
	Ошибка.Вставить("UIDНастройкиСценария",     "");
	Ошибка.Вставить("ИмяНастройкиСценария",     "");
	Ошибка.Вставить("ДостоверностьОбнаружения", "Высокая");  // "Высокая" либо "Низкая"
	Ошибка.Вставить("Срочность",                "Высокая"); // "Высокая", "Средняя" либо "Низкая"
	Ошибка.Вставить("АдресРепозитория",         "");
	Ошибка.Вставить("ИмяВетки",                 "");
	Ошибка.Вставить("ИдентификаторПроекта",     "");
	Ошибка.Вставить("ИдентификаторЗапуска",     "");
	Ошибка.Вставить("ИмяТеста",                 "");

	#Если Клиент Или ТолстыйКлиентУправляемоеПриложение Или ТонкийКлиент Или ВебКлиент  Тогда
	
		СисИнфо = Новый СистемнаяИнформация;
		Ошибка.Вставить("ВерсияПлатформы",         СисИнфо.ВерсияПриложения);
		Ошибка.Вставить("КлиентОперативнаяПамять", СисИнфо.ОперативнаяПамять);
		Ошибка.Вставить("КлиентВерсияОС",          СисИнфо.ВерсияОС);
		Ошибка.Вставить("КлиентПроцессор",         СисИнфо.Процессор);
		Ошибка.Вставить("КлиентТипПлатформы",      Строка(СисИнфо.ТипПлатформы));
		Ошибка.Вставить("КлиентИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
		Ошибка.Вставить("КлиентТекущаяДата",       ТекущаяДата());
	
	#КонецЕсли
	
	Ошибка.Вставить("ДатаОбнаружения",   Дата(1,1,1));
	Ошибка.Вставить("ДатаНаследования",  Дата(1,1,1));
	
	Ошибка.Вставить("ОбъектыМетаданных", Новый Массив); // Возможность добавить массив объектов метаданных
	// Регистрация по одному объекту метаданных
	Ошибка.Вставить("ОбъектМетаданных",      "");
	Ошибка.Вставить("UUIDОбъектаМетаданных", "");
	Ошибка.Вставить("УточнениеРасположения", "");
	Ошибка.Вставить("Комментарий",           "");
	Ошибка.Вставить("ВерсияКонфигурации",    "");
	Ошибка.Вставить("ИмяКонфигурации",       "");
	
	Ошибка.Вставить("ИменаФайлов", Новый Массив);
	
	Ошибка.Вставить("СерверВерсияОС");
	Ошибка.Вставить("СерверОперативнаяПамять");
	Ошибка.Вставить("СерверПроцессор");
	Ошибка.Вставить("СерверТипПлатформы");
	Ошибка.Вставить("КлиентТипПриложения");

	Ошибка.Вставить("ТипПлатформы");
	Ошибка.Вставить("ТипСУБД");
	
	Возврат Ошибка;
	
КонецФункции 

&НаСервереБезКонтекста
Процедура ДополнитьОписаниеОшибкиНаСервере(Ошибка) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Ошибка.Вставить("ВерсияПлатформы",         СисИнфо.ВерсияПриложения);
	Ошибка.Вставить("СерверОперативнаяПамять", СисИнфо.ОперативнаяПамять);
	Ошибка.Вставить("СерверВерсияОС",          СисИнфо.ВерсияОС);
	Ошибка.Вставить("СерверПроцессор",         СисИнфо.Процессор);
	Ошибка.Вставить("СерверТипПлатформы",      Строка(СисИнфо.ТипПлатформы));
	Ошибка.Вставить("СерверИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
	
	Если Не ЗначениеЗаполнено(Ошибка.ВерсияКонфигурации) Тогда
		Ошибка.ВерсияКонфигурации = Метаданные.Версия;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ошибка.ИмяКонфигурации) Тогда
		Ошибка.ИмяКонфигурации = Метаданные.Имя;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ошибка.ДатаОбнаружения) Тогда
		Ошибка.ДатаОбнаружения = ТекущаяДатаСеанса();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ошибка.ДатаНаследования) Тогда
		Ошибка.ДатаНаследования = Ошибка.ДатаОбнаружения;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ТекстОшибкиXML(Ошибка) Экспорт
	
	ДополнитьОписаниеОшибкиНаСервере(Ошибка);
	
	Если ЗначениеЗаполнено(Ошибка.ОбъектМетаданных)
	 ИЛИ ЗначениеЗаполнено(Ошибка.УточнениеРасположения)
	 ИЛИ ЗначениеЗаполнено(Ошибка.Комментарий) Тогда
		
		Ошибка.ОбъектыМетаданных.Добавить(Новый Структура("ОбъектМетаданных, УточнениеРасположения, Комментарий, UUIDОбъектаМетаданных", 
		                                                  Ошибка.ОбъектМетаданных, 
		                                                  Ошибка.УточнениеРасположения, 
		                                                  Ошибка.Комментарий,
		                                                  Ошибка.UUIDОбъектаМетаданных));
		
	КонецЕсли; 
	
	Ошибка.Удалить("ОбъектМетаданных");
	Ошибка.Удалить("УточнениеРасположения");
	Ошибка.Удалить("Комментарий");
	Ошибка.Удалить("UUIDОбъектаМетаданных");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Ошибка);
	
	Возврат ЗаписьXML.Закрыть()
	
КонецФункции

#КонецОбласти

