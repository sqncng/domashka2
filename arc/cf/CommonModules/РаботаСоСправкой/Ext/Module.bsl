
#Область ПрограммныйИнтерфейс

// Проекты для которых ведется справка
//
// Параметры:
//  ПроектБиблиотека - СправочникСсылка.Проекты - Проект в котором ведется справка по дочерним проектам
// 
// Возвращаемое значение:
//   - ТаблицаЗначений
//       * Проект           - СправочникСсылка.Проекты.
//       * ИмяПроекта       - Строка.
//
Функция ПроектыДляКоторыхВедетсяСправка(ПроектБиблиотека) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Ссылка КАК Проект,
	|	ПроектыВключаемыеПроекты.Ссылка.Наименование КАК ИмяПроекта
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Проект = &ПроектБиблиотека
	|	И ПроектыВключаемыеПроекты.СправкаВедетсяВБиблиотеке
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяПроекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект,
	|	Проекты.Наименование КАК ИмяПроекта
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка = &ПроектБиблиотека";
	
	Запрос.УстановитьПараметр("ПроектБиблиотека", ПроектБиблиотека);
	
	Результат = Запрос.ВыполнитьПакет();
	Ответ = Результат[0].Выгрузить();
	
	Если Ответ.Количество() > 0 Тогда
		
		ПроектБиблиотекаВыборка = Результат[1].Выбрать();
		
		Пока ПроектБиблиотекаВыборка.Следующий() Цикл
		
			НоваяСтрока = Ответ.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПроектБиблиотекаВыборка);
		
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат Ответ;
	
КонецФункции

// Строковое представление списка проектов
//
// Параметры:
//  Проекты     - Массив - Массив ссылок на проекты
//  Разделитель - Строка - По умолчанию значение - ";"
// 
// Возвращаемое значение:
//   - Строка - Строковое представление проектов, разделенные переданным разделителем
//
Функция ПолучитьСтроковоеПредставлениеПроектовПовтИсп(Проекты, Разделитель = ";") Экспорт
	
	МассивИдентификаторовПроекта = Новый Массив;
	Для Каждого Проект Из Проекты Цикл
		МассивИдентификаторовПроекта.Добавить(Строка(Проект.УникальныйИдентификатор()));
	КонецЦикла; 
	
	Возврат РаботаСоСправкойПовтИсп.ПолучитьСтроковоеПредставлениеПроектов(
		СтрСоединить(МассивИдентификаторовПроекта, Разделитель), Разделитель);
	
КонецФункции

// Объект поставщика
//
// Параметры:
//  Ссылка - СправочникСсылка - Ссылка на справочник (ОбъектыМетаданных,Подсистемы,ФормыОбъектовМетаданных)
// 
// Возвращаемое значение:
//   - СправочникСсылка либо Неопределено, если объект поставщика найден не был
//
Функция ПолучитьОбъектПоставщика(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		
		Запрос.Параметры.Вставить("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыМетаданныхПоставщика.Ссылка
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданныхПоставщика
		|		ПО ОбъектыМетаданных.uuid = ОбъектыМетаданныхПоставщика.uuid
		|			И НЕ ОбъектыМетаданныхПоставщика.uuid = """"
		|			И (ОбъектыМетаданных.Поставщик = ОбъектыМетаданныхПоставщика.Владелец)
		|			И (НЕ ОбъектыМетаданныхПоставщика.ПометкаУдаления)
		|ГДЕ
		|	ОбъектыМетаданных.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Подсистемы") Тогда
		
		Запрос.Параметры.Вставить("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодсистемыПоставщика.Ссылка
		|ИЗ
		|	Справочник.Подсистемы КАК Подсистемы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК ПодсистемыПоставщика
		|		ПО Подсистемы.uuid = ПодсистемыПоставщика.uuid
		|			И НЕ ПодсистемыПоставщика.uuid = """"
		|			И Подсистемы.Поставщик = ПодсистемыПоставщика.Владелец
		|			И (НЕ ПодсистемыПоставщика.ПометкаУдаления)
		|ГДЕ
		|	Подсистемы.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
		
		Запрос.Параметры.Вставить("Ссылка", Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФормыОбъектовМетаданныхПоставщика.Ссылка
		|ИЗ
		|	Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданныхПоставщика
		|		ПО ФормыОбъектовМетаданных.uuid = ФормыОбъектовМетаданныхПоставщика.uuid
		|			И НЕ ФормыОбъектовМетаданныхПоставщика.uuid = """"
		|			И ФормыОбъектовМетаданных.Владелец.Поставщик = ФормыОбъектовМетаданныхПоставщика.Владелец.Владелец
		|			И (НЕ ФормыОбъектовМетаданныхПоставщика.ПометкаУдаления)
		|ГДЕ
		|	ФормыОбъектовМетаданных.Ссылка = &Ссылка";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

// Помещает справку проекта в хранилище
//
// Параметры:
//  Параметры      - Структура - Параметры проекта
//  АдресХранилища - УникальныйИдентификатор - Адрес во временном хранилище, в которое будет помещен лог операций
//
Процедура ОбновитьСправкуПроекта(Параметры, АдресХранилища = Неопределено) Экспорт
	
	Если Не Параметры.Свойство("Проект") 
	     ИЛИ ТипЗнч(Параметры.Проект) <> Тип("СправочникСсылка.Проекты")
	     ИЛИ Не Параметры.Свойство("КаталогХранилищаДляЗагрузкиМетаданных")
	     ИЛИ Не ЗначениеЗаполнено(Параметры.КаталогХранилищаДляЗагрузкиМетаданных) Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Параметры.ВыгружатьСправкуПриЗагрузкеМетаданных Тогда
		Возврат;
	КонецЕсли; 
	
	Проект = Параметры.Проект;
	Параметры.Вставить("КаталогВыгрузки",
	                    ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) 
	                  + ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути("Help_" + Новый УникальныйИдентификатор()));
	
	ПроверитьВерсиюПлатформы(Параметры);
	
	Если Параметры.Свойство("ДеревоМетаданных") Тогда
		ДеревоМетаданных = Параметры.ДеревоМетаданных;
	Иначе 
		ДеревоМетаданных = Обработки.РаботаСоСправкой.ДеревоМетаданныхДляСправки(Проект, Истина);	
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	Если Параметры.Свойство("ВключатьСсылкиНаСправкуПоискаВСписках") Тогда
		ДополнительныеПараметры.Вставить("ВключатьСсылкиНаСправкуПоискаВСписках", Параметры.ВключатьСсылкиНаСправкуПоискаВСписках);
	Иначе
		ДополнительныеПараметры.Вставить("ВключатьСсылкиНаСправкуПоискаВСписках", Ложь);
	КонецЕсли; 
	
	Если Параметры.Свойство("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку") Тогда
		ДополнительныеПараметры.Вставить("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку", Параметры.ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку);
	Иначе
		ДополнительныеПараметры.Вставить("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку", Ложь);
	КонецЕсли; 
	
	ДополнительныеПараметры.Вставить("КаталогВыгрузки", Параметры.КаталогВыгрузки);
	
	Ответ = Обработки.РаботаСоСправкой.СформироватьФайлыСправки(ДеревоМетаданных, Проект, ДополнительныеПараметры);
	СоответствиеФайловСправки = Ответ.СоответствиеФайловСправки;
	АдресФайлаЗахвата         = Ответ.АдресФайлаЗахвата;
	АдресФайлаЗагрузки        = Ответ.АдресФайлаЗагрузки;
	Параметры.Вставить("ИменаОбъектовДляЗахвата",             Ответ.ИменаОбъектовДляЗахвата);
	Параметры.Вставить("ИменаОбъектовДляЗагрузки",            Ответ.ИменаОбъектовДляЗагрузки);
	Параметры.Вставить("СоответствиеИменДляЗахватаИЗагрузки", Ответ.СоответствиеИменДляЗахватаИЗагрузки);
	
	Если СоответствиеФайловСправки.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Файлы справки не сформированы. Возможно для выбранного проекта нет элементов справки, 
		                      |либо в переданных настройках указаны объекты без элементов справки.'");
	КонецЕсли; 
	
	Параметры.Вставить("ИмяФайлаОбъектовДляЗахвата", ПолучитьИмяВременногоФайла("xml"));
	ФайлОбъектовДляЗахвата = ПолучитьИзВременногоХранилища(АдресФайлаЗахвата);
	ФайлОбъектовДляЗахвата.Записать(Параметры.ИмяФайлаОбъектовДляЗахвата);
	
	Параметры.Вставить("ИмяФайлаОбъектовДляЗагрузки", ПолучитьИмяВременногоФайла("txt"));
	ФайлОбъектовДляЗагрузки = ПолучитьИзВременногоХранилища(АдресФайлаЗагрузки);
	ФайлОбъектовДляЗагрузки.Записать(Параметры.ИмяФайлаОбъектовДляЗагрузки);
	
	СохранитьФайлыВыгрузки(Параметры.КаталогВыгрузки, СоответствиеФайловСправки);
	
	ПредставлениеОшибки = "";
	ПроизошлаОшибка     = Ложь;
	ТекстЛога           = "";
	Попытка
		
		ВыполнитьЗахватОбъектовВБазе(Параметры, ТекстЛога);
		ВыполнитьПомещениеОбъектовСправкиВБазу(Параметры, ТекстЛога);
		ВыполнитьПомещениеСправкиВХранилище(Параметры, ТекстЛога);
	
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПроизошлаОшибка     = Истина;
		
	КонецПопытки;
	
	Если ПроизошлаОшибка Тогда
	
		Попытка
			ВыполнитьОтменуЗахватаВХранилище(Параметры, ТекстЛога);
		Исключение
		КонецПопытки; 
	
	КонецЕсли; 
	
	Попытка
		УдалитьФайлы(Параметры.КаталогВыгрузки, "*");
	Исключение
	КонецПопытки;
	
	Если ПроизошлаОшибка Тогда
		
		Лог = Новый ТекстовыйДокумент;
		Лог.УстановитьТекст(ТекстЛога);
		ПоместитьВоВременноеХранилище(Лог, АдресХранилища);
		Лог = Неопределено;
		
		ВызватьИсключение ПредставлениеОшибки;
		
	КонецЕсли; 
	
КонецПроцедуры

// Помещает справку проекта в хранилище
//
// Параметры:
//  Параметры      - Структура - Параметры проекта
//  АдресХранилища - УникальныйИдентификатор - Адрес во временном хранилище, в которое будет помещен лог операций
//
Процедура ОбновитьСправкуПроектаEDT(Параметры, АдресХранилища = Неопределено) Экспорт
	
	Если Не Параметры.Свойство("Проект")
	     ИЛИ ТипЗнч(Параметры.Проект) <> Тип("СправочникСсылка.Проекты")
	     ИЛИ Не Параметры.Свойство("АдресGitСервера") 
	     ИЛИ Не Параметры.Свойство("ВеткаИмя") 
	     ИЛИ Не Параметры.Свойство("ИмяВеткиДляВыгрузкиСправки") 
	     ИЛИ Не Параметры.Свойство("ТекстКоммитаДляЗагрузкиСправки") Тогда
		Возврат;
	КонецЕсли; 
	
	ОбщийЛог = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Параметры.ВыгружатьСправкуПриЗагрузкеМетаданных Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не Параметры.Свойство("КаталогGitРепозитория") Тогда
		
		Результат = ОбщегоНазначенияСППР.ПолучитьФайлыИзGIT(Параметры);
		
		Если ЗначениеЗаполнено(Результат) И Результат <> "Already up to date." Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось выполнить клонирование ветки из GIT репозитория. Код ошибки:'") + Результат;
		КонецЕсли;
		
	КонецЕсли; 
	
	// Создание ветки при необходимости
	ВеткаСправкиСовпадаетСОсновной = (Параметры.ВеткаИмя = Параметры.ИмяВеткиДляВыгрузкиСправки);
	Если Не ВеткаСправкиСовпадаетСОсновной Тогда
		
		// Проверка того что локальная ветка уже есть
		ТекстКомандыПроверки = СтрШаблон("git ls-remote --heads ""%1"" %2", Параметры.КаталогGitРепозитория, Параметры.ИмяВеткиДляВыгрузкиСправки);
		Ответ = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКомандыПроверки, Параметры.КаталогGitРепозитория);
		ОбщийЛог = ОбщийЛог + Символы.ПС + ТекстКомандыПроверки + Символы.ПС + Ответ.Лог;
		ЛокальнаяВеткаУжеСуществует = ЗначениеЗаполнено(СокрЛП(Ответ.Лог));
		
		Если ЛокальнаяВеткаУжеСуществует Тогда
			
			ТекстКомандыПереключенияВетки = СтрШаблон("git checkout %1", Параметры.ИмяВеткиДляВыгрузкиСправки);
			Ответ = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКомандыПереключенияВетки, Параметры.КаталогGitРепозитория);
			ОбщийЛог = ОбщийЛог + Символы.ПС + ТекстКомандыПереключенияВетки + Символы.ПС + Ответ.Лог;
			
		Иначе 
			
			// Проверка того что удаленная ветка существует
			ТекстКоманды = СтрШаблон("git ls-remote --heads %1 %2", Параметры.АдресGitСервера, Параметры.ИмяВеткиДляВыгрузкиСправки);
			Ответ = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, Параметры.КаталогGitРепозитория);
			ОбщийЛог = ОбщийЛог + Символы.ПС + ТекстКоманды + Символы.ПС + Ответ.Лог;
			УдаленнаяВеткаСуществует = ЗначениеЗаполнено(СокрЛП(Ответ.Лог));
			
			Если УдаленнаяВеткаСуществует Тогда
				ТекстКомандыСозданияВетки = СтрШаблон("git checkout -b %1 --track origin/%1", Параметры.ИмяВеткиДляВыгрузкиСправки);
			Иначе
				ТекстКомандыСозданияВетки = СтрШаблон("git checkout -b %1", Параметры.ИмяВеткиДляВыгрузкиСправки);
			КонецЕсли; 
			
			Ответ = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКомандыСозданияВетки, Параметры.КаталогGitРепозитория);
			ОбщийЛог = ОбщийЛог + Символы.ПС + ТекстКомандыСозданияВетки + Символы.ПС + Ответ.Лог;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	// Выгрузка справки
	ДеревоМетаданных = ?(Параметры.Свойство("ДеревоМетаданных"),
	                     Параметры.ДеревоМетаданных,
	                     Обработки.РаботаСоСправкой.ДеревоМетаданныхДляСправки(Параметры.Проект, Истина));
	
	ДополнительныеПараметры = Новый Структура;
	Если Параметры.Свойство("ВключатьСсылкиНаСправкуПоискаВСписках") Тогда
		ДополнительныеПараметры.Вставить("ВключатьСсылкиНаСправкуПоискаВСписках", Параметры.ВключатьСсылкиНаСправкуПоискаВСписках);
	Иначе
		ДополнительныеПараметры.Вставить("ВключатьСсылкиНаСправкуПоискаВСписках", Ложь);
	КонецЕсли; 
	
	Если Параметры.Свойство("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку") Тогда
		ДополнительныеПараметры.Вставить("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку", Параметры.ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку);
	Иначе
		ДополнительныеПараметры.Вставить("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку", Ложь);
	КонецЕсли; 
	
	КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогGitРепозитория)
	                + Параметры.ПутьКПроектуВРепозитории + ПолучитьРазделительПути() + "src";
	ДополнительныеПараметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	
	Ответ = Обработки.РаботаСоСправкой.СформироватьФайлыСправки(ДеревоМетаданных, Параметры.Проект, ДополнительныеПараметры);
	
	// Запись файлов справки в каталог репозитория
	Для Каждого ФайлСправки Из Ответ.СоответствиеФайловСправки Цикл
		
		ДанныеПоОбъектуMDO = ПолучитьДанныеПоОбъектуMDO(ФайлСправки.Ключ);
		ПутьКФайлуMDO      = КаталогВыгрузки + ПолучитьРазделительПути() + ДанныеПоОбъектуMDO.Путь;
		
		ФайлMDO = Новый Файл(ПутьКФайлуMDO);
		Если ФайлMDO.Существует() Тогда
			
			ТекстМДО = ПолучитьТекстMDOФайла(ПутьКФайлуMDO);
			НаличиеСправки = НаличиеСправкиMDO(ТекстМДО, ДанныеПоОбъектуMDO.ТипОбъекта, ДанныеПоОбъектуMDO.ИмяФормы);
			
			// Добавляем запись в МДО файл при необходимости
			Если (Не ЗначениеЗаполнено(ДанныеПоОбъектуMDO.ИмяФормы) И Не НаличиеСправки.ЕстьСправкаОбъекта)
			 ИЛИ (ЗначениеЗаполнено(ДанныеПоОбъектуMDO.ИмяФормы) И НаличиеСправки.ЕстьФорма И Не НаличиеСправки.ЕстьСправкаФормы) Тогда
				ДобавитьСправкуMDO(ТекстМДО, ДанныеПоОбъектуMDO.ТипОбъекта, ДанныеПоОбъектуMDO.ИмяФормы);
				ЗаписатьТекстMDOФайла(ПутьКФайлуMDO, ТекстМДО);
			КонецЕсли;
			
			// Выгружаем файл справки если форма существует
			Если (ЗначениеЗаполнено(ДанныеПоОбъектуMDO.ИмяФормы) И НаличиеСправки.ЕстьФорма)
			 ИЛИ Не ЗначениеЗаполнено(ДанныеПоОбъектуMDO.ИмяФормы) Тогда
				
				ПутьКФайлу = КаталогВыгрузки + ПолучитьРазделительПути() + ФайлСправки.Ключ;
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ФайлСправки.Значение);
				ДвоичныеДанныеФайла.Записать(ПутьКФайлу);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	// commit и push
	ТекстКоммитаДляЗагрузкиСправки = ?(ЗначениеЗаполнено(ТекстКоммитаДляЗагрузкиСправки), 
	                                   ТекстКоммитаДляЗагрузкиСправки, "Help update");
	
	ТекстКомандыКоммита = СтрШаблон("git add ./ --all
	                                |git commit -m ""%1""
	                                |git push -u origin ""%2""", ТекстКоммитаДляЗагрузкиСправки, Параметры.ИмяВеткиДляВыгрузкиСправки);
	
	Ответ = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКомандыКоммита, Параметры.КаталогGitРепозитория);
	ОбщийЛог = ОбщийЛог + Ответ.Лог;
	
	Лог = Новый ТекстовыйДокумент;
	Лог.УстановитьТекст(ОбщийЛог);
	ПоместитьВоВременноеХранилище(Лог, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьЗахватОбъектовВБазе(Параметры, ТекстЛога)
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало захвата объектов базы для обновления справки'"));
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
				| %СтрокаСоединенияИБДляЗагрузкиМетаданных% 
				| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
				| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryLock -objects %ИмяФайлаОбъектовДляЗахвата% /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",
	                                   Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%",
	                                   Параметры.ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединенияИБДляЗагрузкиМетаданных%",
	                                   Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяИБДляЗагрузкиМетаданных%",
	                                   Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяИБДляЗагрузкиМетаданных%",
	                                   Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилищаДляЗагрузкиМетаданных%",
	                                   Параметры.КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилищаДляЗагрузкиМетаданных%",
	                                   Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", 
	                                   Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаОбъектовДляЗахвата%",
	                                   Параметры.ИмяФайлаОбъектовДляЗахвата);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%",
	                                   Параметры.ИмяФайлаРезультатов);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание захвата объектов базы для обновления справки'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
	
	// Проверить успешность выполнения
	Если КодВозврата <> 0  Тогда
		
		ТекстЛога = ПрочитатьЛог(Параметры);
		
		Если ЭтоОшибкаЗахватаДругимиПользователями(ТекстЛога) Тогда
			ПереформироватьФайлЗагрузки(Параметры, ТекстЛога);
		Иначе 
			ТекстЛога = ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
			ВызватьИсключение НСтр("ru = 'При обновлении справки возникли ошибки (см. Журнал регистрации).
				|Захват объектов в базе закончился неудачей.'");
		КонецЕсли; 
	Иначе 
		ТекстЛога = ПрочитатьЛог(Параметры);
	КонецЕсли;
	
КонецФункции

Функция ЭтоОшибкаЗахватаДругимиПользователями(ТекстЛога)
	
	Возврат Найти(ТекстЛога, НСтр("ru = 'Объект захвачен для редактирования другим пользователем: '")) <> 0;
	
КонецФункции

Процедура ПереформироватьФайлЗагрузки(Параметры, ТекстЛога)
	
	ШаблонСтрокиПоиска = НСтр("ru = 'Объект захвачен для редактирования другим пользователем: %ИмяОбъекта% '");
	
	ИменаОбъектовДляЗагрузкиСУчетомЗахвата = Новый Массив;
	
	КомментарийДляЛога = "Файлы пропускаемые при загрузке, по причине захвата их другими пользователями:
	                     |";
	
	Для Каждого СтрокаСоответсвия Из Параметры.СоответствиеИменДляЗахватаИЗагрузки Цикл
		
		СтрокаПоиска = СтрЗаменить(ШаблонСтрокиПоиска, "%ИмяОбъекта%", СтрокаСоответсвия.Ключ);
		
		Если Найти(ТекстЛога, СтрокаПоиска) <> 0 Тогда
			КомментарийДляЛога = КомментарийДляЛога + СтрокаСоответсвия.Ключ + Символы.ПС;
		Иначе 
			ИменаОбъектовДляЗагрузкиСУчетомЗахвата.Добавить(СтрокаСоответсвия.Значение);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ИменаОбъектовДляЗагрузкиСУчетомЗахвата.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru='Все объекты захвачены другими пользователями'");
		ДобавитьЗаписьВЛог(Параметры, ТекстСообщения, "", УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При обновлении справки возникли ошибки (см. Журнал регистрации). '") + ТекстСообщения;
	
	КонецЕсли; 
	
	АдресФайлаЗагрузки = Обработки.РаботаСоСправкой.ПолучитьФайлЗагрузки(ИменаОбъектовДляЗагрузкиСУчетомЗахвата, 
	                                                                     Параметры.КаталогВыгрузки);
	
	Параметры.Вставить("ИмяФайлаОбъектовДляЗагрузки", ПолучитьИмяВременногоФайла("txt"));
	ФайлОбъектовДляЗагрузки = ПолучитьИзВременногоХранилища(АдресФайлаЗагрузки);
	ФайлОбъектовДляЗагрузки.Записать(Параметры.ИмяФайлаОбъектовДляЗагрузки);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Обнаружены файлы недоступные для захвата'"), КомментарийДляЛога);
	
КонецПроцедуры

Функция ВыполнитьПомещениеОбъектовСправкиВБазу(Параметры, ТекстЛога)
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало помещения объектов справки в базу'"));
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
				| %СтрокаСоединенияИБДляЗагрузкиМетаданных%
				| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
				| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
				| /LoadConfigFromFiles %КаталогВыгрузки% -format Plain -listfile %ИмяФайлаОбъектовДляЗагрузки% /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%",                         Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",                                    Параметры.ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%",          Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%",           Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%",        Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%",            Параметры.КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%",    Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогВыгрузки%",                                  Параметры.КаталогВыгрузки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаОбъектовДляЗагрузки%",                      Параметры.ИмяФайлаОбъектовДляЗагрузки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%",                              Параметры.ИмяФайлаРезультатов);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание помещения объектов справки в базу'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
	
	// Проверить успешность выполнения
	Если КодВозврата <> 0  Тогда
		
		ТекстЛога = ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При обновлении справки возникли ошибки (см. Журнал регистрации).
			|Помещение объектов справки в базу закончилось неудачей.'");
	Иначе 
		ТекстЛога = ПрочитатьЛог(Параметры);
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьПомещениеСправкиВХранилище(Параметры, ТекстЛога)
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало помещения справки в хранилище'"));
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
				| %СтрокаСоединенияИБДляЗагрузкиМетаданных%
				| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
				| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryCommit -objects %ИмяФайлаОбъектовДляЗахвата% -comment ""Загрузка справки из СППР"" /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%",                         Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",                                    Параметры.ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%",          Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%",           Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%",        Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%",            Параметры.КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%",    Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаОбъектовДляЗахвата%",                       Параметры.ИмяФайлаОбъектовДляЗахвата);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%",                              Параметры.ИмяФайлаРезультатов);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание помещения справки в хранилище'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
	
	// Проверить успешность выполнения
	Если КодВозврата <> 0  Тогда
		
		ТекстЛога = ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При помещении справки в хранилище возникли ошибки (см. Журнал регистрации).
			|Помещение справки в хранилище закончилось неудачей.'");
	Иначе 
		ТекстЛога = ПрочитатьЛог(Параметры);
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьОтменуЗахватаВХранилище(Параметры, ТекстЛога)
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало отмены захвата объектов в хранилище'"));
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
				| %СтрокаСоединенияИБДляЗагрузкиМетаданных%
				| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
				| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryUnlock -force /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%",                         Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",                                    Параметры.ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%",          Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%",           Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%",        Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%",            Параметры.КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%",    Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаОбъектовДляЗахвата%",                       Параметры.ИмяФайлаОбъектовДляЗахвата);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%",                              Параметры.ИмяФайлаРезультатов);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание отмены захвата объектов в хранилище'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
	
	// Проверить успешность выполнения
	Если КодВозврата <> 0  Тогда
		
		ТекстЛога = ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При отмене захвата в хранилище возникли ошибки (см. Журнал регистрации).
			|Отмена захвата в хранилище закончилась неудачей.'");
	Иначе 
		ТекстЛога = ПрочитатьЛог(Параметры);
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьВерсиюПлатформы(Параметры)
	
	ВерсияДляСравнения = "8.3.8.0";
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ВерсияПлатформы = ?(ЗначениеЗаполнено(Параметры.ВерсияПлатформы), 
	                    Параметры.ВерсияПлатформы,
	                    СистемнаяИнформация.ВерсияПриложения);
	
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияДляСравнения, ВерсияПлатформы) > 0 Тогда
		ВызватьИсключение НСтр("ru = 'Обновление справки не поддерживается, т.к. версия платформы, используемая в проекте младше 8.3.8. '");
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьТекстMDOФайла(Путь)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(Путь, КодировкаТекста.UTF8);
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
	
КонецФункции

Процедура ЗаписатьТекстMDOФайла(Путь, Текст)
	
	ФайловыйПоток = Новый ФайловыйПоток(Путь, РежимОткрытияФайла.Создать);
	ЗаписьТекста = Новый ЗаписьТекста(ФайловыйПоток,,,, Ложь);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

Функция НаличиеСправкиMDO(Текст, ТипОбъекта, ИмяФормы = "")
	
	ИмяФормыВТегах = СтрШаблон("<name>%1</name>", ИмяФормы);
	
	ВнутриОбъекта     = Ложь;
	ВнутриФормы       = Ложь;
	ИмяФормыСовпадает = Ложь;
	
	ЕстьСправкаОбъекта = Ложь;
	ЕстьСправкаФормы   = Ложь;
	ЕстьФорма          = Ложь;
	
	МассивСтрок = СтрРазделить(Текст, Символы.ПС);
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если Не ВнутриОбъекта И СтрНачинаетсяС(СокрЛП(Строка), "<mdclass:" + ТипОбъекта) Тогда
			ВнутриОбъекта = Истина;
		КонецЕсли;
		
		Если ВнутриОбъекта И СтрНачинаетсяС(СокрЛП(Строка), "</mdclass:" + ТипОбъекта) Тогда
			ВнутриОбъекта = Ложь;
		КонецЕсли;
		
		Если ВнутриОбъекта И Не ВнутриФормы И СтрНачинаетсяС(СокрЛП(Строка), "<forms uuid=") Тогда
			ВнутриФормы = Истина;
		КонецЕсли;
		
		Если ВнутриОбъекта И ВнутриФормы И СокрЛП(Строка) = "</forms>" Тогда
			ВнутриФормы       = Ложь;
			ИмяФормыСовпадает = Ложь;
		КонецЕсли;
		
		Если ВнутриФормы И СокрЛП(Строка) = ИмяФормыВТегах Тогда
			ИмяФормыСовпадает = Истина;
			ЕстьФорма         = Истина;
		КонецЕсли; 
		
		Если СокрЛП(Строка) = "<help>" И ВнутриОбъекта Тогда
			
			Если ИмяФормыСовпадает Тогда
				ЕстьСправкаФормы = Истина;
			КонецЕсли; 
			
			Если Не ВнутриФормы Тогда
				ЕстьСправкаОбъекта = Истина;
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Ответ = Новый Структура;
	Ответ.Вставить("ЕстьСправкаОбъекта", ЕстьСправкаОбъекта);
	Ответ.Вставить("ЕстьСправкаФормы",   ЕстьСправкаФормы);
	Ответ.Вставить("ЕстьФорма",          ЕстьФорма);
	
	Возврат Ответ;
	
КонецФункции

Процедура ДобавитьСправкуMDO(Текст, ТипОбъекта, ИмяФормы = "")
	
	ИмяФормыВТегах = СтрШаблон("<name>%1</name>", ИмяФормы);
	
	ВнутриОбъекта     = Ложь;
	ВнутриФормы       = Ложь;
	ИмяФормыСовпадает = Ложь;
	
	МассивСтрок = СтрРазделить(Текст, Символы.ПС);
	Для Счетчик = 0 По МассивСтрок.ВГраница() Цикл
		
		Строка = МассивСтрок[Счетчик];
		
		Если Не ВнутриОбъекта И СтрНачинаетсяС(СокрЛП(Строка), "<mdclass:" + ТипОбъекта) Тогда
			ВнутриОбъекта = Истина;
		КонецЕсли;
		
		Если ВнутриОбъекта И СтрНачинаетсяС(СокрЛП(Строка), "</mdclass:" + ТипОбъекта) Тогда
			
			Если Не ЗначениеЗаполнено(ИмяФормы) Тогда
				МассивСтрок.Вставить(Счетчик, "  <help>
				                              |    <pages>
				                              |      <lang>ru</lang>
				                              |    </pages>
				                              |  </help>");
				Прервать;
			КонецЕсли; 
			
			ВнутриОбъекта = Ложь;
		КонецЕсли;
		
		Если ВнутриОбъекта И Не ВнутриФормы И СтрНачинаетсяС(СокрЛП(Строка), "<forms uuid=") Тогда
			ВнутриФормы = Истина;
		КонецЕсли;
		
		Если ВнутриОбъекта И ВнутриФормы И СокрЛП(Строка) = "</forms>" Тогда
			
			Если ИмяФормыСовпадает Тогда
				МассивСтрок.Вставить(Счетчик, "    <help>
				                              |      <pages>
				                              |        <lang>ru</lang>
				                              |      </pages>
				                              |    </help>");
				Прервать;
			КонецЕсли; 
			
			ВнутриФормы       = Ложь;
			ИмяФормыСовпадает = Ложь;
		КонецЕсли;
		
		Если ВнутриФормы И СокрЛП(Строка) = ИмяФормыВТегах Тогда
			ИмяФормыСовпадает = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Текст = СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецПроцедуры

Функция ПолучитьДанныеПоОбъектуMDO(Путь)
	
	Ответ = Новый Структура;
	Ответ.Вставить("Путь",       "");
	Ответ.Вставить("ИмяФормы",   "");
	Ответ.Вставить("ТипОбъекта", "");
	
	ИндексСправки = СтрНайти(Путь, "/Help/");
	Если ИндексСправки <> 0 Тогда
		
		ПутьДоОбъекта = Сред(Путь, 1, ИндексСправки - 1);
		ИндексФормы = СтрНайти(ПутьДоОбъекта, "/Forms/");
		
		Если ИндексФормы <> 0 Тогда
			Ответ.ИмяФормы = Сред(ПутьДоОбъекта, ИндексФормы + СтрДлина("/Forms/"));
			ПутьДоОбъекта = Сред(ПутьДоОбъекта, 1, ИндексФормы - 1);
		КонецЕсли;
		
		КомпонентыПути = СтрРазделить(ПутьДоОбъекта, "/");
		
		Ответ.Путь       = СтрШаблон("%1/%2.mdo", ПутьДоОбъекта, КомпонентыПути[КомпонентыПути.ВГраница()]);
		Ответ.ТипОбъекта = ТипОбъектаВединственномЧисле(СтрРазделить(Путь, "/")[0]);
		
	КонецЕсли; 
	
	Возврат Ответ;
	
КонецФункции

Функция ТипОбъектаВединственномЧисле(ИмяТипа)
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("AccountingRegisters",         "AccountingRegister");
	СоответствиеТипов.Вставить("AccumulationRegisters",       "AccumulationRegister");
	СоответствиеТипов.Вставить("BusinessProcesses",           "BusinessProcess");
	СоответствиеТипов.Вставить("CalculationRegisters",        "CalculationRegister");
	СоответствиеТипов.Вставить("Catalogs",                    "Catalog");
	СоответствиеТипов.Вставить("ChartsOfAccounts",            "ChartOfAccounts");
	СоответствиеТипов.Вставить("ChartsOfCalculationTypes",    "ChartOfCalculationTypes");
	СоответствиеТипов.Вставить("ChartsOfCharacteristicTypes", "ChartOfCharacteristicTypes");
	СоответствиеТипов.Вставить("CommandGroups",               "CommandGroup");
	СоответствиеТипов.Вставить("CommonAttributes",            "CommonAttribute");
	СоответствиеТипов.Вставить("CommonCommands",              "CommonCommand");
	СоответствиеТипов.Вставить("CommonForms",                 "CommonForm");
	СоответствиеТипов.Вставить("CommonModules",               "CommonModule");
	СоответствиеТипов.Вставить("CommonPictures",              "CommonPicture");
	СоответствиеТипов.Вставить("CommonTemplates",             "CommonTemplate");
	СоответствиеТипов.Вставить("Constants",                   "Constant");
	СоответствиеТипов.Вставить("DataProcessors",              "DataProcessor");
	СоответствиеТипов.Вставить("DefinedTypes",                "DefinedType");
	СоответствиеТипов.Вставить("DocumentJournals",            "DocumentJournal");
	СоответствиеТипов.Вставить("DocumentNumerators",          "DocumentNumerator");
	СоответствиеТипов.Вставить("Documents",                   "Document");
	СоответствиеТипов.Вставить("Enums",                       "Enum");
	СоответствиеТипов.Вставить("EventSubscriptions",          "EventSubscription");
	СоответствиеТипов.Вставить("ExchangePlans",               "ExchangePlan");
	СоответствиеТипов.Вставить("FilterCriteria",              "FilterCriterion");
	СоответствиеТипов.Вставить("FunctionalOptions",           "FunctionalOption");
	СоответствиеТипов.Вставить("FunctionalOptionsParameters", "FunctionalOptionsParameter");
	СоответствиеТипов.Вставить("HTTPServices",                "HTTPService");
	СоответствиеТипов.Вставить("InformationRegisters",        "InformationRegister");
	СоответствиеТипов.Вставить("Reports",                     "Report");
	СоответствиеТипов.Вставить("Roles",                       "Role");
	СоответствиеТипов.Вставить("ScheduledJobs",               "ScheduledJob");
	СоответствиеТипов.Вставить("SessionParameters",           "SessionParameter");
	СоответствиеТипов.Вставить("SettingsStorages",            "SettingsStorage");
	СоответствиеТипов.Вставить("StyleItems",                  "StyleItem");
	СоответствиеТипов.Вставить("Styles",                      "Style");
	СоответствиеТипов.Вставить("Subsystems",                  "Subsystem");
	СоответствиеТипов.Вставить("Tasks",                       "Task");
	СоответствиеТипов.Вставить("WebServices",                 "WebService");
	СоответствиеТипов.Вставить("WSReferences",                "WSReference");
	СоответствиеТипов.Вставить("XDTOPackages",                "XDTOPackage");
	
	Ответ = СоответствиеТипов.Получить(ИмяТипа);
	Возврат ?(Ответ <> Неопределено, Ответ, "");
	
КонецФункции

#КонецОбласти

#Область Прочие

Функция ДобавитьЗаписьВЛог(Параметры, ИмяСобытия, Комментарий = "", Уровень = Неопределено, ПрочитатьВесьЛогВЖР = Ложь)

	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли; 
	
	ТекстЛога = "";
	// Считываем весь лог в журнал регистрации.
	Если ПрочитатьВесьЛогВЖР Тогда
		ТекстЛога = ПрочитатьЛог(Параметры);
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление справки'") + "." + ИмяСобытия, 
		Уровень,
		Метаданные.Справочники.Проекты,
		Параметры.Проект,
		Комментарий + ?(ЗначениеЗаполнено(ТекстЛога), Символы.ПС + ТекстЛога, ""));
	
	Лог  = Новый ТекстовыйДокумент;
	Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(Параметры.ИмяФайлаЛогов);
	КонецЕсли;
	Лог.ДобавитьСтроку(Строка(ТекущаяДата()) + " " +  ИмяСобытия);
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Лог.ДобавитьСтроку(Комментарий);
	КонецЕсли; 
	Лог.Записать(Параметры.ИмяФайлаЛогов);
	Лог = Неопределено;
	
	Возврат ТекстЛога;
	
КонецФункции

Функция ПрочитатьЛог(Параметры)
	
	Лог  = Новый ТекстовыйДокумент;
	Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(Параметры.ИмяФайлаЛогов);
	КонецЕсли;
		
	Возврат Лог.ПолучитьТекст();
	
КонецФункции

Процедура СохранитьФайлыВыгрузки(КаталогВыгрузки, СоответствиеФайловСправки)
	
	Файл = Новый Файл(КаталогВыгрузки);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(КаталогВыгрузки);
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из СоответствиеФайловСправки Цикл
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ЭлементСоответствия.Значение);
		ДвоичныеДанные.Записать(КаталогВыгрузки + ЭлементСоответствия.Ключ);
		
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти
