#Область СлужебныйПрограммныйИнтерфейс

// Регламентное задание, выполняющее создание патчей.
Процедура ПроверитьСоздатьПатчи() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеПатчей);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.Версия КАК Версия,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ВерсииПатчей.Параметры КАК Параметры,
		|	Патчи.Ошибка КАК Ошибка,
		|	Патчи.Код КАК Код,
		|	Патчи.Описание КАК Описание,
		|	Патчи.Владелец КАК Проект,
		|	Патчи.РазделПроекта КАК РазделПроекта,
		|	ВерсииПатчей.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патчи КАК Патчи
		|		ПО (Патчи.Ссылка = ВерсииПатчей.Патч)
		|ГДЕ
		|	ВерсииПатчей.Состояние = &Состояние
		|	И НЕ Патчи.ПометкаУдаления";
	Запрос.УстановитьПараметр("Состояние", Перечисления.СтатусыПатчей.ОжиданиеИсправления);
	Результат = Запрос.Выполнить().Выгрузить();
	
	ПараметрыСозданияПатча = НовыеПараметрыСозданияПатчей();
	УдаляемыеКаталоги = Новый Массив;
	Для Каждого Строка Из Результат Цикл
		
		Ошибка = Строка.Ошибка;
		АвторИсправления = Неопределено;
		СвойстваОшибки = Новый Структура;
		ЗаполнитьСвойстваОшибки(СвойстваОшибки, Строка);
		Если СвойстваОшибки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СвойстваОшибки.Свойство("Исправил") Тогда
			АвторИсправления = СвойстваОшибки.Исправил;
		КонецЕсли;
		
		ПараметрыПатча = ПараметрыПатча(Строка.Параметры.Получить());
		Версия = Строка.Версия;
		СвойстваВерсии  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Владелец, Ветка.Имя, ВерсияПлатформы");
		СвойстваПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваВерсии.Владелец, 
			"АдресGitСервера, Ветка.Имя, КаталогGitРепозитория,
			|КаталогGitРепозиторияДляПатчей, Библиотека");
		
		КаталогGitРепозиторияДляПатчей = СвойстваПроекта.КаталогGitРепозиторияДляПатчей;
		Если ЗначениеЗаполнено(КаталогGitРепозиторияДляПатчей) Тогда
			СвойстваПроекта.КаталогGitРепозитория = КаталогGitРепозиторияДляПатчей;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СвойстваПроекта.КаталогGitРепозитория) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресХранилища = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("""%1""", СвойстваПроекта.КаталогGitРепозитория);
		ИнформацияОПатче = НоваяИнформацияОПатче(Строка.Патч, Версия, СвойстваОшибки.ПубликуемоеОписание);
		ИнформацияОПатче.Проект = СвойстваВерсии.Владелец;
		ИнформацияОПатче.ЭтоБиблиотека = СвойстваПроекта.Библиотека;
		ИнформацияОПатче.УникальныйИдентификатор = Строка.УникальныйИдентификатор;
		ИнформацияОПатче.АвторИсправления = АвторИсправления;
		
		Если Не ЗначениеЗаполнено(СвойстваВерсии.ВерсияПлатформы) Тогда
			ТекстОшибки = НСтр("ru = 'В карточке версии ""%1"" проекта не заполнено свойство ""Версия платформы"".
				|Создание патча отменено.
				|Необходимо указать версию платформы равную используемому режиму совместимости конфигурации.
				|Например, 8.3.14.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Версия);
			ИнформацияОПатче.ТекстОшибки = ТекстОшибки;
			
			ЗакончитьСозданиеПатча(ИнформацияОПатче);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПодключитьсяКХранилищу(АдресХранилища, СвойстваПроекта, СвойстваВерсии.ВеткаИмя);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ИнформацияОПатче.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			ЗакончитьСозданиеПатча(ИнформацияОПатче);
			Продолжить;
		КонецПопытки;
		
		ДатаПервойОпубликованнойСборки = ДатаПервойОпубликованнойСборки(Версия);
		Если Не ЗначениеЗаполнено(ДатаПервойОпубликованнойСборки) Тогда
			ТекстОшибки = НСтр("ru = 'Нет ни одной опубликованной сборки для версии ""%1"".
				|Создание патча отменено.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(Версия));
			ИнформацияОПатче.ТекстОшибки = ТекстОшибки;
			
			ЗакончитьСозданиеПатча(ИнформацияОПатче);
			Продолжить;
		КонецЕсли;
		
		НомерОшибкиВДругойУчетнойСистеме = СвойстваОшибки.НомерОшибкиВДругойУчетнойСистеме;
		Если Не ЗначениеЗаполнено(НомерОшибкиВДругойУчетнойСистеме) Тогда
			ПараметрыСозданияПатча.СтрокаПоискаОшибки = СтрРазделить(Справочники.Ошибки.ТекстДляХранилищаКонфигурации(Ошибка), Символы.ПС)[0];
		Иначе
			Проверка = СтрЗаменить(НомерОшибкиВДругойУчетнойСистеме, " ", "");
			Если Проверка <> НомерОшибкиВДругойУчетнойСистеме Тогда
				ТекстОшибки = НСтр("ru = 'В качестве значения в поле Ошибка указано недопустимое значение.
					|Номер ошибки может содержать буквы, цифры и символ ""-"".'");
				ИнформацияОПатче.ТекстОшибки = ТекстОшибки;
				ЗакончитьСозданиеПатча(ИнформацияОПатче);
				Продолжить;
			КонецЕсли;
			ПараметрыСозданияПатча.СтрокаПоискаОшибки = НомерОшибкиВДругойУчетнойСистеме;
		КонецЕсли;
		
		ТекущийСтатусПатча = ЗначенияСвойствВерсииПатча(Строка.УникальныйИдентификатор, "Состояние");
		Если ТекущийСтатусПатча.Состояние <> Перечисления.СтатусыПатчей.ОжиданиеИсправления Тогда
			// Например, разработчик выбрал ручное создание патча.
			Продолжить;
		КонецЕсли;
		
		ПараметрыСозданияПатча.АдресХранилища = АдресХранилища;
		ПараметрыСозданияПатча.НомерОшибки    = СвойстваОшибки.Код;
		ПараметрыСозданияПатча.Описание       = СвойстваОшибки.ПубликуемоеОписание;
		ПараметрыСозданияПатча.РазделПроекта  = СвойстваОшибки.РазделПроекта;
		ПараметрыСозданияПатча.ЭтоБиблиотека  = СвойстваПроекта.Библиотека;
		ПараметрыСозданияПатча.НомерПатча     = ПараметрыПатча.НомерПатча;
		ПараметрыСозданияПатча.ИмяКонфигурации    = ИмяКонфигурации(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваОшибки.Владелец, "ИмяКонфигурации"));
		ПараметрыСозданияПатча.ВерсияКонфигурации = Версия;
		ПараметрыСозданияПатча.ДатаПервойОпубликованнойСборки = ДатаПервойОпубликованнойСборки;
		ПараметрыСозданияПатча.УникальныйИдентификатор        = Строка.УникальныйИдентификатор;
		ПараметрыСозданияПатча.Вставить("ЗаписьРегистра", Строка);
		ПараметрыСозданияПатча.КоммитыИсправления = ПараметрыПатча.КоммитыИсправления;
		
		СоздатьКаталог(ПараметрыСозданияПатча.КаталогСохраненияПатча);
		УдаляемыеКаталоги.Добавить(ПараметрыСозданияПатча.КаталогСохраненияПатча);
		
		Попытка
			РезультатСоздания = ИсправлениеОшибки(ПараметрыСозданияПатча);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ИнформацияОПатче.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			// При исключительной ситуации создание патчей не прерываем, текст ошибки записываем в патч.
			ЗакончитьСозданиеПатча(ИнформацияОПатче);
			Продолжить;
		КонецПопытки;
		
		Если РезультатСоздания = Неопределено Тогда
			Продолжить; // Закладок по ошибке еще нет.
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ИнформацияОПатче, РезультатСоздания);
		
		ИнформацияОПатче.НачальнаяСборка = НачальнаяСборкаДляПатча(ИнформацияОПатче.НачалоДействияПатча, Версия);
		ИнформацияОПатче.ПоследняяОпубликованнаяСборка = ПоследняяОпубликованнаяСборка(Версия,
			РезультатСоздания.НачалоДействияПатча,
			РезультатСоздания.ДатаИсправления);
		
		ЗакончитьСозданиеПатча(ИнформацияОПатче);
	КонецЦикла;
	
	Для Каждого УдаляемыйКаталог Из УдаляемыеКаталоги Цикл
		Попытка
			УдалитьФайлы(УдаляемыйКаталог);
		Исключение
			// Удаление будет выполнено автоматически, средствами платформы.
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик регламентного задания, рассчитывающего применимость
// патча и его публикацию.
//
Процедура ОпубликоватьПатчи() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПубликацияПатчей);
	РассчитатьПрименимостьИОпубликовать();
	
КонецПроцедуры

// Проверяет применимость патчей и отправляет новую информацию
// для публикации.
//
Процедура АктуализироватьПрименимостьПатчей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПубликацияПатчей);
	РасчитатьПрименимостьДляНовыхСборок();
	
КонецПроцедуры

// При записи опубликованной сборки регистрирует её на плане обмена для проверки
// применимости к ней библиотечных патчей.
//
Процедура ЗарегистрироватьСборкуДляПроверкиПатчей(Ссылка, Опубликована, Версия) Экспорт
	
	Если Не Опубликована Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Библиотека КАК ЭтоБиблиотека,
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	ВерсииПроекта.СоздаватьПатчи КАК СоздаватьПатчи
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПроекта.Ссылка = &Версия";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Сведения = Результат[0];
	
	Если Не ЗначениеЗаполнено(Сведения.ИдентификаторПрограммы) Тогда
		ЭтоНепубликуемаяБиблиотекаСПатчами = Сведения.ЭтоБиблиотека И Сведения.СоздаватьПатчи;
		Если Не ЭтоНепубликуемаяБиблиотекаСПатчами Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Узел = ПланыОбмена.ОбменДаннымиССервисомПубликации.Узел();
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Ссылка);
	
КонецПроцедуры

// Добавляет новый патч в справочник Патчи.
// После чего создает версии патча.
// Версии, для которых надо создать патч, вычисляются автоматически.
//
Процедура ДобавитьПатч(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ошибка", Объект.Ссылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Патчи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Патчи КАК Патчи
		|ГДЕ
		|	Патчи.Ошибка = &Ошибка
		|	И НЕ Патчи.ПометкаУдаления";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Патч = Справочники.Патчи.СоздатьЭлемент();
		Патч.Ошибка = Объект.Ссылка;
		Патч.Описание = Объект.ПубликуемоеОписание;
		Патч.Владелец = Объект.Владелец;
		Патч.АвторИсправления = Объект.Исправил;
		Патч.Наименование = Объект.Наименование;
		Патч.Записать();
	Иначе
		Патч = Результат[0].Ссылка;
	КонецЕсли;
	ДобавитьВерсииПатчаПоОшибке(Патч.Ссылка, Объект);
	
КонецПроцедуры

Функция ПараметрыПатча(Параметры) Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("Лог", Новый Массив);
	НовыеПараметры.Вставить("ЛогОшибок", Новый Массив);
	НовыеПараметры.Вставить("НомерПатча", 0);
	НовыеПараметры.Вставить("КоличествоПопытокПубликации", 0);
	НовыеПараметры.Вставить("ИзмененияПрименимости", Неопределено);
	НовыеПараметры.Вставить("ПатчиБазовыхВерсий", Новый Массив);
	НовыеПараметры.Вставить("КоммитыИсправления", Новый Массив);
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Возврат НовыеПараметры;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыеПараметры, Параметры);
	
	Возврат НовыеПараметры;
	
КонецФункции

Процедура ДобавитьВерсииПатчаПоОшибке(Патч, Параметры) Экспорт
	СтатусОшибки = Параметры.Статус;
	
	ВерсииИсправленияОшибки = ВерсииИсправленияОшибки(Параметры);
	
	ОжидатьИсправления = (СтатусОшибки <> Перечисления.СтатусыОшибок.Закрыта
		                И СтатусОшибки <> Перечисления.СтатусыОшибок.ПроверенаИсправлена
		                И СтатусОшибки <> Перечисления.СтатусыОшибок.Исправлена);
	
	СозданиеПатчейПоВерсиям = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВерсииИсправленияОшибки, "СоздаватьПатчи");
	
	Для Каждого Версия Из ВерсииИсправленияОшибки Цикл
		Если Не СозданиеПатчейПоВерсиям[Версия] Тогда
			Продолжить;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Истина);
		ДобавитьПатчНаКонкретнуюВерсию(Патч, Версия, ОжидатьИсправления);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЦикла;
КонецПроцедуры

// Добавляет патч для ошибки на конкретную версию.
//
Процедура ДобавитьПатчНаКонкретнуюВерсию(ПатчСсылка, Версия, ОжидатьИсправления = Истина, ТребуетсяПатч = Неопределено, Замещающий = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Патч", ПатчСсылка);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.Патч = &Патч
		|	И ВерсииПатчей.Версия = &Версия";
	Патчи = Запрос.Выполнить().Выгрузить();
	
	НужноДобавитьПатч = Истина;
	ИзмененнаяВерсияПатча = Неопределено;
	НомерПатча = 1;
	УдаляемыеПатчиБазовых = Новый Массив;
	Для Каждого ВерсияПатча Из Патчи Цикл
		ВерсияПатчаИзменена = Ложь;
		Если ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Отозван
			Или (Замещающий И ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Опубликован) Тогда
			Если Не ЗначениеЗаполнено(ВерсияПатча.ПодписанДляКонфигурации) Тогда
				НомерПатча = НомерПатча + 1;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЭтоБазовыйПатч = ЗначениеЗаполнено(ВерсияПатча.ПодписанДляКонфигурации);
		
		Если Замещающий И Не ОжидатьИсправления Тогда
			НужноДобавитьПатч = Истина;
		ИначеЕсли Не ЭтоБазовыйПатч Тогда
			НужноДобавитьПатч = Ложь;
		КонецЕсли;
		Если ОжидатьИсправления Тогда
			Если ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Опубликован
				Или ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Публикуется Тогда
				Результат = ОтзывПатча(ВерсияПатча.УникальныйИдентификатор);
				Если Результат.Успешно Тогда
					ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Отозван;
				Иначе
					Параметры = ПараметрыПатча(ВерсияПатча.Параметры.Получить());
					ЗаписьЛогаОшибки = НСтр("ru = 'Ошибка отзыва патча'");
					ДобавитьОшибкуВЛог(Параметры, ЗаписьЛогаОшибки, Результат.ТекстОшибки);
					ВерсияПатча.Параметры = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(9));
					
					ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.ОшибкаОтзыва;
				КонецЕсли;
				НужноДобавитьПатч = Истина;
			Иначе
				Если ТребуетсяПатч = Ложь Тогда
					Состояние = Перечисления.СтатусыПатчей.ПатчНеТребуется;
					ВерсияПатчаИзменена = Истина;
				ИначеЕсли ВерсияПатча.Состояние <> Перечисления.СтатусыПатчей.ПатчНеТребуется Тогда
					Если ЗначениеЗаполнено(ВерсияПатча.ПодписанДляКонфигурации) Тогда
						УдаляемыеПатчиБазовых.Добавить(ВерсияПатча);
					Иначе
						Состояние = Перечисления.СтатусыПатчей.ОжиданиеИсправления;
						ВерсияПатчаИзменена = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ВерсияПатчаИзменена Тогда
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
					ЭлементБлокировкиДанных.УстановитьЗначение("Патч", ВерсияПатча.Патч);
					ЭлементБлокировкиДанных.УстановитьЗначение("Версия", ВерсияПатча.Версия);
					ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", ВерсияПатча.УникальныйИдентификатор);
					
					НачатьТранзакцию();
					Попытка
						БлокировкаДанных.Заблокировать();
						
						Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
						Набор.Отбор.Патч.Установить(ВерсияПатча.Патч);
						Набор.Отбор.Версия.Установить(ВерсияПатча.Версия);
						Набор.Отбор.УникальныйИдентификатор.Установить(ВерсияПатча.УникальныйИдентификатор);
						Набор.Прочитать();
						
						Запись = Набор[0];
						Запись.Состояние = Состояние;
						
						Набор.Записать();
						
						ЗафиксироватьТранзакцию();
					Исключение
						ОтменитьТранзакцию();
						ВызватьИсключение;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйПатч Из УдаляемыеПатчиБазовых Цикл
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", УдаляемыйПатч.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", УдаляемыйПатч.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", УдаляемыйПатч.УникальныйИдентификатор);
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
			Набор.Отбор.Патч.Установить(УдаляемыйПатч.Патч);
			Набор.Отбор.Версия.Установить(УдаляемыйПатч.Версия);
			Набор.Отбор.УникальныйИдентификатор.Установить(УдаляемыйПатч.УникальныйИдентификатор);
			
			Набор.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Если Не НужноДобавитьПатч Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНового = Новый УникальныйИдентификатор;
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
	ЭлементБлокировкиДанных.УстановитьЗначение("Патч", ПатчСсылка);
	ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Версия);
	ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", ИдентификаторНового);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных.Заблокировать();
		
		Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		Набор.Отбор.Патч.Установить(ПатчСсылка);
		Набор.Отбор.Версия.Установить(Версия);
		Набор.Отбор.УникальныйИдентификатор.Установить(ИдентификаторНового);
		
		Запись = Набор.Добавить();
		Запись.Патч = ПатчСсылка;
		Запись.Версия = Версия;
		Запись.УникальныйИдентификатор = ИдентификаторНового;
		Запись.ИмяПатча = ИмяПатча(ПатчСсылка, НомерПатча, Ложь);
		Если ТребуетсяПатч = Ложь Тогда
			Запись.Состояние = Перечисления.СтатусыПатчей.ПатчНеТребуется;
		Иначе
			Шаблон = НСтр("ru = '%1 - Включено создание патча пользователем %2'");
			ЗаписьЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
				ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь());
			ДополнительныеПараметры = ПараметрыПатча(Неопределено);
			ДополнительныеПараметры.НомерПатча = НомерПатча;
			ДополнительныеПараметры.Лог.Добавить(ЗаписьЛога);
			Запись.Состояние = Перечисления.СтатусыПатчей.ОжиданиеИсправления;
			Запись.Параметры = Новый ХранилищеЗначения(ДополнительныеПараметры);
		КонецЕсли;
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет конкретный патч.
//
Процедура УдалитьПатч(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УникальныйИдентификатор", Идентификатор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.Версия КАК Версия,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.УникальныйИдентификатор = &УникальныйИдентификатор"; 
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Результат Цикл
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Строка.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Строка.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Строка.УникальныйИдентификатор);
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
			Набор.Отбор.Патч.Установить(Строка.Патч);
			Набор.Отбор.Версия.Установить(Строка.Версия);
			Набор.Отбор.УникальныйИдентификатор.Установить(Строка.УникальныйИдентификатор);
			
			Набор.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьВсеВерсииПатча(Патч) Экспорт
	
	ИсключаемыеИзУдаления = Новый Массив;
	ИсключаемыеИзУдаления.Добавить(Перечисления.СтатусыПатчей.Опубликован);
	ИсключаемыеИзУдаления.Добавить(Перечисления.СтатусыПатчей.Отозван);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состояние", ИсключаемыеИзУдаления);
	Запрос.УстановитьПараметр("Патч", Патч);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.Версия КАК Версия,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.Патч = &Патч
		|	И НЕ ВерсииПатчей.Состояние В (&Состояние)";
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Строка.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Строка.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Строка.УникальныйИдентификатор);
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
			Набор.Отбор.Патч.Установить(Строка.Патч);
			Набор.Отбор.Версия.Установить(Строка.Версия);
			Набор.Отбор.УникальныйИдентификатор.Установить(Строка.УникальныйИдентификатор);
			Набор.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает двоичные данные патча.
//
Функция ДвоичныеДанныеПатча(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Патчи.ДанныеПатча КАК ДанныеПатча
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК Патчи
		|ГДЕ
		|	Патчи.УникальныйИдентификатор = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	ДанныеПатча = Запрос.Выполнить().Выгрузить()[0].ДанныеПатча;
	ДанныеПатча = ДанныеПатча.Получить();
	
	Возврат ДанныеПатча;
	
КонецФункции

// По ссылке на ошибку и версии исправления возвращает идентификатор патча.
//
Функция ПатчПоОшибке(Ошибка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ошибка", Ошибка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Патчи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Патчи КАК Патчи
		|ГДЕ
		|	Патчи.Ошибка = &Ошибка
		|	И НЕ Патчи.ПометкаУдаления";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		Возврат Строка.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьСтатусПатча(Запись, Статус, ТекстОшибки = "", ТекстСообщения = "", ПричинаОтзыва = "") Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Шаблон = НСтр("ru = '%1 - Состояние изменено на ""%2"" пользователем ""%3""'");
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Запись.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Запись.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Запись.УникальныйИдентификатор);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		Набор.Отбор.Патч.Установить(Запись.Патч);
		Набор.Отбор.Версия.Установить(Запись.Версия);
		Набор.Отбор.УникальныйИдентификатор.Установить(Запись.УникальныйИдентификатор);
		Набор.Прочитать();
		Если Статус = Перечисления.СтатусыПатчей.ПатчНеТребуется Тогда
			Если Набор.Количество() = 1 Тогда
				Запись = Набор[0];
				ОбновитьСтатусыПатчейБазовыхВерсий(Запись, Истина);
			КонецЕсли;
			
			Набор.Очистить();
			ВерсияПатча = Набор.Добавить();
			ВерсияПатча.Патч = Запись.Патч;
			ВерсияПатча.Версия = Запись.Версия;
			ВерсияПатча.УникальныйИдентификатор = Запись.УникальныйИдентификатор;
			ВерсияПатча.ИмяПатча = Запись.ИмяПатча;
			ВерсияПатча.Состояние = Статус;
			ВерсияПатча.ИзменяемыеМетаданные = "";
			ВерсияПатча.Параметры = Новый ХранилищеЗначения(ПараметрыПатча(Неопределено), Новый СжатиеДанных(9));
			Набор.Записать();
		Иначе
			ВерсияПатча = Набор[0];
			ВерсияПатча.Состояние = Статус;
			Параметры = ПараметрыПатча(ВерсияПатча.Параметры.Получить());
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ЗаписьЛогаОшибки = НСтр("ru = 'При публикации патча возникла ошибка'");
				ДобавитьОшибкуВЛог(Параметры, ЗаписьЛогаОшибки, ТекстОшибки);
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыПатчей.ОжиданиеИсправления Тогда
				ВерсияПатча.КонечнаяСборкаПоХранилищу = "";
				ВерсияПатча.ИзменяемыеМетаданные = "";
				ВерсияПатча.НачальнаяСборка = Неопределено;
				ВерсияПатча.КонечнаяСборка = Неопределено;
			КонецЕсли;
			
			Если ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.ОжиданиеИсправления Тогда
				ВерсияПатча.ДанныеПатча = Неопределено;
				Параметры.ИзмененияПрименимости = Неопределено;
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыПатчей.Опубликован
				И Не ЗначениеЗаполнено(ВерсияПатча.ДатаПубликации) Тогда
				ВерсияПатча.ДатаПубликации = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если Статус = Перечисления.СтатусыПатчей.Отозван
				И Не ЗначениеЗаполнено(ВерсияПатча.ДатаОтзыва) Тогда
				ВерсияПатча.ДатаОтзыва = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПричинаОтзыва) Тогда
				ВерсияПатча.ПричинаОтзыва = ПричинаОтзыва;
			КонецЕсли;
			
			ЗаписьЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущаяДатаСеанса(), Статус, ТекущийПользователь);
			Параметры.Лог.Добавить(ЗаписьЛога);
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				Параметры.Лог.Добавить(ТекстСообщения);
			КонецЕсли;
			ВерсияПатча.Параметры = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(9));
			
			ОбновитьСтатусыПатчейБазовыхВерсий(ВерсияПатча);
			
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьСвойствоПатча(Параметры, Свойство, Значение)
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Параметры.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Параметры.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Параметры.УникальныйИдентификатор);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		Набор.Отбор.Патч.Установить(Параметры.Патч);
		Набор.Отбор.Версия.Установить(Параметры.Версия);
		Набор.Отбор.УникальныйИдентификатор.Установить(Параметры.УникальныйИдентификатор);
		Набор.Прочитать();
		
		ВерсияПатча = Набор[0];
		ВерсияПатча[Свойство] = Значение;
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяПатча(Патч, НомерПатча = 0, СРасширением = Истина) Экспорт
	
	Если ТипЗнч(Патч) = Тип("Строка") Тогда
		НомерОшибки = Патч;
	Иначе
		Ошибка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Патч, "Ошибка");
		Если ТипЗнч(Ошибка) = Тип("Строка") Тогда
			НомерОшибки = Ошибка;
		Иначе
			НомерОшибки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка, "Код");
		КонецЕсли;
	КонецЕсли;
	Постфикс = "";
	Если НомерПатча > 1 Тогда
		Постфикс = "_" + XMLСтрока(НомерПатча);
	КонецЕсли;
	ИмяПатча = "EF_" + СтрЗаменить(НомерОшибки, "-", "_") + Постфикс + ?(СРасширением, ".cfe", "");
	Возврат ИмяПатча;
	
КонецФункции

Функция СтатусПатчаПоОшибке(Ошибка, Версия) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Состояние КАК Состояние,
		|	ВерсииПатчей.ПодписанДляКонфигурации КАК ПодписанДляКонфигурации
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патчи КАК Патчи
		|		ПО ВерсииПатчей.Патч = Патчи.Ссылка
		|ГДЕ
		|	Патчи.Ошибка = &Ошибка
		|	И НЕ Патчи.ПометкаУдаления
		|	И ВерсииПатчей.Версия = &Версия";
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("Ошибка", Ошибка);
	
	Патчи = Запрос.Выполнить().Выгрузить();
	Если Патчи.Количество() = 0 Тогда
		Возврат "";
	ИначеЕсли Патчи.Количество() = 1 Тогда
		Возврат Патчи[0].Состояние;
	КонецЕсли;
	
	Для Каждого Патч Из Патчи Цикл
		Если Патч.Состояние = Перечисления.СтатусыПатчей.Отозван Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Патч.ПодписанДляКонфигурации) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Патч.Состояние;
	КонецЦикла;
	
КонецФункции

Функция ИнструкцияПроверкиПатча() Экспорт
	
	Инструкция = НСтр("ru = 'Проверка патча осуществляется:
		| • в опубликованной версии конфигурации (библиотеки) – сначала убедиться, что ошибка воспроизводится;
		| • затем установить патч и убедиться, что ошибка исправлена.
		|
		|Не следует полагаться только на успешное подключение патча к конфигурации, или что патч успешно собран автоматически. Проверка патча обязательна в полном объеме.
		|
		|Если проверка требует регламентного тестирования (например, обязательно подтверждение исправления автоматизированными тестами и т.п.), то патч не следует публиковать до того, как исправление ошибки пройдет все предусмотренные этапы проверки.'");
	
	Возврат Инструкция;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИсходныеФайлыРасширений(ИдентификаторыПатчей) Экспорт
	
	ВыгруженныеПатчи = Новый Массив;
	Для Каждого ИдентификаторПатча Из ИдентификаторыПатчей Цикл
		СвойстваВерсииПатча = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(ИдентификаторПатча.Значение, "Патч,Версия,ИмяПатча,ДанныеПатча");
		Если Не ЗначениеЗаполнено(СвойстваВерсииПатча.ИмяПатча) Тогда
			СвойстваВерсииПатча.ИмяПатча = ИмяПатча(СвойстваВерсииПатча.Патч, , Ложь);
		КонецЕсли;
		СвойстваВерсииПатча.Вставить("ДвоичныеДанные", СвойстваВерсииПатча.ДанныеПатча.Получить());
		СвойстваВерсииПатча.Удалить("ДанныеПатча");
		СвойстваВерсииПатча.Удалить("Патч");
		ПараметрыВыгрузки = ПатчиСлужебный.ВыгрузкаПатчаИзДвоичныхДанных(СвойстваВерсииПатча);
		
		ПутьКАрхиву = ПараметрыВыгрузки.ВременныйКаталог + СвойстваВерсииПатча.ИмяПатча + ".zip";
		ЗаписьZipФайла = Новый ЗаписьZipФайла(ПутьКАрхиву);
		ЗаписьZipФайла.Добавить(ПараметрыВыгрузки.КаталогВыгрузки + "\*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
		ЗаписьZipФайла.Записать();
		
		ВыгрузкаПатча = Новый Структура;
		ВыгрузкаПатча.Вставить("ИмяПатча", СвойстваВерсииПатча.ИмяПатча);
		ВыгрузкаПатча.Вставить("Версия", Строка(СвойстваВерсииПатча.Версия));
		ВыгрузкаПатча.Вставить("Архив", Новый ДвоичныеДанные(ПутьКАрхиву));
		
		ВыгруженныеПатчи.Добавить(ВыгрузкаПатча);
		
		Попытка
			УдалитьФайлы(ПараметрыВыгрузки.ВременныйКаталог);
		Исключение
			// Будет удалено автоматически средствами платформы.
		КонецПопытки;
	КонецЦикла;
	
	Возврат ВыгруженныеПатчи;
	
КонецФункции

Функция ЗначенияСвойствВерсииПатча(Идентификатор, Знач Свойства) Экспорт
	
	СвойстваМассив = СтрРазделить(Свойства, ",", Ложь);
	ИндексПоследнегоЭлемента = СвойстваМассив.ВГраница();
	ПолучатьРазделПроекта = Ложь;
	Для Итератор = 0 По ИндексПоследнегоЭлемента Цикл
		Индекс = ИндексПоследнегоЭлемента - Итератор;
		СвойстваМассив[Индекс] = СокрЛП(СвойстваМассив[Индекс]);
		Если СвойстваМассив[Индекс] = "РазделПроекта" Тогда
			ПолучатьРазделПроекта = Истина;
			СвойстваМассив.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучатьРазделПроекта
		И СвойстваМассив.Найти("Патч") = Неопределено Тогда
		СвойстваМассив.Добавить("Патч");
	КонецЕсли;
	
	Свойства = СтрСоединить(СвойстваМассив, ",");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УникальныйИдентификатор", Идентификатор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ВыбираемыеПоля
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.УникальныйИдентификатор = &УникальныйИдентификатор";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыбираемыеПоля", Свойства); 
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВерсияПатча = Результат[0];
	
	Параметры = Новый Структура;
	Для Каждого Колонка Из Результат.Колонки Цикл
		Параметры.Вставить(Колонка.Имя);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Параметры, ВерсияПатча);
	Если ПолучатьРазделПроекта Тогда
		Ошибка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияПатча.Патч, "Ошибка");
		Если ТипЗнч(Ошибка) = Тип("СправочникСсылка.Ошибки") Тогда
			РазделПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка, "РазделПроекта");
		Иначе
			РазделПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияПатча.Патч, "РазделПроекта");
		КонецЕсли;
		
		Параметры.Вставить("РазделПроекта", РазделПроекта);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ДляВсехВерсийОтключеноСозданиеПатчей(Объект) Экспорт
	
	ВерсииИсправленияОшибки = ВерсииИсправленияОшибки(Объект);
	СозданиеПатчейПоВерсиям = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВерсииИсправленияОшибки, "СоздаватьПатчи");
	Версии = Новый Массив;
	Для Каждого СозданиеПоВерсии Из СозданиеПатчейПоВерсиям Цикл
		Если СозданиеПоВерсии.Значение = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Версии.Добавить(СозданиеПоВерсии.Ключ);
	КонецЦикла;
	
	Если Версии.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ошибка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Версии", Версии);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СтатусыПатчей.ПатчНеТребуется);
	Запрос.Текст = "ВЫБРАТЬ
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патчи КАК Патчи
		|		ПО ВерсииПатчей.Патч = Патчи.Ссылка
		|ГДЕ
		|	Патчи.Ошибка = &Ошибка
		|	И ВерсииПатчей.Версия В(&Версии)
		|	И ВерсииПатчей.Состояние = &Состояние
		|	И НЕ Патчи.ПометкаУдаления";
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат.Количество() = Версии.Количество();
	
КонецФункции

Функция ПроверкаИДобавлениеПатча(Параметры) Экспорт
	
	ПараметрыВыгрузки = ВыгрузкаПатчаИзДвоичныхДанных(Параметры);
	
	ТекстОшибок = Новый Массив;
	ПараметрыВыгрузкиИсходногоПатча = Неопределено;
	// Передан исходный патч для сравнения, его необходимо выгрузить в
	// отдельную папку.
	Если Параметры.Свойство("ДвоичныеДанныеИсходные") Тогда
		КопияПараметров = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
		Если Параметры.ДвоичныеДанныеИсходные = Неопределено Тогда
			ИдентификаторыРасширенийСовпадают = Ложь;
		Иначе
			КопияПараметров.ДвоичныеДанные = Параметры.ДвоичныеДанныеИсходные;
			ПараметрыВыгрузкиИсходногоПатча = ВыгрузкаПатчаИзДвоичныхДанных(КопияПараметров);
			ИдентификаторыРасширенийСовпадают = ИдентификаторыРасширенийСовпадают(ПараметрыВыгрузкиИсходногоПатча.КаталогВыгрузки,
				ПараметрыВыгрузки.КаталогВыгрузки);
		КонецЕсли;
		
		Если Не ИдентификаторыРасширенийСовпадают Тогда
			Текст = НСтр("ru = 'Расширение не подходит для данной версии патча.
				|Возможные причины:
				| • расширение от другой версии патча;
				| • расширение создано вручную, не по шаблону из СППР.
				|
				|Необходимо по команде ""%1""
				|скачать расширение, перенести в него исправление ошибки и
				|повторить прикрепление патча.'");
			Если КопияПараметров.ПатчНеСоздан Тогда
				ИмяКоманды = НСтр("ru = 'Шаблон патча для ручного создания'");
			Иначе
				ИмяКоманды = НСтр("ru = 'Сохранить патч'");
			КонецЕсли;
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяКоманды);
			ТекстОшибок.Добавить(Текст);
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка патча.
	ИзменяемыеМетоды = Новый Массив;
	Если Параметры.ДобавленВручную Тогда
		ПроверитьПатч(Параметры, ПараметрыВыгрузки, ТекстОшибок);
		Если Параметры.Свойство("ИзменяемыеМетоды") Тогда
			ИзменяемыеМетоды = Параметры.ИзменяемыеМетоды;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибок", "");
	Результат.Вставить("ИзменяемыеМетоды", ИзменяемыеМетоды);
	Результат.Вставить("ДанныеПатча", Неопределено);
	Если ТекстОшибок.Количество() > 0 Тогда
		Результат.ТекстОшибок = СтрСоединить(ТекстОшибок, Символы.ПС + "----------" + Символы.ПС);
		Возврат Результат;
	КонецЕсли;
	
	Шаблон = "%1%2%3%2%4%2%5%2%6";
	ПутьКМакету = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
		ПараметрыВыгрузки.КаталогВыгрузки,
		ПолучитьРазделительПути(),
		"CommonTemplates",
		Параметры.ИмяПатча,
		"ext",
		"Template.txt");
	
	// Запись применимости в рамках родной конфигурации в макет патча.
	ДокументDOM = ДокументDOM(ПутьКМакету);
	
	УзелPatch = ДокументDOM.ПолучитьЭлементыПоИмени("Patch")[0];
	УзлыAppliedFor =  ДокументDOM.ПолучитьЭлементыПоИмени("AppliedFor");
	Для Каждого УзелAppliedFor Из УзлыAppliedFor Цикл
		УзелPatch.УдалитьДочерний(УзелAppliedFor);
	КонецЦикла;
	
	Патч = Параметры.Патч;
	СвойстваПатча = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Патч, "Ошибка, Описание");
	УзелDescription = ДокументDOM.ПолучитьЭлементыПоИмени("Description")[0];
	Если ТипЗнч(СвойстваПатча.Ошибка) = Тип("Строка") Тогда
		ОписаниеПатча = СвойстваПатча.Описание;
	Иначе
		ОписаниеПатча = ОписаниеПатчаПоОшибке(Патч, СвойстваПатча.Ошибка);
	КонецЕсли;
	УзелDescription.ТекстовоеСодержимое = ОписаниеПатча;
	
	УзелUUID = ДокументDOM.ПолучитьЭлементыПоИмени("UUID")[0];
	Если УзелUUID.ТекстовоеСодержимое <> Строка(Параметры.ИдентификаторПатча) Тогда
		УзелUUID.ТекстовоеСодержимое = Строка(Параметры.ИдентификаторПатча);
	КонецЕсли;
	
	ДобавитьРассчитаннуюСборку = ДобавитьРассчитаннуюСборку(Параметры.ПрименимДляСборок, Параметры.КонечнаяСборкаПоХранилищу);
	
	Если ДобавитьРассчитаннуюСборку Тогда
		Параметры.ПрименимДляСборок.Добавить(Параметры.КонечнаяСборкаПоХранилищу);
	КонецЕсли;
	ДобавитьУзелПрименимости(ДокументDOM, Параметры.ИмяКонфигурации, СтрСоединить(Параметры.ПрименимДляСборок, ","));
	
	Для Каждого СвязаннаяКонфигурация Из Параметры.СвязанныеКонфигурации Цикл
		КлючЧастями = СтрРазделить(СвязаннаяКонфигурация.Ключ, ",");
		Если ДобавитьРассчитаннуюСборку Тогда
			КонечнаяСборка = Параметры.КонечныеСборкиСвязанныхКонфигураций[СвязаннаяКонфигурация.Ключ];
			Если КонечнаяСборка <> Неопределено Тогда
				Параметры.СвязанныеКонфигурации[СвязаннаяКонфигурация.Ключ].Добавить(КонечнаяСборка);
			КонецЕсли;
		КонецЕсли;
		ДобавитьУзелПрименимости(ДокументDOM, КлючЧастями[0], СтрСоединить(Параметры.СвязанныеКонфигурации[СвязаннаяКонфигурация.Ключ], ","));
	КонецЦикла;
	
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКМакету);
	
	ЗагрузитьРасширениеИзФайлов(ПараметрыВыгрузки);
	ВыгрузитьРасширениеВФайл(ПараметрыВыгрузки);
	
	Результат.ДанныеПатча = Новый ДвоичныеДанные(ПараметрыВыгрузки.ПутьКПатчу);
	
	Попытка
		УдалитьФайлы(ПараметрыВыгрузки.ВременныйКаталог);
		Если ПараметрыВыгрузкиИсходногоПатча <> Неопределено Тогда
			УдалитьФайлы(ПараметрыВыгрузкиИсходногоПатча.ВременныйКаталог);
		КонецЕсли;
	Исключение
		// Удаление будет выполнено автоматически, средствами платформы.
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ОбновлениеОписанияПатча(Параметры) Экспорт
	
	Параметры.Вставить("ДвоичныеДанные", Параметры.ДанныеПатча);
	ПараметрыВыгрузки = ВыгрузкаПатчаИзДвоичныхДанных(Параметры);
	
	Шаблон = "%1%2%3%2%4%2%5%2%6";
	ПутьКМакету = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
		ПараметрыВыгрузки.КаталогВыгрузки,
		ПолучитьРазделительПути(),
		"CommonTemplates",
		Параметры.ИмяПатча,
		"ext",
		"Template.txt");
	
	// Запись применимости в рамках родной конфигурации в макет патча.
	ДокументDOM = ДокументDOM(ПутьКМакету);
	
	УзелDescription = ДокументDOM.ПолучитьЭлементыПоИмени("Description")[0];
	Если Параметры.Свойство("ОписаниеПатча") Тогда
		ОписаниеПатча = Параметры.ОписаниеПатча;
	Иначе
		СвойстваПатча = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Патч, "Ошибка, Описание");
		Если ТипЗнч(СвойстваПатча.Ошибка) = Тип("Строка") Тогда
			ОписаниеПатча = СвойстваПатча.Описание;
		Иначе
			ОписаниеПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваПатча.Ошибка, "ПубликуемоеОписание");
		КонецЕсли;
	КонецЕсли;
	УзелDescription.ТекстовоеСодержимое = ОписаниеПатча;
	
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКМакету);
	
	ЗагрузитьРасширениеИзФайлов(ПараметрыВыгрузки);
	ВыгрузитьРасширениеВФайл(ПараметрыВыгрузки);
	
	ДанныеПатча = Новый ДвоичныеДанные(ПараметрыВыгрузки.ПутьКПатчу);
	
	Попытка
		УдалитьФайлы(ПараметрыВыгрузки.ВременныйКаталог);
	Исключение
		// Удаление будет выполнено автоматически, средствами платформы.
	КонецПопытки;
	
	Возврат ДанныеПатча;
	
КонецФункции

Процедура ПроверитьПатч(Параметры, ПараметрыВыгрузки, ТекстОшибок)
	
	НовыеОМД = Новый Массив;
	ГлавныйМакетНайден = Ложь;
	ИмяПатчаКорректное = Ложь;
	СвойстваИсправления = Неопределено;
	НедопустимыеНовыеТипыОбъектов = НедопустимыеНовыеТипыОбъектов();
	
	ФайлыИКаталоги = НайтиФайлы(ПараметрыВыгрузки.КаталогВыгрузки, "*");
	Для Каждого ФайлИКаталог Из ФайлыИКаталоги Цикл
		Если ФайлИКаталог.Имя = "Configuration.xml" Тогда
			ДокументDOM = ДокументDOM(ФайлИКаталог.ПолноеИмя);
			УзелName = ДокументDOM.ПолучитьЭлементыПоИмени("Name")[0];
			ИмяПатчаКорректное = (УзелName.ТекстовоеСодержимое = Параметры.ИмяПатча);
			УзелCompatibilityMode = ДокументDOM.ПолучитьЭлементыПоИмени("ConfigurationExtensionCompatibilityMode")[0];
			ТекущийРежимСовместимости = УзелCompatibilityMode.ТекстовоеСодержимое;
			Если СтрНачинаетсяС(ТекущийРежимСовместимости, "Version") Тогда
				ТекущийРежимСовместимости = СтрЗаменить(ТекущийРежимСовместимости, "Version", "");
				ТекущийРежимСовместимости = СтрЗаменить(ТекущийРежимСовместимости, "_", ".");
				Параметры.Вставить("НовыйРежимСовместимости", ТекущийРежимСовместимости);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлИКаталог.Расширение) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектыМетаданных = НайтиФайлы(ФайлИКаталог.ПолноеИмя, "*.xml");
		Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
			Если СтрНайти(ОбъектМетаданных.ПолноеИмя, "CommonTemplates") > 0 Тогда
				Если ОбъектМетаданных.ИмяБезРасширения = Параметры.ИмяПатча Тогда
					ГлавныйМакетНайден = Истина;
					// Проверка читаемости макета.
					ПутьКМанифесту = ОбъектМетаданных.Путь + ОбъектМетаданных.ИмяБезРасширения + "%1Ext%1Template.txt";
					СвойстваИсправления = СвойстваИсправления(ПутьКМанифесту);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			ДокументDOM = ДокументDOM(ОбъектМетаданных.ПолноеИмя);
			УзелObjectBelonging = ДокументDOM.ПолучитьЭлементыПоИмени("ObjectBelonging");
			Если УзелObjectBelonging.Количество() = 0
				И НедопустимыеНовыеТипыОбъектов.Найти(ФайлИКаталог.Имя) <> Неопределено Тогда
				НовыеОМД.Добавить(ОбъектМетаданных.ИмяБезРасширения);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Определение измененных процедур и функций.
	ФайлыМодулей = НайтиФайлы(ПараметрыВыгрузки.КаталогВыгрузки, "*.bsl", Истина);
	СтрокиПоиска = Новый Массив;
	СтрокиПоиска.Добавить("&Вместо(""");
	СтрокиПоиска.Добавить("&Перед(""");
	СтрокиПоиска.Добавить("&После(""");
	ИменаМетодов = Новый Массив;
	Для Каждого ФайлМодуля Из ФайлыМодулей Цикл
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ФайлМодуля.ПолноеИмя);
		ТекстМодуля = ТекстовыйДокумент.ПолучитьТекст();
		
		Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
			ИзмененоМетодов = СтрЧислоВхождений(ТекстМодуля, СтрокаПоиска);
			Если ИзмененоМетодов = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПолноеИмяОбъекта = ПолноеИмяПоИмениОбъектаВХранилище(СтрЗаменить(ФайлМодуля.ПолноеИмя, ПараметрыВыгрузки.КаталогВыгрузки, ""));
			
			Для Индекс = 1 По ИзмененоМетодов Цикл
				НачалоИмени = СтрНайти(ТекстМодуля, СтрокаПоиска, , , Индекс) + СтрДлина(СтрокаПоиска);
				КонецИмени = СтрНайти(ТекстМодуля, """)", , НачалоИмени);
				ИмяМетода = Сред(ТекстМодуля, НачалоИмени, КонецИмени - НачалоИмени);
				
				Если СтрЗаканчиваетсяНа(ПолноеИмяОбъекта, ".Форма") Тогда
					ПолноеИмяОбъекта = Лев(ПолноеИмяОбъекта, СтрДлина(ПолноеИмяОбъекта) - СтрДлина(".Форма"));
				КонецЕсли;
				ИменаМетодов.Добавить(ПолноеИмяОбъекта + "." + ИмяМетода);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Параметры.Вставить("ИзменяемыеМетоды", ИменаМетодов);
	
	Если СвойстваИсправления = Неопределено Тогда
		Текст = НСтр("ru = 'В содержимое манифеста патча (общий макет %1) внесены неконсистентные изменения.
			|Чтение манифеста невозможно.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Параметры.ИмяПатча);
		ТекстОшибок.Добавить(Текст);
	КонецЕсли;
	
	Если Не ИмяПатчаКорректное Тогда
		Текст = НСтр("ru = 'Неправильное имя патча. Должно быть - %1.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Параметры.ИмяПатча);
		ТекстОшибок.Добавить(Текст);
	КонецЕсли;
	
	Если Не ГлавныйМакетНайден Тогда
		Текст = НСтр("ru = 'Не найден основной макет, описывающий патч.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Параметры.ИмяПатча);
		ТекстОшибок.Добавить(Текст);
	КонецЕсли;
	
	Если НовыеОМД.Количество() > 0 Тогда
		Текст = НСтр("ru = 'Патч содержит новые объекты метаданных:
			|%1.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрСоединить(НовыеОМД, Символы.ПС));
		ТекстОшибок.Добавить(Текст);
	КонецЕсли;
	
КонецПроцедуры

Функция НедопустимыеНовыеТипыОбъектов()
	
	НедопустимыеТипы = Новый Массив;
	НедопустимыеТипы.Добавить("ExchangePlans");
	НедопустимыеТипы.Добавить("DefinedTypes");
	НедопустимыеТипы.Добавить("Constants");
	НедопустимыеТипы.Добавить("Catalogs");
	НедопустимыеТипы.Добавить("Documents");
	НедопустимыеТипы.Добавить("DocumentJournals");
	НедопустимыеТипы.Добавить("Enums");
	НедопустимыеТипы.Добавить("ChartsOfCharacteristicTypes");
	НедопустимыеТипы.Добавить("ChartsOfAccounts");
	НедопустимыеТипы.Добавить("ChartsOfCalculationTypes");
	НедопустимыеТипы.Добавить("InformationRegisters");
	НедопустимыеТипы.Добавить("AccumulationRegisters");
	НедопустимыеТипы.Добавить("AccountingRegisters");
	НедопустимыеТипы.Добавить("CalculationRegisters");
	НедопустимыеТипы.Добавить("BusinessProcesses");
	НедопустимыеТипы.Добавить("Tasks");
	
	Возврат НедопустимыеТипы;
	
КонецФункции

Функция ИдентификаторыРасширенийСовпадают(ВыгрузкаИсходная, ВыгрузкаНовая)
	
	ДокументDOMИсходный = ДокументDOM(ВыгрузкаИсходная + ПолучитьРазделительПути() + "Configuration.xml");
	ИдентификаторИсходный = ДокументDOMИсходный.ПолучитьЭлементыПоИмени("Configuration")[0].ПолучитьАтрибут("uuid");
	ДокументDOMНовый = ДокументDOM(ВыгрузкаНовая + ПолучитьРазделительПути() + "Configuration.xml");
	ИдентификаторНовый = ДокументDOMНовый.ПолучитьЭлементыПоИмени("Configuration")[0].ПолучитьАтрибут("uuid");
	
	Возврат ИдентификаторИсходный = ИдентификаторНовый;
	
КонецФункции

Функция СвойстваИсправления(ПутьКМанифесту)
	ПутьКМанифесту = СтрЗаменить(ПутьКМанифесту, "%1", ПолучитьРазделительПути());
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКМанифесту);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстовыйДокумент.ПолучитьТекст());
	Попытка
		СвойстваИсправления = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/patch", "Patch"));
	Исключение
		СвойстваИсправления = Неопределено;
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	Возврат СвойстваИсправления;
КонецФункции

Функция ИсправлениеОшибки(ПараметрыПатча) Экспорт
	
	Если ПараметрыПатча.Свойство("СтрокаПоискаОшибки") И ЗначениеЗаполнено(ПараметрыПатча.СтрокаПоискаОшибки) Тогда
		СтрокаПоискаОшибки = ПараметрыПатча.СтрокаПоискаОшибки;
	Иначе
		СтрокаПоискаОшибки = "Исправлена ошибка " + ПараметрыПатча.НомерОшибки;
	КонецЕсли;
	
	Если ПараметрыПатча.КоммитыИсправления.Количество() = 0 Тогда
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"log --grep ""%1"" --pretty=format:""%H | %cd | %s"" --date=format:""%Y-%m-%d %H:%M:%S""",
			СтрокаПоискаОшибки);
		
		Результат = ЗапросКХранилищу(ТекстКоманды, ПараметрыПатча.АдресХранилища);
		ЗакладкиОшибки = ЗакладкиОшибки(Результат);
	Иначе
		ЗакладкиОшибки = Новый ТаблицаЗначений;
		ЗакладкиОшибки.Колонки.Добавить("ХэшЗакладки");
		ЗакладкиОшибки.Колонки.Добавить("ДатаЗакладки");
		ЗакладкиОшибки.Колонки.Добавить("Дата");
		Для Каждого Коммит Из ПараметрыПатча.КоммитыИсправления Цикл
			ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"show -s ""%1"" --pretty=format:""%cd"" --date=format:""%Y-%m-%d %H:%M:%S""",
				Коммит);
			Результат   = ЗапросКХранилищу(ТекстКоманды, ПараметрыПатча.АдресХранилища);
			ДатаКоммита = Результат.ПолучитьТекст();
			Строка = ЗакладкиОшибки.Добавить();
			Строка.ХэшЗакладки  = Коммит;
			Строка.ДатаЗакладки = ДатаКоммита;
			Строка.Дата         = ДатаВФормате1С(ДатаКоммита);
		КонецЦикла;
		
		ЗакладкиОшибки.Сортировать("Дата Убыв");
	КонецЕсли;
	Если ЗакладкиОшибки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьСтатусПатча(ПараметрыПатча.ЗаписьРегистра, Перечисления.СтатусыПатчей.СозданиеПатча);
	
	АнализИзменений = АнализИзменений(ПараметрыПатча, ЗакладкиОшибки);
	АнализИзменений.Вставить("НомерОшибки", ПараметрыПатча.НомерОшибки);
	ХэшЗакладки = ЗакладкиОшибки[0].ХэшЗакладки;
	
	ПараметрыРасчета = ПараметрыДляРасчетаРоднойПрименимости();
	ПараметрыРасчета.НачальнаяДата = АнализИзменений.НачалоДействияПатча;
	ПараметрыРасчета.КонечнаяДата  = АнализИзменений.ДатаИсправления;
	ПараметрыРасчета.Версия        = ПараметрыПатча.ВерсияКонфигурации;
	ПараметрыРасчета.РазделПроекта = ПараметрыПатча.РазделПроекта;
	ПараметрыРасчета.ЭтоБиблиотека = ПараметрыПатча.ЭтоБиблиотека;
	ПараметрыРасчета.КонечнаяСборкаПоХранилищу = АнализИзменений.ВерсияВХранилище;
	ИнформацияОПрименимости = ПрименимостьДляРоднойКонфигурации(ПараметрыРасчета);
	
	ТекстИсключения = "";
	Если Не ЗначениеЗаполнено(АнализИзменений.ТекстОшибки) И ИнформацияОПрименимости.Сборки.Количество() = 0 Тогда
		ТекстИсключения = НСтр("ru = 'Патч по ошибке нельзя применить ни к одной
			|выпущенной версии конфигурации. Изменения в коде пересекаются
			|с изменениями по другим ошибкам:
			|  https://<путь к репозиторию>/commit/%1
			|место обнаружения конфликта:
			|  %2
			|
			|Рекомендуется:
			|	1) Указать требуемый интервал применимости патча к сборкам вручную.
			|	2) Отредактировать патч, приняв решение, по каким ошибкам нужно довнести отсутствующие изменения в патч,
			|	а какие из них убрать, если изменения по этим ошибкам попали в патч не полностью.'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения,
			АнализИзменений.КонфликтныйКоммит,
			АнализИзменений.ТочноеМестоПроблемы);
	КонецЕсли;
	
	Параметры = Параметры(ПараметрыПатча);
	ЗаполнитьЗначенияСвойств(Параметры, АнализИзменений);
	Параметры.Вставить("АдресХранилища", ПараметрыПатча.АдресХранилища);
	Параметры.Вставить("ХэшЗакладки", ХэшЗакладки);
	Параметры.Вставить("КаталогСохраненияПатча", ПараметрыПатча.КаталогСохраненияПатча);
	Параметры.Вставить("ПрименимДляСборок", ИнформацияОПрименимости.Сборки);
	Параметры.Вставить("СвязанныеКонфигурации", ИнформацияОПрименимости.СвязанныеКонфигурации);
	Параметры.Вставить("КонечныеСборкиСвязанныхКонфигураций", ИнформацияОПрименимости.КонечныеСборкиСвязанныхКонфигураций);
	СоздатьРасширение(Параметры);
	
	ИзмененоМетодов = 0;
	ЕстьИзмененияМакетов = Ложь;
	Для Каждого Изменение Из АнализИзменений.Изменения Цикл
		Если Изменение.Значение.ЭтоМакет Или Изменение.Значение.ЭтоПрава Тогда
			ЕстьИзмененияМакетов = Истина;
			Продолжить;
		КонецЕсли;
		ВсеИзменения    = Изменение.Значение.ВсеИзменения;
		ИзмененоМетодов = ИзмененоМетодов + ВсеИзменения.Количество();
	КонецЦикла;
	Если ИзмененоМетодов = 0 И ЕстьИзмененияМакетов Тогда
		ТекстИсключения = НСтр("ru = 'Патч содержит только изменения только в макетах.
			|Автоматический расчет применимости может быть не точный, а применимость библиотечных
			|патчей к конфигурациям может быть не рассчитана.
			|
			|Рекомендуется:
			|	1) Уточнить, если требуется, интервал применимости патча к сборкам вручную.
			|	2) Для библиотек проверить применимость патча к конфигурациям и если нужно
			|	установить ее вручну.'");
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоДействияПатча", АнализИзменений.НачалоДействияПатча);
	Результат.Вставить("ДатаИсправления", АнализИзменений.ДатаИсправления);
	Результат.Вставить("ПутьКПатчу", Параметры.КаталогСохраненияПатча + Параметры.НазваниеПатча + ".cfe");
	Результат.Вставить("ИзменяемыеМетаданные", Параметры.ИзменяемыеМетаданные);
	Результат.Вставить("РежимСовместимости", Параметры.РежимСовместимости);
	Результат.Вставить("ВерсияВХранилище", АнализИзменений.ВерсияВХранилище);
	Если ЗначениеЗаполнено(ТекстИсключения) Тогда
		Результат.Вставить("ТекстОшибки", ТекстИсключения);
	Иначе
		Результат.Вставить("ТекстОшибки", АнализИзменений.ТекстОшибки);
	КонецЕсли;
	Результат.Вставить("СборкиККоторымПрименимПатч", СборкиККоторымПрименимПатч(Параметры));
	
	Попытка
		УдалитьФайлы(Параметры.КаталогВременнойБазы);
	Исключение
		// Временные файлы будут удалены автоматически средствами платформы.
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СборкиККоторымПрименимПатч(Параметры)
	Массив = Параметры.ПрименимДляСборок;
	Для Каждого СвязаннаяКонфигурация Из Параметры.СвязанныеКонфигурации Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, СвязаннаяКонфигурация.Значение);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

Процедура ПодключитьсяКХранилищу(АдресХранилища, Свойства, ИмяВеткиРепозитория)
	
	АдресGitСервера       = Свойства.АдресGitСервера;
	КаталогGitРепозитория = Свойства.КаталогGitРепозитория;
	
	// Если по какой-то причине остался файл блокировки - удаляем его.
	ФайлБлокировки = КаталогGitРепозитория + ПолучитьРазделительПути() + ".git" + ПолучитьРазделительПути() + "index.lock";
	Файл = Новый Файл(ФайлБлокировки);
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлБлокировки);
		Исключение
			// Обработка исключения не требуется.
		КонецПопытки;
	КонецЕсли;
	
	ТекстКоманды = "config --get remote.origin.url";
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	АдресУдаленногоХранилища = РезультатВыполнения.ПолучитьСтроку(1);
	Если Не ЗначениеЗаполнено(АдресУдаленногоХранилища) Или АдресУдаленногоХранилища <> АдресGitСервера Тогда
		Попытка
			УдалитьФайлы(КаталогGitРепозитория);
		Исключение
		КонецПопытки;
		
		Каталог = Новый Файл(КаталогGitРепозитория);
		Если Не Каталог.Существует() Тогда
			СоздатьКаталог(КаталогGitРепозитория);
		КонецЕсли;
		
		ТекстКоманды = "config --global http.sslverify false";
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		ТекстКоманды = "lfs install --skip-smudge";
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		Добавка = "";
		Если ЗначениеЗаполнено(ИмяВеткиРепозитория) Тогда
			Добавка = "-b " + ИмяВеткиРепозитория;
		КонецЕсли;
		
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"clone %1 %2 %3",
			АдресGitСервера,
			АдресХранилища,
			Добавка);
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindowsСервер = (СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
			Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64);
		
		// Обязательные команды перед работой с Git-хранилищем.
		ТекстКоманды = "config --local core.quotepath false";
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		ТекстКоманды = "config --local gui.encoding utf-8";
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		ТекстКоманды = "config --local i18n.commitEncoding utf-8";
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		Если ЭтоWindowsСервер Тогда
			ТекстКоманды = "config --local core.autocrlf true";
			ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
			ТекстКоманды = "config --local core.safecrlf true";
			ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(ИмяВеткиРепозитория) Тогда
			ИмяВеткиРепозитория = "master";
		КонецЕсли;
		
		ТекстКоманды = "rev-parse --abbrev-ref HEAD";
		РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		Если РезультатВыполнения.ПолучитьСтроку(1) = ИмяВеткиРепозитория Тогда
			ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"remote prune origin", ИмяВеткиРепозитория);
			ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
			
			ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"pull origin %1", ИмяВеткиРепозитория);
			ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		КонецЕсли;
	КонецЕсли;
	
	// Добавление alias для быстрого поиска merge-commit.
	ТекстКоманды = "config --global alias.find-merge ""!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'""";
	ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	
	ТекстКоманды = "config --local core.quotepath false";
	ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	
	Если Не ЗначениеЗаполнено(ИмяВеткиРепозитория) Тогда
		ИмяВеткиРепозитория = "master";
	КонецЕсли;
	ТекстКоманды = "rev-parse --abbrev-ref HEAD";
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	Если РезультатВыполнения.ПолучитьСтроку(1) <> ИмяВеткиРепозитория Тогда
		ТекстКоманды = "lfs install --skip-smudge";
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		ТекстКоманды = "fetch origin";
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"checkout %1 --force", ИмяВеткиРепозитория);
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		// Проверка, что переключение на ветку произошло.
		ТекстКоманды = "rev-parse --abbrev-ref HEAD";
		РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		Если РезультатВыполнения.ПолучитьСтроку(1) <> ИмяВеткиРепозитория Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось переключиться на требуемую ветку репозитория.'");
		КонецЕсли;
		
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"remote prune origin", ИмяВеткиРепозитория);
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"pull origin %1", ИмяВеткиРепозитория);
		ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Функция ПрименимостьДляРоднойКонфигурации(Параметры) Экспорт
	
	НачальнаяДата = Параметры.НачальнаяДата;
	КонечнаяДата  = Параметры.КонечнаяДата;
	Версия        = Параметры.Версия;
	РазделПроекта = Параметры.РазделПроекта;
	ЭтоБиблиотека = Параметры.ЭтоБиблиотека;
	КонечнаяСборкаПоХранилищу = Параметры.КонечнаяСборкаПоХранилищу;
	
	Результат = Новый Структура;
	Результат.Вставить("Сборки", Новый Массив);
	Результат.Вставить("СвязанныеКонфигурации", Новый Соответствие);
	Результат.Вставить("КонечныеСборкиСвязанныхКонфигураций", Новый Соответствие);
	
	Если НачальнаяДата = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОсновнойПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Версия, "Владелец");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СборкиВерсии.Ссылка КАК Ссылка,
		|	СборкиВерсии.ПубликуемыйНомерСборки КАК ПубликуемыйНомерСборки
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|ГДЕ
		|	СборкиВерсии.ДатаСборки >= &НачальнаяДата
		|	И &ОтборПоКонечнойСборке
		|	И СборкиВерсии.Владелец = &Версия
		|	И СборкиВерсии.Опубликована = ИСТИНА";
	Если ЗначениеЗаполнено(КонечнаяСборкаПоХранилищу) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКонечнойСборке", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКонечнойСборке", "СборкиВерсии.ДатаСборки <= &КонечнаяДата");
	КонецЕсли;
	Запрос.УстановитьПараметр("НачальнаяДата", НачальнаяДата);
	Запрос.УстановитьПараметр("КонечнаяДата", КонечнаяДата);
	Запрос.УстановитьПараметр("Версия", Версия);
	Таблица = Запрос.Выполнить().Выгрузить();
	// Проверка, что в список не попала сборка с номером выше максимального.
	Если ЗначениеЗаполнено(КонечнаяСборкаПоХранилищу) Тогда
		Сборки = Новый Массив;
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаТаблицы.ПубликуемыйНомерСборки, КонечнаяСборкаПоХранилищу) > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Сборки.Добавить(СтрокаТаблицы.Ссылка);
		КонецЦикла;
	Иначе
		Сборки = Таблица.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Результат.Сборки = Сборки;
	
	// Определение случаев, когда конфигурация частично входит в состав других конфигураций
	// по разделу проекта, на который была записана ошибки.
	Соответствие = Новый Соответствие;
	Если Не ЭтоБиблиотека Тогда
		// Получение всех сборок исходной конфигурации (в т.ч. неопубликованных).
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СборкиВерсии.Ссылка КАК Ссылка,
			|	СборкиВерсии.ПубликуемыйНомерСборки КАК ПубликуемыйНомерСборки
			|ИЗ
			|	Справочник.СборкиВерсии КАК СборкиВерсии
			|ГДЕ
			|	СборкиВерсии.ДатаСборки >= &НачальнаяДата
			|	И &ОтборПоКонечнойСборке
			|	И СборкиВерсии.Владелец = &Версия";
		Если ЗначениеЗаполнено(КонечнаяСборкаПоХранилищу) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКонечнойСборке", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоКонечнойСборке", "СборкиВерсии.ДатаСборки <= &КонечнаяДата");
		КонецЕсли;
		
		Таблица = Запрос.Выполнить().Выгрузить();
		Если ЗначениеЗаполнено(КонечнаяСборкаПоХранилищу) Тогда
			ВсеСборки = Новый Массив;
			Для Каждого СтрокаТаблицы Из Таблица Цикл
				Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаТаблицы.ПубликуемыйНомерСборки, КонечнаяСборкаПоХранилищу) > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ВсеСборки.Добавить(СтрокаТаблицы.Ссылка);
			КонецЦикла;
		Иначе
			ВсеСборки = Таблица.ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		// Получение опубликованных сборок связанных конфигураций.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сборки", ВсеСборки);
		Запрос.УстановитьПараметр("РазделПроекта", РазделПроекта);
		Запрос.Текст = ТекстЗапросаДляРасчетаПрименимости(Ложь);
		УстановитьПривилегированныйРежим(Истина);
		Таблица = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		Для Каждого Строка Из Таблица Цикл
			Если Не ЗначениеЗаполнено(Строка.НикКонфигурации)
				Или СтрНайти(НРег(Строка.НикКонфигурации), "базовая") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КлючПоиска = ИмяКонфигурации(Строка.ИмяКонфигурации) + "," + Строка.НикКонфигурации;
			Сборки = Соответствие[КлючПоиска];
			Если Сборки = Неопределено Тогда
				Соответствие.Вставить(КлючПоиска, Новый Массив);
			КонецЕсли;
			Соответствие[КлючПоиска].Добавить(Строка.Сборка);
		КонецЦикла;
		// Расчет конечной сборки для связанных конфигураций.
		Если ЗначениеЗаполнено(КонечнаяСборкаПоХранилищу) Тогда
			УстановитьПривилегированныйРежим(Истина);
			Для Каждого КлючИЗначение Из Соответствие Цикл
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Проект", ОсновнойПроект);
				Запрос.УстановитьПараметр("СборкиСвязаннойКонфигурации", КлючИЗначение.Значение);
				Запрос.Текст =
					"ВЫБРАТЬ
					|	СборкиВерсииСборкиВключаемыхПроектов.Ссылка КАК СборкаСвязаннойКонфигурации,
					|	СборкиВерсииСборкиВключаемыхПроектов.Сборка КАК СборкаОсновнойКонфигурации
					|ИЗ
					|	Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВерсииСборкиВключаемыхПроектов
					|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
					|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
					|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
					|				ПО (ВерсииПроекта.Владелец = Проекты.Ссылка)
					|			ПО (СборкиВерсии.Владелец = ВерсииПроекта.Ссылка)
					|		ПО (СборкиВерсииСборкиВключаемыхПроектов.Сборка = СборкиВерсии.Ссылка)
					|ГДЕ
					|	Проекты.Ссылка = &Проект
					|	И СборкиВерсииСборкиВключаемыхПроектов.Ссылка В(&СборкиСвязаннойКонфигурации)";
				СвязьСборок = Запрос.Выполнить().Выгрузить();
				
				// Проверка, что нумерация сборок совпадает.
				НумерацияСовпадает = Истина;
				РедакцияОсновнойКонфигурации = Неопределено;
				РедакцияСвязаннойКонфигурации = Неопределено;
				Для Каждого Строка Из СвязьСборок Цикл
					СборкаСвязаннойКонфигурации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СборкаСвязаннойКонфигурации, "Код");
					СборкаОсновнойКонфигурации  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СборкаОсновнойКонфигурации, "Код");
					СборкаСвязаннойКонфигурацииБезРедакции = СборкаБезРедакции(СборкаСвязаннойКонфигурации);
					СборкаОсновнойКонфигурацииБезРедакции  = СборкаБезРедакции(СборкаОсновнойКонфигурации);
					РедакцияОсновнойКонфигурации  = СтрРазделить(СборкаОсновнойКонфигурации, ".")[0];
					РедакцияСвязаннойКонфигурации = СтрРазделить(СборкаСвязаннойКонфигурации, ".")[0];
					Если СборкаСвязаннойКонфигурации <> СборкаОсновнойКонфигурации
						И СборкаСвязаннойКонфигурацииБезРедакции <> СборкаОсновнойКонфигурацииБезРедакции Тогда
						НумерацияСовпадает = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если НумерацияСовпадает Тогда
					Если РедакцияОсновнойКонфигурации = РедакцияСвязаннойКонфигурации Тогда
						КонечнаяСборкаСвязаннойКонфигурации = КонечнаяСборкаПоХранилищу;
					Иначе
						КонечнаяСборкаСвязаннойКонфигурации = СтрРазделить(КонечнаяСборкаПоХранилищу, ".");
						КонечнаяСборкаСвязаннойКонфигурации[0] = РедакцияСвязаннойКонфигурации;
						КонечнаяСборкаСвязаннойКонфигурации = СтрСоединить(КонечнаяСборкаСвязаннойКонфигурации, ".");
					КонецЕсли;
					Результат.КонечныеСборкиСвязанныхКонфигураций.Вставить(КлючИЗначение.Ключ, КонечнаяСборкаСвязаннойКонфигурации);
				КонецЕсли;
			КонецЦикла;
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("СвязанныеКонфигурации", Соответствие);
	
	Возврат Результат;
КонецФункции

Функция СборкаБезРедакции(НомерСборки)
	
	НомерСборкиБезРедакции = СтрРазделить(НомерСборки, ".");
	НомерСборкиБезРедакции.Удалить(0);
	НомерСборкиБезРедакции = СтрСоединить(НомерСборкиБезРедакции, ".");
	
	Возврат НомерСборкиБезРедакции;
	
КонецФункции

Функция ВыгрузкаПатчаИзДвоичныхДанных(ПереданныеПараметры) Экспорт
	
	КаталогПрограммы = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	СписокДоступныхВерсийПлатформы = ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы(КаталогПрограммы);
	РежимСовместимости = "";
	Если ПереданныеПараметры.Свойство("РежимСовместимости")
		И ЗначениеЗаполнено(ПереданныеПараметры.РежимСовместимости) Тогда
		РежимСовместимости = ПереданныеПараметры.РежимСовместимости;
	КонецЕсли;
	
	ВерсияПлатформы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПереданныеПараметры.Версия, "ВерсияПлатформы");
	
	Если ЗначениеЗаполнено(РежимСовместимости)
		И ЗначениеЗаполнено(ВерсияПлатформы)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, РежимСовместимости) < 0 Тогда
		ТекстОшибки = НСтр("ru = 'В карточке версии программы установлена версия платформы ""%1"", которая ниже режима совместимости
			|конфигурации ""%2"".'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВерсияПлатформы, РежимСовместимости);
	КонецЕсли;
	
	СборкаПлатформы = ПоследняяСборкаПлатформыПоВерсии(СписокДоступныхВерсийПлатформы, ВерсияПлатформы);
	
	КаталогПрограммы = КаталогПрограммы + ПолучитьРазделительПути();
	
	ПутьКНовойИБ = ПолучитьИмяВременногоФайла("PatchCheck");
	СоздатьКаталог(ПутьКНовойИБ);
	
	Параметры = Новый Структура;
	Если ПереданныеПараметры.Свойство("ПутьКПатчу") Тогда
		Параметры.Вставить("ПутьКПатчу", ПереданныеПараметры.ПутьКПатчу);
	Иначе
		Параметры.Вставить("ПутьКПатчу", ПутьКНовойИБ + ПолучитьРазделительПути() + ПереданныеПараметры.ИмяПатча + ".cfe");
	КонецЕсли;
	Параметры.Вставить("КаталогВыгрузки", ПутьКНовойИБ + ПолучитьРазделительПути() + "ФайлыРасширения");
	Параметры.Вставить("Кавычка", """");
	Параметры.Вставить("КаталогПрограммы", СтрЗаменить(КаталогПрограммы, "%ВерсияПлатформы%", СборкаПлатформы));
	Параметры.Вставить("СтрокаПодключения", " /F """ + ПутьКНовойИБ + """");
	Параметры.Вставить("Пользователь", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("ВременныйКаталог", ПутьКНовойИБ + ПолучитьРазделительПути());
	Параметры.Вставить("ИмяРасширения", ПереданныеПараметры.ИмяПатча);
	Параметры.Вставить("ИмяФайлаСообщений", ПутьКНовойИБ + ПолучитьРазделительПути() + "out.txt");
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	Параметры.Вставить("РежимСовместимости", РежимСовместимости);
	
	Если Не ПереданныеПараметры.Свойство("ПутьКПатчу") Тогда
		ПереданныеПараметры.ДвоичныеДанные.Записать(Параметры.ПутьКПатчу);
	КонецЕсли;
	
	ЗагрузитьРасширениеИзФайла(Параметры);
	ВыгрузитьРасширениеВФайлы(Параметры);
	
	Возврат Параметры;
	
КонецФункции

Функция АнализИзменений(Параметры, ЗакладкиОшибки)
	
	ДатаПервойСборки = Параметры.ДатаПервойОпубликованнойСборки;
	АдресХранилища   = Параметры.АдресХранилища;
	
	ВерсияПлатформы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ВерсияКонфигурации, "ВерсияПлатформы");
	ЭтоБиблиотека   = ЭтоВерсияБиблиотеки(Параметры.ВерсияКонфигурации);
	
	Изменения          = Новый Массив;
	ДатаНачалаДействия = Неопределено;
	КонфликтныйКоммит  = Неопределено;
	ПараметрыМетодов   = Новый Соответствие;
	ТочноеМестоПроблемы = "";
	ПропущенныеОбъекты = Новый Массив;
	Для Каждого ЗакладкаОшибки Из ЗакладкиОшибки Цикл
		// Определение измененных файлов.
		ТекстКоманды = "show [Хэш] --name-only --pretty=format:""""";
		ТекстКоманды = СтрЗаменить(ТекстКоманды, "[Хэш]", ЗакладкаОшибки.ХэшЗакладки);
		ИзмененныеОбъекты = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		ИзмененныеОбъекты = СтрРазделить(ИзмененныеОбъекты.ПолучитьТекст(), Символы.ПС, Ложь);
		Результат = ПроверкаВозможностиСозданияПатча(ИзмененныеОбъекты, ЗакладкаОшибки.ХэшЗакладки, АдресХранилища);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПропущенныеОбъекты, Результат.Пропущенные);
		Если Результат.НетОбъектовДляВключенияВПатч Тогда
			Продолжить;
		КонецЕсли;
		ИзмененныеОбъекты = Результат.Обрабатываемые;
		// Определение различий.
		Для Каждого ИзмененныйОбъект Из ИзмененныеОбъекты Цикл
			Если СтрНайти(ИзмененныйОбъект, "_Демо") > 0 Тогда
				Продолжить; // Если в закладку попали демо-объекты, то пропускаем.
			КонецЕсли;
			МожноИзменятьМакеты = ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, "8.3.23") >= 0;
			ЭтоМакет = СтрНайти(ИзмененныйОбъект, "Template") > 0;
			ЭтоПрава = Ложь;
			Если ЭтоМакет И Не МожноИзменятьМакеты Тогда
				ПропущенныеОбъекты.Добавить(ИзмененныйОбъект);
				Продолжить;
			КонецЕсли;
			
			ИзмененияОбъекта = Новый Структура;
			ИзмененияОбъекта.Вставить("ИзмененныйОбъект", ИзмененныйОбъект);
			ИзмененияОбъекта.Вставить("ЭтоМакет", ЭтоМакет);
			ИзмененияОбъекта.Вставить("ЭтоПрава", ЭтоПрава);
			ИзмененияОбъекта.Вставить("ИзмененныеМетоды");
			ИзмененияОбъекта.Вставить("НовыеМетоды");
			ИзмененияОбъекта.Вставить("КэшПроцедур");
			ИзмененияОбъекта.Вставить("ЭкспортныеМетоды");
			
			Если Не ЭтоМакет И Не ЭтоПрава Тогда
				ТекстКоманды = "show %1 -p --pretty=format:"""" -w -- %2";
				ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды,
					ЗакладкаОшибки.ХэшЗакладки,
					ИзмененныйОбъект);
				
				РазличияВТекстеМодуля       = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
				ИзмененныеПроцедурыИФункции = ИзмененныеПроцедурыИФункции(ИзмененныйОбъект,
					                                                      ЗакладкаОшибки.ХэшЗакладки,
					                                                      РазличияВТекстеМодуля,
					                                                      АдресХранилища);
				
				Если ИзмененныеПроцедурыИФункции.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Получение истории изменения объекта для текущей версии.
			ТекстКоманды = "log --pretty=format:""%H | %cd"" --date=format:""%Y-%m-%d %H:%M:%S"" --since ""%1"" --before ""%2"" -- %3";
			ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
				ДатаПервойСборки,
				ЗакладкаОшибки.ДатаЗакладки,
				ИзмененныйОбъект);
			ИсторияИзменения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
			ИсторияИзменения = СтрРазделить(ИсторияИзменения.ПолучитьТекст(), Символы.ПС, Ложь);
			КоличествоЗакладок = ИсторияИзменения.Количество();
			
			// Добавляем в список анализируемых закладок одну за пределами интервала выпуска сборок для текущей версии.
			// Это требуется для повышения точности определения версий применимости патча.
			ТекстКоманды = "log -n %КоличествоЗакладок% --pretty=format:""%H | %cd"" --date=format:""%Y-%m-%d %H:%M:%S"" --before ""%1"" -- %2";
			ТекстКоманды = СтрЗаменить(ТекстКоманды, "%КоличествоЗакладок%", КоличествоЗакладок + 1);
			ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
				ЗакладкаОшибки.ДатаЗакладки,
				ИзмененныйОбъект);
			ИсторияИзменения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
			ИсторияИзменения = СтрРазделить(ИсторияИзменения.ПолучитьТекст(), Символы.ПС, Ложь);
			
			ЕстьИзмененияПоОшибке = (ИсторияИзменения.Количество() > 0);
			КоммитыПоДругимОшибкам = КоммитыМеждуИсправлениямиОшибки(ИсторияИзменения, ЗакладкиОшибки);
			УдалитьЗакладкиПоОшибкеИзИстории(ИсторияИзменения, ЗакладкиОшибки);
			
			ЭтоНовыйОбъект = ИсторияИзменения.Количество() = 0 И ЕстьИзмененияПоОшибке;
			
			// Если ИсторияИзменения = 0 и в модуле только новые закладки в рамках этой ошибки, т.е. раньше модуль не изменялся или только добавлен.
			Если ИсторияИзменения.Количество() = 0 И Не ЭтоНовыйОбъект Тогда
				ВызватьИсключение НСтр("ru = 'Не найдено изменений по объекту.'");
			КонецЕсли;
			
			// Получение текста процедур и функций до исправления.
			Если ЭтоНовыйОбъект Тогда
				ТекстМодуля = "";
			Иначе
				ЗакладкаДоИсправления = ИсторияИзменения[0];
				ЗакладкаДоИсправленияЧастями = СтрРазделить(ЗакладкаДоИсправления, "|");
				Если Не ЭтоМакет И Не ЭтоПрава Тогда
					ХэшЗакладки   = ЗакладкаДоИсправленияЧастями[0];
					ТекстКоманды = "show %1:%2";
					ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстКоманды, СокрЛП(ХэшЗакладки), ИзмененныйОбъект);
					Модуль      = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
					ТекстМодуля = Модуль.ПолучитьТекст();
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЭтоМакет И Не ЭтоПрава Тогда
				ИмяОбъекта = ПолноеИмяПоИмениОбъектаВХранилище(ИзмененныйОбъект);
				Результат = ТекстИзменяемыхПроцедурИФункций(ТекстМодуля, ИзмененныеПроцедурыИФункции, ИмяОбъекта);
				ТекстИзменяемыхПроцедурИФункций = Результат.ТекстПроцедурИФункций;
				ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ПараметрыМетодов, Результат.ПараметрыМетодов, Истина);
			КонецЕсли;
			
			// Определение даты закладки, с которой применим создаваемый патч.
			ВсеМетодыНайдены = Истина;
			КонфликтноеМесто = "";
			Если Не ЭтоНовыйОбъект Тогда
				ДатаНачалаДействияПромежуточная = ДатаВФормате1С(ЗакладкаДоИсправленияЧастями[1]);
				КонфликтныйКоммитПромежуточный  = ЗакладкаДоИсправленияЧастями[0];
				Если Не ЭтоМакет И Не ЭтоПрава Тогда
					ИсторияИзменения.Удалить(0);
					// Возвращаем обратно коммиты других ошибок, чтобы по ним выполнилась проверка наличия конфликтов.
					Для Каждого КоммитПоДругойОшибке Из КоммитыПоДругимОшибкам Цикл
						ИсторияИзменения.Вставить(0, КоммитПоДругойОшибке);
					КонецЦикла;
					Для Каждого Закладка Из ИсторияИзменения Цикл
						ЗакладкаЧастями = СтрРазделить(Закладка, "|");
						ХэшЗакладки = ЗакладкаЧастями[0];
						ТекстКоманды = "show %1:%2";
						ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстКоманды, СокрЛП(ХэшЗакладки), ИзмененныйОбъект);
						Модуль = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
						ТекстМодуля = Модуль.ПолучитьТекст();
						Для Каждого ПроверяемыйМетод Из ТекстИзменяемыхПроцедурИФункций Цикл
							Если СтрНайти(ТекстМодуля, ПроверяемыйМетод) = 0 Тогда
								ВсеМетодыНайдены = Ложь;
								КонфликтноеМесто = СтрРазделить(ПроверяемыйМетод, Символы.ПС)[0];
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						Если ВсеМетодыНайдены Тогда
							ДатаНачалаДействияПромежуточная = ДатаВФормате1С(ЗакладкаЧастями[1]);
							КонфликтныйКоммитПромежуточный  = ХэшЗакладки;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ВсеМетодыНайдены Тогда
				// Если ни с одной закладкой нет конфликтов, то изменения применимы с самой первой сборки.
				ДатаНачалаДействияПромежуточная = ДатаПервойСборки;
			КонецЕсли;
			
			ДатаНачалаДействия = ?(ДатаНачалаДействия = Неопределено,
				ДатаНачалаДействияПромежуточная,
				Макс(ДатаНачалаДействияПромежуточная, ДатаНачалаДействия));
			
			Если ДатаНачалаДействия = ДатаНачалаДействияПромежуточная Тогда
				КонфликтныйКоммит   = КонфликтныйКоммитПромежуточный;
				ТочноеМестоПроблемы = КонфликтноеМесто;
			КонецЕсли;
			ИзмененияОбъекта.ИзмененныеМетоды = ИзмененныеПроцедурыИФункции;
			Если Не ЭтоМакет И Не ЭтоПрава Тогда
				ИзмененияОбъекта.НовыеМетоды = Результат.НовыеМетоды;
				ИзмененияОбъекта.КэшПроцедур = Результат.КэшПроцедур;
				ИзмененияОбъекта.ЭкспортныеМетоды = Результат.ЭкспортныеМетоды;
			КонецЕсли;
			Изменения.Добавить(ИзмененияОбъекта);
		КонецЦикла;
	КонецЦикла;
	
	ДатаЗакладки  = Неопределено;
	ПоследняяЗакладкаОшибки = ЗакладкиОшибки[0];
	ХэшЗакладки = ПоследняяЗакладкаОшибки.ХэшЗакладки;
	ОписаниеОбъекта = ОписаниеОбъекта(ИзмененныеОбъекты[0], Параметры);
	Префикс = ОписаниеОбъекта.Префикс;
	
	// Определение коммита, в рамках которого исправление ошибки было помещено
	// в релизную ветку (если был merge request).
	ТекстКоманды = "rev-parse --abbrev-ref HEAD";
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	ИмяВетки = РезультатВыполнения.ПолучитьСтроку(1);
	
	ТекстКоманды = "find-merge %1";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
		ПоследняяЗакладкаОшибки.ХэшЗакладки);
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	РезультатВыполнения = РезультатВыполнения.ПолучитьТекст();
	РезультатВыполнения = СтрРазделить(РезультатВыполнения, Символы.ПС, Ложь);
	Если РезультатВыполнения.Количество() = 1 Тогда
		// Мерж-реквест найден, определяем, что в него входит исходный коммит ошибки.
		КоммитСлияния = РезультатВыполнения[0];
		ДочерниеКоммиты = ДочерниеКоммиты(КоммитСлияния, АдресХранилища);
		Если ДочерниеКоммиты.Найти(ПоследняяЗакладкаОшибки.ХэшЗакладки) = Неопределено Тогда
			КоммитСлияния = ПоследняяЗакладкаОшибки.ХэшЗакладки;
		КонецЕсли;
	Иначе
		КоммитСлияния = ПоследняяЗакладкаОшибки.ХэшЗакладки;
	КонецЕсли;
	
	// Проверка, соответствует ли имя конфигурации в корне имени подсистемы.
	ТекстКоманды = "grep -e ""<name>%1</name>"" ""%2Configuration/Configuration.mdo""";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
		Параметры.ИмяКонфигурации, Префикс);
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	РезультатВыполнения = РезультатВыполнения.ПолучитьТекст();
	ИмяПодсистемыРавноИмениКорня = Ложь;
	Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ИмяПодсистемыРавноИмениКорня = Истина;
	КонецЕсли;
	
	// Поиск модуля, в котором описывается подсистема и ее версия.
	ТекстКоманды = "grep -e ""Описание.Имя"" --and -e ""%1"" ""%2CommonModules/ОбновлениеИнформационнойБазы*""";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
		Параметры.ИмяКонфигурации, Префикс);
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	РезультатВыполнения = РезультатВыполнения.ПолучитьТекст();
	ПутьКМодулю = Неопределено;
	Если Не ЗначениеЗаполнено(РезультатВыполнения)
		И ИмяПодсистемыРавноИмениКорня Тогда
		ТекстКоманды = "grep -e ""Описание.Имя"" --and -e ""%1"" ""%2CommonModules/ОбновлениеИнформационнойБазы*""";
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
			"Метаданные.Имя", Префикс);
		РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		РезультатВыполнения = РезультатВыполнения.ПолучитьТекст();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатВыполнения) Тогда
		РезультатВыполненияЧастями = СтрРазделить(РезультатВыполнения, ":");
		ПутьКМодулю = РезультатВыполненияЧастями[0];
	КонецЕсли;
	ВерсияВХранилище = "";
	Если ПутьКМодулю <> Неопределено Тогда
		ВерсияВХранилище = ВерсияВХранилищеПоКоммиту(КоммитСлияния, АдресХранилища, ПутьКМодулю);
	КонецЕсли;
	
	ЗачитатьВерсиюИзМетаданных = Ложь;
	Если ВерсияВХранилище = "Метаданные.Версия" Тогда
		ЗачитатьВерсиюИзМетаданных = Истина;
	КонецЕсли;
	
	ОбъектКонфигурация = Префикс + "Configuration.xml";
	ТекстКоманды = "show %1:%2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
		ПоследняяЗакладкаОшибки.ХэшЗакладки, ОбъектКонфигурация);
	Результат    = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	ВыгрузкаВФорматеEDT = Ложь;
	РежимСовместимости = Неопределено;
	Если Результат.КоличествоСтрок() = 0 Тогда
		ОбъектКонфигурация = Префикс + "Configuration/Configuration.mdo";
		ТекстКоманды = "show %1:%2";
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
			ПоследняяЗакладкаОшибки.ХэшЗакладки, ОбъектКонфигурация);
		Результат    = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		Результат.Записать(ВременныйФайл);
		
		ДокументDOM = ДокументDOM(ВременныйФайл);
		УзелcompatibilityMode = ДокументDOM.ПолучитьЭлементыПоИмени("compatibilityMode")[0];
		РежимСовместимости = УзелcompatibilityMode.ТекстовоеСодержимое;
		Если ЗачитатьВерсиюИзМетаданных Тогда
			УзелVersion = ДокументDOM.ПолучитьЭлементыПоИмени("version")[0];
			ВерсияВХранилище = УзелVersion.ТекстовоеСодержимое;
		КонецЕсли;
		
		Попытка
			УдалитьФайлы(ВременныйФайл);
		Исключение
			// Будет удалено позднее средствами платформы.
		КонецПопытки;
		
		ВыгрузкаВФорматеEDT = Истина;
	КонецЕсли;
	
	Если КоммитСлияния <> ПоследняяЗакладкаОшибки.ХэшЗакладки Тогда
		ТекстКоманды = "show --no-patch --no-notes --pretty=""%cd"" %1 --date=format:""%Y-%m-%d %H:%M:%S""";
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, КоммитСлияния);
		Результат    = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
		ДатаВФорматеГит = СокрЛП(Результат.ПолучитьТекст());
		ДатаЗакладки  = ДатаВФормате1С(ДатаВФорматеГит);
	Иначе
		ДатаЗакладки  = ДатаВФормате1С(ПоследняяЗакладкаОшибки.ДатаЗакладки);
	КонецЕсли;
	
	// Проверка, что ВерсияВХранилище имеет формат версии.
	Если Не ЗначениеЗаполнено(ВерсияВХранилище)
		Или СтрРазделить(ВерсияВХранилище, ".").Количество() <> 4 Тогда
		ВерсияВХранилище = Неопределено;
	КонецЕсли;
	
	РезультатАнализаИзменений = РезультатАнализаИзменений(Изменения, ДатаНачалаДействия, ПропущенныеОбъекты, ЭтоБиблиотека, РежимСовместимости);
	РезультатАнализаИзменений.Вставить("ДатаИсправления", ДатаЗакладки);
	РезультатАнализаИзменений.Вставить("ВыгрузкаВФорматеEDT", ВыгрузкаВФорматеEDT);
	РезультатАнализаИзменений.Вставить("КонфликтныйКоммит", КонфликтныйКоммит);
	РезультатАнализаИзменений.Вставить("ТочноеМестоПроблемы", ТочноеМестоПроблемы);
	РезультатАнализаИзменений.Вставить("ПараметрыМетодов", ПараметрыМетодов);
	РезультатАнализаИзменений.Вставить("РежимСовместимости", РежимСовместимости);
	РезультатАнализаИзменений.Вставить("ВерсияВХранилище", ВерсияВХранилище);
	
	Возврат РезультатАнализаИзменений;
КонецФункции

Функция ВерсияВХранилищеПоКоммиту(Коммит, АдресХранилища, ПутьКМодулю)
	
	// Получение даты, по которой будет определяться номер сборки в хранилище.
	ТекстКоманды = "show -s --format=""%ci"" %1";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
		Коммит);
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	ДатаКоммитаСлияния = СокрЛП(РезультатВыполнения.ПолучитьТекст());
	// Коммит последнего изменения модуля ОбновлениеИнформационнойБазы<ХХХ>.
	ТекстКоманды = "log -n 1 --before ""%1"" --format=""%H"" -- %2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
		ДатаКоммитаСлияния, ПутьКМодулю);
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	ХэшКоммита = СокрЛП(РезультатВыполнения.ПолучитьТекст());
	// Определение версии.
	ТекстКоманды = "show %1:%2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, 
		ХэшКоммита, ПутьКМодулю);
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	ТекстМодуля = РезультатВыполнения.ПолучитьТекст();
	ВерсияВХранилище = ВерсияКонфигурацииИзМодуля(ТекстМодуля);
	
	Возврат ВерсияВХранилище;
	
КонецФункции

Процедура СоздатьРасширение(Параметры)
	
	Изменения = Параметры.Изменения;
	ВыгрузитьРасширениеВФайлы(Параметры);
	ЗачитатьВерсиюXML(Параметры);
	ОписаниеОбъектовМассив = Новый Массив;
	
	ПрефиксРасширения = ИмяПатча(Параметры.НомерОшибки, Параметры.НомерПатча, Ложь);
	Параметры.Вставить("НазваниеПатча", ПрефиксРасширения);
	
	ИзменяемыеМетаданные = Новый Массив;
	ПодготовленныеXMLОбъектов          = Новый Массив;
	ВсеНовыеМетоды                     = Новый Соответствие;
	ИзмененаОбязательностьПараметра    = Новый Массив;
	ДобавленНеобязательныйПараметр     = Новый Соответствие;
	ИзмененЭкспорт                     = Новый Соответствие;
	Для Каждого Изменение Из Изменения Цикл
		ОписаниеОбъекта = ОписаниеОбъекта(Изменение.Ключ, Параметры);
		ВсеНовыеМетоды.Вставить(ОписаниеОбъекта.ИмяОбъекта, Изменение.Значение.НовыеМетоды);
	КонецЦикла;
	
	// Предварительные действия, анализ изменения состава параметров.
	Для Каждого Изменение Из Изменения Цикл
		Если Изменение.Значение.ЭтоМакет Или Изменение.Значение.ЭтоПрава Тогда
			Продолжить;
		КонецЕсли;
		ТекстКоманды = "show %1:%2";
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстКоманды, СокрЛП(Параметры.ХэшЗакладки), Изменение.Ключ);
		Модуль = ЗапросКХранилищу(ТекстКоманды, Параметры.АдресХранилища);
		ТекстМодуля = Модуль.ПолучитьТекст();
		
		ОписаниеОбъекта = ОписаниеОбъекта(Изменение.Ключ, Параметры);
		
		ВсеИзменения = Изменение.Значение.ВсеИзменения;
		ЭкспортныеМетоды = Изменение.Значение.ЭкспортныеМетоды;
		ТекстИзменяемыхПроцедурИФункций = ТекстПроцедурИФункцийДляПатча(ТекстМодуля, ВсеИзменения, ПрефиксРасширения + "_");
		Результат = МетодыСИзмененнымиПараметрами(ТекстИзменяемыхПроцедурИФункций, Параметры.ПараметрыМетодов, ЭкспортныеМетоды, Изменение.Значение.НовыеМетоды, Изменение.Ключ);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИзмененаОбязательностьПараметра, Результат.ИзмененаОбязательностьПараметра, Истина);
		// При добавлении новых необязательных параметров нужно дополнительно добавить в расширение процедуру, которая
		// будет делать редирект вызовов со старым составом параметров.
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ДобавленНеобязательныйПараметр, Результат.ДобавленНеобязательныйПараметр, Истина);
		// При изменении количества параметров или признака Экспорт процедуры и функции добавляются в расширение как новые - без директивы Вместо.
		// Места вызова старого метода заменяются на вызов метода из расширения.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Изменение.Значение.НовыеМетоды, Результат.ИзмененСоставПараметровИлиЭкспорт, Истина);
		// При изменении признака Экспорт метод надо добавлять как новый с редиректом из старого места вызова.
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИзмененЭкспорт, Результат.ИзмененЭкспорт, Истина);
		
		Если ВсеНовыеМетоды[ОписаниеОбъекта.ИмяОбъекта] = Неопределено Тогда
			ВсеНовыеМетоды.Вставить(ОписаниеОбъекта.ИмяОбъекта, Результат.ИзмененСоставПараметровИлиЭкспорт);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеНовыеМетоды[ОписаниеОбъекта.ИмяОбъекта], Результат.ИзмененСоставПараметровИлиЭкспорт, Истина);
		КонецЕсли;
		
		Если ВсеНовыеМетоды[ОписаниеОбъекта.ИмяОбъекта] = Неопределено Тогда
			ВсеНовыеМетоды.Вставить(ОписаниеОбъекта.ИмяОбъекта, Результат.ИзмененаОбязательностьПараметра);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеНовыеМетоды[ОписаниеОбъекта.ИмяОбъекта], Результат.ИзмененаОбязательностьПараметра, Истина);
		КонецЕсли;
	КонецЦикла;
	Параметры.Вставить("ВсеНовыеМетоды", ВсеНовыеМетоды);
	Параметры.Вставить("ИзмененаОбязательностьПараметра", ИзмененаОбязательностьПараметра);
	Параметры.Вставить("ДобавленНеобязательныйПараметр", ДобавленНеобязательныйПараметр);
	Параметры.Вставить("ИзмененЭкспорт", ИзмененЭкспорт);
	Параметры.Вставить("НовыеМетоды", Новый Массив);
	Параметры.Вставить("ТипМакета", "");
	
	// Формирование расширения.
	Для Каждого Изменение Из Изменения Цикл
		ТекстКоманды = "show %1:%2";
		ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстКоманды, СокрЛП(Параметры.ХэшЗакладки), Изменение.Ключ);
		Модуль = ЗапросКХранилищу(ТекстКоманды, Параметры.АдресХранилища);
		ТекстМодуля = Модуль.ПолучитьТекст();
		
		ОписаниеОбъекта = ОписаниеОбъекта(Изменение.Ключ, Параметры);
		ОписаниеОбъектовМассив.Добавить(ОписаниеОбъекта);
		Если Изменение.Значение.ЭтоМакет Тогда
			Параметры.ТипМакета = ТипМакета(ОписаниеОбъекта, Параметры);
			ДобавитьСодержимоеМакетаВПатч(Изменение, ОписаниеОбъекта, Параметры);
		ИначеЕсли Изменение.Значение.ЭтоПрава Тогда
			ДобавитьСоставПравВПатч(Изменение, ОписаниеОбъекта, Параметры);
		Иначе
			ВсеИзменения = Изменение.Значение.ВсеИзменения;
			НовыеМетоды  = Изменение.Значение.НовыеМетоды;
			
			ЗаполнитьИзменяемыеМетоды(Изменение.Значение.КэшПроцедур, ИзменяемыеМетаданные);
			
			Параметры.НовыеМетоды = НовыеМетоды;
			ТекстИзменяемыхПроцедурИФункций = ТекстПроцедурИФункцийДляПатча(ТекстМодуля, ВсеИзменения, ПрефиксРасширения + "_", ОписаниеОбъекта.ЭтоФорма);
			
			ОбработатьВызовыНовыхПроцедурИФункций(ТекстИзменяемыхПроцедурИФункций, Параметры, ОписаниеОбъекта.ИмяОбъекта);
			ДобавитьРедиректСтарыхВызовов(ТекстИзменяемыхПроцедурИФункций, Параметры, "ДобавленНеобязательныйПараметр", Изменение.Ключ);
			ДобавитьРедиректСтарыхВызовов(ТекстИзменяемыхПроцедурИФункций, Параметры, "ИзмененЭкспорт", Изменение.Ключ);
			
			ВнестиИсправлениеВМодуле(ТекстИзменяемыхПроцедурИФункций, ОписаниеОбъекта, Параметры);
		КонецЕсли;
		Если ПодготовленныеXMLОбъектов.Найти(ОписаниеОбъекта.ТипОбъекта + ОписаниеОбъекта.ИмяОбъекта) = Неопределено Тогда
			// Если изменения в модуле объекта и менеджера, то повторно не готовим корневой XML.
			ПервоначальнаяПодготовкаXML(ОписаниеОбъекта, Параметры);
			ПодготовленныеXMLОбъектов.Добавить(ОписаниеОбъекта.ТипОбъекта + ОписаниеОбъекта.ИмяОбъекта);
		КонецЕсли;
		ПодготовитьXMLФайлы(ОписаниеОбъекта, Параметры);
	КонецЦикла;
	
	Параметры.Удалить("ВсеНовыеМетоды");
	Параметры.Удалить("НовыеМетоды");
	Параметры.Удалить("ИзмененаОбязательностьПараметра");
	Параметры.Удалить("ДобавленНеобязательныйПараметр");
	
	Параметры.Вставить("ИзменяемыеМетаданные", СтрСоединить(ИзменяемыеМетаданные, Символы.ПС));
	ПодготовитьРасширение(Параметры, ОписаниеОбъектовМассив);
	ЗагрузитьРасширениеИзФайлов(Параметры);
	ВыгрузитьРасширениеВФайл(Параметры);
	
КонецПроцедуры

Процедура ЗаполнитьИзменяемыеМетоды(КэшПроцедур, ИзменяемыеМетаданные)
	
	Для Каждого КэшПроцедуры Из КэшПроцедур Цикл
		ИзменяемыеМетаданные.Добавить(КэшПроцедуры.Ключ + " " + КэшПроцедуры.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВнестиИсправлениеВМодуле(ТекстИзменяемыхПроцедурИФункций, ОписаниеОбъекта, Параметры)
	
	// Перенос изменений в тексте модуля.
	ПутьКФайлуМодуля = Параметры.КаталогВыгрузки + ОписаниеОбъекта.ПутьКМодулю;
	СоздатьКаталог(ПутьКФайлуМодуля);
	ПутьКФайлуМодуля = ПутьКФайлуМодуля + ОписаниеОбъекта.ИмяМодуля;
	НужнаОберткаМодуля = СтрНачинаетсяС(ОписаниеОбъекта.ИмяМодуля, "ManagerModule")
		Или СтрНачинаетсяС(ОписаниеОбъекта.ИмяМодуля, "ObjectModule")
		Или СтрНачинаетсяС(ОписаниеОбъекта.ИмяМодуля, "RecordSetModule")
		Или СтрНачинаетсяС(ОписаниеОбъекта.ИмяМодуля, "ValueManagerModule");
	
	ЭтоМодульМенеджера = СтрНачинаетсяС(ОписаниеОбъекта.ИмяМодуля, "ManagerModule")
		Или СтрНачинаетсяС(ОписаниеОбъекта.ИмяМодуля, "ValueManagerModule");
	
	Модуль = "";
	Если НужнаОберткаМодуля Тогда
		Модуль = "#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда" + Символы.ПС + Символы.ПС;
	КонецЕсли;
	Для Каждого ИзменяемыйМетод Из ТекстИзменяемыхПроцедурИФункций Цикл
		Если Параметры.НовыеМетоды.Найти(ИзменяемыйМетод.Ключ) = Неопределено Тогда
			Шапка = "&Вместо(""%1"")";
			ИмяМетода = ИзменяемыйМетод.Ключ;
			Если СтрЗаканчиваетсяНа(ИмяМетода, "_Редирект") Тогда
				ИмяМетода = СтрЗаменить(ИмяМетода, "_Редирект", "");
			КонецЕсли;
			Шапка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шапка, ИмяМетода);
		Иначе
			Шапка = "";
		КонецЕсли;
		
		Модуль = Модуль + Шапка + Символы.ПС + ИзменяемыйМетод.Значение + Символы.ПС + Символы.ПС;
	КонецЦикла;
	
	Если НужнаОберткаМодуля Тогда
		Если ЭтоМодульМенеджера Тогда
			Модуль = Модуль + "#КонецЕсли";
		Иначе
			Модуль = Модуль +
				"#Иначе
				|ВызватьИсключение НСтр(""ru = 'Недопустимый вызов объекта на клиенте.'"");
				|#КонецЕсли";
		КонецЕсли;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Модуль);
	ТекстовыйДокумент.Записать(ПутьКФайлуМодуля);
	
КонецПроцедуры

Функция ТипМакета(ОписаниеОбъекта, Параметры)
	
	// Определение типа объекта.
	ПутьXMLОбработки = ОписаниеОбъекта.КаталогОбъекта 
		+ ОписаниеОбъекта.ИмяОбъекта + "/"
		+ ОписаниеОбъекта.ИмяОбъекта + ".mdo";
	
	ТекстКоманды = "show %1:%2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстКоманды, СокрЛП(Параметры.ХэшЗакладки), ПутьXMLОбработки);
	Обработка = ЗапросКХранилищу(ТекстКоманды, Параметры.АдресХранилища);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Обработка.Записать(ИмяВременногоФайла);
	
	ДокументDOM = ДокументDOM(ИмяВременногоФайла);
	
	Если ОписаниеОбъекта.ЭтоОбщийМакет Тогда
		РезультатXPath = ВычислитьВыражениеXPath("//templateType", ДокументDOM);
	Иначе
		РезультатXPath = ВычислитьВыражениеXPath(СтрШаблон("//templates/name[text() = '%1']/parent::*/templateType", ОписаниеОбъекта.ИмяМакета), ДокументDOM);
	КонецЕсли;
	ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	
	Возврат ЭлементDOM.ТекстовоеСодержимое;
	
КонецФункции

Процедура ДобавитьСодержимоеМакетаВПатч(Изменение, ОписаниеОбъекта, Параметры)
	ТекстКоманды = "show %1:%2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстКоманды, СокрЛП(Параметры.ХэшЗакладки), Изменение.Ключ);
	Макет = ЗапросКХранилищу(ТекстКоманды, Параметры.АдресХранилища);
	ТекстМакета = Макет.ПолучитьТекст();
	
	ПутьКФайлуМакета = Параметры.КаталогВыгрузки + ОписаниеОбъекта.ПутьКМодулю;
	СоздатьКаталог(ПутьКФайлуМакета);
	ИмяМакета = СтрРазделить(ОписаниеОбъекта.ИмяМодуля, ".");
	Если ИмяМакета[1] = "addin" Или ИмяМакета[1] = "bin" Тогда
		ИмяМакета[1] = "bin";
	ИначеЕсли ИмяМакета[1] <> "txt" И ИмяМакета[1] <> "html" Тогда
		ИмяМакета[1] = "xml";
	КонецЕсли;
	ПутьКФайлуМакета = ПутьКФайлуМакета + СтрСоединить(ИмяМакета, ".");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстМакета);
	ТекстовыйДокумент.Записать(ПутьКФайлуМакета);
	
КонецПроцедуры

Процедура ДобавитьСоставПравВПатч(Изменение, ОписаниеОбъекта, Параметры)
	
	ТекстКоманды = "show %1:%2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстКоманды, СокрЛП(Параметры.ХэшЗакладки), Изменение.Ключ);
	Макет = ЗапросКХранилищу(ТекстКоманды, Параметры.АдресХранилища);
	СодержимоеРоли = Макет.ПолучитьТекст();
	
	ПутьКФайлуПрав = Параметры.КаталогВыгрузки + ОписаниеОбъекта.ПутьКМодулю;
	СоздатьКаталог(ПутьКФайлуПрав);
	
	ИмяФайлаПрав = СтрЗаменить(ОписаниеОбъекта.ИмяМодуля, ".rights", ".xml");
	ПутьКФайлуПрав = ПутьКФайлуПрав + ИмяФайлаПрав;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СодержимоеРоли);
	ТекстовыйДокумент.Записать(ПутьКФайлуПрав);
	
КонецПроцедуры

Процедура ПервоначальнаяПодготовкаXML(ОписаниеОбъекта, Параметры)
	
	ОтносительныйПутьКXML = ОписаниеОбъекта.ИмяОбъекта + ".xml";
	Параметры.Вставить("ОтносительныйПутьКXML", ОтносительныйПутьКXML);
	
	Если ОписаниеОбъекта.ТипОбъекта = "CommonModule" Тогда
		Если Параметры.ВыгрузкаВФорматеEDT Тогда
			ПутьКXMLВХранилище = ОписаниеОбъекта.КаталогОбъекта
				+ ОписаниеОбъекта.ИмяОбъекта + "/"
				+ ОписаниеОбъекта.ИмяОбъекта + ".mdo";
		Иначе
			ПутьКXMLВХранилище = ОписаниеОбъекта.КаталогОбъекта + ОтносительныйПутьКXML;
		КонецЕсли;
		ПутьКФайлу = XMLФайлОбъекта(ПутьКXMLВХранилище, ОписаниеОбъекта, Параметры);
		
		ДокументDOM = ДокументDOM(ПутьКФайлу);
		
		УзелGlobal = ДокументDOM.ПолучитьЭлементыПоИмени("Global");
		УзелClientManagedApplication = ДокументDOM.ПолучитьЭлементыПоИмени("ClientManagedApplication");
		УзелServer = ДокументDOM.ПолучитьЭлементыПоИмени("Server");
		УзелExternalConnection = ДокументDOM.ПолучитьЭлементыПоИмени("ExternalConnection");
		УзелClientOrdinaryApplication = ДокументDOM.ПолучитьЭлементыПоИмени("ClientOrdinaryApplication");
		УзелServerCall = ДокументDOM.ПолучитьЭлементыПоИмени("ServerCall");
		УзелPrivileged = ДокументDOM.ПолучитьЭлементыПоИмени("Privileged");
		УзелReturnValuesReuse = ДокументDOM.ПолучитьЭлементыПоИмени("ReturnValuesReuse");
		
		Глобальный            = ?(УзелGlobal.Количество() = 0, "false", УзелGlobal[0].ТекстовоеСодержимое);
		УправляемоеПриложение = ?(УзелClientManagedApplication.Количество() = 0, "false", УзелClientManagedApplication[0].ТекстовоеСодержимое);
		Сервер                = ?(УзелServer.Количество() = 0, "false", УзелServer[0].ТекстовоеСодержимое);
		ВнешнееСоединение     = ?(УзелExternalConnection.Количество() = 0, "false", УзелExternalConnection[0].ТекстовоеСодержимое);
		ОбычноеПриложение     = ?(УзелClientOrdinaryApplication.Количество() = 0, "false", УзелClientOrdinaryApplication[0].ТекстовоеСодержимое);
		ВызовСервера          = ?(УзелServerCall.Количество() = 0, "false", УзелServerCall[0].ТекстовоеСодержимое);
		Привилегированный     = ?(УзелPrivileged.Количество() = 0, "false", УзелPrivileged[0].ТекстовоеСодержимое);
		ПовторноеИспользование = ?(УзелReturnValuesReuse.Количество() = 0, "DontUse", УзелReturnValuesReuse[0].ТекстовоеСодержимое);
		
	КонецЕсли;
	
	ТипОбъекта = СоответствиеРусскихИАнглийскихИмен().Получить(ОписаниеОбъекта.ТипОбъекта);
	Если ТипОбъекта = "ОбщаяФорма" Тогда
		ТипОбъекта = "Форма";
	КонецЕсли;
	ПутьКФайлуШаблону = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ТипОбъекта + ".xml";
	ПутьКФайлу = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ОтносительныйПутьКXML;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлуШаблону);
	ТекстовыйДокумент.Записать(ПутьКФайлу);
	
	ДокументDOM = ДокументDOM(ПутьКФайлу);
	
	УзелProperties = ДокументDOM.ПолучитьЭлементыПоИмени("Properties")[0];
	Если ОписаниеОбъекта.ТипОбъекта = "CommonModule" Тогда
		УзелGlobal = ДокументDOM.ПолучитьЭлементыПоИмени("Global");
		УстановитьЗначениеУзла(УзелGlobal, Глобальный);
		УзелClientManagedApplication = ДокументDOM.ПолучитьЭлементыПоИмени("ClientManagedApplication");
		УстановитьЗначениеУзла(УзелClientManagedApplication, УправляемоеПриложение);
		УзелServer = ДокументDOM.ПолучитьЭлементыПоИмени("Server");
		УстановитьЗначениеУзла(УзелServer, Сервер);
		УзелExternalConnection = ДокументDOM.ПолучитьЭлементыПоИмени("ExternalConnection");
		УстановитьЗначениеУзла(УзелExternalConnection, ВнешнееСоединение);
		УзелClientOrdinaryApplication = ДокументDOM.ПолучитьЭлементыПоИмени("ClientOrdinaryApplication");
		УстановитьЗначениеУзла(УзелClientOrdinaryApplication, ОбычноеПриложение);
		УзелServerCall = ДокументDOM.ПолучитьЭлементыПоИмени("ServerCall");
		УстановитьЗначениеУзла(УзелServerCall, ВызовСервера);
		УзелPrivileged = ДокументDOM.ПолучитьЭлементыПоИмени("Privileged");
		УстановитьЗначениеУзла(УзелPrivileged, Привилегированный);
		УзелReturnValuesReuse = ДокументDOM.ПолучитьЭлементыПоИмени("ReturnValuesReuse");
		УстановитьЗначениеУзла(УзелReturnValuesReuse, ПовторноеИспользование);
	ИначеЕсли ОписаниеОбъекта.ТипОбъекта <> "CommonModule" Тогда
		УзлыChildObjects = ДокументDOM.ПолучитьЭлементыПоИмени("ChildObjects");
		ЕстьДочерние = УзлыChildObjects <> Неопределено И УзлыChildObjects.Количество() > 0;
		Родитель = УзелProperties.РодительскийУзел;
		Родитель.УдалитьДочерний(УзелProperties);
		Если ЕстьДочерние Тогда
			Родитель.УдалитьДочерний(УзлыChildObjects[0]);
		КонецЕсли;
		
		УзелProperties = ДокументDOM.СоздатьЭлемент("Properties");
		УзелName = ДокументDOM.СоздатьЭлемент("Name");
		
		УзелProperties.ДобавитьДочерний(УзелName);
		Родитель.ДобавитьДочерний(УзелProperties);
		Если Не ОписаниеОбъекта.ЭтоОбщаяФорма И Не ОписаниеОбъекта.ЭтоПрава И ОписаниеОбъекта.ТипОбъекта <> "Constant" Тогда
			УзелChildObjects = ДокументDOM.СоздатьЭлемент("ChildObjects");
			Родитель.ДобавитьДочерний(УзелChildObjects);
		КонецЕсли;
		
		ЭлементыGeneratedType = ДокументDOM.ПолучитьЭлементыПоИмени("xr:GeneratedType");
		Для Каждого ЭлементGeneratedType Из ЭлементыGeneratedType Цикл
			АтрибутName = ЭлементGeneratedType.Атрибуты.ПолучитьИменованныйЭлемент("name");
			АтрибутName.ТекстовоеСодержимое = СтрЗаменить(АтрибутName.ТекстовоеСодержимое, ТипОбъекта, ОписаниеОбъекта.ИмяОбъекта);
		КонецЦикла;
		
		Если ОписаниеОбъекта.ЭтоОбщаяФорма Тогда
			УзелFormType = ДокументDOM.СоздатьЭлемент("FormType");
			УзелFormType.ТекстовоеСодержимое = "Managed";
			УзелProperties.ДобавитьДочерний(УзелFormType);
		КонецЕсли;
	КонецЕсли;
	
	ЗаменитьИдентификаторыОбъекта(ДокументDOM);
	
	УзелName = ДокументDOM.ПолучитьЭлементыПоИмени("Name")[0];
	УзелName.ТекстовоеСодержимое = ОписаниеОбъекта.ИмяОбъекта;
	
	УзелObjectBelonging = ДокументDOM.СоздатьЭлемент("ObjectBelonging");
	УзелObjectBelonging.ТекстовоеСодержимое = "Adopted";
	УзелProperties.ВставитьПеред(УзелObjectBelonging, УзелName);
	
	УзелMetaDataObject = ДокументDOM.ПолучитьЭлементыПоИмени("MetaDataObject")[0];
	УзелMetaDataObject.УстановитьАтрибут("version", Параметры.ВерсияXML);
	
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
	
КонецПроцедуры

Процедура ПодготовитьXMLФайлы(ОписаниеОбъекта, Параметры)
	
	ПутьКФайлу  = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ОписаниеОбъекта.ИмяОбъекта + ".xml";
	ДокументDOM = ДокументDOM(ПутьКФайлу);
	
	Если ОписаниеОбъекта.ЭтоФорма Тогда
		Если Не ОписаниеОбъекта.ЭтоОбщаяФорма Тогда
			УзелForm = ДокументDOM.СоздатьЭлемент("Form");
			УзелForm.ТекстовоеСодержимое = ОписаниеОбъекта.ИмяФормы;
			
			УзелChildObjects = ДокументDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0];
			УзелChildObjects.ДобавитьДочерний(УзелForm);
		КонецЕсли;
	ИначеЕсли ОписаниеОбъекта.ЭтоМакет Тогда
		УзелTemplate = ДокументDOM.СоздатьЭлемент("Template");
		УзелTemplate.ТекстовоеСодержимое = ОписаниеОбъекта.ИмяМакета;
		
		УзелChildObjects = ДокументDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0];
		УзелChildObjects.ДобавитьДочерний(УзелTemplate);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
	
	Если ОписаниеОбъекта.ЭтоМакет Тогда
		ТипОбъекта = СоответствиеРусскихИАнглийскихИмен().Получить(ОписаниеОбъекта.ТипОбъекта);
		
		Если ОписаниеОбъекта.ЭтоОбщийМакет Тогда
			ОтносительныйПутьКXML = ОписаниеОбъекта.ИмяМакета + ".xml";
			ПутьКФайлуШаблону = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ТипОбъекта + ".xml";
		Иначе
			ОтносительныйПутьКXML = ОписаниеОбъекта.ИмяОбъекта + "/Templates/" + ОписаниеОбъекта.ИмяМакета + ".xml";
			ПутьКФайлуШаблону = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ТипОбъекта + "/Templates/Макет.xml";
		КонецЕсли;
		
		ПутьКФайлу = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ОтносительныйПутьКXML;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПутьКФайлуШаблону);
		ТекстовыйДокумент.Записать(ПутьКФайлу);
		
		ДокументDOM = ДокументDOM(ПутьКФайлу);
		
		УзелProperties   = ДокументDOM.ПолучитьЭлементыПоИмени("Properties")[0];
		
		УзелName = ДокументDOM.ПолучитьЭлементыПоИмени("Name")[0];
		УзелName.ТекстовоеСодержимое = ОписаниеОбъекта.ИмяМакета;
		
		УзелTemplateType = ДокументDOM.ПолучитьЭлементыПоИмени("TemplateType")[0];
		УзелTemplateType.ТекстовоеСодержимое = Параметры.ТипМакета;
		
		УзелObjectBelonging = ДокументDOM.СоздатьЭлемент("ObjectBelonging");
		УзелObjectBelonging.ТекстовоеСодержимое = "Adopted";
		
		УзелProperties.ВставитьПеред(УзелObjectBelonging, УзелName);
		
		УзелMetaDataObject = ДокументDOM.ПолучитьЭлементыПоИмени("MetaDataObject")[0];
		УзелMetaDataObject.УстановитьАтрибут("version", Параметры.ВерсияXML);
		
		ЗаменитьИдентификаторыОбъекта(ДокументDOM);
		ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
	Иначе
		Если Не ОписаниеОбъекта.ЭтоОбщаяФорма Тогда
			ОтносительныйПутьКXML = ОписаниеОбъекта.ИмяОбъекта + "/Forms/" + ОписаниеОбъекта.ИмяФормы + ".xml";
			
			ТипОбъекта = СоответствиеРусскихИАнглийскихИмен().Получить(ОписаниеОбъекта.ТипОбъекта);
			ПутьКФайлуШаблону = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ТипОбъекта + "/Forms/Форма.xml";
			ПутьКФайлу = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ОтносительныйПутьКXML;
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ПутьКФайлуШаблону);
			ТекстовыйДокумент.Записать(ПутьКФайлу);
			
			ДокументDOM = ДокументDOM(ПутьКФайлу);
			
			УзелProperties   = ДокументDOM.ПолучитьЭлементыПоИмени("Properties")[0];
			УзелName = ДокументDOM.ПолучитьЭлементыПоИмени("Name")[0];
			УзелName.ТекстовоеСодержимое = ОписаниеОбъекта.ИмяФормы;
			УзелObjectBelonging = ДокументDOM.СоздатьЭлемент("ObjectBelonging");
			УзелObjectBelonging.ТекстовоеСодержимое = "Adopted";
			УзелProperties.ВставитьПеред(УзелObjectBelonging, УзелName);
			
			УзелMetaDataObject = ДокументDOM.ПолучитьЭлементыПоИмени("MetaDataObject")[0];
			УзелMetaDataObject.УстановитьАтрибут("version", Параметры.ВерсияXML);
			
			ЗаменитьИдентификаторыОбъекта(ДокументDOM);
			ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
		КонецЕсли;
		
		ПутьКФорме = "";
		ПутьКФормеШаблону = "";
		Если ОписаниеОбъекта.ЭтоОбщаяФорма Тогда
			ПутьКФорме = "/Ext/Form.xml";
			ПутьКФормеШаблону = ПутьКФорме;
			ТипОбъекта = "Форма";
		Иначе
			ПутьКФорме = "/Forms/" + ОписаниеОбъекта.ИмяФормы + "/Ext/Form.xml";
			ПутьКФормеШаблону = "/Forms/Форма/Ext/Form.xml";
			ТипОбъекта = СоответствиеРусскихИАнглийскихИмен().Получить(ОписаниеОбъекта.ТипОбъекта);
		КонецЕсли;
		ОтносительныйПутьКXML = ОписаниеОбъекта.ИмяОбъекта + ПутьКФорме;
		
		ПутьКФайлуШаблону = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ТипОбъекта + ПутьКФормеШаблону;
		ПутьКФайлу = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + ОтносительныйПутьКXML;
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПутьКФайлуШаблону);
		ТекстовыйДокумент.Записать(ПутьКФайлу);
		
		ДокументDOM = ДокументDOM(ПутьКФайлу);
		// Очистка XML формы.
		РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Form/*", ДокументDOM);
		ЭлементDOM = РезультатXPath.ПолучитьСледующий();
		Пока ЭлементDOM <> Неопределено Цикл
			ЭлементDOM.РодительскийУзел.УдалитьДочерний(ЭлементDOM);
			ЭлементDOM = РезультатXPath.ПолучитьСледующий();
		КонецЦикла;
		
		УзелForm = ДокументDOM.ПолучитьЭлементыПоИмени("Form")[0];
		УзелForm.УстановитьАтрибут("version", Параметры.ВерсияXML);
		
		УзелBaseForm = ДокументDOM.СоздатьЭлемент("BaseForm");
		УзелBaseForm.УстановитьАтрибут("version", Параметры.ВерсияXML);
		УзелForm.ДобавитьДочерний(УзелBaseForm);
		ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПатчи(Ошибка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ошибка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ошибка", Ошибка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Патчи.Ссылка КАК Патч,
		|	ВерсииПатчей.Состояние КАК Состояние,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патчи КАК Патчи
		|		ПО ВерсииПатчей.Патч = Патчи.Ссылка
		|ГДЕ
		|	Патчи.Ошибка = &Ошибка
		|	И НЕ Патчи.ПометкаУдаления";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Патч = Результат[0].Патч;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Патчи");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Патч);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ВсеВерсииУдалены = Истина;
		Для Каждого ВерсияПатча Из Результат Цикл
			Если ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Ошибка
				Или ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.СозданиеПатча
				Или ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.СозданиеВручную
				Или ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.СозданНеПроверен
				Или ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.СозданПроверен
				Или ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.ОжиданиеИсправления Тогда
				УдалитьПатч(ВерсияПатча.УникальныйИдентификатор);
			Иначе
				ВсеВерсииУдалены = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеВерсииУдалены Тогда
			ПатчОбъект = Патч.ПолучитьОбъект();
			ПатчОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыИФункции

Функция ЗапросКХранилищу(Команда, АдресХранилища)
	
	ЛогФайл = ПолучитьИмяВременногоФайла("txt");
	
	ОбъектShell = Новый COMОбъект("Wscript.Shell");
	СтрокаЗапуска = "cmd /c git -C " + АдресХранилища + " " + Команда + " > " + """" + ЛогФайл + """";
	ОбъектShell.Run(СтрокаЗапуска, 0, Истина);
	
	РезультатКоманды = Новый ТекстовыйДокумент;
	РезультатКоманды.Прочитать(ЛогФайл, КодировкаТекста.UTF8);
	
	УдалитьФайлы(ЛогФайл);
	Возврат РезультатКоманды;
	
КонецФункции

Функция ЗакладкиОшибки(РезультатЗапроса)
	
	Ошибки = Новый ТаблицаЗначений;
	Ошибки.Колонки.Добавить("ХэшЗакладки");
	Ошибки.Колонки.Добавить("ДатаЗакладки");
	
	Для НомерСтроки = 1 По РезультатЗапроса.КоличествоСтрок() Цикл
		Строка = РезультатЗапроса.ПолучитьСтроку(НомерСтроки);
		СтрокаЧастями = СтрРазделить(Строка, "|");
		
		Ошибка = Ошибки.Добавить();
		Ошибка.ХэшЗакладки  = СокрЛП(СтрокаЧастями[0]);
		Ошибка.ДатаЗакладки = СокрЛП(СтрокаЧастями[1]);
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

Функция ПроверкаВозможностиСозданияПатча(ИзмененныеОбъекты, ХэшЗакладки, АдресХранилища)
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("НетОбъектовДляВключенияВПатч", Ложь);
	РезультатПроверки.Вставить("Пропущенные", Новый Массив);
	РезультатПроверки.Вставить("Обрабатываемые", Новый Массив);
	
	Для Каждого ИзмененныйОбъект Из ИзмененныеОбъекты Цикл
		Если СтрНайти(ИзмененныйОбъект, ".bsl") = 0
			И СтрНайти(ИзмененныйОбъект, "Template") = 0 Тогда
			
			Если СтрНайти(ИзмененныйОбъект, "Configuration.xml") > 0
				Или СтрНайти(ИзмененныйОбъект, "Configuration.mdo") > 0 Тогда
				Продолжить; // Изменения файла конфигурации игнорируем.
			КонецЕсли;
			// Определение того, что изменения только в версии формата выгрузки.
			ТекстКоманды = "show %1 -p --pretty=format:"""" -w -- %2";
			ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды,
				ХэшЗакладки,
				ИзмененныйОбъект);
			Различия = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
			ТекстРазличий = Различия.ПолучитьТекст();
			
			УдаленныйБлок = "";
			Начало = СтрНайти(ТекстРазличий, "-<");
			Если Начало <> 0 Тогда
				Конец = СтрНайти(ТекстРазличий, ">", , Начало);
				УдаленныйБлок = Сред(ТекстРазличий, Начало + 2, Конец - Начало - 2);
			КонецЕсли;
			
			ОтметкаКонца = Конец;
			Если Не ЗначениеЗаполнено(УдаленныйБлок) Тогда
				РезультатПроверки.Пропущенные.Добавить(ПолноеИмяПоИмениОбъектаВХранилище(ИзмененныйОбъект));
				Продолжить;
			КонецЕсли;
			
			ДобавленныйБлок = "";
			Начало = СтрНайти(ТекстРазличий, "+<");
			Если Начало <> 0 Тогда
				Конец = СтрНайти(ТекстРазличий, ">", , Начало);
				ДобавленныйБлок = Сред(ТекстРазличий, Начало + 2, Конец - Начало - 2);
			КонецЕсли;
			
			ОтметкаКонца = ?(ОтметкаКонца > Конец, ОтметкаКонца, Конец);
			Если Не ЗначениеЗаполнено(ДобавленныйБлок) Тогда
				РезультатПроверки.Пропущенные.Добавить(ПолноеИмяПоИмениОбъектаВХранилище(ИзмененныйОбъект));
				Продолжить;
			КонецЕсли;
			
			УдаленныйБлокЧастями   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(УдаленныйБлок, "version=");
			ДобавленныйБлокЧастями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДобавленныйБлок, "version=");
			
			Если УдаленныйБлокЧастями.Количество() <> 2 Или ДобавленныйБлокЧастями.Количество() <> 2 Тогда
				РезультатПроверки.Пропущенные.Добавить(ПолноеИмяПоИмениОбъектаВХранилище(ИзмененныйОбъект));
				Продолжить;
			КонецЕсли;
			
			Если УдаленныйБлокЧастями[0] = ДобавленныйБлокЧастями[0]
				И УдаленныйБлокЧастями[1] <> ДобавленныйБлокЧастями[1] Тогда
				// Изменилась версия формата.
				
				ТекстРазличий = Сред(ТекстРазличий, ОтметкаКонца);
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(ТекстРазличий);
				Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
					Строка = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
					Если СтрНачинаетсяС(Строка, "-") Или СтрНачинаетсяС(Строка, "+") Тогда
						// Есть другие изменения.
						РезультатПроверки.Пропущенные.Добавить(ПолноеИмяПоИмениОбъектаВХранилище(ИзмененныйОбъект));
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Продолжить;
			КонецЕсли;
			
			РезультатПроверки.Пропущенные.Добавить(ПолноеИмяПоИмениОбъектаВХранилище(ИзмененныйОбъект));
		Иначе
			РезультатПроверки.Обрабатываемые.Добавить(ИзмененныйОбъект);
		КонецЕсли;
	КонецЦикла;
	
	Если ИзмененныеОбъекты.Количество() = РезультатПроверки.Пропущенные.Количество() Тогда
		РезультатПроверки.НетОбъектовДляВключенияВПатч = Истина;
	КонецЕсли;
	
	Возврат РезультатПроверки;
КонецФункции

Функция НачалоМетода(Документ, НачальнаяСтрока)
	
	ТекущаяСтрока = НачальнаяСтрока - 1;
	Пока Истина Цикл
		Строка = Документ.ПолучитьСтроку(ТекущаяСтрока);
		
		Если Лев(Строка, 14) = "КонецПроцедуры"
			Или Лев(Строка, 12) = "КонецФункции" Тогда
			Возврат "ЗаПределамиМетода";
		КонецЕсли;
		
		Если Лев(Строка, 9) = "Процедура"
			Или Лев(Строка, 7) = "Функция"
			Или Лев(Строка, 13) = "Асинх Функция"
			Или Лев(Строка, 15) = "Асинх Процедура" Тогда
			Возврат ТекущаяСтрока;
		Иначе
			ТекущаяСтрока = ТекущаяСтрока - 1;
		КонецЕсли;
		Если ТекущаяСтрока <= 0 Тогда
			Возврат "ЗаПределамиМетода";
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция ИзмененныеПроцедурыИФункции(ИзмененныйОбъект, ХэшЗакладки, РазличияВМодуле, АдресХранилища)
	
	МестаИзменений = МестаИзмененийВМодуле(РазличияВМодуле);
	
	ТекстКоманды = "show %1:%2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстКоманды, ХэшЗакладки, ИзмененныйОбъект);
	Результат = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	ИзмененныеМетоды = Новый Массив;
	Для Каждого МестоИзменений Из МестаИзменений Цикл
		НачальнаяСтрока = Результат.ПолучитьСтроку(МестоИзменений);
		Если СтрНачинаетсяС(НачальнаяСтрока, "Процедура ")
			Или СтрНачинаетсяС(НачальнаяСтрока, "Функция ")
			Или СтрНачинаетсяС(НачальнаяСтрока, "Асинх Функция ")
			Или СтрНачинаетсяС(НачальнаяСтрока, "Асинх Процедура ") Тогда
			НачалоМетода = МестоИзменений;
		Иначе
			НачалоМетода = НачалоМетода(Результат, МестоИзменений);
		КонецЕсли;
		Если НачалоМетода = "ЗаПределамиМетода" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСИменемМетода = Результат.ПолучитьСтроку(НачалоМетода);
		СтрокаСИменемМетодаЧастями = СтрРазделить(СтрокаСИменемМетода, "(");
		ИмяМетода = СтрокаСИменемМетодаЧастями[0];
		
		// Если несколько изменений в одном методе, то не добавляем его несколько раз.
		Если ИзмененныеМетоды.Найти(ИмяМетода) = Неопределено Тогда
			ИзмененныеМетоды.Добавить(ИмяМетода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИзмененныеМетоды;
	
КонецФункции

Функция МестаИзмененийВМодуле(РазличияВМодуле)
	
	МестаИзменений  = Новый Массив;
	НачалоИзменений = Неопределено;
	ТекущийНомерСтроки = 0;
	Для НомерСтроки = 1 По РазличияВМодуле.КоличествоСтрок() Цикл
		Строка = РазличияВМодуле.ПолучитьСтроку(НомерСтроки);
		Если Лев(Строка, 4) = "diff"
			Или Лев(Строка, 5) = "index"
			Или Лев(Строка, 3) = "+++"
			Или Лев(Строка, 3) = "---" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Лев(Строка, 2) = "@@" Тогда
			СтрокаЧастями = СтрРазделить(Строка, " ");
			НачалоБлокаИзменений = СтрокаЧастями[2];
			НачалоБлокаИзменений = СтрЗаменить(НачалоБлокаИзменений, "+", "");
			НачалоБлокаИзменений = СтрРазделить(НачалоБлокаИзменений, ",")[0];
			НачалоБлокаИзменений = Число(НачалоБлокаИзменений);
			ТекущийНомерСтроки   = НачалоБлокаИзменений - 1;
			Если НачалоИзменений <> Неопределено Тогда
				МестаИзменений.Добавить(НачалоИзменений);
			КонецЕсли;
			
			НачалоИзменений = Неопределено;
			УдалениеМетода  = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если Лев(Строка, 1) <> "-" Тогда
			ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
		КонецЕсли;
		
		Если СтрНайти(Строка, "Процедура ") > 0
			Или СтрНайти(Строка, "Функция ") > 0
			Или СтрНайти(Строка, "Procedure ") > 0
			Или СтрНайти(Строка, "Function ") > 0 Тогда
			Если НачалоИзменений <> Неопределено Тогда
				МестаИзменений.Добавить(НачалоИзменений);
			КонецЕсли;
			УдалениеМетода = (Лев(Строка, 1) = "-");
			
			Если Лев(Строка, 1) = "+" Тогда
				НачалоИзменений = ТекущийНомерСтроки;
			Иначе
				НачалоИзменений = Неопределено;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если (Лев(Строка, 1) = "+"
				Или (Лев(Строка, 1) = "-" И Не УдалениеМетода))
			И НачалоИзменений = Неопределено Тогда
			НачалоИзменений = ТекущийНомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	Если НачалоИзменений <> Неопределено Тогда
		МестаИзменений.Добавить(НачалоИзменений);
	КонецЕсли;
	
	Возврат МестаИзменений;
	
КонецФункции

Процедура УдалитьЗакладкиПоОшибкеИзИстории(ИсторияИзменения, ЗакладкиОшибки)
	Итератор = ИсторияИзменения.Количество() - 1;
	Пока Итератор >= 0 Цикл
		ИзменениеЧастями = СтрРазделить(ИсторияИзменения.Получить(Итератор), "|");
		ХэшЗакладки      = СокрЛП(ИзменениеЧастями[0]);
		Если ЗакладкиОшибки.Найти(ХэшЗакладки, "ХэшЗакладки") <> Неопределено Тогда
			ИсторияИзменения.Удалить(Итератор);
		КонецЕсли;
		Итератор = Итератор - 1;
	КонецЦикла;
КонецПроцедуры

Функция КоммитыМеждуИсправлениямиОшибки(ИсторияИзменения, ЗакладкиОшибки)
	Коммиты = Новый Массив;
	Если ЗакладкиОшибки.Количество() = 0 Тогда
		Возврат Коммиты;
	КонецЕсли;
	
	Итератор = ИсторияИзменения.Количество() - 1;
	НайденКоммитПоОшибке = Ложь;
	Пока Итератор >= 0 Цикл
		ИзменениеЧастями = СтрРазделить(ИсторияИзменения.Получить(Итератор), "|");
		ХэшЗакладки      = СокрЛП(ИзменениеЧастями[0]);
		Если ЗакладкиОшибки.Найти(ХэшЗакладки, "ХэшЗакладки") <> Неопределено Тогда
			ИсторияИзменения.Удалить(Итератор);
			НайденКоммитПоОшибке = Истина;
		ИначеЕсли НайденКоммитПоОшибке Тогда
			ИсторияИзменения.Удалить(Итератор);
			Коммиты.Добавить(ИсторияИзменения.Получить(Итератор));
		КонецЕсли;
		Итератор = Итератор - 1;
	КонецЦикла;
	
	Возврат Коммиты;
КонецФункции

Функция ТекстИзменяемыхПроцедурИФункций(ТекстМодуля, ПроверяемыеМетоды, ИмяОбъекта)
	
	ТекстПроцедурИФункций = Новый Массив;
	НовыеМетоды           = Новый Массив;
	ПараметрыМетодов      = Новый Соответствие;
	КэшПроцедур           = Новый Соответствие;
	ЭкспортныеМетоды      = Новый Массив;
	Для Каждого ПроверяемыйМетод Из ПроверяемыеМетоды Цикл
		НачалоМетода = СтрНайти(ТекстМодуля, ПроверяемыйМетод + "(");
		Если СтрНачинаетсяС(ПроверяемыйМетод, "Асинх ") Тогда
			ИмяМетода = СтрРазделить(ПроверяемыйМетод, " ")[2];
		Иначе
			ИмяМетода = СтрРазделить(ПроверяемыйМетод, " ")[1];
		КонецЕсли;
		Если НачалоМетода = 0 Тогда
			НовыеМетоды.Добавить(ИмяМетода);
			Продолжить;
		КонецЕсли;
		Если СтрНайти(ПроверяемыйМетод, "Процедура ") > 0 Тогда
			КонецМетода = СтрНайти(ТекстМодуля, "КонецПроцедуры",, НачалоМетода);
			Добавка = СтрДлина("КонецПроцедуры");
		Иначе
			КонецМетода = СтрНайти(ТекстМодуля, "КонецФункции",, НачалоМетода);
			Добавка = СтрДлина("КонецФункции");
		КонецЕсли;
		
		Метод = Сред(ТекстМодуля, НачалоМетода, КонецМетода + Добавка - НачалоМетода);
		ТекстПроцедурИФункций.Добавить(Метод);
		
		НачалоОписанияПараметров = СтрНайти(ТекстМодуля, "(", , НачалоМетода);
		КонецОписанияПараметров  = СтрНайти(ТекстМодуля, ")", , НачалоМетода);
		НачалоТелаМетода         = СтрНайти(ТекстМодуля, Символы.ПС, , КонецОписанияПараметров);
		БлокЭкспорт = Сред(ТекстМодуля, КонецОписанияПараметров, НачалоТелаМетода - КонецОписанияПараметров);
		Если СтрНайти(БлокЭкспорт, "Экспорт") > 0 Тогда
			ЭкспортныеМетоды.Добавить(ИмяМетода);
		КонецЕсли;
		
		ПараметрыМетода = Сред(ТекстМодуля, НачалоОписанияПараметров + 1, КонецОписанияПараметров - НачалоОписанияПараметров - 1);
		ПараметрыМетодов.Вставить(ИмяОбъекта + "." + ИмяМетода, ПараметрыМетода);
		
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеДанных.Добавить(Метод);
		КэшПроцедур.Вставить(ИмяОбъекта + "." + ИмяМетода, Base64Строка(ХешированиеДанных.ХешСумма));
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстПроцедурИФункций", ТекстПроцедурИФункций);
	Результат.Вставить("НовыеМетоды", НовыеМетоды);
	Результат.Вставить("ПараметрыМетодов", ПараметрыМетодов);
	Результат.Вставить("КэшПроцедур", КэшПроцедур);
	Результат.Вставить("ЭкспортныеМетоды", ЭкспортныеМетоды);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПроцедурИФункцийДляПатча(ТекстМодуля, ПроверяемыеМетоды, Префикс, ВключаяДирективы = Ложь)
	
	Результат = Новый Структура;
	Для Каждого ПроверяемыйМетод Из ПроверяемыеМетоды Цикл
		НачалоМетода = СтрНайти(ТекстМодуля, ПроверяемыйМетод + "(");
		// Проверка, что процедура не найдена в комментарии.
		Если НачалоМетода <> 0 Тогда
			ТекстПередПроцедуройПоСтрокам = СтрРазделить(Лев(ТекстМодуля, НачалоМетода), Символы.ПС);
			ЧислоСтрок = ТекстПередПроцедуройПоСтрокам.Количество();
			ПоследняяСтрока = ТекстПередПроцедуройПоСтрокам[ЧислоСтрок - 1];
			Если СтрНачинаетсяС(СокрЛП(ПоследняяСтрока), "//") Тогда
				НачалоМетода = СтрНайти(ТекстМодуля, ПроверяемыйМетод + "(", , , 2);
			КонецЕсли;
		КонецЕсли;
		
		Если НачалоМетода = 0 Тогда
			// Несколько коммитов по ошибке, сначала метод удаляют, потом добавляют и удаляют вновь,
			// что приводит к ошибочному добавлению его как нового.
			Продолжить;
		КонецЕсли;
		
		Если ВключаяДирективы Тогда
			НачалоМетода = СтрНайти(ТекстМодуля, "&", НаправлениеПоиска.СКонца, НачалоМетода);
		КонецЕсли;
		Если СтрНайти(ПроверяемыйМетод, "Процедура ") > 0 Тогда
			КонецМетода = СтрНайти(ТекстМодуля, "КонецПроцедуры",, НачалоМетода);
			Добавка = СтрДлина("КонецПроцедуры");
		Иначе
			КонецМетода = СтрНайти(ТекстМодуля, "КонецФункции",, НачалоМетода);
			Добавка = СтрДлина("КонецФункции");
		КонецЕсли;
		
		ПроверяемыйМетодЧастями = СтрРазделить(ПроверяемыйМетод, " ", Ложь);
		ТипМетода = "";
		Если СтрНачинаетсяС(ПроверяемыйМетод, "Асинх ") Тогда
			ИмяМетода = ПроверяемыйМетодЧастями[2];
			ТипМетода = ПроверяемыйМетодЧастями[1];
		Иначе
			ИмяМетода = ПроверяемыйМетодЧастями[1];
			ТипМетода = ПроверяемыйМетодЧастями[0];
		КонецЕсли;
		Метод = Сред(ТекстМодуля, НачалоМетода, КонецМетода + Добавка - НачалоМетода);
		Метод = СтрЗаменить(Метод, ТипМетода + " " + ИмяМетода + "(",
			ТипМетода + " " + Префикс + ИмяМетода + "(");
		
		Результат.Вставить(ИмяМетода, Метод);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаВФормате1С(Дата)
	Возврат Дата(СтрСоединить(СтрРазделить(Дата, " -:")));
КонецФункции

Функция РезультатАнализаИзменений(ИзмененияПоОбъектам, ДатаНачалаДействия, ПропущенныеОбъекты, ЭтоБиблиотека, РежимСовместимости)
	Результат = Новый Структура;
	Результат.Вставить("НачалоДействияПатча", ДатаНачалаДействия);
	Результат.Вставить("Изменения", Новый Соответствие);
	Результат.Вставить("ТекстОшибки", "");
	
	МожноМенятьМакеты = РежимСовместимости <> Неопределено И ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(РежимСовместимости, "8.3.23") >= 0;
	
	Для Каждого ИзменениеОбъекта Из ИзмененияПоОбъектам Цикл
		Если ИзменениеОбъекта.ЭтоМакет И ЭтоБиблиотека И Не МожноМенятьМакеты Тогда
			// Для библиотек можно менять макеты только в режиме совместимости 8.3.23 и выше.
			ПропущенныеОбъекты.Добавить(ИзменениеОбъекта.ИзмененныйОбъект);
			Продолжить;
		КонецЕсли;
		Изменения = Результат.Изменения[ИзменениеОбъекта.ИзмененныйОбъект];
		Если Изменения = Неопределено Тогда
			Изменения = Новый Структура;
			Изменения.Вставить("ЭтоМакет", ИзменениеОбъекта.ЭтоМакет);
			Изменения.Вставить("ЭтоПрава", ИзменениеОбъекта.ЭтоПрава);
			Изменения.Вставить("ВсеИзменения", ИзменениеОбъекта.ИзмененныеМетоды);
			Изменения.Вставить("НовыеМетоды", ИзменениеОбъекта.НовыеМетоды);
			Изменения.Вставить("КэшПроцедур", ИзменениеОбъекта.КэшПроцедур);
			Изменения.Вставить("ЭкспортныеМетоды", ИзменениеОбъекта.ЭкспортныеМетоды);
			Результат.Изменения.Вставить(ИзменениеОбъекта.ИзмененныйОбъект, Изменения);
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Изменения.ВсеИзменения, ИзменениеОбъекта.ИзмененныеМетоды, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Изменения.НовыеМетоды, ИзменениеОбъекта.НовыеМетоды, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Изменения.КэшПроцедур, ИзменениеОбъекта.КэшПроцедур, Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Изменения.ЭкспортныеМетоды, ИзменениеОбъекта.ЭкспортныеМетоды, Истина);
	КонецЦикла;
	
	Если ПропущенныеОбъекты.Количество() > 0 Тогда
		Если ИзмененияПоОбъектам.Количество() = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Патч не был создан автоматически, т.к. отсутствуют изменения в коде - были изменены только метаданные.
					|Патч необходимо создать вручную из подготовленного шаблона.
					|Измененные объекты:
					|	%1'"),
				СтрСоединить(ПропущенныеОбъекты, Символы.ПС + Символы.Таб));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Патч создан, но в него включены не все изменения, выполненные в рамках исправления ошибки.
					|Пропущены изменения не касающиеся текстов модулей в следующих объектах:
					|	%1'"),
				СтрСоединить(ПропущенныеОбъекты, Символы.ПС + Символы.Таб));
		КонецЕсли;
		
		Результат.ТекстОшибки = ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция Параметры(ПараметрыПатча, ЗагружатьШаблон = Истина)
	
	ПутьКНовойИБ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла("CreatePatch"));
	Если ЗагружатьШаблон Тогда
		ШаблонПатча  = ПолучитьОбщийМакет("ШаблонПатча");
		ШаблонПатча.Записать(ПутьКНовойИБ + "1Cv8.1CD");
	КонецЕсли;
	
	ВерсияПлатформы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПатча.ВерсияКонфигурации, "ВерсияПлатформы");
	
	КаталогПрограммы = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	СписокДоступныхВерсийПлатформы = ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы(КаталогПрограммы);
	СборкаПлатформы = ПоследняяСборкаПлатформыПоВерсии(СписокДоступныхВерсийПлатформы, ВерсияПлатформы);
	
	КаталогПрограммы = КаталогПрограммы + ПолучитьРазделительПути();
	
	Параметры = Новый Структура;
	Параметры.Вставить("КаталогПрограммы", СтрЗаменить(КаталогПрограммы, "%ВерсияПлатформы%", СборкаПлатформы));
	Параметры.Вставить("СтрокаПодключения", " /F """ + ПутьКНовойИБ + """");
	Параметры.Вставить("Пользователь", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("ИмяФайлаСообщений", ПутьКНовойИБ + "out.txt");
	Параметры.Вставить("ИмяРасширения", "ШаблонРасширения");
	Параметры.Вставить("КаталогВыгрузки", ПутьКНовойИБ + "Выгрузка");
	Параметры.Вставить("Кавычка", """");
	Параметры.Вставить("УникальныйИдентификатор", ПараметрыПатча.УникальныйИдентификатор);
	Параметры.Вставить("Описание", ПараметрыПатча.Описание);
	Параметры.Вставить("ИмяКонфигурации", ПараметрыПатча.ИмяКонфигурации);
	Параметры.Вставить("КаталогВременнойБазы", ПутьКНовойИБ);
	Параметры.Вставить("ВыгрузкаВФорматеEDT", Ложь);
	Параметры.Вставить("НомерПатча", ПараметрыПатча.НомерПатча);
	Параметры.Вставить("ПараметрыМетодов", Новый Соответствие);
	Параметры.Вставить("РежимСовместимости", Неопределено);
	Параметры.Вставить("Изменения", Неопределено);
	Параметры.Вставить("НомерОшибки", Неопределено);
	Параметры.Вставить("ВерсияВХранилище", Неопределено);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	
	Файл = Новый Файл(Параметры.КаталогПрограммы + "1cv8.exe");
	Если Не Файл.Существует() Тогда
		ТекстОшибки = НСтр("ru = 'Каталог программы %1 не обнаружен.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Параметры.КаталогПрограммы);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПоследняяСборкаПлатформыПоВерсии(Сборки, Версия)
	
	ПоследняяСборка = "";
	ВерсияНайдена   = Ложь;
	Для Каждого Сборка Из Сборки Цикл
		Если СтрНайти(Сборка, Версия) > 0 Тогда
			ПоследняяСборка = Сборка;
			ВерсияНайдена = Истина;
		ИначеЕсли ВерсияНайдена Тогда
			Возврат ПоследняяСборка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоследняяСборка;
	
КонецФункции

Функция НовыеПараметрыСозданияПатчей()
	
	ПараметрыСозданияПатча = Новый Структура;
	ПараметрыСозданияПатча.Вставить("АдресХранилища");
	ПараметрыСозданияПатча.Вставить("КаталогСохраненияПатча", ПолучитьИмяВременногоФайла("CreatePatch"));
	ПараметрыСозданияПатча.КаталогСохраненияПатча = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПараметрыСозданияПатча.КаталогСохраненияПатча);
	ПараметрыСозданияПатча.Вставить("СтрокаПоискаОшибки");
	ПараметрыСозданияПатча.Вставить("ДатаПервойОпубликованнойСборки");
	ПараметрыСозданияПатча.Вставить("НомерОшибки");
	ПараметрыСозданияПатча.Вставить("УникальныйИдентификатор");
	ПараметрыСозданияПатча.Вставить("Описание");
	ПараметрыСозданияПатча.Вставить("ИмяКонфигурации");
	ПараметрыСозданияПатча.Вставить("ПоследняяОпубликованнаяСборка");
	ПараметрыСозданияПатча.Вставить("ВерсияКонфигурации");
	ПараметрыСозданияПатча.Вставить("РазделПроекта");
	ПараметрыСозданияПатча.Вставить("ЭтоБиблиотека");
	ПараметрыСозданияПатча.Вставить("НомерПатча");
	ПараметрыСозданияПатча.Вставить("КоммитыИсправления", Новый Массив);
	
	Возврат ПараметрыСозданияПатча;
	
КонецФункции

Процедура ПодготовитьРасширение(Параметры, ОписаниеОбъектовМассив)
	
	КаталогВыгрузки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогВыгрузки);
	ПутьКФайлу  = КаталогВыгрузки + "Configuration.xml";
	ДокументDOM = ДокументDOM(ПутьКФайлу);
	
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:InternalInfo/xr:ContainedObject/xr:ObjectId", ДокументDOM);
	ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	Пока ЭлементDOM <> Неопределено Цикл
		ЭлементDOM.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор);
		ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Configuration", ДокументDOM);
	ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	ЭлементDOM.УстановитьАтрибут("uuid", Строка(Новый УникальныйИдентификатор));
	
	УзелName = ДокументDOM.ПолучитьЭлементыПоИмени("Name")[0];
	УзелName.ТекстовоеСодержимое = Параметры.НазваниеПатча;
	
	УзелNamePrefix = ДокументDOM.ПолучитьЭлементыПоИмени("NamePrefix")[0];
	УзелNamePrefix.ТекстовоеСодержимое = Параметры.НазваниеПатча + "_";
	
	УзелSynonym = ДокументDOM.ПолучитьЭлементыПоИмени("Synonym")[0];
	УзелSynonym.РодительскийУзел.УдалитьДочерний(УзелSynonym);
	
	УзелCompatibilityMode = ДокументDOM.ПолучитьЭлементыПоИмени("ConfigurationExtensionCompatibilityMode")[0];
	Если Параметры.Свойство("РежимСовместимости")
		И Параметры.РежимСовместимости <> Неопределено Тогда
		УзелCompatibilityMode.ТекстовоеСодержимое = "Version" + СтрЗаменить(Параметры.РежимСовместимости, ".", "_");
	Иначе
		УзелCompatibilityMode.РодительскийУзел.УдалитьДочерний(УзелCompatibilityMode);
	КонецЕсли;
	
	// Очистка списка объектов расширения.
	УзелChildObjects = ДокументDOM.ПолучитьЭлементыПоИмени("ChildObjects")[0];
	РодительскийУзел = УзелChildObjects.РодительскийУзел;
	РодительскийУзел.УдалитьДочерний(УзелChildObjects);
	УзелChildObjects = ДокументDOM.СоздатьЭлемент("ChildObjects");
	РодительскийУзел.ДобавитьДочерний(УзелChildObjects);
	
	УзелCommonTemplate = ДокументDOM.СоздатьЭлемент("CommonTemplate");
	УзелCommonTemplate.ТекстовоеСодержимое = Параметры.НазваниеПатча;
	УзелChildObjects.ДобавитьДочерний(УзелCommonTemplate);
	
	УзелLanguage = ДокументDOM.СоздатьЭлемент("Language");
	УзелLanguage.ТекстовоеСодержимое = "Русский";
	УзелChildObjects.ДобавитьДочерний(УзелLanguage);
	
	ПовторяющиесяОбъекты = Новый Массив;
	Для Каждого ОписаниеОбъекта Из ОписаниеОбъектовМассив Цикл
		Если ПовторяющиесяОбъекты.Найти(ОписаниеОбъекта.ТипОбъекта + ОписаниеОбъекта.ИмяОбъекта) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелCommonModule = ДокументDOM.СоздатьЭлемент(ОписаниеОбъекта.ТипОбъекта);
		УзелCommonModule.ТекстовоеСодержимое = ОписаниеОбъекта.ИмяОбъекта;
		
		УзелChildObjects.ДобавитьДочерний(УзелCommonModule);
		
		ПовторяющиесяОбъекты.Добавить(ОписаниеОбъекта.ТипОбъекта + ОписаниеОбъекта.ИмяОбъекта);
	КонецЦикла;
	
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
	
	// Подготовка макета с описанием патча.
	ОписаниеПатча = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/patch", "Patch"));
	ОписаниеПатча.Name        = Параметры.НазваниеПатча;
	ОписаниеПатча.Description = Параметры.Описание;
	ОписаниеПатча.UUID        = Параметры.УникальныйИдентификатор;
	ОписаниеПатча.ModifiedMetadata = Параметры.ИзменяемыеМетаданные;
	
	ПрименимостьПатча = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/patch", "SupportedConfiguration"));
	ПрименимостьПатча.ConfigurationName = Параметры.ИмяКонфигурации;
	// Добавление рассчитанной по хранилищу сборки.
	ДобавитьРассчитаннуюСборку = ДобавитьРассчитаннуюСборку(Параметры.ПрименимДляСборок, Параметры.ВерсияВХранилище);
	
	Если ДобавитьРассчитаннуюСборку Тогда
		Параметры.ПрименимДляСборок.Добавить(Параметры.ВерсияВХранилище);
	КонецЕсли;
	ПрименимостьПатча.Versions = СтрСоединить(Параметры.ПрименимДляСборок, ",");
	
	ОписаниеПатча.AppliedFor.Добавить(ПрименимостьПатча);
	
	Для Каждого СвязаннаяКонфигурация Из Параметры.СвязанныеКонфигурации Цикл
		КлючЧастями = СтрРазделить(СвязаннаяКонфигурация.Ключ, ",");
		ПрименимостьПатча = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/patch", "SupportedConfiguration"));
		ПрименимостьПатча.ConfigurationName = КлючЧастями[0];
		ПрименимостьПатча.Versions = СтрСоединить(СвязаннаяКонфигурация.Значение, ",");
		Если ДобавитьРассчитаннуюСборку Тогда
			КонечнаяСборка = Параметры.КонечныеСборкиСвязанныхКонфигураций[СвязаннаяКонфигурация.Ключ];
			Если КонечнаяСборка <> Неопределено Тогда
				ПрименимостьПатча.Versions = ПрименимостьПатча.Versions + "," + КонечнаяСборка;
			КонецЕсли;
		КонецЕсли;
		ОписаниеПатча.AppliedFor.Добавить(ПрименимостьПатча);
	КонецЦикла;
	
	ПутьКФайлу  = КаталогВыгрузки + "CommonTemplates\ШаблонМакета.xml";
	НовыйПутьКФайлу = КаталогВыгрузки + "CommonTemplates\" + Параметры.НазваниеПатча + ".xml";
	ДокументDOM = ДокументDOM(ПутьКФайлу);
	УзелName = ДокументDOM.ПолучитьЭлементыПоИмени("Name")[0];
	УзелName.ТекстовоеСодержимое = Параметры.НазваниеПатча;
	ЗаменитьИдентификаторыОбъекта(ДокументDOM);
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
	ПереместитьФайл(ПутьКФайлу, НовыйПутьКФайлу);
	
	КаталогСодержания = КаталогВыгрузки + "CommonTemplates\" + Параметры.НазваниеПатча + "\Ext";
	СоздатьКаталог(КаталогСодержания);
	ПутьКСодержаниюМакета = КаталогСодержания + "\Template.txt";
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML());
	ФабрикаXDTO.ЗаписатьXML(Запись, ОписаниеПатча);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Запись.Закрыть());
	ТекстовыйДокумент.Записать(ПутьКСодержаниюМакета);
	
	ПутьКФайлу  = КаталогВыгрузки + "Languages/Русский.xml";
	ДокументDOM = ДокументDOM(ПутьКФайлу);
	ЗаменитьИдентификаторыОбъекта(ДокументDOM);
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКФайлу);
	
КонецПроцедуры

Функция ПатчДляРучногоСоздания(Параметры) Экспорт
	
	КаталогПрограммы = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	СписокДоступныхВерсийПлатформы = ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы(КаталогПрограммы);
	Если Параметры.Свойство("РежимСовместимости") И ЗначениеЗаполнено(Параметры.РежимСовместимости) Тогда
		ВерсияПлатформы = Параметры.РежимСовместимости;
	Иначе
		ВерсияПлатформы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Версия, "ВерсияПлатформы");
	КонецЕсли;
	СборкаПлатформы = ПоследняяСборкаПлатформыПоВерсии(СписокДоступныхВерсийПлатформы, ВерсияПлатформы);
	
	КаталогПрограммы = КаталогПрограммы + ПолучитьРазделительПути();
	
	ПутьКНовойИБ = ПолучитьИмяВременногоФайла("PatchTemplate");
	
	ШаблонПатча = ПолучитьОбщийМакет("ШаблонПатча");
	ШаблонПатча.Записать(ПутьКНовойИБ + ПолучитьРазделительПути() + "1Cv8.1CD");
	
	Параметры.Вставить("КаталогВыгрузки", ПутьКНовойИБ + ПолучитьРазделительПути() + "ФайлыРасширения");
	Параметры.Вставить("Кавычка", """");
	Параметры.Вставить("КаталогПрограммы", СтрЗаменить(КаталогПрограммы, "%ВерсияПлатформы%", СборкаПлатформы));
	Параметры.Вставить("ПутьКПатчу", ПутьКНовойИБ + ПолучитьРазделительПути() + Параметры.НазваниеПатча + ".cfe");
	Параметры.Вставить("СтрокаПодключения", " /F """ + ПутьКНовойИБ + """");
	Параметры.Вставить("Пользователь", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("ВременныйКаталог", ПутьКНовойИБ + ПолучитьРазделительПути());
	Параметры.Вставить("ИмяРасширения", "ШаблонРасширения");
	Параметры.Вставить("ИмяФайлаСообщений", ПутьКНовойИБ + ПолучитьРазделительПути() + "out.txt");
	Параметры.Вставить("ВерсияВХранилище", Неопределено);
	Параметры.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	
	ВыгрузитьРасширениеВФайлы(Параметры);
	
	ПодготовитьРасширение(Параметры, Новый Массив);
	
	ЗагрузитьРасширениеИзФайлов(Параметры);
	ВыгрузитьРасширениеВФайл(Параметры);
	
	Возврат Новый ДвоичныеДанные(Параметры.ПутьКПатчу);
	
КонецФункции

Функция ОписаниеОбъекта(ИзменяемыйОбъект, Параметры)
	
	Разделитель = "/src/";
	ИзменяемыйОбъектЧастями = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИзменяемыйОбъект, Разделитель);
	Префикс = ИзменяемыйОбъектЧастями[0] + Разделитель;
	
	ПутьКМодулюЧастями = СтрРазделить(ИзменяемыйОбъектЧастями[1], "/");
	ИмяОбъекта          = ПутьКМодулюЧастями[1];
	КаталогОбъекта      = Префикс + ПутьКМодулюЧастями[0] + "/";
	ИмяМодуля           = ПутьКМодулюЧастями[ПутьКМодулюЧастями.Количество() - 1];
	ТипОбъекта          = ТипОбъектаМетаданныхВЕдинственномЧисле(ПутьКМодулюЧастями[0]);
	КороткийКаталогОбъекта = "/" + ПутьКМодулюЧастями[0] + "/";
	ЭтоФорма            = ПутьКМодулюЧастями.Найти("Forms") <> Неопределено Или ПутьКМодулюЧастями.Найти("CommonForms") <> Неопределено;
	ЭтоОбщийМакет       = ПутьКМодулюЧастями.Найти("CommonTemplates") <> Неопределено;
	ЭтоМакет            = ЭтоОбщийМакет Или ПутьКМодулюЧастями.Найти("Templates") <> Неопределено;
	ЭтоОбщаяФорма       = (ПутьКМодулюЧастями[0] = "CommonForms");
	ЭтоПрава            = ПутьКМодулюЧастями.Найти("Rights.rights") <> Неопределено;
	Если ЭтоФорма И Не ЭтоОбщаяФорма Тогда
		ИмяФормы = ПутьКМодулюЧастями[3];
	Иначе
		ИмяФормы = "";
	КонецЕсли;
	ИмяМакета = "";
	Если ЭтоОбщийМакет Тогда
		ИмяМакета = ПутьКМодулюЧастями[1];
	ИначеЕсли ЭтоМакет Тогда
		ИмяМакета = ПутьКМодулюЧастями[3];
	КонецЕсли;
	
	ПутьКМодулюЧастями.Удалить(ПутьКМодулюЧастями.Количество() - 1);
	ПутьКМодулюЧастями.Вставить(ПутьКМодулюЧастями.Количество(), "");
	ПутьКМодулюЧастями.Вставить(0, "");
	ПутьКМодулю = СтрСоединить(ПутьКМодулюЧастями, "/");
	
	Если Параметры.Свойство("ВыгрузкаВФорматеEDT")
		И Параметры.ВыгрузкаВФорматеEDT Тогда
		Если ЭтоФорма Тогда
			ПутьКМодулю = ПутьКМодулю + "Ext/Form/";
		Иначе
			ПутьКМодулю = ПутьКМодулю + "Ext/";
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("КаталогОбъекта", КаталогОбъекта);
	ОписаниеОбъекта.Вставить("Префикс", Префикс);
	ОписаниеОбъекта.Вставить("ИмяОбъекта", ИмяОбъекта);
	ОписаниеОбъекта.Вставить("ПутьКМодулю", ПутьКМодулю);
	ОписаниеОбъекта.Вставить("КороткийКаталогОбъекта", КороткийКаталогОбъекта);
	ОписаниеОбъекта.Вставить("ИмяМодуля", ИмяМодуля);
	ОписаниеОбъекта.Вставить("ТипОбъекта", ТипОбъекта);
	ОписаниеОбъекта.Вставить("ЭтоФорма", ЭтоФорма);
	ОписаниеОбъекта.Вставить("ЭтоОбщаяФорма", ЭтоОбщаяФорма);
	ОписаниеОбъекта.Вставить("ЭтоМакет", ЭтоМакет);
	ОписаниеОбъекта.Вставить("ЭтоОбщийМакет", ЭтоОбщийМакет);
	ОписаниеОбъекта.Вставить("ИмяФормы", ИмяФормы);
	ОписаниеОбъекта.Вставить("ИмяМакета", ИмяМакета);
	ОписаниеОбъекта.Вставить("ЭтоПрава", ЭтоПрава);
	
	Возврат ОписаниеОбъекта;
	
КонецФункции

Функция ТипОбъектаМетаданныхВЕдинственномЧисле(ТипОбъекта)
	
	Результат = Новый Соответствие;
	Результат.Вставить("AccountingRegisters", "AccountingRegister");
	Результат.Вставить("AccumulationRegisters", "AccumulationRegister");
	Результат.Вставить("BusinessProcesses", "BusinessProcess");
	Результат.Вставить("CalculationRegisters", "CalculationRegister");
	Результат.Вставить("Catalogs", "Catalog");
	Результат.Вставить("ChartsOfAccounts", "ChartOfAccounts");
	Результат.Вставить("ChartsOfCalculationTypes", "ChartOfCalculationTypes");
	Результат.Вставить("ChartsOfCharacteristicTypes", "ChartOfCharacteristicTypes");
	Результат.Вставить("CommonCommands", "CommonCommand");
	Результат.Вставить("CommonForms", "CommonForm");
	Результат.Вставить("CommonTemplates", "CommonTemplate");
	Результат.Вставить("CommonModules", "CommonModule");
	Результат.Вставить("Constants", "Constant");
	Результат.Вставить("DataProcessors", "DataProcessor");
	Результат.Вставить("DocumentJournals", "DocumentJournal");
	Результат.Вставить("Documents", "Document");
	Результат.Вставить("Enums", "Enum");
	Результат.Вставить("ExchangePlans", "ExchangePlan");
	Результат.Вставить("FilterCriteria", "FilterCriterion");
	Результат.Вставить("InformationRegisters", "InformationRegister");
	Результат.Вставить("Reports", "Report");
	Результат.Вставить("Roles", "Role");
	Результат.Вставить("SettingsStorages", "SettingsStorage");
	Результат.Вставить("Tasks", "Task");
	Результат.Вставить("WebServices", "WebService");
	Результат.Вставить("HTTPServices", "HTTPService");
	
	Возврат Результат[ТипОбъекта];
	
КонецФункции

Функция XMLФайлОбъекта(ПутьКXMLВХранилище, ОписаниеОбъекта, Параметры)
	ТекстКоманды = "show %1:%2";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстКоманды, СокрЛП(Параметры.ХэшЗакладки), ПутьКXMLВХранилище);
	КорневойXML = ЗапросКХранилищу(ТекстКоманды, Параметры.АдресХранилища);
	Если Параметры.Свойство("ПолучитьСлучайныйXML") Тогда
		ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	Иначе
		ПутьКФайлу = Параметры.КаталогВыгрузки + ОписаниеОбъекта.КороткийКаталогОбъекта + Параметры.ОтносительныйПутьКXML;
	КонецЕсли;
	КорневойXML.Записать(ПутьКФайлу);
	
	Возврат ПутьКФайлу;
КонецФункции

Процедура ЗаменитьИдентификаторыОбъекта(ДокументDOM)
	РезультатXPath = ВычислитьВыражениеXPath("//@uuid", ДокументDOM);
	ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	Пока ЭлементDOM <> Неопределено Цикл
		ЭлементDOM.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор);
		ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	ЭлементыDOM = ДокументDOM.ПолучитьЭлементыПоИмени("xr:TypeId");
	Для Каждого ЭлементDOM Из ЭлементыDOM Цикл
		ЭлементDOM.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор);
		ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
	ЭлементыDOM = ДокументDOM.ПолучитьЭлементыПоИмени("xr:ValueId");
	Для Каждого ЭлементDOM Из ЭлементыDOM Цикл
		ЭлементDOM.ТекстовоеСодержимое = Строка(Новый УникальныйИдентификатор);
		ЭлементDOM = РезультатXPath.ПолучитьСледующий();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолноеИмяПоИмениОбъектаВХранилище(ПолныйПутьСИменем)
	ПолныйПутьСИменемЧастями = СтрРазделить(ПолныйПутьСИменем, "/");
	Если ПолныйПутьСИменемЧастями.Количество() = 1 Тогда
		ПолныйПутьСИменемЧастями = СтрРазделить(ПолныйПутьСИменем, "\");
	КонецЕсли;
	СоответствиеИмен = СоответствиеРусскихИАнглийскихИмен();
	КоличествоУдаляемых = 0;
	Для Каждого ЧастьИмени Из ПолныйПутьСИменемЧастями Цикл
		Если СоответствиеИмен[ЧастьИмени] <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		КоличествоУдаляемых = КоличествоУдаляемых + 1;
	КонецЦикла;
	
	Для Итератор = 1 По КоличествоУдаляемых Цикл
		ПолныйПутьСИменемЧастями.Удалить(0);
	КонецЦикла;
	
	ПолноеИмяОбъекта = "";
	Шаг = 0;
	Для Каждого ЧастьПути Из ПолныйПутьСИменемЧастями Цикл
		Шаг = Шаг + 1;
		Если ВРег(ЧастьПути) = "EXT" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(ЧастьПути, ".") <> 0
			И Не СтрЗаканчиваетсяНа(ЧастьПути, ".mdo")
			И Не СтрЗаканчиваетсяНа(ЧастьПути, ".xml") Тогда
			ЧастьПути = СтрРазделить(ЧастьПути, ".")[0];
		КонецЕсли;
		
		ЧастьПутиПреобразованная = СоответствиеРусскихИАнглийскихИмен()[ЧастьПути];
		Если ЧастьПутиПреобразованная = Неопределено Тогда
			ЧастьПутиПреобразованная = ЧастьПути;
		КонецЕсли;
		
		Если ЧастьПутиПреобразованная = "Модуль"
			Или ЧастьПутиПреобразованная = "МодульКоманды" Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяОбъекта = ?(ПолноеИмяОбъекта = "",
			                 ЧастьПутиПреобразованная,
			                 ПолноеИмяОбъекта + "." + ЧастьПутиПреобразованная);
	КонецЦикла;
	
	Возврат ПолноеИмяОбъекта;
КонецФункции

Функция СоответствиеРусскихИАнглийскихИмен()
	Результат = Новый Соответствие;
	
	// Виды объектов метаданных.
	Результат.Вставить("AccountingRegister", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegister", "РегистрНакопления");
	Результат.Вставить("BusinessProcess", "БизнесПроцесс");
	Результат.Вставить("CalculationRegister", "РегистрРасчета");
	Результат.Вставить("Catalog", "Справочник");
	Результат.Вставить("ChartOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroup", "ГруппаКоманд");
	Результат.Вставить("CommonAttribute", "ОбщийРеквизит");
	Результат.Вставить("CommonCommand", "ОбщаяКоманда");
	Результат.Вставить("CommonForm", "ОбщаяФорма");
	Результат.Вставить("CommonModule", "ОбщийМодуль");
	Результат.Вставить("CommonPicture", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplate", "ОбщийМакет");
	Результат.Вставить("Configuration", "Конфигурация");
	Результат.Вставить("Constant", "Константа");
	Результат.Вставить("DataProcessor", "Обработка");
	Результат.Вставить("DefinedType", "ОпределяемыйТип");
	Результат.Вставить("Document", "Документ");
	Результат.Вставить("DocumentJournal", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enum", "Перечисление");
	Результат.Вставить("EventSubscription", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlan", "ПланОбмена");
	Результат.Вставить("FilterCriterion", "КритерийОтбора");
	Результат.Вставить("FunctionalOption", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameter", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegister", "РегистрСведений");
	Результат.Вставить("Language", "Язык");
	Результат.Вставить("Report", "Отчет");
	Результат.Вставить("Role", "Роль");
	Результат.Вставить("ScheduledJob", "РегламентноеЗадание");
	Результат.Вставить("Sequence", "Последовательность");
	Результат.Вставить("SessionParameter", "ПараметрСеанса");
	Результат.Вставить("SettingsStorage", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItem", "ЭлементСтиля");
	Результат.Вставить("Subsystem", "Подсистема");
	Результат.Вставить("Task", "Задача");
	Результат.Вставить("WebService", "WebСервис");
	Результат.Вставить("HTTPService", "HTTPСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackage", "ПакетXDTO");
	
	// Виды объектов метаданных (во множественном числе).
	Результат.Вставить("AccountingRegisters", "РегистрБухгалтерии");
	Результат.Вставить("AccumulationRegisters", "РегистрНакопления");
	Результат.Вставить("BusinessProcesses", "БизнесПроцесс");
	Результат.Вставить("CalculationRegisters", "РегистрРасчета");
	Результат.Вставить("Catalogs", "Справочник");
	Результат.Вставить("ChartsOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartsOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("ChartsOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("CommandGroups", "ГруппаКоманд");
	Результат.Вставить("CommonAttributes", "ОбщийРеквизит");
	Результат.Вставить("CommonCommands", "ОбщаяКоманда");
	Результат.Вставить("CommonForms", "ОбщаяФорма");
	Результат.Вставить("CommonModules", "ОбщийМодуль");
	Результат.Вставить("CommonPictures", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplates", "ОбщийМакет");
	Результат.Вставить("Configurations", "Конфигурация"); // Не используется.
	Результат.Вставить("Constants", "Константа");
	Результат.Вставить("DataProcessors", "Обработка");
	Результат.Вставить("DefinedTypes", "ОпределяемыйТип");
	Результат.Вставить("Documents", "Документ");
	Результат.Вставить("DocumentJournals", "ЖурналДокументов");
	Результат.Вставить("DocumentNumerator", "НумераторДокументов");
	Результат.Вставить("Enums", "Перечисление");
	Результат.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	Результат.Вставить("ExchangePlans", "ПланОбмена");
	Результат.Вставить("FilterCriteria", "КритерийОтбора");
	Результат.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameters", "ПараметрФункциональныхОпций");
	Результат.Вставить("InformationRegisters", "РегистрСведений");
	Результат.Вставить("Languages", "Язык");
	Результат.Вставить("Reports", "Отчет");
	Результат.Вставить("Roles", "Роль");
	Результат.Вставить("ScheduledJobs", "РегламентноеЗадание");
	Результат.Вставить("Sequences", "Последовательность");
	Результат.Вставить("SessionParameters", "ПараметрСеанса");
	Результат.Вставить("SettingsStorages", "ХранилищеНастроек");
	Результат.Вставить("Style", "Стиль");
	Результат.Вставить("StyleItems", "ЭлементСтиля");
	Результат.Вставить("Subsystems", "Подсистема");
	Результат.Вставить("Tasks", "Задача");
	Результат.Вставить("WebServices", "WebСервис");
	Результат.Вставить("HTTPServices", "HTTPСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("XDTOPackages", "ПакетXDTO");
	
	// Типы вложенных объектов метаданных.
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Form", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Template", "Макет");
	Результат.Вставить("Command", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculation", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	// Типы вложенных объектов метаданных (во множественном числе).
	Результат.Вставить("Module", "Модуль");
	Результат.Вставить("ManagerModule", "МодульМенеджера");
	Результат.Вставить("ObjectModule", "МодульОбъекта");
	Результат.Вставить("CommandModule", "МодульКоманды");
	Результат.Вставить("RecordSetModule", "МодульНабораЗаписей");
	Результат.Вставить("ValueManagerModule", "МодульМенеджераЗначения");
	
	Результат.Вставить("ExternalConnectionModule", "МодульВнешнегоСоединения");
	Результат.Вставить("ManagedApplicationModule", "МодульУправляемогоПриложения");
	Результат.Вставить("OrdinaryApplicationModule", "МодульОбычногоПриложения");
	Результат.Вставить("SessionModule", "МодульСеанса");
	
	Результат.Вставить("Help", "Справка");
	Результат.Вставить("Forms", "Форма");
	Результат.Вставить("Flowchart", "КартаМаршрута");
	Результат.Вставить("Picture", "Картинка");
	Результат.Вставить("CommandInterface", "КомандныйИнтерфейс");
	
	Результат.Вставить("Templates", "Макет");
	Результат.Вставить("Commands", "Команда");
	Результат.Вставить("Aggregates", "Агрегаты");
	Результат.Вставить("Recalculations", "Перерасчет");
	Результат.Вставить("Predefined", "Предопределенные");
	Результат.Вставить("Content", "Состав");
	Результат.Вставить("Rights", "Права");
	Результат.Вставить("Schedule", "Расписание");
	
	Возврат Результат;
КонецФункции

Процедура ЗачитатьВерсиюXML(Параметры)
	
	ИмяФайлаConfiguration = Параметры.КаталогВыгрузки + "\Configuration.xml";
	ДокументDOM = ДокументDOM(ИмяФайлаConfiguration);
	
	УзелMetaDataObject = ДокументDOM.ПолучитьЭлементыПоИмени("MetaDataObject")[0];
	ВерсияXML = УзелMetaDataObject.ПолучитьАтрибут("version");
	Параметры.Вставить("ВерсияXML", ВерсияXML);
	
КонецПроцедуры

Процедура РассчитатьПрименимостьИОпубликовать() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Версия КАК Версия,
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.НачальнаяСборка КАК НачальнаяСборка,
		|	ВерсииПатчей.КонечнаяСборка КАК КонечнаяСборка,
		|	ВерсииПатчей.ДанныеПатча КАК ДанныеПатча,
		|	ВерсииПатчей.ДатаИсправления КАК ДатаИсправления,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ВерсииПатчей.Описание КАК Описание,
		|	ВерсииПатчей.ИзменяемыеМетаданные КАК ИзменяемыеМетаданные,
		|	ВерсииПатчей.Состояние КАК Состояние,
		|	ВерсииПатчей.Параметры КАК Параметры,
		|	ВерсииПатчей.ПодписанДляКонфигурации КАК ПодписанДляКонфигурации,
		|	Проекты.Библиотека КАК ЭтоБиблиотека,
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	ВерсииПатчей.РежимСовместимости КАК РежимСовместимости,
		|	ВерсииПатчей.КонечнаяСборкаПоХранилищу КАК КонечнаяСборкаПоХранилищу,
		|	Проекты.ПользовательАвторСообщенийСистемыВзаимодействия КАК ПользовательАвторСообщенийСистемыВзаимодействия
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|		ПО ВерсииПатчей.Версия = ВерсииПроекта.Ссылка
		|ГДЕ
		|	ВерсииПатчей.Состояние В(&Состояния)";
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СтатусыПатчей.ОжидаетПубликации);
	Состояния.Добавить(Перечисления.СтатусыПатчей.Публикуется);
	Запрос.УстановитьПараметр("Состояния", Состояния);
	
	Попытка
		Патчи = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаПатч Из Патчи Цикл
			
			ПараметрыПатча = ПараметрыПатча(СтрокаПатч.Параметры.Получить());
			
			// Если патч уже в процессе публикации - получаем текущий статус.
			Если СтрокаПатч.Состояние = Перечисления.СтатусыПатчей.Публикуется Тогда
				Попытка
					ОбновитьСостояниеПубликацииПатча(СтрокаПатч);
				Исключение
					ПараметрыПатча.КоличествоПопытокПубликации = ПараметрыПатча.КоличествоПопытокПубликации + 1;
					Если ПараметрыПатча.КоличествоПопытокПубликации <= 5 Тогда
						// В случае ошибок при публикации делается 5 попыток до установки статуса ОшибкаПубликации.
						ЗаписатьПопыткиПубликацииПатча(СтрокаПатч, ПараметрыПатча);
						Продолжить;
					Иначе
						ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					КонецЕсли;
				КонецПопытки;
				Продолжить;
			КонецЕсли;
			
			// Получение применимости патча. Для библиотек выполняется расчет применимости к конфигурациям.
			СвойстваВерсииПатча = ЗначенияСвойствВерсииПатча(СтрокаПатч.УникальныйИдентификатор, "РазделПроекта");
			Параметры = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаПатч);
			Параметры.Вставить("РазделПроекта", СвойстваВерсииПатча.РазделПроекта);
			ПрименимостьДляПубликации = ПрименимостьПатча(Параметры);
			
			// Применение ручных настроек применимости патча.
			// Если патч подписан для базовой, то изменения применимости не накладываются.
			РоднаяПрименимость = Неопределено;
			ПрименитьРучноеИзменениеПрименимости(ПрименимостьДляПубликации, СтрокаПатч);
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПатч.Патч, "Владелец");
			ЭтоКонфигурацияБазовая = ЭтоКонфигурацияБазовая(Проект); // Патч только для базовой
			Если Не ЗначениеЗаполнено(СтрокаПатч.ПодписанДляКонфигурации) Тогда
				Если Не ЭтоКонфигурацияБазовая Тогда
					ИсключитьИзПрименимостиБазовыеВерсии(ПрименимостьДляПубликации);
				КонецЕсли;
				ИдентификаторОсновнойПрограммы = СтрокаПатч.ИдентификаторПрограммы;
			Иначе
				Идентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПатч.ПодписанДляКонфигурации, "ИдентификаторПрограммы");
				РоднаяПрименимость = ПрименимостьДляПубликации[СтрокаПатч.ИдентификаторПрограммы];
				Сборки = ПрименимостьДляПубликации[Идентификатор];
				НоваяПрименимостьДляПубликации = Новый Соответствие;
				НоваяПрименимостьДляПубликации.Вставить(Идентификатор, Сборки);
				
				ПрименимостьДляПубликации = НоваяПрименимостьДляПубликации;
				ИдентификаторОсновнойПрограммы = Идентификатор
			КонецЕсли;
			
			Если РоднаяПрименимость = Неопределено И Не ЗначениеЗаполнено(СтрокаПатч.ИдентификаторПрограммы) Тогда
				НачальнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НачальнаяСборка, "ДатаСборки");
				Если ЗначениеЗаполнено(Параметры.КонечнаяСборкаПоХранилищу) Тогда
					КонечнаяДата = Параметры.ДатаИсправления;
				Иначе
					КонечнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.КонечнаяСборка, "ДатаСборки");
				КонецЕсли;
				
				ПараметрыРасчета = ПараметрыДляРасчетаРоднойПрименимости();
				ПараметрыРасчета.НачальнаяДата = НачальнаяДата;
				ПараметрыРасчета.КонечнаяДата  = КонечнаяДата;
				ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Параметры);
				РоднаяПрименимость = ПрименимостьДляРоднойКонфигурации(ПараметрыРасчета);
				РоднаяПрименимость = РоднаяПрименимость.Сборки;
			КонецЕсли;
			
			Если ПрименимостьДляПубликации.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Отсутствуют конфигурации для которых данный патч мог бы быть опубликован.
					|Проверьте применимость патча, вероятно не выбраны конфигурации для которых его необходимо опубликовать.'");
				УстановитьСтатусПатча(СтрокаПатч, Перечисления.СтатусыПатчей.ОшибкаПубликации, ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			// Публикация патча.
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ИзменяемыеМетаданныеДляПубликации = Новый Массив;
			ИзменяемыеМетаданныеЧастями = СтрРазделить(СтрокаПатч.ИзменяемыеМетаданные, Символы.ПС, Ложь);
			Для Каждого Элемент Из ИзменяемыеМетаданныеЧастями Цикл
				ЭлементЧастями = СтрРазделить(Элемент, " ", Ложь);
				ИзменяемыеМетаданныеДляПубликации.Добавить(ЭлементЧастями[0]);
			КонецЦикла;
			
			ИзменяемыеМетаданныеДляПубликации = СтрСоединить(ИзменяемыеМетаданныеДляПубликации, Символы.ПС);
			
			УстановитьПараметрЗаписи(ЗаписьJSON, "systemNick",      "СППР");
			УстановитьПараметрЗаписи(ЗаписьJSON, "patchUeid",       Строка(СтрокаПатч.УникальныйИдентификатор));
			УстановитьПараметрЗаписи(ЗаписьJSON, "name",            ИмяПатча(СтрокаПатч.Патч, ПараметрыПатча.НомерПатча, Ложь));
			УстановитьПараметрЗаписи(ЗаписьJSON, "description",     СтрокаПатч.Описание);
			УстановитьПараметрЗаписи(ЗаписьJSON, "modifiedObjects", ИзменяемыеМетаданныеДляПубликации);
			УстановитьПараметрЗаписи(ЗаписьJSON, "buildDate",       СтрокаПатч.ДатаИсправления);
			УстановитьПараметрЗаписи(ЗаписьJSON, "responsibleEmployee", "");
			
			УстановитьВерсииПрименимостиПатча(ЗаписьJSON, ПрименимостьДляПубликации, ИдентификаторОсновнойПрограммы);
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			ТелоЗапроса = ЗаписьJSON.Закрыть();
			
			Попытка
				СоздатьЗаданиеПубликацииПатча(ТелоЗапроса);
				
				Результат = ПубликацияПатча(СтрокаПатч.УникальныйИдентификатор, СтрокаПатч.ДанныеПатча);
			Исключение
				ПараметрыПатча.КоличествоПопытокПубликации = ПараметрыПатча.КоличествоПопытокПубликации + 1;
				Если ПараметрыПатча.КоличествоПопытокПубликации <= 5 Тогда
					// В случае ошибок при публикации делается 5 попыток до установки статуса ОшибкаПубликации.
					ЗаписатьПопыткиПубликацииПатча(СтрокаПатч, ПараметрыПатча);
					Продолжить;
				Иначе
					ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				КонецЕсли;
			КонецПопытки;
			
			Если РоднаяПрименимость <> Неопределено Тогда
				ИдентификаторПрограммы = СтрокаПатч.ИдентификаторПрограммы;
				Если Не ЗначениеЗаполнено(ИдентификаторПрограммы) Тогда
					ИдентификаторПрограммы = "РоднаяКонфигурация";
				КонецЕсли;
				ПрименимостьДляПубликации.Вставить(ИдентификаторПрограммы, РоднаяПрименимость);
			КонецЕсли;
			ЗаписатьПрименимостьПатча(ПрименимостьДляПубликации, СтрокаПатч.УникальныйИдентификатор);
			Если Результат = "УжеОпубликован" Тогда
				УстановитьСтатусПатча(СтрокаПатч, Перечисления.СтатусыПатчей.Опубликован);
			Иначе
				УстановитьСтатусПатча(СтрокаПатч, Перечисления.СтатусыПатчей.Публикуется);
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		УстановитьСтатусПатча(СтрокаПатч, Перечисления.СтатусыПатчей.ОшибкаПубликации, ТекстОшибки);
		
		АвторСообщений      = СтрокаПатч.ПользовательАвторСообщенийСистемыВзаимодействия;
		ОтветственныеЗаПатч = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаПатч.Патч, "АвторИсправления,Аудитор,Проверяющий");
		
		ПолучателиУведомления = Новый Массив;
		ПолучателиУведомления.Добавить(ОтветственныеЗаПатч.АвторИсправления);
		Если ЗначениеЗаполнено(ОтветственныеЗаПатч.Аудитор) Тогда
			ПолучателиУведомления.Добавить(ОтветственныеЗаПатч.Аудитор);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтветственныеЗаПатч.Аудитор)
			И ОтветственныеЗаПатч.Аудитор <> ОтветственныеЗаПатч.Проверяющий Тогда
			ПолучателиУведомления.Добавить(ОтветственныеЗаПатч.Проверяющий);
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'При публикации патча возникла ошибка, требуется повторить публикацию'");
		Если Не ЗначениеЗаполнено(АвторСообщений) Тогда
			АвторСообщений = ОтветственныеЗаПатч.АвторИсправления;
		КонецЕсли;
		
		РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(СтрокаПатч.Патч,
			ПолучателиУведомления,
			АвторСообщений,
			Строка(СтрокаПатч.Патч),
			ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьПопыткиПубликацииПатча(СтрокаПатч, ПараметрыПатча)
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", СтрокаПатч.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", СтрокаПатч.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", СтрокаПатч.УникальныйИдентификатор);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Патч.Установить(СтрокаПатч.Патч);
		НаборЗаписей.Отбор.Версия.Установить(СтрокаПатч.Версия);
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(СтрокаПатч.УникальныйИдентификатор);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей[0];
		Запись.Параметры = Новый ХранилищеЗначения(ПараметрыПатча, Новый СжатиеДанных(9));
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ИдентификаторОсновнойПрограммы(Версия)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПроекта.Ссылка = &Версия";
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат[0].ИдентификаторПрограммы;
	
КонецФункции

Процедура ОбновитьСостояниеПубликацииПатча(СтрокаПатч) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Статус = СостояниеПубликацииПатча(СтрокаПатч.УникальныйИдентификатор);
	УстановитьПривилегированныйРежим(Ложь);
	Если Статус = "Опубликовано" Тогда
		УстановитьСтатусПатча(СтрокаПатч, Перечисления.СтатусыПатчей.Опубликован);
		
	ИначеЕсли Статус <> "Публикуется" Тогда
		ТекстОшибки = НСтр("ru = 'При проверке статуса публикации патча возникла ошибка'") + ":";
		ТекстОшибки = ТекстОшибки + Символы.ПС + Статус;
		УстановитьСтатусПатча(СтрокаПатч, Перечисления.СтатусыПатчей.ОшибкаПубликации, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименитьРучноеИзменениеПрименимости(ПрименимостьДляПубликации, СтрокаПатч, ПрименимостьПолная = Неопределено)
	
	Параметры = ПараметрыПатча(СтрокаПатч.Параметры.Получить());
	Если Параметры.ИзмененияПрименимости <> Неопределено Тогда
		ВключеннаяПрименимость = Параметры.ИзмененияПрименимости.Включена;
		Для Каждого ЭлементПрименимости Из ВключеннаяПрименимость Цикл
			Сборки = ЭлементПрименимости.Значение;
			Если ПрименимостьПолная <> Неопределено Тогда
				Для Каждого ЭлементПолнойПрименимости Из ПрименимостьПолная.НеПрименим Цикл
					КлючЧастями = СтрРазделить(ЭлементПолнойПрименимости.Ключ, ",", Ложь);
					Если КлючЧастями.Количество() = 2
						И ЭлементПрименимости.Ключ = КлючЧастями[1] Тогда
						Сборки = ЭлементПолнойПрименимости.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ПрименимостьДляПубликации[ЭлементПрименимости.Ключ] <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПрименимостьДляПубликации[ЭлементПрименимости.Ключ], Сборки, Истина);
			Иначе
				ПрименимостьДляПубликации.Вставить(ЭлементПрименимости.Ключ, Сборки);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ОтключеннаяПрименимость Из Параметры.ИзмененияПрименимости.Отключена Цикл
			ПрименимостьДляПубликации.Удалить(ОтключеннаяПрименимость.Ключ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПрименимостьПатча(Параметры, ДляПубликации = Истина) Экспорт
	
	ПрименимостьПатча = Новый Соответствие;
	
	ИнформацияОПрименимости = Новый Структура;
	ИнформацияОПрименимости.Вставить("ПрименимостьПатча", Новый Соответствие);
	ИнформацияОПрименимости.Вставить("НеПрименим", Новый Соответствие);
	ИнформацияОПрименимости.Вставить("СвязанныеКонфигурации", Новый Соответствие);
	ИнформацияОПрименимости.Вставить("ПричиныНеприменимости", Новый Соответствие);
	
	НачальнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НачальнаяСборка, "ДатаСборки");
	Если ЗначениеЗаполнено(Параметры.КонечнаяСборкаПоХранилищу) Тогда
		КонечнаяДата = Параметры.ДатаИсправления;
	Иначе
		КонечнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.КонечнаяСборка, "ДатаСборки");
	КонецЕсли;
	Раздел        = Параметры.РазделПроекта;
	Версия        = Параметры.Версия;
	ЭтоБиблиотека = Параметры.ЭтоБиблиотека;
	
	ПараметрыРасчета = ПараметрыДляРасчетаРоднойПрименимости();
	ПараметрыРасчета.НачальнаяДата = НачальнаяДата;
	ПараметрыРасчета.КонечнаяДата  = КонечнаяДата;
	ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Параметры);
	ПрименимостьДляРоднойКонфигурации = ПрименимостьДляРоднойКонфигурации(ПараметрыРасчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПроекта.Ссылка = &Версия";
	Результат = Запрос.Выполнить().Выгрузить();
	ИмяИИдентификатор = Результат[0];
	Если ДляПубликации Тогда
		Ключ = ИмяИИдентификатор.ИдентификаторПрограммы;
	Иначе
		ИмяКонфигурации = ИмяКонфигурации(ИмяИИдентификатор.ИмяКонфигурации);
		Ключ = ИмяКонфигурации + "," + ИмяИИдентификатор.ИдентификаторПрограммы;
	КонецЕсли;
	Если Не ДляПубликации Или (ДляПубликации И ЗначениеЗаполнено(Ключ)) Тогда
		// Если конфигурация не публикуется, то пропускаем и не публикуем для нее патч.
		ПрименимостьПатча.Вставить(Ключ, ПрименимостьДляРоднойКонфигурации.Сборки);
	КонецЕсли;
	
	НеПрименим = Новый Соответствие;
	ПричиныНеприменимости = Новый Соответствие;
	Для Каждого СвязаннаяКонфигурация Из ПрименимостьДляРоднойКонфигурации.СвязанныеКонфигурации Цикл
		СвязаннаяКонфигурацияЧастями = СтрРазделить(СвязаннаяКонфигурация.Ключ, ",");
		Если ДляПубликации Тогда
			Ключ = СвязаннаяКонфигурацияЧастями[1];
		Иначе
			Ключ = СвязаннаяКонфигурация.Ключ;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Сборки", СвязаннаяКонфигурация.Значение);
		Запрос.Текст = ТекстЗапросаДляРасчетаПрименимостиСвязанных();
		ТаблицаСборок = Запрос.Выполнить().Выгрузить();
		ТочнаяПрименимостьПатча(Параметры, ТаблицаСборок, ПрименимостьПатча, ДляПубликации, НеПрименим, ПричиныНеприменимости);
	КонецЦикла;
	
	Если Не Параметры.ЭтоБиблиотека Тогда
		// Для конфигураций конечная применимость рассчитывается сразу при создании патча.
		ПрименимостьПатчаПереопределение(ПрименимостьПатча, ПрименимостьДляРоднойКонфигурации.СвязанныеКонфигурации,
			Параметры.УникальныйИдентификатор, Ложь);
		Если ДляПубликации Тогда
			Возврат ПрименимостьПатча;
		Иначе
			ИнформацияОПрименимости.ПрименимостьПатча = ПрименимостьПатча;
			ИнформацияОПрименимости.НеПрименим = НеПрименим;
			ИнформацияОПрименимости.ПричиныНеприменимости = ПричиныНеприменимости;
			Возврат ИнформацияОПрименимости;
		КонецЕсли;
	КонецЕсли;
	
	// Патч для библиотеки, нужно определить к каким конфигурациям он применим.
	// 1. Получение сборок конфигураций, в которые встроены найденные ранее сборки библиотеки.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сборки", ПрименимостьДляРоднойКонфигурации.Сборки);
	Запрос.УстановитьПараметр("ЭтоБиблиотека", Истина);
	Запрос.Текст = ТекстЗапросаДляРасчетаПрименимости();
	СборкиКонфигураций = Запрос.Выполнить().Выгрузить();
	
	// 2. Точная проверка применимости к каждой сборке.
	ТочнаяПрименимостьПатча(Параметры, СборкиКонфигураций, ПрименимостьПатча, ДляПубликации, НеПрименим, ПричиныНеприменимости);
	
	ПрименимостьПатчаПереопределение(ПрименимостьПатча,
		ПрименимостьДляРоднойКонфигурации.СвязанныеКонфигурации,
		Параметры.УникальныйИдентификатор, Истина, НеПрименим);
	
	Если ДляПубликации Тогда
		Возврат ПрименимостьПатча;
	Иначе
		ИнформацияОПрименимости.ПрименимостьПатча = ПрименимостьПатча;
		ИнформацияОПрименимости.НеПрименим = НеПрименим;
		ИнформацияОПрименимости.ПричиныНеприменимости = ПричиныНеприменимости;
		Возврат ИнформацияОПрименимости;
	КонецЕсли;
	
КонецФункции

Процедура ТочнаяПрименимостьПатча(Параметры, СборкиКонфигураций, ПрименимостьПатча, ДляПубликации, НеПрименим, ПричиныНеприменимости)
	
	КэшПлатформыИВерсийКонфигурации = Новый Соответствие;
	Для Каждого СборкаКонфигурации Из СборкиКонфигураций Цикл
		Если Не ЗначениеЗаполнено(СборкаКонфигурации.ИдентификаторПрограммы) Тогда
			Продолжить;
		КонецЕсли;
		
		ВерсияКонфигурации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаКонфигурации.Сборка, "Владелец");
		Если КэшПлатформыИВерсийКонфигурации[ВерсияКонфигурации] = Неопределено Тогда
			ВерсияПлатформы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияКонфигурации, "ВерсияПлатформы");
			Если СтрРазделить(ВерсияПлатформы, ".").Количество() = 4 Тогда
				ВерсияПлатформы = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияПлатформы);
			ИначеЕсли СтрРазделить(ВерсияПлатформы, ".").Количество() <> 3 Тогда
				ВерсияПлатформы = "";
			КонецЕсли;
			
			КэшПлатформыИВерсийКонфигурации[ВерсияКонфигурации] = ВерсияПлатформы;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КэшПлатформыИВерсийКонфигурации[ВерсияКонфигурации])
			Или Не ЗначениеЗаполнено(Параметры.РежимСовместимости) Тогда
			РежимСовместимостиНеПодходит = Ложь;
		Иначе
			РежимСовместимостиНеПодходит = ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(
			КэшПлатформыИВерсийКонфигурации[ВерсияКонфигурации],
			Параметры.РежимСовместимости) < 0;
		КонецЕсли;
		
		ПропуститьВычислениеПрименимости = Ложь;
		Если Параметры.Свойство("ОбновлениеПрименимости") Тогда
			ПропуститьВычислениеПрименимости = ПатчУжеОпубликованДляСборки(Параметры.УникальныйИдентификатор, СборкаКонфигурации.Сборка);
		КонецЕсли;
		
		Если ПропуститьВычислениеПрименимости Тогда
			ИзмененияПрименимыДляКонфигурации = Истина;
		Иначе
			ИзмененияПрименимыДляКонфигурации = ИзмененияПрименимыДляКонфигурации(
				СборкаКонфигурации.РасположениеДистрибутива,
				Параметры.ИзменяемыеМетаданные);
		КонецЕсли;
		
		Если ИзмененияПрименимыДляКонфигурации <> Истина Или РежимСовместимостиНеПодходит Тогда
			Если Не ДляПубликации Тогда
				ДобавитьЭлементПрименимости(НеПрименим, СборкаКонфигурации, ДляПубликации);
			КонецЕсли;
			
			УточнениеНеприменимости = "";
			Если ИзмененияПрименимыДляКонфигурации = Ложь Тогда
				УточнениеНеприменимости = НСтр("ru = 'В конфигурации нет изменяемой функциональности или она изменена по сравнению с библиотекой.'");
			ИначеЕсли ИзмененияПрименимыДляКонфигурации = "ОтсутствуетКэшМетодов" Тогда
				УточнениеНеприменимости = НСтр("ru = 'В папке сборки по пути, который указан в карточке сборки конфигурации в поле ""Расположение дистрибутива"",
				|отсутствуют кэши методов конфигурации для точной проверки применимости.'");
			КонецЕсли;
			
			ИмяКонфигурации = ИмяКонфигурации(СборкаКонфигурации.ИмяКонфигурации);
			Если ПричиныНеприменимости[ИмяКонфигурации] = Неопределено Тогда
				Если РежимСовместимостиНеПодходит И ИзмененияПрименимыДляКонфигурации <> Истина Тогда
					Текст = НСтр("ru = 'Не применимо, т.к. режим совместимости конфигурации (%1) ниже режима совместимости расширения (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст,
					КэшПлатформыИВерсийКонфигурации[ВерсияКонфигурации],
					Параметры.РежимСовместимости);
					Расшифровка = Новый Структура;
					Расшифровка.Вставить("Описание", Текст);
					Расшифровка.Вставить("ИдентификаторПричины", "РежимСовместимости");
					ПричиныНеприменимости[ИмяКонфигурации] = Расшифровка;
				ИначеЕсли РежимСовместимостиНеПодходит И ИзмененияПрименимыДляКонфигурации <> Истина Тогда
					Текст = НСтр("ru = 'Не применимо, т.к. режим совместимости конфигурации (%1) ниже режима совместимости расширения (%2)
					|%3'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст,
					КэшПлатформыИВерсийКонфигурации[ВерсияКонфигурации],
					Параметры.РежимСовместимости,
					УточнениеНеприменимости);
					Расшифровка = Новый Структура;
					Расшифровка.Вставить("Описание", Текст);
					Расшифровка.Вставить("ИдентификаторПричины", "РежимСовместимости");
					ПричиныНеприменимости[ИмяКонфигурации] = Расшифровка;
				Иначе
					Расшифровка = Новый Структура;
					Расшифровка.Вставить("Описание", УточнениеНеприменимости);
					Расшифровка.Вставить("ИдентификаторПричины", "ЕстьИзменения");
					ПричиныНеприменимости[ИмяКонфигурации] = Расшифровка;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ДобавитьЭлементПрименимости(ПрименимостьПатча, СборкаКонфигурации, ДляПубликации);
	КонецЦикла;

КонецПроцедуры

Функция ПатчУжеОпубликованДляСборки(УникальныйИдентификатор, Сборка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Патч", УникальныйИдентификатор);
	Запрос.УстановитьПараметр("Сборка", Сборка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ПрименимостьПатчей КАК ПрименимостьПатчей
		|ГДЕ
		|	ПрименимостьПатчей.Патч = &Патч
		|	И ПрименимостьПатчей.Сборка = &Сборка";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ПрименимостьПатчаПереопределение(ПрименимостьПатча, СвязанныеКонфигурации, ИдентификаторПатча, ЭтоБиблиотека, НеПрименим = Неопределено)
	
	
КонецПроцедуры

Процедура ДобавитьЭлементПрименимости(ПрименимостьПатча, Параметры, ДляПубликации)
	
	Если ДляПубликации Тогда
		КлючПоиска = Параметры.ИдентификаторПрограммы;
	Иначе
		ИмяКонфигурации = ИмяКонфигурации(Параметры.ИмяКонфигурации);
		КлючПоиска = ИмяКонфигурации + "," + Параметры.ИдентификаторПрограммы;
	КонецЕсли;
	
	Если ПрименимостьПатча[КлючПоиска] = Неопределено Тогда
		ПрименимостьПатча.Вставить(КлючПоиска, Новый Массив);
	КонецЕсли;
	ПрименимостьПатча[КлючПоиска].Добавить(Параметры.Сборка);
	
КонецПроцедуры

Процедура РасчитатьПрименимостьДляНовыхСборок()
	
	Узел = ПланыОбмена.ОбменДаннымиССервисомПубликации.Узел();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СборкиВерсииИзменения.Ссылка КАК Ссылка,
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации,
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	СборкиВерсии.Владелец КАК Версия,
		|	Проекты.Библиотека КАК ЭтоБиблиотека,
		|	СборкиВерсии.ДатаПубликации КАК ДатаПубликации
		|ИЗ
		|	Справочник.СборкиВерсии.Изменения КАК СборкиВерсииИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|				ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|			ПО СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
		|		ПО СборкиВерсииИзменения.Ссылка = СборкиВерсии.Ссылка
		|ГДЕ
		|	СборкиВерсииИзменения.Узел = &Узел";
	Сборки = Запрос.Выполнить().Выгрузить();
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СтатусыПатчей.Опубликован);
	Для Каждого СтрокаСборка Из Сборки Цикл
		// Для сборок, у которых дата публикации старше 30 дней не пересчитываем патчи.
		ЛимитДней = 60 * 60 * 24 * 30;
		ГраницаПересчета = ТекущаяДатаСеанса() - ЛимитДней;
		Если ГраницаПересчета > СтрокаСборка.ДатаПубликации Тогда
			ОтменитьРегистрациюСборкиНаПланеОбмена(СтрокаСборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Сборка = СтрокаСборка.Ссылка;
		СборкаОпубликована = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сборка, "Опубликована");
		Если Не СборкаОпубликована Тогда
			ОтменитьРегистрациюСборкиНаПланеОбмена(Сборка);
			Продолжить;
		КонецЕсли;
		Информация = ИнформацияОПопыткахПубликации(Узел, Сборка);
		Если Информация <> Неопределено Тогда
			Неделя = 7 * 24 * 60 * 60;
			ПятьЧасов = 5 * 60 * 60;
			
			Если ТекущаяДатаСеанса() > Информация.ДатаПервойПопыткиПубликации + Неделя Тогда
				ОтменитьРегистрациюСборкиНаПланеОбмена(Сборка);
				УдалитьЗаписьТабличнойЧастиУзла(Узел, Сборка);
				Продолжить;
			КонецЕсли;
			
			Если ТекущаяДатаСеанса() < Информация.ДатаПоследнейПопыткиПубликации + ПятьЧасов Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Определение списка патчей, которым требует обновить применимость.
		// 1. Патчи той конфигурации, к которой относится проверяемая сборка.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Версия", СтрокаСборка.Версия);
		Запрос.УстановитьПараметр("ДатаПубликацииПустая", '00010101');
		Запрос.УстановитьПараметр("ДатаПубликации", ТекущаяДатаСеанса() - 60 * 60 * 24 * 180);
		Запрос.УстановитьПараметр("Состояния", Состояния);
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ВерсииПатчей.Патч КАК Патч,
			|	ВерсииПатчей.Версия КАК Версия,
			|	ВерсииПатчей.ДанныеПатча КАК ДанныеПатча,
			|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
			|	ВерсииПатчей.НачальнаяСборка КАК НачальнаяСборка,
			|	ВерсииПатчей.КонечнаяСборка КАК КонечнаяСборка,
			|	ВерсииПатчей.КонечнаяСборкаПоХранилищу КАК КонечнаяСборкаПоХранилищу,
			|	ВерсииПатчей.ДатаИсправления КАК ДатаИсправления,
			|	ВерсииПатчей.Состояние КАК Состояние,
			|	ВерсииПатчей.ИзменяемыеМетаданные КАК ИзменяемыеМетаданные,
			|	ВерсииПатчей.Описание КАК Описание,
			|	ВерсииПатчей.Параметры КАК Параметры,
			|	ВерсииПатчей.ПодписанДляКонфигурации КАК ПодписанДляКонфигурации,
			|	ВерсииПатчей.РежимСовместимости КАК РежимСовместимости,
			|	ВерсииПатчей.ИмяПатча КАК ИмяПатча,
			|	ИСТИНА КАК ЭтоБиблиотека
			|ИЗ
			|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
			|ГДЕ
			|	ВерсииПатчей.Версия = &Версия
			|	И ВерсииПатчей.Состояние В(&Состояния)
			|	И (ВерсииПатчей.ДатаПубликации > &ДатаПубликации
			|		Или ВерсииПатчей.ДатаПубликации = &ДатаПубликацииПустая)";
		ПатчиКонфигурации = Запрос.Выполнить().Выгрузить();
		// Определение патчей, для которых необходимо обновление применимости.
		УдаляемыеПатчи = Новый Массив;
		ОбновляемыеПатчи = Новый Массив;
		Для Каждого СтрокаПатч Из ПатчиКонфигурации Цикл
			Если СтрокаПатч.КонечнаяСборка = Сборка Тогда
				УдаляемыеПатчи.Добавить(СтрокаПатч);
				Продолжить;
			КонецЕсли;
			НомерНачальнойСборкиПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПатч.НачальнаяСборка, "Код");
			НомерСборкиПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПатч.КонечнаяСборка, "Код");
			НомерСборкиНовый = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сборка, "Код");
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерСборкиНовый, СтрокаПатч.КонечнаяСборкаПоХранилищу) > 0
				Или ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерСборкиНовый, НомерНачальнойСборкиПатча) <= 0 Тогда
				// Патч не применим для новой сборки.
				УдаляемыеПатчи.Добавить(СтрокаПатч);
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сборка", Сборка);
			Запрос.УстановитьПараметр("Патч", СтрокаПатч.УникальныйИдентификатор);
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ИСТИНА КАК ЕстьЗаписи
				|ИЗ
				|	РегистрСведений.ПрименимостьПатчей КАК ПрименимостьПатчей
				|ГДЕ
				|	ПрименимостьПатчей.Сборка = &Сборка
				|	И ПрименимостьПатчей.Патч = &Патч";
			Результат = Запрос.Выполнить().Выгрузить();
			Если Результат.Количество() <> 0 Тогда
				// Патч уже применим на эту сборку.
				УдаляемыеПатчи.Добавить(СтрокаПатч);
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаПатч.КонечнаяСборкаПоХранилищу, НомерСборкиНовый) >= 0 Тогда
				ОбновляемыеПатчи.Добавить(СтрокаПатч.УникальныйИдентификатор);
				РасчитатьПрименимостьДляНовыхСборокПереопределение(Сборка, СтрокаПатч.УникальныйИдентификатор);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемыйПатч Из УдаляемыеПатчи Цикл
			ПатчиКонфигурации.Удалить(УдаляемыйПатч);
		КонецЦикла;
		
		// 2. Для конфигурации дополнительно проверяется применимость патчей библиотек.
		ПатчиБиблиотек = Неопределено;
		Если Не СтрокаСборка.ЭтоБиблиотека Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сборка", Сборка);
			Запрос.УстановитьПараметр("ДатаПубликацииПустая", '00010101');
			Запрос.УстановитьПараметр("ДатаПубликации", ТекущаяДатаСеанса() - 60 * 60 * 24 * 180);
			Запрос.УстановитьПараметр("Состояния", Состояния);
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ВерсииПатчей.Версия КАК Версия,
				|	ВерсииПатчей.Патч КАК Патч,
				|	ВерсииПатчей.ДанныеПатча КАК ДанныеПатча,
				|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
				|	ВерсииПатчей.НачальнаяСборка КАК НачальнаяСборка,
				|	ВерсииПатчей.КонечнаяСборка КАК КонечнаяСборка,
				|	ВерсииПатчей.КонечнаяСборкаПоХранилищу КАК КонечнаяСборкаПоХранилищу,
				|	ВерсииПатчей.ДатаИсправления КАК ДатаИсправления,
				|	ВерсииПатчей.Состояние КАК Состояние,
				|	ВерсииПатчей.ИзменяемыеМетаданные КАК ИзменяемыеМетаданные,
				|	ВерсииПатчей.Описание КАК Описание,
				|	ВерсииПатчей.Параметры КАК Параметры,
				|	ИСТИНА КАК ЭтоБиблиотека,
				|	ВерсииПатчей.ПодписанДляКонфигурации КАК ПодписанДляКонфигурации,
				|	ВерсииПатчей.РежимСовместимости КАК РежимСовместимости,
				|	ВерсииПатчей.ИмяПатча КАК ИмяПатча
				|ИЗ
				|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
				|ГДЕ
				|	ВерсииПатчей.Состояние В(&Состояния)
				|	И (ВерсииПатчей.ДатаПубликации > &ДатаПубликации
				|		Или ВерсииПатчей.ДатаПубликации = &ДатаПубликацииПустая)
				|	И ВерсииПатчей.УникальныйИдентификатор В
				|			(ВЫБРАТЬ
				|				ПрименимостьПатчей.Патч КАК Патч
				|			ИЗ
				|				РегистрСведений.ПрименимостьПатчей КАК ПрименимостьПатчей
				|					ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
				|						ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
				|							ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
				|							ПО
				|								ВерсииПроекта.Владелец = Проекты.Ссылка
				|						ПО
				|							СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
				|					ПО
				|						ПрименимостьПатчей.Сборка = СборкиВерсии.Ссылка
				|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииПатчей КАК ТаблицаВерсииПатчей
				|					ПО
				|						ПрименимостьПатчей.Патч = ТаблицаВерсииПатчей.УникальныйИдентификатор
				|			ГДЕ
				|				ПрименимостьПатчей.Сборка В
				|					(ВЫБРАТЬ
				|						СборкиВерсииСборкиВключаемыхПроектов.Сборка КАК Сборка
				|					ИЗ
				|						Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВерсииСборкиВключаемыхПроектов
				|					ГДЕ
				|						СборкиВерсииСборкиВключаемыхПроектов.Ссылка = &Сборка)
				|				И НЕ ПрименимостьПатчей.Патч В
				|						(ВЫБРАТЬ
				|							ПрименимостьПатчей.Патч КАК Патч
				|						ИЗ
				|							РегистрСведений.ПрименимостьПатчей КАК ПрименимостьПатчей
				|						ГДЕ
				|							ПрименимостьПатчей.Сборка = &Сборка)
				|				И (НЕ Проекты.Библиотека
				|						И ТаблицаВерсииПатчей.Версия = ВерсииПроекта.Ссылка
				|					ИЛИ Проекты.Библиотека))";
			ПатчиБиблиотек = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		
		Если ПатчиБиблиотек <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПатчиБиблиотек, ПатчиКонфигурации);
		КонецЕсли;
		
		Патчи = ПатчиКонфигурации;
		Если Патчи.Количество() = 0 Тогда
			ОтменитьРегистрациюСборкиНаПланеОбмена(Сборка);
			Продолжить;
		КонецЕсли;
		
		ЭтоБазовая = СтрНайти(СтрокаСборка.ИмяКонфигурации, "Базовая") > 0;
		ПатчиПубликовались = Ложь;
		ВсеПатчиУспешноОбновлены = Истина;
		
		ЗакрытыйКлюч = Неопределено;
		Если ЭтоБазовая Тогда
			УстановитьПривилегированныйРежим(Истина);
			ЗакрытыйКлюч = ПатчиСлужебный.ЗакрытыйКлючПроекта(СтрокаСборка.Проект);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Для Каждого СтрокаПатч Из Патчи Цикл
			Попытка
				ПроектПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПатч.Версия, "Владелец");
				ПатчДляБазовой = ЗначениеЗаполнено(СтрокаПатч.ПодписанДляКонфигурации);
				// Для подписанных патчей идем дальше только в том случае, если выполняется обновление
				// для сборки проекта, по которому этот патч создавался.
				Если Не ЭтоБазовая И ПатчДляБазовой И ПроектПатча <> СтрокаСборка.Проект Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоБазовая
					И ПроектПатча <> СтрокаСборка.Проект
					И СтрокаПатч.ПодписанДляКонфигурации <> СтрокаСборка.Проект Тогда
					
					ВладелецБиблиотека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектПатча, "Библиотека");
					Если Не ЗначениеЗаполнено(СтрокаПатч.ПодписанДляКонфигурации)
						И ЗакрытыйКлюч <> Неопределено
						И ВладелецБиблиотека
						И ТребуетсяДобавитьПатчДляБазовойКонфигурации(СтрокаПатч, СтрокаСборка) Тогда
						// Для этого проекта отсутствует базовый патч, требуется его создать.
						
						ВременныйКаталог  = ПолучитьИмяВременногоФайла("SignPatch");
						ПатчДляПодписания = ПолучитьИмяВременногоФайла("cfe");
						СоздатьКаталог(ВременныйКаталог);
						
						СтрокаПатч.ДанныеПатча.Получить().Записать(ПатчДляПодписания);
						
						ИдентификаторНовогоПатча = Новый УникальныйИдентификатор;
						ПараметрыПодписи = Новый Структура;
						ПараметрыПодписи.Вставить("ПутьКПатчу", ПатчДляПодписания);
						ПараметрыПодписи.Вставить("ИмяПатча", ПатчиСлужебный.ИмяПатча(СтрокаПатч.Патч, ПатчиСлужебный.НомерПатча(СтрокаПатч.УникальныйИдентификатор), Ложь));
						ПараметрыПодписи.Вставить("Версия", СтрокаПатч.Версия);
						ПараметрыПодписи.Вставить("КаталогВременнойБазы", ВременныйКаталог);
						ПараметрыПодписи.Вставить("УникальныйИдентификатор", ИдентификаторНовогоПатча);
						ПараметрыПодписи.Вставить("РежимСовместимости", СтрокаПатч.РежимСовместимости);
						ПодписанныйПатч = ПатчиСлужебный.ПодписанныйПатч(ПараметрыПодписи, Ложь, ЗакрытыйКлюч);
						ДанныеПодписанногоПатча = Новый ДвоичныеДанные(ПодписанныйПатч);
						
						// Добавление нового патча в регистре.
						НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Патч.Установить(СтрокаПатч.Патч);
						НаборЗаписей.Отбор.Версия.Установить(СтрокаПатч.Версия);
						НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ИдентификаторНовогоПатча);
						ВерсияПатча = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ВерсияПатча, СтрокаПатч, , "УникальныйИдентификатор");
						ВерсияПатча.УникальныйИдентификатор = ИдентификаторНовогоПатча;
						ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.ОжидаетПубликации;
						
						ПараметрыПатча = ПараметрыПатча(ВерсияПатча.Параметры.Получить());
						ПараметрыПатча.ПатчиБазовыхВерсий.Очистить();
						
						ВерсияПатча.Параметры   = Новый ХранилищеЗначения(ПараметрыПатча, Новый СжатиеДанных(9));
						ВерсияПатча.ДанныеПатча = Новый ХранилищеЗначения(ДанныеПодписанногоПатча, Новый СжатиеДанных(9));
						ВерсияПатча.УникальныйИдентификатор = ИдентификаторНовогоПатча;
						ВерсияПатча.ПодписанДляКонфигурации = СтрокаСборка.Проект;
						НаборЗаписей.Записать();
						
						// Добавление в основной патч информации о созданном базовом патче.
						НачатьТранзакцию();
						Попытка
							Блокировка = Новый БлокировкаДанных;
							ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
							ЭлементБлокировкиДанных.УстановитьЗначение("Патч", СтрокаПатч.Патч);
							ЭлементБлокировкиДанных.УстановитьЗначение("Версия", СтрокаПатч.Версия);
							ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", СтрокаПатч.УникальныйИдентификатор);
							Блокировка.Заблокировать();
							
							НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.Патч.Установить(СтрокаПатч.Патч);
							НаборЗаписей.Отбор.Версия.Установить(СтрокаПатч.Версия);
							НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(СтрокаПатч.УникальныйИдентификатор);
							НаборЗаписей.Прочитать();
							
							Запись = НаборЗаписей[0];
							ПараметрыПатча = ПараметрыПатча(Запись.Параметры.Получить());
							ПатчиБазовыхВерсий = ПараметрыПатча.ПатчиБазовыхВерсий;
							ПатчиБазовыхВерсий.Добавить(ИдентификаторНовогоПатча);
							ПараметрыПатча.Вставить("ПатчиБазовыхВерсий", ПатчиБазовыхВерсий);
							Запись.Параметры = Новый ХранилищеЗначения(ПараметрыПатча, Новый СжатиеДанных(9));
							НаборЗаписей.Записать();
							
							ЗафиксироватьТранзакцию();
						Исключение
							ОтменитьТранзакцию();
							ВызватьИсключение;
						КонецПопытки;
						
						Попытка
							УдалитьФайлы(ВременныйКаталог);
							УдалитьФайлы(ПатчДляПодписания);
						Исключение
							// Обработка исключения не требуется, каталог будет удален средствами платформы.
						КонецПопытки;
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				ПатчиПубликовались = Истина;
				
				Если ПатчДляБазовой И СтрокаПатч.ПодписанДляКонфигурации <> СтрокаСборка.Проект Тогда
					ИдентификаторПрограммы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПатч.ПодписанДляКонфигурации, "ИдентификаторПрограммы");
				Иначе
					ИдентификаторПрограммы = СтрокаСборка.ИдентификаторПрограммы;
				КонецЕсли;
				
				СтрокаПатч.ЭтоБиблиотека = ЭтоВерсияБиблиотеки(СтрокаПатч.Версия);
				Результат = ОбновлениеПрименимостиПатчаВСервисе(СтрокаПатч, ПатчДляБазовой, ИдентификаторПрограммы);
				Если Результат.Статус = "ЕстьНеопубликованныеСборки" Тогда
					// Обновлению применимости мешает неопубликованная сборка.
					УзелОбъект           = Узел.ПолучитьОбъект();
					НеуспешноеОбновление = УзелОбъект.НеуспешноеОбновление;
					ВсеПатчиУспешноОбновлены = Ложь;
					
					НайденнаяСтрока = НеуспешноеОбновление.Найти(Сборка, "Сборка");
					Если НайденнаяСтрока = Неопределено Тогда
						Строка = НеуспешноеОбновление.Добавить();
						Строка.Сборка = Сборка;
						Строка.ДатаПервойПопыткиПубликации    = ТекущаяДатаСеанса();
						Строка.ДатаПоследнейПопыткиПубликации = ТекущаяДатаСеанса();
					Иначе
						НайденнаяСтрока.ДатаПоследнейПопыткиПубликации = ТекущаяДатаСеанса();
					КонецЕсли;
					УзелОбъект.Записать();
				ИначеЕсли Результат.Статус = "Успешно" Тогда
					Информация = ИнформацияОПопыткахПубликации(Узел, Сборка);
					Если Информация <> Неопределено Тогда
						УдалитьЗаписьТабличнойЧастиУзла(Узел, Сборка);
					КонецЕсли;
					
					// Если менялась конечная сборка патча, то нужно обновить ее в сведениях о патче.
					Если ОбновляемыеПатчи.Найти(СтрокаПатч.УникальныйИдентификатор) <> Неопределено Тогда
						СборкаПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПатч.КонечнаяСборка, "Код");
						СборкаНовая = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сборка, "Код");
						Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СборкаНовая, СборкаПатча) >= 0 Тогда
							УстановитьСвойствоПатча(СтрокаПатч, "КонечнаяСборка", Сборка);
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Результат.Статус = "НеПрименимо" Тогда
					Продолжить;
				ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
					ВызватьИсключение Результат.ТекстОшибки;
				КонецЕсли;
			Исключение
				ОтменитьРегистрациюСборкиНаПланеОбмена(Сборка);
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ДобавитьОшибкуПересчетаПрименимости(СтрокаПатч, ТекстОшибки, Сборка)
			КонецПопытки
		КонецЦикла;
		
		// Для сборки есть только не подходящие для нее патчи.
		// Например, если сборка базовая и остались только не подписанные патчи.
		Если Не ПатчиПубликовались
			Или ВсеПатчиУспешноОбновлены Тогда
			ОтменитьРегистрациюСборкиНаПланеОбмена(Сборка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоВерсияБиблиотеки(Версия)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Версия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Библиотека КАК Библиотека
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПроекта.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	ЭтоБиблиотека = Результат[0].Библиотека;
	
	Возврат ЭтоБиблиотека;
	
КонецФункции

Функция ОбновлениеПрименимостиПатчаВСервисе(ВерсияПатча, ЭтоБазоваяВерсия = Ложь, Идентификатор = Неопределено) Экспорт
	
	СвойстваВерсииПатча = ЗначенияСвойствВерсииПатча(ВерсияПатча.УникальныйИдентификатор, "РазделПроекта");
	Параметры = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВерсияПатча);
	Параметры.Вставить("РазделПроекта", СвойстваВерсииПатча.РазделПроекта);
	Параметры.Вставить("ОбновлениеПрименимости");
	
	ПрименимостьДляПубликации = ПрименимостьПатча(Параметры);
	ИдентификаторОсновнойКонфигурации = Неопределено;
	СборкиОсновнойПрограммы = Неопределено;
	Если ЭтоБазоваяВерсия Тогда
		ИдентификаторОсновнойКонфигурации = ИдентификаторОсновнойКонфигурации(ВерсияПатча.Версия);
		СборкиОсновнойПрограммы = ПрименимостьДляПубликации[ИдентификаторОсновнойКонфигурации];
	КонецЕсли;
	ПрименимостьПолная = ПрименимостьПатча(Параметры, Ложь);
	ПрименитьРучноеИзменениеПрименимости(ПрименимостьДляПубликации, Параметры, ПрименимостьПолная);
	Если Не ЭтоБазоваяВерсия Тогда
		ИсключитьИзПрименимостиБазовыеВерсии(ПрименимостьДляПубликации);
	Иначе
		Сборки = ПрименимостьДляПубликации[Идентификатор];
		ПрименимостьДляПубликации = Новый Соответствие;
		ПрименимостьДляПубликации.Вставить(Идентификатор, Сборки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор)
		И ПрименимостьДляПубликации[Идентификатор] = Неопределено Тогда
		// Патч не применим для данной сборки, обновление публикации не выполняется.
		Возврат Новый Структура("Статус, ТекстОшибки", "НеПрименимо");
	КонецЕсли;
	
	Результат = ОбновлениеФайлаИсправленияВСервисе(Параметры, ПрименимостьДляПубликации, Идентификатор);
	Если Результат.Статус = "Успешно" Тогда
		// При обновлении применимости базового патча по основной конфигурации
		// необходимо записать в регистр применимости и сборки самой конфигурации. 
		Если ИдентификаторОсновнойКонфигурации <> Неопределено
			И СборкиОсновнойПрограммы <> Неопределено Тогда
			ПрименимостьДляПубликации.Вставить(ИдентификаторОсновнойКонфигурации, СборкиОсновнойПрограммы);
		КонецЕсли;
		
		Если ИдентификаторОсновнойКонфигурации = Неопределено Тогда
			ИдентификаторОсновнойКонфигурации = ИдентификаторОсновнойКонфигурации(ВерсияПатча.Версия);
			
			// Если конфигурация (библиотека), для которой собирается патч, не публикуется, то нужно отдельно
			// получить применимость для нее и записать в регистр. Требуется для того, чтобы этот патч был
			// виден для новых сборок конфигураций.
			Если Не ЗначениеЗаполнено(ИдентификаторОсновнойКонфигурации) Тогда
				НачальнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НачальнаяСборка, "ДатаСборки");
				Если ЗначениеЗаполнено(Параметры.КонечнаяСборкаПоХранилищу) Тогда
					КонечнаяДата = Параметры.ДатаИсправления;
				Иначе
					КонечнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.КонечнаяСборка, "ДатаСборки");
				КонецЕсли;
				
				ПараметрыРасчета = ПараметрыДляРасчетаРоднойПрименимости();
				ПараметрыРасчета.НачальнаяДата = НачальнаяДата;
				ПараметрыРасчета.КонечнаяДата  = КонечнаяДата;
				ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Параметры);
				РоднаяПрименимость = ПрименимостьДляРоднойКонфигурации(ПараметрыРасчета);
				Если РоднаяПрименимость.Сборки.Количество() > 0 Тогда
					ПрименимостьДляПубликации.Вставить("РоднаяПрименимость", РоднаяПрименимость.Сборки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписатьПрименимостьПатча(ПрименимостьДляПубликации, Параметры.УникальныйИдентификатор, Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеРучногоОбновленияПрименимостиПатча(Результаты) Экспорт
	
	РезультатОбновления = Новый Структура("ВсеУспешно, ТекстСообщения", Ложь, "");
	
	ВсеУспешно = Истина;
	ЕстьУспешные = Ложь;
	ТекстыОшибок = Новый Массив;
	Для Каждого Результат Из Результаты Цикл
		Если Результат.Статус = "Успешно" Тогда
			ЕстьУспешные = Истина;
		Иначе
			ВсеУспешно = Ложь;
			ТекстыОшибок.Добавить(Результат.ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	
	РезультатОбновления.ВсеУспешно = ВсеУспешно;
	
	Если ВсеУспешно Тогда
		РезультатОбновления.ТекстСообщения = НСтр("ru = 'Применимость обновлена.'");
		Возврат РезультатОбновления;
	КонецЕсли;
	
	Если Не ЕстьУспешные Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось обновить применимость патчей по причине:
			|
			|%1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрСоединить(ТекстыОшибок, Символы.ПС + "------" + Символы.ПС));
		РезультатОбновления.ТекстСообщения = ТекстОшибки;
		Возврат РезультатОбновления;
	КонецЕсли;
	
	ТекстОшибки = НСтр("ru = 'Не для всех патчей удалось обновить применимость:
		|
		|%1'");
	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрСоединить(ТекстыОшибок, Символы.ПС + "------" + Символы.ПС));
	РезультатОбновления.ТекстСообщения = ТекстОшибки;
	
	Возврат РезультатОбновления;
	
КонецФункции

Процедура РасчитатьПрименимостьДляНовыхСборокПереопределение(Сборка, ИдентификаторПатча)
	
КонецПроцедуры

Функция ИдентификаторОсновнойКонфигурации(Версия)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Версия);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПроекта.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	ИдентификаторПрограммы = Результат[0].ИдентификаторПрограммы;
	
	Возврат ИдентификаторПрограммы;
	
КонецФункции

Функция ИнформацияОПопыткахПубликации(Узел, Сборка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("Сборка", Сборка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НеуспешноеОбновление.Сборка КАК Сборка,
		|	НеуспешноеОбновление.ДатаПервойПопыткиПубликации КАК ДатаПервойПопыткиПубликации,
		|	НеуспешноеОбновление.ДатаПоследнейПопыткиПубликации КАК ДатаПоследнейПопыткиПубликации
		|ИЗ
		|	ПланОбмена.ОбменДаннымиССервисомПубликации.НеуспешноеОбновление КАК НеуспешноеОбновление
		|ГДЕ
		|	НеуспешноеОбновление.Ссылка = &Узел
		|	И НеуспешноеОбновление.Сборка = &Сборка";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Результат[0];
	КонецЕсли;
КонецФункции

Процедура УдалитьЗаписьТабличнойЧастиУзла(Узел, Сборка)
	УзелОбъект = Узел.ПолучитьОбъект();
	Строка = УзелОбъект.НеуспешноеОбновление.Найти(Сборка, "Сборка");
	УзелОбъект.НеуспешноеОбновление.Удалить(Строка);
	УзелОбъект.Записать();
КонецПроцедуры

Процедура ДобавитьОшибкуПересчетаПрименимости(СтрокаПатч, ТекстОшибки, Сборка)
	
	Шаблон = НСтр("ru = 'Не удалось обновить применимость для сборки %1 по причине'") + ":";
	ЗаписьЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Строка(Сборка));
	
	Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
	Набор.Отбор.Версия.Установить(СтрокаПатч.Версия);
	Набор.Отбор.Патч.Установить(СтрокаПатч.Патч);
	Набор.Отбор.УникальныйИдентификатор.Установить(СтрокаПатч.УникальныйИдентификатор);
	Набор.Прочитать();
	
	ВерсияПатча = Набор[0];
	Параметры = ПараметрыПатча(ВерсияПатча.Параметры.Получить());
	ДобавитьОшибкуВЛог(Параметры, ЗаписьЛога, ТекстОшибки);
	ВерсияПатча.ЕстьОшибкиПересчетаПрименимости = Истина;
	ВерсияПатча.Параметры = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(9));
	
	Набор.Записать();
	
КонецПроцедуры

Процедура ОтменитьРегистрациюСборкиНаПланеОбмена(Сборка)
	Узел = ПланыОбмена.ОбменДаннымиССервисомПубликации.Узел();
	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Сборка);
КонецПроцедуры

Функция ОбновлениеФайлаИсправленияВСервисе(ИнформацияОПатче, ПрименимостьДляПубликации, ИдентификаторОсновнойПрограммы)
	
	Если ИдентификаторОсновнойПрограммы = Неопределено Тогда
		ИдентификаторОсновнойПрограммы = ИдентификаторОсновнойПрограммы(ИнформацияОПатче.Версия);
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("applyToVersion");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для Каждого ПрименимостьКонфигурации Из ПрименимостьДляПубликации Цикл
		УсловноИмяПрограммы = ПрименимостьКонфигурации.Ключ;
		
		Для Каждого Сборка Из ПрименимостьКонфигурации.Значение Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("programNick");
			ЗаписьJSON.ЗаписатьЗначение(УсловноИмяПрограммы);
			ЗаписьJSON.ЗаписатьИмяСвойства("versionNumber");
			ЗаписьJSON.ЗаписатьЗначение(Строка(Сборка));
			ЗаписьJSON.ЗаписатьИмяСвойства("source");
			ЗаписьJSON.ЗаписатьЗначение(ИдентификаторОсновнойПрограммы = УсловноИмяПрограммы);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	Ответ = ОбращениеКСервису("update/" + ИнформацияОПатче.УникальныйИдентификатор, Заголовки, ТелоЗапроса);
	
	РезультатОбновления = Новый Структура("Статус, ТекстОшибки");
	
	Если Ответ.КодСостояния = 200 Тогда
		РезультатОбновления.Статус = "Успешно";
		Возврат РезультатОбновления;
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		Если ВРег(ДанныеОтвета["errorCode"]) = "PROGRAM_VERSION_NOT_FOUND" Тогда
			РезультатОбновления.Статус = "ЕстьНеопубликованныеСборки";
			РезультатОбновления.ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
			Возврат РезультатОбновления;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'При обновлении применимости патча для конфигурации ""%1"" возникла ошибка:
			|%2'");
		РезультатОбновления.Статус = "Ошибка";
		РезультатОбновления.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИнформацияОПатче.ИмяКонфигурации, Ответ.ПолучитьТелоКакСтроку());
		Возврат РезультатОбновления;
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяДобавитьПатчДляБазовойКонфигурации(СвойстваПатча, ПараметрыСборки)
	
	ИзменяемыеМетаданные = СвойстваПатча.ИзменяемыеМетаданные;
	Сборка = ПараметрыСборки.Ссылка;
	Проект = ПараметрыСборки.Проект;
	
	// Проверка наличия патча для базовой версии.
	Если ПатчБазовойВерсииУжеДобавлен(СвойстваПатча.Патч, Проект, СвойстваПатча.Версия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияПлатформыКонфигурации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСборки.Версия, "ВерсияПлатформы");
	Если СтрРазделить(ВерсияПлатформыКонфигурации, ".").Количество() = 4 Тогда
		ВерсияПлатформыКонфигурации = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ВерсияПлатформыКонфигурации);
	ИначеЕсли СтрРазделить(ВерсияПлатформыКонфигурации, ".").Количество() <> 3 Тогда
		ВерсияПлатформыКонфигурации = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияПлатформыКонфигурации)
		Или Не ЗначениеЗаполнено(СвойстваПатча.РежимСовместимости) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	РежимСовместимостиНеПодходит = ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(
		ВерсияПлатформыКонфигурации,
		СвойстваПатча.РежимСовместимости) < 0;
	
	Если РежимСовместимостиНеПодходит Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РасположениеСборки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сборка, "РасположениеДистрибутива");
	Применим = ИзмененияПрименимыДляКонфигурации(РасположениеСборки, ИзменяемыеМетаданные);
	ПараметрыПатча = ПараметрыПатча(СвойстваПатча.Параметры.Получить());
	// Применение ручных изменений применимости патча.
	Если ПараметрыПатча.ИзмененияПрименимости <> Неопределено Тогда
		Отключенные = ПараметрыПатча.ИзмененияПрименимости.Отключена;
		Включенные  = ПараметрыПатча.ИзмененияПрименимости.Включена;
		Если Применим
			И Отключенные[ПараметрыСборки.ИдентификаторПрограммы] <> Неопределено Тогда
			Применим = Ложь;
		КонецЕсли;
		
		Если Не Применим
			И Включенные[ПараметрыСборки.ИдентификаторПрограммы] <> Неопределено Тогда
			Применим = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Применим) <> Тип("Булево") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Применим;
	
КонецФункции

Функция ПатчБазовойВерсииУжеДобавлен(Патч, Проект, Версия)
	
	// Проверка наличия патча для базовой версии.
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СтатусыПатчей.ОжидаетПубликации);
	Состояния.Добавить(Перечисления.СтатусыПатчей.Публикуется);
	Состояния.Добавить(Перечисления.СтатусыПатчей.ОшибкаПубликации);
	Состояния.Добавить(Перечисления.СтатусыПатчей.Опубликован);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Патч", Патч);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("ПодписанДляКонфигурации", Проект);
	Запрос.УстановитьПараметр("Состояние", Состояния);
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.Патч = &Патч
		|	И ВерсииПатчей.Версия = &Версия
		|	И ВерсииПатчей.ПодписанДляКонфигурации = &ПодписанДляКонфигурации
		|	И ВерсииПатчей.Состояние В (&Состояние)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Для возможности переопределения в расширении.
//
Функция ИмяКонфигурации(Имя) Экспорт
	
	Возврат Имя;
	
КонецФункции

Функция ИзмененияПрименимыДляКонфигурации(РасположениеДистрибутива, ИзменяемыеМетаданные)
	
	ИзменяемыеМетаданныеМассив = СтрРазделить(ИзменяемыеМетаданные, Символы.ПС, Ложь);
	Если ИзменяемыеМетаданныеМассив.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Результат = Истина;
	Для Каждого ИзменяемыйМетодИХэш Из ИзменяемыеМетаданныеМассив Цикл
		ИзменяемыйМетодИХэшЧастями = СтрРазделить(ИзменяемыйМетодИХэш, " ");
		
		ИзменяемыйМетод        = ИзменяемыйМетодИХэшЧастями[0];
		ИзменяемыйМетодЧастями = СтрРазделить(ИзменяемыйМетод, ".");
		ИзменяемыйМетодЧастями.Вставить(ИзменяемыйМетодЧастями.Количество() - 1, "Форма");
		ИмяМетодаДляВыгрузкиПлатформы = СтрСоединить(ИзменяемыйМетодЧастями, ".");
		
		ХешированиеМетода = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеМетода.Добавить(ИзменяемыйМетодИХэшЧастями[0]);
		
		ХешированиеМетодаДляВыгрузкиПлатформы = Новый ХешированиеДанных(ХешФункция.SHA256);
		ХешированиеМетодаДляВыгрузкиПлатформы.Добавить(ИмяМетодаДляВыгрузкиПлатформы);
		
		ИмяФайла = "";
		ИмяФайлаИндекса = "";
		Файлы = НайденныеФайлы(РасположениеДистрибутива, "*.dbf");
		Если Файлы.Количество() = 1 Тогда
			ИмяФайла = Файлы[0].ПолноеИмя;
		КонецЕсли;
		
		Файлы = НайденныеФайлы(РасположениеДистрибутива, "*.cdx");
		Если Файлы.Количество() = 1 Тогда
			ИмяФайлаИндекса = Файлы[0].ПолноеИмя;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИмяФайла) Или Не ЗначениеЗаполнено(ИмяФайлаИндекса) Тогда
			Возврат "ОтсутствуетКэшМетодов";
		КонецЕсли;
		
		Попытка
			XBase = Новый XBase();
			XBase.ОткрытьФайл(ИмяФайла, ИмяФайлаИндекса, Истина);
			XBase.ТекущийИндекс = XBase.индексы.Получить(0);
			XBase.Ключ.FULLNAME = Base64Строка(ХешированиеМетода.ХешСумма);
			ЗаписьНайдена = XBase.НайтиПоКлючу("=");
			Если Не ЗаписьНайдена Тогда
				XBase.Ключ.FULLNAME = Base64Строка(ХешированиеМетодаДляВыгрузкиПлатформы.ХешСумма);
				ЗаписьНайдена = XBase.НайтиПоКлючу("=");
			КонецЕсли;
		Исключение
			// Ошибка чтения файла кэша метаданных.
			Возврат Ложь;
		КонецПопытки;
		
		ХешОтсутствует = ИзменяемыйМетодИХэшЧастями.Количество() = 1;
		
		Результат = ЗаписьНайдена И (ХешОтсутствует Или XBase.Hash = ИзменяемыйМетодИХэшЧастями[1]);
		Если XBase.Открыта() Тогда
			XBase.ЗакрытьФайл();
		КонецЕсли;
		
		Если Не Результат Тогда
			// Если хотя бы один метод был изменен, то патч не применим к конфигурации.
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НайденныеФайлы(РасположениеДистрибутива, Фильтр)
	
	ФайлыКаталога = НайтиФайлы(РасположениеДистрибутива, "*");
	Для Каждого Элемент Из ФайлыКаталога Цикл
		Если ЗначениеЗаполнено(Элемент.Расширение) Тогда
			Продолжить;
		КонецЕсли;
		
		Файлы = НайтиФайлы(Элемент.ПолноеИмя, Фильтр);
		Если Файлы.Количество() = 1 Тогда
			Возврат Файлы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Массив;
	
КонецФункции

Процедура УстановитьВерсииПрименимостиПатча(ЗаписьJSON, ОписаниеПрименимости, ИдентификаторОсновнойПрограммы)
	ЗаписьJSON.ЗаписатьИмяСвойства("applyToVersion");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для Каждого Элемент Из ОписаниеПрименимости Цикл
		Для Каждого Версия Из Элемент.Значение Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			УстановитьПараметрЗаписи(ЗаписьJSON, "programNick", Элемент.Ключ);
			УстановитьПараметрЗаписи(ЗаписьJSON, "versionNumber", Строка(Версия));
			Если Элемент.Ключ = ИдентификаторОсновнойПрограммы Тогда
				УстановитьПараметрЗаписи(ЗаписьJSON, "source", Истина);
			КонецЕсли;
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
КонецПроцедуры

Процедура УстановитьПараметрЗаписи(ЗаписьJSON, ИмяПараметра, Значение)
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяПараметра);
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		ЗаписьJSON.ЗаписатьЗначение(ЗаписатьДатуJSON(Значение, ФорматДатыJSON.ISO));
	Иначе
		ЗаписьJSON.ЗаписатьЗначение(Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаДляРасчетаПрименимости(ЭтоБиблиотека = Истина)
	Если ЭтоБиблиотека Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	Проекты.Ссылка КАК Проект,
			|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
			|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации,
			|	СборкиВерсии.Ссылка КАК Сборка,
			|	СборкиВерсии.РасположениеДистрибутива КАК РасположениеДистрибутива,
			|	СборкиВерсии.Опубликована КАК Опубликована
			|ИЗ
			|	Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВерсииСборкиВключаемыхПроектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
			|				ПО ВерсииПроекта.Владелец = Проекты.Ссылка
			|			ПО СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
			|		ПО СборкиВерсииСборкиВключаемыхПроектов.Ссылка = СборкиВерсии.Ссылка
			|ГДЕ
			|	СборкиВерсииСборкиВключаемыхПроектов.Сборка В(&Сборки)
			|	И СборкиВключаемыхПроектов.Ссылка.Опубликована = ИСТИНА
			|	И Проекты.Библиотека = ЛОЖЬ
			|	И &ЭтоБиблиотека";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	СборкиВключаемыхПроектов.Ссылка КАК Сборка,
			|	Проекты.Ссылка КАК Проект,
			|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации,
			|	Проекты.ИдентификаторПрограммы КАК НикКонфигурации
			|ИЗ
			|	Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВключаемыхПроектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
			|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
			|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты.ИспользуемыеРазделыВключаемыхПроектов КАК ИспользуемыеРазделыПроектов
			|				ПО (ИспользуемыеРазделыПроектов.Ссылка = Проекты.Ссылка)
			|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
			|		ПО СборкиВключаемыхПроектов.Ссылка.Владелец = ВерсииПроекта.Ссылка
			|ГДЕ
			|	СборкиВключаемыхПроектов.Сборка В(&Сборки)
			|	И СборкиВключаемыхПроектов.Ссылка.Опубликована = ИСТИНА
			|	И ИспользуемыеРазделыПроектов.РазделПроекта = &РазделПроекта
			|	И Проекты.Библиотека = ЛОЖЬ";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаДляРасчетаПрименимостиСвязанных()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации,
		|	СборкиВерсии.Ссылка КАК Сборка,
		|	СборкиВерсии.РасположениеДистрибутива КАК РасположениеДистрибутива
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|		ПО СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
		|ГДЕ
		|	СборкиВерсии.Ссылка В(&Сборки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаписатьПрименимостьПатча(ОписаниеПрименимости, Идентификатор, ТолькоОбновление = Ложь)
	
	Набор = РегистрыСведений.ПрименимостьПатчей.СоздатьНаборЗаписей();
	Набор.Отбор.Патч.Установить(Идентификатор);
	Набор.Прочитать();
	Если Не ТолькоОбновление Тогда
		Набор.Очистить();
	КонецЕсли;
	СохраненныеСборки = Набор.ВыгрузитьКолонку("Сборка");
	
	Для Каждого КонфигурацияИСборки Из ОписаниеПрименимости Цикл
		Для Каждого Сборка Из КонфигурацияИСборки.Значение Цикл
			Если СохраненныеСборки.Найти(Сборка) = Неопределено Тогда
				Строка = Набор.Добавить();
				Строка.Сборка = Сборка;
				Строка.Патч = Идентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Набор.Записать();
	
КонецПроцедуры

Процедура СоздатьЗаданиеПубликацииПатча(ТелоЗапроса)
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Ответ = ОбращениеКСервису("patch", Заголовки, ТелоЗапроса);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		Попытка
			ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Исключение
			// Если при чтении Json возникла ошибка - записываем ответ от сервиса в лог как есть.
			ДанныеОтвета = Новый Соответствие;
		КонецПопытки;
		ЧтениеJSON.Закрыть();
		
		Если ВРег(ДанныеОтвета["errorCode"]) = ВРег("already_Created") Тогда
			// Задание уже создано, можно загружать патч.
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = НСтр("ru = 'При публикации патча возникла ошибка:
			|%1
			|'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
КонецПроцедуры

Функция ПубликацияПатча(ИдентификаторПубликации, ДанныеПатча)
	
	ДвоичныеДанные = ДанныеПатча.Получить();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/cfe");
	Ответ = ОбращениеКСервису("upload-file/" + ИдентификаторПубликации, Заголовки, ДвоичныеДанные);
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат "Успешно";
	Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		Если ВРег(ДанныеОтвета["errorCode"]) = ВРег("already_Created") Тогда
			Возврат "УжеОпубликован";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение Ответ.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция СостояниеПубликацииПатча(Идентификатор)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("patchUeids");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	ЗаписьJSON.ЗаписатьЗначение(Строка(Идентификатор));
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ТелоЗапроса = ЗаписьJSON.Закрыть();
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Ответ = ОбращениеКСервису("statuses", Заголовки, ТелоЗапроса);
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат "Опубликовано";
	ИначеЕсли Ответ.КодСостояния = 201 Тогда
		Возврат "Публикуется";
	Иначе
		Возврат Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Функция ОтзывПатчаСБазовымиВерсиями(ВерсияПатча, ПричинаОтзыва = "", ТекстСообщения = "") Экспорт
	
	ПараметрыПатча = ПараметрыПатча(ВерсияПатча.Параметры.Получить());
	Если ЗначениеЗаполнено(ВерсияПатча.ПодписанДляКонфигурации) Тогда
		ОтзываемыеПатчи = Новый Массив;
	Иначе
		ОтзываемыеПатчи = ПараметрыПатча.ПатчиБазовыхВерсий;
	КонецЕсли;
	ОтзываемыеПатчи.Добавить(ВерсияПатча.УникальныйИдентификатор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтзываемыеПатчи", ОтзываемыеПатчи);
	Запрос.УстановитьПараметр("Опубликован", Перечисления.СтатусыПатчей.Опубликован);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.Версия КАК Версия
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.УникальныйИдентификатор В(&ОтзываемыеПатчи)
		|	И ВерсииПатчей.Состояние = &Опубликован";
	ОтзываемыеПатчи = Запрос.Выполнить().Выгрузить();
	ТекстОшибки = "";
	Для Каждого ОтзываемыйПатч Из ОтзываемыеПатчи Цикл
		Результат = ПатчиСлужебный.ОтзывПатча(ОтзываемыйПатч.УникальныйИдентификатор);
		Если Результат.Успешно Тогда
			УстановитьСтатусПатча(ОтзываемыйПатч, Перечисления.СтатусыПатчей.Отозван, , ТекстСообщения, ПричинаОтзыва);
		Иначе
			ТекстОшибки = Результат.ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ОтзывПатча(Идентификатор) Экспорт
	
	Ответ = ОбращениеКСервису("revoke/" + Идентификатор, , , Истина);
	
	Если Ответ.КодСостояния <> 200
		И ЗначениеЗаполнено(Ответ.ПолучитьТелоКакСтроку()) Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ДанныеОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		ЧтениеJSON.Закрыть();
		
		ТекстОшибки = ДанныеОтвета["errorMessage"];
		Если ЗначениеЗаполнено(ТекстОшибки)
			И СтрНайти(ТекстОшибки, "already revoked") Тогда
			Результат = Новый Структура;
			Результат.Вставить("Успешно", Истина);
			Результат.Вставить("ТекстОшибки", "");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ответ.КодСостояния = 200);
	Результат.Вставить("ТекстОшибки", Ответ.ПолучитьТелоКакСтроку());
	Возврат Результат;
	
КонецФункции

Функция ОбращениеКСервису(Операция, Заголовки = Неопределено, Тело = Неопределено, Post = Ложь)
	
	АдресСервиса = Константы.АдресСервисаПубликацииИсправлений.Получить();
	Если Не ЗначениеЗаполнено(АдресСервиса) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен адрес подключения к сервису публикации исправлений.'");
	КонецЕсли;
	ПараметрыАвторизации = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("Патчи_ДанныеДляПубликацииИсправлений", "Логин,Пароль");
	АдресСервиса = АдресСервиса + "/patches-api/" + Операция;
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса);
	
	Если СтруктураURI.Схема <> "https" Тогда
		ЗащищенноеСоединение = Неопределено;
	Иначе
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,
		ПараметрыАвторизации.Логин,
		ПараметрыАвторизации.Пароль,
		,
		90,
		ЗащищенноеСоединение);
	
	Если Заголовки = Неопределено Тогда
		Заголовки = Новый Соответствие;
	КонецЕсли;
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
	Если ТипЗнч(Тело) = Тип("ДвоичныеДанные") Тогда
		HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Тело);
	ИначеЕсли Тело <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(Тело);
	КонецЕсли;
	
	Если Тело = Неопределено И Не Post Тогда
		Возврат Соединение.Получить(HTTPЗапрос);
	Иначе
		Возврат Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗначениеУзла(УзелDOM, Значение)
	Если УзелDOM.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УзелDOM[0].ТекстовоеСодержимое = Значение;
КонецПроцедуры

Функция СтатусыИсправленнойОшибки()
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыОшибок.Закрыта);
	Статусы.Добавить(Перечисления.СтатусыОшибок.Исправлена);
	Статусы.Добавить(Перечисления.СтатусыОшибок.ПроверенаИсправлена);
	
	Возврат Статусы;
КонецФункции

Процедура ДобавитьУзелПрименимости(ДокументDOM, Конфигурация, Версии)
	УзелPatch = ДокументDOM.ПолучитьЭлементыПоИмени("Patch")[0];
	
	УзелAppliedFor = ДокументDOM.СоздатьЭлемент("AppliedFor");
	
	УзелConfigurationName = ДокументDOM.СоздатьЭлемент("ConfigurationName");
	УзелConfigurationName.ТекстовоеСодержимое = Конфигурация;
	
	УзелVersions = ДокументDOM.СоздатьЭлемент("Versions");
	УзелVersions.ТекстовоеСодержимое = Версии;
	
	УзелAppliedFor.ДобавитьДочерний(УзелConfigurationName);
	УзелAppliedFor.ДобавитьДочерний(УзелVersions);
	УзелPatch.ДобавитьДочерний(УзелAppliedFor);
КонецПроцедуры

Процедура ОбработатьВызовыНовыхПроцедурИФункций(ИсправляемыеМетоды, Параметры, ИмяОбъекта)
	
	Если Параметры.НовыеМетоды.Количество() = 0 И Параметры.ВсеНовыеМетоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Префикс = Параметры.НазваниеПатча + "_";
	Для Каждого ИсправляемыйМетод Из ИсправляемыеМетоды Цикл
		Содержимое = ИсправляемыйМетод.Значение;
		Для Каждого НовыйМетод Из Параметры.НовыеМетоды Цикл
			ДобавитьПрефиксВМестахВызова(Содержимое, НовыйМетод, Префикс, ИмяОбъекта);
		КонецЦикла;
		
		Для Каждого НовыйМетод Из Параметры.ИзмененаОбязательностьПараметра Цикл
			ДобавитьПрефиксВМестахВызова(Содержимое, НовыйМетод, Префикс, ИмяОбъекта);
		КонецЦикла;
		
		Для Каждого МетодыОбъекта Из Параметры.ВсеНовыеМетоды Цикл
			Объект = МетодыОбъекта.Ключ;
			Методы = МетодыОбъекта.Значение;
			Для Каждого НовыйМетод Из Методы Цикл
				ДобавитьПрефиксВМестахВызова(Содержимое, НовыйМетод, Префикс, ИмяОбъекта, Объект);
			КонецЦикла;
		КонецЦикла;
		
		ИсправляемыеМетоды[ИсправляемыйМетод.Ключ] = Содержимое;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПрефиксВМестахВызова(Содержимое, Метод, Префикс, ИмяОбъекта, ВызываемыйОбъект = "")
	
	Локальный = ПустаяСтрока(ВызываемыйОбъект);
	
	Если Локальный Тогда
		СтрокаПоиска = Метод;
	Иначе
		СтрокаПоиска = "." + Метод;
	КонецЕсли;
	
	// Варианты вхождения нового метода:
	//  • ИмяНовогоМетода(...)
	//  • "ИмяНовогоМетода" - например, обработчики ожидания или оповещения
	//  • "ИмяМодуля.ИмяНовогоМетода"
	//  • (ИмяНовогоМетода(...))
	
	НомерВхождения = 1;
	Позиция = СтрНайти(Содержимое, СтрокаПоиска, НаправлениеПоиска.СКонца);
	Пока Позиция <> 0 Цикл
		ПрефиксНайденногоМетода = Сред(Содержимое, Позиция - СтрДлина(Префикс), СтрДлина(Префикс));
		СимволПередМетодом = СокрЛП(Сред(Содержимое, Позиция - 1, 1));
		СимволПослеМетода = СокрЛП(Сред(Содержимое, Позиция + СтрДлина(Метод), 1));
		Если ПрефиксНайденногоМетода <> Префикс Тогда
			Если Локальный Тогда
				ИмяОбъектаРасчетное = СокрЛП(Сред(Содержимое, Позиция - СтрДлина(ИмяОбъекта) - Число(Локальный), СтрДлина(ИмяОбъекта)));
				НайденоНачало = Не ЗначениеЗаполнено(СимволПередМетодом) 
					Или СимволПередМетодом = "="
					Или СимволПередМетодом = """"
					Или СимволПередМетодом = "("
					Или (СимволПередМетодом = "." И ИмяОбъекта = ИмяОбъектаРасчетное);
				НайденКонец = СимволПослеМетода = "(" Или СимволПослеМетода = """";
				Если НайденоНачало И НайденКонец Тогда
					Содержимое = Лев(Содержимое, Позиция - 1) + Префикс + Сред(Содержимое, Позиция);
				Иначе
					НомерВхождения = НомерВхождения + 1;
				КонецЕсли;
			Иначе
				ИмяОбъектаРасчетное = СокрЛП(Сред(Содержимое, Позиция - СтрДлина(ВызываемыйОбъект) - Число(Локальный), СтрДлина(ВызываемыйОбъект)));
				Если ИмяОбъектаРасчетное = ВызываемыйОбъект Тогда
					Содержимое = Лев(Содержимое, Позиция) + Префикс + Сред(Содержимое, Позиция + 1);
				Иначе
					НомерВхождения = НомерВхождения + 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НомерВхождения = НомерВхождения + 1;
		КонецЕсли;
		
		Позиция = СтрНайти(Содержимое, СтрокаПоиска, НаправлениеПоиска.СКонца, , НомерВхождения);
	КонецЦикла;
	
КонецПроцедуры

Функция МетодыСИзмененнымиПараметрами(ТекстИзменяемыхПроцедурИФункций, ПараметрыМетодов, ЭкспортныеМетоды, НовыеМетоды, Объект)
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененСоставПараметровИлиЭкспорт", Новый Массив);
	Результат.Вставить("ДобавленНеобязательныйПараметр", Новый Соответствие);
	Результат.Вставить("ИзмененаОбязательностьПараметра", Новый Массив);
	Результат.Вставить("ИзмененЭкспорт", Новый Соответствие);
	ДобавленНеобязательныйПараметрПромежуточный = Новый Массив;
	ИзмененЭкспортПромежуточный = Новый Массив;
	ПолноеИмяОбъекта = ПолноеИмяПоИмениОбъектаВХранилище(Объект);
	Для Каждого КлючИЗначение Из ТекстИзменяемыхПроцедурИФункций Цикл
		ИзменяемыйМетод = КлючИЗначение.Значение;
		НачалоОписанияПараметров = СтрНайти(ИзменяемыйМетод, "(");
		КонецОписанияПараметров  = СтрНайти(ИзменяемыйМетод, ")");
		НачалоТелаМетода         = СтрНайти(ИзменяемыйМетод, Символы.ПС, , КонецОписанияПараметров);
		БлокЭкспорт              = Сред(ИзменяемыйМетод, КонецОписанияПараметров, НачалоТелаМетода - КонецОписанияПараметров);
		
		ЭкспортныйДо    = ЭкспортныеМетоды.Найти(КлючИЗначение.Ключ) <> Неопределено;
		ЭкспортныйПосле = СтрНайти(БлокЭкспорт, "Экспорт") > 0;
		ЭтоНовый        = НовыеМетоды.Найти(КлючИЗначение.Ключ) <> Неопределено;
		
		Если ЭкспортныйДо <> ЭкспортныйПосле И Не ЭтоНовый Тогда
			Результат.ИзмененСоставПараметровИлиЭкспорт.Добавить(КлючИЗначение.Ключ);
			ИзмененЭкспортПромежуточный.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
		
		ПараметрыМетода  = Сред(ИзменяемыйМетод, НачалоОписанияПараметров + 1, КонецОписанияПараметров - НачалоОписанияПараметров - 1);
		СтарыеПараметры  = ПараметрыМетодов[ПолноеИмяОбъекта + "." + КлючИЗначение.Ключ];
		
		Если СтарыеПараметры = Неопределено И Не ЗначениеЗаполнено(ПараметрыМетода) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтарыеПараметры = ПараметрыМетода Тогда
			Продолжить;
		КонецЕсли;
		
		СтарыеПараметрыЧастями = СтрРазделить(СтарыеПараметры, ",", Ложь);
		НовыеПараметрыЧастями  = СтрРазделить(ПараметрыМетода, ",", Ложь);
		ПараметрыИзменены = Ложь;
		ДобавленНеобязательныйПараметр = Ложь;
		ПараметрСделанНеобязательным = Ложь;
		ДобавленЗнач = Ложь;
		
		Для Индекс = 0 По Макс(СтарыеПараметрыЧастями.Количество(), НовыеПараметрыЧастями.Количество()) - 1 Цикл
			НовыйПараметр  = Неопределено;
			СтарыйПараметр = Неопределено;
			Если Индекс < СтарыеПараметрыЧастями.Количество() Тогда
				СтарыйПараметр = СокрЛП(СтарыеПараметрыЧастями[Индекс]);
			КонецЕсли;
			
			Если Индекс < НовыеПараметрыЧастями.Количество() Тогда
				НовыйПараметр = СокрЛП(НовыеПараметрыЧастями[Индекс]);
			КонецЕсли;
			
			Если СтарыйПараметр = Неопределено Тогда
				// Добавлен новый параметр.
				Если СтрРазделить(НовыйПараметр, "=", Ложь).Количество() > 1 Тогда
					ДобавленНеобязательныйПараметр = Истина;
				Иначе
					ПараметрыИзменены = Истина;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если НовыйПараметр = Неопределено Тогда
				// Удален параметр.
				ПараметрыИзменены = Истина;
				Продолжить;
			КонецЕсли;
			
			Если НовыйПараметр = СтарыйПараметр Тогда
				Продолжить; // Параметры не изменились.
			КонецЕсли;
			
			Если СтрНачинаетсяС(СтарыйПараметр, "Знач") <> СтрНачинаетсяС(НовыйПараметр, "Знач") Тогда
				ДобавленЗнач = Истина;
			КонецЕсли;
			
			СтарыйПараметрЧастями = СтрРазделить(СтарыйПараметр, "=");
			НовыйПараметрЧастями  = СтрРазделить(НовыйПараметр, "=");
			Если СтарыйПараметрЧастями.Количество() = НовыйПараметрЧастями.Количество() Тогда
				Продолжить; // Только переименование параметра.
			КонецЕсли;
			
			Если НовыйПараметрЧастями.Количество() = 1 Тогда
				Продолжить; // Сделали параметр обязательным, дополнительных действий не требуется.
			КонецЕсли;
			
			ПараметрСделанНеобязательным = Истина;
			
		КонецЦикла;
		
		Если ПараметрыИзменены Тогда
			Результат.ИзмененСоставПараметровИлиЭкспорт.Добавить(КлючИЗначение.Ключ);
		ИначеЕсли ДобавленНеобязательныйПараметр Или ДобавленЗнач Тогда
			Результат.ИзмененСоставПараметровИлиЭкспорт.Добавить(КлючИЗначение.Ключ);
			ДобавленНеобязательныйПараметрПромежуточный.Добавить(КлючИЗначение.Ключ);
		ИначеЕсли ПараметрСделанНеобязательным Тогда
			Результат.ИзмененаОбязательностьПараметра.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Результат.ДобавленНеобязательныйПараметр.Вставить(ПолноеИмяОбъекта, ДобавленНеобязательныйПараметрПромежуточный);
	Результат.ИзмененЭкспорт.Вставить(ПолноеИмяОбъекта, ИзмененЭкспортПромежуточный);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьРедиректСтарыхВызовов(ТекстИзменяемыхПроцедурИФункций, Параметры, Коллекция, Объект)
	ПолноеИмяОбъекта = ПолноеИмяПоИмениОбъектаВХранилище(Объект);
	ОбрабатываемыеМетоды = Параметры[Коллекция][ПолноеИмяОбъекта];
	Если ОбрабатываемыеМетоды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Метод Из ОбрабатываемыеМетоды Цикл
		ПараметрыМетода = Параметры.ПараметрыМетодов[ПолноеИмяОбъекта + "." + Метод];
		ПараметрыМетодаЧастями = СтрРазделить(ПараметрыМетода, ",", Ложь);
		НовыеПараметрыМетода = Новый Массив;
		Для Каждого Параметр Из ПараметрыМетодаЧастями Цикл
			ПараметрЧастями = СтрРазделить(Параметр, "=");
			НовыеПараметрыМетода.Добавить(СокрП(ПараметрЧастями[0]));
		КонецЦикла;
		ПараметрыМетодаРедирект = СтрЗаменить(СтрСоединить(НовыеПараметрыМетода, ","), "Знач ", "");
		
		ИсходныйМетод   = ТекстИзменяемыхПроцедурИФункций[Метод];
		
		НачалоПараметров = СтрНайти(ИсходныйМетод, "(");
		МетодРедирект = Лев(ИсходныйМетод, НачалоПараметров - 1) + "_Редирект(" + ПараметрыМетода + ")";
		МетодРедирект = МетодРедирект + Символы.ПС;
		
		Если СтрНачинаетсяС(ИсходныйМетод, "&") Тогда
			ИсходныйМетодЧастями = СтрРазделить(ИсходныйМетод, Символы.ПС);
			ИсходныйМетодЧастями.Удалить(0);
			ИсходныйМетод = СтрСоединить(ИсходныйМетодЧастями, Символы.ПС);
		КонецЕсли;
		
		Если СтрНачинаетсяС(ИсходныйМетод, "Процедура") Тогда
			Вызов = Сред(Лев(ИсходныйМетод, НачалоПараметров), СтрДлина("Процедура") + 1) + ПараметрыМетодаРедирект + ");";
			МетодРедирект = МетодРедирект + Символы.Таб + СокрЛП(Вызов) + Символы.ПС + "КонецПроцедуры";
		Иначе
			Вызов = Сред(Лев(ИсходныйМетод, НачалоПараметров), СтрДлина("Функция") + 1) + ПараметрыМетодаРедирект + ");";
			МетодРедирект = МетодРедирект + Символы.Таб + "Возврат " + СокрЛП(Вызов) + Символы.ПС +  "КонецФункции";
		КонецЕсли;
		
		ТекстИзменяемыхПроцедурИФункций.Вставить(Метод + "_Редирект", МетодРедирект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОшибкуВЛог(Параметры, ЗаписьЛога, ТекстОшибки)
	
	Если ЗначениеЗаполнено(ЗаписьЛога) Тогда
		ЗаписьЛога = Строка(ТекущаяДатаСеанса()) + " - " + ЗаписьЛога;
		Параметры.ЛогОшибок.Добавить(ЗаписьЛога);
		Параметры.ЛогОшибок.Добавить(ТекстОшибки);
	Иначе
		ЗаписьЛога = Строка(ТекущаяДатаСеанса()) + " - " + ТекстОшибки;
		Параметры.ЛогОшибок.Добавить(ЗаписьЛога);
	КонецЕсли;
	
	Параметры.ЛогОшибок.Добавить("---------------");
	
КонецПроцедуры

Процедура ИсключитьИзПрименимостиБазовыеВерсии(ПрименимостьДляПубликации)
	
	ИдентификаторыКонфигураций = Новый Массив;
	Для Каждого ПрименимостьДляКонфигурации Из ПрименимостьДляПубликации Цикл
		ИдентификаторыКонфигураций.Добавить(ПрименимостьДляКонфигурации.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПрограммы", ИдентификаторыКонфигураций);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ИдентификаторПрограммы В(&ИдентификаторПрограммы)";
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого Строка Из Результат Цикл
		Если СтрНайти(Строка.ИмяКонфигурации, "Базовая") <> 0 Тогда
			ПрименимостьДляПубликации.Удалить(Строка.ИдентификаторПрограммы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДочерниеКоммиты(ХэшЗакладки, АдресХранилища)
	ТекстКоманды = "log --pretty=format:""%H"" %1""^""..%1";
	ТекстКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКоманды, ХэшЗакладки);
	РезультатВыполнения = ЗапросКХранилищу(ТекстКоманды, АдресХранилища);
	ДочерниеКоммиты = РезультатВыполнения.ПолучитьТекст();
	ДочерниеКоммиты = СтрРазделить(ДочерниеКоммиты, Символы.ПС, Ложь);
	
	Возврат ДочерниеКоммиты;
КонецФункции

Функция ВерсияКонфигурацииИзМодуля(ТекстМодуля)
	
	НачалоБлока = "Процедура ПриДобавленииПодсистемы(Описание) Экспорт";
	КонецБлока  = "КонецПроцедуры";
	
	Начало = СтрНайти(ТекстМодуля, НачалоБлока) + СтрДлина(НачалоБлока);
	Конец  = СтрНайти(ТекстМодуля, КонецБлока, , Начало);
	
	ОписаниеПодсистемы = Сред(ТекстМодуля, Начало, Конец - Начало);
	ОписаниеПодсистемы = СокрЛП(ОписаниеПодсистемы);
	ОписаниеПодсистемыЧастями = СтрРазделить(ОписаниеПодсистемы, Символы.ПС);
	Для Каждого СтрокаОписания Из ОписаниеПодсистемыЧастями Цикл
		СтрокаОписания = СокрЛП(СтрокаОписания);
		СтрокаОписанияЧастями = СтрРазделить(СтрокаОписания, "=");
		Если СтрокаОписанияЧастями.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		СведениеЧастями = СтрРазделить(СтрокаОписанияЧастями[0], ".");
		Если СведениеЧастями.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		ИмяСведения = СокрЛП(СведениеЧастями[1]);
		Если ИмяСведения <> "Версия" Тогда
			Продолжить;
		КонецЕсли;
		Версия = СтрСоединить(СтрРазделить(СокрЛП(СтрокаОписанияЧастями[1]), """;"));
		Прервать;
	КонецЦикла;
	
	Возврат Версия;
	
КонецФункции

Функция ПараметрыДляРасчетаРоднойПрименимости() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("НачальнаяДата");
	Параметры.Вставить("КонечнаяДата");
	Параметры.Вставить("Версия");
	Параметры.Вставить("РазделПроекта");
	Параметры.Вставить("ЭтоБиблиотека");
	Параметры.Вставить("КонечнаяСборкаПоХранилищу");
	
	Возврат Параметры;
	
КонецФункции

Процедура ПересоздатьПатч(ПараметрыПатча) Экспорт
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Патчи");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ПараметрыПатча.Патч);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		ПатчОбъект = ПараметрыПатча.Патч.ПолучитьОбъект();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВерсияПатча", ПараметрыПатча.Версия);
		ПараметрыОтбора.Вставить("ИдентификаторПатча", ПараметрыПатча.УникальныйИдентификатор);
		НайденныеСтроки = ПатчОбъект.СостоянияПроверкиПатча.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			ПатчОбъект.СостоянияПроверкиПатча.Удалить(Строка);
		КонецЦикла;
		
		ПатчиСлужебный.УстановитьСтатусПатча(ПараметрыПатча, Перечисления.СтатусыПатчей.ОжиданиеИсправления);
		
		ПатчОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Функция ДобавитьРассчитаннуюСборку(ПрименимДляСборок, ВерсияВХранилище) Экспорт
	
	ДобавитьРассчитаннуюСборку = Ложь;
	Для Каждого Сборка Из ПрименимДляСборок Цикл
		Если Не ЗначениеЗаполнено(ВерсияВХранилище) Тогда
			Прервать;
		КонецЕсли;
		СборкаЧастями = СтрРазделить(Строка(Сборка), ".");
		СборкаВХранилищеЧастями = СтрРазделить(ВерсияВХранилище, ".");
		Если СборкаВХранилищеЧастями.Количество() <> 4 Тогда
			Прервать;
		КонецЕсли;
		Версия1 = СборкаЧастями[0] + "." + СборкаЧастями[1] + "." + СборкаЧастями[2];
		Версия2 = СборкаВХранилищеЧастями[0] + "." + СборкаВХранилищеЧастями[1] + "." + СборкаВХранилищеЧастями[2];
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(Версия1, Версия2) <> 0 Тогда
			// Рассчитанная версия (первые три цифры сборки) не совпадает с той, к которой применим патч.
			Прервать;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Строка(Сборка), ВерсияВХранилище) >= 0 Тогда
			// Рассчитанная сборка не выше сборки, к которой применим патч.
			ДобавитьРассчитаннуюСборку = Ложь;
			Прервать;
		КонецЕсли;
		
		ДобавитьРассчитаннуюСборку = Истина;
	КонецЦикла;
	
	Возврат ДобавитьРассчитаннуюСборку;
	
КонецФункции

#КонецОбласти

#Область РаботаСDOMДокументом

Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Процедура ЗаписатьДокументDOMВФайл(ДокументDOM, ИмяФайла)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
КонецПроцедуры

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM)
	
	Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	Возврат ДокументDOM.ВычислитьВыражениеXPath(Выражение, ДокументDOM, Разыменователь);
	
КонецФункции

#КонецОбласти

#Область ПакетнаяРаботаСКонфигуратором

Процедура ВыгрузитьРасширениеВФайлы(Параметры)
	
	Кавычка = Параметры.Кавычка;
	
	ВерсияПлатформы = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Параметры.ВерсияПлатформы);
	РежимСовместимости = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Параметры.РежимСовместимости);
	
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, РежимСовместимости) < 0 Тогда
		ТекстОшибки = НСтр("ru = 'В карточке версии программы установлена версия платформы ""%1"", которая ниже режима совместимости
			|конфигурации ""%2"".'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВерсияПлатформы, РежимСовместимости);
	КонецЕсли;
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(Кавычка + Параметры.КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
		+ Параметры.СтрокаПодключения
		+ " /N "                  + Кавычка + Параметры.Пользователь + Кавычка
		+ " /P "                  + Кавычка + Параметры.Пароль + Кавычка
		+ " /DumpConfigToFiles "  + Кавычка + Параметры.КаталогВыгрузки + Кавычка
		+ " -Extension "          + Кавычка + Параметры.ИмяРасширения + Кавычка
		+ " /Out "                + Кавычка + Параметры.ИмяФайлаСообщений + Кавычка
		+ " /DisableStartupMessages /DisableStartupDialogs "
		,
		,
		Истина,
		КодВозврата);
	
	ОбработатьРезультатОперации(КодВозврата, Параметры.ИмяФайлаСообщений, НСтр("ru = 'выгрузить расширение в файлы'"));
	
КонецПроцедуры

Процедура ЗагрузитьРасширениеИзФайлов(Параметры)
	
	Кавычка = Параметры.Кавычка;
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(Кавычка + Параметры.КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
		+ Параметры.СтрокаПодключения
		+ " /N "                  + Кавычка + Параметры.Пользователь + Кавычка
		+ " /P "                  + Кавычка + Параметры.Пароль + Кавычка
		+ " /LoadConfigFromFiles "  + Кавычка + Параметры.КаталогВыгрузки + Кавычка
		+ " -Extension "          + Кавычка + Параметры.ИмяРасширения + Кавычка
		+ " /Out "                + Кавычка + Параметры.ИмяФайлаСообщений + Кавычка
		+ " /DisableStartupMessages /DisableStartupDialogs "
		,
		,
		Истина,
		КодВозврата);
	
	ОбработатьРезультатОперации(КодВозврата, Параметры.ИмяФайлаСообщений, НСтр("ru = 'загрузить расширение из файлов'"));
	
КонецПроцедуры

Процедура ВыгрузитьРасширениеВФайл(Параметры)
	
	Если Параметры.Свойство("ПутьКПатчу") Тогда
		ПутьКПатчу = Параметры.ПутьКПатчу;
	Иначе
		ПутьКПатчу = Параметры.КаталогСохраненияПатча + Параметры.НазваниеПатча + ".cfe";
	КонецЕсли;
	Кавычка = Параметры.Кавычка;
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(Кавычка + Параметры.КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
		+ Параметры.СтрокаПодключения
		+ " /N "                  + Кавычка + Параметры.Пользователь + Кавычка
		+ " /P "                  + Кавычка + Параметры.Пароль + Кавычка
		+ " /DumpCfg "            + Кавычка + ПутьКПатчу + Кавычка
		+ " -Extension "          + Кавычка + Параметры.ИмяРасширения + Кавычка
		+ " /Out "                + Кавычка + Параметры.ИмяФайлаСообщений + Кавычка
		+ " /DisableStartupMessages /DisableStartupDialogs "
		,
		,
		Истина,
		КодВозврата);
	
	ОбработатьРезультатОперации(КодВозврата, Параметры.ИмяФайлаСообщений, НСтр("ru = 'создать расширение'"));
	
КонецПроцедуры

Процедура ЗагрузитьРасширениеИзФайла(Параметры)
	
	Кавычка = Параметры.Кавычка;
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(Кавычка + Параметры.КаталогПрограммы + "1cv8.exe" + Кавычка + " DESIGNER"
		+ Параметры.СтрокаПодключения
		+ " /N "                  + Кавычка + Параметры.Пользователь + Кавычка
		+ " /P "                  + Кавычка + Параметры.Пароль + Кавычка
		+ " /LoadCfg "            + Кавычка + Параметры.ПутьКПатчу + Кавычка
		+ " -Extension "          + Кавычка + Параметры.ИмяРасширения + Кавычка
		+ " /Out "                + Кавычка + Параметры.ИмяФайлаСообщений + Кавычка
		+ " /DisableStartupMessages /DisableStartupDialogs "
		,
		,
		Истина,
		КодВозврата);
	
	ОбработатьРезультатОперации(КодВозврата, Параметры.ИмяФайлаСообщений, НСтр("ru = 'создать расширение'"));
	
КонецПроцедуры

Процедура ОбработатьРезультатОперации(КодВозврата, ИмяФайлаСообщений, ТекстСообщения)
	
	Если КодВозврата <> 0 Тогда
		Попытка
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ИмяФайлаСообщений);
			Сообщения = Текст.ПолучитьТекст();
			Если ПустаяСтрока(Сообщения) Тогда
				Сообщения = СтрШаблон(НСтр("ru = 'Код возврата: %1'"), КодВозврата);
			КонецЕсли;
		Исключение
			Сообщения = "";
		КонецПопытки;
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось %1 по причине:
			|%2'"), ТекстСообщения, Сообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеПатчаВСППР

Функция НачальнаяСборкаДляПатча(ДатаНачалаДействия, Версия)
	
	Если ДатаНачалаДействия = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СборкиВерсии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|ГДЕ
		|	СборкиВерсии.ДатаСборки >= &ДатаСборки
		|	И СборкиВерсии.Владелец = &Владелец
		|	И СборкиВерсии.Опубликована = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СборкиВерсии.ДатаСборки";
	Запрос.УстановитьПараметр("ДатаСборки", ДатаНачалаДействия);
	Запрос.УстановитьПараметр("Владелец", Версия);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат Результат[0].Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСвойстваОшибки(СвойстваОшибки, ПараметрыПатча)
	
	Если ТипЗнч(ПараметрыПатча.Ошибка) = Тип("СправочникСсылка.Ошибки") Тогда
		СтатусыИсправленнойОшибки = СтатусыИсправленнойОшибки();
		СвойстваОшибки  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыПатча.Ошибка,
			"Владелец, ПубликуемоеОписание, РазделПроекта, Статус, Код, Исправил");
		// Если ошибка еще не исправлена - создание патча по ней не запускается.
		Если СтатусыИсправленнойОшибки.Найти(СвойстваОшибки.Статус) = Неопределено Тогда
			СвойстваОшибки = Неопределено;
			Возврат;
		КонецЕсли;
		СвойстваОшибки.Вставить("НомерОшибкиВДругойУчетнойСистеме", "");
		СвойстваОшибки.Вставить("Код", СвойстваОшибки.Код);
	Иначе
		СвойстваОшибки = Новый Структура;
		СвойстваОшибки.Вставить("Владелец", ПараметрыПатча.Проект);
		СвойстваОшибки.Вставить("ПубликуемоеОписание", ПараметрыПатча.Описание);
		СвойстваОшибки.Вставить("РазделПроекта", ПараметрыПатча.РазделПроекта);
		СвойстваОшибки.Вставить("НомерОшибкиВДругойУчетнойСистеме", ПараметрыПатча.Ошибка);
		СвойстваОшибки.Вставить("Код", ПараметрыПатча.Ошибка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакончитьСозданиеПатча(ИнформацияОПатче)
	
	Если ИнформацияОПатче.Свойство("АвторИсправления")
		И ЗначениеЗаполнено(ИнформацияОПатче.АвторИсправления) Тогда
		
		АвторИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИнформацияОПатче.Патч, "АвторИсправления");
		Если АвторИсправления <> ИнформацияОПатче.АвторИсправления Тогда
			НачатьТранзакцию();
			Попытка
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.Патчи");
				ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ИнформацияОПатче.Патч);
				ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
				БлокировкаДанных.Заблокировать();
				
				ПатчОбъект = ИнформацияОПатче.Патч.ПолучитьОбъект();
				ПатчОбъект.АвторИсправления = ИнформацияОПатче.АвторИсправления;
				ПатчОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				// Проблема не останавливающая.
				ТекстОшибки = НСтр("ru = 'Не удалось изменить автора исправления для патча %1.
					|Вероятно объект редактируется пользователем.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИнформацияОПатче.Патч);
				ЗаписьЖурналаРегистрации("Патчи_Изменение", УровеньЖурналаРегистрации.Предупреждение, , , ТекстОшибки);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Патч", ИнформацияОПатче.Патч);
	Запрос.УстановитьПараметр("Версия", ИнформацияОПатче.Версия);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", ИнформацияОПатче.УникальныйИдентификатор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.Патч = &Патч
		|	И ВерсииПатчей.Версия = &Версия
		|	И ВерсииПатчей.УникальныйИдентификатор = &УникальныйИдентификатор";
	Результат = Запрос.Выполнить().Выгрузить();
	Патч = Результат[0];
	
	Патч.НачальнаяСборка = ИнформацияОПатче.НачальнаяСборка;
	Патч.КонечнаяСборка  = ИнформацияОПатче.ПоследняяОпубликованнаяСборка;
	Патч.ДатаИсправления = ИнформацияОПатче.ДатаИсправления;
	Патч.КонечнаяСборкаПоХранилищу = ИнформацияОПатче.ВерсияВХранилище;
	Патч.Описание        = ИнформацияОПатче.Описание;
	Патч.ИзменяемыеМетаданные = ИнформацияОПатче.ИзменяемыеМетаданные;
	
	Параметры = ПараметрыПатча(Патч.Параметры.Получить());
	
	РезультатСоздания = НСтр("ru = 'успешно'");
	Если ЗначениеЗаполнено(ИнформацияОПатче.ТекстОшибки) Тогда
		Патч.Состояние    = Перечисления.СтатусыПатчей.Ошибка;
		РезультатСоздания = НСтр("ru = 'с ошибкой'");
		ДобавитьОшибкуВЛог(Параметры, "", ИнформацияОПатче.ТекстОшибки);
	Иначе
		Патч.Состояние = Перечисления.СтатусыПатчей.СозданНеПроверен;
	КонецЕсли;
	
	Шаблон = НСтр("ru = '%1 - Патч создан %2'");
	ЗаписьЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущаяДатаСеанса(), РезультатСоздания);
	Параметры.Лог.Добавить(ЗаписьЛога);
	Патч.Параметры = Новый ХранилищеЗначения(Параметры);
	
	Проект = ИнформацияОПатче.Проект;
	УстановитьПривилегированныйРежим(Истина);
	ЗакрытыйКлюч = ЗакрытыйКлючПроекта(Проект);
	УстановитьПривилегированныйРежим(Ложь);
	ЭтоБазоваяВерсияКонфигурации = ЗакрытыйКлюч <> Неопределено;
	
	Если ЗначениеЗаполнено(ИнформацияОПатче.ПутьКПатчу) Тогда
		ВременныйКаталог = ПолучитьИмяВременногоФайла("SignPatch");
		СоздатьКаталог(ВременныйКаталог);
		
		Если ЭтоБазоваяВерсияКонфигурации Тогда
			ПараметрыПодписи = Новый Структура;
			ПараметрыПодписи.Вставить("ПутьКПатчу", ИнформацияОПатче.ПутьКПатчу);
			ПараметрыПодписи.Вставить("ИмяПатча", ПатчиСлужебный.ИмяПатча(Патч.Патч, ПатчиСлужебный.НомерПатча(Патч.УникальныйИдентификатор), Ложь));
			ПараметрыПодписи.Вставить("Версия", ИнформацияОПатче.Версия);
			ПараметрыПодписи.Вставить("КаталогВременнойБазы", ВременныйКаталог);
			ПараметрыПодписи.Вставить("ПропуститьЗаменуИдентификатора");
			ПараметрыПодписи.Вставить("РежимСовместимости", ИнформацияОПатче.РежимСовместимости);
			ПодписанныйПатч = ПодписанныйПатч(ПараметрыПодписи, Ложь, ЗакрытыйКлюч);
			ДвоичныеДанные   = Новый ДвоичныеДанные(ПодписанныйПатч);
		Иначе
			ДвоичныеДанные   = Новый ДвоичныеДанные(ИнформацияОПатче.ПутьКПатчу);
		КонецЕсли;
		
		Патч.ДанныеПатча = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
		
		Попытка
			УдалитьФайлы(ВременныйКаталог);
		Исключение
			// Файлы будут удалены автоматически платформой.
		КонецПопытки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияОПатче.РежимСовместимости) Тогда
		Патч.РежимСовместимости = ИнформацияОПатче.РежимСовместимости;
	КонецЕсли;
	
	// Подписание патчей для базовых версий.
	Патчи = Новый ТаблицаЗначений;
	Если Патч.Состояние <> Перечисления.СтатусыПатчей.Ошибка
		И Не ЭтоБазоваяВерсияКонфигурации Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Патч", ИнформацияОПатче.Патч);
		Запрос.УстановитьПараметр("Версия", ИнформацияОПатче.Версия);
		Запрос.УстановитьПараметр("ПодписанДляКонфигурации", Справочники.Проекты.ПустаяСсылка());
		Запрос.Текст =
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
			|ГДЕ
			|	ВерсииПатчей.Патч = &Патч
			|	И ВерсииПатчей.Версия = &Версия
			|	И НЕ ВерсииПатчей.ПодписанДляКонфигурации = &ПодписанДляКонфигурации";
		Патчи = Запрос.Выполнить().Выгрузить();
		
		// Добавление в таблицу Патчи базовых версий патча или изменение уже существующих.
		ДобавитьПатчиДляБазовыхВерсий(Патчи, Патч, ИнформацияОПатче);
	КонецЕсли;
	
	// Запись созданного основного патча и базовых версий.
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
	ЭлементБлокировкиДанных.УстановитьЗначение("Патч", ИнформацияОПатче.Патч);
	ЭлементБлокировкиДанных.УстановитьЗначение("Версия", ИнформацияОПатче.Версия);
	ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", ИнформацияОПатче.УникальныйИдентификатор);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		// Сохранение созданных и измененных базовых патчей.
		Для Каждого Строка Из Патчи Цикл
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
			ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Строка.Патч);
			ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Строка.Версия);
			ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Строка.УникальныйИдентификатор);
			
			НачатьТранзакцию();
			Попытка
				БлокировкаДанных.Заблокировать();
				
				Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
				Набор.Отбор.Патч.Установить(Строка.Патч);
				Набор.Отбор.Версия.Установить(Строка.Версия);
				Набор.Отбор.УникальныйИдентификатор.Установить(Строка.УникальныйИдентификатор);
				
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Строка);
				Набор.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
		
		Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		Набор.Отбор.Патч.Установить(Патч.Патч);
		Набор.Отбор.Версия.Установить(Патч.Версия);
		Набор.Отбор.УникальныйИдентификатор.Установить(Патч.УникальныйИдентификатор);
		Набор.Прочитать();
		
		Запись = Набор[0];
		ЗаполнитьЗначенияСвойств(Запись, Патч);
		
		Набор.Записать();
		
		Если ИнформацияОПатче.УникальныйИдентификатор <> Неопределено Тогда
			Набор = РегистрыСведений.ПрименимостьПатчей.СоздатьНаборЗаписей();
			Набор.Отбор.Патч.Установить(ИнформацияОПатче.УникальныйИдентификатор);
			Набор.Прочитать();
			Набор.Очистить();
			Для Каждого Сборка Из ИнформацияОПатче.СборкиККоторымПрименимПатч Цикл
				Запись = Набор.Добавить();
				Запись.Сборка = Сборка;
				Запись.Патч = ИнформацияОПатче.УникальныйИдентификатор;
				Запись.РоднаяКонфигурация = Истина;
			КонецЦикла;
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьПатчиДляБазовыхВерсий(Патчи, ОсновнойПатч, ИнформацияОПатче) Экспорт
	
	СвойстваВерсииПатча = ЗначенияСвойствВерсииПатча(ОсновнойПатч.УникальныйИдентификатор, "РазделПроекта");
	
	Параметры = Новый Структура;
	Параметры.Вставить("НачальнаяСборка");
	Параметры.Вставить("КонечнаяСборка");
	Параметры.Вставить("Патч");
	Параметры.Вставить("Версия");
	Параметры.Вставить("ЭтоБиблиотека", ИнформацияОПатче.ЭтоБиблиотека);
	Параметры.Вставить("ИзменяемыеМетаданные");
	Параметры.Вставить("РазделПроекта", СвойстваВерсииПатча.РазделПроекта);
	Параметры.Вставить("РежимСовместимости");
	Параметры.Вставить("КонечнаяСборкаПоХранилищу");
	Параметры.Вставить("ДатаИсправления");
	Параметры.Вставить("УникальныйИдентификатор");
	ЗаполнитьЗначенияСвойств(Параметры, ОсновнойПатч);
	
	ИнформацияОПрименимости = ПрименимостьПатча(Параметры, Ложь);
	ОбщаяПрименимость = Новый Соответствие;
	ПрименимостьПатча = ИнформацияОПрименимости.ПрименимостьПатча;
	СвязанныеКонфигурации = ИнформацияОПрименимости.СвязанныеКонфигурации;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ОбщаяПрименимость, ПрименимостьПатча);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ОбщаяПрименимость, СвязанныеКонфигурации);
	
	КаталогВременнойБазы = ПолучитьИмяВременногоФайла("SignPatches");
	ИнформацияОПатче.Вставить("КаталогВременнойБазы", КаталогВременнойБазы);
	СоздатьКаталог(КаталогВременнойБазы);
	
	ПараметрыПатча = ПараметрыПатча(ОсновнойПатч.Параметры.Получить());
	
	БазаСоздана = Ложь;
	ПатчиБазовыхВерсий = ПараметрыПатча.ПатчиБазовыхВерсий;
	
	БазовыеКонфигурации = Новый Массив;
	Для Каждого Конфигурация Из ОбщаяПрименимость Цикл
		Ключ = Конфигурация.Ключ;
		КлючЧастями = СтрРазделить(Ключ, ",");
		ИмяКонфигурации = КлючЧастями[0];
		Если СтрНайти(ИмяКонфигурации, "Базовая") = 0 Тогда
			Продолжить;
		КонецЕсли;
		БазовыеКонфигурации.Добавить(КлючЧастями[1]);
		
		УстановитьПривилегированныйРежим(Истина);
		ИсходноеИмяПрограммы = ИсходноеИмяПрограммы(Конфигурация.Значение[0]);
		
		Строка = ЗакрытыйКлючПрограммы(КлючЧастями[1], ИсходноеИмяПрограммы);
		УстановитьПривилегированныйРежим(Ложь);
		Если Строка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Проект       = Строка.Ссылка;
		ЗакрытыйКлюч = Строка.КлючЭлектроннойПодписи;
		
		ВерсияПатча = Неопределено;
		Для Каждого ИмеющийсяПатч Из Патчи Цикл
			Если ИмеющийсяПатч.Состояние = Перечисления.СтатусыПатчей.Отозван Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ИмеющийсяПатч.ПодписанДляКонфигурации) Тогда
				Продолжить;
			КонецЕсли;
			Если ИмеющийсяПатч.ПодписанДляКонфигурации <> Проект Тогда
				Продолжить;
			КонецЕсли;
			Если ПатчиБазовыхВерсий.Найти(ИмеющийсяПатч.УникальныйИдентификатор) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВерсияПатча = ИмеющийсяПатч;
		КонецЦикла;
		
		ПараметрыПодписи = Новый Структура;
		ПараметрыПодписи.Вставить("ПутьКПатчу", ИнформацияОПатче.ПутьКПатчу);
		ПараметрыПодписи.Вставить("ИмяПатча", ПатчиСлужебный.ИмяПатча(ОсновнойПатч.Патч, ПатчиСлужебный.НомерПатча(ОсновнойПатч.УникальныйИдентификатор), Ложь));
		ПараметрыПодписи.Вставить("Версия", ИнформацияОПатче.Версия);
		ПараметрыПодписи.Вставить("КаталогВременнойБазы", ИнформацияОПатче.КаталогВременнойБазы);
		ПараметрыПодписи.Вставить("РежимСовместимости", ОсновнойПатч.РежимСовместимости);
		Если ВерсияПатча = Неопределено Тогда
			ПараметрыПодписи.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
		Иначе
			ПараметрыПодписи.Вставить("УникальныйИдентификатор", ВерсияПатча.УникальныйИдентификатор);
		КонецЕсли;
		
		ПодписанныйПатч = ПодписанныйПатч(ПараметрыПодписи, БазаСоздана, ЗакрытыйКлюч);
		ДанныеПатча = Новый ДвоичныеДанные(ПодписанныйПатч);
		
		Если ВерсияПатча = Неопределено Тогда
			ВерсияПатча = Патчи.Добавить();
			ВерсияПатча.УникальныйИдентификатор = ПараметрыПодписи.УникальныйИдентификатор;
			ВерсияПатча.ПодписанДляКонфигурации = Проект;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ВерсияПатча, ОсновнойПатч, , "УникальныйИдентификатор, ДанныеПатча, ПодписанДляКонфигурации");
		ВерсияПатча.ВладелецПатча = ОсновнойПатч.УникальныйИдентификатор;
		ВерсияПатча.ДанныеПатча = Новый ХранилищеЗначения(ДанныеПатча, Новый СжатиеДанных(9));
		Если ПатчиБазовыхВерсий.Найти(ВерсияПатча.УникальныйИдентификатор) = Неопределено Тогда
			ПатчиБазовыхВерсий.Добавить(ВерсияПатча.УникальныйИдентификатор);
		КонецЕсли;
		
		Попытка
			УдалитьФайлы(ПодписанныйПатч);
		Исключение
			// Удаление будет выполнено средствами платформы.
		КонецПопытки;
	КонецЦикла;
	
	УдалитьЛишниеПатчиБазовых(БазовыеКонфигурации, Патчи, ПатчиБазовыхВерсий);
	
	ПараметрыПатча = ПараметрыПатча(ОсновнойПатч.Параметры.Получить());
	ПараметрыПатча.ПатчиБазовыхВерсий = ПатчиБазовыхВерсий;
	ОсновнойПатч.Параметры = Новый ХранилищеЗначения(ПараметрыПатча);
	
	Попытка
		УдалитьФайлы(КаталогВременнойБазы);
	Исключение
		// Удаление будет выполнено средствами платформы.
	КонецПопытки;
	
КонецПроцедуры

Функция ИсходноеИмяПрограммы(Сборка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Сборка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|		ПО СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
		|ГДЕ
		|	СборкиВерсии.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Строка = Результат[0];
	
	Возврат Строка.ИмяКонфигурации;
	
КонецФункции

Процедура УдалитьЛишниеПатчиБазовых(БазовыеКонфигурации, Патчи, ПатчиБазовыхВерсий)
	
	// Заполняем заново, актуальным списком базовых патчей.
	ПатчиБазовыхВерсий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.ИдентификаторПрограммы В(&ИдентификаторПрограммы)";
	Запрос.УстановитьПараметр("ИдентификаторПрограммы", БазовыеКонфигурации);
	БазовыеПроекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Удаляемые = Новый Массив;
	Для Каждого Патч Из Патчи Цикл
		Если Не ЗначениеЗаполнено(Патч.ПодписанДляКонфигурации) Тогда
			Продолжить;
		КонецЕсли;
		Если Патч.Состояние = Перечисления.СтатусыПатчей.Отозван
			Или Патч.Состояние = Перечисления.СтатусыПатчей.Опубликован Тогда
			Продолжить;
		КонецЕсли;
		
		Если БазовыеПроекты.Найти(Патч.ПодписанДляКонфигурации) = Неопределено Тогда
			Удаляемые.Добавить(Патч);
			УдалитьПатч(Патч.УникальныйИдентификатор);
		Иначе
			ПатчиБазовыхВерсий.Добавить(Патч.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Удаляемый Из Удаляемые Цикл
		Патчи.Удалить(Удаляемый);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗакрытыйКлючПрограммы(ИдентификаторПрограммы, ИсходноеИмяПрограммы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПрограммы", ИдентификаторПрограммы);
	Запрос.УстановитьПараметр("ИмяКонфигурации", ИсходноеИмяПрограммы);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка,
		|	ЗакрытыеКлючиБазовыхВерсий.КлючЭлектроннойПодписи КАК КлючЭлектроннойПодписи
		|ИЗ
		|	РегистрСведений.ЗакрытыеКлючиБазовыхВерсий КАК ЗакрытыеКлючиБазовыхВерсий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ЗакрытыеКлючиБазовыхВерсий.Проект = Проекты.Ссылка
		|ГДЕ
		|	Проекты.ИдентификаторПрограммы = &ИдентификаторПрограммы
		|	И Проекты.ИмяКонфигурации ПОДОБНО &ИмяКонфигурации";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат[0];
	
КонецФункции

Функция ЭтоКонфигурацияБазовая(Проект) Экспорт
	
	ИмяКонфигурации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ИмяКонфигурации");
	УстановитьПривилегированныйРежим(Истина);
	Ключ = ЗакрытыйКлючПроекта(Проект);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если СтрНайти(ИмяКонфигурации, "Базовая") > 0
		Или Ключ <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЗакрытыйКлючПроекта(Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗакрытыеКлючиБазовыхВерсий.КлючЭлектроннойПодписи КАК КлючЭлектроннойПодписи
		|ИЗ
		|	РегистрСведений.ЗакрытыеКлючиБазовыхВерсий КАК ЗакрытыеКлючиБазовыхВерсий
		|ГДЕ
		|	ЗакрытыеКлючиБазовыхВерсий.Проект = &Проект";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() <> 1 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат[0].КлючЭлектроннойПодписи;
	
КонецФункции

Функция ПодписанныйПатч(ИнформацияОПатче, БазаСоздана, ЗакрытыйКлюч) Экспорт
	
	ПутьКПатчу = ИнформацияОПатче.ПутьКПатчу;
	Версия = ИнформацияОПатче.Версия;
	
	// Определение версии платформы.
	КаталогПрограммы = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	СписокДоступныхВерсийПлатформы = ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы(КаталогПрограммы);
	ВерсияПлатформы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Версия, "ВерсияПлатформы");
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, "8.3.15") < 0 Тогда
		ВерсияПлатформы = "8.3.15";
	КонецЕсли;
	СборкаПлатформы = ПоследняяСборкаПлатформыПоВерсии(СписокДоступныхВерсийПлатформы, ВерсияПлатформы);
	ДоступноПодписаниеПатчей = Истина;
	Если (ВерсияПлатформы = "8.3.15"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СборкаПлатформы, "8.3.15.1958") < 0)
		Или (ВерсияПлатформы = "8.3.16"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СборкаПлатформы, "8.3.16.1476") < 0)
		Или (ВерсияПлатформы = "8.3.17"
			И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СборкаПлатформы, "8.3.17.1480") < 0) Тогда
		ДоступноПодписаниеПатчей = Ложь;
	КонецЕсли;
	
	Если Не ДоступноПодписаниеПатчей Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Не ИнформацияОПатче.Свойство("ПропуститьЗаменуИдентификатора") Тогда
		ЗаменитьИдентификаторПатчаБазовойВерсии(ИнформацияОПатче);
	КонецЕсли;
	
	ПутьКПлатформе = КаталогПрограммы + ПолучитьРазделительПути() + "1cv8.exe";
	ПутьКПлатформе = СтрЗаменить(ПутьКПлатформе, "%ВерсияПлатформы%", СборкаПлатформы);
	
	СтрокаПодключения = СтрШаблон("File=""%1"";", ИнформацияОПатче.КаталогВременнойБазы);
	Если Не БазаСоздана Тогда
		СоздатьБазуДляПодписанияПатчей(СтрокаПодключения, ПутьКПлатформе);
		БазаСоздана = Истина;
	КонецЕсли;
	
	// Подписание патча.
	ПутьКЗакрытомуКлючу = ПолучитьИмяВременногоФайла("");
	ЗакрытыйКлюч.Получить().Записать(ПутьКЗакрытомуКлючу);
	ПодписанныйПатч = ПолучитьИмяВременногоФайла("");
	КопироватьФайл(ПутьКПатчу, ПодписанныйПатч);
	
	ИмяФайлаСообщений = ПолучитьИмяВременногоФайла("txt");
	
	ПараметрыЗапуска = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
	ПараметрыЗапуска.ПолучитьПотокВывода = Истина;
	ПараметрыЗапуска.ПолучитьПотокОшибок = Истина;
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(ПутьКПлатформе);
	КомандаЗапуска.Добавить("DESIGNER");
	КомандаЗапуска.Добавить("/IBConnectionString");
	КомандаЗапуска.Добавить(СтрокаПодключения);
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияПлатформы, "8.3.20") < 0 Тогда
		КомандаЗапуска.Добавить("/SignCfg");
		КомандаЗапуска.Добавить(ПодписанныйПатч);
		КомандаЗапуска.Добавить("-Type");
		КомандаЗапуска.Добавить("File");
		КомандаЗапуска.Добавить("-digisign");
		КомандаЗапуска.Добавить(ПутьКЗакрытомуКлючу);
		КомандаЗапуска.Добавить("-File");
		КомандаЗапуска.Добавить(ПутьКПатчу);
	Иначе
		КомандаЗапуска.Добавить("/SignCfg");
		КомандаЗапуска.Добавить("-SignedFile");
		КомандаЗапуска.Добавить(ПодписанныйПатч);
		КомандаЗапуска.Добавить("-ConfigurationType");
		КомандаЗапуска.Добавить("File");
		КомандаЗапуска.Добавить("-File");
		КомандаЗапуска.Добавить(ПутьКПатчу);
		КомандаЗапуска.Добавить("-digisign");
		КомандаЗапуска.Добавить(ПутьКЗакрытомуКлючу);
	КонецЕсли;
	КомандаЗапуска.Добавить("/Out");
	КомандаЗапуска.Добавить(ИмяФайлаСообщений);
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапуска);
	
	Попытка
		УдалитьФайлы(ПутьКЗакрытомуКлючу);
	Исключение
		// Будет удалено автоматически платформой.
	КонецПопытки;
	
	Если Результат.КодВозврата <> 0 Тогда
		ТекстОшибки = НСтр("ru = 'подписать патч для базовой версии конфигурации.
			|Строка запуска:
			|%1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрСоединить(КомандаЗапуска, " "));
		
		ОбработатьРезультатОперации(Результат.КодВозврата, ИмяФайлаСообщений, ТекстОшибки);
	КонецЕсли;
	
	Возврат ПодписанныйПатч;
	
КонецФункции

Процедура ЗаменитьИдентификаторПатчаБазовойВерсии(ИнформацияОПатче)
	
	ПараметрыВыгрузки = ВыгрузкаПатчаИзДвоичныхДанных(ИнформацияОПатче);
	
	Шаблон = "%1%2%3%2%4%2%5%2%6";
	ПутьКМакету = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
		ПараметрыВыгрузки.КаталогВыгрузки,
		ПолучитьРазделительПути(),
		"CommonTemplates",
		ИнформацияОПатче.ИмяПатча,
		"ext",
		"Template.txt");
	
	// Запись применимости в рамках родной конфигурации в макет патча.
	ДокументDOM = ДокументDOM(ПутьКМакету);
	
	УзелUUID = ДокументDOM.ПолучитьЭлементыПоИмени("UUID")[0];
	УзелUUID.ТекстовоеСодержимое = Строка(ИнформацияОПатче.УникальныйИдентификатор);
	ЗаписатьДокументDOMВФайл(ДокументDOM, ПутьКМакету);
	
	ЗагрузитьРасширениеИзФайлов(ПараметрыВыгрузки);
	ВыгрузитьРасширениеВФайл(ПараметрыВыгрузки);
	
	Попытка
		УдалитьФайлы(ПараметрыВыгрузки.ВременныйКаталог);
	Исключение
		// Будет удалено позднее средствами платформы.
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьБазуДляПодписанияПатчей(СтрокаПодключения, ПутьКПлатформе)
	
	ПараметрыЗапуска = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
	ПараметрыЗапуска.ПолучитьПотокВывода = Истина;
	ПараметрыЗапуска.ПолучитьПотокОшибок = Истина;
	КомандаЗапуска = Новый Массив;
	КомандаЗапуска.Добавить(ПутьКПлатформе);
	КомандаЗапуска.Добавить("CREATEINFOBASE");
	КомандаЗапуска.Добавить(СтрокаПодключения);
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапуска);
	
КонецПроцедуры

Процедура ОбновитьСтатусыПатчейБазовыхВерсий(ОсновнойПатч, УдалитьБазовые = Ложь)
	
	Если ОсновнойПатч.Состояние = Перечисления.СтатусыПатчей.Публикуется
		Или ОсновнойПатч.Состояние = Перечисления.СтатусыПатчей.Опубликован
		Или ОсновнойПатч.Состояние = Перечисления.СтатусыПатчей.ОшибкаПубликации
		Или ОсновнойПатч.Состояние = Перечисления.СтатусыПатчей.Отозван Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыПатча(ОсновнойПатч.Параметры.Получить());
	
	Для Каждого ПатчБазовойВерсии Из Параметры.ПатчиБазовыхВерсий Цикл
		НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(ОсновнойПатч.Версия);
		НаборЗаписей.Отбор.Патч.Установить(ОсновнойПатч.Патч);
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ПатчБазовойВерсии);
		Если ОсновнойПатч.Состояние = Перечисления.СтатусыПатчей.ОжиданиеИсправления
			Или ОсновнойПатч.Состояние = Перечисления.СтатусыПатчей.ПатчНеТребуется
			Или УдалитьБазовые Тогда
			НаборЗаписей.Записать();
			Продолжить;
		КонецЕсли;
		НаборЗаписей.Прочитать();
		Для Каждого Набор Из НаборЗаписей Цикл
			Набор.Состояние = ОсновнойПатч.Состояние;
			Набор.Параметры = Новый ХранилищеЗначения(Параметры, Новый СжатиеДанных(9));
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Для вызова при интерактивном изменении патча.
//
Процедура ПодписатьПатчиДляБазовыхВерсий(ОсновнойПатч, Версия, Патч, ДанныеПатча = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Версия);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Библиотека КАК Библиотека
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПроекта.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выгрузить();
	ЭтоБиблиотека = Результат[0].Библиотека;
	
	ИдентификаторыБазовых = Новый Массив;
	ПараметрыПатча        = ПараметрыПатча(ОсновнойПатч.Параметры.Получить());
	ИдентификаторыБазовых = ПараметрыПатча.ПатчиБазовыхВерсий;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Патч", Патч);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("ИдентификаторыБазовых", ИдентификаторыБазовых);
	Запрос.УстановитьПараметр("ИдентификаторВладельца", ОсновнойПатч.УникальныйИдентификатор);
	Запрос.УстановитьПараметр("ПодписанДляКонфигурации", Справочники.Проекты.ПустаяСсылка());
	Запрос.Текст =
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|ГДЕ
		|	ВерсииПатчей.Патч = &Патч
		|	И ВерсииПатчей.Версия = &Версия
		|	И НЕ ВерсииПатчей.ПодписанДляКонфигурации = &ПодписанДляКонфигурации
		|	И (ВерсииПатчей.УникальныйИдентификатор В (&ИдентификаторыБазовых)
		|		Или ВерсииПатчей.ВладелецПатча = &ИдентификаторВладельца)";
	Патчи = Запрос.Выполнить().Выгрузить();
	
	ПутьКПатчу = ПолучитьИмяВременногоФайла("cfe");
	Если ДанныеПатча = Неопределено Тогда
		ДвоичныеДанные = ОсновнойПатч.ДанныеПатча.Получить();
	Иначе
		ДвоичныеДанные = ДанныеПатча;
	КонецЕсли;
	ДвоичныеДанные.Записать(ПутьКПатчу);
	
	ИнформацияОПатче = Новый Структура;
	ИнформацияОПатче.Вставить("ЭтоБиблиотека", ЭтоБиблиотека);
	ИнформацияОПатче.Вставить("Версия", Версия);
	ИнформацияОПатче.Вставить("ПутьКПатчу", ПутьКПатчу);
	
	УстановитьПривилегированныйРежим(Истина);
	ДобавитьПатчиДляБазовыхВерсий(Патчи, ОсновнойПатч, ИнформацияОПатче);
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Строка Из Патчи Цикл
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Строка.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Строка.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Строка.УникальныйИдентификатор);
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных.Заблокировать();
			
			Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
			Набор.Отбор.Патч.Установить(Строка.Патч);
			Набор.Отбор.Версия.Установить(Строка.Версия);
			Набор.Отбор.УникальныйИдентификатор.Установить(Строка.УникальныйИдентификатор);
			
			Запись = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			
			Набор.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Попытка
		УдалитьФайлы(ПутьКПатчу);
	Исключение
		// Будет удалено автоматически платформой.
	КонецПопытки;
	
КонецПроцедуры

Функция ДатаПервойОпубликованнойСборки(Версия)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СборкиВерсии.ДатаСборки КАК ДатаСборки
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|ГДЕ
		|	СборкиВерсии.Владелец = &Владелец
		|	И СборкиВерсии.Опубликована = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСборки";
	
	Запрос.УстановитьПараметр("Владелец", Версия);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат Результат[0].ДатаСборки;
	КонецЕсли;
	
КонецФункции

Функция ПоследняяОпубликованнаяСборка(Версия, Начало, Конец)
	
	Если Начало = Неопределено И Конец = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СборкиВерсии.Ссылка КАК Ссылка,
		|	СборкиВерсии.ДатаСборки КАК ДатаСборки
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|ГДЕ
		|	СборкиВерсии.Владелец = &Владелец
		|	И СборкиВерсии.Опубликована = ИСТИНА
		|	И СборкиВерсии.ДатаСборки >= &Начало
		|	И СборкиВерсии.ДатаСборки <= &Конец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаСборки УБЫВ";
	
	Запрос.УстановитьПараметр("Владелец", Версия);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Конец", Конец);
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат[0].Ссылка;
	
КонецФункции

Функция НоваяИнформацияОПатче(Патч, Версия, Описание)
	ИнформацияОПатче = Новый Структура;
	ИнформацияОПатче.Вставить("Патч", Патч);
	ИнформацияОПатче.Вставить("Версия", Версия);
	ИнформацияОПатче.Вставить("Проект", "");
	ИнформацияОПатче.Вставить("Описание", Описание);
	ИнформацияОПатче.Вставить("ПутьКПатчу", "");
	ИнформацияОПатче.Вставить("ПоследняяОпубликованнаяСборка");
	ИнформацияОПатче.Вставить("ТекстОшибки");
	ИнформацияОПатче.Вставить("ИзменяемыеМетаданные");
	ИнформацияОПатче.Вставить("НачальнаяСборка");
	ИнформацияОПатче.Вставить("ДатаИсправления");
	ИнформацияОПатче.Вставить("НачалоДействияПатча");
	ИнформацияОПатче.Вставить("СборкиККоторымПрименимПатч", Новый Массив);
	ИнформацияОПатче.Вставить("ЭтоБиблиотека");
	ИнформацияОПатче.Вставить("РежимСовместимости");
	ИнформацияОПатче.Вставить("ВерсияВХранилище");
	ИнформацияОПатче.Вставить("УникальныйИдентификатор");
	ИнформацияОПатче.Вставить("АвторИсправления");
	
	Возврат ИнформацияОПатче;
КонецФункции

Функция ОписаниеПатчаПоОшибке(Патч, Ошибка)
	
	ОписаниеПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка, "ПубликуемоеОписание");
	Возврат ОписаниеПатча;
	
КонецФункции

Функция ВерсииИсправленияОшибки(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
		Или ТипЗнч(Объект) = Тип("СправочникОбъект.Ошибки") Тогда
		СвойстваОшибки = Объект;
	Иначе
		СвойстваОшибки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, "ИсправлениеВВетках,Исправляется,ВеткаОбнаружения,ВеткаИсправления,Владелец");
		СвойстваОшибки.ИсправлениеВВетках = СвойстваОшибки.ИсправлениеВВетках.Выгрузить();
	КонецЕсли;
	
	Ветки = Новый Массив;
	Если СвойстваОшибки.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
		Ветки.Добавить(СвойстваОшибки.ВеткаИсправления);
	ИначеЕсли СвойстваОшибки.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		ОсновнаяВеткаПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваОшибки.Владелец, "Ветка");
		Ветки.Добавить(ОсновнаяВеткаПроекта);
	Иначе
		Для Каждого Строка Из СвойстваОшибки.ИсправлениеВВетках Цикл
			Если Строка.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
				Или Строка.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ОшибкиНеБылоВЭтойВетке Тогда
				Продолжить;
			КонецЕсли;
			
			Ветки.Добавить(Строка.Ветка);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ветки", Ветки);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииПроекта.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|ГДЕ
		|	ВерсииПроекта.Ветка В(&Ветки)";
	Версии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Версии;
КонецФункции

Функция НомерПатча(УникальныйИдентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Патчи.Параметры КАК Параметры
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК Патчи
		|ГДЕ
		|	Патчи.УникальныйИдентификатор = &УникальныйИдентификатор";
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Параметры = Результат[0].Параметры;
	Параметры = ПараметрыПатча(Параметры.Получить());
	
	Возврат Параметры.НомерПатча;
	
КонецФункции

Функция ПредставлениеПричиныОтзыва(Идентификатор) Экспорт
	
	ПричиныОтзыва = Новый Соответствие;
	ПричиныОтзыва.Вставить("НеИсправляетОшибку", НСтр("ru = 'Не исправляет ошибку'"));
	ПричиныОтзыва.Вставить("ПривноситОшибку", НСтр("ru = 'Привносит новую ошибку'"));
	ПричиныОтзыва.Вставить("НеПрименяется", НСтр("ru = 'Не применяется у пользователя'"));
	ПричиныОтзыва.Вставить("НужноДополнитьИсправление", НСтр("ru = 'Нужно дополнить исправление'"));
	ПричиныОтзыва.Вставить("НеИсправленаВНовойВерсии", НСтр("ru = 'Ошибка не исправлена в новой сборке'"));
	ПричиныОтзыва.Вставить("Прочее", НСтр("ru = 'Прочее'"));
	
	Причина = ПричиныОтзыва[Идентификатор];
	Если Причина = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Причина;
	
КонецФункции

#КонецОбласти

#КонецОбласти
