
#Область ПрограммныйИнтерфейс

// Фукнция возвращает соответствие различных вариантов написания имен классов 
// метаданных с используемыми в СППР в единственном числе
Функция СоответствиеИменКлассовОбъектовМетаданных() Экспорт 
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Константы", "Константа");
	Результат.Вставить("Справочники", "Справочник");
	Результат.Вставить("Документы", "Документ");
	Результат.Вставить("Последовательности", "Последовательность");
	Результат.Вставить("Нумераторы", "Нумератор");
	Результат.Вставить("ЖурналыДокументов", "ЖурналДокументов");
	Результат.Вставить("Перечисления", "Перечисление");
	Результат.Вставить("Отчеты", "Отчет");
	Результат.Вставить("Обработки", "Обработка");
	Результат.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристик");
	Результат.Вставить("ПланыСчетов", "ПланСчетов");
	Результат.Вставить("ПланыВидовРасчета", "ПланВидовРасчета");
	Результат.Вставить("РегистрыСведений", "РегистрСведений");
	Результат.Вставить("РегистрыНакопления", "РегистрНакопления");
	Результат.Вставить("РегистрыБухгалтерии", "РегистрБухгалтерии");
	Результат.Вставить("РегистрыРасчета", "РегистрРасчета");
	Результат.Вставить("БизнесПроцессы", "БизнесПроцесс");
	Результат.Вставить("Задачи", "Задача");
	Результат.Вставить("ОбщиеМодули", "ОбщийМодуль");
	Результат.Вставить("ПараметрыСеанса", "ПараметрСеанса");
	Результат.Вставить("Роли", "Роль");
	Результат.Вставить("ПланыОбмена", "ПланОбмена");
	Результат.Вставить("КритерииОтбора", "КритерийОтбора");
	Результат.Вставить("ПодпискиНаСобытие", "ПодпискаНаСобытие");
	Результат.Вставить("РегламентныеЗадания", "РегламентноеЗадание");
	Результат.Вставить("ФункциональныеОпции", "ФункциональнаяОпция");
	Результат.Вставить("ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции");
	Результат.Вставить("ХранилищаНастроек", "ХранилищеНастроек");
	Результат.Вставить("ОбщиеФормы", "ОбщаяФорма");
	Результат.Вставить("ОбщиеКоманды", "ОбщаяКоманда");
	Результат.Вставить("ГруппыКоманд", "ГруппаКоманд");
	Результат.Вставить("ПакетыXDTO", "ПакетXDTO");
	Результат.Вставить("WebСервисы", "WebСервис");
	Результат.Вставить("WSСсылки", "WSСсылка");
	Результат.Вставить("ОбщиеРеквизиты", "ОбщийРеквизит");
	Результат.Вставить("ОбщиеКартинки", "ОбщаяКартинка");
	Результат.Вставить("ОбщиеМакеты", "ОбщийМакет");
	Результат.Вставить("ОпределяемыеТипы", "ОпределяемыйТип");
	Результат.Вставить("ВнешниеИсточникиДанных", "ВнешнийИсточникДанных");
	Результат.Вставить("HTTPСервисы", "HTTPСервис");
	Результат.Вставить("Языки", "Язык");
	Результат.Вставить("ЭлементыСтиля", "ЭлементСтиля");
	Результат.Вставить("Стили", "Стиль");
	
	// Английские имена в ед. числе
	Результат.Вставить("Constant", "Константа");
	Результат.Вставить("Catalog", "Справочник");
	Результат.Вставить("Document", "Документ");
	Результат.Вставить("Sequence", "Последовательность");
	Результат.Вставить("DocumentNumerator", "Нумератор");
	Результат.Вставить("DocumentJournal", "ЖурналДокументов");
	Результат.Вставить("Enum", "Перечисление");
	Результат.Вставить("Report", "Отчет");
	Результат.Вставить("DataProcessor", "Обработка");
	Результат.Вставить("ChartOfCharacteristicTypes", "ПланВидовХарактеристик");
	Результат.Вставить("ChartOfAccounts", "ПланСчетов");
	Результат.Вставить("ChartOfCalculationTypes", "ПланВидовРасчета");
	Результат.Вставить("InformationRegister", "РегистрСведений");
	Результат.Вставить("AccumulationRegister", "РегистрНакопления");
	Результат.Вставить("AccountingRegister", "РегистрБухгалтерии");
	Результат.Вставить("CalculationRegister", "РегистрРасчета");
	Результат.Вставить("BusinessProcess", "БизнесПроцесс");
	Результат.Вставить("Task", "Задача");
	Результат.Вставить("CommonModule", "ОбщийМодуль");
	Результат.Вставить("SessionParameter", "ПараметрСеанса");
	Результат.Вставить("Role", "Роль");
	Результат.Вставить("ExchangePlan", "ПланОбмена");
	Результат.Вставить("FilterCriterion", "КритерийОтбора");
	Результат.Вставить("EventSubscription", "ПодпискаНаСобытие");
	Результат.Вставить("ScheduledJob", "РегламентноеЗадание");
	Результат.Вставить("FunctionalOption", "ФункциональнаяОпция");
	Результат.Вставить("FunctionalOptionsParameter", "ПараметрФункциональнойОпции");
	Результат.Вставить("SettingsStorage", "ХранилищеНастроек");
	Результат.Вставить("CommonForm", "ОбщаяФорма");
	Результат.Вставить("CommonCommand", "ОбщаяКоманда");
	Результат.Вставить("CommandGroup", "ГруппаКоманд");
	Результат.Вставить("XDTOPackage", "ПакетXDTO");
	Результат.Вставить("WebService", "WebСервис");
	Результат.Вставить("WSReference", "WSСсылка");
	Результат.Вставить("CommonAttribute", "ОбщийРеквизит");
	Результат.Вставить("CommonPicture", "ОбщаяКартинка");
	Результат.Вставить("CommonTemplate", "ОбщийМакет");
	Результат.Вставить("DefinedType", "ОпределяемыйТип");
	Результат.Вставить("ExternalDataSource", "ВнешнийИсточникДанных");
	Результат.Вставить("HTTPService", "HTTPСервис");
	Результат.Вставить("Language", "Язык");
	Результат.Вставить("StyleItem", "ЭлементСтиля");
	Результат.Вставить("Style", "Стиль");
	
	Возврат Результат;

КонецФункции

// Фукнция возвращает соответствие имен классов метаданных используемых в СППР в единственном
// числе с именами имен классов метаданных дерева конфигурации.
Функция СоответствиеИменКлассовОбъектовМетаданныхВЕдЧисле() Экспорт
	
	Результат = Новый Соответствие;
	
	Результат.Вставить("Константа", "Константы");
	Результат.Вставить("Справочник", "Справочники");
	Результат.Вставить("Документ", "Документы");
	Результат.Вставить("Последовательность", "Последовательности");
	Результат.Вставить("Нумератор", "Нумераторы");
	Результат.Вставить("ЖурналДокументов", "ЖурналыДокументов");
	Результат.Вставить("Перечисление", "Перечисления");
	Результат.Вставить("Отчет", "Отчеты");
	Результат.Вставить("Обработка", "Обработки");
	Результат.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	Результат.Вставить("ПланСчетов", "ПланыСчетов");
	Результат.Вставить("ПланВидовРасчета", "ПланыВидовРасчета");
	Результат.Вставить("РегистрСведений", "РегистрыСведений");
	Результат.Вставить("РегистрНакопления", "РегистрыНакопления");
	Результат.Вставить("РегистрБухгалтерии", "РегистрыБухгалтерии");
	Результат.Вставить("РегистрРасчета", "РегистрыРасчета");
	Результат.Вставить("БизнесПроцесс", "БизнесПроцессы");
	Результат.Вставить("Задача", "Задачи");
	Результат.Вставить("ОбщийМодуль", "ОбщиеМодули");
	Результат.Вставить("ПараметрСеанса", "ПараметрыСеанса");
	Результат.Вставить("Роль", "Роли");
	Результат.Вставить("ПланОбмена", "ПланыОбмена");
	Результат.Вставить("КритерийОтбора", "КритерииОтбора");
	Результат.Вставить("ПодпискаНаСобытие", "ПодпискиНаСобытие");
	Результат.Вставить("РегламентноеЗадание", "РегламентныеЗадания");
	Результат.Вставить("ФункциональнаяОпция", "ФункциональныеОпции");
	Результат.Вставить("ПараметрФункциональнойОпции", "ПараметрыФункциональныхОпций");
	Результат.Вставить("ХранилищеНастроек", "ХранилищаНастроек");
	Результат.Вставить("ОбщаяФорма", "ОбщиеФормы");
	Результат.Вставить("ОбщаяКоманда", "ОбщиеКоманды");
	Результат.Вставить("ГруппаКоманд", "ГруппыКоманд");
	Результат.Вставить("ПакетXDTO", "ПакетыXDTO");
	Результат.Вставить("WebСервис", "WebСервисы");
	Результат.Вставить("WSСсылка", "WSСсылки");
	Результат.Вставить("ОбщийРеквизит", "ОбщиеРеквизиты");
	Результат.Вставить("ОбщаяКартинка", "ОбщиеКартинки");
	Результат.Вставить("ОбщийМакет", "ОбщиеМакеты");
	Результат.Вставить("ОпределяемыйТип", "ОпределяемыеТипы");
	Результат.Вставить("ВнешнийИсточникДанных", "ВнешниеИсточникиДанных");
	Результат.Вставить("HTTPСервис", "HTTPСервисы");
	Результат.Вставить("Язык", "Языки");
	Результат.Вставить("ЭлементСтиля", "ЭлементыСтиля");
	Результат.Вставить("Стиль", "Стили");
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураЗагружаемыхСвойствОбъектовМетаданных() Экспорт
	
	Структура = Новый Структура();
	
	// Константы
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("Пояснение");
	
	Структура.Вставить("Константы", МассивПолей);
	
	// Справочники
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВидИерархии");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("Справочники", МассивПолей);
	
	// Документы
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ПривилегированныйРежимПриПроведении");
	МассивПолей.Добавить("ПривилегированныйРежимПриОтменеПроведения");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("Документы", МассивПолей);
	
	// Журналы документов
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("ЖурналыДокументов", МассивПолей);
	
	// Перечисления
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	
	Структура.Вставить("Перечисления", МассивПолей);
	
	// Отчеты
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("Отчеты", МассивПолей);
	
	// Обработки
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("Обработки", МассивПолей);
	
	// Планы видов характеристик
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВидИерархии");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("ПланыВидовХарактеристик", МассивПолей);
	
	// Планы счетов
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("ПланыСчетов", МассивПолей);
	
	// Планы видов расчета
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("ПланыВидовРасчета", МассивПолей);
	
	// Регистры сведений
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("РегистрПодчиненРегистратору");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("РегистрыСведений", МассивПолей);
	
	// Регистры накопления
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("РегистрПодчиненРегистратору");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	МассивПолей.Добавить("ВидРегистраНакопления");
	
	Структура.Вставить("РегистрыНакопления", МассивПолей);
	
	// Регистры бухгалтерии
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("РегистрПодчиненРегистратору");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("РегистрыБухгалтерии", МассивПолей);
	
	// Регистры расчета
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("РегистрПодчиненРегистратору");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("РегистрыРасчета", МассивПолей);
	
	// Бизнес-процессы
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("БизнесПроцессы", МассивПолей);
	
	// Задачи
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("Задачи", МассивПолей);
	
	// ПланыОбмена
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПредставлениеОбъекта");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	
	Структура.Вставить("ПланыОбмена", МассивПолей);
	
	// Роли
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	
	Структура.Вставить("Роли", МассивПолей);
	
	// Общие модули
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("КлиентУправляемоеПриложение");
	МассивПолей.Добавить("Сервер");
	МассивПолей.Добавить("ВнешнееСоединение");
	МассивПолей.Добавить("КлиентОбычноеПриложение");
	МассивПолей.Добавить("ВызовСервера");
	МассивПолей.Добавить("Глобальный");
	МассивПолей.Добавить("Привилегированный");
	МассивПолей.Добавить("ПовторноеИспользованиеВозвращаемыхЗначений");
	
	Структура.Вставить("ОбщиеМодули", МассивПолей);
	
	// Подписки на события.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("Событие");
	МассивПолей.Добавить("Обработчик");
	МассивПолей.Добавить("Источник");
	
	Структура.Вставить("ПодпискиНаСобытия", МассивПолей);
	
	// Регламентные задания.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ИмяМетода");
	МассивПолей.Добавить("НаименованиеЗадания");
	МассивПолей.Добавить("Использование");
	МассивПолей.Добавить("Предопределенное");
	
	Структура.Вставить("РегламентныеЗадания", МассивПолей);
	
	// Функциональные опции.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("Хранение");
	МассивПолей.Добавить("Состав");
	МассивПолей.Добавить("ПривилегированныйРежимПриПолучении");
	
	Структура.Вставить("ФункциональныеОпции", МассивПолей);
	
	// Пакеты XDTO
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПространствоИмен");
	
	Структура.Вставить("ПакетыXDTO", МассивПолей);
	
	// Критерии отбора.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("Тип");
	МассивПолей.Добавить("Состав");
	МассивПолей.Добавить("ПредставлениеСписка");
	МассивПолей.Добавить("РасширенноеПредставлениеСписка");
	МассивПолей.Добавить("Пояснение");	
	Структура.Вставить("КритерииОтбора", МассивПолей);
	
	// Хранилища настроек.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	
	Структура.Вставить("ХранилищаНастроек", МассивПолей);
	
	// Web-сервисы.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("Операции");
	МассивПолей.Добавить("ПространствоИмен");
	МассивПолей.Добавить("ИмяФайлаПубликации");
	
	Структура.Вставить("WebСервисы", МассивПолей);
	
	// WS-Ссылки.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("URLИсточника");
	
	Структура.Вставить("WSСсылки", МассивПолей);
	
	// Общие команды.
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("Группа");
	
	Структура.Вставить("ОбщиеКоманды", МассивПолей);
	
	// Группы команд
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("Категория");
	
	Структура.Вставить("ГруппыКоманд", МассивПолей);
	
	// Общие формы
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ВключатьСправкуВСодержание");
	МассивПолей.Добавить("Имя");
	МассивПолей.Добавить("РасширенноеПредставлениеОбъекта");
	МассивПолей.Добавить("Пояснение");

	Структура.Вставить("ОбщиеФормы", МассивПолей);
	
	// Параметры сеанса
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	
	Структура.Вставить("ПараметрыСеанса", МассивПолей);
	
	// Последовательности
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("Синоним");
	МассивПолей.Добавить("Комментарий");
	МассивПолей.Добавить("ПеремещениеГраницыПриПроведении");
	МассивПолей.Добавить("Документы");
	МассивПолей.Добавить("Движения");
	
	Структура.Вставить("Последовательности", МассивПолей);
	
	Возврат Структура;
	
КонецФункции

// Формирует и возвращает список доступных типов форм в зависимости от класса объекта метаданных
Функция СписокДоступныхТиповФорм(ИмяКласса) Экспорт

	Список = Новый СписокЗначений;
	
	Если ИмяКласса = "Константы" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ПланыОбмена" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "КритерииОтбора" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ХранилищаНастроек" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСохранения"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаЗагрузки"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ОбщиеФормы" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОбщаяФорма"));
	ИначеЕсли ИмяКласса = "Справочники" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаГруппы"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбораГруппы"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "Документы" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ЖурналыДокументов" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФорма"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "Перечисления" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "Отчеты" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФорма"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаВарианта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаНастроек"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "Обработки" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФорма"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ПланыВидовХарактеристик" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаГруппы"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбораГруппы"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ПланыСчетов" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ПланыВидовРасчета" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаЗаписи"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "РегистрыНакопления" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "РегистрыБухгалтерии" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "РегистрыРасчета" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "БизнесПроцессы" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "Задачи" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "ПланыОбмена" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаДляВыбора"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаОбъекта"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ОсновнаяФормаСписка"));
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	ИначеЕсли ИмяКласса = "Роли" Тогда
		
	ИначеЕсли ИмяКласса = "ОбщиеОбъекты" Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Процедура СоздатьРоль(Форма, ИмяРеквизитаРоли) Экспорт
	
#Если Клиент Тогда
	ГруппаРоли = ОбщегоНазначенияСППРВызовСервера.ГруппаОбъектовМетаданных("Роли", Форма.Объект.Владелец);
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Родитель", 		  ГруппаРоли);
	ЗначенияЗаполнения.Вставить("Ответственный", 	  Форма.Объект.Ответственный);
	ЗначенияЗаполнения.Вставить("ПотребительРоли", 	  Форма.Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("ИмяПотребителяРоли", ПолучитьИмяОбъектаМетаданныхПоСинониму(Форма.Объект.Наименование));
	ЗначенияЗаполнения.Вставить("ИмяРеквизитаРоли",   ИмяРеквизитаРоли);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("СозданиеВыборРоли",  Истина);
	
	Структура = Новый Структура;
	Структура.Вставить("Форма", 		   Форма);
	Структура.Вставить("ИмяРеквизитаРоли", ИмяРеквизитаРоли);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьРольЗавершение", ЭтотОбъект, Структура);
	
	ОткрытьФорму("Справочник.ОбъектыМетаданных.ФормаОбъекта",
				 ПараметрыФормы,
				 Форма,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
#КонецЕсли
	
КонецПроцедуры

Процедура СоздатьРольЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	#Если Клиент Тогда
		
		Если ЗначениеЗаполнено(РезультатДействия) Тогда
			Форма = ДополнительныеПараметры.Форма;
			Форма.Объект[ДополнительныеПараметры.ИмяРеквизитаРоли] = РезультатДействия;
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// У этого класса объекта есть модуль менеджера
//
// Параметры:
//  ТипОбъекта	 - Строка - класс объекта во множественном числе
// 
// Возвращаемое значение:
//  Булево 
//
Функция УЭтогоКлассаОбъектаЕстьМодульМенеджера(ТипОбъекта) Экспорт
	
	ОбъектыСМодулем = Новый Соответствие;
	ОбъектыСМодулем.Вставить(ВРег("ПланыОбмена"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("Справочники"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("Документы"),   Истина);
	ОбъектыСМодулем.Вставить(ВРег("Отчеты"),      Истина);
	ОбъектыСМодулем.Вставить(ВРег("Обработки"),   Истина);
	ОбъектыСМодулем.Вставить(ВРег("ПланыВидовХарактеристик"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("ПланыСчетов"),         Истина);
	ОбъектыСМодулем.Вставить(ВРег("ПланыВидовРасчета"),   Истина);
	ОбъектыСМодулем.Вставить(ВРег("БизнесПроцессы"),      Истина);
	ОбъектыСМодулем.Вставить(ВРег("Задачи"),              Истина);
	ОбъектыСМодулем.Вставить(ВРег("КритерииОтбора"),      Истина);
	ОбъектыСМодулем.Вставить(ВРег("ХранилищеНастроек"),   Истина);
	ОбъектыСМодулем.Вставить(ВРег("ЖурналыДокументов"),   Истина);
	ОбъектыСМодулем.Вставить(ВРег("Перечисления"),        Истина);
	ОбъектыСМодулем.Вставить(ВРег("РегистрыСведений"),    Истина);
	ОбъектыСМодулем.Вставить(ВРег("РегистрыНакопления"),  Истина);
	ОбъектыСМодулем.Вставить(ВРег("РегистрыБухгалтерии"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("РегистрыРасчета"),     Истина);
	ОбъектыСМодулем.Вставить(ВРег("Константы"),           Истина);
	
	Возврат ОбъектыСМодулем.Получить(ВРег(ТипОбъекта)) <> Неопределено;
	
КонецФункции

// У этого класса объекта есть модуль объекта
//
// Параметры:
//  ТипОбъекта	 - Строка - класс объекта во множественном числе
// 
// Возвращаемое значение:
//  Булево 
//
Функция УЭтогоКлассаОбъектаЕстьМодульОбъекта(ТипОбъекта) Экспорт
	
	ОбъектыСМодулем = Новый Соответствие;
	ОбъектыСМодулем.Вставить(ВРег("ПланыОбмена"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("Справочники"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("Документы"),   Истина);
	ОбъектыСМодулем.Вставить(ВРег("Отчеты"),      Истина);
	ОбъектыСМодулем.Вставить(ВРег("Обработки"),   Истина);
	ОбъектыСМодулем.Вставить(ВРег("ПланыВидовХарактеристик"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("ПланыСчетов"),       Истина);
	ОбъектыСМодулем.Вставить(ВРег("ПланыВидовРасчета"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("БизнесПроцессы"),    Истина);
	ОбъектыСМодулем.Вставить(ВРег("Задачи"),            Истина);
	
	Возврат ОбъектыСМодулем.Получить(ВРег(ТипОбъекта)) <> Неопределено;
	
КонецФункции

// У этого класса объекта есть модуль менеджера значений
//
// Параметры:
//  ТипОбъекта	 - Строка - класс объекта во множественном числе
// 
// Возвращаемое значение:
//  Булево 
//
Функция УЭтогоКлассаОбъектаЕстьМодульМенеджераЗначений(ТипОбъекта) Экспорт
	
	ОбъектыСМодулем = Новый Соответствие;
	ОбъектыСМодулем.Вставить(ВРег("Константы"), Истина);
	
	Возврат ОбъектыСМодулем.Получить(ВРег(ТипОбъекта)) <> Неопределено;
	
КонецФункции

// У этого класса объекта есть модуль набора значений
//
// Параметры:
//  ТипОбъекта	 - Строка - класс объекта во множественном числе
// 
// Возвращаемое значение:
//  Булево 
//
Функция УЭтогоКлассаОбъектаЕстьМодульНабораЗаписей(ТипОбъекта) Экспорт
	
	ОбъектыСМодулем = Новый Соответствие;
	ОбъектыСМодулем.Вставить(ВРег("РегистрыСведений"),    Истина);
	ОбъектыСМодулем.Вставить(ВРег("РегистрыНакопления"),  Истина);
	ОбъектыСМодулем.Вставить(ВРег("РегистрыБухгалтерии"), Истина);
	ОбъектыСМодулем.Вставить(ВРег("РегистрыРасчета"),     Истина);
	
	Возврат ОбъектыСМодулем.Получить(ВРег(ТипОбъекта)) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИмяОбъектаМетаданныхПоСинониму(Знач Синоним)
	
	ДопустимыеСимволы = Нстр("ru = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'") + "_0123456789" + "ABCDEFJHIJKLMNOPQRSTUVWXWZ";
	
	Имя = "";
	СледующийСимволЗаглавный = Истина;
	
	Пока ЗначениеЗаполнено(Синоним) Цикл
		
		ТекущийСимвол = Лев(Синоним, 1);
		Синоним = Сред(Синоним, 2);
		
		Если Найти(ДопустимыеСимволы, ВРег(ТекущийСимвол)) > 0 Тогда
			Имя = Имя + ?(СледующийСимволЗаглавный, ВРег(ТекущийСимвол), ТекущийСимвол);
			СледующийСимволЗаглавный = Ложь;
		Иначе
			СледующийСимволЗаглавный = Истина;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Имя;
	
КонецФункции

#КонецОбласти
