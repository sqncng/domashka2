////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с СППР"
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

#Область ЭкспортныеСлужебныеПроцедурыИФункции

Функция СформироватьОписаниеПрофиля(Результат) Экспорт

	Перем ВложенияHTML;

	Если Результат[0].Пустой() Тогда
		Возврат "";
	КонецЕсли; 
	
	ВыборкаПрофиль = Результат[0].Выбрать();
	ВыборкаПрофиль.Следующий();
	
	СписокФункций = Результат[1].Выгрузить();
	
	ИспользуемыеСтили = ИспользуемыеСтили();
	
	// Описание хранится в виде форматированного документа
	
	Описание = ВыборкаПрофиль.ХранилищеОписания.Получить();
	
	// Если у объекта есть описание, то перед ним добавим заголовок
	Если Описание <> Неопределено Тогда
		ТекстОписания = Описание.ПолучитьТекст();
		Если НЕ ПустаяСтрока(ТекстОписания) Тогда
			Описание.Вставить(Описание.ПолучитьЗакладкуНачала(),, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			
			ДобавленныйТекст = Описание.Вставить(Описание.ПолучитьЗакладкуНачала(), НСтр("ru = 'Описание'"));
			ДобавленныйТекст.ЦветТекста = ИспользуемыеСтили.Заголовок2_Цвет;
			ДобавленныйТекст.Шрифт = ИспользуемыеСтили.Заголовок2_Шрифт;
			
			Описание.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
			Описание.Добавить(, ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		КонецЕсли;
	Иначе
		Описание = Новый ФорматированныйДокумент;
	КонецЕсли;
	
	ТекстПараграфа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Профиль ""%1""'"),
								ВыборкаПрофиль.Представление);
			
	Если Описание.Элементы.Количество() <> 0 Тогда
		Индекс = 0;
	Иначе
		Индекс = Неопределено;
	КонецЕсли;
	НовыйПараграф = ДобавитьПараграф(ТекстПараграфа, Индекс, ИспользуемыеСтили.Заголовок1_Цвет, ИспользуемыеСтили.Заголовок1_Шрифт, Описание);
	НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	
	// Добавим список функций
	ТекстПараграфа = НСтр("ru = 'Исполняемые функции'");
	ДобавитьВОписаниеИспользованиеВФункциях(ТекстПараграфа, "", СписокФункций, Описание);
	
	ОписаниеHTML = "";
	Описание.ПолучитьHTML(ОписаниеHTML, ВложенияHTML);
	
	Возврат ОписаниеHTML;

КонецФункции

Функция СформироватьОписаниеРазделаИнтерфейса(Результат) Экспорт
	
	Перем ВложенияHTML;

	Если Результат[1].Пустой() Тогда
		Возврат "";
	КонецЕсли; 
	
	ВыборкаПодсистема = Результат[1].Выбрать();
	ВыборкаПодсистема.Следующий();
	
	СписокФункцийПодсистемы = Результат[2].Выгрузить();
	СписокВсехФункций = Результат[3].Выгрузить();
	
	// Сформируем полное дерево функций
	СписокФункцийДерево = Новый ДеревоЗначений;
	СписокФункцийДерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СписокФункцийДерево.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ФункцииСистемы"));
	СписокФункцийДерево.Колонки.Добавить("ВходитВРаздел", Новый ОписаниеТипов("Булево"));
	СписокФункцийДерево.Колонки.Добавить("ПоказатьВСписке", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьСписокФункцийРекурсивно(СписокВсехФункций, Справочники.ФункцииСистемы.ПустаяСсылка(), СписокФункцийДерево.Строки);
	
	// Определим какие функции нужно показать в описании раздела
	Для каждого ДанныеСсылки Из СписокФункцийПодсистемы Цикл
		СтрокаФункция = СписокФункцийДерево.Строки.Найти(ДанныеСсылки.Ссылка, "Ссылка", Истина);
		Если СтрокаФункция <> Неопределено Тогда
			СтрокаФункция.ВходитВРаздел = Истина;
			СтрокаФункция.ПоказатьВСписке = Истина;
			
			// Покажем родителей
			РодительСтроки = СтрокаФункция.Родитель;
			Пока РодительСтроки <> Неопределено Цикл
				РодительСтроки.ПоказатьВСписке = Истина;
				РодительСтроки = РодительСтроки.Родитель;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Сформируем список функций, которые будут отображены в описании раздела
	СсылкиНаФункции = Новый ТаблицаЗначений;
	СсылкиНаФункции.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	СсылкиНаФункции.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ФункцииСистемы"));
	СсылкиНаФункции.Колонки.Добавить("ЦветТекста");
	СсылкиНаФункции.Колонки.Добавить("Отступ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
	
	СформироватьСписокСсылокНаФункцииРекурсивно(СсылкиНаФункции, 0, СписокФункцийДерево.Строки);
	
	// Сформируем описание
	Описание = Новый ФорматированныйДокумент;
	
	ТекстПараграфа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Функции раздела ""%1""'"),
										ВыборкаПодсистема.Представление);
	
	ДобавитьПараграфИСписок(ТекстПараграфа, СсылкиНаФункции, "ИД_Функции", Описание);

	ОписаниеHTML = "";
	Описание.ПолучитьHTML(ОписаниеHTML, ВложенияHTML);
	
	Возврат ОписаниеHTML;
	
КонецФункции

Функция СформироватьОписаниеФормы(Результат, ЗаголовокФормы) Экспорт
	
	Перем ВложенияHTML;

	Если Результат[2].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ВыборкаОбъектМетаданных = Результат[3].Выбрать();
	ВыборкаФормаОбъектаМетаданных = Результат[4].Выбрать();
	СписокФункций = Результат[2].Выгрузить();
	
	ОписаниеHTML = "";
	FunctionID = Неопределено;
	ObjectID = Неопределено;
	
	Если СписокФункций.Количество() = 1 Тогда
		
		FunctionID = СписокФункций[0].Ссылка.УникальныйИдентификатор();
		
	ИначеЕсли СписокФункций.Количество() > 0 Тогда
		
		Описание = Новый ФорматированныйДокумент;
		
		// Добавим список функций
		Если ЗаголовокФормы <> "" Тогда
			ТекстПараграфа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Объект ""%1"" используется для функций'"),
										ЗаголовокФормы);
		Иначе
			ТекстПараграфа = НСтр("ru = 'Объект используется для функций'");
		КонецЕсли;
									
		ДобавитьПараграфИСписок(ТекстПараграфа, СписокФункций, "ИД_Функции", Описание);
		
		Описание.ПолучитьHTML(ОписаниеHTML, ВложенияHTML);
	
	КонецЕсли; 
	
	ТипОписаниеФормы = ФабрикаXDTO.Тип("http://www.1c.ru/SPPR/FunctionModel", "FormDescription");
	ОписаниеФормы = ФабрикаXDTO.Создать(ТипОписаниеФормы);
	ОписаниеФормы.Description = ОписаниеHTML;
	Если FunctionID <> Неопределено Тогда
		ОписаниеФормы.FunctionID = FunctionID;
	КонецЕсли; 
	Если ObjectID <> Неопределено Тогда
		ОписаниеФормы.ObjectID = ObjectID;
	КонецЕсли; 
	
	Возврат ОписаниеФормы;

КонецФункции

Функция ДанныеФункции(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Функции.Ссылка КАК Ссылка,
	|	Функции.Родитель КАК Родитель,
	|	Функции.ЭтоГруппа КАК ЭтоГруппа,
	|	Функции.Наименование КАК Наименование,
	|	Функции.ПолныйКод КАК ПолныйКод,
	|	Функции.Описание КАК Описание,
	|	Функции.Результат КАК Результат,
	|	Функции.ТипФункции КАК ТипФункции,
	|	Функции.ХранилищеОписания КАК ХранилищеОписания,
	|	Функции.ВходящиеДанные.(
	|		НомерСтроки КАК НомерСтроки,
	|		Функция КАК Ссылка,
	|		Функция.Родитель КАК Родитель,
	|		Функция.Наименование КАК Наименование,
	|		Функция.ПолныйКод КАК ПолныйКод,
	|		Функция.Результат КАК Результат,
	|		Функция.ТипФункции КАК ТипФункции,
	|		ВидСвязи КАК ВидСвязи,
	|		Комментарий КАК Комментарий,
	|		Функция.ХранилищеОписания КАК ОписаниеСвязи
	|	) КАК ВходящиеДанные,
	|	Функции.Исполнители.(
	|		НомерСтроки КАК НомерСтроки,
	|		Исполнитель КАК Ссылка,
	|		Исполнитель.Наименование КАК Наименование,
	|		Комментарий КАК Комментарий
	|	) КАК Исполнители
	|ИЗ
	|	Справочник.ФункцииСистемы КАК Функции
	|ГДЕ
	|	Функции.Ссылка = &Функция";
	
	Запрос.УстановитьПараметр("Функция", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ТЧВходящиеДанные = Выборка.ВходящиеДанные.Выгрузить();
	
	ТипДанныхФункции = ФабрикаXDTO.Тип("http://www.1c.ru/SPPR/FunctionModel", "Function");
	ТипЭлементаФункции = ФабрикаXDTO.Тип("http://www.1c.ru/SPPR/FunctionModel", "SchemeElement");
	ТипРабочееМесто = ФабрикаXDTO.Тип("http://www.1c.ru/SPPR/FunctionModel", "Workplace");
	
	ДанныеФункции = ФабрикаXDTO.Создать(ТипДанныхФункции);
		
	ОписаниеФункции = ОписаниеФункции(Выборка);
	
	ДанныеФункции.Description = ОписаниеФункции;
	
	ГиперссылкиСвязей = Неопределено;
	
	Если Выборка.ЭтоГруппа Тогда
		// Неконечная функция
		РеквизитыФункции = Новый Структура;
		РеквизитыФункции.Вставить("Ссылка",       Выборка.Ссылка);
		РеквизитыФункции.Вставить("Родитель",     Выборка.Родитель);
		РеквизитыФункции.Вставить("ПолныйКод",    Выборка.ПолныйКод);
		РеквизитыФункции.Вставить("Наименование", Выборка.Наименование);
		РеквизитыФункции.Вставить("Результат",    Выборка.Результат);
		РеквизитыФункции.Вставить("ТипФункции",   Выборка.ТипФункции);
		РеквизитыФункции.Вставить("Описание",     Лев(Выборка.Описание, 1000));
		
		СхемаФункции = ГрафическиеСхемыСервер.СхемаНеконечнойФункции(РеквизитыФункции, ГиперссылкиСвязей);
											  
	Иначе
		// Конечная функция
		РеквизитыФункции = Новый Структура;
		РеквизитыФункции.Вставить("Ссылка",       Выборка.Ссылка);
		РеквизитыФункции.Вставить("Родитель",     Выборка.Родитель);
		РеквизитыФункции.Вставить("ПолныйКод",    Выборка.ПолныйКод);
		РеквизитыФункции.Вставить("Наименование", Выборка.Наименование);
		РеквизитыФункции.Вставить("Результат",    Выборка.Результат);
		РеквизитыФункции.Вставить("ТипФункции",   Выборка.ТипФункции);
		РеквизитыФункции.Вставить("Описание",     Лев(Выборка.Описание, 1000));
		
		ВходящиеДанные   = Новый Массив;
		ДанныеУправления = Новый Массив;
		Исполнители      = Новый Массив;
		
		ПодготовитьДанныеВходовИУправления(ВходящиеДанные, ДанныеУправления, Выборка.ВходящиеДанные.Выгрузить());
		ПодготовитьДанныеИсполнителей(Исполнители, Выборка.Исполнители.Выгрузить());
		
		СхемаФункции = ГрафическиеСхемыСервер.СхемаКонечнойФункции(РеквизитыФункции, ВходящиеДанные,
		                                      ДанныеУправления, Исполнители, ГиперссылкиСвязей);
		
	КонецЕсли;
	
	ДанныеФункции.Scheme = Новый ХранилищеЗначения(СхемаФункции);
	
	ДанныеФункции.IsWorkplace = Не Выборка.ЭтоГруппа;
	
	// Заполнение данных об элементах схемы
	Если ТипЗнч(ГиперссылкиСвязей) = Тип("Структура") Тогда
		Для Каждого ЭлементСхемы из СхемаФункции.ЭлементыГрафическойСхемы Цикл
			
			Если ТипЗнч(ЭлементСхемы) = Тип("ЭлементГрафическойСхемыДекорация") Тогда
				
				Гиперссылка = Неопределено;
				ЗначениеЭлемента = Неопределено;
				
				Если ГиперссылкиСвязей.Свойство(ЭлементСхемы.Имя, ЗначениеЭлемента) Тогда
					
					Если ТипЗнч(ЗначениеЭлемента) = Тип("СправочникСсылка.ФункцииСистемы") Тогда
						Гиперссылка = ЗначениеЭлемента;
					ИначеЕсли ТипЗнч(ЗначениеЭлемента) = Тип("СправочникСсылка.ПрофилиПользователей") Тогда
						Гиперссылка = ЗначениеЭлемента;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Гиперссылка) Тогда
					Продолжить;
				КонецЕсли;
				
				ОписаниеЭлементСхемы = ФабрикаXDTO.Создать(ТипЭлементаФункции);
				
				ОписаниеЭлементСхемы.ID   = Гиперссылка.УникальныйИдентификатор();
				ОписаниеЭлементСхемы.Code = ЭлементСхемы.Имя;
				ОписаниеЭлементСхемы.Name = ЭлементСхемы.Наименование;
				
				СтрокаТЧ = ТЧВходящиеДанные.Найти(Гиперссылка, "Ссылка");
				
				Если СтрокаТЧ <> Неопределено Тогда
					ОписаниеЭлементСхемы.Description = СтрокаТЧ.ОписаниеСвязи;
				Иначе
					ОписаниеЭлементСхемы.Description = Новый ХранилищеЗначения("");
				КонецЕсли;
				
				Если ТипЗнч(Гиперссылка) = Тип("СправочникСсылка.ПрофилиПользователей") Тогда
					ОписаниеЭлементСхемы.Type = "Performer";;
				ИначеЕсли ТипЗнч(Гиперссылка) = Тип("СправочникСсылка.ФункцииСистемы") Тогда
					ОписаниеЭлементСхемы.Type = "Function";
				КонецЕсли;
				
				ДанныеФункции.SchemeElements.Добавить(ОписаниеЭлементСхемы);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеФункции;

КонецФункции

Функция ОписаниеФункции(Выборка) Экспорт

	ТипОписанияФункции = ФабрикаXDTO.Тип("http://www.1c.ru/SPPR/FunctionModel", "FunctionDescription");
	
	ОписаниеФункции = ФабрикаXDTO.Создать(ТипОписанияФункции);
	ОписаниеФункции.ID = Выборка.Ссылка.УникальныйИдентификатор();
	ОписаниеФункции.ID_Parent = Выборка.Родитель.УникальныйИдентификатор();
	ОписаниеФункции.Name = Выборка.Наименование;
	ОписаниеФункции.Description = Выборка.ХранилищеОписания;
	
	Возврат ОписаниеФункции;
	
КонецФункции

Функция КраткоеОписаниеОбъекта(Выборка) Экспорт

	ТипДанныхОписаниеОбъекта = ФабрикаXDTO.Тип("http://www.1c.ru/SPPR/FunctionModel", "ObjectDescription");

	ОписаниеОбъекта = ФабрикаXDTO.Создать(ТипДанныхОписаниеОбъекта);
	ОписаниеОбъекта.ID = Выборка.Ссылка.УникальныйИдентификатор(); 
	ОписаниеОбъекта.ID_Parent = Выборка.Родитель.УникальныйИдентификатор(); 
	ОписаниеОбъекта.Name = Выборка.Наименование; 
	ОписаниеОбъекта.Description = Выборка.ХранилищеОписания; 
	ОписаниеОбъекта.IsFolder = Выборка.ЭтоГруппа; 
	
	Если НЕ Выборка.ЭтоГруппа Тогда
		ОписаниеОбъекта.IsGroup = Выборка.ОбъектЯвляетсяГруппой; 
	Иначе
		ОписаниеОбъекта.IsGroup = Ложь; 
	КонецЕсли; 

	Возврат ОписаниеОбъекта;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ИспользуемыеСтили()

	ИспользуемыеСтили = Новый Структура;
	
	ИспользуемыеСтили.Вставить("Заголовок1_Цвет", WebЦвета.ТемноСиний);
	ИспользуемыеСтили.Вставить("Заголовок1_Шрифт", Новый Шрифт("Arial", 18, Истина));
	ИспользуемыеСтили.Вставить("Заголовок2_Цвет",  ЦветаСтиля.ГруппаВариантовОтчетовЦвет);
	ИспользуемыеСтили.Вставить("Заголовок2_Шрифт", Новый Шрифт("Arial", 14, Истина));

	Возврат ИспользуемыеСтили;
	
КонецФункции

Функция ДобавитьПараграф(ТекстПараграфа, Индекс = Неопределено, ЦветТекста, Шрифт, Описание)

	Если Индекс <> Неопределено Тогда
		НовыйПараграф = Описание.Элементы.Вставить(Индекс);
	Иначе
		НовыйПараграф = Описание.Элементы.Добавить();
	КонецЕсли; 
	
	ТекстЗаголовка = НовыйПараграф.Элементы.Добавить(ТекстПараграфа);
	ТекстЗаголовка.ЦветТекста = ЦветТекста;
	ТекстЗаголовка.Шрифт = Шрифт;
	
	НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);

	Возврат НовыйПараграф;
	
КонецФункции

Процедура ДобавитьПараграфИСписок(ТекстПараграфа, СодержаниеПараграфа, ТекстИД, Описание)

	Если СодержаниеПараграфа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МногоуровневыйСписок = (СодержаниеПараграфа.Колонки.Найти("Отступ") <> Неопределено);
	ИспользоватьЦветТекста = (СодержаниеПараграфа.Колонки.Найти("ЦветТекста") <> Неопределено);
	
	ИспользуемыеСтили = ИспользуемыеСтили();
	
	НовыйПараграф = ДобавитьПараграф(ТекстПараграфа,, ИспользуемыеСтили.Заголовок2_Цвет, ИспользуемыеСтили.Заголовок2_Шрифт, Описание);
	Для каждого ОписаниеСписка Из СодержаниеПараграфа Цикл
		
		Если МногоуровневыйСписок Тогда
			Для НомерОтступа = 1 По ОписаниеСписка.Отступ * 3 Цикл
				НовыйПараграф.Элементы.Добавить(Символы.НПП);
			КонецЦикла;
		КонецЕсли;
		
		ДобавленныйТекст = НовыйПараграф.Элементы.Добавить(ОписаниеСписка.Представление);
		Если ТекстИД <> Неопределено Тогда
			ДобавленныйТекст.НавигационнаяСсылка = ТекстИД + Строка(ОписаниеСписка.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		Если ИспользоватьЦветТекста И ОписаниеСписка.ЦветТекста <> Неопределено Тогда
			ДобавленныйТекст.ЦветТекста = ОписаниеСписка.ЦветТекста;
		КонецЕсли;
		
		НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	КонецЦикла;
	
	НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);

КонецПроцедуры

Процедура ДобавитьВОписаниеИспользованиеВФункциях(ТекстПараграфа, ТипСсылки, СписокФункций, Описание)

	НовыйПараграф = Неопределено;
	
	ИспользуемыеСтили = ИспользуемыеСтили();
	
	Для каждого ДанныеФункции Из СписокФункций Цикл
		Если ДанныеФункции.ТипСсылки <> ТипСсылки
			ИЛИ НЕ ЗначениеЗаполнено(ДанныеФункции.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовыйПараграф = Неопределено Тогда
			НовыйПараграф = ДобавитьПараграф(ТекстПараграфа,, ИспользуемыеСтили.Заголовок2_Цвет, ИспользуемыеСтили.Заголовок2_Шрифт, Описание);
		КонецЕсли; 
		
		ДобавленныйТекст = НовыйПараграф.Элементы.Добавить(ДанныеФункции.Представление);
		ДобавленныйТекст.НавигационнаяСсылка = "ИД_Функции" + Строка(ДанныеФункции.Ссылка.УникальныйИдентификатор());
		
		НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	КонецЦикла; 
	
	Если НовыйПараграф <> Неопределено Тогда
		НовыйПараграф.Элементы.Добавить(,ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСписокСсылокНаФункцииРекурсивно(СсылкиНаФункции, ТекущийУровень, СтрокиДерева)

	Для каждого СтрокаФункция Из СтрокиДерева Цикл
		Если НЕ СтрокаФункция.ПоказатьВСписке Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСсылка = СсылкиНаФункции.Добавить();
		НоваяСсылка.Ссылка = СтрокаФункция.Ссылка;
		НоваяСсылка.Представление = СтрокаФункция.Представление;
		НоваяСсылка.Отступ = ТекущийУровень;
		Если НЕ СтрокаФункция.ВходитВРаздел Тогда
			НоваяСсылка.ЦветТекста = WebЦвета.Серый;
		КонецЕсли;
		
		СформироватьСписокСсылокНаФункцииРекурсивно(СсылкиНаФункции, ТекущийУровень + 1, СтрокаФункция.Строки);
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, Родитель, ТекущиеЭлементы)

	СтруктураПоиска = Новый Структура("Родитель", Родитель);
	СписокСтрок = ТаблицаФункций.НайтиСтроки(СтруктураПоиска);
	Для каждого ДанныеСтроки Из СписокСтрок Цикл
		
		НоваяСтрока = ТекущиеЭлементы.Добавить();
		НоваяСтрока.Представление = ДанныеСтроки.Представление;
		НоваяСтрока.Ссылка = ДанныеСтроки.Ссылка;
		
		ТекущиеЭлементыСтроки = НоваяСтрока.Строки;		
		ЗаполнитьСписокФункцийРекурсивно(ТаблицаФункций, ДанныеСтроки.Ссылка, ТекущиеЭлементыСтроки);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьДанныеИсполнителей(Исполнители, ДанныеИсполнителей)
	
	Для Каждого ДанныеИсполнителя из ДанныеИсполнителей Цикл
		
		ЗначенияРеквизитов = Новый Структура;
		ЗначенияРеквизитов.Вставить("НомерСтроки", ДанныеИсполнителя.НомерСтроки);
		ЗначенияРеквизитов.Вставить("Ссылка", ДанныеИсполнителя.Ссылка);
		ЗначенияРеквизитов.Вставить("Наименование", ДанныеИсполнителя.Наименование);
		ЗначенияРеквизитов.Вставить("Комментарий", ДанныеИсполнителя.Комментарий);
		
		Исполнители.Добавить(ЗначенияРеквизитов);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДанныеВходовИУправления(ВходящиеДанные, ДанныеУправления, ДанныеСвязей)
	
	Для Каждого ДанныеСвязи из ДанныеСвязей Цикл
		
		ЗначенияРеквизитов = Новый Структура;
		ЗначенияРеквизитов.Вставить("НомерСтроки", ДанныеСвязи.НомерСтроки);
		ЗначенияРеквизитов.Вставить("Ссылка", ДанныеСвязи.Ссылка);
		ЗначенияРеквизитов.Вставить("Родитель", ДанныеСвязи.Родитель);
		ЗначенияРеквизитов.Вставить("ПолныйКод", ДанныеСвязи.ПолныйКод);
		ЗначенияРеквизитов.Вставить("Наименование", ДанныеСвязи.Наименование);
		ЗначенияРеквизитов.Вставить("Результат", ДанныеСвязи.Результат);
		ЗначенияРеквизитов.Вставить("ТипФункции", ДанныеСвязи.ТипФункции);
		ЗначенияРеквизитов.Вставить("Комментарий", ДанныеСвязи.Комментарий);
		
		Если ДанныеСвязи.ВидСвязи = Перечисления.ВидыВходящихСвязейФункций.Вход Тогда
			ВходящиеДанные.Добавить(ЗначенияРеквизитов);
		ИначеЕсли ДанныеСвязи.ВидСвязи = Перечисления.ВидыВходящихСвязейФункций.Управление Тогда
			ДанныеУправления.Добавить(ЗначенияРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
