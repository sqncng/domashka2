////////////////////////////////////////////////////////////////////////////////
//  Серверные процедуры и функции подсистемы "Объекты на контроле"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует реквизиты и элементы формы в форме элемента объекта контроля
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма элемента объекта контроля
//  ОбъектКонтроля  - СправочникСсылка.Ошибки,
//                    СправочникСсылка.ТехническиеПроекты,
//                    СправочникСсылка.Ветки,
//                    СправочникСсылка.ЗадачиПроцесса - ссылка на объект контроля.
//  ИмяГруппыФормы  - Строка - имя группы формы, в которую будут добавлены команды постановки на контроль
//
Процедура НастроитьЭлементыПоставитьНаКонтрольВФормеЭлемента(Форма, ОбъектКонтроля, ИмяГруппыФормы) Экспорт
	
	Если Не ФормированиеЭлементовНеобходимо() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементГруппаФормы = Форма.Элементы.Найти(ИмяГруппыФормы);

	Если ЭлементГруппаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектКонтроля) Тогда
		Возврат;
	КонецЕсли;
	
	СпискиКонтроля = СпискиКонтроляОбъектаПользователем(ОбъектКонтроля, Пользователи.ТекущийПользователь());
	
	Если СпискиКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыФормыСозданы = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СпискиКонтроля");
	
	Если Не РеквизитыФормыСозданы Тогда
		ДобавитьРеквизитыФормыПоставитьНаКонтрольФормаЭлемента(Форма, СпискиКонтроля);
	КонецЕсли;
	
	УстановитьЗначенияРеквизитовКонтроляВФорме(Форма.СпискиКонтроля, СпискиКонтроля);
	
	Если Не РеквизитыФормыСозданы Тогда
		СформироватьЭлементыФормыПоставитьНаКонтрольФормаЭлемента(Форма, ЭлементГруппаФормы);
	Иначе
		ОбъектыНаКонтролеКлиентСервер.ОбновитьЭлементыФормыПоставитьНаКонтроль(Форма, СпискиКонтроля);
	КонецЕсли;
	
КонецПроцедуры

// Формирует реквизиты и элементы формы в форме списка объектов контроля
//
// Параметры:
//  Форма                         - ФормаКлиентскогоПриложения - форма списка объектов контроля
//  СпискиДляВыводаКомандКонтроля - Массив - состоит из структур, описывающих правила размещения команд постановки на контроль.
//                                           описание элементов структуры см. ДанныеСпискаДляВыводаКомандКонтроля
//
Процедура НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(Форма, СпискиДляВыводаКомандКонтроля) Экспорт
	
	Если Не ФормированиеЭлементовНеобходимо() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитТаблицаСоздан = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СпискиКонтроляСписок");
	
	СпискиКонтроля = Справочники.СпискиКонтроля.ДействующиеСпискиКонтроляПользователя(Пользователи.ТекущийПользователь());
	ДобавитьРеквизитыФормыПоставитьНаКонтрольФормаСписка(Форма, СпискиКонтроля, СпискиДляВыводаКомандКонтроля);
	
	Если Не РеквизитТаблицаСоздан Тогда
		УстановитьЗначенияРеквизитовКонтроляВФорме(Форма.СпискиКонтроляСписок, СпискиКонтроля, Ложь);
	КонецЕсли;
	
	СформироватьЭлементыФормыПоставитьНаКонтрольФормаСписка(Форма, СпискиДляВыводаКомандКонтроля);
	
КонецПроцедуры

// Конструктор структуры, описывающей описывающих правила размещения команд постановки на контроль в формах списка.
//
// Параметры:
//  ИмяСписка                - Строка - имя динамического списка, для которого размещаются команды.
//  ИмяГруппыФормы           - Строка - имя группы формы, в которой будут размещены команды.
//  ИмяГруппыКонтекстноеМеню - Строка - имя группы контекстного меню, в которой будут размещены команды.
//
// Возвращаемое значение:
//   Структура   - содержит обернутые в структуру переданные параметры
//
Функция ДанныеСпискаДляВыводаКомандКонтроля(ИмяСписка, ИмяГруппыФормы, ИмяГруппыКонтекстноеМеню) Экспорт
	
	ДанныеСписка = Новый Структура;
	ДанныеСписка.Вставить("ИмяСписка",                ИмяСписка);
	ДанныеСписка.Вставить("ИмяГруппыФормы",           ИмяГруппыФормы);
	ДанныеСписка.Вставить("ИмяГруппыКонтекстноеМеню", ИмяГруппыКонтекстноеМеню);
	
	Возврат ДанныеСписка;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет обработку команды постановки объекта на контроль
//
// Параметры:
//  ПараметрыПостановки - Структура - см. ОбъектыНаКонтролеКлиентСервер.НовыйПараметрыПостановкиНаКонтроль
//
Процедура ПоставитьОбъектНаКонтроль(ПараметрыПостановки) Экспорт
	
	ОбъектыКонтроля = Новый Массив;
	ОбъектыКонтроля.Добавить(ПараметрыПостановки.ОбъектКонтроля);
	ОбъектыКонтроляДаты = ЗапланированныеДатыОкончанияОбъектов(ОбъектыКонтроля);
	
	ПлановаяДатаОкончания = ОбъектыКонтроляДаты.Получить(ПараметрыПостановки.ОбъектКонтроля);
	
	Если ПлановаяДатаОкончания <> Неопределено
		И (Не ПлановаяДатаОкончания < НачалоДня(ТекущаяДатаСеанса())) Тогда
		ПараметрыПостановки.Вставить("ОжидаемаяДатаВыполнения", ПлановаяДатаОкончания)
	КонецЕсли;
	
	РегистрыСведений.ОбъектыНаКонтроле.ЗаписатьДанные(ПараметрыПостановки);
	
КонецПроцедуры

// Выполняет обработку команды постановки нескольких объектов на контроль
//
// Параметры:
//  ПараметрыПостановки - Массив - состоит из структур, см. ОбъектыНаКонтролеКлиентСервер.НовыйПараметрыПостановкиНаКонтроль
//
// Возвращаемое значение:
//   Структура   - результат постановки, содержит:
//    * ВсегоОбъектов          - Число - количество объектов, которые требовалось поставить на контроль.
//    * ПоставленоНаКонтроль   - Число - количество объектов, которые были поставлены на контроль.
//    * НеПоставленоНаКонтроль - Число - количество объектов, которые не были поставлены на контроль.
//    * СообщенияПользователю  - Массив - сообщения о неудачной постановке на контроль, которые требуется показать пользователю.
//
Функция РезультатПостановкиМассиваОбъектовНаКонтроль(ПараметрыПостановки) Экспорт
	
	РезультатПостановки = Новый Структура;
	РезультатПостановки.Вставить("ВсегоОбъектов",          ПараметрыПостановки.Количество());
	РезультатПостановки.Вставить("ПоставленоНаКонтроль",   0);
	РезультатПостановки.Вставить("НеПоставленоНаКонтроль", 0);
	РезультатПостановки.Вставить("СообщенияПользователю",  Новый Массив);
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	Для Каждого ПараметрыПостановкиОбъектаНаКонтроль Из ПараметрыПостановки Цикл
		
		Если ПараметрыПостановкиОбъектаНаКонтроль.СтатусКонтроля = "НеНаКонтроле" Тогда
			
			ПараметрыПостановкиОбъектаНаКонтроль.ДатаКонтроля            = ТекущаяДатаСеанса;
			ПараметрыПостановкиОбъектаНаКонтроль.ОжидаемаяДатаВыполнения = ?(ПараметрыПостановкиОбъектаНаКонтроль.ОжидаемаяДатаВыполнения < НачалоДня(ТекущаяДатаСеанса()),
			                                                                Дата(1, 1, 1), 
			                                                                ПараметрыПостановкиОбъектаНаКонтроль.ОжидаемаяДатаВыполнения);
			
			РегистрыСведений.ОбъектыНаКонтроле.ЗаписатьДанные(ПараметрыПостановкиОбъектаНаКонтроль);
			
			РезультатПостановки.ПоставленоНаКонтроль = РезультатПостановки.ПоставленоНаКонтроль + 1;
			
		Иначе
			
			РезультатПостановки.НеПоставленоНаКонтроль = РезультатПостановки.НеПоставленоНаКонтроль + 1;
			
			ТекстСообщения = ОбъектыНаКонтролеКлиентСервер.ТекстСообщенияОбъектУжеНаКонтроле(ПараметрыПостановкиОбъектаНаКонтроль.СтатусКонтроля, ПараметрыПостановкиОбъектаНаКонтроль.ОбъектКонтроля);
			
			ДанныеСообщенияПользователю = Новый Структура;
			ДанныеСообщенияПользователю.Вставить("ОбъектКонтроля", ПараметрыПостановкиОбъектаНаКонтроль.ОбъектКонтроля);
			ДанныеСообщенияПользователю.Вставить("ТекстСообщения", ТекстСообщения);
			
			РезультатПостановки.СообщенияПользователю.Добавить(ДанныеСообщенияПользователю);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПостановки;
	
КонецФункции

// Формирует текст информации об объектах, записи контроля которых изменяются.
//
// Параметры:
//  ИзменяемыеСтрокиСписка - Массив - содержит объекты контроля
//
// Возвращаемое значение:
//   ФорматированнаяСтрока -
//
Функция ТекстДекорацииИзменяемыеЗаписиКонтроля(ОбъектыКонтроля) Экспорт
	
	СтрокиОбъекты = Новый Массив;
	Счетчик = 0;
	
	Для Каждого ОбъектКонтроля Из ОбъектыКонтроля Цикл
		
		Если Счетчик > 0 Тогда
			СтрокиОбъекты.Добавить(Символы.ПС);
		КонецЕсли;
		
		ПредставлениеОбъектаКонтроля = Строка(ОбъектКонтроля);
		Если СтрДлина(ПредставлениеОбъектаКонтроля) > 60 Тогда
			ПредставлениеОбъектаКонтроля = Лев(ПредставлениеОбъектаКонтроля, 57) + "...";
		КонецЕсли;
		
		СтрокаОбъект = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '%1: <a href=""%2"">%3</a>'"),
		                                                      ОбъектКонтроля.Метаданные().ПредставлениеОбъекта,
		                                                      ПолучитьНавигационнуюСсылку(ОбъектКонтроля),
		                                                      ПредставлениеОбъектаКонтроля);
		СтрокиОбъекты.Добавить(СтрокаОбъект);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(СтрокиОбъекты);
	
КонецФункции

// Получает массив объектов контроля по ключам РС "Объекты на контроле".
//
// Параметры:
//  ИзменяемыеСтрокиСписка - Массив - содержит ключи РС "Объекты на контроле".
//
// Возвращаемое значение:
//   Массив - объекты на контроле
//
Функция ОбъектыКонтроляПоКлючамЗаписиРегистраОбъектыНаКонтроле(ИзменяемыеСтрокиСписка) Экспорт
	
	ОбъектыКонтроля = Новый Массив;
	
	Для Каждого ДанныеОбъекта Из ИзменяемыеСтрокиСписка Цикл
		
		ОбъектыКонтроля.Добавить(ДанныеОбъекта.Значение.ОбъектКонтроля);
		
	КонецЦикла;
	
	Возврат ОбъектыКонтроля;
	
КонецФункции

// Получает массив различных списков контроля по ключам РС "Объекты на контроле".
//
// Параметры:
//  ИзменяемыеСтрокиСписка - Массив - содержит ключи РС "Объекты на контроле".
//
// Возвращаемое значение:
//   Массив - списки контроля
//
Функция СпискиКонтроляПоОбъектамКонтроля(ИзменяемыеСтрокиСписка) Экспорт
	
	СпискиКонтроля = Новый Массив;
	
	Для Каждого ДанныеОбъекта Из ИзменяемыеСтрокиСписка Цикл
		
		СписокКонтроля = ДанныеОбъекта.Значение.СписокКонтроля;
		
		Если СпискиКонтроля.Найти(СписокКонтроля) = Неопределено Тогда
			СпискиКонтроля.Добавить(СписокКонтроля);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат СпискиКонтроля;
	
КонецФункции

// Получает есть ли среди переданных списков контроля список с вариантом ведения списка
// "Дата контроля назначается на объект контроля".
//
// Параметры:
//  МассивСписковКонтроля - Массив - содержит элементы справочника "Списки контроля".
//
// Возвращаемое значение:
//   Булево - 
//
Функция ЕстьСписокВМассивеВариантКонтроляПоДатеОбъекта(МассивСписковКонтроля) Экспорт
	
	Если МассивСписковКонтроля.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СпискиКонтроля.ВариантВеденияСписка = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияСпискаКонтроля.ДатаКонтроляНазначаетсяНаОбъектКонтроля)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьВариантКонтроляПоДатеОбъекта
	|ИЗ
	|	Справочник.СпискиКонтроля КАК СпискиКонтроля
	|ГДЕ
	|	СпискиКонтроля.Ссылка В(&СпискиКонтроля)";
	
	Запрос.УстановитьПараметр("СпискиКонтроля", МассивСписковКонтроля);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ЕстьВариантКонтроляПоДатеОбъекта;
	
КонецФункции

// Получает данные объектов, которые пользователь хочет поставить на контроль
//
// Параметры:
//  ОбъектыКонтроля - Массив - массив объектов контроля.
//  СписокКонтроля  - СправочникСсылка.СпискиКонтроля - список контроля, для которого выполняется постановка.
//
// Возвращаемое значение:
//   Массив Из Структура - содержит:
//    * ОбъектКонтроля        - СправочникСсылка - объект, который ставится на контроль.
//    * СтатусКонтроля        - Строка - текущий статус контроля.
//    * ПлановаяДатаОкончания - Дата - плановая дата завершения работ.
//    * Ответственный         - СправочникСсылка.Пользователи - ответственный за объект.
//    * ТехническийПроект     - СправочникСсылка.ТехническийПроект - технический проект объекта контроля.
//
Функция ДанныеОбъектовКонтроляДляПостановкиНаКонтроль(ОбъектыКонтроля, СписокКонтроля) Экспорт

	РезультатЗапроса      = РезультатЗапросаПоДаннымОбъектовКонтроля(ОбъектыКонтроля, СписокКонтроля);
	ВыборкаСтатусы        = РезультатЗапроса.ВыборкаСтатусы;
	ВыборкаДанныеОбъектов = РезультатЗапроса.ВыборкаДанныеОбъектов;
	
	СтатусыКонтроля        = Новый Соответствие;
	ОбъектыУжеНаКонтроле   = Новый Соответствие;
	ДанныеОбъектовКонтроля = Новый Массив;
	
	Пока ВыборкаСтатусы.Следующий() Цикл
	
		Если ВыборкаСтатусы.ИсторическаяЗапись Тогда
			ОбъектыУжеНаКонтроле.Вставить(ВыборкаСтатусы.ОбъектКонтроля, "СнятСКонтроля");
		Иначе
			ОбъектыУжеНаКонтроле.Вставить(ВыборкаСтатусы.ОбъектКонтроля, "НаКонтроле");
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого ОбъектКонтроля Из ОбъектыКонтроля Цикл
		
		СтатусКонтроля = ОбъектыУжеНаКонтроле.Получить(ОбъектКонтроля);
		
		Если СтатусКонтроля = Неопределено Тогда
			СтатусКонтроля = "НеНаКонтроле";
		КонецЕсли;
		
		ДанныеОбъекта = НовыйДанныеОбъектаПриПостановкеНаКонтроль();
		ДанныеОбъекта.ОбъектКонтроля = ОбъектКонтроля;
		ДанныеОбъекта.СтатусКонтроля = СтатусКонтроля;
		
		СтатусыКонтроля.Вставить(ОбъектКонтроля, СтатусКонтроля);
		
	КонецЦикла;
	
	Пока ВыборкаДанныеОбъектов.Следующий() Цикл
		
		СтатусКонтроля = СтатусыКонтроля.Получить(ВыборкаДанныеОбъектов.ОбъектКонтроля);
		
		ДанныеОбъектаКонтроля = НовыйДанныеОбъектаПриПостановкеНаКонтроль();
		
		ДанныеОбъектаКонтроля.ОбъектКонтроля = ВыборкаДанныеОбъектов.ОбъектКонтроля;
		ДанныеОбъектаКонтроля.СтатусКонтроля        = СтатусКонтроля;
		ДанныеОбъектаКонтроля.ПлановаяДатаОкончания = ВыборкаДанныеОбъектов.ПлановаяДатаОкончания;
		ДанныеОбъектаКонтроля.Ответственный         = ВыборкаДанныеОбъектов.Ответственный;
		ДанныеОбъектаКонтроля.ТехническийПроект     = ВыборкаДанныеОбъектов.ТехническийПроект;
		
		ДанныеОбъектовКонтроля.Добавить(ДанныеОбъектаКонтроля);
		
	КонецЦикла;
	
	Возврат ДанныеОбъектовКонтроля;

КонецФункции

// Формирует сообщения системы взаимодействия для напоминании о плановом контроле
// 
// Параметры:
//   СписокКонтроля - СправочникСсылка.СпискиКонтроля
//
Процедура СформироватьНапоминанияПоОбъектамКонтроля(СписокКонтроля) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФормированиеНапоминанийПоСпискамКонтроля);
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		                         УровеньЖурналаРегистрации.Ошибка,,,
		                         НСтр("ru = 'Система взаимодействия недоступна.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СписокКонтроля) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСпискаКонтроля = Справочники.СпискиКонтроля.ДанныеСпискаКонтроля(СписокКонтроля);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, ,,
		СтрШаблон(НСтр("ru = 'Начато регламентное формирование напоминаний по списку контроля: %1'"), ДанныеСпискаКонтроля.Наименование));
		
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА СпискиКонтроля.ВариантВеденияСписка = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияСпискаКонтроля.ДатаКонтроляНазначаетсяНаОбъектКонтроля)
	|				ТОГДА ОбъектыНаКонтроле.СледующаяДатаКонтроля 
	|			ИНАЧЕ СпискиКонтроля.ДатаСледующегоКонтроля
	|		КОНЕЦ) КАК КоличествоОбъектов
	|ИЗ
	|	РегистрСведений.ОбъектыНаКонтроле КАК ОбъектыНаКонтроле
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпискиКонтроля КАК СпискиКонтроля
	|		ПО ОбъектыНаКонтроле.СписокКонтроля = СпискиКонтроля.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА СпискиКонтроля.ВариантВеденияСписка = ЗНАЧЕНИЕ(Перечисление.ВариантыВеденияСпискаКонтроля.ДатаКонтроляНазначаетсяНаОбъектКонтроля)
	|				ТОГДА ОбъектыНаКонтроле.СледующаяДатаКонтроля <= &ТекущаяДата 
	|			ИНАЧЕ СпискиКонтроля.ДатаСледующегоКонтроля <= &ТекущаяДата
	|		КОНЕЦ
	|	И СпискиКонтроля.Ссылка = &СписокКонтроля
	|	И НЕ ОбъектыНаКонтроле.ИсторическаяЗапись";
	
	Запрос.УстановитьПараметр("ТекущаяДата",    НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ВладелецСписка", ДанныеСпискаКонтроля.ВладелецСписка);
	Запрос.УстановитьПараметр("СписокКонтроля", СписокКонтроля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий()
		И Выборка.КоличествоОбъектов > 0 Тогда
		
		Попытка
			
			ТекстСообщения = ТекстНапоминаниеСпискаКонтроля(Выборка.КоличествоОбъектов);
			Действия       = ДействияВНапоминаниеСпискаКонтроля(СписокКонтроля);
		
			РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(СписокКонтроля,
			                                                            ДанныеСпискаКонтроля.ВладелецСписка,
			                                                            ДанныеСпискаКонтроля.ВладелецСписка,
			                                                            НСтр("ru = 'Запланирован контроль'"),
			                                                            ТекстСообщения,
			                                                            Действия);
		Исключение
			
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось добавить напоминание по списку контроля ""%1""'"),
			                        ДанныеСпискаКонтроля.Наименование);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
			
		КонецПопытки;
	
	КонецЕсли;
		
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация,,, 
		СтрШаблон(НСтр("ru = 'Закончено регламентное формирование напоминаний по списку контроля: %1'"), ДанныеСпискаКонтроля.Наименование));
	
КонецПроцедуры

// Получает имя пользователя программы по ссылке справочника "Пользователи".
//
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - ссылка пользователя.
//
// Возвращаемое значение:
//   Строка - имя пользователя программы.
//
Функция ИмяПользователяИБ(Пользователь) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПользовательИБ.Имя;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФормированиеЭлементовНеобходимо()
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение",Метаданные.Справочники.СпискиКонтроля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СформироватьЭлементыФормыПоставитьНаКонтрольФормаСписка(Форма, СпискиДляВыводаКомандКонтроля)
	
	СпискиКонтроля = Форма.СпискиКонтроляСписок;
	
	Для Каждого СписокДляВыводаКомандКонтроля Из СпискиДляВыводаКомандКонтроля Цикл
		
		ЭлементГруппаФормы                = Форма.Элементы.Найти(СписокДляВыводаКомандКонтроля.ИмяГруппыФормы);
		ЭлементГруппаФормыКонтекстноеМеню = Форма.Элементы.Найти(СписокДляВыводаКомандКонтроля.ИмяГруппыКонтекстноеМеню);
		
		Если СпискиКонтроля.Количество() > 1 Тогда
			
			ЭлементПодменю = Форма.Элементы.Добавить("ПоставитьНаКонтрольПодменю_" + СписокДляВыводаКомандКонтроля.ИмяСписка,
			                                         Тип("ГруппаФормы"),
			                                         ЭлементГруппаФормы);
			
			ЭлементПодменю.Вид                = ВидГруппыФормы.Подменю;
			ЭлементПодменю.Картинка           = БиблиотекаКартинок.ОбъектНаКонтролеПодменю;
			ЭлементПодменю.Заголовок          = НСтр("ru = 'На контроль'");
			ЭлементПодменю.Отображение        = ОтображениеКнопки.КартинкаИТекст;
			ГруппаДобавленияКоманд            = ЭлементПодменю;
			ВариантОтображения                = ОтображениеКнопки.КартинкаИТекст;
			
			ЭлементПодменюКонтекстноеМеню  = Форма.Элементы.Добавить("ПоставитьНаКонтрольПодменюКонтекстноеМеню_" + СписокДляВыводаКомандКонтроля.ИмяСписка, 
			                                                         Тип("ГруппаФормы"),
			                                                         ЭлементГруппаФормыКонтекстноеМеню);
			
			ЭлементПодменюКонтекстноеМеню.Вид         = ВидГруппыФормы.Подменю;
			ЭлементПодменюКонтекстноеМеню.Картинка    = БиблиотекаКартинок.ОбъектНаКонтролеПодменю;
			ЭлементПодменюКонтекстноеМеню.Заголовок   = НСтр("ru = 'Поставить на контроль'");
			ЭлементПодменюКонтекстноеМеню.Отображение = ОтображениеКнопки.Картинка;
			ГруппаДобавленияКомандКомандноеМеню       = ЭлементПодменюКонтекстноеМеню;
			ВариантОтображения                        = ОтображениеКнопки.КартинкаИТекст;
			
		Иначе
			
			ГруппаДобавленияКоманд              = ЭлементГруппаФормы;
			ГруппаДобавленияКомандКомандноеМеню = ЭлементГруппаФормыКонтекстноеМеню;
			ВариантОтображения                  = ОтображениеКнопки.Картинка;
			
		КонецЕсли;
		
		Счетчик = 0;
		
		Для Каждого ДанныеСпискаКонтроля Из СпискиКонтроля Цикл
			
			ИмяКоманды                = "ПоставитьНаКонтроль_" + СписокДляВыводаКомандКонтроля.ИмяСписка +"_" + Строка(Счетчик);
			
			ЭлементФормы                = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаДобавленияКоманд);
			ЭлементФормыКонтекстноеМеню = Форма.Элементы.Добавить("ПоставитьНаКонтрольКонтекстноеМеню_" + СписокДляВыводаКомандКонтроля.ИмяСписка +"_" + Строка(Счетчик),
			                                                      Тип("КнопкаФормы"),
			                                                      ГруппаДобавленияКомандКомандноеМеню);
			
			Если СпискиКонтроля.Количество() > 1 Тогда
				
				ЗаголовокКоманды = ДанныеСпискаКонтроля.НаименованиеСписка;
				
			Иначе
				
				ЗаголовокКоманды = НСтр("ru = 'Поставить на контроль'");
				ЭлементФормы.Картинка                = БиблиотекаКартинок.ОбъектНаКонтролеПодменю;
				ЭлементФормыКонтекстноеМеню.Картинка = БиблиотекаКартинок.ОбъектНаКонтролеПодменю;
				
			КонецЕсли;
			
			ЭлементФормы.ИмяКоманды  = ИмяКоманды;
			ЭлементФормы.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
			ЭлементФормы.Отображение = ВариантОтображения;
			ЭлементФормы.Заголовок   = ЗаголовокКоманды;
			
			ЭлементФормыКонтекстноеМеню.ИмяКоманды  = ИмяКоманды;
			ЭлементФормыКонтекстноеМеню.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
			ЭлементФормыКонтекстноеМеню.Отображение = ВариантОтображения;
			ЭлементФормыКонтекстноеМеню.Заголовок   = ЗаголовокКоманды;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЭлементыФормыПоставитьНаКонтрольФормаЭлемента(Форма, ЭлементГруппаФормы)
	
	СпискиКонтроля = Форма.СпискиКонтроля;
	
	Если СпискиКонтроля.Количество() > 1 Тогда
		
		ЭлементПодменю = Форма.Элементы.Добавить("ПоставитьНаКонтрольПодменю", Тип("ГруппаФормы"), ЭлементГруппаФормы);
		ЭлементПодменю.Заголовок = НСтр("ru = 'Поставить на контроль'");
		ЭлементПодменю.Вид         = ВидГруппыФормы.Подменю;
		ЭлементПодменю.Картинка    = БиблиотекаКартинок.ОбъектНаКонтролеПодменю;
		ГруппаДобавленияКоманд     = ЭлементПодменю;
		ЭлементПодменю.Отображение = ОтображениеКнопки.Картинка;
		
	Иначе
		
		ГруппаДобавленияКоманд = ЭлементГруппаФормы;
		
	КонецЕсли;
	
	Счетчик = 0;
	
	Для Каждого ДанныеСпискаКонтроля Из СпискиКонтроля Цикл
		
		ИмяКоманды = "ПоставитьНаКонтроль_" + Строка(Счетчик);
		
		Если СпискиКонтроля.Количество() > 1 Тогда
			ЗаголовокКоманды = ДанныеСпискаКонтроля.НаименованиеСписка;
		Иначе
			ЗаголовокКоманды = НСтр("ru = 'Поставить на контроль'");
		КонецЕсли;
		
		ЭлементФормы = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаДобавленияКоманд);
		ЭлементФормы.ИмяКоманды                     = ИмяКоманды;
		ЭлементФормы.Вид                            = ВидКнопкиФормы.ОбычнаяКнопка;
		ЭлементФормы.Отображение                    = ОтображениеКнопки.КартинкаИТекст;
		ЭлементФормы.Заголовок                      = ДанныеСпискаКонтроля.НаименованиеСписка;
		ЭлементФормы.Заголовок                      = ЗаголовокКоманды;
		
		Если ДанныеСпискаКонтроля.СтатусКонтроля = "НаКонтроле" Тогда
			КартинкаКоманды = БиблиотекаКартинок.ОбъектНаКонтроле;
		ИначеЕсли ДанныеСпискаКонтроля.СтатусКонтроля = "СнятСКонтроля" Тогда
			КартинкаКоманды = БиблиотекаКартинок.ОбъектСнятСКонтроля;
		ИначеЕсли ДанныеСпискаКонтроля.СтатусКонтроля = "НеНаКонтроле" Тогда
			КартинкаКоманды = БиблиотекаКартинок.ПоставитьНаКонтроль;
		КонецЕсли;
		
		ЭлементФормы.Картинка = КартинкаКоманды;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначенияРеквизитовКонтроляВФорме(СпискиКонтроляРеквизит, СпискиКонтроля, УчитыватьСтатус = Истина)
	
	СпискиКонтроляРеквизит.Очистить();
	
	Для Каждого ДанныеСпискаКонтроля Из СпискиКонтроля Цикл
		
		НоваяСтрока = СпискиКонтроляРеквизит.Добавить();
		НоваяСтрока.СписокКонтроля     = ДанныеСпискаКонтроля.СписокКонтроля;
		НоваяСтрока.НаименованиеСписка = ДанныеСпискаКонтроля.НаименованиеСписка;
		
		Если УчитыватьСтатус Тогда
			НоваяСтрока.СтатусКонтроля     = ДанныеСпискаКонтроля.СтатусКонтроля;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормыПоставитьНаКонтрольФормаСписка(Форма, СпискиКонтроля, СпискиДляВыводаКомандКонтроля)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СпискиКонтроляСписок") Тогда
	
		РеквизитТаблица = Новый РеквизитФормы("СпискиКонтроляСписок" ,Новый ОписаниеТипов("ТаблицаЗначений"));
		ДобавляемыеРеквизиты.Добавить(РеквизитТаблица);
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СписокКонтроля", Новый ОписаниеТипов("СправочникСсылка.СпискиКонтроля"), "СпискиКонтроляСписок"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НаименованиеСписка", ОбщегоНазначения.ОписаниеТипаСтрока(150), "СпискиКонтроляСписок"));
	
	КонецЕсли;
	
	Счетчик = 0;
	
	Для Каждого ДанныеСпискаКонтроля Из СпискиКонтроля Цикл
		
		Для Каждого СписокДляВыводаКомандКонтроля Из СпискиДляВыводаКомандКонтроля Цикл
		
			Команда = Форма.Команды.Добавить("ПоставитьНаКонтроль_" + СписокДляВыводаКомандКонтроля.ИмяСписка +"_" + Строка(Счетчик));
			Команда.Действие    = "Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль";
			Команда.Отображение = ОтображениеКнопки.Картинка;
		
		КонецЦикла;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормыПоставитьНаКонтрольФормаЭлемента(Форма, СпискиКонтроля)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	РеквизитТаблица = Новый РеквизитФормы("СпискиКонтроля" ,Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблица);
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СписокКонтроля", Новый ОписаниеТипов("СправочникСсылка.СпискиКонтроля"), "СпискиКонтроля"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтатусКонтроля", ОбщегоНазначения.ОписаниеТипаСтрока(150), "СпискиКонтроля"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НаименованиеСписка", ОбщегоНазначения.ОписаниеТипаСтрока(150), "СпискиКонтроля"));
	
	Счетчик = 0;
	
	Для Каждого ДанныеСпискаКонтроля Из СпискиКонтроля Цикл
		
		Команда = Форма.Команды.Добавить("ПоставитьНаКонтроль_" + Строка(Счетчик));
		Команда.Действие    = "Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль";
		Команда.Отображение = ОтображениеКнопки.Картинка;
		
		Команда.Подсказка  = ОбъектыНаКонтролеКлиентСервер.ТекстПодсказкиКомандыЭлементаФормы(ДанныеСпискаКонтроля.СтатусКонтроля);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Функция СпискиКонтроляОбъектаПользователем(ОбъектКонтроля, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОбъектыНаКонтроле.СписокКонтроля КАК СписокКонтроля,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ ОбъектыНаКонтроле.ИсторическаяЗапись
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ)                       КАК ЕстьНеисторическаяЗапись
	|ПОМЕСТИТЬ КонтролируетсяВСписках
	|ИЗ
	|	РегистрСведений.ОбъектыНаКонтроле КАК ОбъектыНаКонтроле
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпискиКонтроля КАК СпискиКонтроля
	|		ПО ОбъектыНаКонтроле.СписокКонтроля = СпискиКонтроля.Ссылка
	|ГДЕ
	|	ОбъектыНаКонтроле.ОбъектКонтроля = &ОбъектКонтроля
	|	И СпискиКонтроля.ВладелецСписка = &ВладелецСписка
	|	И СпискиКонтроля.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыНаКонтроле.СписокКонтроля
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпискиКонтроля.Ссылка       КАК Ссылка,
	|	СпискиКонтроля.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВсеДействующиеСпискиКонтроляПользователя
	|ИЗ
	|	Справочник.СпискиКонтроля КАК СпискиКонтроля
	|ГДЕ
	|	СпискиКонтроля.ВладелецСписка = &ВладелецСписка
	|	И СпискиКонтроля.Действует
	|	И НЕ СпискиКонтроля.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеДействующиеСпискиКонтроляПользователя.Ссылка       КАК СписокКонтроля,
	|	ВЫБОР
	|		КОГДА КонтролируетсяВСписках.ЕстьНеисторическаяЗапись ЕСТЬ NULL
	|			ТОГДА ""НеНаКонтроле""
	|		КОГДА КонтролируетсяВСписках.ЕстьНеисторическаяЗапись
	|			ТОГДА ""НаКонтроле""
	|		КОГДА НЕ КонтролируетсяВСписках.ЕстьНеисторическаяЗапись ЕСТЬ NULL
	|			ТОГДА ""СнятСКонтроля""
	|	КОНЕЦ                                                 КАК СтатусКонтроля,
	|	ВсеДействующиеСпискиКонтроляПользователя.Наименование КАК НаименованиеСписка
	|ИЗ
	|	ВсеДействующиеСпискиКонтроляПользователя КАК ВсеДействующиеСпискиКонтроляПользователя
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтролируетсяВСписках КАК КонтролируетсяВСписках
	|		ПО ВсеДействующиеСпискиКонтроляПользователя.Ссылка.Ссылка = КонтролируетсяВСписках.СписокКонтроля";
	
	Запрос.УстановитьПараметр("ОбъектКонтроля", ОбъектКонтроля);
	Запрос.УстановитьПараметр("ВладелецСписка", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СпискиКонтроля = Новый Массив;
	
	Если Выборка.Количество() > 0 Тогда
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеСпискаКонтроля = Новый Структура;
			ДанныеСпискаКонтроля.Вставить("СписокКонтроля",     Выборка.СписокКонтроля);
			ДанныеСпискаКонтроля.Вставить("СтатусКонтроля",     Выборка.СтатусКонтроля);
			ДанныеСпискаКонтроля.Вставить("НаименованиеСписка", Выборка.НаименованиеСписка);
			
			СпискиКонтроля.Добавить(ДанныеСпискаКонтроля);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СпискиКонтроля;
	
КонецФункции

Функция ЗапланированныеДатыОкончанияОбъектов(ОбъектыКонтроля)
	
	МассивОшибок              = Новый Массив;
	МассивЗадач               = Новый Массив;
	МассивТехническихПроектов = Новый Массив;
	МассивВеток               = Новый Массив;
	
	Для Каждого ОбъектКонтроля Из ОбъектыКонтроля Цикл
		
		Если ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.Ошибки") Тогда
			
			МассивОшибок.Добавить(ОбъектКонтроля);
			
		ИначеЕсли ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			МассивЗадач.Добавить(ОбъектКонтроля);
			
		ИначеЕсли ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			МассивТехническихПроектов.Добавить(ОбъектКонтроля);
			
		ИначеЕсли ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.Ветки") Тогда
			
			МассивВеток.Добавить(ОбъектКонтроля);
		
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса = Планирование.РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок,
	                                                                         МассивЗадач,
	                                                                         МассивТехническихПроектов,
	                                                                         МассивВеток);
	
	ОбъектыДанные = Новый Соответствие;
	ВыборкаОбъектыСтатусы = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаОбъектыСтатусы.Следующий() Цикл
		
		ОбъектыДанные.Вставить(ВыборкаОбъектыСтатусы.Ссылка, ВыборкаОбъектыСтатусы.СрокВыполнения);
		
	КонецЦикла;
	
	Возврат ОбъектыДанные;
	
КонецФункции

Функция НовыйДанныеОбъектаПриПостановкеНаКонтроль()
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("ОбъектКонтроля",        Неопределено);
	ДанныеОбъекта.Вставить("СтатусКонтроля",        "");
	ДанныеОбъекта.Вставить("ПлановаяДатаОкончания", Дата(1, 1, 1));
	ДанныеОбъекта.Вставить("Ответственный",         Справочники.Пользователи.ПустаяСсылка());
	ДанныеОбъекта.Вставить("ТехническийПроект",     Справочники.ТехническиеПроекты.ПустаяСсылка());
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция РезультатЗапросаПоДаннымОбъектовКонтроля(ОбъектыКонтроля, СписокКонтроля)
	
	ТекстЗапросаОбъединение      = "";
	ТекстЗапросаВременныеТаблицы = "";
	НомерЗапросаВПакете          = 1;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОбъектыНаКонтроле.ОбъектКонтроля              КАК ОбъектКонтроля,
	|	МИНИМУМ(ОбъектыНаКонтроле.ИсторическаяЗапись) КАК ИсторическаяЗапись
	|ИЗ
	|	РегистрСведений.ОбъектыНаКонтроле КАК ОбъектыНаКонтроле
	|ГДЕ
	|	ОбъектыНаКонтроле.ОбъектКонтроля В(&ОбъектыКонтроля)
	|	И ОбъектыНаКонтроле.СписокКонтроля = &СписокКонтроля
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыНаКонтроле.ОбъектКонтроля
	|;
	|/////////////////////////////////////////////////////////////////////
	|";
	
	Запрос.УстановитьПараметр("ОбъектыКонтроля", ОбъектыКонтроля);
	Запрос.УстановитьПараметр("СписокКонтроля", СписокКонтроля);
	
	ОбъектыПоТипам = ОбъектыКонтроляПоТипам(ОбъектыКонтроля);
	
	Если ОбъектыПоТипам.Ветки.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивВеток", ОбъектыПоТипам.Ветки);
		
		ДополнитьТекстыЗапросаДанныеОбъектов(ДанныеЗапросаДанныеВетки(),
		                                     ТекстЗапросаОбъединение,
		                                     ТекстЗапросаВременныеТаблицы,
		                                     НомерЗапросаВПакете);
		
	КонецЕсли;
	
	Если ОбъектыПоТипам.ЗадачиПроцесса.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивЗадач", ОбъектыПоТипам.ЗадачиПроцесса);
		
		ДополнитьТекстыЗапросаДанныеОбъектов(ДанныеЗапросаДанныеЗадачиПроцесса(),
		                                     ТекстЗапросаОбъединение,
		                                     ТекстЗапросаВременныеТаблицы,
		                                     НомерЗапросаВПакете);
		
	КонецЕсли;
	
	Если ОбъектыПоТипам.ТехническиеПроекты.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивТехпроектов", ОбъектыПоТипам.ТехническиеПроекты);
		
		ДополнитьТекстыЗапросаДанныеОбъектов(ДанныеЗапросаДанныеТехПроекты(),
		                                     ТекстЗапросаОбъединение,
		                                     ТекстЗапросаВременныеТаблицы,
		                                     НомерЗапросаВПакете);
		
	КонецЕсли;
	
	Если ОбъектыПоТипам.Ошибки.Количество() > 0 Тогда
		
		Запрос.УстановитьПараметр("МассивОшибок", ОбъектыПоТипам.Ошибки);
		
		ДополнитьТекстыЗапросаДанныеОбъектов(ДанныеЗапросаДанныеОшибки(),
		                                     ТекстЗапросаОбъединение,
		                                     ТекстЗапросаВременныеТаблицы,
		                                     НомерЗапросаВПакете);
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВременныеТаблицы + ТекстЗапросаОбъединение;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РезультатВыполненияЗапроса = Новый Структура;
	РезультатВыполненияЗапроса.Вставить("ВыборкаСтатусы",        РезультатЗапроса[0].Выбрать());
	РезультатВыполненияЗапроса.Вставить("ВыборкаДанныеОбъектов", РезультатЗапроса[НомерЗапросаВПакете].Выбрать());
	
	Возврат РезультатВыполненияЗапроса;
	
КонецФункции

Процедура ДополнитьТекстыЗапросаДанныеОбъектов(ДанныеЗапроса, ТекстЗапросаОбъединение, ТекстЗапросаВременныеТаблицы, НомерЗапросаВПакете)
	
	Если Не ПустаяСтрока(ТекстЗапросаОбъединение) Тогда
		
		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
		
	КонецЕсли;
	
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + ДанныеЗапроса.ТекстЗапросОсновныеДанные;
	
	Если ДанныеЗапроса.КоличествоВременныхТаблиц > 0  Тогда
		
		НомерЗапросаВПакете = НомерЗапросаВПакете + ДанныеЗапроса.КоличествоВременныхТаблиц;
		ТекстЗапросаВременныеТаблицы = ТекстЗапросаВременныеТаблицы + ДанныеЗапроса.ТекстЗапросаВременныеТаблицы;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектыКонтроляПоТипам(ОбъектыКонтроля)
	
	ОбъектыКонтроляПоТипам = Новый Структура;
	ОбъектыКонтроляПоТипам.Вставить("Ветки",              Новый Массив);
	ОбъектыКонтроляПоТипам.Вставить("ЗадачиПроцесса",     Новый Массив);
	ОбъектыКонтроляПоТипам.Вставить("ТехническиеПроекты", Новый Массив);
	ОбъектыКонтроляПоТипам.Вставить("Ошибки",             Новый Массив);
	
	Для Каждого ОбъектКонтроля Из ОбъектыКонтроля Цикл
		
		Если ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.Ветки") Тогда
			
			ОбъектыКонтроляПоТипам.Ветки.Добавить(ОбъектКонтроля);
			
		ИначеЕсли ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			ОбъектыКонтроляПоТипам.ЗадачиПроцесса.Добавить(ОбъектКонтроля);
			
		ИначеЕсли ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			ОбъектыКонтроляПоТипам.ТехническиеПроекты.Добавить(ОбъектКонтроля);
			
		ИначеЕсли ТипЗнч(ОбъектКонтроля) = Тип("СправочникСсылка.Ошибки") Тогда
			
			ОбъектыКонтроляПоТипам.Ошибки.Добавить(ОбъектКонтроля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектыКонтроляПоТипам;
	
КонецФункции

Функция ДанныеЗапросаДанныеТехПроекты()
	
	ДанныеЗапроса = НовыйДанныеЗапросаОбъектаКонтроля();
	
	ДанныеЗапроса.ТекстЗапросОсновныеДанные = "
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка КАК ОбъектКонтроля,
	|	ТехническиеПроекты.Ответственный КАК Ответственный,
	|	ТехническиеПроекты.ПлановаяДатаОкончания КАК ПлановаяДатаОкончания,
	|	ТехническиеПроекты.Ссылка КАК ТехническийПроект
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ссылка В(&МассивТехпроектов)";
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ДанныеЗапросаДанныеЗадачиПроцесса()
	
	ДанныеЗапроса = НовыйДанныеЗапросаОбъектаКонтроля();
	
	ДанныеЗапроса.ТекстЗапросОсновныеДанные = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка               КАК ОбъектКонтроля,
	|	ЗадачиПроцесса.Исполнитель          КАК Ответственный,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК ПлановаяДатаОкончания,
	|	ЗадачиПроцесса.Предмет              КАК ТехническийПроект
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)
	|	И ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты";
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ДанныеЗапросаДанныеВетки()
	
	ДанныеЗапроса = НовыйДанныеЗапросаОбъектаКонтроля();
	
	ДанныеЗапроса.ТекстЗапросаВременныеТаблицы ="
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка КАК ТехПроект,
	|	ТехническиеПроекты.Ветка  КАК Ветка
	|ПОМЕСТИТЬ ВеткиТехПроекты
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Ветка В(&МассивВеток)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВеткиТехПроекты.Ветка                           КАК Ветка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВеткиТехПроекты.ТехПроект) КАК ТехПроект
	|ПОМЕСТИТЬ ВеткиСопоставленныеТехПроекту
	|ИЗ
	|	ВеткиТехПроекты КАК ВеткиТехПроекты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВеткиТехПроекты.Ветка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВеткиТехПроекты.ТехПроект) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ДанныеЗапроса.КоличествоВременныхТаблиц = 2;
	
	ДанныеЗапроса.ТекстЗапросОсновныеДанные ="
	|ВЫБРАТЬ
	|	Ветки.Ссылка КАК ОбъектКонтроля,
	|	Ветки.Ответственный                                                                       КАК Ответственный,
	|	ДАТАВРЕМЯ(1, 1, 1)                                                                        КАК ПлановаяДатаОкончания,
	|	ЕСТЬNULL(ВеткиТехПроекты.ТехПроект, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)) КАК ТехническийПроект
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВеткиСопоставленныеТехПроекту КАК ВеткиСопоставленныеТехПроекту
	|		ПО (ВеткиСопоставленныеТехПроекту.Ветка = Ветки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВеткиТехПроекты КАК ВеткиТехПроекты
	|		ПО (ВеткиСопоставленныеТехПроекту.Ветка = ВеткиТехПроекты.Ветка)
	|ГДЕ Ветки.Ссылка В(&МассивВеток) ";
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция ДанныеЗапросаДанныеОшибки()
	
	ДанныеЗапроса = НовыйДанныеЗапросаОбъектаКонтроля();
	
	ДанныеЗапроса.ТекстЗапросаВременныеТаблицы ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ошибки.ВеткаОбнаружения КАК ВеткаОбнаружения,
	|	Ошибки.Ссылка           КАК Ошибка
	|ПОМЕСТИТЬ ОшибкиВеткиОбнаружения
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка В (&МассивОшибок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОшибкиВеткиОбнаружения.Ошибка КАК Ошибка,
	|	ТехническиеПроекты.Ссылка     КАК ТехническийПроект
	|ПОМЕСТИТЬ ОшибкиТехПроекты
	|ИЗ
	|	ОшибкиВеткиОбнаружения КАК ОшибкиВеткиОбнаружения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ОшибкиВеткиОбнаружения.ВеткаОбнаружения = ТехническиеПроекты.Ветка
	|ГДЕ
	|	НЕ ТехническиеПроекты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибкиТехПроекты.Ошибка                                  КАК Ошибка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОшибкиТехПроекты.ТехническийПроект) КАК ТехническийПроект
	|ПОМЕСТИТЬ ОшибкиСопоставленныеТехПроекту
	|ИЗ
	|	ОшибкиТехПроекты КАК ОшибкиТехПроекты
	|
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиТехПроекты.Ошибка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОшибкиТехПроекты.ТехническийПроект) = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	ДанныеЗапроса.КоличествоВременныхТаблиц = 3;
	
	ДанныеЗапроса.ТекстЗапросОсновныеДанные = "
	|ВЫБРАТЬ
	|	Ошибки.Ссылка                                                                                      КАК ОбъектКонтроля,
	|	Ошибки.КомуНаправлена                                                                              КАК Ответственный,
	|	Ошибки.СрокОтработки                                                                               КАК ПлановаяДатаОкончания,
	|	ЕСТЬNULL(ОшибкиТехПроекты.ТехническийПроект, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)) КАК ТехническийПроект
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОшибкиСопоставленныеТехПроекту КАК ОшибкиСопоставленныеТехПроекту
	|		ПО (ОшибкиСопоставленныеТехПроекту.Ошибка = Ошибки.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОшибкиТехПроекты КАК ОшибкиТехПроекты
	|		ПО (ОшибкиСопоставленныеТехПроекту.Ошибка = ОшибкиТехПроекты.Ошибка)
	|ГДЕ Ошибки.Ссылка В (&МассивОшибок)";
	
	Возврат ДанныеЗапроса;
КонецФункции

Функция НовыйДанныеЗапросаОбъектаКонтроля()
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("ТекстЗапросаВременныеТаблицы", "");
	ДанныеЗапроса.Вставить("КоличествоВременныхТаблиц",    0);
	ДанныеЗапроса.Вставить("ТекстЗапросОсновныеДанные",    "");
	
	Возврат ДанныеЗапроса;
	
КонецФункции

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Объекты на контроле'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ТекстНапоминаниеСпискаКонтроля(КоличествоОбъектов)
	
	ТекстСообщения = СтрШаблон(НСтр("ru='Есть запланированные на сегодня к контролю объекты в количестве - %1.'"), КоличествоОбъектов);
	
	Возврат ТекстСообщения;
	
КонецФункции

Функция ДействияВНапоминаниеСпискаКонтроля(СписокКонтроля)
	
	УникальныйИдентификаторСписка = СписокКонтроля.УникальныйИдентификатор();
	
	Действия = Новый СписокЗначений;
	Действия.Добавить(ОбъектыНаКонтролеКлиентСервер.ИмяКомандыПереходаИзСообщенияСистемыВзаимодействия() + Строка(УникальныйИдентификаторСписка), 
	                  НСтр("ru='Перейти к контролю объектов'"));
	
	Возврат Действия;
	
КонецФункции


#КонецОбласти



