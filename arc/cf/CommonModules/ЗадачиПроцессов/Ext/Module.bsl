////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции подсистемы "Задачи процессов"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет перерасчет всех состояний по предмету
//
// Параметры:
//  Предмет              - ОпределяемыйТип.ПредметПроцесса - предмет, для которого будет выполнен перерасчет задач
//  УдалятьСтарыеЗаписи  - Булево - признак того, что перед расчетом требуется удалить старые записи
//
Процедура ВыполнитьПерерасчетСостоянийПоПредмету(Предмет, УдалятьСтарыеЗаписи = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УдалятьСтарыеЗаписи Тогда
		РегистрыСведений.ИтогиСогласованияЗадачРесурсов.УдалитьЗаписиПоПредмету(Предмет);
		РегистрыСведений.СостоянияЗадачПроцессов.УдалитьЗаписиПоПредмету(Предмет);
		РегистрыСведений.ЭтапыПроцесса.УдалитьЗаписиПоПредмету(Предмет);
	КонецЕсли;
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоПредмету(Предмет, Неопределено);
	РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьМаксимальныйСтатусЗадачПоПредмету(Предмет);
	РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьЗонуЗадачПоПредмету(Предмет);
	РегистрыСведений.СостоянияЗадачПроцессов.УпорядочитьЗадачиПоПредмету(Предмет);
	РегистрыСведений.ЭтапыПроцесса.РасчитатьЭтапыПроцессаПоПредмету(Предмет);
	
КонецПроцедуры

// Формирует информацию о текущем этапе процесса
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметПроцесса - предмет, для которого получается информация о текущем этапе процесса
//
// Возвращаемое значение:
//   Структура - содержит:
//    * ТекущийЭтапПроцесса  - СправочникСсылка.ЗадачиПроцесса - Задача верхнего уровня, созданная по шаблону, которая выполняется сейчас.
//    * КрайняяДатаОкончания - Дата - крайняя дата окончания текущего этапа.
//    * НаименованиеЭтапа    - Строка - наименование текущего этапа.
//    * НаименованиеШаблона  - Строка - наименование шаблона процесса.
//    * Зона                 - ПеречислениеСсылка.ЗоныЗадач - зона соблюдения сроков текущего этапа.
//
Функция ДанныеТекущегоЭтапаПроцесса(Предмет) Экспорт

	ДанныеЭтапа = Новый Структура;
	ДанныеЭтапа.Вставить("ТекущийЭтапПроцесса" , Неопределено);
	ДанныеЭтапа.Вставить("КрайняяДатаОкончания", Неопределено);
	ДанныеЭтапа.Вставить("НаименованиеЭтапа"   , Неопределено);
	ДанныеЭтапа.Вставить("НаименованиеШаблона" , Неопределено);
	ДанныеЭтапа.Вставить("Зона"                , Неопределено);
	
	Если ЗначениеЗаполнено(Предмет) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыПроцесса.ТекущийЭтапПроцесса                                                     КАК ТекущийЭтапПроцесса,
		|	ЭтапыПроцесса.КрайняяДатаОкончания                                                    КАК КрайняяДатаОкончания,
		|	ЕСТЬNULL(ЗадачиШаблонаПроцесса.Наименование, """")                                    КАК НаименованиеЭтапа,
		|	ЕСТЬNULL(СостоянияЗадачПроцессов.Зона, ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.ПустаяСсылка)) КАК Зона,
		|	ЕСТЬNULL(ШаблоныПроцесса.Наименование, """")                                          КАК НаименованиеШаблона
		|ИЗ
		|	РегистрСведений.ЭтапыПроцесса КАК ЭтапыПроцесса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиШаблонаПроцесса КАК ЗадачиШаблонаПроцесса
		|		ПО ЭтапыПроцесса.ТекущийЭтапПроцесса = ЗадачиШаблонаПроцесса.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|		ПО (ЗадачиШаблонаПроцесса.Ссылка = ЗадачиПроцесса.ЗадачаШаблона)
		|			И (ЗадачиПроцесса.Предмет = &Предмет)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
		|		ПО (ЗадачиПроцесса.Ссылка = СостоянияЗадачПроцессов.ЗадачаПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныПроцесса КАК ШаблоныПроцесса
		|		ПО ЗадачиШаблонаПроцесса.Владелец = ШаблоныПроцесса.Ссылка
		|
		|ГДЕ
		|	ЭтапыПроцесса.ЗадачаПроцесса = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
		|	И ЭтапыПроцесса.Предмет = &Предмет";
		
		Запрос.УстановитьПараметр("Предмет", Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ДанныеЭтапа.ТекущийЭтапПроцесса  = Выборка.ТекущийЭтапПроцесса;
			ДанныеЭтапа.КрайняяДатаОкончания = Выборка.КрайняяДатаОкончания;
			ДанныеЭтапа.НаименованиеЭтапа    = Выборка.НаименованиеЭтапа;
			ДанныеЭтапа.НаименованиеШаблона  = Выборка.НаименованиеШаблона;
			ДанныеЭтапа.Зона                 = Выборка.Зона;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДанныеЭтапа;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Устанавливает параметры динамического списка задач
//
// Параметры:
//  Список                  - ДинамическийСписок                       - список, для которого устанавливаются параметры.
//  ВидСогласуемогоРесурса  - СправочникСсылка.ВидыСогласуемыхРесурсов - для которого выводится информация в списке по согласованию.
//
Процедура УстановитьПараметрыДинамическогоСпискаЗадач(Список, ВидСогласуемогоРесурса) Экспорт

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"СтрокаПлановая",    НСтр("ru = '(план)'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"СтрокаФактическая", НСтр("ru = '(факт)'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"СтрокаПустая",      "");
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ТекущаяДата",       НачалоДня(ТекущаяДатаСеанса()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"СогласуемыйРесурс", ВидСогласуемогоРесурса);
	
КонецПроцедуры

// Изменяет вид ресурс, ход согласования по которому отображается в списке.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//  ИмяКоманды         - Строка - имя выполняемой команды.
//  МассивИменСписков  - Массив - массив имен динамических списков задач, которые находятся в форме.
//
Процедура ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Форма, ИмяКоманды, МассивИменСписков = Неопределено) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИмяКоманды", ИмяКоманды);
	
	НайденныеСтроки = Форма.ТаблицаСогласуемыхРесурсов.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРесурса = НайденныеСтроки[0];
	
	ОтображаемХодСогласованияПо = ДанныеРесурса.СогласуемыйРесурс;
	Если Не ЗначениеЗаполнено(ОтображаемХодСогласованияПо) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтображаемХодСогласованияПо = Форма.ВидСогласуемогоРесурсаДляВывода Тогда
		
		Форма.ВидСогласуемогоРесурсаДляВывода = Неопределено;
		Форма.Элементы[ИмяКоманды].Пометка = Ложь;
		
	Иначе
		
		Если Форма.ВидСогласуемогоРесурсаДляВывода <> Неопределено Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("СогласуемыйРесурс", Форма.ВидСогласуемогоРесурсаДляВывода);
			
			НайденныеСтроки = Форма.ТаблицаСогласуемыхРесурсов.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				
				Форма.Элементы[НайденныеСтроки[0].ИмяКоманды].Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ВидСогласуемогоРесурсаДляВывода = ОтображаемХодСогласованияПо;
		Форма.Элементы[ИмяКоманды].Пометка = Истина;
		
	КонецЕсли;
	
	ЗадачиПроцессовКлиентСервер.СформироватьЗаголовокПодменюПоВидуРесурса(Форма);
	
	ОбработатьМассивИменСписков(МассивИменСписков);
	
	Для Каждого ИмяСписка Из МассивИменСписков Цикл
	
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[ИмяСписка],
		                                                                   "СогласуемыйРесурс",
		                                                                   Форма.ВидСогласуемогоРесурсаДляВывода);
	
	КонецЦикла;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РесурсПоКоторомуОтображаетсяХодСогласования",
	                                                 "НастройкиПользователя",
	                                                 Форма.ВидСогласуемогоРесурсаДляВывода);
	
КонецПроцедуры

// Изменяет вид плана занятости, ход планирования по которому отображается в списке задач.
//
// Параметры:
//  Форма              - ФормаКлиентскогоПриложения - форма, в которой выполняется команда.
//  ИмяКоманды         - Строка - имя выполняемой команды.
//  МассивИменСписков  - Массив - массив имен динамических списков задач, которые находятся в форме.
//
Процедура ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(Форма, ИмяКоманды, ПараметрыНастроек) Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИмяКоманды", ИмяКоманды);
	
	НайденныеСтроки = Форма.ПланыЗанятости.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВидаПлана = НайденныеСтроки[0];
	
	ВыводимПоВидуПланаЗанятости = ДанныеВидаПлана.ВидПлана;
	Если Не ЗначениеЗаполнено(ВыводимПоВидуПланаЗанятости) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыводимПоВидуПланаЗанятости = Форма.ВидПланаЗанятостиДляВывода Тогда
		
		Форма.ВидПланаЗанятостиДляВывода   = Неопределено;
		Форма.Элементы[ИмяКоманды].Пометка = Ложь;
		УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, Неопределено, ПараметрыНастроек);
		
	Иначе
		
		Если Форма.ВидПланаЗанятостиДляВывода <> Неопределено Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("ВидПлана", Форма.ВидПланаЗанятостиДляВывода);
			
			НайденныеСтроки = Форма.ПланыЗанятости.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() <> 0 Тогда
				
				Форма.Элементы[НайденныеСтроки[0].ИмяКоманды].Пометка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ВидПланаЗанятостиДляВывода = ВыводимПоВидуПланаЗанятости;
		Форма.Элементы[ИмяКоманды].Пометка = Истина;
		УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, ДанныеВидаПлана, ПараметрыНастроек);
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВидПланаПоКоторомуВыводятсяДанныеДляЗадач",
		                                                 "НастройкиПользователя",
		                                                 Форма.ВидПланаЗанятостиДляВывода);
		
	КонецЕсли;
	
	ЗадачиПроцессовКлиентСервер.СформироватьЗаголовокПодменюПоВидуПлана(Форма);
	
КонецПроцедуры

// Устаноавливает заголовок элемента формы по типу предмета.
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметПроцесса - предмет, для которого выводится заголовок.
//  Элемент - ПолеФормы                       - элемент, у которого будет установлен заголовок.
//
Процедура УстановитьЗаголовокПредмета(Предмет, Элемент) Экспорт
	
	МетаданныеПредмета = Метаданные.НайтиПоТипу(ТипЗнч(Предмет));
	Если МетаданныеПредмета <> Неопределено Тогда
		Элемент.Заголовок = МетаданныеПредмета.ПредставлениеОбъекта;
	КонецЕсли;
	
КонецПроцедуры

// Формирует информацию о шаблоне процесса, который используется для предмета
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметПроцесса - предмет, для которого получается информация о шаблоне.
//
// Возвращаемое значение:
//   Структура - содержит:
//    * ВидыСогласуемыхРесурсов  - СписокЗначений - согласуемые ресурсы.
//    * Ответственный - СправочникСсылка.Пользователи - ответственный за шаблон.
//    * ШаблонПроцесса    - СправочникСсылка.ШаблоныПроцесса - используемый шаблон.
//    * ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона   - Булево - признак того, что нельзя создавать задачи, не подчиненные задачам шаблона.
//    * ЗапретитьПереименованиеЗадачСозданныхПоШаблону - Булево - признак того, что нельзя переименовывать задачи, созданные по шаблону.
//
Функция ДанныеШаблонаПоПредмету(Предмет) Экспорт
	
	ДанныеШаблона = Новый Структура;
	ДанныеШаблона.Вставить("ВидыСогласуемыхРесурсов",                        Новый СписокЗначений);
	ДанныеШаблона.Вставить("Ответственный",                                  Справочники.Пользователи.ПустаяСсылка());
	ДанныеШаблона.Вставить("ШаблонПроцесса",                                 Справочники.ШаблоныПроцесса.ПустаяСсылка());
	ДанныеШаблона.Вставить("ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона",   Ложь);
	ДанныеШаблона.Вставить("ЗапретитьПереименованиеЗадачСозданныхПоШаблону", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭтапыПроцесса.ШаблонПроцесса КАК ШаблонПроцесса
	|ПОМЕСТИТЬ ШаблоныПроцесса
	|ИЗ
	|	РегистрСведений.ЭтапыПроцесса КАК ЭтапыПроцесса
	|ГДЕ
	|	ЭтапыПроцесса.Предмет = &Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШаблоныПроцессаВидыСогласуемыхРесурсов.СогласуемыйРесурс КАК СогласуемыйРесурс
	|ИЗ
	|	Справочник.ШаблоныПроцесса.ВидыСогласуемыхРесурсов КАК ШаблоныПроцессаВидыСогласуемыхРесурсов
	|ГДЕ
	|	ШаблоныПроцессаВидыСогласуемыхРесурсов.Ссылка В
	|			(ВЫБРАТЬ
	|				ШаблоныПроцесса.ШаблонПроцесса
	|			ИЗ
	|				ШаблоныПроцесса)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникШаблоныПроцесса.Ответственный КАК Ответственный,
	|	СправочникШаблоныПроцесса.Ссылка КАК ШаблонПроцесса,
	|	СправочникШаблоныПроцесса.ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона КАК ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона,
	|	СправочникШаблоныПроцесса.ЗапретитьПереименованиеЗадачСозданныхПоШаблону КАК ЗапретитьПереименованиеЗадачСозданныхПоШаблону
	|ИЗ
	|	Справочник.ШаблоныПроцесса КАК СправочникШаблоныПроцесса
	|ГДЕ
	|	СправочникШаблоныПроцесса.Ссылка В
	|			(ВЫБРАТЬ
	|				ШаблоныПроцесса.ШаблонПроцесса
	|			ИЗ
	|				ШаблоныПроцесса)";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов") Тогда
		
		ВыборкаВидыСогласуемыхРесурсов = Результат[1].Выбрать();
		
		Пока ВыборкаВидыСогласуемыхРесурсов.Следующий() Цикл
		
			ДанныеШаблона.ВидыСогласуемыхРесурсов.Добавить(ВыборкаВидыСогласуемыхРесурсов.СогласуемыйРесурс);
		
		КонецЦикла;
		
	КонецЕсли;
	
	ВыборкаДанныеШапки = Результат[2].Выбрать();
	Если ВыборкаДанныеШапки.Следующий() Тогда
		
		ДанныеШаблона.Ответственный                                  = ВыборкаДанныеШапки.Ответственный;
		ДанныеШаблона.ШаблонПроцесса                                 = ВыборкаДанныеШапки.ШаблонПроцесса;
		ДанныеШаблона.ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона   = ВыборкаДанныеШапки.ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона;
		ДанныеШаблона.ЗапретитьПереименованиеЗадачСозданныхПоШаблону = ВыборкаДанныеШапки.ЗапретитьПереименованиеЗадачСозданныхПоШаблону;
		
	КонецЕсли;
	
	Возврат ДанныеШаблона;
	
КонецФункции

// Определяет текущий используемый шаблон процесса для предмета
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметПроцесса - предмет, для которого получается информация о шаблоне.
//
// Возвращаемое значение:
//   СправочникСсылка.ШаблоныПроцесса - используемый шаблон.
//
Функция ШаблонПроцессаПоПредмету(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭтапыПроцесса.ШаблонПроцесса КАК ШаблонПроцесса
	|ИЗ
	|	РегистрСведений.ЭтапыПроцесса КАК ЭтапыПроцесса
	|ГДЕ
	|	ЭтапыПроцесса.Предмет = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.ШаблонПроцесса;
	
КонецФункции

// Определяет цвет стиля по зоне соблюдения сроков 
//
// Параметры:
//  Зона - ПеречислениеСсылка.ЗоныЗадач - зона, для которой определяется цвет.
//
// Возвращаемое значение:
//   Цвет - соответствующий зоне соблюдения сроков.
//
Функция ЦветСтиляПоЗонеЗадачи(Зона) Экспорт
	
	Если Зона = Перечисления.ЗоныЗадач.Желтая Тогда
		ЦветСтиля = ЦветаСтиля.ЗонаЗадачиЖелтый;
	ИначеЕсли Зона = Перечисления.ЗоныЗадач.Зеленая Тогда
		ЦветСтиля = ЦветаСтиля.ЗонаЗадачиЗеленый;
	ИначеЕсли Зона = Перечисления.ЗоныЗадач.Красная Тогда
		ЦветСтиля = ЦветаСтиля.ЗонаЗадачиКрасный;
	Иначе
		ЦветСтиля = Неопределено;
	КонецЕсли;
	
	Возврат ЦветСтиля;
	
КонецФункции

// Обработчик подписки на событие "При записи" справочника "Группы Пользователей". 
// Изменяет при необходимости записи в РС "Настройки согласования ресурсов".
//
// Параметры:
//  Источник - СправочникОбъект.ГруппыПользователей - записываемая группа пользователей.
//  Отказ    - Булево - признак, отказа от выполнения записи.
//
Процедура ГруппаПользователейПриЗаписи(Источник, Отказ) Экспорт
	
	РегистрыСведений.НастройкиСогласованияРесурсов.РассчитатьНастройкиСогласования();
	
КонецПроцедуры

// Позиционируется в динамическом списке, на первой подчиненной задаче текущей задачи.
//
// Параметры:
//  Список        - ТаблицаФормы - элемент формы, в который выведен список задач.
//  ТекущаяЗадача - СправочникСсылка.ЗадачиПроцесса - текущая задача.
//
Процедура УстановитьТекущуюСтрокуСпискаПоПервойПодчиненойЗадаче(Список, ТекущаяЗадача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗадачиПроцесса.Ссылка
	|ИЗ
	|	РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Родитель = &ТекущаяЗадача
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияЗадачПроцессов.ЗначениеУпорядочивания";
	
	Запрос.УстановитьПараметр("ТекущаяЗадача", ТекущаяЗадача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Список.ТекущаяСтрока = Выборка.Ссылка;
	Иначе
		Список.ТекущаяСтрока = ТекущаяЗадача;
	КонецЕсли;
	
	Список.Отображение = ОтображениеТаблицы.Дерево;
	
КонецПроцедуры

#Область СлужебныеМетодыПерерасчетов

// Формирует граф последовательности задач по предмету 
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметПроцесса - предмет, для которого формируется граф.
//
// Возвращаемое значение:
//   Соответствие - сформированный граф.
//
Функция ГрафПоПредмету(Предмет) Экспорт

	Граф = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцессаПредшествующиеЗадачи.Ссылка КАК Задача,
	|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача КАК ПредшествующаяЗадача
	|ИЗ
	|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаТекущая
	|		ПО ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = ЗадачиПроцессаТекущая.Ссылка
	|			И (НЕ ЗадачиПроцессаТекущая.ПометкаУдаления)
	|			И (ЗадачиПроцессаТекущая.Предмет = &Предмет)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаПредшествующая
	|		ПО ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = ЗадачиПроцессаПредшествующая.Ссылка
	|			И (НЕ ЗадачиПроцессаПредшествующая.ПометкаУдаления)
	|			И (ЗадачиПроцессаПредшествующая.Предмет = &Предмет)
	|ИТОГИ ПО
	|	Задача";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	ВыборкаЗадача = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗадача.Следующий() Цикл
		
		Вершина = ВыборкаЗадача.Задача;
		
		ВыборкаДетали = ВыборкаЗадача.Выбрать();
		Ребра = Новый Массив;
		Пока ВыборкаДетали.Следующий() Цикл
			Ребра.Добавить(ВыборкаДетали.ПредшествующаяЗадача);
		КонецЦикла;
		
		Граф.Вставить(Вершина, Ребра);
	
	КонецЦикла;
	
	Возврат Граф;

КонецФункции

// Формирует информацию о последующих задачах для задач предмета. 
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметПроцесса - предмет, для которого формируется информация.
//
// Возвращаемое значение:
//   Соответствие.
//
Функция ПоследующиеЗадачи(Предмет) Экспорт
	
	ПоследующиеЗадачи = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача КАК ПредшествующаяЗадача,
	|	ЗадачиПроцессаПредшествующиеЗадачи.Ссылка               КАК ПоследующаяЗадача
	|ИЗ
	|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаПредшествующие
	|		ПО ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = ЗадачиПроцессаПредшествующие.Ссылка
	|			И (НЕ ЗадачиПроцессаПредшествующие.ПометкаУдаления)
	|			И (ЗадачиПроцессаПредшествующие.Предмет = &Предмет)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаПоследующие
	|		ПО ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = ЗадачиПроцессаПоследующие.Ссылка
	|			И (НЕ ЗадачиПроцессаПоследующие.ПометкаУдаления)
	|			И (ЗадачиПроцессаПоследующие.Предмет = &Предмет)
	|ИТОГИ ПО
	|	ПредшествующаяЗадача";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	ВыборкаПредществующая = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПредществующая.Следующий() Цикл
		
		ПредшествующаяЗадача = ВыборкаПредществующая.ПредшествующаяЗадача;
		
		ВыборкаПоследующие = ВыборкаПредществующая.Выбрать();
		МассивПоследующихЗадач = Новый Массив;
		Пока ВыборкаПоследующие.Следующий() Цикл
			МассивПоследующихЗадач.Добавить(ВыборкаПоследующие.ПоследующаяЗадача);
		КонецЦикла;
		
		ПоследующиеЗадачи.Вставить(ПредшествующаяЗадача, МассивПоследующихЗадач);
	
	КонецЦикла;
	
	Возврат ПоследующиеЗадачи;
	
КонецФункции

// Конструктор таблицы, которая будет использована при расчете значение упорядочивания задач. 
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит:
//    * Задача                                            - СправочникСсылка.ЗадачаПроцесса - 
//    * ПлановаяДлительность                              - Число - плановая длительность выполнения
//    * ЗначениеУпорядочивания                            - Число - значение упорядочивание задачи среди задач того уже уровня одной и той же родительской задачи.
//    * Уровень                                           - Число - уровень, на котором находится задача.
//    * МаксимальноеЗначениеУпорядочиванияНаУровне        - Число - 
//    * ТекущееМаксимальноеЗначениеУпорядочиванияНаУровне - Число - 
//
Функция ПустаяТаблицаДляРасчетаУпорядочивания() Экспорт
	
	ТаблицаДляРасчета = Новый ТаблицаЗначений;
	ТаблицаДляРасчета.Колонки.Добавить("Задача");
	ТаблицаДляРасчета.Колонки.Добавить("ПлановаяДлительность",                              Новый ОписаниеТипов("Число"));
	ТаблицаДляРасчета.Колонки.Добавить("ЗначениеУпорядочивания",                            Новый ОписаниеТипов("Число"));
	ТаблицаДляРасчета.Колонки.Добавить("Уровень",                                           Новый ОписаниеТипов("Число"));
	ТаблицаДляРасчета.Колонки.Добавить("МаксимальноеЗначениеУпорядочиванияНаУровне",        Новый ОписаниеТипов("Число"));
	ТаблицаДляРасчета.Колонки.Добавить("ТекущееЗначениеУпорядочивания",                     Новый ОписаниеТипов("Число"));
	ТаблицаДляРасчета.Колонки.Добавить("ТекущееМаксимальноеЗначениеУпорядочиванияНаУровне", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаДляРасчета;
	
КонецФункции

// Получает массив задач, непосредственно подчиненных задаче. 
//
// Параметры:
//  Задача - СправочникСсылка.ЗадачиПроцесса - задача, для которой получаются дочерние задачи.
//
// Возвращаемое значение:
//   Массив - задач, непосредственно подчиненных задаче.
//
Функция МассивДочернихЗадач(Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Родитель = &Родитель
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Родитель", Задача);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление полей отображающих различные даты в списке задач.
//
// Параметры:
//  СписокУсловноеОформление - УсловноеОформление - условное оформление списка.
//
Процедура УстановитьУсловноеОформлениеПолейДатаВСписках(СписокУсловноеОформление) Экспорт
	
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Формат даты начала.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаНачалаПлановаяФактическая");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Формат даты окончания.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаОкончанияПлановаяФактическая");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	
КонецПроцедуры

// Устанавливает условное оформление поля состояние в списке задач.
//
// Параметры:
//  СписокУсловноеОформление - УсловноеОформление - условное оформление списка.
//
Процедура УстановитьУсловноеОформлениеПоляСостояниеВСписках(СписокУсловноеОформление) Экспорт
	
	// Выделение цветом состояния в желтой зоне
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния если задача в желтой зоне.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Состояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗонаСоблюденияСроков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Перечисления.ЗоныЗадач.Желтая;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЖелтый);
	
	// Выделение цветом состояния в красной зоне
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния если задача в красной зоне.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Состояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗонаСоблюденияСроков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Перечисления.ЗоныЗадач.Красная;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// Выделение цветом состояния в зеленой зоне
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния если задача в зеленой зоне.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Состояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗонаСоблюденияСроков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Перечисления.ЗоныЗадач.Зеленая;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЗеленый);
	
	// Выделение серым цветом состояния для выполненных задач
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния выполненнной задачи.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Состояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Перечисления.СостоянияЗадачПроцессов.Выполнена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);
	
	// Выделение серым цветом и перечеркивание состояния для отмененных задач
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом состояния выполненнной задачи.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Состояние");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Перечисления.СостоянияЗадачПроцессов.Отменена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,,,Истина));
	
КонецПроцедуры

// Устанавливает условное оформление полей согласования в списке задач.
//
// Параметры:
//  СписокУсловноеОформление - УсловноеОформление - условное оформление списка.
//
Процедура УстановитьУсловноеОформлениеСостоянияСогласования(СписокУсловноеОформление) Экспорт
	
	// Выделение красным цветом отрицательного планового значения согласования
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение цветом отрицательного планового состояния соласования задачи.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ПланБезДочерних");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("ПланБезДочерних");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение  = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблонПроцесса

// Формирует список выбора доступных предметов шаблона.
//
// Параметры:
//  Элемент - ПолеФормы - элемент формы для которого заполняется список выбора.
//  ДобавлятьЗначениеОбщий - Булево - признак необходимости добавления значения "Общий".
//
Процедура ЗаполнитьСписокВыбораДоступныхПредметовШаблона(Элемент, ДобавлятьЗначениеОбщий = Ложь) Экспорт

	Элемент.СписокВыбора.Очистить();
	
	Если ДобавлятьЗначениеОбщий Тогда
		Элемент.СписокВыбора.Добавить("ДляВсехПредметов",НСтр("ru = 'Для всех предметов'"));
	КонецЕсли;
	ТаблицаДоступныхПредметовШаблона = ТаблицаДоступныхПредметовШаблона();
	Для каждого ПредметШаблона Из ТаблицаДоступныхПредметовШаблона Цикл
		Элемент.СписокВыбора.Добавить(ПредметШаблона.Имя, ПредметШаблона.Представление);
	КонецЦикла

КонецПроцедуры

// Рассчитывает минимальную длитетельность выполнения задачи, исходя из длительности подчиненных задач.
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка, для задачи которой выполняется расчет.
//  ДеревоЗадач  - ДеревоЗначений.
//
Процедура РассчитатьМинимальнуюПродолжительностьЗадачи(СтрокаДерева, ДеревоЗадач) Экспорт

	ПодчиненныеЗадачи = СтрокаДерева.ПолучитьЭлементы();
	Если ПодчиненныеЗадачи.Количество() = 0 Тогда
		СтрокаДерева.ПлановаяДлительность = Макс(СтрокаДерева.ПлановаяДлительность, 1);
		Возврат;
	КонецЕсли;
	
	РассчитатьМинимальныеПродолжительностиЗадач(СтрокаДерева, ДеревоЗадач);
	
	МассивЦепочек = Новый Массив;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеЗадачи Цикл
		
		Если ПодчиненнаяСтрока.ПредшествующиеЗадачи.Количество() = 0 Тогда
			
			Цепочка = Новый Массив;
			Цепочка.Добавить(ПодчиненнаяСтрока.ЗадачаШаблона);
			
			МассивЦепочек.Добавить(Цепочка);
			
			Продолжить;
			
		КонецЕсли;
		
		Для Каждого ПредшествующаяЗадача Из ПодчиненнаяСтрока.ПредшествующиеЗадачи Цикл
			
			ЦепочкаНайдена = Ложь;
			
			МассивДляПодстановкиВЦепочкиПредшественников = Неопределено;
			Для Каждого Цепочка Из МассивЦепочек Цикл
				ИндексЭлементаТекущейЗадачи        = Цепочка.Найти(ПодчиненнаяСтрока.ЗадачаШаблона);
				Если ИндексЭлементаТекущейЗадачи <> Неопределено 
					И ИндексЭлементаТекущейЗадачи = 0 Тогда
					
					МассивДляПодстановкиВЦепочкиПредшественников = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Цепочка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Цепочка Из МассивЦепочек Цикл
				
				ИндексЭлементаТекущейЗадачи        = Цепочка.Найти(ПодчиненнаяСтрока.ЗадачаШаблона);
				ИндексЭлементаПредшествующейЗадачи = Цепочка.Найти(ПредшествующаяЗадача.ЗадачаШаблона);
				
				Если ИндексЭлементаТекущейЗадачи <> Неопределено 
					И ИндексЭлементаПредшествующейЗадачи <> Неопределено Тогда
					
					ЦепочкаНайдена = Истина;
					//Возможно это зацикливание задач, такие случаи пропускаем
					Продолжить;
					
				ИначеЕсли ИндексЭлементаПредшествующейЗадачи <> Неопределено Тогда
					
					Если ИндексЭлементаПредшествующейЗадачи < Цепочка.Количество() - 1 Тогда
						НоваяЦепочка = Новый Массив;
						
						Для Инд = 0 По ИндексЭлементаПредшествующейЗадачи Цикл
							НоваяЦепочка.Добавить(Цепочка[Инд]);
						КонецЦикла;
						
						Если МассивДляПодстановкиВЦепочкиПредшественников <> Неопределено Тогда
							Для Каждого ЭлементМассива Из МассивДляПодстановкиВЦепочкиПредшественников Цикл
								НоваяЦепочка.Добавить(ЭлементМассива);
							КонецЦикла;
						Иначе
							НоваяЦепочка.Добавить(ПодчиненнаяСтрока.ЗадачаШаблона);
						КонецЕсли;
						
						МассивЦепочек.Добавить(НоваяЦепочка);
						
					Иначе
						
						Если МассивДляПодстановкиВЦепочкиПредшественников <> Неопределено Тогда
							Для Каждого ЭлементМассива Из МассивДляПодстановкиВЦепочкиПредшественников Цикл
								Цепочка.Добавить(ЭлементМассива);
							КонецЦикла;
						Иначе
							Цепочка.Добавить(ПодчиненнаяСтрока.ЗадачаШаблона);
						КонецЕсли;
					КонецЕсли;
					
					ЦепочкаНайдена = Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ЦепочкаНайдена Тогда
				
				Цепочка = Новый Массив;
				Цепочка.Добавить(ПредшествующаяЗадача.ЗадачаШаблона);
				Цепочка.Добавить(ПодчиненнаяСтрока.ЗадачаШаблона);
				
				МассивЦепочек.Добавить(Цепочка);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	СтрокаДерева.МинимальнаяДлительностьЗадачи = МаксимальнаяЦепочкаЗадачи(МассивЦепочек, СтрокаДерева, ДеревоЗадач);
	Если Не ЗначениеЗаполнено(СтрокаДерева.ЗадачаШаблона) Тогда
		СтрокаДерева.ПлановаяДлительность = СтрокаДерева.МинимальнаяДлительностьЗадачи;
	Иначе
		СтрокаДерева.ПлановаяДлительность = Макс(СтрокаДерева.ПлановаяДлительность, СтрокаДерева.МинимальнаяДлительностьЗадачи);
	КонецЕсли;
	
	ТаблицаПодчиненныхЗадач = Новый ТаблицаЗначений;
	ТаблицаПодчиненныхЗадач.Колонки.Добавить("ЗадачаШаблона");
	ТаблицаПодчиненныхЗадач.Колонки.Добавить("Порядок");
	ТаблицаПодчиненныхЗадач.Колонки.Добавить("ПлановаяДлительность");
	
	Для Каждого ПодчиненнаяСтрока Из  ПодчиненныеЗадачи Цикл
		
		НоваяСтрока = ТаблицаПодчиненныхЗадач.Добавить();
		НоваяСтрока.ЗадачаШаблона        = ПодчиненнаяСтрока.ЗадачаШаблона;
		НоваяСтрока.ПлановаяДлительность = ПодчиненнаяСтрока.ПлановаяДлительность;
		НоваяСтрока.Порядок              = 0;
		
	КонецЦикла;
	
	Для Каждого Цепочка Из МассивЦепочек Цикл
		ТекущийИндекс = 0;
		Для Каждого ЭлементЦепочки Из Цепочка Цикл
			
			НайденнаяСтрока = ТаблицаПодчиненныхЗадач.Найти(ЭлементЦепочки, "ЗадачаШаблона");
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока.Порядок = Макс(ТекущийИндекс, НайденнаяСтрока.Порядок);
			ТекущийИндекс = ТекущийИндекс + 1;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаПодчиненныхЗадач.Сортировать("Порядок");
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицыПодчиненныхЗадач Из ТаблицаПодчиненныхЗадач Цикл
		
		ИдентификаторНайденнойСтроки = ЗадачиПроцессовКлиентСервер.НайтиСтрокуВДанныхФормыДерево(СтрокаДерева, СтрокаТаблицыПодчиненныхЗадач.ЗадачаШаблона, "ЗадачаШаблона", Ложь);
		Если ИдентификаторНайденнойСтроки <> - 1 Тогда
			НайденнаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторНайденнойСтроки);
			ИндексНайденнойСтроки = ПодчиненныеЗадачи.Индекс(НайденнаяСтрока);
			Если ИндексНайденнойСтроки <> НомерСтроки Тогда
				ПодчиненныеЗадачи.Сдвинуть(ИндексНайденнойСтроки, НомерСтроки - ИндексНайденнойСтроки);
			КонецЕсли;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует представление информации о текущем этапе процесса и ходе выполнения
//
// Параметры:
//  Предмет - ОпределяемыйТип.ПредметПроцесса - предмет, для которого выводится информация
//
// Возвращаемое значение:
//   Строка - сформированное представление.
//
Функция ПредставлениеТекущегоЭтапаПроцесса(Предмет) Экспорт
	
	ДанныеЭтапа = ДанныеТекущегоЭтапаПроцесса(Предмет);
	ДанныеПоПроцентуВыполненияПредмета = ДанныеПоПроцентуВыполненияПредмета(Предмет);
	
	Если ДанныеЭтапа.ТекущийЭтапПроцесса = Неопределено Тогда
		
		ТекстДанныеЭтапа = "";
		
	Иначе
		
		ТекстЗаголовок = НСтр("ru = 'Текущий этап:'");
		
		Если ЗначениеЗаполнено(ДанныеЭтапа.ТекущийЭтапПроцесса) Тогда
			
			ДатаОкончания     = ?(ЗначениеЗаполнено(ДанныеЭтапа.КрайняяДатаОкончания), ДанныеЭтапа.КрайняяДатаОкончания, НачалоДня(ТекущаяДатаСеанса()));
			НаименованиеЭтапа = ДанныеЭтапа.НаименованиеЭтапа;
			
			ТекстЭтапа = СтрШаблон(НСтр("ru = '%1, окончание запланировано на %2 Используется шаблон ""%3"".'"),
			                       НаименованиеЭтапа, 
			                       Формат(ДатаОкончания, "ДЛФ=DD"),
			                       ДанныеЭтапа.НаименованиеШаблона);
			
			ЦветТекста = ЦветСтиляПоЗонеЗадачи(ДанныеЭтапа.Зона);
			
		Иначе
			
			ЦветТекста = ЦветаСтиля.НедоступнаяДляВыбораЗадача;
			
			ТекстЭтапа = НСтр("ru = 'не определен.'");
			
		КонецЕсли;
		
		ТекстЭтапа = ФорматированнаяСтрокаСГиперссылкой(ТекстЭтапа, "", Ложь, ЦветТекста);
		
		ТекстВыполнения = "";
		
		Если ДанныеПоПроцентуВыполненияПредмета.ЕстьНастройкаПоВидуРесурса
			И ДанныеПоПроцентуВыполненияПредмета.План <> 0 Тогда
			
			ПроцентВыполнения = Окр((ДанныеПоПроцентуВыполненияПредмета.ВыполненоПлан/ ДанныеПоПроцентуВыполненияПредмета.План) * 100, 
			                        0, 
			                        РежимОкругления.Окр15как10);
		
			
			ПредставлениеЕдиницыИзмерения = ?(ПустаяСтрока(ДанныеПоПроцентуВыполненияПредмета.ЕдиницаИзмерения), 
			                                  "", 
			                                  СтрШаблон("(%1)",ДанныеПоПроцентуВыполненияПредмета.ЕдиницаИзмерения));
			
			ТекстВыполнения = СтрШаблон(НСтр("ru = 'План %1 - %2, выполнено - %3 (%4%%).'"),
			                            ПредставлениеЕдиницыИзмерения,
			                            ДанныеПоПроцентуВыполненияПредмета.План,
			                            ДанныеПоПроцентуВыполненияПредмета.ВыполненоПлан,
			                            ПроцентВыполнения);
			
			Если Не ПустаяСтрока(ТекстВыполнения) Тогда
				
				ТекстВыполнения = " " + ТекстВыполнения;
				ТекстВыполнения = ФорматированнаяСтрокаСГиперссылкой(ТекстВыполнения, "", Ложь, ЦветТекста);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстДанныеЭтапа = Новый ФорматированнаяСтрока(ТекстЗаголовок," ",ТекстЭтапа, ТекстВыполнения);
		
	КонецЕсли;
	
	ВидПланаЗанятостиНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВидПланаПоКоторомуВыводятсяДанныеДляЗадач",
	                                                                              "НастройкиПользователя",
	                                                                              Неопределено);
	
	Если ВидПланаЗанятостиНастройки <> Неопределено
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЗаписиПлана) Тогда
		
		ДанныеПланаЗанятости = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПланаЗанятостиНастройки);
		
		ТекстПереходВПланЗанятости = СтрШаблон(НСтр("ru = 'в план занятости ""%1""'"), ВидПланаЗанятостиНастройки);
		ТекстПереходВПланЗанятости = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(ТекстПереходВПланЗанятости,
		                                                                                "ПерейтиВПланЗанятостиТехПроект",
		                                                                                Истина,
		                                                                                ЦветаСтиля.ГиперссылкаЦвет);
		
		Если ТекстДанныеЭтапа = "" Тогда
			ТекстДанныеЭтапа = ТекстПереходВПланЗанятости;
		Иначе
			ТекстДанныеЭтапа = Новый ФорматированнаяСтрока(ТекстДанныеЭтапа, "  ", ТекстПереходВПланЗанятости);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстДанныеЭтапа;
	
КонецФункции

#КонецОбласти

#Область СозданиеЗадачПоШаблону

// Формирует команды создания задач по шаблону
//
// Параметры:
//  Форма - ФормКлиентскогоПриложения                   - форма, для которой формируются команды
//  Предмет - ОпределяемыйТип.ПредметПроцесса           - предмет, чьи задачи отображены в форме
//  ИмяГруппыРазмещения - Строка                        - имя группы формы, в которой будут размещены команды.
//  СписокСозданныхКоманд - СписокЗначений              - будет содержать созданные команды.
//  ТекущийПользователь - СправочникСсылка.Пользователи - текущий пользователь.
//
Процедура СформироватьКомандыСозданияЗадачПоШаблону(Форма, Предмет, ИмяГруппыРазмещения, СписокСозданныхКоманд, ТекущийПользователь) Экспорт
	
	ШаблонПроцесса                = ШаблонПроцессаПоПредмету(Предмет);
	ПравоДобавленияЗадачПоШаблону = ПравоДоступа("Добавление", Метаданные.Справочники.ЗадачиПроцесса);
	
	СписокСозданныхКоманд.Очистить();
	ПолноеИмяМетаданныхПредмета = Предмет.Метаданные().ПолноеИмя();
	ЕстьНеОтмененныеЗадачи = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШаблоныПроцесса.Ссылка КАК Ссылка,
	|	ШаблоныПроцесса.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ШаблоныПроцесса КАК ШаблоныПроцесса
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ШаблоныПроцесса.ПредназначенДляОпределенногоТипаПредмета
	|				ТОГДА ШаблоныПроцесса.ТипПредмета = &ТипПредмета
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ШаблоныПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыШаблонаПроцесса.Действует)
	|	И ВЫБОР
	|			КОГДА ШаблоныПроцесса.Персональный
	|				ТОГДА ШаблоныПроцесса.Ответственный = &ТекущийПользователь
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ШаблоныПроцесса.ЭтоГруппа
	|	И ВЫБОР
	|			КОГДА ШаблоныПроцесса.ЗаданВладелецШаблона
	|				ТОГДА ШаблоныПроцесса.ВладелецШаблона = &ВладелецШаблона
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачиПроцесса.Ссылка) КАК КоличествоНеОтмененных
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И НЕ ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена)
	|	И ЗадачиПроцесса.Предмет = &Предмет";
	
	Запрос.УстановитьПараметр("ТипПредмета", ПолноеИмяМетаданныхПредмета);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("ВладелецШаблона", ЗадачиПроцессовПереопределяемый.ВладелецШаблонаПоПредметуЗадачи(Предмет));
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаНеОтмененные = Результат[1].Выбрать();
	Если ВыборкаНеОтмененные.Следующий() 
		И ВыборкаНеОтмененные.КоличествоНеОтмененных > 0 Тогда
		
		ЕстьНеОтмененныеЗадачи = Истина;
		
	КонецЕсли;
	
	Выборка = Результат[0].Выбрать();
	
	СчетчикКоманд = 1;
	Пока Выборка.Следующий() Цикл
		
		ИмяКоманды   = "СоздатьЗадачиПоШаблону_" + Строка(СчетчикКоманд);
		НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
		
		НоваяКоманда.Заголовок = Выборка.Наименование;
		НоваяКоманда.Действие  = "Подключаемый_ВыполнитьКомандуСозданияЗадачПоШаблону";
		
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяКоманды,
		                                       Тип("КнопкаФормы"),
		                                       Форма.Элементы[ИмяГруппыРазмещения]);
		
		НовыйЭлемент.Вид         = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды  = ИмяКоманды;
		НовыйЭлемент.Доступность = ПравоДобавленияЗадачПоШаблону 
		                           И (Не ЗначениеЗаполнено(ШаблонПроцесса) Или Не ЕстьНеОтмененныеЗадачи);
		НовыйЭлемент.Пометка     =  ШаблонПроцесса = Выборка.Ссылка;
	
		СписокСозданныхКоманд.Добавить(Выборка.Ссылка, ИмяКоманды);
		СчетчикКоманд = СчетчикКоманд + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет создание задач по шаблону для предмета
//
// Параметры:
//  Предмет        - ОпределяемыйТип.ПредметПроцесса  - предмет, для которого создаются задачи.
//  ШаблонПроцесса - СправочникСсылка.ШаблоныПроцесса - шаблон, по которому создаются задачи.
//
Процедура СоздатьЗадачиПоШаблону(Предмет, ШаблонПроцесса) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) 
		Или Не ЗначениеЗаполнено(ШаблонПроцесса) Тогда
		Возврат;
	КонецЕсли;

	Настройки = НастройкиСозданияЗадачПоШаблону();
	ПолноеИмяМетаданныхПредмета = Предмет.Метаданные().ПолноеИмя();
	НастройкиСозданияЗадачПоТипуПредмета = Настройки.ПараметрыСозданияЗадачПоШаблону.Получить(ПолноеИмяМетаданныхПредмета);
	
	ПараметрыСозданияЗадач = ПараметрыСозданияЗадачПоШаблону(Предмет, НастройкиСозданияЗадачПоТипуПредмета, ПолноеИмяМетаданныхПредмета);
	
	СогласующиеРесурсовШаблона = СогласующиеРесурсовШаблона(Предмет, ШаблонПроцесса, ПараметрыСозданияЗадач.Исполнитель);
	ПараметрыСозданияЗадач.Вставить("Предмет", Предмет);
	ПараметрыСозданияЗадач.Вставить("СогласующиеРесурсовШаблона", СогласующиеРесурсовШаблона);
	
	ДеревоЗадачШаблона = ПустоеДеревоЗадачШаблона();
	
	ЗадачиПроцессов.УстановитьКорневойЭлементДерева(ДеревоЗадачШаблона);
	ЗаполнитьДеревоЗадачШаблонаПроцесса(ДеревоЗадачШаблона, ШаблонПроцесса);
	
	СоответствиеЗадачЗадачамШаблона = Новый Соответствие;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		СоздатьЗадачиПроцесса(ДеревоЗадачШаблона.Строки[0],
		                      СоответствиеЗадачЗадачамШаблона,
		                      ПараметрыСозданияЗадач);
		
		РегистрыСведений.ЭтапыПроцесса.УдалитьЗаписиПоПредмету(Предмет, Истина);
		РегистрыСведений.ЭтапыПроцесса.СвязатьПроцессИШаблон(Предмет, ШаблонПроцесса);
		ВыполнитьПерерасчетСостоянийПоПредмету(Предмет);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомЗначений

// Заполняет корневой элемент дерева шаблона
//
// Параметры:
//  ДеревоЗадач - ДеревоЗначений  - формируемое дерево задач шаблона.
//
Процедура УстановитьКорневойЭлементДерева(ДеревоЗадач) Экспорт
	
	НоваяСтрока = ДеревоЗадач.Строки.Добавить();
	НоваяСтрока.Наименование   = НСтр("ru = 'Шаблон процесса'");
	
КонецПроцедуры

// Формирует дерево задач шаблона процесса
//
// Параметры:
//  ДеревоШаблона  - ДеревоЗначений                   - формируемое дерево задач шаблона.
//  ШаблонПроцесса - СправочникСсылка.ШаблоныПроцесса - шаблон, по которому формируется дерево.
//
Процедура ЗаполнитьДеревоЗадачШаблонаПроцесса(ДеревоШаблона, ШаблонПроцесса) Экспорт
	
	Если Не ЗначениеЗаполнено(ШаблонПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоЗадачамШаблона();
	
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если Выборка.Количество() > 0 Тогда
		ДобавитьСтрокиДереваШаблона(Выборка, ДеревоШаблона.Строки[0] ,1);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет нумерацию дерева задач шаблона
//
// Параметры:
//  Дерево             - ДеревоЗначений - дерево задач шаблона.
//  ПредставленияЗадач - Соответствие   - будет содержать задачи и их представления с учетом сформированной нумерации.
//
Процедура СформироватьНумерациюДерева(Дерево, ПредставленияЗадач) Экспорт
	
	ПредставленияЗадач.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Дерево.ПолучитьЭлементы()[0].ЗадачаШаблона) Тогда 
		ЗначимыеЭлементыДерева = Дерево.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	Иначе
		ЗначимыеЭлементыДерева = Дерево.ПолучитьЭлементы();
	КонецЕсли;
	
	СформироватьНумерациюЭлементовДерева(ЗначимыеЭлементыДерева, 1, Новый Массив, ПредставленияЗадач);
	
КонецПроцедуры

#КонецОбласти

#Область ВыводДополнительнойИнформацииВСписки

// Обработчик события получения данных в формах списка задач
//
// Параметры:
//  ИмяЭлемента - Строка - имя таблицы формы, из которой вызван обработчик.
//  Настройки   - НастройкиКомпоновкиДанных   - содержит копию настройки компоновки данных динамического списка.
//  Строки      - СтрокиДинамическогоСписка - имя таблицы формы, из которой вызван обработчик.
//
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	ДоступенУчетВремени  = ЗадачиПроцессовПовтИсп.ПользователюДоступенУчетВремени();
	ДоступноПланирование = ЗадачиПроцессовПовтИсп.ПользователюДоступноПланирование();
	
	Если Не ДоступенУчетВремени
		И Не ДоступноПланирование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьПланПоЗадачамМинусФактическиеТрудозатраты         = Ложь;
	ЕстьФактическиеТрудозатраты                           = Ложь;
	ЕстьФактическиеТрудозатратыПрошлыйПериодРабочегоПлана = Ложь;
	ЕстьФактическиеТрудозатратыТекущийПериодРабочегоПлана = Ложь;
	ЕстьРабочийПланПрошлыйПериод                          = Ложь;
	ЕстьРабочийПланТекущийПериод                          = Ложь;
	
	НаличиеКолонокПроверено                               = Ложь;
	
	ЗадачиКПолучениюДанных = Новый Массив;
	
	Для Каждого СтрокаСписка Из Строки Цикл
		
		Если Не НаличиеКолонокПроверено Тогда
			
			Если ДоступенУчетВремени 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаСписка.Значение.Данные, "ПланПоЗадачамМинусФактическиеТрудозатраты") Тогда
				ЕстьПланПоЗадачамМинусФактическиеТрудозатраты = Истина;
			КонецЕсли;
			
			Если ДоступенУчетВремени 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаСписка.Значение.Данные, "ФактическиеТрудозатраты") Тогда
				ЕстьФактическиеТрудозатраты = Истина;
			КонецЕсли;
			
			Если ДоступенУчетВремени 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаСписка.Значение.Данные, "ФактическиеТрудозатратыПрошлыйПериодРабочегоПлана") Тогда
				ЕстьФактическиеТрудозатратыПрошлыйПериодРабочегоПлана = Истина;
			КонецЕсли;
			
			Если ДоступенУчетВремени 
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаСписка.Значение.Данные, "ФактическиеТрудозатратыТекущийПериодРабочегоПлана") Тогда
				ЕстьФактическиеТрудозатратыТекущийПериодРабочегоПлана = Истина;
			КонецЕсли; 
			
			Если ДоступноПланирование
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаСписка.Значение.Данные, "РабочийПланПрошлыйПериод") Тогда
				ЕстьРабочийПланПрошлыйПериод = Истина;
			КонецЕсли;
			
			Если ДоступноПланирование
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаСписка.Значение.Данные, "РабочийПланТекущийПериод") Тогда
				ЕстьРабочийПланТекущийПериод = Истина;
			КонецЕсли;
			
			Если Не ЕстьПланПоЗадачамМинусФактическиеТрудозатраты
				И Не ЕстьФактическиеТрудозатраты
				И Не ЕстьФактическиеТрудозатратыПрошлыйПериодРабочегоПлана 
				И Не ЕстьФактическиеТрудозатратыТекущийПериодРабочегоПлана
				И Не ЕстьРабочийПланПрошлыйПериод
				И Не ЕстьРабочийПланТекущийПериод Тогда
				
				Возврат;
				
				НаличиеКолонокПроверено = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаСписка.Значение.Данные.Ссылка) = Тип("СправочникСсылка.ЗадачиПроцесса")
			И ЗначениеЗаполнено(СтрокаСписка.Значение.Данные.Ссылка) Тогда
		
			ЗадачиКПолучениюДанных.Добавить(СтрокаСписка.Значение.Данные.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗадачиКПолучениюДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаПоДополнительнымДаннымЗадачДляВыводаВСписок(ЗадачиКПолучениюДанных, Настройки.ДополнительныеСвойства);
	
	ЗадачиДанные  = Новый Соответствие;
	ВыборкаДанные = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДанные.Следующий() Цикл
		
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("ФактическиеТрудозатраты",                   ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДанные.ФактВсего));
		ДанныеЗадачи.Вставить("ФактПрошлыйПериод",                         ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДанные.ФактПрошлыйПериод));
		ДанныеЗадачи.Вставить("ФактТекущийПериод",                         ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДанные.ФактТекущийПериод)); 
		ДанныеЗадачи.Вставить("РабочийПланПрошлыйПериод",                  ВыборкаДанные.РабочийПланПрошлыйПериод);
		ДанныеЗадачи.Вставить("РабочийПланТекущийПериод",                  ВыборкаДанные.РабочийПланТекущийПериод);
		ДанныеЗадачи.Вставить("Статус",                                    ВыборкаДанные.Статус);
		ДанныеЗадачи.Вставить("ПланПоЗадачамМинусФактическиеТрудозатраты", ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаДанные.Остаток));
		
		ЗадачиДанные.Вставить(ВыборкаДанные.Задача, ДанныеЗадачи);
		
	КонецЦикла;
	
	Для Каждого СтрокаСписка Из Строки Цикл
		
		ДанныеЗадачи = ЗадачиДанные.Получить(СтрокаСписка.Значение.Данные.Ссылка); 
		Если ДанныеЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЕстьФактическиеТрудозатраты Тогда
			СтрокаСписка.Значение.Данные.ФактическиеТрудозатраты = ДанныеЗадачи.ФактическиеТрудозатраты;
		КонецЕсли;
		
		Если ЕстьФактическиеТрудозатратыПрошлыйПериодРабочегоПлана Тогда
			СтрокаСписка.Значение.Данные.ФактическиеТрудозатратыПрошлыйПериодРабочегоПлана = ДанныеЗадачи.ФактПрошлыйПериод;
		КонецЕсли;
		
		Если ЕстьФактическиеТрудозатратыТекущийПериодРабочегоПлана Тогда
			СтрокаСписка.Значение.Данные.ФактическиеТрудозатратыТекущийПериодРабочегоПлана = ДанныеЗадачи.ФактТекущийПериод;
		КонецЕсли;
		
		Если ЕстьПланПоЗадачамМинусФактическиеТрудозатраты Тогда
			Если ДанныеЗадачи.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
				Или ДанныеЗадачи.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена
				Или ДанныеЗадачи.ПланПоЗадачамМинусФактическиеТрудозатраты < 0 Тогда
				
				СтрокаСписка.Значение.Данные.ПланПоЗадачамМинусФактическиеТрудозатраты = 0;
				
			Иначе
				
				СтрокаСписка.Значение.Данные.ПланПоЗадачамМинусФактическиеТрудозатраты = ДанныеЗадачи.ПланПоЗадачамМинусФактическиеТрудозатраты
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьРабочийПланПрошлыйПериод Тогда
			СтрокаСписка.Значение.Данные.РабочийПланПрошлыйПериод = ДанныеЗадачи.РабочийПланПрошлыйПериод;
		КонецЕсли;
		
		Если ЕстьРабочийПланТекущийПериод Тогда
			СтрокаСписка.Значение.Данные.РабочийПланТекущийПериод = ДанныеЗадачи.РабочийПланТекущийПериод;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеКомандВСписке

#Область ПовышениеСтатусаЗадачи

Процедура ПеревестиЗадачиНаНовыйСтатус(МассивЗадач, НовыйСтатусЗадачи, КоличествоОбработанных) Экспорт
	
	ТекущийПользователь            = Пользователи.ТекущийПользователь();
	
	ШаблонОшибкиСтатусСовпадает    = НСтр("ru='Задаче %1 уже присвоен статус ""%2""'");
	ШаблонОшибкиПомеченНаУдаление  = НСтр("ru='Задача %1 помечена на удаление. Невозможно изменить статус'");
	ШаблонНетПраваПовышенияСтатуса = НСтр("ru='Вы не можете перевести задачу %1 в статус ""%2"" так как не являетесь исполнителем данной задачи.'");
	ШаблонНеЯвляетсяКонтролирующим = НСтр("ru='Вы не можете перевести задачу %1 в статус ""%2"" так как не являетесь контролирующим данной задачи.'");	
	ШаблонЭтоПонижениеСтатуса      = НСтр("ru='Вы не можете перевести задачу %1 в статус ""%2"" при помощи данной команды, так как она находится в более высоком статусе ""%3"".'");
	ШаблонОшибкиМаксимальныйСтатус = НСтр("ru='Задача %1 не может быть перевена на статус ""%2"". Максимально возможный статус ""%3""'");
	ШаблонОшибкиЗаблокировать      = НСтр("ru='Не удалось заблокировать %1. %2'");
	ШаблонОшибкиЗаписать           = НСтр("ru='Не удалось записать %1. %2'");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаПоЗадачамДляИзмененияСтатуса(НовыйСтатусЗадачи);
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыПравоИзмененияЗадачБезКонтроля = Новый Соответствие;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиПомеченНаУдаление, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ТекущийСтатус = НовыйСтатусЗадачи Тогда

			ТекстОшибки = СтрШаблон(ШаблонОшибкиСтатусСовпадает, Выборка.Представление, НовыйСтатусЗадачи);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;

		КонецЕсли;
		
		Если ЭтоПонижениеСтатуса(Выборка.ТекущийСтатус, НовыйСтатусЗадачи) Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонЭтоПонижениеСтатуса, Выборка.Представление, НовыйСтатусЗадачи, Выборка.ТекущийСтатус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
			
		Если Не ДоступенПереходНаНовыйСтатус(НовыйСтатусЗадачи, Выборка.МаксимальноВозможныйСтатус) Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонОшибкиМаксимальныйСтатус, Выборка.Представление, НовыйСтатусЗадачи, Выборка.МаксимальноВозможныйСтатус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Предмет = Выборка.Предмет;
		ПравоИзмененияЗадачБезКонтроляПоПредмету = ПредметыПравоИзмененияЗадачБезКонтроля.Получить(Предмет);
		Если ПравоИзмененияЗадачБезКонтроляПоПредмету = Неопределено Тогда
			ПравоИзмененияЗадачБезКонтроляПоПредмету = ПравоИзмененияЗадачБезКонтроля(, Предмет);
			ПредметыПравоИзмененияЗадачБезКонтроля.Вставить(Предмет, ПравоИзмененияЗадачБезКонтроляПоПредмету);
		КонецЕсли;
		
		ПараметрыПроверкиПовышенияСтатуса = ЗадачиПроцессовКлиентСервер.ПараметрыПроверкиПраваПовышенияСтатуса();
		
		ПараметрыПроверкиПовышенияСтатуса.СледующийСтатус                = НовыйСтатусЗадачи;
		ПараметрыПроверкиПовышенияСтатуса.ТекущийСтатус                  = Выборка.ТекущийСтатус;
		ПараметрыПроверкиПовышенияСтатуса.ТекущийПользователь            = ТекущийПользователь;
		ПараметрыПроверкиПовышенияСтатуса.Исполнитель                    = Выборка.Исполнитель;
		ПараметрыПроверкиПовышенияСтатуса.Контролирующий                 = Выборка.Контролирующий;
		ПараметрыПроверкиПовышенияСтатуса.ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроляПоПредмету;
		ПараметрыПроверкиПовышенияСтатуса.ЗадачаШаблона                  = Выборка.ЗадачаШаблона;
		ПараметрыПроверкиПовышенияСтатуса.ИсполнительРодительскойЗадачи  = Выборка.ИсполнительРодительскойЗадачи;
		
		Если Не ПользовательМожетПеревестиЗадачуНаСледующийСтатус(ПараметрыПроверкиПовышенияСтатуса) Тогда
			
			ШаблонТекстаОшибки = ШаблонНетПраваПовышенияСтатуса;
			
			Если НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Выполнена
				И ЗначениеЗаполнено(Выборка.Контролирующий) Тогда
				
				ШаблонТекстаОшибки = ШаблонНеЯвляетсяКонтролирующим;
				
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.Представление, НовыйСтатусЗадачи);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПовыситьСтатусУЗадачи(ЗадачаОбъект, НовыйСтатусЗадачи, ТекущийПользователь);
		
		Попытка
			Если ЗадачаОбъект.ПроверитьЗаполнение() Тогда
				ЗадачаОбъект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
			КонецЕсли;
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПонижениеСтатуса(ТекущийСтатус, НовыйСтатусЗадачи)
	
	Если НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
		
		Если ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
		
		Если ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена
			Или ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	ИначеЕсли НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда

		Если ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена
			Или ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
			Или ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

Функция ПользовательМожетПеревестиЗадачуНаСледующийСтатус(Параметры) Экспорт
	
	СледующийСтатус                = Параметры.СледующийСтатус;
	ТекущийСтатус                  = Параметры.ТекущийСтатус;
	ТекущийПользователь            = Параметры.ТекущийПользователь;
	Исполнитель                    = Параметры.Исполнитель;
	Контролирующий                 = Параметры.Контролирующий;
	ПравоИзмененияЗадачБезКонтроля = Параметры.ПравоИзмененияЗадачБезКонтроля;
	ЗадачаШаблона                  = Параметры.ЗадачаШаблона;
	ИсполнительРодительскойЗадачи  = Параметры.ИсполнительРодительскойЗадачи;
	
	Если ПравоИзмененияЗадачБезКонтроля Тогда
		
		Возврат Истина;
	
	ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована 
		И СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
		И (ТекущийПользователь = Исполнитель
		   Или (ТекущийПользователь = ИсполнительРодительскойЗадачи
		        И Не ЗначениеЗаполнено(ЗадачаШаблона))) Тогда
		
		Возврат Истина;
		
	ИначеЕсли СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		
		Если ЗначениеЗаполнено(Контролирующий) Тогда
			
			Если ТекущийПользователь = Контролирующий Тогда
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			
			Если ТекущийПользователь = Исполнитель
				Или (ТекущийПользователь = ИсполнительРодительскойЗадачи
				И Не ЗначениеЗаполнено(ЗадачаШаблона)) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Отменена 
		И СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
		
		Если ЗначениеЗаполнено(Контролирующий) Тогда
			
			Если ТекущийПользователь = Контролирующий
				Или ТекущийПользователь = Исполнитель
				Или (ТекущийПользователь = ИсполнительРодительскойЗадачи
				И Не ЗначениеЗаполнено(ЗадачаШаблона)) Тогда
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			
			Если ТекущийПользователь = Исполнитель
				Или (ТекущийПользователь = ИсполнительРодительскойЗадачи
				И Не ЗначениеЗаполнено(ЗадачаШаблона)) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПовыситьСтатусУЗадачи(ЗадачаОбъект, НовыйСтатусЗадачи, ТекущийПользователь)
	
	ЗадачаОбъект.Статус = НовыйСтатусЗадачи;
	ТекущаяДата         = ТекущаяДатаСеанса();
	
	НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
	
	НоваяСтрокаПротокола.Дата                 = ТекущаяДата;
	НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
	НоваяСтрокаПротокола.ТекстПоручения       = "";
	НоваяСтрокаПротокола.Статус               = НовыйСтатусЗадачи;
	
	Если ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ЗадачаОбъект.Исполнитель
		Или ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ТекущийПользователь Тогда
			
		НоваяСтрокаПротокола.ИсполнительПоручения = Справочники.Пользователи.ПустаяСсылка();
		ЗадачаОбъект.ИсполнительПорученияПоЗадаче = Справочники.Пользователи.ПустаяСсылка();
		
	Иначе
		
		НоваяСтрокаПротокола.ИсполнительПоручения = ЗадачаОбъект.ИсполнительПорученияПоЗадаче;
		
	КонецЕсли;
	
	ЗадачаОбъект.ДатаПорученияПоЗадаче =  ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
	                                                                                        ТекущийПользователь,
	                                                                                        ТекущаяДата);
	
КонецПроцедуры

Функция ДоступенПереходНаНовыйСтатус(НовыйСтатусЗадачи, МаксимальноВозможныйСтатус)
	
	ПереходНаНовыйСтатусДоступен = Ложь;
	
	Если МаксимальноВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		
		Если НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Выполнена
			Или НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
			Или НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
			
			ПереходНаНовыйСтатусДоступен = Истина;
			
		КонецЕсли;
		
	ИначеЕсли МаксимальноВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
		
		Если НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
			Или НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
			
			ПереходНаНовыйСтатусДоступен = Истина;
			
		КонецЕсли;
		
	ИначеЕсли МаксимальноВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
		
		Если НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
			
			ПереходНаНовыйСтатусДоступен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПереходНаНовыйСтатусДоступен;
	
КонецФункции

Функция ТекстЗапросаПоЗадачамДляИзмененияСтатуса(НовыйСтатусЗадачи)
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                                    КАК Ссылка,
	|	ЗадачиПроцесса.Наименование                                                                                              КАК Представление,
	|	ЗадачиПроцесса.Статус                                                                                                    КАК ТекущийСтатус,
	|	ЗадачиПроцесса.ЗадачаШаблона                                                                                             КАК ЗадачаШаблона,
	|	ЗадачиПроцесса.Исполнитель                                                                                               КАК Исполнитель,
	|	ЗадачиПроцесса.Предмет                                                                                                   КАК Предмет,
	|	ЗадачиПроцесса.Контролирующий                                                                                            КАК Контролирующий,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)) КАК МаксимальноВозможныйСтатус,
	|	ЗадачиПроцесса.ПометкаУдаления                                                                                           КАК ПометкаУдаления,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка))                           КАК ИсполнительРодительскойЗадачи
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО ЗадачиПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)";
	
КонецФункции

#КонецОбласти

#Область ОтменаЗадачи

Процедура ОтменитьЗадачи(МассивЗадач, КоличествоОбработанных) Экспорт
	
	НовыйСтатусЗадачи = Перечисления.СтатусыЗадачПроцессов.Отменена;
	
	ТекущийПользователь            = Пользователи.ТекущийПользователь();
	
	ШаблонОшибкиСтатусСовпадает     = НСтр("ru='Задаче %1 уже присвоен статус ""%2""'");
	ШаблонОшибкиПомеченНаУдаление   = НСтр("ru='Задача %1 помечена на удаление. Невозможно изменить статус'");
	ШаблонНетПраваПониженияСтатуса  = НСтр("ru='Вы не можете перевести задачу %1 в статус ""%2"" так как не являетесь исполнителем данной задачи.'");
	ШаблонНеЯвляетсяКонтролирующим  = НСтр("ru='Вы не можете перевести задачу %1 в статус ""%2"" так как не являетесь контролирующим данной задачи.'");
	ШаблонЗадачаПоШаблону           = НСтр("ru='Вы не можете перевести задачу %1 в статус ""%2"" так как это задача по шаблону процесса.'");
	ШаблонЕстьДругиеЗависимыеЗадачи = НСтр("ru='Вы не можете перевести задачу %1 в статус ""%2"" так как требуется изменение статуса зависимых задач. Выполнить отмену можно из формы задачи.'");
	ШаблонОшибкиЗаблокировать       = НСтр("ru='Не удалось заблокировать %1. %2'");
	ШаблонОшибкиЗаписать            = НСтр("ru='Не удалось записать %1. %2'");

	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаДляГрупповойОтменыЗадач();
	
	Запрос.УстановитьПараметр("МассивЗадачДляОтмены", МассивЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ПредметыПравоИзмененияЗадачБезКонтроля = Новый Соответствие;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиПомеченНаУдаление, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ТекущийСтатус = НовыйСтатусЗадачи Тогда
		
			ТекстОшибки = СтрШаблон(ШаблонОшибкиСтатусСовпадает, Выборка.Представление, НовыйСтатусЗадачи);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		
		КонецЕсли;
		
		Если Выборка.КоличествоПодчиненныхЗадач > 0 Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонЕстьДругиеЗависимыеЗадачи, Выборка.Представление, НовыйСтатусЗадачи);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Предмет = Выборка.Предмет;
		ПравоИзмененияЗадачБезКонтроляПоПредмету = ПредметыПравоИзмененияЗадачБезКонтроля.Получить(Предмет);
		Если ПравоИзмененияЗадачБезКонтроляПоПредмету = Неопределено Тогда
			ПравоИзмененияЗадачБезКонтроляПоПредмету = ПравоИзмененияЗадачБезКонтроля(, Предмет);
			ПредметыПравоИзмененияЗадачБезКонтроля.Вставить(Предмет, ПравоИзмененияЗадачБезКонтроляПоПредмету);
		КонецЕсли;
		
		ПараметрыПроверкиПраваОтменыЗадачи = ЗадачиПроцессовКлиентСервер.ПараметрыПроверкиПраваОтменыЗадачи();
		
		ПараметрыПроверкиПраваОтменыЗадачи.ТекущийСтатус                  = Выборка.ТекущийСтатус;
		ПараметрыПроверкиПраваОтменыЗадачи.ТекущийПользователь            = ТекущийПользователь;
		ПараметрыПроверкиПраваОтменыЗадачи.Исполнитель                    = Выборка.Исполнитель;
		ПараметрыПроверкиПраваОтменыЗадачи.Контролирующий                 = Выборка.Контролирующий;
		ПараметрыПроверкиПраваОтменыЗадачи.ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроляПоПредмету;
		ПараметрыПроверкиПраваОтменыЗадачи.ЗадачаШаблона                  = Выборка.ЗадачаШаблона;
		ПараметрыПроверкиПраваОтменыЗадачи.ИсполнительРодительскойЗадачи  = Выборка.ИсполнительРодительскойЗадачи;
		
		Если Не ПользовательМожетОтменитьЗадачу(ПараметрыПроверкиПраваОтменыЗадачи) Тогда
			
			ШаблонТекстаОшибки = ШаблонНетПраваПониженияСтатуса;
			
			Если ЗначениеЗаполнено(Выборка.Контролирующий) Тогда
				
				ШаблонТекстаОшибки = ШаблонНеЯвляетсяКонтролирующим;
				
			ИначеЕсли ЗначениеЗаполнено(Выборка.ЗадачаШаблона) Тогда
				
				ШаблонТекстаОшибки = ШаблонЗадачаПоШаблону;
				
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, Выборка.Представление, НовыйСтатусЗадачи);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПовыситьСтатусУЗадачи(ЗадачаОбъект, НовыйСтатусЗадачи, ТекущийПользователь);
		
		Попытка
			Если ЗадачаОбъект.ПроверитьЗаполнение() Тогда
				ЗадачаОбъект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
			КонецЕсли;
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры 

Функция ПользовательМожетОтменитьЗадачу(Параметры) Экспорт
	
	ТекущийСтатус                  = Параметры.ТекущийСтатус;
	ТекущийПользователь            = Параметры.ТекущийПользователь;
	Исполнитель                    = Параметры.Исполнитель;
	Контролирующий                 = Параметры.Контролирующий;
	ПравоИзмененияЗадачБезКонтроля = Параметры.ПравоИзмененияЗадачБезКонтроля;
	ЗадачаШаблона                  = Параметры.ЗадачаШаблона;
	ИсполнительРодительскойЗадачи  = Параметры.ИсполнительРодительскойЗадачи;
	
	Если ПравоИзмененияЗадачБезКонтроля Тогда
		
		Возврат Истина;
		
	Иначе
		
		Если ЗначениеЗаполнено(Контролирующий) Тогда
			
			Если ТекущийПользователь = Контролирующий Тогда
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			
			Если (ТекущийПользователь = Исполнитель
				Или ТекущийПользователь = ИсполнительРодительскойЗадачи)
				И Не ЗначениеЗаполнено(ЗадачаШаблона) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ТекстЗапросаДляГрупповойОтменыЗадач()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР 
	|		КОГДА  ИерархияЗадачПроцесса.ЗадачаПроцесса = ИерархияЗадачПроцесса.Родитель
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК КоличествоПодчиненныхЗадач,
	|	ИерархияЗадачПроцесса.Родитель                             КАК Родитель
	|ПОМЕСТИТЬ ОтменяемыеЗадачиНаличиеПодчиненных
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель В(&МассивЗадачДляОтмены)
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИерархияЗадачПроцесса.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтменяемыеЗадачиНаличиеПодчиненных.Родитель                                                  КАК Ссылка,
	|	ОтменяемыеЗадачиНаличиеПодчиненных.КоличествоПодчиненныхЗадач                                КАК КоличествоПодчиненныхЗадач,
	|	ЗадачиПроцесса.Наименование                                                                  КАК Представление,
	|	ЗадачиПроцесса.Статус                                                                        КАК ТекущийСтатус,
	|	ЗадачиПроцесса.ПометкаУдаления                                                               КАК ПометкаУдаления,
	|	ЗадачиПроцесса.ЗадачаШаблона                                                                 КАК ЗадачаШаблона,
	|	ЗадачиПроцесса.Исполнитель                                                                   КАК Исполнитель,
	|	ЗадачиПроцесса.Контролирующий                                                                КАК Контролирующий,
	|	ЗадачиПроцесса.Предмет                                                                       КАК Предмет,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ИсполнительРодительскойЗадачи
	|ИЗ
	|	ОтменяемыеЗадачиНаличиеПодчиненных КАК ОтменяемыеЗадачиНаличиеПодчиненных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ОтменяемыеЗадачиНаличиеПодчиненных.Родитель = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО ЗадачиПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка";
	
	
КонецФункции

#КонецОбласти

#Область НаправитьЗадачуНаПроверку

Процедура НаправитьЗадачиНаПроверку(МассивЗадач, НовыйСтатусЗадачи, КоличествоОбработанных) Экспорт
	
	ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроля();
	ТекущийПользователь            = Пользователи.ТекущийПользователь();
	
	ШаблонОшибкиУжеНаправлена      = НСтр("ru='Задача %1 уже направлена на проверку'");
	ШаблонОшибкиУжеВыполнена       = НСтр("ru='Задача %1 находится в статусе ""Выполнена"" и не требует проверки контролирующим'");
	ШаблонОшибкиНетКонтролирующего = НСтр("ru='У задачи %1 не указан контролирующий.'");
	ШаблонОшибкиИсполнитель        = НСтр("ru='Вы не являетесь исполнителем задачи %1. Направление на проверку не выполнено'");
	ШаблонОшибкиМаксимальныйСтатус = НСтр("ru='Задача %1 не направлена на проверку, так как её максимально возможный статус ""%2"", а должен быть ""Выполнена""'");
	ШаблонОшибкиПомеченНаУдаление  = НСтр("ru='Задача %1 помечена на удаление. Направление на проверку не выполнено'");
	ШаблонОшибкиЗаблокировать      = НСтр("ru='Не удалось заблокировать %1. %2'");
	ШаблонОшибкиЗаписать           = НСтр("ru='Не удалось записать %1. %2'");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаПоЗадачамДляНаправленияНаПроверку(НовыйСтатусЗадачи);
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиПомеченНаУдаление, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Исполнитель <> ТекущийПользователь 
			И Не ПравоИзмененияЗадачБезКонтроля Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиИсполнитель, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиУжеВыполнена, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.МаксимальноВозможныйСтатус <> Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиМаксимальныйСтатус, Выборка.Представление, Выборка.МаксимальноВозможныйСтатус), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.Контролирующий) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиНетКонтролирующего, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ЗадачаОбъект.Контролирующий = ЗадачаОбъект.ИсполнительПорученияПоЗадаче
			И СтрНайти(ЗадачаОбъект.ТекстПоследнегоПоручения, ЗадачиПроцессовКлиентСервер.ТекстПорученияНаправитьЗадачуНаПроверку()) > 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиУжеНаправлена, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		НаправитьЗадачуКонтролирующему(ЗадачаОбъект, ТекущийПользователь);
		
		Попытка
			ЗадачаОбъект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НаправитьЗадачуКонтролирующему(ЗадачаОбъект, ТекущийПользователь)
	
	ТекстПоручения = ЗадачиПроцессовКлиентСервер.ТекстПорученияНаправитьЗадачуНаПроверку();
	ТекущаяДата    = ТекущаяДатаСеанса();
	
	НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
	
	НоваяСтрокаПротокола.Дата                 = ТекущаяДата;
	НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
	НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
	НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
	НоваяСтрокаПротокола.ИсполнительПоручения = ЗадачаОбъект.Контролирующий;
	
	ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ЗадачаОбъект.Контролирующий;
	ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
	ЗадачаОбъект.ДатаПорученияПоЗадаче        =  ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
	                                                                                               ТекущийПользователь,
	                                                                                               ТекущаяДата);
	
КонецПроцедуры

Функция ТекстЗапросаПоЗадачамДляНаправленияНаПроверку(НовыйСтатусЗадачи)
		
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                                    КАК Ссылка,
	|	ЗадачиПроцесса.Наименование                                                                                              КАК Представление,
	|	ЗадачиПроцесса.Статус                                                                                                    КАК ТекущийСтатус,
	|	ЗадачиПроцесса.Исполнитель                                                                                               КАК Исполнитель,
	|	ЗадачиПроцесса.Контролирующий                                                                                            КАК Контролирующий,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)) КАК МаксимальноВозможныйСтатус,
	|	ЗадачиПроцесса.ПометкаУдаления                                                                                           КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)";
	
КонецФункции

#КонецОбласти

#Область НаправитьНаСогласование

Процедура НаправитьНаСогласование(МассивЗадач, СогласуемыйРесурс, КоличествоОбработанных) Экспорт

	ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроля();
	ТекущийПользователь            = Пользователи.ТекущийПользователь();
	
	ШаблонОшибкиИсполнитель          = НСтр("ru='Вы не являетесь исполнителем задачи %1. Направление на согласование не выполнено'");
	ШаблонОшибкиНечегоСогласовывать  = НСтр("ru='Для задачи %1 нет запрашиваемых ресурсов. Направление на согласование не выполнено'");
	ШаблонОшибкиНетСогласующего      = НСтр("ru='Для ресурса %1 задачи %2 отсутствует согласующий. Направление на согласование не выполнено'");
	ШаблонОшибкиПомеченНаУдаление    = НСтр("ru='Задача %1 помечена на удаление. Направление на согласование не выполнено'");
	ШаблонОшибкиЗаблокировать        = НСтр("ru='Не удалось заблокировать %1. %2'");
	ШаблонОшибкиЗаписать             = НСтр("ru='Не удалось записать %1. %2'");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаПоЗадачамДляНаправленияНаСогласования();
	
	Запрос.УстановитьПараметр("МассивЗадач",            МассивЗадач);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурса", СогласуемыйРесурс);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиПомеченНаУдаление, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Исполнитель <> ТекущийПользователь
			И Не ПравоИзмененияЗадачБезКонтроля Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиИсполнитель, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.НаСогласовании = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиНечегоСогласовывать, Выборка.Представление), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.Согласующий) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибкиНетСогласующего, СогласуемыйРесурс, Выборка.Ссылка), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ПредставлениеРесурса = ЗадачиПроцессов.ПредставлениеВидаРесурса(Выборка.НаименованиеРесурса, Выборка.ЕдиницаИзмерения);
		НаправитьЗадачуСогласующему(ЗадачаОбъект, СогласуемыйРесурс, ПредставлениеРесурса,
		                            ТекущийПользователь, Выборка.Согласующий, Выборка.НаСогласовании);
		
		Попытка
			ЗадачаОбъект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НаправитьЗадачуСогласующему(ЗадачаОбъект, СогласуемыйРесурс, ПредставлениеРесурса, ТекущийПользователь, Согласующий, Количество)
	
	ТекстПоручения = ЗадачиПроцессовКлиентСервер.ТекстНаправленияНаСогласование(ПредставлениеРесурса, Количество);
	ТекущаяДата    = ТекущаяДатаСеанса();
	
	НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
	
	НоваяСтрокаПротокола.Дата                 = ТекущаяДата;
	НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
	НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
	НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
	НоваяСтрокаПротокола.ИсполнительПоручения = Согласующий;
	
	ЗадачаОбъект.ИсполнительПорученияПоЗадаче = Согласующий;
	ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
	ЗадачаОбъект.ДатаПорученияПоЗадаче        =  ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
	                                                                                               ТекущийПользователь,
	                                                                                               ТекущаяДата);
	
КонецПроцедуры

Функция ТекстЗапросаПоЗадачамДляНаправленияНаСогласования()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиСогласованияРесурсов.Согласующий, НастройкиСогласованияРесурсовТекущая.Согласующий)) КАК Согласующий
	|ПОМЕСТИТЬ ЗадачиСогласующийПоРесурсу
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|			И (ИерархияЗадачПроцесса.Уровень = 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО (ИерархияЗадачПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсов
	|		ПО (ЗадачиПроцессаРодитель.Исполнитель = НастройкиСогласованияРесурсов.Пользователь)
	|			И (НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсовТекущая
	|		ПО (ЗадачиПроцесса.Исполнитель = НастройкиСогласованияРесурсовТекущая.Пользователь)
	|			И (НастройкиСогласованияРесурсовТекущая.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)
	|	И ЕСТЬNULL(НастройкиСогласованияРесурсов.Согласующий, НастройкиСогласованияРесурсовТекущая.Согласующий) ЕСТЬ НЕ NULL
	|СГРУППИРОВАТЬ 
	|	ПО ЗадачиПроцесса.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                               КАК Ссылка,
	|	ЗадачиПроцесса.Наименование                                                                                         КАК Представление,
	|	ЗадачиПроцесса.Статус                                                                                               КАК ТекущийСтатус,
	|	ЗадачиПроцесса.Исполнитель                                                                                          КАК Исполнитель,
	|	ЗадачиПроцесса.ПометкаУдаления                                                                                      КАК ПометкаУдаления,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) - ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Согласовано, 0) КАК НаСогласовании,
	|	ВЫБОР
	|		КОГДА СогласующиеПоПредметам.Предмет ЕСТЬ НЕ NULL 
	|			ТОГДА СогласующиеПоПредметам.Согласующий
	|		КОГДА ЗадачиСогласующийПоРесурсу.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ЗадачиСогласующийПоРесурсу.Согласующий
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ                                                                                                                КАК Согласующий,
	|	ВидыСогласуемыхРесурсовСправочник.Наименование                                                                       КАК НаименованиеРесурса,
	|	ВидыСогласуемыхРесурсовСправочник.ЕдиницаИзмерения                                                                   КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидСогласуемогоРесурса)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсовСправочник
	|		ПО (ИСТИНА)
	|			И (ВидыСогласуемыхРесурсовСправочник.Ссылка = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиСогласующийПоРесурсу КАК ЗадачиСогласующийПоРесурсу
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиСогласующийПоРесурсу.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО (ЗадачиПроцесса.Предмет = СогласующиеПоПредметам.Предмет
	|				И СогласующиеПоПредметам.СогласуемыйРесурс = &ВидСогласуемогоРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)";
	
КонецФункции

#КонецОбласти

#Область СогласоватьЗадачи

#Область СогласоватьДочерниеЗадачиЗадачи

Процедура СогласоватьРесурсыДочернихЗадачЗадачи(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляСогласованияДочернихЗадачЗадачи();
	Запрос.УстановитьПараметр("ТекущийПользователь",      Параметры.ТекущийПользователь);
	Запрос.УстановитьПараметр("ИсполнительТекущейЗадачи", Параметры.ТекущийПользователь);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурса",   Параметры.ВидСогласуемогоРесурса);
	Запрос.УстановитьПараметр("ЗадачаПроцесса",           Параметры.ЗадачаПроцесса);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаЯвляетсяСогласующим = Результат[0].Выбрать();
	ВыборкаЗадачи              = Результат[1].Выбрать();
	
	Параметры.КоличествоЗадачКСогласованию = ВыборкаЗадачи.Количество();
	
	ВыборкаЯвляетсяСогласующим.Выбрать();
	ВыборкаЯвляетсяСогласующим.Следующий();
	Если Не ВыборкаЯвляетсяСогласующим.ЯвляетсяСогласующим Тогда
		
		Параметры.ЕстьОшибки  = Истина;
		Параметры.ТекстОшибки = СтрШаблон(НСтр("ru = 'Согласование дочерних задач не выполнено, так как вы не являетесь согласующим ресурса %1 для данной задачи'"),
		                                  Параметры.ПредставлениеВидаРесурса);
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.КоличествоЗадачКСогласованию = 0 Тогда
		
		Параметры.ЕстьОшибки  = Истина;
		Параметры.ТекстОшибки = НСтр("ru = 'Согласование дочерних задач не выполнено, так как нет дочерних задач, требующих согласования'");
		
		Возврат;
		
	КонецЕсли;
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = ВыборкаЗадачи.ЗадачаПроцесса;
		ПараметрыСогласования.Исполнитель              = ВыборкаЗадачи.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс        = Параметры.ВидСогласуемогоРесурса;
		ПараметрыСогласования.ПредставлениеВидаРесурса = Параметры.ПредставлениеВидаРесурса;
		ПараметрыСогласования.Количество               = ВыборкаЗадачи.КСогласованию;
		ПараметрыСогласования.Согласующий              = Параметры.ТекущийПользователь;
		ПараметрыСогласования.ТекущийПользователь      = Параметры.ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса();
		
		РегистрыСведений.ПротоколСогласованияРесурсов.СогласоватьРесурсВЗадаче(ПараметрыСогласования);
		
		Параметры.КоличествоОбработанныхЗадач = Параметры.КоличествоОбработанныхЗадач + 1;
		Параметры.КоличествоСогласовано       = Параметры.КоличествоСогласовано + ВыборкаЗадачи.КСогласованию;
		Параметры.МассивЗадачДляРасчета.Добавить(ВыборкаЗадачи.ЗадачаПроцесса);
		
	КонецЦикла;
	
	Если Параметры.РассчитыватьИтоги Тогда
		РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(Параметры.МассивЗадачДляРасчета, 
		                                                                                 Параметры.СогласуемыйРесурс,
		                                                                                 Параметры.Предмет);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыСогласованияРесурсовДочернихЗадачЗадачи() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КоличествоЗадачКСогласованию", 0);
	Параметры.Вставить("КоличествоОбработанныхЗадач",  0);
	Параметры.Вставить("КоличествоСогласовано",        0);
	Параметры.Вставить("СообщениеОбОшибке",            "");
	Параметры.Вставить("ЗадачаПроцесса",               Неопределено);
	Параметры.Вставить("Предмет",                      Неопределено);
	Параметры.Вставить("ВидСогласуемогоРесурса",       Неопределено);
	Параметры.Вставить("ПредставлениеВидаРесурса",     Неопределено);
	Параметры.Вставить("ТекущийПользователь",          Неопределено);
	Параметры.Вставить("ИсполнительТекущейЗадачи",     Неопределено);
	Параметры.Вставить("ЕстьОшибки",                   Ложь);
	Параметры.Вставить("ТекстОшибки",                  "");
	Параметры.Вставить("РассчитыватьИтоги",            Ложь);
	Параметры.Вставить("МассивЗадачДляРасчета",        Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

Функция ТекстЗапросаДляСогласованияДочернихЗадачЗадачи()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЕСТЬNULL(СогласующиеПоПредметам.Согласующий, НастройкиСогласованияРесурсов.Согласующий), НастройкиСогласованияРесурсовТекущейЗадачи.Согласующий) = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяСогласующим
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиВерхнегоУровня
	|		ПО ИерархияЗадачПроцесса.Родитель = ЗадачиВерхнегоУровня.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсов
	|		ПО (ЗадачиВерхнегоУровня.Исполнитель = НастройкиСогласованияРесурсов.Пользователь)
	|			И (НастройкиСогласованияРесурсов.Согласующий = &ТекущийПользователь)
	|			И (НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсовТекущейЗадачи
	|		ПО (НастройкиСогласованияРесурсов.Пользователь = &ИсполнительТекущейЗадачи)
	|			И (НастройкиСогласованияРесурсов.Согласующий = &ТекущийПользователь)
	|			И (НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО (ЗадачиВерхнегоУровня.Предмет = СогласующиеПоПредметам.Предмет)
	|			И (СогласующиеПоПредметам.СогласуемыйРесурс = &ВидСогласуемогоРесурса)
	|			И (СогласующиеПоПредметам.Согласующий = &ТекущийПользователь)
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса = &ЗадачаПроцесса
	|	И ИерархияЗадачПроцесса.Уровень = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса                                                      КАК ЗадачаПроцесса,
	|	ИтогиСогласованияЗадачРесурсов.Запланировано - ИтогиСогласованияЗадачРесурсов.Согласовано КАК КСогласованию,
	|	ЗадачиПроцесса.Исполнитель                                                                КАК Исполнитель
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидСогласуемогоРесурса)
	|			И (ИтогиСогласованияЗадачРесурсов.Запланировано - ИтогиСогласованияЗадачРесурсов.Согласовано <> 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель = &ЗадачаПроцесса
	|	И ИерархияЗадачПроцесса.ЗадачаПроцесса <> &ЗадачаПроцесса";
	
КонецФункции

#КонецОбласти

Функция ПараметрыМножественногоСогласованияЗадач()
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ДанныеЗадачи",             Неопределено);
	Параметры.Вставить("СогласуемыйРесурс",        Справочники.ВидыСогласуемыхРесурсов.ПустаяСсылка());
	Параметры.Вставить("ПредставлениеВидаРесурса", "");
	Параметры.Вставить("ТекущийПользователь",      Справочники.Пользователи.ПустаяСсылка());
	Параметры.Вставить("ШаблоныОшибок",            Неопределено);
	Параметры.Вставить("КоличествоОбработанных",   Неопределено);
	Параметры.Вставить("МассивЗадачДляРасчета",    Новый Массив);
	Параметры.Вставить("ПересчитыватьИтоги",       Ложь);
	
	Возврат Параметры;
	
КонецФункции

Процедура СогласоватьРесурсМассиваЗадач(МассивЗадач, СогласуемыйРесурс, КоличествоОбработанных) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КоличествоОбработанных = Новый Структура;
	КоличествоОбработанных.Вставить("Обработано", 0);
	КоличествоОбработанных.Вставить("НеОбработано", 0);
	
	ШаблоныОшибок = Новый Структура;
	ШаблоныОшибок.Вставить("Согласующий",         НСтр("ru='Вы не являетесь согласующим ресурса ""%1"" задачи %2. Cогласование не выполнено'"));
	ШаблоныОшибок.Вставить("НечегоСогласовывать", НСтр("ru='Для задачи %1 нет направленных на согласование ресурсов. Согласование не выполнено'"));
	ШаблоныОшибок.Вставить("ПомеченНаУдаление",   НСтр("ru='Задача %1 помечена на удаление. Согласование не выполнено'"));
	ШаблоныОшибок.Вставить("Заблокировать",       НСтр("ru='Не удалось заблокировать %1. %2'"));
	ШаблоныОшибок.Вставить("Записать",            НСтр("ru='Не удалось записать %1. %2'"));

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	ПредставлениеВидаРесурса = ЗадачиПроцессовПовтИсп.ПредставлениеВидаРесурса(СогласуемыйРесурс);
	
	Запрос.Текст = ТекстЗапросаДляСогласованияМассиваЗадачСогласующимРесурса();
	
	Запрос.УстановитьПараметр("МассивЗадач",                       МассивЗадач);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурса",            СогласуемыйРесурс);
	Запрос.УстановитьПараметр("ТекущийПользователь",               ТекущийПользователь);

	Результат = Запрос.ВыполнитьПакет();
	СогласоватьСогласующимРесурсПоВыборке(Результат[4], СогласуемыйРесурс, ПредставлениеВидаРесурса,
	                                      ТекущийПользователь, ШаблоныОшибок);
	
	НаправитьРезультатыСогласованияПоВыборке(Результат[6], ПредставлениеВидаРесурса, ТекущийПользователь, КоличествоОбработанных);
	
	СообщитьОНеобработанныхЗадачахПриСогласовании(Результат[5], ШаблоныОшибок, ПредставлениеВидаРесурса, КоличествоОбработанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаДляСогласованияМассиваЗадачСогласующимРесурса() Экспорт
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                 КАК Ссылка,
	|	ЕСТЬNULL(НастройкиСогласованияРесурсов.Согласующий, НастройкиСогласованияРесурсовТекущая.Согласующий) КАК Согласующий
	|ПОМЕСТИТЬ ЗадачиСогласующийПоРесурсу
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|			И (ИерархияЗадачПроцесса.Уровень = 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО (ИерархияЗадачПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсов
	|		ПО (ЗадачиПроцессаРодитель.Исполнитель = НастройкиСогласованияРесурсов.Пользователь)
	|			И (НастройкиСогласованияРесурсов.Согласующий = &ТекущийПользователь)
	|			И (НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсовТекущая
	|		ПО (ЗадачиПроцесса.Исполнитель = НастройкиСогласованияРесурсовТекущая.Пользователь)
	|			И (НастройкиСогласованияРесурсовТекущая.Согласующий = &ТекущийПользователь)
	|			И (НастройкиСогласованияРесурсовТекущая.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)
	|	И ЕСТЬNULL(НастройкиСогласованияРесурсов.Согласующий, НастройкиСогласованияРесурсовТекущая.Согласующий) ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                                                 КАК Ссылка,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) - ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Согласовано, 0)                   КАК КСогласованию,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних, 0) - ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.СогласованоВДочерних, 0) КАК КСогласованиюВДочерних,
	|	ВЫБОР
	|		КОГДА СогласующиеПоПредметам.Предмет ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА ЗадачиСогласующийПоРесурсу.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                                                                                 КАК ЯвляетсяСогласующим,
	|	ЗадачиПроцесса.ПометкаУдаления                                                                                                        КАК ПометкаУдаления,
	|	ЗадачиПроцесса.Статус                                                                                                                 КАК Статус,
	|	ЗадачиПроцесса.Наименование                                                                                                           КАК НаименованиеЗадачи
	|ПОМЕСТИТЬ СогласующиеКСогласованию
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиСогласующийПоРесурсу КАК ЗадачиСогласующийПоРесурсу
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиСогласующийПоРесурсу.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО ЗадачиПроцесса.Предмет = СогласующиеПоПредметам.Предмет
	|			И (СогласующиеПоПредметам.СогласуемыйРесурс = &ВидСогласуемогоРесурса)
	|			И (СогласующиеПоПредметам.Согласующий = &ТекущийПользователь)
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	МИНИМУМ(ИерархияЗадачПроцесса.Уровень) КАК Уровень
	|ПОМЕСТИТЬ УровниЗадачИерархииДляСогласования
	|ИЗ
	|	СогласующиеКСогласованию КАК СогласующиеКСогласованию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО СогласующиеКСогласованию.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель В
	|			(ВЫБРАТЬ
	|				СогласующиеКСогласованию.Ссылка КАК Ссылка
	|			ИЗ
	|				СогласующиеКСогласованию КАК СогласующиеКСогласованию
	|			ГДЕ
	|				(СогласующиеКСогласованию.КСогласованию <> 0
	|					ИЛИ СогласующиеКСогласованию.КСогласованиюВДочерних <> 0))
	|	И СогласующиеКСогласованию.ЯвляетсяСогласующим
	|	И НЕ СогласующиеКСогласованию.ПометкаУдаления
	|	И НЕ СогласующиеКСогласованию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИерархияЗадачПроцесса.Родитель КАК Родитель
	|ПОМЕСТИТЬ РодительскиеЗадачиКСогласованию
	|ИЗ
	|	УровниЗадачИерархииДляСогласования КАК УровниЗадачИерархииДляСогласования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО УровниЗадачИерархииДляСогласования.ЗадачаПроцесса = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И УровниЗадачИерархииДляСогласования.Уровень = ИерархияЗадачПроцесса.Уровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса                                                                                КАК Задача,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) - ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Согласовано, 0) КАК КСогласованию,
	|	ЗадачиПроцесса.Исполнитель                                                                                          КАК Исполнитель
	|ИЗ
	|	РодительскиеЗадачиКСогласованию КАК РодительскиеЗадачиКСогласованию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО РодительскиеЗадачиКСогласованию.Родитель = ИерархияЗадачПроцесса.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидСогласуемогоРесурса)
	|ГДЕ
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) <> ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Согласовано, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СогласующиеКСогласованию.Ссылка                 КАК Ссылка,
	|	СогласующиеКСогласованию.КСогласованию          КАК КСогласованию,
	|	СогласующиеКСогласованию.КСогласованиюВДочерних КАК КСогласованиюВДочерних,
	|	СогласующиеКСогласованию.ЯвляетсяСогласующим    КАК ЯвляетсяСогласующим,
	|	СогласующиеКСогласованию.Статус                 КАК Статус,
	|	СогласующиеКСогласованию.ПометкаУдаления        КАК ПометкаУдаления,
	|	СогласующиеКСогласованию.НаименованиеЗадачи     КАК НаименованиеЗадачи
	|ИЗ
	|	СогласующиеКСогласованию КАК СогласующиеКСогласованию
	|ГДЕ
	|	(НЕ СогласующиеКСогласованию.ЯвляетсяСогласующим
	|		ИЛИ СогласующиеКСогласованию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена)
	|			ИЛИ (СогласующиеКСогласованию.КСогласованию = 0
	|				И СогласующиеКСогласованию.КСогласованиюВДочерних = 0)
	|			ИЛИ СогласующиеКСогласованию.ПометкаУдаления)
	|////////////////////////////////////////////////////////////////////////////////
	|;
	|
	|ВЫБРАТЬ
	|	СогласующиеКСогласованию.Ссылка                 КАК Задача,
	|	СогласующиеКСогласованию.КСогласованию          КАК КСогласованию,
	|	СогласующиеКСогласованию.КСогласованиюВДочерних КАК КСогласованиюВДочерних,
	|	СогласующиеКСогласованию.ЯвляетсяСогласующим    КАК ЯвляетсяСогласующим,
	|	СогласующиеКСогласованию.Статус                 КАК Статус,
	|	СогласующиеКСогласованию.ПометкаУдаления        КАК ПометкаУдаления,
	|	СогласующиеКСогласованию.НаименованиеЗадачи     КАК НаименованиеЗадачи,
	|	ЗадачиПроцесса.Исполнитель                      КАК Исполнитель
	|ИЗ
	|	СогласующиеКСогласованию КАК СогласующиеКСогласованию
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (СогласующиеКСогласованию.Ссылка = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	СогласующиеКСогласованию.ЯвляетсяСогласующим 
	|	И НЕ СогласующиеКСогласованию.ПометкаУдаления
	|	И НЕ СогласующиеКСогласованию.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена)
	|			И (СогласующиеКСогласованию.КСогласованию <> 0
	|				ИЛИ СогласующиеКСогласованию.КСогласованиюВДочерних <> 0)
	|	И СогласующиеКСогласованию.Ссылка В (Выбрать РодительскиеЗадачиКСогласованию.Родитель КАК Ссылка ИЗ РодительскиеЗадачиКСогласованию)
	|";
	
КонецФункции

Процедура НаправитьРезультатыСогласованияПоВыборке(РезультатЗапроса, ПредставлениеВидаРесурса, ТекущийПользователь, КоличествоОбработанных)
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийПользователь <> Выборка.Исполнитель Тогда
			
			Попытка
		
				НачатьТранзакцию();
				
				ТекущаяДата = ТекущаяДатаСеанса();
				
				ЗадачаОбъект   = Выборка.Задача.ПолучитьОбъект();
				ТекстПоручения = ЗадачиПроцессовКлиентСервер.ТекстРезультатыСогласования(ПредставлениеВидаРесурса, 
				                                                                         Выборка.КСогласованию + Выборка.КСогласованиюВДочерних,
				                                                                         0);
				
				НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
				
				НоваяСтрокаПротокола.Дата                 = ТекущаяДата;
				НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
				НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
				НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
				НоваяСтрокаПротокола.ИсполнительПоручения = Выборка.Исполнитель;
				
				ЗадачаОбъект.ИсполнительПорученияПоЗадаче = Выборка.Исполнитель;
				ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
				ЗадачаОбъект.ДатаПорученияПоЗадаче        = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
				                                                                                              ТекущийПользователь,
				                                                                                              ТекущаяДата);
				
				ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчет", Истина);
				ЗадачаОбъект.Записать();
				
				КоличествоОбработанных.Обработано = КоличествоОбработанных.Обработано + 1;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
		
				ТекстОшибки  = СтрШаблон(НСтр("ru='Не удалось оповестить исполнителя о согласовании для задачи %1. %2'"), 
				                         Выборка.НаименованиеЗадачи, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Задача);
				
				ОтменитьТранзакцию();
				
			КонецПопытки;
			
		Иначе
			
			КоличествоОбработанных.Обработано = КоличествоОбработанных.Обработано + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОНеобработанныхЗадачахПриСогласовании(РезультатЗапроса, ШаблоныОшибок, ПредставлениеРесурса, КоличествоОбработанных)

	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КоличествоОбработанных.НеОбработано = КоличествоОбработанных.НеОбработано + 1;
		
		Если Выборка.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблоныОшибок.ПомеченНаУдаление, Выборка.НаименованиеЗадачи), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Не Выборка.ЯвляетсяСогласующим Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблоныОшибок.Согласующий, ПредставлениеРесурса, Выборка.НаименованиеЗадачи), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если Выборка.КСогласованиюВДочерних = 0 И Выборка.КСогласованию = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблоныОшибок.НечегоСогласовывать, Выборка.НаименованиеЗадачи), Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СогласоватьСогласующимРесурсПоВыборке(Результат, СогласуемыйРесурс, ПредставлениеВидаРесурса, 
	                                            ТекущийПользователь, ШаблоныОшибок)
	
	МассивЗадачДляРасчета = Новый Массив;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = Выборка.Задача;
		ПараметрыСогласования.Исполнитель              = Выборка.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс        = СогласуемыйРесурс;
		ПараметрыСогласования.ПредставлениеВидаРесурса = ПредставлениеВидаРесурса;
		ПараметрыСогласования.Количество               = Выборка.КСогласованию;
		ПараметрыСогласования.Согласующий              = ТекущийПользователь;
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса();
	
		РегистрыСведений.ПротоколСогласованияРесурсов.СогласоватьРесурсВЗадаче(ПараметрыСогласования);
		
		МассивЗадачДляРасчета.Добавить(Выборка.Задача);
		
	КонецЦикла;
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадачДляРасчета, СогласуемыйРесурс, Неопределено);
	
КонецПроцедуры

Процедура СогласоватьРесурсВЗадачеИНаправитьИсполнителю(Параметры) Экспорт
	
	ДанныеЗадачи           = Параметры.ДанныеЗадачи;
	КоличествоОбработанных = Параметры.КоличествоОбработанных;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДанныеЗадачи.Задача);
	Исключение
		ТекстОшибки = СтрШаблон(Параметры.ШаблоныОшибок.Заблокировать, ДанныеЗадачи.Задача, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеЗадачи.Задача);
		КоличествоОбработанных.НеОбработано = КоличествоОбработанных.НеОбработано + 1;
		Возврат;
	КонецПопытки;
	
	ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
	ПараметрыСогласования.Задача                   = ДанныеЗадачи.Задача;
	ПараметрыСогласования.Исполнитель              = ДанныеЗадачи.Исполнитель;
	ПараметрыСогласования.СогласуемыйРесурс        = Параметры.СогласуемыйРесурс;
	ПараметрыСогласования.ПредставлениеВидаРесурса = Параметры.ПредставлениеВидаРесурса;
	ПараметрыСогласования.Количество               = ДанныеЗадачи.КСогласованию;
	ПараметрыСогласования.Согласующий              = Параметры.ТекущийПользователь;
	ПараметрыСогласования.ТекущийПользователь      = Параметры.ТекущийПользователь;
	ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса();
	
	Успешно = Ложь;
	РегистрыСведений.ПротоколСогласованияРесурсов.СогласоватьРесурсВЗадачеИНаправитьРезультатыИсполнителю(ПараметрыСогласования, Параметры.ПересчитыватьИтоги, Успешно);
	
	Параметры.МассивЗадачДляРасчета.Добавить(ДанныеЗадачи.Задача);
	
	Если Успешно Тогда
		КоличествоОбработанных.Обработано = КоличествоОбработанных.Обработано + 1;
	Иначе
		КоличествоОбработанных.НеОбработано = КоличествоОбработанных.НеОбработано + 1;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаПоЗадачамДляСогласованияТекущихЗадач() Экспорт
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                 КАК Ссылка,
	|	ЕСТЬNULL(НастройкиСогласованияРесурсов.Согласующий, НастройкиСогласованияРесурсовТекущая.Согласующий) КАК Согласующий
	|ПОМЕСТИТЬ ЗадачиСогласующийПоРесурсу
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|			И (ИерархияЗадачПроцесса.Уровень = 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО (ИерархияЗадачПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсов
	|		ПО (ЗадачиПроцессаРодитель.Исполнитель = НастройкиСогласованияРесурсов.Пользователь)
	|			И (НастройкиСогласованияРесурсов.Согласующий = &ТекущийПользователь)
	|			И (НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсовТекущая
	|		ПО (ЗадачиПроцесса.Исполнитель = НастройкиСогласованияРесурсовТекущая.Пользователь)
	|			И (НастройкиСогласованияРесурсовТекущая.Согласующий = &ТекущийПользователь)
	|			И (НастройкиСогласованияРесурсовТекущая.ВидСогласуемогоРесурса = &ВидСогласуемогоРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)
	|	И ЕСТЬNULL(НастройкиСогласованияРесурсов.Согласующий, НастройкиСогласованияРесурсовТекущая.Согласующий) ЕСТЬ НЕ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                                               КАК Задача,
	|	ЗадачиПроцесса.Наименование                                                                                         КАК Представление,
	|	ЗадачиПроцесса.Статус                                                                                               КАК ТекущийСтатус,
	|	ЗадачиПроцесса.Исполнитель                                                                                          КАК Исполнитель,
	|	ЗадачиПроцесса.ПометкаУдаления                                                                                      КАК ПометкаУдаления,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) - ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Согласовано, 0) КАК КСогласованию,
	|	ВЫБОР
	|		КОГДА СогласующиеПоПредметам.Предмет ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА ЗадачиСогласующийПоРесурсу.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                                                                                КАК ЯвляетсяСогласующим,
	|	ВидыСогласуемыхРесурсовСправочник.Наименование                                                                       КАК НаименованиеРесурса,
	|	ВидыСогласуемыхРесурсовСправочник.ЕдиницаИзмерения                                                                   КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидСогласуемогоРесурса)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсовСправочник
	|		ПО (ИСТИНА)
	|			И (ВидыСогласуемыхРесурсовСправочник.Ссылка = &ВидСогласуемогоРесурса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиСогласующийПоРесурсу КАК ЗадачиСогласующийПоРесурсу
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиСогласующийПоРесурсу.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО (ЗадачиПроцесса.Предмет = СогласующиеПоПредметам.Предмет
	|				И СогласующиеПоПредметам.СогласуемыйРесурс = &ВидСогласуемогоРесурса
	|				И СогласующиеПоПредметам.Согласующий = &ТекущийПользователь)
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)";
	
КонецФункции

Процедура СогласоватьРесурсТекущихЗадач(МассивЗадач, СогласуемыйРесурс, КоличествоОбработанных) Экспорт

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	КоличествоОбработанных = Новый Структура;
	КоличествоОбработанных.Вставить("Обработано", 0);
	КоличествоОбработанных.Вставить("НеОбработано", 0);
	
	ШаблоныОшибок = Новый Структура;
	ШаблоныОшибок.Вставить("Согласующий",         НСтр("ru='Вы не являетесь согласующим ресурса ""%1"" задачи %2. Cогласование не выполнено'"));
	ШаблоныОшибок.Вставить("НечегоСогласовывать", НСтр("ru='Для задачи %1 нет направленных на согласование ресурсов. Согласование не выполнено'"));
	ШаблоныОшибок.Вставить("ПомеченНаУдаление",   НСтр("ru='Задача %1 помечена на удаление. Согласование не выполнено'"));
	ШаблоныОшибок.Вставить("Заблокировать",       НСтр("ru='Не удалось заблокировать %1. %2'"));
	ШаблоныОшибок.Вставить("Записать",            НСтр("ru='Не удалось записать %1. %2'"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ТекстЗапросаПоЗадачамДляСогласованияТекущихЗадач();
	
	Запрос.УстановитьПараметр("МассивЗадач",            МассивЗадач);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурса", СогласуемыйРесурс);
	Запрос.УстановитьПараметр("ТекущийПользователь",    ТекущийПользователь);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	МассивЗадачДляРасчета = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблоныОшибок.ПомеченНаУдаление, Выборка.Представление), Выборка.Задача);
			КоличествоОбработанных.НеОбработано = КоличествоОбработанных.НеОбработано + 1; 
			Продолжить;
		КонецЕсли;
		
		ПредставлениеВидаРесурса = ЗадачиПроцессовКлиентСервер.ПредставлениеВидаРесурса(Выборка.НаименованиеРесурса, Выборка.ЕдиницаИзмерения);
		
		Если Не Выборка.ЯвляетсяСогласующим Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблоныОшибок.Согласующий, ПредставлениеВидаРесурса, Выборка.Представление), Выборка.Задача);
			КоличествоОбработанных.НеОбработано = КоличествоОбработанных.НеОбработано + 1; 
			Продолжить;
		КонецЕсли;
		
		Если Выборка.КСогласованию  = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблоныОшибок.НечегоСогласовывать, Выборка.Представление), Выборка.Задача);
			КоличествоОбработанных.НеОбработано = КоличествоОбработанных.НеОбработано + 1; 
			Продолжить;
		КонецЕсли;
		
		Параметры = ПараметрыМножественногоСогласованияЗадач();
		Параметры.ДанныеЗадачи             = Выборка;
		Параметры.СогласуемыйРесурс        = СогласуемыйРесурс;
		Параметры.ПредставлениеВидаРесурса = ПредставлениеВидаРесурса;
		Параметры.ТекущийПользователь      = ТекущийПользователь;
		Параметры.ШаблоныОшибок            = ШаблоныОшибок;
		Параметры.КоличествоОбработанных   = КоличествоОбработанных;
		Параметры.МассивЗадачДляРасчета    = МассивЗадачДляРасчета;
		
		СогласоватьРесурсВЗадачеИНаправитьИсполнителю(Параметры);
		
	КонецЦикла;
		
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадачДляРасчета, СогласуемыйРесурс, Неопределено);

КонецПроцедуры

Процедура НеСогласоватьСогласующимРесурсПоВыборке(РезультатЗапроса, СогласуемыйРесурс, ПредставлениеВидаРесурса, ТекущийПользователь)
	
	МассивЗадачДляРасчета = Новый Массив;
	ТекущаяДата = ТекущаяДатаСеанса();
	Выборка     = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = Выборка.Задача;
		ПараметрыСогласования.Исполнитель              = Выборка.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс        = СогласуемыйРесурс;
		ПараметрыСогласования.ПредставлениеВидаРесурса = ПредставлениеВидаРесурса;
		ПараметрыСогласования.Количество               = Выборка.КСогласованию;
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.Согласующий              = ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДата;
		
		РегистрыСведений.ПротоколСогласованияРесурсов.НеСогласоватьРесурсВЗадачеИНаправитьИсполнителю(ПараметрыСогласования);
		МассивЗадачДляРасчета.Добавить(Выборка.Задача);
		
	КонецЦикла;
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадачДляРасчета, СогласуемыйРесурс, Неопределено);
	
КонецПроцедуры

Процедура ЧастичноСогласоватьРесурс(Параметры) Экспорт

	Задача                     = Параметры.Задача;
	ТекущийПользователь        = Пользователи.ТекущийПользователь();
	ТолькоРесурсыТекущейЗадачи = Параметры.ТолькоРесурсыТекущейЗадачи;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задача);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заблокировать %1. %2'"), 
		                        Задача,
		                        КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Задача);
		Возврат;
	КонецПопытки;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ПараметрыЧастичногоСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыЧастичногоСогласованияРесурса();
	
	ПараметрыЧастичногоСогласования.Задача                   = Параметры.Задача;
	ПараметрыЧастичногоСогласования.Исполнитель              = Параметры.ИсполнительПорученияПоЗадаче;
	ПараметрыЧастичногоСогласования.СогласуемыйРесурс        = Параметры.СогласуемыйРесурс;
	ПараметрыЧастичногоСогласования.ПредставлениеВидаРесурса = Параметры.ПредставлениеВидаРесурса;
	ПараметрыЧастичногоСогласования.Согласуется              = Параметры.Согласовано;
	ПараметрыЧастичногоСогласования.НеСогласуется            = Параметры.НеСогласовано;
	ПараметрыЧастичногоСогласования.ТекущийПользователь      = ТекущийПользователь;
	ПараметрыЧастичногоСогласования.Согласующий              = ТекущийПользователь;
	ПараметрыЧастичногоСогласования.ТекущаяДата              = ТекущаяДата;
	
	РегистрыСведений.ПротоколСогласованияРесурсов.ЧастичноСогласоватьРесурсВЗадачеИНаправитьРезультатыИсполнителю(ПараметрыЧастичногоСогласования,
	                                                                                                              Параметры.ТекстПоручения,
	                                                                                                              Истина);
	
КонецПроцедуры

Процедура НеСогласоватьРесурс(Параметры) Экспорт

	Задача                     = Параметры.Задача;
	ТекущийПользователь        = Пользователи.ТекущийПользователь();
	ТолькоРесурсыТекущейЗадачи = Параметры.ТолькоРесурсыТекущейЗадачи;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задача);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заблокировать %1. %2'"), 
		                        Задача,
		                        КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Задача);
		Возврат;
	КонецПопытки;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ТолькоРесурсыТекущейЗадачи Тогда
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = Параметры.Задача;
		ПараметрыСогласования.Исполнитель              = Параметры.ИсполнительПорученияПоЗадаче;
		ПараметрыСогласования.СогласуемыйРесурс        = Параметры.СогласуемыйРесурс;
		ПараметрыСогласования.ПредставлениеВидаРесурса = Параметры.ПредставлениеВидаРесурса;
		ПараметрыСогласования.Количество               = Параметры.НеСогласовано;
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.Согласующий              = ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДата;
		ПараметрыСогласования.ТекстПоручения           = Параметры.ТекстПоручения;
		
		РегистрыСведений.ПротоколСогласованияРесурсов.НеСогласоватьРесурсВЗадачеИНаправитьИсполнителю(ПараметрыСогласования);
		
	Иначе
		
		МассивЗадач = Новый Массив;
		МассивЗадач.Добавить(Параметры.Задача);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляСогласованияМассиваЗадачСогласующимРесурса();
		
		Запрос.УстановитьПараметр("МассивЗадач",            МассивЗадач);
		Запрос.УстановитьПараметр("ВидСогласуемогоРесурса", Параметры.СогласуемыйРесурс);
		Запрос.УстановитьПараметр("ТекущийПользователь",    ТекущийПользователь);
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос.УстановитьПараметр("ЗадачиСогласованныеИзРодительских", Новый Массив);
		Результат = Запрос.ВыполнитьПакет();
		УстановитьПривилегированныйРежим(Ложь);
		
		НеСогласоватьСогласующимРесурсПоВыборке(Результат[4], Параметры.СогласуемыйРесурс, 
		                                        Параметры.ПредставлениеВидаРесурса, ТекущийПользователь);
		
		ЗадачаОбъект = Параметры.Задача.ПолучитьОбъект();
		
		НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
		
		НоваяСтрокаПротокола.Дата                 = ТекущаяДата;
		НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
		НоваяСтрокаПротокола.ТекстПоручения       = Параметры.ТекстПоручения;
		НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
		НоваяСтрокаПротокола.ИсполнительПоручения = Параметры.ИсполнительПорученияПоЗадаче;
		ЗадачаОбъект.ИсполнительПорученияПоЗадаче = Параметры.ИсполнительПорученияПоЗадаче;
		ЗадачаОбъект.ТекстПоследнегоПоручения     = Параметры.ТекстПоручения;
		ЗадачаОбъект.ДатаПорученияПоЗадаче        = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
		                                                                                              ТекущийПользователь,
		                                                                                              ТекущаяДата);
		
		ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчет", Истина);
		ЗадачаОбъект.Записать();
		
	КонецЕсли;
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(Параметры.Задача, Параметры.СогласуемыйРесурс, Неопределено);
	
КонецПроцедуры

Процедура УправлениеВидимостьюКомандСписка(Форма, Параметры) Экспорт
	
	ДоступенУчетВремени  = ЗадачиПроцессовПовтИсп.ПользователюДоступенУчетВремени();
	ДоступноПланирование = ЗадачиПроцессовПовтИсп.ПользователюДоступноПланирование();
	
	Если Параметры.Свойство("ЗависящиеОтПраваНаИзменение")
		И ТипЗнч(Параметры.ЗависящиеОтВыбораХодаСогласования) = Тип("Массив")
		И Не ПравоДоступа("Изменение", Метаданные.Справочники.ЗадачиПроцесса) Тогда
		
		ЗадачиПроцессовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, Параметры.ЗависящиеОтПраваНаИзменение, "Видимость", Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗависящиеОтВыбораХодаСогласования")
		И ТипЗнч(Параметры.ЗависящиеОтВыбораХодаСогласования) = Тип("Массив")
		И ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов") Тогда
		
		ЭлементыВидимы = Истина;
		
		Если Не ЗначениеЗаполнено(Форма.ВидСогласуемогоРесурсаДляВывода) Тогда
			
			ЭлементыВидимы = Ложь;
			
		Иначе
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("СогласуемыйРесурс", Форма.ВидСогласуемогоРесурсаДляВывода);
			НайденныеСтроки = Форма.ТаблицаСогласуемыхРесурсов.НайтиСтроки(ПараметрыПоиска);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЭлементыВидимы = НайденныеСтроки[0].ВыполняетсяСогласование;
			Иначе
				ЭлементыВидимы = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗадачиПроцессовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, Параметры.ЗависящиеОтВыбораХодаСогласования, "Видимость", ЭлементыВидимы); 
		
		Если Параметры.Свойство("КолонкиСогласовавние")
			И ТипЗнч(Параметры.КолонкиСогласовавние) = Тип("Массив") Тогда
			
			ЗадачиПроцессовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, Параметры.КолонкиСогласовавние, "Видимость", ЭлементыВидимы);
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиУчетВремени")
		И ТипЗнч(Параметры.КолонкиУчетВремени) = Тип("Массив")
		И Не ДоступенУчетВремени Тогда 
		
		ЗадачиПроцессовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, Параметры.КолонкиУчетВремени, "Видимость", Ложь);
		
	КонецЕсли;
	
	Если Параметры.Свойство("КолонкиПланирование")
		И ТипЗнч(Параметры.КолонкиПланирование) = Тип("Массив")
		И Не ДоступноПланирование Тогда 
		
		ЗадачиПроцессовКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, Параметры.КолонкиПланирование, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеИсполнителя

Процедура ИзменитьИсполнителяЗадач(МассивЗадач, Исполнитель, КоличествоОбработанных) Экспорт

	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	
	ШаблонИсполнительЗадачиШаблона = НСтр("ru='Задача %1 создана по шаблону и вы не являетесь исполнителем задачи шаблона. Изменение не выполнено'");
	ШаблонИсполнительНеМеняется    = НСтр("ru='В задаче %1 уже указан исполнитель %2. Изменение не выполнено'");
	ШаблонПрочее                   = НСтр("ru='Вы не можете изменить исполнителя задачи %1 так как не являетесь ни текущим исполнителем, ни исполнтелем родительской задачи, ни контролирующим. Изменение не выполнено'");
	ШаблонЗаблокировать            = НСтр("ru='Не удалось заблокировать %1. %2'");
	ШаблонЗаписать                 = НСтр("ru='Не удалось записать %1. %2'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоЗадачамДляИзмененияИсполнителя();
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроля();
	ШаблонОшибки                   = "";
	
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Исполнитель = Исполнитель Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонИсполнительНеМеняется, Выборка.Представление, Выборка.Исполнитель);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		ДоступноИзменение = Ложь;
		
		Если ПравоИзмененияЗадачБезКонтроля Тогда
			
			ДоступноИзменение = Истина;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.ИсполнительЗадачиШаблона) Тогда
			
			Если ТекущийПользователь = Выборка.ИсполнительЗадачиШаблона Тогда
				
				ДоступноИзменение = Истина;
				
			Иначе
				
				ШаблонОшибки      = ШаблонИсполнительЗадачиШаблона;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийПользователь = Выборка.Исполнитель 
			Или ТекущийПользователь = Выборка.ИсполнительРодительскойЗадачи
			Или ТекущийПользователь = Выборка.Контролирующий
			Или ТекущийПользователь = Выборка.ОтветственныйПредмета Тогда
			
			ДоступноИзменение = Истина;
			
		Иначе 
			
			ШаблонОшибки = ШаблонПрочее;
			
		КонецЕсли;
		
		Если Не ДоступноИзменение Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Выборка.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонЗаблокировать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Исполнитель = Исполнитель;
		
		Попытка
			ЗадачаОбъект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонЗаписать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПоЗадачамДляИзмененияИсполнителя()
	
	ТекстЗапросаОтветственные = ЗадачиПроцессовПереопределяемый.ТекстЗапросаОтветственныеПредметовМассиваЗадач();
	
	Возврат ТекстЗапросаОтветственные + "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                                                           КАК Ссылка,
	|	ЗадачиПроцесса.Исполнитель                                                                      КАК Исполнитель,
	|	ЗадачиПроцесса.Наименование                                                                     КАК Представление,
	|	ЗадачиПроцесса.Контролирующий                                                                   КАК Контролирующий,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))    КАК ИсполнительРодительскойЗадачи,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Контролирующий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК КонтролирующийРодительскойЗадачи,
	|	ЕСТЬNULL(ЗадачиШаблонаПроцесса.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))     КАК ИсполнительЗадачиШаблона,
	|	ЕСТЬNULL(ПредметыОтветственные.Ответственный, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))   КАК ОтветственныйПредмета
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО ЗадачиПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиШаблонаПроцесса КАК ЗадачиШаблонаПроцесса
	|		ПО ЗадачиПроцесса.ЗадачаШаблона = ЗадачиШаблонаПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредметыОтветственные КАК ПредметыОтветственные
	|		ПО ЗадачиПроцесса.Предмет = ПредметыОтветственные.Предмет
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)";
	
КонецФункции

#КонецОбласти

#Область ОзнакомитьсяСЗадачами

Процедура ОзнакомитьсяСЗадачами(МассивЗадач, КоличествоОбработанных) Экспорт
	
	ТекущийПользователь  = Пользователи.ТекущийПользователь();
	
	ШаблонНетПоручения                     = НСтр("ru='Задача %1 не имеет текущего поручения. Ознакомление не выполнено'");
	ШаблонНаправленаНеТекущемуПользователю = НСтр("ru='Поручение по задаче %1 направлено не вам. Ознакомление не выполнено'");
	ШаблонЗаблокировать                    = НСтр("ru='Не удалось заблокировать %1. %2'");
	ШаблонЗаписать                         = НСтр("ru='Не удалось записать %1. %2'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоЗадачамДляОзнакомления();
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИсполнительПорученияПоЗадаче <> ТекущийПользователь Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонНаправленаНеТекущемуПользователю, Выборка.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.ИсполнительПорученияПоЗадаче) Тогда
			
			ТекстОшибки = СтрШаблон(ШаблонНетПоручения, Выборка.Представление);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонЗаблокировать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
		КонецПопытки;
		
		ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОзнакомитьсяСЗадачей(ЗадачаОбъект, ТекущийПользователь);
		
		Попытка
			ЗадачаОбъект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонЗаписать, Выборка.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
		КонецПопытки;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ОзнакомитьсяСЗадачей(ЗадачаОбъект, ТекущийПользователь)
	
	ТекстПоручения               = "";
	ИсполнительПорученияПоЗадаче = Справочники.Пользователи.ПустаяСсылка();
	ТекущаяДата    = ТекущаяДатаСеанса();

	НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();

	НоваяСтрокаПротокола.Дата                 = ТекущаяДата;
	НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
	НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
	НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
	НоваяСтрокаПротокола.ИсполнительПоручения = ИсполнительПорученияПоЗадаче;

	ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ИсполнительПорученияПоЗадаче;
	ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
	ЗадачаОбъект.ДатаПорученияПоЗадаче        = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
	                                                                                              ТекущийПользователь,
	                                                                                              ТекущаяДата);

КонецПроцедуры

Функция ТекстЗапросаПоЗадачамДляОзнакомления()
	
	Возврат "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                       КАК Ссылка,
	|	ЗадачиПроцесса.Наименование                 КАК Представление,
	|	ЗадачиПроцесса.ИсполнительПорученияПоЗадаче КАК ИсполнительПорученияПоЗадаче
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивЗадач)";
	
КонецФункции

#КонецОбласти

#Область ПеренаправлениеЗадач

Процедура ПеренаправитьЗадачи(МассивЗадач, КоличествоОбработанных, ДанныеПеренаправления) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		Если Не ТипЗнч(Задача)= Тип("СправочникСсылка.ЗадачиПроцесса") 
			Или Не ЗначениеЗаполнено(Задача) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Задача);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заблокировать %1. %2'"), 
			                        Задача,
			                        КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Задача);
			Продолжить;
		КонецПопытки;
	
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		ЗаполнитьПеренаправляемуюЗадачу(ЗадачаОбъект, ТекущийПользователь, ДанныеПеренаправления);
	
		Попытка
			ЗадачаОбъект.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось записать %1. %2'"), ЗадачаОбъект.Наименование, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЗадачаОбъект.Ссылка);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НаправитьИсполнителямЗадачи(МассивЗадач, КоличествоОбработанных, ДанныеПеренаправления) Экспорт

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Задача Из МассивЗадач Цикл
		
		Если Не ТипЗнч(Задача)= Тип("СправочникСсылка.ЗадачиПроцесса") 
			Или Не ЗначениеЗаполнено(Задача) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Задача);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заблокировать %1. %2'"), 
			                        Задача,
			                        КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Задача);
			Продолжить;
		КонецПопытки;
	
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		
		ДанныеПеренаправления.ИсполнительПорученияПоЗадаче = ЗадачаОбъект.Исполнитель;
		ЗаполнитьПеренаправляемуюЗадачу(ЗадачаОбъект, ТекущийПользователь, ДанныеПеренаправления);
	
		Попытка
			ЗадачаОбъект.Записать();
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось записать %1. %2'"), ЗадачаОбъект.Наименование, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЗадачаОбъект.Ссылка);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПеренаправитьЗадачу(ДанныеПеренаправления) Экспорт
	
	Задача = ДанныеПеренаправления.Задача;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задача);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось заблокировать %1. %2'"), 
		                        Задача,
		                        КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Задача);
		Возврат;
	КонецПопытки;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	
	ЗаполнитьПеренаправляемуюЗадачу(ЗадачаОбъект, ТекущийПользователь, ДанныеПеренаправления);
	
	Попытка
		ЗадачаОбъект.Записать();
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось записать %1. %2'"), ЗадачаОбъект.Наименование, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЗадачаОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПеренаправляемуюЗадачу(ЗадачаОбъект, ТекущийПользователь, ДанныеПеренаправления) Экспорт
	
	ТекстПоручения               = ДанныеПеренаправления.ТекстПоручения;
	ИсполнительПорученияПоЗадаче = ДанныеПеренаправления.ИсполнительПорученияПоЗадаче;
	ТекущаяДата    = ТекущаяДатаСеанса();
	
	НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
	
	НоваяСтрокаПротокола.Дата                 = ТекущаяДата;
	НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
	НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
	НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
	НоваяСтрокаПротокола.ИсполнительПоручения = ИсполнительПорученияПоЗадаче;
	
	ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ИсполнительПорученияПоЗадаче;
	ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
	ЗадачаОбъект.ДатаПорученияПоЗадаче        = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
	                                                                                              ТекущийПользователь,
	                                                                                              ТекущаяДата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИерархияЗадач

// Выполняет запись в РС "Иерархия задач процесса" для массива переданных задач или для всего справочника,
// если массив не передан в процедуру.
//
// Параметры:
//  Массив - Массив - массив содержащи партнеров, для которых необходимо выполнить запись в РС "Иерархия задач процессов".
//
Процедура ВыполнитьЗаписьИерархияЗадачиПроцессов(МассивЗадач = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МассивЗадач = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗадачиПроцесса.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|ГДЕ
		|	ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписатьИерархиюЗадачиПроцесса(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого ЭлементМассива Из МассивЗадач Цикл
			
			ЗаписатьИерархиюЗадачиПроцесса(ЭлементМассива);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает РС "Иерархия задач процессов"
Процедура ОчиститьРегистрСведенийИерархияЗадачПроцесса() Экспорт
	
	НаборЗаписей = РегистрыСведений.ИерархияЗадачПроцесса.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет запись в РС "Иерархия задач процесса" для переданной в процедурыу задачи.
//
// Параметры:
//  Ссылка - СправочникСсылка.Партнеры - ссылка на партнера для которого необходимо выполнить запись в РС "Иерархия партнеров".
//
Процедура ЗаписатьИерархиюЗадачиПроцесса(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ЗадачиПроцесса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В ИЕРАРХИИ(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоИерархии = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЭлементТекущегоСправочника = ДеревоИерархии.Строки.Найти(Ссылка,"Ссылка",Истина);
	
	Если ЭлементТекущегоСправочника <> Неопределено Тогда
		
		ВыполнитьЗаписьВРегистрИерархииПоЗадачеПроцесса(ЭлементТекущегоСправочника);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистрИерархииПоПодчиненнымЗадачамПроцесса(СтрокиДерева,ТекущийЭлементОбработки)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Ссылка <> ТекущийЭлементОбработки Тогда
			ВыполнитьЗаписьВРегистрИерархииПоЗадачеПроцесса(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистрИерархииПоЗадачеПроцесса(СтрокаДерева)
	
	НаборЗаписей = РегистрыСведений.ИерархияЗадачПроцесса.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗадачаПроцесса.Установить(СтрокаДерева.Ссылка);
	
	РодительСтрокиДерева = СтрокаДерева;
	Пока РодительСтрокиДерева <> Неопределено Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ЗадачаПроцесса  = СтрокаДерева.Ссылка;
		ЗаписьНабора.Родитель = РодительСтрокиДерева.Ссылка;
		ЗаписьНабора.Уровень  = РодительСтрокиДерева.Уровень();
		РодительСтрокиДерева  = РодительСтрокиДерева.Родитель;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ВыполнитьЗаписьВРегистрИерархииПоПодчиненнымЗадачамПроцесса(СтрокаДерева.Строки, СтрокаДерева.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомЗначений

Функция ДеревоЗадачПроцесса(Предмет, СУпорядочиванием = Ложь) Экспорт

	ДеревоЗадач = Новый ДеревоЗначений;
	ДеревоЗадач.Колонки.Добавить("Задача");
	ДеревоЗадач.Колонки.Добавить("Статус");
	ДеревоЗадач.Колонки.Добавить("ЗадачаШаблона");
	ДеревоЗадач.Колонки.Добавить("ПлановаяДлительность",                       Новый ОписаниеТипов("Число"));
	ДеревоЗадач.Колонки.Добавить("ЗначениеУпорядочивания",                     Новый ОписаниеТипов("Число"));
	ДеревоЗадач.Колонки.Добавить("Уровень",                                    Новый ОписаниеТипов("Число"));
	ДеревоЗадач.Колонки.Добавить("МаксимальноеЗначениеУпорядочиванияНаУровне", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка КАК Задача,
	|	ЗадачиПроцесса.Статус КАК Статус,
	|	ЗадачиПроцесса.ЗадачаШаблона КАК ЗадачаШаблона,
	|	ЗадачиПроцесса.ПлановаяДлительность КАК ПлановаяДлительность,
	|	ВЫБОР
	|		КОГДА &СУпорядочиванием
	|			ТОГДА ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеУпорядочивания,
	|	ВЫБОР
	|		КОГДА &СУпорядочиванием
	|			ТОГДА ЕСТЬNULL(СостоянияЗадачПроцессов.МаксимальноеЗначениеУпорядочиванияНаУровне, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаксимальноеЗначениеУпорядочиванияНаУровне
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Предмет = &Предмет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задача ИЕРАРХИЯ";
		
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("СУпорядочиванием", СУпорядочиванием);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если Выборка.Количество() > 0 Тогда
	
		ДобавитьСтрокиДереваЗадач(Выборка, ДеревоЗадач, СУпорядочиванием, 1);
		
	КонецЕсли;
	
	Возврат ДеревоЗадач;

КонецФункции

Процедура ДобавитьСтрокиДереваШаблона(Выборка, СтрокаРодитель, УровеньРекурсии)
	
	КоллекцияСтрок = СтрокаРодитель.Строки;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = КоллекцияСтрок.Добавить();
		
		НоваяСтрока.Наименование                         = Выборка.Наименование;
		НоваяСтрока.ЗадачаШаблона                        = Выборка.Ссылка;
		НоваяСтрока.Исполнитель                          = Выборка.Исполнитель;
		НоваяСтрока.ЗначениеУпорядочивания               = Выборка.ЗначениеУпорядочивания;
		НоваяСтрока.Контролирующий                       = Выборка.Контролирующий;
		НоваяСтрока.ПлановаяДлительность                 = Выборка.ПлановаяДлительность;
		НоваяСтрока.Описание                             = Выборка.Ссылка.ПолучитьОбъект().Описание.Получить();
		НоваяСтрока.ВидДеятельности                      = Выборка.ВидДеятельности;
		НоваяСтрока.СдвигПриоритета                      = Выборка.СдвигПриоритета;
		НоваяСтрока.ВозможнаОтменаОтветственнымЗаПредмет = Выборка.ВозможнаОтменаОтветственнымЗаПредмет;
		НоваяСтрока.ПредшествующиеЗадачи                 = Выборка.ПредшествующиеЗадачи.Выгрузить();
		НоваяСтрока.ПланируемыеРесурсы                   = Выборка.ПланируемыеРесурсы.Выгрузить();
		НоваяСтрока.ДополнительныеРеквизиты              = Выборка.ДополнительныеРеквизиты.Выгрузить();
		НоваяСтрока.ИндексКартинки                       = 1;
		
		ПодчиненнаяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если ПодчиненнаяВыборка.Количество() > 0 Тогда
			ДобавитьСтрокиДереваШаблона(ПодчиненнаяВыборка,НоваяСтрока,УровеньРекурсии + 1);
		КонецЕсли;
		
	КонецЦикла;
	
	КоллекцияСтрок.Сортировать("ЗначениеУпорядочивания");

КонецПроцедуры

Процедура СформироватьНумерациюЭлементовДерева(СтрокиДерева, УровеньРекурсии, МассивПолныйКод, ПредставленияЗадач)
	
	Если МассивПолныйКод.Количество() < УровеньРекурсии Тогда
		МассивПолныйКод.Добавить(0);
	КонецЕсли;
	
	Для каждого Элемент Из СтрокиДерева Цикл

		МассивПолныйКод[УровеньРекурсии-1] = МассивПолныйКод[УровеньРекурсии-1] + 1;
		Для инд = УровеньРекурсии По МассивПолныйКод.Количество()-1 Цикл
			МассивПолныйКод[инд] = 0;
		КонецЦикла;
		
		ПолныйКод = ЗадачиПроцессовКлиентСервер.ПреобразоватьМассивВСтроку(МассивПолныйКод,УровеньРекурсии, ".");
		ПолныйКод = ЗадачиПроцессовКлиентСервер.УдалитьПоследниеСимволыИзСтроки(ПолныйКод,"0.",".");
		
		Элемент.ПолныйКод = ПолныйКод;
		Если Элемент.Свойство("Наименование") 
			И Элемент.Свойство("ПредставлениеЗадачи") Тогда
			
			Элемент.ПредставлениеЗадачи =  Элемент.ПолныйКод + " " + Элемент.Наименование;
			
		КонецЕсли;
		
		ПредставленияЗадач.Вставить(Элемент.ЗадачаШаблона, ПолныйКод + " " + Элемент.Наименование);
		
		ПодчиненныеЭлементыСтрокиДерева = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыСтрокиДерева.Количество() > 0 Тогда
			СформироватьНумерациюЭлементовДерева(ПодчиненныеЭлементыСтрокиДерева,УровеньРекурсии + 1,МассивПолныйКод, ПредставленияЗадач);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьМинимальныеПродолжительностиЗадач(РодительскаяСтрока, ДеревоЗадач)
	
	Для Каждого СтрокаДерева Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
		
		РассчитатьМинимальнуюПродолжительностьЗадачи(СтрокаДерева, ДеревоЗадач);
		
	КонецЦикла;
	
КонецПроцедуры

Функция МаксимальнаяЦепочкаЗадачи(МассивЦепочек, СтрокаДерева, ДеревоЗадач)
	
	Если МассивЦепочек.Количество() = 0 Тогда
		Возврат 1;
	КонецЕсли;
	
	СоответствиеЗадачДлительностей = Новый Соответствие;
	МаксимальнаяДлительность = 1;
	
	Для Каждого Цепочка Из МассивЦепочек Цикл
		
		ДлительностьЦепочки = 0;
		
		Для Каждого ЭлементЦепочки Из Цепочка Цикл
			
			ДлительностьЭлементаЦепочки = СоответствиеЗадачДлительностей.Получить(ЭлементЦепочки);
			
			Если ДлительностьЭлементаЦепочки = Неопределено Тогда
				ИдентификаторНайденнойСтроки = ЗадачиПроцессовКлиентСервер.НайтиСтрокуВДанныхФормыДерево(СтрокаДерева, ЭлементЦепочки, "ЗадачаШаблона", Ложь);
				
				Если ИдентификаторНайденнойСтроки <> - 1 Тогда
					ДанныеЗадачи = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторНайденнойСтроки);
					Если ДанныеЗадачи = Неопределено Тогда
						ДлительностьЭлементаЦепочки = 0;
						СоответствиеЗадачДлительностей.Вставить(ЭлементЦепочки, 0);
					Иначе
						ДлительностьЭлементаЦепочки = Макс(ДанныеЗадачи.ПлановаяДлительность, 1);
					КонецЕсли;
				Иначе
					ДлительностьЭлементаЦепочки = 0;
				КонецЕсли;
				
				СоответствиеЗадачДлительностей.Вставить(ЭлементЦепочки, ДлительностьЭлементаЦепочки);
				
			КонецЕсли;
			
			ДлительностьЦепочки = ДлительностьЦепочки + ДлительностьЭлементаЦепочки;
			
		КонецЦикла;
		
		МаксимальнаяДлительность = Макс(МаксимальнаяДлительность, ДлительностьЦепочки);
		
	КонецЦикла;
	
	Возврат МаксимальнаяДлительность;
	
КонецФункции

Процедура ДобавитьСтрокиДереваЗадач(Выборка, СтрокаРодитель, СУпорядочиванием, УровеньРекурсии)
	
	КоллекцияСтрок = СтрокаРодитель.Строки;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = КоллекцияСтрок.Добавить();
		
		НоваяСтрока.Задача                                     = Выборка.Задача;
		НоваяСтрока.Статус                                     = Выборка.Статус;
		НоваяСтрока.ЗадачаШаблона                              = Выборка.ЗадачаШаблона;
		НоваяСтрока.ПлановаяДлительность                       = Выборка.ПлановаяДлительность;
		НоваяСтрока.ЗначениеУпорядочивания                     = Выборка.ЗначениеУпорядочивания;
		НоваяСтрока.МаксимальноеЗначениеУпорядочиванияНаУровне = Выборка.МаксимальноеЗначениеУпорядочиванияНаУровне;
		НоваяСтрока.Уровень                                    = УровеньРекурсии;
		
		ПодчиненнаяВыборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Если ПодчиненнаяВыборка.Количество() > 0 Тогда
			ДобавитьСтрокиДереваЗадач(ПодчиненнаяВыборка, НоваяСтрока, СУпорядочиванием, УровеньРекурсии + 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеЗадачПоШаблону

Функция ПараметрыСозданияЗадачПоШаблону(Предмет, Настройки, ПолноеИмяМетаданныхПредмета)
	
	ИсполнительЗадач = Пользователи.ТекущийПользователь();
	ДатаПервойЗадачи = НачалоДня(ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(Настройки.ИсполнительЗадач)
		И ЗначениеЗаполнено(Настройки.ДатаПервойЗадачи) Тогда
	
		Запрос = Новый Запрос;
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ИсполнительЗадач КАК ИсполнительЗадач
		|ИЗ
		|	&ПолноеИмя КАК ДанныеПредмета
		|ГДЕ 
		|	ДанныеПредмета.Ссылка = &Предмет";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмя", ПолноеИмяМетаданныхПредмета);
		
		Если Настройки.ИсполнительЗадач = Неопределено Тогда
			Запрос.УстановитьПараметр("ИсполнительЗадач", ИсполнительЗадач);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсполнительЗадач", "ДанныеПредмета." + Настройки.ИсполнительЗадач);
		КонецЕсли;
		
		Запрос.Текст  = ТекстЗапроса;
		Запрос.УстановитьПараметр("Предмет", Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.ИсполнительЗадач) Тогда
				ИсполнительЗадач = Выборка.ИсполнительЗадач;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ПриоритетПредмета = Неопределено;
	ПриоритетыПроекта = Неопределено;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот") Тогда
	
		ПроектПредмета = ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(Предмет);
		ПриоритетПоУмолчаниюПредмета = Справочники.ПриоритетыРабот.ПриоритетПоУмолчанию(ПроектПредмета);
		Если ЗначениеЗаполнено(ПриоритетПоУмолчаниюПредмета) Тогда
			ПриоритетПредмета = РегистрыСведений.ПриоритетыРабот.ПриоритетРаботы(Предмет);
			Если Не ЗначениеЗаполнено(ПриоритетПредмета) Тогда
				ПриоритетПредмета = ПриоритетПоУмолчаниюПредмета;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПриоритетПредмета) Тогда
			ДанныеПриоритетов = Справочники.ПриоритетыРабот.ДанныеДействующихПриоритетов(ПроектПредмета);
			СписокПриоритетов = Новый СписокЗначений;
			Для Каждого ДанныеПриоритета Из ДанныеПриоритетов Цикл
				СписокПриоритетов.Добавить(ДанныеПриоритета.Приоритет);
			КонецЦикла;
			ПриоритетыПроекта = ПриоритетыОчередиРаботыКлиентСервер.СдвигиПриоритетов(СписокПриоритетов, ПриоритетПредмета);
		КонецЕсли;
	
	КонецЕсли;
	
	ПараметрыСозданияЗадач = Новый Структура;
	ПараметрыСозданияЗадач.Вставить("Исполнитель",       ИсполнительЗадач);
	ПараметрыСозданияЗадач.Вставить("ПриоритетПредмета", ПриоритетПредмета);
	ПараметрыСозданияЗадач.Вставить("ПриоритетыПроекта", ПриоритетыПроекта);
	
	Возврат ПараметрыСозданияЗадач;
	
КонецФункции

Функция НастройкиСозданияЗадачПоШаблону()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ПараметрыСозданияЗадачПоШаблону",Новый Соответствие);
	Настройки.Вставить("ПараметрОтбораДоступныхШаблонов", Неопределено);
	
	ТаблицаПредметов = ТаблицаДоступныхПредметовШаблона();
	
	Для Каждого Предмет Из ТаблицаПредметов Цикл
		
		ПараметрыСозданияЗадач = Новый Структура;
		ПараметрыСозданияЗадач.Вставить("ИсполнительЗадач", Неопределено);
		ПараметрыСозданияЗадач.Вставить("ДатаПервойЗадачи", Неопределено);
		Настройки.ПараметрыСозданияЗадачПоШаблону.Вставить(Предмет.Имя, ПараметрыСозданияЗадач); 
		
	КонецЦикла;
	
	ЗадачиПроцессовПереопределяемый.ПриОпределенииНастроек(Настройки);
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область ШаблонПроцесса

Функция ТаблицаДоступныхПредметовШаблона()
	
	ОснованияДляШаблоновСообщений = Новый ТаблицаЗначений;
	ОснованияДляШаблоновСообщений.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ОснованияДляШаблоновСообщений.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	ТипыПредметовШаблоновСообщений = Метаданные.ОпределяемыеТипы.ПредметПроцесса.Тип.Типы();
	Для каждого ТипПредметаШаблонаСообщения Из ТипыПредметовШаблоновСообщений Цикл
		Назначение = ОснованияДляШаблоновСообщений.Добавить();
		МетаданныеОбъект = Метаданные.НайтиПоТипу(ТипПредметаШаблонаСообщения);
		Назначение.Имя = МетаданныеОбъект.ПолноеИмя();
		Назначение.Представление = МетаданныеОбъект.Представление();
	КонецЦикла;
	
	Возврат ОснованияДляШаблоновСообщений;
	
КонецФункции

Функция ТекстЗапросаПоЗадачамШаблона()
	
	Возврат "
	|ВЫБРАТЬ
	|	ЗадачиШаблонаПроцесса.Ссылка                               КАК Ссылка,
	|	ЗадачиШаблонаПроцесса.ВерсияДанных                         КАК ВерсияДанных,
	|	ЗадачиШаблонаПроцесса.ПометкаУдаления                      КАК ПометкаУдаления,
	|	ЗадачиШаблонаПроцесса.Владелец                             КАК Владелец,
	|	ЗадачиШаблонаПроцесса.Родитель                             КАК Родитель,
	|	ЗадачиШаблонаПроцесса.Код                                  КАК Код,
	|	ЗадачиШаблонаПроцесса.Наименование                         КАК Наименование,
	|	ЗадачиШаблонаПроцесса.Исполнитель                          КАК Исполнитель,
	|	ЗадачиШаблонаПроцесса.Контролирующий                       КАК Контролирующий,
	|	ЗадачиШаблонаПроцесса.Описание                             КАК Описание,
	|	ЗадачиШаблонаПроцесса.ВидДеятельности                      КАК ВидДеятельности,
	|	ЗадачиШаблонаПроцесса.СдвигПриоритета                      КАК СдвигПриоритета,
	|	ЗадачиШаблонаПроцесса.ПлановаяДлительность                 КАК ПлановаяДлительность,
	|	ЗадачиШаблонаПроцесса.ВозможнаОтменаОтветственнымЗаПредмет КАК ВозможнаОтменаОтветственнымЗаПредмет,
	|	ЗадачиШаблонаПроцесса.ПредшествующиеЗадачи.(
	|		ПредшествующаяЗадача КАК ЗадачаШаблона,
	|		"""" КАК ПредставлениеЗадачи
	|	) КАК ПредшествующиеЗадачи,
	|	ЗадачиШаблонаПроцесса.ЗначениеУпорядочивания КАК ЗначениеУпорядочивания,
	|	ЗадачиШаблонаПроцесса.ПланируемыеРесурсы.(
	|		Ресурс КАК Ресурс,
	|		Планируется КАК Планируется
	|	) КАК ПланируемыеРесурсы,
	|	ЗадачиШаблонаПроцесса.ДополнительныеРеквизиты.(
	|		Свойство КАК Свойство,
	|		Значение КАК Значение,
	|		ТекстоваяСтрока КАК ТекстоваяСтрока
	|	) КАК ДополнительныеРеквизиты
	|ИЗ
	|	Справочник.ЗадачиШаблонаПроцесса КАК ЗадачиШаблонаПроцесса
	|ГДЕ
	|	ЗадачиШаблонаПроцесса.Владелец = &ШаблонПроцесса
	|	И НЕ ЗадачиШаблонаПроцесса.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗадачиШаблонаПроцесса.Ссылка ИЕРАРХИЯ,
	|	ЗначениеУпорядочивания";
	
КонецФункции

Функция ПустоеДеревоЗадачШаблона()
	
	ДеревоЗадачШаблона = Новый ДеревоЗначений();
	
	ДеревоЗадачШаблона.Колонки.Добавить("Наименование");
	ДеревоЗадачШаблона.Колонки.Добавить("ЗадачаШаблона");
	ДеревоЗадачШаблона.Колонки.Добавить("ПредставлениеПредшествующиеЗадачи");
	ДеревоЗадачШаблона.Колонки.Добавить("Исполнитель");
	ДеревоЗадачШаблона.Колонки.Добавить("Контролирующий");
	ДеревоЗадачШаблона.Колонки.Добавить("ПлановаяДлительность");
	ДеревоЗадачШаблона.Колонки.Добавить("Описание");
	ДеревоЗадачШаблона.Колонки.Добавить("ВидДеятельности");
	ДеревоЗадачШаблона.Колонки.Добавить("ЗначениеУпорядочивания");
	ДеревоЗадачШаблона.Колонки.Добавить("ИндексКартинки");
	ДеревоЗадачШаблона.Колонки.Добавить("СдвигПриоритета");
	ДеревоЗадачШаблона.Колонки.Добавить("ПредшествующиеЗадачи", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоЗадачШаблона.Колонки.Добавить("ПланируемыеРесурсы", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоЗадачШаблона.Колонки.Добавить("ДополнительныеРеквизиты", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоЗадачШаблона.Колонки.Добавить("ВозможнаОтменаОтветственнымЗаПредмет", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоЗадачШаблона;
	
КонецФункции

Функция ОтветственныйЗаПредметМожетОтменитьЗадачу(ВозможнаОтменаОтветственнымЗаПредмет, ПредметЗадачи, ТекущийПользователь) Экспорт
	
	Если Не ЗначениеЗаполнено(ПредметЗадачи) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ТипЗнч(ПредметЗадачи) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ВозможнаОтменаОтветственнымЗаПредмет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтветственныйЗаПредмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметЗадачи, "Ответственный");
	
	Если ОтветственныйЗаПредмет <> ТекущийПользователь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СогласованиеРесурса

Функция ПредставлениеВидаРесурса(Наименование, ЕдиницаИзмерения) Экспорт
	
	Возврат СтрШаблон("%1 (%2)", СокрЛП(Наименование), СокрЛП(ЕдиницаИзмерения));
	
КонецФункции

Процедура СформироватьПодменюПоВидуРесурса(Форма) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов") Тогда
		
		Форма.ВидСогласуемогоРесурсаДляВывода               = Неопределено;
		Форма.Элементы.ПодменюДанныеПоВидуРесурса.Видимость = Ложь;
		
	Иначе
		
		ЗаполнитьТаблицуРесурсов(Форма);
		
	КонецЕсли;
	
	ИндексКоманды = 0;
	ТекущийСогласуемыйРесурс = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.ТаблицаСогласуемыхРесурсов Цикл
		
		ГруппаРазмещения = Форма.Элементы.ПодменюДанныеПоВидуРесурса;
	
		НоваяКоманда = Форма.Команды.Добавить("ВыводитьХодСогласованияПоВидуРесурса_" + Строка(ИндексКоманды));
		НоваяКоманда.Действие = "Подключаемый_ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования";
		
		КнопкаПодменю = Форма.Элементы.Добавить("ВыводитьХодСогласованияПоВидуРесурса_" + Строка(ИндексКоманды),
		                                        Тип("КнопкаФормы"),
		                                        ГруппаРазмещения);
		
		КнопкаПодменю.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаПодменю.ИмяКоманды            = НоваяКоманда.Имя;
		КнопкаПодменю.Заголовок             = СтрШаблон(НСтр("ru = 'По ресурсу - %1'"), СтрокаТаблицы.Представление);
		КнопкаПодменю.ТолькоВоВсехДействиях = Истина;
		
		СтрокаТаблицы.ИмяКоманды = НоваяКоманда.Имя;
		ТекущийСогласуемыйРесурс = СтрокаТаблицы.СогласуемыйРесурс;
		ИндексКоманды            = ИндексКоманды + 1;
		
	КонецЦикла;
	
	Если ИндексКоманды = 1 Тогда
		Форма.ВидСогласуемогоРесурсаДляВывода               = ТекущийСогласуемыйРесурс;
		Форма.Элементы.ПодменюДанныеПоВидуРесурса.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьПодменюПоПлануЗанятости(Форма, ПараметрыНастроек) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланирование") Тогда
		
		Форма.ВидПланаЗанятостиДляВывода                                           = Неопределено;
		Форма.Элементы.ПодменюДанныеПоПлануЗанятости.Видимость                     = Ложь;
		
	Иначе
		
		ЗаполнитьТаблицуПлановЗанятости(Форма);
		
	КонецЕсли;
	
	ИндексКоманды = 0;
	ТекущийВидПлана= Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.ПланыЗанятости Цикл
		
		ГруппаРазмещения = Форма.Элементы.ПодменюДанныеПоПлануЗанятости;
		ИмяКоманды       = "ВыводитьДанныеПоПлануЗанятости_" + Строка(ИндексКоманды);
		
	
		НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "Подключаемый_ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные";
		
		КнопкаПодменю = Форма.Элементы.Добавить(ИмяКоманды,
		                                        Тип("КнопкаФормы"),
		                                        ГруппаРазмещения);
		
		КнопкаПодменю.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаПодменю.ИмяКоманды            = НоваяКоманда.Имя;
		КнопкаПодменю.Заголовок             = СтрокаТаблицы.Наименование;
		КнопкаПодменю.ТолькоВоВсехДействиях = Истина;
		
		СтрокаТаблицы.ИмяКоманды = НоваяКоманда.Имя;
		ТекущийВидПлана          = СтрокаТаблицы.ВидПлана;
		ИндексКоманды            = ИндексКоманды + 1;
		
		СтрокаТаблицыСТекущимВидомПлана = СтрокаТаблицы;
		
	КонецЦикла;
	
	Если ИндексКоманды = 1 Тогда
		Форма.ВидПланаЗанятостиДляВывода = ТекущийВидПлана;
		Форма.Элементы.ПодменюДанныеПоПлануЗанятости.Видимость = Ложь;
		УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, СтрокаТаблицы, ПараметрыНастроек);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, СтрокаТаблицы, ПараметрыНастроек) Экспорт
	
	ДополнительныеСвойства = Форма.Список.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		ДополнительныеСвойства.Вставить("ВидПланаЗанятости",               Неопределено);
		ДополнительныеСвойства.Вставить("ВидПланируемогоРесурса",          Форма.ВидСогласуемогоРесурсаДляВывода);
		ДополнительныеСвойства.Вставить("ДатаНачалаПредыдущегоПериода",    Дата(1,1,1));
		ДополнительныеСвойства.Вставить("ДатаНачалаТекущегоПериода",       Дата(1,1,1));
		ДополнительныеСвойства.Вставить("ДатаОкончанияПредыдущегоПериода", Дата(1,1,1));
		ДополнительныеСвойства.Вставить("ДатаОкончанияТекущегоПериода",    Дата(1,1,1));
		
	Иначе
		
		ДополнительныеСвойства.Вставить("ВидПланаЗанятости",               СтрокаТаблицы.ВидПлана);
		ДополнительныеСвойства.Вставить("ВидПланируемогоРесурса",          Форма.ВидСогласуемогоРесурсаДляВывода);
		ДополнительныеСвойства.Вставить("ДатаНачалаПредыдущегоПериода",    СтрокаТаблицы.ДатаНачалаПредыдущегоПериода);
		ДополнительныеСвойства.Вставить("ДатаНачалаТекущегоПериода",       СтрокаТаблицы.ДатаНачалаТекущегоПериода);
		ДополнительныеСвойства.Вставить("ДатаОкончанияПредыдущегоПериода", СтрокаТаблицы.ДатаОкончанияПредыдущегоПериода);
		ДополнительныеСвойства.Вставить("ДатаОкончанияТекущегоПериода",    СтрокаТаблицы.ДатаОкончанияТекущегоПериода);
		
	КонецЕсли;
	
	УстановитьЗаголовкиКолонокПоПланамЗанятости(Форма.Элементы, ПараметрыНастроек, СтрокаТаблицы);
	
КонецПроцедуры

Процедура УстановитьЗаголовкиКолонокПоПланамЗанятости(ЭлементыФормы, ПараметрыНастроек, СтрокаТаблицы)
	
	Если ПараметрыНастроек = Неопределено 
		Или Не ТипЗнч(ПараметрыНастроек) = Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиРабочийПланПрошлыйПериод, "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиРабочийПланТекущийПериод, "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиФактПрошлыйПериод, "Видимость",        Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиФактТекущийПериод, "Видимость",        Ложь);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачалаПредыдущегоПериода) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиРабочийПланПрошлыйПериод, "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиФактПрошлыйПериод, "Видимость",        Ложь);
			 
		 Иначе
			
			ТекстПрошлыйПериод = СтрШаблон("%1 - %2",
			                               Формат(СтрокаТаблицы.ДатаНачалаПредыдущегоПериода,    "ДФ=dd.MM"), 
			                               Формат(СтрокаТаблицы.ДатаОкончанияПредыдущегоПериода, "ДФ=dd.MM"));
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиРабочийПланПрошлыйПериод, "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиФактПрошлыйПериод, "Видимость",        Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, 
			                                                             ПараметрыНастроек.ИмяКолонкиРабочийПланПрошлыйПериод, 
			                                                             "Подсказка", 
			                                                             НСтр("ru = 'Рабочий план'") + " (" + ТекстПрошлыйПериод + ")");
			 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, 
			                                                             ПараметрыНастроек.ИмяКолонкиФактПрошлыйПериод, 
			                                                             "Подсказка", 
			                                                             НСтр("ru = 'Факт'") + " (" + ТекстПрошлыйПериод + ")");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, 
			                                                             ПараметрыНастроек.ИмяГруппыПрошлыйПериод, 
			                                                             "Заголовок", 
			                                                             ТекстПрошлыйПериод);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, 
			                                                             ПараметрыНастроек.ИмяГруппыПрошлыйПериод, 
			                                                             "Подсказка", 
			                                                             ТекстПрошлыйПериод);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаНачалаТекущегоПериода) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиРабочийПланТекущийПериод, "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиФактТекущийПериод, "Видимость",        Ложь);
			 
		 Иначе
			
			ТекстТекущийПериод = СтрШаблон("%1 - %2",
			                               Формат(СтрокаТаблицы.ДатаНачалаТекущегоПериода, "ДФ=dd.MM"), 
			                               Формат(СтрокаТаблицы.ДатаОкончанияТекущегоПериода, "ДФ=dd.MM"));
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиРабочийПланТекущийПериод, "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы( ЭлементыФормы, ПараметрыНастроек.ИмяКолонкиФактТекущийПериод,        "Видимость", Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, 
			                                                             ПараметрыНастроек.ИмяКолонкиРабочийПланТекущийПериод, 
			                                                             "Подсказка", 
			                                                             НСтр("ru = 'Рабочий план'") + " (" + ТекстТекущийПериод + ")");
			 
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, 
			                                                             ПараметрыНастроек.ИмяКолонкиФактТекущийПериод, 
			                                                             "Подсказка", 
			                                                             НСтр("ru = 'Факт'") + " (" + ТекстТекущийПериод + ")");
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы,
			                                                             ПараметрыНастроек.ИмяГруппыТекущийПериод,
			                                                             "Заголовок",
			                                                             ТекстТекущийПериод);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы,
			                                                             ПараметрыНастроек.ИмяГруппыТекущийПериод,
			                                                             "Подсказка",
			                                                             ТекстТекущийПериод);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьНастройкуПоВидуРесурса(Форма, МассивИменСписков = Неопределено) Экспорт

	ВидСогласуемогоРесурсаНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РесурсПоКоторомуОтображаетсяХодСогласования",
	                                                                                   "НастройкиПользователя",
	                                                                                   Неопределено);
	Если ЗначениеЗаполнено(ВидСогласуемогоРесурсаНастройки) Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("СогласуемыйРесурс", ВидСогласуемогоРесурсаНастройки);
		
		НайденныеСтроки = Форма.ТаблицаСогласуемыхРесурсов.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеРесурса = НайденныеСтроки[0];
		
		Если ПустаяСтрока(ДанныеРесурса.ИмяКоманды) Тогда
			Возврат;
		КонецЕсли;
	
		Форма.ВидСогласуемогоРесурсаДляВывода = ВидСогласуемогоРесурсаНастройки;
		ЗадачиПроцессовКлиентСервер.СформироватьЗаголовокПодменюПоВидуРесурса(Форма);
		Форма.Элементы[ДанныеРесурса.ИмяКоманды].Пометка = Истина;
		
		ОбработатьМассивИменСписков(МассивИменСписков);
		
		Для Каждого ИмяСписка Из МассивИменСписков Цикл
			
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма[ИмяСписка],"СогласуемыйРесурс", Форма.ВидСогласуемогоРесурсаДляВывода);
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗагрузитьНастройкуПоВидуПланаЗанятости(Форма, ПараметрыНастроек)  Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ВидПланаЗанятостиДляВывода) Тогда
	
		ВидаПланаЗанятостиНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВидПланаПоКоторомуВыводятсяДанныеДляЗадач",
		                                                                               "НастройкиПользователя",
		                                                                                Неопределено);
		
	Иначе
		
		ВидаПланаЗанятостиНастройки = Форма.ВидПланаЗанятостиДляВывода;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидаПланаЗанятостиНастройки) Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидПлана", ВидаПланаЗанятостиНастройки);
		
		НайденныеСтроки = Форма.ПланыЗанятости.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, Неопределено, ПараметрыНастроек);
			Возврат;
		КонецЕсли;
		
		ДанныеВидаПлана = НайденныеСтроки[0];
		
		Если ПустаяСтрока(ДанныеВидаПлана.ИмяКоманды) Тогда
			УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, Неопределено, ПараметрыНастроек);
			Возврат;
		КонецЕсли;
	
		Форма.ВидПланаЗанятостиДляВывода = ВидаПланаЗанятостиНастройки;
		ЗадачиПроцессовКлиентСервер.СформироватьЗаголовокПодменюПоВидуПлана(Форма);
		Форма.Элементы[ДанныеВидаПлана.ИмяКоманды].Пометка = Истина;
		
		УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, НайденныеСтроки[0], ПараметрыНастроек);
		
	Иначе
		
		УстановитьДанныеВидаПланаВКомпоновщикСписка(Форма, Неопределено, ПараметрыНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеВидаРесурсаПоКодуИШаблону(КодСогласуемогоРесурса, ШаблонПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыСогласуемыхРесурсов.Наименование КАК ЕдиницаИзмерения,
	|	ВидыСогласуемыхРесурсов.Ссылка       КАК Ссылка,
	|	ВидыСогласуемыхРесурсов.Наименование КАК Наименование,
	|	ИСТИНА                               КАК Согласующий
	|ИЗ
	|	Справочник.ШаблоныПроцесса.ВидыСогласуемыхРесурсов КАК ШаблоныПроцессаВидыСогласуемыхРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|		ПО ШаблоныПроцессаВидыСогласуемыхРесурсов.СогласуемыйРесурс = ВидыСогласуемыхРесурсов.Ссылка
	|ГДЕ
	|	ВидыСогласуемыхРесурсов.Код = &КодСогласуемогоРесурса
	|	И ШаблоныПроцессаВидыСогласуемыхРесурсов.Ссылка = &ШаблонПроцесса";
	
	Запрос.УстановитьПараметр("КодСогласуемогоРесурса", КодСогласуемогоРесурса);
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцесса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

Процедура ЗаполнитьТаблицуРесурсов(Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыСогласуемыхРесурсов.Ссылка                  КАК СогласуемыйРесурс,
	|	ВидыСогласуемыхРесурсов.ВыполняетсяСогласование КАК ВыполняетсяСогласование,
	|	ВидыСогласуемыхРесурсов.Наименование            КАК НаименованиеВидаРесурса,
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения        КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|ГДЕ
	|	НЕ ВидыСогласуемыхРесурсов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы                         = Форма.ТаблицаСогласуемыхРесурсов.Добавить();
		СтрокаТаблицы.СогласуемыйРесурс       = Выборка.СогласуемыйРесурс;
		СтрокаТаблицы.ВыполняетсяСогласование = Выборка.ВыполняетсяСогласование;
		СтрокаТаблицы.Представление           = ПредставлениеВидаРесурса(Выборка.НаименованиеВидаРесурса, Выборка.ЕдиницаИзмерения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПлановЗанятости(Форма)
	
	Форма.ПланыЗанятости.Очистить();
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыПланов.Ссылка       КАК Ссылка,
	|	ВидыПланов.Наименование КАК Наименование,
	|	ВидыПланов.НастройкиПланирования.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Периодичность КАК Периодичность,
	|		КоличествоПериодов КАК КоличествоПериодов,
	|		НачалоДействия КАК НачалоДействия,
	|		КонецДействия КАК КонецДействия
	|	)                       КАК НастройкиПланирования
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)
	|	И ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.Занятости)";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Форма.ПланыЗанятости.Добавить();
		НоваяСтрока.ВидПлана     = Выборка.Ссылка;
		НоваяСтрока.Наименование = Выборка.Наименование;
		
		НастройкиПланирования = Выборка.НастройкиПланирования.Выгрузить()[0];
		
		ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
		ПараметрыПолученияПлановПоПериоду.ВидПлана              = Выборка.Ссылка;
		ПараметрыПолученияПлановПоПериоду.ДатаОкончания         = ТекущаяДата;
		ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = НастройкиПланирования;
		ПараметрыПолученияПлановПоПериоду.ДатаНачала            = 
			Перечисления.ПериодичностьПланов.РезультатИзмененияДатыНаПериодичность(
				ТекущаяДата, НастройкиПланирования.Периодичность, НастройкиПланирования.КоличествоПериодов, "Назад");
		
		ТаблицаПланов = Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
		
		Для Каждого СтрокаТаблицы Из ТаблицаПланов Цикл
			
			Если ТаблицаПланов.Индекс(СтрокаТаблицы) = 0 Тогда
				НоваяСтрока.ДатаНачалаПредыдущегоПериода    = СтрокаТаблицы.НачалоПериода;
				НоваяСтрока.ДатаОкончанияПредыдущегоПериода = СтрокаТаблицы.КонецПериода;
			КонецЕсли;
			
			Если ТаблицаПланов.Индекс(СтрокаТаблицы) = 1 Тогда
				НоваяСтрока.ДатаНачалаТекущегоПериода = СтрокаТаблицы.НачалоПериода;
				НоваяСтрока.ДатаОкончанияТекущегоПериода = СтрокаТаблицы.КонецПериода;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ПредставленияСогласуемыхРесурсов(МассивСогласумыхРесурсов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов")
		Или МассивСогласумыхРесурсов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыСогласуемыхРесурсов.Ссылка                КАК Ссылка,
	|	ВидыСогласуемыхРесурсов.Наименование          КАК Наименование,
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|ГДЕ
	|	ВидыСогласуемыхРесурсов.Ссылка В(&МассивСогласуемыхРесурсов)
	|	И НЕ ВидыСогласуемыхРесурсов.Ссылка = ЗНАЧЕНИЕ(Справочник.ВидыСогласуемыхРесурсов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("МассивСогласуемыхРесурсов", МассивСогласумыхРесурсов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено 
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ПредставленияСогласуемыхРесурсов = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
	
		ПредставленияСогласуемыхРесурсов.Добавить(Выборка.Ссылка, 
		                                          ПредставлениеВидаРесурса(Выборка.Наименование, Выборка.ЕдиницаИзмерения));
	
	КонецЦикла;
	
	Возврат ПредставленияСогласуемыхРесурсов;
	
КонецФункции

Процедура ЗаполнитьТаблицуСогласующихРесурсы(СогласующиеРесурсы,
	                                         ЗапланированоПоПользователям,
	                                         ВидыСогласуемыхРесурсов,
	                                         ЗадачаПроцесса,
	                                         Предмет,
	                                         ЗадачаРодитель,
	                                         ИсполнительТекущейЗадачи) Экспорт
	
	СогласующиеРесурсы.Очистить();
	ЗапланированоПоПользователям.Очистить();
	
	ИсполнительДляОпределенияСогласующего = ИсполнительДляОпределенияСогласующего(ЗадачаРодитель, ИсполнительТекущейЗадачи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыСогласуемыхРесурсов.Ссылка                  КАК ВидСогласуемогоРесурса,
	|	ВидыСогласуемыхРесурсов.Наименование            КАК Наименование,
	|	ВидыСогласуемыхРесурсов.Основной                КАК Основной,
	|	ВидыСогласуемыхРесурсов.Код                     КАК КодВидаРесурса,
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения        КАК ЕдиницаИзмерения,
	|	ВидыСогласуемыхРесурсов.ВыполняетсяСогласование КАК ВыполняетсяСогласование,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколСогласованияРесурсов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияРесурса.КСогласованию)
	|				ТОГДА ЕСТЬNULL(ПротоколСогласованияРесурсов.Количество, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ)                              КАК Запланировано,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколСогласованияРесурсов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияРесурса.Согласовано)
	|				ТОГДА ЕСТЬNULL(ПротоколСогласованияРесурсов.Количество, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ)                             КАК Согласовано
	|ПОМЕСТИТЬ ДоступныеДляСогласованияРесурсы
	|ИЗ
	|	Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПротоколСогласованияРесурсов КАК ПротоколСогласованияРесурсов
	|		ПО (ПротоколСогласованияРесурсов.ВидРесурса = ВидыСогласуемыхРесурсов.Ссылка)
	|			И (ПротоколСогласованияРесурсов.Задача = &Задача)
	|ГДЕ
	|	ВидыСогласуемыхРесурсов.Ссылка В(&ДоступныеДляСогласованияРесурсы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыСогласуемыхРесурсов.Ссылка,
	|	ВидыСогласуемыхРесурсов.Наименование,
	|	ВидыСогласуемыхРесурсов.Основной,
	|	ВидыСогласуемыхРесурсов.Код,
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступныеДляСогласованияРесурсы.ВидСогласуемогоРесурса                                                                                                       КАК ВидСогласуемогоРесурса,
	|	ДоступныеДляСогласованияРесурсы.Наименование                                                                                                                 КАК Наименование,
	|	ДоступныеДляСогласованияРесурсы.ЕдиницаИзмерения                                                                                                             КАК ЕдиницаИзмерения,
	|	ДоступныеДляСогласованияРесурсы.Основной                                                                                                                     КАК Основной,
	|	ДоступныеДляСогласованияРесурсы.ВыполняетсяСогласование                                                                                                      КАК ВыполняетсяСогласование,
	|	ДоступныеДляСогласованияРесурсы.КодВидаРесурса                                                                                                               КАК КодВидаРесурса,
	|	ЕСТЬNULL(ЕСТЬNULL(СогласующиеПоПредметам.Согласующий, НастройкиСогласованияРесурсов.Согласующий), НастройкиСогласованияРесурсовДляТекущейЗадачи.Согласующий) КАК Согласующий,
	|	ДоступныеДляСогласованияРесурсы.Запланировано                                                                                                                КАК Запланировано,
	|	ДоступныеДляСогласованияРесурсы.Согласовано                                                                                                                  КАК Согласовано,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних, 0)                                                                                           КАК ЗапланированоВДочерних,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.СогласованоВДочерних, 0)                                                                                             КАК СогласованоВДочерних,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИтогиСогласованияЗадачРесурсовРодитель.Согласовано, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИтогиСогласованияЗадачРесурсовРодитель.Согласовано, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоступноВРодительской
	|ИЗ
	|	ДоступныеДляСогласованияРесурсы КАК ДоступныеДляСогласованияРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсов
	|		ПО ДоступныеДляСогласованияРесурсы.ВидСогласуемогоРесурса = НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса
	|			И (НастройкиСогласованияРесурсов.Пользователь = &ИсполнительДляОпределенияСогласующего)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсовДляТекущейЗадачи
	|		ПО ДоступныеДляСогласованияРесурсы.ВидСогласуемогоРесурса = НастройкиСогласованияРесурсовДляТекущейЗадачи.ВидСогласуемогоРесурса
	|			И (НастройкиСогласованияРесурсовДляТекущейЗадачи.Пользователь = &ИсполнительТекущейЗадачи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО ДоступныеДляСогласованияРесурсы.ВидСогласуемогоРесурса = СогласующиеПоПредметам.СогласуемыйРесурс
	|			И (СогласующиеПоПредметам.Предмет = &Предмет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО ДоступныеДляСогласованияРесурсы.ВидСогласуемогоРесурса = ИтогиСогласованияЗадачРесурсов.ВидРесурса
	|			И (ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = &Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсовРодитель
	|		ПО ДоступныеДляСогласованияРесурсы.ВидСогласуемогоРесурса = ИтогиСогласованияЗадачРесурсовРодитель.ВидРесурса
	|			И (ИтогиСогласованияЗадачРесурсовРодитель.ЗадачаПроцесса = &ЗадачаРодитель)
	|ГДЕ
	|ВЫБОР
	|		КОГДА НЕ ДоступныеДляСогласованияРесурсы.ВыполняетсяСогласование
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ЕСТЬNULL(СогласующиеПоПредметам.Согласующий, НастройкиСогласованияРесурсов.Согласующий), НастройкиСогласованияРесурсовДляТекущейЗадачи.Согласующий) ЕСТЬ НЕ NULL 
	|	КОНЕЦ 
	|ИТОГИ ПО
	|	ВидСогласуемогоРесурса
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ПротоколСогласованияРесурсов.Пользователь      КАК Пользователь,
	|	ПротоколСогласованияРесурсов.ВидРесурса        КАК ВидРесурса,
	|	СУММА(ПротоколСогласованияРесурсов.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.ПротоколСогласованияРесурсов КАК ПротоколСогласованияРесурсов
	|ГДЕ
	|	ПротоколСогласованияРесурсов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияРесурса.КСогласованию)
	|	И ПротоколСогласованияРесурсов.Задача = &Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколСогласованияРесурсов.Пользователь,
	|	ПротоколСогласованияРесурсов.ВидРесурса
	|ИМЕЮЩИЕ 
	|	СУММА(ПротоколСогласованияРесурсов.Количество) <> 0";
	
	Запрос.УстановитьПараметр("ДоступныеДляСогласованияРесурсы",       ВидыСогласуемыхРесурсов);
	Запрос.УстановитьПараметр("ИсполнительДляОпределенияСогласующего", ИсполнительДляОпределенияСогласующего);
	Запрос.УстановитьПараметр("ИсполнительТекущейЗадачи",              ИсполнительТекущейЗадачи);
	Запрос.УстановитьПараметр("Предмет",                               Предмет);
	Запрос.УстановитьПараметр("Задача",                                ЗадачаПроцесса);
	Запрос.УстановитьПараметр("ЗадачаРодитель",                        ЗадачаРодитель);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка = Результат[1].Выбрать();
	
	ВыборкаВидСогласуемогоРесурса = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВидСогласуемогоРесурса.Следующий() Цикл
		
		НоваяСтрока = СогласующиеРесурсы.Добавить();
		НоваяСтрока.ВидРесурса = ВыборкаВидСогласуемогоРесурса.ВидСогласуемогоРесурса;
		
		ВыборкаДетали = ВыборкаВидСогласуемогоРесурса.Выбрать();
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			НоваяСтрока.Наименование            = ВыборкаДетали.Наименование;
			НоваяСтрока.ЕдиницаИзмерения        = ВыборкаДетали.ЕдиницаИзмерения;
			НоваяСтрока.Основной                = ВыборкаДетали.Основной;
			НоваяСтрока.ВыполняетсяСогласование = ВыборкаДетали.ВыполняетсяСогласование;
			НоваяСтрока.КодВидаРесурса          = ВыборкаДетали.КодВидаРесурса;
			НоваяСтрока.Запланировано           = ВыборкаДетали.Запланировано;
			НоваяСтрока.Согласовано             = ВыборкаДетали.Согласовано;
			НоваяСтрока.Запланировано           = ВыборкаДетали.Запланировано;
			НоваяСтрока.ЗапланированоВДочерних  = ВыборкаДетали.ЗапланированоВДочерних;
			НоваяСтрока.СогласованоВДочерних    = ВыборкаДетали.СогласованоВДочерних;
			НоваяСтрока.ДоступноВРодительской   = ВыборкаДетали.ДоступноВРодительской;
			НоваяСтрока.Согласующие.Добавить(ВыборкаДетали.Согласующий);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыборкаЗапланированоПоПользователям =  Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗапланированоПоПользователям.Следующий() Цикл
		
		НоваяСтрока = ЗапланированоПоПользователям.Добавить();
		
		НоваяСтрока.Пользователь = ВыборкаЗапланированоПоПользователям.Пользователь;
		НоваяСтрока.ВидРесурса = ВыборкаЗапланированоПоПользователям.ВидРесурса;
		НоваяСтрока.Количество = ВыборкаЗапланированоПоПользователям.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИсполнительДляОпределенияСогласующего(ЗадачаРодитель, ИсполнительТекущейЗадачи)
	
	ИсполнительДляОпределенияСогласующего = Справочники.Пользователи.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ЗадачаРодитель) Тогда
		ИсполнительДляОпределенияСогласующего = ИсполнительТекущейЗадачи;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПроцесса.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|		ПО ИерархияЗадачПроцесса.Родитель = ЗадачиПроцесса.Ссылка
		|ГДЕ
		|	ИерархияЗадачПроцесса.ЗадачаПроцесса = &ЗадачаПроцесса
		|	И ИерархияЗадачПроцесса.Уровень = 0";
		
		Запрос.УстановитьПараметр("ЗадачаПроцесса", ЗадачаРодитель);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИсполнительДляОпределенияСогласующего = Выборка.Исполнитель;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИсполнительДляОпределенияСогласующего;
	
КонецФункции

Функция ДанныеСогласованияЗадачиПоВидуРесурса(Задача, ЗадачаРодитель, ВидРесурса, Предмет, ИсполнительТекущейЗадачи) Экспорт
	
	ИсполнительДляОпределенияСогласующего = ИсполнительДляОпределенияСогласующего(ЗадачаРодитель, ИсполнительТекущейЗадачи);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыСогласуемыхРесурсов.Ссылка                                                                                                                               КАК ВидСогласуемогоРесурса,
	|	ВидыСогласуемыхРесурсов.Наименование                                                                                                                         КАК Наименование,
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения                                                                                                                     КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЕСТЬNULL(СогласующиеПоПредметам.Согласующий, НастройкиСогласованияРесурсов.Согласующий), НастройкиСогласованияРесурсовДляТекущейЗадачи.Согласующий) КАК Согласующий,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0)                                                                                                    КАК Запланировано,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Согласовано, 0)                                                                                                      КАК Согласовано,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних, 0)                                                                                           КАК ЗапланированоВДочерних,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.СогласованоВДочерних, 0)                                                                                             КАК СогласованоВДочерних,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИтогиСогласованияЗадачРесурсовРодитель.Согласовано, 0) > 0
	|			ТОГДА ЕСТЬNULL(ИтогиСогласованияЗадачРесурсовРодитель.Согласовано, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                                                                                                                        КАК ДоступноВРодительской
	|ИЗ
	|	
	|	Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсов
	|		ПО ВидыСогласуемыхРесурсов.Ссылка = НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса
	|			И (НастройкиСогласованияРесурсов.Пользователь = &ИсполнительДляОпределенияСогласующего)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсовДляТекущейЗадачи
	|		ПО ВидыСогласуемыхРесурсов.Ссылка = НастройкиСогласованияРесурсовДляТекущейЗадачи.ВидСогласуемогоРесурса
	|			И (НастройкиСогласованияРесурсовДляТекущейЗадачи.Пользователь = &ИсполнительТекущейЗадачи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО ВидыСогласуемыхРесурсов.Ссылка = СогласующиеПоПредметам.СогласуемыйРесурс
	|			И (СогласующиеПоПредметам.Предмет = &Предмет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ВидыСогласуемыхРесурсов.Ссылка = ИтогиСогласованияЗадачРесурсов.ВидРесурса
	|				И ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = &Задача)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсовРодитель
	|		ПО (ВидыСогласуемыхРесурсов.Ссылка = ИтогиСогласованияЗадачРесурсовРодитель.ВидРесурса
	|				И ИтогиСогласованияЗадачРесурсовРодитель.ЗадачаПроцесса = &ЗадачаРодитель)
	|ГДЕ
	|	ЕСТЬNULL(ЕСТЬNULL(СогласующиеПоПредметам.Согласующий, НастройкиСогласованияРесурсов.Согласующий), НастройкиСогласованияРесурсовДляТекущейЗадачи.Согласующий) ЕСТЬ НЕ NULL
	|	И ВидыСогласуемыхРесурсов.Ссылка = &ВидРесурса";
	
	Запрос.УстановитьПараметр("ИсполнительДляОпределенияСогласующего", ИсполнительДляОпределенияСогласующего);
	Запрос.УстановитьПараметр("ИсполнительТекущейЗадачи",              ИсполнительТекущейЗадачи);
	Запрос.УстановитьПараметр("Предмет",                               Предмет);
	Запрос.УстановитьПараметр("ВидРесурса",                            ВидРесурса);
	Запрос.УстановитьПараметр("Задача",                                Задача);
	Запрос.УстановитьПараметр("ЗадачаРодитель",                        ЗадачаРодитель);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСHTML

// Добавляет теги ко всем ссылкам, находящимся в строке.
// Обрабатываются следующие схемы обращения к ресурсу:
// http://, https://, ftp://, mailto:, file://, file:, e1c://, e1cib/
// Кроме того обрабатываются с использованием схемы http:// ссылки начинающиеся с www. без схемы.
// Строки размером 250000 больше  не обрабатываются.
Процедура ДобавитьТегиКСсылкам(ТекстHTML) Экспорт
	
	Если СтрДлина(ТекстHTML) > 250000 Тогда
		Возврат;
	КонецЕсли;
	
	// Ссылки со схемой
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "http://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "https://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "ftp://");
	
	// Ссылки без схемы
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "www.", "http://www.");
	
	// Навигационные ссылки
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "e1c://");
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "e1cib/");
	//ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "e1cib/", "v8doc:e1cib/");
	
	ДобавитьТегиКСсылкамСоСхемой(ТекстHTML, "mailto:");
	
	//// Скорректировать ссылки со схемами e1c:// и v8doc:e1cib/
	//СкорректироватьСсылки(ТекстHTML, "e1c://");
	//СкорректироватьСсылки(ТекстHTML, "e1cib/", "v8doc:e1cib/");
	//
	//// Заполнить title у ссылок
	//ЗаполнитьСвойствоTitleУСсылок(ТекстHTML);
	
КонецПроцедуры

// Добавляет теги ко всем ссылкам, находящимся в строке.
//
Процедура ДобавитьТегиКСсылкамСоСхемой(
	ТекстHTML,
	Схема,
	НовоеЗначениеСхемы = "")
	
	СхемаПоиска = НРег(Схема);
	ТекстHTMLПоиска = НРег(ТекстHTML);
	
	НазваниеЭлементаСсылки = "a";
	Смещение = 0;
	
	ЯвляетсяТегомЯкоря = Ложь;
	КонецТега = ">";
	ДлинаКонцаТега = СтрДлина(КонецТега);
	
	ЗакрывающийТегЯкоря = "</a>";
	ДлинаЗакрывающегоТегаЯкоря = СтрДлина(ЗакрывающийТегЯкоря);
	
	НачалоСсылки = НайденнаяПозицияВСтрокеПослеУказаннойПозиции(ТекстHTMLПоиска, СхемаПоиска);
	СписокОграничителейURI = ЗадачиПроцессовКлиентСерверПовтИсп.СписокОграничителейURI();
	
	Пока НачалоСсылки <> 0 Цикл
		
		// Проверять что позиция не в параметрах какого-либо тега
		Если ПозицияНаходитсяВПараметреТега(ТекстHTMLПоиска, НачалоСсылки, НазваниеЭлементаСсылки, ЯвляетсяТегомЯкоря) Тогда
			
			ПозицияОкончанияОткрывающегоТега = 0;
			
			Если ЯвляетсяТегомЯкоря Тогда
				
				// Если тег является якорем - ищем 
				ПозицияОкончанияОткрывающегоТега = НайденнаяПозицияВСтрокеПослеУказаннойПозиции(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаЗакрывающегоТегаЯкоря;
				
			КонецЕсли;
			
			Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
				
				ПозицияОкончанияОткрывающегоТега = НайденнаяПозицияВСтрокеПослеУказаннойПозиции(ТекстHTMLПоиска, КонецТега, НачалоСсылки);
				
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					
					// Если нет окончания тега - не выделяем больше ссылок
					Прервать;
					
				КонецЕсли;
				
				ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + ДлинаКонцаТега;
				
			КонецЕсли;
			
			// Если есть окончание тега - выделяем ссылки после тега
			Смещение = Смещение + (ПозицияОкончанияОткрывающегоТега - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияОкончанияОткрывающегоТега);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПозицияНаходитсяВТеге(ТекстHTMLПоиска, НазваниеЭлементаСсылки, НачалоСсылки) Тогда
			
			ПозицияЗакрывающегоТегаЯкоря = НайденнаяПозицияВСтрокеПослеУказаннойПозиции(ТекстHTMLПоиска, ЗакрывающийТегЯкоря, НачалоСсылки);
			Если ПозицияЗакрывающегоТегаЯкоря = 0 Тогда
				
				// Если нет закрывающего "якорь" тега - не выделяем больше ссылок
				Прервать;
				
			КонецЕсли;
			
			ПозицияЗакрывающегоТегаЯкоря = ПозицияЗакрывающегоТегаЯкоря + ДлинаЗакрывающегоТегаЯкоря;
			// Если есть закрывающий "якорь" тег - выделяем ссылки после закрывающего тега
			Смещение = Смещение + (ПозицияЗакрывающегоТегаЯкоря - 1);
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, ПозицияЗакрывающегоТегаЯкоря);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачалоСсылки = 1 Тогда
			
			СимволПередСсылкой = "";
			
		Иначе
			
			СимволПередСсылкой = Сред(ТекстHTMLПоиска, НачалоСсылки - 1, 1);
			
			Если СимволПередСсылкой = ";" Тогда
				ЗакодированныеКавычки = "&quot;";
				ДлинаКавычек = СтрДлина(ЗакодированныеКавычки);
				Если НачалоСсылки - ДлинаКавычек > 0 Тогда
					ВозможныеКавычки = Сред(ТекстHTMLПоиска, НачалоСсылки - ДлинаКавычек, ДлинаКавычек);
					Если ВозможныеКавычки = ЗакодированныеКавычки Тогда
						СимволПередСсылкой = ЗакодированныеКавычки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СписокОграничителейURI.НайтиПоЗначению(СимволПередСсылкой) <> Неопределено Тогда
				
				СимволПередСсылкой = "";
				
			ИначеЕсли СимволПередСсылкой = ">" Тогда
				
				// Тег перед ссылкой
				СимволПередСсылкой = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СимволПередСсылкой) Тогда
			
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки,
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		ИначеЕсли СимволПередСсылкой = """" ИЛИ СимволПередСсылкой = "&quot;" Тогда
			
			СимволКонцаСсылки = """";
			КонецСсылки = НайтиКонецСсылки(ТекстHTMLПоиска, НачалоСсылки + СтрДлина(СхемаПоиска), СписокОграничителейURI, Истина, СимволКонцаСсылки);
			
			// Добавляем теги к оригинальному тексту, т.к. текст поиска в нижнем регистре
			ДобавитьТегСсылки(
				ТекстHTML,
				НачалоСсылки - СтрДлина(СимволПередСсылкой), // Включаем открывающие кавычки в ссылку
				КонецСсылки,
				Схема,
				НовоеЗначениеСхемы,
				Смещение,
				Истина,
				СимволПередСсылкой,
				СимволКонцаСсылки);
			
			ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, КонецСсылки + 1);
			НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
			
			Продолжить;
			
		КонецЕсли;
		
		Смещение = Смещение + НачалоСсылки;
		ТекстHTMLПоиска = Сред(ТекстHTMLПоиска, НачалоСсылки + 1);
		НачалоСсылки = СтрНайти(ТекстHTMLПоиска, СхемаПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет нахождение переданной позиции внутри тега (в параметрах или содержании)
// Если тег не закрыт, то проверяет только в параметрах тега.
Функция ПозицияНаходитсяВТеге(ТекстHTML, НазваниеЭлемента, Позиция, Тег = Неопределено) Экспорт
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	
	ПозицияНаходитсяВТеге = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	НайденнаяПозицияНачалаОткрывающегоТега = 0;
	ПозицияОкончанияОткрывающегоТега = 0;
	
	ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		НайденнаяПозицияНачалаОткрывающегоТега =
			НайденнаяПозицияНачалаОткрывающегоТега
			+ ПозицияОкончанияОткрывающегоТега
			+ ПозицияНачалаОткрывающегоТега;
		
		ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, ">");
		Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
			
			НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоОткрывающегоТега);
		
	КонецЦикла;
	
	Если НайденнаяПозицияНачалаОткрывающегоТега <> 0 Тогда
		
		// Если есть незакрытый открывающий тег до искомой позиции, ищем тег в исходном тексте HTML.
		Тег = ТегВТекстеHTML(ТекстHTML, НазваниеЭлемента, НайденнаяПозицияНачалаОткрывающегоТега);
		
		Если ЗаполненаСтруктураТега(Тег) Тогда
			
			Если Позиция > Тег.ПозицияНачалаТега И Позиция < Тег.ПозицияОкончанияТега Тогда
				
				ПозицияНаходитсяВТеге = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПозицияНаходитсяВТеге;
	
КонецФункции

// Проверяет заполненность структуры тега: 
// - наличие всех необходимых тегу свойств в структуре;
// - заполненность позиции начала и окончания тега.
Функция ЗаполненаСтруктураТега(СтруктураТега)
	
	Если (Не СтруктураТега.Свойство("НазваниеЭлемента"))
		ИЛИ (Не СтруктураТега.Свойство("ПараметрыОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("Содержание"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияОткрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияЗакрывающегоТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияНачалаТега"))
		ИЛИ (Не СтруктураТега.Свойство("ПозицияОкончанияТега"))  Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураТега.ПозицияНачалаТега)
		И ЗначениеЗаполнено(СтруктураТега.ПозицияОкончанияТега) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает позицию конца ссылки в строке - первый незначащий символ
Функция НайтиКонецСсылки(ТекстHTML, НачальнаяПозиция, СписокНезначащихСимволов,
	
	РазрешитьПробелВСсылке = Ложь, СимволКонцаСсылки = Неопределено)
	
	ДопустимыеВURIСпецСимволы = ЗадачиПроцессовКлиентСерверПовтИсп.ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы = ЗадачиПроцессовКлиентСерверПовтИсп.ЗначимыеВURIСпецСимволы();
	ОбратноеСоответствиеСпецСимволов = ЗадачиПроцессовКлиентСерверПовтИсп.ОбратноеСоответствиеСпецСимволов();
	СписокДопустимыхВСсылкеТегов = ЗадачиПроцессовКлиентСерверПовтИсп.СписокДопустимыхВСсылкеТегов();
	СписокОткрывающихСкобок = ЗадачиПроцессовКлиентСерверПовтИсп.СписокОткрывающихСкобок();
	СписокЗакрывающихСкобок = ЗадачиПроцессовКлиентСерверПовтИсп.СписокЗакрывающихСкобок();
	СоответствиеОткрывающихСкобок = ЗадачиПроцессовКлиентСерверПовтИсп.СоответствиеОткрывающихСкобок();
	
	ОткрытыеСкобки = Новый Соответствие;
	Для Каждого ОткрывающаяСкобка Из СписокОткрывающихСкобок Цикл
		ОткрытыеСкобки[ОткрывающаяСкобка.Значение] = 0;
	КонецЦикла;
	
	НайденНезначащийСимвол = Ложь;
	ОбрабатываемаяСтрока = Сред(ТекстHTML, НачальнаяПозиция);
	ПоложениеПервогоНеЗначащегоСимвола = 0;
	
	Пока Не НайденНезначащийСимвол Цикл
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = СимволКонцаСсылки Тогда
			
			НайденНезначащийСимвол = Истина;
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Прервать;
			
		ИначеЕсли ЗначениеЗаполнено(СимволКонцаСсылки) И ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			СпецСимвол = ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол);
			Если СпецСимвол <> Неопределено И Символ(СпецСимвол) = СимволКонцаСсылки Тогда
				НайденНезначащийСимвол = Истина;
				СимволКонцаСсылки = "&" + ВозможныйСпецСимвол + ";";
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтрДлина(СимволКонцаСсылки);
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если СписокЗакрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОткрывающаяСкобка = СоответствиеОткрывающихСкобок[ВозможныйСпецСимвол];
				Если ОткрытыеСкобки[ОткрывающаяСкобка] > 0 Тогда
					ОткрытыеСкобки[ОткрывающаяСкобка] = ОткрытыеСкобки[ОткрывающаяСкобка] - 1;
					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				Если СписокОткрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
					ОткрытыеСкобки[ВозможныйСпецСимвол] = ОткрытыеСкобки[ВозможныйСпецСимвол] + 1;
				КонецЕсли;
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
				Продолжить;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ЕстьЗначимыйСимволДоКонцаСсылки = ЕстьЗначимыйСимволДоКонцаСсылки(
					ОбрабатываемаяСтрока,
					СписокНезначащихСимволов,
					РазрешитьПробелВСсылке,
					ДлинаВозможногоСпецСимвола + 2);
				
				Если ЕстьЗначимыйСимволДоКонцаСсылки Тогда
					
					Если СписокОткрывающихСкобок.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
						ОткрытыеСкобки[ВозможныйСпецСимвол] = ОткрытыеСкобки[ВозможныйСпецСимвол] + 1;
					КонецЕсли;
					
					ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
					ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + ДлинаВозможногоСпецСимвола + 2;
					Продолжить;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			ИначеЕсли ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + СтруктураТега.ПозицияОкончанияОткрывающегоТега;
						Продолжить;
						
					Иначе
						
						ПервыйСимвол = "";
						
					КонецЕсли;
					
				Иначе
					
					ПервыйСимвол = "";
					
				КонецЕсли;
				
			Иначе
				
				ПервыйСимвол = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СписокЗакрывающихСкобок.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			ОткрывающаяСкобка = СоответствиеОткрывающихСкобок[ПервыйСимвол];
			Если ОткрытыеСкобки[ОткрывающаяСкобка] > 0 Тогда
				ОткрытыеСкобки[ОткрывающаяСкобка] = ОткрытыеСкобки[ОткрывающаяСкобка] - 1;
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
				ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено 
			И Не ЕстьЗначимыйСимволДоКонцаСсылки(ОбрабатываемаяСтрока, СписокНезначащихСимволов, РазрешитьПробелВСсылке) Тогда
			
			ПервыйСимвол = "";
			
		КонецЕсли;
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ПервыйСимвол) Тогда
			
			НайденНезначащийСимвол = Истина;
			Прервать;
			
		КонецЕсли;
		
		Если СписокОткрывающихСкобок.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			ОткрытыеСкобки[ПервыйСимвол] = ОткрытыеСкобки[ПервыйСимвол] + 1;
		КонецЕсли;
		
		ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
		ПоложениеПервогоНеЗначащегоСимвола = ПоложениеПервогоНеЗначащегоСимвола + 1;
		
	КонецЦикла;
	
	// Если не был найден не значащий символ - все равно возвращаем позицию конца строки.
	Возврат НачальнаяПозиция + ПоложениеПервогоНеЗначащегоСимвола;
	
КонецФункции

// Проверяет наличие название элемента тега в списке значений
Функция ТегСодержитсяВСписке(СтруктураТега, СписокЗначений)
	
	Если Не ЗаполненаСтруктураТега(СтруктураТега) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	НазваниеЭлемента = НРег(СтруктураТега.НазваниеЭлемента);
	
	Для Каждого ЭлементСписка Из СписокЗначений Цикл
		
		ЗначениеЭлементаСписка = ЭлементСписка.Значение;
		Если ТипЗнч(ЗначениеЭлементаСписка) = Тип("Строка") Тогда
			
			ЗначениеЭлементаСписка = НРег(ЗначениеЭлементаСписка);
			ЗначениеЗакрывающегоЭлементаСписка = "/" + ЗначениеЭлементаСписка;
			
			Если НазваниеЭлемента = ЗначениеЭлементаСписка
				ИЛИ НазваниеЭлемента = ЗначениеЗакрывающегоЭлементаСписка Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие значащего символа до конца ссылки. 
// Концом ссылки считаются стандартные незначащие символы.
Функция ЕстьЗначимыйСимволДоКонцаСсылки(Строка, СписокНезначащихСимволов,
	РазрешитьПробелВСсылке = Ложь, НачальнаяПозиция = 0)
	
	ОбратноеСоответствиеСпецСимволов = ЗадачиПроцессовКлиентСерверПовтИсп.ОбратноеСоответствиеСпецСимволов();
	ДопустимыеВURIСпецСимволы        = ЗадачиПроцессовКлиентСерверПовтИсп.ДопустимыеВURIСпецСимволы();
	ЗначимыеВURIСпецСимволы          = ЗадачиПроцессовКлиентСерверПовтИсп.ЗначимыеВURIСпецСимволы();
	СписокДопустимыхВСсылкеТегов     = ЗадачиПроцессовКлиентСерверПовтИсп.СписокДопустимыхВСсылкеТегов();
	
	ОбрабатываемаяСтрока = Сред(Строка, НачальнаяПозиция + 1);
	НайденЗначащийСимвол = Ложь;
	
	Итерация = 0;
	ГлубинаАнализа = 50;
	Пока Не НайденЗначащийСимвол Цикл
		
		Итерация = Итерация + 1;
		Если Итерация > ГлубинаАнализа Тогда
			Прервать;
		КонецЕсли;
		
		ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
		
		Если ПервыйСимвол = " " И РазрешитьПробелВСсылке Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		ИначеЕсли ПустаяСтрока(ПервыйСимвол) Тогда
			
			Прервать;
			
		ИначеЕсли ПервыйСимвол = "&" Тогда
			
			ВозможныйСпецСимвол = ВозможныйСпецСимвол(ОбрабатываемаяСтрока);
			ДлинаВозможногоСпецСимвола = СтрДлина(ВозможныйСпецСимвол);
			
			Если ЗначимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				НайденЗначащийСимвол = Истина;
				
			ИначеЕсли ДопустимыеВURIСпецСимволы.НайтиПоЗначению(ВозможныйСпецСимвол) <> Неопределено
				ИЛИ ОбратноеСоответствиеСпецСимволов.Получить(ВозможныйСпецСимвол) <> Неопределено Тогда
				
				ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, ДлинаВозможногоСпецСимвола + 3);
				
			Иначе
				
				НайденЗначащийСимвол = Истина;
				
			КонецЕсли;
			
			
		ИначеЕсли ПервыйСимвол = "<" Тогда
			
			СтруктураТега = ТегВТекстеHTML(ОбрабатываемаяСтрока);
			Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
				
				Если СтруктураТега.ПозицияНачалаОткрывающегоТега = 1 Тогда
					
					Если ТегСодержитсяВСписке(СтруктураТега, СписокДопустимыхВСсылкеТегов) Тогда
						
						ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
						Продолжить;
						
					Иначе
						Прервать;
					КонецЕсли;
					
				Иначе
					Прервать;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
		ИначеЕсли СписокНезначащихСимволов.НайтиПоЗначению(ПервыйСимвол) <> Неопределено Тогда
			
			ОбрабатываемаяСтрока = Сред(ОбрабатываемаяСтрока, 2);
			
		Иначе
			
			НайденЗначащийСимвол = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденЗначащийСимвол;
	
КонецФункции

// Добавляет тег в конкретную позицию. Меняет значение Строка и Смещение.
Процедура ДобавитьТегСсылки(
	Строка,
	НачальнаяПозиция,
	КонечнаяПозиция,
	Схема,
	НовоеЗначениеСхемы,
	Смещение,
	ОбрезатьГраничныеСимволыСсылки = Ложь,
	СимволПередСсылкой = "",
	СимволКонцаСсылки = "")
	
	НачалоСтроки = Лев(Строка, Смещение + НачальнаяПозиция - 1);
	
	// Обрезание граничных символов
	Если ОбрезатьГраничныеСимволыСсылки Тогда
		Ссылка = Сред(Строка,
			Смещение + НачальнаяПозиция + СтрДлина(СимволПередСсылкой),
			КонечнаяПозиция - НачальнаяПозиция - СтрДлина(СимволПередСсылкой) - СтрДлина(СимволКонцаСсылки));
	Иначе
		Ссылка = Сред(Строка, Смещение + НачальнаяПозиция, КонечнаяПозиция - НачальнаяПозиция);
	КонецЕсли;
	
	КонецСтроки = Прав(Строка, СтрДлина(Строка) - (Смещение + КонечнаяПозиция - 1));
	
	СсылкаСТегом = СформированнаяСсылкаСТегом(Ссылка, Схема, НовоеЗначениеСхемы);
	
	Строка = НачалоСтроки + СсылкаСТегом + КонецСтроки;
	Смещение = СтрДлина(НачалоСтроки + СсылкаСТегом) + 1;
	
КонецПроцедуры

// Проверяет соответствие ссылки схеме.
Функция СсылкаСоответствуетСхеме(Ссылка, Схема)
	
	ДлинаСхемы = СтрДлина(Схема);
	СхемаВСсылке = Лев(Ссылка, ДлинаСхемы);
	
	Возврат НРег(Схема) = НРег(СхемаВСсылке);
	
КонецФункции

// Формирует текстовое представление ссылки с тегом
Функция СформированнаяСсылкаСТегом(Ссылка, Схема, НовоеЗначениеСхемы)
	
	ПредставлениеСсылки = Ссылка;
	// Если ссылка совпадает со схемой, то выделять ссылку нет необходимости.
	Если Ссылка = Схема Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// Замены схемы в ссылке при необходимости, например "www." => "http://www."
	Если ЗначениеЗаполнено(НовоеЗначениеСхемы) И СсылкаСоответствуетСхеме(Ссылка, Схема) Тогда
		Ссылка = НовоеЗначениеСхемы + Сред(Ссылка, СтрДлина(Схема) + 1);
	КонецЕсли;
	
	// Удаление тегов из ссылки
	ПозицияНачалаОткрывающегоТега = НайденнаяПозицияВСтрокеПослеУказаннойПозиции(Ссылка, "<");
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		СтруктураТега = ТегВТекстеHTML(Ссылка, , ПозицияНачалаОткрывающегоТега);
		Если ЗаполненаСтруктураТега(СтруктураТега) Тогда
			
			Ссылка = Лев(Ссылка, СтруктураТега.ПозицияНачалаОткрывающегоТега - 1) + Сред(Ссылка, СтруктураТега.ПозицияОкончанияОткрывающегоТега + 1);
			ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега - 1;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = НайденнаяПозицияВСтрокеПослеУказаннойПозиции(Ссылка, "<", ПозицияНачалаОткрывающегоТега);
		
	КонецЦикла;
	
	Если Не СтрНайти(Ссылка, """") Тогда
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";
	ИначеЕсли Не СтрНайти(Ссылка, "'") Тогда
		СсылкаСТегом = "<a href='" + Ссылка + "'>" + ПредставлениеСсылки + "</a>";
	Иначе
		СпецСимволыHTMLПослеОбратнойЗамены(Ссылка);
		СпецСимволыHTMLПослеЗамены(Ссылка);
		СсылкаСТегом = "<a href=""" + Ссылка + """>" + ПредставлениеСсылки + "</a>";
	КонецЕсли;
	
	Возврат СсылкаСТегом;
	
КонецФункции

// Заменяет в строке все спецсимволы на соответствующие им имена,
// возвращает измененную строку.
//
Функция СпецСимволыHTMLПослеЗамены(Строка, СпецСимволыСоотв = Неопределено) Экспорт
	
	СоответствиеСпецСимволов = ЗадачиПроцессовКлиентСерверПовтИсп.СоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTML(Строка, 38, "amp");
	
	НоваяСтрока = "";
	
	Для Поз = 1 По СтрДлина(Строка) Цикл
		
		Код = КодСимвола(Строка, Поз);
		ИмяСимвола = СоответствиеСпецСимволов.Получить(Код);
		
		Если ИмяСимвола = Неопределено Тогда
			НоваяСтрока = НоваяСтрока + Символ(Код);
		Иначе
			НоваяСтрока = НоваяСтрока + "&" + ИмяСимвола + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	Строка = НоваяСтрока;
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаменитьСпецСимволHTML(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, Символ(КодСимвола), "&" + ИмяСимвола + ";");
	
КонецПроцедуры

// Заменяет в строке все имена спецсимволов на соответствующие им спецсимволы,
// возвращает измененную строку.
Функция СпецСимволыHTMLПослеОбратнойЗамены(Строка, СпецСимволыСоотв = Неопределено)
	
	ОбратноеСоответствиеСпецСимволов = ЗадачиПроцессовКлиентСерверПовтИсп.СоответствиеСпецСимволов();
	
	ЗаменитьСпецСимволHTMLОбратно(Строка, 38, "amp");
	
	Для Каждого СпецСимвол Из ОбратноеСоответствиеСпецСимволов Цикл
		ЗаменитьСпецСимволHTMLОбратно(Строка, СпецСимвол.Ключ, СпецСимвол.Значение);
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Процедура ЗаменитьСпецСимволHTMLОбратно(Строка, КодСимвола, ИмяСимвола)
	
	Строка = СтрЗаменить(Строка, "&" + ИмяСимвола + ";", Символ(КодСимвола));
	
КонецПроцедуры

// Возвращает спецсимвол HTML (&СпецСимвол;), если он присутствует.
// Возвращает Неопределено, если нет возможных спецсимволов.
Функция ВозможныйСпецСимвол(Строка, ПозицияСпецСимвола = 0)
	
	ОбрабатываемаяСтрока = Сред(Строка, ПозицияСпецСимвола + 1);
	ПервыйСимвол = Лев(ОбрабатываемаяСтрока, 1);
	
	Если ПервыйСимвол = "&" Тогда
		
		КонецСпецСимвола = СтрНайти(ОбрабатываемаяСтрока, ";");
		
		Если КонецСпецСимвола <> 0 Тогда
			
			СпецСимвол = Сред(ОбрабатываемаяСтрока, 2, КонецСпецСимвола - 2);
			
			Возврат СпецСимвол;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру первого тега данного элемента в тексте HTML.
// Если не указано название элемента то возвращает первый встреченный тег.
// Поиск тега ведется с переданной начальной позиции
//  Структура тега: 
//		НазваниеЭлемента - название элемента найденного тега
//		ПараметрыОткрывающегоТега - строка, содержащая параметры открывающего тега
//		Содержание - стока, содержащие данные, находящие между открывающим и закрывающим тегом
//		ПозицияНачалаОткрывающегоТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияОткрывающегоТега - позиция символа ">" открывающего тега
//		ПозицияНачалаЗакрывающегоТега - позиция символа "<" закрывающего тега
//		ПозицияОкончанияЗакрывающегоТега - позиция символа ">" закрывающего тега
//		ПозицияНачалаТега - позиция символа "<" открывающего тега
//		ПозицияОкончанияТега - если есть закрывающий тег, то позиция символа ">" закрывающего тега
//							   если нет закрывающего тега, то позиция символа ">" открывающего тега
//
Функция ТегВТекстеHTML(ТекстHTML, НазваниеЭлемента = "", НачальнаяПозиция = 1)
	
	// Определение первого тега
	Если Не ЗначениеЗаполнено(НазваниеЭлемента) Тогда
		
		НачалоОткрывающегоТега = "<";
		НазваниеТега = "";
		
		ОбрабатываемыйТекстHTML = ТекстHTML;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
		Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
			
			ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + 1);
			ПервыйСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
			
			Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
				
				ОчереднойСимволНазванияТега = ПервыйСимволНазванияТега;
				
				Пока ЗначениеЗаполнено(ОчереднойСимволНазванияТега)
					И ОчереднойСимволНазванияТега <> ">" Цикл
					
					НазваниеТега = НазваниеТега + ОчереднойСимволНазванияТега;
					ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, 2);
					ОчереднойСимволНазванияТега = Лев(ОбрабатываемыйТекстHTML, 1);
					
				КонецЦикла;
				
				ПозицияНачалаОткрывающегоТега = 0;
				
			Иначе
				
				ПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НазваниеТега) Тогда
			
			НазваниеЭлемента = НазваниеТега;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НазваниеЭлемента = "blockquote" Тогда
		РазрешитьВложенныеТеги = Истина;
	Иначе
		РазрешитьВложенныеТеги = Ложь;
	КонецЕсли;
	
	НачалоОткрывающегоТега = "<" + НРег(НазваниеЭлемента);
	КонецОткрывающегоТега = ">";
	ЗакрывающийТег = "</" + НРег(НазваниеЭлемента) + ">";
	ОбрабатываемыйТекстHTML = НРег(Сред(ТекстHTML, НачальнаяПозиция));
	Смещение = НачальнаяПозиция - 1;
	
	СтруктураТега = ПустаяСтруктураТега();
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	Если ПозицияНачалаОткрывающегоТега = 0 Тогда
		// Если нет начала открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега));
	Смещение = Смещение + ПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега) - 1;
	
	ПозицияОкончанияОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
	Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
		// Если нет окончания открывающего тега, то тега нет
		Возврат СтруктураТега;
	КонецЕсли;
	ПараметрыОткрывающегоТега = Сред(ТекстHTML, Смещение + 1, ПозицияОкончанияОткрывающегоТега - 1);
	ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
	Смещение = Смещение + ПозицияОкончанияОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
	
	Если РазрешитьВложенныеТеги Тогда
		
		ПозицияНачалаЗакрывающегоТега = 0;
		КоличествоОткрытыхТегов = 1;
		Пока КоличествоОткрытыхТегов > 0 Цикл
			
			БлижайшийЗакрывающийТег = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
			Если БлижайшийЗакрывающийТег = 0 Тогда
				// Нет больше тегов.
				Прервать;
			КонецЕсли;
			
			БлижайшийОткрывающийТег = ПозицияНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
			Если БлижайшийОткрывающийТег = 0 Или БлижайшийЗакрывающийТег < БлижайшийОткрывающийТег Тогда
				
				// Найден закрывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов - 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег) - 1;
				
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийЗакрывающийТег + СтрДлина(ЗакрывающийТег));
				
			Иначе
				
				// Найден открывающий тег
				КоличествоОткрытыхТегов = КоличествоОткрытыхТегов + 1;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшийОткрывающийТег + СтрДлина(НачалоОткрывающегоТега));
				
				БлижайшееОкончаниеОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, КонецОткрывающегоТега);
				Если ПозицияОкончанияОткрывающегоТега = 0 Тогда
					// Если нет окончания открывающего тега, то тега нет
					Прервать;
				КонецЕсли;
				ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега) - 1;
				ОбрабатываемыйТекстHTML = Сред(ОбрабатываемыйТекстHTML, БлижайшееОкончаниеОткрывающегоТега + СтрДлина(КонецОткрывающегоТега));
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОткрытыхТегов <> 0 Тогда
			ПозицияНачалаЗакрывающегоТега = 0;
		Иначе
			ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега - СтрДлина(ЗакрывающийТег) + 1;
		КонецЕсли;
		
	Иначе
		
		ПозицияНачалаЗакрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, ЗакрывающийТег);
		
	КонецЕсли;
	
	// Заполнение позиций в тексте HTML и содержания.
	ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега + (НачальнаяПозиция - 1);
	ПозицияНачалаТега = ПозицияНачалаОткрывающегоТега;
	ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега + (СтрДлина(НачалоОткрывающегоТега) - 1) + ПозицияНачалаОткрывающегоТега;
	Если ПозицияНачалаЗакрывающегоТега <> 0 Тогда
		Содержание = Сред(ТекстHTML, Смещение + 1, ПозицияНачалаЗакрывающегоТега - 1);
		ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + ПозицияОкончанияОткрывающегоТега;
		ПозицияОкончанияЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега + (СтрДлина(ЗакрывающийТег) - 1);
	Иначе
		Содержание = "";
		ПозицияОкончанияЗакрывающегоТега = 0;
	КонецЕсли;
	Если ПозицияОкончанияЗакрывающегоТега <> 0 Тогда
		ПозицияОкончанияТега = ПозицияОкончанияЗакрывающегоТега;
	Иначе
		ПозицияОкончанияТега = ПозицияОкончанияОткрывающегоТега;
	КонецЕсли;
	
	// Заполнение структуры тега
	СтруктураТега.ПараметрыОткрывающегоТега = ПараметрыОткрывающегоТега;
	СтруктураТега.Содержание = Содержание;
	СтруктураТега.ПозицияНачалаОткрывающегоТега = ПозицияНачалаОткрывающегоТега;
	СтруктураТега.ПозицияОкончанияОткрывающегоТега = ПозицияОкончанияОткрывающегоТега;
	СтруктураТега.ПозицияНачалаЗакрывающегоТега = ПозицияНачалаЗакрывающегоТега;
	СтруктураТега.ПозицияОкончанияЗакрывающегоТега = ПозицияОкончанияЗакрывающегоТега;
	СтруктураТега.ПозицияНачалаТега = ПозицияНачалаТега;
	СтруктураТега.ПозицияОкончанияТега = ПозицияОкончанияТега;
	СтруктураТега.НазваниеЭлемента = НазваниеЭлемента;
	
	Возврат СтруктураТега;
	
КонецФункции

// Определяет позицию открывающего тега в переданном тексте
Функция ПозицияНачалаОткрывающегоТега(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега)
	
	ПозицияНачалаОткрывающегоТега = 0;
	
	ВозможнаяПозицияНачалаОткрывающегоТега = СтрНайти(ОбрабатываемыйТекстHTML, НачалоОткрывающегоТега);
	СледующийСимвол = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 1);
	
	Если СледующийСимвол = " " Или СледующийСимвол = Символы.ПС Или СледующийСимвол = ">" Тогда
		ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
	ИначеЕсли СледующийСимвол = "/" Тогда
		СледующиеДваСимвола = Сред(ОбрабатываемыйТекстHTML, ВозможнаяПозицияНачалаОткрывающегоТега + СтрДлина(НачалоОткрывающегоТега), 2);
		Если СледующиеДваСимвола = "/>" Тогда
			ПозицияНачалаОткрывающегоТега = ВозможнаяПозицияНачалаОткрывающегоТега;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПозицияНачалаОткрывающегоТега;
	
КонецФункции

// Формирует пустую структуру тега
//
// Возвращаемое значение:
//  Структура - НазваниеЭлемента - Строка - Имя тега
//            - ПараметрыОткрывающегоТега - Строка - Параметры тега
//            - Содержание - Строка - Текстовое содержимое тега
//            - ПозицияНачалаОткрывающегоТега - Число - Позиция символа "<" открывающего тега
//            - ПозицияНачалаОткрывающегоТега - Число - Позиция символа ">" открывающего тега
//            - ПозицияНачалаЗакрывающегоТега - Число - Позиция символа "<" закрывающего тега.
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияОкончанияЗакрывающегоТега - Число - Позиция символа ">" открывающего тега
//                                                      Если нет закрывающего тега, то содержит 0.
//            - ПозицияНачалаТега - Число - Позиция символа "<" открывающего тега
//            - ПозицияОкончанияТега - Число - Позиция символа ">" закрывающего тега. Если нет 
//                                             закрывающего тега, то содержит позицию символа ">"
//                                             открывающего тега.
//
Функция ПустаяСтруктураТега()
	
	Тег = Новый Структура;
	Тег.Вставить("НазваниеЭлемента", "");
	Тег.Вставить("ПараметрыОткрывающегоТега", "");
	Тег.Вставить("Содержание", "");
	Тег.Вставить("ПозицияНачалаОткрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияОткрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияОкончанияЗакрывающегоТега", 0);
	Тег.Вставить("ПозицияНачалаТега", 0);
	Тег.Вставить("ПозицияОкончанияТега", 0);
	
	Возврат Тег;
	
КонецФункции

Функция НайденнаяПозицияВСтрокеПослеУказаннойПозиции(Строка, Подстрока, НачальнаяПозиция = 0) Экспорт
	
	Если СтрДлина(Строка) <= НачальнаяПозиция Тогда
		Возврат 0;
	КонецЕсли;
	
	Позиция = СтрНайти(Строка, Подстрока, НаправлениеПоиска.СНачала, НачальнаяПозиция + 1);
	Возврат Позиция;
	
КонецФункции

// Проверяет нахождение внутри параметров открывающего тега (возможно, который не закрыт)
Функция ПозицияНаходитсяВПараметреТега(ТекстHTML, Позиция, НужныйТег = "", ЯвляетсяНужнымТегом = Ложь)
	
	НачалоТега = "<";
	КонецТега = ">";
	ОткрытТег = Ложь;
	ЯвляетсяНужнымТегом = Ложь;
	
	НачалоТекстаHTML = Лев(НРег(ТекстHTML), Позиция - 1);
	ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоТега);
	Пока ПозицияНачалаОткрывающегоТега <> 0 Цикл
		
		НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияНачалаОткрывающегоТега + 1);
		ПервыйСимволНазванияТега = Сред(НачалоТекстаHTML, 1, 1);
		
		Если ЗначениеЗаполнено(ПервыйСимволНазванияТега) Тогда
			
			ПозицияОкончанияОткрывающегоТега = СтрНайти(НачалоТекстаHTML, КонецТега);
			Если ПозицияОкончанияОткрывающегоТега <> 0 Тогда
				
				// Пропускаем содержимое открытых тегов для корректного определения является ли тег нужным
				// Например: "<a <test " - открыт тег a; "<test <a " - открыт тег test.
				НачалоТекстаHTML = Сред(НачалоТекстаHTML, ПозицияОкончанияОткрывающегоТега + 1);
				
			Иначе
				
				ПозицияНужногоТега = СтрНайти(НачалоТекстаHTML, НужныйТег + " ");
				Если ПозицияНужногоТега = 0 Тогда
					ПозицияНужногоТега = СтрНайти(НачалоТекстаHTML, НужныйТег + ">");
				КонецЕсли;
				
				Если ПозицияНужногоТега = 1 Тогда
					ЯвляетсяНужнымТегом = Истина;
				КонецЕсли;
				
				ОткрытТег = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПозицияНачалаОткрывающегоТега = СтрНайти(НачалоТекстаHTML, НачалоТега);
		
	КонецЦикла;
	
	Возврат ОткрытТег;
	
КонецФункции

#КонецОбласти

#Область ПересозданиеЗадач

Функция ДанныеДляПересозданияЗадач(Задача, Предмет, ТолькоПоШаблону, УникальныйИдентификатор) Экспорт
	
	ДанныеАнализа = ДанныеАнализаДляПересозданияЗадач(Задача, Предмет, ТолькоПоШаблону);
	
	МассивЗадач = Новый Массив;
	Для Каждого ЭлементСоответствия Из ДанныеАнализа.СоответствиеСозданныхЗадач Цикл
		МассивЗадач.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка         КАК Задача,
	|	ЗадачиПроцесса.Наименование   КАК НаименованиеЗадачи,
	|	ЗадачиПроцесса.Исполнитель    КАК Исполнитель,
	|	ЗадачиПроцесса.Контролирующий КАК Контролирующий,
	|	ЗадачиПроцесса.Статус         КАК ТекущийСтатус
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В (&МассивЗадач)";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПересоздаваемыхЗадач = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПересоздания = Новый Структура;
	ДанныеДляПересоздания.Вставить("АдресТаблицы", ПоместитьВоВременноеХранилище(ТаблицаПересоздаваемыхЗадач, УникальныйИдентификатор));
	ДанныеДляПересоздания.Вставить("КоличествоЗадач", ТаблицаПересоздаваемыхЗадач.Количество());
	
	Возврат ДанныеДляПересоздания;
	
КонецФункции

Функция ДанныеАнализаДляПересозданияЗадач(Задача, Предмет, ТолькоПоШаблону) Экспорт
	
	ПоследующиеЗадачи               = ЗадачиПроцессов.ПоследующиеЗадачи(Предмет);
	ДеревоЗадачПроцесса             = ДеревоЗадачПроцесса(Предмет, Истина);
	МассивСвязанныхВыполненныхЗадач = МассивСвязанныхВыполненныхЗадач(Задача, ПоследующиеЗадачи, ДеревоЗадачПроцесса);
	
	СоответствиеСозданныхЗадач = Новый Соответствие();
	ДеревоЗадачПроцесса.Колонки.Добавить("КСозданию", Новый ОписаниеТипов("Булево"));
	ДеревоЗадачПроцесса.Колонки.Добавить("ПредшествующиеЗадачи", Новый ОписаниеТипов("Массив"));
	ДеревоЗадачПроцесса.Колонки.Добавить("КИзменению", Новый ОписаниеТипов("Булево"));
	ДеревоЗадачПроцесса.Колонки.Добавить("ЕстьИзмененныеПредшественники", Новый ОписаниеТипов("Булево"));
	ДеревоЗадачПроцесса.Колонки.Добавить("НаЗаменуЗадаче");
	ДеревоЗадачПроцесса.Колонки.Добавить("ТочкаПродолжения", Новый ОписаниеТипов("Булево"));
	
	Граф = ГрафПоПредмету(Предмет);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ИерархияЗадачПроцесса.Уровень) КАК Уровень
	|ПОМЕСТИТЬ МинимальныйУровеньЗадачи
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса = ИерархияЗадачПроцесса.Родитель
	|	И ИерархияЗадачПроцесса.ЗадачаПроцесса В(&МассивСвязанныхВыполненныхЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗадачиПроцесса.Родитель  КАК Родитель
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса = ИерархияЗадачПроцесса.Родитель
	|	И ИерархияЗадачПроцесса.Родитель В(&МассивСвязанныхВыполненныхЗадач)
	|	И ИерархияЗадачПроцесса.Уровень В
	|			(ВЫБРАТЬ
	|				МинимальныйУровеньЗадачи.Уровень
	|			ИЗ
	|				МинимальныйУровеньЗадачи КАК МинимальныйУровеньЗадачи)";
	
	Запрос.УстановитьПараметр("МассивСвязанныхВыполненныхЗадач", МассивСвязанныхВыполненныхЗадач);
	Запрос.УстановитьПараметр("ТолькоПоШаблону", ТолькоПоШаблону);
	МассивТочекПродолжения = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Родитель = Справочники.ЗадачиПроцесса.ПустаяСсылка() Тогда
			ДобавитьНовыеЗадачиПоСтрокамДерева(ДеревоЗадачПроцесса,
			                                   ДеревоЗадачПроцесса.Строки, 
			                                   МассивСвязанныхВыполненныхЗадач, 
			                                   СоответствиеСозданныхЗадач, 
			                                   Граф, 
			                                   МассивТочекПродолжения, 
			                                   ТолькоПоШаблону);
		Иначе
			НайденнаяСтрока = ДеревоЗадачПроцесса.Строки.Найти(Выборка.Родитель, "Задача", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				ДобавитьНовыеЗадачиПоСтрокамДерева(ДеревоЗадачПроцесса,
				                                   НайденнаяСтрока.Строки,
				                                   МассивСвязанныхВыполненныхЗадач,
				                                   СоответствиеСозданныхЗадач,
				                                   Граф,
				                                   МассивТочекПродолжения,
				                                   ТолькоПоШаблону);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеАнализа = Новый Структура;
	ДанныеАнализа.Вставить("ДеревоЗадачПроцесса",        ДеревоЗадачПроцесса);
	ДанныеАнализа.Вставить("СоответствиеСозданныхЗадач", СоответствиеСозданныхЗадач);
	ДанныеАнализа.Вставить("МассивТочекПродолжения",     МассивТочекПродолжения);
	
	Возврат ДанныеАнализа;
	
КонецФункции

Функция РезультатПересозданияЗадач(Задача, Предмет, ТолькоПоШаблону) Экспорт
	
	ВыполненоУспешно = Истина;
	
	ДанныеАнализа = ДанныеАнализаДляПересозданияЗадач(Задача, Предмет, ТолькоПоШаблону);
	
	ЗаменитьПредшественниковВСоздаваемыхЗадачах(ДанныеАнализа.ДеревоЗадачПроцесса, ДанныеАнализа.СоответствиеСозданныхЗадач, ДанныеАнализа.МассивТочекПродолжения);
	СоздатьНовыеЗадачиНаЗаменуВыполненных(ДанныеАнализа.ДеревоЗадачПроцесса, ДанныеАнализа.СоответствиеСозданныхЗадач, Предмет, ВыполненоУспешно);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВыполненоУспешно", ВыполненоУспешно);
	СтруктураВозврата.Вставить("КоличествоОбработанных", ДанныеАнализа.СоответствиеСозданныхЗадач.Количество());
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СоздатьНовыеЗадачиНаЗаменуВыполненных(ДеревоЗадачПроцесса, СоответствиеСозданныхЗадач, Предмет, ВыполненоУспешно)

	ДанныеЗадачИсточников = ДанныеЗадачИсточников(СоответствиеСозданныхЗадач);
	
	НачатьТранзакцию();
	
	СоздатьЗадачиПоСтрокамДерева(ДеревоЗадачПроцесса.Строки, ДанныеЗадачИсточников, Предмет, ВыполненоУспешно);
	
	Если ВыполненоУспешно Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьМаксимальныйСтатусЗадачПоПредмету(Предмет);
		РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьЗонуЗадачПоПредмету(Предмет);
		РегистрыСведений.СостоянияЗадачПроцессов.УпорядочитьЗадачиПоПредмету(Предмет);
		РегистрыСведений.ЭтапыПроцесса.РасчитатьЭтапыПроцессаПоПредмету(Предмет);
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЗадачиПоСтрокамДерева(СтрокиДерева, ДанныеЗадачИсточников, Предмет, ВыполненоУспешно)
	
	ТекстШапкаПроблема = НСтр("ru = 'Не удалось отменить выполнение задачи по причине:'");
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.КИзменению Тогда
			
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗадачиПроцесса");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заблокировать задачу ""%1"" -: %2'"),
				                           СтрокаДерева.Задача,
				                           ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстСообщения = ТекстШапкаПроблема + Символы.ПС + ТекстСообщения;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ВыполненоУспешно = Ложь;
				
				Возврат;
				
			КонецПопытки;
			
			ЗадачаОбъект = СтрокаДерева.Задача.ПолучитьОбъект();
			ЗадачаОбъект.Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована;
			ЗадачаОбъект.ФактическаяДатаНачала    = Дата(1,1,1);
			ЗадачаОбъект.ФактическаяДатаОкончания = Дата(1,1,1);
			
			ЗадачаОбъект.ПредшествующиеЗадачи.Очистить();
			Для Каждого ПредшествующаяЗадача Из СтрокаДерева.ПредшествующиеЗадачи Цикл
				
				НоваяСтрока = ЗадачаОбъект.ПредшествующиеЗадачи.Добавить();
				НоваяСтрока.ПредшествующаяЗадача = ПредшествующаяЗадача;
				
			КонецЦикла;
				
		ИначеЕсли СтрокаДерева.КСозданию Тогда
			
			ДанныеЗадачиИсточника = ДанныеЗадачИсточников.Получить(СтрокаДерева.НаЗаменуЗадаче);
			
			ЗадачаОбъект = Справочники.ЗадачиПроцесса.СоздатьЭлемент();
			
			ЗаполнитьЗначенияСвойств(ЗадачаОбъект, ДанныеЗадачиИсточника); 
			
			ЗадачаОбъект.Статус  = Перечисления.СтатусыЗадачПроцессов.Запланирована;
			ЗадачаОбъект.Предмет = Предмет;
			ЗадачаОбъект.УстановитьСсылкуНового(СтрокаДерева.Задача);
			
			Если СтрокаДерева.Родитель <> Неопределено Тогда
				ЗадачаОбъект.Родитель = СтрокаДерева.Родитель.Задача;
			КонецЕсли;
			ЗадачаОбъект.ПлановаяДлительность = СтрокаДерева.ПлановаяДлительность;
			
			Для Каждого ПредшествующаяЗадача Из СтрокаДерева.ПредшествующиеЗадачи Цикл
				
				НоваяСтрока = ЗадачаОбъект.ПредшествующиеЗадачи.Добавить();
				НоваяСтрока.ПредшествующаяЗадача = ПредшествующаяЗадача;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаДерева.КИзменению 
			Или СтрокаДерева.КСозданию Тогда
			
			Попытка
			
			ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
			ЗадачаОбъект.Записать();
			
			Исключение
			
				ОтменитьТранзакцию();
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать задачу ""%1"" -: %2'"),
				                           СтрокаДерева.Задача,
				                           ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ВыполненоУспешно = Ложь;
				Возврат;
			
			КонецПопытки;
			
		КонецЕсли;

		Если Не ВыполненоУспешно Тогда
			Возврат;
		КонецЕсли;
		
		СоздатьЗадачиПоСтрокамДерева(СтрокаДерева.Строки, ДанныеЗадачИсточников, Предмет, ВыполненоУспешно)
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЗадачИсточников(СоответствиеСозданныхЗадач)
	
	Если СоответствиеСозданныхЗадач.Количество() = 0 Тогда
		Возврат СоответствиеСозданныхЗадач;
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	Для Каждого ЭлементСоответствия Из СоответствиеСозданныхЗадач Цикл
		МассивЗадач.Добавить(ЭлементСоответствия.Ключ);
	КонецЦикла;
	
	ДанныеЗадачИсточников = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка               КАК Ссылка,
	|	ЗадачиПроцесса.Исполнитель          КАК Исполнитель,
	|	ЗадачиПроцесса.Наименование         КАК Наименование,
	|	ЗадачиПроцесса.Наименование         КАК Описание,
	|	ЗадачиПроцесса.Контролирующий       КАК Контролирующий,
	|	ЗадачиПроцесса.ПлановаяДатаНачала   КАК ПлановаяДатаНачала,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК КрайняяДатаОкончания,
	|	ЗадачиПроцесса.ЗадачаШаблона        КАК ЗадачаШаблона
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В (&МассивЗадач)";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("Исполнитель",         Выборка.Исполнитель);
		ДанныеЗадачи.Вставить("Контролирующий",      Выборка.Контролирующий);
		ДанныеЗадачи.Вставить("ЗадачаШаблона",       Выборка.ЗадачаШаблона);
		ДанныеЗадачи.Вставить("Наименование",        Выборка.Наименование);
		ДанныеЗадачи.Вставить("Описание",            Выборка.Описание);
		ДанныеЗадачи.Вставить("ПлановаяДатаНачала",  Выборка.ПлановаяДатаНачала);
		ДанныеЗадачи.Вставить("КрайняяДатаОкончания",Выборка.КрайняяДатаОкончания);
		
		ДанныеЗадачИсточников.Вставить(Выборка.Ссылка, ДанныеЗадачи);
		
	КонецЦикла;
	
	Возврат ДанныеЗадачИсточников;
	
КонецФункции

Процедура ДобавитьНовыеЗадачиПоСтрокамДерева(ДеревоЗадачПроцесса,
	                                        СтрокиДереваЗадач,
	                                        МассивСвязанныхВыполненныхЗадач,
	                                        СоответствиеСозданныхЗадач,
	                                        Граф,
	                                        МассивТочекПродолжения,
	                                        ТолькоПоШаблону)

	СтрокиДереваЗадач.Сортировать("ЗначениеУпорядочивания");
	
	Для Каждого СтрокаДерева Из СтрокиДереваЗадач Цикл
		Если МассивСвязанныхВыполненныхЗадач.Найти(СтрокаДерева.Задача) <> Неопределено Тогда
			
			Если СтрокаДерева.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СтрокиДереваЗадач.Добавить();
			НоваяСтрока.ЗадачаШаблона        = СтрокаДерева.ЗадачаШаблона;
			НоваяСтрока.ПлановаяДлительность = СтрокаДерева.ПлановаяДлительность;
			НоваяСтрока.КСозданию            = Истина;
			НоваяСтрока.Задача               = Справочники.ЗадачиПроцесса.ПолучитьСсылку(Новый УникальныйИдентификатор);
			НоваяСтрока.НаЗаменуЗадаче       = СтрокаДерева.Задача;
			
			ПредшествующиеЗадачи = Граф.Получить(СтрокаДерева.Задача);
			Если ПредшествующиеЗадачи <> Неопределено Тогда
				НоваяСтрока.ПредшествующиеЗадачи = ПредшествующиеЗадачи;
			КонецЕсли;
			
			СоответствиеСозданныхЗадач.Вставить(СтрокаДерева.Задача, НоваяСтрока.Задача);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из СтрокиДереваЗадач Цикл
		Если СтрокаДерева.КСозданию Тогда
			
			Для Инд = 0 По СтрокаДерева.ПредшествующиеЗадачи.Количество() - 1 Цикл
				
				НоваяПредшествующаяЗадача = СоответствиеСозданныхЗадач.Получить(СтрокаДерева.ПредшествующиеЗадачи[Инд]);
				Если НоваяПредшествующаяЗадача <> Неопределено Тогда
					СтрокаДерева.ПредшествующиеЗадачи[Инд] = НоваяПредшествующаяЗадача;
					СтрокаДерева.ЕстьИзмененныеПредшественники = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СоответствиеСозданныхЗадач.Получить(СтрокаДерева.Задача) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПредшествующиеЗадачи = Граф.Получить(СтрокаДерева.Задача);
			ТребуетсяИзменение = Ложь;
			Если ПредшествующиеЗадачи <> Неопределено Тогда
				Для Инд = 0 По ПредшествующиеЗадачи.Количество() - 1 Цикл
					НоваяПредшествующаяЗадача = СоответствиеСозданныхЗадач.Получить(ПредшествующиеЗадачи[Инд]);
					Если НоваяПредшествующаяЗадача <> Неопределено Тогда
						СтрокаТочкиПродолжения = СтрокиДереваЗадач.Найти(ПредшествующиеЗадачи[Инд], "Задача", Ложь);
						Если СтрокаТочкиПродолжения <> Неопределено Тогда
							МассивТочекПродолжения.Добавить(ПредшествующиеЗадачи[Инд]);
							СтрокаТочкиПродолжения.ТочкаПродолжения = Истина;
						КонецЕсли;
						ПредшествующиеЗадачи[Инд] = НоваяПредшествующаяЗадача;
						СтрокаДерева.КИзменению = Истина;
						ТребуетсяИзменение = Истина;
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
			
			Если ТребуетсяИзменение Тогда
				СтрокаДерева.ПредшествующиеЗадачи = ПредшествующиеЗадачи;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЕстьИзмененныеПредшественники", Ложь);
	СтруктураПоиска.Вставить("КСозданию", Истина);
	СтрокиБезИзмененыхПредшественников = СтрокиДереваЗадач.НайтиСтроки(СтруктураПоиска, Ложь);
	Для Каждого СтрокаДерева Из СтрокиБезИзмененыхПредшественников Цикл
		
		КоличествоЭлементовМассива = СтрокаДерева.ПредшествующиеЗадачи.Количество();
		
		Для Инд = 1 По КоличествоЭлементовМассива Цикл
			
			НайденнаяСтрокаТекущегоУровня = СтрокиДереваЗадач.Найти(СтрокаДерева.ПредшествующиеЗадачи[КоличествоЭлементовМассива - Инд], "Задача" , Ложь);
			Если НайденнаяСтрокаТекущегоУровня <> Неопределено 
				И МассивСвязанныхВыполненныхЗадач.Найти(СтрокаДерева.ПредшествующиеЗадачи[КоличествоЭлементовМассива - Инд]) <> Неопределено Тогда
				СтрокаДерева.ПредшествующиеЗадачи.Удалить(КоличествоЭлементовМассива - Инд);
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТочкиПродолжения = СтрокиДереваЗадач.Найти(Истина, "ТочкаПродолжения", Ложь); 
		Если СтрокаТочкиПродолжения = Неопределено Тогда
			НоваяПредшествующаяЗадача = СтрокаДерева.НаЗаменуЗадаче;
		Иначе
			НоваяПредшествующаяЗадача = СтрокаТочкиПродолжения.Задача;
		КонецЕсли;
		
		СтрокаДерева.ПредшествующиеЗадачи.Добавить(НоваяПредшествующаяЗадача);
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КСозданию", Истина);
	СтрокиДляПереносаДочерних = СтрокиДереваЗадач.НайтиСтроки(СтруктураПоиска, Ложь);
	Для Каждого СтрокаДляПереносаДочерних Из СтрокиДляПереносаДочерних Цикл
		
		РодительИсточник = ДеревоЗадачПроцесса.Строки.Найти(СтрокаДляПереносаДочерних.НаЗаменуЗадаче, "Задача", Истина);
		Если РодительИсточник <> Неопределено Тогда
			ПеренестиДочерниеЗадачи(РодительИсточник, СтрокаДляПереносаДочерних, СоответствиеСозданныхЗадач, Граф, ТолькоПоШаблону);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьПредшественниковВСоздаваемыхЗадачах(ДеревоЗадачПроцесса, СоответствиеСозданныхЗадач, МассивТочекПродолжения)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КСозданию", Истина);
	СтрокиЗадачи = ДеревоЗадачПроцесса.Строки.НайтиСтроки(СтруктураПоиска, Ложь);
	
	Для Каждого СтрокаЗадача Из СтрокиЗадачи Цикл
		
		Для Инд = 0 По СтрокаЗадача.ПредшествующиеЗадачи.Количество() - 1 Цикл 
			Если МассивТочекПродолжения.Найти(СтрокаЗадача.ПредшествующиеЗадачи[Инд]) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НайденнаяНоваяЗадача = СоответствиеСозданныхЗадач.Получить(СтрокаЗадача.ПредшествующиеЗадачи[Инд]);
			Если НайденнаяНоваяЗадача <> Неопределено Тогда
				СтрокаЗадача.ПредшествующиеЗадачи[Инд] = НайденнаяНоваяЗадача;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиДочерниеЗадачи(РодительИсточник, СтрокаПриемник, СоответствиеСозданныхЗадач, Граф, ТолькоПоШаблону)
	
	Для Каждого СтрокаИсточник Из РодительИсточник.Строки Цикл
		
		Если ТолькоПоШаблону И Не ЗначениеЗаполнено(СтрокаИсточник.ЗадачаШаблона) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаПриемник.Строки.Добавить();
		
		НоваяСтрока.ЗадачаШаблона        = СтрокаИсточник.ЗадачаШаблона;
		НоваяСтрока.ПлановаяДлительность = СтрокаИсточник.ПлановаяДлительность;
		НоваяСтрока.КСозданию            = Истина;
		НоваяСтрока.Задача               = Справочники.ЗадачиПроцесса.ПолучитьСсылку(Новый УникальныйИдентификатор);
		НоваяСтрока.НаЗаменуЗадаче       = СтрокаИсточник.Задача;
		
		ПредшествующиеЗадачи = Граф.Получить(СтрокаИсточник.Задача);
		Если ПредшествующиеЗадачи <> Неопределено Тогда
			НоваяСтрока.ПредшествующиеЗадачи = ПредшествующиеЗадачи;
		КонецЕсли;

		СоответствиеСозданныхЗадач.Вставить(СтрокаИсточник.Задача, НоваяСтрока.Задача);
		
		ПеренестиДочерниеЗадачи(СтрокаИсточник, НоваяСтрока, СоответствиеСозданныхЗадач, Граф, ТолькоПоШаблону)
		
	КонецЦикла;
	
КонецПроцедуры

Функция МассивСвязанныхВыполненныхЗадач(ОтменяемаяЗадача, ПоследующиеЗадачи, ДеревоЗадачПроцесса)
	
	МассивСвязанныхВыполненныхЗадач = Новый Массив;
	МассивОбработанныхЗадач         = Новый Массив;
	
	ДобавитьОтменяемыеЗадачиПоЗадаче(МассивСвязанныхВыполненныхЗадач, МассивОбработанныхЗадач, ОтменяемаяЗадача, ПоследующиеЗадачи, ДеревоЗадачПроцесса);
	МассивКОтработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСвязанныхВыполненныхЗадач, МассивОбработанныхЗадач);
	
	Пока МассивКОтработке.Количество() > 0 Цикл
		
		Для Каждого ЗадачаКОбработке Из МассивКОтработке Цикл
			ДобавитьОтменяемыеЗадачиПоЗадаче(МассивСвязанныхВыполненныхЗадач, МассивОбработанныхЗадач, ЗадачаКОбработке, ПоследующиеЗадачи, ДеревоЗадачПроцесса);
		КонецЦикла;
		
		МассивКОтработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСвязанныхВыполненныхЗадач, МассивОбработанныхЗадач);
		
	КонецЦикла;
	
	Возврат МассивСвязанныхВыполненныхЗадач;
	
КонецФункции

Процедура ДобавитьОтменяемыеЗадачиПоЗадаче(МассивСвязанныхВыполненныхЗадач, МассивОбработанныхЗадач, ОтменяемаяЗадача, ПоследующиеЗадачи, ДеревоЗадачПроцесса)
	
	СтрокаТекущейЗадачи = ДеревоЗадачПроцесса.Строки.Найти(ОтменяемаяЗадача, "Задача", Истина);
	Если СтрокаТекущейЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСвязанныхВыполненныхЗадач.Найти(СтрокаТекущейЗадачи.Задача) = Неопределено Тогда
		МассивСвязанныхВыполненныхЗадач.Добавить(СтрокаТекущейЗадачи.Задача);
	КонецЕсли;
	
	ДобавитьРодительскиеЗадачи(МассивСвязанныхВыполненныхЗадач,СтрокаТекущейЗадачи);
	ДобавитьПодчиненныеЗадачи(МассивСвязанныхВыполненныхЗадач, СтрокаТекущейЗадачи);
	ДобавитьПоследующиеЗадачи(МассивСвязанныхВыполненныхЗадач, ПоследующиеЗадачи, ОтменяемаяЗадача, ДеревоЗадачПроцесса);
	
	МассивОбработанныхЗадач.Добавить(СтрокаТекущейЗадачи.Задача);
	
КонецПроцедуры

Процедура ДобавитьРодительскиеЗадачи(МассивСвязанныхВыполненныхЗадач,СтрокаТекущейЗадачи)
	
	РодительскаяСтрока = СтрокаТекущейЗадачи.Родитель;
	
	Если РодительскаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РодительскаяСтрока.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
		И МассивСвязанныхВыполненныхЗадач.Найти(РодительскаяСтрока.Задача) = Неопределено Тогда
		МассивСвязанныхВыполненныхЗадач.Добавить(РодительскаяСтрока.Задача);
		ДобавитьРодительскиеЗадачи(МассивСвязанныхВыполненныхЗадач,РодительскаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПодчиненныеЗадачи(МассивСвязанныхВыполненныхЗадач, СтрокаТекущейЗадачи)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаТекущейЗадачи.Строки Цикл
		
		Если МассивСвязанныхВыполненныхЗадач.Найти(ПодчиненнаяСтрока.Задача) = Неопределено Тогда
			МассивСвязанныхВыполненныхЗадач.Добавить(ПодчиненнаяСтрока.Задача);
		КонецЕсли;
		ДобавитьПодчиненныеЗадачи(МассивСвязанныхВыполненныхЗадач, ПодчиненнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоследующиеЗадачи(МассивСвязанныхВыполненныхЗадач, Граф, ОтменяемаяЗадача, ДеревоЗадачПроцесса)
	
	МассивПоследующихЗадач = Граф.Получить(ОтменяемаяЗадача);
	Если МассивПоследующихЗадач = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоследующаяЗадача Из МассивПоследующихЗадач Цикл
		СтрокаПоследующаяЗадача = ДеревоЗадачПроцесса.Строки.Найти(ПоследующаяЗадача, "Задача", Истина);
		Если СтрокаПоследующаяЗадача <> Неопределено
			И (СтрокаПоследующаяЗадача.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
				Или СтрокаПоследующаяЗадача.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
				Или СтрокаПоследующаяЗадача.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена)
			И МассивСвязанныхВыполненныхЗадач.Найти(ПоследующаяЗадача) = Неопределено Тогда
			МассивСвязанныхВыполненныхЗадач.Добавить(ПоследующаяЗадача);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПонижениеСтатуса

Функция ДанныеДляПониженияСтатусаЗадачи(Задача, ТекущийСтатус, НовыйСтатус, Предмет, УникальныйИдентификатор) Экспорт
	
	Если ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		
		Если НовыйСтатус = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
			Возврат ДанныеАнализаПодчиненныхЗадачДляПониженияСтатуса(Задача, НовыйСтатус, УникальныйИдентификатор);
		Иначе
			Возврат ДанныеАнализаДляОтменыВыполненияЗадачи(Задача, НовыйСтатус, Предмет, УникальныйИдентификатор);
		КонецЕсли;
		
	Иначе
		
		Возврат ДанныеАнализаПодчиненныхЗадачДляПониженияСтатуса(Задача, НовыйСтатус, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецФункции

Функция ДанныеАнализаДляОтменыВыполненияЗадачи(Задача, Статус, Предмет, УникальныйИдентификатор)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Задача",           Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроцесса"));
	ТаблицаДанных.Колонки.Добавить("НовыйСтатус",      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗадачПроцессов"));
	ТаблицаДанных.Колонки.Добавить("ТребуетИзменения", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ТипЗадачи",        Новый ОписаниеТипов("Строка"));
	
	ПоследующиеЗадачи = ЗадачиПроцессов.ПоследующиеЗадачи(Предмет);
	ДеревоЗадачПроцесса = ДеревоЗадачПроцесса(Предмет, Истина);
	
	МассивСвязанныхЗадач     = Новый Массив;
	МассивОбработанныхЗадач  = Новый Массив;
	
	ДобавитьСвязанныеЗадачиПоЗадаче(ТаблицаДанных, МассивСвязанныхЗадач, МассивОбработанныхЗадач,
	                                Задача, Статус,  ПоследующиеЗадачи, ДеревоЗадачПроцесса);
	
	МассивКОтработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСвязанныхЗадач, МассивОбработанныхЗадач);
	
	Пока МассивКОтработке.Количество() > 0 Цикл
		
		Для Каждого ЗадачаКОбработке Из МассивКОтработке Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Задача", ЗадачаКОбработке);
			
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				МассивОбработанныхЗадач.Добавить(ЗадачаКОбработке);
			Иначе
				СтатусОбрабатываемойЗадачи = НайденныеСтроки[0].НовыйСтатус;
			КонецЕсли;
			
			ДобавитьСвязанныеЗадачиПоЗадаче(ТаблицаДанных, МассивСвязанныхЗадач, МассивОбработанныхЗадач, 
			                                ЗадачаКОбработке, СтатусОбрабатываемойЗадачи, ПоследующиеЗадачи, ДеревоЗадачПроцесса);
			
		КонецЦикла;
		
		МассивКОтработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСвязанныхЗадач, МассивОбработанныхЗадач);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДанных.Задача,
	|	ТаблицаДанных.НовыйСтатус,
	|	ТаблицаДанных.ТребуетИзменения,
	|	ТаблицаДанных.ТипЗадачи
	|ПОМЕСТИТЬ ДанныеАнализа
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеАнализа.Задача                                                                         КАК Задача,
	|	ЗадачиПроцесса.Наименование                                                                  КАК НаименованиеЗадачи,
	|	ЗадачиПроцесса.ВерсияДанных                                                                  КАК ВерсияДанных,
	|	ЗадачиПроцесса.Исполнитель                                                                   КАК Исполнитель,
	|	ЗадачиПроцесса.Контролирующий                                                                КАК Контролирующий,
	|	ЗадачиПроцесса.Родитель                                                                      КАК Родитель,
	|	ЗадачиПроцесса.ЗадачаШаблона                                                                 КАК ЗадачаШаблона,
	|	ДанныеАнализа.ТипЗадачи                                                                      КАК ТипЗадачи,
	|	ДанныеАнализа.НовыйСтатус                                                                    КАК НовыйСтатус,
	|	ЗадачиПроцесса.Статус                                                                        КАК Статус,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ИсполнительРодительскойЗадачи,
	|	ЛОЖЬ                                                                                         КАК ПользователюДоступноИзменение
	|ИЗ
	|	ДанныеАнализа КАК ДанныеАнализа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДанныеАнализа.Задача = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО ЗадачиПроцессаРодитель.Ссылка = ЗадачиПроцесса.Родитель
	|ГДЕ
	|	ДанныеАнализа.ТребуетИзменения";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатОбработкиТаблицыДанныхДляПониженияСтатуса(ТаблицаДанных, Задача, УникальныйИдентификатор);
	
КонецФункции

Процедура ДобавитьСвязанныеЗадачиПоЗадаче(ТаблицаДанных, МассивСвязанныхЗадач, МассивОбработанныхЗадач, ОбрабатываемаяЗадача, Статус, ПоследующиеЗадачи, ДеревоЗадачПроцесса)
	
	СтрокаТекущейЗадачи = ДеревоЗадачПроцесса.Строки.Найти(ОбрабатываемаяЗадача, "Задача", Истина);
	Если СтрокаТекущейЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСвязанныхЗадач.Найти(СтрокаТекущейЗадачи.Задача) = Неопределено Тогда
		МассивСвязанныхЗадач.Добавить(СтрокаТекущейЗадачи.Задача);
	КонецЕсли;
	
	ТипЗадачи = "Текущая";
	
	ДобавитьЗадачуВТаблицуПриПониженииСтатуса(ТаблицаДанных,
	                                          СтрокаТекущейЗадачи.Задача,
	                                          Статус,
	                                          Истина,
	                                          ТипЗадачи);
	
	ДобавитьРодительскиеЗадачиПриОтменеВыполнения(ТаблицаДанных, МассивСвязанныхЗадач,СтрокаТекущейЗадачи, ТипЗадачи);
	
	Если Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
		ДобавитьПодчиненныеЗадачиПриОтменеВыполнения(ТаблицаДанных, МассивСвязанныхЗадач, СтрокаТекущейЗадачи, ТипЗадачи);
	КонецЕсли;
	
	ДобавитьПоследующиеЗадачиПриОтменеВыполнения(ТаблицаДанных, МассивСвязанныхЗадач, ПоследующиеЗадачи, ОбрабатываемаяЗадача, ДеревоЗадачПроцесса);
	
	МассивОбработанныхЗадач.Добавить(СтрокаТекущейЗадачи.Задача);
	
КонецПроцедуры

Процедура ДобавитьРодительскиеЗадачиПриОтменеВыполнения(ТаблицаДанных, МассивСвязанныхЗадач, СтрокаТекущейЗадачи, ТипЗадачи)
	
	РодительскаяСтрока = СтрокаТекущейЗадачи.Родитель;
	
	Если РодительскаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РодительскаяСтрока.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
		И МассивСвязанныхЗадач.Найти(РодительскаяСтрока.Задача) = Неопределено Тогда
		МассивСвязанныхЗадач.Добавить(РодительскаяСтрока.Задача);
		
		Если ТипЗадачи <> "Последующие" Тогда
			ТипЗадачи = "Родительские";
		КонецЕсли;
		
		ДобавитьЗадачуВТаблицуПриПониженииСтатуса(ТаблицаДанных,
		                                          РодительскаяСтрока.Задача,
		                                          Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению,
		                                          Истина,
		                                          ТипЗадачи);
		
		ДобавитьРодительскиеЗадачи(МассивСвязанныхЗадач,РодительскаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПоследующиеЗадачиПриОтменеВыполнения(ТаблицаДанных, МассивСвязанныхЗадач, Граф, ОтменяемаяЗадача, ДеревоЗадачПроцесса)
	
	МассивПоследующихЗадач = Граф.Получить(ОтменяемаяЗадача);
	Если МассивПоследующихЗадач = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоследующаяЗадача Из МассивПоследующихЗадач Цикл
		СтрокаПоследующаяЗадача = ДеревоЗадачПроцесса.Строки.Найти(ПоследующаяЗадача, "Задача", Истина);
		
		Если СтрокаПоследующаяЗадача <> Неопределено
			И (СтрокаПоследующаяЗадача.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
				Или СтрокаПоследующаяЗадача.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
				Или СтрокаПоследующаяЗадача.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена)
			И МассивСвязанныхЗадач.Найти(ПоследующаяЗадача) = Неопределено Тогда
			
			МассивСвязанныхЗадач.Добавить(ПоследующаяЗадача);
			
			Если СтрокаПоследующаяЗадача.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
				ТребуетИзменения = Ложь;
			Иначе
				ТребуетИзменения = Истина;
			КонецЕсли;
			
			ДобавитьЗадачуВТаблицуПриПониженииСтатуса(ТаблицаДанных,
			                                          СтрокаПоследующаяЗадача.Задача,
			                                          Перечисления.СтатусыЗадачПроцессов.Запланирована,
			                                          ТребуетИзменения,
			                                          "Последующие");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПодчиненныеЗадачиПриОтменеВыполнения(ТаблицаДанных, МассивСвязанныхЗадач, СтрокаТекущейЗадачи, ТипЗадачи)
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаТекущейЗадачи.Строки Цикл
		
		Если МассивСвязанныхЗадач.Найти(ПодчиненнаяСтрока.Задача) = Неопределено 
			И (ПодчиненнаяСтрока.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
				Или ПодчиненнаяСтрока.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению) Тогда
				
			МассивСвязанныхЗадач.Добавить(ПодчиненнаяСтрока.Задача);
			
			Если ТипЗадачи <> "Последующие" Тогда
				ТипЗадачи = "Подчиненные";
			КонецЕсли;
			
			ДобавитьЗадачуВТаблицуПриПониженииСтатуса(ТаблицаДанных,
			                                          ПодчиненнаяСтрока.Задача,
			                                          Перечисления.СтатусыЗадачПроцессов.Запланирована,
			                                          Истина,
			                                          ТипЗадачи);
			
			ДобавитьПодчиненныеЗадачиПриОтменеВыполнения(ТаблицаДанных, МассивСвязанныхЗадач, ПодчиненнаяСтрока, ТипЗадачи);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗадачуВТаблицуПриПониженииСтатуса(ТаблицаДанных, Задача, НовыйСтатус, ТребуетИзменения, ТипЗадачи)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Задача", Задача);
	
	НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда 
		
		НоваяСтрокаТаблицы  = ТаблицаДанных.Добавить();
		НоваяСтрокаТаблицы.Задача           = Задача;
		НоваяСтрокаТаблицы.НовыйСтатус      = НовыйСтатус;
		НоваяСтрокаТаблицы.ТребуетИзменения = ТребуетИзменения;
		НоваяСтрокаТаблицы.ТипЗадачи        = ТипЗадачи;
		
	Иначе
		
		СтрокаТаблицы = НайденныеСтроки[0];
		
		Если НовыйСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована
			И СтрокаТаблицы.НовыйСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
			
			СтрокаТаблицы.НовыйСтатус      = НовыйСтатус;
			
		КонецЕсли;
		
		Если ТребуетИзменения 
			И Не СтрокаТаблицы.ТребуетИзменения Тогда
			
			СтрокаТаблицы.ТребуетИзменения = Истина;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипЗадачи = "Последующие" Тогда
			ТипЗадачи = "Последующие";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеАнализаПодчиненныхЗадачДляПониженияСтатуса(Задача, Статус, УникальныйИдентификатор)
	
	МассивТребуемыхСтатусов = Новый Массив;
	
	Если Статус = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
		
		МассивТребуемыхСтатусов.Добавить(Перечисления.СтатусыЗадачПроцессов.Запланирована);
		МассивТребуемыхСтатусов.Добавить(Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению);
		МассивТребуемыхСтатусов.Добавить(Перечисления.СтатусыЗадачПроцессов.Выполнена);
		
	ИначеЕсли Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
	
		МассивТребуемыхСтатусов.Добавить(Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению);
		МассивТребуемыхСтатусов.Добавить(Перечисления.СтатусыЗадачПроцессов.Выполнена)
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                                                        КАК Задача,
	|	ЗадачиПроцесса.Наименование                                                                  КАК НаименованиеЗадачи,
	|	ЗадачиПроцесса.ВерсияДанных                                                                  КАК ВерсияДанных,
	|	ЗадачиПроцесса.Исполнитель                                                                   КАК Исполнитель,
	|	ЗадачиПроцесса.Контролирующий                                                                КАК Контролирующий,
	|	ЗадачиПроцесса.Родитель                                                                      КАК Родитель,
	|	ЗадачиПроцесса.ЗадачаШаблона                                                                 КАК ЗадачаШаблона,
	|	""Подчиненные""                                                                              КАК ТипЗадачи,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ИсполнительРодительскойЗадачи,
	|	ЛОЖЬ                                                                                         КАК ПользователюДоступноИзменение,
	|	ЗадачиПроцесса.Статус                                                                        КАК Статус,
	|	&НовыйСтатус                                                                                 КАК НовыйСтатус
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО (ЗадачиПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка)
	|ГДЕ
	|	ЗадачиПроцесса.Статус В(&МассивТребуемыхСтатусов)
	|	И ИерархияЗадачПроцесса.Родитель = &Родитель
	|	И Не ЗадачиПроцесса.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Родитель", Задача);
	Запрос.УстановитьПараметр("МассивТребуемыхСтатусов", МассивТребуемыхСтатусов);
	Запрос.УстановитьПараметр("НовыйСтатус", Статус);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатОбработкиТаблицыДанныхДляПониженияСтатуса(ТаблицаДанных, Задача, УникальныйИдентификатор);
	
КонецФункции

Функция РезультатОбработкиТаблицыДанныхДляПониженияСтатуса(ТаблицаДанных, Задача,  УникальныйИдентификатор)
	
	ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроля();
	ПравоИзмененияЗадачПроцессов   = ПравоДоступа("Изменение", Метаданные.Справочники.ЗадачиПроцесса);
	ТекущийПользователь            = Пользователи.ТекущийПользователь();
	
	ЕстьНедоступныеДляИзменения   = Ложь;
	ТребуетсяИзменениеДругихЗадач = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		ПараметрыПроверкиПраваПониженияСтатуса = ЗадачиПроцессовКлиентСервер.ПараметрыПроверкиПраваПониженияСтатуса();
		
		ПараметрыПроверкиПраваПониженияСтатуса.Задача                         = СтрокаТаблицы.Задача;
		ПараметрыПроверкиПраваПониженияСтатуса.ПометкаУдаления                = Ложь;
		ПараметрыПроверкиПраваПониженияСтатуса.ПравоИзменения                 = ПравоИзмененияЗадачПроцессов;
		ПараметрыПроверкиПраваПониженияСтатуса.ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроля;
		ПараметрыПроверкиПраваПониженияСтатуса.ЗадачаШаблона                  = СтрокаТаблицы.ЗадачаШаблона;
		ПараметрыПроверкиПраваПониженияСтатуса.Контролирующий                 = СтрокаТаблицы.Контролирующий;
		ПараметрыПроверкиПраваПониженияСтатуса.ТекущийПользователь            = ТекущийПользователь;
		ПараметрыПроверкиПраваПониженияСтатуса.Родитель                       = СтрокаТаблицы.Родитель;
		ПараметрыПроверкиПраваПониженияСтатуса.ИсполнительРодительскойЗадачи  = СтрокаТаблицы.ИсполнительРодительскойЗадачи;
		ПараметрыПроверкиПраваПониженияСтатуса.Исполнитель                    = СтрокаТаблицы.Исполнитель;
		
		СтрокаТаблицы.ПользователюДоступноИзменение = ЗадачиПроцессовКлиентСервер.ПравоПониженияСтатуса(ПараметрыПроверкиПраваПониженияСтатуса);
		
		Если СтрокаТаблицы.Задача = Задача Тогда
			СтрокаТаблицы.ТипЗадачи = "Текущая";
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ПользователюДоступноИзменение Тогда
			ЕстьНедоступныеДляИзменения = Истина;
		КонецЕсли;
		
		Если СтрокаТаблицы.Задача <> Задача Тогда
			ТребуетсяИзменениеДругихЗадач = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеАнализа = Новый Структура;
	ДанныеАнализа.Вставить("ТребуетсяИзменениеДругихЗадач", ТребуетсяИзменениеДругихЗадач);
	ДанныеАнализа.Вставить("КоличествоЗадачКИзменению",     ТаблицаДанных.Количество());
	ДанныеАнализа.Вставить("ЕстьНедоступныеДляИзменения",   ЕстьНедоступныеДляИзменения);
	
	Если УникальныйИдентификатор = Неопределено Тогда
		ДанныеАнализа.Вставить("ТаблицаДанных", ТаблицаДанных);
	Иначе
		ДанныеАнализа.Вставить("АдресТаблицы", ПоместитьВоВременноеХранилище(ТаблицаДанных, УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат ДанныеАнализа;
	
КонецФункции

Функция РезультатПониженияСтатусаСПодчиненными(Задача, ТекущийСтатус, НовыйСтатус, Предмет) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВыполненоУспешно", Ложь);
	СтруктураВозврата.Вставить("КоличествоОбработанных", 0);
	
	ТекущийПользователь            = Пользователи.ТекущийПользователь();
	ТекстШапкаПроблема = НСтр("ru = 'Не удалось понизить статус задачи по причине:'");
	
	Если ТекущийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена
		И (НовыйСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована
		Или НовыйСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению) Тогда
		
		ДанныеДляПонижения = ДанныеАнализаДляОтменыВыполненияЗадачи(Задача, НовыйСтатус, Предмет, Неопределено);
		
	Иначе
		
		ДанныеДляПонижения = ДанныеАнализаПодчиненныхЗадачДляПониженияСтатуса(Задача, НовыйСтатус, Неопределено);
		
	КонецЕсли;
	
	Если ДанныеДляПонижения.ЕстьНедоступныеДляИзменения Тогда
		
		Для Каждого СтрокаТаблицы Из ДанныеДляПонижения.ТаблицаДанных Цикл
			
			Если Не ДанныеДляПонижения.ПользователюДоступноИзменение Тогда
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Требуется понижение статуса задачи ""%1"", но оно вам не доступно.'"),
				                           СтрокаТаблицы.Задача);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Задача);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	МассивИзмененныхЗадач = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ДанныеДляПонижения.ТаблицаДанных Цикл
	
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗадачиПроцесса");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.Задача);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заблокировать задачу ""%1"" -: %2'"),
			                           СтрокаТаблицы.Задача,
			                           ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстСообщения = ТекстШапкаПроблема + Символы.ПС + ТекстСообщения;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Задача);
			
			Возврат СтруктураВозврата;
			
		КонецПопытки;
		
		ЗадачаОбъект = ПроверитьПолучитьОбъект(СтрокаТаблицы.Задача,СтрокаТаблицы.ВерсияДанных);
		
		Если ЗадачаОбъект = Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Задача ""%1"" была изменена другим пользователем.'"), СтрокаТаблицы.Задача);
			
			ТекстСообщения = ТекстШапкаПроблема + Символы.ПС + ТекстСообщения;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Задача);
			
			ОтменитьТранзакцию();
			
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		Попытка
			
			ТекущаяДата = ТекущаяДатаСеанса();
			
			ЗадачаОбъект.Статус = СтрокаТаблицы.НовыйСтатус;
			ЗадачаОбъект.ФактическаяДатаНачала    = ФактическаяДатаНачалаПриИзмененииСтатуса(НовыйСтатус, ЗадачаОбъект.ФактическаяДатаНачала);
			ЗадачаОбъект.ФактическаяДатаОкончания = ФактическаяДатаОкончанияПриИзмененииСтатуса(НовыйСтатус);
			
			ПовыситьСтатусУЗадачи(ЗадачаОбъект, СтрокаТаблицы.НовыйСтатус, ТекущийПользователь);
			
			ЗадачаОбъект.ОбменДанными.Загрузка = Истина;
			ЗадачаОбъект.Записать();
			
			МассивИзмененныхЗадач.Добавить(СтрокаТаблицы.Задача);
		
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать задачу ""%1"" -: %2'"),
			                           СтрокаТаблицы.Задача,
			                           ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстСообщения = ТекстШапкаПроблема + Символы.ПС + ТекстСообщения;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СтрокаТаблицы.Задача);
			
			Возврат СтруктураВозврата;
			
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьМаксимальныйСтатусЗадачПоПредмету(Предмет);
	РегистрыСведений.ЭтапыПроцесса.РасчитатьЭтапыПроцессаПоПредмету(Предмет);
	РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьЗонуМассиваЗадач(МассивИзмененныхЗадач);
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивИзмененныхЗадач, Неопределено, Предмет);

	ЗафиксироватьТранзакцию();
	
	СтруктураВозврата.ВыполненоУспешно       = Истина;
	СтруктураВозврата.КоличествоОбработанных = ДанныеДляПонижения.ТаблицаДанных.Количество();
	Возврат СтруктураВозврата;

КонецФункции

Функция ФактическаяДатаОкончанияПриИзмененииСтатуса(Статус) Экспорт

	Если Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		Возврат ТекущаяДатаСеанса();
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;

КонецФункции

Функция ФактическаяДатаНачалаПриИзмененииСтатуса(Статус, ДатаНачала) Экспорт

	Если Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		Возврат ДатаНачала;
	ИначеЕсли Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
		Возврат ТекущаяДатаСеанса();
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;

КонецФункции

Функция ПравоИзмененияЗадачБезКонтроля(Задача = Неопределено, Предмет = Неопределено) Экспорт
	
	Если Пользователи.РолиДоступны("ПолныеПрава") Тогда
		
		Возврат Истина;
		
	ИначеЕсли Пользователи.РолиДоступны("ИзменениеЗадачБезКонтроля") Тогда
		
		ЕстьПраво = Истина;
		
		ЗадачиПроцессовПереопределяемый.ПриОпределенииПраваИзмененияЗадачБезКонтроля(ЕстьПраво, Задача, Предмет);
		
		Возврат ЕстьПраво;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;

КонецФункции

Функция ПроверитьПолучитьОбъект(Ссылка,ВерсияДанных) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Объект.ВерсияДанных <> ВерсияДанных Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Объект;
	
КонецФункции

#КонецОбласти

#Область ПраваДоступа

Функция ПравоДоступаСостояниеСогласования() Экспорт
	
	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ИтогиСогласованияЗадачРесурсов);
	
КонецФункции

#КонецОбласти

#Область ПолучениеДополнительныхДанныхВСписке

Функция РезультатЗапросаПоДополнительнымДаннымЗадачДляВыводаВСписок(ЗадачиКПолучениюДанных, ПараметрыПолучения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                                                                                          КАК Задача,
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано, 0) + ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних, 0) КАК Запланировано
	|ПОМЕСТИТЬ ЗадачиЗапланировано
	|ИЗ
	|	РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидПланируемогоРесурса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&ЗадачиКПолучениюДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса                             КАК ЗадачаПроцесса,
	|	ИерархияЗадачПроцесса.Родитель                                   КАК Родитель, 
	|	ЕСТЬNULL(ИтогиСогласованияЗадачРесурсов.Запланировано * 3600, 0) КАК Запланировано
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидПланируемогоРесурса
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель В(&ЗадачиКПолучениюДанных)
	|;
	| 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК Длительность,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса           КАК ЗадачаПроцесса,
	|	ДочерниеЗадачиРабот.Родитель                 КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяПоЗадачам
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = ДочерниеЗадачиРабот.ЗадачаПроцесса)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗатраченноеВремяПоЗадачам.Длительность) КАК Длительность,
	|	ЗатраченноеВремяПоЗадачам.Работа              КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяЗадачиВсего
	|ИЗ
	|	ЗатраченноеВремяПоЗадачам КАК ЗатраченноеВремяПоЗадачам
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатраченноеВремяПоЗадачам.Работа
	|;
	| 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР 
	|		КОГДА ЗатраченноеВремяПоЗадачам.Длительность >= ДочерниеЗадачиРабот.Запланировано
	|			ИЛИ (ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена)))
	|			ИЛИ ЗадачиПроцесса.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ ДочерниеЗадачиРабот.Запланировано -ЗатраченноеВремяПоЗадачам.Длительность 
	|	КОНЕЦ КАК Остаток,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса           КАК ЗадачаПроцесса,
	|	ДочерниеЗадачиРабот.Родитель                 КАК Работа
	|ПОМЕСТИТЬ ОстатокПоДочернимЗадачам
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяПоЗадачам КАК ЗатраченноеВремяПоЗадачам
	|		ПО (ЗатраченноеВремяПоЗадачам.ЗадачаПроцесса = ДочерниеЗадачиРабот.ЗадачаПроцесса
	|			И ЗатраченноеВремяПоЗадачам.Работа = ДочерниеЗадачиРабот.Родитель)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ДочерниеЗадачиРабот.ЗадачаПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОстатокПоДочернимЗадачам.Остаток) КАК Остаток,
	|	ОстатокПоДочернимЗадачам.Работа         КАК Работа
	|ПОМЕСТИТЬ ОстатокПоРаботам
	|ИЗ
	|	ОстатокПоДочернимЗадачам КАК ОстатокПоДочернимЗадачам
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстатокПоДочернимЗадачам.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(УчетВремениПрошлыйПериод.Длительность, 0)) КАК Длительность,
	|	ДочерниеЗадачиРабот.Родитель                              КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяЗадачиПрошлыйПериод
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремениПрошлыйПериод
	|		ПО (УчетВремениПрошлыйПериод.Задача = ДочерниеЗадачиРабот.ЗадачаПроцесса)
	|			И (УчетВремениПрошлыйПериод.Период >= &НачалоПрошлогоПериода)
	|			И (УчетВремениПрошлыйПериод.Период <= &КонецПрошлогоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(УчетВремениТекущийПериод.Длительность, 0)) КАК Длительность,
	|	ДочерниеЗадачиРабот.Родитель                              КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяЗадачиТекущийПериод
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремениТекущийПериод
	|		ПО (УчетВремениТекущийПериод.Задача = ДочерниеЗадачиРабот.ЗадачаПроцесса)
	|			И (УчетВремениТекущийПериод.Период >= &НачалоТекущегоПериода)
	|			И (УчетВремениТекущийПериод.Период <= &КонецТекущегоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель
	|; 
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДочерниеЗадачиРабот.Родитель               КАК Родитель,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ДанныеРабочихПлановПрошлыйПериод
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗаписиПлана.Работа
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В
	|			(ВЫБРАТЬ
	|				Планы.ИдентификаторПлана КАК ИдентификаторПлана
	|			ИЗ
	|				РегистрСведений.Планы КАК Планы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|					ПО
	|						Планы.ВидПлана = ВидыПланов.Ссылка
	|			ГДЕ
	|				ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.Рабочий)
	|				И НЕ ВидыПланов.ПометкаУдаления
	|				И ВидыПланов.РодительскийПлан.Ссылка = &РодительскийПлан
	|				И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)
	|				И Планы.НачалоПериода >= &НачалоПрошлогоПериода
	|				И Планы.КонецПериода <= &КонецПрошлогоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДочерниеЗадачиРабот.Родитель               КАК Родитель,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ДанныеРабочихПлановТекущийПериод
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗаписиПлана.Работа
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В
	|			(ВЫБРАТЬ
	|				Планы.ИдентификаторПлана КАК ИдентификаторПлана
	|			ИЗ
	|				РегистрСведений.Планы КАК Планы
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|					ПО
	|						Планы.ВидПлана = ВидыПланов.Ссылка
	|			ГДЕ
	|				ВидыПланов.ТипПлана = ЗНАЧЕНИЕ(Перечисление.ТипыПланов.Рабочий)
	|				И НЕ ВидыПланов.ПометкаУдаления
	|				И ВидыПланов.РодительскийПлан.Ссылка = &РодительскийПлан
	|				И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)
	|				И Планы.НачалоПериода >= &НачалоТекущегоПериода
	|				И Планы.КонецПериода <= &КонецТекущегоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Работа                                                                               КАК Задача,
	|	МАКСИМУМ(ЕстьNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка))) КАК Статус, 
	|	СУММА(ВложенныйЗапрос.ФактВсего)                                                                     КАК ФактВсего,
	|	СУММА(ВложенныйЗапрос.ФактПрошлыйПериод)                                                             КАК ФактПрошлыйПериод,
	|	СУММА(ВложенныйЗапрос.ФактТекущийПериод)                                                             КАК ФактТекущийПериод,
	|	СУММА(ВложенныйЗапрос.РабочийПланТекущийПериод)                                                      КАК РабочийПланТекущийПериод,
	|	СУММА(ВложенныйЗапрос.РабочийПланПрошлыйПериод)                                                      КАК РабочийПланПрошлыйПериод,
	|	СУММА(ВложенныйЗапрос.Запланировано)                                                                 КАК Запланировано,
	|	СУММА(ВложенныйЗапрос.Остаток)                                                                       КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗатраченноеВремяЗадачиВсего.Работа       КАК Работа,
	|		ЗатраченноеВремяЗадачиВсего.Длительность КАК ФактВсего,
	|		0                                        КАК ФактПрошлыйПериод,
	|		0                                        КАК ФактТекущийПериод,
	|		0                                        КАК РабочийПланТекущийПериод,
	|		0                                        КАК РабочийПланПрошлыйПериод,
	|		0                                        КАК Запланировано,
	|		0                                        КАК Остаток
	|	ИЗ
	|		ЗатраченноеВремяЗадачиВсего КАК ЗатраченноеВремяЗадачиВсего
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатраченноеВремяЗадачиПрошлыйПериод.Работа,
	|		0,
	|		ЗатраченноеВремяЗадачиПрошлыйПериод.Длительность,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ЗатраченноеВремяЗадачиПрошлыйПериод КАК ЗатраченноеВремяЗадачиПрошлыйПериод
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатраченноеВремяЗадачиТекущийПериод.Работа,
	|		0,
	|		0,
	|		ЗатраченноеВремяЗадачиТекущийПериод.Длительность,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ЗатраченноеВремяЗадачиТекущийПериод КАК ЗатраченноеВремяЗадачиТекущийПериод
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРабочихПлановПрошлыйПериод.Родитель,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ДанныеРабочихПлановПрошлыйПериод.ПланируемыеТрудозатраты,
	|		0,
	|		0
	|	ИЗ
	|		ДанныеРабочихПлановПрошлыйПериод КАК ДанныеРабочихПлановПрошлыйПериод
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеРабочихПлановТекущийПериод.Родитель,
	|		0,
	|		0,
	|		0,
	|		ДанныеРабочихПлановТекущийПериод.ПланируемыеТрудозатраты,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		ДанныеРабочихПлановТекущийПериод КАК ДанныеРабочихПлановТекущийПериод
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗадачиЗапланировано.Задача,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ЗадачиЗапланировано.Запланировано,
	|		0
	|	ИЗ
	|		ЗадачиЗапланировано КАК ЗадачиЗапланировано
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстатокПоДочернимЗадачам.Работа,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		ОстатокПоДочернимЗадачам.Остаток
	|	ИЗ
	|		ОстатокПоДочернимЗадачам КАК ОстатокПоДочернимЗадачам) КАК ВложенныйЗапрос
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|	ПО ЗадачиПроцесса.Ссылка = ВложенныйЗапрос.Работа
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Работа";
	
	Запрос.УстановитьПараметр("ЗадачиКПолучениюДанных", ЗадачиКПолучениюДанных);
	Запрос.УстановитьПараметр("НачалоПрошлогоПериода",  ПараметрыПолучения.ДатаНачалаПредыдущегоПериода);
	Запрос.УстановитьПараметр("КонецПрошлогоПериода",   КонецДня(ПараметрыПолучения.ДатаОкончанияПредыдущегоПериода));
	Запрос.УстановитьПараметр("НачалоТекущегоПериода",  ПараметрыПолучения.ДатаНачалаТекущегоПериода);
	Запрос.УстановитьПараметр("КонецТекущегоПериода",   КонецДня(ПараметрыПолучения.ДатаОкончанияТекущегоПериода));
	Запрос.УстановитьПараметр("РодительскийПлан",       ПараметрыПолучения.ВидПланаЗанятости);
	Запрос.УстановитьПараметр("ВидПланируемогоРесурса", ПараметрыПолучения.ВидПланируемогоРесурса);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить(); 
	
КонецФункции

#КонецОбласти

#Область ОтладочныеМетоды

// Выполняет запрос и выгружает результат в таблицу значений
//
// Параметры:
//  ТекстЗапроса             - Строка                  - текст выполняемого запроса
//  ПараметрыЗапроса         - Структура               - в которой ключ имя параметра, а значение содержит значение параметра
//  МенеджерВременныхТаблиц  - МенеджерВременныхТаблиц - 
//
// Возвращаемое значение:
//   ТаблицаЗначений   - выгруженный в таблицу значений результат выполнения запроса.
//
Функция РезультатВыгрузкиЗапросаТаблицуЗначений(ТекстЗапроса, ПараметрыЗапроса = Неопределено, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Для Каждого Параметр Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выполняет запрос и получает содержимое требуемой временной таблицы запроса
//
// Параметры:
//  МенеджерВременныхТаблицИлиЗапрос - Запрос, МенеджерВременныхТаблиц - запрос, в котором находится временная таблица
//  ИмяВременнойТаблицы              - Строка                          - имя временной таблицы, данные которой будут получены
//
// Возвращаемое значение:
//   ТаблицаЗначений   - содержимое временной таблицы запроса.
//
Функция СодержимоеВременнойТаблицыЗапроса(МенеджерВременныхТаблицИлиЗапрос, ИмяВременнойТаблицы) Экспорт
	
	ЗакрытьМенеджерВременныхТаблиц = Ложь;
	
	Если ТипЗнч(МенеджерВременныхТаблицИлиЗапрос) = Тип("Запрос") Тогда
		Если МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ЗакрытьМенеджерВременныхТаблиц = Истина;
			МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Иначе
			МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц;
		КонецЕсли;
		МенеджерВременныхТаблицИлиЗапрос.Выполнить();
	Иначе
		МенеджерВременныхТаблиц = МенеджерВременныхТаблицИлиЗапрос;
	КонецЕсли; 
	
	ДанныеТаблицы = РезультатВыгрузкиЗапросаТаблицуЗначений("ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы,, МенеджерВременныхТаблиц);
	
	Если ЗакрытьМенеджерВременныхТаблиц Тогда
		МенеджерВременныхТаблиц.Закрыть();
		МенеджерВременныхТаблицИлиЗапрос.МенеджерВременныхТаблиц = Неопределено;
	КонецЕсли; 
	
	Возврат ДанныеТаблицы;
	
КонецФункции

#КонецОбласти

#Область СогласующиеПоПредметам

Процедура ОтобразитьИнформациюПоСогласующимВФорме(Форма, Предмет, ИмяГруппыФормы) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов") Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементГруппаФормы = Форма.Элементы.Найти(ИмяГруппыФормы);

	Если ЭлементГруппаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСогласующихПоПредмету = ДанныеСогласующихПоПредмету(Предмет);
	
	Если ДанныеСогласующихПоПредмету.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РеквизитыСогласованияСозданы(Форма) Тогда
		
		ДобавитьРеквизитыФормыСогласующие(Форма, ДанныеСогласующихПоПредмету);
		СоздатьЭлементыФормыСогласующие(Форма, ЭлементГруппаФормы, ДанныеСогласующихПоПредмету);
		
	КонецЕсли;
	
	Форма.СогласующиеПоПредмету.Загрузить(ДанныеСогласующихПоПредмету);
	Форма.АдресСогласующиеПоПредмету = ПоместитьВоВременноеХранилище(ДанныеСогласующихПоПредмету, Форма.УникальныйИдентификатор);
	ВывестиИнформациюСогласующихПоПредмету(Форма);
	
КонецПроцедуры

Функция РеквизитыСогласованияСозданы(Форма)

	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = "СогласующиеПоПредмету" Тогда
			
			Возврат  Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Процедура СоздатьЭлементыФормыСогласующие(Форма, ЭлементГруппаФормы, ДанныеСогласующихПоПредмету)
	
	Если ДанныеСогласующихПоПредмету.Количество() = 1 Тогда
		
		ЭлементСогласующийРесурс = Форма.Элементы.Добавить("СогласующийРесурс", Тип("ПолеФормы"), ЭлементГруппаФормы);
		
		ЭлементСогласующийРесурс.ПутьКДанным              = "СогласующийРесурс";
		ЭлементСогласующийРесурс.Вид                      = ВидПоляФормы.ПолеВвода;
		ЭлементСогласующийРесурс.Ширина                   = 28;
		ЭлементСогласующийРесурс.РастягиватьПоГоризонтали = Ложь;
		ЭлементСогласующийРесурс.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ЭлементСогласующийРесурс.Заголовок                = СтрШаблон(НСтр("ru = 'Согласующий ресурс ""%1""'"), ДанныеСогласующихПоПредмету[0].Наименование);
		
		ЭлементСогласующийРесурс.УстановитьДействие("ПриИзменении", "Подключаемый_СогласующийРесурсПриИзменении");
		
		ЭлементСогласующийРесурс.ТолькоПросмотр = Форма.ТолькоПросмотр
		                                          Или Не ПравоИзмененияЗадачБезКонтроля();
		
	Иначе
		
		ЭлементПредставлениеСогласующие = Форма.Элементы.Добавить("ПредставлениеСогласующиеПоПредмету", Тип("ПолеФормы"), ЭлементГруппаФормы);
	
		ЭлементПредставлениеСогласующие.ПутьКДанным        = "ПредставлениеСогласующиеПоПредмету";
		ЭлементПредставлениеСогласующие.Вид                = ВидПоляФормы.ПолеНадписи;
		ЭлементПредставлениеСогласующие.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
		ЭлементПредставлениеСогласующие.УстановитьДействие("ОбработкаНавигационнойСсылки","Подключаемый_ОбработкаНавигационнойСсылкиСогласующиеРесурс");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормыСогласующие(Форма, ДанныеСогласующихПоПредмету)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	РеквизитТаблица = Новый РеквизитФормы("СогласующиеПоПредмету" ,Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблица);
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СогласуемыйРесурс", Новый ОписаниеТипов("СправочникСсылка.ВидыСогласуемыхРесурсов"), "СогласующиеПоПредмету"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Согласующий", Новый ОписаниеТипов("СправочникСсылка.Пользователи"), "СогласующиеПоПредмету"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("АдресСогласующиеПоПредмету", ОбщегоНазначения.ОписаниеТипаСтрока(150)));
	
	Если ДанныеСогласующихПоПредмету.Количество() = 1 Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СогласующийРесурс", Новый ОписаниеТипов("СправочникСсылка.Пользователи")));
	Иначе
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПредставлениеСогласующиеПоПредмету", Новый ОписаниеТипов("ФорматированнаяСтрока")));
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ВывестиИнформациюСогласующихПоПредмету(Форма)
	
	Если Форма.СогласующиеПоПредмету.Количество() = 1 Тогда
		
		Форма.СогласующийРесурс = Форма.СогласующиеПоПредмету[0].Согласующий;
		
	Иначе
		
		КоличествоСогласуемыхРесурсов = Форма.СогласующиеПоПредмету.Количество();
		КоличествоСогласующих = 0;
		
		Для Каждого СтрокаТаблицы Из Форма.СогласующиеПоПредмету Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Согласующий) Тогда
				КоличествоСогласующих = КоличествоСогласующих + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСогласующих = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Согласующие по ресурсам задач не заданы'");
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Указаны согласующие по ресурсам: %1 из %2.'"), КоличествоСогласующих, КоличествоСогласуемыхРесурсов);
		КонецЕсли;
		
		Форма.ПредставлениеСогласующиеПоПредмету = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(ТекстСообщения, "ОткрытьФормуСогласующиеПоПредмету");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеСогласующихРесурсыПредмета(Форма, Предмет) Экспорт
	
	Если РеквизитыСогласованияСозданы(Форма) Тогда
		РегистрыСведений.СогласующиеПоПредметам.ЗаписатьНаборПоПредмету(Предмет, Форма.СогласующиеПоПредмету);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеСогласующихРесурсыПоПредмету(Форма) Экспорт
	
	Форма.СогласующиеПоПредмету.Загрузить(ПолучитьИзВременногоХранилища(Форма.АдресСогласующиеПоПредмету));
	Форма.Модифицированность = Истина;
	ВывестиИнформациюСогласующихПоПредмету(Форма);
	
КонецПроцедуры

Функция ДанныеСогласующихПоПредмету(Предмет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыСогласуемыхРесурсов.Ссылка КАК СогласуемыйРесурс,
	|	ВидыСогласуемыхРесурсов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТаблицаСогласуемыхРесурсов
	|ИЗ
	|	Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|ГДЕ
	|	НЕ ВидыСогласуемыхРесурсов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСогласуемыхРесурсов.СогласуемыйРесурс КАК СогласуемыйРесурс,
	|	ЕСТЬNULL(СогласующиеПоПредметам.Согласующий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Согласующий,
	|	ТаблицаСогласуемыхРесурсов.Наименование КАК Наименование
	|ИЗ
	|	ТаблицаСогласуемыхРесурсов КАК ТаблицаСогласуемыхРесурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО ТаблицаСогласуемыхРесурсов.СогласуемыйРесурс = СогласующиеПоПредметам.СогласуемыйРесурс
	|			И (СогласующиеПоПредметам.Предмет = &Предмет)";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область Перетаскивание

Функция РезультатИзмененияРодителяУМассиваЗадач(МассивЗадачКИзменениюРодителя, НоваяЗадачРодитель) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоКИзменению",       0);
	Результат.Вставить("КоличествоИзменено",         0);
	Результат.Вставить("ИнформацияОбИзмененииЗадач", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.Родитель КАК ЗадачаКИзменниюРодителя,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ИерархияЗадачПроцесса.ЗадачаПроцесса = &НоваяЗадачРодитель
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ)                     КАК НовыйРодительЯвляетсяДочернейЗадачей
	|ПОМЕСТИТЬ ЗадачиВозможностьИзменения
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель В (&МассивЗадач)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИерархияЗадачПроцесса.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиВозможностьИзменения.ЗадачаКИзменниюРодителя КАК Ссылка,
	|	ЗадачиПроцесса.ПометкаУдаления                     КАК ПометкаУдаления,
	|	ЗадачиПроцесса.Родитель                            КАК Родитель,
	|	ЗадачиПроцесса.ЗадачаШаблона                       КАК ЗадачаШаблона,
	|	ЗадачиПроцесса.Предмет                             КАК Предмет,
	|	ЗадачиПроцесса.Статус                              КАК Статус
	|ИЗ
	|	ЗадачиВозможностьИзменения КАК ЗадачиВозможностьИзменения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиВозможностьИзменения.ЗадачаКИзменниюРодителя = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	НЕ ЗадачиВозможностьИзменения.НовыйРодительЯвляетсяДочернейЗадачей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка          КАК Ссылка,
	|	ЗадачиПроцесса.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗадачиПроцесса.Предмет         КАК Предмет,
	|	ЗадачиПроцесса.Статус          КАК Статус
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &НоваяЗадачРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ЗадачиВозможностьИзменения.ЗадачаКИзменниюРодителя              КАК Ссылка,
	|	ЗадачиВозможностьИзменения.НовыйРодительЯвляетсяДочернейЗадачей КАК НовыйРодительЯвляетсяДочернейЗадачей
	|ИЗ
	|	ЗадачиВозможностьИзменения КАК ЗадачиВозможностьИзменения
	|ГДЕ
	|	ЗадачиВозможностьИзменения.НовыйРодительЯвляетсяДочернейЗадачей";
	
	Запрос.УстановитьПараметр("МассивЗадач",        МассивЗадачКИзменениюРодителя);
	Запрос.УстановитьПараметр("НоваяЗадачРодитель", НоваяЗадачРодитель);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Истина);

	ВыборкаЗадачиКИзмениюРодителя               = РезультатЗапроса[1].Выбрать();
	ВыборкаРеквизитыНовогоРодителя              = РезультатЗапроса[2].Выбрать();
	ВыборкаНовыйРодительЯвляетсяДочернейЗадачей = РезультатЗапроса[3].Выбрать();
	
	ВыборкаРеквизитыНовогоРодителя.Следующий();
	
	СтатусНовойЗадачиРодителя             = ВыборкаРеквизитыНовогоРодителя.Статус;
	НоваяЗадачаРодительПомеченаНаУдаление = ВыборкаРеквизитыНовогоРодителя.ПометкаУдаления;
	ПредметНовойЗадачиРодителя            = ВыборкаРеквизитыНовогоРодителя.Предмет;
	
	Пока ВыборкаЗадачиКИзмениюРодителя.Следующий() Цикл
		
		Результат.КоличествоКИзменению = Результат.КоличествоКИзменению + 1;
		
		Если ВыборкаЗадачиКИзмениюРодителя.Родитель = НоваяЗадачРодитель Тогда
			
			ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
			ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
			ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = НСтр("ru = 'Выбранная новая родительская задача уже являтеся родителем данной задачи'");
			Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
			Продолжить;
			
		КонецЕсли;
		
		Если НоваяЗадачаРодительПомеченаНаУдаление
			И Не ВыборкаЗадачиКИзмениюРодителя.ПометкаУдаления Тогда
			
			ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
			ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
			ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = НСтр("ru = 'Выбранная новая родительская задача помечена на удаление, а данная задача нет'");
			Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
			Продолжить;
			
		КонецЕсли;
		
		Если ВыборкаЗадачиКИзмениюРодителя.Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
			
			Если СтатусНовойЗадачиРодителя = Перечисления.СтатусыЗадачПроцессов.Выполнена
				Или СтатусНовойЗадачиРодителя = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
				
				ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
				ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
				ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = СтрШаблон(НСтр("ru = 'Выбранная новая родительская задача в статусе ""%1"", а данная задача в статусе ""%2""'"), 
				                                                       СтатусНовойЗадачиРодителя, 
				                                                       ВыборкаЗадачиКИзмениюРодителя.Статус);
				Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
				Продолжить;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаЗадачиКИзмениюРодителя.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
			
			Если СтатусНовойЗадачиРодителя = Перечисления.СтатусыЗадачПроцессов.Выполнена
				Или СтатусНовойЗадачиРодителя = Перечисления.СтатусыЗадачПроцессов.Отменена
				Или СтатусНовойЗадачиРодителя = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
				
				ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
				ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
				ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = СтрШаблон(НСтр("ru = 'Выбранная новая родительская задача в статусе ""%1"", а данная задача в статусе ""%2""'"), 
				                                                       СтатусНовойЗадачиРодителя, 
				                                                       ВыборкаЗадачиКИзмениюРодителя.Статус);
				Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
				Продолжить;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаЗадачиКИзмениюРодителя.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			
			Если СтатусНовойЗадачиРодителя = Перечисления.СтатусыЗадачПроцессов.Отменена
				Или СтатусНовойЗадачиРодителя = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
				
				ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
				ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
				ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = СтрШаблон(НСтр("ru = 'Выбранная новая родительская задача в статусе ""%1"", а данная задача в статусе ""%2""'"), 
				                                                       СтатусНовойЗадачиРодителя, 
				                                                       ВыборкаЗадачиКИзмениюРодителя.Статус);
				Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
				Продолжить;
			
			КонецЕсли;
			
		КонецЕсли;
		
		ПравоИзмененияЗадачБезКонтроля   = ЗадачиПроцессов.ПравоИзмененияЗадачБезКонтроля(ВыборкаЗадачиКИзмениюРодителя.Ссылка, ВыборкаЗадачиКИзмениюРодителя.Предмет);
		
		Если ЗначениеЗаполнено(ВыборкаЗадачиКИзмениюРодителя.ЗадачаШаблона)
			И Не ПравоИзмененияЗадачБезКонтроля Тогда
			
			ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
			ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
			ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = СтрШаблон(НСтр("ru = 'У вас нет права изменять родителя задачи по шаблону. Данная операция доступна администратору проекта'"), 
			                                                       СтатусНовойЗадачиРодителя, 
			                                                       ВыборкаЗадачиКИзмениюРодителя.Статус);
			Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
			Продолжить;
			
		КонецЕсли;
		
		НачатьТранзакцию();
	
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗадачиПроцесса");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаЗадачиКИзмениюРодителя.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
			ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
			ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось заблокировать задачу ""%1"" -: %2'"),
			                                                       ВыборкаЗадачиКИзмениюРодителя.Ссылка,
			                                                       ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
			
		КонецПопытки;
		
		ЗадачаОбъект = ВыборкаЗадачиКИзмениюРодителя.Ссылка.ПолучитьОбъект();
		ЗадачаОбъект.Родитель = НоваяЗадачРодитель;
		ЗадачаОбъект.Предмет  = ПредметНовойЗадачиРодителя;
		
		ЗадачаОбъект.Записать();
		
		ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
		ДанныеИзмененияРодителяУЗадачи.Задача             = ВыборкаЗадачиКИзмениюРодителя.Ссылка;
		ДанныеИзмененияРодителяУЗадачи.ИзменениеВыполнено = Истина;
		Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
		
		Результат.КоличествоИзменено = Результат.КоличествоИзменено + 1;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	Пока ВыборкаНовыйРодительЯвляетсяДочернейЗадачей.Следующий() Цикл
		
		Результат.КоличествоКИзменению = Результат.КоличествоКИзменению + 1;
		
		ДанныеИзмененияРодителяУЗадачи = НовыйДанныеИзмененияРодителяУЗадачи();
		ДанныеИзмененияРодителяУЗадачи.Задача      = ВыборкаНовыйРодительЯвляетсяДочернейЗадачей.Ссылка;
		ДанныеИзмененияРодителяУЗадачи.ТекстОшибки = СтрШаблон(НСтр("ru = 'Выбранная новая родительская задача является дочерней для данной.'"));
		Результат.ИнформацияОбИзмененииЗадач.Добавить(ДанныеИзмененияРодителяУЗадачи);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеИзмененияРодителяУЗадачи()
	
	ДанныеИзмененияРодителяУЗадачи = Новый Структура;
	
	ДанныеИзмененияРодителяУЗадачи.Вставить("Задача",             Неопределено);
	ДанныеИзмененияРодителяУЗадачи.Вставить("ИзменениеВыполнено", Ложь);
	ДанныеИзмененияРодителяУЗадачи.Вставить("ТекстОшибки",        "");
	
	Возврат ДанныеИзмененияРодителяУЗадачи;
	
КонецФункции

#КонецОбласти

#Область ЗоныЗадач

Функция РасчитаннаяЗонаЗадачи(ДанныеДляРасчета) Экспорт
	
	Если ДанныеДляРасчета.ПометкаУдаления
		Или ДанныеДляРасчета.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
		Или ДанныеДляРасчета.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена
		Или ДанныеДляРасчета.Статус = Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка() Тогда
		
		Возврат Перечисления.ЗоныЗадач.ПустаяСсылка();
		
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если ДанныеДляРасчета.Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
		
		Если ДанныеДляРасчета.ПлановаяДлительность = Дата(1,1,1) Тогда
			Возврат Перечисления.ЗоныЗадач.Красная;
		КонецЕсли;
			
		ПлановаяДатаНачала =  ДанныеДляРасчета.КрайняяДатаОкончания - 86400 * ДанныеДляРасчета.ПлановаяДлительность;
		
		Если ТекущаяДата >= ПлановаяДатаНачала Тогда
			
			Возврат Перечисления.ЗоныЗадач.Красная;
			
		ИначеЕсли (ТекущаяДата + 86400) >= ПлановаяДатаНачала Тогда
			
			Возврат Перечисления.ЗоныЗадач.Желтая;
			
		Иначе
			
			Возврат Перечисления.ЗоныЗадач.Зеленая;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДляРасчета.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
		
		Если ТекущаяДата >= ДанныеДляРасчета.КрайняяДатаОкончания Тогда
			
			Возврат Перечисления.ЗоныЗадач.Красная;
			
		ИначеЕсли (ТекущаяДата + 86400) >= ДанныеДляРасчета.КрайняяДатаОкончания Тогда
			
			Возврат Перечисления.ЗоныЗадач.Желтая;
			
		Иначе
			
			Возврат Перечисления.ЗоныЗадач.Зеленая;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура РасчетЗонАктивныхЗадач() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РасчетЗонЗадач);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                                                 КАК ЗадачаПроцесса,
	|	ЗадачиПроцесса.ПометкаУдаления                                                        КАК ПометкаУдаления,
	|	ЗадачиПроцесса.ПлановаяДлительность                                                   КАК ПлановаяДлительность,
	|	ЗадачиПроцесса.КрайняяДатаОкончания                                                   КАК КрайняяДатаОкончания,
	|	ЗадачиПроцесса.Статус                                                                 КАК Статус,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.Зона, ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.ПустаяСсылка)) КАК Зона
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяЗонаЗадачи = ЗадачиПроцессов.РасчитаннаяЗонаЗадачи(Выборка);
		Если НоваяЗонаЗадачи <> Выборка.Зона Тогда
			РегистрыСведений.СостоянияЗадачПроцессов.ЗаписатьНовуюЗонуЗадачи(Выборка.ЗадачаПроцесса, НоваяЗонаЗадачи);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцентВыполнения

Функция НовыйДанныеВыводаПроцентаВыполненияПоПредмету()
	
	ДанныеВывода = Новый Структура;
	ДанныеВывода.Вставить("ЕстьНастройкаПоВидуРесурса", Ложь);
	ДанныеВывода.Вставить("ВыполненоПлан",              0);
	ДанныеВывода.Вставить("План",                       0);
	ДанныеВывода.Вставить("ЕдиницаИзмерения",           "");
	
	Возврат ДанныеВывода;

КонецФункции

Функция ДанныеПоПроцентуВыполненияПредмета(Предмет)
	
	ДанныеВывода = НовыйДанныеВыводаПроцентаВыполненияПоПредмету();
	
	ВидСогласуемогоРесурсаНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РесурсПоКоторомуОтображаетсяХодСогласования",
	                                                                                   "НастройкиПользователя",
	                                                                                   Неопределено);
	
	Если Не ЗначениеЗаполнено(ВидСогласуемогоРесурсаНастройки)
		Или ТипЗнч(ВидСогласуемогоРесурсаНастройки) <> Тип("СправочникСсылка.ВидыСогласуемыхРесурсов") Тогда
		
		ВидРесурсаПоУмолчанию = Справочники.ВидыСогласуемыхРесурсов.ВидРесурсаПоУмолчанию();
		
		Если ВидРесурсаПоУмолчанию <> Неопределено Тогда
			ВидСогласуемогоРесурсаНастройки = ВидРесурсаПоУмолчанию;
		Иначе
			Возврат ДанныеВывода;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеВывода.ЕстьНастройкаПоВидуРесурса = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЗадачиВерхнегоУровня
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И ИерархияЗадачПроцесса.Родитель = ЗадачиПроцесса.Ссылка
	|			И (ИерархияЗадачПроцесса.Родитель = ИерархияЗадачПроцесса.ЗадачаПроцесса)
	|			И (ИерархияЗадачПроцесса.Уровень = 0)
	|			И (ЗадачиПроцесса.Предмет = &Предмет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|				ТОГДА ИтогиСогласованияЗадачРесурсов.Запланировано
	|			ИНАЧЕ 0
	|		КОНЕЦ + ИтогиСогласованияЗадачРесурсов.ВыполненоСогласованоВДочерних + ИтогиСогласованияЗадачРесурсов.ВыполненоНаСогласованииВДочерних) КАК ВыполненоПлан,
	|	СУММА(ИтогиСогласованияЗадачРесурсов.Запланировано + ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних)                                 КАК План,
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения                                                                                                    КАК ЕдиницаИзмерения
	|ИЗ
	|	ЗадачиВерхнегоУровня КАК ЗадачиВерхнегоУровня
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО ЗадачиВерхнегоУровня.Ссылка = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиВерхнегоУровня.Ссылка = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|		ПО (ИтогиСогласованияЗадачРесурсов.ВидРесурса = ВидыСогласуемыхРесурсов.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Предмет",Предмет );
	Запрос.УстановитьПараметр("ВидРесурса",ВидСогласуемогоРесурсаНастройки );
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеВывода, Выборка);
	КонецЕсли;
	
	Возврат ДанныеВывода;
	
КонецФункции

#КонецОбласти

#Область СозданиеЗадачПоШаблону

Функция СогласующиеРесурсовШаблона(Предмет, ШаблонПроцесса, ИсполнительЗадач)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ЗадачиШаблонаПроцесса.Исполнитель = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА &ИсполнительЗадач
	|		ИНАЧЕ ЗадачиШаблонаПроцесса.Исполнитель
	|	КОНЕЦ КАК Исполнитель
	|ПОМЕСТИТЬ ИсполнителиЗадач
	|ИЗ
	|	Справочник.ЗадачиШаблонаПроцесса КАК ЗадачиШаблонаПроцесса
	|ГДЕ
	|	НЕ ЗадачиШаблонаПроцесса.ПометкаУдаления
	|	И ЗадачиШаблонаПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|	И ЗадачиШаблонаПроцесса.Владелец = &ШаблонПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнителиЗадач.Исполнитель                             КАК Исполнитель,
	|	ШаблоныПроцессаВидыСогласуемыхРесурсов.СогласуемыйРесурс КАК СогласуемыйРесурс
	|ПОМЕСТИТЬ ИсполнителиРесурсы
	|ИЗ
	|	Справочник.ШаблоныПроцесса.ВидыСогласуемыхРесурсов КАК ШаблоныПроцессаВидыСогласуемыхРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсполнителиЗадач КАК ИсполнителиЗадач
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ШаблоныПроцессаВидыСогласуемыхРесурсов.Ссылка = &ШаблонПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсполнителиРесурсы.Исполнитель                                                          КАК Исполнитель,
	|	ИсполнителиРесурсы.СогласуемыйРесурс                                                    КАК СогласуемыйРесурс,
	|	ЕСТЬNULL(СогласующиеПоПредметам.Согласующий, НастройкиСогласованияРесурсов.Согласующий) КАК Согласующий
	|ИЗ
	|	ИсполнителиРесурсы КАК ИсполнителиРесурсы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСогласованияРесурсов КАК НастройкиСогласованияРесурсов
	|		ПО ИсполнителиРесурсы.СогласуемыйРесурс = НастройкиСогласованияРесурсов.ВидСогласуемогоРесурса
	|			И ИсполнителиРесурсы.Исполнитель = НастройкиСогласованияРесурсов.Пользователь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СогласующиеПоПредметам КАК СогласующиеПоПредметам
	|		ПО (СогласующиеПоПредметам.СогласуемыйРесурс = ИсполнителиРесурсы.СогласуемыйРесурс)
	|			И (СогласующиеПоПредметам.Предмет = &Предмет)
	|ГДЕ
	|	(НастройкиСогласованияРесурсов.Согласующий ЕСТЬ НЕ NULL 
	|			ИЛИ СогласующиеПоПредметам.Согласующий ЕСТЬ НЕ NULL )";
	
	Запрос.УстановитьПараметр("ШаблонПроцесса",   ШаблонПроцесса);
	Запрос.УстановитьПараметр("ИсполнительЗадач", ИсполнительЗадач);
	Запрос.УстановитьПараметр("Предмет",          Предмет);
	
	СогласующиеРесурсовШаблона = Запрос.Выполнить().Выгрузить();
	
	СогласующиеРесурсовШаблона.Индексы.Добавить("Исполнитель");
	СогласующиеРесурсовШаблона.Индексы.Добавить("СогласуемыйРесурс");
	
	Возврат СогласующиеРесурсовШаблона;

КонецФункции

Процедура СоздатьЗадачиПроцесса(СтрокаДерева, СоответствиеЗадачЗадачамШаблона, ПараметрыСозданияЗадач)
	
	МассивЗадачШаблонаКСозданию = Новый Массив;
	СозданныеЗадачи             = Новый Соответствие;
	Для Каждого СтрокаЗадачиШаблона Из СтрокаДерева.Строки Цикл
		МассивЗадачШаблонаКСозданию.Добавить(СтрокаЗадачиШаблона.ЗадачаШаблона);
	КонецЦикла;
	
	ОчиститьПерекрестныеПредшествующиеЗадачи(СтрокаДерева, МассивЗадачШаблонаКСозданию);
	
	Пока СозданныеЗадачи.Количество() < МассивЗадачШаблонаКСозданию.Количество() Цикл
		Для Каждого СтрокаЗадачиШаблона Из СтрокаДерева.Строки Цикл
			
			Если СозданныеЗадачи.Получить(СтрокаЗадачиШаблона.ЗадачаШаблона) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеПредшественникиСозданы = Истина;
			
			Для Каждого ПредшествующаяЗадача Из СтрокаЗадачиШаблона.ПредшествующиеЗадачи Цикл
				Если МассивЗадачШаблонаКСозданию.Найти(ПредшествующаяЗадача.ЗадачаШаблона) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СозданнаяПредшествующаяЗадача = СозданныеЗадачи.Получить(ПредшествующаяЗадача.ЗадачаШаблона);
				Если СозданнаяПредшествующаяЗадача = Неопределено Тогда
					ВсеПредшественникиСозданы = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВсеПредшественникиСозданы Тогда
				Если Не ЗначениеЗаполнено(СтрокаЗадачиШаблона.Родитель.ЗадачаШаблона) Тогда
					ПараметрыСозданияЗадач.Вставить("СоответствиеРесурсСогласующий",Новый Соответствие);
				КонецЕсли;
				СоздатьЗадачуПоЗадачеШаблона(СтрокаЗадачиШаблона, СтрокаДерева, СозданныеЗадачи, СоответствиеЗадачЗадачамШаблона, ПараметрыСозданияЗадач);
				СоздатьЗадачиПроцесса(СтрокаЗадачиШаблона, СоответствиеЗадачЗадачамШаблона, ПараметрыСозданияЗадач)
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЗадачуПоЗадачеШаблона(СтрокаЗадачиШаблона, СтрокаРодитель, СозданныеЗадачи, СоответствиеЗадачЗадачамШаблона, ПараметрыСозданияЗадач)

	СоздаваемаяЗадача = Справочники.ЗадачиПроцесса.СоздатьЭлемент();
	СсылкаНаЗадачу = СоответствиеЗадачЗадачамШаблона.Получить(СтрокаЗадачиШаблона.ЗадачаШаблона);
	Если СсылкаНаЗадачу <> Неопределено Тогда
		СоздаваемаяЗадача.УстановитьСсылкуНового(СсылкаНаЗадачу);
	КонецЕсли;
	
	СоздаваемаяЗадача.Предмет               = ПараметрыСозданияЗадач.Предмет;
	СоздаваемаяЗадача.Наименование          = СтрокаЗадачиШаблона.Наименование; 
	СоздаваемаяЗадача.ПлановаяДлительность  = СтрокаЗадачиШаблона.ПлановаяДлительность;
	СоздаваемаяЗадача.Исполнитель           = ?(ЗначениеЗаполнено(СтрокаЗадачиШаблона.Исполнитель), СтрокаЗадачиШаблона.Исполнитель, ПараметрыСозданияЗадач.Исполнитель);
	СоздаваемаяЗадача.Контролирующий        = СтрокаЗадачиШаблона.Контролирующий;
	СоздаваемаяЗадача.Описание              = Новый ХранилищеЗначения(СтрокаЗадачиШаблона.Описание);
	СоздаваемаяЗадача.ВидДеятельности       = СтрокаЗадачиШаблона.ВидДеятельности;
	СоздаваемаяЗадача.Статус                = Перечисления.СтатусыЗадачПроцессов.Запланирована;
	СоздаваемаяЗадача.ЗадачаШаблона         = СтрокаЗадачиШаблона.ЗадачаШаблона;
	
	ЗадачаРодитель = СоответствиеЗадачЗадачамШаблона.Получить(СтрокаРодитель.ЗадачаШаблона);
	Если ЗадачаРодитель <> Неопределено Тогда
		СоздаваемаяЗадача.Родитель    = ЗадачаРодитель;
	КонецЕсли;
	
	Для Каждого ПредшествующаяЗадача Из СтрокаЗадачиШаблона.ПредшествующиеЗадачи Цикл
		НоваяПредшествующаяЗадача = СоздаваемаяЗадача.ПредшествующиеЗадачи.Добавить();
		СсылкаНаПредшествуюшуюЗадачу = СоответствиеЗадачЗадачамШаблона.Получить(ПредшествующаяЗадача.ЗадачаШаблона);
		Если СсылкаНаПредшествуюшуюЗадачу = Неопределено Тогда
			СсылкаНаПредшествуюшуюЗадачу = Справочники.ЗадачиПроцесса.ПолучитьСсылку(Новый УникальныйИдентификатор);
			СоответствиеЗадачЗадачамШаблона.Вставить(ПредшествующаяЗадача.ЗадачаШаблона, СсылкаНаПредшествуюшуюЗадачу);
		КонецЕсли;
		НоваяПредшествующаяЗадача.ПредшествующаяЗадача = СсылкаНаПредшествуюшуюЗадачу;
	КонецЦикла;
	
	СоздаваемаяЗадача.ДополнительныеРеквизиты.Загрузить(СтрокаЗадачиШаблона.ДополнительныеРеквизиты);
	
	ТекущаяДата         = ТекущаяДатаСеанса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	НоваяСтрокаПротоколаВзаимодействий = СоздаваемаяЗадача.ПротоколВзаимодействия.Добавить();
	НоваяСтрокаПротоколаВзаимодействий.Дата   = ТекущаяДата;
	НоваяСтрокаПротоколаВзаимодействий.Автор  = ТекущийПользователь;
	НоваяСтрокаПротоколаВзаимодействий.Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована;
	
	СоздаваемаяЗадача.ДатаПорученияПоЗадаче =ТекущаяДата;
	
	СоздаваемаяЗадача.ДополнительныеСвойства.Вставить("НеВыполнятьРасчет", Истина);
	СоздаваемаяЗадача.Записать();
	
	Для Каждого СтрокаПланируемыеРесурсы Из СтрокаЗадачиШаблона.ПланируемыеРесурсы Цикл
		
		СогласующийРесурсаПоЗадачеШаблона = ПараметрыСозданияЗадач.СоответствиеРесурсСогласующий.Получить(СтрокаПланируемыеРесурсы.Ресурс);
		
		Если СогласующийРесурсаПоЗадачеШаблона = Неопределено Тогда
		
			СогласующийРесурсаПоЗадачеШаблона = СогласующийРесурсаПоЗадачеШаблона(СтрокаЗадачиШаблона,
			                                                                      СтрокаРодитель,
			                                                                      ПараметрыСозданияЗадач,
			                                                                      СтрокаПланируемыеРесурсы.Ресурс);
			
			ПараметрыСозданияЗадач.СоответствиеРесурсСогласующий.Вставить(СтрокаПланируемыеРесурсы.Ресурс, СогласующийРесурсаПоЗадачеШаблона);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СогласующийРесурсаПоЗадачеШаблона) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача              = СоздаваемаяЗадача.Ссылка;
		ПараметрыСогласования.Исполнитель         = СоздаваемаяЗадача.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс   = СтрокаПланируемыеРесурсы.Ресурс;
		ПараметрыСогласования.Количество          = СтрокаПланируемыеРесурсы.Планируется;
		ПараметрыСогласования.ТекущаяДата         = ТекущаяДата;
		ПараметрыСогласования.ТекущийПользователь = ТекущийПользователь;
		ПараметрыСогласования.Согласующий         = СогласующийРесурсаПоЗадачеШаблона;
		
		РегистрыСведений.ПротоколСогласованияРесурсов.ЗапланироватьИСогласоватьРесурсВЗадаче(ПараметрыСогласования);
		
	КонецЦикла;
	
	СозданныеЗадачи.Вставить(СтрокаЗадачиШаблона.ЗадачаШаблона, СоздаваемаяЗадача.Ссылка);
	Если СсылкаНаЗадачу = Неопределено Тогда
		СоответствиеЗадачЗадачамШаблона.Вставить(СтрокаЗадачиШаблона.ЗадачаШаблона, СоздаваемаяЗадача.Ссылка);
	КонецЕсли;
	
	ЗаполнитьПриоритетДляСоздаваемойПоШаблонуЗадачи(СоздаваемаяЗадача.Ссылка,
	                                                СтрокаЗадачиШаблона.СдвигПриоритета,
	                                                ПараметрыСозданияЗадач.ПриоритетыПроекта,
	                                                ПараметрыСозданияЗадач.ПриоритетПредмета)

КонецПроцедуры

Процедура ЗаполнитьПриоритетДляСоздаваемойПоШаблонуЗадачи(Работа, СдвигПриоритета, СдвигиПриоритетов, ПриоритетПредмета)
	
	Если ЗначениеЗаполнено(ПриоритетПредмета) Тогда
		
		Приоритет = СдвигиПриоритетов.Получить(СдвигПриоритета);
		Если Приоритет = Неопределено Тогда
			
			МассивПриоритетов = Новый Массив;
			Для Каждого ЭлементСоответствия Из СдвигиПриоритетов Цикл
				МассивПриоритетов.Добавить(ЭлементСоответствия.Значение);
			КонецЦикла;
			
			Если СдвигПриоритета < 0 Тогда
				Приоритет = МассивПриоритетов[0];
			ИначеЕсли СдвигПриоритета = 0 Тогда
				Приоритет = ПриоритетПредмета;
			Иначе
				Приоритет = МассивПриоритетов[МассивПриоритетов.Количество() -1];
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеЗаписиПриоритета           = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписиПриоритета.Работа    = Работа;
		ДанныеЗаписиПриоритета.Приоритет = Приоритет;
		
		РегистрыСведений.ПриоритетыРабот.ЗаписатьДанные(ДанныеЗаписиПриоритета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПерекрестныеПредшествующиеЗадачи(СтрокаДерева, МассивЗадачШаблонаКСозданию)

	Для Каждого СтрокаЗадачиШаблона Из СтрокаДерева.Строки Цикл
		
		Для Каждого ПредшествующаяЗадача Из СтрокаЗадачиШаблона.ПредшествующиеЗадачи Цикл
			
			Если МассивЗадачШаблонаКСозданию.Найти(ПредшествующаяЗадача.ЗадачаШаблона) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПредшествующейЗадачи          = СтрокаДерева.Строки.Найти(ПредшествующаяЗадача.ЗадачаШаблона ,"ЗадачаШаблона", Ложь);
			СтрокиСПерекрестнымПредшественником = СтрокаПредшествующейЗадачи.ПредшествующиеЗадачи.НайтиСтроки(Новый Структура("ЗадачаШаблона", СтрокаЗадачиШаблона.ЗадачаШаблона));
			Для Каждого СтрокаСПерекрестрымПредшественником Из СтрокиСПерекрестнымПредшественником Цикл
				СтрокаПредшествующейЗадачи.ПредшествующиеЗадачи.Удалить(СтрокаСПерекрестрымПредшественником);
			КонецЦикла;
			
		КонецЦикла
		
	КонецЦикла;

КонецПроцедуры

Функция СогласующийРесурсаПоЗадачеШаблона(СтрокаДерева, СтрокаРодитель, ПараметрыСозданияЗадач, Ресурс)
	
	Если Не ЗначениеЗаполнено(СтрокаРодитель.ЗадачаШаблона) Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Исполнитель", ?(ЗначениеЗаполнено(СтрокаДерева.Исполнитель),
		                                          СтрокаДерева.Исполнитель, 
		                                          ПараметрыСозданияЗадач.Исполнитель));
		ПараметрыПоиска.Вставить("СогласуемыйРесурс", Ресурс);
		
		НайденныеСтроки = ПараметрыСозданияЗадач.СогласующиеРесурсовШаблона.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Согласующий;
		Иначе
			Возврат Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(СтрокаРодитель.Исполнитель) Тогда
			Возврат СтрокаРодитель.Исполнитель;
		Иначе
			Возврат ПараметрыСозданияЗадач.Исполнитель;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекущаяЗадачаСРодительскими(Ссылка) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗадачаВерхнегоУровня", Справочники.ЗадачиПроцесса.ПустаяСсылка());
	СтруктураВозврата.Вставить("МассивРодительскихЗадач", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.Родитель КАК Родитель,
	|	ИерархияЗадачПроцесса.Уровень КАК Уровень
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса = &ТекущаяЗадача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень";
	
	Запрос.УстановитьПараметр("ТекущаяЗадача", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата.МассивРодительскихЗадач.Добавить(Выборка.Родитель);
		Если Выборка.Уровень = 0 Тогда
			СтруктураВозврата.ЗадачаВерхнегоУровня = Выборка.Родитель;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЗадачиСРодителямиПоМассивуЗадач(МассивЗадач) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЗадачиВерхнегоУровня", Справочники.ЗадачиПроцесса.ПустаяСсылка());
	СтруктураВозврата.Вставить("МассивРодительскихЗадач", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИерархияЗадачПроцесса.Родитель КАК Родитель
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса В(&МассивЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИерархияЗадачПроцесса.Родитель КАК Родитель
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса В(&МассивЗадач)
	|	И ИерархияЗадачПроцесса.Уровень = 0";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураВозврата.МассивРодительскихЗадач = Результат[0].Выгрузить().ВыгрузитьКолонку("Родитель");
	СтруктураВозврата.ЗадачиВерхнегоУровня    = Результат[1].Выгрузить().ВыгрузитьКолонку("Родитель");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ТекстЗапросаОбъединитьВсе() Экспорт
	
	Возврат "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
КонецФункции

Функция ФорматированнаяСтрокаСГиперссылкой(ТекстСтроки, ТекстГиперссылки, ВыводитьГиперссылку = Истина, ЦветТекста = Неопределено) Экспорт
	
	Если ЦветТекста = Неопределено Тогда
		ЦветТекста = ЦветаСтиля.ЦветГиперссылкиЗадачи;
	КонецЕсли;
	
	Если ВыводитьГиперссылку Тогда
		
		СформированнаяСтрока =  Новый ФорматированнаяСтрока(ТекстСтроки,
		                                                    ,
		                                                    ЦветТекста,
		                                                    ,
		                                                    ТекстГиперссылки);
	Иначе
		
		СформированнаяСтрока = Новый ФорматированнаяСтрока(ТекстСтроки, , ЦветТекста);
		
	КонецЕсли;

	Возврат СформированнаяСтрока;
	
КонецФункции

Функция ДатаПоКалендарюСОбратнымСдвигом(ДатаГрафика, ДатаСдвига, Календарь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КалендарныеГрафики.Год,
	|	МАКСИМУМ(КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода) КАК ДнейВГрафике
	|ПОМЕСТИТЬ ВТКоличествоДнейВГрафикеПоГодам
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.ДатаГрафика <= &ДатаГрафика
	|	И КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДеньВключенВГрафик
	|	И КалендарныеГрафики.Год <> ГОД(&ДатаГрафика)
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарныеГрафики.Год
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КалендарныеГрафики.Год,
	|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.Год = ГОД(&ДатаГрафика)
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныеГрафики.Год,
	|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода,
	|	КалендарныеГрафики.ДатаГрафика
	|ПОМЕСТИТЬ ДанныеРасчитываемойЗадачи
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДатаГрафика = &ДатаГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоличествоДнейВГрафикеПоГодам.Год,
	|	СУММА(ВТКоличествоДнейВГрафикеПоГодамПредшественники.ДнейВГрафике) КАК ДнейВГрафике
	|ПОМЕСТИТЬ ВТКоличествоДнейСУчетомПредыдущихГодов
	|ИЗ
	|	ВТКоличествоДнейВГрафикеПоГодам КАК ВТКоличествоДнейВГрафикеПоГодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоДнейВГрафикеПоГодам КАК ВТКоличествоДнейВГрафикеПоГодамПредшественники
	|		ПО ВТКоличествоДнейВГрафикеПоГодам.Год <= ВТКоличествоДнейВГрафикеПоГодамПредшественники.Год
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТКоличествоДнейВГрафикеПоГодам.Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТКоличествоДнейСУчетомПредыдущихГодов.Год) КАК Год
	|ПОМЕСТИТЬ ГодДаты
	|ИЗ
	|	ВТКоличествоДнейСУчетомПредыдущихГодов КАК ВТКоличествоДнейСУчетомПредыдущихГодов
	|ГДЕ
	|	ВТКоличествоДнейСУчетомПредыдущихГодов.ДнейВГрафике > &ДнейСдвига
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТКоличествоДнейСУчетомПредыдущихГодов.Год,
	|	ВТКоличествоДнейСУчетомПредыдущихГодов.ДнейВГрафике - &ДнейСдвига КАК ДнейСдвига
	|ПОМЕСТИТЬ ГодСдвиг
	|ИЗ
	|	ВТКоличествоДнейСУчетомПредыдущихГодов КАК ВТКоличествоДнейСУчетомПредыдущихГодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГодДаты КАК ГодДаты
	|		ПО ВТКоличествоДнейСУчетомПредыдущихГодов.Год = ГодДаты.Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныеГрафики.ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГодСдвиг КАК ГодСдвиг
	|		ПО КалендарныеГрафики.Год = ГодСдвиг.Год
	|			И КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода = ГодСдвиг.ДнейСдвига
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДеньВключенВГрафик";
	
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("ДнейСдвига", ДатаСдвига);
	Запрос.УстановитьПараметр("ДатаГрафика", ДатаГрафика);

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.ДатаГрафика;
	
	КонецЕсли;
	
	Возврат Дата(1,1,1);
	
КонецФункции

Процедура ОбработатьМассивИменСписков(МассивИменСписков)

	Если МассивИменСписков = Неопределено Тогда
		МассивИменСписков = Новый Массив;
		МассивИменСписков.Добавить("Список");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти