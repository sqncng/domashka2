#Область ПрограммныйИнтерфейс

//Получает проект объекта из его реквизитов или из реквизитов в структуре подчиненности владельцам
//
// Параметры:
//  Объект  - СправочникСсылка - Ссылка на объект, проект которого требуется определить
//
// Возвращаемое значение:
//  Проект - СправочникСсылка.Проекты - проект объекта
//
Функция ПроектОбъекта(Объект) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
		
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Владелец");
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ЭлементыСправки") Тогда
		
		ВладелецЭлемента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Владелец");
		
		Если ТипЗнч(ВладелецЭлемента) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭлемента.Владелец, "Владелец");
		Иначе
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭлемента, "Владелец");
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Объект) Тогда
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Владелец");
		Иначе
			Проект = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Проект;
	
КонецФункции

//Получает проект объекта из его реквизитов или из реквизитов в структуре подчиненности владельцам
//
// Параметры:
//  ИмяКласса - Строка - строка, определяющая имя класса объекта метаданных ("Справочники", "Документы" и т.д.)
//  Проект  - СправочникСсылка.Проекты - Ссылка на проект, для которого требуется получить группу.
//
// Возвращаемое значение:
//  Группа - СправочникСсылка.Объекты метаданных - группа справочника "ОбъектыМетаданных".
//
Функция ГруппаОбъектовМетаданных(ИмяКласса, Проект) Экспорт
	
	Возврат РаботаСОбъектамиМетаданных.ГруппаОбъектовМетаданных(ИмяКласса, Проект);
	
КонецФункции

Функция СписокШаблоновИнформационныхБазОшибки(Ошибка) Экспорт 

	СписокШаблонов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		
		СписокДоступныхРасширений = Новый Массив;
		СписокДоступныхРасширений.Добавить("dt");
		СписокДоступныхРасширений.Добавить("cf");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	НЕ Файлы.ПометкаУдаления
		|	И Файлы.ВладелецФайла = &Ошибка
		|	И Файлы.Расширение В(&СписокДоступныхРасширений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Файлы.Расширение,
		|	Файлы.Наименование,
		|	Ссылка";
		
		Запрос.УстановитьПараметр("Ошибка", Ошибка);
		Запрос.УстановитьПараметр("СписокДоступныхРасширений", СписокДоступныхРасширений);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокШаблонов.Добавить(ВыборкаДетальныеЗаписи.Ссылка, Строка(ВыборкаДетальныеЗаписи.Ссылка) + " (."+ ВыборкаДетальныеЗаписи.Расширение + ")");
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат СписокШаблонов;
	
КонецФункции

//Выполняет необходимые действия посленачала работы системы и возвращает необходимые параметры,
// определяющие дальнейшие действия
//
// Возвращаемое значение:
//  Параметры - Структура  - структура, содержащая следующие параметры:
//  * ВыполнятьОповещение - Булево - признак необходимости оповещений пользователя о наличии ошибок к немедленной отработке.
//  * ИнтервалОповещений - Число - интервал оповещений (в минутах) о наличии ошибок к немедленной отработке.
//
Функция ВыполнитьДействияПослеНачалаРаботыСистемы() Экспорт
	
	ОчиститьБуферОбмена();
	
	// Определение настроек оповещений по ошибкам с немедленной отработкой
	НастройкиОповещенийПоОшибкамСНемедленнойОбработкой = НастройкиОповещенийОбОшибкахСНемедленнойОтработкой();
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ВыполнятьОповещениеОНаличииОшибок", НастройкиОповещенийПоОшибкамСНемедленнойОбработкой.ВыполнятьОповещение);
	Параметры.Вставить("ИнтервалОповещенийОНаличииОшибок", НастройкиОповещенийПоОшибкамСНемедленнойОбработкой.ИнтервалОповещений);
	Параметры.Вставить("ЕстьПравоДоступаКОшибкам", НастройкиОповещенийПоОшибкамСНемедленнойОбработкой.ЕстьПравоДоступа);
	
	// Определение настроек напоминаний по событиям календаря
	НастройкиНапоминанийПоСобытиямКалендаря = НастройкиНапоминанийПоСобытиямКалендаря();
	Параметры.Вставить("ИспользоватьНапоминанияОСобытияхКалендаря", НастройкиНапоминанийПоСобытиямКалендаря.ИспользоватьНапоминания);
	Параметры.Вставить("ИнтервалНапоминанийОСобытияхКалендаря", НастройкиНапоминанийПоСобытиямКалендаря.ИнтервалНапоминаний);
	
	Возврат Параметры;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Очищает содержимое хранилища буфера обмена
//
Процедура ОчиститьБуферОбмена() Экспорт
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ОчиститьБуферОбмена();
	
КонецПроцедуры

//Получает настройки оповещений о наличии ошибок, требующих отработки немедленно
//
// Возвращаемое значение:
//  Настройки - Структура  - структура, содержащая настройки, со следующими полями:
//  * ВыполнятьОповещение - Булево - признак необходимости оповещений.
//  * ИнтервалОповещений - Число - интервал оповещений (в минутах).
//
Функция НастройкиОповещенийОбОшибкахСНемедленнойОтработкой()
	
	ЕстьПравоДоступа = ПравоДоступа("Редактирование", Метаданные.Справочники.Ошибки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ВыполнятьОповещение", Ложь);
	СтруктураРезультата.Вставить("ИнтервалОповещений", 0);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИнтервалОповещенийОНаличииОшибокДляНемедленнойОтработки.Значение КАК ИнтервалОповещений,
	|	ОповещатьОНаличииОшибокСНемедленнойОтработкой.Значение КАК ВыполнятьОповещение
	|ИЗ
	|	Константа.ОповещатьОНаличииОшибокСНемедленнойОтработкой КАК ОповещатьОНаличииОшибокСНемедленнойОтработкой,
	|	Константа.ИнтервалОповещенийОНаличииОшибокДляНемедленнойОтработки КАК ИнтервалОповещенийОНаличииОшибокДляНемедленнойОтработки"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Выборка);
	КонецЕсли;
	
	СтруктураРезультата.Вставить("ЕстьПравоДоступа", ЕстьПравоДоступа);
		
	Возврат СтруктураРезультата;
	
КонецФункции

Функция НастройкиНапоминанийПоСобытиямКалендаря()
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	
	ИспользоватьНапоминания = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "НапоминатьОСобытияхКалендаря", Ложь);
	
	Если ИспользоватьНапоминания Тогда
		ИнтервалНапоминаний = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ИнтервалНапоминаний", 0);
	Иначе
		ИнтервалНапоминаний = 0;
	КонецЕсли;
	
	НастройкиНапоминаний = Новый Структура;
	НастройкиНапоминаний.Вставить("ИспользоватьНапоминания", ИспользоватьНапоминания);
	НастройкиНапоминаний.Вставить("ИнтервалНапоминаний", ИнтервалНапоминаний);
	
	Возврат НастройкиНапоминаний;
	
КонецФункции

Функция КоличествоОшибокТребующиеНемедленнойОбработкиПользователем() Экспорт
	
	Количество = 0;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА Ошибки.СрокОтработки < &ДатаЗавтра
	|					И Ошибки.СрочностьИсправления = ЗНАЧЕНИЕ(Перечисление.СрочностьИсправленияОшибок.Немедленно)
	|					И НЕ(Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта)
	|							ИЛИ Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|								И (НЕ Ошибки.Владелец.ИспользоватьЗакрытиеОшибок
	|									ИЛИ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|										И НЕ Ошибки.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями))
	|				ТОГДА Ошибки.Ссылка
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	НЕ Ошибки.ПометкаУдаления
	|	И Ошибки.КомуНаправлена = &ТекущийПользователь"
	;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущаяДата = НачалоДня(Текущаядата());
	
	ДатаЗавтра = ОбщегоНазначенияСППР.СледующаяДатаПоОсновномуКалендарю();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ДатаЗавтра", ДатаЗавтра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Функция ДанныеСобытийКалендаряДляНапоминаний() Экспорт
	
	Результат = Новый Массив;
	
	ДанныеСобытий = КалендариПользователей.СобытияКалендаряДляНапоминаний();
	
	Для Каждого ДанныеСобытия из ДанныеСобытий Цикл
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Пользователь", ДанныеСобытия.Пользователь);
		ОписаниеСобытия.Вставить("ИдентификаторЗаписи", ДанныеСобытия.ИдентификаторЗаписи);
		ОписаниеСобытия.Вставить("Название", ДанныеСобытия.Название);
		ОписаниеСобытия.Вставить("Работа", ДанныеСобытия.Работа);
		ОписаниеСобытия.Вставить("Начало", ДанныеСобытия.Начало);
		
		Результат.Добавить(ОписаниеСобытия);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти