////////////////////////////////////////////////////////////////////////////////
// Клиент - серверные процедуры и функции подсистемы "Задачи процессов"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ПреобразоватьМассивВСтроку(Массив, КоличествоЭлементов, Разделитель = "")Экспорт
	
	СтрокаРезультат = "";
	
	Счетчик = 0;
	
	Для каждого Элемент Из Массив Цикл
		
		Если Счетчик = КоличествоЭлементов Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаРезультат = СтрокаРезультат + Строка(Элемент) + Разделитель;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат СтрокаРезультат;
	
КонецФункции

Функция УдалитьПоследниеСимволыИзСтроки(ВходящаяСтрока,ПодстрокаУдаления,Разделитель = Неопределено) Экспорт
	
	Если Прав(ВходящаяСтрока,СтрДлина(ПодстрокаУдаления)) = ПодстрокаУдаления Тогда
		
		Если Разделитель <> Неопределено Тогда
			Если СРЕД(ВходящаяСтрока,СтрДлина(ВходящаяСтрока)-СтрДлина(ПодстрокаУдаления)-СтрДлина(Разделитель),СтрДлина(Разделитель)) = Разделитель Тогда
				Возврат ВходящаяСтрока;
			КонецЕсли;
		КонецЕсли;
		ВходящаяСтрока = ЛЕВ(ВходящаяСтрока,СтрДлина(ВходящаяСтрока) - СтрДлина(ПодстрокаУдаления));
		
	КонецЕсли;
	
	Возврат ВходящаяСтрока;
	
КонецФункции

Функция НайтиСтрокуВДанныхФормыДерево(ГдеИскать,Значение,Колонка,ИскатьВПодчиненных) Экспорт
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[Колонка] = Значение Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		ИначеЕсли  ИскатьВПодчиненных Тогда
			НайденныйИдентификаторСтроки =  НайтиСтрокуВДанныхФормыДерево(ЭлементДерева,Значение,Колонка,ИскатьВПодчиненных);
			Если НайденныйИдентификаторСтроки >=0 Тогда
				Возврат НайденныйИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

Процедура СформироватьЗаголовокПодменюПоВидуРесурса(Форма) Экспорт

	Если Не ЗначениеЗаполнено(Форма.ВидСогласуемогоРесурсаДляВывода) Тогда
		СтрокаВидОтображаемогоРесурса = "(" + НСтр("ru = 'неопределено'") + ")";
	Иначе
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("СогласуемыйРесурс", Форма.ВидСогласуемогоРесурсаДляВывода);
		
		НайденныеСтроки = Форма.ТаблицаСогласуемыхРесурсов.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеРесурса = НайденныеСтроки[0];
		Если ДанныеРесурса = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Форма.ВидСогласуемогоРесурсаДляВывода) = Тип("СправочникСсылка.ВидыСогласуемыхРесурсов") Тогда
			СтрокаВидОтображаемогоРесурса = СтрШаблон(НСтр("ru = 'виду ресурса ""%1""'"), ДанныеРесурса.Представление);
		Иначе
			СтрокаВидОтображаемогоРесурса = """" + ДанныеРесурса.Представление + """";;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ПодменюДанныеПоВидуРесурса.Заголовок = СтрШаблон(НСтр("ru = 'Ход планирования по %1'"), 
	                                                                СтрокаВидОтображаемогоРесурса);
	
КонецПроцедуры

Процедура СформироватьЗаголовокПодменюПоВидуПлана(Форма) Экспорт

	Если Не ЗначениеЗаполнено(Форма.ВидПланаЗанятостиДляВывода) Тогда
		СтрокаДанныеВидПлана = "(" + НСтр("ru = 'неопределено'") + ")";
	Иначе
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидПлана", Форма.ВидПланаЗанятостиДляВывода);
		
		НайденныеСтроки = Форма.ПланыЗанятости.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеВидаПлана = НайденныеСтроки[0];
		Если ДанныеВидаПлана = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Форма.ВидПланаЗанятостиДляВывода) = Тип("СправочникСсылка.ВидыПланов") Тогда
			СтрокаДанныеВидПлана = СтрШаблон(НСтр("ru = 'виду плана ""%1""'"), ДанныеВидаПлана.Наименование);
		Иначе
			СтрокаДанныеВидПлана = """" + ДанныеВидаПлана.Наименование + """";;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ПодменюДанныеПоПлануЗанятости.Заголовок = СтрШаблон(НСтр("ru = 'Данные по %1'"), 
	                                                                   СтрокаДанныеВидПлана);
	
КонецПроцедуры

Функция СостояниеЗадачи(Статус, МаксимальноВозможныйСтатус) Экспорт
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована") Тогда
		Если МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению")
			Или МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена") Тогда
			Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.Запланирована");
		Иначе 
			Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.ЗапланированаОжидаетПредшествующие");
		КонецЕсли;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению") Тогда
		Если МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена") Тогда
			Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.Выполняется");
		Иначе
			Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.ВыполняетсяОжидаетДочерних");
		КонецЕсли;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена") Тогда
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.Выполнена");
	Иначе
		Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.Отменена");
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

Функция СледующийСтатус(Статус, МаксимальноВозможныйСтатус) Экспорт
	
	СледующийСтатус = Неопределено;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Отменена") Тогда
		
		Если МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Отменена") Тогда
			
			СледующийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Отменена");
			
		ИначеЕсли МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению")
			Или МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена")
			Или МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована") Тогда
			
			СледующийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована");
			
		КонецЕсли;
	
	ИначеЕсли МаксимальноВозможныйСтатус =  ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена") Тогда
		
		Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована") Тогда
			СледующийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению");
		ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению") Тогда
			СледующийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена");
		КонецЕсли;
		
	ИначеЕсли МаксимальноВозможныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению")
		И Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована") Тогда
		
		СледующийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению");
		
	КонецЕсли;
	
	Возврат СледующийСтатус;
	
КонецФункции

Функция ДатаПорученияПоЗадаче(Объект, АвторИзменений, Дата) Экспорт
	
	КоличествоСтрокПротокола = Объект.ПротоколВзаимодействия.Количество();
	
	Если КоличествоСтрокПротокола > 1 Тогда
		
		Если Объект.ПротоколВзаимодействия[КоличествоСтрокПротокола - 2].Автор <> АвторИзменений
			Или Объект.ПротоколВзаимодействия[КоличествоСтрокПротокола - 2].ИсполнительПоручения <> Объект.ИсполнительПорученияПоЗадаче Тогда

			Возврат Дата;
			
		Иначе
			
			Возврат Объект.ПротоколВзаимодействия[КоличествоСтрокПротокола - 2].Дата;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Дата;
		
	КонецЕсли;
	
КонецФункции

Функция ПравоПониженияСтатуса(Параметры) Экспорт
	
	ПравоПониженияСтатуса = Ложь;
	
	Если Параметры.Задача.Пустая()
	     Или Параметры.ПометкаУдаления
	     Или Не Параметры.ПравоИзменения Тогда
		
		ПравоПониженияСтатуса = Ложь;
		
	ИначеЕсли Параметры.ПравоИзмененияЗадачБезКонтроля Тогда
		
		ПравоПониженияСтатуса = Истина;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.ЗадачаШаблона) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Контролирующий) Тогда
		
			Если Параметры.ТекущийПользователь= Параметры.Контролирующий Тогда
				ПравоПониженияСтатуса = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Параметры.Родитель) Тогда
			
				Если Параметры.ТекущийПользователь= Параметры.ИсполнительРодительскойЗадачи Тогда
					ПравоПониженияСтатуса = Истина;
				КонецЕсли;
			
			КонецЕсли;
		
			Если Параметры.ТекущийПользователь = Параметры.Исполнитель Тогда
				ПравоПониженияСтатуса = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПравоПониженияСтатуса;
	
КонецФункции

Функция ПараметрыПроверкиПраваПониженияСтатуса() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Задача",                         ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	Параметры.Вставить("ПометкаУдаления",                Ложь);
	Параметры.Вставить("ПравоИзменения",                 Ложь);
	Параметры.Вставить("ПравоИзмененияЗадачБезКонтроля", Ложь);
	Параметры.Вставить("ЗадачаШаблона",                  ПредопределенноеЗначение("Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка"));
	Параметры.Вставить("Контролирующий",                 ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("ТекущийПользователь",            ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("Родитель",                       ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	Параметры.Вставить("ИсполнительРодительскойЗадачи",  ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("Исполнитель",                    ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыПроверкиПраваПовышенияСтатуса() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Задача",                         ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	Параметры.Вставить("ПометкаУдаления",                Ложь);
	Параметры.Вставить("ПравоИзменения",                 Ложь);
	Параметры.Вставить("ПравоИзмененияЗадачБезКонтроля", Ложь);
	Параметры.Вставить("ЗадачаШаблона",                  ПредопределенноеЗначение("Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка"));
	Параметры.Вставить("Контролирующий",                 ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("ТекущийПользователь",            ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("Родитель",                       ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	Параметры.Вставить("ИсполнительРодительскойЗадачи",  ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("Исполнитель",                    ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("СледующийСтатус",                ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка"));
	Параметры.Вставить("ТекущийСтатус",                  ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка"));
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыПроверкиПраваОтменыЗадачи() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Задача",                         ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	Параметры.Вставить("ПометкаУдаления",                Ложь);
	Параметры.Вставить("ПравоИзменения",                 Ложь);
	Параметры.Вставить("ПравоИзмененияЗадачБезКонтроля", Ложь);
	Параметры.Вставить("ЗадачаШаблона",                  ПредопределенноеЗначение("Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка"));
	Параметры.Вставить("Контролирующий",                 ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("ТекущийПользователь",            ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("Родитель",                       ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	Параметры.Вставить("ИсполнительРодительскойЗадачи",  ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("Исполнитель",                    ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Параметры.Вставить("ТекущийСтатус",                  ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка"));
	
	Возврат Параметры;
	
КонецФункции

Функция ПравоИзмененияИсполнителя(ПараметрыПроверки) Экспорт
	
	ПравоИзмененияИсполнителя = Ложь;
	
	Если ПараметрыПроверки.ПравоИзмененияЗадачБезКонтроля Тогда
		
		ПравоИзмененияИсполнителя = Истина;
		
	ИначеЕсли ПараметрыПроверки.Задача = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
		
		ПравоИзмененияИсполнителя = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПроверки.ИсполнительЗадачиШаблона) 
		И ПараметрыПроверки.ТекущийПользователь <> ПараметрыПроверки.Исполнитель Тогда
		
		ПравоИзмененияИсполнителя = Ложь;
		
	ИначеЕсли ПараметрыПроверки.ТекущийПользователь = ПараметрыПроверки.Исполнитель
			Или ПараметрыПроверки.ТекущийПользователь = ПараметрыПроверки.ИсполнительРодительскойЗадачи
			Или ПараметрыПроверки.ТекущийПользователь = ПараметрыПроверки.ОтветственныйЗаПредмет Тогда
		
		ПравоИзмененияИсполнителя = Истина;
		
	ИначеЕсли ПараметрыПроверки.ПротоколВзаимодействия.Количество() = 1
			И ПараметрыПроверки.ПротоколВзаимодействия[0].Автор = ПараметрыПроверки.ТекущийПользователь
			И (ПараметрыПроверки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована")
			   Или ПараметрыПроверки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Отменена")) Тогда
			
			ПравоИзмененияИсполнителя = Истина;
			
	КонецЕсли;
	
	Возврат ПравоИзмененияИсполнителя;
	
КонецФункции

Функция ПравоИзмененияКонтролирующего(ПараметрыПроверки) Экспорт
	
	ПравоИзмененияКонтролирующего = Ложь;
	
	Если ПараметрыПроверки.ПравоИзмененияЗадачБезКонтроля Тогда
		
		ПравоИзмененияКонтролирующего = Истина;
		
	ИначеЕсли ПараметрыПроверки.Задача = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
		
		ПравоИзмененияКонтролирующего = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПроверки.Контролирующий) Тогда
		
		Если ПараметрыПроверки.ТекущийПользователь = ПараметрыПроверки.Контролирующий
			Или ПараметрыПроверки.ТекущийПользователь = ПараметрыПроверки.КонтролирующийРодительскойЗадачи Тогда
			
			ПравоИзмененияКонтролирующего = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПроверки.Родитель) Тогда
		
		Если ПараметрыПроверки.ТекущийПользователь = ПараметрыПроверки.ИсполнительРодительскойЗадачи Тогда
			
			ПравоИзмененияКонтролирующего = Истина;
			
		КонецЕсли;
		
	Иначе
		
		ПравоИзмененияКонтролирующего = Истина;
		
	КонецЕсли;
	
	Возврат ПравоИзмененияКонтролирующего;
	
КонецФункции

Функция ПараметрыПроверкиИзмененияИсполнителя() Экспорт

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ПравоИзмененияЗадачБезКонтроля",   Ложь);
	ПараметрыПроверки.Вставить("Родитель",                         ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("Задача",                           ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("Статус",                           ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("ИсполнительЗадачиШаблона",         ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("ТекущийПользователь",              ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("Исполнитель",                      ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("ИсполнительРодительскойЗадачи",    ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("Контролирующий",                   ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("КонтролирующийРодительскойЗадачи", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("ОтветственныйЗаПредмет",           ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ПараметрыПроверки.Вставить("ПротоколВзаимодействия",           Неопределено);
	
	Возврат ПараметрыПроверки;

КонецФункции

Функция ПредставлениеВидаРесурса(Наименование, ЕдиницаИзмерения) Экспорт
	
	Возврат СтрШаблон("%1 (%2)", СокрЛП(Наименование), СокрЛП(ЕдиницаИзмерения));
	
КонецФункции

Функция СостоянияЗадачиТребуетВыполнения() Экспорт
	
	СостоянияЗадачи = Новый СписокЗначений;
	
	СостоянияЗадачи.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.Выполняется"));
	СостоянияЗадачи.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.ВыполняетсяОжидаетДочерних"));
	СостоянияЗадачи.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.Запланирована"));
	СостоянияЗадачи.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗадачПроцессов.ЗапланированаОжидаетПредшествующие"));
	
	Возврат СостоянияЗадачи;
	
КонецФункции

Функция НовыйПараметрыНастроекПоПлануЗанятости() Экспорт
	
	ПараметрыНастроек = Новый Структура;
	
	ПараметрыНастроек.Вставить("ИмяКолонкиФактПрошлыйПериод",        "");
	ПараметрыНастроек.Вставить("ИмяКолонкиФактТекущийПериод",        "");
	ПараметрыНастроек.Вставить("ИмяКолонкиРабочийПланПрошлыйПериод", "");
	ПараметрыНастроек.Вставить("ИмяКолонкиРабочийПланТекущийПериод", "");
	ПараметрыНастроек.Вставить("ИмяГруппыТекущийПериод",             "");
	ПараметрыНастроек.Вставить("ИмяГруппыПрошлыйПериод",             "");
	
	Возврат ПараметрыНастроек;
	
КонецФункции

Функция НовыйДанныеЗаписиЗадачиЗапланированоПоСотрудникам() Экспорт
	
	ДанныеЗаписи = Новый Структура;
	
	ДанныеЗаписи.Вставить("Задача",       ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
	ДанныеЗаписи.Вставить("Пользователь", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ДанныеЗаписи.Вставить("ВидРесурса",   ПредопределенноеЗначение("Справочник.ВидыСогласуемыхРесурсов.ПустаяСсылка"));
	ДанныеЗаписи.Вставить("Количество",   0);
	
	Возврат ДанныеЗаписи;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтборыСписков

Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, ИмяНастройки, Значение, Знач СтруктураБыстрогоОтбора, 
	      Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяНастройки, Значение) Тогда
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список, ИмяКолонки, ИмяНастройки,  Значение, Знач СтруктураБыстрогоОтбора, 
	      Настройки, Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяНастройки);
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяНастройки) Тогда
			Значение = Настройки.Получить(ИмяНастройки);
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область БыстрыеКоманды

Процедура НаправитьЗадачуНаПроверку(Объект, ТекущийПользователь, ДатаСеанса, ФормироватьТекст) Экспорт

	НоваяСтрокаПротокола = Объект.ПротоколВзаимодействия.Добавить();
	
	НоваяСтрокаПротокола.Дата                 = ДатаСеанса;
	НоваяСтрокаПротокола.Автор                = ТекущийПользователь;
	НоваяСтрокаПротокола.ТекстПоручения       = ТекстПорученияНаправитьЗадачуНаПроверку();
	НоваяСтрокаПротокола.ИсполнительПоручения = Объект.Контролирующий;
	НоваяСтрокаПротокола.Статус               = Объект.Статус;
	
КонецПроцедуры

Функция ТекстПорученияНаправитьЗадачуНаПроверку() Экспорт
	
	Возврат НСтр("ru = 'Прошу проверить выполнение задачи и отметить её выполнение.'");
	
КонецФункции

Функция ТекстНаправленияНаСогласование(ПредставлениеВидаРесурса, Количество) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = 'Просьба согласовать ресурс %1: %2.'"),
	                  ПредставлениеВидаРесурса,
	                  Количество);
	
КонецФункции

Функция ТекстРезультатыСогласования(ПредставленияРесурса, Согласовано, НеСогласовано) Экспорт
	
	Если Согласовано = 0 И НеСогласовано = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстНаправления = НСтр("ru = 'Результаты согласования по ресурсу %1:'");
	ТекстНаправления = СтрШаблон(ТекстНаправления, ПредставленияРесурса);
	
	Если НеСогласовано > 0 Тогда
		ТекстНаправления = ТекстНаправления + " " + СтрШаблон(НСтр("ru = 'не согласовано - %1'"), НеСогласовано);
	КонецЕсли;
	
	Если Согласовано > 0 Тогда
		Если НеСогласовано > 0 Тогда
			ТекстНаправления = ТекстНаправления + ", ";
		КонецЕсли;
		ТекстНаправления = ТекстНаправления + СтрШаблон(НСтр("ru = 'согласовано - %1'"), Согласовано);
	КонецЕсли;
	
	ТекстНаправления = ТекстНаправления + ".";
	
	Возврат ТекстНаправления;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Устанавливает значение свойства элемента формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = НРег("ТолькоПросмотр")
	И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("УправляемаяФорма, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

// Устанавливает значение свойства элементов формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы  - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИменаЭлементов - Массив, Строка, Структура - имена искомых элементов.
//  ИмяСвойства    - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение       - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомых элементов
//
Процедура УстановитьСвойствоЭлементовФормы(ЭлементыФормы, ИменаЭлементов, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
		
		Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	Иначе
		
		Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
			СтруктураИменЭлементов = Новый Структура(ИменаЭлементов);
		Иначе
			СтруктураИменЭлементов = ИменаЭлементов;
		КонецЕсли;
		
		Для Каждого ИмяЭлемента Из СтруктураИменЭлементов Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента.Ключ, ИмяСвойства, Значение, УстанавливатьДляПодчиненных);
		КонецЦикла
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти