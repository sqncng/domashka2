
Функция СформироватьПечатныеФормы(ИмяМенеджераПечати, МассивОбъектовПечати, СУчетомПриемника=Ложь, ДанныеСоответствия=Неопределено) Экспорт
	
	МенеджерПечати = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяМенеджераПечати);
	
	Возврат МенеджерПечати.СформироватьПечатныеФормы(МассивОбъектовПечати, СУчетомПриемника, ДанныеСоответствия);

КонецФункции

Функция СформироватьОписаниеОбъекта(Ссылка, СУчетомПриемника=Ложь, ДанныеСоответствия=Неопределено) Экспорт
	
	ПолноеИмяОбъекта = Ссылка.Метаданные().ПолноеИмя();
	
	Возврат СформироватьПечатныеФормы(ПолноеИмяОбъекта, Ссылка, СУчетомПриемника, ДанныеСоответствия);
	
КонецФункции

Процедура ОбработатьДеревоОпераций(ВеткаДерева) Экспорт
	
	Для Каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		СлужебнаяИнформация = "";
		
		СтрокаДерева.СлужебнаяИнформация = СлужебнаяИнформация;
		
		Если СтрокаДерева.ОбъектМетаданных = Неопределено Тогда
			Форма = "";
			
		ИначеЕсли ТипЗнч(СтрокаДерева.ОбъектМетаданных) = Тип("СправочникСсылка.Подсистемы") Тогда
			Форма = НСтр("ru='Подсистема ""'")+ СтрокаДерева.ОбъектМетаданныхНаименование +"""";
			
		Иначе
			Форма = НСтр("ru='Объект метаданных ""'") + СтрокаДерева.ОбъектМетаданныхНаименование +""", " + СтрокаДерева.ТипФормы;
			
			Если СтрокаДерева.ТипФормы = Перечисления.ТипыФорм.ПроизвольнаяФорма Тогда
				Форма = Форма + " " + СтрокаДерева.ФормаОбъектаМетаданныхИмя;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДерева.Текст2 = Форма;
		
		ОбработатьДеревоОпераций(СтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаОбъектаПоОбщейТаблице(ОбщаяТаблица, СтруктураОтбора) Экспорт
	
	ТаблицаОбъекта = ОбщаяТаблица.СкопироватьКолонки();
	
	МассивСтрок = ОбщаяТаблица.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаТаблицы из МассивСтрок Цикл
		НоваяСтрока = ТаблицаОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ТаблицаОбъекта;
	
КонецФункции

Функция ДеревоОбъектаПоОбщемуДереву(ОбщееДерево, СтруктураОтбора) Экспорт
	
	ДеревоДанныхОбъекта = Новый ДеревоЗначений;
	
	Для Каждого Колонка из ОбщееДерево.Колонки Цикл
		ДеревоДанныхОбъекта.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	ЗаполнитьСтрокиДерева(ДеревоДанныхОбъекта.Строки, ОбщееДерево.Строки, СтруктураОтбора);
	
	Возврат ДеревоДанныхОбъекта;
	
КонецФункции

Процедура НастроитьОписаниеОбъекта(Документ) Экспорт
	
	Документ.ТолькоПросмотр        = Истина;
	Документ.ОриентацияСтраницы    = ОриентацияСтраницы.Портрет;
	Документ.ЭкземпляровНаСтранице = 1;
	Документ.Автомасштаб           = Истина;
	Документ.ОтображатьСетку       = Ложь;
	Документ.ОтображатьЗаголовки   = Ложь;
	
	Документ.НижнийКолонтитул.Выводить          = Истина;
	Документ.НижнийКолонтитул.НачальнаяСтраница = 1;
	Документ.НижнийКолонтитул.ТекстСправа       = "Страница[&НомерСтраницы] из [&СтраницВсего]";
	
КонецПроцедуры

// Процедура формирования и вывода в табличный документ заголовка
// заголовок формируется в виде <Текст> <Полный код> <Наименование объекта>
// Расшифровка ячейки табличного документа выполняется по ссылке
// Следующей строкой выводится дата версии объекта
Процедура ВывестиЗаголовокОбъекта(Текст, Ссылка, ПолныйКод = "", Документ) Экспорт
	
	ВидОбъекта = Версионирование.ВидВерсионируемогоОбъекта(Ссылка);
	
	ЗаписьДатыИзменения = РегистрыСведений.ДатыИзмененияОбъектов.СоздатьМенеджерЗаписи();
	ЗаписьДатыИзменения.КонтролируемыйОбъект = Ссылка;
	ЗаписьДатыИзменения.ВидОбъекта = ВидОбъекта;
	ЗаписьДатыИзменения.Прочитать();
	
	Область = ОбластиМакетаОписанияОбъекта().ЗаголовокОбъекта;
	
	Область.Область().Имя = "";
	
	// Заголовок справочника "Объекты метаданных" имеет индивидуальный формат
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		Область.Параметры.Текст = ДобавитьПодстроку(ДобавитьПодстроку(Текст, ПолныйКод), Ссылка.Наименование, , , Истина);
	Иначе
		Если Не ПустаяСтрока(Ссылка.Синоним) Тогда
			НазваниеОбъектаМД = Строка(Ссылка.Родитель.ПредставлениеВидаОбъектаМетаданныхВЕдЧисле) + " """ + Ссылка.Синоним + """";
		Иначе
			НазваниеОбъектаМД = Строка(Ссылка.Родитель.ПредставлениеВидаОбъектаМетаданныхВЕдЧисле) + " """ + Ссылка.Имя + """";
		КонецЕсли;
		Область.Параметры.Текст = ДобавитьПодстроку(ДобавитьПодстроку(Текст, ПолныйКод), НазваниеОбъектаМД, , ": ", Ложь);;
	КонецЕсли;
	Область.Параметры.Ссылка = СформироватьСсылку(Ссылка);
	Область.Параметры.Дата   = ЗаписьДатыИзменения.ДатаИзменения;
	
	Документ.Вывести(Область, 1);
	
КонецПроцедуры

// Процедура для вывода иерархии объекта, переданного в процедуру
// при помощи параметра "Ссылка"
Процедура ВывестиИерархиюДляОбъекта(СтрокаОбъекта, Документ, Отступ = 0) Экспорт
	
	МассивИерархии = Новый Массив();
	ЗаполнитьМассивИерархии(МассивИерархии, СтрокаОбъекта);
	
	Область = ОбластиМакетаОписанияОбъекта().Иерархия;
	Область.Область().Имя = "";
	
	Для Каждого СтрокаДерева из МассивИерархии Цикл
		Отступ = Отступ + 1;
		Область.Область().Отступ = Отступ * 2;
		
		Область.Параметры.Текст  = СокрЛП("" + СтрокаДерева.Код + " """ + СтрокаДерева.Наименование+ """");
		Область.Параметры.Ссылка = СформироватьСсылку(СтрокаДерева.Ссылка);
		
		Документ.Вывести(Область, 3);
	КонецЦикла;
	
КонецПроцедуры

// Процедура для вывода в табличный документ заголовка раздела,
// переданного параметром "Текст"
Процедура ВывестиЗаголовокРаздела(Текст, Документ, Отступ = 0, Ссылка = Неопределено) Экспорт
	
	Область = ОбластиМакетаОписанияОбъекта().ЗаголовокРаздела;
	
	Область.Область().Имя = "";
	
	Область.Область().Отступ = Отступ * 2;
	
	Область.Параметры.Текст  = Текст;
	
	Если Ссылка<>Неопределено Тогда 
		Область.Параметры.Ссылка  = СформироватьСсылку(Ссылка);
	КонецЕсли;
	
	Документ.Вывести(Область, 1);
	
КонецПроцедуры

// Процедура вывода подраздела в табличный документ.
// В качестве параметра Строки используются ТаблицаЗначений либо строки дерева значений.
// Если в качестве параметра переданы строки дерева значений, 
// то будет выполнен рекурсивеый обход всех строк дерева.
// Таблица значений (дерево значений) должны содержать следующие заполненные колонки:
//
// ПометкаУдаления - (Истина/Ложь), если Истина, то строка не выводится
// НомерПодраздела - Вместе с номером, передаваемого в качестве независимого параметра, образуют номер подраздела
//                   по формуле <Номер>.<НомерПодраздела>. Тип - Строка
// ВидПодраздела  - Строка, которая в тексте заголовка выводится перед номером подраздела, без кавычек
// ЗаголовокПодраздела - Строка, которая в тексте заголовка выводится после номера подраздела, в кавычках
//                     Формат заголовка: <ВидПодраздела> <НомерПодраздела> "<ЗаголовокПодраздела>"
// Ссылка - Используется 1. В качестве расшифровки для заголовка подраздела
//                       2. Если Метаданные ссылки имеют реквизиты Имя, Синоним и Комментарий,
//                          то они будут выведены после заголовка
//                       Тип данных Ссылка либо NULL.
// Текст1 - Текст который выводится по абзацам
// Текст2 - Текст, который выводится с новой строки после Текст1, выводится по абзацам
// Гиперссылка - Выводится последней строкой в разделе. Это дополнительная ссылка, которую можно открыть
//               чтобы понять (детализировать) описываемый элемент справочника. Выводится в виде
//               строки вида "См. также <Описание элемента>" и ссылки-расшифровки. Тип данных Ссылка, либо NULL
Процедура ВывестиПодразделы(Строки, ВидПодраздела = Неопределено, Отступ = 0, Документ) Экспорт
	
	Если ВидПодраздела = Неопределено Тогда
		ОтобранныеСтроки = Строки;
	Иначе
		ОтобранныеСтроки = Строки.НайтиСтроки(Новый Структура("ВидПодраздела", ВидПодраздела));
	КонецЕсли;
	
	Для Каждого Строка ИЗ ОтобранныеСтроки Цикл
		ВывестиСтрокуПодраздела(Строка, Отступ, ВидПодраздела, Документ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура для вывода подзаголовка подраздела в табличный документ,
// переданного параметром Текст. 
// Параметр "Ссылка" предназначена для расшифровки заголовка
Процедура ВывестиЗаголовокПодраздела(Текст, Ссылка, Отступ = 0, Документ) Экспорт
	
	Область = ОбластиМакетаОписанияОбъекта().ЗаголовокПодраздела;
	
	Область.Область().Имя = "";
	
	Область.Область().Отступ = Отступ * 2;
	
	Область.Параметры.Текст  = Текст;
	Область.Параметры.Ссылка = СформироватьСсылку(Ссылка);
	
	Документ.Вывести(Область, 2);
	
КонецПроцедуры

// Процедура для вывода заголовка в табличный документ,
// переданного в процедуру параметром "Текст"
Процедура ВывестиЗаголовокТекста(Текст, Отступ = 0, Документ) Экспорт
	
	Область = ОбластиМакетаОписанияОбъекта().ЗаголовокТекста;
	
	Область.Область().Имя = "";
	
	Область.Область().Отступ = Отступ * 2;
	
	Область.Параметры.Текст  = Текст;
	
	Документ.Вывести(Область, 3);
	
КонецПроцедуры

// Процедура предназначена для вывода в табличный документ текста
// в том числе больших объемов, разбитых на абзацы. 
//Каждый абзац выводится в новую ячейку
//
// Параметры:
// Текст - текст, который нужно вывести
// Отступ - Отступ от левого края, для всего фрагмента текста
// Документ - ТабличныйДокумент, в который выводится текст
Процедура ВывестиТекстПоАбзацам(Текст, Отступ = 0, Документ, Ссылка = Неопределено) Экспорт
	
	Область = ОбластиМакетаОписанияОбъекта().АбзацТекста;
	
	Область.Область().Имя = "";
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(Текст) Цикл
		Абзац = СокрЛП(СтрПолучитьСтроку(Текст, НомерСтроки));
		
		Если ПустаяСтрока(Абзац) Тогда
			Продолжить;
		КонецЕсли;
		
		Область.Область().Отступ = Отступ * 2;
		
		Область.Параметры.Текст = Абзац;
		
		Если Ссылка<>Неопределено Тогда
			Если Ссылка = "Очистить" Тогда
				Область.Параметры.Ссылка = Неопределено;	
			Иначе	
				Область.Параметры.Ссылка  = СформироватьСсылку(Ссылка);
			КонецЕсли;
		КонецЕсли;
	
		Документ.Вывести(Область, 3);
	КонецЦикла;
	
КонецПроцедуры

// Функция "склеивания" двух строк в одну.
// Позволяет использовать префиксы для второй подстроки и различные разделители строк
//
// Параметры:
// ПерваяПодСтрока - строка к которой будет добавлена вторая
// ВтораяПодСтрока - добавляемая подстрока, если подстрока пустая, то ничего добавлено не будет
// Префикс - префикс второй подстроки. Добавляется только когда вторая подстрока не пустая
// Разделитель - разделитель между первой и второй подстрокой. Будет добавлен, только когда первая подстрока не пустая
// ВКавычках - если равен Истина, то вторая подстрока (без префикса) будет заключена в кавычки
Функция ДобавитьПодстроку(ПерваяПодСтрока, ВтораяПодСтрока, Префикс = "", Разделитель = " ", ВКавычках = Ложь) Экспорт
	
	ИтоговаяСтрока = "" + ПерваяПодСтрока;
	Если Не ПустаяСтрока(ВтораяПодСтрока) Тогда
		
		Если Не ПустаяСтрока(ИтоговаяСтрока) Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + Разделитель;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Префикс) Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + Префикс;
		КонецЕсли;
		
		Если ВКавычках Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + """" + ВтораяПодСтрока + """";
		Иначе
			ИтоговаяСтрока = ИтоговаяСтрока + ВтораяПодСтрока;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

// Процедура вывода Имени, синонима и комментария в табличный документ
// по переданной ссылке
// Имя, синоним и комментарии выводятся только если они есть
// Проверка, на наличие реквизитов "в ссылке" выполняется в вызывающей процедуре(функции)
Процедура ВывестиИмяСинонимКомментарий(Имя, Синоним, Комментарий, Отступ, Документ) Экспорт
	
	ВыводимыйТекст = ДобавитьПодстроку(ДобавитьПодстроку("", Имя, "Имя: ",, Истина), Синоним, "Синоним: ", ", ", Истина);
	Если Не ПустаяСтрока(ВыводимыйТекст) Тогда
		ВывестиТекстПоАбзацам(ВыводимыйТекст, Отступ, Документ);
	КонецЕсли;
	
	ВыводимыйТекст = ДобавитьПодстроку("", Комментарий, "Комментарий: ",, Истина);
	Если Не ПустаяСтрока(ВыводимыйТекст) Тогда
		ВывестиТекстПоАбзацам(ВыводимыйТекст, Отступ, Документ);
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура ВывестиТаблицуТЧ(Выборка, ИмяТаблицы, ЗаголовокРаздела, ТаблицаСоответствия, Документ, ЗаголовокСсылки, НастройкиВывода) Экспорт
	
	ДляПриемника = НастройкиВывода.ДляПриемника;
	СУчетомПриемника = НастройкиВывода.СУчетомПриемника;
	
	ИмяТЧ = ?(ДляПриемника, "Приемник" + ИмяТаблицы, ИмяТаблицы);
	ИмяТЧДляСоответствия = ?(НЕ ДляПриемника, "Приемник" + ИмяТаблицы, ИмяТаблицы);
	
	Таблица = Выборка[ИмяТЧ].Выгрузить();
	
	Если СУчетомПриемника Тогда
		ТаблицаДляСоответствия = Выборка[ИмяТЧДляСоответствия].Выгрузить();
	Иначе
		ТаблицаДляСоответствия = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если Таблица.Количество()>0 Тогда
		
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(ЗаголовокРаздела, Документ);
		
		НомерСтроки = 0;
		Для Каждого СтрокаТаблицы из Таблица Цикл
			НомерСтроки = НомерСтроки + 1;
			ВывестиСтрокуТаблицы(СтрокаТаблицы, ТаблицаСоответствия, ТаблицаДляСоответствия,
			                     Документ, ЗаголовокСсылки, НомерСтроки, НастройкиВывода);
		КонецЦикла;
							 
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСтрокуТаблицы(СтрокаТаблицы, ТаблицаСоответствия, ТаблицаДляСоответствия, Документ, ЗаголовокСсылки, НомерСтроки, НастройкиВывода) Экспорт
	
	ДляПриемника = НастройкиВывода.ДляПриемника;
	СУчетомПриемника = НастройкиВывода.СУчетомПриемника;
	
	Если НастройкиВывода.Свойство("Колонки") Тогда
		Колонки = НастройкиВывода.Колонки;
	Иначе
		Колонки = Новый Структура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаголовокСсылки) Тогда
		ПрефиксПредставления = ЗаголовокСсылки + ": ";
	Иначе
		ПрефиксПредставления = "";	
	КонецЕсли;
	
	Если Колонки.Количество()>0 Тогда
		ЗаголовокПодраздела = НСтр("ru='Строка %НомерСтроки%'");
		ЗаголовокПодраздела = СтрЗаменить(ЗаголовокПодраздела,"%НомерСтроки%", НомерСтроки);
		ВывестиЗаголовокПодраздела(ЗаголовокПодраздела, Неопределено, 0, Документ);
	КонецЕсли;
		
	Если СУчетомПриемника Тогда
		// С учетом приемника выводится информация как по источнику, так и по приемнику,
		// если выводимые данные различаются
		
		ПредставлениеСоответствия = "";
		СсылкаСоответствия = Неопределено;
		
		Ссылка = СоответствиеСсылки(СтрокаТаблицы.Ссылка, ТаблицаСоответствия, ДляПриемника);
		
		СтрокаСоответствия = ТаблицаДляСоответствия.Найти(Ссылка, "Ссылка");
		
		Если СтрокаСоответствия <> Неопределено Тогда
			ПредставлениеСоответствия = СтрокаСоответствия.Представление;
			СсылкаСоответствия = СтрокаСоответствия.Ссылка;
		КонецЕсли;
		
		Если СтрокаТаблицы.Представление <> ПредставлениеСоответствия Тогда
			
			ТекстИсточникаПриемника = ПрефиксПредставления
			    + ?(ДляПриемника, ПредставлениеСоответствия, СтрокаТаблицы.Представление)
				+ " / "
				+ ?(ДляПриемника, СтрокаТаблицы.Представление, ПредставлениеСоответствия);;
			
			ВывестиТекстПоАбзацам(ТекстИсточникаПриемника, 1, Документ);
			
		Иначе
			ТекстПредставления = ПрефиксПредставления + СтрокаТаблицы.Представление;
			ВывестиТекстПоАбзацам(ТекстПредставления, 1, Документ, СтрокаТаблицы.Ссылка);
		КонецЕсли;
		
	Иначе
		// Без учета приемника - обычный вывод данных	
		ТекстПредставления = ПрефиксПредставления + СтрокаТаблицы.Представление;
		ВывестиТекстПоАбзацам(ТекстПредставления, 1, Документ, СтрокаТаблицы.Ссылка);
	КонецЕсли;
	
	// Вывод дополнительных полей
	
	Для Каждого ДанныеПоля из Колонки Цикл
		
		ЗаголовокПоля = "";
		Если ЗначениеЗаполнено(ДанныеПоля.Значение) Тогда
			ЗаголовокПоля = ДанныеПоля.Значение + ": ";
		КонецЕсли;
		
		ТекстПредставления = ЗаголовокПоля + СтрокаТаблицы[ДанныеПоля.Ключ];
		ВывестиТекстПоАбзацам(ТекстПредставления, 1, Документ);
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеСсылки(Ссылка, ТаблицаСоответствия, ДляПриемника)
	
	СсылкаСоответствия = Неопределено;
	
	КолонкаПоиска = ?(ДляПриемника, "Приемник", "Источник");
	КолонкаСоответствия = ?(ДляПриемника, "Источник", "Приемник");
	
	СтрокаТаблицы = ТаблицаСоответствия.Найти(Ссылка, КолонкаПоиска);
	
	Если СтрокаТаблицы <> Неопределено Тогда
		СсылкаСоответствия = СтрокаТаблицы[КолонкаСоответствия];
	КонецЕсли;
	
	Возврат СсылкаСоответствия;
	
КонецФункции

Процедура ЗаполнитьСтрокиДерева(СтрокиДереваОбъекта, СтрокиИсходногоДерева, СтруктураОтбора)
	
	Если СтрокиИсходногоДерева.Количество()>0 Тогда
		
		МассивСтрок = СтрокиИсходногоДерева.НайтиСтроки(СтруктураОтбора, Ложь);
		
		Для Каждого СтрокаДерева из МассивСтрок Цикл
			НоваяСтрока = СтрокиДереваОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			
			ЗаполнитьСтрокиДерева(НоваяСтрока.Строки, СтрокаДерева.Строки, СтруктураОтбора);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивИерархии(МассивИерархии, СтрокаДерева)
	
	Если СтрокаДерева<>Неопределено Тогда
		МассивИерархии.Вставить(0, СтрокаДерева);
		ЗаполнитьМассивИерархии(МассивИерархии, СтрокаДерева.Родитель)
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательная процедура для процедуры ВывестиПодразделы()
// Осуществляет вывод строки в табличный документ.
// Описание полей для параметра Строка см. в процедуре ВывестиПодразделы()
// В процедуре, реализован вывод в заданном формате Имени, Синонима и Комментария.
Процедура ВывестиСтрокуПодраздела(Строка, Отступ = 0, ВидПодраздела = Неопределено, Документ)
	
	Если Строка.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Текст = "" + Строка.ВидПодраздела + " " + СокрЛ(Строка(Строка.НомерПодраздела) + " ");
	Если НЕ ПустаяСтрока(Строка.ЗаголовокПодраздела) Тогда
		Текст = Текст + """" + Строка.ЗаголовокПодраздела + """";
	КонецЕсли;
	
	ВывестиЗаголовокПодраздела(Текст, Строка.Ссылка, Отступ, Документ);
	
	Если Не ПустаяСтрока(Строка.СлужебнаяИнформация) Тогда
		ВывестиТекстПоАбзацам(Строка.СлужебнаяИнформация, Отступ, Документ);
	КонецЕсли;
	
	ВывестиТекстПоАбзацам(Строка.Текст1, Отступ, Документ);
	ВывестиТекстПоАбзацам(Строка.Текст2, Отступ, Документ);
		
	Если ЗначениеЗаполнено(Строка.Гиперссылка) Тогда
		ВывестиГиперссылку(Строка.Гиперссылка, Отступ, Документ);
	КонецЕсли;
	
	Если ТипЗнч(Строка) = Тип("СтрокаДереваЗначений") Тогда
		ВывестиПодразделы(Строка.Строки, ВидПодраздела, Отступ + 1, Документ);
	КонецЕсли;
	
КонецПроцедуры

// Процедуры вывода в табличный документ гиперссылки
//
// Параметры:
// Ссылка - Ссылка на любой объект
// Отступ - Абзацный отступ при выводе информации
// Документ - Табличный документ, в который выводится информация
//
Процедура ВывестиГиперссылку(Ссылка, Отступ = 0, Документ) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	Область = ОбластиМакетаОписанияОбъекта().Гиперссылка;
	
	Область.Область().Имя = "";
	
	Область.Область().Отступ = Отступ * 2;
	
	Область.Параметры.Текст  = НСтр("ru='См. так же: '") + ОписаниеСсылки(Ссылка);
	Область.Параметры.Ссылка = СформироватьСсылку(Ссылка);
	
	Документ.Вывести(Область, 3);
	
КонецПроцедуры

// Вспомогательная функция для функции ВывестиГиперссылку()
// Формирует текстовое представление ссылки в виде
// <Представление метаданных>: <Полный код> "<Ссылка>"
Функция ОписаниеСсылки(Ссылка)
	
	Текст = "";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если МетаданныеОбъекта.Владельцы.Количество() > 0 Тогда
		Текст = Текст + ОписаниеСсылки(Ссылка.Владелец) + ", ";
	КонецЕсли;
	
	Если МетаданныеОбъекта.Реквизиты.Найти("ПолныйКод") <> Неопределено Тогда
		ПолныйКод = Ссылка.ПолныйКод;
	Иначе
		ПолныйКод = "";
	КонецЕсли;
	
	Возврат Текст + Ссылка.Метаданные() + ": " + ПолныйКод + " """ + Ссылка+ """";
	
КонецФункции

// Функция для преобразования ссылки во внутреннее представление
//
Функция СформироватьСсылку(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ЗначениеВСтрокуВнутр(Ссылка);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОбластиМакетаОписанияОбъекта()
	
	Макет = ПолучитьОбщийМакет("ОписаниеОбъектов");

	СтруктураОписания = Новый Структура();
	
	СтруктураОписания.Вставить("ЗаголовокОбъекта"   , Макет.ПолучитьОбласть("ЗаголовокОбъекта"));
	СтруктураОписания.Вставить("Иерархия"           , Макет.ПолучитьОбласть("Иерархия"));
	СтруктураОписания.Вставить("ЗаголовокРаздела"   , Макет.ПолучитьОбласть("ЗаголовокРаздела"));
	СтруктураОписания.Вставить("ЗаголовокПодраздела", Макет.ПолучитьОбласть("ЗаголовокПодраздела"));
	СтруктураОписания.Вставить("ЗаголовокТекста"    , Макет.ПолучитьОбласть("ЗаголовокТекста"));
	СтруктураОписания.Вставить("АбзацТекста"        , Макет.ПолучитьОбласть("АбзацТекста"));
	СтруктураОписания.Вставить("Гиперссылка"        , Макет.ПолучитьОбласть("Гиперссылка"));
		
	Возврат СтруктураОписания;
	
КонецФункции

#КонецОбласти