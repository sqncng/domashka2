////////////////////////////////////////////////////////////////////////////////
//  Серверные процедуры и функции подсистемы "Приоритеты и очереди работ"
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует реквизиты и элементы формы в форме элемента работы
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма элемента работы
//  Работа          - СправочникСсылка.ТехническиеПроекты,
//                    СправочникСсылка.ЗадачиПроцесса - ссылка на работу.
//  ИмяГруппыФормы  - Строка - имя группы формы, в которую будут добавлены команды приоритета
//
Процедура НастроитьЭлементыПриоритетыВФормеЭлемента(Форма, Работа, ИмяГруппыФормы) Экспорт
	
	ПроектРаботы = ПроектРаботыИзФормыОбъекта(Форма);
	
	Если Не ФормированиеЭлементовНеобходимо(ПроектРаботы) Тогда
		
		ЭлементФормыПодменю = Форма.Элементы.Найти("ПриоритетПодменю");
		Если ЭлементФормыПодменю <> Неопределено Тогда
			ЭлементФормыПодменю.Видимость = Ложь;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлементГруппаФормы = Форма.Элементы.Найти(ИмяГруппыФормы);

	Если ЭлементГруппаФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Работа) Тогда
		Возврат;
	КонецЕсли;
	
	ПриоритетыРаботы   = Справочники.ПриоритетыРабот.ПриоритетыРаботы(Работа, ПроектРаботы);
	
	РеквизитыФормыСозданы = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Приоритеты");
	
	МаксимальныйУровеньПриоритета = Константы.МаксимальныйПорядокПриоритетаРаботы.Получить();
	Если Не РеквизитыФормыСозданы Тогда
		ДобавитьРеквизитыФормыПриоритетФормаЭлемента(Форма, МаксимальныйУровеньПриоритета);
	КонецЕсли;
	
	УстановитьЗначенияРеквизитовПриоритетаВФорме(Форма.Приоритеты, ПриоритетыРаботы, Истина);
	Форма.ЕстьПравоИзмененияПриоритета = ПриоритетыОчередиРаботыПовтИсп.ПравоИзмененияПриоритета(ПроектРаботы, Справочники[Работа.Метаданные().Имя].ПустаяСсылка());
	
	СформироватьЭлементыФормыПриоритетыФормаЭлемента(Форма, ЭлементГруппаФормы, МаксимальныйУровеньПриоритета);
	
КонецПроцедуры

// Устанавливает условное оформление по приоритетам в форме списка
//
// Параметры:
//  Список              - ДинамическийСписок - список, для которого устанавливается условное оформление
//  Проект              - СправочникСсылка.Проект - проект, по которому установлен отбор в списке.
//  ИмяОформляемогоПоля - Строка - имя оформляемой колонки списка.
//  ИмяПоляПриоритет    - Строка -имя реквизита списка, который содержит данные приоритета.
//
Процедура УстановитьУсловноеОформлениеСписка(Список, Проект = Неопределено, ИмяОформляемогоПоля = "Приоритет", ИмяПоляПриоритет = "Приоритет") Экспорт
	
	УсловноеОформлениеСписка = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	
	ПриоритетПоУмолчанию = Справочники.ПриоритетыРабот.ПустаяСсылка();
	ДанныеПриоритетов = Справочники.ПриоритетыРабот.ДанныеДействующихПриоритетов(Проект);
	
	// Выделение цветом приоритета
	
	Для Каждого ДанныеПриоритета Из ДанныеПриоритетов Цикл
		
		ЭлементОформления = УсловноеОформлениеСписка.Элементы.Добавить();
		ЭлементОформления.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выделение цветом приоритета %1'"), ДанныеПриоритета.Наименование);
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяОформляемогоПоля);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляПриоритет);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ДанныеПриоритета.Приоритет;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ДанныеПриоритета.Цвет);
		
		Если ДанныеПриоритета.ПоУмолчанию Тогда
			ПриоритетПоУмолчанию = ДанныеПриоритета.Приоритет;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ПриоритетПоУмолчанию", ПриоритетПоУмолчанию, Истина);
	
КонецПроцедуры

// Устанавливает условное оформление по приоритетам для элемента формы
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - условное оформление формы.
//  ИмяЭлемента        - Строка - имя элемента формы, для которого устанавливается условное оформление.
//  ИмяПоля            - Строка -имя реквизита формы, который содержит данные приоритета.
//
Процедура УстановитьУсловноеЭлементаФормы(УсловноеОформление, ИмяЭлемента, ИмяПоля) Экспорт
	
	ДанныеПриоритетов = Справочники.ПриоритетыРабот.ДанныеДействующихПриоритетов();
	
	// Выделение цветом приоритета
	
	Для Каждого ДанныеПриоритета Из ДанныеПриоритетов Цикл
		
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выделение цветом приоритета %1'"), ДанныеПриоритета.Наименование);
		
		ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ДанныеПриоритета.Приоритет;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ДанныеПриоритета.Цвет);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует реквизиты и элементы формы в форме списка объектов контроля
//
// Параметры:
//  Форма                           - ФормаКлиентскогоПриложения - форма списка объектов контроля
//  СпискиДляВыводаКомандПриоритета - Массив - состоит из структур, описывающих правила размещения команд изменения приоритета.
//                                           описание элементов структуры см. ДанныеСпискаДляВыводаКомандПриоритета
//
Процедура НастроитьЭлементыПриоритетыВФормеСписка(Форма, СпискиДляВыводаКомандПриоритета, ПустаяСсылкаТипРаботы, Проект = Неопределено) Экспорт
	
	Если Проект = Неопределено Тогда
		Проект = ПараметрыСеанса.ТекущийПроект;
	КонецЕсли;
	
	ПравоИзменения = ПриоритетыОчередиРаботыПовтИсп.ПравоИзмененияПриоритета(Проект, Справочники[ПустаяСсылкаТипРаботы.Метаданные().Имя].ПустаяСсылка());
	Если Не ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ФормированиеЭлементовНеобходимо(Проект) Тогда
		
		Для Каждого СписокДляВыводаКомандПриоритета Из СпискиДляВыводаКомандПриоритета Цикл
			Форма.Элементы[СписокДляВыводаКомандПриоритета.ИмяЭлементаКолонкиСписка].Видимость = Ложь;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Приоритеты = Справочники.ПриоритетыРабот.ДанныеДействующихПриоритетов(Проект);
	
	Если Приоритеты.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитТаблицаСоздан = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПриоритетыСписок");
	
	ДобавитьРеквизитыФормыИзменитьПриоритетФормаСписка(Форма, Приоритеты, СпискиДляВыводаКомандПриоритета);
	Если Не РеквизитТаблицаСоздан Тогда
		УстановитьЗначенияРеквизитовПриоритетаВФорме(Форма.ПриоритетыСписок, Приоритеты, Ложь);
	КонецЕсли;
	СформироватьЭлементыФормыИзменитьПриоритетФормаСписка(Форма, СпискиДляВыводаКомандПриоритета);
	
КонецПроцедуры

// Конструктор структуры, описывающей описывающих правила размещения команд изменения приоритета.
//
// Параметры:
//  ИмяСписка                - Строка - имя динамического списка, для которого размещаются команды.
//  ИмяГруппыФормы           - Строка - имя группы формы, в которой будут размещены команды.
//  ИмяГруппыКонтекстноеМеню - Строка - имя группы контекстного меню, в которой будут размещены команды.
//
// Возвращаемое значение:
//   Структура   - содержит обернутые в структуру переданные параметры
//
Функция ДанныеСпискаДляВыводаКомандПриоритета(ИмяСписка, ИмяГруппыФормы, ИмяГруппыКонтекстноеМеню, ИмяЭлементаКолонкиСписка) Экспорт
	
	ДанныеСписка = Новый Структура;
	ДанныеСписка.Вставить("ИмяСписка",                ИмяСписка);
	ДанныеСписка.Вставить("ИмяГруппыФормы",           ИмяГруппыФормы);
	ДанныеСписка.Вставить("ИмяГруппыКонтекстноеМеню", ИмяГруппыКонтекстноеМеню);
	ДанныеСписка.Вставить("ИмяЭлементаКолонкиСписка", ИмяЭлементаКолонкиСписка);
	
	Возврат ДанныеСписка;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет обработку команды постановки объекта на контроль
//
// Параметры:
//  ПараметрыИзменения - Структура - см. ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета
//
Функция РезультатИзмененияПриоритетаРаботы(ПараметрыИзменения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",   Истина);
	Результат.Вставить("Сообщение", СтрШаблон(НСтр("ru = 'Приоритет изменен на ""%1""'"), ПараметрыИзменения.Приоритет));
	
	Если Не ЗначениеЗаполнено(ПараметрыИзменения.Проект) Тогда
		ПараметрыИзменения.Проект = ПроектРаботы(ПараметрыИзменения.Работа);
	КонецЕсли;
	
	ВозможностьИзменения = Справочники.ПриоритетыРабот.ИзменениеПриоритетаРаботыВозможно(ПараметрыИзменения);
	
	Если ВозможностьИзменения.ИзменениеВозможно Тогда
		
		ТаблицаИзмененныхПриоритетов = НовыйТаблицаИзменийПриоритета();
		НоваяСтрока = ТаблицаИзмененныхПриоритетов.Добавить();
		НоваяСтрока.Работа          = ПараметрыИзменения.Работа;
		НоваяСтрока.Приоритет       = ПараметрыИзменения.Приоритет;
		НоваяСтрока.СтарыйПриоритет = ПараметрыИзменения.СтарыйПриоритет;
		НоваяСтрока.Проект          = ПараметрыИзменения.Проект;
		
		УстановитьПривилегированныйРежим(Истина);
		
		РегистрыСведений.ПриоритетыРабот.ЗаписатьДанные(ПараметрыИзменения);
		
		РегистрыСведений.ПриоритетыРабот.ОтработатьИзменениеПриоритетаМассиваРабот(ТаблицаИзмененныхПриоритетов);
		
	Иначе
		Результат.Успешно = Ложь;
		Результат.Сообщение = ВозможностьИзменения.ПричинаНевозможности;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обработку команды изменения приоритетов у нескольких работ
//
// Параметры:
//  ПараметрыПостановки - Массив - состоит из структур, см. ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета
//
// Возвращаемое значение:
//   Структура   - результат постановки, содержит:
//    * ВсегоОбъектов          - Число - количество объектов, для которых требовалось изменить приоритет.
//    * ИзмененПриоритет       - Число - количество объектов, для которых был изменен приоритет.
//    * НеПоставленоНаКонтроль - Число - количество объектов, для которых не был изменен приоритет.
//    * СообщенияПользователю  - Массив - сообщения о неудачном изменении приоритета, которые требуется показать пользователю.
//
Функция РезультатИзмененияПриоритетаМассиваРабот(ПараметрыИзмененияПриоритета) Экспорт
	
	РезультатПостановки = Новый Структура;
	РезультатПостановки.Вставить("ВсегоОбъектов",         ПараметрыИзмененияПриоритета.Количество());
	РезультатПостановки.Вставить("ИзмененПриоритет",      0);
	РезультатПостановки.Вставить("НеИзмененПриоритет",    0);
	РезультатПостановки.Вставить("СообщенияПользователю", Новый Массив);
	
	ТаблицаКИзменениюПриоритета  = ТаблицаКИзменениюПриоритетаПоПараметрамИзменения(ПараметрыИзмененияПриоритета);
	ТаблицаИзмененныхПриоритетов = НовыйТаблицаИзменийПриоритета();
	Справочники.ПриоритетыРабот.ПроверитьРаботыНаВозможностьИзмененияПриоритета(ТаблицаКИзменениюПриоритета);
	
	Для Каждого ДанныеРаботы Из ТаблицаКИзменениюПриоритета Цикл
		
		Если ДанныеРаботы.УжеУстановлен Тогда
			
			ДанныеСообщения = НовыйДанныеСообщенияПользователю();
			ДанныеСообщения.Работа = ДанныеРаботы.Работа;
			ДанныеСообщения.ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменение приоритета не выполнено. Для ""%1"" уже установлени приоритет ""%2""'"), 
			                                           ДанныеРаботы.Работа, ДанныеРаботы.Приоритет);
			
			РезультатПостановки.СообщенияПользователю.Добавить(ДанныеСообщения);
			РезультатПостановки.НеИзмененПриоритет = РезультатПостановки.НеИзмененПриоритет + 1;
			Продолжить;
			
		ИначеЕсли ДанныеРаботы.ПроектНеСоответствует Тогда
			
			ДанныеСообщения = НовыйДанныеСообщенияПользователю();
			ДанныеСообщения.Работа         = ДанныеРаботы.Работа;
			ДанныеСообщения.ТекстСообщения = НСтр("ru = 'Изменение приоритета не выполнено. Устанавливаемый приоритет не соответствует проекту работы.'");
			
			РезультатПостановки.СообщенияПользователю.Добавить(ДанныеСообщения);
			РезультатПостановки.НеИзмененПриоритет = РезультатПостановки.НеИзмененПриоритет + 1;
			Продолжить;
			
		КонецЕсли;
		
		РегистрыСведений.ПриоритетыРабот.ЗаписатьДанные(ДанныеРаботы);
		
		НоваяСтрока = ТаблицаИзмененныхПриоритетов.Добавить();
		НоваяСтрока.Работа          = ДанныеРаботы.Работа;
		НоваяСтрока.Приоритет       = ДанныеРаботы.Приоритет;
		НоваяСтрока.СтарыйПриоритет = ДанныеРаботы.СтарыйПриоритет;
		НоваяСтрока.Проект          = ДанныеРаботы.Проект;
		
		РезультатПостановки.ИзмененПриоритет = РезультатПостановки.ИзмененПриоритет + 1;
		
	КонецЦикла;
	
	Если ТаблицаИзмененныхПриоритетов.Количество() > 0 Тогда
		
		РегистрыСведений.ПриоритетыРабот.ОтработатьИзменениеПриоритетаМассиваРабот(ТаблицаИзмененныхПриоритетов);
		
	КонецЕсли;
	
	Возврат РезультатПостановки;
	
КонецФункции

// Конструктор таблицы изменения данных приоритета
//
// Параметры:
//  ПараметрыПостановки - Массив - состоит из структур, см. ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета
//
// Возвращаемое значение:
//   Структура   - результат постановки, содержит:
//    * Работа           - СправочникСсылка.ТехническиеПроекты,
//                         СправочникСсылка.ЗадачиПроцесса - ссылка на работу.
//    * Приоритет        - СправочникСсылка.ПриоритетыРабот - новый приоритет.
//    * СтарыйПриоритет  - СправочникСсылка.ПриоритетыРабот - текущий приоритет.
//    * Проект           - СправочникСсылка.Проект - проект работы.
//
Функция НовыйТаблицаИзменийПриоритета() Экспорт
	
	ТаблицаКИзменению = Новый ТаблицаЗначений;
	ТаблицаКИзменению.Колонки.Добавить("Работа",          Новый ОписаниеТипов(ВозможныеТипыРабот()));
	ТаблицаКИзменению.Колонки.Добавить("Приоритет",       Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	ТаблицаКИзменению.Колонки.Добавить("СтарыйПриоритет", Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	ТаблицаКИзменению.Колонки.Добавить("Проект",          Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	
	Возврат ТаблицаКИзменению;
	
КонецФункции

// Получает проект работы
//
//  Работа          - СправочникСсылка.ТехническиеПроекты,
//                    СправочникСсылка.ЗадачиПроцесса - ссылка на работу.
// Возвращаемое значение:
//   СправочникСсылка.Проекты   - проект работы.
//
Функция ПроектРаботы(Работа) Экспорт
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Работа, "Предмет");
	Иначе
		Предмет = Работа;
	КонецЕсли;
	
	Возврат ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(Предмет);
	
КонецФункции

// Обработчик события "Перед записью" объекта, изменение которого может повлиять на приоритеты подчиненных работ
//
//  Источник - СправочникОбъект - изменяемый объект.
//  Отказ    - Булево - признак отказа от записи объекта.
//
Процедура ПриоритетыПередЗаписьюОбъектаПередЗаписью(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот") Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйПроект                            = Неопределено;
	ТекущийПриоритет                        = Неопределено;
	ВНовомПроектеИспользуютсяПриоритеты     = Ложь;
	ВСтаромПроектеИспользуютсяПриоритеты    = Ложь;
	КоличествоЗаписейПриоритетаНовыйПроект  = 0;
	ЕстьПриоритетПоУмолчаниюНовыйПроект     = Ложь;
	КоличествоЗаписейПриоритетаСтарыйПроект = 0;
	ЕстьПриоритетПоУмолчаниюСтарыйПроект    = Ложь;
	ПриоритетПоУмолчаниюНовыйПроект         = Неопределено;
	ТребуетсяУстановитьПриоритет            = Ложь;
	ТребуетсяУдалениеЗаписиПриоритета       = Ложь;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ТехническиеПроекты") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехническиеПроекты.Владелец КАК Владелец
		|ИЗ
		|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
		|ГДЕ
		|	ТехническиеПроекты.Ссылка = &ТехническийПроект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ
		|	ПриоритетыРабот.Приоритет КАК Приоритет
		|ИЗ
		|	РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Работа = &ТехническийПроект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ
		|	СУММА(1)   КАК КоличествоПриоритетов,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьПриоритетПоУмолчанию
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец = &НовыйПроект
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////3
		|ВЫБРАТЬ
		|	Проекты.ИспользоватьПриоритеты КАК ИспользоватьПриоритеты
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &НовыйПроект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////4
		|ВЫБРАТЬ
		|	ПриоритетыРабот.Ссылка
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец = &НовыйПроект
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|	И ПриоритетыРабот.ПриоритетПоУмолчанию";
		
		Запрос.УстановитьПараметр("ТехническийПроект", Источник.Ссылка);
		Запрос.УстановитьПараметр("НовыйПроект",       Источник.Владелец);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаТекущийПроект = Результат[0].Выбрать();
		Если ВыборкаТекущийПроект.Следующий() Тогда
			СтарыйПроект = ВыборкаТекущийПроект.Владелец;
		КонецЕсли;
		
		ВыборкаТекущийПриоритет = Результат[1].Выбрать();
		Если ВыборкаТекущийПриоритет.Следующий() Тогда
			ТекущийПриоритет = ВыборкаТекущийПриоритет.Приоритет;
		КонецЕсли;
		
		ВыборкаДанныеПриоритетовНовогоПроекта = Результат[2].Выбрать();
		Если ВыборкаДанныеПриоритетовНовогоПроекта.Следующий() Тогда
			КоличествоЗаписейПриоритетаНовыйПроект = ВыборкаДанныеПриоритетовНовогоПроекта.КоличествоПриоритетов;
			ЕстьПриоритетПоУмолчаниюНовыйПроект    = ВыборкаДанныеПриоритетовНовогоПроекта.ЕстьПриоритетПоУмолчанию;
		КонецЕсли;
		
		ВыборкаДанныеНовогоПроекта = Результат[3].Выбрать();
		Если ВыборкаДанныеНовогоПроекта.Следующий() Тогда
			ВНовомПроектеИспользуютсяПриоритеты = ВыборкаДанныеНовогоПроекта.ИспользоватьПриоритеты;
		КонецЕсли;
		
		ВыборкаПриоритетПоУмолчанию = Результат[4].Выбрать();
		Если ВыборкаПриоритетПоУмолчанию.Следующий() Тогда
			ПриоритетПоУмолчаниюНовыйПроект = ВыборкаПриоритетПоУмолчанию.Ссылка;
		КонецЕсли;
		
		ВНовомПроектеИспользуютсяПриоритеты = ВНовомПроектеИспользуютсяПриоритеты 
		                                      И КоличествоЗаписейПриоритетаНовыйПроект > 1
		                                      И ЕстьПриоритетПоУмолчаниюНовыйПроект;
		
		Если СтарыйПроект = Источник.Владелец Тогда
			
			Если ЗначениеЗаполнено(ТекущийПриоритет) 
				И Не ВНовомПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУдалениеЗаписиПриоритета = Истина;
				
			ИначеЕсли Не ЗначениеЗаполнено(ТекущийПриоритет)
				И ВНовомПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУстановитьПриоритет = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущийПриоритет) 
				И Не ВНовомПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУдалениеЗаписиПриоритета = Истина;
				
			ИначеЕсли ВНовомПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУстановитьПриоритет = Истина;
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Процессы")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ПрофилиПользователей")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ОбработчикиОбновленияИнформационнойБазы")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ОбъектыМетаданных")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ФункцииСистемы")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.Ошибки") 
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.Ветки") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Владелец КАК Проект
		|ПОМЕСТИТЬ СтарыйПроект
		|ИЗ
		|	&ТаблицаСправочника КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ
		|	СтарыйПроект.Проект КАК Проект
		|ИЗ
		|	СтарыйПроект КАК СтарыйПроект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ
		|	ЕстьNull(СУММА(1),0) КАК КоличествоПриоритетов,
		|	ЕстьNull(МАКСИМУМ(ВЫБОР
		|			КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ),0) КАК ЕстьПриоритетПоУмолчанию
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец = &НовыйПроект
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////3
		|ВЫБРАТЬ
		|	ЕстьNull(СУММА(1),0) КАК КоличествоПриоритетов,
		|	ЕстьNull(МАКСИМУМ(ВЫБОР
		|			КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ),0) КАК ЕстьПриоритетПоУмолчанию
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец В
		|			(ВЫБРАТЬ
		|				СтарыйПроект.Проект
		|			ИЗ
		|				СтарыйПроект)
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////4
		|ВЫБРАТЬ
		|	Проекты.ИспользоватьПриоритеты КАК ИспользоватьПриоритеты
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &НовыйПроект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////5
		|ВЫБРАТЬ
		|	Проекты.ИспользоватьПриоритеты КАК ИспользоватьПриоритеты
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка В
		|			(ВЫБРАТЬ
		|				СтарыйПроект.Проект
		|			ИЗ
		|				СтарыйПроект)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////6
		|ВЫБРАТЬ
		|	ПриоритетыРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец = &НовыйПроект
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|	И ПриоритетыРабот.ПриоритетПоУмолчанию";
		
		Запрос.УстановитьПараметр("Ссылка",      Источник.Ссылка);
		Запрос.УстановитьПараметр("НовыйПроект", Источник.Владелец);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСправочника", "Справочник." + Источник.Метаданные().Имя);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаТекущийПроект = Результат[1].Выбрать();
		Если ВыборкаТекущийПроект.Следующий() Тогда
			СтарыйПроект = ВыборкаТекущийПроект.Проект;
		КонецЕсли;
		
		ВыборкаДанныеПриоритетовНовогоПроекта = Результат[2].Выбрать();
		Если ВыборкаДанныеПриоритетовНовогоПроекта.Следующий() Тогда
			КоличествоЗаписейПриоритетаНовыйПроект = ВыборкаДанныеПриоритетовНовогоПроекта.КоличествоПриоритетов;
			ЕстьПриоритетПоУмолчаниюНовыйПроект    = ВыборкаДанныеПриоритетовНовогоПроекта.ЕстьПриоритетПоУмолчанию;
		КонецЕсли;
		
		ВыборкаДанныеПриоритетовСтарогоПроекта = Результат[3].Выбрать();
		Если ВыборкаДанныеПриоритетовСтарогоПроекта.Следующий() Тогда
			КоличествоЗаписейПриоритетаСтарыйПроект = ВыборкаДанныеПриоритетовСтарогоПроекта.КоличествоПриоритетов;
			ЕстьПриоритетПоУмолчаниюСтарыйПроект    = ВыборкаДанныеПриоритетовСтарогоПроекта.ЕстьПриоритетПоУмолчанию;
		КонецЕсли;
		
		ВыборкаДанныеНовогоПроекта = Результат[4].Выбрать();
		Если ВыборкаДанныеНовогоПроекта.Следующий() Тогда
			ВНовомПроектеИспользуютсяПриоритеты = ВыборкаДанныеНовогоПроекта.ИспользоватьПриоритеты;
		КонецЕсли;
		
		ВыборкаДанныеСтарогоПроекта = Результат[5].Выбрать();
		Если ВыборкаДанныеСтарогоПроекта.Следующий() Тогда
			ВСтаромПроектеИспользуютсяПриоритеты = ВыборкаДанныеСтарогоПроекта.ИспользоватьПриоритеты;
		КонецЕсли;
		
		ВыборкаПриоритетПоУмолчанию = Результат[6].Выбрать();
		Если ВыборкаПриоритетПоУмолчанию.Следующий() Тогда
			ПриоритетПоУмолчаниюНовыйПроект = ВыборкаПриоритетПоУмолчанию.Ссылка;
		КонецЕсли;
		
		ВНовомПроектеИспользуютсяПриоритеты = ВНовомПроектеИспользуютсяПриоритеты 
		                                      И КоличествоЗаписейПриоритетаНовыйПроект > 1
		                                      И ЕстьПриоритетПоУмолчаниюНовыйПроект;
		
		ВСтаромПроектеИспользуютсяПриоритеты = ВСтаромПроектеИспользуютсяПриоритеты 
		                                      И КоличествоЗаписейПриоритетаСтарыйПроект > 1
		                                      И ЕстьПриоритетПоУмолчаниюСтарыйПроект;
		
		Если СтарыйПроект <> Источник.Владелец Тогда
			
			Если ВНовомПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУстановитьПриоритет = Истина;
				
			ИначеЕсли Не ВНовомПроектеИспользуютсяПриоритеты
				И ВСтаромПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУдалениеЗаписиПриоритета = Истина;
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.СборкиВерсии")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ФункцииМеханизмов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Владелец.Владелец КАК Проект
		|ПОМЕСТИТЬ СтарыйПроект
		|ИЗ
		|	&ТаблицаСправочника КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ
		|	СтарыйПроект.Проект КАК Проект
		|ИЗ
		|	СтарыйПроект КАК СтарыйПроект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоПриоритетов,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьПриоритетПоУмолчанию
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец = &НовыйПроект
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////3
		|ВЫБРАТЬ
		|	СУММА(1) КАК КоличествоПриоритетов,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ЕстьПриоритетПоУмолчанию
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец В
		|			(ВЫБРАТЬ
		|				СтарыйПроект.Проект
		|			ИЗ
		|				СтарыйПроект)
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////4
		|ВЫБРАТЬ
		|	Проекты.ИспользоватьПриоритеты КАК ИспользоватьПриоритеты
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &НовыйПроект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////5
		|ВЫБРАТЬ
		|	Проекты.ИспользоватьПриоритеты КАК ИспользоватьПриоритеты
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка В
		|			(ВЫБРАТЬ
		|				СтарыйПроект.Проект
		|			ИЗ
		|				СтарыйПроект)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////6
		|ВЫБРАТЬ
		|	ПриоритетыРабот.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
		|ГДЕ
		|	ПриоритетыРабот.Владелец = &НовыйПроект
		|	И НЕ ПриоритетыРабот.ПометкаУдаления
		|	И ПриоритетыРабот.ПриоритетПоУмолчанию";
		
		Запрос.УстановитьПараметр("Ссылка",      Источник.Ссылка);
		Запрос.УстановитьПараметр("НовыйПроект", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Владелец, "Владелец"));
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаСправочника", "Справочник." + Источник.Метаданные().Имя);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаТекущийПроект = Результат[1].Выбрать();
		Если ВыборкаТекущийПроект.Следующий() Тогда
			СтарыйПроект = ВыборкаТекущийПроект.Проект;
		КонецЕсли;
		
		ВыборкаДанныеПриоритетовНовогоПроекта = Результат[2].Выбрать();
		Если ВыборкаДанныеПриоритетовНовогоПроекта.Следующий() Тогда
			КоличествоЗаписейПриоритетаНовыйПроект = ВыборкаДанныеПриоритетовНовогоПроекта.КоличествоПриоритетов;
			ЕстьПриоритетПоУмолчаниюНовыйПроект    = ВыборкаДанныеПриоритетовНовогоПроекта.ЕстьПриоритетПоУмолчанию;
		КонецЕсли;
		
		ВыборкаДанныеПриоритетовСтарогоПроекта = Результат[3].Выбрать();
		Если ВыборкаДанныеПриоритетовСтарогоПроекта.Следующий() Тогда
			КоличествоЗаписейПриоритетаСтарыйПроект = ВыборкаДанныеПриоритетовСтарогоПроекта.КоличествоПриоритетов;
			ЕстьПриоритетПоУмолчаниюСтарыйПроект    = ВыборкаДанныеПриоритетовСтарогоПроекта.ЕстьПриоритетПоУмолчанию;
		КонецЕсли;
		
		ВыборкаДанныеНовогоПроекта = Результат[4].Выбрать();
		Если ВыборкаДанныеНовогоПроекта.Следующий() Тогда
			ВНовомПроектеИспользуютсяПриоритеты = ВыборкаДанныеНовогоПроекта.ИспользоватьПриоритеты;
		КонецЕсли;
		
		ВыборкаДанныеСтарогоПроекта = Результат[5].Выбрать();
		Если ВыборкаДанныеСтарогоПроекта.Следующий() Тогда
			ВСтаромПроектеИспользуютсяПриоритеты = ВыборкаДанныеСтарогоПроекта.ИспользоватьПриоритеты;
		КонецЕсли;
		
		ВыборкаПриоритетПоУмолчанию = Результат[6].Выбрать();
		Если ВыборкаПриоритетПоУмолчанию.Следующий() Тогда
			ПриоритетПоУмолчаниюНовыйПроект = ВыборкаПриоритетПоУмолчанию.Ссылка;
		КонецЕсли;
		
		ВНовомПроектеИспользуютсяПриоритеты = ВНовомПроектеИспользуютсяПриоритеты 
		                                      И КоличествоЗаписейПриоритетаНовыйПроект > 1
		                                      И ЕстьПриоритетПоУмолчаниюНовыйПроект;
		
		ВСтаромПроектеИспользуютсяПриоритеты = ВСтаромПроектеИспользуютсяПриоритеты 
		                                      И КоличествоЗаписейПриоритетаСтарыйПроект > 1
		                                      И ЕстьПриоритетПоУмолчаниюСтарыйПроект;
		
		Если СтарыйПроект <> Источник.Владелец Тогда
			
			Если ВНовомПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУстановитьПриоритет = Истина;
				
			ИначеЕсли Не ВНовомПроектеИспользуютсяПриоритеты
				И ВСтаромПроектеИспользуютсяПриоритеты Тогда
				
				ТребуетсяУдалениеЗаписиПриоритета = Истина;
			
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда
		
		ИспользоватьПриоритетыСтарый = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ИспользоватьПриоритеты");
		Если ИспользоватьПриоритетыСтарый = Неопределено Тогда
			ИспользоватьПриоритетыСтарый = Ложь;
		КонецЕсли;
		
		Если Источник.ИспользоватьПриоритеты
			И Не ИспользоватьПриоритетыСтарый Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ТребуетсяЗаполнениеПустыхПриоритетов", Истина);
			
		ИначеЕсли Не Источник.ИспользоватьПриоритеты
			И ИспользоватьПриоритетыСтарый Тогда
			
			Источник.ДополнительныеСвойства.Вставить("ТребуетсяОчисткаПриоритетовПоПроекту", Истина);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ТребуетсяУдалениеЗаписиПриоритета Тогда
		Источник.ДополнительныеСвойства.Вставить("ТребуетсяУдалениеЗаписиПриоритета", Истина);
	Иначе
		Источник.ДополнительныеСвойства.Вставить("УстановитьПриоритет", ПриоритетПоУмолчаниюНовыйПроект);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "При записи" объекта, изменение которого может повлиять на приоритеты подчиненных работ
//
//  Источник - СправочникОбъект - изменяемый объект.
//  Отказ    - Булево - признак отказа от записи объекта.
//
Процедура ПриоритетыПриЗаписиОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ТехническиеПроекты") Тогда
	
		Если Источник.ДополнительныеСвойства.Свойство("ТребуетсяУдалениеЗаписиПриоритета")
			И Источник.ДополнительныеСвойства.ТребуетсяУдалениеЗаписиПриоритета  Тогда
			
			ДанныеЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
			ДанныеЗаписи.Работа = Источник.Ссылка;
			РегистрыСведений.ПриоритетыРабот.УдалитьЗапись(ДанныеЗаписи);
			
			ТаблицаИзмененныхПриоритетов = НовыйТаблицаИзменийПриоритета();
			
			НоваяСтрока = ТаблицаИзмененныхПриоритетов.Добавить();
			НоваяСтрока.Работа          = ДанныеЗаписи.Работа;
			НоваяСтрока.Приоритет       = Справочники.ПриоритетыРабот.ПустаяСсылка();
			НоваяСтрока.СтарыйПриоритет = Справочники.ПриоритетыРабот.ПустаяСсылка();
			НоваяСтрока.Проект          = Источник.Владелец;
			
			РегистрыСведений.ПриоритетыРабот.ОтработатьИзменениеПриоритетаМассиваРабот(ТаблицаИзмененныхПриоритетов);
			
		ИначеЕсли Источник.ДополнительныеСвойства.Свойство("УстановитьПриоритет")
			И ЗначениеЗаполнено(Источник.ДополнительныеСвойства.УстановитьПриоритет)  Тогда
			
			ДанныеЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
			ДанныеЗаписи.Работа    = Источник.Ссылка;
			ДанныеЗаписи.Приоритет = Источник.ДополнительныеСвойства.УстановитьПриоритет;
			РегистрыСведений.ПриоритетыРабот.ЗаписатьДанные(ДанныеЗаписи);
			
			ТаблицаИзмененныхПриоритетов = НовыйТаблицаИзменийПриоритета();
			
			НоваяСтрока = ТаблицаИзмененныхПриоритетов.Добавить();
			НоваяСтрока.Работа          = ДанныеЗаписи.Работа;
			НоваяСтрока.Приоритет       = ДанныеЗаписи.Приоритет;
			НоваяСтрока.СтарыйПриоритет = Справочники.ПриоритетыРабот.ПустаяСсылка();
			НоваяСтрока.Проект          = Источник.Владелец;
			
			РегистрыСведений.ПриоритетыРабот.ОтработатьИзменениеПриоритетаМассиваРабот(ТаблицаИзмененныхПриоритетов);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Процессы")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ПрофилиПользователей")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ОбработчикиОбновленияИнформационнойБазы")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ОбъектыМетаданных")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.ФункцииСистемы")
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.Ошибки") 
		Или ТипЗнч(Источник) = Тип("СправочникОбъект.Ветки") Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("ТребуетсяУдалениеЗаписиПриоритета")
			И Источник.ДополнительныеСвойства.ТребуетсяУдалениеЗаписиПриоритета Тогда
			
			РегистрыСведений.ПриоритетыРабот.УдалитьПриоритетыЗадачПредмета(Источник.Ссылка);
			
		ИначеЕсли Источник.ДополнительныеСвойства.Свойство("УстановитьПриоритет")
			И ЗначениеЗаполнено(Источник.ДополнительныеСвойства.УстановитьПриоритет)  Тогда
			
			РегистрыСведений.ПриоритетыРабот.УстановитьПриоритетЗадачПредмета(Источник.Ссылка,
			                                                                  Источник.ДополнительныеСвойства.УстановитьПриоритет);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("СправочникОбъект.Проекты") Тогда
	
		Если Источник.ДополнительныеСвойства.Свойство("ТребуетсяЗаполнениеПустыхПриоритетов")
			И Источник.ДополнительныеСвойства.ТребуетсяЗаполнениеПустыхПриоритетов Тогда
			
			Справочники.ПриоритетыРабот.УстановитьПриоритетПоУмолчаниюВФоне(Источник.Ссылка, Истина);
			
		КонецЕсли;
		
		Если Источник.ДополнительныеСвойства.Свойство("ТребуетсяОчисткаПриоритетовПоПроекту")
			И Источник.ДополнительныеСвойства.ТребуетсяОчисткаПриоритетовПоПроекту Тогда
			
			Справочники.ПриоритетыРабот.ОчиститьПриоритетыПоПроектуВФоне(Источник.Ссылка, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик перетаскивания строки в очереди работ
//
//  Источник                - СправочникСсылка.Пользователи - сотрудник, в чей очереди выполняется перетаскивание.
//  ДанныеПереносимойСтроки - ДанныеФормыСтруктура - данные переносимой строки.
//  ДанныеСтрокиНазначения  - ДанныеФормыСтруктура - данные строки назначения.
//
Процедура ОбработатьПеретаскиваниеСтроки(Сотрудник, ДанныеПереносимойСтроки, ДанныеСтрокиНазначения) Экспорт
	
	ПараметрыПереноса = РегистрыСведений.ОчередиРаботСотрудников.ПараметрыПереносаЗадачиВОчереди();
	
	ПараметрыПереноса.Задача                   = ДанныеПереносимойСтроки.Ссылка;
	ПараметрыПереноса.Сотрудник                = Сотрудник;
	ПараметрыПереноса.СтарыйПриоритет          = ДанныеПереносимойСтроки.Приоритет;
	ПараметрыПереноса.НовыйПриоритет           = ДанныеСтрокиНазначения.Приоритет;
	ПараметрыПереноса.ПорядокСтарогоПриоритета = ДанныеПереносимойСтроки.ПорядокПриоритета;
	ПараметрыПереноса.ПорядокНовогоПриоритета  = ДанныеСтрокиНазначения.ПорядокПриоритета;
	
	ПараметрыПереноса.КудаПереносим   = ДанныеСтрокиНазначения.Ссылка;
	ПараметрыПереноса.ВариантПереноса = РегистрыСведений.ОчередиРаботСотрудников.ВариантыПереносаЗадачВОчереди().ПередЗадачей;
	
	РегистрыСведений.ОчередиРаботСотрудников.ПеренестиЗадачуВОчереди(ПараметрыПереноса);
	
КонецПроцедуры

// Обработчик команды изменения положения задачи в очереди
//
//  Источник                - СправочникСсылка.Пользователи - сотрудник, в чей очереди выполняется изменение.
//  ДанныеПереносимойСтроки - ДанныеФормыСтруктура - данные переносимой строки.
//  ВариантПереноса         - Строка - может принимать значения "Вверх" и "Вниз".
//
Процедура ПеренестиЗадачуВОчередиПоКомандеИзСписка(Сотрудник, ДанныеПереносимойСтроки, ВариантПереноса) Экспорт
	
	СоседниеЗадачи = РегистрыСведений.ОчередиРаботСотрудников.СоседниеРаботыВОчереди(Сотрудник, ДанныеПереносимойСтроки.Ссылка);
	
	Если ВариантПереноса = "Вверх" Тогда
		КудаПереносим =  СоседниеЗадачи.Предыдущая;
	Иначе
		КудаПереносим =  СоседниеЗадачи.Следующая;
	КонецЕсли;
	
	Если КудаПереносим = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереноса = РегистрыСведений.ОчередиРаботСотрудников.ПараметрыПереносаЗадачиВОчереди();
	
	ПараметрыПереноса.Задача                   = ДанныеПереносимойСтроки.Ссылка;
	ПараметрыПереноса.Сотрудник                = Сотрудник;
	ПараметрыПереноса.СтарыйПриоритет          = ДанныеПереносимойСтроки.Приоритет;
	ПараметрыПереноса.НовыйПриоритет           = ДанныеПереносимойСтроки.Приоритет;
	ПараметрыПереноса.ПорядокСтарогоПриоритета = ДанныеПереносимойСтроки.ПорядокПриоритета;
	ПараметрыПереноса.ПорядокНовогоПриоритета  = ДанныеПереносимойСтроки.ПорядокПриоритета;
	
	ПараметрыПереноса.КудаПереносим   = КудаПереносим;
	Если ВариантПереноса = "Вверх" Тогда
		ПараметрыПереноса.ВариантПереноса = РегистрыСведений.ОчередиРаботСотрудников.ВариантыПереносаЗадачВОчереди().ПередЗадачей;
	Иначе
		ПараметрыПереноса.ВариантПереноса = РегистрыСведений.ОчередиРаботСотрудников.ВариантыПереносаЗадачВОчереди().ПослеЗадачи;
	КонецЕсли;
	
	РегистрыСведений.ОчередиРаботСотрудников.ПеренестиЗадачуВОчереди(ПараметрыПереноса);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроектРаботыИзФормыОбъекта(ФормаЭлементаРаботы)
	
	Работа = ФормаЭлементаРаботы.Объект.Ссылка;
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		Возврат ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(ФормаЭлементаРаботы.Объект.Предмет);
	Иначе
		Возврат ФормаЭлементаРаботы.Объект.Владелец;
	КонецЕсли;
	
КонецФункции

Функция ФормированиеЭлементовНеобходимо(Проект)
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ПриоритетыРабот) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПриоритетПоУмолчанию = Справочники.ПриоритетыРабот.ПриоритетПоУмолчанию(Проект);
	Если ПриоритетПоУмолчанию = Неопределено  Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СформироватьЭлементыФормыИзменитьПриоритетФормаСписка(Форма, СпискиДляВыводаКомандПриоритета)
	
	ПриоритетыРабот = Форма.ПриоритетыСписок;
	
	Для Каждого СписокДляВыводаКомандПриоритета Из СпискиДляВыводаКомандПриоритета Цикл
		
		ЭлементГруппаФормы                = Форма.Элементы.Найти(СписокДляВыводаКомандПриоритета.ИмяГруппыФормы);
		ЭлементГруппаФормыКонтекстноеМеню = Форма.Элементы.Найти(СписокДляВыводаКомандПриоритета.ИмяГруппыКонтекстноеМеню);
		
		Если ПриоритетыРабот.Количество() > 1 Тогда
			
			ЭлементПодменю = Форма.Элементы.Добавить("ПриоритетПодменю_" + СписокДляВыводаКомандПриоритета.ИмяСписка,
			                                         Тип("ГруппаФормы"),
			                                         ЭлементГруппаФормы);
			
			ЭлементПодменю.Вид                = ВидГруппыФормы.Подменю;
			ЭлементПодменю.Картинка           = БиблиотекаКартинок.ПриоритетПодменю;
			ЭлементПодменю.Заголовок          = НСтр("ru = 'Приоритет'");
			ЭлементПодменю.Отображение        = ОтображениеКнопки.КартинкаИТекст;
			ГруппаДобавленияКоманд            = ЭлементПодменю;
			
			ЭлементПодменюКонтекстноеМеню  = Форма.Элементы.Добавить("ИзменитьПриоритетПодменюКонтекстноеМеню_" + СписокДляВыводаКомандПриоритета.ИмяСписка, 
			                                                         Тип("ГруппаФормы"),
			                                                         ЭлементГруппаФормыКонтекстноеМеню);
			
			ЭлементПодменюКонтекстноеМеню.Вид         = ВидГруппыФормы.Подменю;
			ЭлементПодменюКонтекстноеМеню.Картинка    = БиблиотекаКартинок.ПриоритетПодменю;
			ЭлементПодменюКонтекстноеМеню.Заголовок   = НСтр("ru = 'Изменить приоритет'");
			ЭлементПодменюКонтекстноеМеню.Отображение = ОтображениеКнопки.КартинкаИТекст;
			ГруппаДобавленияКомандКомандноеМеню       = ЭлементПодменюКонтекстноеМеню;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
		Счетчик = 0;
		
		Для Каждого ДанныеПриоритета Из ПриоритетыРабот Цикл
			
			ИмяКоманды                = "УстановитьПриоритет_" + СписокДляВыводаКомандПриоритета.ИмяСписка +"_" + Строка(Счетчик);
			
			ЭлементФормы                = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаДобавленияКоманд);
			ЭлементФормыКонтекстноеМеню = Форма.Элементы.Добавить("ИзменитьПриоритетКонтекстноеМеню_" + СписокДляВыводаКомандПриоритета.ИмяСписка +"_" + Строка(Счетчик),
			                                                      Тип("КнопкаФормы"),
			                                                      ГруппаДобавленияКомандКомандноеМеню);
			
			ЗаголовокКоманды = ДанныеПриоритета.Наименование;
			
			ЭлементФормы.ИмяКоманды  = ИмяКоманды;
			ЭлементФормы.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
			ЭлементФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
			ЭлементФормы.Заголовок   = ЗаголовокКоманды;
			
			ЭлементФормыКонтекстноеМеню.ИмяКоманды  = ИмяКоманды;
			ЭлементФормыКонтекстноеМеню.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
			ЭлементФормыКонтекстноеМеню.Отображение = ОтображениеКнопки.Текст;
			ЭлементФормыКонтекстноеМеню.Заголовок   = ЗаголовокКоманды;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЭлементыФормыПриоритетыФормаЭлемента(Форма, ЭлементГруппаФормы, МаксимальныйУровеньПриоритета)
	
	ПриоритетыРаботы = Форма.Приоритеты;
	
	ЗаголовокПриоритета = "";
	
	ЭлементПодменю = Форма.Элементы.Найти("ПриоритетПодменю");
	
	Если ЭлементПодменю = Неопределено Тогда
	
		ЭлементПодменю = Форма.Элементы.Добавить("ПриоритетПодменю", Тип("ГруппаФормы"), ЭлементГруппаФормы);
		ЭлементПодменю.Вид       = ВидГруппыФормы.Подменю;
		ЭлементПодменю.Картинка  = БиблиотекаКартинок.ПриоритетПодменю;
		ЭлементПодменю.Заголовок = НСтр("ru = 'Не установлен'");
		
		Для Счетчик = 0 По МаксимальныйУровеньПриоритета - 1 Цикл
		
			ИмяКоманды = "УстановитьПриоритет_" + Строка(Счетчик);
			
			ЭлементФормы = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ЭлементПодменю);
			ЭлементФормы.ИмяКоманды     = ИмяКоманды;
			ЭлементФормы.Вид            = ВидКнопкиФормы.ОбычнаяКнопка;
			ЭлементФормы.Отображение    = ОтображениеКнопки.КартинкаИТекст;
			ЭлементФормы.Доступность    = Форма.ЕстьПравоИзмененияПриоритета;
		
		КонецЦикла;
		
	КонецЕсли;
	
	Счетчик = 0;
	Для Каждого ДанныеПриоритета Из ПриоритетыРаботы Цикл
		
		ИмяКоманды = "УстановитьПриоритет_" + Строка(Счетчик);
		
		ЭлементФормы = Форма.Элементы.Найти(ИмяКоманды);
		
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаголовокКоманды = ДанныеПриоритета.Наименование;
		
		ЭлементФормы.Заголовок      = ЗаголовокКоманды;
		ЭлементФормы.Пометка        = ДанныеПриоритета.Установлен;
		ЭлементФормы.Видимость      = Истина;
		
		Если ДанныеПриоритета.Установлен Тогда
			ЭлементПодменю.Заголовок = ДанныеПриоритета.Наименование;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Для Инд = Счетчик По МаксимальныйУровеньПриоритета - 1 Цикл
		
		ИмяКоманды = "УстановитьПриоритет_" + Строка(Инд);
		ЭлементФормы = Форма.Элементы.Найти(ИмяКоманды);
		
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы.Видимость = Ложь;
		
	КонецЦикла;
	
	ЭлементПодменю.Видимость = ПриоритетыРаботы.Количество() > 1;
	
КонецПроцедуры

Процедура УстановитьЗначенияРеквизитовПриоритетаВФорме(ПриоритетыРеквизит, Приоритеты, УказыватьУстановлен = Истина)
	
	ПриоритетыРеквизит.Очистить();
	
	Для Каждого ДанныеПриоритета Из Приоритеты Цикл
		
		НоваяСтрока = ПриоритетыРеквизит.Добавить();
		НоваяСтрока.Приоритет    = ДанныеПриоритета.Приоритет;
		НоваяСтрока.Наименование = ДанныеПриоритета.Наименование;
		НоваяСтрока.Цвет         = ДанныеПриоритета.Цвет;
		
		Если УказыватьУстановлен Тогда
			НоваяСтрока.Установлен = ДанныеПриоритета.Установлен;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормыИзменитьПриоритетФормаСписка(Форма, Приоритеты, СпискиДляВыводаКомандПриоритета)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПриоритетыСписок") Тогда
	
		РеквизитТаблица = Новый РеквизитФормы("ПриоритетыСписок" ,Новый ОписаниеТипов("ТаблицаЗначений"));
		ДобавляемыеРеквизиты.Добавить(РеквизитТаблица);
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Приоритет",    Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"), "ПриоритетыСписок"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(150), "ПриоритетыСписок"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Цвет",         Новый ОписаниеТипов("Цвет"), "ПриоритетыСписок"));
	
	КонецЕсли;
	
	Счетчик = 0;
	
	Для Каждого ДанныеПриоритета Из Приоритеты Цикл
		
		Для Каждого СписокДляВыводаКомандПриоритета Из СпискиДляВыводаКомандПриоритета Цикл
		
			Команда = Форма.Команды.Добавить("УстановитьПриоритет_" + СписокДляВыводаКомандПриоритета.ИмяСписка +"_" +Строка(Счетчик));
			Команда.Действие    = "Подключаемый_УстановитьПриоритет";
			Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		
		КонецЦикла;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыФормыПриоритетФормаЭлемента(Форма, МаксимальныйУровеньПриоритета)
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	РеквизитТаблица = Новый РеквизитФормы("Приоритеты" ,Новый ОписаниеТипов("ТаблицаЗначений"));
	ДобавляемыеРеквизиты.Добавить(РеквизитТаблица);
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Приоритет",              Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"), "Приоритеты"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Наименование",           ОбщегоНазначения.ОписаниеТипаСтрока(150), "Приоритеты"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Установлен",             Новый ОписаниеТипов("Булево"), "Приоритеты"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Цвет",                   Новый ОписаниеТипов("Цвет"), "Приоритеты"));
	
	Для Счетчик = 0 По МаксимальныйУровеньПриоритета - 1 Цикл
		
		Команда = Форма.Команды.Добавить("УстановитьПриоритет_" + Строка(Счетчик));
		Команда.Действие    = "Подключаемый_УстановитьПриоритет";
		Команда.Отображение = ОтображениеКнопки.Текст;
		
	КонецЦикла;
	
	РеквизитЕстьПраво = Новый РеквизитФормы("ЕстьПравоИзмененияПриоритета" ,Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(РеквизитЕстьПраво);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

Функция ТаблицаКИзменениюПриоритетаПоПараметрамИзменения(ПараметрыИзмененияПриоритета)
	
	ТаблицаКИзменению = НовыйТаблицаИзменийПриоритета();
	
	Для Каждого ДанныеИзменяегоПриоритетаРаботы Из ПараметрыИзмененияПриоритета Цикл
		
		НоваяСтрока = ТаблицаКИзменению.Добавить();
		НоваяСтрока.Работа    = ДанныеИзменяегоПриоритетаРаботы.Работа;
		НоваяСтрока.Приоритет = ДанныеИзменяегоПриоритетаРаботы.Приоритет;
		
	КонецЦикла;
	
	Возврат ТаблицаКИзменению;
	
КонецФункции

Функция ВозможныеТипыРабот()

	ВозможныеТипыРабот = Новый Массив;
	ВозможныеТипыРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	ВозможныеТипыРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	
	Возврат ВозможныеТипыРабот;

КонецФункции 

Функция НовыйДанныеСообщенияПользователю()
	
	ДанныеСообщенияПользователю = Новый Структура;
	ДанныеСообщенияПользователю.Вставить("Работа",         Неопределено);
	ДанныеСообщенияПользователю.Вставить("ТекстСообщения", "");
	
	Возврат ДанныеСообщенияПользователю;
	
КонецФункции

#КонецОбласти



