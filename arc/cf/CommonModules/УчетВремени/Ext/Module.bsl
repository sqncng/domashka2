#Область СлужебныйПрограммныйИнтерфейс

Процедура НастроитьФормуДляУчетаЗатратВремени(Форма) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени") Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты1СДокументооборота") Тогда
			
			// Отключаются команды интеграции с ДО, если ведется учет затрат времени внутри
			ИмяЭлемента = "ИнтеграцияС1СДокументооборотом_ПереключитьХронометраж";
			ОтключитьВидимостьЭлемента(Форма, ИмяЭлемента);
			
			ИмяЭлемента = "ИнтеграцияС1СДокументооборотом_УказатьТрудозатраты";
			ОтключитьВидимостьЭлемента(Форма, ИмяЭлемента);
			
		КонецЕсли;
		
		НастроитьКомандуХронометража(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьКомандуХронометража(Форма) Экспорт
	
	КнопкаХронометража = Форма.Элементы.Найти("ПереключитьХронометраж");
	
	Если КнопкаХронометража <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.Ссылка) И Форма.ДоступноИзменениеХронометража Тогда
			
			КнопкаХронометража.Доступность = Истина;
			Если ХронометражВключен(Форма.ТекущийПользователь, Форма.Объект.Ссылка, "") Тогда
				КнопкаХронометража.Пометка = Истина;
			Иначе
				КнопкаХронометража.Пометка = Ложь;
			КонецЕсли;
		Иначе
			КнопкаХронометража.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПереключитьХронометраж(Работа, ОписаниеРаботы="", НовоеОписаниеРаботы=Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	ТекущаяДата = НачалоМинуты(ТекущаяДатаСеанса());
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Результат.Вставить("Пользователь", ТекущийПользователь);
	Результат.Вставить("Работа", Работа);
	Результат.Вставить("ОписаниеРаботы", ОписаниеРаботы);
	Результат.Вставить("ЗавершеннаяРабота", Неопределено);
	Результат.Вставить("ХронометражЗавершен", Ложь);
	Результат.Вставить("ХронометражВключен", Ложь);
	
	МенеджерЗаписи = РегистрыСведений.ХронометражРабочегоВремени.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекущийПользователь;
	
	МенеджерЗаписи.Прочитать();
	
	ЗавершеннаяРабота = Неопределено;
	ОписаниеЗавершеннойРаботы = "";
	
	Если НовоеОписаниеРаботы <> Неопределено Тогда
		ОписаниеРаботыДляКалендаря = НовоеОписаниеРаботы;
	Иначе
		ОписаниеРаботыДляКалендаря = ОписаниеРаботы;
	КонецЕсли;
	
	Если МенеджерЗаписи.Выбран() Тогда
		// Хронометраж включен, следует зафиксировать окончание работы и выключить хронометраж
		
		Если МенеджерЗаписи.Начало < НачалоДня(ТекущаяДата) Тогда
			
			Начало = НачалоДня(ТекущаяДата);
			
			// Если хронометраж переходит через сутки, Фиксируется работа за предыдущий день
			НачалоПредыдущегоДня = НачалоДня(ТекущаяДата-86400);
			
			Если МенеджерЗаписи.Начало > НачалоПредыдущегоДня Тогда
				НачалоРаботыВПредыдущийДень = МенеджерЗаписи.Начало;
			Иначе
				НачалоРаботыВПредыдущийДень = НачалоПредыдущегоДня;
			КонецЕсли;
			
			ОкончаниеРаботыВПредыдущийДень = НачалоМинуты(КонецДня(НачалоПредыдущегоДня));
			
			РегистрыСведений.КалендариПользователей.ЗанестиРаботуВКалендарь(ТекущийПользователь,
		                                                                    МенеджерЗаписи.Работа,
																		    НачалоРаботыВПредыдущийДень,
																		    ОкончаниеРаботыВПредыдущийДень,
																		    ОписаниеРаботыДляКалендаря,
																			Истина);
																		
		Иначе
			Начало = МенеджерЗаписи.Начало;
		КонецЕсли;
		
		РегистрыСведений.КалендариПользователей.ЗанестиРаботуВКалендарь(ТекущийПользователь,
		                                                                МенеджерЗаписи.Работа,
																		Начало,
																		ТекущаяДата,
																		ОписаниеРаботыДляКалендаря,
																		Истина);
		
		ЗавершеннаяРабота = МенеджерЗаписи.Работа;
		ОписаниеЗавершеннойРаботы = МенеджерЗаписи.ОписаниеРаботы;
		
		МенеджерЗаписи.Удалить();
		
		Результат.Вставить("ЗавершеннаяРабота", ЗавершеннаяРабота);
		Результат.Вставить("ОписаниеРаботы", ОписаниеЗавершеннойРаботы);
		Результат.Вставить("ХронометражЗавершен", Истина);
		Результат.Вставить("НачалоЗавершеннойРаботы", Начало);
		Результат.Вставить("ОкончаниеЗавершеннойРаботы", ТекущаяДата);
		
	КонецЕсли;
	
	Если Работа <> ЗавершеннаяРабота ИЛИ ОписаниеРаботы <> ОписаниеЗавершеннойРаботы Тогда
		
		// Нужно стартовать хронометраж
		МенеджерЗаписи.Пользователь = ТекущийПользователь;
		МенеджерЗаписи.Работа = Работа;
		МенеджерЗаписи.ОписаниеРаботы = ОписаниеРаботы;
		МенеджерЗаписи.Начало = ТекущаяДата;
		
		МенеджерЗаписи.Записать();
		
		Результат.Вставить("ХронометражВключен", Истина);
		Результат.Вставить("Начало", ТекущаяДата);
		Результат.Вставить("Окончание", '00010101');
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ХронометражВключен(Пользователь, Работа, ОписаниеРаботы="") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХронометражРабочегоВремени.Начало КАК Начало
	|ИЗ
	|	РегистрСведений.ХронометражРабочегоВремени КАК ХронометражРабочегоВремени
	|ГДЕ
	|	ХронометражРабочегоВремени.Пользователь = &Пользователь
	|	И ХронометражРабочегоВремени.Работа = &Работа
	|	И ХронометражРабочегоВремени.ОписаниеРаботы = """""
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Работа", Работа);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ДанныеАвтоподбораРабот(Текст, Пользователь) Экспорт
	
	Период = Новый СтандартныйПериод;
	
	ПериодИзНастроек = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("УчетВремениПодборРабот", "Период");
	
	Если ТипЗнч(ПериодИзНастроек) = Тип("СтандартныйПериод") Тогда
		Период = ПериодИзНастроек;
	Иначе
		Период.Вариант = ВариантСтандартногоПериода.Месяц;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УчетВремениОбороты.ВидДеятельности КАК ВидДеятельности,
	|	УчетВремениОбороты.Проект КАК Проект,
	|	ВЫБОР
	|		КОГДА УчетВремениОбороты.Задача <> ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|			ТОГДА УчетВремениОбороты.Задача
	|		КОГДА УчетВремениОбороты.Ошибка <> ЗНАЧЕНИЕ(Справочник.Ошибки.ПустаяСсылка)
	|			ТОГДА УчетВремениОбороты.Ошибка
	|		КОГДА УчетВремениОбороты.ТехническийПроект <> ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)
	|			ТОГДА УчетВремениОбороты.ТехническийПроект
	|	КОНЕЦ КАК Работа,
	|	УчетВремениОбороты.ОписаниеРаботы КАК ОписаниеРаботы,
	|	УчетВремениОбороты.ВидДеятельности.ВидВремени КАК ВидВремени
	|ИЗ
	|	РегистрНакопления.УчетВремени.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Пользователь = &Пользователь
	|				И ОписаниеРаботы ПОДОБНО &Текст) КАК УчетВремениОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОписаниеРаботы,
	|	Работа,
	|	Проект,
	|	ВидДеятельности"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", Период.ДатаОкончания);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеРаботы = Новый Структура;
		ДанныеРаботы.Вставить("ОписаниеРаботы", Выборка.ОписаниеРаботы);
		ДанныеРаботы.Вставить("Работа", Выборка.Работа);
		ДанныеРаботы.Вставить("Проект", Выборка.Проект);
		ДанныеРаботы.Вставить("ВидДеятельности", Выборка.ВидДеятельности);
		ДанныеРаботы.Вставить("ВидВремени", Выборка.ВидВремени);
		
		ДанныеВыбора.Добавить(ДанныеРаботы, ДанныеРаботы.ОписаниеРаботы);
		
	КонецЦикла;	
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция ДанныеХронометража(Пользователь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Работа", Неопределено);
	Результат.Вставить("Начало", '00010101');
	Результат.Вставить("ОписаниеРаботы", "");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХронометражРабочегоВремени.Работа КАК Работа,
	|	ХронометражРабочегоВремени.ОписаниеРаботы КАК ОписаниеРаботы,
	|	ХронометражРабочегоВремени.Начало КАК Начало
	|ИЗ
	|	РегистрСведений.ХронометражРабочегоВремени КАК ХронометражРабочегоВремени
	|ГДЕ
	|	ХронометражРабочегоВремени.Пользователь = &Пользователь"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПроцедурыИФункции

Процедура ОтключитьВидимостьЭлемента(Форма, ИмяЭлемента)
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти