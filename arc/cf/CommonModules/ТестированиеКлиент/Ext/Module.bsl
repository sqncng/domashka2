#Область ПрограммныйИнтерфейс

// Создает локальную базу данных по переданным параметрам
//
// Параметры:
//  Параметры - Структура
// 
// Возвращаемое значение:
//  Булево - Статус операции
//
Функция СоздатьЛокальнуюБазуДанныхИзЭталона(Параметры) Экспорт
	
	ЛокальныйКаталог         = Параметры.ЛокальныйКаталог;
	КаталогИсполняемогоФайла = Параметры.КаталогИсполняемогоФайла;
	ИмяБазы                  = Параметры.ИмяБазы;
	ИмяФайлаЭталона          = Параметры.ИмяФайлаЭталона;
	КаталогБазыРазработки    = Параметры.КаталогБазы;
	
	Если Не ПроверкаСуществованияФайла(ИмяФайлаЭталона) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'Файл эталона ""%1"" не существует.'"),ИмяФайлаЭталона));
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Не ПроверкаСуществованияФайла(ЛокальныйКаталог) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		     НСтр("ru = 'Локальный каталог ""%1"" не существует.'"),ЛокальныйКаталог));
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Не ПроверкаСуществованияФайла(КаталогИсполняемогоФайла) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		     НСтр("ru = 'Каталог исполняемого файла ""%1"" не существует.'"),КаталогИсполняемогоФайла));
		Возврат Ложь;
	КонецЕсли;	 
	
	СоздатьКаталог(КаталогБазыРазработки);
	Попытка
		ОчиститьКаталог(КаталогБазыРазработки);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		      НСтр("ru = 'Не получилось очистить каталог ""%1"".'"),КаталогБазыРазработки));
		Возврат Ложь;
	КонецПопытки;
	
	
	#Если ВебКлиент Тогда
		ИмяФайлаРезультатов = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".txt";
	#Иначе
		ИмяФайлаРезультатов = ПолучитьИмяВременногоФайла("txt");
	#КонецЕсли
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 " 
	    + " CREATEINFOBASE File=""%КаталогБазыРазработки%"" /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	
	Если Не ПроверитьФайлСтатусаВыполненияОперации(ИмяФайлаРезультатов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		      НСтр("ru = 'В процессе создания файловой базы данных ""%1"" произошли ошибки.'"),КаталогБазыРазработки));
		Возврат Ложь;
	КонецЕсли;	 
	
	
	СтрокаКоманды = """%КаталогИсполняемогоФайла%\1cv8"" DESIGNER " 
	    + "/F""%КаталогБазыРазработки%"" /RestoreIB ""%ИмяФайлаЭталона%"" /DumpResult ""%ИмяФайлаРезультатов%""";
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЭталона%", ИмяФайлаЭталона);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	
	Если Не ПроверитьФайлСтатусаВыполненияОперации(ИмяФайлаРезультатов) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		      НСтр("ru = 'В процессе загрузки из эталонного DT ""%1"" возникла ошибка.'"),ИмяФайлаЭталона));
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
	
КонецФункции	

// Возвращает параметры запуска тестов
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыЗапускаТестов() Экспорт
	ПараметрыЗапускаТестов = Новый Структура;
	ПараметрыЗапускаТестов.Вставить("Сценарий",Неопределено);
	ПараметрыЗапускаТестов.Вставить("ЗапускИзСценария",Ложь);
	ПараметрыЗапускаТестов.Вставить("ЭталоннаяБаза",Неопределено);
	
	Возврат ПараметрыЗапускаТестов;
КонецФункции	

// Подставляет в текст сценария строку подключения TestClient
//
// Параметры:
//  ТекстСценариев - Строка
//  НастройкиБДДляЗапускаТестовИзСценария - Структура
//  Роль - СправочникСсылка.ПрофилиПользователей
//
Процедура ЗаменитьСтрокуПодключенияПрофиляTestClient(ТекстСценариев,НастройкиБДДляЗапускаТестовИзСценария,Роль) Экспорт
	МассивСтрок    = СтрРазделить(ТекстСценариев,Символы.ПС);
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Ккк];
		Если Найти(Стр, "Сценарий:") > 0 ИЛИ Найти(Стр, "Scenario:") > 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,"И я подключаю TestClient") = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Поз = Найти(Стр,"И я подключаю TestClient");
		
		ПрофильПользователя = ТестированиеСлужебныйВызовСервера.ИмяПрофиляTestClient(Роль,
		                                               НастройкиБДДляЗапускаТестовИзСценария,Истина);
													   
		Если Найти(ТекстСценариев,"#language: en") > 0 Тогда
			МассивСтрок[Ккк] = Лев(Стр,Поз-1) + "And I connect """ + ПрофильПользователя + """ profile of TestClient";
		Иначе												   
			МассивСтрок[Ккк] = Лев(Стр,Поз-1) + "И я подключаю профиль TestClient """ + ПрофильПользователя + """";
		КонецЕсли;	 											   
	КонецЦикла;	
	
	ТекстСценариев = СтрСоединить(МассивСтрок,Символы.ПС);
КонецПроцедуры

//Подключает файл фреймворка запускающего тесты на выполнение
// Параметры:
//  УникальныйИдентификатор - Строка
//  ИмяПроцедуры - Структура
//  Модуль - Строка
//  ДополнительныеПараметры - Структура
//
Процедура ПодключитьФреймВоркТестирования(УникальныйИдентификатор,ИмяПроцедуры,Модуль,ДополнительныеПараметры) Экспорт
	ФреймворкДляЗапускаТестов = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"Тестирование", "ФреймворкДляЗапускаТестов");
	
	Если Не ЗначениеЗаполнено(ФреймворкДляЗапускаТестов) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Фреймворк для запуска тестов"".'");
	КонецЕсли;	 
	
	Оповещение = Новый ОписаниеОповещения(ИмяПроцедуры, Модуль, ДополнительныеПараметры);
	НачатьПомещениеФайла(Оповещение,, ФреймворкДляЗапускаТестов, Ложь, УникальныйИдентификатор);
КонецПроцедуры 

// Запускает фреймворк тестирования с нужным сценарием
//
// Параметры:
//  ПараметрыЗапуска - Структура
//
Процедура ОткрытьФормуФреймворкаТестирования(ПараметрыЗапуска) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	Если ПараметрыЗапуска.НастройкиБДДляЗапускаТестовИзСценария = Неопределено  Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены настройки локального запуска сценариев.'");
	КонецЕсли;	 	
	
	ТекстСценариев                        = ПараметрыЗапуска.ТекстСценариев;
	ОбработатьЭкранированныеСпецсимволы(ТекстСценариев);	

	МассивРолей                           = ПараметрыЗапуска.МассивРолей;
	ПараметрыОткрытия                     = ПараметрыЗапуска.ПараметрыОткрытия;
	НастройкиБДДляЗапускаТестовИзСценария = ПараметрыЗапуска.НастройкиБДДляЗапускаТестовИзСценария;
	ПрисоединенныеФайлы                   = ПараметрыЗапуска.ПрисоединенныеФайлы;
	
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	КаталогНастроек = КаталогДляДанныхТестирования + "\Settings";
	ФайлКаталогСценариев = Новый Файл(КаталогНастроек);
	Если Не ФайлКаталогСценариев.Существует() Тогда
		СоздатьКаталог(КаталогНастроек);
	КонецЕсли;	 
	
	ПараметрыПриложения.Вставить(ИмяСвойстваИмяФайлаPIDTestManager(),ИмяФайлаPIDTestManager(КаталогНастроек));
	
	Если ПараметрыЗапуска.НастройкиБДДляЗапускаТестовИзСценария.СППРTestManager = 1 Тогда
		ПолученОтветОтВнешнегоTestManager();
		ПроверитьЧтоTestManagerВсеЕщеЗапущен();
	КонецЕсли;	 
	
	НомерСтрокиДляЗапускаСТекущегоШагаСценария = Неопределено;
	Если ПараметрыЗапуска <> Неопределено Тогда
		Если ПараметрыЗапуска.Свойство("СТекущегоШага") Тогда
			Если ПараметрыЗапуска.СТекущегоШага Тогда
				НомерСтрокиДляЗапускаСТекущегоШагаСценария = НомерСтрокиДляЗапускаСТекущегоШагаСценария(ТекстСценариев);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ФреймворкДляЗапускаТестов = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                              "Тестирование", "ФреймворкДляЗапускаТестов");
	
	БиблиотекиТестов = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                              "Тестирование", "БиблиотекиТестов");
	Если БиблиотекиТестов = Неопределено Тогда
		БиблиотекиТестов = Новый Массив;
	КонецЕсли;	 
	
	Если Не ЗначениеЗаполнено(ФреймворкДляЗапускаТестов) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Фреймворк для запуска тестов"".'");
	КонецЕсли;	 
	
	Файл = Новый Файл(ФреймворкДляЗапускаТестов);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		         НСтр("ru = 'Файл <%1> не существует.'"),ФреймворкДляЗапускаТестов);
	КонецЕсли;	 
	
	КаталогИнструментов = Файл.Путь;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(ТекстСценариев);
	
	КаталогСценариев = КаталогДляДанныхТестирования + "\Features";
	ФайлКаталогСценариев = Новый Файл(КаталогСценариев);
	Если Не ФайлКаталогСценариев.Существует() Тогда
		СоздатьКаталог(КаталогСценариев);
	КонецЕсли;	 
	
	ПутьКСценариям = КаталогДляДанныхТестирования + "\Features\Test.feature";
	ТекстовыйДокумент.Записать(ПутьКСценариям,"UTF-8");
	
	
	Если ПараметрыЗапуска.Свойство("ЧтениеИзGit") И ПараметрыЗапуска.ЧтениеИзGit Тогда
		ДополнитьПрисоединенныеФайлыФайламиИзРепозитория(ПрисоединенныеФайлы, ПараметрыЗапуска);
		
		ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(ПараметрыЗапуска.Ветка, ПараметрыЗапуска.Проект);
		
		УдаленныеФайлы = Новый СписокЗначений;
		Для Каждого ТекФайл Из ДанныеРанееИзмененныхСценариев.ИзмененныеФайлы Цикл
			Ид = -1;
			Для Каждого ДанныеФайла Из ПрисоединенныеФайлы Цикл
				Ид = Ид + 1;
				Если НРег(ТекФайл.Наименование) = НРег(ДанныеФайла.Имя + "." + ДанныеФайла.Расширение) Тогда
					Если ТекФайл.Действие = "Удаление" Тогда
						УдаленныеФайлы.Добавить(Ид);
						Продолжить;
					КонецЕсли;	 
					
					Файл = Новый Файл(ТекФайл.ПутьЛокально);
					Если НЕ Файл.Существует() Тогда
						ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Файл <%1> не существует. Имя файла <%2>. Имя сценария <%3>'"),
								ТекФайл.ПутьЛокально, ТекФайл.Наименование, ТекФайл.ИмяСценария);
					КонецЕсли;	 
					
					ДанныеФайла.ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ТекФайл.ПутьЛокально);
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЦикла;	 	
		
		УдаленныеФайлы.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Для Каждого Элем Из УдаленныеФайлы Цикл
			ПрисоединенныеФайлы.Удалить(Элем.Значение);
		КонецЦикла;	 
		
		Для Каждого ТекФайл Из ДанныеРанееИзмененныхСценариев.ИзмененныеФайлы Цикл
			Если ТекФайл.Действие = "Добавление" Тогда
				Файл = Новый Файл(ТекФайл.ПутьЛокально);
				
				ДанныеФайла = Новый Структура;
				ДанныеФайла.Вставить("ДвоичныеДанныеФайла", Новый ДвоичныеДанные(ТекФайл.ПутьЛокально));
				ДанныеФайла.Вставить("Имя", Файл.ИмяБезРасширения);
				ДанныеФайла.Вставить("Расширение", Сред(Файл.Расширение, 2));
				ДанныеФайла.Вставить("Сценарий", "");
				
				ПрисоединенныеФайлы.Добавить(ДанныеФайла);
			ИначеЕсли ТекФайл.Свойство("ИзмененоИмяФайла") И ТекФайл.ИзмененоИмяФайла Тогда
				Для Каждого ДанныеФайла Из ПрисоединенныеФайлы Цикл
					Если НРег(ДанныеФайла.Имя + "." + ДанныеФайла.Расширение) = НРег(ТекФайл.СтароеИмяФайла) Тогда
						Файл = Новый Файл(ТекФайл.Наименование);
						ДанныеФайла.Имя = Файл.ИмяБезРасширения;
						ДанныеФайла.Расширение = Файл.Расширение;
						Если Лев(ДанныеФайла.Расширение, 1) = "." Тогда
							ДанныеФайла.Расширение = Сред(ДанныеФайла.Расширение, 2);
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	ВыгрузитьМакетыВКаталогОбмена(КаталогДляДанныхТестирования, ПрисоединенныеФайлы);
	
	Если НастройкиБДДляЗапускаТестовИзСценария.СППРTestManager = 0 
		Или (НастройкиБДДляЗапускаТестовИзСценария.СППРTestManager = Истина
		  и ТипЗнч(НастройкиБДДляЗапускаТестовИзСценария.СППРTestManager) = Тип("Булево") ) Тогда
		
		ИмяОбработки = ПараметрыЗапуска.ИмяОбработки;
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("КаталогИнструментов",КаталогИнструментов);
		ФормаОбработки = ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки
		  + ".Форма.УправляемаяФорма",ПараметрыОбработки,Неопределено,"ФреймворкДляЗапускаТестов");
		
		Для Каждого ТекРоль Из МассивРолей Цикл
			ДобавитьВФреймворкДанныеПоПодключениюTestClient(ФормаОбработки,НастройкиБДДляЗапускаТестовИзСценария,ТекРоль);
		КонецЦикла;	
		
		Если ПараметрыОткрытия.ЗапускСценария Тогда
			ПараметрыТеста = Новый Структура;
			ПараметрыТеста.Вставить("ПутьКСценариям",ПутьКСценариям);
			ПараметрыТеста.Вставить("КаталогПроекта",КаталогДляДанныхТестирования);
			ПараметрыТеста.Вставить("КаталогИнструментов",КаталогИнструментов);
			ПараметрыТеста.Вставить("ИдОповещения",ТекущаяДата());
			ПараметрыТеста.Вставить("СТекущегоШага",ПараметрыЗапуска.СТекущегоШага);
			ПараметрыТеста.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария",НомерСтрокиДляЗапускаСТекущегоШагаСценария);
 			Если ПараметрыЗапуска.ЭтоПроцесс Тогда
				ПараметрыТеста.Вставить("ОстановкаПриВозникновенииОшибки",Истина);
			КонецЕсли;	 
			Оповестить("ФреймворкДляЗапускаТестов.ВыполнитьСценарий",ПараметрыТеста);
		КонецЕсли;	 
		
		Если ПараметрыОткрытия.ЗагрузкаСценария Тогда
			ПараметрыТеста = Новый Структура;
			ПараметрыТеста.Вставить("ПутьКСценариям",ПутьКСценариям);
			ПараметрыТеста.Вставить("КаталогПроекта",КаталогДляДанныхТестирования);
			ПараметрыТеста.Вставить("КаталогИнструментов",КаталогИнструментов);
			ПараметрыТеста.Вставить("ИдОповещения",ТекущаяДата());
			Если ПараметрыЗапуска.ЭтоПроцесс Тогда
				ПараметрыТеста.Вставить("ОстановкаПриВозникновенииОшибки",Истина);
			КонецЕсли;	 
			Оповестить("ФреймворкДляЗапускаТестов.ЗагрузитьСценарий",ПараметрыТеста);
		КонецЕсли;	 
	Иначе
		//надо запустить новую базу, которая будет TestManager
		
		
		ИмяФайлаНастроек = КаталогНастроек + ПолучитьРазделительПути() + "main.json"; 
		
		СтрокаКоманды = """%КаталогИсполняемогоФайла%1cv8c"" ENTERPRISE 
		| %СтрокаСоединенияИБ% 
		| /N ""%ИмяПользователяИБ%"" /P ""%ПарольПользователяИБ%"" /Execute""%ПутьКОбработке%""
		| %КлючиЗапускаTestManager% /C""StartFeaturePlayer;SPPR;DisableUserSettingsLoader;VBParams=%ПутьКНастройкамФремворкаДляЗапускаТестов%"" /TESTMANAGER
		| ";
		
		
		АдресИБTestManager = НастройкиБДДляЗапускаТестовИзСценария.СтрокаИБ;
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("АдресИБTestManager") Тогда
			Если ЗначениеЗаполнено(НастройкиБДДляЗапускаТестовИзСценария.АдресИБTestManager) Тогда
				АдресИБTestManager = НастройкиБДДляЗапускаТестовИзСценария.АдресИБTestManager;
			КонецЕсли;	 
		КонецЕсли;	 
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБ%",
		   ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(АдресИБTestManager));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБ%", НастройкиБДДляЗапускаТестовИзСценария.Пользователь);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБ%", НастройкиБДДляЗапускаТестовИзСценария.Пароль);
		Если ПараметрыЗапуска.Свойство("ПутьКПлатформе") Тогда
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", 
			    ДополнитьРазделительПути(ПараметрыЗапуска.ПутьКПлатформе));
		Иначе	
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", 
			    ДополнитьРазделительПути(НастройкиБДДляЗапускаТестовИзСценария.КаталогИсполняемогоФайла));
		КонецЕсли;	 
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПутьКОбработке%", ФреймворкДляЗапускаТестов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КлючиЗапускаTestManager%",
		      НастройкиБДДляЗапускаТестовИзСценария.КлючиЗапускаTestManager);
		
		ПараметрыЗапускаФреймворка = Новый Структура;
		ПараметрыЗапускаФреймворка.Вставить("ЗагрузкаСценария",ПараметрыЗапуска.ЗагрузкаСценария);
		ПараметрыЗапускаФреймворка.Вставить("ЗапускСценария",ПараметрыЗапуска.ЗапускСценария);
		ПараметрыЗапускаФреймворка.Вставить("ПутьКСценариям",ПутьКСценариям);
		ПараметрыЗапускаФреймворка.Вставить("КаталогПроекта",КаталогДляДанныхТестирования);
		ПараметрыЗапускаФреймворка.Вставить("КаталогИнструментов",КаталогИнструментов);
		ПараметрыЗапускаФреймворка.Вставить("ИдОповещения",ТекущаяДата());
		
		ПараметрыЗапускаФреймворка.Вставить("СТекущегоШага",Ложь);
		Если ПараметрыЗапуска.Свойство("СТекущегоШага") Тогда
			ПараметрыЗапускаФреймворка.Вставить("СТекущегоШага",ПараметрыЗапуска.СТекущегоШага);
			ПараметрыЗапускаФреймворка.Вставить("НомерСтрокиДляЗапускаСТекущегоШагаСценария",
			  НомерСтрокиДляЗапускаСТекущегоШагаСценария);
		КонецЕсли;	 
		ПараметрыЗапускаФреймворка.Вставить("ИмяФайлаНастроек",ИмяФайлаНастроек);
		ПараметрыЗапускаФреймворка.Вставить("БиблиотекиТестов",БиблиотекиТестов);
		
		
		ПараметрыЗапускаФреймворка.Вставить("ИмяФайлаВнешнихКомандФреймворка",ИмяФайлаВнешнихКомандФреймворка(КаталогНастроек));
		ПараметрыЗапускаФреймворка.Вставить("ИмяФайлаPIDTestManager",ИмяФайлаPIDTestManager(КаталогНастроек));
		Если ПараметрыЗапуска.ЭтоПроцесс Тогда
			ПараметрыЗапускаФреймворка.Вставить("ОстановкаПриВозникновенииОшибки",Истина);
		Иначе	
			ПараметрыЗапускаФреймворка.Вставить("ОстановкаПриВозникновенииОшибки",Ложь);
		КонецЕсли;	 
		ПараметрыЗапуска.Вставить("ИмяФайлаPIDTestManager",ПараметрыЗапускаФреймворка.ИмяФайлаPIDTestManager);
		
		ПараметрыПриложения.Вставить(ИмяСвойстваИмяФайлаPIDTestManager(),ПараметрыЗапускаФреймворка.ИмяФайлаPIDTestManager);
		
		ПараметрыЗапускаФреймворка.Вставить("ФреймворкДляЗапускаТестов", ФреймворкДляЗапускаТестов);
		
		Если ПараметрыЗапуска.Свойство("ДанныеКлиентаТестирования") Тогда
			ПараметрыЗапускаФреймворка.Вставить("ДанныеКлиентаТестирования", ПараметрыЗапуска.ДанныеКлиентаТестирования);
		КонецЕсли;	 
		
		Если ПараметрыЗапуска.Свойство("ПутьКПлатформе") Тогда
			ПараметрыЗапускаФреймворка.Вставить("ПутьКПлатформе", ПараметрыЗапуска.ПутьКПлатформе);
		КонецЕсли;	 
		
		Если ПараметрыЗапуска.Свойство("ОжидаемаяВерсияИнструменаТестирования") Тогда
			ПараметрыЗапускаФреймворка.Вставить("ОжидаемаяВерсияИнструменаТестирования", ПараметрыЗапуска.ОжидаемаяВерсияИнструменаТестирования);
		КонецЕсли;	 
		
		Если ПараметрыЗапуска.Свойство("ОстановкаНаПроблемномШаге") Тогда
			ПараметрыЗапускаФреймворка.Вставить("ОстановкаНаПроблемномШаге", ПараметрыЗапуска.ОстановкаНаПроблемномШаге);
			ПараметрыЗапускаФреймворка.Вставить("НомерСтрокиПроблемногоШага", ПараметрыЗапуска.НомерСтрокиПроблемногоШага);
		КонецЕсли;	 
		
		ЗаписатьНастройкиДляЗапуска(КаталогДляДанныхТестирования,ПараметрыЗапускаФреймворка,
		       НастройкиБДДляЗапускаТестовИзСценария,МассивРолей);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПутьКНастройкамФремворкаДляЗапускаТестов%", ИмяФайлаНастроек);
		
		ТекущийPIDTestManager = ПараметрыПриложения[ИмяСвойстваPIDВнешнийTestManager()];
		Если ЗначениеЗаполнено(ТекущийPIDTestManager) Тогда
			Если ПараметрыЗапуска.ЗапускСценария И ПараметрыЗапуска.СТекущегоШага Тогда
				ЗаписатьКомандуФреймворка("ПерезагрузитьИВыполнитьСТекущегоШага",ПараметрыЗапускаФреймворка,ИмяФайлаНастроек);
			ИначеЕсли ПараметрыЗапуска.ЗапускСценария И НЕ ПараметрыЗапуска.СТекущегоШага Тогда
				ЗаписатьКомандуФреймворка("ПерезагрузитьИВыполнить",ПараметрыЗапускаФреймворка,ИмяФайлаНастроек);
			ИначеЕсли ПараметрыЗапуска.ЗагрузкаСценария Тогда	
				ЗаписатьКомандуФреймворка("Перезагрузить",ПараметрыЗапускаФреймворка,ИмяФайлаНастроек);
			КонецЕсли;	 
		Иначе	
			ФайлКоманды = Новый Файл(ПараметрыЗапускаФреймворка.ИмяФайлаВнешнихКомандФреймворка);
			Если ФайлКоманды.Существует() Тогда
				УдалитьФайлы(ПараметрыЗапускаФреймворка.ИмяФайлаВнешнихКомандФреймворка);
			КонецЕсли;	 
			
			ФайлPIDTestManager = Новый Файл(ПараметрыЗапускаФреймворка.ИмяФайлаPIDTestManager);
			Если ФайлPIDTestManager.Существует() Тогда
				УдалитьФайлы(ПараметрыЗапускаФреймворка.ИмяФайлаPIDTestManager);
			КонецЕсли;	 
			
			ЗапуститьПриложение(СтрокаКоманды);
			ПараметрыЗапуска.Вставить("НадоСчитатьТекущийPIDTestManager",Истина);
		КонецЕсли;	 
		
	КонецЕсли;	 
	#КонецЕсли
КонецПроцедуры

// Проверяет файл ответа внешнего TestManager
//
Процедура ПолученОтветОтВнешнегоTestManager() Экспорт
	ИмяФайла = ПараметрыПриложения[ИмяСвойстваИмяФайлаPIDTestManager()];
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;	 
	
	Файл = Новый Файл(ИмяФайла);
	Если Не Файл.Существует() Тогда
		Возврат;
	КонецЕсли;	
	
	НадоУдалитьФайл = Ложь;
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Попытка
			ТекущийPIDTestManager = Число(Стр);
		Исключение
			НадоУдалитьФайл = Истина;
		КонецПопытки;
		
		Прервать;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Если НадоУдалитьФайл  Тогда
		УдалитьФайлы(ИмяФайла);
	КонецЕсли;	 
	
	ИмяСвойства = ИмяСвойстваPIDВнешнийTestManager();
	ПараметрыПриложения[ИмяСвойства] = ТекущийPIDTestManager;
КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
// См. "Расширение поля формы для поля табличного документа.ОбработкаРасшифровки" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - форма отчета.
//   Элемент     - ПолеФормы        - табличный документ.
//   Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	ПолноеИмяОтчета = ФормаОтчета.НастройкиОтчета.ПолноеИмя;
	ЧастиИмени = СтрРазделить(ПолноеИмяОтчета, ".");
	Если ЧастиИмени.Количество() > 1 Тогда
		ПолноеИмяОтчета = ЧастиИмени[1];
	КонецЕсли;
	
	Если ПолноеИмяОтчета = "СтатусПрохожденияТестовВВетке"
		ИЛИ ПолноеИмяОтчета = "ТестыЗаблокированныеОшибками" Тогда
		
		Отчет = ФормаОтчета.Отчет;
		ДанныеРасшифровки = ТестированиеСлужебныйВызовСервера.ДанныеРасшифровкиОтчетовТестирования(Расшифровка, ФормаОтчета.ОтчетДанныеРасшифровки);
		
		// Расшифровки только для отчета СтатусПрохожденияТестовВВетке
		Если ПолноеИмяОтчета = "СтатусПрохожденияТестовВВетке" Тогда
			Если ДанныеРасшифровки.Свойство("Тест") И ДанныеРасшифровки.Свойство("РезультатыТестаДетализируютсяПоОбъектамМетаданных")
				И ДанныеРасшифровки.РезультатыТестаДетализируютсяПоОбъектамМетаданных 
				И ФормаОтчета.ВариантыПанелиКлючТекущегоВарианта <> "СтатусПрохожденияТестовВВеткеДетализацияПоЭлементам" Тогда
				
				СтандартнаяОбработка = Ложь;
				
				ДанныеОтбор = Новый Структура("Тест", ДанныеРасшифровки.Тест); 
				ПараметрыРасшифровки = Новый Структура;
				ПараметрыРасшифровки.Вставить("СформироватьПриОткрытии", Истина);
				ПараметрыРасшифровки.Вставить("Отбор", ДанныеОтбор);
				ПараметрыРасшифровки.Вставить("КлючВарианта", "СтатусПрохожденияТестовВВеткеДетализацияПоЭлементам");
				ПользовательскиеНастройки = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
				ПараметрыРасшифровки.Вставить("Ветка", ЭлементПользовательскихНастроек(ПользовательскиеНастройки, "Ветка").Значение);
				ПараметрыРасшифровки.Вставить("ПериодОтбор", ЭлементПользовательскихНастроек(ПользовательскиеНастройки, "ПериодОтбор").Значение);
				ПользовательскаяНастройкаТестыОтбор = ЭлементПользовательскихНастроек(ПользовательскиеНастройки, "ТестыОтбор");
				Если ПользовательскаяНастройкаТестыОтбор <> Неопределено Тогда
					ПараметрыРасшифровки.Вставить("ТестыОтбор", ПользовательскаяНастройкаТестыОтбор.Значение);
				КонецЕсли;
				ПользовательскаяНастройкаВключатьОшибкиВДругихВетках 
						= ЭлементПользовательскихНастроек(ПользовательскиеНастройки, "ВключатьОшибкиОбнаруженныеВДругихВетках");
				Если ПользовательскаяНастройкаВключатьОшибкиВДругихВетках <> Неопределено Тогда
					ПараметрыРасшифровки.Вставить("ВключатьОшибкиОбнаруженныеВДругихВетках", ПользовательскаяНастройкаВключатьОшибкиВДругихВетках.Значение);
				КонецЕсли;
				
				ОткрытьФорму(ФормаОтчета.ИмяФормы, ПараметрыРасшифровки, , Истина);
				Возврат;
			ИначеЕсли ДанныеРасшифровки.Свойство("ЗапускТестирования") 
				И ДанныеРасшифровки.Свойство("ЗапускТестированияСсылка") 
				И ЗначениеЗаполнено(ДанныеРасшифровки.ЗапускТестированияСсылка) Тогда
				СтандартнаяОбработка = Ложь;
				ПерейтиПоНавигационнойСсылке(ДанныеРасшифровки.ЗапускТестированияСсылка);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		// Расшифровка по ошибкам - общая для отчетов по тестированию
		КоличестоСтрокВОшибке = ?(ПолноеИмяОтчета = "ТестыЗаблокированныеОшибками", 2, 1);
		Если ДанныеРасшифровки.Свойство("МаксимумОшибка") Тогда
			Если Не ЗначениеЗаполнено(ДанныеРасшифровки.МаксимумОшибка) Тогда
				// Ошибку открывать не нужно
				Возврат;
			КонецЕсли;
			
			КоличествоОшибок = 0;
			Если ДанныеРасшифровки.Свойство("КоличествоОшибок") Тогда
				КоличествоОшибок = ДанныеРасшифровки.КоличествоОшибок;
			Иначе			
				ТекстЯчейки = ФормаОтчета.ТекущийЭлемент.ТекущаяОбласть.Текст;
				Строки = СтрРазделить(ТекстЯчейки, Символы.ПС);
				КоличествоОшибок = Строки.Количество()/КоличестоСтрокВОшибке;
			КонецЕсли;
	
			Если КоличествоОшибок <= 1 Тогда
				// Одна ошибка откроется в стандартной расшифровке
				Возврат;
			КонецЕсли;
			// В статусе есть ошибки, и их больше одной
			СтандартнаяОбработка = Ложь;

			РезультирующиеНастройки = ТестированиеСлужебныйВызовСервера.РасшифроватьОшибки(ФормаОтчета.ОтчетДанныеРасшифровки, Отчет, Расшифровка);
	
			ПараметрыРасшифровки = Новый Структура;
			ПараметрыРасшифровки.Вставить("СформироватьПриОткрытии", Истина);
			ПараметрыРасшифровки.Вставить("Расшифровка", РезультирующиеНастройки);
			ПараметрыРасшифровки.Вставить("РасшифровкаОшибок", Истина);
			ПараметрыРасшифровки.Вставить("КлючНазначенияИспользования", "Расшифровка");
			
			ОткрытьФорму(ФормаОтчета.ИмяФормы, ПараметрыРасшифровки, , Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные сценария из формата Yaml
// Параметры:
//  ИсточникМетаданные - Строка или Поток
//  ИсточникТекстСценария - Строка или Поток
//  ДанныеСценария - Структура
//
// Возвращаемое значение:
//  Соответствие
//
Функция ДанныеСценарияИзYaml(ИсточникМетаданные, ИсточникТекстСценария, ДанныеСценария) Экспорт
	Результат = Новый Соответствие;
	СчетчикСтрок = -1;
	
	Попытка
		Если ПараметрыПриложения["КешСборщикСценариев"] = Неопределено Тогда
			ПараметрыПриложения.Вставить("КешСборщикСценариев", ПолучитьФорму("Обработка.СборкаТекстовСценариев.Форма.Форма"));
		КонецЕсли;	
		ПараметрыПриложения["КешСборщикСценариев"].ЧтениеДанныхYaml(Результат, ИсточникМетаданные, СчетчикСтрок); 
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не получилось прочитать файл <%1>. Строка №%2.'"),
			ДанныеСценария.ПолноеИмяФайла, СчетчикСтрок+1);
	КонецПопытки;
	
	Если ИсточникТекстСценария <> Неопределено Тогда
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИсточникТекстСценария,"UTF-8");
		ТекстСценария = Текст.Прочитать();
		Текст.Закрыть();
		
		Результат.Вставить("ТекстСценария", ТекстСценария);
	КонецЕсли;	 
	
	Возврат Результат; 	
		
КонецФункции	 

// Возвращает данные сценария из формата Yaml
// Параметры:
//  ИсточникМетаданные - Строка или Поток
//  ИсточникТекстСценария - Строка или Поток
//  ДопПараметры - Структура
//
// Возвращаемое значение:
//  Соответствие
//
Функция ДанныеНастройкиСценарияИзYaml(ИсточникМетаданные, ДопПараметры) Экспорт
	Результат = Новый Соответствие;
	СчетчикСтрок = -1;
	
	Попытка
		ПолучитьФорму("Обработка.СборкаТекстовСценариев.Форма.Форма").ЧтениеДанныхYaml(
			Результат, ИсточникМетаданные, СчетчикСтрок); 
	Исключение
		ИмяФайла = Неопределено;
		Если ДопПараметры.Свойство("ПолноеИмяФайла") Тогда
			ИмяФайла = ДопПараметры.ПолноеИмяФайла;
		ИначеЕсли ДопПараметры.Свойство("ПутьВРепозитории") Тогда
			ИмяФайла = ДопПараметры.ПутьВРепозитории;
		КонецЕсли;	
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не получилось прочитать файл <%1>. Строка №%2.'"),
			ИмяФайла, СчетчикСтрок+1) + Символы.ПС + ОписаниеОшибки();
			
		ВызватьИсключение ТекстСообщения;	
	КонецПопытки;
	
	Возврат Результат; 	
		
КонецФункции	 

// Сохраняет данные сценария во временный файл
// Параметры:
//  ДанныеСценария - Структура
//
Процедура ЗаписатьСценарийВоВременныйФайл(ДанныеСценария) Экспорт
	Если ДанныеСценария.Свойство("КаталогВременныхФайловСценария") Тогда
		КаталогВременныхФайловСценария = ДанныеСценария.КаталогВременныхФайловСценария;
	Иначе	
		КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		                                               "Тестирование", "КаталогДляДанныхТестирования");
		Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
			ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
		КонецЕсли;	 
		
		КаталогВременныхФайловСценария = КаталогВременныхФайловСценария(КаталогДляДанныхТестирования,
			ДанныеСценария.Ветка, ДанныеСценария.ИмяПроекта, ДанныеСценария.Код);
	КонецЕсли;	 
	
	ДанныеДляВыгрузки = Новый Массив;
	ДанныеСценарияДляВыгрузки = ДанныеСценария;
	ДанныеСценарияДляВыгрузки.Вставить("КаталогВыгрузки", КаталогВременныхФайловСценария);
	ДанныеСценарияДляВыгрузки.Вставить("ТипЭлементаВыгрузки", "Сценарий");
	ДанныеСценарияДляВыгрузки.Вставить("СценарийНаименование", ДанныеСценария.Наименование);
	ДанныеСценарияДляВыгрузки.Вставить("ОригинальныйТекстМетаданных", ДанныеСценария.ОригинальныйТекстМетаданных);
	
	ДанныеДляВыгрузки.Добавить(ДанныеСценарияДляВыгрузки);
	ВыгрузитьДанныеВКаталогВФорматеYaml(ДанныеДляВыгрузки);
КонецПроцедуры 

// Совершает выгрузку данных в каталог
//
// Параметры:
//  ДанныеДляВыгрузки - Массив
//  ПолноеИмяФайла - Строка
//
Процедура ВыгрузитьДанныеЭталонныхБДВФайл(ДанныеДляВыгрузки, ПолноеИмяФайла) Экспорт
	ПодготовленныеДанныеДляЗаписиВФайл = Новый Массив;
	Уровень = 0;
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ЭталонныеБД",ДанныеДляВыгрузки);
	ЗаписатьПодготовленныеДанныеВФайл(ПодготовленныеДанныеДляЗаписиВФайл,ПолноеИмяФайла);
КонецПроцедуры 

// Совершает выгрузку данных в каталог
//
// Параметры:
//  СписокТестов - СписокЗначений
//  КаталогВыгрузкиСценариев - Строка
//  КаталогВыгрузкиПроцессов - Строка
//  КаталогДанныхЭталонныхБД - Строка
//  ПереданныйТипВыгрузки - Строка
//
Процедура ВыгрузитьТестыВКаталог(СписокТестов, КаталогВыгрузкиСценариев, КаталогВыгрузкиПроцессов, КаталогДанныхЭталонныхБД, ПереданныйТипВыгрузки) Экспорт
	МассивТестов = СписокТестов.ВыгрузитьЗначения();
	ДанныеПроцессов = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(УдалитьРазделительПути(КаталогВыгрузкиСценариев)) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан каталог выгрузки сценариев.'");
	КонецЕсли;	 
	
	ФайлКаталогВыгрузки = Новый Файл(КаталогВыгрузкиСценариев);
	Если Не ФайлКаталогВыгрузки.Существует() ИЛИ СтрДлина(КаталогВыгрузкиСценариев) <= 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Каталог <%1> не существует.'"),КаталогВыгрузкиСценариев);
	КонецЕсли;	 
	
	ФайлКаталогВыгрузки = Новый Файл(КаталогВыгрузкиПроцессов);
	Если Не ФайлКаталогВыгрузки.Существует() ИЛИ СтрДлина(КаталогВыгрузкиПроцессов) <= 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Каталог <%1> не существует.'"),КаталогВыгрузкиПроцессов);
	КонецЕсли;	 
	
	Если ПереданныйТипВыгрузки = "Процессы" Тогда
		
		Если Не ЗначениеЗаполнено(УдалитьРазделительПути(КаталогВыгрузкиПроцессов)) Тогда
			ВызватьИсключение НСтр("ru = 'Не указан каталог выгрузки процессов.'");
		КонецЕсли;
		
		ФайлКаталогВыгрузкиПроцессов = Новый Файл(КаталогВыгрузкиПроцессов);
		Если Не ФайлКаталогВыгрузкиПроцессов.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Каталог <%1> не существует.'"),КаталогВыгрузкиПроцессов);
		КонецЕсли;
		ДанныеПроцессов = СуществующиеПроцессыВКаталоге(КаталогВыгрузкиПроцессов);
		
	КонецЕсли;
	
	КаталогВыгрузкиСценариев = ДополнитьРазделительПути(КаталогВыгрузкиСценариев);
	КаталогВыгрузкиПроцессов = ДополнитьРазделительПути(КаталогВыгрузкиПроцессов);
	
	Если МассивТестов.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не найдено данных для выгрузки.'");
	КонецЕсли;	 
	
	ДанныеДляВыгрузки = ТестированиеСлужебныйВызовСервера.ДанныеДляВыгрузки(МассивТестов);
	
	КешДанныхФайлов = Новый Соответствие;
	РассчитатьКешДанныхФайлов(КешДанныхФайлов, КаталогВыгрузкиСценариев, "*.yaml");
	РассчитатьКешДанныхФайлов(КешДанныхФайлов, КаталогВыгрузкиСценариев, "*.feature");
	Если КаталогВыгрузкиСценариев <> КаталогВыгрузкиПроцессов Тогда
		РассчитатьКешДанныхФайлов(КешДанныхФайлов, КаталогВыгрузкиПроцессов, "*.yaml");
	КонецЕсли;	 
	
	//Создание каталогов
	Для Каждого ЭлементВыгрузки Из ДанныеДляВыгрузки Цикл
		Если ЭлементВыгрузки.ТипЭлементаВыгрузки = "Сценарий" Тогда
			КаталогВыгрузки = СоздатьКаталогиРодителейЕслиИхНет(КаталогВыгрузкиСценариев,
		                                                    ЭлементВыгрузки.ПроектНаименование,
															ЭлементВыгрузки.Родители,
															ЭлементВыгрузки.Наименование,
															ЭлементВыгрузки.Код
															);
		ИначеЕсли ЭлементВыгрузки.ТипЭлементаВыгрузки = "Процесс" Тогда
			КаталогВыгрузки = СоздатьКаталогиРодителейЕслиИхНет(КаталогВыгрузкиПроцессов,
		                                                    ЭлементВыгрузки.ПроектНаименование,
															ЭлементВыгрузки.Родители,
															ЭлементВыгрузки.Наименование,
															ЭлементВыгрузки.ПолныйКод
															);
		Иначе	
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип выгрузки <%1>.'"),ЭлементВыгрузки.ТипЭлементаВыгрузки);
		КонецЕсли;	 															
		ОчиститьКаталогВыгрузкиСценариев(КаталогВыгрузки);
		ЭлементВыгрузки.Вставить("КаталогВыгрузки",КаталогВыгрузки);
		УдалитьФайлыТеста(КаталогВыгрузки, ЭлементВыгрузки, КаталогВыгрузкиСценариев,
			КаталогВыгрузкиПроцессов, ДанныеПроцессов, КешДанныхФайлов);
	КонецЦикла;	
	
	Для Каждого ЭлементВыгрузки Из ДанныеДляВыгрузки Цикл
		Если ЭлементВыгрузки.ТипЭлементаВыгрузки = "Сценарий" Тогда
			ВыгрузитьДанныеСценарияВКаталог(ЭлементВыгрузки,ЭлементВыгрузки.КаталогВыгрузки);
		ИначеЕсли ЭлементВыгрузки.ТипЭлементаВыгрузки = "Процесс" Тогда
			ВыгрузитьДанныеПроцессаВКаталог(ЭлементВыгрузки,ЭлементВыгрузки.КаталогВыгрузки);
		Иначе	
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип выгрузки <%1>.'"),ЭлементВыгрузки.ТипЭлементаВыгрузки);
		КонецЕсли;	 
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(КаталогДанныхЭталонныхБД) Тогда
		ВыгрузитьДанныеЭталонныхБД(СписокТестов, КаталогДанныхЭталонныхБД);
	КонецЕсли;	 
	
КонецПроцедуры 

// Сохраняет данные настройки сценария во временный файл
// Параметры:
//  ДанныеСценария - Структура
//
Процедура ЗаписатьНастройкуСценарияВоВременныйФайл(Данные) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	КаталогВременныхФайловСценария = КаталогВременныхФайловСценария(КаталогДляДанныхТестирования,
		Данные.Ветка, Данные.ИмяПроекта, Данные.КодСценария);
		
	КаталогНастройки = 	ДополнитьРазделительПути(КаталогВременныхФайловСценария) + "test";
	Файл = Новый Файл(КаталогНастройки);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(КаталогНастройки);
	КонецЕсли;	 
	ПолноеИмяФайла = ДополнитьРазделительПути(КаталогНастройки) + Данные.Код + ".yaml";
		
	ДанныеДляВыгрузки = Новый Массив;
	ДанныеНастройкиДляВыгрузки = Данные;
	ДанныеНастройкиДляВыгрузки.Вставить("КаталогВыгрузки", КаталогВременныхФайловСценария);
	ДанныеНастройкиДляВыгрузки.Вставить("ТипЭлементаВыгрузки", "НастройкаСценария");
	ДанныеНастройкиДляВыгрузки.Вставить("ИмяНастройки", Данные.Наименование);
	ДанныеНастройкиДляВыгрузки.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	ДанныеНастройкиДляВыгрузки.Вставить("ОригинальныйТекстМетаданныхНастройки", Данные.ОригинальныйТекстМетаданныхНастройки);
	ДанныеДляВыгрузки.Добавить(ДанныеНастройкиДляВыгрузки);
	
	ВыгрузитьДанныеВКаталогВФорматеYaml(ДанныеДляВыгрузки);
КонецПроцедуры 

// Сохраняет идентифиактор коммита во временный файл
// Параметры:
//  Ветка - Справочник.Ветки
//  ИмяПроекта - Строка
//  ИдентификаторКоммита - Строка
//  АвторКоммита - Строка
//  ДатаКоммита - Дата
//  СсылкаНаКоммит - Строка
//
Процедура ЗаписатьИдентификаторКоммитаВоВременныйФайл(Ветка, ИмяПроекта, ИдентификаторКоммита, АвторКоммита, ДатаКоммита, СсылкаНаКоммит) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	Каталог = КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта);
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	СтруктураЗаписи.Вставить("АвторКоммита", АвторКоммита);
	СтруктураЗаписи.Вставить("ДатаКоммита", ДатаКоммита);
	СтруктураЗаписи.Вставить("СсылкаНаКоммит", СсылкаНаКоммит);
	
	#Если НЕ ВебКлиент Тогда	   
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СтруктураЗаписи);
	СтрокаJson = ЗаписьJSON.Закрыть();
	
	ИмяФайла = ДополнитьРазделительПути(Каталог) + "commit.json";
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",, Ложь); 
	ЗТ.Записать(СтрокаJson); 
	ЗТ.Закрыть();
	#КонецЕсли
	
КонецПроцедуры 

//Возвращает каталог верменных файлов ветки
// Параметры:
//  КаталогДляДанныхТестирования - Строка
//  ИмяВетки - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция КаталогВременныхФайловВетки(Знач КаталогДляДанныхТестирования, Ветка, ИмяПроекта) Экспорт
	Если НЕ ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
			"Тестирование", "КаталогДляДанныхТестирования");
	КонецЕсли;	 
	Каталог = ДополнитьРазделительПути(КаталогДляДанныхТестирования) + "Scen";
	Каталог = ДополнитьРазделительПути(Каталог) + УбратьЗапрещенныеСимволыИзИмениФайла(Лев(ИмяПроекта, 50));
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;	 
	
	ИмяВетки = ТестированиеСлужебныйВызовСервера.ИмяВеткиВРепозитории(Ветка);
	
	Каталог = ДополнитьРазделительПути(Каталог) + УбратьЗапрещенныеСимволыИзИмениФайла(ИмяВетки);
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;	 
	
	Возврат Каталог; 
КонецФункции	 

// Считывает раннее сохраненные данные сценариев пользователя
// Параметры:
//  Ветка - Справочник.Ветки
//  ИмяПроекта - Строка
//
// Возвращаемое значение:
//  Данные - Структура
//
Функция ДанныеКоммитаВетки(Ветка, ИмяПроекта) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	КаталогВременныхФайловВетки =
		КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта);
		
		
	ДанныеКоммита = Новый Структура;
	ДанныеКоммита.Вставить("ИдентификаторКоммита", Неопределено);
	ДанныеКоммита.Вставить("АвторКоммита", Неопределено);
	ДанныеКоммита.Вставить("ДатаКоммита", Неопределено);
	ДанныеКоммита.Вставить("СсылкаНаКоммит", Неопределено);
	
	ИмяФайла = ДополнитьРазделительПути(КаталогВременныхФайловВетки) + "commit.json";
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		#Если НЕ ВебКлиент Тогда	   
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		
		ИменаСвойствСоЗначениямиДата = Новый Массив;
		ИменаСвойствСоЗначениямиДата.Добавить("ДатаКоммита");
		Результат = ПрочитатьJSON(ЧтениеJSON,,ИменаСвойствСоЗначениямиДата);
		ЧтениеJSON.Закрыть();
		
		ДанныеКоммита.Вставить("ИдентификаторКоммита", Результат.ИдентификаторКоммита);
		ДанныеКоммита.Вставить("АвторКоммита", Результат.АвторКоммита);
		ДанныеКоммита.Вставить("ДатаКоммита", Результат.ДатаКоммита);
		ДанныеКоммита.Вставить("СсылкаНаКоммит", Результат.СсылкаНаКоммит);
		#КонецЕсли
	КонецЕсли;	 
	
	Возврат ДанныеКоммита; 
КонецФункции	 

// Считывает раннее сохраненные данные сценариев пользователя
// Параметры:
//  Ветка - Справочник.Ветки
//  Проект - Справочник.Проекты
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеРанееИзмененныхСценариев(Ветка, Проект) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	ИмяПроекта = ТестированиеСлужебныйВызовСервера.ИмяПроектаСтрокой(Проект);
	КаталогВременныхФайловВетки =
		КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта);
		
	Данные = Новый Структура;
	Данные.Вставить("ИзмененныеМетаданныеИТекстСценария", Новый Массив);
	Данные.Вставить("ИзмененныеФайлы", Новый Массив);
	Данные.Вставить("ИзмененныеНастройки", Новый Массив);
	Данные.Вставить("ИзмененныеUID", Новый Массив);
	Данные.Вставить("ЕстьИзменения", Ложь);
	Данные.Вставить("НовыеКаталоги", Новый Массив);
	Данные.Вставить("НовыеНастройки", Новый Массив);
	Данные.Вставить("УдаленныеНастройки", Новый Массив);
	
	ИзмененныеМетаданныеИТекстСценария = Данные.ИзмененныеМетаданныеИТекстСценария;
	ИзмененныеФайлы = Данные.ИзмененныеФайлы;
	ИзмененныеНастройки = Данные.ИзмененныеНастройки;
	НовыеНастройки = Данные.НовыеНастройки;
	УдаленныеНастройки = Данные.УдаленныеНастройки;
	ИзмененныеUID = Новый Соответствие;
	
	ИмяФайла = ДополнитьРазделительПути(КаталогВременныхФайловВетки) + "changes.json";
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		#Если НЕ ВебКлиент Тогда	   
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		ДанныеИзменений = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		#КонецЕсли
	Иначе
		ДанныеИзменений = Новый Структура;
	КонецЕсли;	 
	
	Если ДанныеИзменений.Свойство("НовыеКаталоги") Тогда
		Данные.НовыеКаталоги = ДанныеИзменений.НовыеКаталоги;
	КонецЕсли;	 
	
	Файлы = НайтиФайлы(КаталогВременныхФайловВетки, "meta.yaml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя,"UTF-8",,,Ложь);
		ТекстМетаданныеСценария = Текст.Прочитать();
		Текст.Закрыть();
		
		ИмяФайлаОригинальныхМетаданных = СтрЗаменить(Файл.ПолноеИмя, "meta.yaml", "orig.yaml");
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаОригинальныхМетаданных,"UTF-8",,,Ложь);
		ОригинальныйТекстМетаданныеСценария = Текст.Прочитать();
		Текст.Закрыть();
		
		ФайлСценария = Новый Файл(Файл.ПолноеИмя); 
		ИмяФайлаТекстСценария = ФайлСценария.Путь + "scen.feature";
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
		
		ДанныеСценария = ДанныеСценарияИзYaml(Файл.ПолноеИмя,ИмяФайлаТекстСценария, ДопПараметры);
		ДанныеСценария.Вставить("ПутьКФайлуМетаданныхСценария", Файл.ПолноеИмя);
		
		ИзмененныеМетаданныеИТекстСценария.Добавить(ДанныеСценария);
		
		ИмяФайлаТекстСценария = ФайлСценария.Путь + "orig.feature";
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаТекстСценария,"UTF-8",,,Ложь);
		ИсходныйТекстСценария = Текст.Прочитать();
		Текст.Закрыть();
		
		ДанныеСценария.Вставить("ИсходныйТекстСценария", ИсходныйТекстСценария);
		ДанныеСценария.Вставить("ТекстМетаданныеСценария", ТекстМетаданныеСценария);
		ДанныеСценария.Вставить("ОригинальныйТекстМетаданныеСценария", ОригинальныйТекстМетаданныеСценария);
		
		Файл = Новый Файл(ФайлСценария.Путь + "new.json"); 
		Если Файл.Существует() Тогда
			ДанныеНовогоСценария = Неопределено;
			ДанныеСценария.Вставить("ЭтоНовыйЭлемент", Истина);
			#Если НЕ ВебКлиент Тогда	   
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя);
			ДанныеНовогоСценария = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			#КонецЕсли
		
			ДанныеСценария.Вставить("ДанныеИерархии", ДанныеНовогоСценария.ДанныеИерархии);
		КонецЕсли;	 
		
		Файл = Новый Файл(ФайлСценария.Путь + "newpath.json"); 
		Если Файл.Существует() Тогда
			ДанныеНовойИерархии = Неопределено;
			#Если НЕ ВебКлиент Тогда	   
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя);
			ДанныеНовойИерархии = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			#КонецЕсли
		
			ДанныеСценария.Вставить("НовыйПутьВДереве", ДанныеНовойИерархии.ПолноеИмяВДереве);
		КонецЕсли;	 
		
		ДанныеИзмененногоUID = Новый Структура;
		ДанныеИзмененногоUID.Вставить("UID", ДанныеСценария["ДанныеСценария"]["UID"]);
		ДанныеИзмененногоUID.Вставить("Имя", ДанныеСценария["ДанныеСценария"]["Имя"]);
		ДанныеИзмененногоUID.Вставить("Код", ДанныеСценария["ДанныеСценария"]["Код"]);
		
		ИзмененныеUID.Вставить(ДанныеСценария["ДанныеСценария"]["UID"], ДанныеИзмененногоUID);
	КонецЦикла;	
	
	Файлы = НайтиФайлы(КаталогВременныхФайловВетки, "files.json", Истина);
	Для Каждого Файл Из Файлы Цикл
		ДанныеФайлов = Неопределено;
		#Если НЕ ВебКлиент Тогда	   
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя);
		ДанныеФайлов = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		#КонецЕсли
	
		Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
			ИзмененныеФайлы.Добавить(ДанныеФайла);
			
			ДанныеИзмененногоUID = Новый Структура;
			ДанныеИзмененногоUID.Вставить("UID", ДанныеФайла.UIDСценария);
			ДанныеИзмененногоUID.Вставить("Имя", ДанныеФайла.ИмяСценария);
			ДанныеИзмененногоUID.Вставить("Код", ДанныеФайла.КодСценария);
			
			ИзмененныеUID.Вставить(ДанныеФайла.UIDСценария, ДанныеИзмененногоUID);
		КонецЦикла;	 
		
	КонецЦикла;	
	
	СценарииСПометкойНаУдаление = Новый Массив;
	ИмяФайла = ДополнитьРазделительПути(КаталогВременныхФайловВетки) + "deleted.json";
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		#Если НЕ ВебКлиент Тогда	   
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя);
		СценарииСПометкойНаУдаление = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		#КонецЕсли
		
		Для Каждого ДанныеСценария Из СценарииСПометкойНаУдаление Цикл
			ИзмененныеUID.Вставить(ДанныеСценария.UID, ДанныеСценария);
		КонецЦикла;	 
	    
	КонецЕсли;	
	Данные.Вставить("СценарииСПометкойНаУдаление", СценарииСПометкойНаУдаление);
	
	Файлы = НайтиФайлы(КаталогВременныхФайловВетки, "newtest.json", Истина);
	Для Каждого Файл Из Файлы Цикл
		КаталогФайла = Файл.Путь;
		ФайлКаталогФайла = Новый Файл(КаталогФайла);
		Если НРег(ФайлКаталогФайла.Имя) = "test" Тогда
			#Если НЕ ВебКлиент Тогда	   
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя);
			ДанныеНовыхНастроекСценария = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Для Каждого Элем Из ДанныеНовыхНастроекСценария.НовыеНастройки Цикл
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ПолноеИмяФайла", Элем.ИмяФайла);
				ДанныеНастройки = ДанныеНастройкиСценарияИзYaml(Элем.ИмяФайла, ДопПараметры);
				
				НовыеНастройки.Добавить(ДанныеНастройки);
			КонецЦикла;	 
			
			#КонецЕсли
		КонецЕсли;	 
	КонецЦикла;	 
	
	Файлы = НайтиФайлы(КаталогВременныхФайловВетки, "deletedtests.json", Истина);
	Для Каждого Файл Из Файлы Цикл
		КаталогФайла = Файл.Путь;
		ФайлКаталогФайла = Новый Файл(КаталогФайла);
		Если НРег(ФайлКаталогФайла.Имя) = "test" Тогда
			#Если НЕ ВебКлиент Тогда	   
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.ОткрытьФайл(Файл.ПолноеИмя);
			ДанныеУдаленныхНастроекСценария = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Для Каждого Элем Из ДанныеУдаленныхНастроекСценария Цикл
				UIDСценария = Элем.UIDСценария;
				
				ДанныеИзмененногоUID = Новый Структура;
				ДанныеИзмененногоUID.Вставить("UID", Элем.UIDСценария);
				ДанныеИзмененногоUID.Вставить("Имя", Элем.СценарийНаименование);
				ДанныеИзмененногоUID.Вставить("Код", Элем.КодСценария);
				
				ИзмененныеUID.Вставить(Элем.UIDСценария, ДанныеИзмененногоUID);
				
				УдаленныеНастройки.Добавить(Элем);
			КонецЦикла;	 
			
			#КонецЕсли
		КонецЕсли;	 
	КонецЦикла;	 
	
	Файлы = НайтиФайлы(КаталогВременныхФайловВетки, "*.yaml", Истина);
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.Имя) = "meta.yaml" Тогда
			Продолжить;
		КонецЕсли;	 
		
		КаталогФайла = Новый Файл(Файл.Путь);
		Если КаталогФайла.Имя <> "test" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(Файл.Имя, "_orig.yaml") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПолноеИмяФайла", Файл.ПолноеИмя);
		
		ДанныеНастройки = ДанныеНастройкиСценарияИзYaml(Файл.ПолноеИмя, ДопПараметры);
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Файл.ПолноеИмя,"UTF-8");
		ТекстМетаданныхНастройки = Текст.Прочитать();
		Текст.Закрыть();
		
		ИмяФайлаОригинальныеМетаданныеНастройки = СтрЗаменить(Файл.ПолноеИмя, ".yaml", "_orig.yaml");
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайлаОригинальныеМетаданныеНастройки,"UTF-8");
		ОригинальныйТекстМетаданныхНастройки = Текст.Прочитать();
		Текст.Закрыть();
		
		ДанныеИзмененногоUID = Новый Структура;
		ДанныеИзмененногоUID.Вставить("UID", ДанныеНастройки["ДанныеТеста"]["UIDСценария"]);
		ДанныеИзмененногоUID.Вставить("Имя", ДанныеНастройки["ДанныеТеста"]["СценарийНаименование"]);
		ДанныеИзмененногоUID.Вставить("Код", "");
		
		ДанныеНастройки.Вставить("ОригинальныйТекстМетаданныхНастройки", ОригинальныйТекстМетаданныхНастройки);
		ДанныеНастройки.Вставить("ТекстМетаданныхНастройки", ТекстМетаданныхНастройки);
		
		ИзмененныеНастройки.Добавить(ДанныеНастройки);
		
		ИзмененныеUID.Вставить(ДанныеНастройки["ДанныеТеста"]["UIDСценария"], ДанныеИзмененногоUID);
	КонецЦикла;	 
	
	Для Каждого Элем Из ИзмененныеUID Цикл
		Данные.ИзмененныеUID.Добавить(Элем.Значение);
	КонецЦикла;	 
	
	Если Данные.ИзмененныеUID.Количество() > 0 Тогда
		Данные.Вставить("ЕстьИзменения", Истина);
	КонецЕсли;	 
	
	Возврат Данные; 
КонецФункции	 

// Удаляет файлы сценариев из временного каталога
// Параметры:
//  Ветка - Справочник.Ветки
//  ИмяПроекта - Строка
//
Процедура УдалитьВременныеФайлыСценариевРаботыПользователей(Ветка, ИмяПроекта) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	Каталог = КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта);
	
	Файл = Новый Файл(Каталог);
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(Каталог);
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		         НСтр("ru = Не получилось удалить каталог <%1>.'" + Символы.ПС + ОписаниеОшибки()), Каталог);
		КонецПопытки;
	КонецЕсли;	 
КонецПроцедуры 

// Удаляет файлы сценариев из временного каталога
// Параметры:
//  Ветка - Справочник.Ветки
//  Код - Строка
//
Процедура УдалитьВременныеФайлыСценария(Ветка, ИмяПроекта, КодСценария, КодНастройки) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	Каталог = КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта);
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог) + КодСценария;
	
	ЭлементыДляУдаления = Новый Массив;
	Если КодНастройки = Неопределено Тогда
		ЭлементыДляУдаления.Добавить(Каталог);
	Иначе
		Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог) + "test";
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог) + КодНастройки + ".yaml";
		ЭлементыДляУдаления.Добавить(ИмяФайла);
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог) + КодНастройки + "_orig.yaml";
		ЭлементыДляУдаления.Добавить(ИмяФайла);
	КонецЕсли;	 
	
	Для Каждого ЭлементДляУдаления Из ЭлементыДляУдаления Цикл
		Файл = Новый Файл(ЭлементДляУдаления);
		Если Файл.Существует() Тогда
			Попытка
				УдалитьФайлы(ЭлементДляУдаления);
			Исключение
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = Не получилось удалить <%1>.'" + Символы.ПС + ОписаниеОшибки()), ЭлементДляУдаления);
			КонецПопытки;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

// Возвращает данные сценария из репозитория
// Параметры:
//  ДанныеДляПолученияСценария - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеСценарияИзРепозитория(ДанныеДляПолученияСценария) Экспорт
	
	Если НЕ ДанныеДляПолученияСценария.Свойство("UIDСценария") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка открытия сценария. Не передан параметр ""UIDСценария"".'");
	КонецЕсли;	
	
	СтрокаКеш = СтрокаКешСлужебныеДанныеСценария(ДанныеДляПолученияСценария);
	Если ПараметрыПриложения["КешДанныхСценариев"] = Неопределено Тогда
		ПараметрыПриложения.Вставить("КешДанныхСценариев", Новый Соответствие);
	КонецЕсли;	                                                             
	
	ПрочитанныеДанныеСценария = ПараметрыПриложения["КешДанныхСценариев"][СтрокаКеш];
	Если ПрочитанныеДанныеСценария <> Неопределено Тогда
		Возврат ПрочитанныеДанныеСценария;
	КонецЕсли;	
	
	Результат = ТестированиеСлужебныйВызовСервера.ДанныеСценарияИзРепозитория(
		ДанныеДляПолученияСценария.Проект,
		ДанныеДляПолученияСценария,
		ДанныеДляПолученияСценария.ТокенПользователя,
		ДанныеДляПолученияСценария.Ветка,
		ДанныеДляПолученияСценария.ИдентификаторКоммита
		);
	Если Результат.Ошибка Тогда
		ВызватьИсключение Результат.ТекстОшибки;
	КонецЕсли;	
	
	ПрочитанныеДанныеСценария = ДанныеСценарияИзYaml(
		Результат.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),
		Результат.ДвоичныеДанныеТекстСценария.ОткрытьПотокДляЧтения(), ДанныеДляПолученияСценария);
		

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(Результат.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),"UTF-8");
	ОригинальныйТекстМетаданных = Текст.Прочитать();
	Текст.Закрыть();
	
	ПрочитанныеДанныеСценария.Вставить("ОригинальныйТекстМетаданных", ОригинальныйТекстМетаданных);
	
	ПараметрыПриложения["КешДанныхСценариев"].Вставить(СтрокаКеш, ПрочитанныеДанныеСценария);
	
	Возврат ПрочитанныеДанныеСценария; 	
КонецФункции	 

// Открывает сценарий для редактирования в репозитории
// Параметры:
//  ДанныеДляПолученияСценария - Структура
//
Процедура ОткрытьСценарийДляРедактированияВРепозитории(ДанныеДляПолученияСценария) Экспорт
	ДополнитьПараметрыОткрытияСценария(ДанныеДляПолученияСценария);
	
	ЧитатьДанныеИзРепозитория = Истина;
	Если НЕ ДанныеДляПолученияСценария.Свойство("КопированиеСценария") Тогда
		Если ДанныеДляПолученияСценария.Свойство("ЭтоНовыйЭлемент") И ДанныеДляПолученияСценария.ЭтоНовыйЭлемент Тогда
			ЧитатьДанныеИзРепозитория = Ложь;
		КонецЕсли;	 
	КонецЕсли;
	
	Если ДанныеДляПолученияСценария.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
		ДанныеРанееИзмененныхСценариев = ДанныеДляПолученияСценария.ДанныеРанееИзмененныхСценариев;
		Для Каждого ПрочитанныеДанныеСценария Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
			Если ДанныеДляПолученияСценария.UIDСценария = ПрочитанныеДанныеСценария["ДанныеСценария"]["UID"] Тогда
				Если ПрочитанныеДанныеСценария["ЭтоНовыйЭлемент"] = Истина Тогда
					ЧитатьДанныеИзРепозитория = Ложь;
					ДанныеДляПолученияСценария.Вставить("ЭтоНовыйЭлемент", Истина);
					Прервать;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если ДанныеДляПолученияСценария.Свойство("КопируетсяСценарийКоторогоНетВРепозитории")
		И ДанныеДляПолученияСценария.КопируетсяСценарийКоторогоНетВРепозитории Тогда
		ЧитатьДанныеИзРепозитория = Ложь;
	КонецЕсли;	 
	
	ОригинальныйТекстМетаданных = Неопределено;
	ПрочитанныеДанныеСценария = Неопределено;
	Если ЧитатьДанныеИзРепозитория Тогда
		ПрочитанныеДанныеСценария = ТестированиеКлиент.ДанныеСценарияИзРепозитория(ДанныеДляПолученияСценария);
		ОригинальныйТекстМетаданных = ПрочитанныеДанныеСценария["ОригинальныйТекстМетаданных"];
	КонецЕсли;	 
	
	ИмяВеткиСтрокой = ТестированиеСлужебныйВызовСервера.ИмяВеткиСтрокой(ДанныеДляПолученияСценария.Ветка);
	
	ДанныеРанееИзмененныхСценариев =
		ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(ДанныеДляПолученияСценария.Ветка, ДанныеДляПолученияСценария.Проект);
		
	Если ДанныеДляПолученияСценария.Свойство("ПараметрыФормы") Тогда
		ПараметрыФормы = ДанныеДляПолученияСценария.ПараметрыФормы;
	Иначе		
		ПараметрыФормы = Новый Структура;
	КонецЕсли;	 	
	ПараметрыФормы.Вставить("ДанныеСценария", ПрочитанныеДанныеСценария);
	ПараметрыФормы.Вставить("АдресСлужебныеДанныеСценариев", ДанныеДляПолученияСценария.АдресСлужебныеДанныеСценариев);
	ПараметрыФормы.Вставить("ТокенПользователя", ДанныеДляПолученияСценария.ТокенПользователя);
	ПараметрыФормы.Вставить("Ветка", ДанныеДляПолученияСценария.Ветка);
	ПараметрыФормы.Вставить("Проект", ДанныеДляПолученияСценария.Проект);
	ПараметрыФормы.Вставить("UIDСценария", ДанныеДляПолученияСценария.UIDСценария);
	ПараметрыФормы.Вставить("ИдентификаторКоммита", ДанныеДляПолученияСценария.ИдентификаторКоммита);
	ПараметрыФормы.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	ПараметрыФормы.Вставить("ОригинальныйТекстМетаданных", ОригинальныйТекстМетаданных);
	Если ДанныеДляПолученияСценария.Свойство("СсылкаНаОшибку") Тогда
		ПараметрыФормы.Вставить("СсылкаНаОшибку", ДанныеДляПолученияСценария.СсылкаНаОшибку);
	КонецЕсли;	 
	Если ДанныеДляПолученияСценария.Свойство("ЭтоНовыйЭлемент") Тогда
		ПараметрыФормы.Вставить("ЭтоНовыйЭлемент", ДанныеДляПолученияСценария.ЭтоНовыйЭлемент);
	КонецЕсли;	 
	Если ДанныеДляПолученияСценария.Свойство("ДанныеИерархии") Тогда
		ПараметрыФормы.Вставить("ДанныеИерархии", ДанныеДляПолученияСценария.ДанныеИерархии);
	КонецЕсли;	 
	Если ДанныеДляПолученияСценария.Свойство("ПерейтиКСтрокеСценария") Тогда
		ПараметрыФормы.Вставить("ПерейтиКСтрокеСценария", ДанныеДляПолученияСценария.ПерейтиКСтрокеСценария);
	КонецЕсли;	 
	Если ДанныеДляПолученияСценария.Свойство("КопированиеСценария") Тогда
		ПараметрыФормы.Вставить("КопированиеСценария", ДанныеДляПолученияСценария.КопированиеСценария);
	КонецЕсли;	 
	Если ДанныеДляПолученияСценария.Свойство("UIDСценарияКопирования") Тогда
		ПараметрыФормы.Вставить("UIDСценарияКопирования", ДанныеДляПолученияСценария.UIDСценарияКопирования);
	КонецЕсли;	 
	Если ДанныеДляПолученияСценария.Свойство("КопируетсяСценарийКоторогоНетВРепозитории") Тогда
		ПараметрыФормы.Вставить("КопируетсяСценарийКоторогоНетВРепозитории", ДанныеДляПолученияСценария.КопируетсяСценарийКоторогоНетВРепозитории);
	КонецЕсли;	 
	
	СтрокаУникальности = ДанныеДляПолученияСценария.UIDСценария;
	Если НЕ ЗначениеЗаполнено(СтрокаУникальности) Тогда
		СтрокаУникальности = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;	 
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаЭлементаGit",
		ПараметрыФормы, , Строка(СтрокаУникальности) + ИмяВеткиСтрокой);
КонецПроцедуры 

// Открывает настройку сценария для редактирования в репозитории
// Параметры:
//  ДанныеДляПолучения - Структура
//
Процедура ОткрытьНастройкуСценарияДляРедактированияВРепозитории(ДанныеДляПолучения) Экспорт
	НадоЧитатьДанныеИзРепозитория = Истина;
	Если ДанныеДляПолучения.Свойство("ЭтоНовыйЭлемент") И ДанныеДляПолучения.ЭтоНовыйЭлемент Тогда
		НадоЧитатьДанныеИзРепозитория = Ложь;
	КонецЕсли;	 
	
	Если ДанныеДляПолучения.Свойство("КопированиеЭлемента") И ДанныеДляПолучения.КопированиеЭлемента Тогда
		Если ДанныеДляПолучения.Свойство("КопируетсяНастройкаКоторойНетВРепозитории")
			И ДанныеДляПолучения.КопируетсяНастройкаКоторойНетВРепозитории Тогда
			
			НадоЧитатьДанныеИзРепозитория = Ложь;
		Иначе	
			НадоЧитатьДанныеИзРепозитория = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НадоЧитатьДанныеИзРепозитория Тогда
		Результат = ТестированиеСлужебныйВызовСервера.ДанныеНастройкиСценарияИзРепозитория(
			ДанныеДляПолучения.Проект,
			ДанныеДляПолучения,
			ДанныеДляПолучения.ТокенПользователя,
			ДанныеДляПолучения.Ветка,
			ДанныеДляПолучения.ИдентификаторКоммита
			);
		Если Результат.Ошибка Тогда
			ВызватьИсключение Результат.ТекстОшибки;
		КонецЕсли;	
		
		ПрочитанныеДанныеНастройки = ДанныеНастройкиСценарияИзYaml(
			Результат.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),ДанныеДляПолучения);
			
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(Результат.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(),"UTF-8");
		ОригинальныйТекстМетаданныхНастройки = Текст.Прочитать();
		Текст.Закрыть();
	Иначе	
		ПрочитанныеДанныеНастройки = Неопределено;
		ОригинальныйТекстМетаданныхНастройки = "";
	КонецЕсли;	 
		
	ДанныеРанееИзмененныхСценариев =
		ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(ДанныеДляПолучения.Ветка, ДанныеДляПолучения.Проект);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеНастройки", ПрочитанныеДанныеНастройки);
	ПараметрыФормы.Вставить("АдресСлужебныеДанныеСценариев", ДанныеДляПолучения.АдресСлужебныеДанныеСценариев);
	ПараметрыФормы.Вставить("ТокенПользователя", ДанныеДляПолучения.ТокенПользователя);
	ПараметрыФормы.Вставить("Ветка", ДанныеДляПолучения.Ветка);
	ПараметрыФормы.Вставить("Проект", ДанныеДляПолучения.Проект);
	ПараметрыФормы.Вставить("UIDСценария", ДанныеДляПолучения.UIDСценария);
	ПараметрыФормы.Вставить("UID", ДанныеДляПолучения.UID);
	ПараметрыФормы.Вставить("Наименование", ДанныеДляПолучения.Наименование);
	ПараметрыФормы.Вставить("ПрофильПользователя", ДанныеДляПолучения.ПрофильПользователя);
	ПараметрыФормы.Вставить("ПараметрыЗапуска", ДанныеДляПолучения.ПараметрыЗапуска);
	ПараметрыФормы.Вставить("ЭталоннаяБаза", ДанныеДляПолучения.ЭталоннаяБаза);
	ПараметрыФормы.Вставить("Код", ДанныеДляПолучения.Код);
	ПараметрыФормы.Вставить("КодСценария", ДанныеДляПолучения.КодСценария);
	ПараметрыФормы.Вставить("СценарийНаименование", ДанныеДляПолучения.СценарийНаименование);
	ПараметрыФормы.Вставить("ИдентификаторКоммита", ДанныеДляПолучения.ИдентификаторКоммита);
	ПараметрыФормы.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	ПараметрыФормы.Вставить("ОригинальныйТекстМетаданныхНастройки", ОригинальныйТекстМетаданныхНастройки);
	ПараметрыФормы.Вставить("ПрофильПользователяСценарий", ДанныеДляПолучения.ПрофильПользователяСценарий);
	Если ДанныеДляПолучения.Свойство("ЭтоНовыйЭлемент") Тогда
		ПараметрыФормы.Вставить("ЭтоНовыйЭлемент", ДанныеДляПолучения.ЭтоНовыйЭлемент);
	КонецЕсли;	 
	Если ДанныеДляПолучения.Свойство("КопированиеЭлемента") Тогда
		ПараметрыФормы.Вставить("КопированиеЭлемента", ДанныеДляПолучения.КопированиеЭлемента);
	КонецЕсли;	 
	Если ДанныеДляПолучения.Свойство("UIDКопируемойНастройки") Тогда
		ПараметрыФормы.Вставить("UIDКопируемойНастройки", ДанныеДляПолучения.UIDКопируемойНастройки);
	КонецЕсли;	 
	
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаНастройкиТестированияGit",
		ПараметрыФормы, , ДанныеДляПолучения.UID)
КонецПроцедуры 

// Возвращает данные об локальных изменениях файлов репозитория
// Параметры:
//  ДанныеДляПолученияСценария - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция СостояниеФайловЛокальнойКопииРепозитория(ДанныеДляПолученияФайлов) Экспорт
	ИмяФайлаСостоянияФайлов = ИмяФайлаСостоянияФайлов(ДанныеДляПолученияФайлов);
	Файл = Новый Файл(ИмяФайлаСостоянияФайлов);	
	
	ДанныеФайлов = Новый Соответствие;
		
	Если НЕ Файл.Существует() Тогда
		Возврат ДанныеФайлов;
	КонецЕсли;	 	
	
	#Если НЕ ВебКлиент Тогда	   
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяФайлаСостоянияФайлов);
	
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
	#КонецЕсли
КонецФункции	 

// Обновляет данные о локально измененных файлах репозитория
// Параметры:
//  ДанныеДляПолученияСценария - Структура
//
Процедура ОбновитьДанныеОСпискеЛокальноИзмененныхФайловРепозитория(ДанныеДляПолученияФайлов) Экспорт
	ЕстьИзменения = Ложь;
	Для Каждого ДанныеФайла Из ДанныеДляПолученияФайлов.ДанныеСценария.ДанныеФайлов Цикл
		Если ЗначениеЗаполнено(ДанныеФайла.Действие) ИЛИ ДанныеФайла.ИзмененоИмяФайла Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если НЕ ЕстьИзменения Тогда
		ИмяФайлаСостоянияФайлов = ИмяФайлаСостоянияФайлов(ДанныеДляПолученияФайлов);
		Файл = Новый Файл(ИмяФайлаСостоянияФайлов); 
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайлаСостоянияФайлов);
		КонецЕсли;	 
		
		Возврат;
	КонецЕсли;	 
	
	СостояниеФайловЛокальнойКопииРепозитория = Новый Массив;
	
	Для Каждого ДанныеФайла Из ДанныеДляПолученияФайлов.ДанныеСценария.ДанныеФайлов Цикл
		Если ЗначениеЗаполнено(ДанныеФайла.Действие) ИЛИ ДанныеФайла.ИзмененоИмяФайла Тогда
			СостояниеФайловЛокальнойКопииРепозитория.Добавить(ДанныеФайла);
		КонецЕсли;	 
	КонецЦикла;	 
	
	ЗаписатьСостояниеФайловЛокальнойКопииРепозитория(ДанныеДляПолученияФайлов, СостояниеФайловЛокальнойКопииРепозитория);
КонецПроцедуры 

// Возвращает токен пользователя для чтения информации из репозитория
// Параметры:
//  ПутьКФайлуТокена - Строка
//
// Возвращаемое значение:
//  Строка
//
Функция ТокенПользователя(ПутьКФайлуТокена = Неопределено) Экспорт
	
	Если ПутьКФайлуТокена =  Неопределено Тогда
		ПутьКФайлуТокена = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("Тестирование", "ФайлСодержащийТокен");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуТокена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТокенПользователя = "";
	Если НЕ ПустаяСтрока(ПутьКФайлуТокена) Тогда
		Файл = Новый Файл(ПутьКФайлуТокена);
		Если НЕ Файл.Существует() Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл, содержащий токен GitLab не существует. <%1>'"), ПутьКФайлуТокена);
		КонецЕсли;	 
		
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ПутьКФайлуТокена,"UTF-8",,, Ложь);
		ТокенПользователя = Текст.Прочитать();
		Текст.Закрыть();
		
	КонецЕсли;
	Возврат ТокенПользователя;
	
КонецФункции

// Обновляет параметры для чтения информации из репозитория
// Параметры:
//  Параметры - Структура
//
Процедура ДополнитьПараметрыОткрытияСценария(Параметры) Экспорт
	
	ТекущийПроект = Параметры.Проект;
	ПараметрыПроекта = ТестированиеСлужебныйВызовСервера.ПараметрыДляПолученияСценариев(ТекущийПроект);
	Если НЕ Параметры.Свойство("Ветка") Тогда
		Параметры.Вставить("Ветка", ПараметрыПроекта.Ветка);
		ИмяВеткиСтрокой = ПараметрыПроекта.ИмяВеткиСтрокой;
	Иначе	
		ИмяВеткиСтрокой = ТестированиеСлужебныйВызовСервера.ИмяВеткиСтрокой(Параметры.Ветка)
	КонецЕсли;

	ИмяПроекта = ТестированиеСлужебныйВызовСервера.ИмяПроектаСтрокой(Параметры.Проект);
	
	ЗаписатьИдентификаторКоммитаВоВременныйФайл = Ложь;
	
	Если НЕ Параметры.Свойство("ТокенПользователя") Тогда
		Параметры.Вставить("ТокенПользователя", ТокенПользователя(ПараметрыПроекта.ПутьКФайлуТокена)); 
		Если НЕ ЗначениеЗаполнено(Параметры.ТокенПользователя) Тогда
			Параметры.Вставить("ТокенПроекта", ТокенПроекта(Параметры.Проект));
		КонецЕсли;	 
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
		Параметры.Вставить("ДанныеРанееИзмененныхСценариев", ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Параметры.Ветка, Параметры.Проект));
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ИдентификаторКоммита") Тогда
		ЗаписатьИдентификаторКоммитаВоВременныйФайл = Истина;
		Параметры.Вставить("АвторКоммита", "");
		Параметры.Вставить("ДатаКоммита", Неопределено);
		Параметры.Вставить("ИдентификаторКоммита", "");
		Параметры.Вставить("СсылкаНаКоммит", "");
		Если Параметры.ДанныеРанееИзмененныхСценариев.ИзмененныеUID.Количество() > 0 Тогда
			ДанныеКоммитаВетки = ТестированиеКлиент.ДанныеКоммитаВетки(Параметры.Ветка, ИмяПроекта);
			Если ЗначениеЗаполнено(ДанныеКоммитаВетки.АвторКоммита) Тогда
				Параметры.Вставить("АвторКоммита", ДанныеКоммитаВетки.АвторКоммита);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеКоммитаВетки.ДатаКоммита) Тогда
				Параметры.Вставить("ДатаКоммита", ДанныеКоммитаВетки.ДатаКоммита);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеКоммитаВетки.ИдентификаторКоммита) Тогда
				Параметры.Вставить("ИдентификаторКоммита", ДанныеКоммитаВетки.ИдентификаторКоммита);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДанныеКоммитаВетки.СсылкаНаКоммит) Тогда
				Параметры.Вставить("СсылкаНаКоммит", ДанныеКоммитаВетки.СсылкаНаКоммит);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("АдресСлужебныеДанныеСценариев") ИЛИ
		(Параметры.Свойство("АдресСлужебныеДанныеСценариев") И НЕ ЗначениеЗаполнено(Параметры.АдресСлужебныеДанныеСценариев)) Тогда
		СлужебныеДанные = ТестированиеСлужебныйВызовСервера.СлужебныеДанныеСценариев(Параметры);
		ЗаписатьИдентификаторКоммитаВоВременныйФайл = Истина;
		Параметры.Вставить("АдресСлужебныеДанныеСценариев", СлужебныеДанные.АдресСлужебныеДанныеСценариев);
		Параметры.Вставить("АдресКешСнипетовИменСценариевИменСценариев", СлужебныеДанные.АдресКешСнипетовИменСценариевИменСценариев);
		Параметры.Вставить("АдресКешДанныеКоммита", СлужебныеДанные.АдресКешДанныеКоммита);
	КонецЕсли;
	
	Если ЗаписатьИдентификаторКоммитаВоВременныйФайл Тогда
		ТестированиеКлиент.ЗаписатьИдентификаторКоммитаВоВременныйФайл(
			Параметры.Ветка, ИмяПроекта, Параметры.ИдентификаторКоммита, 
			Параметры.АвторКоммита, Параметры.ДатаКоммита, Параметры.СсылкаНаКоммит);
	КонецЕсли;

КонецПроцедуры

// Возвращает данные настроек сценария из репозитория
// Параметры:
//  ДанныеДляПолученияСценария - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеНастроекСценарияИзРепозитория(ДанныеДляПолученияНастроек) Экспорт
	Результат = ТестированиеСлужебныйВызовСервера.ДанныеНастроекСценарияИзРепозитория(ДанныеДляПолученияНастроек);
	
	Для Каждого ДанныеНастройки Из Результат.ДанныеНастроек Цикл
		ДанныеДляПолученияНастройки = Новый Структура;
		ДанныеДляПолученияНастройки.Вставить("ПолноеИмяФайла", ДанныеНастройки.path);
		ПрочитанныеДанныеНастройки = ТестированиеКлиент.ДанныеНастройкиСценарияИзYaml(
			ДанныеНастройки.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(), ДанныеДляПолученияНастройки);
			
		ДанныеНастройки.Вставить("UID", ПрочитанныеДанныеНастройки["ДанныеТеста"]["UID"]);
		ДанныеНастройки.Вставить("Наименование", ПрочитанныеДанныеНастройки["ДанныеТеста"]["Имя"]);
		ДанныеНастройки.Вставить("СценарийНаименование", ПрочитанныеДанныеНастройки["ДанныеТеста"]["СценарийНаименование"]);
		ДанныеНастройки.Вставить("ЭталоннаяБаза", ПрочитанныеДанныеНастройки["ДанныеТеста"]["ЭталоннаяБазаИмя"]);
		ДанныеНастройки.Вставить("Код", ПрочитанныеДанныеНастройки["ДанныеТеста"]["Код"]);
		ДанныеНастройки.Вставить("ПрофильПользователя", ПрочитанныеДанныеНастройки["ДанныеТеста"]["ПрофильПользователя"]);
		ДанныеНастройки.Вставить("ПараметрыЗапуска", ПрочитанныеДанныеНастройки["ДанныеТеста"]["ПараметрыЗапуска"]);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	 

// Записывает данный новой группы дерева сценариев во временный файл
//
// Параметры:
//  Стр - Строка
//  Ветка - Справочник.Ветки
//  Проект - Справочник.Проекты
//
Процедура ЗаписатьДанныеНовойГруппы(Стр, Ветка, Проект) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	ИмяПроекта = ТестированиеСлужебныйВызовСервера.ИмяПроектаСтрокой(Проект);
	Каталог = ДополнитьРазделительПути(КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта));
	
	ИмяФайла = Каталог + "changes.json";
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Существует() Тогда
		#Если НЕ ВебКлиент Тогда	   
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(ИмяФайла);
		ДанныеИзменений = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		УдалитьФайлы(ИмяФайла);
		#КонецЕсли
	Иначе
		ДанныеИзменений = Новый Структура;
		ДанныеИзменений.Вставить("НовыеКаталоги", Новый Массив);
	КонецЕсли;	 
	
	ДанныеИзменений.НовыеКаталоги.Добавить(Стр);
	
	#Если НЕ ВебКлиент Тогда	   
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла,"UTF-8");
	ЗаписатьJSON(ЗаписьJSON, ДанныеИзменений);
	ЗаписьJSON.Закрыть();
	#КонецЕсли
	
КонецПроцедуры 

// Записывает данные об удаленных сценариях
//
// Параметры:
//  СценарииСПометкойНаУдаление - Массив
//  Ветка - Справочник.Ветки
//  Проект - Справочник.Проекты
//
Процедура ЗаписатьДанныеОбУдаленныхСценариях(СценарииСПометкойНаУдаление, Ветка, Проект) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	ИмяПроекта = ТестированиеСлужебныйВызовСервера.ИмяПроектаСтрокой(Проект);
	Каталог = ДополнитьРазделительПути(КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта));
	
	ИмяФайла = Каталог + "deleted.json";
	
	#Если НЕ ВебКлиент Тогда	   
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла,"UTF-8");
	ЗаписатьJSON(ЗаписьJSON, СценарииСПометкойНаУдаление);
	ЗаписьJSON.Закрыть();
	#КонецЕсли
	
КонецПроцедуры 

// Записывает данные об удаленных настройках сценариев
//
// Параметры:
//  НастройкиСПометкойНаУдаление - Массив
//  Ветка - Справочник.Ветки
//  Проект - Справочник.Проекты
//  КодСценария - Строка
//
Процедура ЗаписатьДанныеОбУдаленныхНастройках(НастройкиСПометкойНаУдаление, Ветка, Проект, КодСценария) Экспорт
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	ИмяПроекта = ТестированиеСлужебныйВызовСервера.ИмяПроектаСтрокой(Проект);
	КаталогВременныхФайловСценария = КаталогВременныхФайловСценария(КаталогДляДанныхТестирования,
		Ветка, ИмяПроекта, КодСценария);
		
	ИмяФайла = ДополнитьРазделительПути(ДополнитьРазделительПути(КаталогВременныхФайловСценария) + "test") + "deletedtests.json";
	
	Файл = Новый Файл(ИмяФайла);
	КаталогФайла = Новый Файл(Файл.Путь);
	Если НЕ КаталогФайла.Существует() Тогда
		СоздатьКаталог(КаталогФайла.ПолноеИмя);
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда	   
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(ИмяФайла,"UTF-8");
	ЗаписатьJSON(ЗаписьJSON, НастройкиСПометкойНаУдаление);
	ЗаписьJSON.Закрыть();
	#КонецЕсли
	
КонецПроцедуры 

// Возвращает текущие данные сценария. Если сценарий был изменен локально, то берутся локальные изменения. Иначе данные из репозитория.
// Параметры:
//  СтруктураПараметров - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция ТекущиеДанныеСценария(СтруктураПараметров) Экспорт
	Если СтруктураПараметров.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
		ДанныеРанееИзмененныхСценариев = СтруктураПараметров.ДанныеРанееИзмененныхСценариев;
	Иначе	
		ДанныеРанееИзмененныхСценариев = ДанныеРанееИзмененныхСценариев(СтруктураПараметров.Ветка, СтруктураПараметров.Проект);
	КонецЕсли;
	
	Для Каждого ТекДанные Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если ТекДанные["ДанныеСценария"]["UID"] = СтруктураПараметров.UIDСценария Тогда
			Возврат ТекДанные; 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Возврат ДанныеСценарияИзРепозитория(СтруктураПараметров); 
	
КонецФункции	 

// Делает выгрузку переданных данных в формате yaml
// Параметры:
//  ДанныеДляВыгрузки - Массив
//
Процедура ВыгрузитьДанныеВКаталогВФорматеYaml(ДанныеДляВыгрузки) Экспорт
	СтандартноеЗначениеОтступа = СтандартноеЗначениеОтступа();
	
	Для Каждого ЭлементВыгрузки Из ДанныеДляВыгрузки Цикл
		Если ЭлементВыгрузки.ТипЭлементаВыгрузки = "Сценарий" Тогда
			ВыгрузитьДанныеСценарияВКаталог(ЭлементВыгрузки,ЭлементВыгрузки.КаталогВыгрузки);
		ИначеЕсли ЭлементВыгрузки.ТипЭлементаВыгрузки = "Процесс" Тогда
			ВыгрузитьДанныеПроцессаВКаталог(ЭлементВыгрузки,ЭлементВыгрузки.КаталогВыгрузки);
		ИначеЕсли ЭлементВыгрузки.ТипЭлементаВыгрузки = "НастройкаСценария" Тогда
			ВыгрузитьНастройкуСценарияВКаталог(ЭлементВыгрузки, ЭлементВыгрузки.ПолноеИмяФайла)
		Иначе	
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип выгрузки <%1>.'"),ЭлементВыгрузки.ТипЭлементаВыгрузки);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

// Конвертирует данные сценария, прочитанные из формата yaml в формат, подготовленный для записи сценария
// Параметры:
//  Данные - Соответствие
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныYamlВФорматСтруктурыСценария(Данные) Экспорт
	
	Результат = СоответствиеВСтруктуру(Данные);
	
	Для Каждого Элем Из Результат.ДанныеСценария Цикл
		Результат.Вставить(Элем.Ключ, Элем.Значение);
	КонецЦикла;	 
	Результат.Удалить("ДанныеСценария");
	
	Результат.Вставить("ПроектНаименование", Результат.Проект);
	Результат.Вставить("СценарийНаименование", Результат.Имя);
	Результат.Вставить("ФункцияСистемыНаименование", Результат.ФункцияСистемы);
	
	Если ТипЗнч(Результат.ПараметрыСценария) <> Тип("Массив") Тогда
		Результат.Вставить("ПараметрыСценария", Новый Массив);
	Иначе
		Результат.Вставить("ПараметрыСценария", ТестированиеСлужебныйВызовСервера.ПараметрыСценарияИзТекстовыхДанных(Данные["ПараметрыСценария"]));
	КонецЕсли;	 
	
	Если НЕ Результат.Свойство("ТегиСценария") ИЛИ ТипЗнч(Результат.ТегиСценария) <> Тип("Массив") Тогда
		Результат.Вставить("ТегиСценария", Новый Массив);
	Иначе	
		Результат.Вставить("ТегиСценария", ТестированиеСлужебныйВызовСервера.ТегиСценарияИзТекстовыхДанных(Данные["ТегиСценария"]));
	КонецЕсли;	 
	
	Если ТипЗнч(Результат.ВложенныеСценарии) <> Тип("Массив") Тогда
		Результат.Вставить("ВложенныеСценарии", Новый Массив);
	Иначе	
		Результат.Вставить("ВложенныеСценарии", ТестированиеСлужебныйВызовСервера.ВложенныеСценарииТекстовыхДанных(Данные["ВложенныеСценарии"]));
	КонецЕсли;	 
	
	Если НЕ Результат.Свойство("ВызывающиеСценарии") Тогда
		Результат.Вставить("ВызывающиеСценарии", Новый Массив);
	Иначе	
		Если ТипЗнч(Результат.ВызывающиеСценарии) <> Тип("Массив") Тогда
			Результат.Вставить("ВызывающиеСценарии", Новый Массив);
		Иначе	
			Результат.Вставить("ВызывающиеСценарии", ТестированиеСлужебныйВызовСервера.ВызывающиеСценарииТекстовыхДанных(Данные["ВызывающиеСценарии"]));
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если НЕ Результат.Свойство("UIDРазделПроекта") Тогда
		Результат.Вставить("UIDРазделПроекта", "00000000-0000-0000-0000-000000000000");
	КонецЕсли;	 
	
	Если НЕ Результат.Свойство("ПроектUID") Тогда
		Результат.Вставить("ПроектUID", "00000000-0000-0000-0000-000000000000");
	КонецЕсли;	 
	
	Если НЕ Результат.Свойство("UIDОтветственный") Тогда
		Результат.Вставить("UIDОтветственный", "00000000-0000-0000-0000-000000000000");
	КонецЕсли;	 
	
	Если НЕ Результат.Свойство("Публикуется") Тогда
		Результат.Вставить("Публикуется", Ложь);
	КонецЕсли;	 
	
	Если НЕ Результат.Свойство("ОписаниеСценария") Тогда
		Результат.Вставить("ОписаниеСценария", "");
	ИначеЕсли ТипЗнч(Результат.ОписаниеСценария) = Тип("Массив") Тогда
		Результат.Вставить("ОписаниеСценария", СтрСоединить(Результат.ОписаниеСценария, Символы.ПС));
	КонецЕсли;
	
	Если НЕ Результат.Свойство("ТекстСценария") Тогда
		Результат.Вставить("ТекстСценария", "");
	КонецЕсли;	 
	
	Возврат Результат;
	
КонецФункции	 

// Добавляет в сценарий информацию о том, что его вызывает другой сценарий
// Параметры:
//  UIDСценария - Строка
//  ДанныеВызывающегоСценария - Структура
//  ДанныеРанееИзмененныхСценариев - Структура
//
Процедура ДобавитьИнформациюВСценарийОВнешнемВызове(UIDСценария, ДанныеВызывающегоСценария, ДанныеРанееИзмененныхСценариев) Экспорт
	Для Каждого ДанныеСценарияИзYaml Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если ДанныеСценарияИзYaml["ДанныеСценария"]["UID"] = UIDСценария Тогда
			
			НадоЗаписатьДанные = Истина;
			
			Данные = Новый Структура;
			Данные.Вставить("UIDВызывающийСценарий", ДанныеВызывающегоСценария.UID);
			Данные.Вставить("ИмяСценария", ДанныеВызывающегоСценария.Наименование);
			
			Если ТипЗнч(ДанныеСценарияИзYaml["ВызывающиеСценарии"]) <> Тип("Массив") Тогда
				ДанныеСценарияИзYaml.Вставить("ВызывающиеСценарии", Новый Массив);
			Иначе
				Для Каждого ТекВызывающийСценарий Из ДанныеСценарияИзYaml["ВызывающиеСценарии"] Цикл
					Если ТекВызывающийСценарий["UIDВызывающийСценарий"] = ДанныеВызывающегоСценария.UID Тогда
						НадоЗаписатьДанные = Ложь;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
			Если НадоЗаписатьДанные Тогда
				ДанныеСценарияИзYaml["ВызывающиеСценарии"].Добавить(Данные);
				ЗаписатьПрочитанныеДанныеYamlВФайл(ДанныеСценарияИзYaml, ДанныеСценарияИзYaml["ПутьКФайлуМетаданныхСценария"]);
			КонецЕсли;	 
			
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

// Удаляет из сценария информацию о том, что его вызывает другой сценарий
// Параметры:
//  UIDСценария - Строка
//  ДанныеВызывающегоСценария - Структура
//  ДанныеРанееИзмененныхСценариев - Структура
//
Процедура УдалитьИнформациюИзСценарияОВнешнемВызове(UIDСценария, ДанныеВызывающегоСценария, ДанныеРанееИзмененныхСценариев) Экспорт
	Для Каждого ДанныеСценарияИзYaml Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если ДанныеСценарияИзYaml["ДанныеСценария"]["UID"] = UIDСценария Тогда
			
			НадоЗаписатьДанные = Ложь;
			
			ИдДляУдаления = Новый СписокЗначений;
			Ид = -1;
			Для Каждого ТекВызывающийСценарий Из ДанныеСценарияИзYaml["ВызывающиеСценарии"] Цикл
				Ид = Ид + 1;
				Если ТекВызывающийСценарий["UIDВызывающийСценарий"] = ДанныеВызывающегоСценария.UID Тогда
					ИдДляУдаления.Добавить(Ид);
				КонецЕсли;	 
			КонецЦикла;	 
			
			ИдДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
			Для Каждого ЭлементСписка Из ИдДляУдаления Цикл
				ДанныеСценарияИзYaml["ВызывающиеСценарии"].Удалить(ЭлементСписка.Значение);
				НадоЗаписатьДанные = Истина;
			КонецЦикла;	 
			
			Если НадоЗаписатьДанные Тогда
				ЗаписатьПрочитанныеДанныеYamlВФайл(ДанныеСценарияИзYaml, ДанныеСценарияИзYaml["ПутьКФайлуМетаданныхСценария"]);
			КонецЕсли;	 
			
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

// Показывает окно сравнения двух тектов
// Параметры:
//  Параметры - Структура
//
Процедура ПоказатьОкноСравнениеТекста(Параметры) Экспорт
	
	Параметры.Вставить("ВыполнитьСравнениеДвухТекстов", Истина);
	КаталогРедактора = "";
	ЕстьКешФайловРедактора = ЕстьКешФайловРедактора(КаталогРедактора);
	Параметры.Вставить("ЕстьКешФайловРедактора", ЕстьКешФайловРедактора);
	Параметры.Вставить("КаталогРедактора", КаталогРедактора);
	ОткрытьФорму("ОбщаяФорма.СравнениеТекстов", Параметры, ,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Возвращает каталог редактора
Функция КаталогРедактора(КаталогДляДанныхТестирования = Неопределено) Экспорт
	
	Если КаталогДляДанныхТестирования = Неопределено Тогда
		КаталогДляДанныхТестирования = ТестированиеСлужебныйВызовСервера.КаталогДляДанныхТестирования();
	КонецЕсли;
	
	ВерсияРедактора = ТестированиеКлиентСервер.ВерсияРедактора();
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДляДанныхТестирования) + "EditorCache";
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог) + ВерсияРедактора;
	
КонецФункции	

// Возвращает есть или нет кеш файлов редактора
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьКешФайловРедактора(КаталогРедактора = "") Экспорт
	
	КаталогДляДанныхТестирования = ТестированиеСлужебныйВызовСервера.КаталогДляДанныхТестирования();
	Если НЕ ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Файл = Новый Файл(КаталогДляДанныхТестирования);
	Если НЕ Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КаталогРедактора = КаталогРедактора(КаталогДляДанныхТестирования);
	Файл = Новый Файл(КаталогРедактора);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(КаталогРедактора);
	КонецЕсли;
	
	Файлы = НайтиФайлы(КаталогРедактора, "*", Истина);
	Если Файлы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

// Выполняет проверку исправления ошибок в ветке
// Параметры:
//  Ветка - Справочник.Ветки
//
Процедура ПроверкаИсправленияОшибокВВетке(Ветка, ФормаВладелец) Экспорт
	
	РезультатПроверки = ТестированиеСлужебныйВызовСервера.ПроверкаИсправленияОшибокВВетке(Ветка);
	Если НЕ РезультатПроверки.ПроверкаВыполненаУспешно Тогда
		Если РезультатПроверки.ОшибкиУКоторыхНетКоммитов.Количество() > 0 
			ИЛИ РезультатПроверки.ОшибкиКоторыеНеУказаныВВетке.Количество() > 0 Тогда
			РезультатПроверки.Вставить("Ветка", Ветка);
			ОткрытьФорму("Справочник.Ветки.Форма.ПроверкаИсправленияОшибокВВетке", РезультатПроверки, ФормаВладелец);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Проверка выполнена с ошибками.'") 
				+ Символы.ПС + РезультатПроверки.Сообщение);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Проверка выполнена успешно.'"));
	КонецЕсли;
	
КонецПроцедуры

// Открывает отчет Статус прохождения тестов в ветке
// Параметры:
//  Ветка - Справочник.Ветки
//
&НаКлиенте
Процедура СтатусТестовВВетке(Ветка) Экспорт
	
	Ветки = Новый Массив;
	Ветки.Добавить(Ветка);
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка, ДатаОкончания", 
		"СтатусПрохожденияТестовВВетке",
		Истина, 
		Истина, 
		Ветки,
		ТекущаяДата());
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОчиститьКаталог(Путь)
	Файлы = НайтиФайлы(Путь,"*",Ложь);
	Для Каждого Элем Из Файлы Цикл
		УдалитьФайлы(Элем.ПолноеИмя);
	КонецЦикла;	
КонецПроцедуры

Функция  ПроверитьФайлСтатусаВыполненияОперации(ИмяФайла)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		ТекстовыйДокумент.Прочитать(ИмяФайла);
		Ответ = Число(ТекстовыйДокумент.ПолучитьТекст());
	Иначе
		Ответ = 1;
	КонецЕсли;
	
	Если Ответ <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПроверкаСуществованияФайла(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
КонецФункции	

Процедура ОбработкаПослеПомещенияФайла(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	ИмяОбработки = ТестированиеСлужебныйВызовСервера.ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	ДополнительныеПараметры.Вставить("ИмяОбработки",ИмяОбработки);
КонецПроцедуры

Процедура ВыгрузитьМакетыВКаталогОбмена(Каталог,ПрисоединенныеФайлы)
	КаталогМакетов = Каталог + "\Файлы";
	ФайлКаталогМакетов = Новый Файл(КаталогМакетов);
	Если Не ФайлКаталогМакетов.Существует() Тогда
		СоздатьКаталог(КаталогМакетов);
	КонецЕсли;	 
	
	Файлы = НайтиФайлы(КаталогМакетов,"*");
	Для Каждого Файл Из Файлы Цикл
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
	
	Для Каждого ДанныеФайла Из ПрисоединенныеФайлы Цикл
		Файл = ДанныеФайла.ДвоичныеДанныеФайла;
		
		Путь = КаталогМакетов;
		Если ДанныеФайла.Свойство("ИмяКаталога") Тогда
			Путь = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Путь) + ДанныеФайла.ИмяКаталога;
			ФайлПуть = Новый Файл(Путь);
			Если Не ФайлПуть.Существует() Тогда
				СоздатьКаталог(Путь);
			КонецЕсли;	 
		КонецЕсли;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Путь) + ДанныеФайла.Имя + "." + ДанныеФайла.Расширение;
		Файл.Записать(ИмяФайла);
	КонецЦикла;	
КонецПроцедуры

Процедура ДобавитьВФреймворкДанныеПоПодключениюTestClient(ФормаОбработки,НастройкиБДДляЗапускаТестовИзСценария,Роль)
	ПрофильПользователя = ТестированиеСлужебныйВызовСервера.ИмяПрофиляTestClient(Роль,
	    НастройкиБДДляЗапускаТестовИзСценария,Ложь);
	
	ПортЗапускаТестКлиента = Неопределено;
	
	ДанныеПортаПодключения = Новый Соответствие;
	
	Для Каждого СтрДанныеКлиентовТестирования Из ФормаОбработки.ДанныеКлиентовТестирования Цикл
		Если НРег(СтрДанныеКлиентовТестирования.Имя) = НРег(ПрофильПользователя) Тогда
			ПортЗапускаТестКлиента = СтрДанныеКлиентовТестирования.ПортЗапускаТестКлиента;
			ДанныеПортаПодключения.Вставить(СтрДанныеКлиентовТестирования.Имя,СтрДанныеКлиентовТестирования.ПортЗапускаТестКлиента);
			ФормаОбработки.ДанныеКлиентовТестирования.Удалить(СтрДанныеКлиентовТестирования);
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
	
	Логин  = "";
	Пароль = "";
	
	ДанныеПользователя = НастройкиБДДляЗапускаТестовИзСценария.ДанныеПользователейЭталоннойБазы[Роль]; 
	Если ДанныеПользователя <> Неопределено Тогда
		Логин  = ДанныеПользователя.Логин;
		Пароль = ДанныеПользователя.Пароль;
	КонецЕсли;	 
	
	СтрДанныеКлиентовТестирования               = ФормаОбработки.ДанныеКлиентовТестирования.Добавить();
	СтрДанныеКлиентовТестирования.Имя           = ПрофильПользователя;
	СтрДанныеКлиентовТестирования.ПутьКИнфобазе = НастройкиБДДляЗапускаТестовИзСценария.СтрокаИБ;
	
	Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ТипКлиента") Тогда
		СтрДанныеКлиентовТестирования.ТипКлиента             = НастройкиБДДляЗапускаТестовИзСценария.ТипКлиента;	
		СтрДанныеКлиентовТестирования.ПортЗапускаТестКлиента = НастройкиБДДляЗапускаТестовИзСценария.Порт;	
		Если СтрДанныеКлиентовТестирования.ТипКлиента = "Тонкий" Тогда
			СтрДанныеКлиентовТестирования.ИмяКомпьютера = "localhost";	
		Иначе	
			СтрДанныеКлиентовТестирования.ИмяКомпьютера = НастройкиБДДляЗапускаТестовИзСценария.МенеджерКластера;	
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(СтрДанныеКлиентовТестирования.ПортЗапускаТестКлиента) Тогда
			СтрДанныеКлиентовТестирования.ПортЗапускаТестКлиента = 48100;
		КонецЕсли;	 
		
		Если ДанныеПортаПодключения[СтрДанныеКлиентовТестирования.Имя] <> Неопределено Тогда
			СтрДанныеКлиентовТестирования.ПортЗапускаТестКлиента = ДанныеПортаПодключения[СтрДанныеКлиентовТестирования.Имя];
		КонецЕсли;	 
		
		Если НЕ ЗначениеЗаполнено(СтрДанныеКлиентовТестирования.ИмяКомпьютера) Тогда
			СтрДанныеКлиентовТестирования.ИмяКомпьютера = "localhost";
		КонецЕсли;	 
	Иначе	
		СтрДанныеКлиентовТестирования.ТипКлиента    = "Тонкий";
		СтрДанныеКлиентовТестирования.ПортЗапускаТестКлиента = 48100;
		СтрДанныеКлиентовТестирования.ИмяКомпьютера = "localhost";
	КонецЕсли;	 
	
	СтрДанныеКлиентовТестирования.ДопПараметры  = "/N""" + Логин
	 + """ /P""" + Пароль + """";
	Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("КлючиЗапускаTestClient") Тогда
		 Если ЗначениеЗаполнено(НастройкиБДДляЗапускаТестовИзСценария.КлючиЗапускаTestClient) Тогда
			СтрДанныеКлиентовТестирования.ДопПараметры = СтрДанныеКлиентовТестирования.ДопПараметры
			  + " " + НастройкиБДДляЗапускаТестовИзСценария.КлючиЗапускаTestClient;
		 КонецЕсли;	 
	КонецЕсли;	 
	
	
	ФормаОбработки.Элементы.ДанныеКлиентовТестирования.ТекущаяСтрока = СтрДанныеКлиентовТестирования.ПолучитьИдентификатор();
	
	
	ФормаОбработки.СохранитьКлиентовТестированияПослеОткрытияФормы();
КонецПроцедуры

Функция НомерСтрокиДляЗапускаСТекущегоШагаСценария(ТекстСценариев)
	СтрокаДляПоиска = НСтр("ru = '//~ОтметкаЗапускСценарияСЭтойСтроки~'");
	
	МассивСтрок = СтрРазделить(ТекстСценариев,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		ТекСтр = МассивСтрок[Ккк];
		Если Найти(ТекСтр,СтрокаДляПоиска) > 0 Тогда
			ТекстСценариев = СтрЗаменить(ТекстСценариев,СтрокаДляПоиска,"");
			Возврат Ккк+1;
		КонецЕсли;	 
	КонецЦикла;	
КонецФункции	

Функция ДополнитьРазделительПути(Знач Путь)
	СимволСлеша = ПолучитьРазделительПути();
	Если Прав(Путь,1) <> СимволСлеша Тогда
		Путь = Путь + СимволСлеша;
	КонецЕсли;	 
	
	Возврат Путь;
КонецФункции

Процедура ЗаписатьНастройкиДляЗапуска(КаталогДляДанныхТестирования,ПараметрыЗапускаФреймворка,
	       НастройкиБДДляЗапускаТестовИзСценария,МассивРолей)
	#Если НЕ ВебКлиент Тогда	   
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJson.ОткрытьФайл(ПараметрыЗапускаФреймворка.ИмяФайлаНастроек,,Ложь,Новый ПараметрыЗаписиJSON(,Символы.Таб));
	
	ЗаписьJson.ЗаписатьНачалоОбъекта();
	
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ИмяСборки","Тест");
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"КаталогФич",ПараметрыЗапускаФреймворка.ПутьКСценариям);
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"КаталогПроекта",КаталогДляДанныхТестирования);
	
	Если ПараметрыЗапускаФреймворка.ЗапускСценария Тогда
		Если ПараметрыЗапускаФреймворка.СТекущегоШага Тогда
			ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ВыполнитьСценарииСТекущегоШага","Истина");
			ДобавитьКлючЗначениеВJson(ЗаписьJSON,"НомерСтрокиДляЗапускаСТекущегоШагаСценария",
			      XMLСтрока(ПараметрыЗапускаФреймворка.НомерСтрокиДляЗапускаСТекущегоШагаСценария));
		Иначе		  
				  ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ВыполнитьСценарии","Истина");
		КонецЕсли;	 
	Иначе	
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ВыполнитьСценарии","Ложь");
	КонецЕсли;	 
	
	Если ПараметрыЗапускаФреймворка.ЗагрузкаСценария Тогда
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ЗагрузитьСценарии","Истина");
	Иначе	
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ЗагрузитьСценарии","Ложь");
	КонецЕсли;	 
	
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ЗавершитьРаботуСистемы","Ложь");
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки","Истина");
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"КаталогИнструментов",ПараметрыЗапускаФреймворка.КаталогИнструментов);
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ИмяФайлаВнешнихКомандФреймворка",
	    ПараметрыЗапускаФреймворка.ИмяФайлаВнешнихКомандФреймворка);
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ДиапазонПортовTestclient","48100-48200");
	
	Если ПараметрыЗапускаФреймворка.Свойство("ПутьКПлатформе") Тогда
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"КаталогИсполняемогоФайла",
		   ПараметрыЗапускаФреймворка.ПутьКПлатформе);
	Иначе	
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"КаталогИсполняемогоФайла",
		   НастройкиБДДляЗапускаТестовИзСценария.КаталогИсполняемогоФайла);
	КонецЕсли;	 
	
	Если ПараметрыЗапускаФреймворка.Свойство("ОжидаемаяВерсияИнструменаТестирования") Тогда
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ОжидаемаяВерсияИнструменаТестирования",
		   ПараметрыЗапускаФреймворка.ОжидаемаяВерсияИнструменаТестирования);
	КонецЕсли;	 
	
	ТекущийPIDTestManager = ПараметрыПриложения[ИмяСвойстваPIDВнешнийTestManager()];
	Если НЕ ЗначениеЗаполнено(ТекущийPIDTestManager) Тогда
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ВыгрузитьPIDTestManager","Истина");
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ИмяФайлаPIDTestManager",ПараметрыЗапускаФреймворка.ИмяФайлаPIDTestManager);
	КонецЕсли;	 
	
	Если ПараметрыЗапускаФреймворка.ОстановкаПриВозникновенииОшибки Тогда
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ОстановкаПриВозникновенииОшибки","Истина");
	КонецЕсли;	 
	
	Если ПараметрыЗапускаФреймворка.Свойство("ОстановкаНаПроблемномШаге") И ПараметрыЗапускаФреймворка.ОстановкаНаПроблемномШаге Тогда
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ОстановкаНаПроблемномШаге", ПараметрыЗапускаФреймворка.ОстановкаНаПроблемномШаге);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"НомерСтрокиПроблемногоШага", ПараметрыЗапускаФреймворка.НомерСтрокиПроблемногоШага);
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогиБиблиотек");
	ЗаписьJson.ЗаписатьНачалоМассива();
	Если Найти(НРег(ПараметрыЗапускаФреймворка.ФреймворкДляЗапускаТестов), "single") = 0 Тогда
		ЗаписьJSON.ЗаписатьЗначение(ДополнитьРазделительПути(
		    ПараметрыЗапускаФреймворка.КаталогИнструментов) + "features\Libraries");
	КонецЕсли;	 
	Для Каждого ПутьКБиблиотеке Из ПараметрыЗапускаФреймворка.БиблиотекиТестов Цикл
		ЗаписьJSON.ЗаписатьЗначение(ПутьКБиблиотеке);
	КонецЦикла;	
	ЗаписьJson.ЗаписатьКонецМассива();
	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КлиентыТестирования");
	ЗаписьJson.ЗаписатьНачалоМассива();
	Если ПараметрыЗапускаФреймворка.Свойство("ДанныеКлиентаТестирования") Тогда
		ЗаписьJson.ЗаписатьНачалоОбъекта();
		Для Каждого Элем Из ПараметрыЗапускаФреймворка.ДанныеКлиентаТестирования Цикл
			ДобавитьКлючЗначениеВJson(ЗаписьJSON, Элем.Ключ, Элем.Значение);
		КонецЦикла;	 
		ЗаписьJson.ЗаписатьКонецОбъекта();
	КонецЕсли;	 
	
	Для Каждого ТекРоль Из МассивРолей Цикл
		Логин  = "";
		Пароль = "";
		ДанныеПользователя = НастройкиБДДляЗапускаТестовИзСценария.ДанныеПользователейЭталоннойБазы[ТекРоль]; 
		Если ДанныеПользователя <> Неопределено Тогда
			Логин  = ДанныеПользователя.Логин;
			Пароль = ДанныеПользователя.Пароль;
		КонецЕсли;	 
		
		ПрофильПользователя = ТестированиеСлужебныйВызовСервера.ИмяПрофиляTestClient(ТекРоль,
		         НастройкиБДДляЗапускаТестовИзСценария,Ложь);
				 
		ДопПараметры  = "/N""" + Логин + """ /P""" + Пароль + """";
				 
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("КлючиЗапускаTestClient") Тогда
			Если ЗначениеЗаполнено(НастройкиБДДляЗапускаТестовИзСценария.КлючиЗапускаTestClient) Тогда
				ДопПараметры = ДопПараметры + " " + НастройкиБДДляЗапускаТестовИзСценария.КлючиЗапускаTestClient;
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЗаписьJson.ЗаписатьНачалоОбъекта();
		
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"Имя",ПрофильПользователя);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ПутьКИнфобазе",НастройкиБДДляЗапускаТестовИзСценария.СтрокаИБ);
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ТипКлиента") Тогда
			ТипКлиента = НастройкиБДДляЗапускаТестовИзСценария.ТипКлиента;
			МенеджерКластера = НастройкиБДДляЗапускаТестовИзСценария.МенеджерКластера;
			Порт = НастройкиБДДляЗапускаТестовИзСценария.Порт;
			Если Не ЗначениеЗаполнено(МенеджерКластера) Тогда
				МенеджерКластера = "localhost";
			КонецЕсли;	 
			Если Не ЗначениеЗаполнено(Порт) Тогда
				Порт = 1;
			КонецЕсли;	 
			
			Если ТипКлиента = "Тонкий" Тогда
				МенеджерКластера = "localhost";
			КонецЕсли;	 
			
			ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ТипКлиента",ТипКлиента);
			ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ИмяКомпьютера",МенеджерКластера);
			Если ТипКлиента <> "Тонкий" Тогда
				ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ПортЗапускаТестКлиента",Порт);
			Иначе	
				ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ПортЗапускаТестКлиента", "1");
			КонецЕсли;	 
		Иначе	
			ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ТипКлиента","Тонкий");
			ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ИмяКомпьютера","localhost");
			ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ПортЗапускаТестКлиента","1");
		КонецЕсли;	 
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ДопПараметры",ДопПараметры);
		
		
		ЗаписьJson.ЗаписатьКонецОбъекта();
	КонецЦикла;	
	ЗаписьJson.ЗаписатьКонецМассива();
	
	
	ЗаписьJson.ЗаписатьКонецОбъекта();
	
	ЗаписьJson.Закрыть();
	
	#КонецЕсли
КонецПроцедуры

Процедура ДобавитьКлючЗначениеВJson(ЗаписьJSON,Ключ,Значение)
	ЗаписьJSON.ЗаписатьИмяСвойства(Ключ);
	ЗаписьJSON.ЗаписатьЗначение(Значение);
КонецПроцедуры

Процедура ЗаписатьКомандуФреймворка(ТекстКоманды,ПараметрыЗапускаФреймворка,ИмяФайлаНастроек)
	#Если НЕ ВебКлиент Тогда
	ВременныйФайл = ПолучитьИмяВременногоФайла("json");
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJson.ОткрытьФайл(ВременныйФайл,,Ложь,Новый ПараметрыЗаписиJSON(,Символы.Таб));
	
	ЗаписьJson.ЗаписатьНачалоОбъекта();
	
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ТекстКоманды",ТекстКоманды);
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"СТекущегоШага",ПараметрыЗапускаФреймворка.СТекущегоШага);
	Если ПараметрыЗапускаФреймворка.СТекущегоШага Тогда
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"НомерСтрокиДляЗапускаСТекущегоШагаСценария",
		   ПараметрыЗапускаФреймворка.НомерСтрокиДляЗапускаСТекущегоШагаСценария);
	КонецЕсли;	 
	ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ИмяФайлаНастроек",ИмяФайлаНастроек);
	
	ЗаписьJson.ЗаписатьКонецОбъекта();
	
	ЗаписьJson.Закрыть();
	
	ПереместитьФайл(ВременныйФайл,ПараметрыЗапускаФреймворка.ИмяФайлаВнешнихКомандФреймворка);
	#КонецЕсли
КонецПроцедуры

Функция МассивPIDОкон1С()
	Рез = Новый Массив;
	
	ЗаполнитьМассивPIDПоИмениПроцесса("1cv8.exe", Рез);
	ЗаполнитьМассивPIDПоИмениПроцесса("1cv8c.exe", Рез);
	
	Возврат Рез;
КонецФункции

Процедура ЗаполнитьМассивPIDПоИмениПроцесса(ИмяПроцесса, Массив)
	#Если НЕ ВебКлиент Тогда
		
	ЛогФайл = ПолучитьИмяВременногоФайла("txt");
	Команда = "tasklist /FI ""IMAGENAME eq " + ИмяПроцесса +  """ /nh > """ + ЛогФайл + """";
	КомандаОС(Команда);
	
	
	Файл = Новый Файл(ЛогФайл);
	
	Если НЕ Файл.Существует() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при получении списка процессов 1С!");
		Возврат;
	КонецЕсли;	 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ЛогФайл, "UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		
		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = НРег(Стр);
		Стр = СокрЛП(СтрЗаменить(Стр, НРег(ИмяПроцесса), ""));
		Поз = Найти(Стр, " ");
		PID = Лев(Стр, Поз - 1);
		Если Найти(PID,"info") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			PID = Число(PID);
			Массив.Добавить(PID);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не смог преобразовать к числу PID=" + PID);
		КонецПопытки;
		
	КонецЦикла;	
	
	Текст.Закрыть();
	
	УдалитьФайлы(ЛогФайл);
	
	#КонецЕсли
КонецПроцедуры

Функция КомандаОС(СтрокаКоманды, ЖдатьОкончания = -1) Экспорт
	#Если НЕ ВебКлиент Тогда
		
	ВременныйФайл = ПолучитьИмяВременногоФайла("bat");
	
	ЗТ = Новый ЗаписьТекста(ВременныйФайл,
	КодировкаТекста.ANSI,
	,
	Ложь); 
	ЗТ.Закрыть();
	
	ЗТ = Новый ЗаписьТекста(ВременныйФайл,
	КодировкаТекста.UTF8,
	,
	Истина); 
	
	ЗТ.ЗаписатьСтроку("chcp 65001"); 
	ЗТ.ЗаписатьСтроку(СтрокаКоманды); 
	ЗТ.Закрыть();
	
	WshShell = WshShell();
	Результат = WshShell.Run("""" + ВременныйФайл + """", 0, ЖдатьОкончания);
	Возврат Результат;
	
	#КонецЕсли
КонецФункции	

Функция WshShell()
	Возврат Новый COMОбъект("WScript.Shell");
КонецФункции

Функция ИмяФайлаPIDTestManager(КаталогНастроек)
	Возврат ДополнитьРазделительПути(КаталогНастроек) + "PIDTM.txt";
КонецФункции	 

Функция ИмяФайлаВнешнихКомандФреймворка(КаталогНастроек)
	Возврат ДополнитьРазделительПути(КаталогНастроек) + "Command.json";
КонецФункции	 

Функция ИмяСвойстваPIDВнешнийTestManager()
	Возврат "PIDВнешнийTestManager";
КонецФункции	 

Функция ИмяСвойстваИмяФайлаPIDTestManager()
	Возврат "ИмяФайлаPIDTestManager";
КонецФункции	 

// Проверяет существование запущенного сеанса TestManager
//
// Параметры:
//  ТекущийPIDTestManager - Число.
//
Процедура ПроверитьЧтоTestManagerВсеЕщеЗапущен()
	ИмяСвойства = ИмяСвойстваPIDВнешнийTestManager();
	ТекущийPIDTestManager = ПараметрыПриложения[ИмяСвойства];
	
	Если Не ЗначениеЗаполнено(ТекущийPIDTestManager) Тогда
		Возврат;
	КонецЕсли;	
	
	МассивPID = МассивPIDОкон1С();
	Если МассивPID.Найти(ТекущийPIDTestManager) = Неопределено Тогда
		//значит процесс уже закрыт
		ПараметрыПриложения[ИмяСвойства] = Неопределено;
	КонецЕсли;	 
КонецПроцедуры

// Заменяет экранированное значение некоторых спецсимволов на их точное значение
//
// Параметры:
//  ТекстСценариев - Строка
//
Процедура ОбработатьЭкранированныеСпецсимволы(ТекстСценариев)
	ТекстСценариев = СтрЗаменить(ТекстСценариев,"\[","[");
	ТекстСценариев = СтрЗаменить(ТекстСценариев,"\]","]");
КонецПроцедуры

// Добавляет отбор в коллекцию отборов компоновщика или группы отборов.
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//                     ОтборКомпоновкиДанных - Элемент структуры.
//	Поле - Строка - имя поля, по которому добавляется отбор.
//	Значение - Произвольный - Значение отбора.
//	ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнений компоновки данных (по умолчанию: Равно).
//	Использование - Булево - Признак использования отбора (по умолчанию: Истина).
//  ВПользовательскиеНастройки - Булево - Признак добавления отбора в пользовательские настройки.
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - Добавленный элемент отбора.
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение = Неопределено, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	
	Возврат НовыйЭлемент;
	
КонецФункции

Функция ЭлементПользовательскихНастроек(КомпоновщикНастроек, ИмяЭлемента)
	Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента);
	Для Каждого Элем Из КомпоновщикНастроек.Элементы Цикл
		Если ТипЗнч(Элем) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И Элем.Параметр = Параметр Тогда
			Возврат Элем; 
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция КаталогВременныхФайловСценария(КаталогДляДанныхТестирования, Ветка, ИмяПроекта, КодСценария)
	Каталог = КаталогВременныхФайловВетки(КаталогДляДанныхТестирования, Ветка, ИмяПроекта);
	
	Каталог = ДополнитьРазделительПути(Каталог) + КодСценария;
	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;	 
	
	Возврат ДополнитьРазделительПути(Каталог); 
КонецФункции	 

Функция ИмяФайлаСостоянияФайлов(ДанныеДляПолученияФайлов)
	КаталогДляДанныхТестирования = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	                                               "Тестирование", "КаталогДляДанныхТестирования");
	Если Не ЗначениеЗаполнено(КаталогДляДанныхТестирования) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнена настройка ""Каталог для данных тестирования"".'");
	КонецЕсли;	 
	
	КаталогВременныхФайловСценария = КаталогВременныхФайловСценария(КаталогДляДанныхТестирования,
		ДанныеДляПолученияФайлов.Ветка,
		ТестированиеСлужебныйВызовСервера.ИмяПроектаСтрокой(ДанныеДляПолученияФайлов.Проект),
		ДанныеДляПолученияФайлов.ДанныеСценария.Код);
		
	
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайловСценария) + "files.json";
КонецФункции	 

Процедура ЗаписатьСостояниеФайловЛокальнойКопииРепозитория(ДанныеДляПолученияФайлов, СостояниеФайловЛокальнойКопииРепозитория)
	ИмяФайлаСостоянияФайлов = ИмяФайлаСостоянияФайлов(ДанныеДляПолученияФайлов);
	Файл = Новый Файл(ИмяФайлаСостоянияФайлов);	
	
	#Если НЕ ВебКлиент Тогда	   
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, СостояниеФайловЛокальнойКопииРепозитория);
	СтрокаJson = ЗаписьJSON.Закрыть();
	
	ЗТ = Новый ЗаписьТекста(ИмяФайлаСостоянияФайлов,"UTF-8",, Ложь); 
	ЗТ.Записать(СтрокаJson); 
	ЗТ.Закрыть();
	#КонецЕсли
КонецПроцедуры 

Процедура ДополнитьПрисоединенныеФайлыФайламиИзРепозитория(ПрисоединенныеФайлы, ПараметрыЗапуска)
	Для Каждого Элем Из ПараметрыЗапуска.UIDСценариевКомпиляции Цикл
		UIDСценария = Элем.Ключ;
		
		ДанныеСценария = Новый Структура;
		ДанныеСценария.Вставить("UIDСценария", UIDСценария);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("АдресСлужебныеДанныеСценариев", ПараметрыЗапуска.АдресСлужебныеДанныеСценариев);
		СтруктураПараметров.Вставить("Ветка", ПараметрыЗапуска.Ветка);
		СтруктураПараметров.Вставить("ИдентификаторКоммита", ПараметрыЗапуска.ИдентификаторКоммита);
		СтруктураПараметров.Вставить("Проект", ПараметрыЗапуска.Проект);
		СтруктураПараметров.Вставить("ТокенПользователя", ПараметрыЗапуска.ТокенПользователя);
		СтруктураПараметров.Вставить("ДанныеСценария", ДанныеСценария);
		СтруктураПараметров.Вставить("ПолучатьДвоичныеДанныеФайлов", Истина);
		
		ФайлыСценария = ТестированиеСлужебныйВызовСервера.ФайлыСценарияИзРепозитория(СтруктураПараметров);
		
		Для Каждого ТекФайл Из ФайлыСценария Цикл
			ДанныеСценария = Новый Структура;
			ДанныеСценария.Вставить("ДвоичныеДанныеФайла", ТекФайл.ДвоичныеДанныеФайла);
			
			Файл = Новый Файл(ТекФайл.name); 
			ДанныеСценария.Вставить("Имя", Файл.ИмяБезРасширения);
			ДанныеСценария.Вставить("Расширение", Сред(Файл.Расширение, 2));
			ДанныеСценария.Вставить("Сценарий", "");
			
			ПрисоединенныеФайлы.Добавить(ДанныеСценария);
		КонецЦикла;	 
	КонецЦикла;	 
КонецПроцедуры 

Функция СтандартноеЗначениеОтступа()
	Возврат "    "; 
КонецФункции	 

Процедура ВыгрузитьДанныеСценарияВКаталог(ЭлементВыгрузки,КаталогСценария)
	ТекКаталогСценария = КаталогСценария;
	
	ВыгружатьВНовомФормате = ВыгружатьВНовомФормате(ЭлементВыгрузки);
	
	Если ВыгружатьВНовомФормате Тогда
		ПолноеИмяФайла = ТекКаталогСценария + "meta.yaml";
		ИмяФайлаДляУдаления = ТекКаталогСценария + "scen.yaml";
		Файл = Новый Файл(ИмяФайлаДляУдаления);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ИмяФайлаДляУдаления);
		КонецЕсли;	 
	Иначе	
		ПолноеИмяФайла = ТекКаталогСценария + "scen.yaml";
	КонецЕсли;	 
	
	Если ЭлементВыгрузки.Свойство("ЭтоНовыйЭлемент") И ЭлементВыгрузки.ЭтоНовыйЭлемент Тогда
		ДанныеНовогоСценария = Новый Структура;
		ДанныеНовогоСценария.Вставить("ДанныеИерархии", ЭлементВыгрузки.ДанныеИерархии);
		#Если НЕ ВебКлиент Тогда	   
		Файл = Новый Файл(ПолноеИмяФайла);
		ИмяФайла = Файл.Путь + "new.json";
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайла,"UTF-8");
		ЗаписатьJSON(ЗаписьJSON, ДанныеНовогоСценария);
		ЗаписьJSON.Закрыть();
		#КонецЕсли
	КонецЕсли;
	
	Если ЭлементВыгрузки.Свойство("ПроисходилоИзменениеГруппы") И ЭлементВыгрузки.ПроисходилоИзменениеГруппы Тогда
		ДанныеНовогоСценария = Новый Структура;
		ДанныеНовогоСценария.Вставить("ПолноеИмяВДереве", ЭлементВыгрузки.ПолноеИмяВДереве);
		#Если НЕ ВебКлиент Тогда	   
		Файл = Новый Файл(ПолноеИмяФайла);
		ИмяФайла = Файл.Путь + "newpath.json";
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайла,"UTF-8");
		ЗаписатьJSON(ЗаписьJSON, ДанныеНовогоСценария);
		ЗаписьJSON.Закрыть();
		#КонецЕсли
	КонецЕсли;	 
	
	ПодготовленныеДанныеДляЗаписиВФайл = Новый Массив;
	Уровень = 0;
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТипФайла","Сценарий");
	ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,"ДанныеСценария",Уровень);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UID",ЭлементВыгрузки.UID);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Имя",ЭлементВыгрузки.СценарийНаименование);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Код",ЭлементВыгрузки.Код);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Проект",ЭлементВыгрузки.ПроектНаименование);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПроектUID",ЭлементВыгрузки.ПроектUID);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ФункцияСистемы",ЭлементВыгрузки.ФункцияСистемыНаименование);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,
	      "РазрешеноИспользоватьВДругихФункциях",ЭлементВыгрузки.РазрешеноИспользоватьВДругихФункциях);
	
	Если ЭлементВыгрузки.Свойство("НеобратимоМеняетДанные") Тогда
		СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,
		      "НеобратимоМеняетДанные",ЭлементВыгрузки.НеобратимоМеняетДанные);
	КонецЕсли;
	
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UIDФункцияСистемы",ЭлементВыгрузки.UIDФункцияСистемы);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UIDРазделПроекта",ЭлементВыгрузки.UIDРазделПроекта);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UIDОтветственный",ЭлементВыгрузки.UIDОтветственный);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Публикуется",ЭлементВыгрузки.Публикуется);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПрофильПользователя",ЭлементВыгрузки.ПрофильПользователя);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"УровеньОтчета1",ЭлементВыгрузки.УровеньОтчета1);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"УровеньОтчета2",ЭлементВыгрузки.УровеньОтчета2);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ОписаниеСценария",ЭлементВыгрузки.ОписаниеСценария);
	ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
	
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПараметрыСценария",ЭлементВыгрузки.ПараметрыСценария);
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТегиСценария",ЭлементВыгрузки.ТегиСценария);
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ВложенныеСценарии",ЭлементВыгрузки.ВложенныеСценарии);
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ВызывающиеСценарии",ЭлементВыгрузки.ВызывающиеСценарии);
	
	Если НЕ ВыгружатьВНовомФормате Тогда
		СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТекстСценария",ЭлементВыгрузки.ТекстСценария,Истина);
	КонецЕсли;	 
	
	ЗаписатьПодготовленныеДанныеВФайл(ПодготовленныеДанныеДляЗаписиВФайл,ПолноеИмяФайла);
	Если ЭлементВыгрузки.Свойство("ОригинальныйТекстМетаданных") Тогда
		ИмяФайла = СтрЗаменить(ПолноеИмяФайла, "meta.yaml", "orig.yaml");
		ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Ложь); 
		ЗТ.Записать(ЭлементВыгрузки.ОригинальныйТекстМетаданных); 
		ЗТ.Закрыть();
	КонецЕсли;	 
	
	Если ВыгружатьВНовомФормате Тогда
		ИмяФайлаТекстаСценария = ТекКаталогСценария + "scen.feature";
		ЗТ = Новый ЗаписьТекста(ИмяФайлаТекстаСценария, "UTF-8",, Ложь); 
		ЗТ.Записать(ЭлементВыгрузки.ТекстСценария); 
		ЗТ.Закрыть();
		
		Если ЭлементВыгрузки.Свойство("ИсходныйТекстСценария") Тогда
			ИмяФайлаТекстаСценария = ТекКаталогСценария + "orig.feature";
			ЗТ = Новый ЗаписьТекста(ИмяФайлаТекстаСценария, "UTF-8",, Ложь); 
			ЗТ.Записать(ЭлементВыгрузки.ИсходныйТекстСценария); 
			ЗТ.Закрыть();
		КонецЕсли;	 
	КонецЕсли;	 
	
	//выгрузим настройки
	ТекКаталогНастроек = ТекКаталогСценария + "test";
	Если ЭлементВыгрузки.Свойство("НастройкиСценария") И ЭлементВыгрузки.НастройкиСценария.Количество() > 0 Тогда
		СоздатьКаталогЕслиЕгоНет(ТекКаталогНастроек);
		
		Для Каждого НастройкаТеста Из ЭлементВыгрузки.НастройкиСценария Цикл
			ПолноеИмяФайла = ТекКаталогНастроек + ПолучитьРазделительПути() 
			     + УбратьЗапрещенныеСимволыИзИмениФайла(НастройкаТеста.Код) + ".yaml";
				 
			ВыгрузитьНастройкуСценарияВКаталог(НастройкаТеста, ПолноеИмяФайла);
		КонецЦикла;	
	КонецЕсли;	 
	
	//выгрузим присоединенные файлы
	ТекКаталогФайлов = ТекКаталогСценария + "files";
	Если ЭлементВыгрузки.Свойство("ФайлыСценария") Тогда
		Для Каждого ФайлСценария Из ЭлементВыгрузки.ФайлыСценария Цикл
			ИмяФайла = ТекКаталогФайлов + ПолучитьРазделительПути() + ФайлСценария.Наименование + "." + ФайлСценария.Расширение;
			
			МаксДлинаИмениФайла = МаксимальнаяДлинаИмениФайла();
			Если СтрДлина(ИмяФайла) > МаксДлинаИмениФайла Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Длина полного имени файла <%1> превышает допустимый размер <%2>.'"), ИмяФайла, МаксДлинаИмениФайла);
			КонецЕсли;	 
			
			ФайлСценария.ДанныеФайла.Записать(ИмяФайла);
		КонецЦикла;	
	КонецЕсли;	 
	
КонецПроцедуры

Функция УдалитьРазделительПути(Знач Путь)
	СимволСлеша = ПолучитьРазделительПути();
	Если Прав(Путь,1) = СимволСлеша Тогда
		Путь = Лев(Путь, СтрДлина(Путь) - 1);
	КонецЕсли;	 
	
	Возврат Путь;
КонецФункции

Функция СуществующиеПроцессыВКаталоге(КаталогВыгрузкиПроцессов)
	
	ДанныеПроцессов = Новый Соответствие;
	
	ФайлКаталогВыгрузки = Новый Файл(КаталогВыгрузкиПроцессов);
		Если ЗначениеЗаполнено(КаталогВыгрузкиПроцессов) И ФайлКаталогВыгрузки.Существует() Тогда
			
		ФайлыТестов = НайтиФайлыСлужебный(КаталогВыгрузкиПроцессов, "proc.yaml", Истина);
		Для Каждого НайденныйФайл Из ФайлыТестов Цикл
			UID = UIDИзФайла(НайденныйФайл.ПолноеИмя);
			ДанныеПроцессов.Вставить(UID, НайденныйФайл.ПолноеИмя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПроцессов;
	
КонецФункции

Процедура РассчитатьКешДанныхФайлов(КешДанныхФайлов, Каталог, Маска)
	Файлы = НайтиФайлы(Каталог, Маска, Истина);
	Для Каждого Файл Из Файлы Цикл
		Путь = Файл.Путь;
		ФайлКаталог = Новый Файл(Путь);
		СтрокаКеш = ДополнитьРазделительПути(ФайлКаталог.Имя) + Файл.Имя;
		ТекДанные = КешДанныхФайлов[СтрокаКеш];
		Если ТекДанные = Неопределено Тогда
			ТекДанные = Новый Массив;
			КешДанныхФайлов.Вставить(СтрокаКеш, ТекДанные);
		КонецЕсли;	 
		
		ТекДанные.Добавить(Файл.ПолноеИмя);
	КонецЦикла;	
КонецПроцедуры 

Функция СоздатьКаталогиРодителейЕслиИхНет(КорневойКаталог,ИмяПроекта,Родители,СценарийНаименование,Код)
	ТекСтр = КорневойКаталог;
	Для Каждого Элем Из Родители Цикл
		ТекСтр = ТекСтр + УбратьЗапрещенныеСимволыИзИмениФайла(Элем) + ПолучитьРазделительПути();
		СоздатьКаталогЕслиЕгоНет(ТекСтр);
	КонецЦикла;	
	
	ТекСтр = ТекСтр + Код;
	СоздатьКаталогЕслиЕгоНет(ТекСтр);
	
	Возврат ТекСтр + ПолучитьРазделительПути();
КонецФункции

Процедура УдалитьФайлыТеста(КаталогВыгрузки, ЭлементВыгрузки, КаталогВыгрузкиСценариев, КаталогВыгрузкиПроцессов, ДанныеПроцессов, КешДанныхФайлов)
	
	ФайлыДляУдаления = Новый Массив;
	
	ФайлКаталога = Новый Файл(КаталогВыгрузки);
	ИмяКаталога = ФайлКаталога.Имя;

	ЭтоСценарий = ?(ЭлементВыгрузки.ТипЭлементаВыгрузки = "Сценарий", Истина, Ложь);
	ИмяФайлаТеста = ?(ЭтоСценарий, "scen.yaml", "proc.yaml");
	ДобавитьДанныеИзКешКУдалению(ДополнитьРазделительПути(ИмяКаталога) + ИмяФайлаТеста,
		ФайлыДляУдаления, КешДанныхФайлов);
	
	Если ЭтоСценарий Тогда
		ИмяФайлаТеста = "meta.yaml";
		ДобавитьДанныеИзКешКУдалению(ДополнитьРазделительПути(ИмяКаталога) + ИмяФайлаТеста,
			ФайлыДляУдаления, КешДанныхФайлов);
		
		ИмяФайлаТеста = "scen.feature";
		ДобавитьДанныеИзКешКУдалению(ДополнитьРазделительПути(ИмяКаталога) + ИмяФайлаТеста,
			ФайлыДляУдаления, КешДанныхФайлов);
		
	КонецЕсли;	 
	
	Если Не ЭтоСценарий И ДанныеПроцессов.Получить(ЭлементВыгрузки.UID) <> Неопределено Тогда
		ФайлыДляУдаления.Добавить(ДанныеПроцессов.Получить(ЭлементВыгрузки.UID));
	КонецЕсли;
		
	КорневойКаталог = ?(ЭтоСценарий, КаталогВыгрузкиСценариев, КаталогВыгрузкиПроцессов);
	Если ЭлементВыгрузки.НастройкиСценария.Количество() > 0 Тогда
		Для Каждого НастройкаТеста Из ЭлементВыгрузки.НастройкиСценария Цикл
			ФайлыНастроек = НайтиФайлыСлужебный(КорневойКаталог, УбратьЗапрещенныеСимволыИзИмениФайла(НастройкаТеста.Код) + ".yaml", Истина);
			Для Каждого ФайлНастройки Из ФайлыНастроек Цикл
				Если ЭтоФайлНастройкиСценария(ФайлНастройки.ПолноеИмя) = ЭтоСценарий Тогда
					ФайлыДляУдаления.Добавить(ФайлНастройки.ПолноеИмя)
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	НеУдалосьУдалить = Новый Массив;
	Для Каждого ИмяФайла Из ФайлыДляУдаления Цикл
		Попытка
			УдалитьФайлы(ИмяФайла);
			УдалитьПутьКФайлу(КаталогВыгрузки, ИмяФайла, НеУдалосьУдалить);
		Исключение
			НеУдалосьУдалить.Добавить(ИмяФайла);
		КонецПопытки;
	КонецЦикла;
	
	Если НеУдалосьУдалить.Количество() > 0 Тогда
		СтрокаНеУдалосьУдалить = "";
		Для Каждого ИмяФайла Из НеУдалосьУдалить Цикл
			СтрокаНеУдалосьУдалить = СтрокаНеУдалосьУдалить + Символы.ПС + ИмяФайла;
		КонецЦикла;	
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось удалить файлы: .'"), СтрокаНеУдалосьУдалить);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеПроцессаВКаталог(ЭлементВыгрузки,КаталогСценария)
	ТекКаталогСценария = КаталогСценария;
	
	ПолноеИмяФайла = ТекКаталогСценария + "proc.yaml";
	
	ПодготовленныеДанныеДляЗаписиВФайл = Новый Массив;
	Уровень = 0;
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТипФайла","Процесс");
	ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,"ДанныеПроцесса",Уровень);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UID",ЭлементВыгрузки.UID);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Имя",ЭлементВыгрузки.ПроцессНаименование);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Код",ЭлементВыгрузки.Код);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПолныйКод",ЭлементВыгрузки.ПолныйКод);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Проект",ЭлементВыгрузки.ПроектНаименование);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПроектUID",ЭлементВыгрузки.ПроектUID);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"УровеньОтчета1",ЭлементВыгрузки.УровеньОтчета1);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"УровеньОтчета2",ЭлементВыгрузки.УровеньОтчета2);
	ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
	
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПараметрыСценария",ЭлементВыгрузки.ПараметрыПроцесса);
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТегиПроцесса",ЭлементВыгрузки.ТегиПроцесса);
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ШагиПроцесса",ЭлементВыгрузки.ШагиПроцесса);
	
	ЗаписатьПодготовленныеДанныеВФайл(ПодготовленныеДанныеДляЗаписиВФайл,ПолноеИмяФайла);
	
	//выгрузим настройки
	ТекКаталогНастроек = ТекКаталогСценария + "test";
	Если ЭлементВыгрузки.НастройкиСценария.Количество() > 0 Тогда
		СоздатьКаталогЕслиЕгоНет(ТекКаталогНастроек);
		
		Для Каждого НастройкаТеста Из ЭлементВыгрузки.НастройкиСценария Цикл
			ПолноеИмяФайла = ТекКаталогНастроек + ПолучитьРазделительПути() 
			     + УбратьЗапрещенныеСимволыИзИмениФайла(НастройкаТеста.Код) + ".yaml";
			  
			ПодготовленныеДанныеДляЗаписиВФайл = Новый Массив;
			Уровень = 0;
			
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТипФайла","НастройкаПроцесса");
			ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,"ДанныеТеста",Уровень);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UID",НастройкаТеста.UID);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Код",НастройкаТеста.Код);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UIDПроцесса",НастройкаТеста.UIDПроцесса);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Имя",НастройкаТеста.Имя);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ЭталоннаяБазаИмя",НастройкаТеста.ЭталоннаяБазаНаименование);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПроцессНаименование",НастройкаТеста.ПроцессНаименование);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ИдентификаторБазы",НастройкаТеста.ИдентификаторБазы);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Проект",НастройкаТеста.Проект);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПроектUID",НастройкаТеста.ПроектUID);
			СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПараметрыЗапуска",НастройкаТеста.ПараметрыЗапуска);
			
			ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
			
			СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТегиТеста",НастройкаТеста.ТегиТеста);
			СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПараметрыТеста",НастройкаТеста.ПараметрыТеста);
			
			ЗаписатьПодготовленныеДанныеВФайл(ПодготовленныеДанныеДляЗаписиВФайл,ПолноеИмяФайла);
		КонецЦикла;	
	КонецЕсли;	 
	
	//выгрузим присоединенные файлы
	ТекКаталогФайлов = ТекКаталогСценария + "files";
	Для Каждого ФайлСценария Из ЭлементВыгрузки.ФайлыСценария Цикл
		ИмяФайла = ТекКаталогФайлов + ПолучитьРазделительПути() + ФайлСценария.Наименование + "." + ФайлСценария.Расширение;
		
		МаксДлинаИмениФайла = МаксимальнаяДлинаИмениФайла();
		Если СтрДлина(ИмяФайла) > МаксДлинаИмениФайла Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Длина полного имени файла <%1> превышает допустимый размер <%2>.'"), ИмяФайла, МаксДлинаИмениФайла);
			КонецЕсли;	 
			
		ФайлСценария.ДанныеФайла.Записать(ИмяФайла);
	КонецЦикла;	
КонецПроцедуры

Процедура ВыгрузитьДанныеЭталонныхБД(ПереданныйСписокТестов, КаталогДанныхЭталонныхБД)
	ДанныеДляВыгрузки = ТестированиеСлужебныйВызовСервера.ДанныеЭталонныхБД(ПереданныйСписокТестов);
	
	ТекКаталог = КаталогДанныхЭталонныхБД;
	ТекКаталог = ДополнитьРазделительПути(ТекКаталог);
	
	ПолноеИмяФайла = ТекКаталог + "bases.yaml";
	
	ПодготовленныеДанныеДляЗаписиВФайл = Новый Массив;
	
	Уровень = 0;
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ЭталонныеБД",ДанныеДляВыгрузки);
	ЗаписатьПодготовленныеДанныеВФайл(ПодготовленныеДанныеДляЗаписиВФайл,ПолноеИмяФайла);
КонецПроцедуры

Функция ВыгружатьВНовомФормате(ЭлементВыгрузки)
	Возврат Истина;
КонецФункции	 

Процедура ВыгрузитьНастройкуСценарияВКаталог(НастройкаТеста, ПолноеИмяФайла)
	ПодготовленныеДанныеДляЗаписиВФайл = Новый Массив;
	Уровень = 0;
	
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТипФайла","НастройкаТеста");
	ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,"ДанныеТеста",Уровень);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UID",НастройкаТеста.UID);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Код",НастройкаТеста.Код);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"UIDСценария",НастройкаТеста.UIDСценария);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Проект",НастройкаТеста.Проект);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПроектUID",НастройкаТеста.ПроектUID);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Имя",НастройкаТеста.Имя);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ЭталоннаяБазаИмя",НастройкаТеста.ЭталоннаяБазаНаименование);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПрофильПользователя",НастройкаТеста.ПрофильПользователя);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"СценарийНаименование",НастройкаТеста.СценарийНаименование);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ИдентификаторБазы",НастройкаТеста.ИдентификаторБазы);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПараметрыЗапуска",НастройкаТеста.ПараметрыЗапуска);
	СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Публикуется",НастройкаТеста.Публикуется);
	Если НастройкаТеста.Свойство("Выключена") Тогда
		СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Выключена",НастройкаТеста.Выключена);
	КонецЕсли;	 
	Если НастройкаТеста.Свойство("Описание") Тогда
		СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"Описание",НастройкаТеста.Описание);
	КонецЕсли;	 
	
	ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
	
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ТегиТеста",НастройкаТеста.ТегиТеста);
	СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,"ПараметрыТеста",НастройкаТеста.ПараметрыТеста);
	
	ЗаписатьПодготовленныеДанныеВФайл(ПодготовленныеДанныеДляЗаписиВФайл, ПолноеИмяФайла);
	
	Если НастройкаТеста.Свойство("ОригинальныйТекстМетаданныхНастройки") Тогда
		ИмяФайла = СтрЗаменить(ПолноеИмяФайла, ".yaml", "_orig.yaml");
		ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Ложь); 
		ЗТ.Записать(НастройкаТеста.ОригинальныйТекстМетаданныхНастройки); 
		ЗТ.Закрыть();
	КонецЕсли;	 
	
	Если НастройкаТеста.Свойство("ЭтоНовыйЭлемент") И НастройкаТеста.ЭтоНовыйЭлемент Тогда
		Файл = Новый Файл(ПолноеИмяФайла);
		ИмяФайлаJson = Файл.Путь + "newtest.json";
		ДанныеНовыхНастроекСценария = ДанныеНовыхНастроекСценария(ИмяФайлаJson);
		
		ЭтоНоваяНастройка = Истина;
		Для Каждого Элем Из ДанныеНовыхНастроекСценария.НовыеНастройки Цикл
			Если Элем.UID = НастройкаТеста.UID Тогда
				ЭтоНоваяНастройка = Ложь;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	 
		
		Если ЭтоНоваяНастройка Тогда
			ДанныеНовойНастройки = Новый Структура;
			ДанныеНовойНастройки.Вставить("UID", НастройкаТеста.UID);
			ДанныеНовойНастройки.Вставить("Код", НастройкаТеста.Код);
			ДанныеНовойНастройки.Вставить("UIDСценария", НастройкаТеста.UIDСценария);
			ДанныеНовойНастройки.Вставить("ИмяФайла", Файл.ПолноеИмя);
			ДанныеНовыхНастроекСценария.НовыеНастройки.Добавить(ДанныеНовойНастройки);
		КонецЕсли;	
		
		#Если НЕ ВебКлиент Тогда	   
		УдалитьФайлы(ИмяФайлаJson);	
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайлаJson,"UTF-8");
		ЗаписатьJSON(ЗаписьJSON, ДанныеНовыхНастроекСценария);
		ЗаписьJSON.Закрыть();
		#КонецЕсли
	КонецЕсли;	 
	
КонецПроцедуры 

Процедура СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Имя,Знач Стр,МногоСтрочная = Ложь)
	Отступ = ЗначениеОтступа(Уровень, СтандартноеЗначениеОтступа());
	
	Поз = Найти(Стр,Символы.ПС);
	Если Поз > 0 ИЛИ МногоСтрочная Тогда
		//это многострочная строка
		
		ПодготовленныеДанныеДляЗаписиВФайл.Добавить(Отступ + Имя + ": |");
		
		Отступ = ЗначениеОтступа(Уровень+1, СтандартноеЗначениеОтступа());
		
		МассивСтрок = СтрРазделить(Стр,Символы.ПС);
		Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
			ПодготовленныеДанныеДляЗаписиВФайл.Добавить(Отступ + МассивСтрок[Ккк]);
		КонецЦикла;	
		
		Возврат;
	КонецЕсли;	 
	
	Стр = ЭкранироватьСпецсиволыYaml(Стр);
	ПодготовленныеДанныеДляЗаписиВФайл.Добавить(Отступ + Имя + ": """ + Стр + """");
КонецПроцедуры

Процедура СериализоватьМассив(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Массив,Имя)
	#Если Не ВебКлиент Тогда
	
	Ном = 0;
	Для Каждого Элем Из Массив Цикл
		Ном = Ном + 1;
		ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,"- " + Имя + XMLСтрока(Ном),Уровень);
		СериализоватьЭлемент(ПодготовленныеДанныеДляЗаписиВФайл,Элем,Уровень);
		ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
	КонецЦикла;	
	
	#КонецЕсли
	
КонецПроцедуры

Процедура СериализоватьСтруктуру(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Структура)
	#Если Не ВебКлиент Тогда
	Для Каждого Элем Из Структура Цикл
		Если ТипЗнч(Элем.Значение) = Тип("Массив") Тогда
			ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Элем.Ключ,Уровень);
			СериализоватьМассив(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Элем.Значение,Элем.Ключ);
			ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
			Продолжить;
		КонецЕсли;	 
		
		
		Значение = Строка(Элем.Значение);
		Если ТипЗнч(Значение) = Тип("Число") Тогда
			Значение = XMLСтрока(Элем.Значение);
		КонецЕсли;	 
		
		СериализоватьСтроку(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Элем.Ключ,Значение);
	КонецЦикла;	
	
	#КонецЕсли
КонецПроцедуры

Процедура СериализоватьЭлемент(ПодготовленныеДанныеДляЗаписиВФайл,Элем,Уровень,Имя = Неопределено)
	Если ТипЗнч(Элем) = Тип("Массив") Тогда
		СериализоватьМассив(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Элем,Имя);
	ИначеЕсли ТипЗнч(Элем) = Тип("Структура") Тогда
		СериализоватьСтруктуру(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Элем);
	Иначе	
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестный тип <%1>.'"),ТипЗнч(Элем));
		
	КонецЕсли;	 
КонецПроцедуры

Процедура СериализоватьМассивСтруктур(ПодготовленныеДанныеДляЗаписиВФайл,Уровень,Имя,Массив)
	#Если Не ВебКлиент Тогда
	ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Имя,Уровень);
	
	Отступ = ЗначениеОтступа(Уровень, СтандартноеЗначениеОтступа());
	
	Ном = 0;
	Для Каждого ПараметрСценария Из Массив Цикл
		Ном = Ном + 1;
		
		ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,"- " + Имя + XMLСтрока(Ном),Уровень);
		
		СериализоватьЭлемент(ПодготовленныеДанныеДляЗаписиВФайл,ПараметрСценария,Уровень);
		
		ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
	КонецЦикла;	
	
	ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень);
	
	#КонецЕсли
КонецПроцедуры

Процедура ДобавитьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Стр,Уровень)
	Отступ = ЗначениеОтступа(Уровень, СтандартноеЗначениеОтступа());
	ПодготовленныеДанныеДляЗаписиВФайл.Добавить(Отступ + Стр + ":");
	Уровень = Уровень + 1;
КонецПроцедуры

Процедура ЗакрытьСекциюВYaml(ПодготовленныеДанныеДляЗаписиВФайл,Уровень)
	ПодготовленныеДанныеДляЗаписиВФайл.Добавить("");
	Уровень = Уровень - 1;
КонецПроцедуры

Процедура ЗаписатьПодготовленныеДанныеВФайл(ПодготовленныеДанныеДляЗаписиВФайл, ИмяФайла)
	МаксДлинаИмениФайла = МаксимальнаяДлинаИмениФайла();
	Если СтрДлина(ИмяФайла) > МаксДлинаИмениФайла Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Длина полного имени файла <%1> превышает допустимый размер <%2>.'"), ИмяФайла, МаксДлинаИмениФайла);
	КонецЕсли;	 
	
	ЗТ = Новый ЗаписьТекста(ИмяФайла,"UTF-8",,Ложь); 
	Для Каждого Стр Из ПодготовленныеДанныеДляЗаписиВФайл Цикл
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	ЗТ.Закрыть();
КонецПроцедуры

Процедура СоздатьКаталогЕслиЕгоНет(Путь)
	Каталог = Новый Файл(Путь);
	Если Не Каталог.Существует() Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;	 
КонецПроцедуры

Функция УбратьЗапрещенныеСимволыИзИмениФайла(Знач Стр) 
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,"+","");
	
	Стр = СтрЗаменить(Стр,".","");
	
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Возврат Стр;
КонецФункции

Функция МаксимальнаяДлинаИмениФайла()
	Возврат 210; 
КонецФункции	 

Функция НайтиФайлыСлужебный(Путь, Маска, ИскатьВПодкаталогах)
	
	ПутьБезРазделителя = УдалитьРазделительПути(Путь);
	Если НЕ ЗначениеЗаполнено(ПутьБезРазделителя) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Возврат НайтиФайлы(Путь, Маска, ИскатьВПодкаталогах);
	
КонецФункции

Функция UIDИзФайла(ПутьКФайлу)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
				
		Индекс = Найти(Стр, "UID:");
		Если Индекс <> 0 Тогда
			UID = СокрЛП(Прав(Стр, СтрДлина(Стр) - Индекс - СтрДлина("UID:")));
			UID = СтрЗаменить(UID, """", "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Текст.Закрыть();
	
	Возврат UID;
	
КонецФункции

Процедура ДобавитьДанныеИзКешКУдалению(Стр, ФайлыДляУдаления, КешДанныхФайлов)
	ДанныеКеш = КешДанныхФайлов[Стр];
	Если ДанныеКеш <> Неопределено Тогда
		Для Каждого ПолноеИмя Из ДанныеКеш Цикл
			ФайлыДляУдаления.Добавить(ПолноеИмя);
		КонецЦикла;	 
	КонецЕсли;	 
КонецПроцедуры 

Функция ЭтоФайлНастройкиСценария(ИмяФайла)
	Статус = Истина;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,"НастройкаПроцесса") > 0 Тогда
			Статус = Ложь;
		КонецЕсли;	 
		
		Прервать;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Статус;
КонецФункции	 

Процедура УдалитьПутьКФайлу(КаталогВыгрузки, ИмяФайла, НеУдалосьУдалить)
	
	Файл = Новый Файл(КаталогВыгрузки);
	КаталогВыгрузки = Файл.ПолноеИмя;
	
	Файл = Новый Файл(ИмяФайла);
	Каталог = Файл.Путь;
	ФайлКаталога = Новый Файл(Каталог);
	ИмяКаталога = ФайлКаталога.ПолноеИмя;
	СодержимоеКаталога = НайтиФайлыСлужебный(Каталог, "*", Ложь);
		
	Если СодержимоеКаталога.Количество() = 0 И ИмяКаталога <> КаталогВыгрузки Тогда
		Попытка
			УдалитьФайлы(ИмяКаталога);
			УдалитьПутьКФайлу(КаталогВыгрузки, ИмяКаталога, НеУдалосьУдалить);
		Исключение
			НеУдалосьУдалить.Добавить(ИмяКаталога);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеНовыхНастроекСценария(ИмяФайла)
	Результат = Новый Структура;
	Результат.Вставить("НовыеНастройки", Новый Массив);
	
	Файл = Новый Файл(ИмяФайла); 
	Если НЕ Файл.Существует() Тогда
		Возврат Результат; 
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда	   
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ИмяФайла);
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	#КонецЕсли
	
	Возврат Результат; 
КонецФункции	 

Функция ЗначениеОтступа(Уровень, СтандартноеЗначениеОтступа)
	Стр = "";
	Для Ккк = 1 По  Уровень Цикл
		Стр = СтандартноеЗначениеОтступа + Стр;
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	

Функция ЭкранироватьСпецсиволыYaml(Стр)
	Стр = СтрЗаменить(Стр,"\","\\");
	Стр = СтрЗаменить(Стр,"""","\""");
	Возврат Стр; 
КонецФункции	 

Процедура ОчиститьКаталогВыгрузкиСценариев(Каталог)
	Каталоги = Новый Массив;
	
	Файлы = НайтиФайлыСлужебный(Каталог,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Каталоги.Добавить(Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;	 
		
		Если Файл.Расширение = ".yaml" Тогда
			Если НРег(Файл.Имя) <> "scen.yaml" И НРег(Файл.Имя) <> "meta.yaml" Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
	
	Для Каждого ПолноеИмяКаталога Из Каталоги Цикл
		ФайлКаталог = Новый Файл(ПолноеИмяКаталога);
		Если НРег(ФайлКаталог.Имя) = "test" Тогда
			Продолжить;
		КонецЕсли;	 
		
		УдалитьФайлы(ПолноеИмяКаталога);
	КонецЦикла;	
	
КонецПроцедуры

Функция ТокенПроекта(Проект)
	Возврат ТестированиеСлужебныйВызовСервера.ТокенПроекта(Проект);
КонецФункции	 

Функция СоответствиеВСтруктуру(ДанныеСоответствие)
	
	Результат = Новый Структура;
	
	Для Каждого Элем Из ДанныеСоответствие Цикл
		Если ТипЗнч(Элем.Значение) = Тип("Строка") Тогда
			Результат.Вставить(Элем.Ключ, Элем.Значение);
		ИначеЕсли ТипЗнч(Элем.Значение) = Тип("Соответствие") Тогда
			Результат.Вставить(Элем.Ключ, СоответствиеВСтруктуру(Элем.Значение));
		ИначеЕсли ТипЗнч(Элем.Значение) = Тип("Массив") Тогда
			Результат.Вставить(Элем.Ключ, Элем.Значение);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат Результат; 
	
КонецФункции	 

Процедура ЗаписатьПрочитанныеДанныеYamlВФайл(ДанныеСценарияИзYaml, ИмяФайла)
	
	ДанныеДляЗаписи = ДанныYamlВФорматСтруктурыСценария(ДанныеСценарияИзYaml);
	
	ДанныеДляВыгрузки = Новый Массив;
	ДанныеДляЗаписи.Вставить("ТипЭлементаВыгрузки", "Сценарий");
	Файл = Новый Файл(ИмяФайла);
	ДанныеДляЗаписи.Вставить("КаталогВыгрузки", Файл.Путь);
	
	ДанныеДляВыгрузки.Добавить(ДанныеДляЗаписи);
	ВыгрузитьДанныеВКаталогВФорматеYaml(ДанныеДляВыгрузки);
	
КонецПроцедуры 

Функция СтрокаКешСлужебныеДанныеСценария(Параметры)
	
	Если Параметры.Свойство("UIDСценарияКопирования") И ЗначениеЗаполнено(Параметры.UIDСценарияКопирования) Тогда
		Возврат "" + Параметры.ИдентификаторКоммита + ";"
		+ ТестированиеСлужебныйВызовСервера.ИмяВеткиВРепозитории(Параметры.Ветка)
		+ Параметры.UIDСценарияКопирования;
	Иначе	
		Возврат "" + Параметры.ИдентификаторКоммита + ";"
		+ ТестированиеСлужебныйВызовСервера.ИмяВеткиВРепозитории(Параметры.Ветка)
		+ Параметры.UIDСценария;
	КонецЕсли;	
	
КонецФункции	

#КонецОбласти