// Стало

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Органайзер".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Установить для выбранных стандартов состояние "Изучен".
//
// Параметры:
//  ВыбранныеСтроки - Массив - ссылки на выбранные стандарты.
//
Процедура ПодтвердитьИзучениеВыбранныхСтандартов(ВыбранныеСтроки) Экспорт
	
	Состояния = Новый Массив;
	Состояния.Добавить(Перечисления.СостоянияСтандартов.Новый);
	Состояния.Добавить(Перечисления.СостоянияСтандартов.ТребуетИзучения);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос = ЗапросСтандартовПоСостоянию(ВыбранныеСтроки, Состояния, ТекущийПользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УстановитьСостояниеСтандарта(ТекущийПользователь,
			Выборка.Стандарт,
			Перечисления.СостоянияСтандартов.Изучен);
	КонецЦикла;
	
КонецПроцедуры

// Установить новое состояние стандарта для указанного пользователя.
// Если состояние или описание не изменяется, то новая запись в регистр
// ИзучаемыеСтандарты не добавляется.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого вносится изменение.
//  Стандарт - СправочникСсылка.СтандартыРазработки - стандарт для которого вносится изменение.
//  Состояние - ПеречислениеСсылка.СостоянияСтандартов - новое состояние стандарта.
//  ПричинаИзучения - Строка - описание причины изменения состояния стандарта.
//
Процедура УстановитьСостояниеСтандарта(Пользователь, Стандарт, Состояние, ПричинаИзучения = Неопределено) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Если Не РазрешенаУстановкаСостоянияСтандартов(Пользователь, Состояние) Тогда
		ШаблонСообщения  = НСтр("ru = 'Текущему пользователю ""%1"" не разрешено устанавливать состояние ""%2"" стандарта ""%3"" для пользователя ""%4"".'");
		ВызватьИсключение СтрШаблон(ШаблонСообщения, ТекущийПользователь, Состояние, Стандарт, Пользователь);
	КонецЕсли;

	ТекущаяДата = ТекущаяДатаСеанса();
	НачатьТранзакцию();
	
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ИзучаемыеСтандарты");
		ЭлементБлокировки.УстановитьЗначение("Период", ТекущаяДата);
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		ЭлементБлокировки.УстановитьЗначение("Стандарт", Стандарт);
		Блокировка.Заблокировать();
		
		Запрос = ЗапросПоследнегоСостоянияСтандарта(Пользователь, Стандарт);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Не Выборка.Следующий()
		    Или Выборка.Состояние <> Состояние
		    Или Выборка.ПричинаИзучения <> ПричинаИзучения Тогда
			
			Запись = РегистрыСведений.ИзучаемыеСтандарты.СоздатьМенеджерЗаписи();
			Запись.Период = ТекущаяДата;
			Запись.Пользователь = Пользователь;
			Запись.Стандарт = Стандарт;
			Запись.ПричинаИзучения = ПричинаИзучения;
			Запись.Состояние = Состояние;
			Запись.АвторПоручения = ТекущийПользователь;
			
			УстановитьПривилегированныйРежим(Истина);
			Запись.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Запрос получения последнего состояния стандарта для пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого определяется состояние.
//  Стандарт - СправочникСсылка.СтандартыРазработки- стандарт, для которого определяется состояние.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий состояние и другую информацию по стандарту.
//
Функция ЗапросПоследнегоСостоянияСтандарта(Пользователь, Стандарт) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаПоследнегоСостоянияСтандарта());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Стандарт", Стандарт);
	
	Возврат Запрос;
	
КонецФункции

// Запрос получения всех стандартов, входящих в иерархию перечисленных стандартов.
//
// Параметры:
//  Стандарты - Массив ссылок на стандарты для которых нужно найти подчиненные стандарты.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий ссылки на стандарты.
//
Функция ЗапросСтандартов(Стандарты) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСтандартов());
	Запрос.УстановитьПараметр("Стандарты", Стандарты);
	
	Возврат Запрос;
	
КонецФункции

// Запрос получения всех стандартов, входящих в иерархию перечисленных стандартов и
// имеющих одно из перечисленных состояний для указанного пользователя.
//
// Параметры:
//  Стандарты - Массив ссылок на стандарты для которых нужно найти подчиненные стандарты.
//  Состояния - Массив ссылок на допустимые состояния.
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого ищутся стандарты.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий ссылки на стандарты.
//
Функция ЗапросСтандартовПоСостоянию(Стандарты, Состояния, Пользователь) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСтандартовПоСостоянию());
	Запрос.УстановитьПараметр("Стандарты", Стандарты);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
	Запрос.УстановитьПараметр("Состояния", Состояния);
	
	Возврат Запрос;
	
КонецФункции

// Запрос получения общего количества стандартов.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий количество стандартов.
//
Функция ЗапросСтатистикиВсего() Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСтатистикиВсего());
	
	Возврат Запрос;
	
КонецФункции

// Запрос получения количества стандартов в заданном состоянии для указанного пользователя.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого ищутся стандарты.
//  Состояние - ПеречислениеСсылка.СостоянияСтандартов - требуемое состояние.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий количество стандартов в заданном состоянии.
//
Функция ЗапросСтатистикиСостояния(Пользователь, Состояние) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСтатистикиСостояния());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Состояние", Состояние);
	
	Возврат Запрос;
	
КонецФункции

// Запрос получения количества нарушенных пользователем стандартов.
// Нарушением считается ситуация, когда стандарт изучен, но не соблюден.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого ищутся стандарты.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий количество нарушенных стандартов.
//
Функция ЗапросСтатистикиНарушений(Пользователь) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСтатистикиНарушений());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос;
	
КонецФункции

// Запрос получения количества несоблюденных пользователем стандартов.
// Несоблюдением считается ситуация, когда стандарт не соблюден и не изучен.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого ищутся стандарты.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий количество несоблюденных стандартов.
//
Функция ЗапросСтатистикиНесоблюдений(Пользователь) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСтатистикиНесоблюдений());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос;
	
КонецФункции

// Запрос получения количества новых для пользователя стандартов.
// Новым считается тот стандарт, который ни разу не изучался и не требуется его изучение.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь для которого ищутся стандарты.
//
// Возвращаемое значение:
//  Запрос - готовый к выполнению запрос, возвращающий количество новых стандартов.
//
Функция ЗапросСтатистикиНовых(Пользователь) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаСтатистикиНовых());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Возврат Запрос;
	
КонецФункции

// Получение количества из указанного запроса.
// Универсальное получение количества из любого запроса, возвращающего поле "Количество".
//
// Параметры:
//  РезультатЗапроса - РезультатЗапроса, результат, содержащий в выборке поле "Количество".
//
// Возвращаемое значение:
//  Число - значение поля "Количество", если записей не возвращено, то ноль.
//
Функция КоличествоИзРезультатаЗапроса(РезультатЗапроса) Экспорт
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Текст запроса получения последнего состояния стандарта для пользователя.
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий состояние и другую информацию по стандарту.
//
Функция ТекстЗапросаПоследнегоСостоянияСтандарта() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	ИзучаемыеСтандарты.Период,
		|	ИзучаемыеСтандарты.Пользователь,
		|	ИзучаемыеСтандарты.Стандарт,
		|	ЕСТЬNULL(ИзучаемыеСтандарты.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Новый)) КАК Состояние,
		|	ИзучаемыеСтандарты.АвторПоручения,
		|	ИзучаемыеСтандарты.ПричинаИзучения
		|ИЗ
		|	Справочник.СтандартыРазработки КАК СтандартыРазработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзучаемыеСтандарты.СрезПоследних(
		|				,
		|				Пользователь = &Пользователь
		|					И Стандарт = &Стандарт) КАК ИзучаемыеСтандарты
		|		ПО СтандартыРазработки.Ссылка = ИзучаемыеСтандарты.Стандарт
		|ГДЕ
		|	СтандартыРазработки.Ссылка = &Стандарт";
	
КонецФункции

// Текст запроса получения всех стандартов, входящих в иерархию перечисленных стандартов.
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий ссылки на стандарты.
//
Функция ТекстЗапросаСтандартов() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	СтандартыРазработки.Ссылка КАК Стандарт,
		|	СтандартыРазработки.ДатаИзменения КАК ДатаИзменения,
		|	1 КАК Картинка
		|ИЗ
		|	Справочник.СтандартыРазработки КАК СтандартыРазработки
		|ГДЕ
		|	СтандартыРазработки.Ссылка В ИЕРАРХИИ(&Стандарты)
		|	И НЕ СтандартыРазработки.ПометкаУдаления
		|	И НЕ СтандартыРазработки.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтандартыРазработки.Наименование";
	
КонецФункции

// Текст запроса получения всех стандартов, входящих в иерархию перечисленных стандартов и
// имеющих одно из перечисленных состояний для указанного пользователя.
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий ссылки на стандарты.
//
Функция ТекстЗапросаСтандартовПоСостоянию() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	ИзучаемыеСтандарты.Стандарт КАК Стандарт,
		|	ИзучаемыеСтандарты.Состояние КАК Состояние
		|ПОМЕСТИТЬ ИзучаемыеСтандарты
		|ИЗ
		|	РегистрСведений.ИзучаемыеСтандарты.СрезПоследних(
		|			,
		|			Пользователь = &ТекущийПользователь
		|				И НЕ Стандарт.ПометкаУдаления) КАК ИзучаемыеСтандарты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Стандарт
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтандартыРазработки.Ссылка КАК Стандарт,
		|	СтандартыРазработки.ДатаИзменения КАК ДатаИзменения,
		|	ЕСТЬNULL(ИзучаемыеСтандарты.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Новый)) КАК Состояние,
		|	ВЫБОР
		|		КОГДА ИзучаемыеСтандарты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.ТребуетИзучения)
		|			ТОГДА 2
		|		КОГДА ИзучаемыеСтандарты.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Изучен)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Картинка
		|ИЗ
		|	Справочник.СтандартыРазработки КАК СтандартыРазработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИзучаемыеСтандарты КАК ИзучаемыеСтандарты
		|		ПО СтандартыРазработки.Ссылка = ИзучаемыеСтандарты.Стандарт
		|ГДЕ
		|	СтандартыРазработки.Ссылка В ИЕРАРХИИ(&Стандарты)
		|	И НЕ СтандартыРазработки.ПометкаУдаления
		|	И ЕСТЬNULL(ИзучаемыеСтандарты.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Новый)) В (&Состояния)
		|	И НЕ СтандартыРазработки.ПометкаУдаления
		|	И НЕ СтандартыРазработки.ЭтоГруппа
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтандартыРазработки.Наименование";
	
КонецФункции

// Текст запроса получения общего количества стандартов.
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий количество стандартов.
//
Функция ТекстЗапросаСтатистикиВсего() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СтандартыРазработки.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.СтандартыРазработки КАК СтандартыРазработки
		|ГДЕ
		|	НЕ СтандартыРазработки.ПометкаУдаления
		|	И НЕ СтандартыРазработки.ЭтоГруппа";
	
КонецФункции

// Текст запроса получения количества стандартов в заданном состоянии для указанного пользователя.
//
// Параметры:
//  ИмяПараметраСостояния - Строка - имя параметра для отбора по состоянию (по умолчанию, "Состояние").
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий количество стандартов в заданном состоянии.
//
Функция ТекстЗапросаСтатистикиСостояния(ИмяПараметраСостояния = Неопределено) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ИзучаемыеСтандарты.Период) КАК Количество
		|ИЗ
		|	РегистрСведений.ИзучаемыеСтандарты.СрезПоследних(
		|			,
		|			Пользователь = &Пользователь
		|				И НЕ Стандарт.ПометкаУдаления) КАК ИзучаемыеСтандарты
		|ГДЕ
		|	ЕСТЬNULL(ИзучаемыеСтандарты.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Новый)) = &Состояние";
	
	Если ИмяПараметраСостояния <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Состояние", "&" + ИмяПараметраСостояния);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса получения количества нарушенных пользователем стандартов.
// Нарушением считается ситуация, когда стандарт изучен, но не соблюден.
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий количество нарушенных стандартов.
//
Функция ТекстЗапросаСтатистикиНарушений() Экспорт
	
	Возврат
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(Ошибки.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзучаемыеСтандарты.СрезПоследних(
		|				,
		|				Пользователь = &Пользователь
		|					И НЕ Стандарт.ПометкаУдаления) КАК ИзучаемыеСтандарты
		|		ПО (ИзучаемыеСтандарты.Стандарт = Ошибки.Стандарт)
		|ГДЕ
		|	НЕ Ошибки.ПометкаУдаления
		|	И Ошибки.Исправил = &Пользователь
		|	И Ошибки.Стандарт <> ЗНАЧЕНИЕ(Справочник.СтандартыРазработки.ПустаяСсылка)
		|	И ЕСТЬNULL(ИзучаемыеСтандарты.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Новый)) = ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Изучен)
		|	И НЕ Ошибки.Стандарт.ПометкаУдаления
		|	И Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта))";
	
КонецФункции

// Текст запроса получения количества несоблюденных пользователем стандартов.
// Несоблюдением считается ситуация, когда стандарт не соблюден и не изучен.
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий количество несоблюденных стандартов.
//
Функция ТекстЗапросаСтатистикиНесоблюдений() Экспорт
	
	Возврат
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(Ошибки.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзучаемыеСтандарты.СрезПоследних(
		|				,
		|				Пользователь = &Пользователь
		|					И НЕ Стандарт.ПометкаУдаления) КАК ИзучаемыеСтандарты
		|		ПО (ИзучаемыеСтандарты.Стандарт = Ошибки.Стандарт)
		|ГДЕ
		|	НЕ Ошибки.ПометкаУдаления
		|	И Ошибки.Исправил = &Пользователь
		|	И Ошибки.Стандарт <> ЗНАЧЕНИЕ(Справочник.СтандартыРазработки.ПустаяСсылка)
		|	И ЕСТЬNULL(ИзучаемыеСтандарты.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Новый)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияСтандартов.Изучен)
		|	И НЕ Ошибки.Стандарт.ПометкаУдаления
		|	И Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта))";
	
КонецФункции

// Текст запроса получения количества новых для пользователя стандартов.
// Новым считается тот стандарт, который ни разу не изучался и не требуется его изучение.
//
// Возвращаемое значение:
//  Строка - текст запроса, возвращающий количество новых стандартов.
//
Функция ТекстЗапросаСтатистикиНовых() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(СтандартыРазработки.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.СтандартыРазработки КАК СтандартыРазработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзучаемыеСтандарты.СрезПоследних(
		|				,
		|				Пользователь = &Пользователь
		|					И НЕ Стандарт.ПометкаУдаления) КАК ИзучаемыеСтандарты
		|		ПО СтандартыРазработки.Ссылка = ИзучаемыеСтандарты.Стандарт
		|ГДЕ
		|	НЕ СтандартыРазработки.ПометкаУдаления
		|	И НЕ СтандартыРазработки.ЭтоГруппа
		|	И ИзучаемыеСтандарты.Период ЕСТЬ NULL ";
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазрешенаУстановкаСостоянияСтандартов(Пользователь, Состояние)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ИдентификаторИБ = ТекущийПользователь.ИдентификаторПользователяИБ;
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторИБ);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава)
	    Или ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПоручениеИзученияСтандартовРазработки)
	      И Состояние = Перечисления.СостоянияСтандартов.ТребуетИзучения
	    Или ТекущийПользователь = Пользователь;
	
КонецФункции

#КонецОбласти
