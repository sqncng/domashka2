////////////////////////////////////////////////////////////////////////////////
// Подсистема "Разработка конфигурации". Работа с ключевыми операциями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Найти в каталоге выгрузки конфигурации все встроенные ключевые операции и
// сохранить их в справочник КлючевыеОперации.
//
// Параметры:
//  Параметры - Структура - помимо прочих, содержит следующие поля, используемые в этой процедуре:
//     * Проект - СправочникСсылка.Проекты - текущий проект, для которого выполняется обновление;
//
Процедура ЗагрузитьКлючевыеОперацииИзКаталогаВыгрузкиКонфигурации(Параметры) Экспорт
	
	Попытка
		Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
			ФорматВыгрузки = ФорматВыгрузкиФайловИерархический();
		Иначе
			ФорматВыгрузки = ФорматВыгрузкиФайловПлоский();
		КонецЕсли;
		
		Параметры.Вставить("ФорматВыгрузкиФайлов", ФорматВыгрузки);
		НайденныеОперации = НайтиКлючевыеОперации(Параметры);
		ВсеОперации = СопоставитьКлючевыеОперации(НайденныеОперации, Параметры.Проект);
		СоздатьКлючевыеОперации(ВсеОперации);
	Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ИмяСобытияНачала = НСтр("ru = 'Ключевые операции. Загрузка из каталога выгрузки конфигурации'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытияНачала, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Найти в хранилище проекта все встроенные ключевые операции и поместить их в таблицу.
//
// Параметры:
//  Параметры - Структура - помимо прочих, содержит следующие поля, используемые в этой процедуре:
//     * Проект - СправочникСсылка.Проекты - текущий проект, для которого выполняется обновление;
//  АдресХранилища - Строка - адрес хранилища значения в которое помещается:
//     - таблица с найденными операциями, если поиск завершился удачно;
//     - строка с описанием ошибки, если поиск завершился неудачно.
//
Процедура ЗагрузитьКлючевыеОперацииИзХранилищаПроекта(Параметры, АдресХранилища) Экспорт
	
	Проект = КраткоеОписаниеПроекта(Параметры.Проект);
	ЗаполнитьПараметрыПроекта(Параметры, Проект);
	
	Если ПроверитьПараметрыЗагрузкиКлючевыхОпераций(Параметры) Тогда
		Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
			ЗагрузитьКлючевыеОперацииИзХранилищаGit(Проект, Параметры, АдресХранилища);
		Иначе
			ЗагрузитьКлючевыеОперацииИзХранилища1СПредприятия(Проект, Параметры, АдресХранилища);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Создать новые ключевые операции, перечисленные в указанной таблице.
//
// Параметры:
//  ТаблицаОпераций - ТаблицаЗначений - со следующими колонками:
//     * Имя - Строка(1000) - имя ключевой операции;
//     * ОбъектМетаданных - СправочникСсылка.ОбъектыМетаданных - владелец операции;
//     * ВидОперации - ПеречислениеСсылка.ВидыКлючевыхОпераций - вид операции.
//  АдресХранилища - Строка - адрес хранилища значения в которое помещается:
//     - строка с описанием ошибки, если запись завершилась неудачно.
//
Процедура СоздатьКлючевыеОперации(ТаблицаОпераций, АдресХранилища = Неопределено) Экспорт
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ИмяСобытия = НСтр("ru = 'Ключевые операции. Начало создания ключевых операций'", КодЯзыка);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация);
	
	УдалитьНесохраняемыеКлючевыеОперации(ТаблицаОпераций);
	ЕстьОшибки = Ложь;
	КоличествоОшибок = 0;
	
	Для каждого Операция Из ТаблицаОпераций Цикл
		НоваяОперация = Справочники.КлючевыеОперации.СоздатьЭлемент();
		НоваяОперация.Имя = Операция.Имя;
		НоваяОперация.Владелец = Операция.ОбъектМетаданных;
		НоваяОперация.ВидОперации = Операция.ВидОперации;
		НоваяОперация.Важность = КлючевыеОперацииКлиентСервер.ВажностьПоУмолчанию();
		
		Если Операция.ВидОперации = Перечисления.ВидыКлючевыхОпераций.Длительная Тогда
			НоваяОперация.ЦелевоеВремя = КлючевыеОперацииКлиентСервер.ЦелевоеВремяДлительнойОперацииПоУмолчанию();
		ИначеЕсли Операция.ВидОперации = Перечисления.ВидыКлючевыхОпераций.Интерактивная Тогда
			НоваяОперация.ЦелевоеВремя = КлючевыеОперацииКлиентСервер.ЦелевоеВремяИнтерактивнойОперацииПоУмолчанию();
		КонецЕсли;
		
		Попытка
			НоваяОперация.Записать();
		Исключение
			ЕстьОшибки = Истина;
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецПопытки;
	КонецЦикла;
	
	Если ЕстьОшибки И АдресХранилища <> Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Запись выполнена, но некоторые ключевые операции не удалось записать. Подробности в журнале регистрации.'");
		ПоместитьВоВременноеХранилище(ТекстСообщения, АдресХранилища);
	КонецЕсли;
	
	ИмяСобытия = НСтр("ru = 'Ключевые операции. Завершение создания ключевых операций'", КодЯзыка);
	ШаблонКомментария = НСтр("ru = 'При записи ключевых операций возникло %1 ошибок.'");
	ТекстКомментария = СтрШаблон(ШаблонКомментария, 1);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,, ТекстКомментария);
	
КонецПроцедуры

// Установить полю формы отбор по проекту.
//
// Параметры:
//  Элемент - РасширениеПоляВвода - элемент формы, имеющий свойство ПараметрыВыбора.
//  ПараметрыВыбора - ФиксированныйМассив - массив элементов ПараметрВыбора;
//                  - ПараметрВыбора - один параметр выбора.
//
Процедура УстановитьЭлементуФормыОтборПоПроекту(Элемент) Экспорт
	
	Проект = ПараметрыСеанса.ТекущийПроект;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.Владелец", Проект);
		ОбщегоНазначенияСППР.УстановитьПараметрыВыбораЭлементаФормы(Элемент, ПараметрВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Утвердить или отменить утверждение группы ключевых операций
//
// Параметры:
//  Параметры - Структура - со следующими полями:
//     * Операции - СписокЗначений, ссылки на ключевые операции.
//     * Значение - Булево - Истина, установить признак "Утверждено", иначе снять его.
//
Процедура Утвердить(Параметры, АдресХранилища) Экспорт
	
	Значение = Параметры.Значение;
	СписокОпераций = Параметры.Операции;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КлючевыеОперации.Ссылка
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|ГДЕ
		|	КлючевыеОперации.Утверждено = &Утверждено
		|	И КлючевыеОперации.Ссылка В(&КлючевыеОперации)");
	Запрос.УстановитьПараметр("Утверждено", Не Значение);
	Запрос.УстановитьПараметр("КлючевыеОперации", СписокОпераций);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		
		Попытка
			Операция = Выборка.Ссылка;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.КлючевыеОперации");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Операция);
			Блокировка.Заблокировать();
			
			ОперацияОбъект = Операция.ПолучитьОбъект();
			
			Если ОперацияОбъект.Утверждено <> Значение Тогда
				ОперацияОбъект.Утверждено = Значение;
				ОперацияОбъект.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОтменитьТранзакцию();
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
			ИмяСобытия = НСтр("ru = 'Ключевые операции. Утверждение'", КодЯзыка);
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Определить, есть ли ключевые операции с точно таким же именем.
//
// Параметры:
//  Имя - Строка - имя ключевой операции;
//  Ссылка - СправочникСсылка.КлючевыеОперации - имя существующей ключевой операции.
// 
// Возвращаемое значение:
//  Булево - Истина - если ключевая операция не уникальна;
//         - Ложь - если ключевая операция уникальна.
//
Функция ЕстьДублирующиеся(Имя, Ссылка) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИСТИНА КАК Найдено
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|ГДЕ
		|	НЕ КлючевыеОперации.ПометкаУдаления
		|	И КлючевыеОперации.Владелец.Владелец = &Проект
		|	И КлючевыеОперации.Имя = &Имя
		|	И КлючевыеОперации.Ссылка <> &Ссылка");
	Запрос.УстановитьПараметр("Имя", Имя);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	УстановитьПараметрЗапросаПоПроекту(Запрос, ПараметрыСеанса.ТекущийПроект);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Выгрузить ключевые операции в XML для передачи в конфигурацию или Центр контроля качества.
//
// Параметры:
//  ВидВыгрузки - Строка - может принимать следующие значения:
//     * "ДляКонфигуратора" - Строка - для встраивания в макетов в конфигурацию;
//     * "ДляЦКК"           - Строка - для настройки профилей в Центре контроля качества.
//  Подсистема - СправочникСсылка.Подсистемы - отбор ключевых операций по подсистеме;
//             - Неопределено, если отбор по подсистеме не нужен.
//  ВидОперации - ПеречислениеСсылка.ВидыКлючевыхОпераций - отбор по виду ключевой операции.
// 
// Возвращаемое значение:
//  Строка - XML, готовый для встраивания в конфигурацию или для загрузки в профиль.
//
Функция КлючевыеОперацииВСтрокуXML(ВидВыгрузки, Подсистема = Неопределено, ВидОперации = Неопределено) Экспорт
	
	ЕстьОтборПоПодсистеме = ЗначениеЗаполнено(Подсистема);
	
	Если ВидВыгрузки = КлючевыеОперацииКлиентСервер.ВидВыгрузкиДляЦентраКонтроляКачества() Тогда
		Если ЕстьОтборПоПодсистеме Тогда
			ТекстЗапроса = ТекстЗапросаКлючевыхОперацийДляЦККПоПодсистеме();
		Иначе
			ТекстЗапроса = ТекстЗапросаКлючевыхОперацийДляЦКК();
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	УстановитьПараметрЗапросаПоПроекту(Запрос, ПараметрыСеанса.ТекущийПроект);
	
	Если ЕстьОтборПоПодсистеме Тогда
		Запрос.УстановитьПараметр("Подсистема", Подсистема);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОперации) Тогда
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Иначе
		Запрос.УстановитьПараметр("ВидОперации", Перечисления.ВидыКлючевыхОпераций.ПустаяСсылка());
	КонецЕсли;
	
	ТаблицаОпераций = Запрос.Выполнить().Выгрузить();
	
	Возврат ВыгрузитьТаблицуВXML(ТаблицаОпераций, "");
	
КонецФункции

// Получить описание объекта метаданных (имя и вид) для использования в работе с ключевыми операциями.
//
// Параметры:
//  ОбъектМетаданных - СправочникСсылка.ОбъектыМетаданных - объект метаданных, для которого получается описание.
// 
// Возвращаемое значение:
//  Структура - структура описания объекта метаданных со следующими полями:
//     * Имя - Строка(150) - имя объекта метаданных;
//     * Вид - Строка(100) - вид объекта метаданных в единственном числе.
//
Функция ОписаниеОбъектаМетаданных(ОбъектМетаданных) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыМетаданных.Имя КАК Имя,
		|	ОбъектыМетаданных.Родитель.ВидОбъектаМетаданныхВЕдЧисле КАК Вид
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Ссылка = &ОбъектМетаданных");
	Запрос.УстановитьПараметр("ОбъектМетаданных", ОбъектМетаданных);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Описание = Новый Структура("Имя, Вид");
		ЗаполнитьЗначенияСвойств(Описание, Выборка);
		Возврат Описание;
	КонецЕсли;
	
КонецФункции

// Возвращает ответственного за ключевую операцию проекта.
//
// Параметры:
//  Проект - СправочникСсылка.Проекты - проект, к которому относится ключевая операция;
//  ИмяКлючевойОперации - Строка - имя ключевой операции.
// 
// Возвращаемое значение:
//  Строка - Наименование ответственного пользователя;
//  Неопределено - не удалось найти ответственного пользователя.
//
Функция ОтветственныйКлючевойОперации(Проект, ИмяКлючевойОперации) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЕСТЬNULL(КлючевыеОперации.Владелец.Ответственный.Наименование, """") КАК Ответственный
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|ГДЕ
		|	КлючевыеОперации.Владелец.Владелец = &Проект
		|	И &Имя ПОДОБНО КлючевыеОперации.Имя
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА КлючевыеОперации.Имя ПОДОБНО ""\%%\%"" СПЕЦСИМВОЛ ""\""
		|			ТОГДА 4
		|		КОГДА КлючевыеОперации.Имя ПОДОБНО ""\%%"" СПЕЦСИМВОЛ ""\""
		|			ТОГДА 3
		|		КОГДА КлючевыеОперации.Имя ПОДОБНО ""%\%"" СПЕЦСИМВОЛ ""\""
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ");
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Имя", ИмяКлючевойОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ответственный;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Определить доступно ли текущему пользователю управление ключевыми операциями.
// Под управлением понимается возможность изменения целевого времени, важности и выгрузки данных.
// 
// Возвращаемое значение:
//  Булево - Истина - управление доступно;
//         - Ложь - управление недоступно.
//
Функция УправлениеДоступно() Экспорт
	
	Возврат РольДоступна(Метаданные.Роли.ПолныеПрава)
	    Или РольДоступна(Метаданные.Роли.УправлениеКлючевымиОперациями);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСКонфигуратором

Функция ЗапуститьКонфигуратор(СтрокаЗапуска, ИмяСобытия, ИмяФайлаЖурнала)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ШаблонИмениСобытияНачала = НСтр("ru = 'Ключевые операции. %1. Начало запуска конфигуратора'", КодЯзыка);
	ИмяСобытияНачала = СтрШаблон(ШаблонИмениСобытияНачала, ИмяСобытия);
	ЗаписьЖурналаРегистрации(ИмяСобытияНачала, УровеньЖурналаРегистрации.Информация,,, СтрокаЗапуска);
	
	КодВозврата = Неопределено;
	УдалитьФайлы(ИмяФайлаЖурнала);
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	ФайлЖурнала = Новый Файл(ИмяФайлаЖурнала);
	
	Если ФайлЖурнала.Существует() Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаЖурнала);
		ТекстЖурнала = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
	Иначе
		Шаблон = НСтр("ru = 'Запуск конфигуратора завершился с кодом ""%1"".'");
		ТекстЖурнала = СтрШаблон(Шаблон, КодВозврата);
	КонецЕсли;
	
	ВыполненоУспешно = (КодВозврата = 0);
	ШаблонИмениСобытияЗавершения = НСтр("ru = 'Ключевые операции. %1. Завершение запуска конфигуратора'", КодЯзыка);
	ИмяСобытияЗавершения = СтрШаблон(ШаблонИмениСобытияЗавершения, ИмяСобытия);
	УровеньЖурнала = ?(ВыполненоУспешно, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка);
	ЗаписьЖурналаРегистрации(ИмяСобытияЗавершения, УровеньЖурнала,,, ТекстЖурнала);
	
	Если ВыполненоУспешно Тогда
		Возврат ВыполненоУспешно;
	Иначе
		ВызватьИсключение ТекстЖурнала;
	КонецЕсли;
	
КонецФункции

Функция СтрокаЗапускаКонфигуратора(Параметры)
	
	Шаблон =
		"""%(1)1cv8"" DESIGNER %2
		| /N ""%3"" /P ""%4""
		| /Out ""%5"" -NoTruncate
		| /WA- /DisableStartupDialogs /AllowExecuteScheduledJobs -Off";
	
	Возврат СтрШаблон(Шаблон,
		Параметры.КаталогИсполняемогоФайла,
		Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных,
		Параметры.ИмяПользователяИБДляЗагрузкиМетаданных,
		Параметры.ПарольПользователяИБДляЗагрузкиМетаданных,
		Параметры.ИмяФайлаЛогов);
	
КонецФункции

Функция СтрокаЗапускаКонфигуратораПодключитьКХранилищу(Параметры)
	
	Шаблон =
		"
		| /ConfigurationRepositoryF ""%1""
		| /ConfigurationRepositoryN ""%2""
		| /ConfigurationRepositoryP ""%3""";
	
	Возврат СтрШаблон(Шаблон,
		Параметры.КаталогХранилищаДляЗагрузкиМетаданных,
		Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных,
		Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	
КонецФункции

Функция СтрокаЗапускаКонфигуратораСоздатьИБ(Параметры)
	
	Шаблон =
		"""%(1)1cv8"" CREATEINFOBASE File=""%2""
		| /DumpResult ""%3""";
	
	Возврат СтрШаблон(Шаблон,
		Параметры.КаталогИсполняемогоФайла,
		Параметры.КаталогИБ,
		Параметры.ИмяФайлаЛогов);
	
КонецФункции

Функция СтрокаЗапускаКонфигуратораВыгрузитьКонфигурациюИзХранилища(Параметры)
	
	Шаблон =
		"
		| /ConfigurationRepositoryDumpCfg ""%1""
		| /DumpResult ""%2""";
	
	Возврат СтрШаблон(Шаблон,
		Параметры.ИмяФайлаКонфигурации,
		Параметры.ИмяФайлаЛогов);
	
КонецФункции

Функция СтрокаЗапускаКонфигуратораЗагрузитьКонфигурациюВИБ(Параметры)
	
	Шаблон =
		"
		| /LoadCfg ""%1""
		| /DumpResult ""%2""";
	
	Возврат СтрШаблон(Шаблон,
		Параметры.ИмяФайлаКонфигурации,
		Параметры.ИмяФайлаЛогов);
	
КонецФункции

Функция СтрокаЗапускаКонфигуратораВыгрузитьКонфигурациюИБВФайлы(Параметры)
	
	Шаблон =
		"
		| /DumpConfigToFiles ""%1"" -format Hierarchical
		| /DumpResult ""%2""";
	
	Возврат СтрШаблон(Шаблон,
		Параметры.КаталогВыгрузкиКонфигурации,
		Параметры.ИмяФайлаЛогов);
	
КонецФункции

Функция ФорматВыгрузкиФайловИерархический()
	
	Возврат "Иерархический";
	
КонецФункции

Функция ФорматВыгрузкиФайловПлоский()
	
	Возврат "Плоский";
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаКлючевыхОперацийПроекта

Процедура ЗагрузитьКлючевыеОперацииИзХранилища1СПредприятия(Проект, Параметры, АдресХранилища)
	
	ПрефиксКаталога = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла("p_" + СокрЛП(Проект.Код));
	СоздатьРабочийКаталогЗагрузкиИзХранилищаПроекта(Параметры, ПрефиксКаталога);
	
	Параметры.Вставить("КаталогИсполняемогоФайла", ОбщегоНазначенияСППР.КаталогИсполняемогоФайлаНаСервере());
	СтрокаСоединения = СтрШаблон("/F ""%1""", Параметры.КаталогИБ);
	Параметры.Вставить("СтрокаСоединенияИБДляЗагрузкиМетаданных", СтрокаСоединения);
	Параметры.Вставить("ФорматВыгрузкиФайлов", ФорматВыгрузкиФайловИерархический());
	
	Попытка
		Если СоздатьВременнуюФайловуюИБ(Параметры) Тогда
			Если ЗагрузитьКонфигурациюХранилищаВИБ(Параметры) Тогда
				Если ВыгрузитьКонфигурациюИБВФайлы(Параметры) Тогда
					НайденныеОперации = НайтиКлючевыеОперации(Параметры);
					ВсеОперации = СопоставитьКлючевыеОперации(НайденныеОперации, Параметры.Проект);
					ПоместитьВоВременноеХранилище(ВсеОперации, АдресХранилища);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьФайлы(Параметры.РабочийКаталог);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УдалитьФайлы(Параметры.РабочийКаталог);
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ИмяСобытия = НСтр("ru = 'Ключевые операции. Загрузить из хранилища проекта'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьКлючевыеОперацииИзХранилищаGit(Проект, Параметры, АдресХранилища)
	
	Попытка
		Результат = ОбщегоНазначенияСППР.ПолучитьФайлыИзGIT(Параметры);
		Если ЗначениеЗаполнено(Результат) И Результат <> "Already up to date." Тогда
			Возврат;
		КонецЕсли;
		
		КаталогВыгрузкиКонфигурации = СтрШаблон("%1%2%3src%3",
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогGitРепозитория),
			Проект.ПутьКПроектуВРепозитории,
			ПолучитьРазделительПути());
		Параметры.Вставить("КаталогВыгрузкиКонфигурации", КаталогВыгрузкиКонфигурации);
		Параметры.Вставить("ФорматВыгрузкиФайлов", ФорматВыгрузкиФайловИерархический());
		
		НайденныеОперации = НайтиКлючевыеОперации(Параметры);
		ВсеОперации = СопоставитьКлючевыеОперации(НайденныеОперации, Параметры.Проект);
		ПоместитьВоВременноеХранилище(ВсеОперации, АдресХранилища);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ИмяСобытия = НСтр("ru = 'Ключевые операции. Загрузить из хранилища проекта'", КодЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыПроекта(Параметры, Проект)
	
	Параметры.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных");
	Параметры.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных");
	Параметры.Вставить("КаталогХранилищаДляЗагрузкиМетаданных",
		Проект.ВеткаИмя);
	Параметры.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных",
		Проект.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	Параметры.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных",
		Проект.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	Параметры.Вставить("РежимРазработки", Проект.РежимРазработки);
	
КонецПроцедуры

Процедура СоздатьРабочийКаталогЗагрузкиИзХранилищаПроекта(Параметры, ПрефиксКаталога)
	
	Каталог = СтрШаблон("v8_%1_keyops_load", ПрефиксКаталога);
	РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
	               + ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог);
	
	КаталогИБ = РабочийКаталог + ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути("ib");
	СоздатьКаталог(КаталогИБ);
	УдалитьФайлы(КаталогИБ, "*.*");
	
	КаталогВыгрузкиКонфигурации = РабочийКаталог + ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути("config");
	СоздатьКаталог(КаталогВыгрузкиКонфигурации);
	УдалитьФайлы(КаталогВыгрузкиКонфигурации, "*.*");
	
	Параметры.Вставить("РабочийКаталог", РабочийКаталог);
	Параметры.Вставить("КаталогИБ", КаталогИБ);
	Параметры.Вставить("КаталогВыгрузкиКонфигурации", КаталогВыгрузкиКонфигурации);
	Параметры.Вставить("ИмяФайлаЛогов", РабочийКаталог + "Logs.txt");
	Параметры.Вставить("ИмяФайлаКонфигурации", РабочийКаталог + "1cv8_trunk.cf");
	
КонецПроцедуры

Процедура УдалитьНесохраняемыеКлючевыеОперации(ТаблицаОпераций)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ИмяСобытия = НСтр("ru = 'Ключевые операции. Неопознанные'", КодЯзыка);
	
	Для каждого Строка Из ТаблицаОпераций.НайтиСтроки(Новый Структура("Имя", "")) Цикл
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Предупреждение,
			Метаданные.Справочники.КлючевыеОперации,
			Строка.ОбъектМетаданных,
			Строка.ФрагментКода);
		ТаблицаОпераций.Удалить(Строка);
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаОпераций.НайтиСтроки(Новый Структура("Найденная", Ложь)) Цикл
		ТаблицаОпераций.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьКонфигурациюИБВФайлы(Параметры)
	
	ИмяФайлаЖурнала = Параметры.ИмяФайлаЛогов;
	ИмяСобытия = НСтр("ru = 'Выгрузить конфигурацию ИБ в файлы'");
	СтрокаВыгрузкиКонфигурации = СтрокаЗапускаКонфигуратора(Параметры)
	                             + СтрокаЗапускаКонфигуратораВыгрузитьКонфигурациюИБВФайлы(Параметры);
	
	Возврат ЗапуститьКонфигуратор(СтрокаВыгрузкиКонфигурации, ИмяСобытия, ИмяФайлаЖурнала);
	
КонецФункции

Функция ЗагрузитьКонфигурациюХранилищаВИБ(Параметры)
	
	ИмяФайлаЖурнала = Параметры.ИмяФайлаЛогов;
	ИмяСобытия = НСтр("ru = 'Сохранить конфигурацию хранилища в файл'");
	СтрокаЗапускаКонфигуратора = СтрокаЗапускаКонфигуратора(Параметры);
	СтрокаСохраненияКонфигурации = СтрокаЗапускаКонфигуратора
	                             + СтрокаЗапускаКонфигуратораПодключитьКХранилищу(Параметры)
	                             + СтрокаЗапускаКонфигуратораВыгрузитьКонфигурациюИзХранилища(Параметры);
	
	Если ЗапуститьКонфигуратор(СтрокаСохраненияКонфигурации, ИмяСобытия, ИмяФайлаЖурнала) Тогда
		ИмяФайлаЖурнала = Параметры.ИмяФайлаЛогов;
		ИмяСобытия = НСтр("ru = 'Загрузить конфигурацию хранилища в ИБ'");
		СтрокаЗагрузкиКонфигурации = СтрокаЗапускаКонфигуратора
		                           + СтрокаЗапускаКонфигуратораЗагрузитьКонфигурациюВИБ(Параметры);
		
		Если ЗапуститьКонфигуратор(СтрокаЗагрузкиКонфигурации, ИмяСобытия, ИмяФайлаЖурнала) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИменаВидовМетаданных(ФорматВыгрузки)
	
	Если ФорматВыгрузки = ФорматВыгрузкиФайловИерархический() Тогда
		Возврат ИменаВидовМетаданныхИерархические();
	ИначеЕсли ФорматВыгрузки = ФорматВыгрузкиФайловПлоский() Тогда
		Возврат ИменаВидовМетаданныхПлоские();
	КонецЕсли;
	
КонецФункции

Функция ИменаВидовМетаданныхИерархические()
	
	Каталоги = Новый Соответствие;
	
	Каталоги["БизнесПроцесс"] = "BusinessProcesses";
	Каталоги["ВнешнийИсточникДанных"] = "ExternalDataSources";
	Каталоги["Документ"] = "Documents";
	Каталоги["ЖурналДокументов"] = "DocumentJournals";
	Каталоги["Задача"] = "Tasks";
	Каталоги["Константа"] = "Constants";
	Каталоги["КритерийОтбора"] = "FilterCriteria";
	Каталоги["Обработка"] = "DataProcessors";
	Каталоги["ОбщаяКоманда"] = "CommonCommands";
	Каталоги["ОбщаяФорма"] = "CommonForms";
	Каталоги["ОбщийМодуль"] = "CommonModules";
	Каталоги["Отчет"] = "Reports";
	Каталоги["Перечисление"] = "Enums";
	Каталоги["ПланВидовРасчета"] = "ChartsOfCalculationTypes";
	Каталоги["ПланВидовХарактеристик"] = "ChartsOfCharacteristicTypes";
	Каталоги["ПланОбмена"] = "ExchangePlans";
	Каталоги["ПланСчетов"] = "ChartsOfAccounts";
	Каталоги["Последовательность"] = "Sequences";
	Каталоги["РегистрБухгалтерии"] = "AccountingRegisters";
	Каталоги["РегистрНакопления"] = "AccumulationRegisters";
	Каталоги["РегистрРасчета"] = "CalculationRegisters";
	Каталоги["РегистрСведений"] = "InformationRegisters";
	Каталоги["Справочник"] = "Catalogs";
	Каталоги["ХранилищеНастроек"] = "SettingsStorages";
	Каталоги["HTTPСервис"] = "HTTPServices";
	Каталоги["WebСервис"] = "WebServices";
	
	Возврат Каталоги;
	
КонецФункции

Функция ИменаВидовМетаданныхПлоские()
	
	Каталоги = Новый Соответствие;
	
	Каталоги["БизнесПроцесс"] = "BusinessProcess";
	Каталоги["ВнешнийИсточникДанных"] = "ExternalDataSource";
	Каталоги["Документ"] = "Document";
	Каталоги["ЖурналДокументов"] = "DocumentJournal";
	Каталоги["Задача"] = "Task";
	Каталоги["Константа"] = "Constant";
	Каталоги["КритерийОтбора"] = "FilterCriterion";
	Каталоги["Обработка"] = "DataProcessor";
	Каталоги["ОбщаяКоманда"] = "CommonCommand";
	Каталоги["ОбщаяФорма"] = "CommonForm";
	Каталоги["ОбщийМодуль"] = "CommonModule";
	Каталоги["Отчет"] = "Report";
	Каталоги["Перечисление"] = "Enum";
	Каталоги["ПланВидовРасчета"] = "ChartOfCalculationTypes";
	Каталоги["ПланВидовХарактеристик"] = "ChartOfCharacteristicTypes";
	Каталоги["ПланОбмена"] = "ExchangePlan";
	Каталоги["ПланСчетов"] = "ChartOfAccounts";
	Каталоги["Последовательность"] = "Sequence";
	Каталоги["РегистрБухгалтерии"] = "AccountingRegister";
	Каталоги["РегистрНакопления"] = "AccumulationRegister";
	Каталоги["РегистрРасчета"] = "CalculationRegister";
	Каталоги["РегистрСведений"] = "InformationRegister";
	Каталоги["Справочник"] = "Catalog";
	Каталоги["ХранилищеНастроек"] = "SettingsStorage";
	Каталоги["HTTPСервис"] = "HTTPService";
	Каталоги["WebСервис"] = "WebService";
	
	Возврат Каталоги;
	
КонецФункции

Функция ИмяОперацииИзПараметра(Текст, ТекстВРег, Позиция, ПараметрОперации, Настройки)
	
	Если ВКавычках(ПараметрОперации) Тогда
		Возврат Сред(ПараметрОперации, 2, СтрДлина(ПараметрОперации) - 2);
	ИначеЕсли ЭтоИдентификатор(ПараметрОперации) Тогда
		ТекущаяПозиция = СтрНайти(Текст, ПараметрОперации, НаправлениеПоиска.СКонца, Позиция);
		
		Пока ТекущаяПозиция <> 0 Цикл
			НачалоБлока = НайтиБлижайшуюСтроку(ТекстВРег, ТекущаяПозиция, Настройки.ГраницыНачалаВыражений);
			КонецБлока = НайтиБлижайшуюСтроку(ТекстВРег, ТекущаяПозиция, Настройки.ГраницыКонцаВыражений, Ложь);
			Выражение = Сред(Текст, НачалоБлока, КонецБлока - НачалоБлока + 1);
			Выражение = УдалитьКомментарии(Выражение);
			СоставНачалаВыражения = РазделитьСтроку(Выражение, "=", Ложь, Истина);
			
			Если СоставНачалаВыражения.Количество() = 2 Тогда // Если это установка значения переменной
				ВыражениеЗначения = СоставНачалаВыражения[1];
				Если Лев(ВыражениеЗначения, 1) = """" Тогда // Если присваивается строка
					ЗакрывающаясяКавычка = СтрНайти(ВыражениеЗначения, """",, 2);
					
					Если ЗакрывающаясяКавычка <>  0 Тогда
						Возврат Сред(ВыражениеЗначения, 2, ЗакрывающаясяКавычка - 2);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяПозиция = СтрНайти(Текст, ПараметрОперации, НаправлениеПоиска.СКонца, ТекущаяПозиция - 1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиЗамерыВФайле(ФайлСЗамерами, Настройки)
	
	Замеры = Новый Массив;
	Текст = ФайлСЗамерами.Текст;
	ТекстВРег = ФайлСЗамерами.ТекстВРег;
	ДлинаТекста = СтрДлина(Текст);
	
	Для каждого СтрокаПоиска Из Настройки.СтрокиНачалаЗамеров Цикл
		Позиция = 1;
		НайденнаяПозиция = СтрНайти(ТекстВРег, СтрокаПоиска,, Позиция);
		
		Пока НайденнаяПозиция <> 0 Цикл
			ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
			Описание = ОписаниеЗамера(НайденнаяПозиция, Текст, ТекстВРег, ДлинаСтрокиПоиска, Настройки);
			
			Если Описание <> Неопределено И Не ПустаяСтрока(Описание.Имя) Тогда
				Замеры.Добавить(Описание);
			КонецЕсли;
			
			Позиция = НайденнаяПозиция + ДлинаСтрокиПоиска;
			НайденнаяПозиция = СтрНайти(ТекстВРег, СтрокаПоиска,, Позиция);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Замеры;
	
КонецФункции

Функция НайтиКлючевыеОперации(Параметры)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ИмяСобытия = НСтр("ru = 'Ключевые операции. Начало поиска ключевых операций'", КодЯзыка);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация);
	
	Результат = ТаблицаЗначенийРезультатаПоискаКлючевыхОпераций();
	ИндексНайденнойКО = 0;
	
	Настройки = Настройки();
	ИменаВидов = ИменаВидовМетаданных(Параметры.ФорматВыгрузкиФайлов);
	Разделитель = ПолучитьРазделительПути();
	КаталогВыгрузкиКонфигурации = Параметры.КаталогВыгрузкиКонфигурации;
	
	Запрос = Новый Запрос(ТекстЗапросаОбъектыМетаданныхПроекта());
	Запрос.УстановитьПараметр("Проект", Параметры.Проект);
	Запрос.УстановитьПараметр("ОбъектыМетаданныхБезМодулей", ОбъектыМетаданныхБезМодулей());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПараметрыПоиска = ПараметрыПоискаФайлов(КаталогВыгрузкиКонфигурации,
			ИменаВидов[Выборка.Вид],
			Разделитель,
			Выборка.Имя,
			Параметры.ФорматВыгрузкиФайлов,
			Параметры.РежимРазработки);
		ФайлыСЗамерами = НайтиФайлыСЗамерами(ПараметрыПоиска, Настройки);
		
		Если ФайлыСЗамерами.Количество() > 0 Тогда
			Для каждого ФайлСЗамерами Из ФайлыСЗамерами Цикл
				Замеры = НайтиЗамерыВФайле(ФайлСЗамерами, Настройки);
				
				Для каждого Замер Из Замеры Цикл
					СтрокаРезультата = Результат.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРезультата, Замер);
					СтрокаРезультата.ОбъектМетаданных = Выборка.Ссылка;
					СтрокаРезультата.Индекс = ИндексНайденнойКО;
					СтрокаРезультата.Расположение = ФайлСЗамерами.Расположение;
					ИндексНайденнойКО = ИндексНайденнойКО + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ИмяСобытия = НСтр("ru = 'Ключевые операции. Завершение поиска ключевых операций'", КодЯзыка);
	ТекстКомментария = СтрШаблон(НСтр("ru = 'Найдено %1 ключевых операций.'"), Результат.Количество());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,, ТекстКомментария);
	
	Возврат Результат;
	
КонецФункции

Функция НайтиФайлыСЗамерами(ПараметрыПоиска, Настройки)
	
	ФайлыМодулей = НайтиФайлы(ПараметрыПоиска.Каталог, ПараметрыПоиска.Маска, Истина);
	ФайлыСЗамерами = Новый Массив;
	
	Для каждого ФайлМодуля Из ФайлыМодулей Цикл
		Текст = ПрочитатьИзФайла(ФайлМодуля.ПолноеИмя, ПараметрыПоиска.КодировкаТекста);
		ТекстВРег = ВРег(Текст);
		
		Для каждого СтрокаПоиска Из Настройки.СтрокиНачалаЗамеров Цикл
			Если СтрНайти(ТекстВРег, СтрокаПоиска) > 0 Тогда
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("ПолноеИмя", ФайлМодуля.ПолноеИмя);
				ОписаниеФайла.Вставить("Расположение", Сред(ФайлМодуля.ПолноеИмя, СтрДлина(ПараметрыПоиска.Каталог) + 2));
				ОписаниеФайла.Вставить("Текст", Текст);
				ОписаниеФайла.Вставить("ТекстВРег", ТекстВРег);
				ФайлыСЗамерами.Добавить(ОписаниеФайла);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ФайлыСЗамерами;
	
КонецФункции

Функция ОбщийМодульОценкаПроизводительностиКлиент()
	
	Возврат "ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ";
	
КонецФункции

Функция ОбъектыМетаданныхБезМодулей()
	
	Объекты = Новый Массив;
	
	Объекты.Добавить("ГруппаКоманд");
	Объекты.Добавить("Нумератор");
	Объекты.Добавить("ОбщаяКартинка");
	Объекты.Добавить("ОбщийМакет");
	Объекты.Добавить("ОбщийРеквизит");
	Объекты.Добавить("ОпределяемыйТип");
	Объекты.Добавить("ПакетXDTO");
	Объекты.Добавить("ПараметрСеанса");
	Объекты.Добавить("ПараметрФункциональнойОпции");
	Объекты.Добавить("ПодпискаНаСобытие");
	Объекты.Добавить("РегламентноеЗадание");
	Объекты.Добавить("Роль");
	Объекты.Добавить("Стиль");
	Объекты.Добавить("ФункциональнаяОпция");
	Объекты.Добавить("ЭлементСтиля");
	Объекты.Добавить("Язык");
	Объекты.Добавить("WSСсылка");
	
	Возврат Объекты;
	
КонецФункции

Функция ОписаниеЗамера(Знач Позиция, Текст, ТекстВРег, СтрПоискаДлина, Настройки)
	
	Код = ОписаниеФрагментаКода(Позиция, Текст, ТекстВРег);
	ОписаниеНачалаЗамера = ОписаниеВыражения(Код.Текст, Код.ТекстВРег, Код.Позиция, СтрПоискаДлина, Настройки);
	
	Если ОписаниеНачалаЗамера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Описание = Новый Структура("ВидОперации, Имя, ФрагментКода");
	Описание.ФрагментКода = Код.Текст;
	Описание.ВидОперации = ?(ОписаниеНачалаЗамера.ИмяМодуля = ОбщийМодульОценкаПроизводительностиКлиент(),
		Перечисления.ВидыКлючевыхОпераций.Интерактивная,
		Перечисления.ВидыКлючевыхОпераций.Длительная);
	
	ИндексОперации = ОписаниеНачалаЗамера.ИндексыПараметров.ИндексОперации;
	ИндексСвязующегоПараметра = ОписаниеНачалаЗамера.ИндексыПараметров.ИндексСвязующегоПараметра;
	
	Если ИндексОперации <> Неопределено Тогда // Начало замера содержит имя операции
		Если ИндексОперации < ОписаниеНачалаЗамера.ПараметрыВызова.Количество() Тогда
			ПараметрОперации = ОписаниеНачалаЗамера.ПараметрыВызова[ИндексОперации];
			Описание.Имя = ИмяОперацииИзПараметра(Код.Текст, Код.ТекстВРег, Код.Позиция, ПараметрОперации, Настройки);
			Возврат Описание;
		КонецЕсли;
	ИначеЕсли Не ПустаяСтрока(ОписаниеНачалаЗамера.ИмяПеременной) Тогда // Имя операции в вызове завершения замера
		Для каждого СтрокаЗавершенияЗамера Из Настройки.СтрокиЗавершенияЗамеров Цикл
			ПозицияЗавершения = Код.Позиция;
			НайденнаяПозиция = СтрНайти(Код.ТекстВРег, СтрокаЗавершенияЗамера,, ПозицияЗавершения);
			
			Пока НайденнаяПозиция <> 0 Цикл
				ДлинаСтрокиПоиска = СтрДлина(СтрокаЗавершенияЗамера);
				ОписаниеКонцаЗамера = ОписаниеВыражения(Код.Текст, Код.ТекстВРег, НайденнаяПозиция, ДлинаСтрокиПоиска, Настройки);
				
				Если ОписаниеКонцаЗамера = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				ИндексСвязующегоПараметра = ОписаниеКонцаЗамера.ИндексыПараметров.ИндексСвязующегоПараметра;
				СвязующийПараметр = ОписаниеКонцаЗамера.ПараметрыВызова[ИндексСвязующегоПараметра];
				
				Если ВРег(СвязующийПараметр) = ВРег(ОписаниеНачалаЗамера.ИмяПеременной) Тогда
					ИндексОперации = ОписаниеКонцаЗамера.ИндексыПараметров.ИндексОперации;
					
					Если ИндексОперации < ОписаниеКонцаЗамера.ПараметрыВызова.Количество() Тогда
						ПараметрОперации = ОписаниеКонцаЗамера.ПараметрыВызова[ИндексОперации];
						Описание.Имя = ИмяОперацииИзПараметра(Код.Текст, Код.ТекстВРег, НайденнаяПозиция, ПараметрОперации, Настройки);
						Возврат Описание;
					КонецЕсли;
				КонецЕсли;
				
				ПозицияЗавершения = НайденнаяПозиция + ДлинаСтрокиПоиска;
				НайденнаяПозиция = СтрНайти(Код.ТекстВРег, СтрокаЗавершенияЗамера,, ПозицияЗавершения);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОписаниеВыражения(Текст, ТекстВРег, Позиция, СтрПоискаДлина, Настройки)
	
	Описание = Новый Структура;
	
	НачалоБлока = НайтиБлижайшуюСтроку(ТекстВРег, Позиция, Настройки.ГраницыНачалаВыражений);
	КонецБлока = НайтиБлижайшуюСтроку(ТекстВРег, Позиция, Настройки.ГраницыКонцаВыражений, Ложь);
	
	ПараметрыВызова = ПараметрыВызова(Текст, Позиция + СтрПоискаДлина, КонецБлока);
	КоличествоПараметров = ПараметрыВызова.Количество();
	СтрокаПоиска = Сред(ТекстВРег, Позиция, СтрПоискаДлина);
	ИндексыПараметров = Настройки.ИндексыПараметровОпераций[СтрокаПоиска];
	
	Выражение = Сред(ТекстВРег, НачалоБлока, Позиция - НачалоБлока + СтрПоискаДлина);
	Выражение = УдалитьКомментарии(Выражение);
	
	СоставВыражения = РазделитьСтроку(Выражение, "=", Ложь, Истина);
	СоставВыраженияКоличество = СоставВыражения.Количество();
	
	Если СоставВыраженияКоличество = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПеременной = ?(СоставВыраженияКоличество = 1, "", СоставВыражения[0]);
	ИмяМодуля = ?(СоставВыраженияКоличество = 1, СоставВыражения[0], СоставВыражения[1]);
	ИмяМодуля = СокрЛП(СтрРазделить(ИмяМодуля, ".")[0]);
	
	Описание.Вставить("ПараметрыВызова", ПараметрыВызова);
	Описание.Вставить("ИндексыПараметров", ИндексыПараметров);
	Описание.Вставить("ИмяПеременной", ИмяПеременной);
	Описание.Вставить("ИмяМодуля", ИмяМодуля);
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеФрагментаКода(Позиция, Текст, ТекстВРег)
	
	ПозицияПроцедуры = СтрНайти(ТекстВРег, Символы.ПС + "ПРОЦЕДУРА ", НаправлениеПоиска.СКонца, Позиция);
	ПозицияФункции = СтрНайти(ТекстВРег, Символы.ПС + "ФУНКЦИЯ ", НаправлениеПоиска.СКонца, Позиция);
	ПозицияНачала = Макс(ПозицияПроцедуры, ПозицияФункции) + 1;
	КонецФрагмента = Символы.ПС + ?(ПозицияПроцедуры > ПозицияФункции, "КОНЕЦПРОЦЕДУРЫ", "КОНЕЦФУНКЦИИ");
	ПозицияКонца = СтрНайти(ТекстВРег, КонецФрагмента,, Позиция) + СтрДлина(КонецФрагмента);
	
	Описание = Новый Структура;
	Описание.Вставить("Текст", Сред(Текст, ПозицияНачала, ПозицияКонца - ПозицияНачала));
	Описание.Вставить("ТекстВРег", ВРег(Описание.Текст));
	Описание.Вставить("Позиция", Позиция - ПозицияНачала + 1);
	
	Возврат Описание;
	
КонецФункции

Функция ПараметрыВызова(Текст, НачалоПараметров, КонецВыражения)
	
	СтрокаПараметров = Сред(Текст, НачалоПараметров, КонецВыражения - НачалоПараметров);
	СтрокаПараметров = УдалитьКомментарии(СтрокаПараметров);
	КонецПараметров = СтрНайти(СтрокаПараметров, ")", НаправлениеПоиска.СКонца);
	СтрокаПараметров = Лев(СтрокаПараметров, КонецПараметров - 1);
	Параметры = СтрРазделить(СтрокаПараметров, ",");
	
	Если Параметры.Количество() = 1 Тогда
		Если ПустаяСтрока(Параметры[0]) Тогда
			Параметры.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 0 По Параметры.ВГраница() Цикл
		Параметры[Индекс] = СокрЛП(Параметры[Индекс]);
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыПоискаФайлов(КаталогВыгрузки, ИмяВида, Разделитель, ИмяОбъекта, ФорматВыгрузки, РежимРазработки)
	
	Параметры = Новый Структура;
	Параметры.Вставить("КодировкаТекста");
	Параметры.Вставить("Каталог", СтрШаблон("%1%2%3%4", КаталогВыгрузки, ИмяВида, Разделитель, ИмяОбъекта));
	
	Если ФорматВыгрузки = ФорматВыгрузкиФайловИерархический() Тогда
		Параметры.Вставить("Маска", "*.bsl");
	ИначеЕсли ФорматВыгрузки = ФорматВыгрузкиФайловПлоский() Тогда
		Параметры.Вставить("Маска", "*.txt");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Неизвестный формат выгрузки файлов конфигурации ""%1""'");
		ВызватьИсключение СтрШаблон(ШаблонСообщения, ФорматВыгрузки);
	КонецЕсли;
	
	Если РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
		Параметры.КодировкаТекста = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПроверитьПараметрыЗагрузкиКлючевыхОпераций(Параметры)
	
	Перем ТекстСообщения;
	
	Если Не Параметры.Свойство("Проект") Или Не ТипЗнч(Параметры.Проект) = Тип("СправочникСсылка.Проекты") Тогда
		ТекстСообщения = НСтр("ru = 'Укажите проект, из которого выполняется загрузка ключевых операций.'");
	Иначе
		Если Параметры.РежимРазработки <> Перечисления.РежимРазработки.ВGitРепозитории Тогда
			КаталогХранилища = "КаталогХранилищаДляЗагрузкиМетаданных";
			Если Не Параметры.Свойство(КаталогХранилища) Или Не ЗначениеЗаполнено(Параметры[КаталогХранилища]) Тогда
				ШаблонСообщения = НСтр("ru = 'Укажите каталог хранилища для загрузки метаданных в ветке проекта ""%1""'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Параметры.Проект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ключевые операции. Загрузка из хранилища проекта'", КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция СоздатьВременнуюФайловуюИБ(Параметры)
	
	ИмяФайлаЖурнала = Параметры.ИмяФайлаЛогов;
	ИмяСобытия = НСтр("ru = 'Создать ИБ для загрузки метаданных'");
	СтрокаСозданияИБ = СтрокаЗапускаКонфигуратораСоздатьИБ(Параметры);
	
	Возврат ЗапуститьКонфигуратор(СтрокаСозданияИБ, ИмяСобытия, ИмяФайлаЖурнала);
	
КонецФункции

Функция СопоставитьКлючевыеОперации(Загруженные, Проект)
	
	КодЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
	ИмяСобытия = НСтр("ru = 'Ключевые операции. Начало сопоставления ключевых операций'", КодЯзыка);
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация);
	
	Запрос = Новый Запрос(ТекстЗапросаСоответствиеКлючевыхОпераций());
	Запрос.УстановитьПараметр("Загруженные", Загруженные.Скопировать(, "Индекс, Имя, ОбъектМетаданных, ВидОперации"));
	Запрос.УстановитьПараметр("Проект", Проект);
	Сопоставленные = Запрос.Выполнить().Выгрузить();
	Сопоставленные.Колонки.Добавить("ФрагментКода", Новый ОписаниеТипов("Строка"));
	Сопоставленные.Колонки.Добавить("Расположение", Новый ОписаниеТипов("Строка"));
	Загруженные.Индексы.Добавить("Индекс");
	
	Для каждого Строка Из Сопоставленные Цикл
		НайденнаяСтрока = Загруженные.Найти(Строка.Индекс, "Индекс");
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Строка, НайденнаяСтрока, "ФрагментКода, Расположение");
		КонецЕсли;
	КонецЦикла;
	
	ИмяСобытия = НСтр("ru = 'Ключевые операции. Завершение сопоставления ключевых операций'", КодЯзыка);
	ШаблонСообщения = НСтр("ru = 'После сопоставления получилось %1 ключевых операций.'");
	ТекстКомментария = СтрШаблон(ШаблонСообщения, Сопоставленные.Количество());
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация,,, ТекстКомментария);
	
	Возврат Сопоставленные;
	
КонецФункции

Функция ТаблицаЗначенийРезультатаПоискаКлючевыхОпераций()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Индекс", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1000)));
	Результат.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКлючевыхОпераций"));
	Результат.Колонки.Добавить("ОбъектМетаданных", Новый ОписаниеТипов("СправочникСсылка.ОбъектыМетаданных"));
	Результат.Колонки.Добавить("ФрагментКода", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Расположение", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Настройки

Функция ГраницыКонцаВыражений()
	
	Границы = Новый Массив;
	
	Границы.Добавить(";");
	Границы.Добавить("ИНАЧЕ");
	Границы.Добавить("ИНАЧЕЕСЛИ");
	Границы.Добавить("КОНЕЦЕСЛИ");
	Границы.Добавить("КОНЕЦЦИКЛА");
	Границы.Добавить("КОНЕЦПРОЦЕДУРЫ");
	Границы.Добавить("КОНЕЦФУНКЦИИ");
	Границы.Добавить("ИСКЛЮЧЕНИЕ");
	Границы.Добавить("КОНЕЦПОПЫТКИ");
	
	Возврат Границы;
	
КонецФункции

Функция ГраницыНачалаВыражений()
	
	Границы = Новый Массив;
	
	Границы.Добавить(")");
	Границы.Добавить(";");
	Границы.Добавить("ЭКСПОРТ");
	Границы.Добавить("ТОГДА");
	Границы.Добавить("ИНАЧЕ");
	Границы.Добавить("ЦИКЛ");
	Границы.Добавить("ПОПЫТКА");
	Границы.Добавить("ИСКЛЮЧЕНИЕ");
	
	Возврат Границы;
	
КонецФункции

Функция ИндексыПараметровОпераций()
	
	Индексы = Новый Соответствие;
	
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.ЗАКОНЧИТЬЗАМЕРВРЕМЕНИ("] = НовоеОписаниеПараметров(0, 1);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.ЗАКОНЧИТЬЗАМЕРВРЕМЕНИТЕХНОЛОГИЧЕСКИЙ("] = НовоеОписаниеПараметров(0, 1);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.ЗАКОНЧИТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ("] = НовоеОписаниеПараметров(, 0);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.НАЧАТЬЗАМЕРВРЕМЕНИ("] = НовоеОписаниеПараметров();
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.НАЧАТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ("] = НовоеОписаниеПараметров(0);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.ЗАВЕРШИТЬЗАМЕРВРЕМЕНИ("] = НовоеОписаниеПараметров(, 0);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.ЗАКОНЧИТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ("] = НовоеОписаниеПараметров(, 0);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.ЗАМЕРВРЕМЕНИ("] = НовоеОписаниеПараметров(0);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.НАЧАТЬЗАМЕРВРЕМЕНИ("] = НовоеОписаниеПараметров(1);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.НАЧАТЬЗАМЕРВРЕМЕНИТЕХНОЛОГИЧЕСКИЙ("] = НовоеОписаниеПараметров(1);
	Индексы["ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.НАЧАТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ("] = НовоеОписаниеПараметров(0);
	
	Возврат Индексы;
	
КонецФункции

Функция Настройки()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ГраницыКонцаВыражений", ГраницыКонцаВыражений());
	Настройки.Вставить("ГраницыНачалаВыражений", ГраницыНачалаВыражений());
	Настройки.Вставить("ИндексыПараметровОпераций", ИндексыПараметровОпераций());
	Настройки.Вставить("СтрокиЗавершенияЗамеров", СтрокиЗавершенияЗамеров());
	Настройки.Вставить("СтрокиНачалаЗамеров", СтрокиНачалаЗамеров());
	
	Возврат Настройки;
	
КонецФункции

Функция НовоеОписаниеПараметров(ИндексОперации = Неопределено, ИндексСвязующегоПараметра = Неопределено)
	
	ОписаниеПараметров = Новый Структура;
	ОписаниеПараметров.Вставить("ИндексОперации", ИндексОперации);
	ОписаниеПараметров.Вставить("ИндексСвязующегоПараметра", ИндексСвязующегоПараметра);
	
	Возврат ОписаниеПараметров;
	
КонецФункции

Функция СтрокиЗавершенияЗамеров()
	
	Границы = Новый Массив;
	
	Границы.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.ЗАКОНЧИТЬЗАМЕРВРЕМЕНИ(");
	Границы.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.ЗАКОНЧИТЬЗАМЕРВРЕМЕНИТЕХНОЛОГИЧЕСКИЙ(");
	Границы.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.ЗАКОНЧИТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ(");
	Границы.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.ЗАВЕРШИТЬЗАМЕРВРЕМЕНИ(");
	Границы.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.ЗАКОНЧИТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ(");
	
	Возврат Границы;
	
КонецФункции

Функция СтрокиНачалаЗамеров()
	
	МетодыЗамеров = Новый Массив;
	МетодыЗамеров.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.НАЧАТЬЗАМЕРВРЕМЕНИ(");
	МетодыЗамеров.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИ.НАЧАТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ(");
	МетодыЗамеров.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.ЗАМЕРВРЕМЕНИ(");
	МетодыЗамеров.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.НАЧАТЬЗАМЕРВРЕМЕНИ(");
	МетодыЗамеров.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.НАЧАТЬЗАМЕРВРЕМЕНИТЕХНОЛОГИЧЕСКИЙ(");
	МетодыЗамеров.Добавить("ОЦЕНКАПРОИЗВОДИТЕЛЬНОСТИКЛИЕНТ.НАЧАТЬЗАМЕРДЛИТЕЛЬНОЙОПЕРАЦИИ(");
	
	Возврат МетодыЗамеров;
	
КонецФункции

#КонецОбласти

#Область Строки

Функция ВКавычках(Строка)
	
	Возврат СтрЧислоВхождений(Строка, """") = 2 И Лев(Строка, 1) = """" И Прав(Строка, 1) = """";
	
КонецФункции

Функция НайтиБлижайшуюСтроку(Текст, Позиция, Строки, Слева = Истина)
	
	Направление = ?(Слева, НаправлениеПоиска.СКонца, НаправлениеПоиска.СНачала);
	ТекущаяПозиция = ?(Слева, 0, СтрДлина(Текст));
	ТекущийТекстПоиска = "";
	
	Для каждого Строка Из Строки Цикл
		НайденнаяПозиция = СтрНайти(Текст, Строка, Направление, Позиция);
		
		Если НайденнаяПозиция <> 0 Тогда
			Если Слева И НайденнаяПозиция > ТекущаяПозиция Или Не Слева И НайденнаяПозиция < ТекущаяПозиция Тогда
				ДлинаСтроки = СтрДлина(Строка);
				
				Если ДлинаСтроки > 1 Тогда
					СимволПеред = Сред(Текст, НайденнаяПозиция - 1, 1);
					СимволПосле = Сред(Текст, НайденнаяПозиция + ДлинаСтроки, 1);
					
					Если Не ЭтоПробел(СимволПеред) Или Не ЭтоПробел(СимволПосле) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ТекущаяПозиция = НайденнаяПозиция;
				ТекущийТекстПоиска = Строка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Слева Тогда
		Возврат ТекущаяПозиция + СтрДлина(ТекущийТекстПоиска);
	Иначе
		Возврат ТекущаяПозиция;
	КонецЕсли;
	
КонецФункции

Функция НайтиКонецСтроки(Текст, Позиция)
	
	Возврат СтрНайти(Текст, Символы.ПС,, Позиция);
	
КонецФункции

Функция РазделитьСтроку(Строка, Разделитель, ВключатьПустые = Истина, Сокращать = Ложь)
	
	Разделенные = СтрРазделить(Строка, Разделитель, ВключатьПустые);
	
	Если Сокращать Тогда
		Для Индекс = 0 По Разделенные.ВГраница() Цикл
			Разделенные[Индекс] = СокрЛП(Разделенные[Индекс]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Разделенные;
	
КонецФункции

Функция УдалитьКомментарии(Текст, Позиция = Неопределено)
	
	ПозицияКомментария = СтрНайти(Текст, "//");
	
	Если ПозицияКомментария <> 0 Тогда
		ПозицияКонцаСтроки = НайтиКонецСтроки(Текст, ПозицияКомментария);
		
		Если ПозицияКонцаСтроки = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		ДлинаКомментария = ПозицияКонцаСтроки - ПозицияКомментария;
		ДлинаТекста = СтрДлина(Текст);
		ЛевыйТекст = Лев(Текст, ПозицияКомментария - 1);
		ПравыйТекст = Прав(Текст, ДлинаТекста - ПозицияКонцаСтроки);
		
		Если Позиция <> Неопределено И ПозицияКомментария < Позиция Тогда
			Позиция = Позиция - ДлинаКомментария - 1;
		КонецЕсли;
		
		Возврат УдалитьКомментарии(ЛевыйТекст + ПравыйТекст, Позиция)
	Иначе
		Возврат Текст;
	КонецЕсли;
	
КонецФункции

Функция ЭтоИдентификатор(Строка)
	
	Буквы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Цифры = "1234567890";
	
	Если Строка = "" Или СтрНайти(Буквы + "_", ВРег(Лев(Строка, 1))) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрРазделить(ВРег(Строка), Буквы + Цифры + "_", Ложь).Количество() = 0;
	
КонецФункции

Функция ЭтоПробел(Символ)
	
	Возврат Символ = "	" Или Символ = " " Или Символ = Символы.ПС;
	
КонецФункции

#КонецОбласти

#Область Запросы

Процедура УстановитьПараметрЗапросаПоПроекту(Запрос, Проект)
	
	Если ЗначениеЗаполнено(Проект) Тогда
		Запрос.УстановитьПараметр("Проект", Проект);
	Иначе
		Запрос.Текст = УдалитьУсловиеПоПроекту(Запрос.Текст);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаКлючевыхОперацийДляЦКК()
	
	Возврат
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА КлючевыеОперации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКлючевыхОпераций.Длительная)
		|			ТОГДА КлючевыеОперации.Имя + "".Удельный""
		|		ИНАЧЕ КлючевыеОперации.Имя
		|	КОНЕЦ КАК Имя,
		|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя,
		|	КлючевыеОперации.Важность КАК Важность,
		|	КлючевыеОперации.Владелец.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|ГДЕ
		|	НЕ КлючевыеОперации.ПометкаУдаления
		|	И КлючевыеОперации.Владелец.Владелец = &Проект
		|	И (КлючевыеОперации.ВидОперации = &ВидОперации
		|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКлючевыхОпераций.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Имя";
	
КонецФункции

Функция ТекстЗапросаКлючевыхОперацийДляЦККПоПодсистеме()
	
	Возврат
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА КлючевыеОперации.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКлючевыхОпераций.Длительная)
		|			ТОГДА КлючевыеОперации.Имя + "".Удельный""
		|		ИНАЧЕ КлючевыеОперации.Имя
		|	КОНЕЦ КАК Имя,
		|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя,
		|	КлючевыеОперации.Важность КАК Важность,
		|	КлючевыеОперации.Владелец.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Подсистемы.Состав КАК Подсистемы
		|		ПО КлючевыеОперации.Владелец = Подсистемы.ОбъектМетаданных
		|ГДЕ
		|	НЕ КлючевыеОперации.ПометкаУдаления
		|	И КлючевыеОперации.Владелец.Владелец = &Проект
		|	И Подсистемы.Ссылка = &Подсистема
		|	И (КлючевыеОперации.ВидОперации = &ВидОперации
		|			ИЛИ &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыКлючевыхОпераций.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Имя";
	
КонецФункции

Функция ТекстЗапросаОбъектыМетаданныхПроекта()
	
	Возврат
		"ВЫБРАТЬ
		|	ОбъектыМетаданных.Ссылка КАК Ссылка,
		|	ОбъектыМетаданных.Имя КАК Имя,
		|	ОбъектыМетаданных.Родитель.ВидОбъектаМетаданныхВЕдЧисле КАК Вид
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Владелец = &Проект
		|	И ОбъектыМетаданных.Поставщик В (ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка), &Проект)
		|	И НЕ ОбъектыМетаданных.ПометкаУдаления
		|	И НЕ ОбъектыМетаданных.Имя ПОДОБНО ""Удалить%""
		|	И ОбъектыМетаданных.ПрисутствуетВОсновномХранилище
		|	И ОбъектыМетаданных.Родитель <> ЗНАЧЕНИЕ(Справочник.ОбъектыМетаданных.ПустаяСсылка)
		|	И НЕ ОбъектыМетаданных.Родитель.ВидОбъектаМетаданныхВЕдЧисле В (&ОбъектыМетаданныхБезМодулей)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектыМетаданных.Родитель.ВидОбъектаМетаданныхВЕдЧисле,
		|	ОбъектыМетаданных.Имя";
	
КонецФункции

Функция ТекстЗапросаСоответствиеКлючевыхОпераций()
	
	Возврат
		"ВЫБРАТЬ
		|	Загруженные.Имя КАК Имя,
		|	Загруженные.Индекс КАК Индекс,
		|	Загруженные.ВидОперации КАК ВидОперации,
		|	Загруженные.ОбъектМетаданных КАК ОбъектМетаданных
		|ПОМЕСТИТЬ Загруженные
		|ИЗ
		|	&Загруженные КАК Загруженные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Загруженные.Имя КАК Имя,
		|	Загруженные.Индекс КАК Индекс,
		|	Загруженные.ВидОперации КАК ВидОперации,
		|	Загруженные.ОбъектМетаданных КАК ОбъектМетаданных,
		|	КлючевыеОперации.Ссылка КАК Ссылка,
		|	КлючевыеОперации.Ссылка ЕСТЬ NULL КАК Найденная
		|ПОМЕСТИТЬ Найденные
		|ИЗ
		|	Загруженные КАК Загруженные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперации КАК КлючевыеОперации
		|		ПО Загруженные.Имя = КлючевыеОперации.Имя
		|			И Загруженные.ОбъектМетаданных = КлючевыеОперации.Владелец
		|			И Загруженные.ВидОперации = КлючевыеОперации.ВидОперации
		|			И (КлючевыеОперации.Владелец.Владелец = &Проект)
		|			И (НЕ КлючевыеОперации.ПометкаУдаления)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючевыеОперации.Имя,
		|	-1 КАК Индекс,
		|	КлючевыеОперации.ВидОперации КАК ВидОперации,
		|	КлючевыеОперации.Владелец КАК ОбъектМетаданных,
		|	КлючевыеОперации.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК Найденная,
		|	ИСТИНА КАК Новая
		|ИЗ
		|	Справочник.КлючевыеОперации КАК КлючевыеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Найденные КАК ВсеНайденные
		|		ПО КлючевыеОперации.Ссылка = ВсеНайденные.Ссылка
		|ГДЕ
		|	КлючевыеОперации.Владелец.Владелец = &Проект
		|	И НЕ КлючевыеОперации.ПометкаУдаления
		|	И ВсеНайденные.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Найденные.Имя,
		|	Найденные.Индекс,
		|	Найденные.ВидОперации,
		|	Найденные.ОбъектМетаданных,
		|	Найденные.Ссылка,
		|	Найденные.Найденная,
		|	ЛОЖЬ
		|ИЗ
		|	Найденные КАК Найденные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Найденная УБЫВ,
		|	Новая,
		|	КлючевыеОперации.Имя";
	
КонецФункции

Функция УдалитьУсловиеПоПроекту(ТекстЗапроса)
	
	Условие =
		"	И КлючевыеОперации.Владелец.Владелец = &Проект
		|";
	
	Возврат СтрЗаменить(ТекстЗапроса, Условие, "");
	
КонецФункции

#КонецОбласти

Функция ВыгрузитьТаблицуВXML(Таблица, ИмяТаблицы)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Items");
	ЗаписьXML.ЗаписатьАтрибут("Description", Строка(ИмяТаблицы));
	Колонки = Новый Массив;
	
	Для каждого Колонка Из Таблица.Колонки Цикл
		Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьАтрибут("Columns", СтрСоединить(Колонки, ","));
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Item");
		
		Для каждого Колонка Из Колонки Цикл
			ЗаписьXML.ЗаписатьАтрибут(Колонка, Формат(СтрокаТаблицы[Колонка], "ЧРД=.; ЧГ=0"));
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция КраткоеОписаниеПроекта(Проект)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект,
		"Код,
		|Ветка.Имя,
		|ИмяПользователяХранилищаДляЗагрузкиМетаданных,
		|ПарольПользователяХранилищаДляЗагрузкиМетаданных,
		|ПутьКПроектуВРепозитории,
		|РежимРазработки");
	
КонецФункции

Функция ПрочитатьИзФайла(ИмяФайла, Кодировка = Неопределено)
	
	Если Кодировка = Неопределено Тогда
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Иначе
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, Кодировка);
	КонецЕсли;
	
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти
