////////////////////////////////////////////////////////////////////////////////
// Общие процедуры для загрузки метаданных из файлов
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьМетаданныеТехническогоПроекта(ПараметрыЗадания, АдресХранилища) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ПараметрыЗадания.ТехническийПроект) Тогда
		Параметры = ПараметрыЗагрузкиМетаданных(ПараметрыЗадания.ТехническийПроект);
	Иначе	
		Параметры = ПараметрыЗагрузкиМетаданных(ПараметрыЗадания.Ветка);
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЗадания);
	
	Если ПараметрыЗадания.Свойство("ЗагрузитьИзмененияМетаданныхИзХранилища") Тогда
		Параметры.Вставить("ЗагрузитьИзмененияМетаданныхИзХранилища", ПараметрыЗадания.ЗагрузитьИзмененияМетаданныхИзХранилища);
	КонецЕсли;	
	
	Параметры.Вставить("СтрокаСоединенияИБДляЗагрузкиМетаданных", ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(Параметры.КаталогИБДляЗагрузкиМетаданных));
	
	ПутьКВерсиямПлатформыНаСервере = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	Если ЗначениеЗаполнено(ПутьКВерсиямПлатформыНаСервере) Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
			СисИнфо = Новый  СистемнаяИнформация;
			Параметры.ВерсияПлатформы = СисИнфо.ВерсияПриложения;
		КонецЕсли; 
		ПутьКВерсиямПлатформыНаСервере = СтрЗаменить(ПутьКВерсиямПлатформыНаСервере, "%ВерсияПлатформы%", Параметры.ВерсияПлатформы);
		Файл = Новый Файл(ПутьКВерсиямПлатформыНаСервере);
		Если Файл.Существует() Тогда
			Параметры.Вставить("КаталогИсполняемогоФайла", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКВерсиямПлатформыНаСервере));
		Иначе
			ТекстОшибки = НСтр("ru = 'Не найдена указанная версия платформы: %ВерсияПлатформы% на сервере: %ИмяСервера%.
				|Путь к 1С:Конфигуратору на сервере: %Путь%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВерсияПлатформы%", Параметры.ВерсияПлатформы);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяСервера%", ИмяКомпьютера());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Путь%", ПутьКВерсиямПлатформыНаСервере);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
		ЗагрузкаМетаданныхEDT.ЗагрузитьМетаданные(Параметры);
	Иначе
		ЗагрузитьМетаданные(ПараметрыЗадания.ВеткаИсточник, Параметры);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыМетаданных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	НЕ ОбъектыМетаданных.ПометкаУдаления
	|	И ОбъектыМетаданных.ВеткаИсточник = &ВеткаИсточник
	|	И ОбъектыМетаданных.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("Проект", ПараметрыЗадания.Проект);
	Запрос.УстановитьПараметр("ВеткаИсточник", ПараметрыЗадания.ВеткаИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПоместитьВоВременноеХранилище(РезультатЗапроса.Выгрузить(), АдресХранилища);
	
	Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
		
		Параметры.Вставить("АдресВХранилище", АдресХранилища);
		Параметры.Вставить("ОбъектыМетаданныхТехПроекта", ПараметрыЗадания.ОбъектыМетаданныхТехПроекта);
		
		Попытка
			ЗагрузкаМетаданныхEDT.ЗагрузитьИзмененияИзEDT(Параметры);
		Исключение
			ЗаписьЖурналаРегистрации("ЗагрузитьМетаданныеТехническогоПроекта",
										УровеньЖурналаРегистрации.Ошибка,
										,
										,
										ОписаниеОшибки());
		КонецПопытки;
		
		ОчиститьВременныеФайлыГит(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМетаданные(ПроектСсылка, Параметры = Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыЗагрузкиМетаданных(ПроектСсылка);
	КонецЕсли;
	
	Попытка
		
		СоздаватьНовуюИБИзХранилища(Параметры);
		ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных(Параметры);
		
		ВыполнитьВыгрузкуКонфигурацииВXML(Параметры);
	Исключение
			ДобавитьЗаписьВЛог(
				Параметры, 
				НСтр("ru='Ошибка загрузки метаданных'"),
				ОписаниеОшибки(),
				УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	ТекстИзмененийМетаданных = Неопределено;
	Если Параметры.Свойство("ЗагрузитьИзмененияМетаданныхИзХранилища") 
		И Параметры.ЗагрузитьИзмененияМетаданныхИзХранилища Тогда
		
		ТекстИзмененийМетаданных = ТекстИзмененийМетаданныхИзХранилища(Параметры);
		
		Параметры.Вставить("ТолькоИзменениеИменОбъектов", Истина);
		Параметры.Вставить("ТекстИзмененийМетаданных", ТекстИзмененийМетаданных);
		ЗагрузитьИзмененияМетаданныхИзХранилищаПоВетке(Параметры);
	КонецЕсли;	
	
	Попытка
		ЗагрузитьМетаданныеИзXML(Параметры);
	Исключение
			ДобавитьЗаписьВЛог(
				Параметры, 
				НСтр("ru='Ошибка загрузки метаданных из xml'"),
				ОписаниеОшибки(),
				УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;    
			
	Если Параметры.Свойство("ЗагрузитьИзмененияМетаданныхИзХранилища") 
		И Параметры.ЗагрузитьИзмененияМетаданныхИзХранилища Тогда
		
		Параметры.Вставить("ТолькоИзменениеИменОбъектов", Ложь);
		Параметры.Вставить("ТекстИзмененийМетаданных", ТекстИзмененийМетаданных);
		ЗагрузитьИзмененияМетаданныхИзХранилищаПоВетке(Параметры);
		
	КонецЕсли;	
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Удаление временных файлов'"));
	
	Если Параметры.Свойство("СоздаватьНовуюИБИзХранилища") И Параметры.СоздаватьНовуюИБИзХранилища Тогда
		
		Попытка
			УдалитьФайлы(Параметры.КаталогИБДляЗагрузкиМетаданных); 
		Исключение
			ДобавитьЗаписьВЛог(
				Параметры, 
				НСтр("ru='Ошибка удаления каталога ИБ для загрузки метаданных'"),
				ОписаниеОшибки(),
				УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки; 
	КонецЕсли;
	
	// Удаляем все файлы
	Попытка
		УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации); 
	Исключение
		ДобавитьЗаписьВЛог(
			Параметры, 
			НСтр("ru='Ошибка удаления каталога выгрузки конфигурации'"), 
			ОписаниеОшибки(), 
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки; 
	
	Если Параметры.Свойство("УдалятьФайлЛоговПоЗавершении") И Параметры.УдалятьФайлЛоговПоЗавершении Тогда
		Попытка
			УдалитьФайлы(Параметры.ИмяФайлаЛогов); 
		Исключение
			ДобавитьЗаписьВЛог(
				Параметры, 
				НСтр("ru='Ошибка удаления файла логов'"),
				ОписаниеОшибки(),
				УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьМетаданныеИОбработчики(ПроектСсылка, Параметры = Неопределено) Экспорт 
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыЗагрузкиМетаданных(ПроектСсылка);
		Если Параметры.Свойство("ВестиОписанияОбработчиковОбновленияИнформационнойБазы") 
			И Параметры.ВестиОписанияОбработчиковОбновленияИнформационнойБазы Тогда
			Параметры.Вставить("УдалятьВременныеИБВерсий", Ложь);
			Параметры.Вставить("ОбновлятьКонфигурациюБазыДанных", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
		
		Попытка
			ЗагрузкаМетаданныхEDT.ЗагрузитьМетаданные(Параметры);
			РаботаСоСправкой.ОбновитьСправкуПроектаEDT(Параметры);
			ЗаписьЖурналаРегистрации("ЗагрузитьМетаданныеИОбработчики",
										УровеньЖурналаРегистрации.Информация,,,НСтр("ru = 'Справка успешно обновлена'"));
		Исключение
			ЗаписьЖурналаРегистрации("ЗагрузитьМетаданныеИОбработчики",
										УровеньЖурналаРегистрации.Ошибка,
										,
										,
										ОписаниеОшибки());
		КонецПопытки;
		
		ОчиститьВременныеФайлыГит(Параметры); 

	Иначе
		ЗагрузитьМетаданные(ПроектСсылка, Параметры);
		Параметры.Вставить("УдалятьВременныеИБВерсий", Истина);
		РаботаСоСправкой.ОбновитьСправкуПроекта(Параметры);
		ЗагрузитьОбработчикиОбновленияВсехВерсий(ПроектСсылка, Параметры, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьИзмененияВВетках(Проект, Параметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); 
	
	ЗагрузкаОднойВетки = Ложь;
	ТекстИсключения = "";
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("Ветка") Тогда
		ЗагрузкаОднойВетки = Истина;
	КонецЕсли;	
	
	ДанныеВеток = ДанныеВетокДляЗагрузкиИзмененийМетаданных(Проект, Параметры);
	
	СоответствияИмен = ДанныеСоответствияИмен();
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("СоответствияИмен", СоответствияИмен);
	
	ВеткиСИзменениямиМетаданных = Новый Массив;
	
	Для Каждого ДанныеВетки Из ДанныеВеток Цикл
		Попытка
			ИнформацияОВетке = ТестированиеЗапускТестирования.ИнформацияОВетке(ДанныеВетки.Проект, ДанныеВетки.Имя);
			ИдКоммитаПоследнейЗагрузки = ДанныеПоследнейЗагрузкиМетаданныхПоВетке(ДанныеВетки.Ссылка);
			Если ИдКоммитаПоследнейЗагрузки = ИнформацияОВетке.commit.id Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеВетки.Вставить("ИнформацияОВетке", ИнформацияОВетке);
			ДанныеВетки.Вставить("ИдКоммитаПоследнейЗагрузки", ИдКоммитаПоследнейЗагрузки);
			
			ДопПараметры.Вставить("Ветка", ДанныеВетки.Ссылка);
			ДопПараметры.Вставить("ИзмененныеМетаданныеПоДаннымСервера", Неопределено);
			ДопПараметры.Вставить("Имя", ДанныеВетки.Имя);
			ДопПараметры.Вставить("ИсточникИмя", ДанныеВетки.ИсточникИмя);
			ДопПараметры.Вставить("ПриемникИмя", ДанныеВетки.ПриемникИмя);
			
			Попытка
				ВВеткеЕстьИзмененияМетаданных = ВВеткеЕстьИзмененияМетаданных(
					ДанныеВетки.Проект, ДанныеВетки.ПриемникИмя, ДанныеВетки.Имя, ДопПараметры);
			Исключение
				ВВеткеЕстьИзмененияМетаданных = Ложь;
 				ОписаниеОшибки = ОписаниеОшибки();
				Если Найти(НРег(ОписаниеОшибки), НРег("Internal Server Error")) > 0 Тогда
					//Изменений может быть так много, что сервер не ответил.
					ВВеткеЕстьИзмененияМетаданных = Истина;
				КонецЕсли;	
			КонецПопытки;                   
			
			Если ДопПараметры.Свойство("ИзмененныеМетаданныеПоДаннымСервера") И ДопПараметры.ИзмененныеМетаданныеПоДаннымСервера <> Неопределено Тогда
				ДанныеВетки.Вставить("ИзмененныеМетаданныеПоДаннымСервера", ДопПараметры.ИзмененныеМетаданныеПоДаннымСервера);
			КонецЕсли;	
			
			Если ВВеткеЕстьИзмененияМетаданных Тогда
				ВеткиСИзменениямиМетаданных.Добавить(ДанныеВетки);
			Иначе	
				ЗафиксироватьКоммитНаКоторыйБылаЗагрузкаМетаданных(ДанныеВетки.Ссылка, ИнформацияОВетке.commit.id);
			КонецЕсли;	
			
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не удалось загрузить измененные метаданные по ветке: <%1> по причине: %2'"),
					ДанныеВетки.Ссылка, ОписаниеОшибки());
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
										УровеньЖурналаРегистрации.Ошибка,
										,
										ДанныеВетки.Ссылка,
										ТекстСообщения);
			Если ЗагрузкаОднойВетки Тогда
				ВызватьИсключение ТекстСообщения;	
			КонецЕсли;	
		КонецПопытки;
	КонецЦикла;	
	
	ВеткиПриемники = Новый Соответствие;
	Для Каждого ДанныеВетки Из ВеткиСИзменениямиМетаданных Цикл
		Если ВеткиПриемники[ДанныеВетки.Приемник] = Неопределено Тогда
			ВеткиПриемники.Вставить(ДанныеВетки.Приемник, Новый Массив);
		КонецЕсли;			
		
		Данные = ВеткиПриемники[ДанныеВетки.Приемник];
		Данные.Добавить(ДанныеВетки);
	КонецЦикла;	   
	
	Если ВеткиСИзменениямиМетаданных.Количество() = 0 Тогда
		ОповещениеПользователейОСогласованииОМ(Проект, ДопПараметры);
		Возврат;
	КонецЕсли;	

	//Получаем временный репозиторий один раз
	
	ПараметрыGit = Новый Структура;
	ПараметрыGit.Вставить("СоздаватьВременныйКаталог", Ложь);
	
	Попытка
		ПолучитьФайлыРепозиторияДляАнализаИзмененийМетаданных(Проект, ДопПараметры, ПараметрыGit);
		ЗагрузитьИзмененияВВеткахОсновнаяЗагрузка(ПараметрыGit, ВеткиПриемники, Проект, ДопПараметры);
	Исключение
		ТекстИсключения = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузитьИзмененияВВетках'"), 
			УровеньЖурналаРегистрации.Ошибка,,,ТекстИсключения);
	КонецПопытки;
	
	Если ПараметрыGit.СоздаватьВременныйКаталог И ПараметрыGit.Свойство("КаталогGitРепозитория") Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузитьИзмененияВВетках'"), 
			УровеньЖурналаРегистрации.Информация,,,
			СтрШаблон(НСтр("ru = 'Очистка временного каталога: %1'"), ПараметрыGit.КаталогGitРепозитория));
			
		ОчиститьВременныеФайлыГит(ПараметрыGit);
		
		Файл = Новый Файл(ПараметрыGit.КаталогGitРепозитория);
		Если Файл.Существует() Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузитьИзмененияВВетках'"), 
				УровеньЖурналаРегистрации.Информация,,,
				СтрШаблон(НСтр("ru = 'Временный каталог не был очищен: %1'"), ПараметрыGit.КаталогGitРепозитория));
		КонецЕсли;	
	Иначе	
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузитьИзмененияВВетках'"), 
			УровеньЖурналаРегистрации.Информация,,,
			СтрШаблон(НСтр("ru = 'Очистка временного каталога не выполнялась: %1'"), ПараметрыGit.КаталогGitРепозитория));
	КонецЕсли;	
	
	ОповещениеПользователейОСогласованииОМ(Проект, ДопПараметры);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузитьИзмененияВВетках'"), 
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Окончание загрузки.'"));
		
	Если ЗагрузкаОднойВетки И ЗначениеЗаполнено(ТекстИсключения) Тогда
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;		
		
КонецПроцедуры

Процедура ЗагрузитьМетаданныеИОбработчикиОбновленияПроекта(ПараметрыЗадания, АдресХранилища) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = ПараметрыЗагрузкиМетаданных(ПараметрыЗадания.Проект);
	ЗаполнитьЗначенияСвойств(Параметры, ПараметрыЗадания);
	Параметры.Вставить("УдалятьФайлЛоговПоЗавершении", Ложь);
	
	ПутьКВерсиямПлатформыНаСервере = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	Если ЗначениеЗаполнено(ПутьКВерсиямПлатформыНаСервере) Тогда
		
		Если НЕ ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
			СисИнфо = Новый  СистемнаяИнформация;
			Параметры.ВерсияПлатформы = СисИнфо.ВерсияПриложения;
		КонецЕсли; 
		ПутьКВерсиямПлатформыНаСервере = СтрЗаменить(ПутьКВерсиямПлатформыНаСервере, "%ВерсияПлатформы%", Параметры.ВерсияПлатформы);
		Файл = Новый Файл(ПутьКВерсиямПлатформыНаСервере);
		Если Файл.Существует() Тогда
			Параметры.Вставить("КаталогИсполняемогоФайла", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКВерсиямПлатформыНаСервере));
		Иначе
			ТекстОшибки = НСтр("ru = 'Не найдена указанная версия платформы: %ВерсияПлатформы% на сервере: %ИмяСервера%.
				|Путь к 1С:Конфигуратору на сервере: %Путь%.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВерсияПлатформы%", Параметры.ВерсияПлатформы);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяСервера%", ИмяКомпьютера());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Путь%", ПутьКВерсиямПлатформыНаСервере);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ПараметрыЗадания.Режим = "МетаданныеИОбработчики" Тогда
		
		ЗагрузитьМетаданные  = Истина;
		ЗагрузитьОбработчики = Истина;
		ОбновитьСправку      = Ложь;
		Параметры.Вставить("ОбновлятьКонфигурациюБазыДанных", Истина);
		Параметры.Вставить("УдалятьВременныеИБВерсий", Ложь);
		
	ИначеЕсли ПараметрыЗадания.Режим = "ТолькоМетаданные" Тогда
		
		ЗагрузитьМетаданные  = Истина;
		ЗагрузитьОбработчики = Ложь;
		ОбновитьСправку      = Ложь;
		Параметры.Вставить("УдалятьВременныеИБВерсий", Истина);
		
	ИначеЕсли ПараметрыЗадания.Режим = "ТолькоОбработчики" Тогда
		
		ЗагрузитьМетаданные  = Ложь;
		ЗагрузитьОбработчики = Истина;
		ОбновитьСправку      = Ложь;
		Параметры.Вставить("ОбновитьБазуИзХранилища", Истина);
		Параметры.Вставить("УдалятьВременныеИБВерсий", Истина);
		
	ИначеЕсли ПараметрыЗадания.Режим = "МетаданныеИОбновлениеСправки" Тогда
		
		ЗагрузитьМетаданные  = Истина;
		ЗагрузитьОбработчики = Ложь;
		ОбновитьСправку      = Истина;
		Параметры.Вставить("ОбновитьБазуИзХранилища",  Истина);
		Параметры.Вставить("УдалятьВременныеИБ",       Ложь);
		
	КонецЕсли; 
	
	Если ПараметрыЗадания.Свойство("ВеткаИсточник") Тогда
		Параметры.Вставить("ВеткаИсточник", ПараметрыЗадания.ВеткаИсточник);
	КонецЕсли;	
	
	Попытка
		Если ЗагрузитьМетаданные Тогда
			Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
				ЗагрузитьОбработчики = Ложь;
				ЗагрузкаМетаданныхEDT.ЗагрузитьМетаданные(Параметры);
			Иначе
				ЗагрузитьМетаданные(ПараметрыЗадания.Проект, Параметры);
				Параметры.Вставить("УдалятьВременныеИБВерсий", Истина);
					
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ЗагрузитьОбработчики Тогда
			
			ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем = Ложь;
			
			Если ПараметрыЗадания.Свойство("ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем") Тогда
				ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем = ПараметрыЗадания.ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем;
			КонецЕсли;
			
			Если ПараметрыЗадания.Свойство("ВерсияПроекта")
				И ЗначениеЗаполнено(ПараметрыЗадания.ВерсияПроекта) Тогда
				ЗагрузитьОбработчикиОбновленияОднойВерсии(ПараметрыЗадания.Проект, ПараметрыЗадания.ВерсияПроекта, Параметры, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
			Иначе 
				ЗагрузитьОбработчикиОбновленияВсехВерсий(ПараметрыЗадания.Проект, Параметры, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ОбновитьСправку Тогда
			
			Если ПараметрыЗадания.Свойство("ДеревоМетаданных") Тогда
				Параметры.Вставить("ДеревоМетаданных", ПараметрыЗадания.ДеревоМетаданных);
			КонецЕсли;
			Если ПараметрыЗадания.Свойство("ВключатьСсылкиНаСправкуПоискаВСписках") Тогда
				Параметры.Вставить("ВключатьСсылкиНаСправкуПоискаВСписках", ПараметрыЗадания.ВключатьСсылкиНаСправкуПоискаВСписках);
			КонецЕсли;
			Если ПараметрыЗадания.Свойство("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку") Тогда
				Параметры.Вставить("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку", 
				                   ПараметрыЗадания.ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку);
			КонецЕсли;
			
			Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
				РаботаСоСправкой.ОбновитьСправкуПроектаEDT(Параметры, АдресХранилища);
			Иначе
				РаботаСоСправкой.ОбновитьСправкуПроекта(Параметры, АдресХранилища);
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("ЗагрузитьМетаданныеИОбработчикиОбновленияПроекта",
									УровеньЖурналаРегистрации.Ошибка,
									,
									,
									ОписаниеОшибки());
	КонецПопытки;
	
	
	Если Параметры.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
		ОчиститьВременныеФайлыГит(Параметры); 
	КонецЕсли;
	
	Лог = Новый ТекстовыйДокумент;
	Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(Параметры.ИмяФайлаЛогов);
	КонецЕсли;
	ПоместитьВоВременноеХранилище(Лог, АдресХранилища);
	Лог = Неопределено;
	
КонецПроцедуры

Функция ПараметрыЗагрузкиМетаданных(ПроектСсылка) Экспорт 

	ТипЗначения = ТипЗнч(ПроектСсылка);
	Если ТипЗначения = Тип("СправочникСсылка.Проекты") Тогда
	
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроектСсылка, "КаталогИБДляЗагрузкиМетаданных, Код,
		|ИмяПользователяИБДляЗагрузкиМетаданных, ПарольПользователяИБДляЗагрузкиМетаданных, 
		|ИмяПользователяХранилищаДляЗагрузкиМетаданных, ПарольПользователяХранилищаДляЗагрузкиМетаданных, 
		|ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных, ВерсияПлатформы, ЗагружатьИнформациюОРазделенииДанныхБиблиотек,
		|ВестиОписанияОбработчиковОбновленияИнформационнойБазы, ВыгружатьСправкуПриЗагрузкеМетаданных, ЗагружатьКлючевыеОперации,
		|РежимРазработки, АдресGitСервера, Ветка.Имя, ПутьКПроектуВРепозитории, ИмяВеткиДляВыгрузкиСправки, 
		|ТекстКоммитаДляЗагрузкиСправки");
		
		Параметры.Вставить("Проект", ПроектСсылка);
		Параметры.Вставить("ЭтоОсновноеХранилище", Истина);
		Параметры.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", Параметры.ВеткаИмя);
		
		// После загрузки метаданных по версиям, необходимо удалить все временные каталоги с созданными базами.
		Параметры.Вставить("УдалятьВременныеИБВерсий", Истина); 
		
		Параметры.Вставить("ПрефиксКаталога", 
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла("p_"+СокрЛП(Параметры.Код)));
		
		Если Параметры.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных 
			И НЕ ЗначениеЗаполнено(Параметры.КаталогИБДляЗагрузкиМетаданных) Тогда
		
			Параметры.Вставить("КаталогИБДляЗагрузкиМетаданных", 
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
			+ "v8_"+Параметры.ПрефиксКаталога+ "_db");
			
			Параметры.Вставить("СоздаватьНовуюИБИзХранилища", Истина);
		
			Параметры.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных",    "");
			Параметры.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных", "");
		
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных) Тогда
			Параметры.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", "ТолькоПросмотр");
			Параметры.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", "");
		КонецЕсли;
		
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроектСсылка, "Владелец, Код, Ветка.РежимРазработки,
		|Ветка.Имя, ИмяПользователяХранилищаДляЗагрузкиМетаданных, ПарольПользователяХранилищаДляЗагрузкиМетаданных");
		
		Параметры.Вставить("ПрефиксКаталога", 
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла("tp_"+СокрЛП(Формат(Параметры.Код, "ЧГ=0"))));
		
		Параметры.Вставить("Проект", Параметры.Владелец);
		Параметры.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", Параметры.ВеткаИмя);
		Параметры.Вставить("РежимРазработки", Параметры.ВеткаРежимРазработки);
		Параметры.Вставить("ЭтоОсновноеХранилище", Ложь);
		Параметры.Вставить("ВеткаИсточник", Параметры.Ветка);
		
		Параметры.Вставить("КаталогИБДляЗагрузкиМетаданных", 
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
			+ "v8_"+Параметры.ПрефиксКаталога+ "_db");
			
		Параметры.Вставить("СоздаватьНовуюИБИзХранилища", Истина);
		
		Параметры.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных", "");
		Параметры.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных", "");
		Если НЕ ЗначениеЗаполнено(Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных) Тогда
			Параметры.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", "ТолькоПросмотр");
			Параметры.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", "");
		КонецЕсли;
		
		Параметры.Вставить("ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных", Параметры.РежимРазработки = Перечисления.РежимРазработки.ВХранилище);
		Параметры.Вставить("ВерсияПлатформы", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Проект, "ВерсияПлатформы"));
		Параметры.Вставить("ЗагружатьКлючевыеОперации", Ложь);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Ветки") Тогда
		
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроектСсылка, "Владелец, РежимРазработки,
		|Имя, Владелец.ИмяПользователяХранилищаДляЗагрузкиМетаданных, Владелец.ПарольПользователяХранилищаДляЗагрузкиМетаданных");
		
		Параметры.Вставить("ПрефиксКаталога", 
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла("tp_"+СокрЛП(Лев(ПроектСсылка.Наименование, 20))));
		
		Параметры.Вставить("Проект", Параметры.Владелец);
		Параметры.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", Параметры.Имя);
		Параметры.Вставить("РежимРазработки", Параметры.РежимРазработки);
		Параметры.Вставить("ЭтоОсновноеХранилище", Ложь);
		Параметры.Вставить("ВеткаИсточник", ПроектСсылка);
		
		Параметры.Вставить("КаталогИБДляЗагрузкиМетаданных", 
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
			+ "v8_"+Параметры.ПрефиксКаталога+ "_db_" + Строка(Новый УникальныйИдентификатор));
			
		Параметры.Вставить("СоздаватьНовуюИБИзХранилища", Истина);
		
		Параметры.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных", "");
		Параметры.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных", "");
		Параметры.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", Параметры.ВладелецИмяПользователяХранилищаДляЗагрузкиМетаданных);
		Параметры.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", Параметры.ВладелецПарольПользователяХранилищаДляЗагрузкиМетаданных);
		Если НЕ ЗначениеЗаполнено(Параметры.ВладелецИмяПользователяХранилищаДляЗагрузкиМетаданных) Тогда
			Параметры.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", "ТолькоПросмотр");
			Параметры.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", "");
		КонецЕсли;
		
		Параметры.Вставить("ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных", Параметры.РежимРазработки = Перечисления.РежимРазработки.ВХранилище);
		Параметры.Вставить("ВерсияПлатформы", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Проект, "ВерсияПлатформы"));
		Параметры.Вставить("ЗагружатьКлючевыеОперации", Ложь);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не верно заданы параметры загрузки метаданных.'");
	КонецЕсли; 
	
	Параметры.Вставить("СтрокаСоединенияИБДляЗагрузкиМетаданных", ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(Параметры.КаталогИБДляЗагрузкиМетаданных));
	
	Параметры.Вставить("КаталогИсполняемогоФайла", ОбщегоНазначенияСППР.КаталогИсполняемогоФайлаНаСервере(Параметры.ВерсияПлатформы));
	
	Параметры.Вставить("ВыгрузкуКонфигурацииВXML", Истина);
	
	Параметры.Вставить("ИмяФайлаРезультатов", ПолучитьИмяВременногоФайла("log"));
	Параметры.Вставить("ИмяФайлаЛогов", ПолучитьИмяВременногоФайла("log"));
	Параметры.Вставить("УдалятьФайлЛоговПоЗавершении", Истина);
	Параметры.Вставить(
		"КаталогВыгрузкиКонфигурации", 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
		+ ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути("v8_"+Параметры.ПрефиксКаталога+ "_cfgdump"));
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗагрузитьМетаданныеИзXML(Параметры) Экспорт 
	
	Параметры.КаталогВыгрузкиКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогВыгрузкиКонфигурации);
	Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации);
	
	Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоКаталог() Тогда
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Каталог выгруженных файлов конфигурации не найден'"),"",УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При загрузке метаданных возникли ошибки (подробнее см. Журнал регистрации).
			|Каталог выгруженных файлов конфигурации не найден.'");
	КонецЕсли;
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Загрузки метаданных из XML'"));
	
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.bin"); // Сразу удаляем ненужные файлы
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.bmp");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.png");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.jpg");
	Если Не Параметры.ЭтоОсновноеХранилище или Не Параметры.ЗагружатьИнформациюОРазделенииДанныхБиблиотек Тогда
		УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.cf");
	КонецЕсли;
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.Form");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.html");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.Package");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.picture");
	Если Параметры.ЗагружатьКлючевыеОперации Тогда
		ОптимизироватьХранениеМодулей(Параметры.КаталогВыгрузкиКонфигурации);
	Иначе
		УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.txt");
	КонецЕсли;
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.Form.xml");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.CommandInterface.xml");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.Help.xml");
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.Template.xml");
	
	ФайлКонфигурации = Параметры.КаталогВыгрузкиКонфигурации + "Configuration.xml";
	Файл = Новый Файл(ФайлКонфигурации);
	Если Файл.Существует() Тогда
		ИсправитьФайлКонфигурации(ФайлКонфигурации);
	Иначе
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЗагружаемыеОбъекты", СтруктураЗагружаемыхОбъектов()); // Настройки чтения всех полей для каждого типа МД
	Параметры.Вставить("СсылкиМетаданных", Новый Соответствие); // Используется для поиска по uuid
	Параметры.Вставить("ТипыМетаданных", Новый Соответствие);   // Используется для поиска по представлению типа
	Параметры.Вставить("ОбновитьСвойстваПоТипам", Новый Соответствие); // Обновляется свойства содержащие строковые типы метаданных.
	Параметры.Вставить("ОбъектыМетаданных", Новый Соответствие); // Содержит исходную информацию прочитанных метаданных конфигурации
	Параметры.Вставить("НеНайденныеОбъектыМетаданных", Новый Массив); // Содержит объекты не найденные по uuid, которые будут обработаны с заменой uuid
	Параметры.Вставить("Нумераторы", Новый Соответствие); // Нумерации объектов при считывании порядка метаданных
	Параметры.Вставить("ТипыФормОбъектов", Новый Соответствие); // Для объектов метаданных сохраняются типы форм, для обновления в самих формах
	Параметры.Вставить("ОписаниеДвиженийПоРегистрам", Новый Соответствие); // Соответствие регистров и массив регистраторов
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(
		Новый Структура("ИмяФайла, КлассОбъекта, ПрефиксПодчиненныхФайлов, uuid, uuidРодитель, Код", 
			"Configuration", 
			"Configuration", 
			"", 
			"", 
			"",
			0));
	
	Параметры.Вставить("КодЯзыкаЗагрузки", "ru");
	Параметры.Вставить("КодДопЯзыкаЗагрузки", "en");
	
	Индекс = 0;
	Пока Индекс <= ОбъектыМетаданных.ВГраница() Цикл
		
		ОбъектМетаданных = ОбъектыМетаданных[Индекс];
		Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".xml");
		Если НЕ Файл.Существует() Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".xml");
		
		Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		ОбъектМетаданных.uuid = Данные[ОбъектМетаданных.КлассОбъекта].uuid;
		
		ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[ОбъектМетаданных.КлассОбъекта];
		
		Если ПараметрыОбъекта.Свойство("ChildObjectsFiles") Тогда
			ПодчиненныеФайлы = ПараметрыОбъекта.ChildObjectsFiles;
		Иначе
			ПодчиненныеФайлы = Новый Массив;
		КонецЕсли;
		
		// Читаем список подчиненных объектов, хранящихся в отдельных файлах
		Для каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
			
			Если Данные[ОбъектМетаданных.КлассОбъекта].ChildObjects.Свойства().Получить(ПодчиненныйФайл) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СписокОбъектов = Данные[ОбъектМетаданных.КлассОбъекта].ChildObjects[ПодчиненныйФайл];
			Если ТипЗнч(СписокОбъектов) = Тип("Строка") Тогда
				
				Объект = Новый Структура("ИмяФайла, КлассОбъекта, ПрефиксПодчиненныхФайлов, uuid, uuidРодитель, Код", 
					ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПодчиненныйФайл + "." + СписокОбъектов, 
					ПодчиненныйФайл, 
					ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПодчиненныйФайл + "." + СписокОбъектов + ".",
					"", 
					ОбъектМетаданных.uuid,
					0);
				ОбъектыМетаданных.Добавить(Объект);
				
			ИначеЕсли ТипЗнч(СписокОбъектов) = Тип("СписокXDTO") Тогда
				
				Для каждого ЭлементОбъект Из СписокОбъектов Цикл
					
					Объект = Новый Структура("ИмяФайла, КлассОбъекта, ПрефиксПодчиненныхФайлов, uuid, uuidРодитель, Код", 
						ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПодчиненныйФайл + "." + ЭлементОбъект, 
						ПодчиненныйФайл, 
						ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПодчиненныйФайл + "." + ЭлементОбъект + ".",
						"", 
						ОбъектМетаданных.uuid,
						0);
					ОбъектыМетаданных.Добавить(Объект);
					
				КонецЦикла; 
				
				
			КонецЕсли;
			
		КонецЦикла; 
		
		// Читаем свойства и рекурсивно подчиненные объекты, которые не хранятся как файлы
		ПрочитатьСвойстваИПодчиненныеОбъекты(Параметры, ОбъектМетаданных, Данные[ОбъектМетаданных.КлассОбъекта], ОбъектМетаданных.КлассОбъекта, ОбъектМетаданных.uuidРодитель);
		
		СписокОбъектов = Неопределено;
		Данные = Неопределено;
		
		// Добавляем предопределенные данные в хранящиеся в отдельных файлах
		Если ПараметрыОбъекта.Свойство("Predefined") Тогда
		
			Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".Predefined.xml");
			Если Файл.Существует() Тогда
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".Predefined.xml");
				
				Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
				ЧтениеXML.Закрыть();
				
				Если ТипЗнч(Данные.Item) = Тип("СписокXDTO") Тогда
					ПредопределенныеЭлементы = Данные.Item;
				Иначе
					ПредопределенныеЭлементы = Новый Массив;
					ПредопределенныеЭлементы.Добавить(Данные.Item);
				КонецЕсли;
				Если НЕ ОбъектМетаданных.Свойство("ПодчиненныеОбъекты") Тогда
					ОбъектМетаданных.Вставить("ПодчиненныеОбъекты", Новый Массив);
				КонецЕсли;
				
				Для каждого ПредопределенныйЭлемент Из ПредопределенныеЭлементы Цикл
				
					Объект = Новый Структура;
					ПрочитатьПредопределенныеДанные(Параметры, Объект, ПредопределенныйЭлемент, "PredefinedData", ОбъектМетаданных.uuid);
					ОбъектМетаданных.ПодчиненныеОбъекты.Добавить(Объект);
					
				КонецЦикла; 
				
				ПредопределенныеЭлементы = Неопределено;
				Данные = Неопределено;
				
			КонецЕсли;
		КонецЕсли;
		
		// Записываем изменения
		ЗаписатьИзмененияМетаданных(Параметры, ОбъектМетаданных);
		
		// Обрабатываем права ролей после записи
		ОбработатьПраваРолейПослеЗаписи(Параметры, ОбъектМетаданных);
		
		Индекс = Индекс + 1;
		
	КонецЦикла; 
	
	// Запись объектов, не найденных по uuid
	Для каждого ОбъектМетаданных Из Параметры.НеНайденныеОбъектыМетаданных Цикл
		
		ЗаписатьИзмененияМетаданных(Параметры, ОбъектМетаданных, Истина);
		
		// Обрабатываем права ролей после записи
		ОбработатьПраваРолейПослеЗаписи(Параметры, ОбъектМетаданных);
		
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Удаление не найденных объектов метаданных'"));
	
	// Помечаем на удаление не найденные
	ПометитьНаУдалениеНеНайденныеОбъекты(Параметры);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Обработка объектов содержащие ссылки по типам метаданных'"));
	
	ОбработатьОбъектыСодержащиеСсылкиПоТипамМетаданных(Параметры);
	
	ОбработатьПравилаПоддержки(Параметры);
	
	ЗаполнитьПустыеПравилаПоддержкиИОтветственных(Параметры);
	
	ЗагрузитьИнформациюОРазделенииДанныхБиблиотек(Параметры);
	
	Комментарий = СтрШаблон(НСтр("ru = 'Параметры.ЗагружатьКлючевыеОперации = %1'"), Параметры.ЗагружатьКлючевыеОперации);
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Загрузка ключевых операций'"), Комментарий);
	Если Параметры.ЗагружатьКлючевыеОперации Тогда
		КлючевыеОперации.ЗагрузитьКлючевыеОперацииИзКаталогаВыгрузкиКонфигурации(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПравилаПоддержки(Параметры) Экспорт 
	
	ФайлПравилПоддержки = Параметры.КаталогВыгрузкиКонфигурации + "Configuration.ParentConfigurations";
	Файл = Новый Файл(ФайлПравилПоддержки);
	Если НЕ Параметры.ЭтоОсновноеХранилище ИЛИ НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметров = ПрочитатьПравилаПоддержки(ФайлПравилПоддержки);
	Если МассивПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// записываем параметры
	
	НаборЗаписей = РегистрыСведений.НастройкиПоддержки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Проект.Установить(Параметры.Проект);
	
	Для каждого Поставка Из МассивПараметров Цикл
		
		Для каждого НастройкиОбъекта Из Поставка.Объекты Цикл
			
			ОбъектМетаданных = Параметры.СсылкиМетаданных.Получить(НастройкиОбъекта.ОбъектМетаданных);
			Если НЕ ЗначениеЗаполнено(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли; 
			НастройкиОбъекта.Вставить("ОбъектМетаданных", ОбъектМетаданных);
			
			РСЗапись = НаборЗаписей.Добавить();
			РСЗапись.Проект = Параметры.Проект;
			ЗаполнитьЗначенияСвойств(РСЗапись, Поставка);
			ЗаполнитьЗначенияСвойств(РСЗапись, НастройкиОбъекта);
		
		КонецЦикла;
	
	КонецЦикла; 
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПустыеПравилаПоддержкиИОтветственных(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Параметры.Проект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка КАК Ссылка,
	|	ОбъектыМетаданных.Поставщик КАК Поставщик,
	|	ОбъектыМетаданных.ПравилоПоддержки КАК ПравилоПоддержки,
	|	ОбъектыМетаданных.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТОбъекты
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Владелец = &Проект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подсистемы.Ссылка,
	|	Подсистемы.Поставщик,
	|	Подсистемы.ПравилоПоддержки,
	|	Подсистемы.Ответственный
	|ИЗ
	|	Справочник.Подсистемы КАК Подсистемы
	|ГДЕ
	|	Подсистемы.Владелец = &Проект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПоддержки.КонфигурацияПоставщика
	|ПОМЕСТИТЬ ВТИменаПроектов
	|ИЗ
	|	РегистрСведений.НастройкиПоддержки КАК НастройкиПоддержки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъекты КАК ВТОбъекты
	|		ПО НастройкиПоддержки.ОбъектМетаданных = ВТОбъекты.Ссылка
	|ГДЕ
	|	НастройкиПоддержки.КонфигурацияПоставщика <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИменаПроектов.КонфигурацияПоставщика,
	|	МИНИМУМ(Проекты.Ссылка) КАК Проект
	|ПОМЕСТИТЬ ВТПроекты
	|ИЗ
	|	ВТИменаПроектов КАК ИменаПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО (ИменаПроектов.КонфигурацияПоставщика = (ВЫРАЗИТЬ(Проекты.ИмяКонфигурации КАК СТРОКА(100))))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИменаПроектов.КонфигурацияПоставщика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПоддержки.ОбъектМетаданных,
	|	ЕСТЬNULL(Проекты.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК КонфигурацияПоставщика,
	|	НастройкиПоддержки.ПравилоПоддержки,
	|	Объекты.Поставщик КАК ТекущийПоставщик,
	|	Объекты.ПравилоПоддержки КАК ТекущееПравилоПоддержки,
	|	Объекты.Ответственный КАК ТекущийОтветственный,
	|	ВЫБОР
	|		КОГДА НастройкиПоддержки.ПравилоПоддержки = ЗНАЧЕНИЕ(Перечисление.ПравилаПоддержки.СнятСПоддержки)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаПоддержке
	|ПОМЕСТИТЬ ВТПравила
	|ИЗ
	|	РегистрСведений.НастройкиПоддержки КАК НастройкиПоддержки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъекты КАК Объекты
	|		ПО НастройкиПоддержки.ОбъектМетаданных = Объекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроекты КАК Проекты
	|		ПО НастройкиПоддержки.КонфигурацияПоставщика = Проекты.КонфигурацияПоставщика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НастройкиПоддержки.ОбъектМетаданных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.ОбъектМетаданных
	|ПОМЕСТИТЬ ВТОбъектыНесколькихПоставщиков
	|ИЗ
	|	ВТПравила КАК Правила
	|ГДЕ
	|	Правила.НаПоддержке
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.ОбъектМетаданных
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(Правила.КонфигурацияПоставщика) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правила.ОбъектМетаданных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.ОбъектМетаданных
	|ПОМЕСТИТЬ ВТОбъектыБезПоставщиков
	|ИЗ
	|	ВТПравила КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравила КАК Правила2
	|		ПО Правила.ОбъектМетаданных = Правила2.ОбъектМетаданных
	|			И (Правила2.НаПоддержке)
	|ГДЕ
	|	Правила2.ОбъектМетаданных ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правила.ОбъектМетаданных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Правила.ОбъектМетаданных КАК ОбъектМетаданных,
	|	Правила.ТекущийПоставщик КАК ТекущийПоставщик,
	|	Правила.ТекущееПравилоПоддержки КАК ТекущееПравилоПоддержки,
	|	Правила.ТекущийОтветственный КАК ТекущийОтветственный,
	|	Правила.КонфигурацияПоставщика КАК НовыйПоставщик,
	|	Правила.ПравилоПоддержки КАК НовоеПравилоПоддержки,
	|	ЕСТЬNULL(Правила.КонфигурацияПоставщика.ОтветственныйЗаМетаданныеПоУмолчанию, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК НовыйОтветственный
	|ПОМЕСТИТЬ ВТПоставщикиОбъектов
	|ИЗ
	|	ВТПравила КАК Правила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыНесколькихПоставщиков КАК ОбъектыНесколькихПоставщиков
	|		ПО Правила.ОбъектМетаданных = ОбъектыНесколькихПоставщиков.ОбъектМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОбъектыБезПоставщиков КАК ОбъектыБезПоставщиков
	|		ПО Правила.ОбъектМетаданных = ОбъектыБезПоставщиков.ОбъектМетаданных
	|ГДЕ
	|	ОбъектыНесколькихПоставщиков.ОбъектМетаданных ЕСТЬ NULL 
	|	И ОбъектыБезПоставщиков.ОбъектМетаданных ЕСТЬ NULL 
	|	И Правила.НаПоддержке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ВЫБОР
	|		КОГДА Т.ТекущийПоставщик = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ТОГДА Т.НовыйПоставщик
	|		ИНАЧЕ Т.ТекущийПоставщик
	|	КОНЕЦ КАК НовыйПоставщик,
	|	ВЫБОР
	|		КОГДА Т.ТекущееПравилоПоддержки = ЗНАЧЕНИЕ(Перечисление.ПравилаПоддержки.ПустаяСсылка)
	|			ТОГДА Т.НовоеПравилоПоддержки
	|		ИНАЧЕ Т.ТекущееПравилоПоддержки
	|	КОНЕЦ КАК НовоеПравилоПоддержки,
	|	ВЫБОР
	|		КОГДА Т.ТекущийОтветственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА Т.НовыйОтветственный
	|		ИНАЧЕ Т.ТекущийОтветственный
	|	КОНЕЦ КАК НовыйОтветственный
	|ИЗ
	|	ВТПоставщикиОбъектов КАК Т
	|ГДЕ
	|	(Т.ТекущийПоставщик = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ИЛИ Т.ТекущийОтветственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИзменяемыйОбъект = Выборка.ОбъектМетаданных.ПолучитьОбъект();
		
		ИзменяемыйОбъект.Поставщик 		  = Выборка.НовыйПоставщик;
		ИзменяемыйОбъект.ПравилоПоддержки = Выборка.НовоеПравилоПоддержки;
		ИзменяемыйОбъект.Ответственный 	  = Выборка.НовыйОтветственный;
		
		ИзменяемыйОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьИнформациюОРазделенииДанныхБиблиотек(Параметры) Экспорт 

	Если НЕ Параметры.ЭтоОсновноеХранилище 
		ИЛИ НЕ Параметры.ЗагружатьИнформациюОРазделенииДанныхБиблиотек Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроектыВключаемыеПроекты.Проект,
	|	ПроектыВключаемыеПроекты.Проект.ИмяКонфигурации КАК ИмяКонфигурации
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Параметры.Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИмяКонфигурации) Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяФайлаКонфигурации = Параметры.КаталогВыгрузкиКонфигурации + "Configuration.ParentConfigurations." + СокрЛП(ВыборкаДетальныеЗаписи.ИмяКонфигурации)+ ".cf";
		Файл = Новый Файл(ИмяФайлаКонфигурации);
		Если Файл.Существует() Тогда
			// Скопировать файл
			ИмяФайлаПриемника = ПолучитьИмяВременногоФайла("cf");
			КопироватьФайл(ИмяФайлаКонфигурации, ИмяФайлаПриемника);
			
			// Загрузка метаданных библиотеки и простановка признака разделенности объектов
			ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Загрузка метаданных проекта-библиотеки'"), НСтр("ru = 'Проект-библиотека'") + " " + Строка(ВыборкаДетальныеЗаписи.ИмяКонфигурации));
			ПроставитьПризнакРазделенностиОбъектов(Параметры.Проект, ВыборкаДетальныеЗаписи.Проект, ВыборкаДетальныеЗаписи.ИмяКонфигурации, ИмяФайлаПриемника); 
		КонецЕсли; 
	КонецЦикла;
	
	// Удаляем в конце все файлы
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации, "*.cf");

КонецПроцедуры

Процедура ПроставитьПризнакРазделенностиОбъектов(ЗагружаемыйПроект, ПроектБиблиотека, КонфигурацияПоставщика, ИмяФайлаКонфигурации) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ПроектБиблиотека) ИЛИ ТипЗнч(ПроектБиблиотека) <> Тип("СправочникСсылка.Проекты") Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаКонфигурации);
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПараметрыЗагрузкиМетаданных(ЗагружаемыйПроект);
	КодБиблиотеки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектБиблиотека, "Код");
	Параметры.Вставить("ПрефиксКаталога", 
		ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла("p_"+СокрЛП(Параметры.Код)+"_"+СокрЛП(КодБиблиотеки)));
	Параметры.Вставить(
		"КаталогВыгрузкиКонфигурации", 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
		+ ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути("v8_"+Параметры.ПрефиксКаталога+ "_cfgdump"));
	
	ИБДляЗагрузкиМетаданных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
		+ ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути("v8_"+Параметры.ПрефиксКаталога+ "_db");
	СоздатьКаталог(ИБДляЗагрузкиМетаданных);
		
	Файл = Новый Файл(ИБДляЗагрузкиМетаданных);
	БазаДанныхСуществует = Ложь;
	Если Файл.Существует() Тогда
		ФайлыБазыДанных = НайтиФайлы(ИБДляЗагрузкиМетаданных,"1Cv8.1CD");
		Если ФайлыБазыДанных.Количество() > 0 Тогда
			УдалитьФайлы(ИБДляЗагрузкиМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало создания временной базы данных'"));
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 CREATEINFOBASE File=""%СтрокаСоединенияИБДляЗагрузкиМетаданных%"""
				  + " /DumpResult ""%ИмяФайлаРезультатов%""";
				  
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединенияИБДляЗагрузкиМетаданных%", ИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
	
	СтрокаСоединения = " /F ""%СтрокаСоединения%""";
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%СтрокаСоединения%", ИБДляЗагрузкиМетаданных);
	Параметры.Вставить("СтрокаСоединенияИБДляЗагрузкиМетаданных", СтрокаСоединения);
	
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало обновления конфигурации из файла'"));
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
		| %СтрокаСоединенияИБДляЗагрузкиМетаданных% 
		| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
		| /LoadCfg ""%ИмяФайлаКонфигурации%"" 
		| /DumpResult ""%ИмяФайлаРезультатов%""";
		
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%", Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%", "");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%", "");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаКонфигурации%", ИмяФайлаКонфигурации);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание обновления конфигурации из файла'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
	
	УдалитьФайлы(ИмяФайлаКонфигурации);
	
	// Проверить успешность выполнения
	Если КодВозврата <> 0 Тогда
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При загрузке метаданных возникли ошибки (см. Журнал регистрации).
			|Загрузке конфигурации поставщика во временную базу закончилась неудачей.'");
	КонецЕсли;
	
	Параметры.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных", "");
	Параметры.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных", "");
	ВыполнитьВыгрузкуКонфигурацииВXML(Параметры);
	
	ОбщиеОбъектыМетаданных = Новый СписокЗначений;
	
	// Чтение XML-файла общего реквизита ОбластьДанныхОсновныеДанные 
	Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации + "CommonAttribute.ОбластьДанныхОсновныеДанные" + ".xml");
	Если НЕ Файл.Существует() Тогда
		УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации);
		УдалитьФайлы(ИБДляЗагрузкиМетаданных);
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Параметры.КаталогВыгрузкиКонфигурации + "CommonAttribute.ОбластьДанныхОсновныеДанные" + ".xml");
	
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Для Каждого Элемент Из Данные.CommonAttribute.Properties.Content.Item Цикл
		Если Элемент.Use = "DontUse" Тогда
			ОбщиеОбъектыМетаданных.Добавить(Элемент.Metadata);
		КонецЕсли;
	КонецЦикла;
	
	// Чтение XML-файла общего реквизита ОбластьДанныхВспомогательныеДанные 
	Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации + "CommonAttribute.ОбластьДанныхВспомогательныеДанные" + ".xml");
	Если НЕ Файл.Существует() Тогда
		УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации);
		УдалитьФайлы(ИБДляЗагрузкиМетаданных);
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Параметры.КаталогВыгрузкиКонфигурации + "CommonAttribute.ОбластьДанныхВспомогательныеДанные" + ".xml");
	
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Для Каждого Элемент Из Данные.CommonAttribute.Properties.Content.Item Цикл
		Если Элемент.Use = "Use" Тогда
			НайденныйОбъект = ОбщиеОбъектыМетаданных.НайтиПоЗначению(Элемент.Metadata);
			Если НайденныйОбъект <> Неопределено Тогда
			    ОбщиеОбъектыМетаданных.Удалить(НайденныйОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивUuidОбщихОбъектов = Новый Массив;
	Для Каждого Объект Из ОбщиеОбъектыМетаданных Цикл
		ИмяОбъектаМетаданных = Объект.Значение;
		
		Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации + ИмяОбъектаМетаданных + ".xml");
		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(Параметры.КаталогВыгрузкиКонфигурации + ИмяОбъектаМетаданных + ".xml");
		
		Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
		КлассОбъекта = Лев(ИмяОбъектаМетаданных, Найти(ИмяОбъектаМетаданных, ".") - 1);
		МассивUuidОбщихОбъектов.Добавить(Данные[КлассОбъекта].uuid);
	КонецЦикла;
	
	ДоступныеПравилаПоддержки = Новый Массив;
	ДоступныеПравилаПоддержки.Добавить(Перечисления.ПравилаПоддержки.НеРедактируется);
	ДоступныеПравилаПоддержки.Добавить(Перечисления.ПравилаПоддержки.РедактируетсяССохранениемПоддержки);
	
	ВозможныеКлассыРазделяемыхОбъектов = Новый Массив;
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("Константы");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("Справочники");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("Документы");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("ПланыВидовХарактеристик");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("ПланыСчетов");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("ПланыВидовРасчета");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("БизнесПроцессы");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("Задачи");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("РегистрыСведений");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("РегистрыНакопления");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("РегистрыБухгалтерии");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("РегистрыРасчета");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("ПланыОбмена");
	ВозможныеКлассыРазделяемыхОбъектов.Добавить("РегламентныеЗадания");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПоддержки.Проект,
	               |	НастройкиПоддержки.ОбъектМетаданных,
	               |	НастройкиПоддержки.КонфигурацияПоставщика,
	               |	НастройкиПоддержки.ПравилоПоддержки,
	               |	НастройкиПоддержки.ОбъектПоставщика,
	               |	ИСТИНА КАК НовоеЗначениеРазделения
	               |ПОМЕСТИТЬ ОбъектыМетаданныхБиблиотеки
	               |ИЗ
	               |	РегистрСведений.НастройкиПоддержки КАК НастройкиПоддержки
	               |ГДЕ
	               |	НастройкиПоддержки.Проект = &ЗагружаемыйПроект
	               |	И НастройкиПоддержки.КонфигурацияПоставщика = &КонфигурацияПоставщика
	               |	И НастройкиПоддержки.ОбъектПоставщика В(&МассивUuid)
	               |	И НастройкиПоддержки.ПравилоПоддержки В(&ДоступныеПравилаПоддержки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкиПоддержки.Проект,
	               |	НастройкиПоддержки.ОбъектМетаданных,
	               |	НастройкиПоддержки.ОбъектМетаданных.Родитель.Имя КАК ИмяКласса,
	               |	НастройкиПоддержки.КонфигурацияПоставщика,
	               |	НастройкиПоддержки.ПравилоПоддержки,
	               |	НастройкиПоддержки.ОбъектМетаданных.НеразделенныеДанные КАК СтароеЗначениеРазделения,
	               |	ЕСТЬNULL(ОбъектыМетаданныхБиблиотеки.НовоеЗначениеРазделения, ЛОЖЬ) КАК НовоеЗначениеРазделения
	               |ИЗ
	               |	РегистрСведений.НастройкиПоддержки КАК НастройкиПоддержки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыМетаданныхБиблиотеки КАК ОбъектыМетаданныхБиблиотеки
	               |		ПО НастройкиПоддержки.ОбъектМетаданных = ОбъектыМетаданныхБиблиотеки.ОбъектМетаданных
	               |ГДЕ
	               |	НастройкиПоддержки.Проект = &ЗагружаемыйПроект
	               |	И НастройкиПоддержки.ОбъектМетаданных.Родитель.Имя В (&ВозможныеКлассыРазделяемыхОбъектов)
	               |	И НастройкиПоддержки.КонфигурацияПоставщика = &КонфигурацияПоставщика
	               |	И НастройкиПоддержки.ПравилоПоддержки В(&ДоступныеПравилаПоддержки)";
				   
	Запрос.УстановитьПараметр("МассивUuid", 						МассивUuidОбщихОбъектов);
	Запрос.УстановитьПараметр("ЗагружаемыйПроект", 					ЗагружаемыйПроект);
	Запрос.УстановитьПараметр("КонфигурацияПоставщика",				КонфигурацияПоставщика);
	Запрос.УстановитьПараметр("ДоступныеПравилаПоддержки", 			ДоступныеПравилаПоддержки);
	Запрос.УстановитьПараметр("ВозможныеКлассыРазделяемыхОбъектов", ВозможныеКлассыРазделяемыхОбъектов);
			
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Если ТипЗнч(РезультатЗапроса.ОбъектМетаданных) = Тип("СправочникСсылка.ОбъектыМетаданных") 
			И (РезультатЗапроса.НовоеЗначениеРазделения <> РезультатЗапроса.СтароеЗначениеРазделения) Тогда
				РазделяемыйОбъект = РезультатЗапроса.ОбъектМетаданных.ПолучитьОбъект();
				РазделяемыйОбъект.НеразделенныеДанные = РезультатЗапроса.НовоеЗначениеРазделения;
				РазделяемыйОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало удаления временных файлов'"));
	
	// Удаляем в конце все файлы
	УдалитьФайлы(Параметры.КаталогВыгрузкиКонфигурации);
	УдалитьФайлы(ИБДляЗагрузкиМетаданных);
	
КонецПроцедуры

Процедура ОчиститьИзмененияМетаданныхПоВетке(Ветка) Экспорт
	НаборЗаписей = РегистрыСведений.ИзмененияВВетках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ветка.Установить(Ветка);
	НаборЗаписей.Записать(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостояниеЗагрузкиМетаданныхВВетках.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ветка = Ветка;
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

Процедура ЗагрузитьИзмененияМетаданныхИзТекста(ОбъектыМетаданных, ТехническийПроектВетка, ТекстФайла, ПрисоединенныйФайл, Отказ, ДопПараметры = Неопределено) Экспорт
	ТекстПодсистема = НСтр("ru = 'Подсистема.'");
	
	Если ПустаяСтрока(ТекстФайла) Тогда
		ТекстОшибки = НСтр("ru = 'Файл %ИмяФайла% пустой.'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИмяФайла%",ПрисоединенныйФайл);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		
		Возврат;
	КонецЕсли;
	
	ПризнакУдален = "- <--";
	ПризнакНовый  = "- -->";
	
	// Переопределение, если изменен порядок сравнения основной конфигурации и поставщика
	ИндексПоискаПризнакаНовый = Найти(ТекстФайла,"Объект присутствует только в основной конфигурации");
	Если ИндексПоискаПризнакаНовый<>0 Тогда
		ПризнакНовый = "- " + Сред(ТекстФайла, ИндексПоискаПризнакаНовый - 5, 3);
	КонецЕсли;
	ИндексПоискаПризнакаУдален = Найти(ТекстФайла,"Объект присутствует только в конфигурации поставщика");
	Если ИндексПоискаПризнакаУдален<>0 Тогда
		ПризнакУдален = "- " + Сред(ТекстФайла, ИндексПоискаПризнакаУдален - 5, 3);
	КонецЕсли;
	
	ИндексНачалаФайла = Найти(ТекстФайла,"- ***Конфигурация");
		
	Если ИндексНачалаФайла = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Файл %ИмяФайла% не является файлом сравнения конфигураций.'");
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИмяФайла%",ПрисоединенныйФайл);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,,Отказ);
		
		Возврат;
	КонецЕсли;
	
	ТекстФайла = Сред(ТекстФайла,ИндексНачалаФайла - 1);
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстФайла, Символы.ПС, Ложь);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТехническийПроектТекст = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТехническийПроектВетка, "Владелец");
	СтрокаТекст = МассивСтрок[0];
	Пока СтрокаТекст <> Неопределено Цикл
		
		ВидИзменений = ОпределитьВидИзменений(СтрокаТекст, ПризнакУдален, ПризнакНовый);
		Если ВидИзменений.Свойство("Строка") 
			И Лев(ВидИзменений.Строка, СтрДлина(ТекстПодсистема)) = ТекстПодсистема Тогда
			ВидИзменений = ОпределитьВидИзмененийПодсистемы(СтрокаТекст, МассивСтрок, ПризнакУдален, ПризнакНовый, ТекстПодсистема);
		КонецЕсли; 
		
		Если ВидИзменений.Изменен Тогда
			СтрокаТекст = ОбработкаИзмененныхОбъектов(ВидИзменений.Строка,МассивСтрок,ТехническийПроектТекст, ТекстПодсистема, ОбъектыМетаданных);
		ИначеЕсли ВидИзменений.Новый Или ВидИзменений.Удален Тогда
			СтрокаТекст = ОбработкаНовыхУдаленныхОбъектов(ВидИзменений.Строка,МассивСтрок,ТехническийПроектТекст,ВидИзменений.Новый, ОбъектыМетаданных);
		Иначе
			СтрокаТекст = ПолучитьСледующуюСтроку(МассивСтрок);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаОбъектовМетаданных

// Читает свойства и свойства подчиненных объектов для загрузки
Процедура ПрочитатьСвойстваИПодчиненныеОбъекты(Параметры, ОбъектРодитель, Коллекция, КлассОбъекта, uuidРодитель)

	ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[КлассОбъекта];
	
	Если НЕ ОбъектРодитель.Свойство("uuid") ИЛИ НЕ ЗначениеЗаполнено(ОбъектРодитель.uuid) Тогда
		ОбъектРодитель.Вставить("uuid", Коллекция.uuid);
	КонецЕсли; 
	ОбъектРодитель.Вставить("uuidРодитель", uuidРодитель);
	ОбъектРодитель.Вставить("КлассОбъекта", КлассОбъекта);
	
	ОбъектРодитель.Вставить("Код", НовыйКодМетаданных(Параметры, ОбъектРодитель));
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("Properties") Тогда
		
		Свойства = Новый Структура;
		
		КоллекцияСвойств = Коллекция.Properties.Свойства();
		Для каждого Свойство Из ПараметрыОбъекта.Properties Цикл
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				Свойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Если Свойство.Ключ = "HierarchyType" 
				И (КоллекцияСвойств.Получить("Hierarchical") = Неопределено
				ИЛИ ВРег(Коллекция.Properties["Hierarchical"]) = "FALSE") Тогда
			
				Свойства.Вставить(Свойство.Значение, "");
				Продолжить;
			
			КонецЕсли;
			
			Значение = Коллекция.Properties[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				Свойства.Вставить(Свойство.Значение, Значение);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЗначений.Добавить(ЭлементЗначения);
					КонецЕсли; 
				КонецЦикла;
				
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено 
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.1/data/core" Тогда
				// Анализ многоязыковых строк
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Если Свойство.Ключ = "Synonym" Тогда
						СоотвествиеПоЯзыкам = Новый Соответствие;
						Для каждого item Из Значение.item Цикл
							СоотвествиеПоЯзыкам.Вставить(item.lang, item.Content);
						КонецЦикла;
						Свойства.Вставить(Свойство.Значение,СоотвествиеПоЯзыкам);
					Иначе
						Для каждого item Из Значение.item Цикл
							Если item.lang = Параметры.КодЯзыкаЗагрузки Тогда
								Свойства.Вставить(Свойство.Значение, item.Content);
								Прервать;
							КонецЕсли; 
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли Значение.item.lang = Параметры.КодЯзыкаЗагрузки Тогда
					Свойства.Вставить(Свойство.Значение, Значение.item.Content);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено 
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.3/xcf/readable" Тогда
				// Анализ 
				МассивЗначений = Новый Массив;
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если ТипЗнч(item) = Тип("Строка") Тогда
							МассивЗначений.Добавить(item);
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли ТипЗнч(Значение.item) = Тип("Строка") Тогда
					МассивЗначений.Добавить(Значение.item);
				КонецЕсли;
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("Type") <> Неопределено 
				ИЛИ Значение.Свойства().Получить("TypeSet") <> Неопределено Тогда
				// Анализ типов
				Типы = ПрочитатьТипыЗначения(Значение, ОбъектРодитель.КлассОбъекта, Свойство.Значение);
				Свойства.Вставить(Свойство.Значение, Типы);
			Иначе
				
				Свойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("Свойства", Свойства);
		
	КонецЕсли;
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("ExtendedProperties") Тогда
		
		РасширенныеСвойства = Новый Структура;
		
		КоллекцияСвойств = Коллекция.Properties.Свойства();
		Для каждого Свойство Из ПараметрыОбъекта.ExtendedProperties Цикл
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция.Properties[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				РасширенныеСвойства.Вставить(Свойство.Значение, Значение);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЗначений.Добавить(ЭлементЗначения);
					КонецЕсли; 
				КонецЦикла;
				
				РасширенныеСвойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.1/data/core" Тогда
				// Анализ многоязыковых строк
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если item.lang = Параметры.КодЯзыкаЗагрузки Тогда
							РасширенныеСвойства.Вставить(Свойство.Значение, item.Content);
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли Значение.item.lang = Параметры.КодЯзыкаЗагрузки Тогда
					РасширенныеСвойства.Вставить(Свойство.Значение, Значение.item.Content);
				Иначе
					РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено 
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.3/xcf/readable" Тогда
				// Анализ 
				МассивЗначений = Новый Массив;
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если ТипЗнч(item) = Тип("Строка") Тогда
							МассивЗначений.Добавить(item);
						ИначеЕсли item.Свойства().Получить("Metadata")<> Неопределено И ТипЗнч(item.Metadata) = Тип("Строка") Тогда
							МассивЗначений.Добавить(item.Metadata);
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли ТипЗнч(Значение.item) = Тип("Строка") Тогда
					МассивЗначений.Добавить(Значение.item);
				КонецЕсли;
				РасширенныеСвойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("Type") <> Неопределено 
				ИЛИ Значение.Свойства().Получить("TypeSet") <> Неопределено Тогда
				// Анализ типов
				Типы = ПрочитатьТипыЗначения(Значение, ОбъектРодитель.КлассОбъекта, Свойство.Значение);
				РасширенныеСвойства.Вставить(Свойство.Значение, Типы);
			ИначеЕсли Значение.Свойства().Получить("Object") <> Неопределено Тогда
				Если ТипЗнч(Значение.Object) = Тип("СписокXDTO") Тогда
					МассивОбъектов = Новый Массив;
					Для каждого Object Из Значение.Object Цикл
						МассивОбъектов.Добавить(Object);
					КонецЦикла; 
					РасширенныеСвойства.Вставить(Свойство.Значение, МассивОбъектов);
				ИначеЕсли ТипЗнч(Значение.Object) = Тип("Строка") Тогда
					РасширенныеСвойства.Вставить(Свойство.Значение, Значение.Object);
				Иначе
					РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли;
			Иначе
				
				РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("РасширенныеСвойства", РасширенныеСвойства);
		
	КонецЕсли;
	
	// Читаем рекурсивно подчиненные объекты, которые не хранятся как файлы
	Если ПараметрыОбъекта.Свойство("ChildObjects") Тогда
		
		ПодчиненныеОбъекты = Новый Массив;
		
		Для каждого ПодчиненныйОбъект Из ПараметрыОбъекта.ChildObjects Цикл
			
			Если Коллекция.Свойства().Получить("ChildObjects") = Неопределено 
				ИЛИ Коллекция.ChildObjects.Свойства().Получить(ПодчиненныйОбъект) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция.ChildObjects[ПодчиненныйОбъект];
			// Если список или одно значение
			Если ТипЗнч(Значение)= Тип("ОбъектXDTO") Тогда
				
				Объект = Новый Структура;
				ПрочитатьСвойстваИПодчиненныеОбъекты(
					Параметры, 
					Объект, 
					Значение, 
					ПодчиненныйОбъект, 
					ОбъектРодитель.uuid);
				ПодчиненныеОбъекты.Добавить(Объект);
				
			ИначеЕсли ТипЗнч(Значение)= Тип("СписокXDTO") Тогда
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Объект = Новый Структура;
					ПрочитатьСвойстваИПодчиненныеОбъекты(
						Параметры, 
						Объект, 
						ЭлементЗначения, 
						ПодчиненныйОбъект, 
						ОбъектРодитель.uuid);
					ПодчиненныеОбъекты.Добавить(Объект);
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("ПодчиненныеОбъекты", ПодчиненныеОбъекты);
		
	КонецЕсли;
	
	// Обработка стандартных реквизитов
	Если ПараметрыОбъекта.Свойство("StandardAttributes") Тогда
		Если НЕ ОбъектРодитель.Свойство("ПодчиненныеОбъекты") Тогда
			ОбъектРодитель.Вставить("ПодчиненныеОбъекты", Новый Массив);
		КонецЕсли;
		
		КоллекцияСтандартныхРеквизитов = Новый Массив;
		Если Коллекция.Properties.Свойства().Получить("StandardAttributes") = Неопределено Тогда
			// Загружаем стандартные настройки
			 КоллекцияСтандартныхРеквизитов = СтандартныеРеквизитыПоТипу(КлассОбъекта);
		ИначеЕсли Коллекция.Properties.StandardAttributes.Свойства().Получить("StandardAttribute") <> Неопределено
			И ТипЗнч(Коллекция.Properties.StandardAttributes.StandardAttribute) = Тип("СписокXDTO") Тогда
			КоллекцияСтандартныхРеквизитов = Коллекция.Properties.StandardAttributes.StandardAttribute;
		ИначеЕсли Коллекция.Properties.StandardAttributes.Свойства().Получить("StandardAttribute") <> Неопределено
			И ПараметрыОбъекта.StandardAttributes.Свойство(Коллекция.Properties.StandardAttributes.StandardAttribute.name) Тогда
			КоллекцияСтандартныхРеквизитов.Добавить(Коллекция.Properties.StandardAttributes.StandardAttribute);
		ИначеЕсли Коллекция.Properties.StandardAttributes.Свойства().Получить("Attribute") <> Неопределено
			И ТипЗнч(Коллекция.Properties.StandardAttributes.Attribute) = Тип("СписокXDTO") Тогда
			КоллекцияСтандартныхРеквизитов = Коллекция.Properties.StandardAttributes.Attribute;
		ИначеЕсли Коллекция.Properties.StandardAttributes.Свойства().Получить("Attribute") <> Неопределено
			И ПараметрыОбъекта.StandardAttributes.Свойство(Коллекция.Properties.StandardAttributes.Attribute.name) Тогда
			КоллекцияСтандартныхРеквизитов.Добавить(Коллекция.Properties.StandardAttributes.dAttribute);
		КонецЕсли;
		Для каждого StandardAttribute Из КоллекцияСтандартныхРеквизитов Цикл
			
			Если НЕ ПараметрыОбъекта.StandardAttributes.Свойство(StandardAttribute["name"]) Тогда
				Продолжить;
			КонецЕсли;
			
			Типы = Новый Массив;
			Если StandardAttribute["name"] = "Code" Тогда
				Попытка
					ДлинаКода = Число(Коллекция.Properties.CodeLength);
					Если ДлинаКода = 0 Тогда
						Продолжить;
					КонецЕсли; 
					Если Коллекция.Properties.Свойства().Получить("CodeType") <> Неопределено 
						И ВРег(Коллекция.Properties.CodeType) = "NUMBER" Тогда
						Типы.Добавить("Число "+ДлинаКода);
					Иначе
						Типы.Добавить("Строка "+ДлинаКода);
					КонецЕсли; 
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "Description" Тогда
				Попытка
					ДлинаНаименования = Число(Коллекция.Properties.DescriptionLength);
					Если ДлинаНаименования = 0 Тогда
						Продолжить;
					КонецЕсли; 
					Типы.Добавить("Строка "+ДлинаНаименования);
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "Owner" Тогда
				Попытка
					Если Коллекция.Properties.Owners.Свойства().Получить("Item")= Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					Если ТипЗнч(Коллекция.Properties.Owners.Item) = Тип("СписокXDTO") Тогда
						Для каждого Type Из Коллекция.Properties.Owners.Item Цикл
							Типы.Добавить(Type);
						КонецЦикла; 
					Иначе
						Типы.Добавить(Коллекция.Properties.Owners.Item);
					КонецЕсли; 
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "Parent" Тогда
				Попытка
					Иерархический = Коллекция.Properties.Hierarchical;
					Если НЕ ПредопределенныеЗначенияСтроковыхКонстант(Иерархический, "StandardAttribute") Тогда
						Продолжить;
					КонецЕсли; 
					Типы.Добавить(ОбъектРодитель.ИмяФайла);
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "CalculationType" Тогда
				Если ТипЗнч(Коллекция.Properties.ChartOfCalculationTypes) = Тип("СписокXDTO") Тогда
					Для каждого Type Из Коллекция.Properties.ChartOfCalculationTypes Цикл
						Типы.Добавить(Type);
					КонецЦикла; 
				Иначе
					Типы.Добавить(Коллекция.Properties.ChartOfCalculationTypes);
				КонецЕсли; 
			ИначеЕсли StandardAttribute["name"] = "Recorder" Тогда
				Если Коллекция.Properties.Свойства().Получить("WriteMode") <> Неопределено 
					И ВРег(Коллекция.Properties.WriteMode) = "INDEPENDENT" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли StandardAttribute["name"] = "Period" Тогда
				Если Коллекция.Properties.Свойства().Получить("InformationRegisterPeriodicity") <> Неопределено 
					И ВРег(Коллекция.Properties.InformationRegisterPeriodicity) = "NONPERIODICAL" Тогда
					Продолжить;
				КонецЕсли;
				Типы.Добавить("Дата");
			ИначеЕсли StandardAttribute["name"] = "Date" И КлассОбъекта = "Document" Тогда
				Типы.Добавить("Дата и время");
			ИначеЕсли StandardAttribute["name"] = "Date" 
				ИЛИ StandardAttribute["name"] = "RegistrationPeriod" Тогда
				Типы.Добавить("Дата");
			ИначеЕсли StandardAttribute["name"] = "Number" И КлассОбъекта <> "DocumentJournal" Тогда
				Попытка
					ДлинаНомера = Число(Коллекция.Properties.NumberLength);
					Если ДлинаНомера = 0 Тогда
						Продолжить;
					КонецЕсли;  
					Если Коллекция.Properties.Свойства().Получить("NumberType") <> Неопределено 
						И ВРег(Коллекция.Properties.NumberType) = "NUMBER" Тогда
						Типы.Добавить("Число "+ДлинаНомера);
					Иначе
						Типы.Добавить("Строка "+ДлинаНомера);
					КонецЕсли;
				Исключение
					Продолжить;
				КонецПопытки; 
			КонецЕсли;
			
			Объект = Новый Структура;
			ПрочитатьСвойстваСтандартныхРеквизитов(
				Параметры, 
				Объект, 
				StandardAttribute, 
				"StandardAttribute", 
				ОбъектРодитель.uuid,
				Типы);
			ОбъектРодитель.ПодчиненныеОбъекты.Добавить(Объект);
		КонецЦикла;
	
	КонецЕсли; 
	
	Если КлассОбъекта = "Constant" Тогда
	
		Объект = Новый Структура;
		Объект.Вставить("uuid", ОбъектРодитель.uuid+ "_Value");
		Объект.Вставить("uuidРодитель", ОбъектРодитель.uuid);
		Объект.Вставить("КлассОбъекта", "ConstantValue");
		
		Объект.Вставить("Код", НовыйКодМетаданных(Параметры, Объект));
		
		Свойства = Новый Структура;
		Свойства.Вставить("Имя", "Value");
		КоллекцияСвойств = Коллекция.Properties.Свойства();
		
		Если КоллекцияСвойств.Получить("ToolTip") <> Неопределено И ТипЗнч(Коллекция.Properties["ToolTip"]) = Тип("Строка") Тогда
			Свойства.Вставить("Подсказка", Коллекция.Properties["ToolTip"]);
		Иначе
			Свойства.Вставить("Подсказка", Неопределено);
		КонецЕсли;
		Если КоллекцияСвойств.Получить("FillChecking") <> Неопределено Тогда
			Свойства.Вставить("ПроверкаЗаполнения", Коллекция.Properties["FillChecking"]);
		КонецЕсли;
		Типы = Новый Массив;
		Если КоллекцияСвойств.Получить("Type") <> Неопределено Тогда
			Типы = ПрочитатьТипыЗначения(Коллекция.Properties["Type"], Объект.КлассОбъекта, "ТипыЗначенияРеквизита");
		КонецЕсли;
		Свойства.Вставить("ТипыЗначенияРеквизита", Типы);
		
		Объект.Вставить("Свойства", Свойства);
		
		Если НЕ ОбъектРодитель.Свойство("ПодчиненныеОбъекты") Тогда
			ОбъектРодитель.Вставить("ПодчиненныеОбъекты", Новый Массив);
		КонецЕсли; 
		
		ОбъектРодитель.ПодчиненныеОбъекты.Добавить(Объект);
		
	КонецЕсли;
	
	Если КлассОбъекта = "SessionParameter" Тогда
	
		Объект = Новый Структура;
		Объект.Вставить("uuid", ОбъектРодитель.uuid+ "_Value");
		Объект.Вставить("uuidРодитель", ОбъектРодитель.uuid);
		Объект.Вставить("КлассОбъекта", "SessionParameterValue");
		
		Объект.Вставить("Код", НовыйКодМетаданных(Параметры, Объект));
		
		Свойства = Новый Структура;
		Свойства.Вставить("Имя", "Value");
		Свойства.Вставить("ПроверкаЗаполнения", Перечисления.ВариантыПроверкиЗаполнения.НеПроверять);
		КоллекцияСвойств = Коллекция.Properties.Свойства();
		
		Типы = Новый Массив;
		Если КоллекцияСвойств.Получить("Type") <> Неопределено Тогда
			Типы = ПрочитатьТипыЗначения(Коллекция.Properties["Type"], Объект.КлассОбъекта, "ТипыЗначенияРеквизита");
		КонецЕсли;
		Свойства.Вставить("ТипыЗначенияРеквизита", Типы);
		
		Объект.Вставить("Свойства", Свойства);
		
		Если НЕ ОбъектРодитель.Свойство("ПодчиненныеОбъекты") Тогда
			ОбъектРодитель.Вставить("ПодчиненныеОбъекты", Новый Массив);
		КонецЕсли; 
		
		ОбъектРодитель.ПодчиненныеОбъекты.Добавить(Объект);
		
	КонецЕсли;
	
	// Загружаем типы форм
	Если ПараметрыОбъекта.Свойство("ChildObjectsFiles") 
		И ПараметрыОбъекта.ChildObjectsFiles.Найти("Form") <> Неопределено Тогда
		
		КоллекцияСвойств = Коллекция.Properties.Свойства();
		
		ТипыФорм = Новый СписокЗначений;
		
		Для каждого КлючИЗначение Из СтруктураТиповФорм() Цикл
		
			Если КоллекцияСвойств.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция.Properties[КлючИЗначение.Ключ];
			Если ТипЗнч(Значение) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			ТипыФорм.Добавить(КлючИЗначение.Значение, Значение);
			
		КонецЦикла; 
		
		ТипыФорм.СортироватьПоПредставлению ();
		
		Параметры.ТипыФормОбъектов.Вставить(ОбъектРодитель.uuid, ТипыФорм);
		
	КонецЕсли;
	
КонецПроцедуры

// Читает свойства стандартных реквизитов для загрузки
Процедура ПрочитатьСвойстваСтандартныхРеквизитов(Параметры, ОбъектРодитель, Коллекция, КлассОбъекта, uuidРодитель, Типы)

	ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[КлассОбъекта];
	
	ОбъектРодитель.Вставить("uuid", uuidРодитель+ "_"+Коллекция["name"]);
	ОбъектРодитель.Вставить("uuidРодитель", uuidРодитель);
	ОбъектРодитель.Вставить("КлассОбъекта", КлассОбъекта);
	
	ОбъектРодитель.Вставить("Код", НовыйКодМетаданных(Параметры, ОбъектРодитель));
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("Properties") Тогда
		
		Свойства = Новый Структура;
		
		Если ТипЗнч(Коллекция) = Тип("ОбъектXDTO") Тогда
			КоллекцияСвойств = Коллекция.Свойства();
		Иначе
			КоллекцияСвойств = Коллекция;
		КонецЕсли; 
		
		Для каждого Свойство Из ПараметрыОбъекта.Properties Цикл
			
			Если Свойство.Ключ = "Type" Тогда
				Свойства.Вставить(Свойство.Значение, Типы);
				Продолжить;
			КонецЕсли;
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				Свойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				Свойства.Вставить(Свойство.Значение, Значение);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЗначений.Добавить(ЭлементЗначения);
					КонецЕсли; 
				КонецЦикла;
				
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Получить("item") <> Неопределено Тогда
				// Анализ многоязыковых строк
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Если Свойство.Ключ = "Synonym" Тогда
						СоотвествиеПоЯзыкам = Новый Соответствие;
						Для каждого item Из Значение.item Цикл
							СоотвествиеПоЯзыкам.Вставить(item.lang, item.Content);
						КонецЦикла;
						Свойства.Вставить(Свойство.Значение,СоотвествиеПоЯзыкам);
					Иначе
						Для каждого item Из Значение.item Цикл
							Если item.lang = Параметры.КодЯзыкаЗагрузки Тогда
								Свойства.Вставить(Свойство.Значение, item.Content);
								Прервать;
							КонецЕсли; 
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли Значение.item.lang = Параметры.КодЯзыкаЗагрузки Тогда
					Свойства.Вставить(Свойство.Значение, Значение.item.Content);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Получить("Type") <> Неопределено Тогда
				// Анализ типов
				Если ТипЗнч(Значение.Type) = Тип("СписокXDTO") Тогда
					Типы = Новый Массив;
					Для каждого Type Из Значение.Type Цикл
						Типы.Добавить(Type);
					КонецЦикла; 
					Свойства.Вставить(Свойство.Значение, Типы);
				ИначеЕсли ТипЗнч(Значение.Type) = Тип("Строка") Тогда
					Свойства.Вставить(Свойство.Значение, Значение.Type);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли;
			Иначе
				
				Свойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("Свойства", Свойства);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьТипыЗначения(Значение, КлассОбъекта, ИмяСвойства = "")

	Типы = Новый Массив;
	Если Значение.Свойства().Получить("Type") <> Неопределено 
		И ТипЗнч(Значение.Type) = Тип("СписокXDTO") Тогда
		Для каждого Type Из Значение.Type Цикл
			Тип = ПредопределенныеЗначенияСтроковыхКонстант(Type, КлассОбъекта, ИмяСвойства);
			Если Тип = "Строка" И Значение.Свойства().Получить("StringQualifiers") <> Неопределено Тогда
				Тип = Тип + " " + ?(Значение.StringQualifiers.Length = 0, "неогр.", Значение.StringQualifiers.Length);
			ИначеЕсли Тип = "Дата" И Значение.Свойства().Получить("DateQualifiers") <> Неопределено Тогда
				Если Значение.DateQualifiers.DateFractions = "Time" Тогда
					Тип = "Время";
				ИначеЕсли Значение.DateQualifiers.DateFractions = "DateTime" Тогда
					Тип = Тип + " и время";
				КонецЕсли; 
			ИначеЕсли Тип = "Число" И Значение.Свойства().Получить("NumberQualifiers") <> Неопределено Тогда
				Тип = Тип + " " + Значение.NumberQualifiers.Digits + "." + Значение.NumberQualifiers.FractionDigits + ?(Значение.NumberQualifiers.AllowedSign = "Nonnegative", " неотр.", "");
			КонецЕсли; 
			Типы.Добавить(Тип);
		КонецЦикла; 
	ИначеЕсли Значение.Свойства().Получить("Type") <> Неопределено 
		И ТипЗнч(Значение.Type) = Тип("Строка") Тогда
		Тип = ПредопределенныеЗначенияСтроковыхКонстант(Значение.Type, КлассОбъекта, ИмяСвойства);
		Если Тип = "Строка" И Значение.Свойства().Получить("StringQualifiers") <> Неопределено Тогда
			Тип = Тип + " " + Значение.StringQualifiers.Length;
		ИначеЕсли Тип = "Дата" И Значение.Свойства().Получить("DateQualifiers") <> Неопределено Тогда
			Если Значение.DateQualifiers.DateFractions = "Time" Тогда
				Тип = "Время";
			ИначеЕсли Значение.DateQualifiers.DateFractions = "DateTime" Тогда
				Тип = Тип + " и время";
			КонецЕсли; 
		ИначеЕсли Тип = "Число" И Значение.Свойства().Получить("NumberQualifiers") <> Неопределено Тогда
			Тип = Тип + " " + Значение.NumberQualifiers.Digits + "." + Значение.NumberQualifiers.FractionDigits + ?(Значение.NumberQualifiers.AllowedSign = "Nonnegative", " неотр.", "");
		КонецЕсли; 
		Типы.Добавить(Тип);
	ИначеЕсли Значение.Свойства().Получить("TypeSet") <> Неопределено 
		И ТипЗнч(Значение.TypeSet) = Тип("СписокXDTO") Тогда
		Для каждого TypeSet Из Значение.TypeSet Цикл
			Тип = ПредопределенныеЗначенияСтроковыхКонстант(TypeSet, КлассОбъекта, ИмяСвойства);
			Типы.Добавить(Тип);
		КонецЦикла; 
	ИначеЕсли Значение.Свойства().Получить("TypeSet") <> Неопределено 
		И ТипЗнч(Значение.TypeSet) = Тип("Строка") Тогда
		Тип = ПредопределенныеЗначенияСтроковыхКонстант(Значение.TypeSet, КлассОбъекта, ИмяСвойства);
		Типы.Добавить(Тип);
	КонецЕсли;
	
	Возврат Типы;
	
КонецФункции 
 
// Читает свойства и свойства подчиненных объектов для загрузки
Процедура ПрочитатьПредопределенныеДанные(Параметры, ОбъектРодитель, Коллекция, КлассОбъекта, uuidРодитель)

	ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[КлассОбъекта];
	
	Если НЕ ОбъектРодитель.Свойство("uuid") ИЛИ НЕ ЗначениеЗаполнено(ОбъектРодитель.uuid) Тогда
		ОбъектРодитель.Вставить("uuid", Коллекция.id);
	КонецЕсли; 
	ОбъектРодитель.Вставить("uuidРодитель", uuidРодитель);
	ОбъектРодитель.Вставить("КлассОбъекта", КлассОбъекта);
	
	ОбъектРодитель.Вставить("Код", НовыйКодМетаданных(Параметры, ОбъектРодитель));
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("Properties") Тогда
		
		Свойства = Новый Структура;
		
		КоллекцияСвойств = Коллекция.Свойства();
		Для каждого Свойство Из ПараметрыОбъекта.Properties Цикл
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				Свойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") 
				ИЛИ ТипЗнч(Значение) = Тип("Число")
				ИЛИ ТипЗнч(Значение) = Тип("Булево")
				ИЛИ ТипЗнч(Значение) = Тип("Дата") Тогда
				
				Свойства.Вставить(Свойство.Значение, Значение);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЗначений.Добавить(ЭлементЗначения);
					КонецЕсли; 
				КонецЦикла;
				
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено Тогда
				// Анализ многоязыковых строк
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Если Свойство.Ключ = "Synonym" Тогда
						СоотвествиеПоЯзыкам = Новый Соответствие;
						Для каждого item Из Значение.item Цикл
							СоотвествиеПоЯзыкам.Вставить(item.lang, item.Content);
						КонецЦикла;
						Свойства.Вставить(Свойство.Значение,СоотвествиеПоЯзыкам);
					Иначе
						Для каждого item Из Значение.item Цикл
							Если item.lang = Параметры.КодЯзыкаЗагрузки Тогда
								Свойства.Вставить(Свойство.Значение, item.Content);
								Прервать;
							КонецЕсли; 
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли Значение.item.lang = Параметры.КодЯзыкаЗагрузки Тогда
					Свойства.Вставить(Свойство.Значение, Значение.item.Content);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			Иначе
				
				Свойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("Свойства", Свойства);
		
	КонецЕсли;
	
	// Читаем рекурсивно подчиненные предопределенные элементы
	Если ПараметрыОбъекта.Свойство("ChildObjects") Тогда
		
		ПодчиненныеОбъекты = Новый Массив;
		
		Для каждого ПодчиненныйОбъект Из ПараметрыОбъекта.ChildObjects Цикл
			
			Если Коллекция.Свойства().Получить("ChildItems") = Неопределено 
				ИЛИ Коллекция.ChildItems.Свойства().Получить("Item") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция.ChildItems["Item"];
			// Если список или одно значение
			Если ТипЗнч(Значение)= Тип("ОбъектXDTO") Тогда
				
				Объект = Новый Структура;
				ПрочитатьПредопределенныеДанные(
					Параметры, 
					Объект, 
					Значение, 
					ПодчиненныйОбъект, 
					ОбъектРодитель.uuid);
				ПодчиненныеОбъекты.Добавить(Объект);
				
			ИначеЕсли ТипЗнч(Значение)= Тип("СписокXDTO") Тогда
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Объект = Новый Структура;
					ПрочитатьПредопределенныеДанные(
						Параметры, 
						Объект, 
						ЭлементЗначения, 
						ПодчиненныйОбъект, 
						ОбъектРодитель.uuid);
					ПодчиненныеОбъекты.Добавить(Объект);
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("ПодчиненныеОбъекты", ПодчиненныеОбъекты);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает расхождения загружаемых метаданных и существующих
Процедура ЗаписатьИзмененияМетаданных(Параметры, ОбъектМетаданных, ЗаписатьСЗаменойUuid = Ложь)

	Ссылка = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuid);
	Объект = Новый Структура("uuidРодитель, КлассОбъекта");
	ЗаполнитьЗначенияСвойств(Объект, ОбъектМетаданных);
	Если ОбъектМетаданных.Свойство("ИмяФайла") Тогда
		Объект.Вставить("ИмяФайла", ОбъектМетаданных.ИмяФайла);
	КонецЕсли;
	Если ОбъектМетаданных.Свойство("Свойства") И ОбъектМетаданных.Свойства.Свойство("Имя") Тогда
		Объект.Вставить("Имя", ОбъектМетаданных.Свойства.Имя);
	Иначе
		Объект.Вставить("Имя", "");
	КонецЕсли;
	Параметры.ОбъектыМетаданных.Вставить(ОбъектМетаданных.uuid, Объект);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
	
		// Поиск уже созданных объектов, и определяем возможность их обновления
		ПараметрыОбъекта = НайтиОбъектМетаданных(Параметры, ОбъектМетаданных, ЗаписатьСЗаменойUuid);
		
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Ссылка) И НЕ ПараметрыОбъекта.ОбновлятьСвойства Тогда
		
			Параметры.СсылкиМетаданных.Вставить(ОбъектМетаданных.uuid, ПараметрыОбъекта.Ссылка);
			
			Если ОбъектМетаданных.Свойство("ИмяФайла") Тогда
				ИмяКласса = ОбъектМетаданных.ИмяФайла;
			Иначе
				Родитель = ОбъектМетаданных.uuidРодитель;
				ИмяКласса = ОбъектМетаданных.КлассОбъекта + "."+ОбъектМетаданных.Свойства.Имя;
				
				Пока Истина Цикл
					ОбъектМетаданныхРодитель = Параметры.ОбъектыМетаданных.Получить(Родитель);
					Если ОбъектМетаданныхРодитель.Свойство("ИмяФайла") Тогда
						ИмяКласса = ОбъектМетаданныхРодитель.ИмяФайла + "." + ИмяКласса;
						Прервать;
					Иначе
						ИмяКласса = ОбъектМетаданныхРодитель.КлассОбъекта + "." + ОбъектМетаданныхРодитель.Имя +"." + ИмяКласса;
						Родитель = ОбъектМетаданныхРодитель.uuidРодитель;
					КонецЕсли; 
				КонецЦикла; 
			
			КонецЕсли; 
			
			Параметры.ТипыМетаданных.Вставить(ИмяКласса, ПараметрыОбъекта.Ссылка);
			
		ИначеЕсли ЗаписатьСЗаменойUuid ИЛИ ЗначениеЗаполнено(ПараметрыОбъекта.Ссылка) Тогда
			// Создаем объект или обновляем его свойства
			
			ПараметрыОбъекта.Ссылка = СоздатьОбновитьОбъектМетаданных(Параметры, ОбъектМетаданных, ПараметрыОбъекта.Ссылка);
			
			Параметры.СсылкиМетаданных.Вставить(ОбъектМетаданных.uuid, ПараметрыОбъекта.Ссылка);
			
			Если ОбъектМетаданных.Свойство("ИмяФайла") Тогда
				ИмяКласса = ОбъектМетаданных.ИмяФайла;
			Иначе
				Родитель = ОбъектМетаданных.uuidРодитель;
				ИмяКласса = ОбъектМетаданных.КлассОбъекта + "."+ОбъектМетаданных.Свойства.Имя;
				
				Пока Истина Цикл
					ОбъектМетаданныхРодитель = Параметры.ОбъектыМетаданных.Получить(Родитель);
					Если ОбъектМетаданныхРодитель.Свойство("ИмяФайла") Тогда
						ИмяКласса = ОбъектМетаданныхРодитель.ИмяФайла + "." + ИмяКласса;
						Прервать;
					Иначе
						ИмяКласса = ОбъектМетаданныхРодитель.КлассОбъекта + "." + ОбъектМетаданныхРодитель.Имя +"." + ИмяКласса;
						Родитель = ОбъектМетаданныхРодитель.uuidРодитель;
					КонецЕсли; 
				КонецЦикла; 
			
			КонецЕсли; 
			
			Параметры.ТипыМетаданных.Вставить(ИмяКласса, ПараметрыОбъекта.Ссылка);
			
		Иначе
			
			Параметры.НеНайденныеОбъектыМетаданных.Добавить(ОбъектМетаданных);
			
		КонецЕсли; 
		
		Если (ЗаписатьСЗаменойUuid 
			ИЛИ ЗначениеЗаполнено(ПараметрыОбъекта.Ссылка)) 
			И ОбъектМетаданных.Свойство("ПодчиненныеОбъекты") Тогда
			
			Для каждого ПодчиненныйОбъект Из ОбъектМетаданных.ПодчиненныеОбъекты Цикл
				
				ЗаписатьИзмененияМетаданных(Параметры, ПодчиненныйОбъект, ЗаписатьСЗаменойUuid);
				
			КонецЦикла; 
			
		КонецЕсли; 
	
	КонецЕсли;

КонецПроцедуры

Функция НайтиОбъектМетаданных(Параметры, ОбъектМетаданных, ИскатьВСуществующихUuid = Ложь)

	ПараметрыОбъекта = Новый Структура("Ссылка, ОбновлятьСвойства", Неопределено, Истина);
	
	Если ОбъектМетаданных.КлассОбъекта = "Configuration" Тогда // Корень конфигурации
	
		ПараметрыОбъекта = Новый Структура("Ссылка, ОбновлятьСвойства", Параметры.Проект, Ложь);
		Возврат ПараметрыОбъекта;
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "StandardAttribute"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Dimension"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Resource" 
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Column"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AccountingFlag"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AddressingAttribute" Тогда // Стандартный реквизит, измерение, ресурс, графа, признак учета, реквизит адресации
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = &ВидРеквизита
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Родитель.ВидРеквизита = &ВидРеквизитаРодителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = &ВидРеквизита
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ТаблицаПоиска.Родитель.ВидРеквизита = &ВидРеквизитаРодителя
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", ""));
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ПредопределенныеЗначенияСтроковыхКонстант(ОбъектМетаданных.Свойства.Имя, ОбъектМетаданных.КлассОбъекта, "Имя"));
		
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.ПустаяСсылка();
		ВидРеквизита = Перечисления.ВидыРеквизитов.ПустаяСсылка();
		
		Если ОбъектМетаданных.КлассОбъекта = "StandardAttribute" Тогда // Стандартный реквизит
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.СтандартныеРеквизиты;
			ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныйРеквизит;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Dimension" Тогда // Измерение
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.Измерения;
			ВидРеквизита = Перечисления.ВидыРеквизитов.Измерение;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Resource" Тогда // Ресурс
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.Ресурсы;
			ВидРеквизита = Перечисления.ВидыРеквизитов.Ресурс;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Column" Тогда // Графа
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.Графы;
			ВидРеквизита = Перечисления.ВидыРеквизитов.Графа;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AccountingFlag" Тогда // Признак учета
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.ПризнакиУчета;
			ВидРеквизита = Перечисления.ВидыРеквизитов.ПризнакУчета;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AddressingAttribute" Тогда // Реквизиты адресации
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.РеквизитыАдресации;
			ВидРеквизита = Перечисления.ВидыРеквизитов.РеквизитАдресации;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидРеквизитаРодителя", ВидРеквизитаРодителя);
		Запрос.УстановитьПараметр("ВидРеквизита", ВидРеквизита);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Attribute" Тогда // Реквизит
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ВЫБОР
		|			КОГДА &Родитель = НЕОПРЕДЕЛЕНО
		|					И ТаблицаПоиска.Родитель.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизиты)
		|				ТОГДА ИСТИНА
		|			КОГДА &Родитель <> НЕОПРЕДЕЛЕНО
		|					И ТаблицаПоиска.Родитель = &Родитель
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.РеквизитыОбъектовМетаданных") Тогда
			// Реквизит ТЧ
			Запрос.УстановитьПараметр("Родитель", Родитель);
			Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Владелец"));
		Иначе
			Запрос.УстановитьПараметр("Владелец", Родитель);
			Запрос.УстановитьПараметр("Родитель", Неопределено);
		КонецЕсли; 
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "TabularSection" Тогда // Табличная часть
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.ТабличнаяЧасть)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.ТабличнаяЧасть)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		Запрос.УстановитьПараметр("Родитель", РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных));
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "ConstantValue" 
		ИЛИ ОбъектМетаданных.КлассОбъекта = "SessionParameterValue" Тогда // Значение константы или параметра сеанса
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", ""));
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ПредопределенныеЗначенияСтроковыхКонстант(ОбъектМетаданных.Свойства.Имя, ОбъектМетаданных.КлассОбъекта, "Имя"));
		
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Command" Тогда // Комманды объекта
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.КомандыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.КомандыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Form" Тогда // Комманды объекта
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ФормыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ФормыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Template" Тогда // Макет объекта
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.МакетыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.МакетыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "PredefinedData" Тогда // Предопределенные данные
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
			Запрос.УстановитьПараметр("Владелец", Родитель);
		Иначе
			Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Владелец"));
		КонецЕсли; 
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "EnumValue" Тогда // Значение перечисления
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Subsystem" Тогда // Подсистема
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.Подсистемы КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.Подсистемы КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Родитель = &Родитель
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.Подсистемы") Тогда
			Запрос.УстановитьПараметр("Родитель", Родитель);
		Иначе
			Запрос.УстановитьПараметр("Родитель", Справочники.Подсистемы.ПустаяСсылка());
		КонецЕсли; 
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Проект
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Проект
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ТаблицаПоиска.Родитель = &Родитель
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя); // Формируем наименование для поиска
		Запрос.УстановитьПараметр("Родитель", РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных));
	
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ЭтоОсновноеХранилище", Параметры.ЭтоОсновноеХранилище);
	Запрос.УстановитьПараметр("ИскатьВСуществующихUuid", ИскатьВСуществующихUuid);
	
	Если Параметры.Свойство("ВеткаИсточник") Тогда
		Запрос.УстановитьПараметр("ВеткаИсточник", Параметры.ВеткаИсточник);
	Иначе
		Запрос.УстановитьПараметр("ВеткаИсточник", Неопределено);
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ВыборкаДетальныеЗаписи);
		
	Иначе
		ВыборкаДетальныеЗаписи = РезультатыЗапроса[1].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ВыборкаДетальныеЗаписи);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;

КонецФункции

Функция СоздатьОбновитьОбъектМетаданных(Параметры, ОбъектМетаданных, Ссылка)

	ЕстьИзменения = Ложь;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
	
		Объект = Ссылка.ПолучитьОбъект();
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Configuration" Тогда // Корень конфигурации
	
		Возврат Параметры.Проект;
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Attribute" Тогда // Реквизит
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьЭлемент();
		Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Реквизит;
		СсылкаРодитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(СсылкаРодитель) = Тип("СправочникСсылка.РеквизитыОбъектовМетаданных") Тогда
		
			Объект.Родитель = СсылкаРодитель;
			Объект.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаРодитель, "Владелец");
		
		Иначе
		
			Объект.Владелец = СсылкаРодитель;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(СсылкаРодитель, Перечисления.ВидыРеквизитов.Реквизиты, Параметры.СсылкиМетаданных);
		КонецЕсли; 
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "TabularSection" Тогда // Табличная часть
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьГруппу();
		Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.ТабличнаяЧасть;
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "StandardAttribute"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Dimension"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Resource" 
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Column"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AccountingFlag"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AddressingAttribute" Тогда
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьЭлемент();
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Объект.Владелец = Владелец;
		Если ОбъектМетаданных.КлассОбъекта = "StandardAttribute" Тогда // Стандартный реквизит
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныйРеквизит;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.СтандартныеРеквизиты, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Dimension" Тогда // Измерение
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Измерение;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.Измерения, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Resource" Тогда // Ресурс
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Ресурс;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.Ресурсы, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Column" Тогда // Графа
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Графа;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.Графы, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AccountingFlag" Тогда // Признак учета
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.ПризнакУчета;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.ПризнакиУчета, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AddressingAttribute" Тогда // Реквизиты адресации
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.РеквизитАдресации;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.РеквизитыАдресации, Параметры.СсылкиМетаданных);
		КонецЕсли;
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "ConstantValue"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "SessionParameterValue" Тогда // Значение константы или параметра сеанса
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьЭлемент();
		Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныйРеквизит;
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Command" Тогда // Команды объекта
		
		Объект = Справочники.КомандыОбъектовМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Form" Тогда // Формы объекта
		
		Объект = Справочники.ФормыОбъектовМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Template" Тогда // Макеты объекта
		
		Объект = Справочники.МакетыОбъектовМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "PredefinedData" ИЛИ ОбъектМетаданных.КлассОбъекта = "EnumValue" Тогда // Предопределенные данные
		
		Объект = Справочники.ПредопределенныеДанные.СоздатьЭлемент();
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		
			Объект.Владелец = Родитель;
			Объект.Родитель = Справочники.ПредопределенныеДанные.ПустаяСсылка();
		
		Иначе
		
			Объект.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Владелец");
			Объект.Родитель = Родитель;
		
		КонецЕсли; 
		ЕстьИзменения = Истина;
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Subsystem" Тогда // Подсистема
		
		Объект = Справочники.Подсистемы.СоздатьЭлемент();
		Объект.Владелец = Параметры.Проект;
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.Подсистемы") Тогда
			Объект.Родитель = Родитель;
		Иначе
			Объект.Родитель = Справочники.ПредопределенныеДанные.ПустаяСсылка();
		КонецЕсли; 
		ЕстьИзменения = Истина;
		
	Иначе
		
		Объект = Справочники.ОбъектыМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.Проект;
		Объект.Родитель = РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных);
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Если СокрЛП(Объект.uuid) <> СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", "") Тогда
	
		Объект.uuid = СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", ""); // Для стандартных реквизитов удаляем префикс объекта
		ЕстьИзменения = Истина;
	
	КонецЕсли; 
	
	// Порядок элемента в конфигурации изменился
	Если Объект.Код <> ОбъектМетаданных.Код Тогда
	
		Объект.Код = ОбъектМетаданных.Код;
		ЕстьИзменения = Истина;
	
	КонецЕсли; 
	
	Если Параметры.ЭтоОсновноеХранилище И (НЕ Объект.ПрисутствуетВОсновномХранилище ИЛИ Объект.ПометкаУдаления) Тогда
		Объект.ПрисутствуетВОсновномХранилище = Истина;
		Объект.ПометкаУдаления = Ложь;
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Параметры.ЭтоОсновноеХранилище И ЗначениеЗаполнено(Объект.ВеткаИсточник) Тогда 
		// Если заполнен тех.проект - очищаем его, т.к. он уже в основном хранилище
		Объект.ВеткаИсточник = Неопределено;
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ОбъектМетаданных.КлассОбъекта = "Subsystem" Тогда // Обработка подсистем
		
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) <> Тип("СправочникСсылка.Подсистемы") Тогда
			Родитель = Справочники.Подсистемы.ПустаяСсылка();
		КонецЕсли;
		Если Объект.Родитель <> Родитель Тогда
			Объект.Родитель = Родитель;
			ЕстьИзменения = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ОбъектыМетаданных") Тогда
		Родитель = РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных);
		Если НЕ ЗначениеЗаполнено(Объект.Родитель) И Объект.Родитель <> Родитель И ЗначениеЗаполнено(Родитель) Тогда
			Объект.Родитель = Родитель;
			ЕстьИзменения = Истина;
		КонецЕсли; 
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Form" Тогда // Формы объекта
		ТипыФорм = Параметры.ТипыФормОбъектов.Получить(ОбъектМетаданных.uuidРодитель);
		МассивТиповФормы = Новый Массив;
		Если ТипыФорм <> Неопределено Тогда
			
			Для каждого ЭлементСписка Из ТипыФорм Цикл
			
				Если ЭлементСписка.Представление <> ОбъектМетаданных.ИмяФайла Тогда
					Продолжить;
				КонецЕсли; 
				
				МассивТиповФормы.Добавить(ЭлементСписка.Значение);
			КонецЦикла; 
			
			Если МассивТиповФормы.Количество() = 0 Тогда
				МассивТиповФормы.Добавить(Перечисления.ТипыФорм.ПроизвольнаяФорма);
			КонецЕсли; 
		Иначе
			МассивТиповФормы.Добавить(Перечисления.ТипыФорм.ПроизвольнаяФорма);
		КонецЕсли; 
		
		ТЗТипыФормы = Объект.ТипыФормы.Выгрузить();
		ТЗТипыФормы.Индексы.Добавить("ТипФормы");
		
		Для Каждого ТипФормы из МассивТиповФормы Цикл
			Если Объект.ТипыФормы.Найти(ТипФормы, "ТипФормы") = Неопределено Тогда
				НоваяСтрокаТЧ = Объект.ТипыФормы.Добавить();
				НоваяСтрокаТЧ.ТипФормы = ТипФормы;
				ЕстьИзменения = Истина;
			Иначе
				ТЗТипыФормы.Удалить(ТЗТипыФормы.Найти(ТипФормы, "ТипФормы"));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЗ Из ТЗТипыФормы Цикл
			Объект.ТипыФормы.Удалить(Объект.ТипыФормы.Найти(СтрокаТЗ["ТипФормы"], "ТипФормы"));
			ЕстьИзменения = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьСвойстваПоТипам = Новый Структура;
	
	Если ОбъектМетаданных.Свойство("Свойства") Тогда
	
		Для каждого Свойство Из ОбъектМетаданных.Свойства Цикл
			
			ТипЗначения = ТипЗнч(Свойство.Значение);
			
			Если Свойство.Ключ = "ТипыЗначенияРеквизита" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить("ТипыЗначенияРеквизита", Свойство.Значение);
				Иначе
					ТипыЗначенияРеквизита = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						ТипыЗначенияРеквизита.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить("ТипыЗначенияРеквизита", ТипыЗначенияРеквизита);
				КонецЕсли;
				Продолжить;
			ИначеЕсли Свойство.Ключ = "ВводитсяНаОсновании" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить("ВводитсяНаОсновании", Свойство.Значение);
				Иначе
					ВводитсяНаОсновании = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						ВводитсяНаОсновании.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить("ВводитсяНаОсновании", ВводитсяНаОсновании);
				КонецЕсли;
				Продолжить;
			ИначеЕсли Свойство.Ключ = "ОписаниеДвиженийПоРегистру" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОписаниеДвиженийПоРегистрам = Свойство.Значение;
				Иначе
					ОписаниеДвиженийПоРегистрам = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						ОписаниеДвиженийПоРегистрам.Добавить(Свойство.Значение);
					КонецЕсли;
				КонецЕсли;
				Для каждого Регистр Из ОписаниеДвиженийПоРегистрам Цикл
					ОписаниеДвижений = Параметры.ОписаниеДвиженийПоРегистрам.Получить(Регистр);
					Если ОписаниеДвижений = Неопределено Тогда
						ОписаниеДвижений = Новый Массив;
						ОписаниеДвижений.Добавить(Объект.uuid);
						Параметры.ОписаниеДвиженийПоРегистрам.Вставить(Регистр, ОписаниеДвижений);
					Иначе
						ОписаниеДвижений.Добавить(Объект.uuid);
					КонецЕсли;
				КонецЦикла; 
				Продолжить;
			ИначеЕсли Свойство.Ключ = "Состав" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить("Состав", Свойство.Значение);
				Иначе
					Состав = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						Состав.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить("Состав", Состав);
				КонецЕсли;
				Продолжить;
			ИначеЕсли Свойство.Ключ = "Синоним" И ТипЗначения = Тип("Соответствие") Тогда
				СоотвествиеКодов = Свойство.Значение;
				Объект[Свойство.Ключ] = СоотвествиеКодов[Параметры.КодЯзыкаЗагрузки];
				Если Объект.Метаданные().Реквизиты.Найти("СинонимДополнительный") <> Неопределено Тогда
					Если НЕ Объект.ПереводПроверен Тогда
						Объект.СинонимДополнительный = СоотвествиеКодов[Параметры.КодДопЯзыкаЗагрузки];
					КонецЕсли;
				КонецЕсли;
				ЕстьИзменения = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗначения = Тип("Строка") Тогда
				Значение = ПредопределенныеЗначенияСтроковыхКонстант(Свойство.Значение, ОбъектМетаданных.КлассОбъекта, Свойство.Ключ, Параметры);
				Если Объект[Свойство.Ключ] <> Значение
					И (ЗначениеЗаполнено(Объект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					Объект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
				
			ИначеЕсли ТипЗначения = Тип("Массив") Тогда
				// Массивы пропускаются и должны обрабатываться отдельно
			ИначеЕсли ТипЗначения = Тип("Неопределено") Тогда
				Значение = ЗначениеСвойстваПоУмолчанию(Свойство.Ключ);
				Если Объект[Свойство.Ключ] <> Значение
					И (ЗначениеЗаполнено(Объект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					Объект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
			
				
			КонецЕсли; 
			
			
		КонецЦикла; 
	
	КонецЕсли; 
	
	Если ЕстьИзменения Тогда
		
		Если НЕ Параметры.ЭтоОсновноеХранилище Тогда
			
			Если Параметры.Свойство("ВеткаИсточник") Тогда
				Объект.ВеткаИсточник = Параметры.ВеткаИсточник;
			КонецЕсли;	
			
		КонецЕсли;
		
		Объект.Записать();
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОбновитьСвойстваПоТипам) Тогда
	
		Параметры.ОбновитьСвойстваПоТипам.Вставить(Объект.Ссылка, ОбновитьСвойстваПоТипам);
	
	КонецЕсли; 
	
	// Расширенные свойства
	Если ОбъектМетаданных.Свойство("РасширенныеСвойства") Тогда
		
		ОбновитьСвойстваПоТипам = Новый Структура;
		
		ЕстьИзменения = Ложь;
		
		РасширенныеСвойстваСсылка = ОбщегоНазначенияСППР.СвойстваОбъектаРасширенногоХранения(Объект.Ссылка);
		Если ЗначениеЗаполнено(РасширенныеСвойстваСсылка) Тогда
		
			РасширенныеСвойстваОбъект = РасширенныеСвойстваСсылка.ПолучитьОбъект();
		Иначе
			
			ИмяСправочника = ОбщегоНазначенияСППР.ИмяСправочникаРасширенныхСвойств(Объект.Ссылка);
			РасширенныеСвойстваОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
			РасширенныеСвойстваОбъект.Владелец = Объект.Ссылка;
			ЕстьИзменения = Истина;
			
		КонецЕсли; 
		
		Для каждого Свойство Из ОбъектМетаданных.РасширенныеСвойства Цикл
			
			ТипЗначения = ТипЗнч(Свойство.Значение);
			
			Если Свойство.Ключ = "Источник"
				ИЛИ Свойство.Ключ = "Состав"
				ИЛИ Свойство.Ключ = "Тип"
				ИЛИ Свойство.Ключ = "Документы" 
				ИЛИ Свойство.Ключ = "Движения" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить(Свойство.Ключ, Свойство.Значение);
				Иначе
					Источник = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						Источник.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить(Свойство.Ключ, Источник);
				КонецЕсли;
				Продолжить;
			КонецЕсли; 
			
			Если ОбъектМетаданных.КлассОбъекта = "FunctionalOption" И Свойство.Ключ = "Хранение" Тогда
				ОбновитьСвойстваПоТипам.Вставить(Свойство.Ключ, Свойство.Значение);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗначения = Тип("Строка") Тогда
				Значение = ПредопределенныеЗначенияСтроковыхКонстант(Свойство.Значение, ОбъектМетаданных.КлассОбъекта, Свойство.Ключ, Параметры);
				Если РасширенныеСвойстваОбъект[Свойство.Ключ] <> Значение
					И (ЗначениеЗаполнено(РасширенныеСвойстваОбъект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					РасширенныеСвойстваОбъект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
				
			ИначеЕсли ТипЗначения = Тип("Массив") Тогда
				// Массивы пропускаются и должны обрабатываться отдельно
			ИначеЕсли ТипЗначения = Тип("Неопределено") Тогда
				Значение = ЗначениеСвойстваПоУмолчанию(Свойство.Ключ);
				Если РасширенныеСвойстваОбъект[Свойство.Ключ] <> Значение 
					И (ЗначениеЗаполнено(РасширенныеСвойстваОбъект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					РасширенныеСвойстваОбъект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
			
				
			КонецЕсли; 
			
			
		КонецЦикла; 
		
		Если ЕстьИзменения Тогда
			РасширенныеСвойстваОбъект.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбновитьСвойстваПоТипам) Тогда
			
			Параметры.ОбновитьСвойстваПоТипам.Вставить(РасширенныеСвойстваОбъект.Ссылка, ОбновитьСвойстваПоТипам);
			
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Объект.Ссылка;

КонецФункции 

Функция РодительОбъектаМетаданных(Проект, КлассОбъекта, СсылкиМетаданных)

	Родитель = СсылкиМетаданных.Получить(КлассОбъекта);
	Если ЗначениеЗаполнено(Родитель) Тогда
	
		Возврат Родитель;
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыМетаданных.Ссылка
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.ЭтоГруппа
		|	И НЕ ОбъектыМетаданных.ПометкаУдаления
		|	И ОбъектыМетаданных.Владелец = &Владелец
		|	И ОбъектыМетаданных.ВидОбъектаМетаданныхВЕдЧисле = &ВидОбъектаМетаданныхВЕдЧисле";
		
		Запрос.УстановитьПараметр("Владелец", Проект);
		Запрос.УстановитьПараметр("ВидОбъектаМетаданныхВЕдЧисле", НаименованиеКлассаОбъекта(КлассОбъекта));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Родитель = Неопределено;
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Родитель = ВыборкаДетальныеЗаписи.Ссылка;
			СсылкиМетаданных.Вставить(КлассОбъекта, ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЕсли;
	
		Возврат Родитель;
	
	КонецЕсли; 

КонецФункции 

Функция НайтиСоздатьГруппуРеквизитов(СсылкаОбъектМетаданных, ВидРеквизита, СсылкиМетаданных)

	КлючСсылкиМетаданных = Строка(СсылкаОбъектМетаданных.УникальныйИдентификатор())+ "_"+ВидРеквизита;
	
	Группа = СсылкиМетаданных.Получить(КлючСсылкиМетаданных);
	Если ЗначениеЗаполнено(Группа) Тогда
	
		Возврат Группа;
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыОбъектовМетаданных.Ссылка
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
		|ГДЕ
		|	НЕ РеквизитыОбъектовМетаданных.ПометкаУдаления
		|	И РеквизитыОбъектовМетаданных.Владелец = &ОбъектМетаданных
		|	И РеквизитыОбъектовМетаданных.ВидРеквизита = &ВидРеквизита
		|	И РеквизитыОбъектовМетаданных.uuid = """"";
		
		Запрос.УстановитьПараметр("ВидРеквизита", ВидРеквизита);
		Запрос.УстановитьПараметр("ОбъектМетаданных", СсылкаОбъектМетаданных);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если НЕ РезультатЗапроса.Пустой() И ВыборкаДетальныеЗаписи.Следующий() ТОгда
			Группа = ВыборкаДетальныеЗаписи.Ссылка;
			СсылкиМетаданных.Вставить(КлючСсылкиМетаданных, Группа);
		Иначе
			
			Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьГруппу();
			
			Объект.ВидРеквизита = ВидРеквизита;
			Объект.Владелец     = СсылкаОбъектМетаданных;
			Если ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныеРеквизиты Тогда
				Объект.Имя          = "СтандартныеРеквизиты";
				Объект.Синоним      = НСтр("ru = 'Стандартные реквизиты'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Реквизиты Тогда
				Объект.Имя          = "Реквизиты";
				Объект.Синоним      = НСтр("ru = 'Реквизиты'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Измерения Тогда
				Объект.Имя          = "Измерения";
				Объект.Синоним      = НСтр("ru = 'Измерения'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Ресурсы Тогда
				Объект.Имя          = "Ресурсы";
				Объект.Синоним      = НСтр("ru = 'Ресурсы'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Графы Тогда
				Объект.Имя          = "Графы";
				Объект.Синоним      = НСтр("ru = 'Графы'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.ПризнакиУчета Тогда
				Объект.Имя          = "ПризнакиУчета";
				Объект.Синоним      = НСтр("ru = 'Признаки учета'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.РеквизитыАдресации Тогда
				Объект.Имя          = "РеквизитыАдресации";
				Объект.Синоним      = НСтр("ru = 'Реквизиты адресации'");
			КонецЕсли; 
			
			Объект.Записать();
			Группа = Объект.Ссылка;
			СсылкиМетаданных.Вставить(КлючСсылкиМетаданных, Группа);
			
		КонецЕсли;
		
		Возврат Группа;
		
	КонецЕсли; 

КонецФункции 

Процедура ОбработатьПраваРолейПослеЗаписи(Параметры, ОбъектМетаданных)
	
	ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[ОбъектМетаданных.КлассОбъекта];
	
	Если Параметры.ЭтоОсновноеХранилище И ПараметрыОбъекта.Свойство("Rights") и Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuid) <> Неопределено Тогда
		
		Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".Rights.xml");
		Если Файл.Существует() Тогда
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.ОткрытьФайл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".Rights.xml");
			
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
			
			Если ТипЗнч(Данные.object) = Тип("СписокXDTO") Тогда
				ОбъектыПрава = Данные.object;
			Иначе
				ОбъектыПрава = Новый Массив;
				ОбъектыПрава.Добавить(Данные.object);
			КонецЕсли;
			УстанавливатьПраваДляНовыхОбъектов = Данные.setForNewObjects;
			
			КоллекцияПрав = Новый Массив;
			
			Для каждого ОбъектПраво Из ОбъектыПрава Цикл
				Если ТипЗнч(ОбъектПраво.right) = Тип("СписокXDTO") Тогда
					Rights = ОбъектПраво.right;
				Иначе
					Rights = Новый Массив;
					Rights.Добавить(ОбъектПраво.right);
				КонецЕсли; 
				
				Для каждого Right Из Rights Цикл
					
					ПравоДоступа = ПредопределенныеЗначенияСтроковыхКонстант(Right.name, "Right", "Право");
					Если  НЕ ЗначениеЗаполнено(ПравоДоступа) Тогда
						Продолжить;
					КонецЕсли;
					
					ПоляБезОграниченияДоступа = Новый Соответствие;
					ПоляСОграничениемДоступа = Новый Соответствие;
					
					Если Right.Свойства().Получить("restrictionByCondition") <> Неопределено Тогда
					
						Если ТипЗнч(Right.restrictionByCondition) = Тип("СписокXDTO") Тогда
							ОграниченияДоступа = Right.restrictionByCondition;
						Иначе
							ОграниченияДоступа = Новый Массив;
							ОграниченияДоступа.Добавить(Right.restrictionByCondition);
						КонецЕсли; 
						
						Для каждого ОграничениеДоступа Из ОграниченияДоступа Цикл
							
							Если ТипЗнч(ОграничениеДоступа.field) = Тип("СписокXDTO") И ОграничениеДоступа.field.Количество() > 0 Тогда
								ПоляОграничения = ОграничениеДоступа.field;
							ИначеЕсли ТипЗнч(ОграничениеДоступа.field) = Тип("Строка") Тогда
								ПоляОграничения = Новый Массив;
								ПоляОграничения.Добавить(ОграничениеДоступа.field);
							Иначе
								ПоляОграничения = Новый Массив;
								ПоляОграничения.Добавить(НСтр("ru = '<Прочие поля>'"));
							КонецЕсли;
							
							Для каждого ПолеОграничения Из ПоляОграничения Цикл
							
								ПоляСОграничениемДоступа.Вставить(ПолеОграничения, ПолеОграничения);
							
							КонецЦикла; 
						
						КонецЦикла; 
					КонецЕсли; 
					
					Если ПоляСОграничениемДоступа.Количество() = 0 Тогда
						ПоляБезОграниченияДоступа.Вставить("*",НСтр("ru = '<Прочие поля>'"));
					КонецЕсли;
					
					Право = Новый Структура;
					Право.Вставить("Имя", ОбъектПраво.Name);
					Право.Вставить("ПравоДоступа", ПравоДоступа); 
					Право.Вставить("ПоляБезОграниченияДоступа", "");
					Право.Вставить("ПоляСОграничениемДоступа", "");
					Для каждого Поле Из ПоляБезОграниченияДоступа Цикл
						Право.ПоляБезОграниченияДоступа = Право.ПоляБезОграниченияДоступа + ?(ЗначениеЗаполнено(Право.ПоляБезОграниченияДоступа), ", ", "") + Поле.Значение;
					КонецЦикла; 
					Для каждого Поле Из ПоляСОграничениемДоступа Цикл
						Право.ПоляСОграничениемДоступа = Право.ПоляСОграничениемДоступа + ?(ЗначениеЗаполнено(Право.ПоляСОграничениемДоступа), ", ", "") + Поле.Значение;
					КонецЦикла; 
					Право.Вставить("КоличествоПолейБезОграниченияДоступа", ПоляБезОграниченияДоступа.Количество());
					Право.Вставить("КоличествоПолейСОграничениемДоступа", ПоляСОграничениемДоступа.Количество());
					Право.Вставить("Используется", ПредопределенныеЗначенияСтроковыхКонстант(Right.value, "Right"));
					
					КоллекцияПрав.Добавить(Право);
				КонецЦикла; 
				
			КонецЦикла; 
			
			Параметры.ОбновитьСвойстваПоТипам.Вставить(Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuid), Новый Структура("Права, УстанавливатьПраваДляНовыхОбъектов", КоллекцияПрав, УстанавливатьПраваДляНовыхОбъектов));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
 
Процедура ОбработатьОбъектыСодержащиеСсылкиПоТипамМетаданных(Параметры)
	
	Для каждого КлючИЗначение Из Параметры.ОписаниеДвиженийПоРегистрам Цикл
		
		СсылкаТип = Параметры.ТипыМетаданных.Получить(КлючИЗначение.Ключ);
		Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаОбработкиЕстьИзменения = Ложь;
		Объект = СсылкаТип.ПолучитьОбъект();
		Если Параметры.Свойство("ВеткаИсточник") Тогда
			Если НЕ Параметры.ЭтоОсновноеХранилище И Объект.ВеткаИсточник <> Параметры.ВеткаИсточник Тогда
				Объект = Неопределено;
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		ТаблицаОбработки = Объект.ОписаниеДвиженийПоРегистру.Выгрузить();
		ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
		
		Для каждого uuid Из КлючИЗначение.Значение Цикл
			
			Регистратор = Параметры.СсылкиМетаданных.Получить(uuid);
			Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			НайденнаяСтрока = ТаблицаОбработки.Найти(Регистратор, "Регистратор");
			Если НайденнаяСтрока = Неопределено Тогда
				
				НайденнаяСтрока = ТаблицаОбработки.Добавить();
				НайденнаяСтрока.Регистратор = Регистратор;
				НайденнаяСтрока.ВидДвижения = Перечисления.ВидДвиженияРегистра.Запись;
				ТаблицаОбработкиЕстьИзменения = Истина;
			КонецЕсли; 
			НайденнаяСтрока.Найден = Истина;
		КонецЦикла;
		Индекс = ТаблицаОбработки.Количество();
		Пока  Индекс > 0 Цикл
			Индекс = Индекс - 1;
			НайденнаяСтрока = ТаблицаОбработки[Индекс];
			Если НЕ НайденнаяСтрока.Найден Тогда
				ТаблицаОбработки.Удалить(НайденнаяСтрока);
				ТаблицаОбработкиЕстьИзменения = Истина;
			КонецЕсли; 
		КонецЦикла;
		Если ТаблицаОбработкиЕстьИзменения Тогда
			Объект.ОписаниеДвиженийПоРегистру.Загрузить(ТаблицаОбработки);
		КонецЕсли;
		
		uuidРегистратора = Объект.uuid + "_Recorder";
		РегистраторРеквизит = Параметры.СсылкиМетаданных.Получить(uuidРегистратора);
		Если ЗначениеЗаполнено(РегистраторРеквизит) Тогда
			Параметры.ОбновитьСвойстваПоТипам.Вставить(РегистраторРеквизит, 
				Новый Структура("ТипыЗначенияРеквизита", ТаблицаОбработки.ВыгрузитьКолонку("Регистратор")));
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РеквизитыОбъектовМетаданных.Ссылка
			|ИЗ
			|	Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
			|ГДЕ
			|	РеквизитыОбъектовМетаданных.uuid = ""Recorder""
			|	И РеквизитыОбъектовМетаданных.Владелец = &ОбъектМетаданных
			|	И РеквизитыОбъектовМетаданных.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
			|	И НЕ РеквизитыОбъектовМетаданных.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ОбъектМетаданных", СсылкаТип);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Параметры.ОбновитьСвойстваПоТипам.Вставить(ВыборкаДетальныеЗаписи.Ссылка, 
					Новый Структура("ТипыЗначенияРеквизита", ТаблицаОбработки.ВыгрузитьКолонку("Регистратор")));
			КонецЕсли;
		КонецЕсли;
		Если Объект.Модифицированность() Тогда
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Обрабатываем объекты и их свойства, реквизиты, содержащие ссылки, после записи всех объектов
	Для каждого КлючИЗначение Из Параметры.ОбновитьСвойстваПоТипам Цикл
		
		ТипЗначения = ТипЗнч(КлючИЗначение.Ключ);
		Если ТипЗначения = Тип("СправочникСсылка.РеквизитыОбъектовМетаданных") Тогда
			
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.ТипыЗначенияРеквизита.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.ТипыЗначенияРеквизита Цикл
				
				Если Найти(ТипЗначения, "cfg:") > 0 Тогда
				
					ТипЗначения = СтрЗаменить(ТипЗначения, "cfg:", "");
					ТипЗначения = СтрЗаменить(ТипЗначения, "Ref", "");
				
				КонецЕсли;
				Если ТипЗнч(ТипЗначения) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
					СсылкаТип = ТипЗначения;
				Иначе
					СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					// Получаем класс объекта
					КлассОбъекта = НаименованиеКлассаОбъекта(ТипЗначения);
					Если ЗначениеЗаполнено(КлассОбъекта) Тогда
						
						Для каждого ТипМетаданных Из Параметры.ТипыМетаданных Цикл
						
							Если  Найти(ТипМетаданных.Ключ, ТипЗначения) = 0
								ИЛИ Найти(СтрЗаменить(ТипМетаданных.Ключ, ТипЗначения+".",""), ".") > 0 Тогда // найден под-класс - пропускаем.
								Продолжить;
							КонецЕсли;
							Если НЕ Объект.ИгнорироватьСсылкиИзРеквизита Тогда
								Объект.ИгнорироватьСсылкиИзРеквизита = Истина;
							КонецЕсли;
							НайденнаяСтрока = ТаблицаОбработки.Найти(ТипМетаданных.Значение, "ТипЗначенияРеквизита");
							Если НайденнаяСтрока = Неопределено Тогда
								
								НайденнаяСтрока = ТаблицаОбработки.Добавить();
								НайденнаяСтрока.ТипЗначенияРеквизита = ТипМетаданных.Значение;
								ТаблицаОбработкиЕстьИзменения = Истина;
								
							КонецЕсли; 
							НайденнаяСтрока.Найден = Истина;
						КонецЦикла; 
						Продолжить;
					ИначеЕсли НЕ ЗначениеЗаполнено(КлассОбъекта) И ТипЗначения = "Any" Тогда
						ВсеСсылочныеТипы = ПолучитьВсеСсылочныеТипы(Параметры);
						Если НЕ Объект.ИгнорироватьСсылкиИзРеквизита Тогда
							Объект.ИгнорироватьСсылкиИзРеквизита = Истина;
						КонецЕсли; 
						Для каждого СсылочныйТип Из ВсеСсылочныеТипы Цикл
							НайденнаяСтрока = ТаблицаОбработки.Найти(СсылочныйТип, "ТипЗначенияРеквизита");
							Если НайденнаяСтрока = Неопределено Тогда
								
								НайденнаяСтрока = ТаблицаОбработки.Добавить();
								НайденнаяСтрока.ТипЗначенияРеквизита = СсылочныйТип;
								ТаблицаОбработкиЕстьИзменения = Истина;
								
							КонецЕсли; 
							НайденнаяСтрока.Найден = Истина;
						КонецЦикла; 
						Продолжить;
					Иначе
						СсылкаТип = ТипЗначения;
					КонецЕсли;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "ТипЗначенияРеквизита");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.ТипЗначенияРеквизита = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.ТипыЗначенияРеквизита.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.Подсистемы") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) ИЛИ ТипЗнч(СсылкаТип) <> Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "ОбъектМетаданных");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.ОбъектМетаданных = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ПодпискиНаСобытияСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Источник.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Источник Цикл
				
				ТипЗначения = СтрЗаменить(ТипЗначения, "cfg:", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "Object", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "ValueManager", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "Manager", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "RecordSet", "");
				
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					// Получаем класс объекта
					КлассОбъекта = НаименованиеКлассаОбъекта(ТипЗначения);
					Если ЗначениеЗаполнено(КлассОбъекта) Тогда
						
						Для каждого ТипМетаданных Из Параметры.ТипыМетаданных Цикл
						
							Если Найти(ТипМетаданных.Ключ, ТипЗначения) = 0 
								ИЛИ Найти(СтрЗаменить(ТипМетаданных.Ключ, ТипЗначения+".",""), ".") > 0 Тогда // найден под-класс - пропускаем.
								Продолжить;
							КонецЕсли; 
							НайденнаяСтрока = ТаблицаОбработки.Найти(ТипМетаданных.Значение, "Тип");
							Если НайденнаяСтрока = Неопределено Тогда
								
								НайденнаяСтрока = ТаблицаОбработки.Добавить();
								НайденнаяСтрока.Тип = ТипМетаданных.Значение;
								ТаблицаОбработкиЕстьИзменения = Истина;
								
							КонецЕсли; 
							НайденнаяСтрока.Найден = Истина;
						КонецЦикла; 
					КонецЕсли;
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Источник.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.КритерииОтбораСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Реквизит");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Реквизит = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			ТаблицаОбработки = Объект.Тип.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Тип Цикл
				
				Если Найти(ТипЗначения, "cfg:") > 0 Тогда
				
					ТипЗначения = СтрЗаменить(ТипЗначения, "cfg:", "");
					ТипЗначения = СтрЗаменить(ТипЗначения, "Ref", "");
				
				КонецЕсли; 
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Тип.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ПоследовательностиСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Документы.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Документы Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Документы.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			ТаблицаОбработки = Объект.Движения.Выгрузить();
			ТаблицаОбработкиЕстьИзменения = Ложь;
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Движения Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Движения.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ФункциональныеОпцииСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			Хранение = Параметры.ТипыМетаданных.Получить(КлючИЗначение.Значение.Хранение);
			Если Объект.Хранение <> Хранение Тогда
				Объект.Хранение = Хранение;
			КонецЕсли; 
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ОбщиеРеквизитыСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
			
			Если КлючИЗначение.Значение.Свойство("ВводитсяНаОсновании") Тогда
				Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
				ТаблицаОбработки = Объект.ВводитсяНаОсновании.Выгрузить();
				ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
				ТаблицаОбработкиЕстьИзменения = Ложь;
				Для каждого ТипЗначения Из КлючИЗначение.Значение.ВводитсяНаОсновании Цикл
					
					СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
					Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
						Продолжить;
					КонецЕсли; 
					НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "ОбъектМетаданных");
					Если НайденнаяСтрока = Неопределено Тогда
						
						НайденнаяСтрока = ТаблицаОбработки.Добавить();
						ТаблицаОбработкиЕстьИзменения = Истина;
						НайденнаяСтрока.ОбъектМетаданных = СсылкаТип;
						
					КонецЕсли; 
					НайденнаяСтрока.Найден = Истина;
					
				КонецЦикла; 
				Индекс = ТаблицаОбработки.Количество();
				Пока  Индекс > 0 Цикл
					Индекс = Индекс - 1;
					НайденнаяСтрока = ТаблицаОбработки[Индекс];
					Если НЕ НайденнаяСтрока.Найден Тогда
						ТаблицаОбработки.Удалить(НайденнаяСтрока);
						ТаблицаОбработкиЕстьИзменения = Истина;
					КонецЕсли; 
				КонецЦикла;
				Если ТаблицаОбработкиЕстьИзменения Тогда
					Объект.ВводитсяНаОсновании.Загрузить(ТаблицаОбработки);
				КонецЕсли;
				Если Объект.Модифицированность() Тогда
					Объект.Записать();
				КонецЕсли; 
			КонецЕсли;
			
			Если КлючИЗначение.Значение.Свойство("Права") Тогда
				Набор = РегистрыСведений.ПраваДоступаКОбъектамМетаданных.СоздатьНаборЗаписей();
				Набор.Отбор.Роль.Установить(КлючИЗначение.Ключ);
				
				Если КлючИЗначение.Значение.Свойство("УстанавливатьПраваДляНовыхОбъектов") Тогда
					УстанавливатьПраваДляНовыхОбъектов = КлючИЗначение.Значение.УстанавливатьПраваДляНовыхОбъектов;
				Иначе
					УстанавливатьПраваДляНовыхОбъектов = Ложь;
				КонецЕсли;
				
				Если УстанавливатьПраваДляНовыхОбъектов Тогда
					
					КоллекцияПравПоУмолчанию = ПолучитьПраваПоУмолчаниюДляВсехОбъектов(Параметры);
					
				КонецЕсли;
				
				Для каждого Право Из КлючИЗначение.Значение.Права Цикл
					
					Если УстанавливатьПраваДляНовыхОбъектов Тогда
						ПраваОбъекта = КоллекцияПравПоУмолчанию.Получить(Право.Имя);
						Если ПраваОбъекта <> Неопределено Тогда
							ПраваОбъекта.Удалить(Право.ПравоДоступа);
						КонецЕсли; 
					КонецЕсли;
					
					Если НЕ Право.Используется Тогда
						Продолжить;
					КонецЕсли;
					
					СсылкаТип = Параметры.ТипыМетаданных.Получить(Право.Имя);
					Если НЕ ЗначениеЗаполнено(СсылкаТип) 
						ИЛИ НЕ ЗначениеЗаполнено(Право.ПравоДоступа)
						ИЛИ НЕ ТипЗнч(СсылкаТип) = Тип("СправочникСсылка.ОбъектыМетаданных")
						ИЛИ НЕ ТипЗнч(Право.ПравоДоступа) = Тип("ПеречислениеСсылка.ПраваДоступа") Тогда
						Продолжить;
					КонецЕсли; 
					
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Право);
					Запись.Роль = КлючИЗначение.Ключ;
					Запись.ОбъектМетаданных = СсылкаТип;
					
				КонецЦикла; 
				
				Если УстанавливатьПраваДляНовыхОбъектов Тогда
					Для каждого Объект Из КоллекцияПравПоУмолчанию Цикл
						Для каждого ПравоОбъекта Из Объект.Значение Цикл
							
							Право = Новый Структура;
							Право.Вставить("Имя", Объект.Ключ);
							Право.Вставить("ПравоДоступа", ПравоОбъекта.Ключ); 
							Право.Вставить("ПоляБезОграниченияДоступа", "");
							Право.Вставить("ПоляСОграничениемДоступа", "");
							Право.Вставить("КоличествоПолейБезОграниченияДоступа", 0);
							Право.Вставить("КоличествоПолейСОграничениемДоступа", 0);
							Право.Вставить("Используется", Истина);
							
							СсылкаТип = Параметры.ТипыМетаданных.Получить(Право.Имя);
							Если НЕ ЗначениеЗаполнено(СсылкаТип) 
								ИЛИ НЕ ЗначениеЗаполнено(Право.ПравоДоступа)
								ИЛИ НЕ ТипЗнч(СсылкаТип) = Тип("СправочникСсылка.ОбъектыМетаданных")
								ИЛИ НЕ ТипЗнч(Право.ПравоДоступа) = Тип("ПеречислениеСсылка.ПраваДоступа") Тогда
								Продолжить;
							КонецЕсли; 
							
							Запись = Набор.Добавить();
							ЗаполнитьЗначенияСвойств(Запись, Право);
							Запись.Роль = КлючИЗначение.Ключ;
							Запись.ОбъектМетаданных = СсылкаТип;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЕсли;
				
				Набор.Записать();
				
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры                                                                        

Функция ПометитьНаУдалениеНеНайденныеОбъектыВеткаИсточник()
	Возврат "ВЫБРАТЬ
	        |	Таблица.uuid КАК uuid,
	        |	Таблица.Ссылка КАК Ссылка,
	        |	Таблица.ВеткаИсточник КАК ВеткаИсточник
	        |ИЗ
	        |	Справочник.ОбъектыМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец = &Проект
	        |	И НЕ Таблица.ЭтоГруппа
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |	И НЕ(Таблица.Имя В (&ИменаСтандартныхРолей)
	        |				И Таблица.Родитель.Имя = &ИмяКлассаРолей)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.КомандыОбъектовМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.Подсистемы КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.ПредопределенныеДанные КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ВЫБОР
	        |		КОГДА Таблица.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
	        |			ТОГДА ВладелецРеквизита.uuid + ""_"" + Таблица.uuid
	        |		ИНАЧЕ Таблица.uuid
	        |	КОНЕЦ,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.РеквизитыОбъектовМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ВладелецРеквизита
	        |		ПО Таблица.Владелец = ВладелецРеквизита.Ссылка
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |	И НЕ Таблица.ВидРеквизита В (&ВидыГруппРеквизитов)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.ФормыОбъектовМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)";
	
КонецФункции	

Процедура ПометитьНаУдалениеНеНайденныеОбъекты(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПометитьНаУдалениеНеНайденныеОбъектыВеткаИсточник();
	
	Запрос.УстановитьПараметр("ЭтоОсновноеХранилище", Параметры.ЭтоОсновноеХранилище);
	Запрос.УстановитьПараметр("Проект", Параметры.Проект);
	Если Параметры.Свойство("ВеткаИсточник") Тогда
		Запрос.УстановитьПараметр("ВеткаИсточник", Параметры.ВеткаИсточник);
	Иначе
		Запрос.УстановитьПараметр("ВеткаИсточник", Справочники.Ветки.ПустаяСсылка());
	КонецЕсли;
	
	ВидыГруппРеквизитов = Новый Массив;
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.СтандартныеРеквизиты);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Реквизиты);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Графы);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Измерения);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.ПризнакиУчета);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.РеквизитыАдресации);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Ресурсы);
	Запрос.УстановитьПараметр("ВидыГруппРеквизитов", ВидыГруппРеквизитов);
	
	ИменаСтандартныхРолей = Новый Массив;
	ИменаСтандартныхРолей.Добавить("ПолныеПрава");
	ИменаСтандартныхРолей.Добавить("БазовыеПрава");
	ИменаСтандартныхРолей.Добавить("РольНеНазначается");
	Запрос.УстановитьПараметр("ИменаСтандартныхРолей", ИменаСтандартныхРолей);
	Запрос.УстановитьПараметр("ИмяКлассаРолей", "Роли");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Ссылка = Параметры.СсылкиМетаданных.Получить(СокрЛП(ВыборкаДетальныеЗаписи.uuid));
		Если НЕ ЗначениеЗаполнено(Ссылка) ИЛИ Ссылка <> ВыборкаДетальныеЗаписи.Ссылка Тогда
		
			Если Параметры.ЭтоОсновноеХранилище Тогда
				
				Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				Объект.ПрисутствуетВОсновномХранилище = Ложь;
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
			
			ИначеЕсли Параметры.Свойство("ВеткаИсточник")
				И ВыборкаДетальныеЗаписи.ВеткаИсточник = Параметры.ВеткаИсточник Тогда
				
				Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Объект.ВеткаИсточник = Справочники.Ветки.ПустаяСсылка();
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьВсеСсылочныеТипы(Параметры)

	Если Параметры.Свойство("ВсеСсылочныеТипы") Тогда
	
		Возврат Параметры.ВсеСсылочныеТипы;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Владелец = &Проект
	|	И НЕ ОбъектыМетаданных.ПометкаУдаления
	|	И ОбъектыМетаданных.Родитель.ВидОбъектаМетаданныхВЕдЧисле В(&ИменаСсылочныхКлассов)
	|	И НЕ ОбъектыМетаданных.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыМетаданных.Наименование";
	
	Запрос.УстановитьПараметр("Проект", Параметры.Проект);
	
	ИменаСсылочныхКлассов = Новый Массив;
	ИменаСсылочныхКлассов.Добавить("Справочник");
	ИменаСсылочныхКлассов.Добавить("Документ");
	ИменаСсылочныхКлассов.Добавить("Перечисление");
	ИменаСсылочныхКлассов.Добавить("ПланВидовХарактеристик");
	ИменаСсылочныхКлассов.Добавить("ПланСчетов");
	ИменаСсылочныхКлассов.Добавить("ПланВидовРасчета");
	ИменаСсылочныхКлассов.Добавить("БизнесПроцесс");
	ИменаСсылочныхКлассов.Добавить("Задача");
	ИменаСсылочныхКлассов.Добавить("ПланОбмена");
	Запрос.УстановитьПараметр("ИменаСсылочныхКлассов", ИменаСсылочныхКлассов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Параметры.Вставить("ВсеСсылочныеТипы", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Параметры.ВсеСсылочныеТипы;

КонецФункции 

// Функция возвращает права по умолчанию для всех объектов
//
// Параметры:
//  Параметры	 - Структура - настройк и параметры
// 
// Возвращаемое значение:
//  Соответствие - Ключем является полное имя объекта, в значении соответствие прав
//
Функция ПолучитьПраваПоУмолчаниюДляВсехОбъектов(Параметры)

	КоллекцияПравПоУмолчанию = Новый Соответствие;
	
	// Список возможных прав
	//Перечисления.ПраваДоступа.Чтение
	//Перечисления.ПраваДоступа.Добавление
	//Перечисления.ПраваДоступа.Изменение
	//Перечисления.ПраваДоступа.Удаление
	//Перечисления.ПраваДоступа.Использование
	//Перечисления.ПраваДоступа.Просмотр
	
	Для каждого Объект Из Параметры.ТипыМетаданных Цикл
		
		Имена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Объект.Ключ, ".");
		Если Имена.Количество()<>2 Тогда
			Продолжить;
		КонецЕсли;
		
		КлассОбъекта =  Имена[0];
		
		Если Найти(КлассОбъекта, "ExchangePlan") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "FilterCriterion") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "CommonForm") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "CommonCommand") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Constant") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Catalog") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Sequence") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Document") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "DocumentJournal") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Report") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Использование);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "DataProcessor") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Использование);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "InformationRegister") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "AccumulationRegister") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ChartOfCharacteristicTypes") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ChartOfAccounts") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "AccountingRegister") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ChartOfCalculationTypes") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "CalculationRegister") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "BusinessProcess") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Task") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ExternalDataSource") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Использование);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат КоллекцияПравПоУмолчанию;

КонецФункции 

Функция НовыйКодМетаданных(Параметры, ОбъектМетаданных)

	Если Параметры.Нумераторы.Получить(ОбъектМетаданных.КлассОбъекта) <> Неопределено Тогда
	
		Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта] = Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта] + 1;
		
		Возврат Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта];
	
	КонецЕсли;
	
	Если ОбъектМетаданных.КлассОбъекта = "Form"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Command"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Template"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "SessionParameterValue"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "ConstantValue"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AccountingFlag"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AddressingAttribute"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Resource"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Dimension"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Column"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "TabularSection"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "StandardAttribute"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Attribute"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "PredefinedData"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "EnumValue" Тогда
	
		Ключ = ОбъектМетаданных.uuidРодитель + "_" + ОбъектМетаданных.КлассОбъекта;
		Если Параметры.Нумераторы.Получить(Ключ) <> Неопределено Тогда
			
			Параметры.Нумераторы[Ключ] = Параметры.Нумераторы[Ключ] + 1;
			
			Возврат Параметры.Нумераторы[Ключ];
			
		КонецЕсли;
		
		Если ОбъектМетаданных.КлассОбъекта = "TabularSection" Тогда
			// Табличные части располагаются после стандартных и обычных реквизитов, признаков учета
			Параметры.Нумераторы.Вставить(Ключ, 4);
		Иначе
			
			Параметры.Нумераторы.Вставить(Ключ, 1);
		КонецЕсли;
		
		Возврат Параметры.Нумераторы[Ключ];
		
	Иначе
		
		Параметры.Нумераторы.Вставить(ОбъектМетаданных.КлассОбъекта, 1);
		
		Возврат Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта];
		
	КонецЕсли; 
	
КонецФункции 

Функция ПрочитатьПравилаПоддержки(ФайлПравилПоддержки)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПравилПоддержки);
	
	ПараметрыПоддержки = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	ПараметрыПоддержки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыПоддержки, ",",,Истина);
	
	КоличествоКонфигураций = 0;
	СчетчикКонфигураций = 0;
	КоличествоОбъектов = 0;
	СчетчикОбъектов = 0;
	
	МассивПараметров = Новый Массив;
	
	Если ПараметрыПоддержки.ВГраница() > 2 Тогда
		Попытка
			КоличествоКонфигураций = Число(ПараметрыПоддержки[2]);
		Исключение
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли; 
	Если КоличествоКонфигураций = 0  Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПравилаПоддержки = Новый Соответствие;
	ПравилаПоддержки.Вставить(0, Перечисления.ПравилаПоддержки.НеРедактируется);
	ПравилаПоддержки.Вставить(1, Перечисления.ПравилаПоддержки.РедактируетсяССохранениемПоддержки);
	ПравилаПоддержки.Вставить(2, Перечисления.ПравилаПоддержки.СнятСПоддержки);
	
	ПравилаПоставки = Новый Соответствие;
	ПравилаПоставки.Вставить(0, Перечисления.ПравилаПоставки.ИзмененияРазрешены);
	ПравилаПоставки.Вставить(1, Перечисления.ПравилаПоставки.ИзмененияНеРекомендуются);
	ПравилаПоставки.Вставить(2, Перечисления.ПравилаПоставки.ИзмененияЗапрещены);
	ПравилаПоставки.Вставить(-1, Перечисления.ПравилаПоставки.ВключениеВКонфигурациюНеРекомендуется);
	
	Индекс = 3;
	Для СчетчикКонфигураций = 1 По КоличествоКонфигураций Цикл
		
		Поставка = Новый Структура;
		// Начало конфигурации
		Поставка.Вставить("УИД1",ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("Параметр", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("УИД2", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("Версия", СтрЗаменить(ПараметрыПоддержки[Индекс], """", ""));
		Индекс = Индекс + 1;
		Поставка.Вставить("Поставщик", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("КонфигурацияПоставщика", СтрЗаменить(ПараметрыПоддержки[Индекс], """", ""));
		Индекс = Индекс + 1;
		Попытка
			КоличествоОбъектов = Число(ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		МассивОбъектов = Новый Массив;
		Для СчетчикОбъектов = 1 По КоличествоОбъектов Цикл
			Если Индекс + 4 > ПараметрыПоддержки.ВГраница() Тогда
				СчетчикОбъектов = СчетчикОбъектов + 1;
				Прервать;
			КонецЕсли;
			
			НастройкиОбъекта = Новый Структура;
			НастройкиОбъекта.Вставить("ПравилоПоддержки", ПравилаПоддержки.Получить(Число(ПараметрыПоддержки[Индекс])));
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ПравилоПоставки", ПравилаПоставки.Получить(Число(ПараметрыПоддержки[Индекс])));
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ОбъектМетаданных", ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ОбъектПоставщика", ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
			
			МассивОбъектов.Добавить(НастройкиОбъекта);
		КонецЦикла; 
		
		Поставка.Вставить("Объекты", МассивОбъектов);
		
		Индекс = Индекс + 2; // пустые параметры в конце
		
		МассивПараметров.Добавить(Поставка);
	КонецЦикла; 
	
	Возврат МассивПараметров;

КонецФункции 

// Необходимо для повышения скорости поиска модулей при загрузке ключевых операций.
// В этой процедуре не будет необходимости, если плоскую выгрузку заменить на иерархическую.
//
Процедура ОптимизироватьХранениеМодулей(КаталогВыгрузкиКонфигурации)
	
	ФайлыМодулей = НайтиФайлы(КаталогВыгрузкиКонфигурации, "*.txt");
	Разделитель = ПолучитьРазделительПути();
	СписокФайлов = Новый СписокЗначений;
	
	Для каждого ФайлМодуля Из ФайлыМодулей Цикл
		Каталог = СтрЗаменить(Лев(ФайлМодуля.Имя, СтрНайти(ФайлМодуля.Имя, ".",,, 2) - 1), ".", Разделитель);
		СписокФайлов.Добавить(ФайлМодуля, Каталог);
	КонецЦикла;
	
	ФайлыМодулей = Неопределено;
	ПоследнийСозданныйКаталог = "";
	СписокФайлов.СортироватьПоПредставлению();
	
	Для каждого ЭлементСписка Из СписокФайлов Цикл
		ТекущийКаталог = КаталогВыгрузкиКонфигурации + ЭлементСписка.Представление;
		
		Если ТекущийКаталог <> ПоследнийСозданныйКаталог Тогда
			СоздатьКаталог(ТекущийКаталог);
			ПоследнийСозданныйКаталог = ТекущийКаталог;
		КонецЕсли;
		
		Файл = ЭлементСписка.Значение;
		КороткоеИмя = Сред(Файл.Имя, СтрНайти(Файл.Имя, ".",,, 2) + 1);
		ПереместитьФайл(Файл.ПолноеИмя, СтрШаблон("%1%2%3", ТекущийКаталог, Разделитель, КороткоеИмя));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиЧтенияКонфигурацииXML

// Определяет возможности СППР по загрузке объектов метаданных
Функция СтруктураЗагружаемыхОбъектов()

	СтруктураЗагружаемыхОбъектов = Новый Структура;
	
	//Configuration
	//- Корень конфигурации
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения из XML и реквизит СППР
	Свойства.Вставить("Name", "ИмяКонфигурации");
	Свойства.Вставить("Synonym", "НаименованиеКонфигурации");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеФайлы = Новый Массив; // Объекты, которые хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Language");
	ПодчиненныеФайлы.Добавить("Subsystem");
	ПодчиненныеФайлы.Добавить("StyleItem");
	ПодчиненныеФайлы.Добавить("Style");
	ПодчиненныеФайлы.Добавить("CommonPicture");
	ПодчиненныеФайлы.Добавить("SessionParameter");
	ПодчиненныеФайлы.Добавить("Role");
	ПодчиненныеФайлы.Добавить("CommonTemplate");
	ПодчиненныеФайлы.Добавить("FilterCriterion");
	ПодчиненныеФайлы.Добавить("CommonModule");
	ПодчиненныеФайлы.Добавить("CommonAttribute");
	ПодчиненныеФайлы.Добавить("ExchangePlan");
	ПодчиненныеФайлы.Добавить("XDTOPackage");
	ПодчиненныеФайлы.Добавить("WebService");
	ПодчиненныеФайлы.Добавить("HTTPService");
	ПодчиненныеФайлы.Добавить("WSReference");
	ПодчиненныеФайлы.Добавить("EventSubscription");
	ПодчиненныеФайлы.Добавить("ScheduledJob");
	ПодчиненныеФайлы.Добавить("SettingsStorage");
	ПодчиненныеФайлы.Добавить("FunctionalOption");
	ПодчиненныеФайлы.Добавить("FunctionalOptionsParameter");
	ПодчиненныеФайлы.Добавить("DefinedType");
	ПодчиненныеФайлы.Добавить("CommandGroup");
	ПодчиненныеФайлы.Добавить("CommonCommand");
	
	ПодчиненныеФайлы.Добавить("Constant");
	ПодчиненныеФайлы.Добавить("CommonForm");
	ПодчиненныеФайлы.Добавить("Catalog");
	ПодчиненныеФайлы.Добавить("Document");
	ПодчиненныеФайлы.Добавить("DocumentNumerator");
	ПодчиненныеФайлы.Добавить("Sequence");
	ПодчиненныеФайлы.Добавить("DocumentJournal");
	ПодчиненныеФайлы.Добавить("Enum");
	ПодчиненныеФайлы.Добавить("Report");
	ПодчиненныеФайлы.Добавить("DataProcessor");
	ПодчиненныеФайлы.Добавить("InformationRegister");
	ПодчиненныеФайлы.Добавить("AccumulationRegister");
	ПодчиненныеФайлы.Добавить("ChartOfCharacteristicTypes");
	ПодчиненныеФайлы.Добавить("ChartOfAccounts");
	ПодчиненныеФайлы.Добавить("AccountingRegister");
	ПодчиненныеФайлы.Добавить("ChartOfCalculationTypes");
	ПодчиненныеФайлы.Добавить("CalculationRegister");
	ПодчиненныеФайлы.Добавить("BusinessProcess");
	ПодчиненныеФайлы.Добавить("Task");
	ПодчиненныеФайлы.Добавить("ExternalDataSource");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтруктураЗагружаемыхОбъектов.Вставить("Configuration", Параметры);
	
#Область ОбщиеОбъектыДляМетаданных
	
	//- Форма
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Form", Параметры);
	
	//- Команда объекта
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ModifiesData", "ИзменяетДанные");
	Свойства.Вставить("Group", "ГруппаКоманд");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Command", Параметры);
	
	//- Макет объекта
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("TemplateType", "ТипМакета");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Template", Параметры);
	
	//- Предопределенные данные
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Code", "КодПоУмолчанию");
	Свойства.Вставить("Description", "НаименованиеПоУмолчанию");
	Свойства.Вставить("IsFolder", "Группа");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("PredefinedData");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	СтруктураЗагружаемыхОбъектов.Вставить("PredefinedData", Параметры);
	
#КонецОбласти 

#Область РазличныеТипыРеквизитов
	
	//- Реквизиты объектов
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Attribute", Параметры);
	
	//- Стандартные реквизиты
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("StandardAttribute", Параметры);
	
	//- Табличные части объектов
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	СтруктураЗагружаемыхОбъектов.Вставить("TabularSection", Параметры);
	
	//- Графы
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("References", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Column", Параметры);
	
	//- Измерения
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Dimension", Параметры);
	
	//- Ресурс
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Resource", Параметры);
	
	//- Реквизит адресации
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("AddressingAttribute", Параметры);
	
	//- Признак учета
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("AccountingFlag", Параметры);
	
	//- Значение константы
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("name", "Имя");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("ConstantValue", Параметры);
	
	//- Значение параметра сеанса
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("name", "Имя");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("SessionParameterValue", Параметры);
	
#КонецОбласти

#Область ОбщиеМетаданные
	
	//Language
	//- Язык
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("Language", Параметры);
	
	//Subsystem
	//- Подсистема
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("Content", "Состав");
	Свойства.Вставить("IncludeInCommandInterface", "ВключатьВКомандныйИнтерфейс");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Subsystem"); // Формы хранятся в отдельных файлах
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтруктураЗагружаемыхОбъектов.Вставить("Subsystem", Параметры);
	
	//StyleItem
	//- Элемент стиля
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("StyleItem", Параметры);
	
	//Style
	//- Стиль
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Style", Параметры);
	
	//CommonPicture
	//- Общая картинка
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("CommonPicture", Параметры);
	
	//Interface
	//- Интерфейс
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Interface", Параметры);
	
	//SessionParameter
	//- Параметр сеанса
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("SessionParameter", Параметры);
	
	//Role
	//- Роль
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	Параметры.Вставить("Rights", Истина);
	СтруктураЗагружаемыхОбъектов.Вставить("Role", Параметры);
	
	//CommonTemplate
	//- Общий макет
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("TemplateType", "ТипМакета");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("CommonTemplate", Параметры);
	
	//FilterCriterion
	//- Критерий отбора
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Type", "Тип");
	РасширенныеСвойства.Вставить("Content", "Состав");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("FilterCriterion", Параметры);
	
	//CommonModule
	//- Общий модуль
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Global", "Глобальный");
	РасширенныеСвойства.Вставить("ClientManagedApplication", "КлиентУправляемоеПриложение");
	РасширенныеСвойства.Вставить("Server", "Сервер");
	РасширенныеСвойства.Вставить("ExternalConnection", "ВнешнееСоединение");
	РасширенныеСвойства.Вставить("ServerCall", "ВызовСервера");
	РасширенныеСвойства.Вставить("Privileged", "Привилегированный");
	РасширенныеСвойства.Вставить("ReturnValuesReuse", "ПовторноеИспользованиеВозвращаемыхЗначений");
	РасширенныеСвойства.Вставить("ClientOrdinaryApplication", "КлиентОбычноеПриложение");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("CommonModule", Параметры);
	
	//CommonAttribute
	//- Общий реквизит
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Content", "Состав");
	РасширенныеСвойства.Вставить("AutoUse", "Автоиспользование");
	РасширенныеСвойства.Вставить("DataSeparation", "РазделениеДанных");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("CommonAttribute", Параметры);
	
	//ExchangePlan
	//- План обмена
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Code", "Код");
	СтандартныеРеквизиты.Вставить("Description", "Наименование");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("ExchangePlan", Параметры);
	
	//XDTOPackage
	//- XDTO-пакеты
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Namespace", "ПространствоИмен");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("XDTOPackage", Параметры);
	
	//WebService
	//- WEB-сервис
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Namespace", "ПространствоИмен");
	РасширенныеСвойства.Вставить("DescriptorFileName", "ИмяФайлаПубликации");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства);
	СтруктураЗагружаемыхОбъектов.Вставить("WebService", Параметры);
	
	//HTTPService
	//- HTTP-сервис
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("HTTPService", Параметры);
	
	//WSReference
	//- WS ссылки
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("LocationURL", "URLИсточника");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("WSReference", Параметры);
	
	//EventSubscription
	//- Подписка на событие
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Source", "Источник");
	РасширенныеСвойства.Вставить("Event", "Событие");
	РасширенныеСвойства.Вставить("Handler", "Обработчик");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("EventSubscription", Параметры);
	
	//ScheduledJob
	//- Регламентное задание
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("MethodName", "ИмяМетода");
	РасширенныеСвойства.Вставить("Description", "НаименованиеЗадания");
	РасширенныеСвойства.Вставить("Use", "Использование");
	РасширенныеСвойства.Вставить("Predefined", "Предопределенное");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("ScheduledJob", Параметры);
	
	//SettingsStorage
	//- Хранилище настроек
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтруктураЗагружаемыхОбъектов.Вставить("SettingsStorage", Параметры);
	
	//FunctionalOption
	//- Функциональная опция
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Location", "Хранение");
	РасширенныеСвойства.Вставить("PrivilegedGetMode", "ПривилегированныйРежимПриПолучении");
	РасширенныеСвойства.Вставить("Content", "Состав");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("FunctionalOption", Параметры);
	
	//FunctionalOptionsParameter
	//- Параметр функциональной опции
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("FunctionalOptionsParameter", Параметры);
	
	//DefinedType
	//- Определяемые типы
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("DefinedType", Параметры);
	
	//CommonCommand
	//- Общая команда
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Group", "ГруппаКоманд");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("CommonCommand", Параметры);
	
	//CommandGroup
	//- Группа команд
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("Category", "Категория");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("CommandGroup", Параметры);
	
	//CommonForm
	//- Общая форма
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ExtendedPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("CommonForm", Параметры);

#КонецОбласти
	
#Область Метаданные
	
	//Constant
	//- Константы
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("Constant", Параметры);
	
	//Catalog
	//- Справочник
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("HierarchyType", "ВидИерархии");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Owner", "Владелец");
	СтандартныеРеквизиты.Вставить("Parent", "Родитель");
	СтандартныеРеквизиты.Вставить("Code", "Код");
	СтандартныеРеквизиты.Вставить("Description", "Наименование");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	Параметры.Вставить("Predefined", Истина);
	СтруктураЗагружаемыхОбъектов.Вставить("Catalog", Параметры);
	
	//Document
	//- Документ
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("PostInPrivilegedMode", "ПривилегированныйРежимПриПроведении");
	Свойства.Вставить("UnpostInPrivilegedMode", "ПривилегированныйРежимПриОтменеПроведения");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("RegisterRecords", "ОписаниеДвиженийПоРегистру");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Date", "Дата");
	СтандартныеРеквизиты.Вставить("Number", "Номер");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("Document", Параметры);
	
	//DocumentNumerator
	//- Нумератор документов
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("DocumentNumerator", Параметры);
	
	//Sequence
	//- Последовательность
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
	РасширенныеСвойства.Вставить("Name", "Наименование");
	РасширенныеСвойства.Вставить("MoveBoundaryOnPosting", "ПеремещениеГраницыПриПроведении");
	РасширенныеСвойства.Вставить("Documents", "Документы");
	РасширенныеСвойства.Вставить("RegisterRecords", "Движения");
	Параметры.Вставить("ExtendedProperties", РасширенныеСвойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Dimension");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	СтруктураЗагружаемыхОбъектов.Вставить("Sequence", Параметры);
	
	//DocumentJournal
	//- Журнал документов
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Command");
	ПодчиненныеОбъекты.Добавить("Column");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Ref", "Ссылка");
	СтандартныеРеквизиты.Вставить("Date", "Дата");
	СтандартныеРеквизиты.Вставить("Number", "Номер");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("DocumentJournal", Параметры);
	
	//Enum
	//- Перечисление
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("EnumValue");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтруктураЗагружаемыхОбъектов.Вставить("Enum", Параметры);
	
	//- Предопределенное значение перечисления
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	СтруктураЗагружаемыхОбъектов.Вставить("EnumValue", Параметры);
	
	//Report
	//- Отчет
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ExtendedPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтруктураЗагружаемыхОбъектов.Вставить("Report", Параметры);
	
	//DataProcessor
	//- Обработка
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ExtendedPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтруктураЗагружаемыхОбъектов.Вставить("DataProcessor", Параметры);
	
	//InformationRegister
	//- Регистр сведений
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("WriteMode", "РегистрПодчиненРегистратору");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Resource");
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("Dimension");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Recorder", "Регистратор"); 
	СтандартныеРеквизиты.Вставить("Period", "Период");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("InformationRegister", Параметры);
	
	//AccumulationRegister
	//- Регистр накопления
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("RegisterType", "ВидРегистраНакопления");
	Свойства.Вставить("DataLockControlMode", "РегистрПодчиненРегистратору");// Любое свойство, в обработчике станет "Истина"
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Resource");
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("Dimension");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Recorder", "Регистратор"); 
	СтандартныеРеквизиты.Вставить("Period", "Период");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("AccumulationRegister", Параметры);
	
	//ChartOfCharacteristicTypes
	//- План видов характеристик
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("Hierarchical", "ВидИерархии");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Parent", "Родитель");
	СтандартныеРеквизиты.Вставить("Code", "Код");
	СтандартныеРеквизиты.Вставить("Description", "Наименование");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	Параметры.Вставить("Predefined", Истина);
	СтруктураЗагружаемыхОбъектов.Вставить("ChartOfCharacteristicTypes", Параметры);
	
	//ChartOfAccounts
	//- План счетов
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("AccountingFlag");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Code", "Код");
	СтандартныеРеквизиты.Вставить("Description", "Наименование");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	Параметры.Вставить("Predefined", Истина);
	СтруктураЗагружаемыхОбъектов.Вставить("ChartOfAccounts", Параметры);
	
	//AccountingRegister
	//- Регистр бухгалтерии
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("DataLockControlMode", "РегистрПодчиненРегистратору"); // Любое свойство, в обработчике станет "Истина"
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Resource");
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("Dimension");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Recorder", "Регистратор"); 
	СтандартныеРеквизиты.Вставить("Period", "Период");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("AccountingRegister", Параметры);
	
	//ChartOfCalculationTypes
	//- План видов расчетов
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Code", "Код");
	СтандартныеРеквизиты.Вставить("Description", "Наименование");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	Параметры.Вставить("Predefined", Истина);
	СтруктураЗагружаемыхОбъектов.Вставить("ChartOfCalculationTypes", Параметры);
	
	//CalculationRegister
	//- Регистр расчета
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("DataLockControlMode", "РегистрПодчиненРегистратору"); // Любое свойство, в обработчике станет "Истина"
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Resource");
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("Dimension");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Recorder", "Регистратор"); 
	СтандартныеРеквизиты.Вставить("RegistrationPeriod", "ПериодРегистрации");
	СтандартныеРеквизиты.Вставить("CalculationType", "ВидРасчета");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("CalculationRegister", Параметры);
	
	//Recalculation
	//- Перерасчет
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Dimension");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	СтруктураЗагружаемыхОбъектов.Вставить("Recalculation", Параметры);
	
	//BusinessProcess
	//- Бизнес-процесс
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Date", "Дата");
	СтандартныеРеквизиты.Вставить("Number", "Номер");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("BusinessProcess", Параметры);
	
	//Task
	//- Задача
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
	Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
	Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
	Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
	Свойства.Вставить("Explanation", "Пояснение");
	Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
	Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
	Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
	Параметры.Вставить("Properties", Свойства); 
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attribute");
	ПодчиненныеОбъекты.Добавить("TabularSection");
	ПодчиненныеОбъекты.Добавить("AddressingAttribute");
	ПодчиненныеОбъекты.Добавить("Command");
	Параметры.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив;
	ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
	ПодчиненныеФайлы.Добавить("Template");
	Параметры.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
	СтандартныеРеквизиты.Вставить("Date", "Дата");
	СтандартныеРеквизиты.Вставить("Number", "Номер");
	СтандартныеРеквизиты.Вставить("Description", "Наименование");
	Параметры.Вставить("StandardAttributes", СтандартныеРеквизиты);
	СтруктураЗагружаемыхОбъектов.Вставить("Task", Параметры);
	
	//ExternalDataSource
	//- Внешний источник данных
	Параметры = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Параметры.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("ExternalDataSource", Параметры);
	
#КонецОбласти
	
	Возврат СтруктураЗагружаемыхОбъектов;

КонецФункции 

Функция СтандартныеРеквизитыПоТипу(КлассОбъекта)

	КоллекцияСтандартныхРеквизитов = Новый Массив;
	
	Если КлассОбъекта = "ExchangePlan" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "Catalog" Тогда
	
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Parent");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Owner");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "Document" Тогда
	
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "DocumentJournal" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Ref");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "InformationRegister" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Period");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "AccountingRegister" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Period");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "AccumulationRegister" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Period");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "CalculationRegister" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "RegistrationPeriod");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "CalculationType");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "ChartOfCharacteristicTypes" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "ChartOfAccounts" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "ChartOfCalculationTypes" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "BusinessProcess" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "Task" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	КонецЕсли; 
	
	Возврат КоллекцияСтандартныхРеквизитов;

КонецФункции 

Функция ПредопределенныеЗначенияСтроковыхКонстант(Значение, КлассОбъекта, ИмяСвойства = "", Параметры = Неопределено)

	Если ВРег(Значение) = "TRUE" И ИмяСвойства <> "ВидИерархии" Тогда
		Возврат Истина;
	ИначеЕсли ВРег(Значение) = "FALSE" И ИмяСвойства <> "ВидИерархии" Тогда
		Возврат Ложь;
	ИначеЕсли ВРег(Значение) = "XS:BOOLEAN" Тогда
		Возврат "Булево";
	ИначеЕсли ВРег(Значение) = "XS:STRING" Тогда
		Возврат "Строка";
	ИначеЕсли ВРег(Значение) = "XS:DATETIME" Тогда
		Возврат "Дата";
	ИначеЕсли ВРег(Значение) = "XS:DECIMAL" Тогда
		Возврат "Число";
	ИначеЕсли ИмяСвойства = "ТипыЗначенияРеквизита" 
		ИЛИ ИмяСвойства = "Тип" Тогда
		ИменаТипов = Новый Соответствие;
		ИменаТипов.Вставить("XS:BOOLEAN",                        "Булево");
		ИменаТипов.Вставить("XS:STRING",                         "Строка");
		ИменаТипов.Вставить("XS:DATETIME",                       "Дата");
		ИменаТипов.Вставить("XS:DECIMAL",                        "Число");
		ИменаТипов.Вставить("XS:BASE64BINARY",                   "ДвоичныеДанные");
		ИменаТипов.Вставить("V8:VALUESTORAGE",                   "ХранилищеЗначений");
		ИменаТипов.Вставить("V8:UUID",                           "УникальныйИдентификатор");
		ИменаТипов.Вставить("V8:FIXEDARRAY",                     "ФиксированныйМассив");
		ИменаТипов.Вставить("V8:FIXEDSTRUCTURE",                 "ФиксированнаяСтруктура");
		ИменаТипов.Вставить("V8:FIXEDMAP",                       "ФиксированноеСоответствие");
		ИменаТипов.Вставить("V8:NULL",                           "Null");
		ИменаТипов.Вставить("V8:TYPEDESCRIPTION",                "ОписаниеТипов");
		ИменаТипов.Вставить("ENT:ACCUMULATIONRECORDTYPE",        "ВидДвиженияНакопления");
		ИменаТипов.Вставить("ENT:ACCOUNTINGRECORDTYPE",          "ВидДвиженияБухгалтерии");
		ИменаТипов.Вставить("ENT:ACCOUNTTYPE",                   "ВидСчета");
		ИменаТипов.Вставить("CFG:BUSINESSPROCESSROUTEPOINTREF",  "ТочкаМаршрутаБизнесПроцессаСсылка");
		
		
		ИмяТипа = ИменаТипов.Получить(ВРег(Значение));
		Если ИмяТипа = Неопределено Тогда
			Возврат Значение;
		Иначе
			Возврат ИмяТипа;
		КонецЕсли; 
	ИначеЕсли ИмяСвойства = "ПроверкаЗаполнения" И Значение = "DontCheck" Тогда
		Возврат Перечисления.ВариантыПроверкиЗаполнения.НеПроверять;
	ИначеЕсли ИмяСвойства = "ПроверкаЗаполнения" И Значение = "ShowError" Тогда
		Возврат Перечисления.ВариантыПроверкиЗаполнения.ВыдаватьОшибку;
	ИначеЕсли ИмяСвойства = "ВидИерархии" И (Значение = "HierarchyFoldersAndItems" ИЛИ ВРег(Значение) = "TRUE") Тогда
		Возврат Перечисления.ВидыИерархии.ИерархияГруппИЭлементов;
	ИначеЕсли ИмяСвойства = "ВидИерархии" И Значение = "HierarchyOfItems" Тогда
		Возврат Перечисления.ВидыИерархии.ИерархияЭлементов;
	ИначеЕсли ИмяСвойства = "ВидИерархии" И (Значение = "" ИЛИ ВРег(Значение) = "FALSE") Тогда
		Возврат Перечисления.ВидыИерархии.ПустаяСсылка();
	ИначеЕсли (КлассОбъекта = "StandardAttribute"
		ИЛИ КлассОбъекта = "ConstantValue"
		ИЛИ КлассОбъекта = "SessionParameterValue")
		И ИмяСвойства = "Имя" Тогда
		ИменаСтандартныхРеквизитов = Новый Соответствие;
		ИменаСтандартныхРеквизитов.Вставить("Description",        "Наименование");
		ИменаСтандартныхРеквизитов.Вставить("Code",               "Код");
		ИменаСтандартныхРеквизитов.Вставить("Date",               "Дата");
		ИменаСтандартныхРеквизитов.Вставить("Parent",             "Родитель");
		ИменаСтандартныхРеквизитов.Вставить("Owner",              "Владелец");
		ИменаСтандартныхРеквизитов.Вставить("Number",             "Номер");
		ИменаСтандартныхРеквизитов.Вставить("Value",              "Значение");
		ИменаСтандартныхРеквизитов.Вставить("Period",             "Период");
		ИменаСтандартныхРеквизитов.Вставить("Recorder",           "Регистратор");
		ИменаСтандартныхРеквизитов.Вставить("Ref",                "Ссылка");
		ИменаСтандартныхРеквизитов.Вставить("RegistrationPeriod", "ПериодРегистрации");
		ИменаСтандартныхРеквизитов.Вставить("CalculationType",    "ВидРасчета");
		
		ИмяСтандартногоРеквизита = ИменаСтандартныхРеквизитов.Получить(Значение);
		Если ИмяСтандартногоРеквизита = Неопределено Тогда
			Возврат Значение;
		Иначе
			Возврат ИмяСтандартногоРеквизита;
		КонецЕсли;
	ИначеЕсли КлассОбъекта = "ScheduledJob" И ИмяСвойства = "ИмяМетода" Тогда
		Возврат СтрЗаменить(Значение, "CommonModule.", "");
	ИначеЕсли КлассОбъекта = "EventSubscription" И ИмяСвойства = "Обработчик" Тогда
		Возврат СтрЗаменить(Значение, "CommonModule.", "");
	ИначеЕсли ИмяСвойства = "ГруппаКоманд" Тогда
		СтандартныеГруппыКоманд = Новый Соответствие;
		СтандартныеГруппыКоманд.Вставить("FormCommandBarImportant",      Перечисления.СтандартныеГруппыКоманд.КоманднаяПанельФормыВажное);
		СтандартныеГруппыКоманд.Вставить("FormCommandBarCreateBasedOn",  Перечисления.СтандартныеГруппыКоманд.КоманднаяПанельФормыСоздатьНаОсновании);
		СтандартныеГруппыКоманд.Вставить("ActionsPanelReports",          Перечисления.СтандартныеГруппыКоманд.ПанельДействийОтчеты);
		СтандартныеГруппыКоманд.Вставить("ActionsPanelTools",            Перечисления.СтандартныеГруппыКоманд.ПанельДействийСервис);
		СтандартныеГруппыКоманд.Вставить("ActionsPanelCreate",           Перечисления.СтандартныеГруппыКоманд.ПанельДействийСоздать);
		СтандартныеГруппыКоманд.Вставить("NavigationPanelImportant",     Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииВажное);
		СтандартныеГруппыКоманд.Вставить("NavigationPanelOrdinary",      Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииОбычное);
		СтандартныеГруппыКоманд.Вставить("NavigationPanelSeeAlso",       Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииСмТакже);
		СтандартныеГруппыКоманд.Вставить("FormNavigationPanelImportant", Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииФормыВажное);
		СтандартныеГруппыКоманд.Вставить("FormNavigationPanelGoTo",      Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииФормыПерейти);
		СтандартныеГруппыКоманд.Вставить("FormNavigationPanelSeeAlso",   Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииФормыСмТакже);
		
		Если Найти(Значение, "CommandGroup.") > 0 Тогда
			Если Параметры <> Неопределено Тогда
				Возврат Параметры.ТипыМетаданных.Получить(Значение);
			Иначе
				Возврат Справочники.ОбъектыМетаданных.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		Возврат СтандартныеГруппыКоманд.Получить(Значение);
	ИначеЕсли ИмяСвойства = "Категория" Тогда
		КатегорииГруппКоманд = Новый Соответствие;
		КатегорииГруппКоманд.Вставить("NavigationPanel",     Перечисления.КатегорииГруппКоманд.ПанельНавигации);
		КатегорииГруппКоманд.Вставить("FormNavigationPanel", Перечисления.КатегорииГруппКоманд.ПанельНавигацииФормы);
		КатегорииГруппКоманд.Вставить("ActionsPanel",        Перечисления.КатегорииГруппКоманд.ПанельДействий);
		КатегорииГруппКоманд.Вставить("FormCommandBar",      Перечисления.КатегорииГруппКоманд.КоманднаяПанельФормы);
		
		Возврат КатегорииГруппКоманд.Получить(Значение);
	ИначеЕсли КлассОбъекта = "InformationRegister" И ИмяСвойства = "РегистрПодчиненРегистратору" И Значение = "RecorderSubordinate" Тогда
		Возврат Истина;
	ИначеЕсли КлассОбъекта = "InformationRegister" И ИмяСвойства = "РегистрПодчиненРегистратору" И Значение = "Independent" Тогда
		Возврат Ложь;
	ИначеЕсли (КлассОбъекта = "AccumulationRegister" ИЛИ КлассОбъекта = "AccountingRegister" ИЛИ КлассОбъекта = "CalculationRegister") И ИмяСвойства = "РегистрПодчиненРегистратору" Тогда
		Возврат Истина;
	ИначеЕсли ИмяСвойства = "ВидРегистраНакопления" И Значение = "Turnovers" Тогда
		Возврат Перечисления.ВидыРегистровНакопления.Обороты;
	ИначеЕсли ИмяСвойства = "ВидРегистраНакопления" И Значение = "Balance" Тогда
		Возврат Перечисления.ВидыРегистровНакопления.Остатки;
	ИначеЕсли КлассОбъекта = "EventSubscription" И ИмяСвойства = "Событие" Тогда
		События = Новый Соответствие;
		События.Вставить("BeforeDelete",                    "ПередУдалением");
		События.Вставить("FillCheckProcessing",             "ОбработкаПроверкиЗаполнения");
		События.Вставить("OnSetNewNumber",                  "ПриУстановкеНовогоНомера");
		События.Вставить("Posting",                         "ОбработкаПроведения");
		События.Вставить("BeforeWrite",                     "ПередЗаписью");
		События.Вставить("UndoPosting",                     "ОбработкаУдаленияПроведения");
		События.Вставить("InteractiveActivationProcessing", "ОбработкаИнтерактивнойАктивации");
		События.Вставить("CheckExecutionProcessing",        "ОбработкаПроверкиВыполнения");
		События.Вставить("BeforeExecute",                   "ПередВыполнением");
		События.Вставить("BeforeExecuteInteractively",      "ПередИнтерактивнымВыполнением");
		События.Вставить("OnExecute",                       "ПриВыполнении");
		События.Вставить("OnSendDataToSlave",               "ПриОтправкеДанныхПодчиненному");
		События.Вставить("OnSendDataToMaster",              "ПриОтправкеДанныхГлавному");
		События.Вставить("OnReceiveDataFromSlave",          "ПриПолученииДанныхОтПодчиненного");
		События.Вставить("OnReceiveDataFromMaster",         "ПриПолученииДанныхОтГлавного");
		События.Вставить("OnSendNodeDataToSlave",           "ПриОтправкеДанныхУзлаПодчиненному");
		События.Вставить("OnReceiveNodeDataFromMaster",     "ПриПолученииДанныхУзлаОтГлавного");
		События.Вставить("ChoiceDataGetProcessing",         "ОбработкаПолученияДанныхВыбора");
		События.Вставить("FormGetProcessing",               "ОбработкаПолученияФормы");
		События.Вставить("PresentationFieldsGetProcessing", "ОбработкаПолученияПолейПредставления");
		События.Вставить("PresentationGetProcessing",       "ОбработкаПолученияПредставления");
		События.Вставить("SaveProcessing",                  "ОбработкаСохранения");
		События.Вставить("LoadProcessing",                  "ОбработкаЗагрузки");
		События.Вставить("GetDescriptionProcessing",        "ОбработкаПолученияОписания");
		События.Вставить("SetDescriptionProcessing",        "ОбработкаУстановкиОписания");
		События.Вставить("OnWrite",                         "ПриЗаписи");
		События.Вставить("OnSetNewCode",                    "ПриУстановкеНовогоКода");
		События.Вставить("OnCopy",                          "ПриКопировании");
		События.Вставить("Filling",                         "ОбработкаЗаполнения");
		
		Возврат События.Получить(Значение);
		
	ИначеЕсли КлассОбъекта = "Right" И ИмяСвойства = "Право" Тогда
		Права = Новый Соответствие;
		Права.Вставить("Read",   Перечисления.ПраваДоступа.Чтение);
		Права.Вставить("Insert", Перечисления.ПраваДоступа.Добавление);
		Права.Вставить("Update", Перечисления.ПраваДоступа.Изменение);
		Права.Вставить("Delete", Перечисления.ПраваДоступа.Удаление);
		Права.Вставить("Use",    Перечисления.ПраваДоступа.Использование);
		Права.Вставить("View",   Перечисления.ПраваДоступа.Просмотр);
		
		Возврат Права.Получить(Значение);
	ИначеЕсли ИмяСвойства = "ПеремещениеГраницыПриПроведении" И Значение = "DontMove" Тогда
		Возврат Перечисления.ПеремещениеГраницыПриПроведении.НеПеремещать;
	ИначеЕсли ИмяСвойства = "ПеремещениеГраницыПриПроведении" И Значение = "Move" Тогда
		Возврат Перечисления.ПеремещениеГраницыПриПроведении.Перемещать;
	ИначеЕсли ИмяСвойства = "ПовторноеИспользованиеВозвращаемыхЗначений" И Значение = "DontUse" Тогда
		Возврат Перечисления.ВариантыПовторногоИспользованияВозвращаемыхЗначений.НеИспользовать;
	ИначеЕсли ИмяСвойства = "ПовторноеИспользованиеВозвращаемыхЗначений" И Значение = "DuringSession" Тогда
		Возврат Перечисления.ВариантыПовторногоИспользованияВозвращаемыхЗначений.НаВремяСеанса;
	ИначеЕсли ИмяСвойства = "ПовторноеИспользованиеВозвращаемыхЗначений" И Значение = "DuringRequest" Тогда
		Возврат Перечисления.ВариантыПовторногоИспользованияВозвращаемыхЗначений.НаВремяВызова;
	ИначеЕсли ИмяСвойства = "РазделениеДанных" И Значение = "DontUse" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяСвойства = "РазделениеДанных" И Значение = "Separate" Тогда
		Возврат Истина;
	ИначеЕсли ИмяСвойства = "Автоиспользование" И Значение = "Use" Тогда
		Возврат Перечисления.АвтоИспользованиеОбщегоРеквизита.Использовать;
	ИначеЕсли ИмяСвойства = "Автоиспользование" И Значение = "DontUse" Тогда
		Возврат Перечисления.АвтоИспользованиеОбщегоРеквизита.НеИспользовать;
	ИначеЕсли (КлассОбъекта = "Template" ИЛИ КлассОбъекта = "CommonTemplate") И ИмяСвойства = "ТипМакета" Тогда
		ТипыМакетов = Новый Соответствие;
		ТипыМакетов.Вставить("ActiveDocument",                    Перечисления.ТипыМакетов.ActiveDocument);
		ТипыМакетов.Вставить("HTMLDocument",                      Перечисления.ТипыМакетов.HTMLДокумент);
		ТипыМакетов.Вставить("GeographicalSchema",                Перечисления.ТипыМакетов.ГеографическаяСхема);
		ТипыМакетов.Вставить("GraphicalSchema",                   Перечисления.ТипыМакетов.ГрафическаяСхема);
		ТипыМакетов.Вставить("BinaryData",                        Перечисления.ТипыМакетов.ДвоичныеДанные);
		ТипыМакетов.Вставить("DataCompositionAppearanceTemplate", Перечисления.ТипыМакетов.МакетОформленияКомпоновкиДанных);
		ТипыМакетов.Вставить("DataCompositionSchema",             Перечисления.ТипыМакетов.СхемаКомпоновкиДанных);
		ТипыМакетов.Вставить("SpreadsheetDocument",               Перечисления.ТипыМакетов.ТабличныйДокумент);
		ТипыМакетов.Вставить("TextDocument",                      Перечисления.ТипыМакетов.ТекстовыйДокумент);
		
		Возврат ТипыМакетов.Получить(Значение);
	КонецЕсли; 
	
	Возврат Значение;

КонецФункции 

Функция НаименованиеКлассаОбъекта(КлассОбъекта)
	
	Если КлассОбъекта = "Constant" Тогда
		Возврат "Константа";
	КонецЕсли;
	
	Если КлассОбъекта = "Catalog" Тогда
		Возврат "Справочник";
	КонецЕсли;
	
	Если КлассОбъекта = "Document" Тогда
		Возврат "Документ";
	КонецЕсли; 
	
	Если КлассОбъекта = "Sequence" Тогда
		Возврат "Последовательность";
	КонецЕсли; 
	
	Если КлассОбъекта = "DocumentNumerator" Тогда
		Возврат "Нумератор";
	КонецЕсли;
	
	Если КлассОбъекта = "DocumentJournal" Тогда
		Возврат "ЖурналДокументов";
	КонецЕсли; 
	
	Если КлассОбъекта = "Enum" Тогда
		Возврат "Перечисление";
	КонецЕсли;
	
	Если КлассОбъекта = "Report" Тогда
		Возврат "Отчет";
	КонецЕсли;
	
	Если КлассОбъекта = "DataProcessor" Тогда
		Возврат "Обработка";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartOfCharacteristicTypes" Тогда
		Возврат "ПланВидовХарактеристик";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartOfAccounts" Тогда
		Возврат "ПланСчетов";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartOfCalculationTypes" Тогда
		Возврат "ПланВидовРасчета";
	КонецЕсли;
	
	Если КлассОбъекта = "InformationRegister" Тогда
		Возврат "РегистрСведений";
	КонецЕсли;
	
	Если КлассОбъекта = "AccumulationRegister" Тогда
		Возврат "РегистрНакопления";
	КонецЕсли;
	
	Если КлассОбъекта = "AccountingRegister" Тогда
		Возврат "РегистрБухгалтерии";
	КонецЕсли;
	
	Если КлассОбъекта = "CalculationRegister" Тогда
		Возврат "РегистрРасчета";
	КонецЕсли;
	
	Если КлассОбъекта = "BusinessProcess" Тогда
		Возврат "БизнесПроцесс";
	КонецЕсли;
	
	Если КлассОбъекта = "Task" Тогда
		Возврат "Задача";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonModule" Тогда
		Возврат "ОбщийМодуль";
	КонецЕсли;
	
	Если КлассОбъекта = "SessionParameter" Тогда
		Возврат "ПараметрСеанса";
	КонецЕсли;
	
	Если КлассОбъекта = "Role" Тогда
		Возврат "Роль";
	КонецЕсли;
	
	Если КлассОбъекта = "ExchangePlan" Тогда
		Возврат "ПланОбмена";
	КонецЕсли;
	
	Если КлассОбъекта = "FilterCriterion" Тогда
		Возврат "КритерийОтбора";
	КонецЕсли;
	
	Если КлассОбъекта = "EventSubscription" Тогда
		Возврат "ПодпискаНаСобытие";
	КонецЕсли;
	
	Если КлассОбъекта = "ScheduledJob" Тогда
		Возврат "РегламентноеЗадание";
	КонецЕсли;
	
	Если КлассОбъекта = "FunctionalOption" Тогда
		Возврат "ФункциональнаяОпция";
	КонецЕсли;
	
	Если КлассОбъекта = "FunctionalOptionsParameter" Тогда
		Возврат "ПараметрФункциональнойОпции";
	КонецЕсли;
	
	Если КлассОбъекта = "SettingsStorage" Тогда
		Возврат "ХранилищеНастроек";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonForm" Тогда
		Возврат "ОбщаяФорма";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonCommand" Тогда
		Возврат "ОбщаяКоманда";
	КонецЕсли;
	
	Если КлассОбъекта = "CommandGroup" Тогда
		Возврат "ГруппаКоманд";
	КонецЕсли;
	
	Если КлассОбъекта = "XDTOPackage" Тогда
		Возврат "ПакетXDTO";
	КонецЕсли;
	
	Если КлассОбъекта = "WebService" Тогда
		Возврат "WebСервис";
	КонецЕсли;
	
	Если КлассОбъекта = "WSReference" Тогда
		Возврат "WSСсылка";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonAttribute" Тогда
		Возврат "ОбщийРеквизит";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonPicture" Тогда
		Возврат "ОбщаяКартинка";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonTemplate" Тогда
		Возврат "ОбщийМакет";
	КонецЕсли;
	
	Если КлассОбъекта = "DefinedType" Тогда
		Возврат "ОпределяемыйТип";
	КонецЕсли;
	
	Если КлассОбъекта = "ExternalDataSource" Тогда
		Возврат "ВнешнийИсточникДанных";
	КонецЕсли;
	
	Если КлассОбъекта = "HTTPService" Тогда
		Возврат "HTTPСервис";
	КонецЕсли;
	
	Если КлассОбъекта = "Language" Тогда
		Возврат "Язык";
	КонецЕсли;
	
	Если КлассОбъекта = "StyleItem" Тогда
		Возврат "ЭлементСтиля";
	КонецЕсли;
	
	Если КлассОбъекта = "Style" Тогда
		Возврат "Стиль";
	КонецЕсли;
	

КонецФункции 

Функция ЗначениеСвойстваПоУмолчанию(ИмяСвойства)

	Если ИмяСвойства = "Имя"
		ИЛИ ИмяСвойства = "Синоним" 
		ИЛИ ИмяСвойства = "Комментарий" 
		ИЛИ ИмяСвойства = "Подсказка" 
		ИЛИ ИмяСвойства = "Пояснение" 
		ИЛИ ИмяСвойства = "ПредставлениеОбъекта" 
		ИЛИ ИмяСвойства = "ПредставлениеСписка" 
		ИЛИ ИмяСвойства = "РасширенноеПредставлениеОбъекта" 
		ИЛИ ИмяСвойства = "РасширенноеПредставлениеСписка" Тогда
		
		Возврат "";
		
	ИначеЕсли ИмяСвойства = "ПроверкаЗаполнения" Тогда
		Возврат Перечисления.ВариантыПроверкиЗаполнения.НеПроверять;
	ИначеЕсли ИмяСвойства = "ВидИерархии" Тогда
		Возврат Перечисления.ВидыИерархии.ИерархияЭлементов;
	ИначеЕсли ИмяСвойства = "Группа" Тогда // Группа предопределенных данных
		Возврат Ложь;
	ИначеЕсли ИмяСвойства = "КодПоУмолчанию" Тогда // Код предопределенных данных
		Возврат "";
	ИначеЕсли ИмяСвойства = "НаименованиеПоУмолчанию" Тогда // Наименование предопределенных данных
		Возврат "";
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция СтруктураТиповФорм()

	Результат = Новый Структура;
	
	Результат.Вставить("DefaultObjectForm", Перечисления.ТипыФорм.ОсновнаяФормаОбъекта);
	Результат.Вставить("DefaultFolderForm", Перечисления.ТипыФорм.ОсновнаяФормаГруппы);
	Результат.Вставить("DefaultListForm", Перечисления.ТипыФорм.ОсновнаяФормаСписка);
	Результат.Вставить("DefaultChoiceForm", Перечисления.ТипыФорм.ОсновнаяФормаДляВыбора);
	Результат.Вставить("DefaultFolderChoiceForm", Перечисления.ТипыФорм.ОсновнаяФормаДляВыбораГруппы);
	Результат.Вставить("DefaultForm", Перечисления.ТипыФорм.ОсновнаяФорма);
	Результат.Вставить("DefaultSettingsForm", Перечисления.ТипыФорм.ОсновнаяФормаНастроек);
	Результат.Вставить("DefaultVariantForm", Перечисления.ТипыФорм.ОсновнаяФормаВарианта);
	Результат.Вставить("DefaultRecordForm", Перечисления.ТипыФорм.ОсновнаяФормаЗаписи);
	Результат.Вставить("DefaultLoadForm", Перечисления.ТипыФорм.ОсновнаяФормаЗагрузки);
	Результат.Вставить("DefaultSaveForm", Перечисления.ТипыФорм.ОсновнаяФормаСохранения);
	
	Возврат Результат;

КонецФункции 
 
#КонецОбласти

#Область Прочие

Процедура ДобавитьЗаписьВЛог(Параметры, ИмяСобытия, Комментарий = "", Уровень = Неопределено, ПрочитатьВесьЛогВЖР = Ложь)

	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли; 
	
	Если Параметры.Свойство("ВеткаИсточник") Тогда
	
		МетаданныеЖР = Метаданные.Справочники.Ветки;
		ДанныеЖР = Параметры.ВеткаИсточник;
	
	ИначеЕсли Параметры.Свойство("Проект") Тогда
	
		МетаданныеЖР = Метаданные.Справочники.Проекты;
		ДанныеЖР = Параметры.Проект;
	
	Иначе
	
		МетаданныеЖР = Неопределено;
		ДанныеЖР = ИмяСобытия;
	
	КонецЕсли;
	
	// Считываем весь лог в журнал регистрации.
	Если ПрочитатьВесьЛогВЖР Тогда
	
		Лог = Новый ТекстовыйДокумент;
		Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
		Если Файл.Существует() Тогда
			Лог.Прочитать(Параметры.ИмяФайлаЛогов);
		КонецЕсли;
		
		Комментарий = Комментарий + Символы.ПС + Лог.ПолучитьТекст();
		Лог = Неопределено;
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка метаданных'") + "." + ИмяСобытия, 
		Уровень,
		МетаданныеЖР,
		ДанныеЖР,
		Комментарий);
	
	Лог = Новый ТекстовыйДокумент;
	Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(Параметры.ИмяФайлаЛогов);
	КонецЕсли;
	Лог.ДобавитьСтроку(Строка(ТекущаяДата()) + " " +  ИмяСобытия);
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Лог.ДобавитьСтроку(Комментарий);
	КонецЕсли; 
	Лог.Записать(Параметры.ИмяФайлаЛогов);
	Лог = Неопределено;
	
КонецПроцедуры

Процедура ИсправитьФайлКонфигурации(ФайлКонфигурации)
	
	СистемаяИнформация = Новый СистемнаяИнформация;
	Версия = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(СистемаяИнформация.ВерсияПриложения);
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(Версия, "8.3.8") >= 0  Тогда
		Возврат;
	КонецЕсли; 
	
	// исправляем файл конфигурации, если текущая версия ниже 8.3.8
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.Прочитать(ФайлКонфигурации);
	
	ТекстФайла = ТекстовыйФайл.ПолучитьТекст();
	ТекстФайла = СтрЗаменить(ТекстФайла, "PushNotification", "Telephony");
	ТекстФайла = СтрЗаменить(ТекстФайла, "LocalNotification", "Telephony");
	ТекстФайла = СтрЗаменить(ТекстФайла, "Print", "Telephony");
	ТекстФайла = СтрЗаменить(ТекстФайла, "InAppPurchase", "Telephony");
	ТекстовыйФайл.УстановитьТекст(ТекстФайла);
	
	ТекстовыйФайл.Записать(ФайлКонфигурации);

КонецПроцедуры

Процедура СоздаватьНовуюИБИзХранилища(Параметры)
	
	Если Параметры.Свойство("СоздаватьНовуюИБИзХранилища") И Параметры.СоздаватьНовуюИБИзХранилища Тогда
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало создания базы для загрузки метаданных'"));
		
		Файл = Новый Файл(Параметры.КаталогИБДляЗагрузкиМетаданных);
		Если Файл.Существует() Тогда
			УдалитьФайлы(Параметры.КаталогИБДляЗагрузкиМетаданных, "*");
		КонецЕсли;
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 CREATEINFOBASE File=""%КаталогИБДляЗагрузкиМетаданных%""
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate
			| /DumpResult ""%ИмяФайлаРезультатов%""";
			
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИБДляЗагрузкиМетаданных%", Параметры.КаталогИБДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
		
		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание создания базы для загрузки метаданных'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных(Параметры)
	
	Если Параметры.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных Тогда
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало обновления базы для загрузки метаданных'"));
		
		ТекстОбновленияКонфигурацииБД = "";
		Если Параметры.Свойство("ОбновлятьКонфигурациюБазыДанных") И Параметры.ОбновлятьКонфигурациюБазыДанных Тогда
			ТекстОбновленияКонфигурацииБД = "/UpdateDBCfg";
		КонецЕсли;
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
					| %СтрокаСоединенияИБДляЗагрузкиМетаданных% 
					| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
					| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
					| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
					| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
					| /ConfigurationRepositoryUpdateCfg -force %ТекстОбновленияКонфигурацииБД% /AllowExecuteScheduledJobs -Off /DumpResult ""%ИмяФайлаРезультатов%""
					| /ConfigurationRepositoryBindCfg -forceBindAlreadyBindedUser -forceReplaceCfg
					|";
					
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%", Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%", Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%", Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%", Параметры.КаталогХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ТекстОбновленияКонфигурацииБД%", ТекстОбновленияКонфигурацииБД);
		
		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание обновления базы для загрузки метаданных'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
		
		// Проверить успешность выполнения
		Если КодВозврата <> 0  Тогда
	
			ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
			ВызватьИсключение НСтр("ru = 'При загрузке метаданных возникли ошибки (см. Журнал регистрации).
				|Обновление базы из хранилища конфигураций закончилось неудачей.'");
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуКонфигурацииВXML(Параметры)
	
	Если Параметры.ВыгрузкуКонфигурацииВXML Тогда
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало выгрузки конфигурации в XML'"));
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs
					| %СтрокаСоединенияИБДляЗагрузкиМетаданных%
					| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%""
					| /DumpConfigToFiles ""%КаталогВыгрузкиКонфигурации%"" -format Plain  
					| /DumpResult ""%ИмяФайлаРезультатов%""
					| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
					
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%", Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%", Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%", Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогВыгрузкиКонфигурации%", Параметры.КаталогВыгрузкиКонфигурации);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
		
		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
		
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание выгрузки конфигурации в XML'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
		
		// Проверить успешность выполнения
		Если КодВозврата <> 0 Тогда
		
			ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
			ВызватьИсключение  НСтр("ru = 'При загрузке метаданных возникли ошибки (см. Журнал регистрации).
				|Выгрузка конфигурации в XML закончилась неудачей.'");
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаОбработчиков

Процедура ЗагрузитьОбработчикиОбновленияОднойВерсии(ПроектСсылка, Версия, Параметры, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыЗагрузкиМетаданных(ПроектСсылка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииПроекта.Код КАК Код,
	|	ВерсииПроекта.КаталогИБДляЗагрузкиМетаданных КАК КаталогИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ИмяПользователяИБДляЗагрузкиМетаданных КАК ИмяПользователяИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ПарольПользователяИБДляЗагрузкиМетаданных КАК ПарольПользователяИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных КАК ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных,
	|	ВерсииПроекта.Ветка.Имя КАК РасположениеХранилища,
	|	ВерсииПроекта.Ветка.Тип КАК ТипВетки,
	|	ВерсииПроекта.Ветка.РежимРазработки КАК РежимРазработки,
	|	ВерсииПроекта.ВерсияПлатформыХранилища КАК ВерсияПлатформы,
	|	ВерсииПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных КАК ИмяПользователяХранилищаДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ПарольПользователяХранилищаДляЗагрузкиМетаданных КАК ПарольПользователяХранилищаДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ДатаПрекращенияПоддержки КАК ДатаПрекращенияПоддержки,
	|	ВерсииПроекта.Владелец.КаталогИБДляЗагрузкиМетаданных КАК КаталогИБДляЗагрузкиМетаданныхПроекта,
	|	ВерсииПроекта.Владелец.ИмяПользователяИБДляЗагрузкиМетаданных КАК ИмяПользователяИБДляЗагрузкиМетаданныхПроекта,
	|	ВерсииПроекта.Владелец.ПарольПользователяИБДляЗагрузкиМетаданных КАК ПарольПользователяИБДляЗагрузкиМетаданныхПроекта,
	|	ВерсииПроекта.Владелец.Ветка.Имя КАК РасположениеХранилищаПроекта,
	|	ВерсииПроекта.Владелец.ВерсияПлатформы КАК ВерсияПлатформыПроекта,
	|	ВерсииПроекта.Владелец.ИмяПользователяХранилищаДляЗагрузкиМетаданных КАК ИмяПользователяХранилищаДляЗагрузкиМетаданныхПроекта,
	|	ВерсииПроекта.Владелец.ПарольПользователяХранилищаДляЗагрузкиМетаданных КАК ПарольПользователяХранилищаДляЗагрузкиМетаданныхПроекта,
	|	ВерсииПроекта.Владелец.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных КАК ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданныхПроекта
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ссылка = &Версия
	|	И ВерсииПроекта.Владелец.ВестиОписанияОбработчиковОбновленияИнформационнойБазы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		
		ПараметрыБазы = Новый Структура("КаталогИБДляЗагрузкиМетаданных,ИмяПользователяИБДляЗагрузкиМетаданных,
		                                |ПарольПользователяИБДляЗагрузкиМетаданных, ВерсияПлатформы");
		
		Если Выборка.РежимРазработки = Перечисления.РежимРазработки.ВХранилище 
			И Выборка.ТипВетки = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
			
			Если Параметры.Свойство("ОбновитьБазуИзХранилища") 
				И Выборка.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданныхПроекта Тогда 
				
				Параметры.Вставить("ОбновлятьКонфигурациюБазыДанных", Истина);
				ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных(Параметры);
				
			КонецЕсли;
			
			ПараметрыБазы.КаталогИБДляЗагрузкиМетаданных            = Выборка.КаталогИБДляЗагрузкиМетаданныхПроекта;
			ПараметрыБазы.ИмяПользователяИБДляЗагрузкиМетаданных    = Выборка.ИмяПользователяИБДляЗагрузкиМетаданныхПроекта;
			ПараметрыБазы.ПарольПользователяИБДляЗагрузкиМетаданных = Выборка.ПарольПользователяИБДляЗагрузкиМетаданныхПроекта;
			Если ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
				ПараметрыБазы.ВерсияПлатформы = Параметры.ВерсияПлатформы;
			Иначе 
				ПараметрыБазы.ВерсияПлатформы = Выборка.ВерсияПлатформыПроекта;
			КонецЕсли; 
			
			ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Загрузка обработчиков обновления'"), НСтр("ru='Версия проекта:'") + " " + Строка(Версия));
			
			ЗагрузитьОбработчикиОбновленияИзФайла(ПроектСсылка, Версия, ПараметрыБазы, Истина, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
			
		ИначеЕсли Выборка.РежимРазработки = Перечисления.РежимРазработки.ВХранилище Тогда 
			
			ПараметрыВерсии = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
			
			СоздаватьИУдалятьБазу = Ложь;
			ПрефиксКаталога = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла("ver_"+СокрЛП(Выборка.Код));
			ПараметрыВерсии.Вставить("ПрефиксКаталога",                ПрефиксКаталога);
			ПараметрыВерсии.Вставить("КаталогИБДляЗагрузкиМетаданных", Выборка.КаталогИБДляЗагрузкиМетаданных);
			ПараметрыВерсии.ИмяПользователяИБДляЗагрузкиМетаданных     = Выборка.ИмяПользователяИБДляЗагрузкиМетаданных;
			ПараметрыВерсии.ПарольПользователяИБДляЗагрузкиМетаданных  = Выборка.ПарольПользователяИБДляЗагрузкиМетаданных;
			Если Не ЗначениеЗаполнено(ПараметрыВерсии.ВерсияПлатформы) Тогда
				ПараметрыВерсии.ВерсияПлатформы = Выборка.ВерсияПлатформы;
			КонецЕсли; 
			
			Если ПараметрыВерсии.Свойство("ВременныеИБВерсий") И ПараметрыВерсии.ВременныеИБВерсий.Получить(Версия) <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыВерсии, ПараметрыВерсии.ВременныеИБВерсий.Получить(Версия));
				СоздаватьИУдалятьБазу = Истина;
			КонецЕсли;
			
			Если ПараметрыВерсии.Свойство("ОбновитьБазуИзХранилища") 
				И Выборка.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных Тогда 
				
				Если НЕ ЗначениеЗаполнено(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных) Тогда
					СоздаватьИУдалятьБазу = Истина;
					ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
					                                               + "v8_" + ПараметрыВерсии.ПрефиксКаталога + "_db";
					ПараметрыВерсии.Вставить("СоздаватьНовуюИБИзХранилища",   Истина);
					ПараметрыВерсии.ИмяПользователяИБДляЗагрузкиМетаданных    = "";
					ПараметрыВерсии.ПарольПользователяИБДляЗагрузкиМетаданных = "";
				КонецЕсли; 
				ПараметрыВерсии.СтрокаСоединенияИБДляЗагрузкиМетаданных          = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных);
				ПараметрыВерсии.КаталогХранилищаДляЗагрузкиМетаданных            = Выборка.РасположениеХранилища;
				ПараметрыВерсии.ИмяПользователяХранилищаДляЗагрузкиМетаданных    = Выборка.ИмяПользователяХранилищаДляЗагрузкиМетаданных;
				ПараметрыВерсии.ПарольПользователяХранилищаДляЗагрузкиМетаданных = Выборка.ПарольПользователяХранилищаДляЗагрузкиМетаданных;
				
				СоздаватьНовуюИБИзХранилища(ПараметрыВерсии);
				
				ПараметрыВерсии.Вставить("ОбновлятьКонфигурациюБазыДанных", Истина);
				ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных(ПараметрыВерсии);
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных) Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыБазы.КаталогИБДляЗагрузкиМетаданных            = ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных;
			ПараметрыБазы.ИмяПользователяИБДляЗагрузкиМетаданных    = ПараметрыВерсии.ИмяПользователяИБДляЗагрузкиМетаданных;
			ПараметрыБазы.ПарольПользователяИБДляЗагрузкиМетаданных = ПараметрыВерсии.ПарольПользователяИБДляЗагрузкиМетаданных;
			ПараметрыБазы.ВерсияПлатформы                           = ПараметрыВерсии.ВерсияПлатформы;
			
			ДобавитьЗаписьВЛог(ПараметрыВерсии, НСтр("ru='Загрузка обработчиков обновления'"), НСтр("ru='Версия проекта:'") + " " + Строка(Версия));
			
			ЗагрузитьОбработчикиОбновленияИзФайла(ПроектСсылка, Версия, ПараметрыБазы, Ложь, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
			
			Если СоздаватьИУдалятьБазу 
				И ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных) 
				И ПараметрыВерсии.Свойство("УдалятьВременныеИБВерсий") 
				И ПараметрыВерсии.УдалятьВременныеИБВерсий Тогда
				
				Попытка
					УдалитьФайлы(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных); 
				Исключение
					ДобавитьЗаписьВЛог(
						ПараметрыВерсии, 
						НСтр("ru='Ошибка удаления каталога ИБ для загрузки метаданных'"),
						ОписаниеОшибки(),
						УровеньЖурналаРегистрации.Ошибка);
				КонецПопытки; 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗагрузитьОбработчикиОбновленияВсехВерсий(ПроектСсылка, Параметры,  ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипЗначения = ТипЗнч(ПроектСсылка);
	Если ТипЗначения <> Тип("СправочникСсылка.Проекты") Тогда
		Возврат;
	КонецЕсли; 
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыЗагрузкиМетаданных(ПроектСсылка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Ссылка,
	|	Проекты.Представление КАК Представление,
	|	Проекты.ВестиОписанияОбработчиковОбновленияИнформационнойБазы КАК ВестиОписанияОбработчиковОбновленияИнформационнойБазы,
	|	Проекты.КаталогИБДляЗагрузкиМетаданных КАК КаталогИБДляЗагрузкиМетаданных,
	|	Проекты.ИмяПользователяИБДляЗагрузкиМетаданных КАК ИмяПользователяИБДляЗагрузкиМетаданных,
	|	Проекты.ПарольПользователяИБДляЗагрузкиМетаданных КАК ПарольПользователяИБДляЗагрузкиМетаданных,
	|	Проекты.Ветка.Имя КАК КаталогХранилищаДляЗагрузкиМетаданных,
	|	Проекты.РежимРазработки КАК РежимРазработки,
	|	Проекты.ВерсияПлатформы КАК ВерсияПлатформы,
	|	Проекты.ИмяПользователяХранилищаДляЗагрузкиМетаданных КАК ИмяПользователяХранилищаДляЗагрузкиМетаданных,
	|	Проекты.ПарольПользователяХранилищаДляЗагрузкиМетаданных КАК ПарольПользователяХранилищаДляЗагрузкиМетаданных,
	|	Проекты.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных КАК ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииПроекта.Ссылка КАК Ссылка,
	|	ВерсииПроекта.Код КАК Код,
	|	ВерсииПроекта.ДатаПрекращенияПоддержки КАК ДатаПрекращенияПоддержки,
	|	ВерсииПроекта.КаталогИБДляЗагрузкиМетаданных КАК КаталогИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ИмяПользователяИБДляЗагрузкиМетаданных КАК ИмяПользователяИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ПарольПользователяИБДляЗагрузкиМетаданных КАК ПарольПользователяИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных КАК ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных,
	|	ВерсииПроекта.Ветка.Имя КАК РасположениеХранилища,
	|	ВерсииПроекта.Ветка.РежимРазработки КАК РежимРазработки,
	|	ВерсииПроекта.Ветка.Тип КАК ТипВетки,
	|	ВерсииПроекта.ВерсияПлатформыХранилища КАК ВерсияПлатформы,
	|	ВерсииПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных КАК ИмяПользователяХранилищаДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ПарольПользователяХранилищаДляЗагрузкиМетаданных КАК ПарольПользователяХранилищаДляЗагрузкиМетаданных
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Проект
	|	И (ВерсииПроекта.ДатаПрекращенияПоддержки >= &ТекущаяДата
	|			ИЛИ ВерсииПроекта.ДатаПрекращенияПоддержки = ДАТАВРЕМЯ(1, 1, 1))
	|	И ВерсииПроекта.Ветка.РежимРазработки = ЗНАЧЕНИЕ(Перечисление.РежимРазработки.ВХранилище)";
	
	Запрос.УстановитьПараметр("Проект",      ПроектСсылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеПроекта = Результат[0].Выбрать();
	ДанныеПроекта.Следующий();
	
	Если Не ДанныеПроекта.ВестиОписанияОбработчиковОбновленияИнформационнойБазы Тогда
		Возврат;
	КонецЕсли; 
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Загрузка обработчиков обновления'"));
	
	ДанныеВерсий = Результат[1].Выгрузить();
	
	ОсновнаяВерсия = ДанныеВерсий.Найти(Перечисления.ТипыВеток.ОсновнаяВеткаПроекта, "ТипВетки");
	Если ОсновнаяВерсия = Неопределено Тогда
		ДобавитьЗаписьВЛог(
			Параметры, 
			НСтр("ru='Не найдена основная версия проекта'"),
			СтрШаблон(НСтр("ru = 'Для проекта : ""%1"" не найдена основная версия'"), ДанныеПроекта.Представление),
			УровеньЖурналаРегистрации.Ошибка);
		Возврат;
	КонецЕсли; 
	
	Если Параметры.Свойство("ОбновитьБазуИзХранилища") 
			И ДанныеПроекта.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных Тогда 
			
		Параметры.Вставить("ОбновлятьКонфигурациюБазыДанных", Истина);
		ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных(Параметры);
		
	КонецЕсли;
	
	ПараметрыБазы = Новый Структура("КаталогИБДляЗагрузкиМетаданных,ИмяПользователяИБДляЗагрузкиМетаданных,
	                                |ПарольПользователяИБДляЗагрузкиМетаданных, ВерсияПлатформы");
	
	ЗаполнитьЗначенияСвойств(ПараметрыБазы, ДанныеПроекта);
	Если ЗначениеЗаполнено(Параметры.ВерсияПлатформы) Тогда
		ПараметрыБазы.ВерсияПлатформы = Параметры.ВерсияПлатформы;
	КонецЕсли; 
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Загрузка обработчиков обновления'"), НСтр("ru='Версия проекта:'") + " " + Строка(ОсновнаяВерсия.Ссылка));

	ЗагрузитьОбработчикиОбновленияИзФайла(ПроектСсылка, ОсновнаяВерсия.Ссылка, ПараметрыБазы, Истина, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипВетки", Перечисления.ТипыВеток.ВеткаВерсии);
	
	Для Каждого Версия Из ДанныеВерсий.НайтиСтроки(Отбор) Цикл
		
		ПараметрыВерсии = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Параметры);
		ПрефиксКаталога = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла("ver_" + СокрЛП(Версия.Код));
		СоздаватьИУдалятьБазу = Ложь;
		ПараметрыВерсии.Вставить("СоздаватьНовуюИБИзХранилища",    Ложь);
		ПараметрыВерсии.Вставить("ПрефиксКаталога",                ПрефиксКаталога);
		ПараметрыВерсии.Вставить("КаталогИБДляЗагрузкиМетаданных", Версия.КаталогИБДляЗагрузкиМетаданных);
		ПараметрыВерсии.ИмяПользователяИБДляЗагрузкиМетаданных     = Версия.ИмяПользователяИБДляЗагрузкиМетаданных;
		ПараметрыВерсии.ПарольПользователяИБДляЗагрузкиМетаданных  = Версия.ПарольПользователяИБДляЗагрузкиМетаданных;
		Если Не ЗначениеЗаполнено(ПараметрыВерсии.ВерсияПлатформы) Тогда
			ПараметрыВерсии.ВерсияПлатформы = Версия.ВерсияПлатформы;
		КонецЕсли;
		
		Если ПараметрыВерсии.Свойство("ВременныеИБВерсий") И ПараметрыВерсии.ВременныеИБВерсий.Получить(Версия.Ссылка) <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыВерсии, ПараметрыВерсии.ВременныеИБВерсий.Получить(Версия.Ссылка));
			СоздаватьИУдалятьБазу = Истина;
		КонецЕсли;
		
		Если ПараметрыВерсии.Свойство("ОбновитьБазуИзХранилища") И Версия.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных Тогда 
			
			Если НЕ ЗначениеЗаполнено(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных) Тогда
				
				СоздаватьИУдалятьБазу = Истина;
				ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
				                                               + "v8_" + ПараметрыВерсии.ПрефиксКаталога + "_db";
				ПараметрыВерсии.Вставить("СоздаватьНовуюИБИзХранилища", Истина);
				ПараметрыВерсии.ИмяПользователяИБДляЗагрузкиМетаданных    = "";
				ПараметрыВерсии.ПарольПользователяИБДляЗагрузкиМетаданных = "";
				
			КонецЕсли; 
			ПараметрыВерсии.СтрокаСоединенияИБДляЗагрузкиМетаданных          = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных);
			ПараметрыВерсии.КаталогХранилищаДляЗагрузкиМетаданных            = Версия.РасположениеХранилища;
			ПараметрыВерсии.ИмяПользователяХранилищаДляЗагрузкиМетаданных    = Версия.ИмяПользователяХранилищаДляЗагрузкиМетаданных;
			ПараметрыВерсии.ПарольПользователяХранилищаДляЗагрузкиМетаданных = Версия.ПарольПользователяХранилищаДляЗагрузкиМетаданных;
			
			СоздаватьНовуюИБИзХранилища(ПараметрыВерсии);
			
			ПараметрыВерсии.Вставить("ОбновлятьКонфигурациюБазыДанных", Истина);
			ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных(ПараметрыВерсии);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыБазы, ПараметрыВерсии);
		
		ДобавитьЗаписьВЛог(ПараметрыВерсии, НСтр("ru='Загрузка обработчиков обновления'"), НСтр("ru='Версия проекта:'") + " " + Строка(Версия.Ссылка));
		
		ЗагрузитьОбработчикиОбновленияИзФайла(ПроектСсылка, Версия.Ссылка, ПараметрыБазы, Ложь,  ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
		
		Если СоздаватьИУдалятьБазу 
			И ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных) 
			И ПараметрыВерсии.Свойство("УдалятьВременныеИБВерсий") 
			И ПараметрыВерсии.УдалятьВременныеИБВерсий Тогда
			
			Попытка
				УдалитьФайлы(ПараметрыВерсии.КаталогИБДляЗагрузкиМетаданных); 
			Исключение
				ДобавитьЗаписьВЛог(
					ПараметрыВерсии, 
					НСтр("ru='Ошибка удаления каталога ИБ для загрузки метаданных'"),
					ОписаниеОшибки(),
					УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки; 
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ЗагрузитьОбработчикиОбновленияИзТаблицы(Проект, ВерсияСсылка, ОбработчикиПодсистем, ЭтоОсновнаяВерсия, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем) Экспорт
	
	// Обновляем данные по библиотекам в проекте.
	Если ЭтоОсновнаяВерсия Тогда
		
		МодулиОбновления = ОбработчикиПодсистем.Скопировать(, "ИмяМодуля, ИмяПодсистемы,
			|ПараллельноеОтложенноеОбновлениеСВерсии, РежимВыполненияОтложенныхОбработчиков");
		
		Для Каждого Модуль Из МодулиОбновления Цикл
			Модуль.ИмяМодуля = "ОбщийМодуль." + Модуль.ИмяМодуля;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОбъектыМетаданных.Ссылка,
		|	ОбъектыМетаданных.Наименование
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Владелец = &Проект
		|	И ОбъектыМетаданных.Наименование В(&Наименования)";
		
		Запрос.УстановитьПараметр("Проект",       Проект);
		Запрос.УстановитьПараметр("Наименования", МодулиОбновления.ВыгрузитьКолонку("ИмяМодуля"));
		
		ОбъектыМетаданных = Запрос.Выполнить().Выгрузить();
		
		ПроектОбъект      = Проект.ПолучитьОбъект();
		КешМодулейПроекта = ПроектОбъект.МодулиОбновленияИнформационнойБазы.Выгрузить();
		
		ПроектОбъект.МодулиОбновленияИнформационнойБазы.Очистить();
		
		Для Каждого Модуль Из МодулиОбновления Цикл
			
			ЗначениеИзКеша = КешМодулейПроекта.Найти(Модуль.ИмяПодсистемы, "Библиотека");
			ОбъектМетаданных = ОбъектыМетаданных.Найти(Модуль.ИмяМодуля, "Наименование");
			
			НоваяСтрока = ПроектОбъект.МодулиОбновленияИнформационнойБазы.Добавить();
			
			НоваяСтрока.Библиотека = Модуль.ИмяПодсистемы;
			НоваяСтрока.РежимВыполненияОтложенныхОбработчиков = ПредопределенноеЗначение(
				"Перечисление.РежимыВыполненияОтложенныхОбработчиковОбновления." + Модуль.РежимВыполненияОтложенныхОбработчиков);
			НоваяСтрока.ПараллельноеОтложенноеОбновлениеСВерсии = Модуль.ПараллельноеОтложенноеОбновлениеСВерсии;
			
			Если ЗначениеИзКеша <> Неопределено Тогда
				НоваяСтрока.ЭтоПодсистемаТекущегоПроекта = ЗначениеИзКеша.ЭтоПодсистемаТекущегоПроекта;
				НоваяСтрока.Подсистема                   = ЗначениеИзКеша.Подсистема;
				НоваяСтрока.МодульЛокализации            = ЗначениеИзКеша.МодульЛокализации;
			КонецЕсли;
			
			Если ОбъектМетаданных <> Неопределено Тогда
				НоваяСтрока.ОбщийМодуль = ОбъектМетаданных.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
		ПроектОбъект.Записать();
		
	КонецЕсли;
	
	// Загружаем информацию о версии механизма обновления ИБ в версии проекта.
	ОбработчикПодсистемыБСП = ОбработчикиПодсистем.Найти("СтандартныеПодсистемы", "ИмяПодсистемы");
	
	Если ОбработчикПодсистемыБСП <> Неопределено Тогда
		ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
		ВерсияОбъект.ВерсияМеханизмаОбновленияИБ = ОбработчикПодсистемыБСП.Версия;
		
		ВерсияОбъект.Записать();
	КонецЕсли;
	
	ПоддерживаетсяРасширенноеОписаниеОбработчиков = Справочники.ВерсииПроекта.ПоддерживаетсяРасширенноеОписаниеОбработчиков(
		ВерсияСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МодулиОбновленияИнформационнойБазы.Библиотека КАК Библиотека
	|ПОМЕСТИТЬ РазрабатываемыеБиблиотеки
	|ИЗ
	|	Справочник.Проекты.МодулиОбновленияИнформационнойБазы КАК МодулиОбновленияИнформационнойБазы
	|ГДЕ
	|	МодулиОбновленияИнформационнойБазы.Ссылка = &Проект
	|	И МодулиОбновленияИнформационнойБазы.ЭтоПодсистемаТекущегоПроекта = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбработчикиОбновления.Ссылка КАК Ссылка,
	|	ОбработчикиОбновления.Процедура КАК Процедура,
	|	ЛОЖЬ КАК ЕстьВБазе,
	|	ОбработчикиОбновления.ПометкаУдаления КАК ПометкаУдаления,
	|	ОбработчикиОбновления.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РазрабатываемыеБиблиотеки КАК РазрабатываемыеБиблиотеки
	|		ПО (РазрабатываемыеБиблиотеки.Библиотека = ОбработчикиОбновления.Библиотека)
	|ГДЕ
	|	ОбработчикиОбновления.Владелец = &Проект
	|	И ОбработчикиОбновления.Версия = &Версия
	|	И (&ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем
	|			ИЛИ РазрабатываемыеБиблиотеки.Библиотека ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазрабатываемыеБиблиотеки.Библиотека
	|ИЗ
	|	РазрабатываемыеБиблиотеки КАК РазрабатываемыеБиблиотеки";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Версия", ВерсияСсылка);
	Запрос.УстановитьПараметр("ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем", ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВсеТекущиеОбработчики    = РезультатЗапроса[1].Выгрузить();
	РазрабатываемыеБиблиотеки = РезультатЗапроса[2].Выгрузить().ВыгрузитьКолонку("Библиотека");
	
	ОтборПроцедура     = Новый Структура("Процедура");
	ОтборИдентификатор = Новый Структура("Идентификатор");
	
	БылиОшибкиЗагрузкиОбработчиков = Ложь;
	
	Для Каждого ОбработчикПодсистемы Из ОбработчикиПодсистем Цикл
		
		Если Не (ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем
			Или РазрабатываемыеБиблиотеки.Найти(ОбработчикПодсистемы.ИмяПодсистемы) = Неопределено) Тогда
						
			Продолжить;
		КонецЕсли;
		
		ТаблицаОбработчиков = ОбработчикПодсистемы.ТаблицаОбработчиков;
		
		СортироватьТаблицуОбработчиков(ТаблицаОбработчиков);
		
		Для каждого СтрТабл из ТаблицаОбработчиков Цикл
			
			Отказ = Ложь;
			
			Если ЗначениеЗаполнено(СтрТабл.Идентификатор) Тогда
				Отбор = ОтборИдентификатор;
				Отбор.Идентификатор = Строка(СтрТабл.Идентификатор);
				РезультатПоиска = НайтиОбработчикиПоОтбору(Проект, ВерсияСсылка, ВсеТекущиеОбработчики, Отбор, Ложь);
				
				Если РезультатПоиска.ОбработчикОбъект = Неопределено Тогда
					Отбор = ОтборПроцедура;
					Отбор.Процедура = СтрТабл.Процедура;
					РезультатПоиска = НайтиОбработчикиПоОтбору(Проект, ВерсияСсылка, ВсеТекущиеОбработчики, Отбор, Истина);
				КонецЕсли;
			Иначе
				Отбор = ОтборПроцедура;
				Отбор.Процедура = СтрТабл.Процедура;
				РезультатПоиска = НайтиОбработчикиПоОтбору(Проект, ВерсияСсылка, ВсеТекущиеОбработчики, Отбор, Истина);
			КонецЕсли;
			
			ОбработчикОбъект              = РезультатПоиска.ОбработчикОбъект;
			СтрокаТаблицыВсехОбработчиков = РезультатПоиска.СтрокаТаблицыВсехОбработчиков;
			
			ОбработчикОбъект.Процедура     = СтрТабл.Процедура;
			СтрокаТаблицыВсехОбработчиков.Процедура     = СтрТабл.Процедура;
			
			Если ЗначениеЗаполнено(СтрТабл.Идентификатор) Тогда
				ОбработчикОбъект.Идентификатор = Строка(СтрТабл.Идентификатор);
				СтрокаТаблицыВсехОбработчиков.Идентификатор = Строка(СтрТабл.Идентификатор);
			Иначе
				ОбработчикОбъект.Идентификатор = "";
				СтрокаТаблицыВсехОбработчиков.Идентификатор = "";
			КонецЕсли;
			
			СтрокаТаблицыВсехОбработчиков.ЕстьВБазе = Истина;
			СтрокаТаблицыВсехОбработчиков.ПометкаУдаления = Ложь;
			
			ОбработчикОбъект.ОбменДанными.Загрузка = Истина;
			ОбработчикОбъект.НачальноеЗаполнение = СтрТабл.НачальноеЗаполнение;
			ОбработчикОбъект.РежимВыполнения = ПредопределенноеЗначение("Перечисление.РежимыВыполненияОбработчиковОбновления." +
				СтрТабл.РежимВыполнения);
			
			Если Не ЗначениеЗаполнено(ОбработчикОбъект.РежимВыполнения) Тогда
				ОбработчикОбъект.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно;
			КонецЕсли;
			
			ОбработчикОбъект.СборкаНомер          = СтрТабл.Версия;
			ОбработчикОбъект.КомментарийЗагружено = СтрТабл.Комментарий;
			
			Если Не ЗначениеЗаполнено(ОбработчикОбъект.КомментарийУстановлено) Тогда
				ОбработчикОбъект.КомментарийУстановлено = СтрТабл.Комментарий;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрТабл.ПроцедураЗаполненияДанныхОбновления) Тогда
				ОбработчикОбъект.ПроцедураЗаполненияДанныхОбновления              = СтрТабл.ПроцедураЗаполненияДанныхОбновления;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрТабл, "Многопоточный") Тогда
				ОбработчикОбъект.МногопоточныйЗагружено = СтрТабл.Многопоточный;
			КонецЕсли;
			
			ОбработчикОбъект.ОчередьОтложеннойОбработкиЗагружено              = СтрТабл.ОчередьОтложеннойОбработки;
			
			ОбработчикОбъект.ЗапускатьТолькоВГлавномУзлеЗагружено             = СтрТабл.ЗапускатьТолькоВГлавномУзле;
			ОбработчикОбъект.ЗапускатьИВПодчиненномУзлеРИБСФильтрамиЗагружено = СтрТабл.ЗапускатьИВПодчиненномУзлеРИБСФильтрами;
			
			ОбработчикОбъект.ОбщиеДанныеЗагружено                             = СтрТабл.ОбщиеДанные;
			ОбработчикОбъект.УправлениеОбработчикамиЗагружено                 = СтрТабл.УправлениеОбработчиками;
			
			Если ОбработчикОбъект.ЭтоНовый() Тогда
				ОбработчикОбъект.ОчередьОтложеннойОбработкиУстановлено              = СтрТабл.ОчередьОтложеннойОбработки;
				
				ОбработчикОбъект.ЗапускатьТолькоВГлавномУзлеУстановлено             = СтрТабл.ЗапускатьТолькоВГлавномУзле;
				ОбработчикОбъект.ЗапускатьИВПодчиненномУзлеРИБСФильтрамиУстановлено = СтрТабл.ЗапускатьИВПодчиненномУзлеРИБСФильтрами;
				
				ОбработчикОбъект.ОбщиеДанныеЗагружено                               = СтрТабл.ОбщиеДанные;
				ОбработчикОбъект.УправлениеОбработчикамиЗагружено                   = СтрТабл.УправлениеОбработчиками;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрТабл.ПроцедураПроверки) Тогда
				ОбработчикОбъект.ПроцедураПроверки = СтрТабл.ПроцедураПроверки;
			КонецЕсли;
			
			ОбработчикОбъект.Библиотека      = ОбработчикПодсистемы.ИмяПодсистемы;
			ОбработчикОбъект.ПометкаУдаления = Ложь;
			
			Если ПоддерживаетсяРасширенноеОписаниеОбработчиков
				И (ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем
					Или РазрабатываемыеБиблиотеки.Найти(ОбработчикПодсистемы.ИмяПодсистемы) = Неопределено) Тогда
				
				ЗаполнитьЧитаемыеИзменяемыеДанные(Проект, ВерсияСсылка, ОбработчикОбъект.Процедура, ОбработчикОбъект.ЧитаемыеДанные,
					СтрТабл.ЧитаемыеОбъекты, Отказ);
				ЗаполнитьЧитаемыеИзменяемыеДанные(Проект, ВерсияСсылка, ОбработчикОбъект.Процедура, ОбработчикОбъект.ИзменяемыеДанные,
					СтрТабл.ИзменяемыеОбъекты, Отказ);
				ЗаполнитьПрочиеБлокируемыеОбъекты(Проект, ВерсияСсылка, ОбработчикОбъект.Процедура, ОбработчикОбъект,
					СтрТабл.БлокируемыеОбъекты, Отказ);
				
				ОбработчикОбъект.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено = Истина;
				
			КонецЕсли;
			
			Если Отказ Тогда
				БылиОшибкиЗагрузкиОбработчиков = Истина;
			Иначе
				
				Попытка
					ОбработчикОбъект.Записать();
				Исключение
					ТекстСообщения = НСтр("ru = 'Не удалось загрузить обработчик: %Обработчик% по причине: %Причина%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", СтрТабл.Процедура);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
												УровеньЖурналаРегистрации.Ошибка,
												ОбработчикОбъект.Ссылка.Метаданные(),
												ОбработчикОбъект.Ссылка,
												ТекстСообщения);
					БылиОшибкиЗагрузкиОбработчиков = Истина;
				КонецПопытки;
			КонецЕсли;
			СтрокаТаблицыВсехОбработчиков.Ссылка = ОбработчикОбъект.Ссылка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиОшибкиЗагрузкиОбработчиков Тогда
		ТекстСообщения = НСтр("ru = 'При загрузке обработчиков возникли ошибки. Операция не была выполнена полностью. Состояние информации об обработчиках не консистентное. Подробности - в Журнале регистрации.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", ОбработчикОбъект.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
								,
								ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЛишниеОбработчики = ВсеТекущиеОбработчики.НайтиСтроки(Новый Структура("ЕстьВБазе,ПометкаУдаления", Ложь, Ложь));
	
	Для Каждого СтрМас Из ЛишниеОбработчики Цикл
		ОбработчикОбъект = СтрМас.Ссылка.ПолучитьОбъект();
		ОбработчикОбъект.ПометкаУдаления = Истина;
		
		Попытка
			ОбработчикОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось пометить на удаление обработчик: %Обработчик% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", ОбработчикОбъект.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Ошибка,
									ОбработчикОбъект.Ссылка.Метаданные(),
									ОбработчикОбъект.Ссылка,
									ТекстСообщения);
			БылиОшибкиЗагрузкиОбработчиков = Истина;							
		КонецПопытки;
	КонецЦикла;
	
	Если БылиОшибкиЗагрузкиОбработчиков Тогда
		ТекстСообщения = НСтр("ru = 'При загрузке обработчиков возникли ошибки. Операция не была выполнена полностью. Состояние информации об обработчиках не консистентное. Подробности - в Журнале регистрации.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", ОбработчикОбъект.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
								,
								ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Если Не ПоддерживаетсяРасширенноеОписаниеОбработчиков Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка информации о порядке выполнения обработчика обновления.
	ПорядокВыполненияОбработчиков     = СоответствиеПриоритетовПомещенияОбработчиковВОчередь();
	ТипОбработчикОбновленияСсылка     = Новый ОписаниеТипов("СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы");
	ТипПорядокПомещенияВОчередьСсылка = Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокПомещенияОбработчиковВОчередь");
	
	Для Каждого ОбработчикПодсистемы Из ОбработчикиПодсистем Цикл
		Если Не (ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем
			Или РазрабатываемыеБиблиотеки.Найти(ОбработчикПодсистемы.ИмяПодсистемы) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
						
		ТаблицаОбработчиков = ОбработчикПодсистемы.ТаблицаОбработчиков;
		
		Для Каждого СтрТабл из ТаблицаОбработчиков Цикл
			
			СтрокаТаблицыВсехОбработчиков = ВсеТекущиеОбработчики.Найти(СтрТабл.Процедура, "Процедура");
			ОбработчикОбъект              = СтрокаТаблицыВсехОбработчиков.Ссылка.ПолучитьОбъект();
			
			Если СтрТабл.ПриоритетыВыполнения <> Неопределено Тогда
				
				ПриоритетыВыполнения = СтрТабл.ПриоритетыВыполнения.Скопировать(, "Процедура");
				
				ПриоритетыВыполнения.Колонки.Добавить("Идентификатор", ТипОбработчикОбновленияСсылка);
				ПриоритетыВыполнения.Колонки.Добавить("Порядок",       ТипПорядокПомещенияВОчередьСсылка);
				
				Для Каждого СтрокаПриоритетов Из ПриоритетыВыполнения Цикл
					ВзаимосвязанныйОбработчик    = ВсеТекущиеОбработчики.Найти(СокрЛП(СтрокаПриоритетов.Процедура), "Процедура");
					
					Если ВзаимосвязанныйОбработчик = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось записать информацию о приоритетах выполнения обработчика: %Обработчик% по причине: не найден взаимосвязанный обработчик %ВзаимосвязанныйОбработчик%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", СтрТабл.Процедура);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВзаимосвязанныйОбработчик%", СтрокаПриоритетов.Процедура);
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
												УровеньЖурналаРегистрации.Ошибка,
												Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
												ОбработчикОбъект.Ссылка,
												ТекстСообщения);
						БылиОшибкиЗагрузкиОбработчиков = Истина;							
					Иначе
						
						СтрокаЗагружаемыхПриоритетов = СтрТабл.ПриоритетыВыполнения.Найти(СокрЛП(СтрокаПриоритетов.Процедура),
						"Процедура");
						
						СтрокаПриоритетов.Идентификатор = ВзаимосвязанныйОбработчик.Ссылка;
						ПорядокПомещенияВОчередь = ПорядокВыполненияОбработчиков.Получить(СокрЛП(СтрокаЗагружаемыхПриоритетов.Порядок));
						
						Если ПорядокПомещенияВОчередь = Неопределено Тогда
							СтрокаПриоритетов.Порядок = Перечисления.ПорядокПомещенияОбработчиковВОчередь.ПустаяСсылка();
						Иначе
							СтрокаПриоритетов.Порядок = ПорядокПомещенияВОчередь;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				ОбработчикОбъект.ДополнительныеСвойства.Вставить("ПриоритетыВыполнения", ПриоритетыВыполнения);
			КонецЕсли;
				
			Попытка
				ОбработчикОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось записать информацию о приоритетах выполнения обработчика: %Обработчик% по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", ОбработчикОбъект.Ссылка);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
										ОбработчикОбъект.Ссылка,
										ТекстСообщения);
				БылиОшибкиЗагрузкиОбработчиков = Истина;							
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если БылиОшибкиЗагрузкиОбработчиков Тогда
		ТекстСообщения = НСтр("ru = 'При загрузке обработчиков возникли ошибки. Операция не была выполнена полностью. Состояние информации об обработчиках не консистентное. Подробности - в Журнале регистрации.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", ОбработчикОбъект.Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
								,
								ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОбработчикиПоОтбору(Проект, ВерсияСсылка, ВсеТекущиеОбработчики, Отбор, Добавлять)
	
	Результат = Новый Структура("СтрокаТаблицыВсехОбработчиков,ОбработчикОбъект");
	
	НайденныеСтрокиОбработчиков = ВсеТекущиеОбработчики.НайтиСтроки(Отбор);
	
	СтрокаТаблицыВсехОбработчиков = Неопределено; 
	
	Если НайденныеСтрокиОбработчиков.Количество() = 0 Тогда
		
		Если Не Добавлять Тогда
			Возврат Результат;
		КонецЕсли;
		
		ОбработчикОбъект           = Справочники.ОбработчикиОбновленияИнформационнойБазы.СоздатьЭлемент();
		ОбработчикОбъект.Владелец  = Проект;
		ОбработчикОбъект.Версия    = ВерсияСсылка;
		
		СтрокаТаблицыВсехОбработчиков           = ВсеТекущиеОбработчики.Добавить();
		
	ИначеЕсли НайденныеСтрокиОбработчиков.Количество() = 1 Тогда 	
		СтрокаТаблицыВсехОбработчиков = НайденныеСтрокиОбработчиков[0];	
		ОбработчикОбъект = СтрокаТаблицыВсехОбработчиков.Ссылка.ПолучитьОбъект();
	Иначе
		Для Каждого СтрокаТаблицыВсехОбработчиков из НайденныеСтрокиОбработчиков Цикл
			Если Не СтрокаТаблицыВсехОбработчиков.ПометкаУдаления Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ОбработчикОбъект = СтрокаТаблицыВсехОбработчиков.Ссылка.ПолучитьОбъект();
	КонецЕсли;

	Результат.ОбработчикОбъект = ОбработчикОбъект;
	Результат.СтрокаТаблицыВсехОбработчиков = СтрокаТаблицыВсехОбработчиков;

	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьОбработчикиОбновленияИзФайла(Проект, ВерсияСсылка, ПараметрыБазы, ЭтоОсновнаяВерсия, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем)
	
	ФайлВыгрузки  = ПолучитьИмяВременногоФайла("xml");
	ФайлОбработки = ПолучитьИмяВременногоФайла("epf");
	
	ВыгрузкаОбработчиков = Обработки.ЗагрузкаМетаданных.ПолучитьМакет("ВыгрузкаОбработчиков");
	ВыгрузкаОбработчиков.Записать(ФайлОбработки);
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ПутьИБ",             ПараметрыБазы.КаталогИБДляЗагрузкиМетаданных);
	ПараметрыЗапуска.Вставить("ИмяПользователя",    ПараметрыБазы.ИмяПользователяИБДляЗагрузкиМетаданных);
	ПараметрыЗапуска.Вставить("ПарольПользователя", ПараметрыБазы.ПарольПользователяИБДляЗагрузкиМетаданных);
	ПараметрыЗапуска.Вставить("ВерсияПлатформы",    ПараметрыБазы.ВерсияПлатформы);
	
	ДополнительныеПараметрыЗапуска = СтрШаблон(" /DisableStartupDialogs /DisableStartupMessages /Execute ""%1"" /C ""Run;OutFileHandlers=""""%2""""""", ФайлОбработки, ФайлВыгрузки);
	Шаблон = """%КаталогИсполняемогоФайла%1cv8"" ENTERPRISE";
	
	ПараметрыЗапуска.Вставить("ДополнительныеПараметрыЗапуска", ДополнительныеПараметрыЗапуска);
	
	Если НЕ ЗначениеЗаполнено(ПараметрыЗапуска.ПутьИБ) Тогда
		Возврат;
	КонецЕсли;
	
	КодВозвратаСозданияДампа = ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыЗапуска, Шаблон);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
	
	ОбработчикиПодсистем = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	Попытка
		УдалитьФайлы(ФайлВыгрузки);
		УдалитьФайлы(ФайлОбработки);
	Исключение
		
	КонецПопытки;

	ЗагрузитьОбработчикиОбновленияИзТаблицы(Проект, ВерсияСсылка, ОбработчикиПодсистем, ЭтоОсновнаяВерсия, ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
		
КонецПроцедуры

Процедура СортироватьТаблицуОбработчиков(ТаблицаОбработчиков)
	
	ПустаяВерсия = Новый Структура("Версия1, Версия2, Версия3, Версия4", 0, 0, 0, 0);
	
	ТаблицаОбработчиков.Колонки.Добавить("Версия1");
	ТаблицаОбработчиков.Колонки.Добавить("Версия2");
	ТаблицаОбработчиков.Колонки.Добавить("Версия3");
	ТаблицаОбработчиков.Колонки.Добавить("Версия4");
	
	Для Каждого ТекСтр Из ТаблицаОбработчиков Цикл
		
		МассивВерсий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекСтр.Версия, ".");
		
		Если МассивВерсий.Количество() = 4 Тогда
			
			Попытка
				ТекСтр.Версия1 = Число(СокрЛП(МассивВерсий[0]));
				ТекСтр.Версия2 = Число(СокрЛП(МассивВерсий[1]));
				ТекСтр.Версия3 = Число(СокрЛП(МассивВерсий[2]));
				ТекСтр.Версия4 = Число(СокрЛП(МассивВерсий[3]));
			Исключение
				ЗаполнитьЗначенияСвойств(ТекСтр, ПустаяВерсия);
			КонецПопытки;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ТекСтр, ПустаяВерсия);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОбработчиков.Сортировать("Версия1, Версия2, Версия3, Версия4, Приоритет, РежимВыполнения, Процедура");
	
КонецПроцедуры

Процедура ЗаполнитьЧитаемыеИзменяемыеДанные(Проект, Версия, ИмяПроцедуры, ТЧОбработчика, ОбъектыМетаданныхСтрокой, Отказ)
	
	ТЧОбработчика.Очистить();
	
	ИменаКлассов = РаботаСОбъектамиМетаданныхКлиентСервер.СоответствиеИменКлассовОбъектовМетаданныхВЕдЧисле();
	ОбъектыМетаданных = СтрРазделить(ОбъектыМетаданныхСтрокой, ",", Ложь);
	
	Для Каждого ОбъектМетаданныхСтрокой Из ОбъектыМетаданных Цикл
		
		ОбъектМетаданных = ОбъектМетаданныхПоСтроке(ОбъектМетаданныхСтрокой, ИменаКлассов, ИмяПроцедуры, Проект, Версия, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧОбработчика = ТЧОбработчика.Найти(ОбъектМетаданных, "ОбъектМетаданных");
		
		Если СтрокаТЧОбработчика = Неопределено Тогда
			НоваяСтрока = ТЧОбработчика.Добавить();
			НоваяСтрока.ОбъектМетаданных = ОбъектМетаданных;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПрочиеБлокируемыеОбъекты(Проект, Версия, ИмяПроцедуры, ОбработчикОбъект, ОбъектыМетаданныхСтрокой, Отказ)
	
	ЧитаемыеДанные     = ОбработчикОбъект.ЧитаемыеДанные;
	ИзменяемыеДанные   = ОбработчикОбъект.ИзменяемыеДанные;
	БлокируемыеОбъекты = ОбработчикОбъект.ПрочиеБлокируемыеОбъекты;
	
	БлокируемыеОбъекты.Очистить();
	
	ИменаКлассов = РаботаСОбъектамиМетаданныхКлиентСервер.СоответствиеИменКлассовОбъектовМетаданныхВЕдЧисле();
	ОбъектыМетаданных = СтрРазделить(ОбъектыМетаданныхСтрокой, ",", Ложь);
	
	Для Каждого ОбъектМетаданныхСтрокой Из ОбъектыМетаданных Цикл
		
		ЭтоБлокируемыйОбъект = Истина;
		
		ОбъектМетаданных = ОбъектМетаданныхПоСтроке(ОбъектМетаданныхСтрокой, ИменаКлассов, ИмяПроцедуры, Проект, Версия, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ИзменяемыйОбъект = ИзменяемыеДанные.Найти(ОбъектМетаданных, "ОбъектМетаданных");
		
		Если ИзменяемыйОбъект <> Неопределено Тогда
			ЭтоБлокируемыйОбъект = Ложь;
			ИзменяемыйОбъект.БлокироватьИнтерфейс = Истина;
		КонецЕсли;
		
		Читаемыйобъект = ЧитаемыеДанные.Найти(ОбъектМетаданных, "ОбъектМетаданных");
		
		Если Читаемыйобъект <> Неопределено
			И ИзменяемыйОбъект <> Неопределено Тогда
			
			Читаемыйобъект.БлокироватьИнтерфейс = Ложь;
			
		ИначеЕсли Читаемыйобъект <> Неопределено Тогда
			ЭтоБлокируемыйОбъект = Ложь;
			Читаемыйобъект.БлокироватьИнтерфейс = Истина;
		КонецЕсли;
		
		БлокируемыйОбъект = БлокируемыеОбъекты.Найти(ОбъектМетаданных, "ОбъектМетаданных");
		
		Если ЭтоБлокируемыйОбъект Тогда
			Если БлокируемыйОбъект = Неопределено Тогда
				НоваяСтрока = БлокируемыеОбъекты.Добавить();
				НоваяСтрока.ОбъектМетаданных = ОбъектМетаданных;
			КонецЕсли;
		Иначе
			Если БлокируемыйОбъект <> Неопределено Тогда
				БлокируемыеОбъекты.Удалить(БлокируемыйОбъект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоответствиеПриоритетовПомещенияОбработчиковВОчередь()
	
	ПорядокВыполненияОбработчиков = Новый Соответствие;
	
	ПорядокВыполненияОбработчиков.Вставить("До", ПредопределенноеЗначение(
		"Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1"));
	ПорядокВыполненияОбработчиков.Вставить("После", ПредопределенноеЗначение(
		"Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2"));
	ПорядокВыполненияОбработчиков.Вставить("Любой", ПредопределенноеЗначение(
		"Перечисление.ПорядокПомещенияОбработчиковВОчередь.ВсеРавноВКакойПоследовательности"));
	
	Возврат ПорядокВыполненияОбработчиков;
	
КонецФункции

Функция ОбъектМетаданныхПоСтроке(ОбъектМетаданныхСтрокой, ИменаКлассов, ИмяПроцедуры, Проект, Версия, Отказ)
	
	ИменаОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ОбъектМетаданныхСтрокой), ".");
	
	Если Не Отказ
		И ИменаОбъекта.Количество() < 2 Тогда
		ТекстОшибки = НСтр("ru = 'Некорректно указано имя читаемого / изменяемого / блокируемого объекта в описании обработчика обновления ""%ИмяПроцедуры%"": ""%ОбъектМетаданных%"": имя должно состоять из двух частей, разделенных точкой.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяПроцедуры%", ИмяПроцедуры);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОбъектМетаданных%", ОбъектМетаданныхСтрокой);
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
								,
								ТекстОшибки);
	КонецЕсли;
	
	ИмяКласса = ИменаКлассов.Получить(ИменаОбъекта[0]);
	
	Если Не Отказ
		И ИмяКласса = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Некорректно указано имя читаемого / изменяемого / блокируемого объекта в описании обработчика обновления ""%ИмяПроцедуры%"": ""%ОбъектМетаданных%"": не определен класс объекта, он должен быть написан в единственном числе.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяПроцедуры%", ИмяПроцедуры);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОбъектМетаданных%", ОбъектМетаданныхСтрокой);
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
								УровеньЖурналаРегистрации.Ошибка,
								Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
								,
								ТекстОшибки);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ОбъектМетаданных = РаботаСОбъектамиМетаданных.ОбъектМетаданныхПоИмениКлассуПроекту(ИменаОбъекта[1], ИмяКласса, Проект, Версия);
		
		Если Не ЗначениеЗаполнено(ОбъектМетаданных) Тогда
			
			ТекстОшибки = НСтр("ru = 'Некорректно указано имя читаемого / изменяемого / блокируемого объекта в описании обработчика обновления ""%ИмяПроцедуры%"": ""%ОбъектМетаданных%"": объект не найден в справочнике метаданных. Если имя объекта в версии %Версия% отличается от имени в основном хранилище - необходимо заполнить ТЧ ""Отличия в метаданных"" в карточке версии проекта.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяПроцедуры%", ИмяПроцедуры);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОбъектМетаданных%", ОбъектМетаданныхСтрокой);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Версия%", Версия);
			Отказ = Истина;
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам(),
										УровеньЖурналаРегистрации.Ошибка,
										Метаданные.Справочники.ОбработчикиОбновленияИнформационнойБазы,
										,
										ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция СобытиеЖурналаРегистрацииЗагрузкаИнформацииПоОбработчикам() Экспорт
	
	Возврат НСтр("ru = 'Загрузка информации об обработчиках обновления'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура ОчиститьВременныеФайлыГит(Параметры)

	Попытка
		ЗаписьЖурналаРегистрации("ОчиститьВременныеФайлыГит",
			УровеньЖурналаРегистрации.Информация,,,Параметры.КаталогGitРепозитория);	
			
		Файлы = НайтиФайлы(Параметры.КаталогGitРепозитория,"*.*",Истина);
		
		Для Каждого ТекФайл Из Файлы Цикл
			Если ТекФайл.ПолучитьТолькоЧтение() Тогда
				ТекФайл.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
		КонецЦикла;
		
		УдалитьФайлы(Параметры.КаталогGitРепозитория);
		
	Исключение
		ДобавитьЗаписьВЛог(
			Параметры, 
			НСтр("ru='Ошибка удаления каталога выгрузки конфигурации'"), 
			ОписаниеОшибки(), 
			УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки; 

КонецПроцедуры
 

#КонецОбласти

#Область ЗагрузкаИзмененийМетаданных

Функция ДанныеВетокДляЗагрузкиИзмененийМетаданных(Проект, Параметры = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("Ветка") Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Ветки.Ссылка КАК Ссылка,
			|	Ветки.Владелец КАК Проект,
			|	Ветки.Имя КАК Имя,
			|	Ветки.Источник КАК Источник,
			|	Ветки.Источник.Имя КАК ИсточникИмя,
			|	Ветки.Тип КАК Тип,
			|	Ветки.Ответственный КАК Ответственный,
			|	Ветки.Наименование КАК Наименование,
			|	Ветки.Приемник КАК Приемник,
			|	Ветки.Приемник.Имя КАК ПриемникИмя
			|ИЗ
			|	Справочник.Ветки КАК Ветки
			|ГДЕ
			|	Ветки.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Параметры.Ветка);
	Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Ветки.Ссылка КАК Ссылка,
			|	Ветки.Владелец КАК Проект,
			|	Ветки.Имя КАК Имя,
			|	Ветки.Источник КАК Источник,
			|	Ветки.Источник.Имя КАК ИсточникИмя,
			|	Ветки.Тип КАК Тип,
			|	Ветки.Ответственный КАК Ответственный,
			|	Ветки.Наименование КАК Наименование,
			|	Ветки.Приемник КАК Приемник,
			|	Ветки.Приемник.Имя КАК ПриемникИмя
			|ИЗ
			|	Справочник.Ветки КАК Ветки
			|ГДЕ
			|	Ветки.Владелец = &Владелец
			|	И Ветки.Владелец.ЗагружатьИзмененияВВетках
			|	И НЕ Ветки.ПометкаУдаления
			|	И (Ветки.Статус = &СтатусТестируется
			|				И Ветки.Тип В (&Тип)
			|			ИЛИ Ветки.Статус = &СтатусРазрабатывается
			|				И Ветки.ЗагружатьИзмененияОбъектовМетаданных)";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("СтатусТестируется", Перечисления.СтатусыВеток.Тестируется);
	Запрос.УстановитьПараметр("СтатусРазрабатывается", Перечисления.СтатусыВеток.Разрабатывается);
	Запрос.УстановитьПараметр("Владелец", Проект);
	Типы = Новый Массив;
	Типы.Добавить(Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок);
	Типы.Добавить(Перечисления.ТипыВеток.ВеткаТехническогоПроекта);
	Запрос.УстановитьПараметр("Тип", Типы);
	
	Результат = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеВетки = Новый Структура;
		ДанныеВетки.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		ДанныеВетки.Вставить("Проект", ВыборкаДетальныеЗаписи.Проект);
		ДанныеВетки.Вставить("Имя", ВыборкаДетальныеЗаписи.Имя);
		ДанныеВетки.Вставить("Источник", ВыборкаДетальныеЗаписи.Источник);
		ДанныеВетки.Вставить("ИсточникИмя", ВыборкаДетальныеЗаписи.ИсточникИмя);
		ДанныеВетки.Вставить("Приемник", ВыборкаДетальныеЗаписи.Приемник);
		ДанныеВетки.Вставить("ПриемникИмя", ВыборкаДетальныеЗаписи.ПриемникИмя);
		ДанныеВетки.Вставить("Тип", ВыборкаДетальныеЗаписи.Тип);
		ДанныеВетки.Вставить("Ответственный", ВыборкаДетальныеЗаписи.Ответственный);
		ДанныеВетки.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Результат.Добавить(ДанныеВетки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ДанныеПоследнейЗагрузкиМетаданныхПоВетке(Ветка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗагрузкиМетаданныхВВетках.ДанныеКоммита КАК ДанныеКоммита
		|ИЗ
		|	РегистрСведений.СостояниеЗагрузкиМетаданныхВВетках КАК СостояниеЗагрузкиМетаданныхВВетках
		|ГДЕ
		|	СостояниеЗагрузкиМетаданныхВВетках.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ДанныеКоммита;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ВВеткеЕстьИзмененияМетаданных(Проект, ВеткаПриемникИмя, ИдКоммитаИлиИмяВетки, ДопПараметры)
	
	ИзмененныеМетаданные = Новый Соответствие;
	
	Разница = ТестированиеЗапускТестирования.РазницаМеждуВетками(Проект, ВеткаПриемникИмя, ИдКоммитаИлиИмяВетки);
	
	Если Разница.diffs.Количество() >= МаксКоличествоФайловВИзменениях() Тогда
		ТекстСообщения =
			СтрШаблон(НСтр("ru = 'Git сервер вернул <%1> измененных файлов. Анализ по данным git сервера производиться не будет.'"),
				Разница.diffs.Количество());
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,ДопПараметры.Ветка,ТекстСообщения);
		Возврат Истина;
	Иначе	
		Для Каждого ДанныеОдногоФайла Из Разница.diffs Цикл
			
			Если ДанныеОдногоФайла.Свойство("new_path") И ЗначениеЗаполнено(ДанныеОдногоФайла.new_path) Тогда
				ДобавитьМетаданное(ИзмененныеМетаданные, ДопПараметры.СоответствияИмен, ДанныеОдногоФайла.new_path, "", "", Ложь, Ложь);
			КонецЕсли;			
			Если ДанныеОдногоФайла.Свойство("old_path") И ЗначениеЗаполнено(ДанныеОдногоФайла.old_path) Тогда
				ДобавитьМетаданное(ИзмененныеМетаданные, ДопПараметры.СоответствияИмен, ДанныеОдногоФайла.old_path, "", "", Ложь, Ложь);
			КонецЕсли;			
			
		КонецЦикла;  
	КонецЕсли;
	
	ДопПараметры.Вставить("ИзмененныеМетаданныеПоДаннымСервера", ИзмененныеМетаданные);
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Git сервер вернул <%1> измененных файлов. Данные git сервера будут учтены при анализе.'"), ИзмененныеМетаданные.Количество());
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,ДопПараметры.Ветка,ТекстСообщения);
	
	Если ИзмененныеМетаданные.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗафиксироватьКоммитНаКоторыйБылаЗагрузкаМетаданных(Ветка, ИдКоммита)
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Фиксация загрузки изменений метаданных <%1>.'"), ИдКоммита);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
	
	МенеджерЗаписи = РегистрыСведений.СостояниеЗагрузкиМетаданныхВВетках.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Ветка = Ветка;
	МенеджерЗаписи.ДанныеКоммита = ИдКоммита;
	МенеджерЗаписи.ДатаЗагрузки = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

Функция ДанныеСоответствияИмен()
	
	Результат = Новый Соответствие;	
	
	ДобавитьСоответсвиеИмен(Результат,"AccountingRegisters", "AccountingRegister", "РегистрыБухгалтерии", "РегистрБухгалтерии");
    ДобавитьСоответсвиеИмен(Результат,"AccumulationRegisters", "AccumulationRegister", "РегистрыНакопления", "РегистрНакопления");
    ДобавитьСоответсвиеИмен(Результат,"BusinessProcesses", "BusinessProcess", "БизнесПроцессы", "БизнесПроцесс");
    ДобавитьСоответсвиеИмен(Результат,"CalculationRegisters", "CalculationRegister", "РегистрыРасчета", "РегистрРасчета");
    ДобавитьСоответсвиеИмен(Результат,"Catalogs", "Catalog", "Справочники", "Справочник");
    ДобавитьСоответсвиеИмен(Результат,"ChartsOfAccounts", "ChartOfAccounts", "ПланыСчетов", "ПланСчетов");
    ДобавитьСоответсвиеИмен(Результат,"ChartsOfCalculationTypes", "ChartOfCalculationTypes", "ПланыВидовРасчета", "ПланВидовРасчета");
    ДобавитьСоответсвиеИмен(Результат,"ChartsOfCharacteristicTypes", "ChartOfCharacteristicTypes","ПланыВидовХарактеристик", "ПланВидовХарактеристик");
    ДобавитьСоответсвиеИмен(Результат,"CommandGroups", "CommandGroup", "ГруппыКоманд", "ГруппаКоманд");
    ДобавитьСоответсвиеИмен(Результат,"CommonAttributes", "CommonAttribute", "ОбщиеРеквизиты", "ОбщийРеквизит");
    ДобавитьСоответсвиеИмен(Результат,"CommonCommands", "CommonCommand", "ОбщиеКоманды", "ОбщаяКоманда");
    ДобавитьСоответсвиеИмен(Результат,"CommonForms", "CommonForm", "ОбщиеФормы", "ОбщаяФорма");
    ДобавитьСоответсвиеИмен(Результат,"CommonModules", "CommonModule", "ОбщиеМодули", "ОбщийМодуль");
    ДобавитьСоответсвиеИмен(Результат,"CommonPictures", "CommonPicture", "ОбщиеКартинки", "ОбщаяКартинка");
    ДобавитьСоответсвиеИмен(Результат,"CommonTemplates", "CommonTemplate", "ОбщиеМакеты", "ОбщийМакет");
    ДобавитьСоответсвиеИмен(Результат,"Constants", "Constant", "Константы", "Константа");
    ДобавитьСоответсвиеИмен(Результат,"DataProcessors", "DataProcessor", "Обработки", "Обработка");
    ДобавитьСоответсвиеИмен(Результат,"DefinedTypes", "DefinedType", "ОпределяемыеТипы", "ОпределяемыйТип");
    ДобавитьСоответсвиеИмен(Результат,"DocumentJournals", "DocumentJournal", "ЖурналыДокументов", "ЖурналДокументов");
    ДобавитьСоответсвиеИмен(Результат,"DocumentNumerators", "DocumentNumerator", "НумераторыДокументов", "НумераторДокументов");
    ДобавитьСоответсвиеИмен(Результат,"Documents", "Document", "Документы", "Документ");
    ДобавитьСоответсвиеИмен(Результат,"Enums", "Enum", "Перечисления", "Перечисление");
    ДобавитьСоответсвиеИмен(Результат,"EventSubscriptions", "EventSubscription", "ПодпискиНаСобытия", "ПодпискаНаСобытие");
    ДобавитьСоответсвиеИмен(Результат,"ExchangePlans", "ExchangePlan", "ПланыОбмена", "ПланОбмена");
    ДобавитьСоответсвиеИмен(Результат,"ExternalDataSources", "ExternalDataSource", "ВнешниеИсточникиДанных", "ВнешнийИсточникДанных");
    ДобавитьСоответсвиеИмен(Результат,"FilterCriteria", "FilterCriterion", "КритерииОтбора", "КритерийОтбора");
    ДобавитьСоответсвиеИмен(Результат,"FunctionalOptions", "FunctionalOption", "ФункциональныеОпции", "ФункциональнаяОпция");
    ДобавитьСоответсвиеИмен(Результат,"FunctionalOptionsParameters", "FunctionalOptionsParameter","ПараметрыФункциональныхОпций", "ПараметрФункциональнойОпции");
    ДобавитьСоответсвиеИмен(Результат,"HTTPServices", "HTTPService", "HTTPСервисы", "HTTPСервис");
    ДобавитьСоответсвиеИмен(Результат,"InformationRegisters", "InformationRegister", "РегистрыСведений", "РегистрСведений");
    ДобавитьСоответсвиеИмен(Результат,"Languages", "Language", "Языки", "Язык");
    ДобавитьСоответсвиеИмен(Результат,"Reports", "Report", "Отчеты", "Отчет");
    ДобавитьСоответсвиеИмен(Результат,"Roles", "Role", "Роли", "Роль");
    ДобавитьСоответсвиеИмен(Результат,"ScheduledJobs", "ScheduledJob", "РегламентныеЗадания", "РегламентноеЗадание");
    ДобавитьСоответсвиеИмен(Результат,"Sequences", "Sequence", "Последовательности", "Последовательность");
    ДобавитьСоответсвиеИмен(Результат,"SessionParameters", "SessionParameter", "ПараметрыСеанса", "ПараметрСеанса");
    ДобавитьСоответсвиеИмен(Результат,"SettingsStorages", "SettingsStorage", "ХранилищаНастроек", "ХранилищеНастроек");
    ДобавитьСоответсвиеИмен(Результат,"StyleItems", "StyleItem", "ЭлементыСтиля", "ЭлементСтиля");
    ДобавитьСоответсвиеИмен(Результат,"Styles", "Style", "Стили", "Стиль");
    ДобавитьСоответсвиеИмен(Результат,"Subsystems", "Subsystem", "Подсистемы", "Подсистема");
    ДобавитьСоответсвиеИмен(Результат,"Tasks", "Task", "Задачи", "Задача");
    ДобавитьСоответсвиеИмен(Результат,"WebServices", "WebService", "WebСервисы", "WebСервис");
    ДобавитьСоответсвиеИмен(Результат,"WSReferences", "WSReference", "WSСсылки", "WSСсылка");
    ДобавитьСоответсвиеИмен(Результат,"XDTOPackages", "XDTOPackage", "ПакетыXDTO", "ПакетXDTO");
	
	Возврат Результат;

КонецФункции	

Процедура ДобавитьСоответсвиеИмен(Результат, Англ1, Англ2, Рус1, Рус2)
	Результат.Вставить(НРег(Англ1), Рус1);
	Результат.Вставить(НРег(Англ2), Рус2);
	Результат.Вставить(НРег(Рус1), Рус2);
КонецПроцедуры

Процедура ДобавитьМетаданное(ИзмененныеМетаданные, СоответствияИмен, ИмяФайла, Изменения, ОписаниеИзменений, ЭтоПодсистема, НадоУдалитьИзмененияПоФайлу)
	МассивСтрок = СтрРазделить(ИмяФайла, "/");
	
	Если НРег(Прав(ИмяФайла, 31)) = НРег("Configuration/Configuration.mdo") Тогда
		Возврат;
	КонецЕсли;	
	
	Пока МассивСтрок.Количество() > 0 Цикл
		Если НРег(МассивСтрок[0]) <> "src" Тогда
			МассивСтрок.Удалить(0);
			Продолжить;
		КонецЕсли;			
		
		МассивСтрок.Удалить(0);
		Прервать;
	КонецЦикла;	 
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ВидПодчиненногоОбъекта = "";
	ИмяПодчиненногоОбъекта = "";
	ИмяПодсистемы = "";
	Если МассивСтрок.Количество() >= 2 Тогда
		ТипМетаданного = МассивСтрок[0];
		ВидМетаданного = МассивСтрок[1];
		Если МассивСтрок.Количество() >= 3 Тогда
			ВидПодчиненногоОбъекта = МассивСтрок[2];
		КонецЕсли;	
		Если МассивСтрок.Количество() >= 4 Тогда
			ИмяПодчиненногоОбъекта = МассивСтрок[3];
		КонецЕсли;	
		
		// С английского в русский
		Если СоответствияИмен[НРег(ТипМетаданного)] <> Неопределено Тогда
			ТипМетаданного = СоответствияИмен[НРег(ТипМетаданного)];
		КонецЕсли;	
		
		// С множественного числа в единственное
		Если СоответствияИмен[НРег(ТипМетаданного)] <> Неопределено Тогда
			ТипМетаданного = СоответствияИмен[НРег(ТипМетаданного)];
		КонецЕсли;	
		Если СоответствияИмен[НРег(ВидМетаданного)] <> Неопределено Тогда
			ВидМетаданного = СоответствияИмен[НРег(ВидМетаданного)];
		КонецЕсли;
		
		ПолноеИмя = ТипМетаданного + "." + ВидМетаданного;	
		
		ПодчиненныйОбъект = Неопределено;
		Файл = Новый Файл(ИмяФайла);
		ФайлКаталог1 = Новый Файл(Файл.Путь);
		ФайлКаталог2 = Новый Файл(ФайлКаталог1.Путь);
		ЭтоФорма = Ложь;
		ИмяФормы = "";
		ЭтоМакет = Ложь;
		ЭтоСправка = Ложь;
		ЭтоКомандаОбъекта = Ложь;
		НРегФайлИмя = НРег(Файл.Имя);
		НРегРасширение = НРег(Файл.Расширение);
		
		Если ТипМетаданного = "Стиль" ИЛИ ТипМетаданного = "Стили" Тогда
			//Это стиль
			Возврат;
		ИначеЕсли ТипМетаданного = "IntegrationServices" ИЛИ ТипМетаданного = "IntegrationService" Тогда
			//Это сервис интеграции
			Возврат;
		ИначеЕсли ТипМетаданного = "ВнешнийИсточникДанных" ИЛИ ТипМетаданного = "ВнешниеИсточникиДанных" Тогда
			//Это внешний источник данных
			Возврат;
		ИначеЕсли НРегРасширение = ".mdo" Тогда
			//Это сам объект
		ИначеЕсли ТипМетаданного = "ВнешнийИсточникДанных" ИЛИ ТипМетаданного = "ВнешниеИсточникиДанных" Тогда
			//Это ВнешнийИсточникДанных
		ИначеЕсли ТипМетаданного = "ОбщиеФормы" ИЛИ ТипМетаданного = "ОбщаяФорма" Тогда
			//Это общая форма
		ИначеЕсли НРегРасширение = ".form" Тогда
			ЭтоФорма = Истина;
			ПодчиненныйОбъект = ФайлКаталог1.Имя;
		ИначеЕсли (ТипМетаданного = "Роли" ИЛИ ТипМетаданного = "Роль") И НРегРасширение = ".rights" Тогда
			//Это роль
		ИначеЕсли ТипМетаданного = "ОбщиеКартинки" ИЛИ ТипМетаданного = "ОбщаяКартинка" Тогда
			//Это картинка
		ИначеЕсли ТипМетаданного = "ЭлементСтиля" ИЛИ ТипМетаданного = "ЭлементыСтиля" Тогда
			//Это элемент стиля
		ИначеЕсли ТипМетаданного = "РегламентныеЗадания" ИЛИ ТипМетаданного = "РегламентноеЗадание" Тогда
			//Это регламентное задание
		ИначеЕсли ТипМетаданного = "Подсистемы" ИЛИ ТипМетаданного = "Подсистема" Тогда
			//Это подсистема
			ЭтоПодсистема = Истина;
		ИначеЕсли ТипМетаданного = "ОбщиеМакеты" ИЛИ ТипМетаданного = "ОбщийМакет" Тогда
			//Это общий макет
		ИначеЕсли ТипМетаданного = "ПакетыXDTO" ИЛИ ТипМетаданного = "ПакетXDTO" Тогда
			//Это пакет XDTO
		ИначеЕсли ТипМетаданного = "БизнесПроцесс" ИЛИ ТипМетаданного = "БизнесПроцессы" Тогда
			//Это бизнес процесс
		ИначеЕсли НРегРасширение = ".trans" Тогда
		ИначеЕсли НРегРасширение = ".dcssca" Тогда
		ИначеЕсли НРегРасширение = ".param" Тогда
		ИначеЕсли НРегФайлИмя = "mobileclientsign.bin" Тогда
			Возврат;
		ИначеЕсли НРегРасширение = ".html" И ФайлКаталог1.Имя = "Help" Тогда
			ЭтоСправка = Истина;
			ПодчиненныйОбъект = Файл.ПолноеИмя; 
		ИначеЕсли ФайлКаталог2.Имя = "Templates" Тогда
			ЭтоМакет = Истина;
			ПодчиненныйОбъект = Файл.ИмяБезРасширения; 
		ИначеЕсли ВидПодчиненногоОбъекта = "Forms" Тогда
			ЭтоФорма = Истина;
			ПодчиненныйОбъект = Файл.ПолноеИмя; 
		ИначеЕсли ВидПодчиненногоОбъекта = "Commands" Тогда
			ЭтоКомандаОбъекта = Истина;
			ПодчиненныйОбъект = Файл.ПолноеИмя; 
		ИначеЕсли НРегФайлИмя = "module.bsl" Тогда
			Если НЕ (ТипМетаданного = "ОбщийМодуль" ИЛИ ТипМетаданного = "ОбщиеМодули") Тогда
				ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульОбъекта;
			КонецЕсли;	
		ИначеЕсли НРегФайлИмя = "managermodule.bsl" Тогда
			ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджера;
		ИначеЕсли НРегФайлИмя = "recordsetmodule.bsl" Тогда
			ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульНабораЗаписей;
		ИначеЕсли НРегФайлИмя = "objectmodule.bsl" Тогда
			ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульОбъекта;
		ИначеЕсли НРегФайлИмя = "commandmodule.bsl" Тогда
		ИначеЕсли НРегФайлИмя = "valuemanagermodule.bsl" Тогда
			ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджераЗначений;
		Иначе
			Если НРег(Файл.Расширение) = ".bsl" Тогда 
				Если НРегФайлИмя = "module.bsl" И НРег(ФайлКаталог2.Имя) = "forms" Тогда
				ИначеЕсли НРегФайлИмя = "module.bsl" И НРег(ФайлКаталог2.Имя) = "commonforms" Тогда
				ИначеЕсли НРегФайлИмя = "module.bsl" И НРег(ФайлКаталог2.Имя) = "commonmodules" Тогда
				Иначе	
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не получилось определить соответствие метаданного по имени файла <%1>.'"), ИмяФайла);
					ЗаписьЖурналаРегистрации("ОпределениеМетаданныхПоИмениФайла",
												УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
				КонецЕсли;	
			Иначе	
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не получилось определить соответствие метаданного по имени файла <%1>.'"), ИмяФайла);
				ЗаписьЖурналаРегистрации("ОпределениеМетаданныхПоИмениФайла",
											УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПодсистема Тогда
			ИмяПодсистемы = ИмяПодсистемыИзИмениФайла(ИмяФайла);
		КонецЕсли;	
		
		Если НЕ ЭтоФорма И ТипЗнч(ПодчиненныйОбъект) = Тип("Строка") И ЗначениеЗаполнено(ПодчиненныйОбъект) Тогда
			МассивСтрок = СтрРазделить(ПодчиненныйОбъект, "\");
			Если МассивСтрок.Количество() >= 5 И Нрег(МассивСтрок[4]) = "forms" Тогда
				ЭтоФорма = Истина;
			КонецЕсли;	
		КонецЕсли;	
		
		Данные = Новый Структура;
		Данные.Вставить("ПолноеИмя", ПолноеИмя);
		Данные.Вставить("ТипМетаданного", ТипМетаданного);
		Данные.Вставить("ВидМетаданного", ВидМетаданного);
		Данные.Вставить("ПодчиненныйОбъект", ПодчиненныйОбъект);
		Данные.Вставить("ЭтоФорма", ЭтоФорма);
		Данные.Вставить("ЭтоМакет", ЭтоМакет);
		Данные.Вставить("ЭтоСправка", ЭтоСправка);
		Данные.Вставить("ЭтоКомандаОбъекта", ЭтоКомандаОбъекта);
		Данные.Вставить("ЭтоПодсистема", ЭтоПодсистема);
		Данные.Вставить("ИмяПодчиненногоОбъекта", ИмяПодчиненногоОбъекта);
		Данные.Вставить("Изменения", Изменения);
		Данные.Вставить("ОписаниеИзменений", ОписаниеИзменений);
		Данные.Вставить("НадоУдалитьИзмененияПоФайлу", НадоУдалитьИзмененияПоФайлу);
		Данные.Вставить("ИмяФайла", ИмяФайла);
		Данные.Вставить("ИмяПодсистемы", ИмяПодсистемы);
		
		ИзмененныеМетаданные.Вставить(Файл.ПолноеИмя, Данные);
		
	КонецЕсли;	
		
КонецПроцедуры 

Функция МетаданноеПоИмени(ДанныеОМ, Проект)
	
	Если ДанныеОМ.ЭтоПодсистема Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Подсистемы.Ссылка КАК Ссылка,
			|	Подсистемы.Ответственный КАК Ответственный,
			|	Подсистемы.СогласованиеИзменений КАК СогласованиеИзменений,
			|	Подсистемы.ВеткаИсточник КАК ВеткаИсточник,
			|	Подсистемы.СогласующийИзменения КАК СогласующийИзменения
			|ИЗ
			|	Справочник.Подсистемы КАК Подсистемы
			|ГДЕ
			|	Подсистемы.Наименование = &Наименование
			|	И Подсистемы.Владелец = &Проект";
		
		Запрос.УстановитьПараметр("Проект", Проект);
		Запрос.УстановитьПараметр("Наименование", ДанныеОМ.ИмяПодсистемы);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Структура = Новый Структура;
			Структура.Вставить("Ответственный", ВыборкаДетальныеЗаписи.Ответственный);
			Структура.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			Структура.Вставить("СогласованиеИзменений", ВыборкаДетальныеЗаписи.СогласованиеИзменений);
			Структура.Вставить("ВеткаИсточник", ВыборкаДетальныеЗаписи.ВеткаИсточник);
			Структура.Вставить("СогласующийИзменения", ВыборкаДетальныеЗаписи.СогласующийИзменения);
			Возврат Структура;
		КонецЦикла;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОбъектыМетаданных.Ссылка КАК Ссылка,
			|	ОбъектыМетаданных.Ответственный КАК Ответственный,
			|	ОбъектыМетаданных.СогласованиеИзменений КАК СогласованиеИзменений,
			|	ОбъектыМетаданных.ВеткаИсточник КАК ВеткаИсточник,
			|	ОбъектыМетаданных.СогласующийИзменения КАК СогласующийИзменения
			|ИЗ
			|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
			|ГДЕ
			|	ОбъектыМетаданных.Наименование = &Наименование
			|	И ОбъектыМетаданных.Владелец = &Проект";
		
		Запрос.УстановитьПараметр("Проект", Проект);
		Запрос.УстановитьПараметр("Наименование", ДанныеОМ.ПолноеИмя);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Структура = Новый Структура;
			Структура.Вставить("Ответственный", ВыборкаДетальныеЗаписи.Ответственный);
			Структура.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			Структура.Вставить("СогласованиеИзменений", ВыборкаДетальныеЗаписи.СогласованиеИзменений);
			Структура.Вставить("ВеткаИсточник", ВыборкаДетальныеЗаписи.ВеткаИсточник);
			Структура.Вставить("СогласующийИзменения", ВыборкаДетальныеЗаписи.СогласующийИзменения);
			Возврат Структура;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ФормаМетаданного(Метаданное, ИмяФормы)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФормыОбъектовМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
		|ГДЕ
		|	ФормыОбъектовМетаданных.Владелец = &Владелец
		|	И ФормыОбъектовМетаданных.Имя = &Имя
		|	И НЕ ФормыОбъектовМетаданных.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Метаданное);
	Запрос.УстановитьПараметр("Имя", ИмяФормы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция МакетМетаданного(Метаданное, ИмяМакета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МакетыОбъектовМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МакетыОбъектовМетаданных КАК МакетыОбъектовМетаданных
		|ГДЕ
		|	МакетыОбъектовМетаданных.Владелец = &Владелец
		|	И МакетыОбъектовМетаданных.Имя = &Имя
		|	И НЕ МакетыОбъектовМетаданных.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Метаданное);
	Запрос.УстановитьПараметр("Имя", ИмяМакета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция КомандаМетаданного(Метаданное, ИмяКоманды)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомандыОбъектовМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КомандыОбъектовМетаданных КАК КомандыОбъектовМетаданных
		|ГДЕ
		|	КомандыОбъектовМетаданных.Владелец = &Владелец
		|	И КомандыОбъектовМетаданных.Имя = &Имя
		|	И НЕ КомандыОбъектовМетаданных.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Метаданное);
	Запрос.УстановитьПараметр("Имя", ИмяКоманды);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ФайлИзмененийПоДаннымGit(Ветка, ПерваяЧасть, ВтораяЧасть, Параметры)
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Получение файла изменений git между <%1> и <%2>.'"), ПерваяЧасть, ВтораяЧасть);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
	
	КаталогGitРепозитория = Параметры.КаталогGitРепозитория;
	
	Если Параметры.СравнениеСКоммитом Тогда
		БазаСравнения = ПерваяЧасть;
	Иначе	
		БазаСравнения = "origin/" + ПерваяЧасть;
	КонецЕсли;	
	
	ТекстКоманды = СтрШаблон("git merge-base ""%1"" ""%2""", БазаСравнения, ВтораяЧасть);
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Выполнение команды git: <%1>.'"), ТекстКоманды);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
	
	Результат = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, КаталогGitРепозитория,,"utf-8");
	Если Результат.КодВозврата <> 0 Тогда
		Если Результат.Свойство("Лог") Тогда
			Лог = Результат.Лог;
		Иначе
			Лог = "";
		КонецЕсли;	
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось выполнить команду <%1>. КодВозврата=%2'"),
			ТекстКоманды,
			Результат.КодВозврата) + Символы.ПС + Лог;
	КонецЕсли;
	
	ИмяБазовойВетки = СокрЛП(Результат.Лог);
	
	ТекстКоманды = "git config --local core.quotepath false";
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Выполнение команды git: <%1>.'"), ТекстКоманды);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
	
	Результат = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, КаталогGitРепозитория,,"utf-8");
	Если Результат.КодВозврата <> 0 Тогда
		Если Результат.Свойство("Лог") Тогда
			Лог = Результат.Лог;
		Иначе
			Лог = "";
		КонецЕсли;	
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось выполнить команду <%1>. КодВозврата=%2'"),
			ТекстКоманды,
			Результат.КодВозврата) + Символы.ПС + Лог;
	КонецЕсли;	

	ТекстКоманды = СтрШаблон("git diff ""%1""", ИмяБазовойВетки);
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Выполнение команды git: <%1>.'"), ТекстКоманды);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
	
	Результат = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, КаталогGitРепозитория,,"utf-8");
	Если Результат.КодВозврата <> 0 Тогда
		Если Результат.Свойство("Лог") Тогда
			Лог = Результат.Лог;
		Иначе
			Лог = "";
		КонецЕсли;	
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось выполнить команду <%1>. КодВозврата=%2'"),
			ТекстКоманды,
			Результат.КодВозврата) + Символы.ПС + Лог;
	КонецЕсли;	
	
	Возврат Результат.Лог;
	
КонецФункции	

Процедура ОчиститьКаталог(Каталог)
	Файл = Новый Файл(Каталог);
	Если НЕ файл.Существует() Тогда
		Возврат;
	КонецЕсли;	
	
	Файлы = НайтиФайлы(Каталог, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Попытка
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
		КонецПопытки;		
	КонецЦикла;	
	Файлы = НайтиФайлы(Каталог, "*", Истина);
	Для Каждого Файл Из Файлы Цикл
		Попытка
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
		КонецПопытки;		
	КонецЦикла;	
		
	
КонецПроцедуры

Функция МаксКоличествоФайловВИзменениях()
	Возврат 999;
КонецФункции	

Функция ПолучитьФайлыРепозиторияДляАнализаИзмененийМетаданных(Проект, ДопПараметры, ПараметрыGit)
	
	Если ТипЗнч(ПараметрыGit) <> Тип("Структура") Тогда
		ПараметрыGit = Новый Структура;
	КонецЕсли;	
	
	ПараметрыGit.Вставить("Проект", Проект);
	ПараметрыGit.Вставить("ИмяВеткиРепозитория", ДопПараметры.Имя);
	ПараметрыGit.Вставить("ИмяВеткиИсточника", ДопПараметры.ИсточникИмя);
	ПараметрыGit.Вставить("ИмяВеткиПриемника", ДопПараметры.ПриемникИмя);
	ПараметрыGit.Вставить("СоздаватьВременныйКаталог", Истина);
	Результат = ОбщегоНазначенияСППР.ПолучитьФайлыИзGIT(ПараметрыGit);
	Если НЕ ЗначениеЗаполнено(Результат) ИЛИ Результат = "Already up to date." Тогда
	Иначе
		Если ПараметрыGit.СоздаватьВременныйКаталог И ПараметрыGit.Свойство("КаталогGitРепозитория") Тогда
			ОчиститьКаталог(ПараметрыGit.КаталогGitРепозитория);
		КонецЕсли;
		ЛогКоманды = "";
		Если ПараметрыGit.Свойство("ЛогКоманды") Тогда
			ЛогКоманды = ПараметрыGit.ЛогКоманды;
		КонецЕсли;	
		ВызватьИсключение СтрШаблон(НСтр(
			"ru = 'Не удалось выполнить клонирование ветки <%1> из GIT репозитория. Код ошибки:'"), ДопПараметры.Имя)
			+ Результат + Символы.ПС + ЛогКоманды;
	КонецЕсли;
	
	Возврат ПараметрыGit;
	
КонецФункции	

Функция ПодчиненныйОбъектМетаданного(Данные, ДанныеМетаданногоСППР)
	
	ПодчиненныйОбъект = Неопределено;
	Если Данные.ПодчиненныйОбъект <> Неопределено Тогда
		Если Данные.ЭтоФорма Тогда
			Если ТипЗнч(Данные.ПодчиненныйОбъект) = Тип("Строка") Тогда
				ПодчиненныйОбъект = ФормаМетаданного(ДанныеМетаданногоСППР.Ссылка, Данные.ИмяПодчиненногоОбъекта);
			Иначе	
				ПодчиненныйОбъект = Данные.ПодчиненныйОбъект;
			КонецЕсли;	
		ИначеЕсли Данные.ЭтоМакет Тогда
			ПодчиненныйОбъект = МакетМетаданного(ДанныеМетаданногоСППР.Ссылка, Данные.ИмяПодчиненногоОбъекта);
		ИначеЕсли Данные.ЭтоКомандаОбъекта Тогда
			ПодчиненныйОбъект = КомандаМетаданного(ДанныеМетаданногоСППР.Ссылка, Данные.ИмяПодчиненногоОбъекта);
		Иначе	
			ПодчиненныйОбъект = Данные.ПодчиненныйОбъект;
		КонецЕсли;
		
		Если ПодчиненныйОбъект = Неопределено Тогда
			ДанныеМетаданногоСППР.Вставить("НайденПодчиненныйОбъект", Ложь);
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ПодчиненныйОбъект;
	
КонецФункции	

Функция КоммитПрисутствуетВВетке(Ветка, ИмяВетки, ИдКоммита, КаталогGitРепозитория)
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Проверка, что в ветке <%1> есть комиит <%2>.'"), ИмяВетки, ИдКоммита);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
	
	ТекстКоманды = СтрШаблон("git rev-list %1", ИмяВетки);
	Результат = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, КаталогGitРепозитория,,"utf-8");
	Если Результат.КодВозврата <> 0 Тогда
		Если Результат.Свойство("Лог") Тогда
			Лог = Результат.Лог;
		Иначе
			Лог = "";
		КонецЕсли;	
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось выполнить команду <%1>. КодВозврата=%2'"),
			ТекстКоманды, Результат.КодВозврата) + Символы.ПС + Лог;
	КонецЕсли; 
	
	МассивСтрок = СтрРазделить(Результат.Лог, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Если Найти(МассивСтрок[Сч], ИдКоммита) > 0 Тогда
			ТекстСообщения =
				СтрШаблон(НСтр("ru = 'Коммит <%1> найден в ветке <%2>.'"), ИдКоммита, ИмяВетки);
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Коммит <%1> не найден в ветке <%2>.'"), ИдКоммита, ИмяВетки);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,Ветка,ТекстСообщения);
	Возврат Ложь;
	
КонецФункции	

Функция ПреобразоватьКлючиСоответствия(Соответствие)
	
	Результат = Новый Соответствие;
	
	Для Каждого КлючЗначение Из Соответствие Цикл
		Ключ = СтрЗаменить(КлючЗначение.Ключ, "\", "/");
		Результат.Вставить(Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции	

Функция ИзмененияПоФайлуЕстьВДанныхGitСервера(ДанныеВетки, Данные, ИзмененныеМетаданныеПоДаннымСервера)
	
	Если ИзмененныеМетаданныеПоДаннымСервера[Данные.ИмяФайла] = Неопределено Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В ветке <%1> было найдены изменения файла <%2>, которого нет под данным git сервера и эти изменения не будут загружены.'"),
				ДанныеВетки.Наименование, Данные.ИмяФайла);
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
									УровеньЖурналаРегистрации.Информация,
									,
									ДанныеВетки.Ссылка,
									ТекстСообщения);
		ТекстСообщения = НСтр("ru = 'Текст изменений:'") + Символы.ПС + Данные.Изменения;
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
									УровеньЖурналаРегистрации.Информация,
									,
									ДанныеВетки.Ссылка,
									ТекстСообщения);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
								
КонецФункции	

Процедура ЗагрузитьИзмененияВВеткахОсновнаяЗагрузка(ПараметрыGit, ВеткиПриемники, Проект, ДопПараметры)
	ДатаЗагрузки = ТекущаяДата();
	КаталогGitРепозитория = ПараметрыGit.КаталогGitРепозитория;
	
	ТекстСообщения =
		СтрШаблон(НСтр("ru = 'Получены файлы для анализа изменений git в каталоге <%1>.'"), КаталогGitРепозитория);
	ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);

	ТекстКоманды = "git fetch";
	Попытка
		Результат = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, КаталогGitРепозитория,,"utf-8");
		ТекстСообщения = НСтр("ru = 'Выполнена команда git fetch.'");
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
	Исключение
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
			УровеньЖурналаРегистрации.Ошибка,,
			,
			ОписаниеОшибки());
	КонецПопытки;
	
	ОповещенияОСогласованииИзмененийОМ = Новый Массив;
	
	Для Каждого КлючЗначение Из ВеткиПриемники Цикл
		ВеткаПриемник = КлючЗначение.Ключ;
		ВеткаПриемникИмя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаПриемник, "Имя");
		ДанныеВеткиПриемника = КлючЗначение.Значение;
		
		//Нужно сделать checkout на ветку источник.
		ТекстКоманды = СтрШаблон("git checkout %1", ВеткаПриемникИмя);
		Попытка
			Результат = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, КаталогGitРепозитория,,"utf-8");
			ТекстСообщения =
				СтрШаблон(НСтр("ru = 'Локальный репозиторий переключен на ветку <%1>.'"), ВеткаПриемникИмя);
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,ВеткаПриемник,ТекстСообщения);
		Исключение
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
				УровеньЖурналаРегистрации.Ошибка,,
				ВеткаПриемник,
				ОписаниеОшибки());
		КонецПопытки;
		Если Результат.КодВозврата <> 0 Тогда
			Если Результат.Свойство("Лог") Тогда
				Лог = Результат.Лог;
			Иначе
				Лог = "";
			КонецЕсли;
			
			ТекстСообщения =
				СтрШаблон(НСтр("ru = 'Не получилось загрузить изменения метаданных по приемнику <%1>.'"), ВеткаПриемникИмя);
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
				УровеньЖурналаРегистрации.Ошибка,,
				ВеткаПриемник,
				ТекстСообщения + Символы.ПС + ОписаниеОшибки() + Символы.ПС + Лог);
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось выполнить команду <%1>. КодВозврата=%2'"),
				ТекстКоманды, Результат.КодВозврата) + Символы.ПС + Лог;
		КонецЕсли;	
		
		Для Каждого ДанныеВетки Из ДанныеВеткиПриемника Цикл
			ИнформацияОВетке = ДанныеВетки.ИнформацияОВетке;
			ИдКоммитаПоследнейЗагрузки = ДанныеВетки.ИдКоммитаПоследнейЗагрузки;
			ПредыдущийКоммитСогласования = ИдКоммитаПоследнейЗагрузки;
			
			Если ДанныеВетки.Свойство("ИзмененныеМетаданныеПоДаннымСервера") Тогда
				ИзмененныеМетаданныеПоДаннымСервера = ПреобразоватьКлючиСоответствия(ДанныеВетки.ИзмененныеМетаданныеПоДаннымСервера);
			Иначе
				ИзмененныеМетаданныеПоДаннымСервера = Неопределено;
			КонецЕсли;	
			
			ТекстСообщения =
				СтрШаблон(НСтр("ru = 'Загрузка изменений метаданных по ветке <%1>.'"), ДанныеВетки.Имя);
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,ДанныеВетки.Ссылка,ТекстСообщения);
			
			//Нужно сделать checkout на данную ветку
			ТекстКоманды = СтрШаблон("git checkout %1", ДанныеВетки.Имя);
			
			Попытка
				Результат = ОбщегоНазначенияСППР.ВыполнитьКонсольнуюКоманду(ТекстКоманды, КаталогGitРепозитория,,"utf-8");
				ТекстСообщения =
					СтрШаблон(НСтр("ru = 'Локальный репозиторий переключен на ветку <%1>.'"), ДанныеВетки.Имя);
				ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,ДанныеВетки.Ссылка,ТекстСообщения);
			Исключение
				Если Результат.Свойство("Лог") Тогда
					Лог = Результат.Лог;
				Иначе
					Лог = "";
				КонецЕсли;	
				ТекстСообщения =
					СтрШаблон(НСтр("ru = 'Не получилось загрузить изменения метаданных по ветке <%1>.'"), ДанныеВетки.Имя);
				ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
					УровеньЖурналаРегистрации.Ошибка,,
					ДанныеВетки.Ссылка,
					ТекстСообщения + Символы.ПС + ОписаниеОшибки() + Символы.ПС + Лог);
				Продолжить;
			КонецПопытки;
			
			Если Результат.КодВозврата <> 0 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось выполнить команду <%1>. КодВозврата=%2'"), ТекстКоманды, Результат.КодВозврата);
			КонецЕсли;
			
			Попытка
				Если ИдКоммитаПоследнейЗагрузки <> Неопределено И НЕ КоммитПрисутствуетВВетке(ДанныеВетки.Ссылка, ДанныеВетки.Имя, ИдКоммитаПоследнейЗагрузки, КаталогGitРепозитория) Тогда
					ИдКоммитаПоследнейЗагрузки = Неопределено;
				КонецЕсли;	
			Исключение
				ТекстСообщения =
					СтрШаблон(НСтр("ru = 'Не получилось загрузить изменения метаданных по ветке <%1>.'"), ДанныеВетки.Имя);
				ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
					УровеньЖурналаРегистрации.Ошибка,,
					ДанныеВетки.Ссылка,
					ТекстСообщения + Символы.ПС + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;

			ВыполняласьЗагрузкаМетаданныхИзEDT = Ложь;
			Если ДанныеВетки.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
				ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория);
				ВыполняласьЗагрузкаМетаданныхИзEDT = Истина;
			КонецЕсли;	
			
			ТекстИзмененийПолный = Неопределено;
			УжеЗагруженныеИзменения = Неопределено;
			ТаблицаИзмененийПолная = Неопределено;
			//Надо загрузить данные по измененным метаданным
			ИзмененныеМетаданные = Новый Соответствие;
			ИзмененныеМетаданныеПолные = Неопределено;
			Попытка
				Если ИдКоммитаПоследнейЗагрузки = Неопределено Тогда
					ТекстСообщения =
						СтрШаблон(НСтр("ru = 'Изменения метаданных по ветке <%1> будут загружены полностью.'"), ДанныеВетки.Имя);
					ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,
						ДанныеВетки.Ссылка,ТекстСообщения);
						
					ПараметрыGit.Вставить("СравнениеСКоммитом", Ложь);
					ТекстИзменений = ФайлИзмененийПоДаннымGit(ДанныеВетки.Ссылка, ДанныеВетки.ПриемникИмя, ДанныеВетки.Имя, ПараметрыGit);
				Иначе	               
					ТекстСообщения =
						СтрШаблон(НСтр("ru = 'Изменения метаданных по ветке <%1> будут загружены начиная с коммита <%2>.'"), ДанныеВетки.Имя, ИдКоммитаПоследнейЗагрузки);
					ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,
						ДанныеВетки.Ссылка,ТекстСообщения);
					
					ПараметрыGit.Вставить("СравнениеСКоммитом", Ложь);
					ТекстИзмененийПолный = ФайлИзмененийПоДаннымGit(ДанныеВетки.Ссылка, ДанныеВетки.ПриемникИмя, ДанныеВетки.Имя, ПараметрыGit);
					
					ПараметрыGit.Вставить("СравнениеСКоммитом", Истина);
					ТекстИзменений = ФайлИзмененийПоДаннымGit(ДанныеВетки.Ссылка, ИдКоммитаПоследнейЗагрузки, ДанныеВетки.Имя, ПараметрыGit);
				КонецЕсли;	
			Исключение
				ТекстСообщения =
					СтрШаблон(НСтр("ru = 'При попытке получить текст изменений по ветке <%1> возникла ошибка.'"), ДанныеВетки.Имя);
				ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Ошибка,,
					ДанныеВетки.Ссылка,ТекстСообщения + Символы.ПС + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			ПараметрыGit.Вставить("ТекстИзменений", ТекстИзменений);
			ПараметрыGit.Вставить("ВернутьТаблицу", Истина);
			ПараметрыGit.Вставить("ДетализацияДоФайлов", Истина);
			ЗагрузкаМетаданныхEDT.ЗагрузитьИзмененияИзEDT(ПараметрыGit);
			ТаблицаИзменений = ПараметрыGit.ТаблицаИзменений;

			Если ТекстИзмененийПолный <> Неопределено Тогда
				
				ПараметрыGit.Вставить("ТекстИзменений", ТекстИзмененийПолный);
				ПараметрыGit.Вставить("ВернутьТаблицу", Истина);
				ПараметрыGit.Вставить("ДетализацияДоФайлов", Истина);
				ЗагрузкаМетаданныхEDT.ЗагрузитьИзмененияИзEDT(ПараметрыGit);
				ТаблицаИзмененийПолная = ПараметрыGit.ТаблицаИзменений;
				ИзмененныеМетаданныеПолные = Новый Соответствие;
				
				Для Каждого СтрокаТаблицаИзменений Из ТаблицаИзмененийПолная Цикл
					
					Если ИзмененныеМетаданныеПоДаннымСервера <> Неопределено И ИзмененныеМетаданныеПоДаннымСервера.Количество() > 0 Тогда
						Если НЕ ИзмененияПоФайлуЕстьВДанныхGitСервера(ДанныеВетки, СтрокаТаблицаИзменений, ИзмененныеМетаданныеПоДаннымСервера) Тогда
							Продолжить;
						КонецЕсли;	
					КонецЕсли;
					
					ДобавитьМетаданное(ИзмененныеМетаданныеПолные,
					ДопПараметры.СоответствияИмен,
					СтрокаТаблицаИзменений.ИмяФайла,
					СтрокаТаблицаИзменений.Изменения,
					СтрокаТаблицаИзменений.ОписаниеИзменений,
					СтрокаТаблицаИзменений.ЭтоПодсистема,
					Ложь);
				КонецЦикла;	
				
			КонецЕсли;	
			
			Для Каждого СтрокаТаблицаИзменений Из ТаблицаИзменений Цикл
				
				Если ИзмененныеМетаданныеПоДаннымСервера <> Неопределено И ИзмененныеМетаданныеПоДаннымСервера.Количество() > 0 Тогда
					Если НЕ ИзмененияПоФайлуЕстьВДанныхGitСервера(ДанныеВетки, СтрокаТаблицаИзменений, ИзмененныеМетаданныеПоДаннымСервера) Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;	
				
				Если ЭтоПустыеИзмененияФайла(СтрокаТаблицаИзменений.Изменения) Тогда
					Продолжить;
				КонецЕсли;	
				
				НадоУдалитьИзмененияПоФайлу = Ложь;
				Если ТаблицаИзмененийПолная <> Неопределено Тогда
					СтрокаТаблицаИзмененийПолная = ТаблицаИзмененийПолная.Найти(СтрокаТаблицаИзменений.ИмяФайла, "ИмяФайла");
					Если СтрокаТаблицаИзмененийПолная = Неопределено Тогда
						НадоУдалитьИзмененияПоФайлу = Истина;
					КонецЕсли;	
				КонецЕсли;	
				ДобавитьМетаданное(ИзмененныеМетаданные,
				ДопПараметры.СоответствияИмен,
				СтрокаТаблицаИзменений.ИмяФайла,
				СтрокаТаблицаИзменений.Изменения,
				СтрокаТаблицаИзменений.ОписаниеИзменений,
				СтрокаТаблицаИзменений.ЭтоПодсистема,
				НадоУдалитьИзмененияПоФайлу);
			КонецЦикла;	 
			
			ТаблицаТекстИзменений = Новый ТаблицаЗначений;
			ТаблицаТекстИзменений.Колонки.Добавить("ОбъектМетаданных");
			ТаблицаТекстИзменений.Колонки.Добавить("ПодчиненныйОбъект");
			ТаблицаТекстИзменений.Колонки.Добавить("ПодробноеОписаниеИзменений");
			ТаблицаТекстИзменений.Колонки.Добавить("Ключи");
			ТаблицаТекстИзменений.Индексы.Добавить("ОбъектМетаданных,ПодчиненныйОбъект");
			
			// Далее идет блок, нужный для проверки возможного изменения текста ОМ, хотя в сравнении с предыдущим согласованием изменений нет.
			// Такое может быть при изменении порядка коммитов.
			Если ТаблицаИзмененийПолная <> Неопределено Тогда
				Для Каждого ТекМетаданное Из ИзмененныеМетаданныеПолные Цикл
					Данные = ТекМетаданное.Значение;
					
					ДанныеМетаданногоСППР = МетаданноеПоИмени(Данные, Проект);
					Если ДанныеМетаданногоСППР = Неопределено И НЕ ВыполняласьЗагрузкаМетаданныхИзEDT Тогда
						ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория);
						ВыполняласьЗагрузкаМетаданныхИзEDT = Истина;
						ДанныеМетаданногоСППР = МетаданноеПоИмени(Данные, Проект);
					КонецЕсли;
					
					Если ДанныеМетаданногоСППР = Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					
					ОбъектМетаданных = ДанныеМетаданногоСППР.Ссылка;
					
					ПодчиненныйОбъект = ПодчиненныйОбъектМетаданного(Данные, ДанныеМетаданногоСППР);
					Если НЕ ВыполняласьЗагрузкаМетаданныхИзEDT И ДанныеМетаданногоСППР.Свойство("НайденПодчиненныйОбъект")
						 И НЕ ДанныеМетаданногоСППР.НайденПодчиненныйОбъект Тогда
							ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория);
							ПодчиненныйОбъект = ПодчиненныйОбъектМетаданного(Данные, ДанныеМетаданногоСППР);
							ВыполняласьЗагрузкаМетаданныхИзEDT = Истина;
					КонецЕсли;	
						
					Если ЭтоПустыеИзмененияФайла(Данные.Изменения) Тогда
						Продолжить;
					КонецЕсли;	
					
					МассивСтрокТаблицыИзменений = ТаблицаТекстИзменений.НайтиСтроки(
						Новый Структура("ОбъектМетаданных,ПодчиненныйОбъект", ОбъектМетаданных, ПодчиненныйОбъект));
						
					Если МассивСтрокТаблицыИзменений.Количество() = 0 Тогда
						СтрокаТаблицаТекстИзменений = ТаблицаТекстИзменений.Добавить();
						СтрокаТаблицаТекстИзменений.ОбъектМетаданных = ОбъектМетаданных;
						СтрокаТаблицаТекстИзменений.ПодчиненныйОбъект = ПодчиненныйОбъект;
						СтрокаТаблицаТекстИзменений.Ключи = Новый Соответствие;
					Иначе	
						СтрокаТаблицаТекстИзменений = МассивСтрокТаблицыИзменений[0];
					КонецЕсли;		
						
					СтрокаТаблицаТекстИзменений.Ключи.Вставить(ТекМетаданное.Ключ, Данные.Изменения);
						
				КонецЦикла;
				
				Для Каждого СтрокаТаблицаТекстИзменений Из ТаблицаТекстИзменений Цикл
					ЗаписьРС = РегистрыСведений.ИзмененияВВетках.СоздатьМенеджерЗаписи();
					ЗаписьРС.Ветка = ДанныеВетки.Ссылка;
					ЗаписьРС.ОбъектМетаданных = СтрокаТаблицаТекстИзменений.ОбъектМетаданных;
					ЗаписьРС.ПодчиненныйОбъект = СтрокаТаблицаТекстИзменений.ПодчиненныйОбъект;
					ЗаписьРС.Прочитать();
					Попытка
						Если НЕ ТекстИзмененийВРСИТекстИзмененийТекущийСовпададают(ЗаписьРС.ПодробноеОписаниеИзменений, СтрокаТаблицаТекстИзменений.Ключи) Тогда
							Для Каждого ТекКлюч Из СтрокаТаблицаТекстИзменений.Ключи Цикл
								ИзмененныеМетаданные.Вставить(ТекКлюч.Ключ, ИзмененныеМетаданныеПолные[ТекКлюч.Ключ]);
							КонецЦикла;	
						КонецЕсли;	
					Исключение
						ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
													УровеньЖурналаРегистрации.Ошибка,
													,
													ДанныеВетки.Ссылка,
													ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли;	
			
			ТаблицаТекстИзменений.Очистить();
			
			СводнаяТаблицаИзмененныхМетаданных = Неопределено;
			Если ИзмененныеМетаданныеПолные <> Неопределено Тогда 
				УжеЗагруженныеИзменения = УжеЗагруженныеИзменения(ДанныеВетки.Ссылка);
				
				СводнаяТаблицаИзмененныхМетаданных = Новый ТаблицаЗначений;
				СводнаяТаблицаИзмененныхМетаданных.Колонки.Добавить("ОбъектМетаданных");
				СводнаяТаблицаИзмененныхМетаданных.Колонки.Добавить("ПодчиненныйОбъект");
				СводнаяТаблицаИзмененныхМетаданных.Колонки.Добавить("ПодробноеОписаниеИзменений");
				Для Каждого ТекМетаданное Из ИзмененныеМетаданныеПолные Цикл
					Данные = ТекМетаданное.Значение;
					ДанныеМетаданногоСППР = МетаданноеПоИмени(Данные, Проект);
					Если ДанныеМетаданногоСППР = Неопределено И НЕ ВыполняласьЗагрузкаМетаданныхИзEDT Тогда
						ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория);
						ВыполняласьЗагрузкаМетаданныхИзEDT = Истина;
						ДанныеМетаданногоСППР = МетаданноеПоИмени(Данные, Проект);
					КонецЕсли;
					
					Если ДанныеМетаданногоСППР = Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					
					ОбъектМетаданных = ДанныеМетаданногоСППР.Ссылка;
					ПодчиненныйОбъект = ПодчиненныйОбъектМетаданного(Данные, ДанныеМетаданногоСППР);
					Если НЕ ВыполняласьЗагрузкаМетаданныхИзEDT И ДанныеМетаданногоСППР.Свойство("НайденПодчиненныйОбъект")
						 И НЕ ДанныеМетаданногоСППР.НайденПодчиненныйОбъект Тогда
							ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория);
							ПодчиненныйОбъект = ПодчиненныйОбъектМетаданного(Данные, ДанныеМетаданногоСППР);
							ВыполняласьЗагрузкаМетаданныхИзEDT = Истина;
					КонецЕсли;	
					
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ПодчиненныйОбъект", ПодчиненныйОбъект);
					СтруктураПоиска.Вставить("ОбъектМетаданных", ОбъектМетаданных);
					НайденныеСтроки = УжеЗагруженныеИзменения.НайтиСтроки(СтруктураПоиска);
					Для Каждого ТекСтрокаУжеЗагруженныеИзменения Из НайденныеСтроки Цикл
						ТекСтрокаУжеЗагруженныеИзменения.ЕстьИзменения = Истина;
					КонецЦикла;	
					
					Если ТипЗнч(ПодчиненныйОбъект) = Тип("Строка") Тогда
						ПодчиненныйОбъект = Неопределено;
					КонецЕсли;	
					
					СтрокиСводнаяТаблицаИзмененныхМетаданных = СводнаяТаблицаИзмененныхМетаданных.НайтиСтроки(
						Новый Структура("ОбъектМетаданных,ПодчиненныйОбъект", ОбъектМетаданных,ПодчиненныйОбъект));
					Если СтрокиСводнаяТаблицаИзмененныхМетаданных.Количество() = 0 Тогда
						СтрокаСводнаяТаблицаИзмененныхМетаданных = СводнаяТаблицаИзмененныхМетаданных.Добавить();
						СтрокаСводнаяТаблицаИзмененныхМетаданных.ОбъектМетаданных = ОбъектМетаданных;
						СтрокаСводнаяТаблицаИзмененныхМетаданных.ПодчиненныйОбъект = ПодчиненныйОбъект;
						СтрокаСводнаяТаблицаИзмененныхМетаданных.ПодробноеОписаниеИзменений = Данные.Изменения; 
					Иначе	
						СтрокаСводнаяТаблицаИзмененныхМетаданных = СтрокиСводнаяТаблицаИзмененныхМетаданных[0];
						СтрокаСводнаяТаблицаИзмененныхМетаданных.ПодробноеОписаниеИзменений =
						СтрокаСводнаяТаблицаИзмененныхМетаданных.ПодробноеОписаниеИзменений + Символы.ПС + Данные.Изменения; 
					КонецЕсли;	
				КонецЦикла;	
				СводнаяТаблицаИзмененныхМетаданных.Индексы.Добавить("ОбъектМетаданных,ПодчиненныйОбъект");
			КонецЕсли;	
			
			ОтветственныеДляУведомленияИзменениеОбъекта = Новый Соответствие;
			ОтветственныеДляУведомленияНовыйОбъект = Новый Соответствие;
			ОбъектыМетаданныхГдеНеУказанОтветственный = Новый Соответствие;
			Для Каждого ТекМетаданное Из ИзмененныеМетаданные Цикл
				Данные = ТекМетаданное.Значение;
				Если ИзмененныеМетаданныеПолные = Неопределено Тогда
					ДанныеПолные = Неопределено;
				Иначе	
					ДанныеПолные = ИзмененныеМетаданныеПолные[ТекМетаданное.Ключ];
				КонецЕсли;	
				
				ДанныеМетаданногоСППР = МетаданноеПоИмени(Данные, Проект);
				Если ДанныеМетаданногоСППР = Неопределено И НЕ ВыполняласьЗагрузкаМетаданныхИзEDT Тогда
					ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория);
					ВыполняласьЗагрузкаМетаданныхИзEDT = Истина;
					ДанныеМетаданногоСППР = МетаданноеПоИмени(Данные, Проект);
				КонецЕсли;
				
				Если ДанныеМетаданногоСППР = Неопределено Тогда
					Продолжить;
				КонецЕсли;	   
				
				ЗаписьРС = РегистрыСведений.ИзмененияВВетках.СоздатьМенеджерЗаписи();
				ЗаписьРС.Ветка = ДанныеВетки.Ссылка;
				ОбъектМетаданных = ДанныеМетаданногоСППР.Ссылка;
				ЗаписьРС.ОбъектМетаданных = ОбъектМетаданных;
				
				ПодчиненныйОбъект = ПодчиненныйОбъектМетаданного(Данные, ДанныеМетаданногоСППР);
				Если НЕ ВыполняласьЗагрузкаМетаданныхИзEDT И ДанныеМетаданногоСППР.Свойство("НайденПодчиненныйОбъект")
					 И НЕ ДанныеМетаданногоСППР.НайденПодчиненныйОбъект Тогда
						ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория);
						ПодчиненныйОбъект = ПодчиненныйОбъектМетаданного(Данные, ДанныеМетаданногоСППР);
						ВыполняласьЗагрузкаМетаданныхИзEDT = Истина;
				КонецЕсли;	
				
				ЗаписьРС.ПодчиненныйОбъект = ПодчиненныйОбъект;
				ЗаписьРС.Прочитать();
				
				УжеЕстьПодробноеОписаниеИзменений = ЗначениеЗаполнено(ЗаписьРС.ПодробноеОписаниеИзменений);
				
				МассивСтрокТаблицыИзменений = ТаблицаТекстИзменений.НайтиСтроки(
					Новый Структура("ОбъектМетаданных,ПодчиненныйОбъект", ОбъектМетаданных, ПодчиненныйОбъект));
					
				Если МассивСтрокТаблицыИзменений.Количество() = 0 Тогда
					ПредыдущееПодробноеОписаниеИзменений = ЗаписьРС.ПодробноеОписаниеИзменений;
					ПредыдущаяДатаИзмененияСтатусаСогласования = ЗаписьРС.ДатаИзмененияСтатусаСогласования;
					ПредыдущийСтатусСогласования = ЗаписьРС.СтатусСогласования;
					ПредыдущийУстановилСтатус = ЗаписьРС.УстановилСтатус;
				Иначе	
					ПредыдущееПодробноеОписаниеИзменений = Неопределено;
					ПредыдущаяДатаИзмененияСтатусаСогласования = Неопределено;
					ПредыдущийСтатусСогласования = Неопределено;
					ПредыдущийУстановилСтатус = Неопределено;
				КонецЕсли;	
				
				СтрокиСводнаяТаблицаИзмененныхМетаданных = Неопределено;
				Если СводнаяТаблицаИзмененныхМетаданных <> Неопределено Тогда
					СтрокиСводнаяТаблицаИзмененныхМетаданных = СводнаяТаблицаИзмененныхМетаданных.НайтиСтроки(
						Новый Структура("ОбъектМетаданных,ПодчиненныйОбъект", ОбъектМетаданных,ПодчиненныйОбъект));
						
					Если СтрокиСводнаяТаблицаИзмененныхМетаданных.Количество() = 0 Тогда
						Если ЗначениеЗаполнено(ЗаписьРС.ОбъектМетаданных) Тогда
							ЗаписьРС.Удалить();
						КонецЕсли;
						
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;	
				
				Если Данные.НадоУдалитьИзмененияПоФайлу Тогда
						
					Если СтрокиСводнаяТаблицаИзмененныхМетаданных <> Неопределено
						И СтрокиСводнаяТаблицаИзмененныхМетаданных.Количество() = 0 Тогда
						
						Если ЗначениеЗаполнено(ЗаписьРС.ОбъектМетаданных) Тогда
							ЗаписьРС.Удалить();
						КонецЕсли;
						
					КонецЕсли;		
					
					// Изменения есть только в новом коммите, но их нет в полном сравнении веток.
					// Такое может быть, когда в ветку смерджевали другую ветку.
					// Или был сделан реверт коммита.
					Продолжить;
					
				КонецЕсли;	
				
				ЗаписьРС.Ветка = ДанныеВетки.Ссылка;
				ЗаписьРС.ОбъектМетаданных = ДанныеМетаданногоСППР.Ссылка;
				ЗаписьРС.ПодчиненныйОбъект = ПодчиненныйОбъект;
				ЗаписьРС.ДатаИзмененияСтатусаСогласования = ДатаЗагрузки;
				
				Если ЗначениеЗаполнено(ЗаписьРС.ОбъектМетаданных) и НЕ ЗначениеЗаполнено(ДанныеМетаданногоСППР.Ответственный) Тогда
					ОбъектыМетаданныхГдеНеУказанОтветственный.Вставить(ЗаписьРС.ОбъектМетаданных, Истина);
				КонецЕсли;	
				
				НадоСделатьУведомление = Ложь;
				НадоСделатьУведомлениеНовоеМетаданное = Ложь;
				Если ЗначениеЗаполнено(ДанныеМетаданногоСППР.СогласующийИзменения) Тогда
					ЗаписьРС.Согласующий = ДанныеМетаданногоСППР.СогласующийИзменения;
				Иначе	
					ЗаписьРС.Согласующий = ДанныеМетаданногоСППР.Ответственный;
				КонецЕсли;	
				
				ЗаписьРС.УстановилСтатус = Неопределено;
				Если ДанныеПолные = Неопределено  Тогда
					Если ЗначениеЗаполнено(Данные.ОписаниеИзменений) Тогда
						ЗаписьРС.ОписаниеИзменений = Данные.ОписаниеИзменений;
					КонецЕсли;	
				Иначе	
					Если ЗначениеЗаполнено(ДанныеПолные.ОписаниеИзменений) Тогда
						ЗаписьРС.ОписаниеИзменений = ДанныеПолные.ОписаниеИзменений;
					КонецЕсли;	
				КонецЕсли;	
				
				Если СтрокиСводнаяТаблицаИзмененныхМетаданных = Неопределено
						ИЛИ СтрокиСводнаяТаблицаИзмененныхМетаданных.Количество() = 0 Тогда
					ТекИзменения = Данные.Изменения;
				Иначе	
					ТекИзменения = СтрокиСводнаяТаблицаИзмененныхМетаданных[0].ПодробноеОписаниеИзменений;
				КонецЕсли;	
				
				Если МассивСтрокТаблицыИзменений.Количество() = 0 Тогда
					СтрокаТаблицаТекстИзменений = ТаблицаТекстИзменений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицаТекстИзменений, ЗаписьРС);
					Если ДанныеПолные = Неопределено Тогда
						СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений = ТекИзменения; 
					Иначе	
						СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений = ДанныеПолные.Изменения; 
					КонецЕсли;	
				Иначе	
					СтрокаТаблицаТекстИзменений = МассивСтрокТаблицыИзменений[0];
					Если ДанныеПолные = Неопределено Тогда
						СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений =
							СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений + Символы.ПС + ТекИзменения; 
					Иначе	
						СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений =
							СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений + Символы.ПС + ДанныеПолные.Изменения; 
					КонецЕсли;	
				КонецЕсли;		
				
				Если ЗначениеЗаполнено(ПредыдущееПодробноеОписаниеИзменений)
					И НЕ ЕстьИзмененияПоТекстовомуОписаниюGit(ПредыдущееПодробноеОписаниеИзменений,
						СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений)
					Тогда
					// Значит, возможно, было слияние с веткой приемником где-то ранее и в реальности
					// по отношению к ветке приемнику новых изменений нет и не надо заново выполнять согласование.
					Продолжить;
				КонецЕсли;	
				
				ЗаписьРС.ПодробноеОписаниеИзменений = СтрокаТаблицаТекстИзменений.ПодробноеОписаниеИзменений;
				
				ЗаписьРС.ТипИзменения = ТипИзмененияОбъектаМетаданныхGit(ЗаписьРС);
				
				Если ЗаписьРС.ТипИзменения = Перечисления.ТипыИзмененийОбъектовМетаданных.Добавлен
					И НЕ ЗначениеЗаполнено(ЗаписьРС.ПредыдущееПодробноеОписаниеИзменений)
					И НЕ ЗначениеЗаполнено(ПредыдущееПодробноеОписаниеИзменений)
					И НЕ УжеЕстьПодробноеОписаниеИзменений
					Тогда		
					// Новый объект метаданных надо отправить на согласование ответственному за проект, но только один раз.
					ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования;
					НадоСделатьУведомлениеНовоеМетаданное = Истина;
					
				ИначеЕсли ЗаписьРС.ТипИзменения = Перечисления.ТипыИзмененийОбъектовМетаданных.Добавлен Тогда	
					ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования;
					НадоСделатьУведомление = Истина;
					
				ИначеЕсли ДанныеМетаданногоСППР.СогласованиеИзменений = Перечисления.ВариантыСогласованияИзмененияВВетках.НеТребуется
					ИЛИ НЕ ЗначениеЗаполнено(ДанныеМетаданногоСППР.СогласованиеИзменений) Тогда
					
					ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования;
					
				Иначе
					Если ЗначениеЗаполнено(ДанныеМетаданногоСППР.Ответственный) Тогда
						Если ДанныеМетаданногоСППР.СогласованиеИзменений = Перечисления.ВариантыСогласованияИзмененияВВетках.Требуется
							ИЛИ НЕ ЗначениеЗаполнено(ДанныеМетаданногоСППР.СогласованиеИзменений) Тогда
								ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования;
								НадоСделатьУведомление = Истина;
						КонецЕсли;	
					Иначе                                 
						ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования;
					КонецЕсли;	
				КонецЕсли;
				
				Если ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования
					И НЕ ЗначениеЗаполнено(ЗаписьРС.Согласующий) 
					Тогда
					    ОтветственныйЗаПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВетки.Проект, "Ответственный");
						ЗаписьРС.Согласующий = ОтветственныйЗаПроект;
				КонецЕсли;	
				
				Если НадоСделатьУведомлениеНовоеМетаданное Тогда
					
					ОтветственныйЗаПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВетки.Проект, "Ответственный");
					Если ЗначениеЗаполнено(ОтветственныйЗаПроект) Тогда
						ЗаписьРС.Согласующий = ОтветственныйЗаПроект;
						Если ОтветственныеДляУведомленияНовыйОбъект[ЗаписьРС.Согласующий] = Неопределено Тогда         
							ТекстСообщения = СтрШаблон(НСтр("ru='Ответственный за проект <%1> получит уведомление о новом ОМ <%2>.'"), ЗаписьРС.Согласующий, ЗаписьРС.ОбъектМетаданных);
							ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
														УровеньЖурналаРегистрации.Информация,
														,
														ДанныеВетки.Ссылка,
														ТекстСообщения);
							
						КонецЕсли;	
						ОтветственныеДляУведомленияНовыйОбъект.Вставить(ЗаписьРС.Согласующий, Истина);
					Иначе	
						ДанныеТехПроектаПоВетке = ДанныеТехПроектаПоВетке(ДанныеВетки.Ссылка);
						Если ДанныеТехПроектаПоВетке <> Неопределено И ЗначениеЗаполнено(ДанныеТехПроектаПоВетке.Ответственный) Тогда
							ЗаписьРС.Согласующий = ДанныеТехПроектаПоВетке.Ответственный;
							Если ОтветственныеДляУведомленияНовыйОбъект[ЗаписьРС.Согласующий] = Неопределено Тогда         
								ТекстСообщения = СтрШаблон(НСтр("ru='Ответственный за технический проект <%1> получит уведомление о новом ОМ <%2>.'"), ЗаписьРС.Согласующий, ЗаписьРС.ОбъектМетаданных);
								ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
															УровеньЖурналаРегистрации.Информация,
															,
															ДанныеВетки.Ссылка,
															ТекстСообщения);
								
							КонецЕсли;	
							ОтветственныеДляУведомленияНовыйОбъект.Вставить(ЗаписьРС.Согласующий, Истина);
						КонецЕсли;
					КонецЕсли;	
					
				ИначеЕсли НадоСделатьУведомление Тогда
					Если ОтветственныеДляУведомленияИзменениеОбъекта[ЗаписьРС.Согласующий] = Неопределено Тогда         
						ТекстСообщения = СтрШаблон(НСтр("ru='Пользователь <%1> получит уведомление о изменении ОМ <%2>.'"), ЗаписьРС.Согласующий, ЗаписьРС.ОбъектМетаданных);
						ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
													УровеньЖурналаРегистрации.Информация,
													,
													ДанныеВетки.Ссылка,
													ТекстСообщения);
						
					КонецЕсли;	
					ОтветственныеДляУведомленияИзменениеОбъекта.Вставить(ЗаписьРС.Согласующий, Истина);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПредыдущееПодробноеОписаниеИзменений) И
					(ПредыдущийСтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.Согласовано
					ИЛИ ПредыдущийСтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.НеСогласовано)
					И (ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования
					ИЛИ ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования) Тогда
					
					ЗаписьРС.ПредыдущееПодробноеОписаниеИзменений = ПредыдущееПодробноеОписаниеИзменений;
					ЗаписьРС.ПредыдущаяДатаИзмененияСтатусаСогласования = ПредыдущаяДатаИзмененияСтатусаСогласования;
					ЗаписьРС.ПредыдущийСтатусСогласования = ПредыдущийСтатусСогласования;
					ЗаписьРС.ПредыдущийУстановилСтатус = ПредыдущийУстановилСтатус;
					ЗаписьРС.КоммитСогласования = ПредыдущийКоммитСогласования;
				КонецЕсли;	
				
				ЗаписьРС.Записать(Истина);
				
			КонецЦикла;	
			
			УдалитьДанныеПоМетаданнымКоторыеНеИзменялись(ДанныеВетки.Ссылка, УжеЗагруженныеИзменения);
			ЗафиксироватьКоммитНаКоторыйБылаЗагрузкаМетаданных(ДанныеВетки.Ссылка, ИнформацияОВетке.commit.id);
			
			Для Каждого Элем Из ОтветственныеДляУведомленияНовыйОбъект Цикл
				ОтветственныеДляУведомленияИзменениеОбъекта.Вставить(Элем.Ключ, Истина);
			КонецЦикла;
			
			Попытка
				ДанныеОповещения = Новый Структура;
				ДанныеОповещения.Вставить("Проект", Проект);
				ДанныеОповещения.Вставить("ОтветственныеДляУведомленияИзменениеОбъекта", ОтветственныеДляУведомленияИзменениеОбъекта);
				ДанныеОповещения.Вставить("ДанныеВетки", ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ДанныеВетки));
				ДанныеОповещения.Вставить("ЭтоНовыйОбъект", Ложь);
				ОповещенияОСогласованииИзмененийОМ.Добавить(ДанныеОповещения);
			Исключение
				ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
											УровеньЖурналаРегистрации.Ошибка,
											,
											ДанныеВетки.Ссылка,
											ОписаниеОшибки());
			КонецПопытки;
										
			
			Попытка
				ДоплнитьОМПоКоторымНеУказанОтветственный(ДанныеВетки.Ссылка, ОбъектыМетаданныхГдеНеУказанОтветственный);
			Исключение
				ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
											УровеньЖурналаРегистрации.Ошибка,
											,
											ДанныеВетки.Ссылка,
											ОписаниеОшибки());
			КонецПопытки;
			
			Если ОбъектыМетаданныхГдеНеУказанОтветственный.Количество() > 0 Тогда
				Попытка
					КогоОповестить = ДанныеВетки.Ответственный;
					Если НЕ ЗначениеЗаполнено(КогоОповестить) Тогда
						КогоОповестить = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеВетки.Проект, "Ответственный");
					КонецЕсли;	
					ВыполнитьОповещениеЕстьОбъектыМетаданныхГдеНеУказанОтветственный(Проект, КогоОповестить, ДанныеВетки);
				Исключение
					ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
												УровеньЖурналаРегистрации.Ошибка,
												,
												ДанныеВетки.Ссылка,
												ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;
	
	ДопПараметры.Вставить("ОповещенияОСогласованииИзмененийОМ", ОповещенияОСогласованииИзмененийОМ);
	
	
КонецПроцедуры

Функция УжеЗагруженныеИзменения(Ветка)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмененияВВетках.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ИзмененияВВетках.ПодчиненныйОбъект КАК ПодчиненныйОбъект
		|ИЗ
		|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|ГДЕ
		|	ИзмененияВВетках.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("ОбъектМетаданных,ПодчиненныйОбъект");
	Результат.Колонки.Добавить("ЕстьИзменения", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;

КонецФункции	

Процедура УдалитьДанныеПоМетаданнымКоторыеНеИзменялись(Ветка, УжеЗагруженныеИзменения)
	
	Если УжеЗагруженныеИзменения = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаУжеЗагруженныеИзменения Из УжеЗагруженныеИзменения Цикл
		Если СтрокаУжеЗагруженныеИзменения.ЕстьИзменения Тогда
			Продолжить;
		КонецЕсли;	
		
		//Надо удалить записи из регистра по метаданным, которые были загружены ранее, но сейчас по ним изменений нет.		
		УдалитьИзменениеПоОбъектуМетаданных(
			Ветка, СтрокаУжеЗагруженныеИзменения.ОбъектМетаданных, СтрокаУжеЗагруженныеИзменения.ПодчиненныйОбъект);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УдалитьИзменениеПоОбъектуМетаданных(Ветка, ОбъектМетаданных, ПодчиненныйОбъект)
	
	НаборЗаписей = РегистрыСведений.ИзмененияВВетках.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Ветка.Установить(Ветка);
	НаборЗаписей.Отбор.ОбъектМетаданных.Установить(ОбъектМетаданных);
	НаборЗаписей.Отбор.ПодчиненныйОбъект.Установить(ПодчиненныйОбъект);
	Попытка
		НаборЗаписей.Записать(Истина);
	Исключение
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВеткахУдалениеЗаписи",
									УровеньЖурналаРегистрации.Ошибка,
									,
									Ветка,
									ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ЕстьИзмененияПоТекстовомуОписаниюGit(Стр1, Стр2)
	МассивСтрок1 = СтрРазделить(Стр1, Символы.ПС);
	МассивСтрок2 = СтрРазделить(Стр2, Символы.ПС);
	
	Если МассивСтрок1.Количество() <> МассивСтрок2.Количество() Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Для Сч = 0 По МассивСтрок1.Количество()-1 Цикл
		
		Если Лев(МассивСтрок1[Сч],5) = "index" И Найти(МассивСтрок1[Сч], "..") > 0
			И Лев(МассивСтрок2[Сч],5) = "index" И Найти(МассивСтрок2[Сч], "..") > 0			
			Тогда
			Продолжить;
		КонецЕсли;	   
		
		Если Лев(МассивСтрок1[Сч], 2) = "@@" И Лев(МассивСтрок2[Сч], 2) = "@@" Тогда
			Продолжить;
		КонецЕсли;	
		
		Если МассивСтрок1[Сч] <> МассивСтрок2[Сч] Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	           
	
	Возврат Ложь;
	
КонецФункции	

Функция ТекстИзмененийМетаданныхИзХранилища(Параметры)
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало получения файла изменений'"));
	
	ТекстОбновленияКонфигурацииБД = "";
	Если Параметры.Свойство("ОбновлятьКонфигурациюБазыДанных") И Параметры.ОбновлятьКонфигурациюБазыДанных Тогда
		ТекстОбновленияКонфигурацииБД = "/UpdateDBCfg";
	КонецЕсли;

	ДанныеСостояниеЗагрузкиМетаданныхВВетках = ДанныеПоследнейЗагрузкиМетаданныхПоВетке(Параметры.ВеткаИсточник);
	Если ДанныеСостояниеЗагрузкиМетаданныхВВетках = Неопределено Тогда
		ПерваяВерсия = 1;
	Иначе	
		ПерваяВерсия = Число(ДанныеСостояниеЗагрузкиМетаданныхВВетках) + 1;
	КонецЕсли;	
	
	ПоследняяВерсияИзХранилища = НомерПоследнейВерсииИзХранилища(Параметры, ПерваяВерсия);
	Если Число(ПоследняяВерсияИзХранилища) <= Число(ПерваяВерсия) Тогда
		//Значит не было новых помещений в хранилище
		Возврат Неопределено;
	КонецЕсли;	           
	
	Параметры.Вставить("ПоследняяВерсияИзХранилища", ПоследняяВерсияИзХранилища);
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
				| %СтрокаСоединенияИБДляЗагрузкиМетаданных% 
				| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
				| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
				| /CompareCfg -FirstConfigurationType ConfigurationRepository -FirstVersion ""%ПерваяВерсия%"" 
				| -SecondConfigurationType MainConfiguration -MappingRule ByObjectIDs -ReportType Full 
				| -IncludeChangedObjects -IncludeAddedObjects -IncludeDeletedObjects -ReportFormat txt -ReportFile ""%ReportFile%""
				|";

	ИмяФайлИзменений = ПолучитьИмяВременногоФайла("txt");
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%", Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%", Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%", Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%", Параметры.КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ТекстОбновленияКонфигурацииБД%", ТекстОбновленияКонфигурацииБД);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПерваяВерсия%", ПерваяВерсия);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ReportFile%", ИмяФайлИзменений);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание получения файла изменений'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
	
	Файл = Новый Файл(ИмяФайлИзменений);
	
	// Проверить успешность выполнения
	Если КодВозврата <> 0 ИЛИ НЕ Файл.Существует() Тогда
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При загрузке метаданных возникли ошибки (см. Журнал регистрации).
			|Получение файла изменений закончилось неудачей.'");
	КонецЕсли; 
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлИзменений, "UTF-16LE");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	Параметры.Вставить("ИмяФайлИзмененийМетаданных", ИмяФайлИзменений);
	
	Возврат ТекстФайла;
	
КонецФункции

Процедура ЗагрузитьИзмененияМетаданныхИзХранилищаПоВетке(Параметры)
	
	ТекстФайла = Параметры.ТекстИзмененийМетаданных;
	Если ТекстФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОбъектыМетаданных = ТаблицаОбъектыМетаданных();
	Если Параметры.Свойство("ИмяФайлИзмененийМетаданных") Тогда
		ИмяФайлИзменений = Параметры.ИмяФайлИзмененийМетаданных;
	Иначе
		ИмяФайлИзменений = Неопределено;
	КонецЕсли;	
	
	Отказ = Ложь;
	
	ЗагрузитьИзмененияМетаданныхИзТекста(ОбъектыМетаданных, Параметры.ВеткаИсточник, ТекстФайла, ИмяФайлИзменений, Отказ, Параметры);	
	
	ТолькоИзменениеИменОбъектов = Ложь;
	Если Параметры.Свойство("ТолькоИзменениеИменОбъектов") Тогда
		ТолькоИзменениеИменОбъектов = Параметры.ТолькоИзменениеИменОбъектов;
	КонецЕсли;	
	
	Если ТолькоИзменениеИменОбъектов Тогда
		ПереименованныеОбъекты = Новый Соответствие;
		СтрокаПоиска = НРег("- Имя - Различаются значения");
		Для Каждого СтрокаОбъектыМетаданных Из ОбъектыМетаданных Цикл
			Поз = Найти(НРег(СтрокаОбъектыМетаданных.ОписаниеИзмененийИзОтчетаОСравнении), СтрокаПоиска);
			Если Поз > 0 Тогда
				МассивСтрокИзменений = СтрРазделить(СтрокаОбъектыМетаданных.ОписаниеИзмененийИзОтчетаОСравнении, Символы.ПС);
				Для Сч = 0 По МассивСтрокИзменений.Количество() - 1 Цикл
					Если Найти(НРег(МассивСтрокИзменений[Сч]), СтрокаПоиска) > 0 Тогда
						Если Сч = 0 Тогда
							ПереименованныеОбъекты.Вставить(СтрокаОбъектыМетаданных.Гиперссылка,
								СтрокаОбъектыМетаданных.ОписаниеИзмененийИзОтчетаОСравнении);
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;
		Параметры.Вставить("ПереименованныеОбъекты", ПереименованныеОбъекты);
	Иначе	
		ЗаписатьИзмененияМетаданныхПолученныеИзХранилища(ОбъектыМетаданных, Параметры, Параметры.ПоследняяВерсияИзХранилища);
	КонецЕсли;	
	
КонецПроцедуры                         

Функция НомерПоследнейВерсииИзХранилища(Параметры, ПерваяВерсия)
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Начало получения номера последней версии из хранилища'"));
	
	ТекстОбновленияКонфигурацииБД = "";
	Если Параметры.Свойство("ОбновлятьКонфигурациюБазыДанных") И Параметры.ОбновлятьКонфигурациюБазыДанных Тогда
		ТекстОбновленияКонфигурацииБД = "/UpdateDBCfg";
	КонецЕсли;
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /WA- /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate 
				| %СтрокаСоединенияИБДляЗагрузкиМетаданных% 
				| /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"" 
				| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
				| /ConfigurationRepositoryReport ""%ReportFile%"" -NBegin ""%ПерваяВерсия%"" -ReportFormat txt 
				|";

	ИмяФайлИзменений = ПолучитьИмяВременногоФайла("txt");
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", Параметры.КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", Параметры.ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%", Параметры.СтрокаСоединенияИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%", Параметры.ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%", Параметры.ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%", Параметры.КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%", Параметры.ИмяФайлаРезультатов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ТекстОбновленияКонфигурацииБД%", ТекстОбновленияКонфигурацииБД);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПерваяВерсия%", ПерваяВерсия);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ReportFile%", ИмяФайлИзменений);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, Параметры.КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Окончание получения номера последней версии из хранилища'"), "Код возврата: "+?(КодВозврата = Неопределено, "Неопределено", КодВозврата));
	
	Файл = Новый Файл(ИмяФайлИзменений);
	
	// Проверить успешность выполнения
	Если КодВозврата <> 0 ИЛИ НЕ Файл.Существует() Тогда
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru = 'Ошибка выполнения пакетной операции'"), "", УровеньЖурналаРегистрации.Ошибка, Истина);
		ВызватьИсключение НСтр("ru = 'При загрузке метаданных возникли ошибки (см. Журнал регистрации).
			|Получение файла изменений закончилось неудачей.'");
	КонецЕсли;   
	
	Текст = Новый ЧтениеТекста;        
	
	Текст.Открыть(ИмяФайлИзменений, "UTF-8");
	ТекстФайла = Текст.Прочитать();
	Текст.Закрыть();
	
	ПоследняяВерсия = 1;
	Если ПерваяВерсия = 1 Тогда
		//Будет попытка определить первую версию из хранилища, т.к. она может начинаться не с 1
		ПерваяВерсия = Неопределено;
	КонецЕсли;	
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Если Лев(МассивСтрок[Сч], 7) = "Версия:" Тогда
			Стр = СокрЛП(Сред(МассивСтрок[Сч], 8));
			Попытка
				ПоследняяВерсия = Число(Стр);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'НомерПоследнейВерсииИзХранилища'"), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
			КонецПопытки;
			
			Если ПерваяВерсия = Неопределено Тогда
				Попытка
					ПерваяВерсия = Число(Стр);
				Исключение
					ЗаписьЖурналаРегистрации(НСтр("ru = 'НомерПоследнейВерсииИзХранилища'"), УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЦикла;	
	
	Если ПерваяВерсия = Неопределено Тогда
		ПерваяВерсия = 1;
	КонецЕсли;	
	
	Возврат ПоследняяВерсия;
	
КонецФункции	

Функция ОпределитьВидИзмененийПодсистемы(СтрокаТекст, МассивСтрок, ПризнакУдален, ПризнакНовый, ТекстПодсистема)

	Если МассивСтрок.Количество() > 1 Тогда
		СледующаяСтрока = МассивСтрок[1];
		ВидИзменений = ОпределитьВидИзменений(СледующаяСтрока, ПризнакУдален, ПризнакНовый);
		Пока ВидИзменений.Свойство("Строка") И Лев(ВидИзменений.Строка, СтрДлина(ТекстПодсистема)) = ТекстПодсистема  Цикл
			СтрокаТекст = ПолучитьСледующуюСтроку(МассивСтрок);
			СледующаяСтрока = МассивСтрок[1];
			ВидИзменений = ОпределитьВидИзменений(СледующаяСтрока, ПризнакУдален, ПризнакНовый);
		КонецЦикла; 
	КонецЕсли;

	Возврат ОпределитьВидИзменений(СтрокаТекст, ПризнакУдален, ПризнакНовый);
	
КонецФункции
 
Функция ОпределитьВидИзменений(Строка, ПризнакУдален, ПризнакНовый)
	
	СтруктураВозврата = Новый Структура();
	
	СтрокаДляОбработки = СокрЛП(Строка);
	
	ПрефиксИзменен = Найти(СтрокаДляОбработки, "- ***");
	ПрефиксУдален  = Найти(СтрокаДляОбработки, ПризнакУдален);
	ПрефиксНовый   = Найти(СтрокаДляОбработки, ПризнакНовый);
	
	Если ПрефиксИзменен=1 Тогда
		СтруктураВозврата.Вставить("Изменен", Истина);
		СтруктураВозврата.Вставить("Новый",   Ложь);
		СтруктураВозврата.Вставить("Удален",  Ложь);
		СтруктураВозврата.Вставить("Строка",  Сред(СтрокаДляОбработки, ПрефиксИзменен + 5));
	ИначеЕсли ПрефиксНовый=1 Тогда
		СтруктураВозврата.Вставить("Изменен", Ложь);
		СтруктураВозврата.Вставить("Новый",   Истина);
		СтруктураВозврата.Вставить("Удален",  Ложь);
		СтруктураВозврата.Вставить("Строка",  Сред(СтрокаДляОбработки, ПрефиксНовый + 5));
	ИначеЕсли ПрефиксУдален=1 Тогда
		СтруктураВозврата.Вставить("Изменен", Ложь);
		СтруктураВозврата.Вставить("Новый",   Ложь);
		СтруктураВозврата.Вставить("Удален",  Истина);
		СтруктураВозврата.Вставить("Строка",  Сред(СтрокаДляОбработки, ПрефиксУдален + 5));
	Иначе
		СтруктураВозврата.Вставить("Изменен", Ложь);
		СтруктураВозврата.Вставить("Новый",   Ложь);
		СтруктураВозврата.Вставить("Удален",  Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

Функция ОбработкаИзмененныхОбъектов(Строка,МассивСтрок,ТехническийПроектТекст, ТекстПодсистема, ОбъектыМетаданных)
	
	ЭтоПодсистема = Лев(Строка, СтрДлина(ТекстПодсистема)) = ТекстПодсистема;
	
	Запрос = Новый Запрос;
	
	Если ЭтоПодсистема Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подсистемы.Ссылка
		|ИЗ
		|	Справочник.Подсистемы КАК Подсистемы
		|ГДЕ
		|	Подсистемы.Наименование = &ИмяОбъектаМетаданных
		|	И Подсистемы.Владелец = &Проект";
		
		Запрос.УстановитьПараметр("ИмяОбъектаМетаданных", СтрЗаменить(Сред(Строка, СтрДлина(ТекстПодсистема) + 1), НСтр("ru = '.Подсистема.'"), "."));
	
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыМетаданных.Ссылка
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Наименование = &ИмяОбъектаМетаданных
		|	И ОбъектыМетаданных.Владелец = &Проект";
		
		Запрос.УстановитьПараметр("ИмяОбъектаМетаданных", Строка);
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Проект", ТехническийПроектТекст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбъектМетаданных = Выборка.Ссылка;
	Иначе
		ОбъектМетаданных = Справочники.ОбъектыМетаданных.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ОбъектМетаданных.Пустая() Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Гиперссылка", ОбъектМетаданных);
		СтрокиПоиска = ОбъектыМетаданных.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиПоиска.Количество() = 0 Тогда
			ОбъектМетаданныхСтрока = ОбъектыМетаданных.Добавить();
			ОбъектМетаданныхСтрока.Гиперссылка = ОбъектМетаданных;
			УстановитьИндексКартинки(ОбъектМетаданныхСтрока.Гиперссылка, ОбъектМетаданныхСтрока.ИндексКартинки);
		Иначе
			ОбъектМетаданныхСтрока = СтрокиПоиска[0];
		КонецЕсли;
		
		СтрокаТекста = ДобавитьОписание(ОбъектМетаданныхСтрока.ОписаниеИзмененийИзОтчетаОСравнении,МассивСтрок, ТекстПодсистема);
		
		ОбъектМетаданныхСтрока.Обработана = Истина;
		
	Иначе 
		
		СтрокаТекста = ПолучитьСледующуюСтроку(МассивСтрок);
		
	КонецЕсли;	
	
	Возврат СтрокаТекста;
	
КонецФункции

Функция ОбработкаНовыхУдаленныхОбъектов(Строка,МассивСтрок,ТехническийПроектТекст, ВидИзмененийНовый, ОбъектыМетаданных)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Наименование = &ИмяОбъектаМетаданных
	|	И ОбъектыМетаданных.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных", Строка);
	Запрос.УстановитьПараметр("Проект", ТехническийПроектТекст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбъектМетаданных = Выборка.Ссылка;
	Иначе
		ОбъектМетаданных = Справочники.ОбъектыМетаданных.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ОбъектМетаданных.Пустая() Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Гиперссылка", ОбъектМетаданных);
		СтрокиПоиска = ОбъектыМетаданных.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиПоиска.Количество() = 0 Тогда
			ОбъектМетаданныхСтрока = ОбъектыМетаданных.Добавить();
			ОбъектМетаданныхСтрока.Гиперссылка = ОбъектМетаданных;
			УстановитьИндексКартинки(ОбъектМетаданныхСтрока.Гиперссылка, ОбъектМетаданныхСтрока.ИндексКартинки);
		Иначе
			ОбъектМетаданныхСтрока = СтрокиПоиска[0];
		КонецЕсли;
		
		Если ВидИзмененийНовый Тогда
			ОбъектМетаданныхСтрока.ОписаниеИзмененийИзОтчетаОСравнении = НСтр("ru = 'Объект добавлен'");
		Иначе
			ОбъектМетаданныхСтрока.ОписаниеИзмененийИзОтчетаОСравнении = НСтр("ru = 'Объект удален'");
		КонецЕсли;
		
		ОбъектМетаданныхСтрока.Обработана = Истина;
		
	КонецЕсли;
	
	Возврат ПолучитьСледующуюСтроку(МассивСтрок);
	
КонецФункции

Функция ДобавитьОписание(ОписаниеИзменений = "",МассивСтрок, ТекстПодсистема)
	
	СтрокаТекста = ПолучитьСледующуюСтроку(МассивСтрок);
	
	Пока Найти(СтрокаТекста,Символы.Таб + Символы.Таб + Символы.Таб) = 1 Цикл
		
		ОписаниеИзменений = ОписаниеИзменений + СтрокаТекста + Символы.ПС;
		
		Если МассивСтрок.Количество() > 1 И Лев(СокрЛП(МассивСтрок[1]), СтрДлина(ТекстПодсистема) + 5) = "- ***" + ТекстПодсистема Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаТекста = ПолучитьСледующуюСтроку(МассивСтрок);
		
	КонецЦикла;
	
	ОписаниеИзменений = Обработки.ЗагрузкаСпискаИзмененийИзОтчетаОСравнении.УбратьТабуляциюВНачалеСтрок(ОписаниеИзменений);
	
	Возврат СтрокаТекста;
	
КонецФункции

Процедура УстановитьИндексКартинки(ОбъектМетаданных, ИндексКартинки)
	
	СоответствиеКартинок = РаботаСОбъектамиМетаданных.ПолучитьСоответствиеКартинок(ОбъектМетаданных);
	
	Индекс = СоответствиеКартинок.Получить(ОбъектМетаданных);
	Если Индекс <> Неопределено Тогда
		ИндексКартинки = Индекс;
	Иначе
		ИндексКартинки = 1000;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСледующуюСтроку(МассивСтрок)
	
	МассивСтрок.Удалить(0);
	
	Если МассивСтрок.Количество()>0 Тогда
		Возврат МассивСтрок[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ТаблицаОбъектыМетаданных()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомерСтрокиТаблицы");
	Тзн.Колонки.Добавить("Гиперссылка");
	Тзн.Колонки.Добавить("ОписаниеИзменений", Новый ОписаниеТипов("Строка"));
	Тзн.Колонки.Добавить("ОтладкаВыполнена", Новый ОписаниеТипов("Булево"));
	Тзн.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	Тзн.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	Тзн.Колонки.Добавить("ОписаниеИзмененийИзОтчетаОСравнении", Новый ОписаниеТипов("Строка"));
	Тзн.Колонки.Добавить("ЕстьСправка", Новый ОписаниеТипов("Булево"));
	Тзн.Колонки.Добавить("ИндексКартинкиИзмененияСправки", Новый ОписаниеТипов("Число"));
	Тзн.Колонки.Добавить("ИзменениеСправки");
	Возврат Тзн;
КонецФункции	

Процедура ЗаписатьИзмененияМетаданныхПолученныеИзХранилища(ОбъектыМетаданных, Параметры, ПоследняяВерсияИзХранилища)
	
	ДатаЗагрузки = ТекущаяДата();
	ОтветственныеДляУведомленияИзменениеОбъекта = Новый Соответствие;
	
	Ветка = Параметры.ВеткаИсточник;
	ДанныеВетки = ДанныеВеткиПоСсылке(Ветка);
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка,"Владелец");
	
	Если Параметры.Свойство("ПереименованныеОбъекты") Тогда
		Для Каждого СтрокаОбъектыМетаданных Из ОбъектыМетаданных Цикл
			ОбъектМетаданных = СтрокаОбъектыМетаданных.Гиперссылка;
			ДанныеОПереименовании = Параметры.ПереименованныеОбъекты[ОбъектМетаданных];
			Если ДанныеОПереименовании <> Неопределено Тогда
				Параметры.ПереименованныеОбъекты.Удалить(ОбъектМетаданных);
			КонецЕсли;	
		КонецЦикла;
		
		Для Каждого КлючЗначение Из Параметры.ПереименованныеОбъекты Цикл
			СтрокаОбъектыМетаданных = ОбъектыМетаданных.Добавить();
			СтрокаОбъектыМетаданных.Гиперссылка = КлючЗначение.Ключ;
			СтрокаОбъектыМетаданных.ОписаниеИзмененийИзОтчетаОСравнении = КлючЗначение.Значение;
		КонецЦикла;	
	КонецЕсли;	
	
	Для Каждого СтрокаОбъектыМетаданных Из ОбъектыМетаданных Цикл
		
		ПодробноеОписаниеИзменений = СтрокаОбъектыМетаданных.ОписаниеИзмененийИзОтчетаОСравнении;
		
		ЗаписьРС = РегистрыСведений.ИзмененияВВетках.СоздатьМенеджерЗаписи();		
		ЗаписьРС.Ветка = Ветка;
		ОбъектМетаданных = СтрокаОбъектыМетаданных.Гиперссылка;
		ЗаписьРС.ОбъектМетаданных = ОбъектМетаданных;
		ПредыдущееПодробноеОписаниеИзменений = ЗаписьРС.ПодробноеОписаниеИзменений;
		ЗаписьРС.Прочитать();
	
		ЗаписьРС.Ветка = Ветка;
		ЗаписьРС.ОбъектМетаданных = ОбъектМетаданных;
		ЗаписьРС.ДатаИзмененияСтатусаСогласования = ДатаЗагрузки;
		
		ДанныеМетаданногоСППР = ДанныеМетаданногоПоСсылке(ОбъектМетаданных);
		
		НадоСделатьУведомление = Ложь;
		ЗаписьРС.Согласующий = ДанныеМетаданногоСППР.Ответственный;
		Если ДанныеВетки.Ответственный = ДанныеМетаданногоСППР.Ответственный
			И ЗначениеЗаполнено(ДанныеМетаданногоСППР.Ответственный)
			И ЗначениеЗаполнено(ДанныеВетки.Ответственный)
			Тогда
			ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования;
		ИначеЕсли ДанныеМетаданногоСППР.СогласованиеИзменений = Перечисления.ВариантыСогласованияИзмененияВВетках.НеТребуется Тогда
			ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования;
		Иначе
			Если ЗначениеЗаполнено(ДанныеМетаданногоСППР.Ответственный) Тогда
				Если ДанныеМетаданногоСППР.СогласованиеИзменений = Перечисления.ВариантыСогласованияИзмененияВВетках.Требуется
					ИЛИ НЕ ЗначениеЗаполнено(ДанныеМетаданногоСППР.СогласованиеИзменений) Тогда
						ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования;
						НадоСделатьУведомление = Истина;
				КонецЕсли;	
			Иначе                                 
				ЗаписьРС.СтатусСогласования = Перечисления.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования;
			КонецЕсли;	
		КонецЕсли;	
		ЗаписьРС.УстановилСтатус = Неопределено;
		ЗаписьРС.КомментарийСогласования = Неопределено;
		
		Если ЗначениеЗаполнено(ПредыдущееПодробноеОписаниеИзменений)
			И НЕ ЕстьИзмененияПоТекстовомуОписаниюGit(ПредыдущееПодробноеОписаниеИзменений, ПодробноеОписаниеИзменений)
			Тогда
			// Значит, возможно, было слияние с веткой приемником где-то ранее и в реальности
			// по отношению к ветке приемнику новых изменений нет и не надо заново выполнять согласование.
			Продолжить;
		КонецЕсли;	
		
		Если НадоСделатьУведомление Тогда
			ОтветственныеДляУведомленияИзменениеОбъекта.Вставить(ДанныеМетаданногоСППР.Ответственный, Истина);
		КонецЕсли;	
		
		ЗаписьРС.ПодробноеОписаниеИзменений = ПодробноеОписаниеИзменений;
		
		Если СтрокаОбъектыМетаданных.ОписаниеИзмененийИзОтчетаОСравнении = "Объект добавлен" Тогда
			ЗаписьРС.ТипИзменения = Перечисления.ТипыИзмененийОбъектовМетаданных.Добавлен;
		ИначеЕсли СтрокаОбъектыМетаданных.ОписаниеИзмененийИзОтчетаОСравнении = "Объект удален" Тогда
			ЗаписьРС.ТипИзменения = Перечисления.ТипыИзмененийОбъектовМетаданных.Удален;
		Иначе	
			ЗаписьРС.ТипИзменения = Перечисления.ТипыИзмененийОбъектовМетаданных.Изменен;
		КонецЕсли;	
		
		ЗаписьРС.Записать(Истина);
	КонецЦикла;	
	
	ОтветственныеСПревышениемПорога = Новый Соответствие;
	ВыполнитьОповещениеОтветственныхПриИзмененииМетаданных(Проект, ОтветственныеДляУведомленияИзменениеОбъекта, ДанныеВетки, Ложь, ОтветственныеСПревышениемПорога);
	ЗафиксироватьКоммитНаКоторыйБылаЗагрузкаМетаданных(ДанныеВетки.Ссылка, XMLСтрока(ПоследняяВерсияИзХранилища));
	
КонецПроцедуры

Функция ДанныеМетаданногоПоСсылке(ОбъектМетаданных)
	
	Если ТипЗнч(ОбъектМетаданных) = Тип("СправочникСсылка.Подсистемы") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Подсистемы.Ссылка КАК Ссылка,
			|	Подсистемы.Ответственный КАК Ответственный,
			|	Подсистемы.СогласованиеИзменений КАК СогласованиеИзменений
			|ИЗ
			|	Справочник.Подсистемы КАК Подсистемы
			|ГДЕ
			|	Подсистемы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ОбъектМетаданных);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Структура = Новый Структура;
			Структура.Вставить("Ответственный", ВыборкаДетальныеЗаписи.Ответственный);
			Структура.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
			Структура.Вставить("СогласованиеИзменений", ВыборкаДетальныеЗаписи.СогласованиеИзменений);
			Возврат Структура;
		КонецЦикла;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыМетаданных.Ссылка КАК Ссылка,
		|	ОбъектыМетаданных.Ответственный КАК Ответственный,
		|	ОбъектыМетаданных.СогласованиеИзменений КАК СогласованиеИзменений
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ОбъектМетаданных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		Структура = Новый Структура;
		Структура.Вставить("Ответственный", ВыборкаДетальныеЗаписи.Ответственный);
		Структура.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		Структура.Вставить("СогласованиеИзменений", ВыборкаДетальныеЗаписи.СогласованиеИзменений);
		Возврат Структура;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

Функция ДанныеВеткиПоСсылке(Ветка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка,
		|	Ветки.Ответственный КАК Ответственный,
		|	Ветки.Наименование КАК Наименование,
		|	Ветки.Имя КАК Имя
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		Структура = Новый Структура;
		Структура.Вставить("Ответственный", ВыборкаДетальныеЗаписи.Ответственный);
		Структура.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		Структура.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Структура.Вставить("Имя", ВыборкаДетальныеЗаписи.Имя);
		Возврат Структура;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

Процедура ВыполнитьОповещениеОСогласованииИзмененийОМВНесколькихВетках(Проект, ОтветственныеДляУведомления)
	
	ТекстСообщения = НСтр("ru = 'Нужно согласовать изменения ОМ в нескольких ветках.'") + Символы.ПС 
		+ "e1cib/command/РегистрСведений.ИзмененияВВетках.Команда.ИзмененияВВетках";
	
	Если ОтветственныеДляУведомления.Количество() > 0 Тогда
		
		АвторСообщения = АвторСообщенияДляОповещений(Проект);
		
		Для Каждого КлючЗначение Из ОтветственныеДляУведомления Цикл
			
			КогоОповестить = Новый Массив;
			КогоОповестить.Добавить(КлючЗначение.Ключ);

			ТекстЗаписиЖР = СтрШаблон(
				НСтр("ru = 'Оповещение пользователя <%1> о согласовании изменений в нескольких ветках.'"), КлючЗначение.Ключ,);
			ЗаписьЖурналаРегистрации("ОповещениеОбИзмененииМетаданных",,,,ТекстЗаписиЖР);
			
			Тестирование.ДобавитьНеКонтекстноеСообщение(
				КогоОповестить,
				АвторСообщения,
				ТекущаяДата() - 24*60*60,
				ТекстСообщения,
				ТекстСообщения
				);
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОповещениеОтветственныхПриИзмененииМетаданных(Проект, ОтветственныеДляУведомления, ДанныеВетки, ЭтоНовыйОбъект, ОтветственныеСПревышениемПорога)
	
	Если ЭтоНовыйОбъект Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В ветке <%1> есть новые объекты метаданных, которые надо согласовать.'"), ДанныеВетки.Наименование);
	Иначе	
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В ветке <%1> есть изменения метаданных, которые надо согласовать.'"), ДанныеВетки.Наименование);
	КонецЕсли;
	
	КогоОповестить = Новый Массив;
	
	Если ОтветственныеДляУведомления.Количество() > 0 Тогда
		
		АвторСообщения = АвторСообщенияДляОповещений(Проект);
		
		Для Каждого КлючЗначениеОтветственный Из ОтветственныеДляУведомления Цикл
			
			Если НЕ ЗначениеЗаполнено(КлючЗначениеОтветственный.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтветственныеСПревышениемПорога[КлючЗначениеОтветственный.Ключ] <> Неопределено Тогда
				//Значит этот пользователь получит одно уведомление, что ему нужно в нескольких ветках согласовать изменение ОМ
				Продолжить;
			КонецЕсли;	
			
			ИмеющиесяСообщения = Тестирование.СобщенияПоОбъектуБезОтбораПоЗаголовку(
												 ДанныеВетки.Ссылка,
												 КлючЗначениеОтветственный.Ключ,
												 АвторСообщения,
												 ТекущаяДата() - 24*60*60,
												 ТекстСообщения);
			Если ИмеющиесяСообщения.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			КогоОповестить.Добавить(КлючЗначениеОтветственный.Ключ);
		КонецЦикла;
		
		Если КогоОповестить.Количество() > 0 Тогда
			ТекстЗаписиЖР = СтрШаблон(
				НСтр("ru = 'Оповещение <%1> пользователей от имени <%2> по ветке <%3> о согласовании изменений метаданных.'"),
					КогоОповестить.Количество(), АвторСообщения, ДанныеВетки.Наименование);
			ЗаписьЖурналаРегистрации("ОповещениеОбИзмененииМетаданных",,,ДанныеВетки.Ссылка,ТекстЗаписиЖР);
			
			Тестирование.ДобавитьСообщениеПоОбъекту(
				ДанныеВетки.Ссылка,
				КогоОповестить,
				АвторСообщения,
				ТекущаяДата() - 24*60*60,
				ТекстСообщения
				);
		Иначе		
			Если ЭтоНовыйОбъект Тогда
				ТекстЗаписиЖР = НСтр("ru = 'Нет пользователей для оповещения о согласовании новых объектов метаданных.'");
			Иначе
				ТекстЗаписиЖР = НСтр("ru = 'Нет пользователей для оповещения о согласовании изменений объектов метаданных.'");
			КонецЕсли;	
			ЗаписьЖурналаРегистрации("ОповещениеОбИзмененииМетаданных",,,ДанныеВетки.Ссылка,ТекстЗаписиЖР);
		КонецЕсли;	
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьОповещениеЕстьОбъектыМетаданныхГдеНеУказанОтветственный(Проект, Ответственный, ДанныеВетки)
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'В ветке <%1> есть метаданные, для которых надо указать ответственного.'"), ДанныеВетки.Наименование);
	
	КогоОповестить = Новый Массив;
	КогоОповестить.Добавить(Ответственный);
		
	АвторСообщения = АвторСообщенияДляОповещений(Проект);
	
	ТекстЗаписиЖР = СтрШаблон(
		НСтр("ru = 'Оповещение <%1> пользователей от имени <%2> по ветке <%3> о том, что есть метаданные, для которых надо указать ответственного.'"),
			КогоОповестить.Количество(), АвторСообщения, ДанныеВетки.Наименование);
	ЗаписьЖурналаРегистрации("ОповещениеЕстьОбъектыМетаданныхГдеНеУказанОтветственный",,,ДанныеВетки.Ссылка,ТекстЗаписиЖР);
	
	Тестирование.ДобавитьСообщениеПоОбъекту(
		ДанныеВетки.Ссылка,
		КогоОповестить,
		АвторСообщения,
		ТекущаяДата() - 24*60*60,
		ТекстСообщения
		);
		
КонецПроцедуры

Функция ДанныеТехПроектаПоВетке(Ветка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТехническиеПроекты.Ссылка КАК Ссылка,
		|	ТехническиеПроекты.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
		|ГДЕ
		|	ТехническиеПроекты.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат = Новый Структура;
		Результат.Вставить("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		Результат.Вставить("Ответственный", ВыборкаДетальныеЗаписи.Ответственный);
		Возврат Результат;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции	

Процедура ОповещениеПользователейОСогласованииОМЕстьИзмененияКоторыеНадоСогласовать(Проект, ДопПараметры)
	
	АвторСообщения = АвторСообщенияДляОповещений(Проект);	
	ДанныеДляОповещенийТребуетСогласования = ДанныеДляОповещенийОтветственныхТребуетСогласования(Проект);
	ОтветственныеСПревышениемПорога = Новый Соответствие;
	
	Если ДопПараметры.Свойство("ОповещенияОСогласованииИзмененийОМ") Тогда
		ОповещенияОСогласованииИзмененийОМ = ДопПараметры.ОповещенияОСогласованииИзмененийОМ;
		Порог = ЗначениеПорогаОдноОповещениеДляВсехСогласований();
		КоличествоВетокПоОтветственному = Новый Соответствие;
		Для Каждого ДанныеОповещения Из ОповещенияОСогласованииИзмененийОМ Цикл
			ОтветственныеДляУведомленияИзменениеОбъекта = ДанныеОповещения.ОтветственныеДляУведомленияИзменениеОбъекта;
			ДанныеВетки = ДанныеОповещения.ДанныеВетки;
			Для Каждого КлючЗначение Из ОтветственныеДляУведомленияИзменениеОбъекта Цикл
				Ответственный = КлючЗначение.Ключ;
				Если КоличествоВетокПоОтветственному[Ответственный] = Неопределено Тогда
					КоличествоВетокПоОтветственному.Вставить(Ответственный, Новый Соответствие);
				КонецЕсли;
				
				КоличествоВетокПоОтветственному[Ответственный].Вставить(ДанныеВетки.Ссылка, Истина);
			КонецЦикла;	
		КонецЦикла;
		
		Для Каждого Данные Из ДанныеДляОповещенийТребуетСогласования Цикл
			Ответственный = Данные.Согласующий;
			Если КоличествоВетокПоОтветственному[Ответственный] = Неопределено Тогда
				КоличествоВетокПоОтветственному.Вставить(Ответственный, Новый Соответствие);
			КонецЕсли;
			
			КоличествоВетокПоОтветственному[Ответственный].Вставить(Данные.Ветка, Истина);
		КонецЦикла;	
		
		Для Каждого КлючЗначение Из КоличествоВетокПоОтветственному Цикл
			КоличествоВетокДляСогласования = КлючЗначение.Значение.Количество();
			Если КоличествоВетокДляСогласования >= Порог Тогда
				ОтветственныеСПревышениемПорога.Вставить(КлючЗначение.Ключ, Истина);
				
				ТекстЗаписиЖР = СтрШаблон(
					НСтр("ru = 'Пользователь <%1> получит одно оповещение о согласовании ОМ для всех веток. Количество веток с изменениями ОМ: <%2>'"),
						КлючЗначение.Ключ, КоличествоВетокДляСогласования);
				ЗаписьЖурналаРегистрации("ОповещениеОбИзмененииМетаданных",,,, ТекстЗаписиЖР);
				
			Иначе	
				ТекстЗаписиЖР = СтрШаблон(
					НСтр("ru = 'Пользователь <%1> получит оповещение в каждой ветке о согласовании ОМ. Количество веток с изменениями ОМ: <%2>'"),
						КлючЗначение.Ключ, КоличествоВетокДляСогласования);
				ЗаписьЖурналаРегистрации("ОповещениеОбИзмененииМетаданных",,,, ТекстЗаписиЖР);
			КонецЕсли;	
		КонецЦикла;
		
		Попытка
			ВыполнитьОповещениеОтветственныхПриИзмененииМетаданных(Проект, ОтветственныеДляУведомленияИзменениеОбъекта, ДанныеВетки, Ложь, ОтветственныеСПревышениемПорога);
		Исключение
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДанныеВетки.Ссылка,
			ОписаниеОшибки());
		КонецПопытки;
		
		Попытка
			ВыполнитьОповещениеОСогласованииИзмененийОМВНесколькихВетках(Проект, ОтветственныеСПревышениемПорога);
		Исключение
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
			УровеньЖурналаРегистрации.Ошибка,
			,
			ДанныеВетки.Ссылка,
			ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
	
	ДанныеДляОповещения = Новый Соответствие;
		
	Для Каждого Данные Из ДанныеДляОповещенийТребуетСогласования Цикл
		Если ОтветственныеСПревышениемПорога[Данные.Согласующий] <> Неопределено Тогда
			//Значит этот пользователь получит одно уведомление, что ему нужно в нескольких ветках согласовать изменение ОМ
			Продолжить;
		КонецЕсли;	
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В ветке <%1> есть изменения метаданных, которые надо согласовать.'"), Данные.ВеткаНаименование);
			
		Попытка
			ИмеющиесяСообщения = Тестирование.СобщенияПоОбъектуБезОтбораПоЗаголовку(
												 Данные.Ветка,
												 Данные.Согласующий,
												 АвторСообщения,
												 ТекущаяДата() - 24*60*60,
												 ТекстСообщения);
		Исключение
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Ошибка,,Данные.Ветка,ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если ИмеющиесяСообщения.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ДанныеДляОповещения[Данные.Ветка] = Неопределено Тогда
			ДанныеВетки = Новый Структура;
			ДанныеВетки.Вставить("КогоОповестить", Новый Массив);
			ДанныеВетки.Вставить("ТекстСообщения", ТекстСообщения);
			ДанныеВетки.Вставить("Ветка", Данные.Ветка);
			ДанныеДляОповещения.Вставить(Данные.Ветка, ДанныеВетки);
		КонецЕсли;	
		
		ДанныеВетки = ДанныеДляОповещения[Данные.Ветка];
		ДанныеВетки.КогоОповестить.Добавить(Данные.Согласующий);
		
		ОМТребующиеСогласованияДляПовторногоОповещения = ОМТребующиеСогласованияДляПовторногоОповещения(Данные.Ветка, Данные.Согласующий);
		ТекстЗаписиЖР = СтрШаблон(
			НСтр("ru = 'Пользователь <%1> получит оповещение о просроченном согласовании ОМ:'"),Данные.Согласующий);
		ЗаписьЖурналаРегистрации("ОповещениеОбИзмененииМетаданных",,,Данные.Ветка,
			ТекстЗаписиЖР + Символы.ПС + ЗаписатьОбъектJSON(ОМТребующиеСогласованияДляПовторногоОповещения));
			
	КонецЦикла;
	
	Для Каждого Элем Из ДанныеДляОповещения Цикл
		
		КогоОповестить = Элем.Значение.КогоОповестить;
		
		Если КогоОповестить.Количество() > 0 Тогда
			ТекстСообщения = Элем.Значение.ТекстСообщения;
			Ветка = Элем.Значение.Ветка;
			
			//Отправляем сообщение без контроля на дубль, т.к. контроль был выше.
			Тестирование.ДобавитьСообщениеПоОбъекту(
				Ветка,
				КогоОповестить,
				АвторСообщения,
				ТекущаяДата() - 24*60*60,
				ТекстСообщения
				);
		КонецЕсли;	
		
	КонецЦикла;	
		
	ДанныеДляОповещенийНесогласовано = ДанныеДляОповещенийОтветственныхНесогласовано(Проект);
		
	Для Каждого Данные Из ДанныеДляОповещенийНесогласовано Цикл
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В ветке <%1> есть изменения метаданных, которые отклонил согласующий.'"), Данные.ВеткаНаименование);
			
		//Отправляем сообщение с контролем на дубль
		Тестирование.ДобавитьСообщениеПоОбъекту(
			Данные.Ветка,
			Данные.Ответственный,
			АвторСообщения,
			ТекущаяДата() - 24*60*60,
			ТекстСообщения,
			ТекстСообщения
			);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОповещениеПользователейОСогласованииОМЕстьОМГдеНеУказанОтветственный(Проект)
	
	АвторСообщения = АвторСообщенияДляОповещений(Проект);	
	
	ДанныеДляОповещенийТребуетСогласования = ДанныеДляОповещенийУОМНеУказанОтветственный(Проект);

	ДанныеДляОповещения = Новый Соответствие;
		
	Для Каждого Данные Из ДанныеДляОповещенийТребуетСогласования Цикл
		
		КогоОповестить = Данные.Ответственный;
		Если НЕ ЗначениеЗаполнено(КогоОповестить) Тогда
			КогоОповестить = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Ответственный");
		КонецЕсли;
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В ветке <%1> есть метаданные, для которых надо указать ответственного.'"), Данные.ВеткаНаименование);
			
		Попытка
			ИмеющиесяСообщения = Тестирование.СобщенияПоОбъектуБезОтбораПоЗаголовку(
												 Данные.Ветка,
												 КогоОповестить,
												 АвторСообщения,
												 ТекущаяДата() - 24*60*60,
												 ТекстСообщения);
		Исключение
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Ошибка,,Данные.Ветка,ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		Если ИмеющиесяСообщения.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ДанныеДляОповещения[Данные.Ветка] = Неопределено Тогда
			ДанныеВетки = Новый Структура;
			ДанныеВетки.Вставить("КогоОповестить", Новый Массив);
			ДанныеВетки.Вставить("ТекстСообщения", ТекстСообщения);
			ДанныеВетки.Вставить("Ветка", Данные.Ветка);
			ДанныеДляОповещения.Вставить(Данные.Ветка, ДанныеВетки);
		КонецЕсли;	
		
		ДанныеВетки = ДанныеДляОповещения[Данные.Ветка];
		ДанныеВетки.КогоОповестить.Добавить(КогоОповестить);	
			
	КонецЦикла;
	
	Для Каждого Элем Из ДанныеДляОповещения Цикл
		
		КогоОповестить = Элем.Значение.КогоОповестить;
		
		Если КогоОповестить.Количество() > 0 Тогда
			ТекстСообщения = Элем.Значение.ТекстСообщения;
			Ветка = Элем.Значение.Ветка;
			
			//Отправляем сообщение без контроля на дубль, т.к. контроль был выше.
			Тестирование.ДобавитьСообщениеПоОбъекту(
				Ветка,
				КогоОповестить,
				АвторСообщения,
				ТекущаяДата() - 24*60*60,
				ТекстСообщения
				);
		КонецЕсли;	
		
	КонецЦикла;	
		
	ДанныеДляОповещенийНесогласовано = ДанныеДляОповещенийОтветственныхНесогласовано(Проект);
		
	Для Каждого Данные Из ДанныеДляОповещенийНесогласовано Цикл
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'В ветке <%1> есть изменения метаданных, которые отклонил согласующий.'"), Данные.ВеткаНаименование);
			
		//Отправляем сообщение с контролем на дубль
		Тестирование.ДобавитьСообщениеПоОбъекту(
			Данные.Ветка,
			Данные.Ответственный,
			АвторСообщения,
			ТекущаяДата() - 24*60*60,
			ТекстСообщения,
			ТекстСообщения
			);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОповещениеПользователейОСогласованииОМ(Проект, ДопПараметры)
	
	ОповещениеПользователейОСогласованииОМЕстьИзмененияКоторыеНадоСогласовать(Проект, ДопПараметры);
	ОповещениеПользователейОСогласованииОМЕстьОМГдеНеУказанОтветственный(Проект);
	
КонецПроцедуры

Функция ДанныеДляОповещенийОтветственныхТребуетСогласования(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ветка,
		|	Ветки.Наименование КАК ВеткаНаименование,
		|	ИзмененияВВетках.Согласующий КАК Согласующий
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|		ПО (ИзмененияВВетках.Ветка = Ветки.Ссылка)
		|ГДЕ
		|	Ветки.Владелец = &Проект
		|	И Ветки.Статус = &Статус
		|	И ИзмененияВВетках.СтатусСогласования = &СтатусСогласования
		|
		|СГРУППИРОВАТЬ ПО
		|	Ветки.Ссылка,
		|	Ветки.Наименование,
		|	ИзмененияВВетках.Согласующий";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВеток.Тестируется);
	Запрос.УстановитьПараметр("СтатусСогласования", Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеДляОповещенийУОМНеУказанОтветственный(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ветка,
		|	Ветки.Наименование КАК ВеткаНаименование,
		|	Ветки.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|		ПО (ИзмененияВВетках.Ветка = Ветки.Ссылка)
		|ГДЕ
		|	Ветки.Владелец = &Проект
		|	И Ветки.Статус = &Статус
		|	И ИзмененияВВетках.ОбъектМетаданных.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Ветки.Ссылка,
		|	Ветки.Наименование";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВеток.Тестируется);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДанныеДляОповещенийОтветственныхНесогласовано(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ветка,
		|	Ветки.Наименование КАК ВеткаНаименование,
		|	ИзмененияВВетках.Ветка.Ответственный КАК Ответственный
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|		ПО (ИзмененияВВетках.Ветка = Ветки.Ссылка)
		|ГДЕ
		|	Ветки.Владелец = &Проект
		|	И Ветки.Статус = &Статус
		|	И ИзмененияВВетках.СтатусСогласования = &СтатусСогласования
		|
		|СГРУППИРОВАТЬ ПО
		|	Ветки.Ссылка,
		|	Ветки.Наименование,
		|	ИзмененияВВетках.Ветка.Ответственный";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВеток.Тестируется);
	Запрос.УстановитьПараметр("СтатусСогласования", Перечисления.СтатусыСогласованияИзмененийВВетках.НеСогласовано);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция АвторСообщенияДляОповещений(Проект)
	
	АвторСообщения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ПользовательАвторСообщенийСистемыВзаимодействия");
	Если НЕ ЗначениеЗаполнено(АвторСообщения) Тогда
		АвторСообщения = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Возврат АвторСообщения;
	
КонецФункции	

Функция ТипИзмененияОбъектаМетаданныхGit(ЗаписьРС)
	
	НрегСтр = НРег(ЗаписьРС.ПодробноеОписаниеИзменений);
	
	Если Найти(НрегСтр, "new file mode 100644") > 0 Тогда
		МассивСтрок = СтрРазделить(ЗаписьРС.ПодробноеОписаниеИзменений, Символы.ПС);
		НайденоСозданиеОМ = Ложь;
		Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
			Если Найти(МассивСтрок[Сч], "new file mode 100644") > 0 И МассивСтрок.ВГраница() >= (Сч + 3) Тогда
				ТекСтр = СокрЛП(МассивСтрок[Сч + 3]);
				Пока Лев(ТекСтр, 1) = "+" Цикл
					ТекСтр = СокрЛ(Сред(ТекСтр, 2));
				КонецЦикла;
				
				Если ЭтоФайлОМ(ТекСтр) Тогда
					НайденоСозданиеОМ = Истина;
					Прервать;
				ИначеЕсли ЭтоФайлМодуля(ТекСтр) Тогда
					Если ЗаписьРС.ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджера
						ИЛИ ЗаписьРС.ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджераЗначений
						ИЛИ ЗаписьРС.ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульНабораЗаписей
						ИЛИ ЗаписьРС.ПодчиненныйОбъект = Перечисления.ТипыМодулейОбъектовМетаданных.МодульОбъекта
						Тогда
							НайденоСозданиеОМ = Истина;
							Прервать;
					КонецЕсли;	
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;	
		
		Если НайденоСозданиеОМ Тогда
			Возврат Перечисления.ТипыИзмененийОбъектовМетаданных.Добавлен;
		Иначе
			Возврат Перечисления.ТипыИзмененийОбъектовМетаданных.Изменен;
		КонецЕсли;	
		
	ИначеЕсли Найти(НрегСтр, "deleted file mode 100644") > 0 Тогда
		МассивСтрок = СтрРазделить(ЗаписьРС.ПодробноеОписаниеИзменений, Символы.ПС);
		НайденоУдалениеОМ = Ложь;
		Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
			Если Найти(МассивСтрок[Сч], "deleted file mode 100644") > 0 И МассивСтрок.ВГраница() >= (Сч + 2) Тогда
				ТекСтр = СокрЛП(МассивСтрок[Сч + 2]);
				Пока Лев(ТекСтр, 1) = "-" Цикл
					ТекСтр = СокрЛ(Сред(ТекСтр, 2));
				КонецЦикла;
				
				Если ЭтоФайлОМ(ТекСтр) Тогда
					НайденоУдалениеОМ = Истина;
					Прервать;
				КонецЕсли;	
				
			КонецЕсли;	
		КонецЦикла;	
		
		Если НайденоУдалениеОМ Тогда
			Возврат Перечисления.ТипыИзмененийОбъектовМетаданных.Удален;
		Иначе
			Возврат Перечисления.ТипыИзмененийОбъектовМетаданных.Изменен;
		КонецЕсли;	
		
	Иначе
		Возврат Перечисления.ТипыИзмененийОбъектовМетаданных.Изменен;
	КонецЕсли;
	
КонецФункции	

Функция ЭтоФайлОМ(ИмяФайла)
	
	Если НРег(Прав(ИмяФайла, 4)) = ".mdo" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

Функция ЭтоФайлМодуля(ИмяФайла)
	
	Если НРег(Прав(ИмяФайла, 4)) = ".bsl" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

Процедура ЗагрузкаМетаданныхИзEDT(ДанныеВетки, Проект, КаталогGitРепозитория)
	//Надо загрузить метаданные из ветки
	ПараметрыЗагрузкиИзEDT = Новый Структура;
	ПараметрыЗагрузкиИзEDT.Вставить("Проект", Проект);
	ПараметрыЗагрузкиИзEDT.Вставить("КаталогGitРепозитория", КаталогGitРепозитория);
	ПараметрыЗагрузкиИзEDT.Вставить("ЭтоОсновноеХранилище", Ложь);
	ПараметрыЗагрузкиИзEDT.Вставить("ВеткаИсточник", ДанныеВетки.Ссылка);
	ПараметрыЗагрузкиИзEDT.Вставить("ИмяФайлаЛогов", ПолучитьИмяВременногоФайла("txt"));
	ПараметрыЗагрузкиИзEDT.Вставить("ИмяВетки", ДанныеВетки.Имя);
	
	Попытка
		ТекстСообщения =
			СтрШаблон(НСтр("ru = 'Загрузка изменений по метаданным для ветки <%1>.'"), ДанныеВетки.Имя);
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Информация,,ДанныеВетки.Ссылка,ТекстСообщения);
		ЗагрузкаМетаданныхEDT.ЗагрузитьМетаданныеИзEDT(ПараметрыЗагрузкиИзEDT);
	Исключение
		ТекстСообщения =
			СтрШаблон(НСтр("ru = 'Не получилось выполнить загрузку метаданных для ветки <%1>:'"), ДанныеВетки.Имя);
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
	КонецПопытки;
		
КонецПроцедуры

Функция ИмяПодсистемыИзИмениФайла(Знач ИмяФайла)
	
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
	МассивСтрок = СтрРазделить(ИмяФайла, "/");
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	  
	
	МассивСтрок.Удалить(МассивСтрок.Количество() - 1);
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;	  
	
	Файл = Новый Файл(ИмяФайла);
	Если НРег(Файл.Расширение) = ".html" Тогда
		Если НРег(МассивСтрок[МассивСтрок.Количество() - 1]) = "help" Тогда
			МассивСтрок.Удалить(МассивСтрок.Количество() - 1);
		КонецЕсли;	
	КонецЕсли;	
	
	Результат = Новый Массив;
	НашлиКлючевоеСлово = Ложь;
	Для Каждого Стр Из МассивСтрок Цикл 
		
		Если Стр = "Subsystems" Тогда
			НашлиКлючевоеСлово = Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ НашлиКлючевоеСлово Тогда
			Продолжить;
		КонецЕсли;	
		
		Результат.Добавить(Стр);
		
	КонецЦикла;	
	
	Возврат СтрСоединить(Результат, ".");
	
КонецФункции	

Функция ТекстИзмененийВРСИТекстИзмененийТекущийСовпададают(ИзмененияСтрока, ИзмененияМассив)
	
	Если НЕ ЗначениеЗаполнено(ИзмененияСтрока) Тогда
		Возврат Истина;
	КонецЕсли;	
	
	ДанныеИзСтроки = Новый Соответствие;
	ИзмененияФайла = Неопределено;
	ЕстьИмяФайла = Ложь;
	
	МассивСтрок = СтрРазделить(ИзмененияСтрока, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
		ТекСтр = МассивСтрок[Сч];
		Если Лев(ТекСтр, 13) = "new file mode" ИЛИ Лев(ТекСтр, 17) = "deleted file mode" Тогда
			Если Сч + 3 <= МассивСтрок.Количество() - 1 Тогда
				Стр1 = МассивСтрок[Сч + 2];
				Стр2 = МассивСтрок[Сч + 3];   
				
				СтрокаИмениФайла = ИмяФайлаИзДвухСтрокИзменений(Стр1, Стр2);
				СтрокаИмениФайла = СтрЗаменить(СтрокаИмениФайла, "/", "\");
				ИзмененияФайла = Новый Массив;
				ДанныеИзСтроки.Вставить(СтрокаИмениФайла, ИзмененияФайла);
				ИзмененияФайла.Добавить(ТекСтр);
				ЕстьИмяФайла = Истина;
				
				Продолжить;
			Иначе
				ИзмененияФайла = Новый Массив;
			КонецЕсли;	
		ИначеЕсли Лев(ТекСтр, 5) = "index" И Найти(ТекСтр, "..") > 0 Тогда
			Если Сч + 2 <= МассивСтрок.Количество() - 1 Тогда
				Стр1 = МассивСтрок[Сч + 1];
				Стр2 = МассивСтрок[Сч + 2];   
				
				СтрокаИмениФайла = ИмяФайлаИзДвухСтрокИзменений(Стр1, Стр2);
				СтрокаИмениФайла = СтрЗаменить(СтрокаИмениФайла, "/", "\");
				
				Если ДанныеИзСтроки[СтрокаИмениФайла] = Неопределено Тогда
					ИзмененияФайла = Новый Массив;
				Иначе
					ИзмененияФайла = ДанныеИзСтроки[СтрокаИмениФайла];
				КонецЕсли;	
				
				ДанныеИзСтроки.Вставить(СтрокаИмениФайла, ИзмененияФайла);
				ИзмененияФайла.Добавить(ТекСтр);
				ЕстьИмяФайла = Истина;
				
				Продолжить;
				
			Иначе
				ИзмененияФайла = Новый Массив;
			КонецЕсли;
			
		ИначеЕсли Лев(ТекСтр,16) = "similarity index" Тогда	
			Если Сч + 1 <= МассивСтрок.Количество() - 1 Тогда
				СтрокаИмениФайла = СокрЛ(Сред(МассивСтрок[Сч + 1], 12));
				ИзмененияФайла = Новый Массив;
				СтрокаИмениФайла = СтрЗаменить(СтрокаИмениФайла, "/", "\");
				ДанныеИзСтроки.Вставить(СтрокаИмениФайла, ИзмененияФайла);
				ИзмененияФайла.Добавить(ТекСтр);
				ЕстьИмяФайла = Истина;
				
				Продолжить;
				
			Иначе
				ИзмененияФайла = Новый Массив;
			КонецЕсли;	
		КонецЕсли;
		
		ИзмененияФайла.Добавить(ТекСтр);
		
	КонецЦикла;
	
	Если НЕ ЕстьИмяФайла Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ДанныеИзСтроки.Количество() <> ИзмененияМассив.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекДанныеИзСтроки Из ДанныеИзСтроки Цикл
		Если ИзмененияМассив[ТекДанныеИзСтроки.Ключ] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ТекИзмененияМассив Из ИзмененияМассив Цикл
		Если ДанныеИзСтроки[ТекИзмененияМассив.Ключ] = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ТекДанныеИзСтроки Из ДанныеИзСтроки Цикл
		Если СтрСоединить(ТекДанныеИзСтроки.Значение, Символы.ПС) <> ИзмененияМассив[ТекДанныеИзСтроки.Ключ] Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

Функция ИмяФайлаИзДвухСтрокИзменений(Стр1, Стр2)
	
	Если Найти(Стр1, "/dev/null") > 0 Тогда
		СтрокаИмениФайла = Стр2;
	Иначе	
		СтрокаИмениФайла = Стр1;
	КонецЕсли;
	
	СтрокаИмениФайла = СокрЛП(Сред(СтрокаИмениФайла, 4));
	Если Лев(СтрокаИмениФайла, 2) = "a/" ИЛИ Лев(СтрокаИмениФайла, 2) = "b/" Тогда
		СтрокаИмениФайла = Сред(СтрокаИмениФайла, 3);
	КонецЕсли;
	
	Возврат СтрокаИмениФайла;
	
КонецФункции	

Функция ЭтоПустыеИзмененияФайла(СтрокаИзменений)
	
	МассивСтрок = СтрРазделить(СокрП(СтрокаИзменений), Символы.ПС);
	Если МассивСтрок.Количество() <= 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДоплнитьОМПоКоторымНеУказанОтветственный(Ветка, ОбъектыМетаданныхГдеНеУказанОтветственный)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзмененияВВетках.ОбъектМетаданных КАК ОбъектМетаданных
		|ИЗ
		|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|ГДЕ
		|	ИзмененияВВетках.ОбъектМетаданных.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ИзмененияВВетках.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектыМетаданныхГдеНеУказанОтветственный.Вставить(ВыборкаДетальныеЗаписи.ОбъектМетаданных, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция ОМТребующиеСогласованияДляПовторногоОповещения(Ветка, Согласующий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзмененияВВетках.ОбъектМетаданных.Наименование КАК ОбъектМетаданныхНаименование
		|ИЗ
		|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|ГДЕ
		|	ИзмененияВВетках.Ветка = &Ветка
		|	И ИзмененияВВетках.Согласующий = &Согласующий
		|	И ИзмененияВВетках.СтатусСогласования = &СтатусСогласования";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	Запрос.УстановитьПараметр("Согласующий", Согласующий);
	Запрос.УстановитьПараметр("СтатусСогласования", Перечисления.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектМетаданныхНаименование");
	
КонецФункции	

Функция ЗаписатьОбъектJSON(ДанныеJSON) 

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ЗначениеПорогаОдноОповещениеДляВсехСогласований()
	
	Возврат 5;
	
КонецФункции	

#КонецОбласти

#КонецОбласти
