// Формирует диаграмму  для переданной ссылки
//
// Параметры:
//  Ссылка - ссылка на элемент справочника, для которого требуется сформировать диаграмму
//  Документ - табличный документ, в который выводится диаграмма
//
Процедура СформироватьERДиаграммуОбъекта(Ссылка, Документ) Экспорт
	
	Документ.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыполнитьЗапросДляОбъектаМетаДанных(Ссылка).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СплошнаяЛиния1       = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	СплошнаяЛиния2       = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	СплошнаяЛиния2Отступ = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2, Истина);
	Пунктир1       = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	
	ТекПозицияХ = 3;
	ТекПозицияУ = 2;
	
	ТаблицаОбъектовДанных = Новый ТаблицаЗначений;
	ТаблицаОбъектовДанных.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.ОбъектыМетаданных"));
	ТаблицаОбъектовДанных.Колонки.Добавить("Х1", Новый ОписаниеТипов("Число"));
	ТаблицаОбъектовДанных.Колонки.Добавить("Х2", Новый ОписаниеТипов("Число"));
	ТаблицаОбъектовДанных.Колонки.Добавить("У1", Новый ОписаниеТипов("Число"));
	ТаблицаОбъектовДанных.Колонки.Добавить("У2", Новый ОписаниеТипов("Число"));
	ТаблицаОбъектовДанных.Колонки.Добавить("СвязиОбъекта", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Пока Выборка.Следующий() Цикл
		Заголовок = Строка(Выборка.ТипОбъектаНаименование) + ":" + Выборка.СинонимОбъекта;
		ВывестиЭлемент(Заголовок, Выборка, Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам), Документ, ТекПозицияХ, ТекПозицияУ, ТаблицаОбъектовДанных, Выборка.ТипСсылки <> -1);
	КонецЦикла;
	
	ТаблицаГоризонтальныхСвязей_Сверху = Новый ТаблицаЗначений;
	ТаблицаГоризонтальныхСвязей_Сверху.Колонки.Добавить("У1", Новый ОписаниеТипов("Число"));
	ТаблицаГоризонтальныхСвязей_Сверху.Колонки.Добавить("У2", Новый ОписаниеТипов("Число"));
	ТаблицаГоризонтальныхСвязей_Сверху.Колонки.Добавить("Х1", Новый ОписаниеТипов("Число"));
	
	ТаблицаГоризонтальныхСвязей_Снизу = Новый ТаблицаЗначений;
	ТаблицаГоризонтальныхСвязей_Снизу.Колонки.Добавить("У1", Новый ОписаниеТипов("Число"));
	ТаблицаГоризонтальныхСвязей_Снизу.Колонки.Добавить("У2", Новый ОписаниеТипов("Число"));
	ТаблицаГоризонтальныхСвязей_Снизу.Колонки.Добавить("Х1", Новый ОписаниеТипов("Число"));
	
	ТаблицаВертикальныхСвязей_Сверху = Новый ТаблицаЗначений;
	ТаблицаВертикальныхСвязей_Сверху.Колонки.Добавить("Х1", Новый ОписаниеТипов("Число"));
	ТаблицаВертикальныхСвязей_Сверху.Колонки.Добавить("Х2", Новый ОписаниеТипов("Число"));
	ТаблицаВертикальныхСвязей_Сверху.Колонки.Добавить("У1", Новый ОписаниеТипов("Число"));
	
	ТаблицаВертикальныхСвязей_Снизу = Новый ТаблицаЗначений;
	ТаблицаВертикальныхСвязей_Снизу.Колонки.Добавить("Х1", Новый ОписаниеТипов("Число"));
	ТаблицаВертикальныхСвязей_Снизу.Колонки.Добавить("Х2", Новый ОписаниеТипов("Число"));
	ТаблицаВертикальныхСвязей_Снизу.Колонки.Добавить("У1", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТаблицаОбъектовДанных Цикл
		
		Документ.Область(Строка.Х1, Строка.У1, Строка.Х2 - 1, Строка.У2).Обвести(СплошнаяЛиния2, СплошнаяЛиния2, СплошнаяЛиния2, СплошнаяЛиния2);
		
		Для Каждого СтрокаСвязи Из Строка.СвязиОбъекта Цикл
			НайденнаяСтрока = ТаблицаОбъектовДанных.Найти(СтрокаСвязи.СсылкаНаОбъект, "Объект");
			Если НайденнаяСтрока <> Неопределено 
				И НайденнаяСтрока.У1 <> Строка.У1 Тогда
				
				Если НайденнаяСтрока.У1 > Строка.У1 Тогда
					
					ГоризонтальнаяСвязь_Сверху = ТаблицаГоризонтальныхСвязей_сверху.Добавить();
					ВертикальнаяСвязь_Сверху   = ТаблицаВертикальныхСвязей_Сверху.Добавить();
					
					ГоризонтальнаяСвязь_Сверху.У1 = Строка.У2;
					ГоризонтальнаяСвязь_Сверху.У2 = НайденнаяСтрока.У1;
					ГоризонтальнаяСвязь_Сверху.Х1 = СтрокаСвязи.ПозицияХ;
					
					ВертикальнаяСвязь_Сверху.Х1   = СтрокаСвязи.ПозицияХ;
					ВертикальнаяСвязь_Сверху.Х2   = НайденнаяСтрока.Х1;
					ВертикальнаяСвязь_Сверху.У1   = НайденнаяСтрока.У2;
					
					Документ.Область(ГоризонтальнаяСвязь_Сверху.Х1, ГоризонтальнаяСвязь_Сверху.У1, ГоризонтальнаяСвязь_Сверху.Х1, ГоризонтальнаяСвязь_Сверху.У2).Обвести(, , , СплошнаяЛиния2);
					
				ИначеЕсли НайденнаяСтрока.У1 < Строка.У1 Тогда
					
					ГоризонтальнаяСвязь_Снизу = ТаблицаГоризонтальныхСвязей_Снизу.Добавить();
					ВертикальнаяСвязь_Снизу   = ТаблицаВертикальныхСвязей_Снизу.Добавить();
					
					ГоризонтальнаяСвязь_Снизу.У1 = НайденнаяСтрока.У2;
					ГоризонтальнаяСвязь_Снизу.У2 = Строка.У1;
					ГоризонтальнаяСвязь_Снизу.Х1 = СтрокаСвязи.ПозицияХ;
					
					ВертикальнаяСвязь_Снизу.Х1   = НайденнаяСтрока.Х2;
					ВертикальнаяСвязь_Снизу.Х2   = СтрокаСвязи.ПозицияХ;
					ВертикальнаяСвязь_Снизу.У1   = НайденнаяСтрока.У2;
					
					Документ.Область(ГоризонтальнаяСвязь_Снизу.Х1, ГоризонтальнаяСвязь_Снизу.У1, ГоризонтальнаяСвязь_Снизу.Х1, ГоризонтальнаяСвязь_Снизу.У2 - 1).Обвести(, , , СплошнаяЛиния2);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаВертикальныхСвязей_Снизу.Сортировать("У1 ВОЗР, Х1 ВОЗР, Х2 УБЫВ");
	
	ТекКоординатаХ1 = 0;
	ТекКоординатаУ1 = 0;
	
	Для Каждого Связь Из ТаблицаВертикальныхСвязей_Снизу Цикл
		
		Если ТекКоординатаХ1 <> Связь.Х1 Тогда
			ТекКоординатаХ1 = Связь.Х1;
			ТекКоординатаУ1 = 0;
		КонецЕсли;
		
		Если ТекКоординатаУ1 <> Связь.У1 Тогда
			
			ТекКоординатаУ1 = Связь.У1;
			Документ.Область(Связь.Х1, Связь.У1, Связь.Х2, Связь.У1).Обвести(СплошнаяЛиния2);
			
			Для Каждого ГоризонтальнаяСвязь Из ТаблицаГоризонтальныхСвязей_Снизу Цикл
				
				Если ГоризонтальнаяСвязь.Х1 > Связь.Х1 И ГоризонтальнаяСвязь.Х1 < Связь.Х2 
					И Связь.У1 > ГоризонтальнаяСвязь.У1 И Связь.У1 < ГоризонтальнаяСвязь.У2 Тогда
					Документ.Область(ГоризонтальнаяСвязь.Х1, Связь.У1, ГоризонтальнаяСвязь.Х1, Связь.У1).Обвести(СплошнаяЛиния2Отступ, , ,СплошнаяЛиния2);
					Документ.Область(ГоризонтальнаяСвязь.Х1 + 1, Связь.У1, ГоризонтальнаяСвязь.Х1 + 1, Связь.У1).Обвести();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Документ.Область(Связь.Х2, Связь.У1, Связь.Х2, Связь.У1).Обвести(СплошнаяЛиния2, , , СплошнаяЛиния2);
		
	КонецЦикла;
	
	ТекКоординатаУ1 = 0;
	ТаблицаВертикальныхСвязей_Сверху.Сортировать("У1 ВОЗР, Х1 ВОЗР");
	
	Для Каждого Связь Из ТаблицаВертикальныхСвязей_Сверху Цикл
		
		Если ТекКоординатаУ1 <> Связь.У1 Тогда
			
			ТекКоординатаУ1 = Связь.У1;
			Документ.Область(Связь.Х1 + 1, Связь.У1, Связь.Х2 - 1, Связь.У1).Обвести(СплошнаяЛиния2);
			
			Для Каждого ГоризонтальнаяСвязь Из ТаблицаГоризонтальныхСвязей_Сверху Цикл
				
				Если ГоризонтальнаяСвязь.Х1 > Связь.Х1 И ГоризонтальнаяСвязь.Х1 < Связь.Х2 
					И Связь.У1 > ГоризонтальнаяСвязь.У1 И Связь.У1 < ГоризонтальнаяСвязь.У2 Тогда
					Документ.Область(ГоризонтальнаяСвязь.Х1, Связь.У1, ГоризонтальнаяСвязь.Х1, Связь.У1).Обвести(СплошнаяЛиния2Отступ, , ,СплошнаяЛиния2);
					Документ.Область(ГоризонтальнаяСвязь.Х1 + 1, Связь.У1, ГоризонтальнаяСвязь.Х1 + 1, Связь.У1).Обвести();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Документ.Область(Связь.Х1 + 1, Связь.У1 - 1, Связь.Х1 + 1, Связь.У1 - 1).Обвести(, СплошнаяЛиния2, СплошнаяЛиния2);
		
	КонецЦикла;
	
	НастроитьДиаграммуОбъекта(Документ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫВОДА ER-ДИАГРАММЫ.

// Функция возвращает результат запроса,
// который собирает сведения для построения диаграммы
// для объекта метаданных переданного в виде ссылки
Функция ВыполнитьЗапросДляОбъектаМетаданных(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутреннийЗапрос.Объект КАК Объект,
	|	СУММА(ВнутреннийЗапрос.ТипСсылки) КАК ТипСсылки,
	|	ВнутреннийЗапрос.ОсновнойЭлемент КАК ОсновнойЭлемент
	|ПОМЕСТИТЬ ТаблицаОбъектовМетаданных
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОбъектыМетаданных.Ссылка КАК Объект,
	|		-1 КАК ТипСсылки,
	|		ЛОЖЬ КАК ОсновнойЭлемент
	|	ИЗ
	|		Справочник.РеквизитыОбъектовМетаданных.ТипыЗначенияРеквизита КАК РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|				ПО РеквизитыОбъектовМетаданных.Владелец = ОбъектыМетаданных.Ссылка
	|			ПО РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка = РеквизитыОбъектовМетаданных.Ссылка
	|	ГДЕ
	|		ОбъектыМетаданных.ПометкаУдаления = ЛОЖЬ
	|		И РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.ТипЗначенияРеквизита = &ОбъектМетаданных
	|		И (НЕ РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка.ИгнорироватьСсылкиИзРеквизита)
	|		И (НЕ РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка.ПометкаУдаления)
	|		И (НЕ ОбъектыМетаданных.Родитель.Имя В (""Обработки"",""Отчеты"",""Перечисления""))
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОбъектыМетаданных.Ссылка,
	|		1,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.РеквизитыОбъектовМетаданных.ТипыЗначенияРеквизита КАК РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|			ПО РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.ТипЗначенияРеквизита = ОбъектыМетаданных.Ссылка
	|				И ((НЕ РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка.ИгнорироватьСсылкиИзРеквизита))
	|				И ((НЕ РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка.ПометкаУдаления))
	|	ГДЕ
	|		ОбъектыМетаданных.ПометкаУдаления = ЛОЖЬ
	|		И РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка.Владелец = &ОбъектМетаданных
	|		И (НЕ ОбъектыМетаданных.Родитель.Имя В (""Обработки"", ""Отчеты"", ""Перечисления""))
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		&ОбъектМетаданных,
	|		0,
	|		ИСТИНА) КАК ВнутреннийЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВнутреннийЗапрос.Объект,
	|	ВнутреннийЗапрос.ОсновнойЭлемент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъектовМетаданных.ОсновнойЭлемент КАК ОсновнойЭлемент,
	|	ТаблицаОбъектовМетаданных.Объект КАК Объект,
	|	ТаблицаОбъектовМетаданных.Объект.Имя КАК ИмяОбъекта,
	|	ТаблицаОбъектовМетаданных.Объект.Синоним КАК СинонимОбъекта,
	|	ТаблицаОбъектовМетаданных.ТипСсылки КАК ТипСсылки,
	|	РеквизитыОбъектовМетаданных.Ссылка КАК Реквизит,
	|	РеквизитыОбъектовМетаданных.Имя КАК ИмяРеквизита,
	|	РеквизитыОбъектовМетаданных.Синоним КАК СинонимРеквизита,
	|	ВЫБОР
	|		КОГДА ТаблицаОбъектовМетаданных.ОсновнойЭлемент
	|				ИЛИ РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.ТипЗначенияРеквизита = &ОбъектМетаданных
	|			ТОГДА РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.ТипЗначенияРеквизита
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ТипЗначенияРеквизита,
	|	ТипРеквизитов.Ссылка КАК ТипРеквизита,
	|	ТипРеквизитов.Имя КАК ТипРеквизитаИмя,
	|	ТипРеквизитов.Синоним КАК ТипРеквизитаСиноним,
	|	ТаблицаОбъектовМетаданных.Объект.Родитель КАК ТипОбъекта,
	|	ТаблицаОбъектовМетаданных.Объект.Родитель.Имя КАК ТипОбъектаИмя,
	|	ТаблицаОбъектовМетаданных.Объект.Родитель.Наименование КАК ТипОбъектаНаименование,
	|	ТаблицаОбъектовМетаданных.Объект.Родитель.Родитель КАК ТипОбъектаВидОбъекта,
	|	ТипРеквизитов.ВидРеквизита КАК ТипРеквизитаВидРеквизита,
	|	ВЫБОР
	|		КОГДА ТипРеквизитов.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.ТабличнаяЧасть)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакТабличнойЧасти
	|ИЗ
	|	ТаблицаОбъектовМетаданных КАК ТаблицаОбъектовМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеквизитыОбъектовМетаданных КАК ТипРеквизитов
	|			ПО (ТипРеквизитов.Ссылка = РеквизитыОбъектовМетаданных.Родитель)
	|		ПО ТаблицаОбъектовМетаданных.Объект = РеквизитыОбъектовМетаданных.Владелец
	|			И (РеквизитыОбъектовМетаданных.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеквизитыОбъектовМетаданных.ТипыЗначенияРеквизита КАК РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита
	|		ПО (РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка = РеквизитыОбъектовМетаданных.Ссылка)
	|			И (РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.ТипЗначенияРеквизита ССЫЛКА Справочник.ОбъектыМетаданных)
	|			И ((НЕ РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка.ИгнорироватьСсылкиИзРеквизита))
	|			И ((НЕ РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка.ПометкаУдаления))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипСсылки УБЫВ,
	|	ОсновнойЭлемент,
	|	ТипОбъекта,
	|	Объект,
	|	ПризнакТабличнойЧасти,
	|	ТипРеквизита,
	|	Реквизит
	|ИТОГИ
	|	МАКСИМУМ(ОсновнойЭлемент),
	|	МАКСИМУМ(ТипСсылки)
	|ПО
	|	Объект,
	|	ТипРеквизита,
	|	Реквизит
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ОбъектМетаданных", Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Возврат РезультатЗапроса[1];
	
КонецФункции

// Настройка отображения табличного документа
Процедура НастроитьДиаграммуОбъекта(Документ)
	
	Документ.ТолькоПросмотр        = Истина;
	Документ.ОриентацияСтраницы    = ОриентацияСтраницы.Ландшафт;
	Документ.ЭкземпляровНаСтранице = 1;
	Документ.ОтображатьСетку       = Ложь;
	Документ.ОтображатьЗаголовки   = Ложь;
	
	Документ.НижнийКолонтитул.Выводить          = Истина;
	Документ.НижнийКолонтитул.НачальнаяСтраница = 1;
	Документ.НижнийКолонтитул.ТекстСправа       = "Страница[&НомерСтраницы] из [&СтраницВсего]";
	
КонецПроцедуры

// Вывод элементов схемы.
Процедура ВывестиЭлемент(Заголовок, Выборка, ВыборкаОбъектов, Документ, ТекПозицияХ, ТекПозицияУ, ТаблицаОбъектовДанных, СмещатьПоВертикали)
	
	ТекОбъект = Выборка.Объект;
	
	ТекЗапись = ВернутьНовуюСтрокуТаблицыСвязей(ТекОбъект, ТекПозицияХ, ТекПозицияУ, ТаблицаОбъектовДанных);
	ВывестиЗаголовок(Заголовок, Документ, ТекПозицияХ, ТекПозицияУ, ТекОбъект);
	ЕстьТабличныеЧасти = Ложь;
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		Если ВыборкаОбъектов.ТипРеквизита = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаОбъектов.ТипРеквизитаВидРеквизита = Перечисления.ВидыРеквизитов.ТабличнаяЧасть Тогда
			
			Документ.Область(ТекЗапись.Х1 + 2, , ТекПозицияХ - 1).Сгруппировать();
			ТекЗапись.Х2 = ТекПозицияХ;
			ТекЗапись.У2 = ТекЗапись.У1 + 1;
			
			ТекПозицияХ = ТекПозицияХ + 2;
			ТекПозицияВыводаУ = ТекПозицияУ + 2;
			
			ТекЗапись = ВернутьНовуюСтрокуТаблицыСвязей(ВыборкаОБъектов.ТипРеквизита, ТекПозицияХ, ТекПозицияВыводаУ, ТаблицаОбъектовДанных);
			ВывестиЗаголовок("Табличная часть: " + ВыборкаОбъектов.ТипРеквизитаИмя, Документ, ТекПозицияХ, ТекПозицияВыводаУ, ,Новый Цвет(200, 200, 200));
			ДобавитьСвязьВТаблицуСвязей(ТекПозицияХ, ТекПозицияВыводаУ, ВыборкаОбъектов.Объект, Истина, ТекЗапись);
			ВывестиВТекущуюПозициюТекстСРасшифровкой(Документ, "Ссылка", ВыборкаОбъектов.Объект, Истина, 0, ТекПозицияХ, ТекПозицияВыводаУ);
			ВыборкаРеквизитов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаРеквизитов.Следующий() Цикл
				ВывестиРеквизит(ВыборкаРеквизитов, Документ, Ложь, ТекЗапись, ТекПозицияХ, ТекПозицияВыводаУ);
			КонецЦикла;
			ЕстьТабличныеЧасти = Истина;
		Иначе
			ВывестиВТекущуюПозициюТекстСРасшифровкой(Документ, ВыборкаОбъектов.ТипРеквизитаСиноним, Неопределено, Истина, 0, ТекПозицияХ, ТекПозицияУ, ?(Выборка.ОсновнойЭлемент, Новый Цвет(210, 240, 120), Неопределено));
			ВыборкаРеквизитов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаРеквизитов.Следующий() Цикл
				ВывестиРеквизит(ВыборкаРеквизитов, Документ, Ложь, ТекЗапись, ТекПозицияХ, ТекПозицияУ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Документ.Область(ТекЗапись.Х1 + 2, , ТекПозицияХ - 1).Сгруппировать();
	ТекЗапись.Х2 = ТекПозицияХ;
	ТекЗапись.У2 = ТекЗапись.У1 + 1;
	
	Если СмещатьПоВертикали Тогда
		ТекПозицияУ = ТекПозицияУ + ?(ЕстьТабличныеЧасти, 4, 2);
	КонецЕсли;
	
	ТекПозицияХ = ТекПозицияХ + 2;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ ДЛЯ ВЫВОДА ИНФОРМАЦИИ В ТАБЛИЧНЫЙ ДОКУМЕНТ

// Вывод заголовка для элемента ЕР-диаграммы
Процедура ВывестиЗаголовок(Строка, Документ, ТекПозицияХ, ТекПозицияУ, Расшифровка = Неопределено, ЦветФона = Неопределено)
	
	Если ЦветФона = Неопределено Тогда
		ЦветФона = Новый Цвет(225, 225, 250);
	КонецЕсли;
	
	СплошнаяЛиния2 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	Область = Документ.Область(ТекПозицияХ, ТекПозицияУ, ТекПозицияХ + 1, ТекПозицияУ + 1);
	Область.Объединить();
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	Область.РазмещениеТекста      = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Область.ЦветФона = ЦветФона;
	Область.Расшифровка = Расшифровка;
	Область.Обвести(СплошнаяЛиния2, СплошнаяЛиния2, СплошнаяЛиния2, СплошнаяЛиния2);
	Область.Текст = Строка;
	
	ТекПозицияХ = ТекПозицияХ + 2;
	
КонецПроцедуры

// Вывод реквизитов для элемента ЕР-даиграммы
Процедура ВывестиРеквизит(ВыборкаРеквизитов, Документ, СтандартныйРеквизит, ЗаписьВТаблицеСвязей, ТекПозицияХ, ТекПозицияУ)
	
	Если ВыборкаРеквизитов.Реквизит = NULL Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаТиповРеквизитов = ВыборкаРеквизитов.Выбрать();
	Пока ВыборкаТиповРеквизитов.Следующий() Цикл
		Если ВыборкаТиповРеквизитов.ТипЗначенияРеквизита <> NULL Тогда
			ДобавитьСвязьВТаблицуСвязей(ТекПозицияХ, ТекПозицияУ, ВыборкаТиповРеквизитов.ТипЗначенияРеквизита, ВыборкаРеквизитов.ИмяРеквизита = "Владелец" ИЛИ ВыборкаРеквизитов.ИмяРеквизита = "Регистратор", ЗаписьВТаблицеСвязей);
		КонецЕсли;
	КонецЦикла;
	
	ВывестиВТекущуюПозициюТекстСРасшифровкой(Документ
	, ВыборкаРеквизитов.ИмяРеквизита
	, ВыборкаРеквизитов.Реквизит
	, СтандартныйРеквизит
	,?(СтандартныйРеквизит, 0, 1)
	, ТекПозицияХ
	, ТекПозицияУ, ?(ВыборкаРеквизитов.ОсновнойЭлемент, Новый Цвет(210, 240, 120), Неопределено));
	
КонецПроцедуры

// Вывод текста с расшифровкой
Процедура ВывестиВТекущуюПозициюТекстСРасшифровкой(Документ, Текст, Расшифровка, ЖирныйШрифт, Отступ, ТекПозицияХ, ТекПозицияУ, Знач ЦветВыделения = Неопределено)
	
	Если ЦветВыделения = Неопределено Тогда
		ЦветВыделения = Новый Цвет;
	КонецЕсли;
	
	СплошнаяЛиния1 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	СплошнаяЛиния2 = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ВысотаЯчейки = 5;
	ШиринаЯчейки = 12;
	
	Область = Документ.Область(ТекПозицияХ, ТекПозицияУ, ТекПозицияХ + 1, ТекПозицияУ + 1);
	Область.Объединить();
	Область.ВысотаСтроки     = ВысотаЯчейки;
	Область.ШиринаКолонки    = ШиринаЯчейки;
	Область.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	Область.Текст            = Текст;
	Область.Отступ           = Отступ;
	Область.Расшифровка      = Расшифровка;
	ОБласть.ЦветФона         = ЦветВыделения;
	
	Если ЖирныйШрифт Тогда
		Область.Шрифт = Новый Шрифт(Область.Шрифт, , , Истина);
	КонецЕсли;
	
	Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	Область.ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
	Область.Обвести(СплошнаяЛиния2, ,СплошнаяЛиния2, СплошнаяЛиния1);
	
	ТекПозицияХ = ТекПозицияХ + 2;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЦЕЙ СВЯЗЕЙ

// Функция позиционируетсяна новую строку и возвращает ее
Функция ВернутьНовуюСтрокуТаблицыСвязей(ОбъектМетаданных, ТекПозицияХ, ТекПозицияУ, ТаблицаОбъектовДанных, ОсновнаяСвязь = Ложь)
	
	ТекЗапись = ТаблицаОбъектовДанных.Добавить();
	ТекЗапись.СвязиОбъекта = Новый ТаблицаЗначений;
	
	ТекЗапись.СвязиОбъекта.Колонки.Добавить("ПозицияХ");
	ТекЗапись.СвязиОбъекта.Колонки.ДОбавить("ПозицияУ");
	ТекЗапись.СвязиОбъекта.Колонки.Добавить("СсылкаНаОбъект");
	ТекЗапись.СвязиОбъекта.Колонки.Добавить("ОсновнаяСвязь");
	
	ТекЗапись.Х1            = ТекПозицияХ;
	ТекЗапись.У1            = ТекПозицияУ;
	ТекЗапись.Объект        = ОбъектМетаданных;
	
	Возврат ТекЗапись;
	
КонецФункции

// Процедура добавления новой связи в таблицу связей
Процедура ДобавитьСвязьВТаблицуСвязей(ПозицияХ, ПозицияУ, СсылкаНаОбъект, ОсновнаяСвязь = Ложь, ЗаписьВТаблицеСвязей)
	
	НоваяЗапись = ЗаписьВТаблицеСвязей.СвязиОбъекта.Добавить();
	НоваяЗапись.ПозицияХ       = ПозицияХ;
	НоваяЗапись.ПозицияУ       = ПозицияУ;
	НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
	НоваяЗапись.ОсновнаяСвязь  = ОсновнаяСвязь;
	
КонецПроцедуры