#Область СлужебныйПрограммныйИнтерфейс
// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию.
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена.
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена.
// 
Функция НастройкаОтборовНаУзле() Экспорт
	
	СтруктураТабличнойЧастиПроекты       = Новый Структура;
	СтруктураТабличнойЧастиПользователи  = Новый Структура;
	СтруктураТабличнойЧастиПапкиФайлов   = Новый Структура;
	СтруктураТабличнойЧастиГруппыДоступа = Новый Структура;
	СтруктураТабличнойЧастиРазделыПроектов = Новый Структура;

	
	СтруктураНастроек = Новый Структура;
	// Используется отбор по проектам.
	СтруктураНастроек.Вставить("ИспользоватьОтборПоПроектам",                    Истина);
	СтруктураНастроек.Вставить("ИспользоватьСкрытиеИменПользователей",           Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоПапкамФайлов",                Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоГруппамДоступа",              Ложь);
	СтруктураНастроек.Вставить("ИспользоватьОтборПоРазделамПроектов",            Ложь);
	СтруктураНастроек.Вставить("СинхронизироватьДополнительныеОтчетыИОбработки", Истина);
	СтруктураНастроек.Вставить("СинхронизироватьРезультатыПроверкиОбъектов",     Ложь);
	СтруктураНастроек.Вставить("СинхронизироватьДанныеУчетаВремени", 			 Ложь);

	
	СтруктураТабличнойЧастиПроекты.Вставить("Проект", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьЗадачи", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьОшибки", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьЦелевыеЗадачи", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьФункциональнуюМодель", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьТехническиеПроекты", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьИдеи", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьРегламенты", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("ТолькоПубликуемыеЦелевыеЗадачи", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("ТолькоПубликуемыеОшибки", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("ТолькоПубликуемыеТехническиеПроекты", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("ТолькоПубликуемыеИдеи", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("ТолькоПубликуемыеЗадачи", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("ТолькоПубликуемыеРегламенты", Новый Массив);
	СтруктураТабличнойЧастиПроекты.Вставить("СинхронизироватьКалендари", Новый Массив);



	СтруктураТабличнойЧастиПользователи.Вставить("Пользователь", Новый Массив);
	СтруктураТабличнойЧастиПапкиФайлов.Вставить("ПапкаФайлов",   Новый Массив);
	СтруктураТабличнойЧастиГруппыДоступа.Вставить("ГруппаДоступа", Новый Массив);
	СтруктураТабличнойЧастиРазделыПроектов.Вставить("РазделПроекта", Новый Массив);
	
	СтруктураНастроек.Вставить("Проекты",      СтруктураТабличнойЧастиПроекты);
	СтруктураНастроек.Вставить("Пользователи", СтруктураТабличнойЧастиПользователи);
	СтруктураНастроек.Вставить("ПапкиФайлов",  СтруктураТабличнойЧастиПапкиФайлов);
	СтруктураНастроек.Вставить("ГруппыДоступа",  СтруктураТабличнойЧастиГруппыДоступа);
	СтруктураНастроек.Вставить("РазделыПроектов",  СтруктураТабличнойЧастиРазделыПроектов);
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя.
// На основе установленных настроек отборов на узле. 
// Вызывается из модуля формы узла и из модуля менеджера плана обмена.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка - строка описания ограничений миграции данных для пользователя.
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле) Экспорт
	
	ТекстОписания = "";
	
	КоллекцияЗначений = НастройкаОтборовНаУзле.Проекты.Проект;
	ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
	ТекстОписания = ТекстОписания + НСтр("ru = 'Отправлять данные с фильтрацией по проекту: %ПредставлениеКоллекции%;'");
	ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоРазделамПроектов Тогда
		КоллекцияЗначений = НастройкаОтборовНаУзле.РазделыПроектов.РазделПроекта;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные с фильтрацией по разделам проектов: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Разделы проектов для фильтрации отправляемых данных не указаны;'");
	КонецЕсли;

	
	Если НастройкаОтборовНаУзле.ИспользоватьСкрытиеИменПользователей Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Пользователи.Пользователь;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять имена указанных пользователей: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять имена всех пользователей;'");
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоПапкамФайлов Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ПапкиФайлов.ПапкаФайлов;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные с отбором по папкам файлов: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные по всем папкам файлов;'");
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоГруппамДоступа Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ГруппыДоступа.ГруппаДоступа;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные с отбором по группам доступа: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
		
	Иначе
		
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Отправлять данные по всем группам доступа;'");
		
	КонецЕсли;
	
	// Список: по каким проектам какие данные синхронизируются.
	МассивПроектовЗадачи = Новый Массив;
	МассивПроектовЗадачиПубл = Новый Массив;
	МассивПроектовОшибки = Новый Массив;
	МассивПроектовОшибкиПубл = Новый Массив;
	МассивПроектовТП = Новый Массив;
	МассивПроектовТППубл = Новый Массив;
	МассивПроектовЦелевыеЗадачи = Новый Массив;
	МассивПроектовЦелевыеЗадачиПубл = Новый Массив;
	МассивПроектовИдеи = Новый Массив;
	МассивПроектовИдеиПубл = Новый Массив;
	МассивПроектовФМ = Новый Массив;
	МассивПроектовРегламенты = Новый Массив;
	МассивПроектовРегламентыПубл = Новый Массив;
	МассивПроектовКалендари = Новый Массив;


	Индекс = 0;
	НастройкаОтборовПроекты = НастройкаОтборовНаУзле.Проекты;
	Для Каждого ТекПроект Из НастройкаОтборовНаУзле.Проекты.Проект Цикл
		Если НастройкаОтборовПроекты.СинхронизироватьЗадачи[Индекс] Тогда
			Если НастройкаОтборовПроекты.ТолькоПубликуемыеЗадачи[Индекс] Тогда
				МассивПроектовЗадачиПубл.Добавить(ТекПроект);
			Иначе
				МассивПроектовЗадачи.Добавить(ТекПроект);
			КонецЕсли;
		КонецЕсли;
		Если НастройкаОтборовПроекты.СинхронизироватьОшибки[Индекс] Тогда
			Если НастройкаОтборовПроекты.ТолькоПубликуемыеОшибки[Индекс] Тогда
				МассивПроектовОшибкиПубл.Добавить(ТекПроект);
			Иначе
				МассивПроектовОшибки.Добавить(ТекПроект);
			КонецЕсли;
		КонецЕсли;
		Если НастройкаОтборовПроекты.СинхронизироватьТехническиеПроекты[Индекс] Тогда
			Если НастройкаОтборовПроекты.ТолькоПубликуемыеТехническиеПроекты[Индекс] Тогда
				МассивПроектовТППубл.Добавить(ТекПроект);
			Иначе
				МассивПроектовТП.Добавить(ТекПроект);
			КонецЕсли;
		КонецЕсли;
		Если НастройкаОтборовПроекты.СинхронизироватьЦелевыеЗадачи[Индекс] Тогда
			Если НастройкаОтборовПроекты.ТолькоПубликуемыеЦелевыеЗадачи[Индекс] Тогда
				МассивПроектовЦелевыеЗадачиПубл.Добавить(ТекПроект);
			Иначе
				МассивПроектовЦелевыеЗадачи.Добавить(ТекПроект);
			КонецЕсли;
		КонецЕсли;
		Если НастройкаОтборовПроекты.СинхронизироватьИдеи[Индекс] Тогда
			Если НастройкаОтборовПроекты.ТолькоПубликуемыеИдеи[Индекс] Тогда
				МассивПроектовИдеиПубл.Добавить(ТекПроект);
			Иначе
				МассивПроектовИдеи.Добавить(ТекПроект);
			КонецЕсли;
		КонецЕсли;
		Если НастройкаОтборовПроекты.СинхронизироватьФункциональнуюМодель[Индекс] Тогда
			МассивПроектовФМ.Добавить(ТекПроект);
		КонецЕсли;  
		Если НастройкаОтборовПроекты.СинхронизироватьРегламенты[Индекс] Тогда
			Если НастройкаОтборовПроекты.ТолькоПубликуемыеРегламенты[Индекс] Тогда
				МассивПроектовРегламентыПубл.Добавить(ТекПроект);
			Иначе
				МассивПроектовРегламенты.Добавить(ТекПроект);
			КонецЕсли;
		КонецЕсли;
		Если НастройкаОтборовПроекты.СинхронизироватьКалендари[Индекс] Тогда
			МассивПроектовКалендари.Добавить(ТекПроект);
		КонецЕсли;

		Индекс = Индекс + 1;
	КонецЦикла;
	// Про тех проекты.
	ДополнитьОписаниеДляПубликуемыхДанных(НСтр("ru='технические проекты'"), МассивПроектовТП, МассивПроектовТППубл, ТекстОписания);
	// Про задачи.
	ДополнитьОписаниеДляПубликуемыхДанных(НСтр("ru='задачи'"), МассивПроектовЗадачи, МассивПроектовЗадачиПубл, ТекстОписания);
	// Про ошибки.
	ДополнитьОписаниеДляПубликуемыхДанных(НСтр("ru='ошибки'"), МассивПроектовОшибки, МассивПроектовОшибкиПубл, ТекстОписания);
	// Про целевые задачи.
	ДополнитьОписаниеДляПубликуемыхДанных(НСтр("ru='целевые задачи'"), МассивПроектовЦелевыеЗадачи, МассивПроектовЦелевыеЗадачиПубл, ТекстОписания);
	// Про идеи.
	ДополнитьОписаниеДляПубликуемыхДанных(НСтр("ru='идеи'"), МассивПроектовИдеи, МассивПроектовИдеиПубл, ТекстОписания);
	// Про регламенты.
	ДополнитьОписаниеДляПубликуемыхДанных(НСтр("ru='регламенты'"), МассивПроектовРегламенты, МассивПроектовРегламентыПубл, ТекстОписания);
	
	ДополнитьОписаниеДляДанных(НСтр("ru='функциональную модель'"), МассивПроектовФМ, ТекстОписания);
	ДополнитьОписаниеДляДанных(НСтр("ru='календари'"), МассивПроектовКалендари, ТекстОписания);


	Если НастройкаОтборовНаУзле.СинхронизироватьДополнительныеОтчетыИОбработки Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Синхронизировать доп. отчеты и обработки;'");
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Не синхронизировать доп. отчеты и обработки;'");
	КонецЕсли;
	Если НастройкаОтборовНаУзле.СинхронизироватьРезультатыПроверкиОбъектов Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Синхронизировать результаты проверки объектов;'");
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Не синхронизировать результаты проверки объектов;'");
	КонецЕсли;
	Если НастройкаОтборовНаУзле.СинхронизироватьДанныеУчетаВремени Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Синхронизировать данные учета времени;'");
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Не синхронизировать данные учета времени;'");
	КонецЕсли;

	Возврат ТекстОписания;
	
КонецФункции

Процедура ДополнитьОписаниеДляПубликуемыхДанных(ПредставлениеОбъектаДанных, ПроектыБезОтбора, ПроектыПоПубликации, ТекстОписания)
	Если ПроектыБезОтбора.Количество() > 0 Или ПроектыПоПубликации.Количество() > 0 Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Синхронизировать %ПредставлениеОбъекта% по проектам'") + " ";
		Если ПроектыБезОтбора.Количество() > 0 Тогда
			ПредставлениеКоллекцииБезОтбора = СокращенноеПредставлениеКоллекцииЗначений(ПроектыБезОтбора);
			ТекстОписания = ТекстОписания + НСтр("ru = '%ПредставлениеКоллекцииБезОтбора% (без отбора по статусу публикации);'") + " ";
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекцииБезОтбора%", ПредставлениеКоллекцииБезОтбора);
		КонецЕсли;
		Если ПроектыПоПубликации.Количество() > 0 Тогда
			ПредставлениеКоллекцииПоПубликации = СокращенноеПредставлениеКоллекцииЗначений(ПроектыПоПубликации);
			ТекстОписания = ТекстОписания + НСтр("ru = '%ПредставлениеКоллекцииПоПубликации% (только публикуемые);'");
			ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекцииПоПубликации%", ПредставлениеКоллекцииПоПубликации);
		КонецЕсли; 
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Не синхронизировать %ПредставлениеОбъекта%;'");
	КонецЕсли;
	ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеОбъекта%", ПредставлениеОбъектаДанных);
КонецПроцедуры

Процедура ДополнитьОписаниеДляДанных(ПредставлениеОбъектаДанных, Проекты, ТекстОписания)
	Если Проекты.Количество() > 0 Тогда
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(Проекты);
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Синхронизировать %ПредставлениеОбъекта% по проектам: %ПредставлениеКоллекции%;'");
		ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеКоллекции%", ПредставлениеКоллекции);
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + НСтр("ru = 'Не синхронизировать %ПредставлениеОбъекта%;'");
	КонецЕсли;
	ТекстОписания = СтрЗаменить(ТекстОписания, "%ПредставлениеОбъекта%", ПредставлениеОбъектаДанных);

КонецПроцедуры

// Возвращает строковое представление отбора для отображения в таблице настроек.
// Параметры:
//  ИсточникЗаполнения - УзелОбменаОбъект - в случае формы узла, либо Управляемая форма в случае настройки узла.
//  ИмяТЧ - Строка - Имя табличной части плана обмена с данными отбора.
//  ИмяРеквизитаТЧ - Строка - Имя реквизита табличной части с данными отбора.
//  ИспользованиеОтбора - Булево - признак использования отбора в таблице настроек отбора.
// Возвращаемое значение:
//  Строка - представление отбора.
Функция СтроковоеПредставлениеОтбора(ИсточникЗаполнения, ИмяТЧ, ИмяРеквизитаТЧ, ИспользованиеОтбора) Экспорт
	Если НЕ ИспользованиеОтбора Или ИмяТЧ = "" Тогда
		Возврат "";
	ИначеЕсли ИсточникЗаполнения[ИмяТЧ].Количество() = 0 Тогда
		Возврат "<...>";
	КонецЕсли;
	ПредставлениеОтбора = "";
	Для Каждого СтрокаТЧ Из ИсточникЗаполнения[ИмяТЧ] Цикл
		ПредставлениеОтбора = ПредставлениеОтбора + СокрЛП(СтрокаТЧ[ИмяРеквизитаТЧ]) + ", ";
	КонецЦикла;
	ПредставлениеОтбора = Лев(ПредставлениеОтбора, СтрДлина(ПредставлениеОтбора)-2);
	Возврат ПредставлениеОтбора; 
КонецФункции
#КонецОбласти
#Область СлужебныеПроцедурыИФункции

// Возвращает сокращенное строковое представление коллекции значений.
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

#КонецОбласти