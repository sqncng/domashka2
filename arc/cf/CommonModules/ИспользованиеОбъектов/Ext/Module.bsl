#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьЗаписьОбновлениеОбъектов(ПараметрыОбновления, АдресРезультата) Экспорт
	
	ТекстПротокола = Новый ТекстовыйДокумент();
	
	НачатьТранзакцию();
	
	Попытка
		
		ПроектИсточник = ПараметрыОбновления.ПроектИсточник;
		ПроектПриемник = ПараметрыОбновления.ПроектПриемник;
		
		СписокВидовДоступа = ПараметрыОбновления.ВидыДоступа.ВыгрузитьКолонку("Источник");
		СписокПрофилей = ПараметрыОбновления.ПрофилиПользователей.ВыгрузитьКолонку("Источник");
		СписокФункций = СписокФункций(ПараметрыОбновления.Функции);
		
		НачальноеСравнение = ПараметрыОбновления.НачальноеСравнение;
		
		МетаданныеВидовДоступа = МетаданныеВидовДоступаИсточникаПриемника(ПроектИсточник, ПроектПриемник,
		                                                                  СписокВидовДоступа);
																		  
		ДанныеВидовДоступа = ДанныеОВидахДоступаИсточника(СписокВидовДоступа);
		ДанныеПрофилей     = ДанныеОПрофиляхПользователей(СписокПрофилей, ПроектПриемник);
		ДанныеОФункциях    = ДанныеОФункциях(СписокФункций, ПроектПриемник);
		
		ТаблицаСоответствияВидовДоступа = ТаблицаСоответствияОбъектов("СправочникСсылка.ВидыДоступа");
		ТаблицаСоответствияПрофилей = ТаблицаСоответствияОбъектов("СправочникСсылка.ПрофилиПользователей");
		ТаблицаСоответствияФункций = ТаблицаСоответствияОбъектов("СправочникСсылка.ФункцииСистемы");
		
		ДанныеСоответствияОбъектов = Новый Структура;
		ДанныеСоответствияОбъектов.Вставить("ВидыДоступа", ТаблицаСоответствияВидовДоступа);
		ДанныеСоответствияОбъектов.Вставить("Профили", ТаблицаСоответствияПрофилей);
		ДанныеСоответствияОбъектов.Вставить("Функции", ТаблицаСоответствияФункций);
		
		Если ПараметрыОбновления.НачальноеСравнение Тогда
			СоздатьПриемникиИспользуемыхОбъектов(ПараметрыОбновления, МетаданныеВидовДоступа, ДанныеВидовДоступа,
			                                     ДанныеПрофилей, ДанныеОФункциях, ДанныеСоответствияОбъектов, ТекстПротокола);
		Иначе
			ОбновитьПриемникиСоздатьНовые(ПараметрыОбновления, МетаданныеВидовДоступа, ДанныеВидовДоступа,
			                              ДанныеПрофилей, ДанныеОФункциях, ДанныеСоответствияОбъектов, ТекстПротокола);
		КонецЕсли;
		
		ЗаписатьИнформациюОбИспользованииОбъектов(ДанныеСоответствияОбъектов, ПроектПриемник, НачальноеСравнение);
		
		ПоместитьВоВременноеХранилище(ТекстПротокола, АдресРезультата);
		
	Исключение
		ПоместитьВоВременноеХранилище(ТекстПротокола, АдресРезультата);
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция СоздатьПриемникиИспользуемыхОбъектов(ПараметрыОбновления, МетаданныеВидовДоступа, ДанныеВидовДоступа, ДанныеПрофилей, ДанныеОФункциях, ДанныеСоответствияОбъектов, ТекстПротокола)
	
	ПроектИсточник = ПараметрыОбновления.ПроектИсточник;
	ПроектПриемник = ПараметрыОбновления.ПроектПриемник;
	
	ВидыДоступа          = ПараметрыОбновления.ВидыДоступа;
	ПрофилиПользователей = ПараметрыОбновления.ПрофилиПользователей;
	Функции              = ПараметрыОбновления.Функции;
	НачальноеСравнение   = ПараметрыОбновления.НачальноеСравнение;
	
	ТаблицаСоответствияВидовДоступа = ДанныеСоответствияОбъектов.ВидыДоступа;
	ТаблицаСоответствияПрофилей = ДанныеСоответствияОбъектов.Профили;
	ТаблицаСоответствияФункций = ДанныеСоответствияОбъектов.Функции;
	
	СоответствиеОбъектов = Новый Структура;
	
	СоответствиеВидовДоступа = СоздатьВидыДоступа(ВидыДоступа, ДанныеВидовДоступа, МетаданныеВидовДоступа,
	                                              ПроектПриемник, НачальноеСравнение, ТаблицаСоответствияВидовДоступа,
												  ТекстПротокола);
	
	СоответствиеПрофилей = СоздатьПрофилиПользователей(ПрофилиПользователей, ДанныеПрофилей, СоответствиеВидовДоступа,
	                                                   ПроектПриемник, НачальноеСравнение, ТаблицаСоответствияПрофилей,
													   ТекстПротокола);
	
	СоответствиеФункций = СоздатьФункции(Функции, ДанныеОФункциях, СоответствиеПрофилей, ПроектПриемник,
	                                     НачальноеСравнение, ТаблицаСоответствияФункций, ТекстПротокола);
										 
	ДанныеСоответствияОбъектов.Вставить("ВидыДоступа", ТаблицаСоответствияВидовДоступа);
	ДанныеСоответствияОбъектов.Вставить("Профили", ТаблицаСоответствияПрофилей);
	ДанныеСоответствияОбъектов.Вставить("Функции", ТаблицаСоответствияФункций);
	
	СоответствиеОбъектов.Вставить("ВидыДоступа", СоответствиеВидовДоступа);
	СоответствиеОбъектов.Вставить("Профили", СоответствиеПрофилей);
	СоответствиеОбъектов.Вставить("Функции", СоответствиеФункций);
	
	Возврат СоответствиеОбъектов;
	
КонецФункции

Процедура ОбновитьПриемникиСоздатьНовые(ПараметрыОбновления, МетаданныеВидовДоступа, ДанныеВидовДоступа, ДанныеПрофилей, ДанныеОФункциях, ДанныеСоответствияОбъектов, ТекстПротокола)
	
	ПроектИсточник = ПараметрыОбновления.ПроектИсточник;
	ПроектПриемник = ПараметрыОбновления.ПроектПриемник;
	
	ВидыДоступа          = ПараметрыОбновления.ВидыДоступа;
	ПрофилиПользователей = ПараметрыОбновления.ПрофилиПользователей;
	Функции              = ПараметрыОбновления.Функции;
	НачальноеСравнение   = ПараметрыОбновления.НачальноеСравнение;
	
	ТаблицаСоответствияВидовДоступа = ДанныеСоответствияОбъектов.ВидыДоступа;
	ТаблицаСоответствияПрофилей = ДанныеСоответствияОбъектов.Профили;
	ТаблицаСоответствияФункций = ДанныеСоответствияОбъектов.Функции;
	
	// Сначала отбираются и создаются новые объекты, которых еще нет в базе
	
	СоответствиеОбъектов =
	    СоздатьПриемникиИспользуемыхОбъектов(ПараметрыОбновления, МетаданныеВидовДоступа, ДанныеВидовДоступа,
	                                         ДанныеПрофилей, ДанныеоФункциях, ДанныеСоответствияОбъектов, ТекстПротокола);
										 
	// После создания новых объектов обновляются существующие
	
	ОбновитьВидыДоступа(ВидыДоступа, СоответствиеОбъектов.ВидыДоступа, МетаданныеВидовДоступа,
						ДанныеВидовДоступа, ПроектПриемник, ТаблицаСоответствияВидовДоступа, ТекстПротокола);
						
	ОбновитьПрофили(ПрофилиПользователей, ДанныеПрофилей, СоответствиеОбъектов.Профили,
	                СоответствиеОбъектов.ВидыДоступа, ПроектПриемник, ТаблицаСоответствияПрофилей, ТекстПротокола);
					
	ОбновитьФункции(Функции, ДанныеОФункциях, СоответствиеОбъектов.Функции,
	                СоответствиеОбъектов.Профили, ПроектПриемник, ТаблицаСоответствияФункций, ТекстПротокола);
					
	ДанныеСоответствияОбъектов.Вставить("ВидыДоступа", ТаблицаСоответствияВидовДоступа);
	ДанныеСоответствияОбъектов.Вставить("Профили", ТаблицаСоответствияПрофилей);
	ДанныеСоответствияОбъектов.Вставить("Функции", ТаблицаСоответствияФункций);
	ДанныеСоответствияОбъектов.Вставить("СоответствиеВидовДоступа", СоответствиеОбъектов.ВидыДоступа);
	ДанныеСоответствияОбъектов.Вставить("СоответствиеПрофилей", СоответствиеОбъектов.Профили);
	ДанныеСоответствияОбъектов.Вставить("СоответствиеФункций", СоответствиеОбъектов.Функции);
	
КонецПроцедуры
										 
Функция СоздатьВидыДоступа(ВидыДоступа, ДанныеВидовДоступа, МетаданныеВидовДоступа, ПроектПриемник, НачальноеСравнение, ТаблицаСоответствияВидовДоступа, ТекстПротокола)
	
	СоответствиеВидовДоступа = Новый Соответствие;
	
	ПредопределенныеВидыДоступа = Справочники.ВидыДоступа.ПредопределенныеВидыДоступа(ПроектПриемник);
	
	Для Каждого СтрокаТаблицы из ВидыДоступа Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
			СоответствиеВидовДоступа.Вставить(СтрокаТаблицы.Источник, СтрокаТаблицы.Приемник);
			
			ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, СтрокаТаблицы.Приемник,
			                                         ТаблицаСоответствияВидовДоступа, НачальноеСравнение);
		КонецЕсли;
		
		Если НЕ НачальноеСравнение
			И НЕ (СтрокаТаблицы.Отметка
				И СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений
			    И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Приемник)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ПравилоИспользования <> Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
			
			// Обработка используемых объектов
			СтруктураОтбора = Новый Структура("Ссылка", СтрокаТаблицы.Источник);
			СтрокиТаблицыДанных = ДанныеВидовДоступа.НайтиСтроки(СтруктураОтбора);
			СтрокаТаблицыДанных = СтрокиТаблицыДанных[0];
			
			СтруктураОтбора = Новый Структура("ВидДоступа", СтрокаТаблицыДанных.Ссылка);
			СтрокиТЧ = МетаданныеВидовДоступа.НайтиСтроки(СтруктураОтбора);
			
			ВидДоступаПриемник = Неопределено;
			
			Если Справочники.ВидыДоступа.ВидДоступаЯвляетсяПредопределенным(СтрокаТаблицыДанных.Имя) Тогда
				ВидДоступаПриемник = ПредопределенныеВидыДоступа.Получить(СтрокаТаблицыДанных.Имя);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВидДоступаПриемник) Тогда
				ВидДоступаПриемник = СоздатьВидДоступа(СтрокаТаблицыДанных, СтрокиТЧ, ПроектПриемник, ТекстПротокола);
			КонецЕсли;
			
			СоответствиеВидовДоступа.Вставить(СтрокаТаблицы.Источник, ВидДоступаПриемник);
			
			ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, ВидДоступаПриемник,
			                                         ТаблицаСоответствияВидовДоступа, НачальноеСравнение);
			
		Иначе
			// Неиспользуемые объекты
			ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, СтрокаТаблицы.Приемник,
			                                         ТаблицаСоответствияВидовДоступа, НачальноеСравнение);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СоответствиеВидовДоступа;
	
КонецФункции

Функция СоздатьПрофилиПользователей(ПрофилиПользователей, ДанныеПрофилейПользователей, СоответствиеВидовДоступа, ПроектПриемник, НачальноеСравнение, ТаблицаСоответствияПрофилей, ТекстПротокола)
	
	СоответствиеПрофилей = Новый Соответствие;
	СоответствиеНовыхПрофилей = Новый Соответствие;
	
	ТаблицаВидовДоступа = ДанныеПрофилейПользователей.ВидыДоступа;
	Роли = ДанныеПрофилейПользователей.Роли;
	ДанныеПрофилей = ДанныеПрофилейПользователей.ДанныеПрофилей;
	
	Для Каждого СтрокаТаблицы из ПрофилиПользователей Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
			СоответствиеПрофилей.Вставить(СтрокаТаблицы.Источник, СтрокаТаблицы.Приемник);
			
			ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, СтрокаТаблицы.Приемник,
			                                         ТаблицаСоответствияПрофилей, НачальноеСравнение);
		КонецЕсли;
		
		Если НЕ НачальноеСравнение
			И НЕ (СтрокаТаблицы.Отметка
				И СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений
			    И НЕ ЗначениеЗаполнено(СтрокаТаблицы.Приемник)) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ПравилоИспользования <> Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
			
			// Обработка используемых объектов
			СтруктураОтбора = Новый Структура("Ссылка", СтрокаТаблицы.Источник);
			СтрокиТаблицыДанных = ДанныеПрофилей.НайтиСтроки(СтруктураОтбора);
			ДанныеПрофиля = СтрокиТаблицыДанных[0];
			
			Профиль = Неопределено;
			Если ДанныеПрофиля.Система Тогда
				Профиль = Справочники.ПрофилиПользователей.ПрофильСистема(ПроектПриемник);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Профиль) Тогда
				Профиль = СоздатьПрофиль(ДанныеПрофиля, ТаблицаВидовДоступа, Роли,
				                         СоответствиеВидовДоступа, ПроектПриемник, ТекстПротокола);
			КонецЕсли;
			
			СоответствиеПрофилей.Вставить(СтрокаТаблицы.Источник, Профиль);
			СоответствиеНовыхПрофилей.Вставить(СтрокаТаблицы.Источник, Профиль);
			
			ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, Профиль,
			                                         ТаблицаСоответствияПрофилей, НачальноеСравнение);
			
		Иначе
			// Запись информация по неиспользуемым объектам
			ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, СтрокаТаблицы.Приемник,
			                                         ТаблицаСоответствияПрофилей, НачальноеСравнение);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СоответствиеПрофилей;
	
КонецФункции

Функция СоздатьФункции(Функции, ДанныеОФункциях, СоответствиеПрофилей, ПроектПриемник, НачальноеСравнение, ТаблицаСоответствияФункций, ТекстПротокола)
	
	СоответствиеФункций = Новый Соответствие;
	СоответствиеНовыхФункций = Новый Соответствие;
	
	ПараметрыСравнения = Новый Структура;
	ПараметрыСравнения.Вставить("ПроектПриемник", ПроектПриемник);
	ПараметрыСравнения.Вставить("НачальноеСравнение", НачальноеСравнение);
	ПараметрыСравнения.Вставить("СоответствиеПрофилей", СоответствиеПрофилей);
	
	ОбработатьФункции(Функции.Строки, ДанныеОФункциях, СоответствиеФункций, СоответствиеНовыхФункций,
	                          ТаблицаСоответствияФункций, ТекстПротокола, ПараметрыСравнения);
	
	// Заполнение табличной части "Входящие данные"
	Для Каждого ЭлементСоответствия из СоответствиеНовыхФункций Цикл
		
		СтруктураОтбора = Новый Структура("Ссылка", ЭлементСоответствия.Ключ);
		СтрокиТЧ = ДанныеОФункциях.ВходящиеДанные.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТЧ.Количество()>0 Тогда
			
			ФункцияПриемник = ЭлементСоответствия.Значение;
			ФункцияОбъект = ФункцияПриемник.ПолучитьОбъект();
			
			ЗаполнитьТЧВходящиеДанныеВФункции(ФункцияОбъект, СтрокиТЧ, СоответствиеФункций);
			
			ФункцияОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
												   
	Возврат СоответствиеФункций;
	
КонецФункции

Функция ДанныеОВидахДоступаИсточника(ВидыДоступа)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДоступа.Ссылка КАК Ссылка,
	|	ВидыДоступа.ПометкаУдаления КАК ПометкаУдаления,
	|	ВидыДоступа.Код КАК Код,
	|	ВидыДоступа.Наименование КАК Наименование,
	|	ВидыДоступа.Имя КАК Имя,
	|	ВидыДоступа.Описание КАК Описание,
	|	ВидыДоступа.ХранилищеОписания КАК ХранилищеОписания
	|ИЗ
	|	Справочник.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Ссылка В(&ВидыДоступа)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидыДоступа", ВидыДоступа);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция МетаданныеВидовДоступаИсточникаПриемника(ПроектИсточник, ПроектПриемник, ИспользуемыеВидыДоступа=Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДоступаТипыЗначенийРеквизитов.Ссылка КАК ВидДоступа,
	|	ВидыДоступаТипыЗначенийРеквизитов.Ссылка.Наименование КАК НаименованиеВидаДоступа,
	|	ВидыДоступаТипыЗначенийРеквизитов.НомерСтроки КАК НомерСтроки,
	|	ВидыДоступаТипыЗначенийРеквизитов.ТипЗначенияРеквизита КАК ТипЗначенияРеквизита,
	|	ВидыДоступаТипыЗначенийРеквизитов.ТипЗначенияРеквизита.Наименование КАК ТипЗначенияРеквизитаНаименование
	|ПОМЕСТИТЬ ВТДанныеИсточника
	|ИЗ
	|	Справочник.ВидыДоступа.ТипыЗначенийРеквизитов КАК ВидыДоступаТипыЗначенийРеквизитов
	|ГДЕ
	|	(НЕ &ОтбиратьВидыДоступа
	|				И ВидыДоступаТипыЗначенийРеквизитов.Ссылка.Владелец = &ПроектИсточник
	|			ИЛИ &ОтбиратьВидыДоступа
	|				И ВидыДоступаТипыЗначенийРеквизитов.Ссылка В (&ИспользуемыеВидыДоступа))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТДанныеИсточника.ВидДоступа КАК ВидДоступа,
	|	ВТДанныеИсточника.НаименованиеВидаДоступа КАК НаименованиеВидаДоступа,
	|	ВТДанныеИсточника.НомерСтроки КАК НомерСтроки,
	|	ВТДанныеИсточника.ТипЗначенияРеквизита КАК ТипЗначенияРеквизита,
	|	ОбъектыМетаданных.Ссылка КАК ТипЗначенияРеквизитаПриемник
	|ИЗ
	|	ВТДанныеИсточника КАК ВТДанныеИсточника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО ВТДанныеИсточника.ТипЗначенияРеквизитаНаименование = ОбъектыМетаданных.Наименование
	|			И (ОбъектыМетаданных.Владелец = &ПроектПриемник)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроектИсточник", ПроектИсточник);
	Запрос.УстановитьПараметр("ПроектПриемник", ПроектПриемник);
	Запрос.УстановитьПараметр("ОтбиратьВидыДоступа", ИспользуемыеВидыДоступа <> Неопределено);
	Запрос.УстановитьПараметр("ИспользуемыеВидыДоступа", ИспользуемыеВидыДоступа);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СоздатьВидДоступа(КоллекцияСвойствВидаДоступа, КоллекцияСтрокТЧ, ПроектПриемник, ТекстПротокола)
	
	ВыведенаИнформацияОбОбъекте = Ложь;
	ИнформацияОбОбъекте = НСтр("ru='При создании вида доступа %ВидДоступа% не обнаружены требуемые данные'");
	ИнформацияОбОбъекте = СтрЗаменить(ИнформацияОбОбъекте, "%ВидДоступа%", КоллекцияСвойствВидаДоступа.Наименование);
	
	НовыйОбъект = Справочники.ВидыДоступа.СоздатьЭлемент();
	НовыйОбъект.Владелец = ПроектПриемник;
	
	ЗаполнитьЗначенияСвойств(НовыйОбъект, КоллекцияСвойствВидаДоступа,, "Ссылка,ПометкаУдаления");
	
	Если КоллекцияСвойствВидаДоступа.ПометкаУдаления Тогда
		НовыйОбъект.ПометкаУдаления = Истина;
	КонецЕсли;
	
    ЗаполнитьТЧТипыЗначенийРеквизитов(НовыйОбъект, КоллекцияСтрокТЧ, ТекстПротокола,
	                                  ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
	
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьТЧТипыЗначенийРеквизитов(ОбъектВидДоступа, КоллекцияСтрокТЧ, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте)
	
	Для Каждого СтрокаТЧ из КоллекцияСтрокТЧ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ТипЗначенияРеквизитаПриемник) Тогда
			СтрокаИнформации = НСтр("ru='Объект метаданных %ИмяОбъекта%'");
			СтрокаИнформации = СтрЗаменить(СтрокаИнформации, "%ИмяОбъекта%", Строка(СтрокаТЧ.ТипЗначенияРеквизита));
			ДобавитьЗаписьВПротокол(СтрокаИнформации, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбъектВидДоступа.ТипыЗначенийРеквизитов.Вставить(СтрокаТЧ.НомерСтроки);
		НоваяСтрока.ТипЗначенияРеквизита = СтрокаТЧ.ТипЗначенияРеквизитаПриемник;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТЧВидыДоступаВПрофиле(ПрофильОбъект, СтрокиТЧ, СоответствиеВидовДоступа, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте)
	
	Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
		
		ВидДоступаПриемник = СоответствиеВидовДоступа.Получить(СтрокаТЧ.Источник);
		
		Если НЕ ЗначениеЗаполнено(ВидДоступаПриемник) Тогда
			СтрокаИнформации = НСтр("ru='Вид доступа %ИмяОбъекта%'");
			СтрокаИнформации = СтрЗаменить(СтрокаИнформации, "%ИмяОбъекта%", СтрокаТЧ.Источник);
			ДобавитьЗаписьВПротокол(СтрокаИнформации, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПрофильОбъект.ВидыДоступа.Вставить(СтрокаТЧ.НомерСтроки);
		НоваяСтрока.ВидДоступа = ВидДоступаПриемник;
		НоваяСтрока.Комментарии = СтрокаТЧ.Комментарии;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТЧРазрешенныеДействияВПрофиле(ПрофильОбъект, СтрокиТЧ, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте)
	
	Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Приемник) Тогда
			СтрокаИнформации = НСтр("ru='Роль %ИмяОбъекта%'");
			СтрокаИнформации = СтрЗаменить(СтрокаИнформации, "%ИмяОбъекта%", СтрокаТЧ.Источник);
			ДобавитьЗаписьВПротокол(СтрокаИнформации, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПрофильОбъект.РазрешенныеДействия.Вставить(СтрокаТЧ.НомерСтроки);
		НоваяСтрока.Роль = СтрокаТЧ.Приемник;
		НоваяСтрока.Комментарии = СтрокаТЧ.Комментарии;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТЧВходящиеДанныеВФункции(ФункцияОбъект, СтрокиТЧ, СоответствиеФункций)
	
	Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
		НоваяСтрока = ФункцияОбъект.ВходящиеДанные.Вставить(СтрокаТЧ.НомерСтроки);
		НоваяСтрока.Функция = СоответствиеФункций.Получить(СтрокаТЧ.Функция);
		НоваяСтрока.ВидСвязи = СтрокаТЧ.ВидСвязи;
	КонецЦикла;
			
КонецПроцедуры

Процедура ЗаполнитьТЧИсполнителиВФункции(ФункцияОбъект, СтрокиТЧ, СоответствиеПрофилей, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте)
	
	Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
		
		ИсполнительПриемник = СоответствиеПрофилей.Получить(СтрокаТЧ.Источник);
		
		Если НЕ ЗначениеЗаполнено(ИсполнительПриемник) Тогда
			СтрокаИнформации = НСтр("ru='Профиль %ИмяОбъекта%'");
			СтрокаИнформации = СтрЗаменить(СтрокаИнформации, "%ИмяОбъекта%", СтрокаТЧ.Источник);
			ДобавитьЗаписьВПротокол(СтрокаИнформации, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ФункцияОбъект.Исполнители.Вставить(СтрокаТЧ.НомерСтроки);
		НоваяСтрока.Исполнитель = ИсполнительПриемник;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТЧИсходящиеОбъектыМетаданныхВФункции(ФункцияОбъект, СтрокиТЧ, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте)
	
	Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Приемник) Тогда
			СтрокаИнформации = НСтр("ru='Объект метаданных %ИмяОбъекта%'");
			СтрокаИнформации = СтрЗаменить(СтрокаИнформации, "%ИмяОбъекта%", СтрокаТЧ.Источник);
			ДобавитьЗаписьВПротокол(СтрокаИнформации, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ФункцияОбъект.ИсходящиеОбъектыМетаданных.Вставить(СтрокаТЧ.НомерСтроки);
		НоваяСтрока.ОбъектМетаданных = СтрокаТЧ.Приемник;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТЧОтчетыСервисныеОбъектыОМВФункции(ФункцияОбъект, СтрокиТЧ, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте)
	
	Для Каждого СтрокаТЧ из СтрокиТЧ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Приемник) Тогда
			СтрокаИнформации = НСтр("ru='Объект метаданных %ИмяОбъекта%'");
			СтрокаИнформации = СтрЗаменить(СтрокаИнформации, "%ИмяОбъекта%", СтрокаТЧ.Источник);
			ДобавитьЗаписьВПротокол(СтрокаИнформации, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ФункцияОбъект.ОтчетыСервисныеОбъекты.Вставить(СтрокаТЧ.НомерСтроки);
		НоваяСтрока.ОбъектМетаданных = СтрокаТЧ.Приемник;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ДанныеОПрофиляхПользователей(ИспользуемыеПрофили, ПроектПриемник)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиПользователей.Ссылка КАК Ссылка,
	|	ПрофилиПользователей.ПометкаУдаления КАК ПометкаУдаления,
	|	ПрофилиПользователей.Код КАК Код,
	|	ПрофилиПользователей.Наименование КАК Наименование,
	|	ПрофилиПользователей.Заметки КАК Заметки,
	|	ПрофилиПользователей.Имя КАК Имя,
	|	ПрофилиПользователей.Описание КАК Описание,
	|	ПрофилиПользователей.Система КАК Система,
	|	ПрофилиПользователей.ХранилищеЗаметок КАК ХранилищеЗаметок,
	|	ПрофилиПользователей.ХранилищеОписания КАК ХранилищеОписания
	|ПОМЕСТИТЬ ВТПрофили
	|ИЗ
	|	Справочник.ПрофилиПользователей КАК ПрофилиПользователей
	|ГДЕ
	|	ПрофилиПользователей.Ссылка В(&ИспользуемыеПрофили)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиПользователейРазрешенныеДействия.Ссылка КАК Профиль,
	|	ПрофилиПользователейРазрешенныеДействия.НомерСтроки КАК НомерСтроки,
	|	ПрофилиПользователейРазрешенныеДействия.Роль КАК Источник,
	|	ПрофилиПользователейРазрешенныеДействия.Комментарии КАК Комментарии,
	|	ОбъектыМетаданных.Ссылка КАК Приемник
	|ПОМЕСТИТЬ ВТРоли
	|ИЗ
	|	Справочник.ПрофилиПользователей.РазрешенныеДействия КАК ПрофилиПользователейРазрешенныеДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО ПрофилиПользователейРазрешенныеДействия.Роль.Наименование = ОбъектыМетаданных.Наименование
	|			И (ОбъектыМетаданных.Владелец = &ПроектПриемник)
	|ГДЕ
	|	ПрофилиПользователейРазрешенныеДействия.Ссылка В(&ИспользуемыеПрофили)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиПользователейВидыДоступа.Ссылка КАК Профиль,
	|	ПрофилиПользователейВидыДоступа.НомерСтроки КАК НомерСтроки,
	|	ПрофилиПользователейВидыДоступа.ВидДоступа КАК Источник,
	|	ПрофилиПользователейВидыДоступа.Комментарии КАК Комментарии
	|ИЗ
	|	Справочник.ПрофилиПользователей.ВидыДоступа КАК ПрофилиПользователейВидыДоступа
	|ГДЕ
	|	ПрофилиПользователейВидыДоступа.Ссылка В(&ИспользуемыеПрофили)"
	;
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользуемыеПрофили", ИспользуемыеПрофили);
	Запрос.УстановитьПараметр("ПроектПриемник", ПроектПриемник);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	
	ТаблицаВидовДоступа = Запрос.Выполнить().Выгрузить();
	
	ДанныеПрофилей = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТПрофили"].ПолучитьДанные().Выгрузить();
	Роли = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТРоли"].ПолучитьДанные().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеПрофилей",  ДанныеПрофилей);
	Результат.Вставить("ВидыДоступа",     ТаблицаВидовДоступа);
	Результат.Вставить("Роли",            Роли);
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьПрофиль(КоллекцияСвойствПрофиля, ВидыДоступа, Роли, СоответствиеВидовДоступа, ПроектПриемник, ТекстПротокола)
	
	ВыведенаИнформацияОбОбъекте = Ложь;
	ИнформацияОбОбъекте = НСтр("ru='При создании профиля пользователя %Профиль% не обнаружены требуемые данные'");
	ИнформацияОбОбъекте = СтрЗаменить(ИнформацияОбОбъекте, "%Профиль%", КоллекцияСвойствПрофиля.Наименование);
	
	НовыйОбъект = Справочники.ПрофилиПользователей.СоздатьЭлемент();
	
	НовыйОбъект.Владелец = ПроектПриемник;
	
	ЗаполнитьЗначенияСвойств(НовыйОбъект, КоллекцияСвойствПрофиля,, "Ссылка,ПометкаУдаления");
	
	Если КоллекцияСвойствПрофиля.ПометкаУдаления Тогда
		НовыйОбъект.ПометкаУдаления = Истина;
	КонецЕсли;
	
	// Заполнение табличной части "Виды доступа"
	СтруктураОтбора = Новый Структура("Профиль", КоллекцияСвойствПрофиля.Ссылка);
	СтрокиТЧ = ВидыДоступа.НайтиСтроки(СтруктураОтбора);
	
	ЗаполнитьТЧВидыДоступаВПрофиле(НовыйОбъект, СтрокиТЧ, СоответствиеВидовДоступа,
	                               ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
	
	// Заполнение табличной части "Разрешенные действия (роли)"
	СтруктураОтбора = Новый Структура("Профиль", КоллекцияСвойствПрофиля.Ссылка);
	СтрокиТЧ = Роли.НайтиСтроки(СтруктураОтбора);
	
	ЗаполнитьТЧРазрешенныеДействияВПрофиле(НовыйОбъект, СтрокиТЧ,
	                    ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
	
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Функция СписокФункций(Функции)
	
	Список = Новый Массив;
	
	ЗаполнитьСписокФункций(Функции.Строки, Список);
	
	Возврат Список;
	
КонецФункции

Процедура ЗаполнитьСписокФункций(СтрокиДерева, Список)
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		Список.Добавить(СтрокаДерева.Источник);
		ЗаполнитьСписокФункций(СтрокаДерева.Строки, Список);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеОФункциях(СписокФункций, ПроектПриемник)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыВходящиеДанные.Ссылка КАК Ссылка,
	|	ФункцииСистемыВходящиеДанные.НомерСтроки КАК НомерСтроки,
	|	ФункцииСистемыВходящиеДанные.Функция КАК Функция,
	|	ФункцииСистемыВходящиеДанные.ВидСвязи КАК ВидСвязи
	|ПОМЕСТИТЬ ВТВходящиеДанные
	|ИЗ
	|	Справочник.ФункцииСистемы.ВходящиеДанные КАК ФункцииСистемыВходящиеДанные
	|ГДЕ
	|	ФункцииСистемыВходящиеДанные.Ссылка В(&СписокФункций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыИсполнители.Ссылка КАК Функция,
	|	ФункцииСистемыИсполнители.НомерСтроки КАК НомерСтроки,
	|	ФункцииСистемыИсполнители.Исполнитель КАК Источник
	|ПОМЕСТИТЬ ВТИсполнители
	|ИЗ
	|	Справочник.ФункцииСистемы.Исполнители КАК ФункцииСистемыИсполнители
	|ГДЕ
	|	ФункцииСистемыИсполнители.Ссылка В(&СписокФункций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыИсходящиеОбъектыМетаданных.Ссылка КАК Функция,
	|	ФункцииСистемыИсходящиеОбъектыМетаданных.НомерСтроки КАК НомерСтроки,
	|	ФункцииСистемыИсходящиеОбъектыМетаданных.ОбъектМетаданных КАК Источник,
	|	ОбъектыМетаданных.Ссылка КАК Приемник
	|ПОМЕСТИТЬ ВТИсходящиеМетаданные
	|ИЗ
	|	Справочник.ФункцииСистемы.ИсходящиеОбъектыМетаданных КАК ФункцииСистемыИсходящиеОбъектыМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО ФункцииСистемыИсходящиеОбъектыМетаданных.ОбъектМетаданных.Наименование = ОбъектыМетаданных.Наименование
	|			И (ОбъектыМетаданных.Владелец = &ПроектПриемник)
	|ГДЕ
	|	ФункцииСистемыИсходящиеОбъектыМетаданных.Ссылка В(&СписокФункций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыОтчетыСервисныеОбъекты.Ссылка КАК Функция,
	|	ФункцииСистемыОтчетыСервисныеОбъекты.НомерСтроки КАК НомерСтроки,
	|	ФункцииСистемыОтчетыСервисныеОбъекты.ОбъектМетаданных КАК Источник,
	|	ОбъектыМетаданных.Ссылка КАК Приемник
	|ПОМЕСТИТЬ ВТОтчетыСервисныеОбъекты
	|ИЗ
	|	Справочник.ФункцииСистемы.ОтчетыСервисныеОбъекты КАК ФункцииСистемыОтчетыСервисныеОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО ФункцииСистемыОтчетыСервисныеОбъекты.ОбъектМетаданных.Наименование = ОбъектыМетаданных.Наименование
	|			И (ОбъектыМетаданных.Владелец = &ПроектПриемник)
	|ГДЕ
	|	ФункцииСистемыОтчетыСервисныеОбъекты.Ссылка В(&СписокФункций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Функции.Ссылка КАК Ссылка,
	|	Функции.ПометкаУдаления КАК ПометкаУдаления,
	|	Функции.Родитель КАК ФункцияРодитель,
	|	Функции.ЭтоГруппа КАК ЭтоГруппа,
	|	Функции.Код КАК Код,
	|	Функции.Наименование КАК Наименование,
	|	Функции.ПолныйКод КАК ПолныйКод,
	|	Функции.Описание КАК Описание,
	|	Функции.ХранилищеОписания КАК ХранилищеОписания,
	|	Функции.Результат КАК Результат,
	|	Функции.ОтображаетсяВИнтерфейсе КАК ОтображаетсяВИнтерфейсе,
	|	Функции.Ответственный КАК Ответственный,
	|	Функции.ТипФункции КАК ТипФункции,
	|	Функции.НаименованиеВИнтерфейсе КАК НаименованиеВИнтерфейсе
	|ИЗ
	|	Справочник.ФункцииСистемы КАК Функции
	|ГДЕ
	|	Функции.Ссылка В(&СписокФункций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ,
	|	ПолныйКод"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокФункций", СписокФункций);
	Запрос.УстановитьПараметр("ПроектПриемник", ПроектПриемник);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеФункций = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ТаблицаФункций = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	ВходящиеДанные         = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТВходящиеДанные"].ПолучитьДанные().Выгрузить();
	Исполнители            = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТИсполнители"].ПолучитьДанные().Выгрузить();
	ИсходящиеМетаданные    = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТИсходящиеМетаданные"].ПолучитьДанные().Выгрузить();
	ОтчетыСервисныеОбъекты = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТОтчетыСервисныеОбъекты"].ПолучитьДанные().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	Результат = Новый Структура;
	Результат.Вставить("Функции",                ДанныеФункций);
	Результат.Вставить("СвойстваФункций",        ТаблицаФункций);
	Результат.Вставить("ВходящиеДанные",         ВходящиеДанные);
	Результат.Вставить("Исполнители",            Исполнители);
	Результат.Вставить("ИсходящиеМетаданные",    ИсходящиеМетаданные);
	Результат.Вставить("ОтчетыСервисныеОбъекты", ОтчетыСервисныеОбъекты);
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьФункции(СтрокиДерева, ДанныеОФункциях, СоответствиеФункций, СоответствиеНовыхФункций, ТаблицаСоответствияФункций, ТекстПротокола, ПараметрыСравнения)
	
	ПроектПриемник = ПараметрыСравнения.ПроектПриемник;
	НачальноеСравнение = ПараметрыСравнения.НачальноеСравнение;
	СоответствиеПрофилей = ПараметрыСравнения.СоответствиеПрофилей;
	
	СвойстваФункций = ДанныеОФункциях.СвойстваФункций;
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Приемник) Тогда
			СоответствиеФункций.Вставить(СтрокаДерева.Источник, СтрокаДерева.Приемник);
			
			 ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаДерева, СтрокаДерева.Приемник,
			                                          ТаблицаСоответствияФункций, НачальноеСравнение);
		КонецЕсли;
		
		Если НачальноеСравнение
			ИЛИ (НЕ НачальноеСравнение
			И (СтрокаДерева.Отметка
			   И СтрокаДерева.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений
			   И НЕ ЗначениеЗаполнено(СтрокаДерева.Приемник))) Тогда
			
			   Если СтрокаДерева.ПравилоИспользования <> Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
				   
				   // Обработка используемых объектов
				   СтруктураОтбора = Новый Структура("Ссылка", СтрокаДерева.Источник);
				   СтрокиТаблицыДанных = СвойстваФункций.НайтиСтроки(СтруктураОтбора);
				   СвойстваФункции = СтрокиТаблицыДанных[0];
				   
				   ФункцияПриемника = СоздатьФункцию(СвойстваФункции, ДанныеОФункциях, СоответствиеФункций, СоответствиеПрофилей,
				                                     ПроектПриемник, ТекстПротокола);
				   
				   СоответствиеНовыхФункций.Вставить(СтрокаДерева.Источник, ФункцияПриемника);
				   СоответствиеФункций.Вставить(СтрокаДерева.Источник, ФункцияПриемника);
				   
				   ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаДерева, ФункцияПриемника,
			                                                ТаблицаСоответствияФункций, НачальноеСравнение);
				   
			   Иначе
				   // Запись информация по неиспользуемым объектам
				   ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаДерева, СтрокаДерева.Приемник,
			                                                ТаблицаСоответствияФункций, НачальноеСравнение);
				   
			   КонецЕсли;
		КонецЕсли;
									  
		ОбработатьФункции(СтрокаДерева.Строки, ДанныеОФункциях, СоответствиеФункций, СоответствиеНовыхФункций,
		                  ТаблицаСоответствияФункций, ТекстПротокола, ПараметрыСравнения);
	КонецЦикла;
								
КонецПроцедуры

Процедура ДобавитьЗаписьВПротокол(СтрокаИнформации, ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте)
	
	Если НЕ ВыведенаИнформацияОбОбъекте Тогда
		ТекстПротокола.ДобавитьСтроку(ИнформацияОбОбъекте);
		ВыведенаИнформацияОбОбъекте = Истина;
	КонецЕсли;
	
	ТекстПротокола.ДобавитьСтроку(СтрокаИнформации);
	
КонецПроцедуры

Функция СоздатьФункцию(КоллекцияСвойствФункции, ДанныеОФункциях, СоответствиеФункций, СоответствиеПрофилей, ПроектПриемник, ТекстПротокола)
	
	Исполнители = ДанныеОФункциях.Исполнители;
	ИсходящиеМетаданные = ДанныеОФункциях.ИсходящиеМетаданные;
	ОтчетыСервисныеОбъекты = ДанныеОФункциях.ОтчетыСервисныеОбъекты;
	
	ВыведенаИнформацияОбОбъекте = Ложь;
	ИнформацияОбОбъекте = НСтр("ru='При создании функции %Функция% не обнаружены требуемые данные'");
	ИнформацияОбОбъекте = СтрЗаменить(ИнформацияОбОбъекте, "%Функция%", КоллекцияСвойствФункции.Наименование);
	
	Если КоллекцияСвойствФункции.ЭтоГруппа Тогда
		НовыйОбъект = Справочники.ФункцииСистемы.СоздатьГруппу();
	Иначе
		НовыйОбъект = Справочники.ФункцииСистемы.СоздатьЭлемент();
	КонецЕсли;
	
	НовыйОбъект.Владелец = ПроектПриемник;
	
	Если КоллекцияСвойствФункции.ПометкаУдаления Тогда
		НовыйОбъект.ПометкаУдаления = Истина;
	КонецЕсли;
	
	Если НЕ КоллекцияСвойствФункции.ЭтоГруппа Тогда
		НовыйОбъект.Результат = КоллекцияСвойствФункции.Результат;
		НовыйОбъект.Ответственный = КоллекцияСвойствФункции.Ответственный;
		НовыйОбъект.ТипФункции = КоллекцияСвойствФункции.ТипФункции;
	КонецЕслИ;
	
	НовыйОбъект.Код = КоллекцияСвойствФункции.Код;
	НовыйОбъект.Наименование = КоллекцияСвойствФункции.Наименование;
	
	Родитель = Неопределено;
	
	Если ЗначениеЗаполнено(КоллекцияСвойствФункции.ФункцияРодитель) Тогда
		Родитель = СоответствиеФункций.Получить(КоллекцияСвойствФункции.ФункцияРодитель);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Родитель) Тогда
		НовыйОбъект.Родитель = Родитель;
	КонецЕсли;
		
	НовыйОбъект.Описание = КоллекцияСвойствФункции.Описание;
	НовыйОбъект.ХранилищеОписания = КоллекцияСвойствФункции.ХранилищеОписания;
	НовыйОбъект.ОтображаетсяВИнтерфейсе = КоллекцияСвойствФункции.ОтображаетсяВИнтерфейсе;
	НовыйОбъект.НаименованиеВИнтерфейсе = КоллекцияСвойствФункции.НаименованиеВИнтерфейсе;
	
	Если НЕ НовыйОбъект.ЭтоГруппа Тогда
		
		//Заполнение табличной части "Исполнители"
		СтруктураОтбора = Новый Структура("Функция", КоллекцияСвойствФункции.Ссылка);
		СтрокиТЧ = Исполнители.НайтиСтроки(СтруктураОтбора);
		
		ЗаполнитьТЧИсполнителиВФункции(НовыйОбъект, СтрокиТЧ, СоответствиеПрофилей, ТекстПротокола,
		                               ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
		
		//Заполнение табличной части "Исходящие объекты метаданных"
		СтруктураОтбора = Новый Структура("Функция", КоллекцияСвойствФункции.Ссылка);
		СтрокиТЧ = ИсходящиеМетаданные.НайтиСтроки(СтруктураОтбора);
		
		ЗаполнитьТЧИсходящиеОбъектыМетаданныхВФункции(НовыйОбъект, СтрокиТЧ, ТекстПротокола,
		                                              ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
		
		//Заполнение табличной части "Отчеты, сервисные объекты"
		СтруктураОтбора = Новый Структура("Функция", КоллекцияСвойствФункции.Ссылка);
		СтрокиТЧ = ОтчетыСервисныеОбъекты.НайтиСтроки(СтруктураОтбора);
		
		ЗаполнитьТЧОтчетыСервисныеОбъектыОМВФункции(НовыйОбъект, СтрокиТЧ, ТекстПротокола,
		                                            ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
		
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Возврат НовыйОбъект.Ссылка;
	
КонецФункции

Процедура ОбновитьВидыДоступа(ВидыДоступа, СоответствиеВидовДоступа, МетаданныеВидовДоступа, ДанныеВидовДоступа, ПроектПриемник, ТаблицаСоответствияВидовДоступа, ТекстПротокола)
	
	Для Каждого СтрокаТаблицы из ВидыДоступа Цикл
		
		Если СтрокаТаблицы.Отметка
			И ЗначениеЗаполнено(СтрокаТаблицы.Приемник)
			И ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеПравилоИспользования)
			И СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
			
			СтруктураОтбора = Новый Структура("Ссылка", СтрокаТаблицы.Источник);
			СтрокиТаблицы = ДанныеВидовДоступа.НайтиСтроки(СтруктураОтбора);
			КоллекцияСвойствВидаДоступа = СтрокиТаблицы[0];
			
			СтруктураОтбора = Новый Структура("ВидДоступа", СтрокаТаблицы.Источник);
			КоллекцияСтрокТЧ = МетаданныеВидовДоступа.НайтиСтроки(СтруктураОтбора);
			
			ОбновитьВидДоступа(СтрокаТаблицы.Приемник, СтрокаТаблицы.Источник, КоллекцияСвойствВидаДоступа,
			                   КоллекцияСтрокТЧ, ТекстПротокола);
			
		КонецЕсли;
		
		ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, СтрокаТаблицы.Приемник,
			                                     ТаблицаСоответствияВидовДоступа, Ложь);
															
		Если ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
		    СоответствиеВидовДоступа.Вставить(СтрокаТаблицы.Источник, СтрокаТаблицы.Приемник);
		КонецЕсли;
																
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПрофили(Профили, ДанныеПрофилейПользователей, СоответствиеПрофилей, СоответствиеВидовДоступа, ПроектПриемник, ТаблицаСоответствияПрофилей, ТекстПротокола)
	
	ДанныеПрофилей = ДанныеПрофилейПользователей.ДанныеПрофилей;
	
	Для Каждого СтрокаТаблицы из Профили Цикл
		
		Если СтрокаТаблицы.Отметка
			И ЗначениеЗаполнено(СтрокаТаблицы.Приемник)
			И ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеПравилоИспользования)
			И СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
			
			СтруктураОтбора = Новый Структура("Ссылка", СтрокаТаблицы.Источник);
			СтрокиТаблицы = ДанныеПрофилей.НайтиСтроки(СтруктураОтбора);
			ДанныеПрофиля = СтрокиТаблицы[0];
		
			ОбновитьПрофиль(ДанныеПрофиля, ДанныеПрофилейПользователей, СтрокаТаблицы.Приемник,
			                СоответствиеПрофилей, СоответствиеВидовДоступа, ТекстПротокола);

		КонецЕсли;
		
		ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаТаблицы, СтрокаТаблицы.Приемник,
			                                     ТаблицаСоответствияПрофилей, Ложь);
															
		Если ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
		    СоответствиеПрофилей.Вставить(СтрокаТаблицы.Источник, СтрокаТаблицы.Приемник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьФункции(Функции, ДанныеОФункциях, СоответствиеФункций, СоответствиеПрофилей, ПроектПриемник, ТаблицаСоответствияФункций, ТекстПротокола)
	
	ОбновитьФункцииПоСтрокам(Функции.Строки, ДанныеОФункциях, СоответствиеФункций, СоответствиеПрофилей,
	                         ТаблицаСоответствияФункций, ПроектПриемник, ТекстПротокола);
	
КонецПроцедуры

Процедура ОбновитьФункцииПоСтрокам(СтрокиДерева, ДанныеОФункциях, СоответствиеФункций, СоответствиеПрофилей, ТаблицаСоответствияФункций, ПроектПриемник, ТекстПротокола)
	
	СвойстваФункций = ДанныеОФункциях.СвойстваФункций;

	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если СтрокаДерева.Отметка
			И ЗначениеЗаполнено(СтрокаДерева.Приемник)
			И ЗначениеЗаполнено(СтрокаДерева.ИсходноеПравилоИспользования)
			И СтрокаДерева.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
			
			СтруктураОтбора = Новый Структура("Ссылка", СтрокаДерева.Источник);
			СтрокиТаблицы = СвойстваФункций.НайтиСтроки(СтруктураОтбора);
			СтрокаФункции = СтрокиТаблицы[0];
			
			ОбновитьФункцию(СтрокаДерева.Приемник, СтрокаФункции, ДанныеОФункциях,
			                СоответствиеФункций, СоответствиеПрофилей, ТекстПротокола);
			
		КонецЕсли;
		
		ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаДерева, СтрокаДерева.Приемник,
			                                     ТаблицаСоответствияФункций, Ложь);
															
		Если ЗначениеЗаполнено(СтрокаДерева.Приемник) Тогда
		    СоответствиеФункций.Вставить(СтрокаДерева.Источник, СтрокаДерева.Приемник);
		КонецЕсли;
		
		ПодчиненныеСтроки = СтрокаДерева.Строки;
		ОбновитьФункцииПоСтрокам(ПодчиненныеСтроки, ДанныеОФункциях, СоответствиеФункций, СоответствиеПрофилей,
		                         ТаблицаСоответствияФункций, ПроектПриемник, ТекстПротокола);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьФункцию(Приемник, КоллекцияСвойствФункции, ДанныеОФункциях, СоответствиеФункций, СоответствиеПрофилей, ТекстПротокола)
	
	Исполнители = ДанныеОФункциях.Исполнители;
	ИсходящиеМетаданные = ДанныеОФункциях.ИсходящиеМетаданные;
	ОтчетыСервисныеОбъекты = ДанныеОФункциях.ОтчетыСервисныеОбъекты;
	
	ВыведенаИнформацияОбОбъекте = Ложь;
	ИнформацияОбОбъекте = НСтр("ru='При обновлении функции %Функция% не обнаружены требуемые данные'");
	ИнформацияОбОбъекте = СтрЗаменить(ИнформацияОбОбъекте, "%Функция%", КоллекцияСвойствФункции.Наименование);
	
	ОбъектПриемник = Приемник.ПолучитьОбъект();
	
	Если КоллекцияСвойствФункции.ЭтоГруппа Тогда
		ИспользуемыеПоля = ИспользуемыеПоляГруппыФункций();
		ЗаполнитьЗначенияСвойств(ОбъектПриемник, КоллекцияСвойствФункции, ИспользуемыеПоля);
	Иначе
		ИспользуемыеПоля = ИспользуемыеПоляФункции();
		ЗаполнитьЗначенияСвойств(ОбъектПриемник, КоллекцияСвойствФункции, ИспользуемыеПоля);
	КонецЕсли;
	
	Если КоллекцияСвойствФункции.ПометкаУдаления Тогда
		ОбъектПриемник.ПометкаУдаления = Истина;
	КонецЕсли;
	
	Если НЕ ОбъектПриемник.ЭтоГруппа Тогда
		
		//Заполнение табличной части "Входящие данные"
		СтруктураОтбора = Новый Структура("Ссылка", КоллекцияСвойствФункции.Ссылка);
		СтрокиТЧ = ДанныеОФункциях.ВходящиеДанные.НайтиСтроки(СтруктураОтбора);
		
		ОбъектПриемник.ВходящиеДанные.Очистить();
		ЗаполнитьТЧВходящиеДанныеВФункции(ОбъектПриемник, СтрокиТЧ, СоответствиеФункций);
		
		//Заполнение табличной части "Исполнители"
		СтруктураОтбора = Новый Структура("Функция", КоллекцияСвойствФункции.Ссылка);
		СтрокиТЧ = Исполнители.НайтиСтроки(СтруктураОтбора);
		
		ОбъектПриемник.Исполнители.Очистить();
		ЗаполнитьТЧИсполнителиВФункции(ОбъектПриемник, СтрокиТЧ, СоответствиеПрофилей, ТекстПротокола,
		                               ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
		
		//Заполнение табличной части "Исходящие объекты метаданных"
		СтруктураОтбора = Новый Структура("Функция", КоллекцияСвойствФункции.Ссылка);
		СтрокиТЧ = ИсходящиеМетаданные.НайтиСтроки(СтруктураОтбора);
		
		ОбъектПриемник.ИсходящиеОбъектыМетаданных.Очистить();
		ЗаполнитьТЧИсходящиеОбъектыМетаданныхВФункции(ОбъектПриемник, СтрокиТЧ, ТекстПротокола,
		                                              ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
		
		//Заполнение табличной части "Отчеты, сервисные объекты"
		СтруктураОтбора = Новый Структура("Функция", КоллекцияСвойствФункции.Ссылка);
		СтрокиТЧ = ОтчетыСервисныеОбъекты.НайтиСтроки(СтруктураОтбора);
		
		ОбъектПриемник.ОтчетыСервисныеОбъекты.Очистить();
		ЗаполнитьТЧОтчетыСервисныеОбъектыОМВФункции(ОбъектПриемник, СтрокиТЧ, ТекстПротокола,
		                                            ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
		
	КонецЕсли;
												
	ОбъектПриемник.Записать();
												
КонецПроцедуры

Процедура ОбновитьВидДоступа(Приемник, Источник, КоллекцияСвойствВидаДоступа, КоллекцияСтрокТЧ, ТекстПротокола)
	
	ВыведенаИнформацияОбОбъекте = Ложь;
	ИнформацияОбОбъекте = НСтр("ru='При обновлении вида доступа %ВидДоступа% не обнаружены требуемые данные'");
	ИнформацияОбОбъекте = СтрЗаменить(ИнформацияОбОбъекте, "%ВидДоступа%", КоллекцияСвойствВидаДоступа.Наименование);
	
	ОбъектПриемник = Приемник.ПолучитьОбъект();
	
	ИспользуемыеПоля = ИспользуемыеПоляВидаДоступа();
	ЗаполнитьЗначенияСвойств(ОбъектПриемник, КоллекцияСвойствВидаДоступа, ИспользуемыеПоля);
	
	Если КоллекцияСвойствВидаДоступа.ПометкаУдаления Тогда
		ОбъектПриемник.ПометкаУдаления = Истина;
	КонецЕсли;
	
	ОбъектПриемник.ТипыЗначенийРеквизитов.Очистить();
	
	ЗаполнитьТЧТипыЗначенийРеквизитов(ОбъектПриемник, КоллекцияСтрокТЧ, ТекстПротокола,
	                                  ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
									  
	ОбъектПриемник.Записать();
									  
КонецПроцедуры

Процедура ОбновитьПрофиль(КоллекцияСвойствПрофиля, ДанныеПрофилейПользователей, Приемник, СоответствиеПрофилей, СоответствиеВидовДоступа, ТекстПротокола)
	
	ВыведенаИнформацияОбОбъекте = Ложь;
	ИнформацияОбОбъекте = НСтр("ru='При обновлении профиля пользователя %Профиль% не обнаружены требуемые данные'");
	ИнформацияОбОбъекте = СтрЗаменить(ИнформацияОбОбъекте, "%Профиль%", КоллекцияСвойствПрофиля.Наименование);
	
	ВидыДоступа = ДанныеПрофилейПользователей.ВидыДоступа;
	Роли = ДанныеПрофилейПользователей.Роли;
	
	ОбъектПриемник = Приемник.ПолучитьОбъект();
	
	ИспользуемыеПоля = ИспользуемыеПоляПрофиля();
	ЗаполнитьЗначенияСвойств(ОбъектПриемник, КоллекцияСвойствПрофиля, ИспользуемыеПоля);
	
	Если КоллекцияСвойствПрофиля.ПометкаУдаления Тогда
		ОбъектПриемник.ПометкаУдаления = Истина;
	КонецЕсли;
	
	ОбъектПриемник.ВидыДоступа.Очистить();
	
	// Заполнение табличной части "Виды доступа"
	СтруктураОтбора = Новый Структура("Профиль", КоллекцияСвойствПрофиля.Ссылка);
	СтрокиТЧ = ВидыДоступа.НайтиСтроки(СтруктураОтбора);
	
	ЗаполнитьТЧВидыДоступаВПрофиле(ОбъектПриемник, СтрокиТЧ, СоответствиеВидовДоступа,
	                               ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
								   
	ОбъектПриемник.РазрешенныеДействия.Очистить();
	
	// Заполнение табличной части "Разрешенные действия (роли)"
	СтруктураОтбора = Новый Структура("Профиль", КоллекцияСвойствПрофиля.Ссылка);
	СтрокиТЧ = Роли.НайтиСтроки(СтруктураОтбора);
	
	ЗаполнитьТЧРазрешенныеДействияВПрофиле(ОбъектПриемник, СтрокиТЧ,
	                    ТекстПротокола, ВыведенаИнформацияОбОбъекте, ИнформацияОбОбъекте);
		
	ОбъектПриемник.Записать();
								   
КонецПроцедуры

Функция ИспользуемыеПоляВидаДоступа()
	
	Возврат "Наименование,Имя,Описание,ХранилищеОписания";
	
КонецФункции

Функция ИспользуемыеПоляПрофиля()
	
	Возврат "Наименование,Имя,Описание,Система,Заметки,ХранилищеОписания,ХранилищеЗаметок";
	
КонецФункции

Функция ИспользуемыеПоляФункции()
	
	Возврат "Наименование,Код,ПолныйКод,Описание,ХранилищеОписания,ОтображаетсяВИнтерфейсе,НаименованиеВИнтерфейсе,Результат,Ответственный,ТипФункции";
	
КонецФункции

Функция ИспользуемыеПоляГруппыФункций()
	
	Возврат "Наименование,Код,ПолныйКод,Описание,ХранилищеОписания,ОтображаетсяВИнтерфейсе,НаименованиеВИнтерфейсе";
	
КонецФункции

Процедура ЗаписатьИнформациюОбИспользованииОбъектов(ДанныеСоответствияОбъектов, ПроектПриемник, НачальноеСравнение)
	
	ПечатныеФормы = ПечатныеФормыДляСравненияОбъеклов(ДанныеСоответствияОбъектов);
	
	ЗаписатьИнформациюОбИспользованииТипаОбъектов(ДанныеСоответствияОбъектов.ВидыДоступа, ПечатныеФормы.ВидыДоступа,
	                                             ПроектПриемник, НачальноеСравнение);
												 
	ЗаписатьИнформациюОбИспользованииТипаОбъектов(ДанныеСоответствияОбъектов.Профили, ПечатныеФормы.Профили, 
	                                             ПроектПриемник, НачальноеСравнение);
												 
	ЗаписатьИнформациюОбИспользованииТипаОбъектов(ДанныеСоответствияОбъектов.Функции, ПечатныеФормы.Функции, 
	                                             ПроектПриемник, НачальноеСравнение);
	
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбИспользованииТипаОбъектов(Таблица, ПечатныеФормы, ПроектПриемник, НачальноеСравнение)
	
	Для Каждого СтрокаТаблицы из Таблица Цикл
		
		Если СтрокаТаблицы.ОбновлятьИнформациюОбИспользовании Тогда
			
			Если Не НачальноеСравнение Тогда
				// Очистка старых значений
				МенеджерЗаписи = РегистрыСведений.ИспользованиеОбъектов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Источник = СтрокаТаблицы.Источник;
				
				Если СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
					// Для очистки старых записей по использованию источника
					Если ЗначениеЗаполнено(СтрокаТаблицы.ИсходныйПриемник) Тогда
						МенеджерЗаписи.Приемник = СтрокаТаблицы.ИсходныйПриемник;
					КонецЕсли;
				Иначе
					// Очистка старых записей по неиспользованию источника
					МенеджерЗаписи.Проект = ПроектПриемник;
				КонецЕсли;
				
				МенеджерЗаписи.Прочитать();
				
				Если ЗначениеЗаполнено(МенеджерЗаписи.ПравилоИспользования) Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
				
			КонецЕсли;
			
			// Запись новой информации об использовании
			МенеджерЗаписи = РегистрыСведений.ИспользованиеОбъектов.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.Источник = СтрокаТаблицы.Источник;
			
			Если СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
				МенеджерЗаписи.Проект = ПроектПриемник;
			Иначе
				МенеджерЗаписи.Приемник = СтрокаТаблицы.Приемник;
				МенеджерЗаписи.ДатаОбновленияПриемникаИзИсточника = ТекущаяДата();
				
				СтруктураОписаний = ПечатныеФормы.Получить(СтрокаТаблицы.Источник);
				
				Если ТипЗнч(СтруктураОписаний) = Тип("Структура") Тогда
					МенеджерЗаписи.ХранилищеОписанияИсточника = Новый ХранилищеЗначения(СтруктураОписаний.Описание);
					МенеджерЗаписи.ХранилищеОписанияПриемника = Новый ХранилищеЗначения(СтруктураОписаний.ОписаниеПриемника);
				КонецЕсли;
				
			КонецЕсли;
			
			МенеджерЗаписи.ПравилоИспользования = СтрокаТаблицы.ПравилоИспользования;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДанныхВТаблицуСоответствия(СтрокаДанных, Приемник, ТаблицаСоответствия, НачальноеСравнение)
	
	НоваяСтрока = ТаблицаСоответствия.Добавить();
	
	НоваяСтрока.Источник = СтрокаДанных.Источник;
	НоваяСтрока.Приемник = Приемник;
	НоваяСтрока.ПравилоИспользования = СтрокаДанных.ПравилоИспользования;
	НоваяСтрока.ИсходныйПриемник = СтрокаДанных.ИсходныйПриемник;
	
	Если СтрокаДанных.ПравилоИспользования <> Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
		
		Если НачальноеСравнение
			ИЛИ СтрокаДанных.Отметка
			ИЛИ (СтрокаДанных.ДатаОбновленияПриемникаИзИсточника > СтрокаДанных.ДатаОбновленияПриемникаИзИсточникаИсходная
			И ЗначениеЗаполнено(Приемник)) Тогда
			
			НоваяСтрока.ОбновлятьИнформациюОбИспользовании = Истина;
		Иначе
			НоваяСтрока.ОбновлятьИнформациюОбИспользовании = Ложь;
		КонецЕсли;
	Иначе
		НоваяСтрока.ОбновлятьИнформациюОбИспользовании = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатныеФормыДляСравненияОбъеклов(ДанныеСоответствияОбъектов)
	
	ВидыДоступа = ОбъектыДляПолученияОписаний(ДанныеСоответствияОбъектов.ВидыДоступа);
	Профили = ОбъектыДляПолученияОписаний(ДанныеСоответствияОбъектов.Профили);
	Функции = ОбъектыДляПолученияОписаний(ДанныеСоответствияОбъектов.Функции);
	
	ОписанияВидыДоступа = Справочники.ВидыДоступа.СформироватьПечатныеФормы(ВидыДоступа, Истина,
	                                         ДанныеСоответствияОбъектов);
	
	ОписанияПрофили = Справочники.ПрофилиПользователей.СформироватьПечатныеФормы(Профили, Истина,
	                                         ДанныеСоответствияОбъектов);
	
	ОписанияФункции = Справочники.ФункцииСистемы.СформироватьПечатныеФормы(Функции, Истина,
	                                         ДанныеСоответствияОбъектов);
											 
	СтруктураОписаний = Новый Структура;
	СтруктураОписаний.Вставить("ВидыДоступа", ОписанияВидыДоступа);
	СтруктураОписаний.Вставить("Профили", ОписанияПрофили);
	СтруктураОписаний.Вставить("Функции", ОписанияФункции);
	
	Возврат СтруктураОписаний;
	
КонецФункции

Функция ТаблицаСоответствияОбъектов(ИмяТипа)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Источник", Новый ОписаниеТипов(ИмяТипа));
	Таблица.Колонки.Добавить("Приемник", Новый ОписаниеТипов(ИмяТипа));
	Таблица.Колонки.Добавить("ИсходныйПриемник", Новый ОписаниеТипов(ИмяТипа));
	Таблица.Колонки.Добавить("ПравилоИспользования", Новый ОписаниеТипов("ПеречислениеСсылка.ПравилаИспользованияОбъектов"));
	Таблица.Колонки.Добавить("ОбновлятьИнформациюОбИспользовании", Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

Функция ОбъектыДляПолученияОписаний(Таблица)
	
	МассивОбъектов = Новый Массив;
	
	Для Каждого СтрокаТаблицы из Таблица Цикл
		
		Если СтрокаТаблицы.ОбновлятьИнформациюОбИспользовании
			И ЗначениеЗаполнено(СтрокаТаблицы.Приемник)
			И СтрокаТаблицы.ПравилоИспользования <> Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
			
			МассивОбъектов.Добавить(СтрокаТаблицы.Источник);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивОбъектов;
	
КонецФункции

#КонецОбласти