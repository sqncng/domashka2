////////////////////////////////////////////////////////////////////////////////
// Общие процедуры для загрузки метаданных из EDT
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьМетаданные(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбщегоНазначенияСППР.ПолучитьФайлыИзGIT(Параметры);
	
	Если НЕ ЗначениеЗаполнено(Результат) ИЛИ Результат = "Already up to date." Тогда
		ЗагрузитьМетаданныеИзEDT(Параметры);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не удалось выполнить клонирование ветки из GIT репозитория. Код ошибки:'") + Результат;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗагрузитьМетаданныеИзEDT(Параметры) Экспорт
	
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Проект, "ПутьКПроектуВРепозитории");
	КаталогВыгрузкиКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогGitРепозитория) +
								РеквизитыПроекта.ПутьКПроектуВРепозитории + ПолучитьРазделительПути() + "src" + ПолучитьРазделительПути();
				
	Параметры.Вставить("КаталогВыгрузкиКонфигурации", КаталогВыгрузкиКонфигурации);
	Параметры.Вставить("ЗагружаемыеОбъекты", СтруктураЗагружаемыхОбъектов()); // Настройки чтения всех полей для каждого типа МД
	Параметры.Вставить("СсылкиМетаданных", Новый Соответствие); // Используется для поиска по uuid
	Параметры.Вставить("ТипыМетаданных", Новый Соответствие);   // Используется для поиска по представлению типа
	Параметры.Вставить("ОбновитьСвойстваПоТипам", Новый Соответствие); // Обновляется свойства содержащие строковые типы метаданных.
	Параметры.Вставить("ОбъектыМетаданных", Новый Соответствие); // Содержит исходную информацию прочитанных метаданных конфигурации
	Параметры.Вставить("НеНайденныеОбъектыМетаданных", Новый Массив); // Содержит объекты не найденные по uuid, которые будут обработаны с заменой uuid
	Параметры.Вставить("Нумераторы", Новый Соответствие); // Нумерации объектов при считывании порядка метаданных
	Параметры.Вставить("ТипыФормОбъектов", Новый Соответствие); // Для объектов метаданных сохраняются типы форм, для обновления в самих формах
	Параметры.Вставить("ОписаниеДвиженийПоРегистрам", Новый Соответствие); // Соответствие регистров и массив регистраторов
	
				
	Файл = Новый Файл(КаталогВыгрузкиКонфигурации);
	
	Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоКаталог() Тогда
		ВызватьИсключение НСтр("ru = 'Каталог не найден.'");
	КонецЕсли;
	
	ОбъектыМетаданных = Новый Массив;
	ОбъектыМетаданных.Добавить(
		Новый Структура("ИмяФайла, КлассОбъекта, ПрефиксПодчиненныхФайлов, uuid, uuidРодитель, Код", 
		"Configuration" + ПолучитьРазделительПути() + "Configuration", 
		"Configuration", 
		"", 
		"", 
		"",
		0));
	
	Параметры.Вставить("КодЯзыкаЗагрузки", "ru");
	
	Индекс = 0;
	Пока Индекс <= ОбъектыМетаданных.ВГраница() Цикл
		
		ОбъектМетаданных = ОбъектыМетаданных[Индекс];
		КаталогКонф = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВыгрузкиКонфигурации);
		Файл = Новый Файл(КаталогКонф + ОбъектМетаданных.ИмяФайла + ".mdo");
		Если НЕ Файл.Существует() Тогда
			Индекс = Индекс + 1;
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ИмяФайла = КаталогКонф + ОбъектМетаданных.ИмяФайла + ".mdo";
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
			Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
		Исключение
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Не удалось загрузить метаданные. Возникла ошибка чтения файла <%1> в ветке <%2>:'"),
					ИмяФайла, Параметры.ИмяВетки);
			ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ЗагрузитьМетаданныеИзEDT", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
			Возврат;
		КонецПопытки;
		ОбъектМетаданных.uuid = Данные.uuid;
		
		ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[ОбъектМетаданных.КлассОбъекта];
		
		Если ПараметрыОбъекта.Свойство("ChildObjectsFiles") Тогда
			ПодчиненныеФайлы = ПараметрыОбъекта.ChildObjectsFiles;
		Иначе
			ПодчиненныеФайлы = Новый Массив;
		КонецЕсли;
		
		// Читаем список подчиненных объектов, хранящихся в отдельных файлах
		Для каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
			
			Если Данные.Свойства().Получить(ПодчиненныйФайл) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СписокОбъектов = Данные[ПодчиненныйФайл];
			Р = ПолучитьРазделительПути();
			Если ТипЗнч(СписокОбъектов) = Тип("Строка") Тогда
				
				Объект = Новый Структура("ИмяФайла, КлассОбъекта, ПрефиксПодчиненныхФайлов, uuid, uuidРодитель, Код", 
				ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПреобразоватьИмяВПуть(СписокОбъектов, ПодчиненныйФайл), 
				ПодчиненныйФайл, 
				ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПреобразоватьИмяВПуть(СписокОбъектов, ПодчиненныйФайл, Истина) + Р,
				"", 
				ОбъектМетаданных.uuid,
				0);
				ОбъектыМетаданных.Добавить(Объект);
				
			ИначеЕсли ТипЗнч(СписокОбъектов) = Тип("СписокXDTO") Тогда
				
				Для каждого ЭлементОбъект Из СписокОбъектов Цикл
					
					Объект = Новый Структура("ИмяФайла, КлассОбъекта, ПрефиксПодчиненныхФайлов, uuid, uuidРодитель, Код", 
					ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПреобразоватьИмяВПуть(ЭлементОбъект, ПодчиненныйФайл), 
					ПодчиненныйФайл, 
					ОбъектМетаданных.ПрефиксПодчиненныхФайлов + ПреобразоватьИмяВПуть(ЭлементОбъект, ПодчиненныйФайл, Истина) + Р,
					"", 
					ОбъектМетаданных.uuid,
					0);
					ОбъектыМетаданных.Добавить(Объект);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Читаем свойства и рекурсивно подчиненные объекты, которые не хранятся как файлы
		ПрочитатьСвойстваИПодчиненныеОбъекты(Параметры, ОбъектМетаданных, Данные, ОбъектМетаданных.КлассОбъекта, ОбъектМетаданных.uuidРодитель);
		
		СписокОбъектов = Неопределено;
		Данные = Неопределено;
		
		// Добавляем предопределенные данные в хранящиеся в отдельных файлах
		Если ПараметрыОбъекта.Свойство("Predefined") Тогда
			
			Файл = Новый Файл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".Predefined.xml");
			Если Файл.Существует() Тогда
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьФайл(Параметры.КаталогВыгрузкиКонфигурации + ОбъектМетаданных.ИмяФайла + ".Predefined.xml");
				
				Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
				ЧтениеXML.Закрыть();
				
				Если ТипЗнч(Данные.Item) = Тип("СписокXDTO") Тогда
					ПредопределенныеЭлементы = Данные.Item;
				Иначе
					ПредопределенныеЭлементы = Новый Массив;
					ПредопределенныеЭлементы.Добавить(Данные.Item);
				КонецЕсли;
				Если НЕ ОбъектМетаданных.Свойство("ПодчиненныеОбъекты") Тогда
					ОбъектМетаданных.Вставить("ПодчиненныеОбъекты", Новый Массив);
				КонецЕсли;
				
				Для каждого ПредопределенныйЭлемент Из ПредопределенныеЭлементы Цикл
					
					Объект = Новый Структура;
					ПрочитатьПредопределенныеДанные(Параметры, Объект, ПредопределенныйЭлемент, "PredefinedData", ОбъектМетаданных.uuid);
					ОбъектМетаданных.ПодчиненныеОбъекты.Добавить(Объект);
					
				КонецЦикла; 
				
				ПредопределенныеЭлементы = Неопределено;
				Данные = Неопределено;
				
			КонецЕсли;
		КонецЕсли;
		
		// Записываем изменения
		ЗаписатьИзмененияМетаданных(Параметры, ОбъектМетаданных);
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	// Запись объектов, не найденных по uuid
	Для каждого ОбъектМетаданных Из Параметры.НеНайденныеОбъектыМетаданных Цикл
		
		ЗаписатьИзмененияМетаданных(Параметры, ОбъектМетаданных, Истина);
		
	КонецЦикла;
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Удаление не найденных объектов метаданных'"));
	
	// Помечаем на удаление не найденные
	ПометитьНаУдалениеНеНайденныеОбъекты(Параметры);
	
	ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Обработка объектов содержащие ссылки по типам метаданных'"));
	
	ОбработатьОбъектыСодержащиеСсылкиПоТипамМетаданных(Параметры);
	
	Если Параметры.Свойство("ЗагружатьКлючевыеОперации") И Параметры.ЗагружатьКлючевыеОперации Тогда
		ШаблонКомментария = НСтр("ru = 'Параметры.ЗагружатьКлючевыеОперации = %1'");
		Комментарий = СтрШаблон(ШаблонКомментария, Параметры.ЗагружатьКлючевыеОперации);
		ДобавитьЗаписьВЛог(Параметры, НСтр("ru='Загрузка ключевых операций'"), Комментарий);
		КлючевыеОперации.ЗагрузитьКлючевыеОперацииИзКаталогаВыгрузкиКонфигурации(Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьИзмененияИзEDT(Параметры) Экспорт

	ПризнакИзменения = "diff --git";
	ТипИзменения = "new file";
	ТипИзмененияУдаление = "deleted file";
	
	Если Параметры.Свойство("ИмяФайлаИзменений") Тогда
		ИмяФайлаИзменений = Параметры.ИмяФайлаИзменений;
		ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаИзменений, КодировкаТекста.UTF8);
		ТекстПрисоединенногоФайла = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
	Иначе
		ТекстПрисоединенногоФайла = Параметры.ТекстИзменений;
	КонецЕсли;
	
	ДетализацияДоФайлов = Ложь;
	Если Параметры.Свойство("ДетализацияДоФайлов") Тогда
		ДетализацияДоФайлов = Параметры.ДетализацияДоФайлов;
	КонецЕсли;	
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ОбъектМетаданных");
	ТаблицаИзменений.Колонки.Добавить("Изменения", Новый ОписаниеТипов("Строка"));
	ТаблицаИзменений.Колонки.Добавить("ИмяФайла", Новый ОписаниеТипов("Строка"));
	ТаблицаИзменений.Колонки.Добавить("ОписаниеИзменений", Новый ОписаниеТипов("Строка"));
	ТаблицаИзменений.Колонки.Добавить("ЭтоПодсистема", Новый ОписаниеТипов("Булево"));
	Если ДетализацияДоФайлов Тогда
		ТаблицаИзменений.Индексы.Добавить("ИмяФайла")
	Иначе	
		ТаблицаИзменений.Индексы.Добавить("ОбъектМетаданных")
	КонецЕсли;	
	
	ТекстФайла = Сред(ТекстПрисоединенногоФайла, 0);
	МассивСтрок = СтрРазделить(ТекстФайла, Символы.ПС, Ложь);
	
	НовоеИзменение = Ложь;
	НовСтрока = Неопределено;
	ЗаписьXML = Неопределено;
	
	Для каждого СтрокаТекст Из МассивСтрок Цикл
		
		Если СтрНачинаетсяС(СтрокаТекст, ПризнакИзменения) Тогда
			
			НовоеИзменение = Ложь;
			ИмяФайла = СокрЛ(Сред(СтрокаТекст, СтрДлина(ПризнакИзменения) + 1));
			Если Лев(ИмяФайла, 2) = "a/" Тогда
				ИмяФайла = Сред(ИмяФайла, 3);
			КонецЕсли;
			Поз = Найти(ИмяФайла, " b/");
			Если Поз > 0 Тогда
				ИмяФайла = Лев(ИмяФайла, Поз - 1);				
			КонецЕсли;	
			
			МассивСтроки = СтрРазделить(СтрокаТекст, "/");
			
			ИндексРесурсов = МассивСтроки.Найти("src");
			
			Если ИндексРесурсов = Неопределено Тогда
				Продолжить;			
			КонецЕсли;
			
			Если МассивСтроки.Количество() < ИндексРесурсов + 2 Тогда
				Продолжить;
			КонецЕсли;
			
			НовоеИзменение = Истина;
			
			КлассОбъекта = МассивСтроки[ИндексРесурсов+1];
			
			ИмяМетаданного =  НаименованиеКлассаОбъекта(КлассОбъекта) + "." 
				+ МассивСтроки[ИндексРесурсов+2];
				
			Если ДетализацияДоФайлов Тогда
				НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Новый Структура("ИмяФайла", ИмяФайла));	
			Иначе		
				НайденныеСтроки = ТаблицаИзменений.НайтиСтроки(Новый Структура("ОбъектМетаданных", ИмяМетаданного));
			КонецЕсли;	
			Если НайденныеСтроки.Количество() > 0 Тогда
				НовСтрока = НайденныеСтроки[0];
				Продолжить;
			Иначе				
				
				Если НовСтрока <> Неопределено и ЗаписьXML <> Неопределено Тогда
					НовСтрока.Изменения = ЗаписьXML.Закрыть();
				КонецЕсли;
				
				НовСтрока = ТаблицаИзменений.Добавить();
				НовСтрока.ИмяФайла = ИмяФайла;
				
				ЗаписьXML = Новый ЗаписьXML;
				ЗаписьXML.УстановитьСтроку();
				
			КонецЕсли;
			
			НовСтрока.ОбъектМетаданных = ИмяМетаданного;
			
			НовСтрока.ЭтоПодсистема = Ложь;
			
			Если КлассОбъекта = "Подсистема" или КлассОбъекта = "Subsystems" Тогда
				
				ИмяМетаданного = "";
				
				ИндексПоследнего = МассивСтроки.ВГраница();
				
				Для Индекс = -ИндексПоследнего По 0 Цикл
					Значение = МассивСтроки[-Индекс];
					Если Значение = "src" Тогда
						ИндексПоследнегоРес = - Индекс;
						Прервать;
					КонецЕсли;
				КонецЦикла;

				
				Для Индекс = -ИндексПоследнегоРес По 0 Цикл
					Значение = МассивСтроки[-Индекс];
					Если Значение = "Subsystems" Тогда
						ИндексПосл = - (Индекс - 1);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Для Инд = ИндексРесурсов+1 По ИндексПосл Цикл
					Если МассивСтроки[Инд] <> "Subsystems" Тогда
						ИмяМетаданного =  ИмяМетаданного + МассивСтроки[Инд] + ".";			
					КонецЕсли;					
				КонецЦикла; 
				
				НовСтрока.ОбъектМетаданных = Лев(ИмяМетаданного, СтрДлина(ИмяМетаданного) - 1);
				НовСтрока.ЭтоПодсистема = Истина;
				
			КонецЕсли;			
			
		ИначеЕсли НовоеИзменение Тогда
			
			Если НовСтрока <> Неопределено Тогда
				
				ЗаписьXML.ЗаписатьБезОбработки(СтрокаТекст);
				ЗаписьXML.ЗаписатьБезОбработки(Символы.ПС);
				
				Если СтрНачинаетсяС(НовСтрока.Изменения, ТипИзменения) Тогда
					НовСтрока.ОписаниеИзменений = НСтр("ru='Объект добавлен'");
				КонецЕсли;
				
				Если СтрНачинаетсяС(НовСтрока.Изменения, ТипИзмененияУдаление) Тогда
					НовСтрока.ОписаниеИзменений = НСтр("ru='Объект удален'");
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если НовСтрока <> Неопределено и ЗаписьXML <> Неопределено Тогда
		НовСтрока.Изменения = ЗаписьXML.Закрыть();
	КонецЕсли;
	
	Если Параметры.Свойство("ВернутьТаблицу") И Параметры.ВернутьТаблицу Тогда
		Параметры.Вставить("ТаблицаИзменений", ТаблицаИзменений);
		Возврат;
	КонецЕсли;	
	
	Проект = Параметры.Проект;
	
	ОбъектыМетаданных = Параметры.ОбъектыМетаданныхТехПроекта.Получить();
	
	Для каждого ТекСтрока Из ТаблицаИзменений Цикл
		ОбработкаИзмененныхОбъектов(ОбъектыМетаданных, Проект, ТекСтрока);	
	КонецЦикла; 
	
	УдалитьИзВременногоХранилища(Параметры.АдресВХранилище);
	
	ПоместитьВоВременноеХранилище(ОбъектыМетаданных, Параметры.АдресВХранилище);
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаОбъектовМетаданных

Функция ПолучитьВсеСсылочныеТипы(Параметры)

	Если Параметры.Свойство("ВсеСсылочныеТипы") Тогда
	
		Возврат Параметры.ВсеСсылочныеТипы;
	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Владелец = &Проект
	|	И НЕ ОбъектыМетаданных.ПометкаУдаления
	|	И ОбъектыМетаданных.Родитель.ВидОбъектаМетаданныхВЕдЧисле В(&ИменаСсылочныхКлассов)
	|	И НЕ ОбъектыМетаданных.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыМетаданных.Наименование";
	
	Запрос.УстановитьПараметр("Проект", Параметры.Проект);
	
	ИменаСсылочныхКлассов = Новый Массив;
	ИменаСсылочныхКлассов.Добавить("Справочник");
	ИменаСсылочныхКлассов.Добавить("Документ");
	ИменаСсылочныхКлассов.Добавить("Перечисление");
	ИменаСсылочныхКлассов.Добавить("ПланВидовХарактеристик");
	ИменаСсылочныхКлассов.Добавить("ПланСчетов");
	ИменаСсылочныхКлассов.Добавить("ПланВидовРасчета");
	ИменаСсылочныхКлассов.Добавить("БизнесПроцесс");
	ИменаСсылочныхКлассов.Добавить("Задача");
	ИменаСсылочныхКлассов.Добавить("ПланОбмена");
	Запрос.УстановитьПараметр("ИменаСсылочныхКлассов", ИменаСсылочныхКлассов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Параметры.Вставить("ВсеСсылочныеТипы", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Параметры.ВсеСсылочныеТипы;

КонецФункции

Процедура ОбработатьОбъектыСодержащиеСсылкиПоТипамМетаданных(Параметры)
	
	Для каждого КлючИЗначение Из Параметры.ОписаниеДвиженийПоРегистрам Цикл
		
		СсылкаТип = Параметры.ТипыМетаданных.Получить(КлючИЗначение.Ключ);
		Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаОбработкиЕстьИзменения = Ложь;
		Объект = СсылкаТип.ПолучитьОбъект();
		Если НЕ Параметры.ЭтоОсновноеХранилище Тогда
			Если Параметры.Свойство("ВеткаИсточник") И Объект.ВеткаИсточник <> Параметры.ВеткаИсточник Тогда
				Объект = Неопределено;
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		ТаблицаОбработки = Объект.ОписаниеДвиженийПоРегистру.Выгрузить();
		ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
		
		Для каждого uuid Из КлючИЗначение.Значение Цикл
			
			Регистратор = Параметры.СсылкиМетаданных.Получить(uuid);
			Если НЕ ЗначениеЗаполнено(Регистратор) Тогда
				Продолжить;
			КонецЕсли;
			НайденнаяСтрока = ТаблицаОбработки.Найти(Регистратор, "Регистратор");
			Если НайденнаяСтрока = Неопределено Тогда
				
				НайденнаяСтрока = ТаблицаОбработки.Добавить();
				НайденнаяСтрока.Регистратор = Регистратор;
				НайденнаяСтрока.ВидДвижения = Перечисления.ВидДвиженияРегистра.Запись;
				ТаблицаОбработкиЕстьИзменения = Истина;
			КонецЕсли; 
			НайденнаяСтрока.Найден = Истина;
		КонецЦикла;
		Индекс = ТаблицаОбработки.Количество();
		Пока  Индекс > 0 Цикл
			Индекс = Индекс - 1;
			НайденнаяСтрока = ТаблицаОбработки[Индекс];
			Если НЕ НайденнаяСтрока.Найден Тогда
				ТаблицаОбработки.Удалить(НайденнаяСтрока);
				ТаблицаОбработкиЕстьИзменения = Истина;
			КонецЕсли; 
		КонецЦикла;
		Если ТаблицаОбработкиЕстьИзменения Тогда
			Объект.ОписаниеДвиженийПоРегистру.Загрузить(ТаблицаОбработки);
		КонецЕсли;
		
		uuidРегистратора = Объект.uuid + "_Recorder";
		РегистраторРеквизит = Параметры.СсылкиМетаданных.Получить(uuidРегистратора);
		Если ЗначениеЗаполнено(РегистраторРеквизит) Тогда
			Параметры.ОбновитьСвойстваПоТипам.Вставить(РегистраторРеквизит, 
				Новый Структура("ТипыЗначенияРеквизита", ТаблицаОбработки.ВыгрузитьКолонку("Регистратор")));
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РеквизитыОбъектовМетаданных.Ссылка
			|ИЗ
			|	Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
			|ГДЕ
			|	РеквизитыОбъектовМетаданных.uuid = ""Recorder""
			|	И РеквизитыОбъектовМетаданных.Владелец = &ОбъектМетаданных
			|	И РеквизитыОбъектовМетаданных.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
			|	И НЕ РеквизитыОбъектовМетаданных.ПометкаУдаления";
			
			Запрос.УстановитьПараметр("ОбъектМетаданных", СсылкаТип);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Параметры.ОбновитьСвойстваПоТипам.Вставить(ВыборкаДетальныеЗаписи.Ссылка, 
					Новый Структура("ТипыЗначенияРеквизита", ТаблицаОбработки.ВыгрузитьКолонку("Регистратор")));
			КонецЕсли;
		КонецЕсли;
		Если Объект.Модифицированность() Тогда
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	// Обрабатываем объекты и их свойства, реквизиты, содержащие ссылки, после записи всех объектов
	Для каждого КлючИЗначение Из Параметры.ОбновитьСвойстваПоТипам Цикл
		
		ТипЗначения = ТипЗнч(КлючИЗначение.Ключ);
		Если ТипЗначения = Тип("СправочникСсылка.РеквизитыОбъектовМетаданных") Тогда
			
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.ТипыЗначенияРеквизита.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.ТипыЗначенияРеквизита Цикл
				
				Если Найти(ТипЗначения, "cfg:") > 0 или Найти(ТипЗначения, "Ref.") > 0 или Найти(ТипЗначения, "DefinedType") > 0 Тогда
				
					ТипЗначения = СтрЗаменить(ТипЗначения, "cfg:", "");
					ТипЗначения = СтрЗаменить(ТипЗначения, "Ref", "");
					
					ЭлемТипЗнч = СтрРазделить(ТипЗначения, ".");
					Если ЭлемТипЗнч.Количество() > 1 Тогда
						ЭлемТипЗнч[0] = ИмяКаталога(ЭлемТипЗнч[0]);
						ЭлемТипЗнч.Добавить(ЭлемТипЗнч[1]);
					
						ТипЗначения = СтрСоединить(ЭлемТипЗнч, "\");
					КонецЕсли; 
				
				КонецЕсли;
				
				Если ТипЗнч(ТипЗначения) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
					СсылкаТип = ТипЗначения;
				Иначе
					СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				КонецЕсли; 
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					// Получаем класс объекта
					КлассОбъекта = НаименованиеКлассаОбъекта(ТипЗначения);
					Если ЗначениеЗаполнено(КлассОбъекта) Тогда
						
						Для каждого ТипМетаданных Из Параметры.ТипыМетаданных Цикл
						
							Если  Найти(ТипМетаданных.Ключ, ТипЗначения) = 0
								ИЛИ Найти(СтрЗаменить(ТипМетаданных.Ключ, ТипЗначения+".",""), ".") > 0 Тогда // найден под-класс - пропускаем.
								Продолжить;
							КонецЕсли;
							Если НЕ Объект.ИгнорироватьСсылкиИзРеквизита Тогда
								Объект.ИгнорироватьСсылкиИзРеквизита = Истина;
							КонецЕсли;
							НайденнаяСтрока = ТаблицаОбработки.Найти(ТипМетаданных.Значение, "ТипЗначенияРеквизита");
							Если НайденнаяСтрока = Неопределено Тогда
								
								НайденнаяСтрока = ТаблицаОбработки.Добавить();
								НайденнаяСтрока.ТипЗначенияРеквизита = ТипМетаданных.Значение;
								ТаблицаОбработкиЕстьИзменения = Истина;
								
							КонецЕсли; 
							НайденнаяСтрока.Найден = Истина;
						КонецЦикла; 
						Продолжить;
					ИначеЕсли НЕ ЗначениеЗаполнено(КлассОбъекта) И ТипЗначения = "Any" Тогда
						ВсеСсылочныеТипы = ПолучитьВсеСсылочныеТипы(Параметры);
						Если НЕ Объект.ИгнорироватьСсылкиИзРеквизита Тогда
							Объект.ИгнорироватьСсылкиИзРеквизита = Истина;
						КонецЕсли; 
						Для каждого СсылочныйТип Из ВсеСсылочныеТипы Цикл
							НайденнаяСтрока = ТаблицаОбработки.Найти(СсылочныйТип, "ТипЗначенияРеквизита");
							Если НайденнаяСтрока = Неопределено Тогда
								
								НайденнаяСтрока = ТаблицаОбработки.Добавить();
								НайденнаяСтрока.ТипЗначенияРеквизита = СсылочныйТип;
								ТаблицаОбработкиЕстьИзменения = Истина;
								
							КонецЕсли; 
							НайденнаяСтрока.Найден = Истина;
						КонецЦикла; 
						Продолжить;
					Иначе
						СсылкаТип = ТипЗначения;
					КонецЕсли;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "ТипЗначенияРеквизита");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.ТипЗначенияРеквизита = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.ТипыЗначенияРеквизита.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.Подсистемы") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) ИЛИ ТипЗнч(СсылкаТип) <> Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "ОбъектМетаданных");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.ОбъектМетаданных = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ПодпискиНаСобытияСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Источник.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Источник Цикл
				
				ТипЗначения = СтрЗаменить(ТипЗначения, "cfg:", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "Object", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "ValueManager", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "Manager", "");
				ТипЗначения = СтрЗаменить(ТипЗначения, "RecordSet", "");
				
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					// Получаем класс объекта
					КлассОбъекта = НаименованиеКлассаОбъекта(ТипЗначения);
					Если ЗначениеЗаполнено(КлассОбъекта) Тогда
						
						Для каждого ТипМетаданных Из Параметры.ТипыМетаданных Цикл
						
							Если Найти(ТипМетаданных.Ключ, ТипЗначения) = 0 
								ИЛИ Найти(СтрЗаменить(ТипМетаданных.Ключ, ТипЗначения+".",""), ".") > 0 Тогда // найден под-класс - пропускаем.
								Продолжить;
							КонецЕсли; 
							НайденнаяСтрока = ТаблицаОбработки.Найти(ТипМетаданных.Значение, "Тип");
							Если НайденнаяСтрока = Неопределено Тогда
								
								НайденнаяСтрока = ТаблицаОбработки.Добавить();
								НайденнаяСтрока.Тип = ТипМетаданных.Значение;
								ТаблицаОбработкиЕстьИзменения = Истина;
								
							КонецЕсли; 
							НайденнаяСтрока.Найден = Истина;
						КонецЦикла; 
					КонецЕсли;
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Источник.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.КритерииОтбораСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Реквизит");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Реквизит = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			ТаблицаОбработки = Объект.Тип.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Тип Цикл
				
				Если Найти(ТипЗначения, "cfg:") > 0 или Найти(ТипЗначения, "Ref.") > 0 или Найти(ТипЗначения, "DefinedType") > 0 Тогда
				
					ТипЗначения = СтрЗаменить(ТипЗначения, "cfg:", "");
					ТипЗначения = СтрЗаменить(ТипЗначения, "Ref", "");
					
					ЭлемТипЗнч = СтрРазделить(ТипЗначения, ".");
					Если ЭлемТипЗнч.Количество() > 1 Тогда
						ЭлемТипЗнч[0] = ИмяКаталога(ЭлемТипЗнч[0]);
						ЭлемТипЗнч.Добавить(ЭлемТипЗнч[1]);
					
						ТипЗначения = СтрСоединить(ЭлемТипЗнч, "\");
					КонецЕсли; 
				
				КонецЕсли; 
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Тип.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ПоследовательностиСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Документы.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Документы Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Документы.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			ТаблицаОбработки = Объект.Движения.Выгрузить();
			ТаблицаОбработкиЕстьИзменения = Ложь;
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Движения Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Движения.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ФункциональныеОпцииСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			Хранение = Параметры.ТипыМетаданных.Получить(КлючИЗначение.Значение.Хранение);
			Если Объект.Хранение <> Хранение Тогда
				Объект.Хранение = Хранение;
			КонецЕсли; 
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ОбщиеРеквизитыСвойства") Тогда
		
			Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
			ТаблицаОбработки = Объект.Состав.Выгрузить();
			ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
			ТаблицаОбработкиЕстьИзменения = Ложь;
			Для каждого ТипЗначения Из КлючИЗначение.Значение.Состав Цикл
			
				СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
				Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
					Продолжить;
				КонецЕсли; 
				НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "Тип");
				Если НайденнаяСтрока = Неопределено Тогда
				
					НайденнаяСтрока = ТаблицаОбработки.Добавить();
					НайденнаяСтрока.Тип = СсылкаТип;
					ТаблицаОбработкиЕстьИзменения = Истина;
				
				КонецЕсли; 
				НайденнаяСтрока.Найден = Истина;
			
			КонецЦикла; 
			Индекс = ТаблицаОбработки.Количество();
			Пока  Индекс > 0 Цикл
				Индекс = Индекс - 1;
				НайденнаяСтрока = ТаблицаОбработки[Индекс];
				Если НЕ НайденнаяСтрока.Найден Тогда
					ТаблицаОбработки.Удалить(НайденнаяСтрока);
					ТаблицаОбработкиЕстьИзменения = Истина;
				КонецЕсли; 
			КонецЦикла;
			Если ТаблицаОбработкиЕстьИзменения Тогда
				Объект.Состав.Загрузить(ТаблицаОбработки);
			КонецЕсли;
			Если Объект.Модифицированность() Тогда
				Объект.Записать();
			КонецЕсли; 
		
		КонецЕсли;
		
		Если ТипЗначения = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
			
			Если КлючИЗначение.Значение.Свойство("ВводитсяНаОсновании") Тогда
				Объект = КлючИЗначение.Ключ.ПолучитьОбъект();
				ТаблицаОбработки = Объект.ВводитсяНаОсновании.Выгрузить();
				ТаблицаОбработки.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
				ТаблицаОбработкиЕстьИзменения = Ложь;
				Для каждого ТипЗначения Из КлючИЗначение.Значение.ВводитсяНаОсновании Цикл
					
					СсылкаТип = Параметры.ТипыМетаданных.Получить(ТипЗначения);
					Если НЕ ЗначениеЗаполнено(СсылкаТип) Тогда
						Продолжить;
					КонецЕсли; 
					НайденнаяСтрока = ТаблицаОбработки.Найти(СсылкаТип, "ОбъектМетаданных");
					Если НайденнаяСтрока = Неопределено Тогда
						
						НайденнаяСтрока = ТаблицаОбработки.Добавить();
						ТаблицаОбработкиЕстьИзменения = Истина;
						НайденнаяСтрока.ОбъектМетаданных = СсылкаТип;
						
					КонецЕсли; 
					НайденнаяСтрока.Найден = Истина;
					
				КонецЦикла; 
				Индекс = ТаблицаОбработки.Количество();
				Пока  Индекс > 0 Цикл
					Индекс = Индекс - 1;
					НайденнаяСтрока = ТаблицаОбработки[Индекс];
					Если НЕ НайденнаяСтрока.Найден Тогда
						ТаблицаОбработки.Удалить(НайденнаяСтрока);
						ТаблицаОбработкиЕстьИзменения = Истина;
					КонецЕсли; 
				КонецЦикла;
				Если ТаблицаОбработкиЕстьИзменения Тогда
					Объект.ВводитсяНаОсновании.Загрузить(ТаблицаОбработки);
				КонецЕсли;
				Если Объект.Модифицированность() Тогда
					Объект.Записать();
				КонецЕсли; 
			КонецЕсли;
			
			Если КлючИЗначение.Значение.Свойство("Права") Тогда
				Набор = РегистрыСведений.ПраваДоступаКОбъектамМетаданных.СоздатьНаборЗаписей();
				Набор.Отбор.Роль.Установить(КлючИЗначение.Ключ);
				
				Если КлючИЗначение.Значение.Свойство("УстанавливатьПраваДляНовыхОбъектов") Тогда
					УстанавливатьПраваДляНовыхОбъектов = КлючИЗначение.Значение.УстанавливатьПраваДляНовыхОбъектов;
				Иначе
					УстанавливатьПраваДляНовыхОбъектов = Ложь;
				КонецЕсли;
				
				Если УстанавливатьПраваДляНовыхОбъектов Тогда
					
					КоллекцияПравПоУмолчанию = ПолучитьПраваПоУмолчаниюДляВсехОбъектов(Параметры);
					
				КонецЕсли;
				
				Для каждого Право Из КлючИЗначение.Значение.Права Цикл
					
					Если УстанавливатьПраваДляНовыхОбъектов Тогда
						ПраваОбъекта = КоллекцияПравПоУмолчанию.Получить(Право.Имя);
						Если ПраваОбъекта <> Неопределено Тогда
							ПраваОбъекта.Удалить(Право.ПравоДоступа);
						КонецЕсли; 
					КонецЕсли;
					
					Если НЕ Право.Используется Тогда
						Продолжить;
					КонецЕсли;
					
					СсылкаТип = Параметры.ТипыМетаданных.Получить(Право.Имя);
					Если НЕ ЗначениеЗаполнено(СсылкаТип) 
						ИЛИ НЕ ЗначениеЗаполнено(Право.ПравоДоступа)
						ИЛИ НЕ ТипЗнч(СсылкаТип) = Тип("СправочникСсылка.ОбъектыМетаданных")
						ИЛИ НЕ ТипЗнч(Право.ПравоДоступа) = Тип("ПеречислениеСсылка.ПраваДоступа") Тогда
						Продолжить;
					КонецЕсли; 
					
					Запись = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Право);
					Запись.Роль = КлючИЗначение.Ключ;
					Запись.ОбъектМетаданных = СсылкаТип;
					
				КонецЦикла; 
				
				Если УстанавливатьПраваДляНовыхОбъектов Тогда
					Для каждого Объект Из КоллекцияПравПоУмолчанию Цикл
						Для каждого ПравоОбъекта Из Объект.Значение Цикл
							
							Право = Новый Структура;
							Право.Вставить("Имя", Объект.Ключ);
							Право.Вставить("ПравоДоступа", ПравоОбъекта.Ключ); 
							Право.Вставить("ПоляБезОграниченияДоступа", "");
							Право.Вставить("ПоляСОграничениемДоступа", "");
							Право.Вставить("КоличествоПолейБезОграниченияДоступа", 0);
							Право.Вставить("КоличествоПолейСОграничениемДоступа", 0);
							Право.Вставить("Используется", Истина);
							
							СсылкаТип = Параметры.ТипыМетаданных.Получить(Право.Имя);
							Если НЕ ЗначениеЗаполнено(СсылкаТип) 
								ИЛИ НЕ ЗначениеЗаполнено(Право.ПравоДоступа)
								ИЛИ НЕ ТипЗнч(СсылкаТип) = Тип("СправочникСсылка.ОбъектыМетаданных")
								ИЛИ НЕ ТипЗнч(Право.ПравоДоступа) = Тип("ПеречислениеСсылка.ПраваДоступа") Тогда
								Продолжить;
							КонецЕсли; 
							
							Запись = Набор.Добавить();
							ЗаполнитьЗначенияСвойств(Запись, Право);
							Запись.Роль = КлючИЗначение.Ключ;
							Запись.ОбъектМетаданных = СсылкаТип;
							
						КонецЦикла; 
					КонецЦикла; 
				КонецЕсли;
				
				Набор.Записать();
				
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

Функция ПометитьНаУдалениеНеНайденныеОбъектыВеткаИсточник()
	Возврат "ВЫБРАТЬ
	        |	Таблица.uuid КАК uuid,
	        |	Таблица.Ссылка КАК Ссылка,
	        |	Таблица.ВеткаИсточник КАК ВеткаИсточник
	        |ИЗ
	        |	Справочник.ОбъектыМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец = &Проект
	        |	И НЕ Таблица.ЭтоГруппа
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |	И НЕ(Таблица.Имя В (&ИменаСтандартныхРолей)
	        |				И Таблица.Родитель.Имя = &ИмяКлассаРолей)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.КомандыОбъектовМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.Подсистемы КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.ПредопределенныеДанные КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ВЫБОР
	        |		КОГДА Таблица.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
	        |			ТОГДА ВладелецРеквизита.uuid + ""_"" + Таблица.uuid
	        |		ИНАЧЕ Таблица.uuid
	        |	КОНЕЦ,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.РеквизитыОбъектовМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ВладелецРеквизита
	        |		ПО Таблица.Владелец = ВладелецРеквизита.Ссылка
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)
	        |	И НЕ Таблица.ВидРеквизита В (&ВидыГруппРеквизитов)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	Таблица.uuid,
	        |	Таблица.Ссылка,
	        |	Таблица.ВеткаИсточник
	        |ИЗ
	        |	Справочник.ФормыОбъектовМетаданных КАК Таблица
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	        |		ПО Таблица.ВеткаИсточник = Ветки.Ссылка
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена))
	        |			И (Ветки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена))
	        |ГДЕ
	        |	НЕ Таблица.ПометкаУдаления
	        |	И Таблица.Владелец.Владелец = &Проект
	        |	И (&ЭтоОсновноеХранилище
	        |				И Ветки.Ссылка ЕСТЬ NULL
	        |			ИЛИ Таблица.ВеткаИсточник = &ВеткаИсточник)";
КонецФункции	

Процедура ПометитьНаУдалениеНеНайденныеОбъекты(Параметры)

	Запрос = Новый Запрос;
	
	Запрос.Текст = ПометитьНаУдалениеНеНайденныеОбъектыВеткаИсточник();
	
	Запрос.УстановитьПараметр("ЭтоОсновноеХранилище", Параметры.ЭтоОсновноеХранилище);
	Запрос.УстановитьПараметр("Проект", Параметры.Проект);
	Если Параметры.Свойство("ВеткаИсточник") Тогда
		Запрос.УстановитьПараметр("ВеткаИсточник", Параметры.ВеткаИсточник);
	Иначе
		Запрос.УстановитьПараметр("ВеткаИсточник", Справочники.Ветки.ПустаяСсылка());
	КонецЕсли;
	
	ВидыГруппРеквизитов = Новый Массив;
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.СтандартныеРеквизиты);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Реквизиты);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Графы);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Измерения);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.ПризнакиУчета);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.РеквизитыАдресации);
	ВидыГруппРеквизитов.Добавить(Перечисления.ВидыРеквизитов.Ресурсы);
	Запрос.УстановитьПараметр("ВидыГруппРеквизитов", ВидыГруппРеквизитов);
	
	ИменаСтандартныхРолей = Новый Массив;
	ИменаСтандартныхРолей.Добавить("ПолныеПрава");
	ИменаСтандартныхРолей.Добавить("БазовыеПрава");
	ИменаСтандартныхРолей.Добавить("РольНеНазначается");
	Запрос.УстановитьПараметр("ИменаСтандартныхРолей", ИменаСтандартныхРолей);
	Запрос.УстановитьПараметр("ИмяКлассаРолей", "Роли");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Ссылка = Параметры.СсылкиМетаданных.Получить(СокрЛП(ВыборкаДетальныеЗаписи.uuid));
		Если НЕ ЗначениеЗаполнено(Ссылка) ИЛИ Ссылка <> ВыборкаДетальныеЗаписи.Ссылка Тогда
		
			Если Параметры.ЭтоОсновноеХранилище Тогда
				
				Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				Объект.ПрисутствуетВОсновномХранилище = Ложь;
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
			
			ИначеЕсли Параметры.Свойство("ВеткаИсточник")
				И ВыборкаДетальныеЗаписи.ВеткаИсточник = Параметры.ВеткаИсточник Тогда
				
				Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				Объект.ВеткаИсточник = Справочники.Ветки.ПустаяСсылка();
				Объект.ПометкаУдаления = Истина;
				Объект.Записать();
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция СоздатьОбновитьОбъектМетаданных(Параметры, ОбъектМетаданных, Ссылка)

	ЕстьИзменения = Ложь;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
	
		Объект = Ссылка.ПолучитьОбъект();
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Configuration" Тогда // Корень конфигурации
	
		Возврат Параметры.Проект;
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Attributes" Тогда // Реквизит
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьЭлемент();
		Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Реквизит;
		СсылкаРодитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(СсылкаРодитель) = Тип("СправочникСсылка.РеквизитыОбъектовМетаданных") Тогда
		
			Объект.Родитель = СсылкаРодитель;
			Объект.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаРодитель, "Владелец");
		
		Иначе
		
			Объект.Владелец = СсылкаРодитель;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(СсылкаРодитель, Перечисления.ВидыРеквизитов.Реквизиты, Параметры.СсылкиМетаданных);
		КонецЕсли; 
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "TabularSections" Тогда // Табличная часть
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьГруппу();
		Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.ТабличнаяЧасть;
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "StandardAttributes"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Dimensions"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Resources" 
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Columns"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AccountingFlags"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AddressingAttributes" Тогда
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьЭлемент();
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Объект.Владелец = Владелец;
		Если ОбъектМетаданных.КлассОбъекта = "StandardAttributes" Тогда // Стандартный реквизит
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныйРеквизит;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.СтандартныеРеквизиты, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Dimensions" Тогда // Измерение
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Измерение;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.Измерения, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Resources" Тогда // Ресурс
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Ресурс;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.Ресурсы, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Columns" Тогда // Графа
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.Графа;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.Графы, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AccountingFlags" Тогда // Признак учета
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.ПризнакУчета;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.ПризнакиУчета, Параметры.СсылкиМетаданных);
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AddressingAttributes" Тогда // Реквизиты адресации
			Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.РеквизитАдресации;
			Объект.Родитель = НайтиСоздатьГруппуРеквизитов(Владелец, Перечисления.ВидыРеквизитов.РеквизитыАдресации, Параметры.СсылкиМетаданных);
		КонецЕсли;
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "ConstantValue"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "SessionParameterValue" Тогда // Значение константы или параметра сеанса
	
		Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьЭлемент();
		Объект.ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныйРеквизит;
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Commands" Тогда // Комманды объекта
		
		Объект = Справочники.КомандыОбъектовМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Forms" Тогда // Формы объекта
		
		Объект = Справочники.ФормыОбъектовМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Templates" Тогда // Макеты объекта
		
		Объект = Справочники.МакетыОбъектовМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		ЕстьИзменения = Истина;
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "PredefinedDatas" ИЛИ ОбъектМетаданных.КлассОбъекта = "EnumValues" Тогда // Предопределенные данные
		
		Объект = Справочники.ПредопределенныеДанные.СоздатьЭлемент();
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		
			Объект.Владелец = Родитель;
			Объект.Родитель = Справочники.ПредопределенныеДанные.ПустаяСсылка();
		
		Иначе
		
			Объект.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Владелец");
			Объект.Родитель = Родитель;
		
		КонецЕсли; 
		ЕстьИзменения = Истина;
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Subsystems" Тогда // Подсистема
		
		Объект = Справочники.Подсистемы.СоздатьЭлемент();
		Объект.Владелец = Параметры.Проект;
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.Подсистемы") Тогда
			Объект.Родитель = Родитель;
		Иначе
			Объект.Родитель = Справочники.ПредопределенныеДанные.ПустаяСсылка();
		КонецЕсли; 
		ЕстьИзменения = Истина;
		
	Иначе
		
		Объект = Справочники.ОбъектыМетаданных.СоздатьЭлемент();
		Объект.Владелец = Параметры.Проект;
		Объект.Родитель = РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных);
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Если СокрЛП(Объект.uuid) <> СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", "") Тогда
	
		Объект.uuid = СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", ""); // Для стандартных реквизитов удаляем префикс объекта
		ЕстьИзменения = Истина;
	
	КонецЕсли; 
	
	// Порядок элемента в конфигурации изменился
	Если Объект.Код <> ОбъектМетаданных.Код Тогда
	
		Объект.Код = ОбъектМетаданных.Код;
		ЕстьИзменения = Истина;
	
	КонецЕсли; 
	
	Если Параметры.ЭтоОсновноеХранилище И (НЕ Объект.ПрисутствуетВОсновномХранилище ИЛИ Объект.ПометкаУдаления) Тогда
		Объект.ПрисутствуетВОсновномХранилище = Истина;
		Объект.ПометкаУдаления = Ложь;
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если Параметры.ЭтоОсновноеХранилище И ЗначениеЗаполнено(Объект.ВеткаИсточник) Тогда 
		// Если заполнен тех.проект - очищаем его, т.к. он уже в основном хранилище
		Объект.ВеткаИсточник = Неопределено;
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ОбъектМетаданных.КлассОбъекта = "Subsystems" Тогда // Обработка подсистем
		
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) <> Тип("СправочникСсылка.Подсистемы") Тогда
			Родитель = Справочники.Подсистемы.ПустаяСсылка();
		КонецЕсли;
		Если Объект.Родитель <> Родитель Тогда
			Объект.Родитель = Родитель;
			ЕстьИзменения = Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ОбъектыМетаданных") Тогда
		Родитель = РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных);
		Если НЕ ЗначениеЗаполнено(Объект.Родитель) И Объект.Родитель <> Родитель И ЗначениеЗаполнено(Родитель) Тогда
			Объект.Родитель = Родитель;
			ЕстьИзменения = Истина;
		КонецЕсли; 
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Forms" Тогда // Формы объекта
		ТипыФорм = Параметры.ТипыФормОбъектов.Получить(ОбъектМетаданных.uuidРодитель);
		МассивТиповФормы = Новый Массив;
		Если ТипыФорм <> Неопределено Тогда
			
			Для каждого ЭлементСписка Из ТипыФорм Цикл
			
				Имена = СтрРазделить(ЭлементСписка.Представление, ".");
				Если Имена.Количество() > 3 и Имена[3] <> ОбъектМетаданных.Свойства.Имя Тогда
					Продолжить;
				КонецЕсли; 
				
				МассивТиповФормы.Добавить(ЭлементСписка.Значение);
			КонецЦикла; 
			
			Если МассивТиповФормы.Количество() = 0 Тогда
				МассивТиповФормы.Добавить(Перечисления.ТипыФорм.ПроизвольнаяФорма);
			КонецЕсли; 
		Иначе
			МассивТиповФормы.Добавить(Перечисления.ТипыФорм.ПроизвольнаяФорма);
		КонецЕсли; 
		
		ТЗТипыФормы = Объект.ТипыФормы.Выгрузить();
		ТЗТипыФормы.Индексы.Добавить("ТипФормы");
		
		Для Каждого ТипФормы из МассивТиповФормы Цикл
			Если Объект.ТипыФормы.Найти(ТипФормы, "ТипФормы") = Неопределено Тогда
				НоваяСтрокаТЧ = Объект.ТипыФормы.Добавить();
				НоваяСтрокаТЧ.ТипФормы = ТипФормы;
				ЕстьИзменения = Истина;
			Иначе
				ТЗТипыФормы.Удалить(ТЗТипыФормы.Найти(ТипФормы, "ТипФормы"));
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЗ Из ТЗТипыФормы Цикл
			Объект.ТипыФормы.Удалить(Объект.ТипыФормы.Найти(СтрокаТЗ["ТипФормы"], "ТипФормы"));
			ЕстьИзменения = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьСвойстваПоТипам = Новый Структура;
	
	Если ОбъектМетаданных.Свойство("Свойства") Тогда
	
		Для каждого Свойство Из ОбъектМетаданных.Свойства Цикл
			
			ТипЗначения = ТипЗнч(Свойство.Значение);
			
			Если Свойство.Ключ = "ТипыЗначенияРеквизита" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить("ТипыЗначенияРеквизита", Свойство.Значение);
				Иначе
					ТипыЗначенияРеквизита = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						ТипыЗначенияРеквизита.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить("ТипыЗначенияРеквизита", ТипыЗначенияРеквизита);
				КонецЕсли;
				Продолжить;
			ИначеЕсли Свойство.Ключ = "ВводитсяНаОсновании" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить("ВводитсяНаОсновании", Свойство.Значение);
				Иначе
					ВводитсяНаОсновании = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						ВводитсяНаОсновании.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить("ВводитсяНаОсновании", ВводитсяНаОсновании);
				КонецЕсли;
				Продолжить;
			ИначеЕсли Свойство.Ключ = "ОписаниеДвиженийПоРегистру" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОписаниеДвиженийПоРегистрам = Свойство.Значение;
				Иначе
					ОписаниеДвиженийПоРегистрам = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						ОписаниеДвиженийПоРегистрам.Добавить(Свойство.Значение);
					КонецЕсли;
				КонецЕсли;
				Для каждого Регистр Из ОписаниеДвиженийПоРегистрам Цикл
					ОписаниеДвижений = Параметры.ОписаниеДвиженийПоРегистрам.Получить(Регистр);
					Если ОписаниеДвижений = Неопределено Тогда
						ОписаниеДвижений = Новый Массив;
						ОписаниеДвижений.Добавить(Объект.uuid);
						Параметры.ОписаниеДвиженийПоРегистрам.Вставить(Регистр, ОписаниеДвижений);
					Иначе
						ОписаниеДвижений.Добавить(Объект.uuid);
					КонецЕсли;
				КонецЦикла; 
				Продолжить;
			ИначеЕсли Свойство.Ключ = "Состав" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить("Состав", Свойство.Значение);
				Иначе
					Состав = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						Состав.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить("Состав", Состав);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если ТипЗначения = Тип("Строка") Тогда
				Значение = ПредопределенныеЗначенияСтроковыхКонстант(Свойство.Значение, ОбъектМетаданных.КлассОбъекта, Свойство.Ключ, Параметры);
				Если Объект[Свойство.Ключ] <> Значение
					И (ЗначениеЗаполнено(Объект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					Объект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
				
			ИначеЕсли ТипЗначения = Тип("Массив") Тогда
				// Массивы пропускаются и должны обрабатываться отдельно
			ИначеЕсли ТипЗначения = Тип("Неопределено") Тогда
				Значение = ЗначениеСвойстваПоУмолчанию(Свойство.Ключ);
				Если Объект[Свойство.Ключ] <> Значение
					И (ЗначениеЗаполнено(Объект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					Объект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
			
				
			КонецЕсли; 
			
			
		КонецЦикла; 
	
	КонецЕсли; 
	
	Если ЕстьИзменения Тогда
		
		Если НЕ Параметры.ЭтоОсновноеХранилище Тогда
			
			Если Параметры.Свойство("ВеткаИсточник") Тогда
				Объект.ВеткаИсточник = Параметры.ВеткаИсточник;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникОбъект.ОбъектыМетаданных") И Параметры.Свойство("Проект")
			И Объект.Ссылка = Справочники.ОбъектыМетаданных.ПустаяСсылка()
			Тогда
			СогласованиеИзмененийДляНовыхОбъектовМетаданных =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Проект, "СогласованиеИзмененийДляНовыхОбъектовМетаданных");
			Если ЗначениеЗаполнено(СогласованиеИзмененийДляНовыхОбъектовМетаданных) Тогда
				Объект.СогласованиеИзменений = СогласованиеИзмененийДляНовыхОбъектовМетаданных;
			КонецЕсли;	
		КонецЕсли;	
		Объект.Записать();
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОбновитьСвойстваПоТипам) Тогда
	
		Параметры.ОбновитьСвойстваПоТипам.Вставить(Объект.Ссылка, ОбновитьСвойстваПоТипам);
	
	КонецЕсли; 
	
	// Расширенные свойства
	Если ОбъектМетаданных.Свойство("РасширенныеСвойства") Тогда
		
		ОбновитьСвойстваПоТипам = Новый Структура;
		
		ЕстьИзменения = Ложь;
		
		РасширенныеСвойстваСсылка = ОбщегоНазначенияСППР.СвойстваОбъектаРасширенногоХранения(Объект.Ссылка);
		Если ЗначениеЗаполнено(РасширенныеСвойстваСсылка) Тогда
		
			РасширенныеСвойстваОбъект = РасширенныеСвойстваСсылка.ПолучитьОбъект();
		Иначе
			
			ИмяСправочника = ОбщегоНазначенияСППР.ИмяСправочникаРасширенныхСвойств(Объект.Ссылка);
			РасширенныеСвойстваОбъект = Справочники[ИмяСправочника].СоздатьЭлемент();
			РасширенныеСвойстваОбъект.Владелец = Объект.Ссылка;
			ЕстьИзменения = Истина;
			
		КонецЕсли; 
		
		Для каждого Свойство Из ОбъектМетаданных.РасширенныеСвойства Цикл
			
			ТипЗначения = ТипЗнч(Свойство.Значение);
			
			Если Свойство.Ключ = "Источник"
				ИЛИ Свойство.Ключ = "Состав"
				ИЛИ Свойство.Ключ = "Тип"
				ИЛИ Свойство.Ключ = "Документы" 
				ИЛИ Свойство.Ключ = "Движения" Тогда
				Если ТипЗначения = Тип("Массив") Тогда
					ОбновитьСвойстваПоТипам.Вставить(Свойство.Ключ, Свойство.Значение);
				Иначе
					Источник = Новый Массив;
					Если ЗначениеЗаполнено(Свойство.Значение) Тогда
						Источник.Добавить(Свойство.Значение);
					КонецЕсли;
					ОбновитьСвойстваПоТипам.Вставить(Свойство.Ключ, Источник);
				КонецЕсли;
				Продолжить;
			КонецЕсли; 
			
			Если ОбъектМетаданных.КлассОбъекта = "FunctionalOptions" И Свойство.Ключ = "Хранение" Тогда
				ОбновитьСвойстваПоТипам.Вставить(Свойство.Ключ, Свойство.Значение);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗначения = Тип("Строка") Тогда
				Значение = ПредопределенныеЗначенияСтроковыхКонстант(Свойство.Значение, ОбъектМетаданных.КлассОбъекта, Свойство.Ключ, Параметры);
				Если РасширенныеСвойстваОбъект[Свойство.Ключ] <> Значение
					И (ЗначениеЗаполнено(РасширенныеСвойстваОбъект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					РасширенныеСвойстваОбъект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
				
			ИначеЕсли ТипЗначения = Тип("Массив") Тогда
				// Массивы пропускаются и должны обрабатываться отдельно
			ИначеЕсли ТипЗначения = Тип("Неопределено") Тогда
				Значение = ЗначениеСвойстваПоУмолчанию(Свойство.Ключ);
				Если РасширенныеСвойстваОбъект[Свойство.Ключ] <> Значение 
					И (ЗначениеЗаполнено(РасширенныеСвойстваОбъект[Свойство.Ключ]) 
					ИЛИ ЗначениеЗаполнено(Значение)) Тогда
				
					РасширенныеСвойстваОбъект[Свойство.Ключ] = Значение;
					ЕстьИзменения = Истина;
				
				КонецЕсли;
			
				
			КонецЕсли; 
			
			
		КонецЦикла; 
		
		Если ЕстьИзменения Тогда
			РасширенныеСвойстваОбъект.Записать();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбновитьСвойстваПоТипам) Тогда
			
			Параметры.ОбновитьСвойстваПоТипам.Вставить(РасширенныеСвойстваОбъект.Ссылка, ОбновитьСвойстваПоТипам);
			
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Объект.Ссылка;

КонецФункции 

Процедура ПрочитатьСвойстваИПодчиненныеОбъекты(Параметры, ОбъектРодитель, Коллекция, КлассОбъекта, uuidРодитель)

	ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[КлассОбъекта];
	
	Если НЕ ОбъектРодитель.Свойство("uuid") ИЛИ НЕ ЗначениеЗаполнено(ОбъектРодитель.uuid) Тогда
		ОбъектРодитель.Вставить("uuid", Коллекция.uuid);
	КонецЕсли; 
	ОбъектРодитель.Вставить("uuidРодитель", uuidРодитель);
	ОбъектРодитель.Вставить("КлассОбъекта", КлассОбъекта);
	
	ОбъектРодитель.Вставить("Код", НовыйКодМетаданных(Параметры, ОбъектРодитель));
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("Properties") Тогда
		
		Свойства = Новый Структура;
		
		КоллекцияСвойств = Коллекция.Свойства();
		Для каждого Свойство Из ПараметрыОбъекта.Properties Цикл
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				Свойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Если Свойство.Ключ = "HierarchyType" 
				И (КоллекцияСвойств.Получить("Hierarchical") = Неопределено
				ИЛИ ВРег(Коллекция["Hierarchical"]) = "FALSE") Тогда
			
				Свойства.Вставить(Свойство.Значение, "");
				Продолжить;
			
			КонецЕсли;
			
			Значение = Коллекция[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				МассивЭлементов = СтрРазделить(Значение, ".");
				Если (МассивЭлементов.Количество()>1) Тогда
					Свойства.Вставить(Свойство.Значение, ПреобразоватьИмяВПуть(Значение));
				Иначе
					Свойства.Вставить(Свойство.Значение, Значение);					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Значение) = Тип("ОбъектXDTO") и Значение.Свойства().Получить("value") <> Неопределено Тогда
				Свойства.Вставить(Свойство.Значение, Значение["value"]);
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЭлементов = СтрРазделить(ЭлементЗначения, ".");
						Если (МассивЭлементов.Количество()>1) Тогда
							МассивЗначений.Добавить(ПреобразоватьИмяВПуть(ЭлементЗначения));
						Иначе
							МассивЗначений.Добавить(ЭлементЗначения);
						КонецЕсли;
						
					КонецЕсли; 
				КонецЦикла;
				
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено 
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.1/data/core" Тогда
				// Анализ многоязыковых строк
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если item.lang = Параметры.КодЯзыкаЗагрузки Тогда
							Свойства.Вставить(Свойство.Значение, item.Content);
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли Значение.item.lang = Параметры.КодЯзыкаЗагрузки Тогда
					Свойства.Вставить(Свойство.Значение, Значение.item.Content);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено 
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.3/xcf/readable" Тогда
				// Анализ 
				МассивЗначений = Новый Массив;
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если ТипЗнч(item) = Тип("Строка") Тогда
							МассивЗначений.Добавить(item);
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли ТипЗнч(Значение.item) = Тип("Строка") Тогда
					МассивЗначений.Добавить(Значение.item);
				КонецЕсли;
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("Types") <> Неопределено 
				ИЛИ Значение.Свойства().Получить("TypeSet") <> Неопределено Тогда
				// Анализ типов
				Типы = ПрочитатьТипыЗначения(Значение, ОбъектРодитель.КлассОбъекта, Свойство.Значение);
				Свойства.Вставить(Свойство.Значение, Типы);
			Иначе
				
				Свойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("Свойства", Свойства);
		
	КонецЕсли;
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("ExtendedProperties") Тогда
		
		РасширенныеСвойства = Новый Структура;
		
		КоллекцияСвойств = Коллекция.Свойства();
		Для каждого Свойство Из ПараметрыОбъекта.ExtendedProperties Цикл
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				РасширенныеСвойства.Вставить(Свойство.Значение, Значение);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("ОбъектXDTO") и Значение.Свойства().Получить("metadata") <> Неопределено Тогда
				
				РасширенныеСвойства.Вставить(Свойство.Значение, ПреобразоватьИмяВПуть(Значение["metadata"]));
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЗначений.Добавить(ЭлементЗначения);
					КонецЕсли; 
					
					Если ТипЗнч(ЭлементЗначения) = Тип("ОбъектXDTO") и ЭлементЗначения.Свойства().Получить("metadata") <> Неопределено Тогда
						МассивЗначений.Добавить(ПреобразоватьИмяВПуть(ЭлементЗначения["metadata"]));
					КонецЕсли;
					
				КонецЦикла;
				
				РасширенныеСвойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.1/data/core" Тогда
				// Анализ многоязыковых строк
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если item.lang = Параметры.КодЯзыкаЗагрузки Тогда
							РасширенныеСвойства.Вставить(Свойство.Значение, item.Content);
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли Значение.item.lang = Параметры.КодЯзыкаЗагрузки Тогда
					РасширенныеСвойства.Вставить(Свойство.Значение, Значение.item.Content);
				Иначе
					РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			ИначеЕсли Значение.Свойства().Получить("item") <> Неопределено 
				И Значение.Свойства().Получить("item").URIПространстваИмен = "http://v8.1c.ru/8.3/xcf/readable" Тогда
				// Анализ 
				МассивЗначений = Новый Массив;
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если ТипЗнч(item) = Тип("Строка") Тогда
							МассивЗначений.Добавить(item);
						ИначеЕсли item.Свойства().Получить("Metadata")<> Неопределено И ТипЗнч(item.Metadata) = Тип("Строка") Тогда
							МассивЗначений.Добавить(item.Metadata);
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли ТипЗнч(Значение.item) = Тип("Строка") Тогда
					МассивЗначений.Добавить(Значение.item);
				КонецЕсли;
				РасширенныеСвойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Свойства().Получить("Types") <> Неопределено 
				ИЛИ Значение.Свойства().Получить("TypeSets") <> Неопределено Тогда
				// Анализ типов
				Типы = ПрочитатьТипыЗначения(Значение, ОбъектРодитель.КлассОбъекта, Свойство.Значение);
				РасширенныеСвойства.Вставить(Свойство.Значение, Типы);
			ИначеЕсли Значение.Свойства().Получить("Object") <> Неопределено Тогда
				Если ТипЗнч(Значение.Object) = Тип("СписокXDTO") Тогда
					МассивОбъектов = Новый Массив;
					Для каждого CurrentObject Из Значение.Object Цикл
						МассивОбъектов.Добавить(CurrentObject);
					КонецЦикла; 
					РасширенныеСвойства.Вставить(Свойство.Значение, МассивОбъектов);
				ИначеЕсли ТипЗнч(Значение.Object) = Тип("Строка") Тогда
					РасширенныеСвойства.Вставить(Свойство.Значение, Значение.Object);
				Иначе
					РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли;
			Иначе
				
				РасширенныеСвойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("РасширенныеСвойства", РасширенныеСвойства);
		
	КонецЕсли;
	
	// Читаем рекурсивно подчиненные объекты, которые не хранятся как файлы
	Если ПараметрыОбъекта.Свойство("ChildObjects") Тогда
		
		ПодчиненныеОбъекты = Новый Массив;
		
		Для каждого ПодчиненныйОбъект Из ПараметрыОбъекта.ChildObjects Цикл
			
			Если Коллекция.Свойства().Получить(ПодчиненныйОбъект) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция[ПодчиненныйОбъект];
			// Если список или одно значение
			Если ТипЗнч(Значение)= Тип("ОбъектXDTO") Тогда
				
				Объект = Новый Структура;
				ПрочитатьСвойстваИПодчиненныеОбъекты(
					Параметры, 
					Объект, 
					Значение, 
					ПодчиненныйОбъект, 
					ОбъектРодитель.uuid);
				ПодчиненныеОбъекты.Добавить(Объект);
				
			ИначеЕсли ТипЗнч(Значение)= Тип("СписокXDTO") Тогда
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Объект = Новый Структура;
					ПрочитатьСвойстваИПодчиненныеОбъекты(
						Параметры, 
						Объект, 
						ЭлементЗначения, 
						ПодчиненныйОбъект, 
						ОбъектРодитель.uuid);
					ПодчиненныеОбъекты.Добавить(Объект);
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("ПодчиненныеОбъекты", ПодчиненныеОбъекты);
		
	КонецЕсли;
		
	// Обработка стандартных реквизитов
	Если ПараметрыОбъекта.Свойство("StandardAttributes") Тогда
		Если НЕ ОбъектРодитель.Свойство("ПодчиненныеОбъекты") Тогда
			ОбъектРодитель.Вставить("ПодчиненныеОбъекты", Новый Массив);
		КонецЕсли;
		
		КоллекцияСтандартныхРеквизитов = Новый Массив;
		Если Коллекция.Свойства().Получить("standardAttributes") = Неопределено Тогда
			// Загружаем стандартные настройки
			 КоллекцияСтандартныхРеквизитов = СтандартныеРеквизитыПоТипу(КлассОбъекта);
			 
		ИначеЕсли ТипЗнч(Коллекция.standardAttributes) = Тип("СписокXDTO") Тогда
			КоллекцияСтандартныхРеквизитов = Коллекция.standardAttributes;
			
		ИначеЕсли ПараметрыОбъекта.standardAttributes.Свойство(Коллекция.standardAttributes.name) Тогда
			КоллекцияСтандартныхРеквизитов.Добавить(Коллекция.standardAttributes);
			
		ИначеЕсли ПолучитьОбъектXDTO(Коллекция.standardAttributes, "Attributes") <> Неопределено
			И ТипЗнч(Коллекция.standardAttributes.Attributes) = Тип("СписокXDTO") Тогда
			КоллекцияСтандартныхРеквизитов = Коллекция.StandardAttributes.Attributes;
			
		ИначеЕсли ПолучитьОбъектXDTO(Коллекция.standardAttributes, "Attributes") <> Неопределено
			И ПараметрыОбъекта.standardAttributes.Свойство(Коллекция.standardAttributes.Attributes.name) Тогда
			КоллекцияСтандартныхРеквизитов.Добавить(Коллекция.standardAttributes.Attributes);
			
		КонецЕсли;
		
		Для каждого StandardAttribute Из КоллекцияСтандартныхРеквизитов Цикл
			
			Если НЕ ПараметрыОбъекта.StandardAttributes.Свойство(StandardAttribute["name"]) Тогда
				Продолжить;
			КонецЕсли;
			
			Типы = Новый Массив;
			Если StandardAttribute["name"] = "Code" Тогда
				Попытка
					ДлинаКода = Число(Коллекция.CodeLength);
					Если ДлинаКода = 0 Тогда
						Продолжить;
					КонецЕсли; 
					Если Коллекция.Свойства().Получить("CodeType") <> Неопределено 
						И ВРег(Коллекция.CodeType) = "NUMBER" Тогда
						Типы.Добавить("Число "+ДлинаКода);
					Иначе
						Типы.Добавить("Строка "+ДлинаКода);
					КонецЕсли; 
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "Description" Тогда
				Попытка
					ДлинаНаименования = Число(Коллекция.DescriptionLength);
					Если ДлинаНаименования = 0 Тогда
						Продолжить;
					КонецЕсли; 
					Типы.Добавить("Строка "+ДлинаНаименования);
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "Owner" Тогда
				Попытка
					Если Коллекция.Owners.Получить("Item")= Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					Если ТипЗнч(Коллекция.Owners.Item) = Тип("СписокXDTO") Тогда
						Для каждого Type Из Коллекция.Owners.Item Цикл
							Типы.Добавить(Type);
						КонецЦикла; 
					Иначе
						Типы.Добавить(Коллекция.Owners.Item);
					КонецЕсли; 
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "Parent" Тогда
				Попытка
					Иерархический = Коллекция.Hierarchical;
					Если НЕ ПредопределенныеЗначенияСтроковыхКонстант(Иерархический, "StandardAttributes") Тогда
						Продолжить;
					КонецЕсли; 
					Типы.Добавить(ОбъектРодитель.ИмяФайла);
				Исключение
					Продолжить;
				КонецПопытки; 
			ИначеЕсли StandardAttribute["name"] = "CalculationType" Тогда
				Попытка
					Если ТипЗнч(Коллекция.ChartOfCalculationTypes) = Тип("СписокXDTO") Тогда
						Для каждого Type Из Коллекция.ChartOfCalculationTypes Цикл
							Типы.Добавить(Type);
						КонецЦикла; 
					Иначе
						Типы.Добавить(Коллекция.ChartOfCalculationTypes);
					КонецЕсли; 
				Исключение
					Продолжить;
				КонецПопытки;
			ИначеЕсли StandardAttribute["name"] = "Recorder" Тогда
				Если Коллекция.Свойства().Получить("WriteMode") <> Неопределено 
					И ВРег(Коллекция.WriteMode) = "INDEPENDENT" Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли StandardAttribute["name"] = "Period" Тогда
				Если Коллекция.Свойства().Получить("InformationRegisterPeriodicity") <> Неопределено 
					И ВРег(Коллекция.InformationRegisterPeriodicity) = "NONPERIODICAL" Тогда
					Продолжить;
				КонецЕсли;
				Типы.Добавить("Дата");
			ИначеЕсли StandardAttribute["name"] = "Date" И КлассОбъекта = "Documents" Тогда
				Типы.Добавить("Дата и время");
			ИначеЕсли StandardAttribute["name"] = "Date" 
				ИЛИ StandardAttribute["name"] = "RegistrationPeriod" Тогда
				Типы.Добавить("Дата");
			ИначеЕсли StandardAttribute["name"] = "Number" И КлассОбъекта <> "DocumentJournals" Тогда
				Попытка
					ДлинаНомера = Число(Коллекция.NumberLength);
					Если ДлинаНомера = 0 Тогда
						Продолжить;
					КонецЕсли;  
					Если Коллекция.Свойства().Получить("NumberType") <> Неопределено 
						И ВРег(Коллекция.NumberType) = "NUMBER" Тогда
						Типы.Добавить("Число "+ДлинаНомера);
					Иначе
						Типы.Добавить("Строка "+ДлинаНомера);
					КонецЕсли;
				Исключение
					Продолжить;
				КонецПопытки; 
			КонецЕсли;
			
			Объект = Новый Структура;
			ПрочитатьСвойстваСтандартныхРеквизитов(
				Параметры, 
				Объект, 
				StandardAttribute, 
				"StandardAttributes", 
				ОбъектРодитель.uuid,
				Типы);
			ОбъектРодитель.ПодчиненныеОбъекты.Добавить(Объект);
		КонецЦикла;
	
	КонецЕсли; 
	
	Если КлассОбъекта = "Constants" Тогда
	
		Объект = Новый Структура;
		Объект.Вставить("uuid", ОбъектРодитель.uuid+ "_Value");
		Объект.Вставить("uuidРодитель", ОбъектРодитель.uuid);
		Объект.Вставить("КлассОбъекта", "ConstantValue");
		
		Объект.Вставить("Код", НовыйКодМетаданных(Параметры, Объект));
		
		Свойства = Новый Структура;
		Свойства.Вставить("Имя", "Value");
		КоллекцияСвойств = Коллекция.Свойства();
		
		Если КоллекцияСвойств.Получить("ToolTip") <> Неопределено И ТипЗнч(Коллекция["ToolTip"]) = Тип("Строка") Тогда
			Свойства.Вставить("Подсказка", Коллекция["ToolTip"]);
		Иначе
			Свойства.Вставить("Подсказка", Неопределено);
		КонецЕсли;
		Если КоллекцияСвойств.Получить("FillChecking") <> Неопределено Тогда
			Свойства.Вставить("ПроверкаЗаполнения", Коллекция["FillChecking"]);
		КонецЕсли;
		Типы = Новый Массив;
		Если КоллекцияСвойств.Получить("Type") <> Неопределено Тогда
			Типы = ПрочитатьТипыЗначения(Коллекция["Type"], Объект.КлассОбъекта, "ТипыЗначенияРеквизита");
		КонецЕсли;
		Свойства.Вставить("ТипыЗначенияРеквизита", Типы);
		
		Объект.Вставить("Свойства", Свойства);
		
		Если НЕ ОбъектРодитель.Свойство("ПодчиненныеОбъекты") Тогда
			ОбъектРодитель.Вставить("ПодчиненныеОбъекты", Новый Массив);
		КонецЕсли; 
		
		ОбъектРодитель.ПодчиненныеОбъекты.Добавить(Объект);
		
	КонецЕсли;
	
	Если КлассОбъекта = "SessionParameter" Тогда
	
		Объект = Новый Структура;
		Объект.Вставить("uuid", ОбъектРодитель.uuid+ "_Value");
		Объект.Вставить("uuidРодитель", ОбъектРодитель.uuid);
		Объект.Вставить("КлассОбъекта", "SessionParameterValue");
		
		Объект.Вставить("Код", НовыйКодМетаданных(Параметры, Объект));
		
		Свойства = Новый Структура;
		Свойства.Вставить("Имя", "Value");
		Свойства.Вставить("ПроверкаЗаполнения", Перечисления.ВариантыПроверкиЗаполнения.НеПроверять);
		КоллекцияСвойств = Коллекция.Свойства();
		
		Типы = Новый Массив;
		Если КоллекцияСвойств.Получить("Type") <> Неопределено Тогда
			Типы = ПрочитатьТипыЗначения(Коллекция["Type"], Объект.КлассОбъекта, "ТипыЗначенияРеквизита");
		КонецЕсли;
		Свойства.Вставить("ТипыЗначенияРеквизита", Типы);
		
		Объект.Вставить("Свойства", Свойства);
		
		Если НЕ ОбъектРодитель.Свойство("ПодчиненныеОбъекты") Тогда
			ОбъектРодитель.Вставить("ПодчиненныеОбъекты", Новый Массив);
		КонецЕсли; 
		
		ОбъектРодитель.ПодчиненныеОбъекты.Добавить(Объект);
		
	КонецЕсли;
	
	// Загружаем типы форм
	Если ПараметрыОбъекта.Свойство("ChildObjectsFiles") 
		И ПараметрыОбъекта.ChildObjectsFiles.Найти("Form") <> Неопределено Тогда
		
		КоллекцияСвойств = Коллекция.Свойства();
		
		ТипыФорм = Новый СписокЗначений;
		
		Для каждого КлючИЗначение Из СтруктураТиповФорм() Цикл
		
			Если КоллекцияСвойств.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция[КлючИЗначение.Ключ];
			Если ТипЗнч(Значение) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			
			ТипыФорм.Добавить(КлючИЗначение.Значение, Значение);
			
		КонецЦикла; 
		
		ТипыФорм.СортироватьПоПредставлению ();
		
		Параметры.ТипыФормОбъектов.Вставить(ОбъектРодитель.uuid, ТипыФорм);
		
	КонецЕсли;
	
КонецПроцедуры

// Читает свойства и свойства подчиненных объектов для загрузки
Процедура ПрочитатьПредопределенныеДанные(Параметры, ОбъектРодитель, Коллекция, КлассОбъекта, uuidРодитель)

	ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[КлассОбъекта];
	
	Если НЕ ОбъектРодитель.Свойство("uuid") ИЛИ НЕ ЗначениеЗаполнено(ОбъектРодитель.uuid) Тогда
		ОбъектРодитель.Вставить("uuid", Коллекция.id);
	КонецЕсли; 
	ОбъектРодитель.Вставить("uuidРодитель", uuidРодитель);
	ОбъектРодитель.Вставить("КлассОбъекта", КлассОбъекта);
	
	ОбъектРодитель.Вставить("Код", НовыйКодМетаданных(Параметры, ОбъектРодитель));
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("Properties") Тогда
		
		Свойства = Новый Структура;
		
		КоллекцияСвойств = Коллекция.Свойства();
		Для каждого Свойство Из ПараметрыОбъекта.Properties Цикл
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				Свойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") 
				ИЛИ ТипЗнч(Значение) = Тип("Число")
				ИЛИ ТипЗнч(Значение) = Тип("Булево")
				ИЛИ ТипЗнч(Значение) = Тип("Дата") Тогда
				
				Свойства.Вставить(Свойство.Значение, Значение);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЗначений.Добавить(ЭлементЗначения);
					КонецЕсли; 
				КонецЦикла;
				
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли Значение.Получить("item") <> Неопределено Тогда
				// Анализ многоязыковых строк
				Если ТипЗнч(Значение.item) = Тип("СписокXDTO") Тогда
					Для каждого item Из Значение.item Цикл
						Если item.lang = Параметры.КодЯзыкаЗагрузки Тогда
							Свойства.Вставить(Свойство.Значение, item.Content);
							Прервать;
						КонецЕсли; 
					КонецЦикла; 
				ИначеЕсли Значение.item.lang = Параметры.КодЯзыкаЗагрузки Тогда
					Свойства.Вставить(Свойство.Значение, Значение.item.Content);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			Иначе
				
				Свойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("Свойства", Свойства);
		
	КонецЕсли;
	
	// Читаем рекурсивно подчиненные предопределенные элементы
	Если ПараметрыОбъекта.Свойство("ChildObjects") Тогда
		
		ПодчиненныеОбъекты = Новый Массив;
		
		Для каждого ПодчиненныйОбъект Из ПараметрыОбъекта.ChildObjects Цикл
			
			Если Коллекция.Свойства().Получить("ChildItems") = Неопределено 
				ИЛИ Коллекция.ChildItems.Получить("Item") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция.ChildItems["Item"];
			// Если список или одно значение
			Если ТипЗнч(Значение)= Тип("ОбъектXDTO") Тогда
				
				Объект = Новый Структура;
				ПрочитатьПредопределенныеДанные(
					Параметры, 
					Объект, 
					Значение, 
					ПодчиненныйОбъект, 
					ОбъектРодитель.uuid);
				ПодчиненныеОбъекты.Добавить(Объект);
				
			ИначеЕсли ТипЗнч(Значение)= Тип("СписокXDTO") Тогда
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Объект = Новый Структура;
					ПрочитатьПредопределенныеДанные(
						Параметры, 
						Объект, 
						ЭлементЗначения, 
						ПодчиненныйОбъект, 
						ОбъектРодитель.uuid);
					ПодчиненныеОбъекты.Добавить(Объект);
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("ПодчиненныеОбъекты", ПодчиненныеОбъекты);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйКодМетаданных(Параметры, ОбъектМетаданных)

	Если Параметры.Нумераторы.Получить(ОбъектМетаданных.КлассОбъекта) <> Неопределено Тогда
	
		Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта] = Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта] + 1;
		
		Возврат Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта];
	
	КонецЕсли;
	
	Если ОбъектМетаданных.КлассОбъекта = "Forms"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Commands"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Templates"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "SessionParameterValue"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "ConstantValue"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AccountingFlags"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AddressingAttributes"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Resources"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Dimensions"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Columns"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "TabularSections"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "StandardAttributes"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Attributes"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "PredefinedData"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "EnumValue" Тогда
	
		Ключ = ОбъектМетаданных.uuidРодитель + "_" + ОбъектМетаданных.КлассОбъекта;
		Если Параметры.Нумераторы.Получить(Ключ) <> Неопределено Тогда
			
			Параметры.Нумераторы[Ключ] = Параметры.Нумераторы[Ключ] + 1;
			
			Возврат Параметры.Нумераторы[Ключ];
			
		КонецЕсли;
		
		Если ОбъектМетаданных.КлассОбъекта = "TabularSections" Тогда
			// Табличные части располагаются после стандартных и обычных реквизитов, признаков учета
			Параметры.Нумераторы.Вставить(Ключ, 4);
		Иначе
			
			Параметры.Нумераторы.Вставить(Ключ, 1);
		КонецЕсли;
		
		Возврат Параметры.Нумераторы[Ключ];
		
	Иначе
		
		Параметры.Нумераторы.Вставить(ОбъектМетаданных.КлассОбъекта, 1);
		
		Возврат Параметры.Нумераторы[ОбъектМетаданных.КлассОбъекта];
		
	КонецЕсли; 
	
КонецФункции

// Процедура обрабатывает расхождения загружаемых метаданных и существующих
Процедура ЗаписатьИзмененияМетаданных(Параметры, ОбъектМетаданных, ЗаписатьСЗаменойUuid = Ложь)

	Ссылка = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuid);
	Объект = Новый Структура("uuidРодитель, КлассОбъекта");
	ЗаполнитьЗначенияСвойств(Объект, ОбъектМетаданных);
	Если ОбъектМетаданных.Свойство("ИмяФайла") Тогда
		Объект.Вставить("ИмяФайла", ОбъектМетаданных.ИмяФайла);
	КонецЕсли;
	Если ОбъектМетаданных.Свойство("Свойства") И ОбъектМетаданных.Свойства.Свойство("Имя") Тогда
		Объект.Вставить("Имя", ОбъектМетаданных.Свойства.Имя);
	Иначе
		Объект.Вставить("Имя", "");
	КонецЕсли;
	Параметры.ОбъектыМетаданных.Вставить(ОбъектМетаданных.uuid, Объект);
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
	
		// Поиск уже созданных объектов, и определяем возможность их обновления
		ПараметрыОбъекта = НайтиОбъектМетаданных(Параметры, ОбъектМетаданных, ЗаписатьСЗаменойUuid);
		
		Если ЗначениеЗаполнено(ПараметрыОбъекта.Ссылка) И НЕ ПараметрыОбъекта.ОбновлятьСвойства Тогда
		
			Параметры.СсылкиМетаданных.Вставить(ОбъектМетаданных.uuid, ПараметрыОбъекта.Ссылка);
			
			Если ОбъектМетаданных.Свойство("ИмяФайла") Тогда
				ИмяКласса = ОбъектМетаданных.ИмяФайла;
			Иначе
				Родитель = ОбъектМетаданных.uuidРодитель;
				ИмяКласса = ОбъектМетаданных.КлассОбъекта + ПолучитьРазделительПути() + ОбъектМетаданных.Свойства.Имя;
				
				Пока Истина Цикл
					ОбъектМетаданныхРодитель = Параметры.ОбъектыМетаданных.Получить(Родитель);
					Если ОбъектМетаданныхРодитель.Свойство("ИмяФайла") Тогда
						ИмяКласса = ОбъектМетаданныхРодитель.ИмяФайла + ПолучитьРазделительПути() + ИмяКласса;
						Прервать;
					Иначе
						ИмяКласса = ОбъектМетаданныхРодитель.КлассОбъекта + ПолучитьРазделительПути() + ОбъектМетаданныхРодитель.Имя +ПолучитьРазделительПути() + ИмяКласса;
						Родитель = ОбъектМетаданныхРодитель.uuidРодитель;
					КонецЕсли; 
				КонецЦикла; 
			
			КонецЕсли; 
			
			Параметры.ТипыМетаданных.Вставить(ИмяКласса, ПараметрыОбъекта.Ссылка);
			
		ИначеЕсли ЗаписатьСЗаменойUuid ИЛИ ЗначениеЗаполнено(ПараметрыОбъекта.Ссылка) Тогда
			// Создаем объект или обновляем его свойства
			
			ПараметрыОбъекта.Ссылка = СоздатьОбновитьОбъектМетаданных(Параметры, ОбъектМетаданных, ПараметрыОбъекта.Ссылка);
			
			Параметры.СсылкиМетаданных.Вставить(ОбъектМетаданных.uuid, ПараметрыОбъекта.Ссылка);
			
			Если ОбъектМетаданных.Свойство("ИмяФайла") Тогда
				ИмяКласса = ОбъектМетаданных.ИмяФайла;
			Иначе
				Родитель = ОбъектМетаданных.uuidРодитель;
				ИмяКласса = ОбъектМетаданных.КлассОбъекта + ПолучитьРазделительПути()+ОбъектМетаданных.Свойства.Имя;
				
				Пока Истина Цикл
					ОбъектМетаданныхРодитель = Параметры.ОбъектыМетаданных.Получить(Родитель);
					Если ОбъектМетаданныхРодитель.Свойство("ИмяФайла") Тогда
						ИмяКласса = ОбъектМетаданныхРодитель.ИмяФайла + ПолучитьРазделительПути() + ИмяКласса;
						Прервать;
					Иначе
						ИмяКласса = ОбъектМетаданныхРодитель.КлассОбъекта + ПолучитьРазделительПути() + ОбъектМетаданныхРодитель.Имя +ПолучитьРазделительПути() + ИмяКласса;
						Родитель = ОбъектМетаданныхРодитель.uuidРодитель;
					КонецЕсли; 
				КонецЦикла; 
			
			КонецЕсли; 
			
			Параметры.ТипыМетаданных.Вставить(ИмяКласса, ПараметрыОбъекта.Ссылка);
			
		Иначе
			
			Параметры.НеНайденныеОбъектыМетаданных.Добавить(ОбъектМетаданных);
			
		КонецЕсли; 
		
		Если (ЗаписатьСЗаменойUuid 
			ИЛИ ЗначениеЗаполнено(ПараметрыОбъекта.Ссылка)) 
			И ОбъектМетаданных.Свойство("ПодчиненныеОбъекты") Тогда
			
			Для каждого ПодчиненныйОбъект Из ОбъектМетаданных.ПодчиненныеОбъекты Цикл
				
				ЗаписатьИзмененияМетаданных(Параметры, ПодчиненныйОбъект, ЗаписатьСЗаменойUuid);
				
			КонецЦикла; 
			
		КонецЕсли; 
	
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьТипыЗначения(Значение, КлассОбъекта, ИмяСвойства = "")

	Типы = Новый Массив;
	Если Значение.Свойства().Получить("Types") <> Неопределено 
		И ТипЗнч(Значение.Types) = Тип("СписокXDTO") Тогда
		Для каждого Type Из Значение.Types Цикл
			Тип = ПредопределенныеЗначенияСтроковыхКонстант(Type, КлассОбъекта, ИмяСвойства);
			Если Тип = "Строка" И Значение.Получить("StringQualifiers") <> Неопределено Тогда
				Тип = Тип + " " + ?(Значение.StringQualifiers.Свойства().Получить("length") <> Неопределено, ?(Значение.StringQualifiers.length = 0, "неогр.", Значение.StringQualifiers.length), "");
			ИначеЕсли Тип = "Дата" И Значение.Получить("DateQualifiers") <> Неопределено Тогда
				Если Значение.DateQualifiers.Свойства().Получить("dateFractions") <> Неопределено и Значение.DateQualifiers.dateFractions = "Time" Тогда
					Тип = "Время";
				ИначеЕсли Значение.DateQualifiers.Свойства().Получить("dateFractions") <> Неопределено и Значение.DateQualifiers.dateFractions = "Date" Тогда
					Тип = "Дата";
				Иначе
					Тип = Тип + " и время";
				КонецЕсли; 
			ИначеЕсли Тип = "Число" И Значение.Получить("NumberQualifiers") <> Неопределено Тогда
				Тип = Тип + " " 
			      + ?(Значение.NumberQualifiers.Свойства().Получить("precision") <> Неопределено, Значение.NumberQualifiers.precision, "") 
				  + ?(Значение.NumberQualifiers.Свойства().Получить("scale") <> Неопределено, "." + Значение.NumberQualifiers.scale, "")
				  + ?(Значение.NumberQualifiers.Свойства().Получить("nonNegative") <> Неопределено, ?(Значение.NumberQualifiers.nonNegative = "true", " неотр.", ""), "");
			КонецЕсли; 
			Типы.Добавить(Тип);
		КонецЦикла; 
	ИначеЕсли Значение.Свойства().Получить("Types") <> Неопределено 
		И ТипЗнч(Значение.Types) = Тип("Строка") Тогда
		Тип = ПредопределенныеЗначенияСтроковыхКонстант(Значение.Types, КлассОбъекта, ИмяСвойства);
		Если Тип = "Строка" И Значение.Получить("StringQualifiers") <> Неопределено Тогда
			Тип = Тип + " " + ?(Значение.StringQualifiers.Свойства().Получить("length") <> Неопределено, Значение.StringQualifiers.length, "");
		ИначеЕсли Тип = "Дата" И Значение.Получить("DateQualifiers") <> Неопределено Тогда
			Если Значение.DateQualifiers.Свойства().Получить("dateFractions") <> Неопределено и Значение.DateQualifiers.dateFractions = "Time" Тогда
				Тип = "Время";
			ИначеЕсли Значение.DateQualifiers.Свойства().Получить("dateFractions") <> Неопределено и Значение.DateQualifiers.dateFractions = "Date" Тогда
				Тип = "Дата";
			Иначе
				Тип = Тип + " и время";
			КонецЕсли; 
		ИначеЕсли Тип = "Число" И Значение.Получить("NumberQualifiers") <> Неопределено Тогда
			Тип = Тип + " " 
			      + ?(Значение.NumberQualifiers.Свойства().Получить("precision") <> Неопределено, Значение.NumberQualifiers.precision, "") 
				  + ?(Значение.NumberQualifiers.Свойства().Получить("scale") <> Неопределено, "." + Значение.NumberQualifiers.scale, "")
				  + ?(Значение.NumberQualifiers.Свойства().Получить("nonNegative") <> Неопределено, ?(Значение.NumberQualifiers.nonNegative = "true", " неотр.", ""), "");
		КонецЕсли; 
		Типы.Добавить(Тип);
	ИначеЕсли Значение.Свойства().Получить("TypeSet") <> Неопределено 
		И ТипЗнч(Значение.TypeSet) = Тип("СписокXDTO") Тогда
		Для каждого TypeSet Из Значение.TypeSet Цикл
			Тип = ПредопределенныеЗначенияСтроковыхКонстант(TypeSet, КлассОбъекта, ИмяСвойства);
			Типы.Добавить(Тип);
		КонецЦикла; 
	ИначеЕсли Значение.Свойства().Получить("TypeSet") <> Неопределено 
		И ТипЗнч(Значение.TypeSet) = Тип("Строка") Тогда
		Тип = ПредопределенныеЗначенияСтроковыхКонстант(Значение.TypeSet, КлассОбъекта, ИмяСвойства);
		Типы.Добавить(Тип);
	КонецЕсли;
	
	Возврат Типы;
	
КонецФункции

Функция ПредопределенныеЗначенияСтроковыхКонстант(Значение, КлассОбъекта, ИмяСвойства = "", Параметры = Неопределено)

	Если ВРег(Значение) = "TRUE" И ИмяСвойства <> "ВидИерархии" Тогда
		Возврат Истина;
	ИначеЕсли ВРег(Значение) = "FALSE" И ИмяСвойства <> "ВидИерархии" Тогда
		Возврат Ложь;
	ИначеЕсли ВРег(Значение) = "BOOLEAN" Тогда
		Возврат "Булево";
	ИначеЕсли ВРег(Значение) = "STRING" Тогда
		Возврат "Строка";
	ИначеЕсли ВРег(Значение) = "DATE" Тогда
		Возврат "Дата";
	ИначеЕсли ВРег(Значение) = "NUMBER" Тогда
		Возврат "Число";
	ИначеЕсли ИмяСвойства = "ТипыЗначенияРеквизита" 
		ИЛИ ИмяСвойства = "Тип" Тогда
		ИменаТипов = Новый Соответствие;
		ИменаТипов.Вставить("BOOLEAN",                        "Булево");
		ИменаТипов.Вставить("STRING",                         "Строка");
		ИменаТипов.Вставить("DATE",                           "Дата");
		ИменаТипов.Вставить("NUMBER",                         "Число");
		ИменаТипов.Вставить("BASE64BINARY",                   "ДвоичныеДанные");
		ИменаТипов.Вставить("VALUESTORAGE",                   "ХранилищеЗначений");
		ИменаТипов.Вставить("UUID",                           "УникальныйИдентификатор");
		ИменаТипов.Вставить("FIXEDARRAY",                     "ФиксированныйМассив");
		ИменаТипов.Вставить("FIXEDSTRUCTURE",                 "ФиксированнаяСтруктура");
		ИменаТипов.Вставить("FIXEDMAP",                       "ФиксированноеСоответствие");
		ИменаТипов.Вставить("NULL",                           "Null");
		ИменаТипов.Вставить("TYPEDESCRIPTION",                "ОписаниеТипов");
		ИменаТипов.Вставить("ENT:ACCUMULATIONRECORDTYPE",        "ВидДвиженияНакопления");
		ИменаТипов.Вставить("ENT:ACCOUNTINGRECORDTYPE",          "ВидДвиженияБухгалтерии");
		ИменаТипов.Вставить("ENT:ACCOUNTTYPE",                   "ВидСчета");
		ИменаТипов.Вставить("CFG:BUSINESSPROCESSROUTEPOINTREF",  "ТочкаМаршрутаБизнесПроцессаСсылка");
		
		ИмяТипа = ИменаТипов.Получить(ВРег(Значение));
		Если ИмяТипа = Неопределено Тогда
			Возврат Значение;
		Иначе
			Возврат ИмяТипа;
		КонецЕсли; 
	ИначеЕсли ИмяСвойства = "ПроверкаЗаполнения" И Значение = "DontCheck" Тогда
		Возврат Перечисления.ВариантыПроверкиЗаполнения.НеПроверять;
	ИначеЕсли ИмяСвойства = "ПроверкаЗаполнения" И Значение = "ShowError" Тогда
		Возврат Перечисления.ВариантыПроверкиЗаполнения.ВыдаватьОшибку;
	ИначеЕсли ИмяСвойства = "ВидИерархии" И (Значение = "HierarchyFoldersAndItems" ИЛИ ВРег(Значение) = "TRUE") Тогда
		Возврат Перечисления.ВидыИерархии.ИерархияГруппИЭлементов;
	ИначеЕсли ИмяСвойства = "ВидИерархии" И Значение = "HierarchyOfItems" Тогда
		Возврат Перечисления.ВидыИерархии.ИерархияЭлементов;
	ИначеЕсли ИмяСвойства = "ВидИерархии" И (Значение = "" ИЛИ ВРег(Значение) = "FALSE") Тогда
		Возврат Перечисления.ВидыИерархии.ПустаяСсылка();
	ИначеЕсли (КлассОбъекта = "StandardAttributes"
		ИЛИ КлассОбъекта = "ConstantValue"
		ИЛИ КлассОбъекта = "SessionParameterValue")
		И ИмяСвойства = "Имя" Тогда
		ИменаСтандартныхРеквизитов = Новый Соответствие;
		ИменаСтандартныхРеквизитов.Вставить("Description",        "Наименование");
		ИменаСтандартныхРеквизитов.Вставить("Code",               "Код");
		ИменаСтандартныхРеквизитов.Вставить("Date",               "Дата");
		ИменаСтандартныхРеквизитов.Вставить("Parent",             "Родитель");
		ИменаСтандартныхРеквизитов.Вставить("Owner",              "Владелец");
		ИменаСтандартныхРеквизитов.Вставить("Number",             "Номер");
		ИменаСтандартныхРеквизитов.Вставить("Value",              "Значение");
		ИменаСтандартныхРеквизитов.Вставить("Period",             "Период");
		ИменаСтандартныхРеквизитов.Вставить("Recorder",           "Регистратор");
		ИменаСтандартныхРеквизитов.Вставить("Ref",                "Ссылка");
		ИменаСтандартныхРеквизитов.Вставить("RegistrationPeriod", "ПериодРегистрации");
		ИменаСтандартныхРеквизитов.Вставить("CalculationType",    "ВидРасчета");
		
		ИмяСтандартногоРеквизита = ИменаСтандартныхРеквизитов.Получить(Значение);
		Если ИмяСтандартногоРеквизита = Неопределено Тогда
			Возврат Значение;
		Иначе
			Возврат ИмяСтандартногоРеквизита;
		КонецЕсли;
	ИначеЕсли КлассОбъекта = "ScheduledJob" И ИмяСвойства = "ИмяМетода" Тогда
		Возврат СтрЗаменить(Значение, "CommonModule.", "");
	ИначеЕсли КлассОбъекта = "EventSubscription" И ИмяСвойства = "Обработчик" Тогда
		Возврат СтрЗаменить(Значение, "CommonModule.", "");
	ИначеЕсли ИмяСвойства = "ГруппаКоманд" Тогда
		СтандартныеГруппыКоманд = Новый Соответствие;
		СтандартныеГруппыКоманд.Вставить("FormCommandBarImportant",      Перечисления.СтандартныеГруппыКоманд.КоманднаяПанельФормыВажное);
		СтандартныеГруппыКоманд.Вставить("FormCommandBarCreateBasedOn",  Перечисления.СтандартныеГруппыКоманд.КоманднаяПанельФормыСоздатьНаОсновании);
		СтандартныеГруппыКоманд.Вставить("ActionsPanelReports",          Перечисления.СтандартныеГруппыКоманд.ПанельДействийОтчеты);
		СтандартныеГруппыКоманд.Вставить("ActionsPanelTools",            Перечисления.СтандартныеГруппыКоманд.ПанельДействийСервис);
		СтандартныеГруппыКоманд.Вставить("ActionsPanelCreate",           Перечисления.СтандартныеГруппыКоманд.ПанельДействийСоздать);
		СтандартныеГруппыКоманд.Вставить("NavigationPanelImportant",     Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииВажное);
		СтандартныеГруппыКоманд.Вставить("NavigationPanelOrdinary",      Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииОбычное);
		СтандартныеГруппыКоманд.Вставить("NavigationPanelSeeAlso",       Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииСмТакже);
		СтандартныеГруппыКоманд.Вставить("FormNavigationPanelImportant", Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииФормыВажное);
		СтандартныеГруппыКоманд.Вставить("FormNavigationPanelGoTo",      Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииФормыПерейти);
		СтандартныеГруппыКоманд.Вставить("FormNavigationPanelSeeAlso",   Перечисления.СтандартныеГруппыКоманд.ПанельНавигацииФормыСмТакже);
		
		Если Найти(Значение, "CommandGroup.") > 0 Тогда
			Если Параметры <> Неопределено Тогда
				Возврат Параметры.ТипыМетаданных.Получить(Значение);
			Иначе
				Возврат Справочники.ОбъектыМетаданных.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли;
		Возврат СтандартныеГруппыКоманд.Получить(Значение);
	ИначеЕсли ИмяСвойства = "Категория" Тогда
		КатегорииГруппКоманд = Новый Соответствие;
		КатегорииГруппКоманд.Вставить("NavigationPanel",     Перечисления.КатегорииГруппКоманд.ПанельНавигации);
		КатегорииГруппКоманд.Вставить("FormNavigationPanel", Перечисления.КатегорииГруппКоманд.ПанельНавигацииФормы);
		КатегорииГруппКоманд.Вставить("ActionsPanel",        Перечисления.КатегорииГруппКоманд.ПанельДействий);
		КатегорииГруппКоманд.Вставить("FormCommandBar",      Перечисления.КатегорииГруппКоманд.КоманднаяПанельФормы);
		
		Возврат КатегорииГруппКоманд.Получить(Значение);
	ИначеЕсли КлассОбъекта = "InformationRegisters" И ИмяСвойства = "РегистрПодчиненРегистратору" И Значение = "RecorderSubordinate" Тогда
		Возврат Истина;
	ИначеЕсли КлассОбъекта = "InformationRegisters" И ИмяСвойства = "РегистрПодчиненРегистратору" И Значение = "Independent" Тогда
		Возврат Ложь;
	ИначеЕсли (КлассОбъекта = "AccumulationRegisters" ИЛИ КлассОбъекта = "AccountingRegisters" ИЛИ КлассОбъекта = "CalculationRegisters") И ИмяСвойства = "РегистрПодчиненРегистратору" Тогда
		Возврат Истина;
	ИначеЕсли ИмяСвойства = "ВидРегистраНакопления" И Значение = "Turnovers" Тогда
		Возврат Перечисления.ВидыРегистровНакопления.Обороты;
	ИначеЕсли ИмяСвойства = "ВидРегистраНакопления" И Значение = "Balance" Тогда
		Возврат Перечисления.ВидыРегистровНакопления.Остатки;
	ИначеЕсли КлассОбъекта = "EventSubscription" И ИмяСвойства = "Событие" Тогда
		События = Новый Соответствие;
		События.Вставить("BeforeDelete",                    "ПередУдалением");
		События.Вставить("FillCheckProcessing",             "ОбработкаПроверкиЗаполнения");
		События.Вставить("OnSetNewNumber",                  "ПриУстановкеНовогоНомера");
		События.Вставить("Posting",                         "ОбработкаПроведения");
		События.Вставить("BeforeWrite",                     "ПередЗаписью");
		События.Вставить("UndoPosting",                     "ОбработкаУдаленияПроведения");
		События.Вставить("InteractiveActivationProcessing", "ОбработкаИнтерактивнойАктивации");
		События.Вставить("CheckExecutionProcessing",        "ОбработкаПроверкиВыполнения");
		События.Вставить("BeforeExecute",                   "ПередВыполнением");
		События.Вставить("BeforeExecuteInteractively",      "ПередИнтерактивнымВыполнением");
		События.Вставить("OnExecute",                       "ПриВыполнении");
		События.Вставить("OnSendDataToSlave",               "ПриОтправкеДанныхПодчиненному");
		События.Вставить("OnSendDataToMaster",              "ПриОтправкеДанныхГлавному");
		События.Вставить("OnReceiveDataFromSlave",          "ПриПолученииДанныхОтПодчиненного");
		События.Вставить("OnReceiveDataFromMaster",         "ПриПолученииДанныхОтГлавного");
		События.Вставить("OnSendNodeDataToSlave",           "ПриОтправкеДанныхУзлаПодчиненному");
		События.Вставить("OnReceiveNodeDataFromMaster",     "ПриПолученииДанныхУзлаОтГлавного");
		События.Вставить("ChoiceDataGetProcessing",         "ОбработкаПолученияДанныхВыбора");
		События.Вставить("FormGetProcessing",               "ОбработкаПолученияФормы");
		События.Вставить("PresentationFieldsGetProcessing", "ОбработкаПолученияПолейПредставления");
		События.Вставить("PresentationGetProcessing",       "ОбработкаПолученияПредставления");
		События.Вставить("SaveProcessing",                  "ОбработкаСохранения");
		События.Вставить("LoadProcessing",                  "ОбработкаЗагрузки");
		События.Вставить("GetDescriptionProcessing",        "ОбработкаПолученияОписания");
		События.Вставить("SetDescriptionProcessing",        "ОбработкаУстановкиОписания");
		События.Вставить("OnWrite",                         "ПриЗаписи");
		События.Вставить("OnSetNewCode",                    "ПриУстановкеНовогоКода");
		События.Вставить("OnCopy",                          "ПриКопировании");
		События.Вставить("Filling",                         "ОбработкаЗаполнения");
		
		Возврат События.Получить(Значение);
		
	ИначеЕсли КлассОбъекта = "Right" И ИмяСвойства = "Право" Тогда
		Права = Новый Соответствие;
		Права.Вставить("Read",   Перечисления.ПраваДоступа.Чтение);
		Права.Вставить("Insert", Перечисления.ПраваДоступа.Добавление);
		Права.Вставить("Update", Перечисления.ПраваДоступа.Изменение);
		Права.Вставить("Delete", Перечисления.ПраваДоступа.Удаление);
		Права.Вставить("Use",    Перечисления.ПраваДоступа.Использование);
		Права.Вставить("View",   Перечисления.ПраваДоступа.Просмотр);
		
		Возврат Права.Получить(Значение);
	ИначеЕсли ИмяСвойства = "ПеремещениеГраницыПриПроведении" И Значение = "DontMove" Тогда
		Возврат Перечисления.ПеремещениеГраницыПриПроведении.НеПеремещать;
	ИначеЕсли ИмяСвойства = "ПеремещениеГраницыПриПроведении" И Значение = "Move" Тогда
		Возврат Перечисления.ПеремещениеГраницыПриПроведении.Перемещать;
	ИначеЕсли ИмяСвойства = "ПовторноеИспользованиеВозвращаемыхЗначений" И Значение = "DontUse" Тогда
		Возврат Перечисления.ВариантыПовторногоИспользованияВозвращаемыхЗначений.НеИспользовать;
	ИначеЕсли ИмяСвойства = "ПовторноеИспользованиеВозвращаемыхЗначений" И Значение = "DuringSession" Тогда
		Возврат Перечисления.ВариантыПовторногоИспользованияВозвращаемыхЗначений.НаВремяСеанса;
	ИначеЕсли ИмяСвойства = "ПовторноеИспользованиеВозвращаемыхЗначений" И Значение = "DuringRequest" Тогда
		Возврат Перечисления.ВариантыПовторногоИспользованияВозвращаемыхЗначений.НаВремяВызова;
	ИначеЕсли ИмяСвойства = "РазделениеДанных" И Значение = "DontUse" Тогда
		Возврат Ложь;
	ИначеЕсли ИмяСвойства = "РазделениеДанных" И Значение = "Separate" Тогда
		Возврат Истина;
	ИначеЕсли ИмяСвойства = "Автоиспользование" И Значение = "Use" Тогда
		Возврат Перечисления.АвтоИспользованиеОбщегоРеквизита.Использовать;
	ИначеЕсли ИмяСвойства = "Автоиспользование" И Значение = "DontUse" Тогда
		Возврат Перечисления.АвтоИспользованиеОбщегоРеквизита.НеИспользовать;
	ИначеЕсли (КлассОбъекта = "Templates" ИЛИ КлассОбъекта = "CommonTemplate") И ИмяСвойства = "ТипМакета" Тогда
		ТипыМакетов = Новый Соответствие;
		ТипыМакетов.Вставить("ActiveDocument",                    Перечисления.ТипыМакетов.ActiveDocument);
		ТипыМакетов.Вставить("HTMLDocument",                      Перечисления.ТипыМакетов.HTMLДокумент);
		ТипыМакетов.Вставить("GeographicalSchema",                Перечисления.ТипыМакетов.ГеографическаяСхема);
		ТипыМакетов.Вставить("GraphicalSchema",                   Перечисления.ТипыМакетов.ГрафическаяСхема);
		ТипыМакетов.Вставить("BinaryData",                        Перечисления.ТипыМакетов.ДвоичныеДанные);
		ТипыМакетов.Вставить("DataCompositionAppearanceTemplate", Перечисления.ТипыМакетов.МакетОформленияКомпоновкиДанных);
		ТипыМакетов.Вставить("DataCompositionSchema",             Перечисления.ТипыМакетов.СхемаКомпоновкиДанных);
		ТипыМакетов.Вставить("SpreadsheetDocument",               Перечисления.ТипыМакетов.ТабличныйДокумент);
		ТипыМакетов.Вставить("TextDocument",                      Перечисления.ТипыМакетов.ТекстовыйДокумент);
		
		Возврат ТипыМакетов.Получить(Значение);
	КонецЕсли; 
	
	Возврат Значение;

КонецФункции

Процедура ПрочитатьСвойстваСтандартныхРеквизитов(Параметры, ОбъектРодитель, Коллекция, КлассОбъекта, uuidРодитель, Типы)

	ПараметрыОбъекта = Параметры.ЗагружаемыеОбъекты[КлассОбъекта];
	
	ОбъектРодитель.Вставить("uuid", uuidРодитель+ "_"+Коллекция["name"]);
	ОбъектРодитель.Вставить("uuidРодитель", uuidРодитель);
	ОбъектРодитель.Вставить("КлассОбъекта", КлассОбъекта);
	
	ОбъектРодитель.Вставить("Код", НовыйКодМетаданных(Параметры, ОбъектРодитель));
	
	// Читаем свойства
	Если ПараметрыОбъекта.Свойство("Properties") Тогда
		
		Свойства = Новый Структура;
		
		Если ТипЗнч(Коллекция) = Тип("ОбъектXDTO") Тогда
			КоллекцияСвойств = Коллекция.Свойства();
		Иначе
			КоллекцияСвойств = Коллекция;
		КонецЕсли; 
		
		Для каждого Свойство Из ПараметрыОбъекта.Properties Цикл
			
			Если Свойство.Ключ = "Type" Тогда
				Свойства.Вставить(Свойство.Значение, Типы);
				Продолжить;
			КонецЕсли;
			
			Если КоллекцияСвойств.Получить(Свойство.Ключ) = Неопределено Тогда
				Свойства.Вставить(Свойство.Значение, Неопределено);
				Продолжить;
			КонецЕсли;
			
			Значение = Коллекция[Свойство.Ключ];
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				
				Свойства.Вставить(Свойство.Значение, Значение);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO") Тогда
				
				МассивЗначений = Новый Массив;
				
				Для каждого ЭлементЗначения Из Значение Цикл
					
					Если ТипЗнч(ЭлементЗначения) = Тип("Строка") Тогда
						МассивЗначений.Добавить(ЭлементЗначения);
					КонецЕсли; 
				КонецЦикла;
				
				Свойства.Вставить(Свойство.Значение, МассивЗначений);
				
			ИначеЕсли ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Получить("key") <> Неопределено Тогда
				// Анализ многоязыковых строк
				Если Значение.key = Параметры.КодЯзыкаЗагрузки Тогда
					Свойства.Вставить(Свойство.Значение, Значение.value);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(Значение) = Тип("ОбъектXDTO") И Значение.Свойства().Получить("Types") <> Неопределено Тогда
				// Анализ типов
				Если ТипЗнч(Значение.Types) = Тип("СписокXDTO") Тогда
					Типы = Новый Массив;
					Для каждого Type Из Значение.Types Цикл
						Типы.Добавить(Type);
					КонецЦикла; 
					Свойства.Вставить(Свойство.Значение, Типы);
				ИначеЕсли ТипЗнч(Значение.Types) = Тип("Строка") Тогда
					Свойства.Вставить(Свойство.Значение, Значение.Types);
				Иначе
					Свойства.Вставить(Свойство.Значение, Неопределено);
				КонецЕсли;
			Иначе
				
				Свойства.Вставить(Свойство.Значение, Неопределено);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		ОбъектРодитель.Вставить("Свойства", Свойства);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиОбъектМетаданных(Параметры, ОбъектМетаданных, ИскатьВСуществующихUuid = Ложь)

	ПараметрыОбъекта = Новый Структура("Ссылка, ОбновлятьСвойства", Неопределено, Истина);
	
	Если ОбъектМетаданных.КлассОбъекта = "Configuration" Тогда // Корень конфигурации
	
		ПараметрыОбъекта = Новый Структура("Ссылка, ОбновлятьСвойства", Параметры.Проект, Ложь);
		Возврат ПараметрыОбъекта;
	
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "StandardAttributes"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Dimensions"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Resources" 
		ИЛИ ОбъектМетаданных.КлассОбъекта = "Columns"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AccountingFlags"
		ИЛИ ОбъектМетаданных.КлассОбъекта = "AddressingAttributes" Тогда // Стандартный реквизит, измерение, ресурс, графа, признак учета, реквизит адресации
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = &ВидРеквизита
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Родитель.ВидРеквизита = &ВидРеквизитаРодителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = &ВидРеквизита
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ТаблицаПоиска.Родитель.ВидРеквизита = &ВидРеквизитаРодителя
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", ""));
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ПредопределенныеЗначенияСтроковыхКонстант(ОбъектМетаданных.Свойства.Имя, ОбъектМетаданных.КлассОбъекта, "Имя"));
		
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.ПустаяСсылка();
		ВидРеквизита = Перечисления.ВидыРеквизитов.ПустаяСсылка();
		
		Если ОбъектМетаданных.КлассОбъекта = "StandardAttributes" Тогда // Стандартный реквизит
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.СтандартныеРеквизиты;
			ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныйРеквизит;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Dimensions" Тогда // Измерение
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.Измерения;
			ВидРеквизита = Перечисления.ВидыРеквизитов.Измерение;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Resources" Тогда // Ресурс
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.Ресурсы;
			ВидРеквизита = Перечисления.ВидыРеквизитов.Ресурс;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Columns" Тогда // Графа
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.Графы;
			ВидРеквизита = Перечисления.ВидыРеквизитов.Графа;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AccountingFlags" Тогда // Признак учета
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.ПризнакиУчета;
			ВидРеквизита = Перечисления.ВидыРеквизитов.ПризнакУчета;
		ИначеЕсли ОбъектМетаданных.КлассОбъекта = "AddressingAttributes" Тогда // Реквизиты адресации
			ВидРеквизитаРодителя = Перечисления.ВидыРеквизитов.РеквизитыАдресации;
			ВидРеквизита = Перечисления.ВидыРеквизитов.РеквизитАдресации;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидРеквизитаРодителя", ВидРеквизитаРодителя);
		Запрос.УстановитьПараметр("ВидРеквизита", ВидРеквизита);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Attributes" Тогда // Реквизит
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ВЫБОР
		|			КОГДА &Родитель = НЕОПРЕДЕЛЕНО
		|					И ТаблицаПоиска.Родитель.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизиты)
		|				ТОГДА ИСТИНА
		|			КОГДА &Родитель <> НЕОПРЕДЕЛЕНО
		|					И ТаблицаПоиска.Родитель = &Родитель
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.РеквизитыОбъектовМетаданных") Тогда
			// Реквизит ТЧ
			Запрос.УстановитьПараметр("Родитель", Родитель);
			Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Владелец"));
		Иначе
			Запрос.УстановитьПараметр("Владелец", Родитель);
			Запрос.УстановитьПараметр("Родитель", Неопределено);
		КонецЕсли; 
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "TabularSections" Тогда // Табличная часть
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.ТабличнаяЧасть)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.ТабличнаяЧасть)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		Запрос.УстановитьПараметр("Родитель", РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных));
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "ConstantValue" 
		ИЛИ ОбъектМетаданных.КлассОбъекта = "SessionParameterValue" Тогда // Значение константы или параметра сеанса
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.ВидРеквизита = ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныйРеквизит)
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", СтрЗаменить(ОбъектМетаданных.uuid, ОбъектМетаданных.uuidРодитель+"_", ""));
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ПредопределенныеЗначенияСтроковыхКонстант(ОбъектМетаданных.Свойства.Имя, ОбъектМетаданных.КлассОбъекта, "Имя"));
		
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Commands" Тогда // Команды объекта
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.КомандыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.КомандыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Forms" Тогда // Формы объекта
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ФормыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ФормыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Templates" Тогда // Макет объекта
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.МакетыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.МакетыОбъектовМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "PredefinedData" Тогда // Предопределенные данные
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
			Запрос.УстановитьПараметр("Владелец", Родитель);
		Иначе
			Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Владелец"));
		КонецЕсли; 
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "EnumValue" Тогда // Значение перечисления
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ПредопределенныеДанные КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Владелец
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Владелец = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Запрос.УстановитьПараметр("Владелец", Владелец);
		
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	ИначеЕсли ОбъектМетаданных.КлассОбъекта = "Subsystems" Тогда // Подсистема
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.Подсистемы КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.uuid = &uuid
		|	И ТаблицаПоиска.Владелец = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.Подсистемы КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Родитель = &Родитель
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Владелец = &Проект
		|	И ТаблицаПоиска.Имя = &Имя";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Родитель = Параметры.СсылкиМетаданных.Получить(ОбъектМетаданных.uuidРодитель);
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.Подсистемы") Тогда
			Запрос.УстановитьПараметр("Родитель", Родитель);
		Иначе
			Запрос.УстановитьПараметр("Родитель", Справочники.Подсистемы.ПустаяСсылка());
		КонецЕсли; 
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя);
		
	Иначе
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Проект
		|	И ТаблицаПоиска.uuid = &uuid
		|	И НЕ ТаблицаПоиска.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПоиска.Ссылка,
		|	ВЫБОР
		|		КОГДА &ЭтоОсновноеХранилище
		|				ИЛИ ТаблицаПоиска.ВеткаИсточник = &ВеткаИсточник
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбновлятьСвойства
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ТаблицаПоиска
		|ГДЕ
		|	ТаблицаПоиска.Владелец = &Проект
		|	И (&ИскатьВСуществующихUuid
		|			ИЛИ ТаблицаПоиска.uuid = """")
		|	И НЕ ТаблицаПоиска.ПометкаУдаления
		|	И ТаблицаПоиска.Имя = &Имя
		|	И ТаблицаПоиска.Родитель = &Родитель
		|	И НЕ ТаблицаПоиска.ЭтоГруппа";
		
		Запрос.УстановитьПараметр("uuid", ОбъектМетаданных.uuid);
		Запрос.УстановитьПараметр("Проект", Параметры.Проект);
		Запрос.УстановитьПараметр("Имя", ОбъектМетаданных.Свойства.Имя); // Формируем наименование для поиска
		Запрос.УстановитьПараметр("Родитель", РодительОбъектаМетаданных(Параметры.Проект, ОбъектМетаданных.КлассОбъекта, Параметры.СсылкиМетаданных));
	
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ЭтоОсновноеХранилище", Параметры.ЭтоОсновноеХранилище);
	Запрос.УстановитьПараметр("ИскатьВСуществующихUuid", ИскатьВСуществующихUuid);
	
	Если Параметры.Свойство("ВеткаИсточник") Тогда
		Запрос.УстановитьПараметр("ВеткаИсточник", Параметры.ВеткаИсточник);
	Иначе	
		Запрос.УстановитьПараметр("ВеткаИсточник", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Проект, "Ветка"));
	КонецЕсли;	
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатыЗапроса[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ВыборкаДетальныеЗаписи);
		
	Иначе
		ВыборкаДетальныеЗаписи = РезультатыЗапроса[1].Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, ВыборкаДетальныеЗаписи);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;

КонецФункции

Функция РодительОбъектаМетаданных(Проект, КлассОбъекта, СсылкиМетаданных)

	Родитель = СсылкиМетаданных.Получить(КлассОбъекта);
	Если ЗначениеЗаполнено(Родитель) Тогда
	
		Возврат Родитель;
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыМетаданных.Ссылка
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.ЭтоГруппа
		|	И НЕ ОбъектыМетаданных.ПометкаУдаления
		|	И ОбъектыМетаданных.Владелец = &Владелец
		|	И ОбъектыМетаданных.ВидОбъектаМетаданныхВЕдЧисле = &ВидОбъектаМетаданныхВЕдЧисле";
		
		Запрос.УстановитьПараметр("Владелец", Проект);
		Запрос.УстановитьПараметр("ВидОбъектаМетаданныхВЕдЧисле", НаименованиеКлассаОбъекта(КлассОбъекта));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Родитель = Неопределено;
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			
			Родитель = ВыборкаДетальныеЗаписи.Ссылка;
			СсылкиМетаданных.Вставить(КлассОбъекта, ВыборкаДетальныеЗаписи.Ссылка);
			
		КонецЕсли;
	
		Возврат Родитель;
	
	КонецЕсли; 

КонецФункции 

Функция НайтиСоздатьГруппуРеквизитов(СсылкаОбъектМетаданных, ВидРеквизита, СсылкиМетаданных)

	КлючСсылкиМетаданных = Строка(СсылкаОбъектМетаданных.УникальныйИдентификатор())+ "_"+ВидРеквизита;
	
	Группа = СсылкиМетаданных.Получить(КлючСсылкиМетаданных);
	Если ЗначениеЗаполнено(Группа) Тогда
	
		Возврат Группа;
	
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РеквизитыОбъектовМетаданных.Ссылка
		|ИЗ
		|	Справочник.РеквизитыОбъектовМетаданных КАК РеквизитыОбъектовМетаданных
		|ГДЕ
		|	НЕ РеквизитыОбъектовМетаданных.ПометкаУдаления
		|	И РеквизитыОбъектовМетаданных.Владелец = &ОбъектМетаданных
		|	И РеквизитыОбъектовМетаданных.ВидРеквизита = &ВидРеквизита
		|	И РеквизитыОбъектовМетаданных.uuid = """"";
		
		Запрос.УстановитьПараметр("ВидРеквизита", ВидРеквизита);
		Запрос.УстановитьПараметр("ОбъектМетаданных", СсылкаОбъектМетаданных);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если НЕ РезультатЗапроса.Пустой() И ВыборкаДетальныеЗаписи.Следующий() ТОгда
			Группа = ВыборкаДетальныеЗаписи.Ссылка;
			СсылкиМетаданных.Вставить(КлючСсылкиМетаданных, Группа);
		Иначе
			
			Объект = Справочники.РеквизитыОбъектовМетаданных.СоздатьГруппу();
			
			Объект.ВидРеквизита = ВидРеквизита;
			Объект.Владелец     = СсылкаОбъектМетаданных;
			Если ВидРеквизита = Перечисления.ВидыРеквизитов.СтандартныеРеквизиты Тогда
				Объект.Имя          = "СтандартныеРеквизиты";
				Объект.Синоним      = НСтр("ru = 'Стандартные реквизиты'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Реквизиты Тогда
				Объект.Имя          = "Реквизиты";
				Объект.Синоним      = НСтр("ru = 'Реквизиты'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Измерения Тогда
				Объект.Имя          = "Измерения";
				Объект.Синоним      = НСтр("ru = 'Измерения'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Ресурсы Тогда
				Объект.Имя          = "Ресурсы";
				Объект.Синоним      = НСтр("ru = 'Ресурсы'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.Графы Тогда
				Объект.Имя          = "Графы";
				Объект.Синоним      = НСтр("ru = 'Графы'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.ПризнакиУчета Тогда
				Объект.Имя          = "ПризнакиУчета";
				Объект.Синоним      = НСтр("ru = 'Признаки учета'");
			ИначеЕсли ВидРеквизита = Перечисления.ВидыРеквизитов.РеквизитыАдресации Тогда
				Объект.Имя          = "РеквизитыАдресации";
				Объект.Синоним      = НСтр("ru = 'Реквизиты адресации'");
			КонецЕсли; 
			
			Объект.Записать();
			Группа = Объект.Ссылка;
			СсылкиМетаданных.Вставить(КлючСсылкиМетаданных, Группа);
			
		КонецЕсли;
		
		Возврат Группа;
		
	КонецЕсли; 

КонецФункции 

#КонецОбласти

#Область НастройкиЧтенияКонфигурацииEDT

// Функция возвращает права по умолчанию для всех объектов
//
// Параметры:
//  Параметры	 - Структура - настройк и параметры
// 
// Возвращаемое значение:
//  Соответствие - Ключем является полное имя объекта, в значении соответствие прав
//
Функция ПолучитьПраваПоУмолчаниюДляВсехОбъектов(Параметры)

	КоллекцияПравПоУмолчанию = Новый Соответствие;
	
	// Список возможных прав
	//Перечисления.ПраваДоступа.Чтение
	//Перечисления.ПраваДоступа.Добавление
	//Перечисления.ПраваДоступа.Изменение
	//Перечисления.ПраваДоступа.Удаление
	//Перечисления.ПраваДоступа.Использование
	//Перечисления.ПраваДоступа.Просмотр
	
	Для каждого Объект Из Параметры.ТипыМетаданных Цикл
		
		Имена = СтрРазделить(Объект.Ключ, ".");
		Если Имена.Количество()<>2 Тогда
			Продолжить;
		КонецЕсли;
		
		КлассОбъекта =  Имена[0];
		
		Если Найти(КлассОбъекта, "ExchangePlans") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "FilterCriteria") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "CommonForms") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "CommonCommands") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Constants") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Catalogs") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Sequences") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Documents") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "DocumentJournals") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Reports") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Использование);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "DataProcessors") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Использование);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "InformationRegisters") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "AccumulationRegisters") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ChartsOfCharacteristicTypes") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ChartsOfAccounts") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "AccountingRegisters") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ChartsOfCalculationTypes") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "CalculationRegisters") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Просмотр);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "BusinessProcesses") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "Tasks") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Чтение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Добавление);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Изменение);
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Удаление);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
		Если Найти(КлассОбъекта, "ExternalDataSource") > 0 Тогда
			
			ПраваОбъекта = Новый Соответствие;
			ПраваОбъекта.Вставить(Перечисления.ПраваДоступа.Использование);
			
			КоллекцияПравПоУмолчанию.Вставить(Объект.Ключ, ПраваОбъекта);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат КоллекцияПравПоУмолчанию;

КонецФункции 

Функция СтандартныеРеквизитыПоТипу(КлассОбъекта)

	КоллекцияСтандартныхРеквизитов = Новый Массив;
	
	Если КлассОбъекта = "ExchangePlans" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "Catalogs" Тогда
	
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Parent");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Owner");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "Documents" Тогда
	
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "DocumentJournals" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Ref");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "InformationRegisters" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Period");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "AccountingRegisters" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Period");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "AccumulationRegisters" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Period");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "CalculationRegisters" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Recorder");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "RegistrationPeriod");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "CalculationType");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "ChartsOfCharacteristicTypes" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "ChartsOfAccounts" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "ChartsOfCalculationTypes" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Code");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "BusinessProcesses" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	ИначеЕсли КлассОбъекта = "Tasks" Тогда
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Date");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Number");
		СтандартныйРеквизит.Вставить("FillChecking", "DontCheck");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
		СтандартныйРеквизит = Новый Соответствие;
		СтандартныйРеквизит.Вставить("name", "Description");
		СтандартныйРеквизит.Вставить("FillChecking", "ShowError");
		КоллекцияСтандартныхРеквизитов.Добавить(СтандартныйРеквизит);
		
	КонецЕсли; 
	
	Возврат КоллекцияСтандартныхРеквизитов;

КонецФункции

Функция НаименованиеКлассаОбъекта(КлассОбъекта)
		
	Если КлассОбъекта = "Subsystems" Тогда
		Возврат "Подсистема";
	КонецЕсли;
	
	Если КлассОбъекта = "Constants" Тогда
		Возврат "Константа";
	КонецЕсли;
	
	Если КлассОбъекта = "Catalogs" Тогда
		Возврат "Справочник";
	КонецЕсли;
	
	Если КлассОбъекта = "Documents" Тогда
		Возврат "Документ";
	КонецЕсли; 
	
	Если КлассОбъекта = "Sequences" Тогда
		Возврат "Последовательность";
	КонецЕсли; 
	
	Если КлассОбъекта = "DocumentNumerators" Тогда
		Возврат "Нумератор";
	КонецЕсли;
	
	Если КлассОбъекта = "DocumentJournals" Тогда
		Возврат "ЖурналДокументов";
	КонецЕсли; 
	
	Если КлассОбъекта = "Enums" Тогда
		Возврат "Перечисление";
	КонецЕсли;
	
	Если КлассОбъекта = "Reports" Тогда
		Возврат "Отчет";
	КонецЕсли;
	
	Если КлассОбъекта = "DataProcessors" Тогда
		Возврат "Обработка";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartsOfCharacteristicTypes" Тогда
		Возврат "ПланВидовХарактеристик";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartsOfAccounts" Тогда
		Возврат "ПланСчетов";
	КонецЕсли;
	
	Если КлассОбъекта = "ChartsOfCalculationTypes" Тогда
		Возврат "ПланВидовРасчета";
	КонецЕсли;
	
	Если КлассОбъекта = "InformationRegisters" Тогда
		Возврат "РегистрСведений";
	КонецЕсли;
	
	Если КлассОбъекта = "AccumulationRegisters" Тогда
		Возврат "РегистрНакопления";
	КонецЕсли;
	
	Если КлассОбъекта = "AccountingRegisters" Тогда
		Возврат "РегистрБухгалтерии";
	КонецЕсли;
	
	Если КлассОбъекта = "CalculationRegisters" Тогда
		Возврат "РегистрРасчета";
	КонецЕсли;
	
	Если КлассОбъекта = "BusinessProcesses" Тогда
		Возврат "БизнесПроцесс";
	КонецЕсли;
	
	Если КлассОбъекта = "Tasks" Тогда
		Возврат "Задача";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonModules" Тогда
		Возврат "ОбщийМодуль";
	КонецЕсли;
	
	Если КлассОбъекта = "SessionParameters" Тогда
		Возврат "ПараметрСеанса";
	КонецЕсли;
	
	Если КлассОбъекта = "Roles" Тогда
		Возврат "Роль";
	КонецЕсли;
	
	Если КлассОбъекта = "ExchangePlans" Тогда
		Возврат "ПланОбмена";
	КонецЕсли;
	
	Если КлассОбъекта = "FilterCriteria" Тогда
		Возврат "КритерийОтбора";
	КонецЕсли;
	
	Если КлассОбъекта = "EventSubscriptions" Тогда
		Возврат "ПодпискаНаСобытие";
	КонецЕсли;
	
	Если КлассОбъекта = "ScheduledJobs" Тогда
		Возврат "РегламентноеЗадание";
	КонецЕсли;
	
	Если КлассОбъекта = "FunctionalOptions" Тогда
		Возврат "ФункциональнаяОпция";
	КонецЕсли;
	
	Если КлассОбъекта = "FunctionalOptionsParameters" Тогда
		Возврат "ПараметрФункциональнойОпции";
	КонецЕсли;
	
	Если КлассОбъекта = "SettingsStorages" Тогда
		Возврат "ХранилищеНастроек";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonForms" Тогда
		Возврат "ОбщаяФорма";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonCommands" Тогда
		Возврат "ОбщаяКоманда";
	КонецЕсли;
	
	Если КлассОбъекта = "CommandGroups" Тогда
		Возврат "ГруппаКоманд";
	КонецЕсли;
	
	Если КлассОбъекта = "XDTOPackages" Тогда
		Возврат "ПакетXDTO";
	КонецЕсли;
	
	Если КлассОбъекта = "WebServices" Тогда
		Возврат "WebСервис";
	КонецЕсли;
	
	Если КлассОбъекта = "WSReferences" Тогда
		Возврат "WSСсылка";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonAttributes" Тогда
		Возврат "ОбщийРеквизит";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonPictures" Тогда
		Возврат "ОбщаяКартинка";
	КонецЕсли;
	
	Если КлассОбъекта = "CommonTemplates" Тогда
		Возврат "ОбщийМакет";
	КонецЕсли;
	
	Если КлассОбъекта = "DefinedTypes" Тогда
		Возврат "ОпределяемыйТип";
	КонецЕсли;
	
	Если КлассОбъекта = "ExternalDataSources" Тогда
		Возврат "ВнешнийИсточникДанных";
	КонецЕсли;
	
	Если КлассОбъекта = "HTTPServices" Тогда
		Возврат "HTTPСервис";
	КонецЕсли;
	
	Если КлассОбъекта = "Languages" Тогда
		Возврат "Язык";
	КонецЕсли;
	
	Если КлассОбъекта = "StyleItems" Тогда
		Возврат "ЭлементСтиля";
	КонецЕсли;
	
	Если КлассОбъекта = "Style" Тогда
		Возврат "Стиль";
	КонецЕсли;
	
	Возврат "";
КонецФункции 

Функция СтруктураЗагружаемыхОбъектов()

	СтруктураЗагружаемыхОбъектов = Новый Структура;

	СвойстваКонфигуратора(СтруктураЗагружаемыхОбъектов);	

	ОбщиеОбъектыДляМетаданных(СтруктураЗагружаемыхОбъектов);

	РазличныеТипыРеквизитов(СтруктураЗагружаемыхОбъектов);

	ОбщиеМетаданные(СтруктураЗагружаемыхОбъектов);

	ВсеМетаданные(СтруктураЗагружаемыхОбъектов);

	Возврат СтруктураЗагружаемыхОбъектов;

КонецФункции

Функция ЗначениеСвойстваПоУмолчанию(ИмяСвойства)

	Если ИмяСвойства = "Имя"
		ИЛИ ИмяСвойства = "Синоним" 
		ИЛИ ИмяСвойства = "Комментарий" 
		ИЛИ ИмяСвойства = "Подсказка" 
		ИЛИ ИмяСвойства = "Пояснение" 
		ИЛИ ИмяСвойства = "ПредставлениеОбъекта" 
		ИЛИ ИмяСвойства = "ПредставлениеСписка" 
		ИЛИ ИмяСвойства = "РасширенноеПредставлениеОбъекта" 
		ИЛИ ИмяСвойства = "РасширенноеПредставлениеСписка" Тогда
		
		Возврат "";
		
	ИначеЕсли ИмяСвойства = "ПроверкаЗаполнения" Тогда
		Возврат Перечисления.ВариантыПроверкиЗаполнения.НеПроверять;
	ИначеЕсли ИмяСвойства = "ВидИерархии" Тогда
		Возврат Перечисления.ВидыИерархии.ИерархияЭлементов;
	ИначеЕсли ИмяСвойства = "Группа" Тогда // Группа предопределенных данных
		Возврат Ложь;
	ИначеЕсли ИмяСвойства = "КодПоУмолчанию" Тогда // Код предопределенных данных
		Возврат "";
	ИначеЕсли ИмяСвойства = "НаименованиеПоУмолчанию" Тогда // Наименование предопределенных данных
		Возврат "";
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Процедура СвойстваКонфигуратора(СтруктураЗагружаемыхОбъектов)
	//Configuration
	//- Корень конфигурации
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения из XML и реквизит СППР
	Свойства.Вставить("Name", "ИмяКонфигурации");
	Свойства.Вставить("Synonym", "НаименованиеКонфигурации");
	//Свойства.Вставить("Comment", "Комментарий");
	Коллекция.Вставить("Properties", Свойства);
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Languages");
	Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
	ПодчиненныеФайлы = Новый Массив; // Объекты, которые хранятся в отдельных файлах
	//ПодчиненныеФайлы.Добавить("Language");
	ПодчиненныеФайлы.Добавить("Subsystems");
	ПодчиненныеФайлы.Добавить("StyleItems");
	ПодчиненныеФайлы.Добавить("Style");
	ПодчиненныеФайлы.Добавить("CommonPictures");
	//ПодчиненныеФайлы.Добавить("Interface"); // Интерфейс Обычного приложения не загружается
	ПодчиненныеФайлы.Добавить("SessionParameters");
	ПодчиненныеФайлы.Добавить("Roles");
	ПодчиненныеФайлы.Добавить("CommonTemplates");
	ПодчиненныеФайлы.Добавить("FilterCriteria");
	ПодчиненныеФайлы.Добавить("CommonModules");
	ПодчиненныеФайлы.Добавить("CommonAttributes");
	ПодчиненныеФайлы.Добавить("ExchangePlans");
	ПодчиненныеФайлы.Добавить("XDTOPackages");
	ПодчиненныеФайлы.Добавить("WebServices");
	ПодчиненныеФайлы.Добавить("HTTPServices");
	ПодчиненныеФайлы.Добавить("WSReferences");
	ПодчиненныеФайлы.Добавить("EventSubscriptions");
	ПодчиненныеФайлы.Добавить("ScheduledJobs");
	ПодчиненныеФайлы.Добавить("SettingsStorages");
	ПодчиненныеФайлы.Добавить("FunctionalOptions");
	ПодчиненныеФайлы.Добавить("FunctionalOptionsParameters");
	ПодчиненныеФайлы.Добавить("DefinedTypes");
	ПодчиненныеФайлы.Добавить("CommandGroups");
	ПодчиненныеФайлы.Добавить("CommonCommands");

	ПодчиненныеФайлы.Добавить("Constants");
	ПодчиненныеФайлы.Добавить("CommonForms");
	ПодчиненныеФайлы.Добавить("Catalogs");
	ПодчиненныеФайлы.Добавить("Documents");
	ПодчиненныеФайлы.Добавить("DocumentNumerators");
	ПодчиненныеФайлы.Добавить("Sequence");
	ПодчиненныеФайлы.Добавить("DocumentJournals");
	ПодчиненныеФайлы.Добавить("Enums");
	ПодчиненныеФайлы.Добавить("Reports");
	ПодчиненныеФайлы.Добавить("DataProcessors");
	ПодчиненныеФайлы.Добавить("InformationRegisters");
	ПодчиненныеФайлы.Добавить("AccumulationRegisters");
	ПодчиненныеФайлы.Добавить("ChartsOfCharacteristicTypes");
	ПодчиненныеФайлы.Добавить("ChartsOfAccounts");
	ПодчиненныеФайлы.Добавить("AccountingRegisters");
	ПодчиненныеФайлы.Добавить("ChartsOfCalculationTypes");
	ПодчиненныеФайлы.Добавить("CalculationRegisters");
	ПодчиненныеФайлы.Добавить("BusinessProcesses");
	ПодчиненныеФайлы.Добавить("Tasks");
	ПодчиненныеФайлы.Добавить("ExternalDataSource");
	Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
	СтруктураЗагружаемыхОбъектов.Вставить("Configuration", Коллекция);
КонецПроцедуры

Процедура ОбщиеОбъектыДляМетаданных(СтруктураЗагружаемыхОбъектов)
		//- Форма
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("Forms", Коллекция);

		//- Команда объекта
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ModifiesData", "ИзменяетДанные");
		Свойства.Вставить("Group", "ГруппаКоманд");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("Commands", Коллекция);

		//- Макет объекта
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("TemplateType", "ТипМакета");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("Templates", Коллекция);

		//- Предопределенные данные
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Code", "КодПоУмолчанию");
		Свойства.Вставить("Description", "НаименованиеПоУмолчанию");
		Свойства.Вставить("IsFolder", "Группа");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("PredefinedData");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		СтруктураЗагружаемыхОбъектов.Вставить("PredefinedData", Коллекция);		
КонецПроцедуры

Процедура РазличныеТипыРеквизитов(СтруктураЗагружаемыхОбъектов)
	
	//- Реквизиты объектов
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("Attributes", Коллекция);

	//- Стандартные реквизиты
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("StandardAttributes", Коллекция);

	//- Табличные части объектов
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Коллекция.Вставить("Properties", Свойства);
	ПодчиненныеОбъекты = Новый Массив;
	ПодчиненныеОбъекты.Добавить("Attributes");
	Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
	СтруктураЗагружаемыхОбъектов.Вставить("TabularSections", Коллекция);

	//- Графы
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("References", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("Columns", Коллекция);

	//- Измерения
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("Dimensions", Коллекция);

	//- Ресурс
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("Resources", Коллекция);

	//- Реквизит адресации
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("AddressingAttributes", Коллекция);

	//- Признак учета
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("Name", "Имя");
	Свойства.Вставить("Synonym", "Синоним");
	Свойства.Вставить("Comment", "Комментарий");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("AccountingFlags", Коллекция);

	//- Значение константы
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("name", "Имя");
	Свойства.Вставить("ToolTip", "Подсказка");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("ConstantValue", Коллекция);

	//- Значение параметра сеанса
	Коллекция = Новый Структура;
	Свойства = Новый Структура; // свойства объекта для чтения
	Свойства.Вставить("name", "Имя");
	Свойства.Вставить("FillChecking", "ПроверкаЗаполнения");
	Свойства.Вставить("Type", "ТипыЗначенияРеквизита");
	Коллекция.Вставить("Properties", Свойства);
	СтруктураЗагружаемыхОбъектов.Вставить("SessionParameterValue", Коллекция);
		
КонецПроцедуры

Процедура ОбщиеМетаданные(СтруктураЗагружаемыхОбъектов)
	//Language
	//- Язык
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("Languages", Коллекция);

		//Subsystem
		//- Подсистема
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("Content", "Состав");
		Свойства.Вставить("IncludeInCommandInterface", "ВключатьВКомандныйИнтерфейс");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Subsystems");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтруктураЗагружаемыхОбъектов.Вставить("Subsystems", Коллекция);

		//StyleItem
		//- Элемент стиля
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("StyleItems", Коллекция);

		//Style
		//- Стиль
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("Style", Коллекция);

		//CommonPicture
		//- Общая картинка
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("CommonPictures", Коллекция);

		//Interface
		//- Интерфейс
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("Interfaces", Коллекция);

		//SessionParameter
		//- Параметр сеанса
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("SessionParameters", Коллекция);

		//Role
		//- Роль
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		Коллекция.Вставить("Rights", Истина);
		СтруктураЗагружаемыхОбъектов.Вставить("Roles", Коллекция);

		//CommonTemplate
		//- Общий макет
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("TemplateType", "ТипМакета");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("CommonTemplates", Коллекция);

		//FilterCriterion
		//- Критерий отбора
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Type", "Тип");
		РасширенныеСвойства.Вставить("Content", "Состав");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("FilterCriteria", Коллекция);

		//CommonModule
		//- Общий модуль
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Global", "Глобальный");
		РасширенныеСвойства.Вставить("ClientManagedApplication", "КлиентУправляемоеПриложение");
		РасширенныеСвойства.Вставить("Server", "Сервер");
		РасширенныеСвойства.Вставить("ExternalConnection", "ВнешнееСоединение");
		РасширенныеСвойства.Вставить("ServerCall", "ВызовСервера");
		РасширенныеСвойства.Вставить("Privileged", "Привилегированный");
		РасширенныеСвойства.Вставить("ReturnValuesReuse", "ПовторноеИспользованиеВозвращаемыхЗначений");
		РасширенныеСвойства.Вставить("ClientOrdinaryApplication", "КлиентОбычноеПриложение");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("CommonModules", Коллекция);

		//CommonAttribute
		//- Общий реквизит
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Content", "Состав");
		РасширенныеСвойства.Вставить("AutoUse", "Автоиспользование");
		РасширенныеСвойства.Вставить("DataSeparation", "РазделениеДанных");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("CommonAttributes", Коллекция);

		//ExchangePlan
		//- План обмена
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Code", "Код");
		СтандартныеРеквизиты.Вставить("Description", "Наименование");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("ExchangePlans", Коллекция);

		//XDTOPackage
		//- XDTO-пакеты
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Namespace", "ПространствоИмен");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("XDTOPackages", Коллекция);

		//WebService
		//- WEB-сервис
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Namespace", "ПространствоИмен");
		РасширенныеСвойства.Вставить("DescriptorFileName", "ИмяФайлаПубликации");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("WebServices", Коллекция);

		//HTTPService
		//- HTTP-сервис
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("HTTPServices", Коллекция);

		//WSReference
		//- WS ссылки
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("LocationURL", "URLИсточника");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("WSReferences", Коллекция);

		//EventSubscription
		//- Подписка на событие
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Source", "Источник");
		РасширенныеСвойства.Вставить("Event", "Событие");
		РасширенныеСвойства.Вставить("Handler", "Обработчик");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("EventSubscriptions", Коллекция);

		//ScheduledJob
		//- Регламентное задание
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("MethodName", "ИмяМетода");
		РасширенныеСвойства.Вставить("Description", "НаименованиеЗадания");
		РасширенныеСвойства.Вставить("Use", "Использование");
		РасширенныеСвойства.Вставить("Predefined", "Предопределенное");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("ScheduledJobs", Коллекция);

		//SettingsStorage
		//- Хранилище настроек
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтруктураЗагружаемыхОбъектов.Вставить("SettingsStorages", Коллекция);

		//FunctionalOption
		//- Функциональная опция
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Location", "Хранение");
		РасширенныеСвойства.Вставить("PrivilegedGetMode", "ПривилегированныйРежимПриПолучении");
		РасширенныеСвойства.Вставить("Content", "Состав");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("FunctionalOptions", Коллекция);

		//FunctionalOptionsParameter
		//- Параметр функциональной опции
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("FunctionalOptionsParameters", Коллекция);

		//DefinedType
		//- Определяемые типы
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("DefinedTypes", Коллекция);

		//CommonCommand
		//- Общая команда
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Group", "ГруппаКоманд");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("CommonCommands", Коллекция);

		//CommandGroup
		//- Группа команд
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("Category", "Категория");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		СтруктураЗагружаемыхОбъектов.Вставить("CommandGroups", Коллекция);

		//CommonForm
		//- Общая форма
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("CommonForms", Коллекция);
			
КонецПроцедуры

Процедура ВсеМетаданные(СтруктураЗагружаемыхОбъектов)
	//Constant
	//- Константы
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("Constants", Коллекция);

		//Catalog
		//- Справочник
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("HierarchyType", "ВидИерархии");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Owner", "Владелец");
		СтандартныеРеквизиты.Вставить("Parent", "Родитель");
		СтандартныеРеквизиты.Вставить("Code", "Код");
		СтандартныеРеквизиты.Вставить("Description", "Наименование");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		Коллекция.Вставить("Predefined", Истина);
		СтруктураЗагружаемыхОбъектов.Вставить("Catalogs", Коллекция);

		//Document
		//- Документ
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("PostInPrivilegedMode", "ПривилегированныйРежимПриПроведении");
		Свойства.Вставить("UnpostInPrivilegedMode", "ПривилегированныйРежимПриОтменеПроведения");
		Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
		Свойства.Вставить("RegisterRecords", "ОписаниеДвиженийПоРегистру");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Date", "Дата");
		СтандартныеРеквизиты.Вставить("Number", "Номер");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("Documents", Коллекция);

		//DocumentNumerator
		//- Нумератор документов
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("DocumentNumerators", Коллекция);

		//Sequence
		//- Последовательность
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		РасширенныеСвойства = Новый Структура; // расширенные свойства объекта для чтения
		РасширенныеСвойства.Вставить("Name", "Наименование");
		РасширенныеСвойства.Вставить("MoveBoundaryOnPosting", "ПеремещениеГраницыПриПроведении");
		РасширенныеСвойства.Вставить("Documents", "Документы");
		РасширенныеСвойства.Вставить("RegisterRecords", "Движения");
		Коллекция.Вставить("ExtendedProperties", РасширенныеСвойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Dimensions");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		СтруктураЗагружаемыхОбъектов.Вставить("Sequences", Коллекция);

		//DocumentJournal
		//- Журнал документов
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Columns");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Ref", "Ссылка");
		СтандартныеРеквизиты.Вставить("Date", "Дата");
		СтандартныеРеквизиты.Вставить("Number", "Номер");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("DocumentJournals", Коллекция);

		//Enum
		//- Перечисление
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("EnumValue");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтруктураЗагружаемыхОбъектов.Вставить("Enums", Коллекция);

		//- Предопределенное значение перечисления
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		СтруктураЗагружаемыхОбъектов.Вставить("EnumValues", Коллекция);

		//Report
		//- Отчет
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ExtendedPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтруктураЗагружаемыхОбъектов.Вставить("Reports", Коллекция);

		//DataProcessor
		//- Обработка
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ExtendedPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтруктураЗагружаемыхОбъектов.Вставить("DataProcessors", Коллекция);

		//InformationRegister
		//- Регистр сведений
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("WriteMode", "РегистрПодчиненРегистратору");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Resources");
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("Dimensions");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Recorder", "Регистратор");
		СтандартныеРеквизиты.Вставить("Period", "Период");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("InformationRegisters", Коллекция);

		//AccumulationRegister
		//- Регистр накопления
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("RegisterType", "ВидРегистраНакопления");
		Свойства.Вставить("DataLockControlMode", "РегистрПодчиненРегистратору"); // Любое свойство, в обработчике станет "Истина"
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Resources");
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("Dimensions");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Recorder", "Регистратор");
		СтандартныеРеквизиты.Вставить("Period", "Период");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("AccumulationRegisters", Коллекция);

		//ChartOfCharacteristicTypes
		//- План видов характеристик
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("Hierarchical", "ВидИерархии");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Parent", "Родитель");
		СтандартныеРеквизиты.Вставить("Code", "Код");
		СтандартныеРеквизиты.Вставить("Description", "Наименование");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		Коллекция.Вставить("Predefined", Истина);
		СтруктураЗагружаемыхОбъектов.Вставить("ChartsOfCharacteristicTypes", Коллекция);

		//ChartOfAccounts
		//- План счетов
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("AccountingFlags");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Parent", "Родитель"); // не загружается пока.
		СтандартныеРеквизиты.Вставить("Code", "Код");
		СтандартныеРеквизиты.Вставить("Description", "Наименование");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		Коллекция.Вставить("Predefined", Истина);
		СтруктураЗагружаемыхОбъектов.Вставить("ChartsOfAccounts", Коллекция);

		//AccountingRegister
		//- Регистр бухгалтерии
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("DataLockControlMode", "РегистрПодчиненРегистратору"); // Любое свойство, в обработчике станет "Истина"
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Resources");
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("Dimensions");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Recorder", "Регистратор");
		СтандартныеРеквизиты.Вставить("Period", "Период");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("AccountingRegisters", Коллекция);

		//ChartOfCalculationTypes
		//- План видов расчетов
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Parent", "Родитель"); // не загружается пока.
		СтандартныеРеквизиты.Вставить("Code", "Код");
		СтандартныеРеквизиты.Вставить("Description", "Наименование");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		Коллекция.Вставить("Predefined", Истина);
		СтруктураЗагружаемыхОбъектов.Вставить("ChartsOfCalculationTypes", Коллекция);

		//CalculationRegister
		//- Регистр расчета
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("RecordPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedRecordPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("DataLockControlMode", "РегистрПодчиненРегистратору"); // Любое свойство, в обработчике станет "Истина"
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Resources");
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("Dimensions");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		ПодчиненныеОбъекты.Добавить("Recalculations");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Recorder", "Регистратор");
		СтандартныеРеквизиты.Вставить("RegistrationPeriod", "ПериодРегистрации");
		СтандартныеРеквизиты.Вставить("CalculationType", "ВидРасчета");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("CalculationRegisters", Коллекция);

		//Recalculation
		//- Перерасчет
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Dimensions");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		СтруктураЗагружаемыхОбъектов.Вставить("Recalculations", Коллекция);

		//BusinessProcess
		//- Бизнес-процесс
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Date", "Дата");
		СтандартныеРеквизиты.Вставить("Number", "Номер");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("BusinessProcesses", Коллекция);

		//Task
		//- Задача
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Свойства.Вставить("ObjectPresentation", "ПредставлениеОбъекта");
		Свойства.Вставить("ListPresentation", "ПредставлениеСписка");
		Свойства.Вставить("ExtendedObjectPresentation", "РасширенноеПредставлениеОбъекта");
		Свойства.Вставить("ExtendedListPresentation", "РасширенноеПредставлениеСписка");
		Свойства.Вставить("Explanation", "Пояснение");
		Свойства.Вставить("IncludeHelpInContents", "ВключатьСправкуВСодержание");
		Свойства.Вставить("BasedOn", "ВводитсяНаОсновании");
		Свойства.Вставить("UseStandardCommands", "ИспользоватьСтандартныеКоманды");
		Коллекция.Вставить("Properties", Свойства);
		ПодчиненныеОбъекты = Новый Массив;
		ПодчиненныеОбъекты.Добавить("Attributes");
		ПодчиненныеОбъекты.Добавить("TabularSections");
		ПодчиненныеОбъекты.Добавить("AddressingAttribute");
		ПодчиненныеОбъекты.Добавить("Commands");
		ПодчиненныеОбъекты.Добавить("Forms");
		ПодчиненныеОбъекты.Добавить("Templates");
		Коллекция.Вставить("ChildObjects", ПодчиненныеОбъекты);
		ПодчиненныеФайлы = Новый Массив;
		ПодчиненныеФайлы.Добавить("Form"); // Формы хранятся в отдельных файлах
		ПодчиненныеФайлы.Добавить("Template");
		Коллекция.Вставить("ChildObjectsFiles", ПодчиненныеФайлы);
		СтандартныеРеквизиты = Новый Структура; // Загружаемые стандартные реквизиты
		СтандартныеРеквизиты.Вставить("Date", "Дата");
		СтандартныеРеквизиты.Вставить("Number", "Номер");
		СтандартныеРеквизиты.Вставить("Description", "Наименование");
		Коллекция.Вставить("StandardAttributes", СтандартныеРеквизиты);
		СтруктураЗагружаемыхОбъектов.Вставить("Tasks", Коллекция);

		//ExternalDataSource
		//- Внешний источник данных
		Коллекция = Новый Структура;
		Свойства = Новый Структура; // свойства объекта для чтения
		Свойства.Вставить("Name", "Имя");
		Свойства.Вставить("Synonym", "Синоним");
		Свойства.Вставить("Comment", "Комментарий");
		Коллекция.Вставить("Properties", Свойства);

		СтруктураЗагружаемыхОбъектов.Вставить("ExternalDataSources", Коллекция);
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ПреобразоватьИмяВПуть(Знач Имя, Префикс = "", ЭтоПрефикс = Ложь)

	Р = ПолучитьРазделительПути();
	
	ЭлементыИмени = СтрРазделить(Имя, ".");
	
	Если ЭлементыИмени.Количество() < 2 Тогда
		
		Если ЭтоПрефикс Тогда
			Имя = Префикс + Р + ЭлементыИмени[0];
		Иначе
			Имя = Префикс + Р + ЭлементыИмени[0] + Р + ЭлементыИмени[0];
		КонецЕсли;
		
		Возврат Имя;
			
	КонецЕсли;
	
	Если ЭтоПрефикс Тогда
		Имя = ИмяКаталога(ЭлементыИмени[0]) + Р + ЭлементыИмени[1];
	Иначе
		Имя = ИмяКаталога(ЭлементыИмени[0]) + Р + ЭлементыИмени[1] + Р + ЭлементыИмени[1];
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

Функция ИмяКаталога(Ключ)
	
	Соответствие = Новый Соответствие();
	Соответствие.Вставить("AccountingRegister", "AccountingRegisters");
	Соответствие.Вставить("AccumulationRegister", "AccumulationRegisters");
	Соответствие.Вставить("BusinessProcess", "BusinessProcesses");
	Соответствие.Вставить("CalculationRegister", "CalculationRegisters");
	Соответствие.Вставить("Catalog", "Catalogs");
	Соответствие.Вставить("ChartOfAccounts", "ChartsOfAccounts");
	Соответствие.Вставить("ChartOfCalculationTypes", "ChartsOfCalculationTypes");
	Соответствие.Вставить("ChartOfCharacteristicTypes", "ChartsOfCharacteristicTypes");
	Соответствие.Вставить("CommandGroup", "CommandGroups");
	Соответствие.Вставить("CommonAttribute", "CommonAttributes");
	Соответствие.Вставить("CommonCommand", "CommonCommands");
	Соответствие.Вставить("CommonForm", "CommonForms");
	Соответствие.Вставить("CommonModule", "CommonModules");
	Соответствие.Вставить("CommonPicture", "CommonPictures");
	Соответствие.Вставить("CommonTemplate", "CommonTemplates");
	Соответствие.Вставить("Constant", "Constants");
	Соответствие.Вставить("DataProcessor", "DataProcessors");
	Соответствие.Вставить("DefinedType", "DefinedTypes");
	Соответствие.Вставить("DocumentJournal", "DocumentJournals");
	Соответствие.Вставить("DocumentNumerator", "DocumentNumerators");
	Соответствие.Вставить("Document", "Documents");
	Соответствие.Вставить("Enum", "Enums");
	Соответствие.Вставить("EventSubscription", "EventSubscriptions");
	Соответствие.Вставить("ExchangePlan", "ExchangePlans");
	Соответствие.Вставить("FilterCriterion", "FilterCriteria");
	Соответствие.Вставить("FunctionalOption", "FunctionalOptions");
	Соответствие.Вставить("FunctionalOptionsParameter", "FunctionalOptionsParameters");
	Соответствие.Вставить("HTTPService", "HTTPServices");
	Соответствие.Вставить("InformationRegister", "InformationRegisters");
	Соответствие.Вставить("Report", "Reports");
	Соответствие.Вставить("Role", "Roles");
	Соответствие.Вставить("ScheduledJob", "ScheduledJobs");
	Соответствие.Вставить("SessionParameter", "SessionParameters");
	Соответствие.Вставить("SettingsStorage", "SettingsStorages");
	Соответствие.Вставить("Subsystem", "Subsystems");
	Соответствие.Вставить("StyleItem", "StyleItems");
	Соответствие.Вставить("Task", "Tasks");
	Соответствие.Вставить("WebService", "WebServices");
	Соответствие.Вставить("WSReference", "WSReferences");
	Соответствие.Вставить("XDTOPackage", "XDTOPackages");

	Значение = Соответствие.Получить(Ключ);
	Если (Значение = Неопределено) Тогда
		Значение = Ключ;
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьОбъектXDTO(СписокXDTO, ИмяОбъектаXDTO)
	
	Если НЕ ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для каждого ОбъектXDTO Из СписокXDTO Цикл
		
		Если ОбъектXDTO.name = ИмяОбъектаXDTO Тогда
		
			Возврат ОбъектXDTO;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьЗаписьВЛог(Параметры, ИмяСобытия, Комментарий = "", Уровень = Неопределено, ПрочитатьВесьЛогВЖР = Ложь)

	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Информация;
	КонецЕсли; 
	
	Если Параметры.Свойство("ВеткаИсточник") Тогда
	
		МетаданныеЖР = Метаданные.Справочники.Ветки;
		ДанныеЖР = Параметры.ВеткаИсточник;
	
	ИначеЕсли Параметры.Свойство("Проект") Тогда
	
		МетаданныеЖР = Метаданные.Справочники.Проекты;
		ДанныеЖР = Параметры.Проект;
	
	Иначе
	
		МетаданныеЖР = Неопределено;
		ДанныеЖР = ИмяСобытия;
	
	КонецЕсли;
	
	// Считываем весь лог в журнал регистрации.
	Если ПрочитатьВесьЛогВЖР Тогда
	
		Лог = Новый ТекстовыйДокумент;
		Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
		Если Файл.Существует() Тогда
			Лог.Прочитать(Параметры.ИмяФайлаЛогов);
		КонецЕсли;
		
		Комментарий = Комментарий + Символы.ПС + Лог.ПолучитьТекст();
		Лог = Неопределено;
	КонецЕсли; 
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка метаданных'") + "." + ИмяСобытия, 
		Уровень,
		МетаданныеЖР,
		ДанныеЖР,
		Комментарий);
	
	Лог = Новый ТекстовыйДокумент;
	Файл = Новый Файл(Параметры.ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(Параметры.ИмяФайлаЛогов);
	КонецЕсли;
	Лог.ДобавитьСтроку(Строка(ТекущаяДата()) + " " +  ИмяСобытия);
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Лог.ДобавитьСтроку(Комментарий);
	КонецЕсли; 
	Лог.Записать(Параметры.ИмяФайлаЛогов);
	Лог = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаИзмененныхОбъектов(ОбъектыМетаданных, Проект, Параметры)
	
	ЭтоПодсистема = Параметры.ЭтоПодсистема;
	ИмяМетаданного = Параметры.ОбъектМетаданных;
	Изменения = Параметры.Изменения;
	ОписаниеИзменений = Параметры.ОписаниеИзменений;
	
	Запрос = Новый Запрос;
	
	Если ЭтоПодсистема Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Подсистемы.Ссылка
		|ИЗ
		|	Справочник.Подсистемы КАК Подсистемы
		|ГДЕ
		|	Подсистемы.Наименование = &ИмяОбъектаМетаданных
		|	И Подсистемы.Владелец = &Проект";
		
		Запрос.УстановитьПараметр("ИмяОбъектаМетаданных", ИмяМетаданного);
	
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОбъектыМетаданных.Ссылка
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|ГДЕ
		|	ОбъектыМетаданных.Наименование = &ИмяОбъектаМетаданных
		|	И ОбъектыМетаданных.Владелец = &Проект";
		
		Запрос.УстановитьПараметр("ИмяОбъектаМетаданных", ИмяМетаданного);
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОбъектМетаданных = Выборка.Ссылка;
	Иначе
		ОбъектМетаданных = Справочники.ОбъектыМетаданных.ПустаяСсылка();
	КонецЕсли;
	
	Если Не ОбъектМетаданных.Пустая() Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Гиперссылка", ОбъектМетаданных);
		СтрокиПоиска = ОбъектыМетаданных.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиПоиска.Количество() = 0 Тогда
			ОбъектМетаданныхСтрока = ОбъектыМетаданных.Добавить();
			ОбъектМетаданныхСтрока.Гиперссылка = ОбъектМетаданных;
			УстановитьИндексКартинки(ОбъектМетаданныхСтрока.Гиперссылка, ОбъектМетаданныхСтрока.ИндексКартинки);
		Иначе
			ОбъектМетаданныхСтрока = СтрокиПоиска[0];
		КонецЕсли;
		
		ОбъектМетаданныхСтрока.ОписаниеИзмененийИзОтчетаОСравнении = Изменения;
		ОбъектМетаданныхСтрока.ОписаниеИзменений = ОписаниеИзменений;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьИндексКартинки(ОбъектМетаданных, ИндексКартинки)
	
	СоответствиеКартинок = РаботаСОбъектамиМетаданных.ПолучитьСоответствиеКартинок(ОбъектМетаданных);
	
	Индекс = СоответствиеКартинок.Получить(ОбъектМетаданных);
	Если Индекс <> Неопределено Тогда
		ИндексКартинки = Индекс;
	Иначе
		ИндексКартинки = 1000;
	КонецЕсли;
		
КонецПроцедуры

Функция СтруктураТиповФорм()

	Результат = Новый Структура;
	
	Результат.Вставить("DefaultObjectForm", Перечисления.ТипыФорм.ОсновнаяФормаОбъекта);
	Результат.Вставить("DefaultFolderForm", Перечисления.ТипыФорм.ОсновнаяФормаГруппы);
	Результат.Вставить("DefaultListForm", Перечисления.ТипыФорм.ОсновнаяФормаСписка);
	Результат.Вставить("DefaultChoiceForm", Перечисления.ТипыФорм.ОсновнаяФормаДляВыбора);
	Результат.Вставить("DefaultFolderChoiceForm", Перечисления.ТипыФорм.ОсновнаяФормаДляВыбораГруппы);
	Результат.Вставить("DefaultForm", Перечисления.ТипыФорм.ОсновнаяФорма);
	Результат.Вставить("DefaultSettingsForm", Перечисления.ТипыФорм.ОсновнаяФормаНастроек);
	Результат.Вставить("DefaultVariantForm", Перечисления.ТипыФорм.ОсновнаяФормаВарианта);
	Результат.Вставить("DefaultRecordForm", Перечисления.ТипыФорм.ОсновнаяФормаЗаписи);
	Результат.Вставить("DefaultLoadForm", Перечисления.ТипыФорм.ОсновнаяФормаЗагрузки);
	Результат.Вставить("DefaultSaveForm", Перечисления.ТипыФорм.ОсновнаяФормаСохранения);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

