////////////////////////////////////////////////////////////////////////////////
//	Общие серверные процедуры для синхронизации календарей
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт

	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияКалендарей;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьСинхронизациюКалендарей;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;

КонецПроцедуры

Процедура ПослеЗаписиСобытияКалендаря(ДанныеЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
		Возврат;
	КонецЕсли;
	
	Узлы = УзлыДляВыгрузки(ДанныеЗаписи.Пользователь);
	Если Не ЗначениеЗаполнено(Узлы) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = НовыеПараметрыПроцедурыСинхронизации();
	ПараметрыПроцедуры.Вставить("Узлы", Узлы);
	ПараметрыПроцедуры.Вставить("ДатаНачала", НачалоДня(ДанныеЗаписи.Начало));
	ПараметрыПроцедуры.Вставить("ДатаОкончания", КонецДня(ДанныеЗаписи.Окончание));
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.Вставить("НаименованиеФоновогоЗадания",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Синхронизация календаря пользователя %1'"),
		ДанныеЗаписи.Пользователь));
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"СинхронизацияКалендарей.СинхронизироватьВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполненияВФоне);
		
КонецПроцедуры

// Формирует описание календаря в виде строки
// для вставки в файл формата .ics или тело HTTP запроса.
//
// Параметры:
//  СобытияКалендаря - ТаблицаЗначений - См. НовоеОписаниеСобытийКалендаря()
//	Организатор - Строка - адрес электронной почты организатора
//
// Возвращаемое значение:
//   Строка - тело файла формата .ics или HTTP запроса.
//
Функция СобытияiCalendar(СобытияКалендаря, Организатор = Неопределено, ВремяНапоминания = 0) Экспорт

	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	"BEGIN:VCALENDAR
	|VERSION:2.0
	|PRODID:%1
	|METHOD:PUBLISH", ИдентификаторПриложенияiCalendar());
	Для Каждого Событие Из СобытияКалендаря Цикл
		Результат = Результат + Символы.ПС + СобытиеiCalendar(Событие, Организатор, ВремяНапоминания);
	КонецЦикла;
	Результат = Результат + Символы.ПС + "END:VCALENDAR";
	Возврат Результат;

КонецФункции

Процедура ЗарегистрироватьИзмененияЗаписи(Пользователь, ИдентификаторЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
		Возврат;
	КонецЕсли;
	
	Узлы = УзлыДляВыгрузки(Пользователь);
	Если Не ЗначениеЗаполнено(Узлы) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КалендариПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина);
	НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Идентификаторзаписи, Истина);
	
	ПланыОбмена.ЗарегистрироватьИзменения(Узлы, НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыЗапускаСинхронизации

// Процедура регламентного задания СинхронизацияКалендарей.
//
Процедура Синхронизировать() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СинхронизацияКалендарей);
	СинхронизироватьКалендари();

КонецПроцедуры

Процедура ПолучитьСписокКалендарейВФоне(ПараметрыПроцедуры, АдресХранилища) Экспорт

	ПараметрыПроцедуры.Вставить("НовоеОписаниеКалендаря", НовоеОписаниеКалендаря());
	Если ПараметрыПроцедуры.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.DAV Тогда
		СинхронизацияDAV.ПолучитьСписокКалендарейВФоне(ПараметрыПроцедуры, АдресХранилища);
	ИначеЕсли ПараметрыПроцедуры.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.Google Тогда
		СинхронизацияGoogle.ПолучитьСписокКалендарейВФоне(ПараметрыПроцедуры, АдресХранилища);
	КонецЕсли;

КонецПроцедуры

// Процедура для запуска синхронизации в фоновом задании.
//
// Параметры:
//	ПараметрыПроцедуры - Структура - См. НовыеПараметрыПроцедурыСинхронизации()
//	АдресХранилища - Строка - Не указывается, используется только для совместимости с подсистемой длительных операций
//
Процедура СинхронизироватьВФоне(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюКалендарей") Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры);
	Если ПараметрыПроцедурыСинхронизации.Регистрировать И ЗначениеЗаполнено(ПараметрыПроцедурыСинхронизации.Узлы) Тогда
		ЗарегистрироватьИзменения(ПараметрыПроцедурыСинхронизации);
	КонецЕсли;
	СинхронизироватьКалендари(ПараметрыПроцедурыСинхронизации);

КонецПроцедуры

#КонецОбласти

#Область ФункцииОбработкиiCalendar

// Преобразовывает строку формата iCalendar в структуру, содержащую параметры события.
//
Функция СтруктураiCalendar(СтрокаiCalendar) Экспорт

	Результат = Новый Структура;
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаiCalendar, Символы.ПС);
	ЧтениеСобытия = Ложь;
	ЧтениеНапоминания = Ложь;
	
	ЧтениеОписания = Ложь;
	МассивОписания = Новый Массив;
	ПерваяСтрокаОписания = "";
	
	ЧтениеОстальногоОписания = Ложь;
	МассивОстальногоОписания = Новый Массив;
	ОстальноеОписание = "";
	
	ЧтениеRRULE = Ложь;
	МассивRRULE = Новый Массив;
	
	ЧтениеEXDATE = Ложь;
	МассивEXDATE = Новый Массив;
	ЧастиEXDATE = Новый Массив;
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если ЧтениеОписания И СтрНачинаетсяС(Строка, " ") Тогда
			МассивОписания.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеОписания И Не СтрНачинаетсяС(Строка, " ") Тогда
			ПерваяСтрокаОписания = СтрСоединить(МассивОписания, "");
			ПерваяСтрокаОписания = РаскодироватьСтрокуiCalendar(ПерваяСтрокаОписания);
			ЧтениеОписания = Ложь;
		КонецЕсли;
		
		Если ЧтениеОстальногоОписания И СтрНачинаетсяС(Строка, " ") Тогда
			МассивОстальногоОписания.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеОстальногоОписания И Не СтрНачинаетсяС(Строка, " ") Тогда
			ОстальноеОписание = СтрСоединить(МассивОстальногоОписания, "");
			ОстальноеОписание = РаскодироватьСтрокуiCalendar(ОстальноеОписание);
			ЧтениеОстальногоОписания = Ложь;
		КонецЕсли;
		
		Если ЧтениеRRULE И СтрНачинаетсяС(Строка, " ") Тогда
			МассивRRULE.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеRRULE И Не СтрНачинаетсяС(Строка, " ") Тогда
			ЧтениеRRULE = Ложь;
		КонецЕсли;
		
		Если ЧтениеEXDATE И СтрНачинаетсяС(Строка, " ") Тогда
			МассивEXDATE.Добавить(Сред(Строка, 2));
			Продолжить;
		ИначеЕсли ЧтениеEXDATE И Не СтрНачинаетсяС(Строка, " ") Тогда
			ЧтениеEXDATE = Ложь;
			ЧастиEXDATE.Добавить(СтрСоединить(МассивEXDATE));
		КонецЕсли;
		
		Если СокрЛП(Строка) = "BEGIN:VEVENT" Тогда
			ЧтениеСобытия = Истина;
		ИначеЕсли СокрЛП(Строка) = "END:VEVENT" Тогда
			Прервать;
		ИначеЕсли СокрЛП(Строка) = "BEGIN:VALARM" Тогда
			ЧтениеНапоминания = Истина;
		ИначеЕсли СокрЛП(Строка) = "END:VALARM" Тогда
			ЧтениеНапоминания = Ложь;
		КонецЕсли;
		
		Если ЧтениеСобытия Тогда
			
			Если ЧтениеНапоминания Тогда
				Продолжить;
			КонецЕсли;
			
			Если Лев(Строка, СтрДлина("UID")) = "UID" Тогда
				Результат.Вставить("Идентификатор", СтрЗаменить(СокрЛП(Строка), "UID:", ""));
			ИначеЕсли Лев(Строка, СтрДлина("DTSTART")) = "DTSTART" Тогда
				Результат.Вставить("ДатаНачала", ВыделитьВремя(Строка, "DTSTART"));
			ИначеЕсли Лев(Строка, СтрДлина("DTEND")) = "DTEND" Тогда
				Результат.Вставить("ДатаОкончания", ВыделитьВремя(Строка, "DTEND"));
			ИначеЕсли Лев(Строка, СтрДлина("SUMMARY")) = "SUMMARY" Тогда
				ЧтениеОписания = Истина;
				МассивОписания = Новый Массив;
				МассивОписания.Добавить(СтрЗаменить(Строка, "SUMMARY:", ""));
			ИначеЕсли Лев(Строка, СтрДлина("DESCRIPTION")) = "DESCRIPTION" Тогда
				ЧтениеОстальногоОписания = Истина;
				МассивОстальногоОписания = Новый Массив;
				МассивОстальногоОписания.Добавить(СтрЗаменить(Строка, "DESCRIPTION:", ""));
			ИначеЕсли Лев(Строка, СтрДлина("RRULE")) = "RRULE" Тогда
				ЧтениеRRULE = Истина;
				МассивRRULE = Новый Массив;
				МассивRRULE.Добавить(Строка);
			ИначеЕсли Лев(Строка, СтрДлина("EXDATE")) = "EXDATE" Тогда
				ЧтениеEXDATE = Истина;
				МассивEXDATE = Новый Массив;
				МассивEXDATE.Добавить(Строка);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Описание = ПерваяСтрокаОписания;
	Если ЗначениеЗаполнено(ОстальноеОписание) Тогда
		Описание = Описание + Символы.ПС + ОстальноеОписание;
	КонецЕсли;
	Результат.Вставить("Описание", Описание);
	
	Если МассивRRULE.Количество() = 0 Тогда
		Результат.Вставить("ПравилоПовторения", КалендариПользователей.ПравилоПовторенияНикогда());
	Иначе
		
		Результат.Вставить("ПравилоПовторения", ПравилоПовторения(СтрСоединить(МассивRRULE)));
		
		Для Каждого EXDATE Из ЧастиEXDATE Цикл
			Для Каждого ИсключениеПовторения Из СинхронизацияКалендарей.ИсключенияПовторения(EXDATE) Цикл
				ЗаполнитьЗначенияСвойств(
					Результат.ПравилоПовторения.ИсключенияПовторения.Добавить(),
					ИсключениеПовторения,
					"ДатаИсключения, ЗаписьИсключения");
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразовывает местную дату в формат iCalendar, основанный на ISO 8601.
//
Функция ДатаФорматаiCalendar(Дата, ФорматДаты = "УниверсальноеВремя", ТипДаты = "") Экспорт
	
	Результат = "";
	Если ФорматДаты = "ТолькоДата" И ТипДаты = "ДатаНачала" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ТолькоДата" И ТипДаты = "ДатаОкончания" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата + 86400, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ТолькоДата" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1;VALUE=DATE:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMdd"));
	ИначеЕсли ФорматДаты = "ВремяСЧасовымПоясом" Тогда
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("TZID=%1:%2",
			ЧасовойПоясСеанса(),
			Формат(Дата, "ДФ=yyyyMMddTHHmmss"));
	ИначеЕсли ФорматДаты = "УниверсальноеВремя" Тогда
		Результат = Формат(УниверсальноеВремя(Дата), "ДФ=yyyyMMddTHHmmssZ");
	Иначе
		Результат = Формат(УниверсальноеВремя(Дата), "ДФ=yyyyMMddTHHmmssZ");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ТекстОписанияФорматаiCalendar(Знач ТекстОписания)
	
	ТекстОписания = СтрПолучитьСтроку(ТекстОписания, 1);
	
	ТекстОписания = КодироватьСтрокуВiCalendar(ТекстОписания);
	
	ДлинаПервойСтроки = 65;
	Если СтрДлина(ТекстОписания) <= ДлинаПервойСтроки Тогда
		Возврат ТекстОписания;
	КонецЕсли;
	
	МассивТекстОписанияФорматаiCalendar = Новый Массив;
	МассивТекстОписанияФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаПервойСтроки));
	ТекстОписания = Сред(ТекстОписания, ДлинаПервойСтроки + 1);
	
	ДлинаОстальныхСтрок = 72;
	Пока ЗначениеЗаполнено(ТекстОписания) Цикл
		МассивТекстОписанияФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаОстальныхСтрок));
		ТекстОписания = ?(СтрДлина(ТекстОписания) > ДлинаОстальныхСтрок,
			Сред(ТекстОписания, ДлинаОстальныхСтрок + 1),
			"");
	КонецЦикла;
	ТекстОписанияФорматаiCalendar = СтрСоединить(МассивТекстОписанияФорматаiCalendar, Символы.ПС + " ");
	
	Возврат ТекстОписанияФорматаiCalendar;
	
КонецФункции

Функция ТекстЗаметкиФорматаiCalendar(Знач ТекстОписания)
	
	ПозицияРазделителяСтроки = СтрНайти(ТекстОписания, Символы.ПС);
	Если СтрНайти(ТекстОписания, Символы.ПС) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = Сред(ТекстОписания, ПозицияРазделителяСтроки + 1);
	Если Не ЗначениеЗаполнено(ТекстОписания) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстОписания = КодироватьСтрокуВiCalendar(ТекстОписания);
	
	ДлинаПервойСтроки = 61;
	Если СтрДлина(ТекстОписания) <= ДлинаПервойСтроки Тогда
		Возврат Символы.ПС + "DESCRIPTION:" + ТекстОписания;
	КонецЕсли;
	
	МассивТекстЗаметкиФорматаiCalendar = Новый Массив;
	МассивТекстЗаметкиФорматаiCalendar.Добавить(Символы.ПС + "DESCRIPTION:" + Лев(ТекстОписания, ДлинаПервойСтроки));
	ТекстОписания = Сред(ТекстОписания, ДлинаПервойСтроки + 1);
	
	ДлинаОстальныхСтрок = 72;
	Пока ЗначениеЗаполнено(ТекстОписания) Цикл
		МассивТекстЗаметкиФорматаiCalendar.Добавить(Лев(ТекстОписания, ДлинаОстальныхСтрок));
		ТекстОписания = ?(СтрДлина(ТекстОписания) > ДлинаОстальныхСтрок,
			Сред(ТекстОписания, ДлинаОстальныхСтрок + 1),
			"");
	КонецЦикла;
	ТекстЗаметкиФорматаiCalendar = СтрСоединить(МассивТекстЗаметкиФорматаiCalendar, Символы.ПС + " ");
	
	Возврат ТекстЗаметкиФорматаiCalendar;
	
КонецФункции

Функция СобытиеiCalendar(ОписаниеСобытия, Организатор, ВремяНапоминания)
	
	ВесьДень = ОписаниеСобытия.ДатаНачала = НачалоДня(ОписаниеСобытия.ДатаНачала)
		И ОписаниеСобытия.ДатаОкончания = КонецДня(ОписаниеСобытия.ДатаОкончания);
	ФорматДаты = ?(ВесьДень, "ТолькоДата", "ВремяСЧасовымПоясом");
	
	МассивСобытиеiCalendar = Новый Массив;
	
	МассивСобытиеiCalendar.Добавить("BEGIN:VEVENT");
	
	Если ЗначениеЗаполнено(Организатор) ТОгда
		МассивСобытиеiCalendar.Добавить("ORGANIZER:mailto:" + Организатор);
	КонецЕсли;
	
	МассивСобытиеiCalendar.Добавить("UID:" + ОписаниеСобытия.Идентификатор);
	
	МассивСобытиеiCalendar.Добавить("DTSTART;" + ДатаФорматаiCalendar(
		ОписаниеСобытия.ДатаНачала,
		ФорматДаты,
		"ДатаНачала"));
	
	МассивСобытиеiCalendar.Добавить("DTEND;" + ДатаФорматаiCalendar(
		ОписаниеСобытия.ДатаОкончания,
		ФорматДаты,
		"ДатаОкончания"));
	
	МассивСобытиеiCalendar.Добавить("DTSTAMP:" + ДатаФорматаiCalendar(ОписаниеСобытия.ДатаНачала));
	
	МассивСобытиеiCalendar.Добавить("SUMMARY:" + ТекстОписанияФорматаiCalendar(ОписаниеСобытия.Описание));
	
	ТекстЗаметкиФорматаiCalendar = ТекстЗаметкиФорматаiCalendar(ОписаниеСобытия.Описание);
	Если ЗначениеЗаполнено(ТекстЗаметкиФорматаiCalendar) Тогда
		МассивСобытиеiCalendar.Добавить(ТекстЗаметкиФорматаiCalendar);
	КонецЕсли;
	
	ПравилоПовторенияiCalendar = ПравилоПовторенияiCalendar(ОписаниеСобытия.ПравилоПовторения);
	Если ЗначениеЗаполнено(ПравилоПовторенияiCalendar) Тогда
		МассивСобытиеiCalendar.Добавить(ПравилоПовторенияiCalendar);
	КонецЕсли;
	
	ИсключенияПовторенияiCalendar = ИсключенияПовторенияiCalendar(
		ВесьДень,
		ОписаниеСобытия.ДатаНачала,
		ОписаниеСобытия.ПравилоПовторения);
	Если ЗначениеЗаполнено(ИсключенияПовторенияiCalendar) Тогда
		МассивСобытиеiCalendar.Добавить(ИсключенияПовторенияiCalendar);
	КонецЕсли;
	
	НапоминаниеiCalendar = НапоминаниеiCalendar(ВремяНапоминания);
	Если ЗначениеЗаполнено(НапоминаниеiCalendar) Тогда
		МассивСобытиеiCalendar.Добавить(НапоминаниеiCalendar);
	КонецЕсли;
	
	МассивСобытиеiCalendar.Добавить("END:VEVENT");
	
	Возврат СтрСоединить(МассивСобытиеiCalendar, Символы.ПС);
	
КонецФункции

Функция НапоминаниеiCalendar(Секунд)

	Результат = "";
	Если Не Секунд > 0 Тогда
		Возврат Результат;
	КонецЕсли;
	Минут = Цел(Секунд/60);	
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
	|BEGIN:VALARM
	|ACTION:DISPLAY
	|DESCRIPTION:Event reminder
	|TRIGGER:-PT%1M
	|X-WR-ALARMUID:%2
	|END:VALARM",
	Минут,
	Новый УникальныйИдентификатор);
	Возврат Результат;

КонецФункции

Функция ИдентификаторПриложенияiCalendar()

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"-//%1//%2//%3//RU", Метаданные.Поставщик, Метаданные.Синоним, Метаданные.Версия);

КонецФункции

Функция ВыделитьВремя(СтрокаВремени, Параметр)

	ЧасовойПояс = Неопределено;
	СтрокаВремени = СтрЗаменить(СтрокаВремени, Параметр, "");
	Если СтрНачинаетсяС(СтрокаВремени, ";VALUE=DATE:") Тогда
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ";VALUE=DATE:", "");
		ВыделенноеВремя = НачалоДня(Дата(СтрокаВремени));
	ИначеЕсли Лев(СтрокаВремени, 1) = ";" Тогда
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ";TZID=", "");
		Позиция = СтрНайти(СтрокаВремени, ":");
		ЧасовойПояс = Лев(СтрокаВремени, Позиция - 1);
		СтрокаВремени = Прав(СтрокаВремени, СтрДлина(СтрокаВремени) - Позиция);
		СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
		ВыделенноеВремя = МестноеВремя(УниверсальноеВремя(Дата(СтрокаВремени), ЧасовойПояс));
	Иначе
		СтрокаВремени = СтрЗаменить(СтрокаВремени, ":", "");
		СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
		СтрокаВремени = СтрЗаменить(СтрокаВремени, "Z", "");
		УниверсальноеВремя = Дата(СтрокаВремени);
		ВыделенноеВремя = МестноеВремя(УниверсальноеВремя);
	КонецЕсли;
	
	Возврат ВыделенноеВремя;
	
КонецФункции

Функция ВыделитьВремена(СтрокаВремен, Параметр)
	
	ВыделенныеВремена = Новый Массив;
	
	ЧасовойПояс = Неопределено;
	СтрокаВремен = СтрЗаменить(СтрокаВремен, Параметр, "");
	Если СтрНачинаетсяС(СтрокаВремен, ";VALUE=DATE:") Тогда
		
		СтрокаВремен = СтрЗаменить(СтрокаВремен, ";VALUE=DATE:", "");
		
		Для Каждого СтрокаВремени Из СтрРазделить(СтрокаВремен, ",") Цикл
			ВыделенныеВремена.Добавить(НачалоДня(Дата(СтрокаВремени)));
		КонецЦикла;
		
	ИначеЕсли Лев(СтрокаВремен, 1) = ";" Тогда
		
		СтрокаВремен = СтрЗаменить(СтрокаВремен, ";TZID=", "");
		Позиция = СтрНайти(СтрокаВремен, ":");
		ЧасовойПояс = Лев(СтрокаВремен, Позиция - 1);
		СтрокаВремен = Прав(СтрокаВремен, СтрДлина(СтрокаВремен) - Позиция);
		
		Для Каждого СтрокаВремени Из СтрРазделить(СтрокаВремен, ",") Цикл
			СтрокаВремени = СтрЗаменить(СтрокаВремени, "T", "");
			ВыделенныеВремена.Добавить(МестноеВремя(УниверсальноеВремя(Дата(СтрокаВремени), ЧасовойПояс)));
		КонецЦикла;
		
	Иначе
		
		СтрокаВремен = СтрЗаменить(СтрокаВремен, ":", "");
		СтрокаВремен = СтрЗаменить(СтрокаВремен, "T", "");
		СтрокаВремен = СтрЗаменить(СтрокаВремен, "Z", "");
		
		Для Каждого СтрокаВремени Из СтрРазделить(СтрокаВремен, ",") Цикл
			УниверсальноеВремя = Дата(СтрокаВремени);
			ВыделенноеВремя = МестноеВремя(УниверсальноеВремя);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВыделенныеВремена;
	
КонецФункции

#КонецОбласти

#Область Конструкторы

Функция НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("Регистрировать",	Ложь); //Регистрировать изменения
	Результат.Вставить("Узлы",				Новый Массив); //Массив узлов "ПланОбменаСсылка.СинхронизацияКалендарей"
	Результат.Вставить("ДатаНачала",		ТекущаяДатаСеанса() - 31536000);
	Результат.Вставить("ДатаОкончания",		ТекущаяДатаСеанса() + 31536000);
	Если ЗначениеЗаполнено(ПараметрыПроцедуры) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПараметрыПроцедуры);
	КонецЕсли;
	Возврат Результат;

КонецФункции

Функция НовоеОписаниеКалендаря()

	ОписаниеКалендаря = Новый Структура;
	ОписаниеКалендаря.Вставить("Владелец",					Справочники.Пользователи.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("ТипСинхронизации",			Перечисления.ТипыСинхронизацииКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("Узел",						ПланыОбмена.СинхронизацияКалендарей.ПустаяСсылка());
	ОписаниеКалендаря.Вставить("ВремяУведомленийЭкспорт",	0);
	ОписаниеКалендаря.Вставить("ВремяУведомленийИмпорт",	0);
	ОписаниеКалендаря.Вставить("Наименование",				"");
	ОписаниеКалендаря.Вставить("Идентификатор",				"");
	ОписаниеКалендаря.Вставить("ТокенСинхронизации",		"");
	ОписаниеКалендаря.Вставить("БезОписания",				Ложь);
	ОписаниеКалендаря.Вставить("ДатаПервоначальнойСинхронизации", Дата(1,1,1));
	ОписаниеКалендаря.Вставить("События",					НовоеОписаниеСобытийКалендаря());
	Возврат ОписаниеКалендаря;

КонецФункции

Функция НовоеОписаниеСобытийКалендаря()

	ОписаниеСобытий = Новый ТаблицаЗначений;
	ОписаниеСобытий.Колонки.Добавить("Наименование",			      Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("Описание",				      Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ДатаНачала",				      Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("ДатаОкончания",			      Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ОписаниеСобытий.Колонки.Добавить("Идентификатор",			      Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ОтпечатокОбъекта",		      Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ПометкаУдаления",			      Новый ОписаниеТипов("Булево"));
	ОписаниеСобытий.Колонки.Добавить("ЗаписьУдалена",			      Новый ОписаниеТипов("Булево"));
	ОписаниеСобытий.Колонки.Добавить("Ссылка",					      Новый ОписаниеТипов("УникальныйИдентификатор"));
	ОписаниеСобытий.Колонки.Добавить("ИдентификаторЗаписи",		      Новый ОписаниеТипов("УникальныйИдентификатор"));
	ОписаниеСобытий.Колонки.Добавить("ИдентификаторПовторения",       Новый ОписаниеТипов("УникальныйИдентификатор"));
	ОписаниеСобытий.Колонки.Добавить("Пользователь",                  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ОписаниеСобытий.Колонки.Добавить("Состояние",				      Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ПравилоПовторения",		      Новый ОписаниеТипов("Структура"));
	ОписаниеСобытий.Колонки.Добавить("ИдентификаторПовторенияВнешний",Новый ОписаниеТипов("Строка"));
	ОписаниеСобытий.Колонки.Добавить("ДатаИсключения",			      Новый ОписаниеТипов("Дата"));
	Возврат ОписаниеСобытий;

КонецФункции

Функция НовоеОписаниеРезультатовСинхронизации()
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки",		"");
	Результат.Вставить("ТокеныСинхронизации",	Новый Соответствие);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ЗарегистрироватьИзменения(ПараметрыПроцедуры)

	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СинхронизацияКалендарей.Ссылка КАК Узел,
	|	СинхронизацияКалендарей.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТПользователи
	|ИЗ
	|	ПланОбмена.СинхронизацияКалендарей КАК СинхронизацияКалендарей
	|ГДЕ
	|	СинхронизацияКалендарей.Ссылка В(&Узлы)
	|	И СинхронизацияКалендарей.Включен
	|	И НЕ СинхронизацияКалендарей.ПометкаУдаления
	|	И НЕ СинхронизацияКалендарей.Ссылка = &ЭтотУзел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторПовторения
	|ПОМЕСТИТЬ ВТЗаписиДляРегистрации
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	КалендариПользователей.Начало МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И КалендариПользователей.Пользователь В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТПользователи.Пользователь
	|			ИЗ
	|				ВТПользователи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПользователи.Узел КАК Узел,
	|	ВТЗаписиДляРегистрации.Пользователь КАК Пользователь,
	|	ВТЗаписиДляРегистрации.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ВТЗаписиДляРегистрации.ИдентификаторПовторения КАК ИдентификаторПовторения
	|ИЗ
	|	ВТПользователи КАК ВТПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаписиДляРегистрации КАК ВТЗаписиДляРегистрации
	|		ПО ВТПользователи.Пользователь = ВТЗаписиДляРегистрации.Пользователь");
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("Узлы", ПараметрыПроцедурыСинхронизации.Узлы);
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыПроцедурыСинхронизации.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыПроцедурыСинхронизации.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.КалендариПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь, Истина);
			НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Выборка.ИдентификаторЗаписи, Истина);
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Узел, НаборЗаписей);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура СинхронизироватьКалендари(ПараметрыПроцедуры = Неопределено)
	
	ПараметрыПроцедурыСинхронизации = НовыеПараметрыПроцедурыСинхронизации(ПараметрыПроцедуры);
	ИнициализироватьУзелПланаОбмена();
	РезультатыСинхронизации = Новый Соответствие;
	ЗагрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации);
	ВыгрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации);
	ПланыОбмена.СинхронизацияКалендарей.ЗаписатьРезультатыСинхронизации(РезультатыСинхронизации);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации)

	ДанныеКалендарейДляЗагрузки = ДанныеКалендарейДляЗагрузки(ПараметрыПроцедурыСинхронизации.Узлы);
	Для Каждого ОписаниеКалендаря Из ДанныеКалендарейДляЗагрузки Цикл
		
		Если РезультатыСинхронизации.Получить(ОписаниеКалендаря.Узел) = Неопределено Тогда
			РезультатыСинхронизации.Вставить(ОписаниеКалендаря.Узел, НовоеОписаниеРезультатовСинхронизации());
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(ОписаниеКалендаря.Узел);
		Исключение
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки = ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
		
		Попытка
			ДатаНачала = ПараметрыПроцедурыСинхронизации.ДатаНачала;
			ДатаОкончания = ПараметрыПроцедурыСинхронизации.ДатаОкончания;
			Если ПараметрыПроцедурыСинхронизации.ДатаНачала < ОписаниеКалендаря.ДатаПервоначальнойСинхронизации Тогда
				ДатаНачала = ОписаниеКалендаря.ДатаПервоначальнойСинхронизации;
			КонецЕсли;
			Если ДатаНачала > ДатаОкончания Тогда
				ДатаНачала = НачалоДня(ДатаОкончания);
			КонецЕсли;
			Если ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.DAV Тогда
				СинхронизацияDAV.ЗагрузитьДанныеКалендаря(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
			ИначеЕсли ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.Google Тогда
				СинхронизацияGoogle.ЗагрузитьДанныеКалендаря(ОписаниеКалендаря, ДатаНачала, ДатаОкончания);
			Иначе
				Продолжить;
			КонецЕсли;
			ИзменитьЗаписиКалендаря(ОписаниеКалендаря);
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ТокеныСинхронизации.Вставить(
				ОписаниеКалендаря.Идентификатор, ОписаниеКалендаря.ТокенСинхронизации);
		Исключение
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
		РазблокироватьДанныеДляРедактирования(ОписаниеКалендаря.Узел);
		
	КонецЦикла;

КонецПроцедуры

Процедура ВыгрузитьДанныеКалендаря(ПараметрыПроцедурыСинхронизации, РезультатыСинхронизации)

	ДанныеКалендарейДляВыгрузки = ДанныеКалендарейДляВыгрузки(ПараметрыПроцедурыСинхронизации.Узлы);
	Для Каждого ОписаниеКалендаря Из ДанныеКалендарейДляВыгрузки Цикл
		Если РезультатыСинхронизации.Получить(ОписаниеКалендаря.Узел) = Неопределено Тогда
			РезультатыСинхронизации.Вставить(ОписаниеКалендаря.Узел, НовоеОписаниеРезультатовСинхронизации());
		КонецЕсли;
		Если ЗначениеЗаполнено(РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Если ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.DAV Тогда
				СинхронизацияDAV.ВыгрузитьДанныеКалендаря(ОписаниеКалендаря);
			ИначеЕсли ОписаниеКалендаря.ТипСинхронизации = Перечисления.ТипыСинхронизацииКалендарей.Google Тогда
				СинхронизацияGoogle.ВыгрузитьДанныеКалендаря(ОписаниеКалендаря);
			Иначе
				Продолжить;
			КонецЕсли;
		Исключение
			РезультатыСинхронизации[ОписаниеКалендаря.Узел].ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьУзелПланаОбмена()

	УстановитьПривилегированныйРежим(Истина);
	ЭтотУзел = ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел();
	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
		Возврат;
	КонецЕсли;
	УзелОбъект = ЭтотУзел.ПолучитьОбъект();
	УзелОбъект.ОбменДанными.Загрузка = Истина;
	УзелОбъект.УстановитьНовыйКод();
	УзелОбъект.Наименование = НСтр("ru = 'Этот узел'");
	УзелОбъект.Записать();

КонецПроцедуры

Функция ДанныеКалендарейДляВыгрузки(Узлы) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Массив;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КалендариПользователейИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей) КАК Узел,
	|	КалендариПользователейИзменения.Пользователь КАК Пользователь,
	|	КалендариПользователейИзменения.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ВЫРАЗИТЬ(СинхронизацияКалендарейКалендари.Ссылка КАК ПланОбмена.СинхронизацияКалендарей).ТипСинхронизации КАК ТипСинхронизации,
	|	ЕСТЬNULL(СинхронизацияКалендарейКалендари.Наименование, """") КАК НаименованиеКалендаря,
	|	ЕСТЬNULL(СинхронизацияКалендарейКалендари.Идентификатор, """") КАК ИдентификаторКалендаря,
	|	КалендариПользователейИзменения.ИдентификаторЗаписи	КАК Ссылка,
	|	ЕСТЬNULL(КалендариПользователей.Название, """") КАК Наименование,
	|	ЕСТЬNULL(КалендариПользователей.Описание, """") КАК Описание,
	|	ВЫБОР
	|		КОГДА КалендариПользователей.Название ЕСТЬ NULL
	|				ИЛИ НЕ """" ПОДОБНО КалендариПользователей.Название
	|			ТОГДА """"
	|		КОГДА КалендариПользователей.Задача <> ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.Задача.Наименование
	|		КОГДА КалендариПользователей.Ошибка <> ЗНАЧЕНИЕ(Справочник.Ошибки.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.Ошибка.Наименование
	|		КОГДА КалендариПользователей.ТехническийПроект <> ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.ТехническийПроект.Наименование
	|		КОГДА КалендариПользователей.ВидДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыДеятельности.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.ВидДеятельности.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АвтоОписание,
	|	КалендариПользователей.Задача КАК Задача,
	|	КалендариПользователей.Ошибка КАК Ошибка,
	|	КалендариПользователей.ТехническийПроект КАК ТехническийПроект,
	|	КалендариПользователей.ВидДеятельности КАК ВидДеятельности,
	|	ЕСТЬNULL(КалендариПользователей.Начало, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
	|	ЕСТЬNULL(КалендариПользователей.Окончание, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА КалендариПользователей.Пользователь ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		КОГДА КалендариПользователей.Удаленный
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА КалендариПользователей.Пользователь ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаписьУдалена,
	|	ЕСТЬNULL(КалендариПользователей.Повторяется, ЛОЖЬ) КАК Повторяется,
	|	КалендариПользователей.Расписание КАК Расписание,
	|	"""" КАК Состояние,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписиВоВнешнемКалендаре, """") КАК Идентификатор,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.ОтпечатокОбъекта, """") КАК ОтпечатокОбъекта,
	|	0 КАК ВремяУведомленийИмпорт,
	|	0 КАК ВремяУведомленийЭкспорт
	|ИЗ
	|	РегистрСведений.КалендариПользователей.Изменения КАК КалендариПользователейИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСинхронизацииКалендарей КАК ЗаписиСинхронизацииКалендарей
	|		ПО (КалендариПользователейИзменения.ИдентификаторЗаписи = ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписи)
	|			И ((ВЫРАЗИТЬ(КалендариПользователейИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей)) = ЗаписиСинхронизацииКалендарей.Узел)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|		ПО КалендариПользователейИзменения.Пользователь = КалендариПользователей.Пользователь
	|			И КалендариПользователейИзменения.ИдентификаторЗаписи = КалендариПользователей.ИдентификаторЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.СинхронизацияКалендарей.Календари КАК СинхронизацияКалендарейКалендари
	|		ПО КалендариПользователейИзменения.Узел = СинхронизацияКалендарейКалендари.Ссылка
	|			И КалендариПользователейИзменения.Пользователь = СинхронизацияКалендарейКалендари.Ссылка.Пользователь
	|			И (СинхронизацияКалендарейКалендари.Изменение)
	|ГДЕ
	|	НЕ (ВЫРАЗИТЬ(КалендариПользователейИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей)) = &ЭтотУзел
	|	И НЕ ВЫРАЗИТЬ(КалендариПользователейИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).ПометкаУдаления
	|	И ВЫРАЗИТЬ(КалендариПользователейИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей).Включен
	|	И (&ОтборПоУзлам = ЛОЖЬ
	|			ИЛИ ВЫРАЗИТЬ(КалендариПользователейИзменения.Узел КАК ПланОбмена.СинхронизацияКалендарей) В (&Узлы))
	|	И НЕ(СинхронизацияКалендарейКалендари.БезОписания
	|				И ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.БезОписания, ЛОЖЬ))
	|ИТОГИ ПО
	|	Узел");
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("ОтборПоУзлам", ЗначениеЗаполнено(Узлы));
	Запрос.УстановитьПараметр("Узлы", Узлы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИсключенияПовторения = Новый ТаблицаЗначений;
	ИсключенияПовторения.Колонки.Добавить("ДатаИсключения", Новый ОписаниеТипов("Дата"));
	ИсключенияПовторения.Колонки.Добавить("ЗаписьИсключения", Новый ОписаниеТипов("УникальныйИдентификатор"));
		
	ВыборкаКалендари = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКалендари.Следующий() Цикл
		
		ВыборкаЗаписи = ВыборкаКалендари.Выбрать();
		ПовторяющиесяСобытия = Новый Массив;
		ПравилаПовторения = Новый Соответствие;
		
		Пока ВыборкаЗаписи.Следующий() Цикл
			Если Не ВыборкаЗаписи.Повторяется Тогда
				ПравилаПовторения[ВыборкаЗаписи.Ссылка] = КалендариПользователей.ПравилоПовторенияНикогда();
			Иначе
				ПовторяющиесяСобытия.Добавить(ВыборкаЗаписи.Ссылка);
			КонецЕсли;
		КонецЦикла;
				
		ДанныеЗамещения = КалендариПользователей.ЗамещающиеЗаписиПовторяемыхСобытий(ПовторяющиесяСобытия);
		
		ВыборкаЗаписи.Сбросить();
		ОписаниеКалендаря = НовоеОписаниеКалендаря();
		
		Пока ВыборкаЗаписи.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ОписаниеКалендаря.События) Тогда
				ОписаниеКалендаря.Владелец = ВыборкаЗаписи.Пользователь;
				ОписаниеКалендаря.Узел = ВыборкаЗаписи.Узел;
				ОписаниеКалендаря.Наименование = ВыборкаЗаписи.НаименованиеКалендаря;
				ОписаниеКалендаря.Идентификатор = ВыборкаЗаписи.ИдентификаторКалендаря;
				ОписаниеКалендаря.ТипСинхронизации = ВыборкаЗаписи.ТипСинхронизации;
				ОписаниеКалендаря.ВремяУведомленийИмпорт = 0;
				ОписаниеКалендаря.ВремяУведомленийЭкспорт = 0;
			КонецЕсли;
			
			НоваяСтрока = ОписаниеКалендаря.События.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписи);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
				НоваяСтрока.Наименование = ВыборкаЗаписи.АвтоОписание;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Описание) Тогда
				НоваяСтрока.Описание = ВыборкаЗаписи.АвтоОписание;
			КонецЕсли;
			
			Если Не ВыборкаЗаписи.Повторяется Тогда
				НоваяСтрока.ПравилоПовторения = ПравилаПовторения[ВыборкаЗаписи.Ссылка];
			Иначе
				Если ТипЗнч(ВыборкаЗаписи.Расписание) = Тип("ХранилищеЗначения") Тогда
					Расписание = ВыборкаЗаписи.Расписание.Получить();
				Иначе
					Расписание = Неопределено;
				КонецЕсли;
				
				ИсключенияДляЗаписи = ДанныеЗамещения.Получить(ВыборкаЗаписи.Ссылка);
				
				Если ИсключенияДляЗаписи = Неопределено Тогда
					ИсключенияДляЗаписи = ИсключенияПовторения;
				КонецЕсли;
				
				НоваяСтрока.ПравилоПовторения =
				    КалендариПользователей.ПравилоПовторенияПоРасписанию(Расписание, ВыборкаЗаписи.ДатаНачала,
					                                                     ВыборкаЗаписи.ДатаОкончания, ИсключенияДляЗаписи);
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Добавить(ОписаниеКалендаря);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ДанныеКалендарейДляЗагрузки(Узлы)

	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Массив;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинхронизацияКалендарейКалендари.Ссылка КАК Узел,
	|	СинхронизацияКалендарейКалендари.Ссылка.Пользователь КАК Владелец,
	|	СинхронизацияКалендарейКалендари.Наименование КАК Наименование,
	|	СинхронизацияКалендарейКалендари.Идентификатор КАК Идентификатор,
	|	СинхронизацияКалендарейКалендари.ТокенСинхронизации КАК ТокенСинхронизации,
	|	СинхронизацияКалендарейКалендари.БезОписания КАК БезОписания,
	|	СинхронизацияКалендарейКалендари.Ссылка.ТипСинхронизации КАК ТипСинхронизации,
	|	0 КАК ВремяУведомленийЭкспорт,
	|	0 КАК ВремяУведомленийИмпорт,
	|	СинхронизацияКалендарейКалендари.Ссылка.ДатаПервоначальнойСинхронизации КАК ДатаПервоначальнойСинхронизации
	|ИЗ
	|	ПланОбмена.СинхронизацияКалендарей.Календари КАК СинхронизацияКалендарейКалендари
	|ГДЕ
	|	НЕ СинхронизацияКалендарейКалендари.Ссылка = &ЭтотУзел
	|	И (&ОтборПоУзлам = ЛОЖЬ
	|			ИЛИ СинхронизацияКалендарейКалендари.Ссылка В (&Узлы))
	|	И НЕ СинхронизацияКалендарейКалендари.Ссылка.ПометкаУдаления
	|	И СинхронизацияКалендарейКалендари.Ссылка.Включен
	|	И СинхронизацияКалендарейКалендари.Чтение");
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("ОтборПоУзлам", ЗначениеЗаполнено(Узлы));
	Запрос.УстановитьПараметр("Узлы", Узлы);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеКалендаря = НовоеОписаниеКалендаря();
		ЗаполнитьЗначенияСвойств(ОписаниеКалендаря, Выборка);
		Результат.Добавить(ОписаниеКалендаря);
	КонецЦикла;
	Возврат Результат;

КонецФункции

Процедура ИзменитьЗаписиКалендаря(ОписаниеКалендаря)

	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	События.Наименование КАК Наименование,
	|	События.Описание КАК Описание,
	|	События.ДатаНачала КАК ДатаНачала,
	|	События.ДатаОкончания КАК ДатаОкончания,
	|	События.Идентификатор КАК Идентификатор,
	|	События.ОтпечатокОбъекта КАК ОтпечатокОбъекта,
	|	События.ПометкаУдаления КАК ПометкаУдаления,
	|	События.ИдентификаторПовторенияВнешний КАК ИдентификаторПовторенияВнешний,
	|	События.ДатаИсключения КАК ДатаИсключения
	|ПОМЕСТИТЬ ВТСобытия
	|ИЗ
	|	&События КАК События
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СинхронизацияКалендарей.Ссылка КАК Узел,
	|	СинхронизацияКалендарей.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ Узлы
	|ИЗ
	|	ПланОбмена.СинхронизацияКалендарей КАК СинхронизацияКалендарей
	|ГДЕ
	|	СинхронизацияКалендарей.Ссылка = &Узел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	События.Идентификатор КАК Идентификатор,
	|	События.ИдентификаторПовторенияВнешний КАК ИдентификаторПовторенияВнешний,
	|	События.ПометкаУдаления КАК ПометкаУдаления,
	|	ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ПОМЕСТИТЬ ИсходныеЗаписиПовторяемыхСобытий
	|ИЗ
	|	ВТСобытия КАК События
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСинхронизацииКалендарей КАК ЗаписиСинхронизацииКалендарей
	|		ПО (ПОДСТРОКА(События.ИдентификаторПовторенияВнешний, 0, 1000) = ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписиВоВнешнемКалендаре, 0, 1000))
	|			И (НЕ """" ПОДОБНО ПОДСТРОКА(События.ИдентификаторПовторенияВнешний, 0, 1000))
	|			И (ЗаписиСинхронизацииКалендарей.Узел = &Узел)
	|			И (ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторКалендаря, 0, 1000) = ПОДСТРОКА(&ИдентификаторКалендаря, 0, 1000))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторИсходнойЗаписи,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗамещающейЗаписи
	|ПОМЕСТИТЬ ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий
	|ИЗ
	|	ВТСобытия КАК События
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСинхронизацииКалендарей КАК ЗаписиСинхронизацииКалендарей
	|		ПО (ПОДСТРОКА(События.Идентификатор, 0, 1000) = ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписиВоВнешнемКалендаре, 0, 1000))
	|			И (ЗаписиСинхронизацииКалендарей.Узел = &Узел)
	|			И (ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторКалендаря, 0, 1000) = ПОДСТРОКА(&ИдентификаторКалендаря, 0, 1000))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|		ПО (ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписи = КалендариПользователей.ИдентификаторПовторения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Узлы КАК Узлы
	|		ПО (Узлы.Пользователь = КалендариПользователей.Пользователь)
	|ГДЕ
	|	События.ПометкаУдаления
	|	И НЕ Узлы.Пользователь ЕСТЬ NULL
	|	И НЕ КалендариПользователей.Удаленный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторИсходнойЗаписи,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗамещающейЗаписи
	|ПОМЕСТИТЬ ЗамещающиеЗаписиСуществующихПовторяемыхСобытий
	|ИЗ
	|	ВТСобытия КАК События
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСинхронизацииКалендарей КАК ЗаписиСинхронизацииКалендарей
	|		ПО (ПОДСТРОКА(События.Идентификатор, 0, 1000) = ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписиВоВнешнемКалендаре, 0, 1000))
	|			И (ЗаписиСинхронизацииКалендарей.Узел = &Узел)
	|			И (ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторКалендаря, 0, 1000) = ПОДСТРОКА(&ИдентификаторКалендаря, 0, 1000))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|		ПО (ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписи = КалендариПользователей.ИдентификаторПовторения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Узлы КАК Узлы
	|		ПО (Узлы.Пользователь = КалендариПользователей.Пользователь)
	|ГДЕ
	|	НЕ События.ПометкаУдаления
	|	И НЕ Узлы.Пользователь ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	События.Наименование КАК Наименование,
	|	События.Описание КАК Описание,
	|	События.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА События.ДатаОкончания = НАЧАЛОПЕРИОДА(События.ДатаОкончания, ДЕНЬ)
	|			ТОГДА ДОБАВИТЬКДАТЕ(События.ДатаОкончания, СЕКУНДА, -1)
	|		ИНАЧЕ События.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания,
	|	События.Идентификатор КАК Идентификатор,
	|	События.ОтпечатокОбъекта КАК ОтпечатокОбъекта,
	|	События.ПометкаУдаления КАК ПометкаУдаления,
	|	События.ИдентификаторПовторенияВнешний КАК ИдентификаторПовторенияВнешний,
	|	События.ДатаИсключения КАК ДатаИсключения,
	|	ЕСТЬNULL(КалендариПользователей.ИдентификаторЗаписи, &ПустойИдентификатор) КАК ИдентификаторЗаписи,
	|	ЕСТЬNULL(КалендариПользователей.ИдентификаторПовторения, &ПустойИдентификатор) КАК ИдентификаторПовторения,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписи, &ПустойИдентификатор) КАК ИдентификаторЗаписиСинхронизации,
	|	РАЗНОСТЬДАТ(События.ДатаНачала, События.ДатаОкончания, ДЕНЬ) > 0 КАК ВесьДень,
	|	ЕСТЬNULL(ЗаписиСинхронизацииКалендарей.БезОписания, ЛОЖЬ) КАК БезОписания,
	|	ВЫБОР
	|		КОГДА КалендариПользователей.Название ЕСТЬ NULL
	|				ИЛИ НЕ """" ПОДОБНО КалендариПользователей.Название
	|			ТОГДА """"
	|		КОГДА КалендариПользователей.Задача <> ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.Задача.Наименование
	|		КОГДА КалендариПользователей.Ошибка <> ЗНАЧЕНИЕ(Справочник.Ошибки.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.Ошибка.Наименование
	|		КОГДА КалендариПользователей.ТехническийПроект <> ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.ТехническийПроект.Наименование
	|		КОГДА КалендариПользователей.ВидДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыДеятельности.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.ВидДеятельности.Наименование
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АвтоОписание,
	|	ЕСТЬNULL(КалендариПользователей.Название, """") КАК НазваниеСуществующейЗаписи,
	|	ВЫБОР
	|		КОГДА """" ПОДОБНО События.ИдентификаторПовторенияВнешний
	|				И (КалендариПользователей.ИдентификаторПовторения = &ПустойИдентификатор
	|					ИЛИ КалендариПользователей.ИдентификаторПовторения ЕСТЬ NULL)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Замещающее
	|ИЗ
	|	ВТСобытия КАК События
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиСинхронизацииКалендарей КАК ЗаписиСинхронизацииКалендарей
	|		ПО (ПОДСТРОКА(События.Идентификатор, 0, 1000) = ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписиВоВнешнемКалендаре, 0, 1000))
	|			И (ЗаписиСинхронизацииКалендарей.Узел = &Узел)
	|			И (ПОДСТРОКА(ЗаписиСинхронизацииКалендарей.ИдентификаторКалендаря, 0, 1000) = ПОДСТРОКА(&ИдентификаторКалендаря, 0, 1000))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|		ПО (ЗаписиСинхронизацииКалендарей.ИдентификаторЗаписи = КалендариПользователей.ИдентификаторЗаписи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Узлы КАК Узлы
	|		ПО (Узлы.Пользователь = КалендариПользователей.Пользователь)
	|ГДЕ
	|	(НЕ Узлы.Пользователь ЕСТЬ NULL
	|			ИЛИ КалендариПользователей.Пользователь ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Замещающее");
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос.УстановитьПараметр("События", ОписаниеКалендаря.События);
	Запрос.УстановитьПараметр("Узел", ОписаниеКалендаря.Узел);
	Запрос.УстановитьПараметр("ИдентификаторКалендаря", ОписаниеКалендаря.Идентификатор);
	Запрос.УстановитьПараметр("ПустойИдентификатор", ПустойИдентификатор);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеЗаписиПовторяемыхСобытий = Запрос.МенеджерВременныхТаблиц.Таблицы["ИсходныеЗаписиПовторяемыхСобытий"].ПолучитьДанные().Выгрузить();
	ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий = Запрос.МенеджерВременныхТаблиц.Таблицы["ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий"].ПолучитьДанные().Выгрузить();
	ЗамещающиеЗаписиСуществующихПовторяемыхСобытий = Запрос.МенеджерВременныхТаблиц.Таблицы["ЗамещающиеЗаписиСуществующихПовторяемыхСобытий"].ПолучитьДанные().Выгрузить();
	
	ДобавленныеИсходныеЗаписи = Новый Соответствие;
	
	ЗаписиКалендаря = Новый Структура;
	ЗаписиКалендаря.Вставить("ИсходныеЗаписиПовторяемыхСобытий", ИсходныеЗаписиПовторяемыхСобытий);
	ЗаписиКалендаря.Вставить("ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий", ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий);
	ЗаписиКалендаря.Вставить("ЗамещающиеЗаписиСуществующихПовторяемыхСобытий", ЗамещающиеЗаписиСуществующихПовторяемыхСобытий);
	ЗаписиКалендаря.Вставить("ДобавленныеИсходныеЗаписи", ДобавленныеИсходныеЗаписи);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пользователь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОписаниеКалендаря.Узел, "Пользователь");
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ДанныеСобытия = ОписаниеКалендаря.События.Найти(Выборка.Идентификатор, "Идентификатор");
			ИзменитьЗаписьКалендаря(Выборка, ОписаниеКалендаря, ДанныеСобытия.ПравилоПовторения,
			                        ЗаписиКалендаря, Пользователь);
									
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьЗаписьКалендаря(Выборка, ОписаниеКалендаря, ПравилоПовторения, ЗаписиКалендаря, Пользователь)
	
	ИсходныеЗаписиПовторяемыхСобытий = ЗаписиКалендаря.ИсходныеЗаписиПовторяемыхСобытий;
	ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий = ЗаписиКалендаря.ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий;
	ЗамещающиеЗаписиСуществующихПовторяемыхСобытий = ЗаписиКалендаря.ЗамещающиеЗаписиСуществующихПовторяемыхСобытий;
	ДобавленныеИсходныеЗаписи = ЗаписиКалендаря.ДобавленныеИсходныеЗаписи;
	
	Если ЗначениеЗаполнено(Выборка.ИдентификаторЗаписи) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КалендариПользователей");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗаписи", Выборка.ИдентификаторЗаписи);
		
		Блокировка.Заблокировать();
	КонецЕсли;
	
	Если Не Выборка.Замещающее И Выборка.ПометкаУдаления И Не ЗначениеЗаполнено(Выборка.ИдентификаторЗаписи) Тогда
		
		// Запись удалена и её нет в базе, изменения не требуются.
		
	ИначеЕсли Не Выборка.Замещающее И Выборка.ПометкаУдаления И ЗначениеЗаполнено(Выборка.ИдентификаторЗаписи) Тогда
		
		// Запись существует в базе, но удалена в календаре - нужно удалить в базе
		
		НаборЗаписей = РегистрыСведений.КалендариПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина); 
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Выборка.ИдентификаторЗаписи, Истина);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.ОбменДанными.Отправитель = ОписаниеКалендаря.Узел;
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ЗаписиСинхронизацииКалендарей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
		МенеджерЗаписи.Узел = ОписаниеКалендаря.Узел;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
		// Отвязка замещающих событий от удаленного повторяемого события
		ОтборЗаписей = Новый Структура;
		ОтборЗаписей.Вставить("ИдентификаторИсходнойЗаписи", Выборка.ИдентификаторЗаписи);
		
		ЗамещающиеЗаписи = ЗамещающиеЗаписиУдаленныхПовторяемыхСобытий.НайтиСтроки(ОтборЗаписей);
		
		Для Каждого СтрокаТаблицы из ЗамещающиеЗаписи Цикл
			
			НаборЗаписей = РегистрыСведений.КалендариПользователей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина); 
			НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(СтрокаТаблицы.ИдентификаторЗамещающейЗаписи, Истина);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество()>0 Тогда
				
				Для Каждого Запись из НаборЗаписей Цикл
					Запись.ИдентификаторПовторения = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
					Запись.ДатаЗамещения = '00010101';
				КонецЦикла;
				
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
				НаборЗаписей.ОбменДанными.Отправитель = ОписаниеКалендаря.Узел;
				НаборЗаписей.Записать();
					
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		// Запись требуется обновить, при отсутствии - создать
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторЗаписиСинхронизации) Тогда
			ОтборОтпечатка = Новый Структура("ИдентификаторЗаписи, Узел", Выборка.ИдентификаторЗаписиСинхронизации, ОписаниеКалендаря.Узел);
			ТекущийОтпечатокОбъекта = РегистрыСведений.ЗаписиСинхронизацииКалендарей.Получить(ОтборОтпечатка).ОтпечатокОбъекта;
			Если Выборка.ОтпечатокОбъекта = ТекущийОтпечатокОбъекта Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ИдентификаторИсходнойЗаписи = Неопределено;
		
		СозданаНоваяЗапись = Ложь;
		
		НаборЗаписей = РегистрыСведений.КалендариПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина);
		
		// Получаются идентификаторы записи в базе, при отсутствии - создаются новые
		Если Выборка.Замещающее Тогда
			
			Если ЗначениеЗаполнено(Выборка.ИдентификаторЗаписи) Тогда
				ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
			Иначе
				
				ИдентификаторЗаписи = Новый УникальныйИдентификатор();
				
				СтрокаТаблицы = ИсходныеЗаписиПовторяемыхСобытий.Найти(Выборка.ИдентификаторПовторенияВнешний, "ИдентификаторПовторенияВнешний");
				
				Если СтрокаТаблицы <> Неопределено Тогда
					ИдентификаторИсходнойЗаписи = СтрокаТаблицы.ИдентификаторЗаписи;
				Иначе
					ИдентификаторИсходнойЗаписи = ДобавленныеИсходныеЗаписи.Получить(Выборка.ИдентификаторПовторенияВнешний);
					Если ИдентификаторИсходнойЗаписи = Неопределено Тогда
						// Не найдена исходная запись для замещающей
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Запись не замещающая, а обычная
			Если ЗначениеЗаполнено(Выборка.ИдентификаторЗаписи) Тогда
				ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
			Иначе
				ИдентификаторЗаписи = Новый УникальныйИдентификатор();
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда
			Запись = НаборЗаписей.Получить(0);
		Иначе
			// Если записи в базе нет- создается новая
			Запись = НаборЗаписей.Добавить();
			Запись.Пользователь = Пользователь;
			Запись.ИдентификаторЗаписи = ИдентификаторЗаписи;
			
			Если Выборка.Замещающее Тогда
				Запись.ИдентификаторПовторения = ИдентификаторИсходнойЗаписи;
			КонецЕсли;
			
			СозданаНоваяЗапись = Истина;
		КонецЕсли;
		
		Запись.Начало = Выборка.ДатаНачала;
		Запись.Окончание = Выборка.ДатаОкончания;
			
		ЗаписьБезОписания = (ОписаниеКалендаря.БезОписания И СозданаНоваяЗапись) ИЛИ Выборка.БезОписания;
		Если ЗаписьБезОписания Тогда
			Запись.Название = НСтр("ru = 'Занят'");
		Иначе
			НазваниеИзВнешнегоКалендаря = Выборка.Наименование;
			
			Если НЕ СозданаНоваяЗапись 
				И НЕ ЗначениеЗаполнено(Выборка.НазваниеСуществующейЗаписи)
				И СокрЛП(Выборка.АвтоОписание) = СокрЛП(Лев(НазваниеИзВнешнегоКалендаря,250)) Тогда
				// В случае, если в исходной записи не было описания, не следует перезаписывать его
				// автоописанием из внешнего календаря
			Иначе
				Запись.Название = НазваниеИзВнешнегоКалендаря;
				Запись.Описание = Выборка.Описание;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Замещающее Тогда
			
			Если ЗначениеЗаполнено(Выборка.ДатаИсключения) Тогда
				Запись.ДатаЗамещения = Выборка.ДатаИсключения;
			КонецЕсли;
			
			Запись.Удаленный = Выборка.ПометкаУдаления;
		Иначе
			// Заполнение расписания события
			РасписаниеСобытия = Новый РасписаниеЭлементаПланировщика;
			КалендариПользователей.ЗаполнитьРасписаниеСобытияПоПравилу(РасписаниеСобытия, ПравилоПовторения);
			
			Если РасписаниеСобытия.ПериодПовтораДней <> 0
				ИЛИ РасписаниеСобытия.ПериодНедель <> 0
				ИЛИ РасписаниеСобытия.ПериодМесяцев <> 0
				ИЛИ РасписаниеСобытия.ПериодЛет <> 0 Тогда
				Запись.Расписание = Новый ХранилищеЗначения(РасписаниеСобытия);
				Запись.Повторяется = Истина;
				Запись.ОкончаниеПовторения = 
					РегистрыСведений.КалендариПользователей.ДатаОкончанияСобытия(РасписаниеСобытия, Запись.Начало,Запись.Окончание);
			КонецЕсли;
		КонецЕсли;
	
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.ОбменДанными.Отправитель = ОписаниеКалендаря.Узел;
		НаборЗаписей.Записать();
		
		Если НЕ Выборка.Замещающее Тогда
			
			Если СозданаНоваяЗапись Тогда
				ДобавленныеИсходныеЗаписи.Вставить(Выборка.Идентификатор, Запись.ИдентификаторЗаписи);
			Иначе
				// Для имеющихся повторяющихся событий откорректируем время замещающих записей
				Если Запись.Повторяется Тогда
					
					ВремяИсходнойЗаписиОтНачалаДня = Запись.Начало - НачалоДня(Запись.Начало); 
					
					ОтборЗаписей = Новый Структура;
					ОтборЗаписей.Вставить("ИдентификаторИсходнойЗаписи", Запись.ИдентификаторЗаписи);
					
					ЗамещающиеЗаписи = ЗамещающиеЗаписиСуществующихПовторяемыхСобытий.НайтиСтроки(ОтборЗаписей);
					
					Для Каждого СтрокаТаблицы из ЗамещающиеЗаписи Цикл
						
						НаборЗаписей = РегистрыСведений.КалендариПользователей.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина); 
						НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(СтрокаТаблицы.ИдентификаторЗамещающейЗаписи, Истина);
						
						НаборЗаписей.Прочитать();
						
						НужноИзменитьЗамещающуюЗапись = Ложь;
						
						Если НаборЗаписей.Количество()>0 Тогда
							
							Для Каждого ЗамещающаяЗапись из НаборЗаписей Цикл
								
								ВремяОтНачалаДня = ЗамещающаяЗапись.ДатаЗамещения - НачалоДня(ЗамещающаяЗапись.ДатаЗамещения);
								
								Если ВремяОтНачалаДня <> ВремяИсходнойЗаписиОтНачалаДня Тогда
									ЗамещающаяЗапись.ДатаЗамещения = НачалоДня(ЗамещающаяЗапись.ДатаЗамещения) + ВремяИсходнойЗаписиОтНачалаДня;
									НужноИзменитьЗамещающуюЗапись = Истина;
								КонецЕсли;
								
							КонецЦикла;
							
							Если НужноИзменитьЗамещающуюЗапись Тогда
								НаборЗаписей.ОбменДанными.Загрузка = Истина;
								НаборЗаписей.ОбменДанными.Отправитель = ОписаниеКалендаря.Узел;
								НаборЗаписей.Записать();
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.ЗаписиСинхронизацииКалендарей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторЗаписи	                 = Запись.ИдентификаторЗаписи;
		МенеджерЗаписи.Узел						             = ОписаниеКалендаря.Узел;
		МенеджерЗаписи.ИдентификаторКалендаря	             = ОписаниеКалендаря.Идентификатор;
		МенеджерЗаписи.ИдентификаторЗаписиВоВнешнемКалендаре = Выборка.Идентификатор;
		МенеджерЗаписи.ОтпечатокОбъекта			             = Выборка.ОтпечатокОбъекта;
		МенеджерЗаписи.БезОписания				             = ЗаписьБезОписания;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция УзлыДляВыгрузки(Знач Пользователь, ДляВсехПользователей = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Пользователь);
		Пользователь = МассивПользователей;
	КонецЕсли;
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СинхронизацияКалендарей.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.СинхронизацияКалендарей КАК СинхронизацияКалендарей
	|ГДЕ
	|	СинхронизацияКалендарей.Включен
	|	И НЕ СинхронизацияКалендарей.ПометкаУдаления
	|	И (СинхронизацияКалендарей.Пользователь В (&Пользователь)
	|			ИЛИ &ДляВсехПользователей)
	|	И НЕ СинхронизацияКалендарей.Ссылка = &ЭтотУзел");
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.СинхронизацияКалендарей.ЭтотУзел());
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ДляВсехПользователей", ДляВсехПользователей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Кодирует текстовую строку в iCalendar, согласно RFC 5545.
Функция КодироватьСтрокуВiCalendar(Строка)
	
	СтрокаiCalendar = СтрЗаменить(Строка, "\", "\\");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, ";", "\;");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, ",", "\,");
	СтрокаiCalendar = СтрЗаменить(СтрокаiCalendar, Символы.ПС, "\n");
	
	Возврат СтрокаiCalendar;
	
КонецФункции

// Раскодирует текстовую строку формата iCalendar, согласно RFC 5545.
Функция РаскодироватьСтрокуiCalendar(СтрокаiCalendar)
	
	Строка = СтрЗаменить(СтрокаiCalendar, "\n", Символы.ПС);
	Строка = СтрЗаменить(Строка, "\N", Символы.ПС);
	Строка = СтрЗаменить(Строка, "\,", ",");
	Строка = СтрЗаменить(Строка, "\;", ";");
	Строка = СтрЗаменить(Строка, "\\", "\");
	
	Возврат Строка;
	
КонецФункции

// Преобразует строку iCalendar в правило повторения, если строка содержит правило повторения.
//
// Параметры:
//  ПравилоПовторенияiCalendar - Строка - Строка iCalendar, содержащая правило повторения.
// 
// Возвращаемое значение:
//  Структура - Правило повторения.
//              См. КалендариПользователей.ПолучитьСтруктуруПравилаПовторения().
//
Функция ПравилоПовторения(Знач ПравилоПовторенияiCalendar) Экспорт
	
	КлючевоеСловоRRULE = "RRULE:";
	
	ПравилоПовторения = КалендариПользователей.ПолучитьСтруктуруПравилаПовторения();
	Если Не СтрНачинаетсяС(ПравилоПовторенияiCalendar, КлючевоеСловоRRULE) Тогда
		ПравилоПовторения.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
		Возврат ПравилоПовторения;
	КонецЕсли;
	
	ПравилоПовторения.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие;
	ПравилоПовторения.ИнтервалПовторения = 1;
	ПравилоПовторения.ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;
	
	ПравилоПовторенияiCalendar = Сред(ПравилоПовторенияiCalendar, СтрДлина(КлючевоеСловоRRULE) + 1);
	Для Каждого ЧастьПравила Из СтрРазделить(ПравилоПовторенияiCalendar, ";") Цикл
		
		ЭлементыЧастиПравила = СтрРазделить(ЧастьПравила, "=");
		Если ЭлементыЧастиПравила.Количество() <> 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЧастиПравила = ЭлементыЧастиПравила[0];
		ЗначениеЧастиПравила = ЭлементыЧастиПравила[1];
		Если ИмяЧастиПравила = "FREQ" Тогда // Частота повторения
			
			Если ЗначениеЧастиПравила = "SECONDLY" Тогда
				
				ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;
				
			ИначеЕсли ЗначениеЧастиПравила = "MINUTELY" Тогда
				
				ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;
				
			ИначеЕсли ЗначениеЧастиПравила = "HOURLY" Тогда
				
				ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;
				
			ИначеЕсли ЗначениеЧастиПравила = "DAILY" Тогда
				
				ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;
				
			ИначеЕсли ЗначениеЧастиПравила = "WEEKLY" Тогда
				
				ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно;
				
			ИначеЕсли ЗначениеЧастиПравила = "MONTHLY" Тогда
				
				ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно;
				
			ИначеЕсли ЗначениеЧастиПравила = "YEARLY" Тогда
				
				ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ИмяЧастиПравила = "UNTIL" Тогда // Дата окончания повторения
			
			ПравилоПовторения.ДатаОкончанияПовторения = ВыделитьВремя(ЗначениеЧастиПравила, "UNTIL");
			ПравилоПовторения.ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты;
			
		ИначеЕсли ИмяЧастиПравила = "COUNT" Тогда // Количество повторов
			
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			ПравилоПовторения.КоличествоПовторов = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеЧастиПравила);
			ПравилоПовторения.ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов;
			
		ИначеЕсли ИмяЧастиПравила = "INTERVAL" Тогда // Интервал повторения
			
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			ПравилоПовторения.ИнтервалПовторения = ОписаниеТипаЧисло.ПривестиЗначение(ЗначениеЧастиПравила);
			
		ИначеЕсли ИмяЧастиПравила = "BYMONTHDAY" Тогда // Повторение по дням месяца
			
			МассивПовторениеПоДнямМесяца = Новый Массив;
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			Для Каждого ЭлементЧастиПравила Из СтрРазделить(ЗначениеЧастиПравила, ",") Цикл
				МассивПовторениеПоДнямМесяца.Добавить(ОписаниеТипаЧисло.ПривестиЗначение(ЭлементЧастиПравила));
			КонецЦикла;
			
			ПравилоПовторения.ПовторениеПоДнямМесяца =
				КалендариПользователей.МассивПовторениеПоДнямМесяцаВЧисло(МассивПовторениеПоДнямМесяца);
			
		ИначеЕсли ИмяЧастиПравила = "BYMONTH" Тогда // Повторение по месяцам
			
			МассивПовторениеПоМесяцам = Новый Массив;
			ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
			Для Каждого ЭлементЧастиПравила Из СтрРазделить(ЗначениеЧастиПравила, ",") Цикл
				МассивПовторениеПоМесяцам.Добавить(ОписаниеТипаЧисло.ПривестиЗначение(ЭлементЧастиПравила));
			КонецЦикла;
			
			ПравилоПовторения.ПовторениеПоМесяцам =
				КалендариПользователей.МассивПовторениеПоМесяцамВЧисло(МассивПовторениеПоМесяцам);
			
		ИначеЕсли ИмяЧастиПравила = "BYDAY" Тогда // Повторение по дням
			
			МассивBYDAY = СтрРазделить(ЗначениеЧастиПравила, ",");
			Для Каждого ЭлементBYDAY Из МассивBYDAY Цикл
				
				ДеньНеделиICalendar = Прав(ЭлементBYDAY, 2);
				Если ДеньНеделиICalendar = "MO" Тогда
					ДеньНедели = 1;
				ИначеЕсли ДеньНеделиICalendar = "TU" Тогда
					ДеньНедели = 2;
				ИначеЕсли ДеньНеделиICalendar = "WE" Тогда
					ДеньНедели = 3;
				ИначеЕсли ДеньНеделиICalendar = "TH" Тогда
					ДеньНедели = 4;
				ИначеЕсли ДеньНеделиICalendar = "FR" Тогда
					ДеньНедели = 5;
				ИначеЕсли ДеньНеделиICalendar = "SA" Тогда
					ДеньНедели = 6;
				ИначеЕсли ДеньНеделиICalendar = "SU" Тогда
					ДеньНедели = 7;
				Иначе
					Продолжить;
				КонецЕсли;
				
				НомерВхожденияICalendar = СтрЗаменить(ЭлементBYDAY, ДеньНеделиICalendar, "");
				ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
				НомерВхождения = ОписаниеТипаЧисло.ПривестиЗначение(НомерВхожденияICalendar);
				
				ЭлементПовторениеПоДням = ПравилоПовторения.ПовторениеПоДням.Добавить();
				ЭлементПовторениеПоДням.ДеньНедели = ДеньНедели;
				ЭлементПовторениеПоДням.НомерВхождения = НомерВхождения;
				
			КонецЦикла;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПравилоПовторения;
	
КонецФункции

// Преобразует строку iCalendar в правило исключения, если строка содержит правило исключения.
//
// Параметры:
//  ИсключенияПовторенияiCalendar - Строка - Строка iCalendar, содержащая правило исключения.
// 
// Возвращаемое значение:
//  Структура - Исключения повторения.
//              См. КалендариПользователей.ПолучитьСтруктуруПравилаПовторения().
//
Функция ИсключенияПовторения(Знач ИсключенияПовторенияiCalendar) Экспорт
	
	КлючевоеСловоEXRULE = "EXDATE";
	
	ИсключенияПовторения = КалендариПользователей.ПолучитьСтруктуруПравилаПовторения().ИсключенияПовторения;
	Если Не СтрНачинаетсяС(ИсключенияПовторенияiCalendar, КлючевоеСловоEXRULE) Тогда
		Возврат ИсключенияПовторения;
	КонецЕсли;
	
	Для Каждого Время Из ВыделитьВремена(ИсключенияПовторенияiCalendar, КлючевоеСловоEXRULE) Цикл
		СтрокаИсключения = ИсключенияПовторения.Добавить();
		СтрокаИсключения.ДатаИсключения = Время;
	КонецЦикла;
	
	Возврат ИсключенияПовторения;
	
КонецФункции

// Преобразует правило повторения в RRULE iCalendar.
//
// Параметры:
//  ПравилоПовторения - Структура - Правило повторения.
//                                  См. КалендариПользователей.ПолучитьСтруктуруПравилаПовторения().
// 
// Возвращаемое значение:
//  Структура - Строка iCalendar, содержащая правило повторения.
//
Функция ПравилоПовторенияiCalendar(ПравилоПовторения) Экспорт
	
	ПравилоПовторенияiCalendar = "";
	Если ПравилоПовторения.ТипЗаписиКалендаря <> Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие Тогда
		Возврат ПравилоПовторенияiCalendar;
	КонецЕсли;
	
	МассивПравилоПовторенияiCalendar = Новый Массив;
	
	// Частота повторения
	Если ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		FREQ = "DAILY";
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		FREQ = "WEEKLY";
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		FREQ = "MONTHLY";
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		FREQ = "YEARLY";
	Иначе
		ВызватьИсключение НСтр("ru = 'Не указана частота повторения'");
	КонецЕсли;
	МассивПравилоПовторенияiCalendar.Добавить("FREQ=" + FREQ);
	
	Если ПравилоПовторения.ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда Тогда
		
		// Дополнительное уточнение не требуется.
		
	ИначеЕсли ПравилоПовторения.ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты Тогда
		
		// Дата окончания повторения.
		Если ЗначениеЗаполнено(ПравилоПовторения.ДатаОкончанияПовторения) Тогда
			МассивПравилоПовторенияiCalendar.Добавить("UNTIL="
				+ ДатаФорматаiCalendar(
					КонецДня(ПравилоПовторения.ДатаОкончанияПовторения),
					"УниверсальноеВремя"));
		КонецЕсли;
		
	ИначеЕсли ПравилоПовторения.ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов Тогда
		
		// Количество повторов
		Если ЗначениеЗаполнено(ПравилоПовторения.КоличествоПовторов) Тогда
			МассивПравилоПовторенияiCalendar.Добавить("COUNT="
				+ Формат(ПравилоПовторения.КоличествоПовторов, "ЧГ="));
		КонецЕсли;
		
	КонецЕсли;
	
	// Интервал повторения.
	Если ЗначениеЗаполнено(ПравилоПовторения.ИнтервалПовторения) Тогда
		МассивПравилоПовторенияiCalendar.Добавить("INTERVAL="
			+ Формат(ПравилоПовторения.ИнтервалПовторения, "ЧГ="));
	КонецЕсли;
	
	// Повторение по дням месяца.
	Если ЗначениеЗаполнено(ПравилоПовторения.ПовторениеПоДнямМесяца) Тогда
		
		МассивПовторениеПоДнямМесяца =
			КалендариПользователей.ЧислоПовторениеПоДнямМесяцаВМассив(
				ПравилоПовторения.ПовторениеПоДнямМесяца);
		
		МассивПравилоПовторенияiCalendar.Добавить(
			"BYMONTHDAY=" + СтрСоединить(МассивПовторениеПоДнямМесяца, ","));
		
	КонецЕсли;
	
	// Повторение по месяцам.
	Если ЗначениеЗаполнено(ПравилоПовторения.ПовторениеПоМесяцам) Тогда
		
		МассивПовторениеПоМесяцам =
			КалендариПользователей.ЧислоПовторениеПоМесяцамВМассив(
				ПравилоПовторения.ПовторениеПоМесяцам);
		
		МассивПравилоПовторенияiCalendar.Добавить(
			"BYMONTH=" + СтрСоединить(МассивПовторениеПоМесяцам, ","));
		
	КонецЕсли;
	
	// Повторение по дням.
	Если ЗначениеЗаполнено(ПравилоПовторения.ПовторениеПоДням) Тогда
		
		МассивBYDAY = Новый Массив;
		Для Каждого ЭлементПовторениеПоДням Из ПравилоПовторения.ПовторениеПоДням Цикл
			
			Если ЭлементПовторениеПоДням.ДеньНедели = 1 Тогда
				ДеньНеделиICalendar = "MO";
			ИначеЕсли ЭлементПовторениеПоДням.ДеньНедели = 2 Тогда
				ДеньНеделиICalendar = "TU";
			ИначеЕсли ЭлементПовторениеПоДням.ДеньНедели = 3 Тогда
				ДеньНеделиICalendar = "WE";
			ИначеЕсли ЭлементПовторениеПоДням.ДеньНедели = 4 Тогда
				ДеньНеделиICalendar = "TH";
			ИначеЕсли ЭлементПовторениеПоДням.ДеньНедели = 5 Тогда
				ДеньНеделиICalendar = "FR";
			ИначеЕсли ЭлементПовторениеПоДням.ДеньНедели = 6 Тогда
				ДеньНеделиICalendar = "SA";
			ИначеЕсли ЭлементПовторениеПоДням.ДеньНедели = 7 Тогда
				ДеньНеделиICalendar = "SU";
			Иначе
				Продолжить;
			КонецЕсли;
			
			МассивBYDAY.Добавить(Формат(ЭлементПовторениеПоДням.НомерВхождения, "ЧГ=") + ДеньНеделиICalendar);
			
		КонецЦикла;
		
		МассивПравилоПовторенияiCalendar.Добавить("BYDAY="
			+ СтрСоединить(МассивBYDAY, ","));
		
	КонецЕсли;
	
	ПравилоПовторенияiCalendar = "RRULE:" + СтрСоединить(МассивПравилоПовторенияiCalendar, ";");
	
	Возврат СтрОграничитьДлину(ПравилоПовторенияiCalendar);
	
КонецФункции

// Преобразует правило повторения в EXDATE iCalendar.
//
// Параметры:
//  ВесьДень          - Булево    - Событие на весь день.
//  ДатаНачала        - Дата      - Дата начала записи календаря.
//  ПравилоПовторения - Структура - Правило повторения.
//                                  См. КалендариПользователей.ПолучитьСтруктуруПравилаПовторения().
// 
// Возвращаемое значение:
//  Структура - Строка iCalendar, содержащая исключения повторения повторения.
//
Функция ИсключенияПовторенияiCalendar(ВесьДень, ДатаНачала, ПравилоПовторения) Экспорт
	
	Если ПравилоПовторения.ИсключенияПовторения.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивДаты = Новый Массив;
	ВремяНачала = ДатаНачала - НачалоДня(ДатаНачала);
	Для Каждого ИсключениеПовторения Из ПравилоПовторения.ИсключенияПовторения Цикл
		ДатаСоСмещением = НачалоДня(ИсключениеПовторения.ДатаИсключения) + ВремяНачала;
			ДатаСтрокой = ?(ВесьДень,
			Формат(ДатаСоСмещением, "ДФ=yyyyMMdd"),
			Формат(ДатаСоСмещением, "ДФ=yyyyMMddTHHmmss"));
		МассивДаты.Добавить(ДатаСтрокой);
	КонецЦикла;
	
	ИсключенияПовторенияiCalendar = ?(ВесьДень,
		СтрШаблон("EXDATE;TZID=%1;VALUE=DATE:%2", ЧасовойПоясСеанса(), СтрСоединить(МассивДаты, ",")),
		СтрШаблон("EXDATE;TZID=%1:%2", ЧасовойПоясСеанса(), СтрСоединить(МассивДаты, ",")));
	
	Возврат СтрОграничитьДлину(ИсключенияПовторенияiCalendar);
	
КонецФункции

// Ограничивает длину строки, разбивая её на многострочную с разделением новых строк символов " ".
//
// Параметры:
//  Строка - Строка - Строка, длина которой ограничивается.
// 
// Возвращаемое значение:
//  Тип - Текстовое описание содержания возвращаемого значения функции.
//
Функция СтрОграничитьДлину(Знач Строка)
	
	ОграничениеДлины = 72;
	Если СтрДлина(Строка) <= ОграничениеДлины Тогда
		Возврат Строка;
	КонецЕсли;
	
	МассивОграниченныйТекст = Новый Массив;
	Пока ЗначениеЗаполнено(Строка) Цикл
		МассивОграниченныйТекст.Добавить(Лев(Строка, ОграничениеДлины));
		Строка = ?(СтрДлина(Строка) > ОграничениеДлины,
			Сред(Строка, ОграничениеДлины + 1),
			"");
	КонецЦикла;
	
	Возврат СтрСоединить(МассивОграниченныйТекст, Символы.ПС + " ");
	
КонецФункции

#КонецОбласти