#Область ПрограммныйИнтерфейс

// Обработчик регламентного задания по отправке уведомлений через электронную почту и систему взаимодействия
//
// Для того, чтобы регламентные задания не конфликтовали за доступ к почтовому ящику и системе взаимодействия,
// они последовательно вызываются из одной процедуры
//
Процедура ОтправитьУведомления() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаПоследнейРассылкиПочта                 = Константы.ДатаПоследнейРассылки.Получить();
	ДатаПоследнейРассылкиСистемаВзаимодействия = Константы.ДатаПоследнегоПериодическогоСозданияУведомленийСистемаВзаимодействия.Получить();
	
	// Если рассылку не удалось выполнить в течение 24 часов,она перестает быть актуальной
	ДатаАктуальностиОтправки = ТекущаяДата() - 86400;
	Если ДатаАктуальностиОтправки > ДатаПоследнейРассылкиПочта Тогда
		ДатаПоследнейРассылкиПочта = ДатаАктуальностиОтправки;
		Константы.ДатаПоследнейРассылки.Установить(ДатаПоследнейРассылкиПочта);
	КонецЕсли; 
	
	Если ДатаАктуальностиОтправки > ДатаПоследнейРассылкиСистемаВзаимодействия Тогда
		ДатаПоследнейРассылкиСистемаВзаимодействия = ДатаАктуальностиОтправки;
		Константы.ДатаПоследнегоПериодическогоСозданияУведомленийСистемаВзаимодействия.Установить(ДатаПоследнейРассылкиСистемаВзаимодействия);
	КонецЕсли;
	
	// Каждый сервис, который хочет отправить почтовое сообщение, готовит его и добавляет
	// вместе с ДатойРассылки в ТаблицаСообщенийЭлектроннаяПочта или ТаблицаСообщенийСистемаВзаимодействия.
	ТаблицаСообщенийЭлектроннаяПочта      = НовыйТаблицаСообщенийЭлектроннаяПочта();
	ТаблицаСообщенийСистемаВзаимодействия = НовыйТаблицаСообщенийСистемаВзаимодействия();
	
	ВерхняяГраницаПоДате = ТекущаяДата();
	
	ПроектыДляРассылкиПоТехническимПроектам = Новый Массив;
	ПроектыДляРассылкиПоЗадачам             = Новый Массив;
	ПроектыДляРассылкиПоОшибкам             = Новый Массив;
	
	ТаблицаПроектовДляРассылки = ПолучитьПроектыДляРассылки();
	
	Для Каждого СтрокаТаблицы из ТаблицаПроектовДляРассылки Цикл
		
		Если СтрокаТаблицы.РассылатьУведомленияПоЗадачам Тогда
			ПроектыДляРассылкиПоЗадачам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
		Если СтрокаТаблицы.РассылатьУведомленияПоОшибкам Тогда
			ПроектыДляРассылкиПоОшибкам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
		Если СтрокаТаблицы.РассылатьУведомленияПоТехническимПроектам Тогда
			ПроектыДляРассылкиПоТехническимПроектам.Добавить(СтрокаТаблицы.Проект);
		КонецЕсли;
		
	КонецЦикла;
	
	РасположениеИБ = РасположениеИнформационнойБазы();
	
	АдресИБВЛокальнойСети = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВЛокальнойСети();
	АдресИБВИнтернет = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
	
	ИспользоватьВнешниеСсылки = ЗначениеЗаполнено(АдресИБВЛокальнойСети) ИЛИ ЗначениеЗаполнено(АдресИБВИнтернет);
	
	ПараметрыРассылки = Новый Структура; 
	ПараметрыРассылки.Вставить("ДатаПоследнейРассылкиПочта",                 ДатаПоследнейРассылкиПочта);
	ПараметрыРассылки.Вставить("ДатаПоследнейРассылкиСистемаВзаимодействия", ДатаПоследнейРассылкиСистемаВзаимодействия);
	ПараметрыРассылки.Вставить("ВерхняяГраницаПоДате",                       ВерхняяГраницаПоДате);
	ПараметрыРассылки.Вставить("РасположениеИБ",                             РасположениеИБ);
	ПараметрыРассылки.Вставить("АдресИБВЛокальнойСети",                      АдресИБВЛокальнойСети);
	ПараметрыРассылки.Вставить("АдресИБВИнтернет",                           АдресИБВИнтернет);
	ПараметрыРассылки.Вставить("ИспользоватьВнешниеСсылки",                  ИспользоватьВнешниеСсылки);
	
	ДобавитьУведомленияПоЗадачамПроцессов(ТаблицаСообщенийЭлектроннаяПочта,
	                                      ТаблицаСообщенийСистемаВзаимодействия,
	                                      ПроектыДляРассылкиПоЗадачам, 
	                                      ПараметрыРассылки);
	
	ДобавитьУведомленияПоНаправленнымОшибкам(ТаблицаСообщенийЭлектроннаяПочта, ПроектыДляРассылкиПоОшибкам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоИсправленнымОшибкам(ТаблицаСообщенийЭлектроннаяПочта, ПроектыДляРассылкиПоОшибкам, ПараметрыРассылки);
	
	ДобавитьУведомленияПоСтатусамТехническихПроектов(ТаблицаСообщенийЭлектроннаяПочта, ПроектыДляРассылкиПоТехническимПроектам, ПараметрыРассылки);
	
	ОтправитьУведомленияЭлектроннаяПочта(ТаблицаСообщенийЭлектроннаяПочта, ДатаПоследнейРассылкиПочта);
	
	ОтправитьОповещенияСистемаВзаимодействия(ТаблицаСообщенийСистемаВзаимодействия, ДатаПоследнейРассылкиСистемаВзаимодействия);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗадачиПроцессов

// Добавляет в таблицу отправки почты уведомления по задачам процессов
Процедура ДобавитьУведомленияПоЗадачамПроцессов(ТаблицаСообщенийЭлектроннаяПочта, ТаблицаСообщенийСистемаВзаимодействия, МассивПроектов, ПараметрыРассылки)

	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                                                        КАК Задача,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец
	|		ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец
	|	КОНЕЦ                                                                                         КАК НаименованиеВладельца,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец.НаименованиеКонфигурации
	|		ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец.НаименованиеКонфигурации
	|	КОНЕЦ                                                                                         КАК НаименованиеКонфигурации,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец.КраткоеНаименованиеКонфигурации
	|		ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец.КраткоеНаименованиеКонфигурации
	|	КОНЕЦ                                                                                         КАК КраткоеНаименованиеКонфигурации,
	|	ЗадачиПроцесса.Код                                                                            КАК Код,
	|	ЗадачиПроцесса.Описание                                                                       КАК Описание,
	|	ЗадачиПроцесса.Наименование                                                                   КАК Наименование,
	|	ЗадачиПроцесса.Исполнитель                                                                    КАК Исполнитель,
	|	ЗадачиПроцесса.Статус                                                                         КАК Статус,
	|	ЗадачиПроцесса.КрайняяДатаОкончания                                                           КАК КрайняяДатаОкончания,
	|	ЗадачиПроцесса.ДатаПорученияПоЗадаче                                                          КАК ДатаПорученияПоЗадаче,
	|	ЗадачиПроцессаПротоколВзаимодействия.Автор                                                    КАК АвторПоручения,
	|	ЗадачиПроцессаПротоколВзаимодействия.ТекстПоручения                                           КАК ТекстПоручения,
	|	ЗадачиПроцессаПротоколВзаимодействия.ИсполнительПоручения                                     КАК ИсполнительПоручения,
	|	ПользователиКонтактнаяИнформация.АдресЭП                                                      КАК АдресЭП,
	|	ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииЗадачЭлектроннаяПочта
	|		И ЗадачиПроцессаПротоколВзаимодействия.Дата > &ДатаПоследнейРассылкиПочта                 КАК УведомлятьОНаправленииЗадачиПочта,
	|	ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииЗадачСистемаВзаимодействия
	|		И ЗадачиПроцессаПротоколВзаимодействия.Дата > &ДатаПоследнейРассылкиСистемаВзаимодействия КАК УведомлятьОНаправленииЗадачСистемаВзаимодействия
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса.ПротоколВзаимодействия КАК ЗадачиПроцессаПротоколВзаимодействия
	|		ПО (ЗадачиПроцессаПротоколВзаимодействия.Ссылка = ЗадачиПроцесса.Ссылка)
	|			И ЗадачиПроцесса.ДатаПорученияПоЗадаче = ЗадачиПроцессаПротоколВзаимодействия.Дата
	|			И (ЗадачиПроцессаПротоколВзаимодействия.ИсполнительПоручения <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|			И (ЗадачиПроцессаПротоколВзаимодействия.Автор <> ЗадачиПроцессаПротоколВзаимодействия.ИсполнительПоручения)
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПерсональныеНастройкиУведомленийПользователей КАК ПерсональныеНастройкиУведомленийПользователей
	|		ПО (ЗадачиПроцессаПротоколВзаимодействия.ИсполнительПоручения = ПерсональныеНастройкиУведомленийПользователей.Пользователь)
	|			И (ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииЗадачЭлектроннаяПочта
	|				ИЛИ ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииЗадачСистемаВзаимодействия)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (ЗадачиПроцессаПротоколВзаимодействия.ИсполнительПоручения = Пользователи.Ссылка)
	|			И (НЕ Пользователи.ПометкаУдаления)
	|			И (НЕ Пользователи.Недействителен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ПО (Пользователи.Ссылка = ПользователиКонтактнаяИнформация.Ссылка)
	|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|					ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|				ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец В (&МассивПроектов)
	|			ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец В (&МассивПроектов)
	|		КОНЕЦ
	|	И ЗадачиПроцессаПротоколВзаимодействия.Дата <= &ВерхняяГраницаПоДате
	|	И (ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииЗадачЭлектроннаяПочта
	|				И ЗадачиПроцессаПротоколВзаимодействия.Дата > &ДатаПоследнейРассылкиПочта
	|			ИЛИ ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииЗадачСистемаВзаимодействия
	|				И ЗадачиПроцессаПротоколВзаимодействия.Дата > &ДатаПоследнейРассылкиСистемаВзаимодействия)
	|ИТОГИ ПО
	|	Задача";
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылкиСистемаВзаимодействия", ПараметрыРассылки.ДатаПоследнейРассылкиСистемаВзаимодействия);
	Запрос.УстановитьПараметр("ДатаПоследнейРассылкиПочта",                 ПараметрыРассылки.ДатаПоследнейРассылкиПочта);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате",                       ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов",                             МассивПроектов);
	
	ВыборкаЗадачи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		УведомлятьОНаправленииЗадачиПочта             = Ложь;
		УведомлятьОНаправленииЗадачСистемаВзаимодействия = Ложь;
		ВыборкаДетали = ВыборкаЗадачи.Выбрать();
		
		Если ВыборкаДетали.Следующий() Тогда
			УведомлятьОНаправленииЗадачиПочта                = ВыборкаДетали.УведомлятьОНаправленииЗадачиПочта;
			УведомлятьОНаправленииЗадачСистемаВзаимодействия = ВыборкаДетали.УведомлятьОНаправленииЗадачСистемаВзаимодействия;
		КонецЕсли;
		
		Если УведомлятьОНаправленииЗадачиПочта Тогда
			
			ПодоготовитьПочтовоеСообщениеНаправлениеЗадач(ВыборкаЗадачи, ПараметрыРассылки, ТаблицаСообщенийЭлектроннаяПочта);
			
		КонецЕсли;
		
		Если УведомлятьОНаправленииЗадачСистемаВзаимодействия Тогда
			
			ПодготовитьСообщениеСистемыВзаимодействияНаправлениеЗадач(ВыборкаЗадачи, ПараметрыРассылки, ТаблицаСообщенийСистемаВзаимодействия);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстУведомленияПоЗадачеПроцесса(НаименованиеКонфигурации, РеквизитыЗадачи, ПараметрыРассылки)
	
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.ЗадачиПроцесса.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Уведомление");
	
	Область.Параметры.Конфигурация         = НаименованиеКонфигурации;
	Область.Параметры.СтатусЗадачи         = РеквизитыЗадачи.Статус;
	Область.Параметры.АвторПоручения       = РеквизитыЗадачи.АвторПоручения;
	Область.Параметры.Исполнитель          = РеквизитыЗадачи.Исполнитель;
	Область.Параметры.ИсполнительПоручения = РеквизитыЗадачи.ИсполнительПоручения;
	Область.Параметры.ТекстПоручения       = РеквизитыЗадачи.ТекстПоручения;
	Область.Параметры.КрайняяДатаОкончания = Формат(РеквизитыЗадачи.КрайняяДатаОкончания, "ДЛФ=D");
	
	ТекстовоеОписание.Вывести(Область);
	
	ВывестиСсылки(Макет, ТекстовоеОписание, РеквизитыЗадачи.Задача, ПараметрыРассылки);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ОписаниеЗадачи");
	
	Область.Параметры.ОписаниеЗадачи = РеквизитыЗадачи.ОписаниеЗадачи;
	
	ТекстовоеОписание.Вывести(Область);
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

Процедура ПодоготовитьПочтовоеСообщениеНаправлениеЗадач(ВыборкаЗадачи, ПараметрыРассылки, ТаблицаСообщенийЭлектроннаяПочта)
	
	НаименованиеКонфигурации        = "";
	КраткоеНаименованиеКонфигурации = "";
	
	РеквизитыЗадачи = Новый Структура;
	
	РеквизитыЗадачи.Вставить("Задача",                ВыборкаЗадачи.Задача);
	РеквизитыЗадачи.Вставить("Статус",                ВыборкаЗадачи.Статус);
	РеквизитыЗадачи.Вставить("АвторПоручения",        Справочники.Пользователи.ПустаяСсылка());
	РеквизитыЗадачи.Вставить("ИсполнительПоручения",  Справочники.Пользователи.ПустаяСсылка());
	РеквизитыЗадачи.Вставить("ДатаПорученияПоЗадаче", Дата(1, 1, 1));
	РеквизитыЗадачи.Вставить("ТекстПоручения",        "");
	РеквизитыЗадачи.Вставить("Исполнитель",           ВыборкаЗадачи.Исполнитель);
	РеквизитыЗадачи.Вставить("КрайняяДатаОкончания",  ВыборкаЗадачи.КрайняяДатаОкончания);
	РеквизитыЗадачи.Вставить("ОписаниеЗадачи",        "");
	
	ОписаниеЗадачи = ВыборкаЗадачи.Описание.Получить();
	Если ТипЗнч(ОписаниеЗадачи) = Тип("ФорматированныйДокумент") Тогда
		РеквизитыЗадачи.ОписаниеЗадачи = ОписаниеЗадачи.ПолучитьТекст();
	КонецЕсли;
	
	МассивАдресовЭП = Новый Массив;
	
	ВыборкаДетали = ВыборкаЗадачи.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
		
		НаименованиеКонфигурации              = ВыборкаДетали.НаименованиеКонфигурации;
		КраткоеНаименованиеКонфигурации       = ВыборкаДетали.КраткоеНаименованиеКонфигурации;
		РеквизитыЗадачи.АвторПоручения        = ВыборкаДетали.АвторПоручения;
		РеквизитыЗадачи.ИсполнительПоручения  = ВыборкаДетали.ИсполнительПоручения;
		РеквизитыЗадачи.ТекстПоручения        = ВыборкаДетали.ТекстПоручения;
		РеквизитыЗадачи.Исполнитель           = ВыборкаДетали.Исполнитель;
		РеквизитыЗадачи.ДатаПорученияПоЗадаче = ВыборкаДетали.ДатаПорученияПоЗадаче;
		
		Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ВыборкаДетали.АдресЭП, Ложь) Тогда
			Если МассивАдресовЭП.Найти(ВыборкаДетали.АдресЭП) = Неопределено Тогда
				МассивАдресовЭП.Добавить(ВыборкаДетали.АдресЭП);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивАдресовЭП.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыборкаЗадачи.КраткоеНаименованиеКонфигурации) Тогда
		ПрефиксТемы = ВыборкаЗадачи.КраткоеНаименованиеКонфигурации + ". ";
	Иначе
		ПрефиксТемы = "";
	КонецЕсли;
	
	Тема = СтрШаблон(НСтр("ru='%1 Вам направлена задача %2'"),ПрефиксТемы, ВыборкаЗадачи.Наименование);
	
	СтрокаАдресатов = СтрСоединить(МассивАдресовЭП, ";");
	
	ТекстУведомления = ТекстУведомленияПоЗадачеПроцесса(НаименованиеКонфигурации, РеквизитыЗадачи, ПараметрыРассылки);
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("Тема", СокрЛП(Тема));
	ПараметрыПисьма.Вставить("Кому", СтрокаАдресатов);
	ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
	ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
	
	// Добавляем уведомление в таблицу
	Строка = ТаблицаСообщенийЭлектроннаяПочта.Добавить();
	Строка.ДатаРассылки         = РеквизитыЗадачи.ДатаПорученияПоЗадаче;
	Строка.ПараметрыПисьма      = ПараметрыПисьма;
	Строка.СообщениеОтправлено  = Ложь;
	
КонецПроцедуры

Процедура ПодготовитьСообщениеСистемыВзаимодействияНаправлениеЗадач(ВыборкаЗадачи, ПараметрыРассылки, ТаблицаСообщенийСистемаВзаимодействия)
	
	ПараметрыСообщения = НовыйПараметрыСообщенияСистемыВзаимодействия();
	
	ВыборкаДетали = ВыборкаЗадачи.Выбрать();
	
	Если ВыборкаДетали.Следующий() Тогда
		
		ПараметрыСообщения.Объект          = ВыборкаДетали.Задача;
		ПараметрыСообщения.Получатель      = ВыборкаДетали.ИсполнительПоручения;
		ПараметрыСообщения.Отправитель     = ВыборкаДетали.АвторПоручения;
		ПараметрыСообщения.Заголовок       = НСтр("ru = 'Вам направлена задача'");
		
		Если ПустаяСтрока(ВыборкаДетали.ТекстПоручения) Тогда
			ТекстСообщения = НСтр("ru = 'Задача была вам направлена без сообщения'");
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В протоколе задачи новое сообщение - ""%1""'"), ВыборкаДетали.ТекстПоручения);
		КонецЕсли;
		
		ПараметрыСообщения.ТекстСообщения = ТекстСообщения;
		
		Строка = ТаблицаСообщенийСистемаВзаимодействия.Добавить();
		Строка.ДатаОповещения       = ВыборкаДетали.ДатаПорученияПоЗадаче;
		Строка.ПараметрыСообщения   = ПараметрыСообщения;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Ошибки

// Добавляет в таблицу отправки почты уведомления по ошибкам, направленным пользователям
Процедура ДобавитьУведомленияПоНаправленнымОшибкам(ТаблицаСообщенийЭлектроннаяПочта, МассивПроектов, ПараметрыРассылки)

	Запрос = Новый Запрос;
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	ОшибкиПротокол.Дата КАК ДатаНаправленияИсполнителю,
	|	ОшибкиПротокол.Ссылка КАК Ошибка,
	|	ОшибкиПротокол.Ссылка.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	ОшибкиПротокол.Ссылка.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	ОшибкиПротокол.КомуНаправлена КАК КомуНаправлена,
	|	ОшибкиПротокол.Комментарий КАК Комментарий,
	|	ОшибкиПротокол.Ссылка.Код КАК Код,
	|	ОшибкиПротокол.Ссылка.Наименование КАК Наименование,
	|	ОшибкиПротокол.Ссылка.Владелец КАК Проект,
	|	ОшибкиПротокол.Ссылка.Статус КАК Статус,
	|	ОшибкиПротокол.Ссылка.ПорядокВоспроизведения КАК ПорядокВоспроизведения,
	|	ОшибкиПротокол.Ссылка.СрочностьИсправления КАК СрочностьИсправления,
	|	Пользователи.АдресЭлектроннойПочты КАК АдресИсполнителя
	|ИЗ
	|	Справочник.Ошибки.Протокол КАК ОшибкиПротокол
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КонтактыПользователей.Ссылка КАК Пользователь,
	|			КонтактыПользователей.АдресЭП КАК АдресЭлектроннойПочты
	|		ИЗ
	|			Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
	|		ГДЕ
	|			КонтактыПользователей.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
	|			И КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ КонтактыПользователей.АдресЭП ПОДОБНО """") КАК Пользователи
	|		ПО ОшибкиПротокол.КомуНаправлена = Пользователи.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПерсональныеНастройкиУведомленийПользователей КАК ПерсональныеНастройкиУведомленийПользователей
	|		ПО ОшибкиПротокол.КомуНаправлена = ПерсональныеНастройкиУведомленийПользователей.Пользователь
	|			И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииОшибокИсполнителю
	|ГДЕ
	|	ОшибкиПротокол.Ссылка.Владелец В(&МассивПроектов)
	|	И НЕ ОшибкиПротокол.Ссылка.ПометкаУдаления
	|	И ОшибкиПротокол.НомерСтроки = 1
	|	И ОшибкиПротокол.Дата > &ДатаПоследнейРассылки
	|	И ОшибкиПротокол.Дата <= &ВерхняяГраницаПоДате
	|	И НЕ ОшибкиПротокол.КомуНаправлена.ПометкаУдаления
	|	И НЕ ОшибкиПротокол.КомуНаправлена.Недействителен
	|	И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОНаправленииОшибокИсполнителю
	|	И НЕ ОшибкиПротокол.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|	И ОшибкиПротокол.КомуНаправлена <> ОшибкиПротокол.Автор"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылкиПочта);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = Выборка.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = Выборка.НаименованиеКонфигурации;
		
		РеквизитыОшибки = Новый Структура();
		
		РеквизитыОшибки.Вставить("Ошибка", Выборка.Ошибка);
		РеквизитыОшибки.Вставить("Статус", Выборка.Статус);
		РеквизитыОшибки.Вставить("СрочностьИсправления", Выборка.СрочностьИсправления);
		РеквизитыОшибки.Вставить("КомуНаправлена", Выборка.КомуНаправлена);
		РеквизитыОшибки.Вставить("Комментарий", Выборка.Комментарий);
		РеквизитыОшибки.Вставить("Код", Выборка.Код);
		РеквизитыОшибки.Вставить("Наименование", Выборка.Наименование);
		РеквизитыОшибки.Вставить("ПорядокВоспроизведения", Выборка.ПорядокВоспроизведения);
		
		ТекстУведомления = ТекстУведомленияПоНаправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки);
		
		// Формирование уведомления исполнителю по ошибке
		Если ЗначениеЗаполнено(Выборка.АдресИсполнителя) Тогда
			
			Тема = ПрефиксТемы + НСтр("ru='Вам направлена ошибка %Код% %Наименование%'");
			
			Тема = СтрЗаменить(Тема, "%Код%", Выборка.Код);
			Тема = СтрЗаменить(Тема, "%Наименование%", Выборка.Наименование);
			
			ПараметрыПисьма = Новый Структура;
			
			ПараметрыПисьма.Вставить("Тема", СокрЛП(Тема));
			ПараметрыПисьма.Вставить("Кому", Выборка.АдресИсполнителя);
			ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
			// Добавляем уведомление в таблицу
			Строка = ТаблицаСообщенийЭлектроннаяПочта.Добавить();
			Строка.ДатаРассылки 				= Выборка.ДатаНаправленияИсполнителю;
			Строка.ПараметрыПисьма 				= ПараметрыПисьма;
			Строка.СообщениеОтправлено 			= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу отправки почты уведомления по исправленным ошибкам, зарегистрированным пользователями
Процедура ДобавитьУведомленияПоИсправленнымОшибкам(ТаблицаСообщенийЭлектроннаяПочта, МассивПроектов, ПараметрыРассылки)

	Запрос = Новый Запрос;
	Запрос.Текст =	
	"ВЫБРАТЬ
	|	Ошибки.ДатаИсправления КАК ДатаИсправления,
	|	Ошибки.Ссылка КАК Ошибка,
	|	Ошибки.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	Ошибки.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	Ошибки.Код КАК Код,
	|	Ошибки.Наименование КАК Наименование,
	|	Ошибки.Владелец КАК Проект,
	|	Ошибки.Статус КАК Статус,
	|	Ошибки.ПорядокВоспроизведения КАК ПорядокВоспроизведения,
	|	Ошибки.СрочностьИсправления КАК СрочностьИсправления,
	|	Пользователи.АдресЭлектроннойПочты КАК АдресИсполнителя
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КонтактыПользователей.Ссылка КАК Пользователь,
	|			КонтактыПользователей.АдресЭП КАК АдресЭлектроннойПочты
	|		ИЗ
	|			Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
	|		ГДЕ
	|			КонтактыПользователей.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
	|			И КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ КонтактыПользователей.АдресЭП ПОДОБНО """") КАК Пользователи
	|		ПО Ошибки.Зарегистрировал = Пользователи.Пользователь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПерсональныеНастройкиУведомленийПользователей КАК ПерсональныеНастройкиУведомленийПользователей
	|		ПО Ошибки.Зарегистрировал = ПерсональныеНастройкиУведомленийПользователей.Пользователь И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем
	|ГДЕ
	|	Ошибки.Владелец В(&МассивПроектов)
	|	И НЕ Ошибки.ПометкаУдаления
	|   И Ошибки.Исправлена
	|	И Ошибки.ДатаИсправления > &ДатаПоследнейРассылки
	|	И Ошибки.ДатаИсправления <= &ВерхняяГраницаПоДате
	|	И НЕ Ошибки.Зарегистрировал.ПометкаУдаления
	|	И НЕ Ошибки.Зарегистрировал.Недействителен
	|	И ПерсональныеНастройкиУведомленийПользователей.УведомлятьОбИсправленииОшибокЗарегистрированныхПользователем
	|	И Ошибки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана)
	|	И Ошибки.Исправил <> Ошибки.Зарегистрировал"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылкиПочта);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = Выборка.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = Выборка.НаименованиеКонфигурации;
		
		РеквизитыОшибки = Новый Структура();
		
		РеквизитыОшибки.Вставить("Ошибка", Выборка.Ошибка);
		РеквизитыОшибки.Вставить("Статус", Выборка.Статус);
		РеквизитыОшибки.Вставить("СрочностьИсправления", Выборка.СрочностьИсправления);
		РеквизитыОшибки.Вставить("Код", Выборка.Код);
		РеквизитыОшибки.Вставить("Наименование", Выборка.Наименование);
		РеквизитыОшибки.Вставить("ПорядокВоспроизведения", Выборка.ПорядокВоспроизведения);
		
		ТекстУведомления = ТекстУведомленияПоИсправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки);
		
		// Формирование уведомления исполнителю по ошибке
		Если ЗначениеЗаполнено(Выборка.АдресИсполнителя) Тогда
			
			Тема = ПрефиксТемы + НСтр("ru='Исправлена ошибка '");
			
			Тема = Тема + Выборка.Наименование;
			
			ПараметрыПисьма = Новый Структура;
			
			ПараметрыПисьма.Вставить("Тема", СокрЛП(Тема));
			ПараметрыПисьма.Вставить("Кому", Выборка.АдресИсполнителя);
			ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
			// Добавляем уведомление в таблицу
			Строка = ТаблицаСообщенийЭлектроннаяПочта.Добавить();
			Строка.ДатаРассылки 				= Выборка.ДатаИсправления;
			Строка.ПараметрыПисьма 				= ПараметрыПисьма;
			Строка.СообщениеОтправлено 			= Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстУведомленияПоНаправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки)
	
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.Ошибки.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Уведомление");
	
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.СтатусОшибки = РеквизитыОшибки.Статус;
	Область.Параметры.Код = РеквизитыОшибки.Код;
	Область.Параметры.Наименование = РеквизитыОшибки.Наименование;
	Область.Параметры.СрочностьИсправления = РеквизитыОшибки.СрочностьИсправления;
	
	ТекстовоеОписание.Вывести(Область);
	
	ВывестиСсылки(Макет, ТекстовоеОписание, РеквизитыОшибки.Ошибка, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОшибки.ПорядокВоспроизведения) Тогда
		Область = Макет.ПолучитьОбласть("ПорядокВоспроизведения");
		Область.Параметры.ПорядокВоспроизведения = РеквизитыОшибки.ПорядокВоспроизведения;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОшибки.Комментарий) Тогда
		Область = Макет.ПолучитьОбласть("КомментарийНаправившего");
		Область.Параметры.Комментарий = РеквизитыОшибки.Комментарий;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

Функция ТекстУведомленияПоИсправленнойОшибке(НаименованиеКонфигурации, РеквизитыОшибки, ПараметрыРассылки)
	
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.Ошибки.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Уведомление");
	
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.СтатусОшибки = РеквизитыОшибки.Статус;
	Область.Параметры.Код = РеквизитыОшибки.Код;
	Область.Параметры.Наименование = РеквизитыОшибки.Наименование;
	Область.Параметры.СрочностьИсправления = РеквизитыОшибки.СрочностьИсправления;
	
	ТекстовоеОписание.Вывести(Область);
	
	ВывестиСсылки(Макет, ТекстовоеОписание, РеквизитыОшибки.Ошибка, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОшибки.ПорядокВоспроизведения) Тогда
		Область = Макет.ПолучитьОбласть("ПорядокВоспроизведения");
		Область.Параметры.ПорядокВоспроизведения = РеквизитыОшибки.ПорядокВоспроизведения;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#Область ТехническиеПроекты

// Добавляет в таблицу отправки почты уведомления по факту изменения статусов технических проектов
Процедура ДобавитьУведомленияПоСтатусамТехническихПроектов(ТаблицаСообщенийЭлектроннаяПочта, МассивПроектов, ПараметрыРассылки)
	
	// Определяем технические проекты, у которых даты изменения статусов
	// позднее даты последней рассылки, которые не помечены на удаление
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	УведомленияПользователей.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.НастройкиУведомленийПользователей КАК УведомленияПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			КонтактыПользователей.Ссылка КАК Пользователь,
	|			КонтактыПользователей.АдресЭП КАК АдресЭлектроннойПочты
	|		ИЗ
	|			Справочник.Пользователи.КонтактнаяИнформация КАК КонтактыПользователей
	|		ГДЕ
	|			КонтактыПользователей.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя)
	|			И КонтактыПользователей.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|			И НЕ КонтактыПользователей.АдресЭП ПОДОБНО """") КАК Пользователи
	|		ПО УведомленияПользователей.Пользователь = Пользователи.Пользователь
	|ГДЕ
	|	УведомленияПользователей.УведомлятьОбИзмененииСтатусовТехническихПроектов
	|	И НЕ УведомленияПользователей.Пользователь.ПометкаУдаления
	|	И НЕ УведомленияПользователей.Пользователь.Недействителен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка КАК ТехническийПроект,
	|	ТехническиеПроекты.Наименование КАК Наименование,
	|	ТехническиеПроекты.Владелец КАК Проект,
	|	ТехническиеПроекты.Ответственный КАК Ответственный,
	|	ТехническиеПроекты.Очередность КАК Очередность,
	|	ТехническиеПроекты.ПлановаяДатаНачала КАК ПлановаяДатаНачала,
	|	ТехническиеПроекты.ПлановаяДатаОкончания КАК ПлановаяДатаОкончания,
	|	ТехническиеПроекты.ЦелиПроекта КАК ЦелиПроекта,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса КАК ДатаИзмененияСтатуса,
	|	ТехническиеПроекты.Статус КАК Статус,
	|	ТехническиеПроекты.Владелец.НаименованиеКонфигурации КАК НаименованиеКонфигурации,
	|	ТехническиеПроекты.Владелец.КраткоеНаименованиеКонфигурации КАК КраткоеНаименованиеКонфигурации,
	|	ТехническиеПроекты.Участники.(
	|		Участник КАК Участник,
	|		НомерСтроки
	|	)
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Владелец В(&МассивПроектов)
	|	И ТехническиеПроекты.ДатаИзмененияСтатуса > &ДатаПоследнейРассылки
	|	И ТехническиеПроекты.ДатаИзмененияСтатуса <= &ВерхняяГраницаПоДате
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехническийПроект"
	;
	
	Запрос.УстановитьПараметр("ДатаПоследнейРассылки", ПараметрыРассылки.ДатаПоследнейРассылкиПочта);
	Запрос.УстановитьПараметр("ВерхняяГраницаПоДате", ПараметрыРассылки.ВерхняяГраницаПоДате);
	Запрос.УстановитьПараметр("МассивПроектов", МассивПроектов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаПолучателей = МассивРезультатов[0].Выгрузить();
	ВыборкаПроектов = МассивРезультатов[1].Выбрать();
	
	ТекстУведомления = "";
	Тема = "";
	
	Пока ВыборкаПроектов.Следующий() Цикл
				
		Если ЗначениеЗаполнено(ВыборкаПроектов.КраткоеНаименованиеКонфигурации) Тогда
			ПрефиксТемы = ВыборкаПроектов.КраткоеНаименованиеКонфигурации + ". ";
		Иначе
			ПрефиксТемы = "";
		КонецЕсли;
			
		НаименованиеКонфигурации = ВыборкаПроектов.НаименованиеКонфигурации;
		
		ТекущийПроект = ВыборкаПроектов.ТехническийПроект;
		
		РеквизитыПроекта = Новый Структура();
					
		РеквизитыПроекта.Вставить("Наименование", ВыборкаПроектов.Наименование);
		РеквизитыПроекта.Вставить("ЦелиПроекта", ВыборкаПроектов.ЦелиПроекта);
		РеквизитыПроекта.Вставить("Ответственный", ВыборкаПроектов.Ответственный);
		РеквизитыПроекта.Вставить("Очередность", ВыборкаПроектов.Очередность);
		РеквизитыПроекта.Вставить("ПлановаяДатаНачала", ВыборкаПроектов.ПлановаяДатаНачала);
		РеквизитыПроекта.Вставить("ПлановаяДатаОкончания", ВыборкаПроектов.ПлановаяДатаОкончания);
		РеквизитыПроекта.Вставить("Статус", ВыборкаПроектов.Статус);
		
		ТаблицаУчастников = ВыборкаПроектов.Участники.Выгрузить();
		
		ТаблицаУчастников.Сортировать("НомерСтроки Возр");
		ТаблицаУчастников.Свернуть("Участник");
		
		ТекстУведомления = ТекстУведомленияПоСтатусамТехническогоПроекта(НаименованиеКонфигурации,
																 ВыборкаПроектов.ТехническийПроект,
																 РеквизитыПроекта,
																 ТаблицаУчастников,
																 ПараметрыРассылки);
				
		Тема = ПрефиксТемы + " " +  НСтр("ru='Установлен статус'") + " "
				+ ВыборкаПроектов.Статус + " " + НСтр("ru='для технического проекта'") + " " + ВыборкаПроектов.Наименование;
		
		СтруктураПоиска = Новый Структура("Проект", ВыборкаПроектов.Проект);
		
		МассивСтрокТаблицыПолучаталей = ТаблицаПолучателей.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаПолучателя из МассивСтрокТаблицыПолучаталей Цикл
			
			ПараметрыПисьма = Новый Структура;
			
			ПараметрыПисьма.Вставить("Тема", Тема);
			ПараметрыПисьма.Вставить("Кому", СтрокаПолучателя.АдресЭлектроннойПочты);
			ПараметрыПисьма.Вставить("Тело", ТекстУведомления);
			ПараметрыПисьма.Вставить("ТипТекста", Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст);
			
			// Добавляем уведомление в таблицу
			Строка = ТаблицаСообщенийЭлектроннаяПочта.Добавить();
			Строка.ДатаРассылки 				= ВыборкаПроектов.ДатаИзмененияСтатуса;
			Строка.ПараметрыПисьма 				= ПараметрыПисьма;
			Строка.СообщениеОтправлено 			= Ложь;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует и возвращает текстовое описание для уведомления по изменению статуса технического проекта
//
// Параметры:
// НаименованиеКонфигурации - строка, содержащая наименование конфигурации
//  ТехническийПроект - ссылка на технический проект
//  РеквизитыПроекта - Структура, содержащая значения реквизитов шапки проекта. Ключи структуры соответствуют именам реквизитов
//  ТаблицаУчастников - Таблица значений, содержащая информацию об участниках проекта
//  ПараметрыРассылки - Структура с описанием расположения текущей информационной базы
//
// Возвращаемое значение:
//  Описание - строка, содержащая текст уведомления
//
Функция ТекстУведомленияПоСтатусамТехническогоПроекта(НаименованиеКонфигурации, ТехническийПроект, РеквизитыПроекта, ТаблицаУчастников, ПараметрыРассылки)
		
	ТекстовоеОписание = Новый ТекстовыйДокумент;
	Макет = Справочники.ТехническиеПроекты.ПолучитьМакет("Уведомление");
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.Конфигурация = НаименованиеКонфигурации;
	Область.Параметры.ТехническийПроект = РеквизитыПроекта.Наименование;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("СтатусТехническогоПроекта");
	Область.Параметры.СтатусТехническогоПроекта = РеквизитыПроекта.Статус;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Цели");
	Область.Параметры.ЦелиПроекта = РеквизитыПроекта.ЦелиПроекта;
	ТекстовоеОписание.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Планирование");
	Область.Параметры.Ответственный = РеквизитыПроекта.Ответственный;
	Область.Параметры.ПлановаяДатаНачала = Формат(РеквизитыПроекта.ПлановаяДатаНачала, "ДЛФ=D");
	Область.Параметры.ПлановаяДатаОкончания = Формат(РеквизитыПроекта.ПлановаяДатаОкончания, "ДЛФ=D");
	Область.Параметры.Очередность = РеквизитыПроекта.Очередность;
	ТекстовоеОписание.Вывести(Область);
	
	Если ТаблицаУчастников.Количество() > 0 Тогда
		
		Область = Макет.ПолучитьОбласть("УчастникиЗаголовок");
		ТекстовоеОписание.Вывести(Область);
		
		Для Каждого СтрокаТаблицы из ТаблицаУчастников Цикл
			Область = Макет.ПолучитьОбласть("УчастникиСтрока");
			Область.Параметры.Участник = СтрокаТаблицы.Участник;
			ТекстовоеОписание.Вывести(Область);
		КонецЦикла;
		
	КонецЕсли;
	
	ВывестиСсылки(Макет, ТекстовоеОписание, ТехническийПроект, ПараметрыРассылки);
	
	СокращеннаяСтрока = СокрП(ТекстовоеОписание.ПолучитьСтроку(ТекстовоеОписание.КоличествоСтрок()));
	ТекстовоеОписание.ЗаменитьСтроку(ТекстовоеОписание.КоличествоСтрок(), СокращеннаяСтрока);
	
	Если НЕ ПараметрыРассылки.ИспользоватьВнешниеСсылки Тогда
		Область = Макет.ПолучитьОбласть("РасположениеИБ");
		Область.Параметры.РасположениеИБ = ПараметрыРассылки.РасположениеИБ;
		ТекстовоеОписание.Вывести(Область);
	КонецЕсли;
	
	Возврат ТекстовоеОписание.ПолучитьТекст();
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция НовыйТаблицаСообщенийЭлектроннаяПочта()
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ДатаРассылки");
	ТаблицаСообщений.Колонки.Добавить("ПараметрыПисьма");
	ТаблицаСообщений.Колонки.Добавить("СообщениеОтправлено");
	
	ТаблицаСообщений.Индексы.Добавить("ДатаРассылки");
	
	Возврат ТаблицаСообщений;
	
КонецФункции

Функция НовыйТаблицаСообщенийСистемаВзаимодействия()
	
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("ДатаОповещения");
	ТаблицаСообщений.Колонки.Добавить("ПараметрыСообщения");
	
	ТаблицаСообщений.Индексы.Добавить("ДатаОповещения");
	Возврат ТаблицаСообщений;
	
КонецФункции

Процедура ОтправитьУведомленияЭлектроннаяПочта(ТаблицаСообщенийЭлектроннаяПочта, ДатаПоследнейРассылки)
	
	// Сортируем сообщения по дате рассылки
	ТаблицаСообщенийЭлектроннаяПочта.Сортировать("ДатаРассылки Возр");
	
	УчетнаяЗаписьСервера = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	
	// Если сообщение не удалось отправить в течение 3 попыток, в то же время другие сообщения
	// в этой рассылке были отправлены, то полагаем, что сообщение быть доставлено не может
	КоличествоПопытокОтправкиПочты = 3;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Начата отправка уведомлений'") );
	
	Для НомерПопытки = 1 По КоличествоПопытокОтправкиПочты Цикл
		
		Если ТаблицаСообщенийЭлектроннаяПочта.Количество() = 0 Тогда
			Прервать; // Сообщений для отправки нет
		КонецЕсли;
		// Отправляем сообщения в цикле
		Для Каждого Строка Из ТаблицаСообщенийЭлектроннаяПочта Цикл
			Если Строка.СообщениеОтправлено Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗаписьСервера, Строка.ПараметрыПисьма);
				РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗаписьСервера, Письмо);
				
				Строка.СообщениеОтправлено = Истина;
				Если Строка.ДатаРассылки > ДатаПоследнейРассылки Тогда
					ДатаПоследнейРассылки = Строка.ДатаРассылки;
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Ошибка,,ИнформацияОбОшибке().Описание);
			КонецПопытки;
		КонецЦикла; // Отправка сообщений
	КонецЦикла;     // Попытка отправить
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'ЭлектроннаяПочта'"), УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Завершена отправка уведомлений'") );
	
	// Устанавливаем константу при необходимости
	Если ДатаПоследнейРассылки > Константы.ДатаПоследнейРассылки.Получить() Тогда
		Константы.ДатаПоследнейРассылки.Установить(ДатаПоследнейРассылки);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыСообщенияСистемыВзаимодействия()
	
	ПараметрыСообщения = Новый Структура;
	
	ПараметрыСообщения.Вставить("Объект",         Неопределено);
	ПараметрыСообщения.Вставить("Получатель",     Справочники.Пользователи.ПустаяСсылка());
	ПараметрыСообщения.Вставить("Отправитель",    Справочники.Пользователи.ПустаяСсылка());
	ПараметрыСообщения.Вставить("Заголовок",      "");
	ПараметрыСообщения.Вставить("ТекстСообщения", "");
	
	Возврат ПараметрыСообщения;
	
КонецФункции

Процедура ОтправитьОповещенияСистемаВзаимодействия(ТаблицаСообщенийСистемаВзаимодействия, ДатаПоследнегоОповещенияСистемаВзаимодействия)
	
	Если ТаблицаСообщенийСистемаВзаимодействия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
		ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаЧерезСистемуВзаимодействия(),
		                         УровеньЖурналаРегистрации.Ошибка,,,
		                         НСтр("ru = 'Система взаимодействия недоступна.'"));
		Возврат;
	КонецЕсли;
	
	ТаблицаСообщенийСистемаВзаимодействия.Сортировать("ДатаОповещения Возр");
	
	ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаЧерезСистемуВзаимодействия(),
	                         УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Начата отправка оповещений'") );
	
	Для Каждого СтрокаТаблицы Из ТаблицаСообщенийСистемаВзаимодействия Цикл
		
		Попытка
			
			РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(СтрокаТаблицы.ПараметрыСообщения.Объект,
			                                                         СтрокаТаблицы.ПараметрыСообщения.Получатель,
			                                                         СтрокаТаблицы.ПараметрыСообщения.Отправитель,
			                                                         СтрокаТаблицы.ПараметрыСообщения.Заголовок,
			                                                         СтрокаТаблицы.ПараметрыСообщения.ТекстСообщения);
			
			Если СтрокаТаблицы.ДатаОповещения > ДатаПоследнегоОповещенияСистемаВзаимодействия Тогда
				ДатаПоследнегоОповещенияСистемаВзаимодействия = СтрокаТаблицы.ДатаОповещения;
			КонецЕсли;
			
		Исключение
			
			ТекстЗаписи = СтрШаблон(НСтр("ru = 'Не удалось добавить уведомление для пользователя %1'"), СтрокаТаблицы.ПараметрыСообщения.Получатель);
			ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаЧерезСистемуВзаимодействия(),
			                         УровеньЖурналаРегистрации.Ошибка,,
			                         СтрокаТаблицы.ПараметрыСообщения.Объект, ТекстЗаписи);
		
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияОтправкаЧерезСистемуВзаимодействия(), 
	                         УровеньЖурналаРегистрации.Информация,,НСтр("ru = 'Закончена отправка оповещений'"));
	
	// Устанавливаем константу при необходимости
	Если ДатаПоследнегоОповещенияСистемаВзаимодействия > Константы.ДатаПоследнегоПериодическогоСозданияУведомленийСистемаВзаимодействия.Получить() Тогда
		Константы.ДатаПоследнегоПериодическогоСозданияУведомленийСистемаВзаимодействия.Установить(ДатаПоследнегоОповещенияСистемаВзаимодействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиСсылки(Макет, ТекстовыйДокумент, Ссылка, ПараметрыРассылки)
	
	Если ЗначениеЗаполнено(ПараметрыРассылки.АдресИБВЛокальнойСети) Тогда
		// Выводится ссылка в локальной сети
		Область = Макет.ПолучитьОбласть("Ссылка");
		Область.Параметры.ПредставлениеСсылки =
			НСтр("ru='Ссылка:'") + Символы.ПС
			+ НавигационнаяСсылкаДляУведомления(Ссылка, ПараметрыРассылки.АдресИБВЛокальнойСети);
			
		ТекстовыйДокумент.Вывести(Область);
	Иначе
		// Если не указан адрес в локальной сети и не указан внешний адре,
		// то выводится внутренняя ссылка.
		Если НЕ ЗначениеЗаполнено(ПараметрыРассылки.АдресИБВИнтернет) Тогда
			Область = Макет.ПолучитьОбласть("Ссылка");
			Область.Параметры.ПредставлениеСсылки =
				НСтр("ru='Ссылка:'") + Символы.ПС + ПолучитьНавигационнуюСсылку(Ссылка);
				
			ТекстовыйДокумент.Вывести(Область);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметрырассылки.АдресИБВИнтернет) Тогда
		// Выводится внешняя ссылка
		Область = Макет.ПолучитьОбласть("ВнешняяСсылка");
		Область.Параметры.ПредставлениеСсылки =
			НСтр("ru='Внешняя ссылка:'") + Символы.ПС
			+ НавигационнаяСсылкаДляУведомления(Ссылка, ПараметрыРассылки.АдресИБВИнтернет, Истина);
			
		ТекстовыйДокумент.Вывести(Область);
	КонецЕсли;
	
КонецПроцедуры

Функция НавигационнаяСсылкаДляУведомления(Ссылка, АдресПубликацииИБ, ВебПубликация=Ложь)
	
	АдресПубликацииИБ = СОКРЛП(АдресПубликацииИБ);
	
	Если ВебПубликация И Прав(АдресПубликацииИБ,1)<> "/" Тогда
		АдресПубликацииИБ = АдресПубликацииИБ + "/";
	КонецЕсли;
		
	Возврат АдресПубликацииИБ + "#" + ПолучитьНавигационнуюСсылку(Ссылка);
	
КонецФункции

Функция ПолучитьПроектыДляРассылки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект,
	|	Проекты.РассылатьУведомленияПоТехническимПроектам КАК РассылатьУведомленияПоТехническимПроектам,
	|	Проекты.РассылатьУведомленияПоЗадачам КАК РассылатьУведомленияПоЗадачам,
	|	Проекты.РассылатьУведомленияПоОшибкам КАК РассылатьУведомленияПоОшибкам
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|	И (Проекты.РассылатьУведомленияПоТехническимПроектам
	|			ИЛИ Проекты.РассылатьУведомленияПоЗадачам
	|			ИЛИ Проекты.РассылатьУведомленияПоОшибкам)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает текстовое описание расположения информационной базы
//
Функция РасположениеИнформационнойБазы()
	
	Расположение = СтрокаСоединенияИнформационнойБазы();
	// Сокращаем концевую точку с запятой
	Расположение = Лев(Расположение,СтрДлина(Расположение) - 1);
	Расположение = СтрЗаменить(Расположение, ";", ",");
	Расположение = СтрЗаменить(Расположение, "Srvr=", НСтр(" ru= ""Сервер 1С:Предприятия""; ") + " ");
	Расположение = СтрЗаменить(Расположение, "Ref=",  " " + НСтр(" ru= ""информационная база""; ") + " ");
	Расположение = СтрЗаменить(Расположение, "File=", НСтр(" ru= ""Файловая информационная база""; ") + " ");
	
	Возврат Расположение;
	
КонецФункции

Функция ИмяСобытияОтправкаЧерезСистемуВзаимодействия()

	Возврат НСтр("ru ='Формирование оповещений через систему взаимодействия'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

