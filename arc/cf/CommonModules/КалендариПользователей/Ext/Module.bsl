#Область СлужебныйПрограммныйИнтерфейс

// Возвращает правило повторения "Никогда".
// 
// Возвращаемое значение:
//  Структура - Правило повторения "Никогда". См. КалендариПользователей.ПолучитьСтруктуруПравилаПовторения().
//
Функция ПравилоПовторенияНикогда() Экспорт
	
	ПравилоПовторенияНикогда = ПолучитьСтруктуруПравилаПовторения();
	ПравилоПовторенияНикогда.ТипЗаписиКалендаря = Перечисления.ТипЗаписиКалендаря.Событие;
	
	Возврат ПравилоПовторенияНикогда;
	
КонецФункции

// Возвращает структуру правила повторения.
//
Функция ПолучитьСтруктуруПравилаПовторения() Экспорт
	
	СтруктураПравилаПовторения = Новый Структура();
	СтруктураПравилаПовторения.Вставить("ДатаНачалаПовторения", Дата(1, 1, 1));
	СтруктураПравилаПовторения.Вставить("ДатаОкончанияПовторения", Дата(1, 1, 1));
	СтруктураПравилаПовторения.Вставить("ИнтервалПовторения", 0);
	СтруктураПравилаПовторения.Вставить("КоличествоПовторов", 0);
	СтруктураПравилаПовторения.Вставить("ПовторениеПоДнямМесяца", 0);
	СтруктураПравилаПовторения.Вставить("ПовторениеПоМесяцам", 0);
	СтруктураПравилаПовторения.Вставить("ПравилоОкончанияПовторения", Перечисления.ПравилаОкончанияПовторения.ПустаяСсылка());
	СтруктураПравилаПовторения.Вставить("ТипЗаписиКалендаря", Перечисления.ТипЗаписиКалендаря.ПустаяСсылка());
	СтруктураПравилаПовторения.Вставить("ЧастотаПовторения", Перечисления.ЧастотаПовторения.ПустаяСсылка());
	
	СтруктураПравилаПовторения.Вставить("ИсключенияПовторения", Новый ТаблицаЗначений);
	СтруктураПравилаПовторения.ИсключенияПовторения.Колонки.Добавить(
		"ДатаИсключения",
		Новый ОписаниеТипов("Дата"));
	СтруктураПравилаПовторения.ИсключенияПовторения.Колонки.Добавить(
		"ЗаписьИсключения",
		Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	СтруктураПравилаПовторения.Вставить("ПовторениеПоДням", Новый ТаблицаЗначений);
	СтруктураПравилаПовторения.ПовторениеПоДням.Колонки.Добавить(
		"ДеньНедели",
		Новый ОписаниеТипов("Число"));
	СтруктураПравилаПовторения.ПовторениеПоДням.Колонки.Добавить(
		"НомерВхождения",
		Новый ОписаниеТипов("Число"));
	
	Возврат СтруктураПравилаПовторения;
	
КонецФункции

// Формирует и возвращает данные о замещении для указанных записей
//
Функция ЗамещающиеЗаписиПовторяемыхСобытий(ЗаписиКалендаря) Экспорт
	
	ЗамещающающиеЗаписи = Новый Соответствие;
	Если ЗаписиКалендаря.Количество() = 0 Тогда
		Возврат ЗамещающающиеЗаписи;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторПовторения,
	|	КалендариПользователей.ДатаЗамещения КАК ДатаЗамещения,
	|	КалендариПользователей.Удаленный КАК Удаленный
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	КалендариПользователей.ИдентификаторПовторения В(&ЗаписиКалендаря)
	|ИТОГИ ПО
	|	ИдентификаторПовторения"
	;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеТиповИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаписиКалендаря", ЗаписиКалендаря);
	
	ВыборкаЗаписи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
	Пока ВыборкаЗаписи.Следующий() Цикл
			
		ДанныеЗамещения = Новый ТаблицаЗначений;
		ДанныеЗамещения.Колонки.Добавить("ДатаИсключения", ОписаниеТиповДата);
		ДанныеЗамещения.Колонки.Добавить("ЗаписьИсключения", ОписаниеТиповИдентификатор);
		
		ВыборкаЗамещение = ВыборкаЗаписи.Выбрать();
		
		Пока ВыборкаЗамещение.Следующий() Цикл
			НоваяСтрока = ДанныеЗамещения.Добавить();
			НоваяСтрока.ДатаИсключения = ВыборкаЗамещение.ДатаЗамещения;
			НоваяСтрока.ЗаписьИсключения = ВыборкаЗамещение.ИдентификаторЗаписи;
		КонецЦикла;
		
		ЗамещающающиеЗаписи.Вставить(ВыборкаЗаписи.ИдентификаторПовторения, ДанныеЗамещения);
		
	КонецЦикла;
	
	Возврат ЗамещающающиеЗаписи;
	
КонецФункции

Функция ПравилоПовторенияПоРасписанию(Расписание, ДатаНачала, ДатаОкончания, ИсключенияДляЗаписи) Экспорт
	
	ПравилоПовторения = ПравилоПовторенияНикогда();
	
	Если ТипЗнч(Расписание) <> Тип("РасписаниеЭлементаПланировщика") Тогда
		Возврат ПравилоПовторения;
	КонецЕсли;
	
	ПовторениеПоДням = Новый ТаблицаЗначений;
	ПовторениеПоДням.Колонки.Добавить("ДеньНедели", Новый ОписаниеТипов("Число"));
	ПовторениеПоДням.Колонки.Добавить("НомерВхождения", Новый ОписаниеТипов("Число"));
	
	ПовторениеПоДнямМесяца = 0;
	ПовторениеПоМесяцам = 0;
	
	Если Расписание.ПериодЛет>0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно;
		ИнтервалПовторения = Расписание.ПериодЛет;
	ИначеЕсли Расписание.ПериодМесяцев>0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно;
		ИнтервалПовторения = Расписание.ПериодМесяцев;
		
		Если Расписание.Месяцы.Количество()>0 Тогда
			ПовторениеПоМесяцам = МассивПовторениеПоМесяцамВЧисло(Расписание.Месяцы);
		КонецЕсли;
		
		Если Расписание.ДеньВМесяце<>0 Тогда
			МассивДней = Новый Массив;
			МассивДней.Добавить(Расписание.ДеньВМесяце);
			ПовторениеПоДнямМесяца = МассивПовторениеПоДнямМесяцаВЧисло(МассивДней);
		КонецЕсли;
		
	ИначеЕсли Расписание.ПериодНедель>0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно;
		ИнтервалПовторения = Расписание.ПериодНедель;
		
		Для Каждого ДеньНедели из Расписание.ДниНедели Цикл
			НоваяСтрока = ПовторениеПоДням.Добавить();
			НоваяСтрока.ДеньНедели = ДеньНедели;
			НоваяСтрока.НомерВхождения = Расписание.ДеньНеделиВМесяце
		КонецЦикла;
		
	ИначеЕсли Расписание.ПериодПовтораДней>0 Тогда
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно;
		ИнтервалПовторения = Расписание.ПериодПовтораДней;
	Иначе
		ЧастотаПовторения = Перечисления.ЧастотаПовторения.ПустаяСсылка();
		ИнтервалПовторения = 0;
	КонецЕсли;
	
	ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.Никогда;
	
	ДатаОкончанияПовторения =
	    РегистрыСведений.КалендариПользователей.ДатаОкончанияСобытия(Расписание,ДатаНачала, ДатаОкончания);
	
	Если Расписание.КоличествоПовторов>0
		И ДатаОкончанияПовторения < Расписание.ДатаКонца ИЛИ Расписание.ДатаКонца = '00010101' Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ПослеЧислаПовторов;
	ИначеЕсли ЗначениеЗаполнено(Расписание.ДатаКонца) Тогда
		ПравилоОкончанияПовторения = Перечисления.ПравилаОкончанияПовторения.ДоДаты;
	КонецЕсли;
	
	Если ДатаОкончанияПовторения <> '00010101' Тогда
		Если ДатаОкончанияПовторения = НачалоДня(ДатаОкончанияПовторения) Тогда
			ДатаОкончанияПовторения = ДатаОкончанияПовторения-1;
		КонецЕсли;
	КонецЕсли;
	
	ПравилоПовторения.Вставить("ДатаНачалаПовторения", ДатаНачала);
	ПравилоПовторения.Вставить("ДатаОкончанияПовторения", ДатаокончанияПовторения);
	ПравилоПовторения.Вставить("ИнтервалПовторения", ИнтервалПовторения);
	ПравилоПовторения.Вставить("КоличествоПовторов", Расписание.КоличествоПовторов);
	ПравилоПовторения.Вставить("ПовторениеПоДнямМесяца", ПовторениеПоДнямМесяца);
	ПравилоПовторения.Вставить("ПовторениеПоМесяцам", ПовторениеПоМесяцам);
	ПравилоПовторения.Вставить("ПравилоОкончанияПовторения", ПравилоОкончанияПовторения);
	ПравилоПовторения.Вставить("ТипЗаписиКалендаря", Перечисления.ТипЗаписиКалендаря.ПовторяющеесяСобытие);
	ПравилоПовторения.Вставить("ЧастотаПовторения", ЧастотаПовторения);
	
	ПравилоПовторения.Вставить("ПовторениеПоДням", ПовторениеПоДням);
	ПравилоПовторения.Вставить("ИсключенияПовторения", ИсключенияДляЗаписи);
	
	Возврат ПравилоПовторения;
	
КонецФункции

Процедура ЗаполнитьРасписаниеСобытияПоПравилу(РасписаниеСобытия, ПравилоПовторения) Экспорт
	
	РасписаниеСобытия.ПериодПовтораДней = 0;
	
	РасписаниеСобытия.ДатаКонца = ПравилоПовторения.ДатаОкончанияПовторения;
	
	РасписаниеСобытия.КоличествоПовторов = ПравилоПовторения.КоличествоПовторов;
	
	// Повторение по дням
	МассивДней = Новый Массив;
	Для Каждого ЭлементПовторения из ПравилоПовторения.ПовторениеПоДням Цикл
		МассивДней.Добавить(ЭлементПовторения.ДеньНедели);
	КонецЦикла;
	
	// Месяцы
	РасписаниеСобытия.Месяцы = ЧислоПовторениеПоМесяцамВМассив(ПравилоПовторения.ПовторениеПоМесяцам);
	
	Если РасписаниеСобытия.Месяцы.Количество()=0 Тогда
		РасписаниеСобытия.Месяцы = МассивМесяцев();
	КонецЕсли;
	
	ПовторенияПоДнямВМесяце = ЧислоПовторениеПоДнямМесяцаВМассив(ПравилоПовторения.ПовторениеПоДнямМесяца);
	
	Если ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежедневно Тогда
		
		РасписаниеСобытия.ПериодПовтораДней = ПравилоПовторения.ИнтервалПовторения;
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Еженедельно Тогда
		
		РасписаниеСобытия.ДниНедели = МассивДней;
		
		РасписаниеСобытия.ПериодНедель = ПравилоПовторения.ИнтервалПовторения;
		Если МассивДней.Количество()>1 Тогда
			РасписаниеСобытия.ПериодПовтораДней = 1;
		КонецЕсли;
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежемесячно Тогда
		
		РасписаниеСобытия.ПериодМесяцев = ПравилоПовторения.ИнтервалПовторения;
		
		Если ПравилоПовторения.ПовторениеПоДням.Количество()>0 Тогда
			СтрокаПовторения = ПравилоПовторения.ПовторениеПоДням[0];
			РасписаниеСобытия.ПериодНедель = 1;
			РасписаниеСобытия.ДеньНеделиВМесяце = СтрокаПовторения.НомерВхождения;
			РасписаниеСобытия.ДниНедели = МассивДней;
		КонецЕсли;
		
	ИначеЕсли ПравилоПовторения.ЧастотаПовторения = Перечисления.ЧастотаПовторения.Ежегодно Тогда
		
		РасписаниеСобытия.ПериодЛет = ПравилоПовторения.ИнтервалПовторения;
		
	КонецЕсли;
	
	Если РасписаниеСобытия.ДниНедели.Количество()=0 Тогда
		РасписаниеСобытия.ДниНедели = МассивДнейНедели();
	КонецЕсли;
	
КонецПроцедуры

// Преобразует массив повторения по дням месяца в число.
//
// Параметры:
//  МассивПовторениеПоДнямМесяца - Массив из Число - Повторения по дням месяца в виде массива.
// 
// Возвращаемое значение:
//  Число - Повторения по дням месяца в виде числа.
//
Функция МассивПовторениеПоДнямМесяцаВЧисло(МассивПовторениеПоДнямМесяца) Экспорт
	
	Если МассивПовторениеПоДнямМесяца.Количество() = 0 Тогда
		
		ЧислоПовторениеПоДнямМесяца = 0;
		
	ИначеЕсли МассивПовторениеПоДнямМесяца.Количество() = 1 Тогда
		
		ЧислоПовторениеПоДнямМесяца = МассивПовторениеПоДнямМесяца[0];
		
	Иначе
		
		ДнейВМесяце = 31;
		ЧислоПовторениеПоДнямМесяца = ДнейВМесяце;
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		Для Каждого ЭлементПовторениеПоДнямМесяца Из МассивПовторениеПоДнямМесяца Цикл
			ЧислоПовторениеПоДнямМесяца = ЧислоПовторениеПоДнямМесяца
				+ Pow(2, ОписаниеТипаЧисло.ПривестиЗначение(ЭлементПовторениеПоДнямМесяца));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЧислоПовторениеПоДнямМесяца;
	
КонецФункции

// Преобразует массив повторения по месяцам в число.
//
// Параметры:
//  МассивПовторениеПоМесяцам - Массив из Число - Повторения по месяцам в виде массива.
// 
// Возвращаемое значение:
//  Число - Повторения по месяцам в виде числа.
//
Функция МассивПовторениеПоМесяцамВЧисло(МассивПовторениеПоМесяцам) Экспорт
	
	Если МассивПовторениеПоМесяцам.Количество() = 0 Тогда
		
		ЧислоПовторениеПоМесяцам = 0;
		
	ИначеЕсли МассивПовторениеПоМесяцам.Количество() = 1 Тогда
		
		ЧислоПовторениеПоМесяцам = МассивПовторениеПоМесяцам[0];
		
	Иначе
		
		МесяцевВГоду = 12;
		ЧислоПовторениеПоМесяцам = МесяцевВГоду;
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
		Для Каждого ЭлементПовторениеПоДнямМесяца Из МассивПовторениеПоМесяцам Цикл
			ЧислоПовторениеПоМесяцам = ЧислоПовторениеПоМесяцам
				+ Pow(2, ОписаниеТипаЧисло.ПривестиЗначение(ЭлементПовторениеПоДнямМесяца));
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЧислоПовторениеПоМесяцам;
	
КонецФункции

// Преобразует число повторения по дням месяца в массив.
// 
// Параметры:
//  ЧислоПовторениеПоДнямМесяца - Число - Повторения по дням месяца в виде числа.
//
// Возвращаемое значение:
//  Массив из Число - Повторения по дням месяца в виде массива.
//
Функция ЧислоПовторениеПоДнямМесяцаВМассив(Знач ЧислоПовторениеПоДнямМесяца) Экспорт
	
	МассивПовторениеПоДнямМесяца = Новый Массив;
	Если Не ЗначениеЗаполнено(ЧислоПовторениеПоДнямМесяца) Тогда
		Возврат МассивПовторениеПоДнямМесяца;
	КонецЕсли;
	
	ДнейВМесяце = 31;
	Если ЧислоПовторениеПоДнямМесяца <= ДнейВМесяце Тогда
		МассивПовторениеПоДнямМесяца.Добавить(ЧислоПовторениеПоДнямМесяца);
		Возврат МассивПовторениеПоДнямМесяца;
	КонецЕсли;
	
	ЧислоПовторениеПоДнямМесяца = ЧислоПовторениеПоДнямМесяца - ДнейВМесяце;
	Для Индекс = 0 По ДнейВМесяце - 1 Цикл
		
		НомерДня = ДнейВМесяце - Индекс;
		КодДня = Pow(2, НомерДня);
		Если КодДня > ЧислоПовторениеПоДнямМесяца Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоПовторениеПоДнямМесяца = ЧислоПовторениеПоДнямМесяца - КодДня;
		МассивПовторениеПоДнямМесяца.Добавить(НомерДня);
		
	КонецЦикла;
	
	СписокСортировки = Новый СписокЗначений;
	СписокСортировки.ЗагрузитьЗначения(МассивПовторениеПоДнямМесяца);
	СписокСортировки.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	МассивПовторениеПоДнямМесяца = СписокСортировки.ВыгрузитьЗначения();
	
	Возврат МассивПовторениеПоДнямМесяца;
	
КонецФункции

// Преобразует число повторения по месяцам в массив.
// 
// Параметры:
//  ЧислоПовторениеПоМесяцам - Число - Повторения по месяцам в виде числа.
//
// Возвращаемое значение:
//  Массив из Число - Повторения по месяцам в виде массива.
//
Функция ЧислоПовторениеПоМесяцамВМассив(Знач ЧислоПовторениеПоМесяцам) Экспорт
	
	МассивПовторениеПоМесяцам = Новый Массив;
	Если Не ЗначениеЗаполнено(ЧислоПовторениеПоМесяцам) Тогда
		Возврат МассивПовторениеПоМесяцам;
	КонецЕсли;
	
	МесяцевВГоду = 12;
	Если ЧислоПовторениеПоМесяцам <= МесяцевВГоду Тогда
		МассивПовторениеПоМесяцам.Добавить(ЧислоПовторениеПоМесяцам);
		Возврат МассивПовторениеПоМесяцам;
	КонецЕсли;
	
	ЧислоПовторениеПоМесяцам = ЧислоПовторениеПоМесяцам - МесяцевВГоду;
	Для Индекс = 0 По МесяцевВГоду - 1 Цикл
		
		НомерДня = МесяцевВГоду - Индекс;
		КодДня = Pow(2, НомерДня);
		Если КодДня > ЧислоПовторениеПоМесяцам Тогда
			Продолжить;
		КонецЕсли;
		
		ЧислоПовторениеПоМесяцам = ЧислоПовторениеПоМесяцам - КодДня;
		МассивПовторениеПоМесяцам.Добавить(НомерДня);
		
	КонецЦикла;
	
	СписокСортировки = Новый СписокЗначений;
	СписокСортировки.ЗагрузитьЗначения(МассивПовторениеПоМесяцам);
	СписокСортировки.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	МассивПовторениеПоМесяцам = СписокСортировки.ВыгрузитьЗначения();
	
	Возврат МассивПовторениеПоМесяцам;
	
КонецФункции

Функция СобытияКалендаряДляНапоминаний() Экспорт
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ИнтервалНапоминаний = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряПользователя", "ИнтервалНапоминаний", 0);
	
	ТекущаяДата = НачалоМинуты(ТекущаяДата());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.Название КАК Название,
	|	ВЫБОР
	|		КОГДА КалендариПользователей.Задача <> ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.Задача
	|		КОГДА КалендариПользователей.Ошибка <> ЗНАЧЕНИЕ(Справочник.Ошибки.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.Ошибка
	|		КОГДА КалендариПользователей.ТехническийПроект <> ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.ТехническийПроект
	|		КОГДА КалендариПользователей.ВидДеятельности <> ЗНАЧЕНИЕ(Справочник.ВидыДеятельности.ПустаяСсылка)
	|			ТОГДА КалендариПользователей.ВидДеятельности
	|	КОНЕЦ КАК Работа,
	|	КалендариПользователей.Начало КАК Начало
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	КалендариПользователей.Пользователь = &Пользователь
	|	И НЕ КалендариПользователей.Повторяется
	|	И НЕ КалендариПользователей.Удаленный
	|	И (РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(&ТекущаяДата, МИНУТА, &ИнтервалНапоминаний), КалендариПользователей.Начало, МИНУТА) = 0
	|			ИЛИ РАЗНОСТЬДАТ(&ТекущаяДата, КалендариПользователей.Начало, МИНУТА) = 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начало"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.УстановитьПараметр("ИнтервалНапоминаний", ИнтервалНапоминаний);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МассивДнейНедели()
	
	Результат = Новый Массив;
	
	Для Сч=1 По 7 Цикл
		Результат.Добавить(Сч);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция МассивМесяцев()
	
	Результат = Новый Массив;
	
	Для Сч=1 По 12 Цикл
		Результат.Добавить(Сч);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти