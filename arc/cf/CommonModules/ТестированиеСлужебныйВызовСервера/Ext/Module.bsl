#Область СлужебныеПроцедурыИФункции

// Только для внутреннего использования.
Функция ИмяПрофиляTestClient(Роль,НастройкиБДДляЗапускаТестовИзСценария,ЭкранироватьСпецСимволы) Экспорт
	Возврат Тестирование.ИмяПрофиляTestClient(Роль, НастройкиБДДляЗапускаТестовИзСценария, ЭкранироватьСпецСимволы);
КонецФункции

// Только для внутреннего использования.
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища) Экспорт
	Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь); 
КонецФункции 

// Возвращает данные сценария работы пользователя из репозитория
// Параметры:
//  Проект - Справочники.Проекты
//  ДанныеСценария - Структура
//  ТокенПользователя - Строка
//  Ветка - Справочник.Ветки
//  ИдентификаторКоммита - Строка
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеСценарияИзРепозитория(Проект, ДанныеСценария, ТокенПользователя,  Ветка, ИдентификаторКоммита) Экспорт
	Возврат Тестирование.ДанныеСценарияИзРепозитория(
		Проект, ДанныеСценария, ТокенПользователя,  Ветка, ИдентификаторКоммита); 
КонецФункции	 

// Возвращает данные сценария работы пользователя из репозитория
// Параметры:
//  Проект - Справочники.Проекты
//  ДанныеСценария - Структура
//  ТокенПользователя - Строка
//  Ветка - Справочник.Ветки
//  ИдентификаторКоммита - Строка
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеИерархииПоДаннымGit(Проект, ТокенПользователя, Ветка, ИдентификаторКоммита) Экспорт
	Возврат Тестирование.ДанныеИерархииПоДаннымGit(
		Проект, ТокенПользователя, Ветка, ИдентификаторКоммита); 
КонецФункции	 

// Возвращает данные настройки сценария работы пользователя из репозитория
// Параметры:
//  Проект - Справочники.Проекты
//  ДанныеНастройки - Структура
//  ТокенПользователя - Строка
//  Ветка - Справочник.Ветки
//  ИдентификаторКоммита - Строка
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеНастройкиСценарияИзРепозитория(Проект, ДанныеНастройки, ТокенПользователя,  Ветка, ИдентификаторКоммита) Экспорт
	Возврат Тестирование.ДанныеНастройкиСценарияИзРепозитория(
		Проект, ДанныеНастройки, ТокенПользователя,  Ветка, ИдентификаторКоммита); 
КонецФункции	 

// Возвращает представление ветки
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяВеткиСтрокой(Ветка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"); 
КонецФункции	 

// Возвращает имя ветки в репозитории
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяВеткиВРепозитории(Ветка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя"); 
КонецФункции	 

// Возвращает представление проекта
// Параметры:
//  Проект - Справочник.Проекты
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяПроектаСтрокой(Проект) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"); 
КонецФункции	 

// Возвращает основную ветку проекта
// Параметры:
//  Проект - Справочник.Проекты
//
// Возвращаемое значение:
//  Структура
//
Функция ПараметрыДляПолученияСценариев(Проект, Ветка=Неопределено) Экспорт
	Параметры = Новый Структура;
	Если Ветка = Неопределено Тогда
		Ветка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Ветка"); 
	КонецЕсли;
	ИмяВеткиСтрокой = ИмяВеткиСтрокой(Ветка);
	ПутьКФайлуТокена = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "ФайлСодержащийТокен");

	Параметры.Вставить("Ветка", Ветка);
	Параметры.Вставить("ИмяВеткиСтрокой", ИмяВеткиСтрокой);
	Параметры.Вставить("ПутьКФайлуТокена", ПутьКФайлуТокена);
	Возврат Параметры;
	
КонецФункции

// Возвращает двоичные данные файлов сценария работы пользователя из репозитория
// Параметры:
//  ДанныеДляПолученияФайлов - Структура
//
// Возвращаемое значение:
//  Массив
//
Функция ФайлыСценарияИзРепозитория(ДанныеДляПолученияФайлов) Экспорт
	Возврат Тестирование.ФайлыСценарияИзРепозитория(ДанныеДляПолученияФайлов);
КонецФункции	 

// Возвращает считанные служебные данные сценариев из репозитория
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция СлужебныеДанныеСценариев(Параметры) Экспорт
	UIDСценария = Неопределено;
	Параметры.Свойство("UIDСценария", UIDСценария);
	UIDНастройки = Неопределено;
	Если Параметры.Свойство("Тест") Тогда
		UIDНастройки = Параметры.Тест.UIDНастройкиСценария;
		Параметры.Вставить("UID", UIDНастройки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ТокенПользователя) Тогда
		Токен = Параметры.ТокенПользователя;
	ИначеЕсли Параметры.Свойство("ТокенПроекта") И ЗначениеЗаполнено(Параметры.ТокенПроекта) Тогда
		Токен = Параметры.ТокенПроекта;
	ИначеЕсли Параметры.Свойство("Проект") Тогда	
		Токен = ТокенПроекта(Параметры.Проект);
		Если НЕ ЗначениеЗаполнено(Токен) Тогда
			ВызватьИсключение НСтр("ru = 'Не указан токен пользователя или токен проекта.'");
		КонецЕсли;	 
	Иначе
		ВызватьИсключение НСтр("ru = 'Не указан токен пользователя или токен проекта.'");
	КонецЕсли;	 
	
	Если Параметры.Свойство("АдресКешСнипетовИменСценариевИменСценариев")
		И ЗначениеЗаполнено(Параметры.АдресКешСнипетовИменСценариевИменСценариев) Тогда
		КешСнипетовИменСценариев = ПолучитьИзВременногоХранилища(Параметры.АдресКешСнипетовИменСценариевИменСценариев);
		УдалитьИзВременногоХранилища(Параметры.АдресКешСнипетовИменСценариевИменСценариев);
		ИспользоватьКешСнипетовИменСценариевИменСценариев = Истина;
	Иначе	
		КешСнипетовИменСценариев = Новый Соответствие;
		ИспользоватьКешСнипетовИменСценариевИменСценариев = Ложь;
	КонецЕсли;	 
	
	Если КешСнипетовИменСценариев = Неопределено Тогда
		КешСнипетовИменСценариев = Новый Соответствие;
	КонецЕсли;	
	
	СборщикСценариев = Неопределено;
	УникальныйИдентификатор = "";
	Параметры.Свойство("УникальныйИдентификатор", УникальныйИдентификатор);
	Если ПустаяСтрока(УникальныйИдентификатор) Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;	 
	
	ПредыдущийИдентификаторКоммита = "";
	ИдентификаторКоммита = "";
	ПолучатьДанныеИзКеш = Ложь;
	
	Если Параметры.Свойство("ИдентификаторКоммита") И ЗначениеЗаполнено(Параметры.ИдентификаторКоммита) Тогда
		//Это получение данных на нужный коммит
		Если Параметры.Свойство("ПредыдущийИдентификаторКоммита")
			И ЗначениеЗаполнено(Параметры.ПредыдущийИдентификаторКоммита) Тогда
			Если Параметры.ИдентификаторКоммита = Параметры.ПредыдущийИдентификаторКоммита Тогда
				ПолучатьДанныеИзКеш = Истина;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		// Получение данных из ветки на последний коммит
		Если Параметры.Свойство("ПредыдущийИдентификаторКоммита") 
			И ЗначениеЗаполнено(Параметры.ПредыдущийИдентификаторКоммита) Тогда
			ИнформацияОВетке = ТестированиеЗапускТестирования.ИнформацияОВетке(Параметры.Проект,
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ветка, "Имя"));
			Если ИнформацияОВетке.commit.id = Параметры.ПредыдущийИдентификаторКоммита Тогда
				ПолучатьДанныеИзКеш = Истина;
			КонецЕсли;		
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПолучатьДанныеИзКеш И Параметры.Свойство("АдресКешДанныеКоммита")
			И ЗначениеЗаполнено(Параметры.АдресКешДанныеКоммита) Тогда
		Результат = ПолучитьИзВременногоХранилища(Параметры.АдресКешДанныеКоммита);
		Данные = Результат.Данные;
	Иначе	
		Результат = ТестированиеСлужебныйВызовСервера.ДанныеИерархииПоДаннымGit(Параметры.Проект, 
						Токен, Параметры.Ветка, Параметры.ИдентификаторКоммита);
		Если Результат.Ошибка Тогда
			ВызватьИсключение Результат.ТекстОшибки;
		КонецЕсли; 
			
		Поток = Результат.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения();
			
		ЧтениеJson = Новый ЧтениеJson;
		ЧтениеJson.ОткрытьПоток(Поток, КодировкаТекста.UTF8);
		Попытка
			Данные = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			ВызватьИсключение НСтр("ru = 'Ошибка при получении данных из файла scencache.json.'")
				+ Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		ЧтениеJson.Закрыть();
		
		ДанныеКеш = Новый Структура;
		ДанныеКеш.Вставить("Данные", Данные);
		ДанныеКеш.Вставить("ИдентификаторКоммита", Результат.ИдентификаторКоммита);
		ДанныеКеш.Вставить("ДатаКоммита", Результат.ДатаКоммита);
		ДанныеКеш.Вставить("АвторКоммита", Результат.АвторКоммита);
		ДанныеКеш.Вставить("СсылкаНаКоммит", Результат.СсылкаНаКоммит);
		
		АдресКешДанныеКоммита = ПоместитьВоВременноеХранилище(ДанныеКеш, УникальныйИдентификатор);
	КонецЕсли;	
	
	СлужебныеДанныеСценариев = Новый Структура;
	СлужебныеДанныеСценариев.Вставить("Снипеты", Новый Соответствие);
	СлужебныеДанныеСценариев.Вставить("UIDCценариев", Новый Соответствие);
	СлужебныеДанныеСценариев.Вставить("КодыСценариев", Новый Соответствие);
	СлужебныеДанныеСценариев.Вставить("ДатаКоммита", Результат.ДатаКоммита);
	СлужебныеДанныеСценариев.Вставить("АвторКоммита", Результат.АвторКоммита);
	СлужебныеДанныеСценариев.Вставить("СсылкаНаКоммит", Результат.СсылкаНаКоммит);
	СлужебныеДанныеСценариев.Вставить("ИдентификаторКоммита", Результат.ИдентификаторКоммита);
	
	Если НЕ ЗначениеЗаполнено(Параметры.ИдентификаторКоммита) Тогда
		Параметры.ИдентификаторКоммита = Результат.ИдентификаторКоммита;
		Параметры.Вставить("ДатаКоммита", Результат.ДатаКоммита);
		Параметры.Вставить("АвторКоммита", Результат.АвторКоммита);
		Параметры.Вставить("СсылкаНаКоммит", Результат.СсылкаНаКоммит);
	КонецЕсли;
		
	СборщикСценариев = Обработки.СборкаТекстовСценариев.Создать();
	Индекс = 0;
	Для Каждого ДанныеСценария Из Данные Цикл
		ДанныеСценария.Вставить("Индекс", Индекс);
		Индекс = Индекс + 1;
		Если ИспользоватьКешСнипетовИменСценариевИменСценариев Тогда
			Снипет = КешСнипетовИменСценариев[ДанныеСценария.ИмяСценария];
			Если Снипет = Неопределено Тогда
				Снипет = СборщикСценариев.СнипетИзСтроки(ДанныеСценария.ИмяСценария);
				КешСнипетовИменСценариев.Вставить(ДанныеСценария.ИмяСценария, Снипет);
			КонецЕсли;	 
		Иначе
			Снипет = СборщикСценариев.СнипетИзСтроки(ДанныеСценария.ИмяСценария);
			КешСнипетовИменСценариев.Вставить(ДанныеСценария.ИмяСценария, Снипет);
		КонецЕсли;	 
		СнипетНРег = НРег(Снипет);
		ДанныеСценария.Вставить("Снипет", Снипет);
		ДанныеСценария.Вставить("СнипетНРег", СнипетНРег);
		СлужебныеДанныеСценариев.Снипеты.Вставить(НРег(СнипетНРег), ДанныеСценария.UID);
		СлужебныеДанныеСценариев.UIDCценариев.Вставить(ДанныеСценария.UID, ДанныеСценария);
		
		ДанныеИерархииФайла = СтрРазделить(ДанныеСценария.ПолноеИмяФайла, "/");
		ИдКаталогаКод = ДанныеИерархииФайла.Количество() - 2;
		Если ИдКаталогаКод >= 0 Тогда
			СлужебныеДанныеСценариев.КодыСценариев.Вставить(ДанныеИерархииФайла[ИдКаталогаКод], Истина);
		КонецЕсли;
		Если UIDСценария <> Неопределено И ДанныеСценария.UID = Строка(UIDСценария) Тогда
			Параметры.Вставить("ПолноеИмяФайла", ДанныеСценария.ПолноеИмяФайла);
		ИначеЕсли UIDНастройки <> Неопределено 
			И ДанныеСценария.Свойство("НастройкиСценария") 
			И ДанныеСценария.НастройкиСценария.Найти(UIDНастройки) <> Неопределено Тогда
			Параметры.Вставить("ПолноеИмяФайла", ДанныеСценария.ПолноеИмяФайла);
			Параметры.Вставить("UIDСценария", ДанныеСценария.UID);
			Параметры.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор(ДанныеСценария.UID));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСценарий Из Параметры.ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если ТекСценарий["ЭтоНовыйЭлемент"] = Истина Тогда
			ДанныеФайла = Новый Структура;
			ДанныеФайла.Вставить("ИмяСценария", ТекСценарий["ДанныеСценария"]["Имя"]);
			ДанныеФайла.Вставить("UID", ТекСценарий["ДанныеСценария"]["UID"]);
			ДанныеФайла.Вставить("UIDОтветственный", ТекСценарий["ДанныеСценария"]["UIDОтветственный"]);
			ДанныеФайла.Вставить("ПолноеИмяФайла", ТекСценарий["ДанныеИерархии"] + "/" + ТекСценарий["ДанныеСценария"]["Код"] + "/meta.yaml");
			ДанныеФайла.Вставить("ЭтоНовыйЭлемент", Истина);
			ДанныеФайла.Вставить("ЕстьПрисоединенныеФайлы", Ложь);
			ДанныеФайла.Вставить("Код", ТекСценарий["ДанныеСценария"]["Код"]);
			Если СборщикСценариев = Неопределено Тогда
				СборщикСценариев = Обработки.СборкаТекстовСценариев.Создать();
			КонецЕсли;	
			ДанныеФайла.Вставить("Снипет", СборщикСценариев.СнипетИзСтроки(ДанныеФайла.ИмяСценария));
			ДанныеФайла.Вставить("СнипетНрег", НРег(ДанныеФайла.Снипет));
			
			СлужебныеДанныеСценариев.UIDCценариев.Вставить(ДанныеФайла.UID, ДанныеФайла);
			СлужебныеДанныеСценариев.КодыСценариев.Вставить(ДанныеФайла.Код, Истина);
			СлужебныеДанныеСценариев.Снипеты.Вставить(НРег(ДанныеФайла.Снипет), ДанныеФайла.UID);
		КонецЕсли;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(UIDСценария) И НЕ Параметры.Свойство("ПолноеИмяФайла") Тогда
		ВызватьИсключение СтрШаблон("Сценарий с uid <%1> не найден в ветке <%2>", UIDСценария, Параметры.Ветка);
	КонецЕсли;
	Если ЗначениеЗаполнено(UIDНастройки) И НЕ Параметры.Свойство("ПолноеИмяФайла") Тогда
		ВызватьИсключение СтрШаблон("Настройка сценария с uid <%1> не найдена в ветке <%2>", UIDСценария, Параметры.Ветка);
	КонецЕсли; 
	
	АдресСлужебныеДанныеСценариев = ПоместитьВоВременноеХранилище(СлужебныеДанныеСценариев, УникальныйИдентификатор);
	АдресКешСнипетовИменСценариевИменСценариев = 
		ПоместитьВоВременноеХранилище(КешСнипетовИменСценариев, УникальныйИдентификатор);

	ДанныеСценариев = Новый Структура;	
	ДанныеСценариев.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеСценариев.Вставить("АдресКешСнипетовИменСценариевИменСценариев", АдресКешСнипетовИменСценариевИменСценариев);
	ДанныеСценариев.Вставить("АдресКешДанныеКоммита", АдресКешДанныеКоммита);
	Возврат ДанныеСценариев;

КонецФункции

// Возвращает данные сценария работы пользователя из репозитория
// Параметры:
//  ДанныеДляПолученияНастроек - Структура
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеНастроекСценарияИзРепозитория(ДанныеДляПолученияНастроек) Экспорт
	Возврат Тестирование.ДанныеНастроекСценарияИзРепозитория(ДанныеДляПолученияНастроек);
КонецФункции	 

// Возвращает данные для выгрузки сценариев
// Параметры:
//  МассивТестов - Массив
//
Функция ДанныеДляВыгрузки(МассивТестов) Экспорт
	Возврат Тестирование.ДанныеДляВыгрузки(МассивТестов);
КонецФункции	

// Возвращает данные эталонных БД
// Параметры:
//  СписокТестов - СписокЗнаечений
//
// Возвращаемое значение:
//  Массив
//
Функция ДанныеЭталонныхБД(СписокТестов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиЗапускаСценариев.Владелец.Владелец КАК Проект
		|ИЗ
		|	Справочник.НастройкиЗапускаСценариев КАК НастройкиЗапускаСценариев
		|ГДЕ
		|	НастройкиЗапускаСценариев.Ссылка В(&Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиЗапускаПроцессов.Владелец.Владелец
		|ИЗ
		|	Справочник.НастройкиЗапускаПроцессов КАК НастройкиЗапускаПроцессов
		|ГДЕ
		|	НастройкиЗапускаПроцессов.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", СписокТестов);
	
	НужныеПроекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭталонныеБазыТестированияПользователи.Ссылка.Ссылка КАК Ссылка,
		|	ЭталонныеБазыТестированияПользователи.Ссылка.Наименование КАК Наименование,
		|	ЭталонныеБазыТестированияПользователи.Ссылка.ПутьКФайлуВыгрузки КАК ПутьКФайлуВыгрузки,
		|	ЭталонныеБазыТестированияПользователи.Ссылка.ИдентификаторБазы КАК ИдентификаторБазы,
		|	ЭталонныеБазыТестированияПользователи.ПрофильПользователя.Наименование КАК ПрофильПользователяНаименование,
		|	ЭталонныеБазыТестированияПользователи.Логин КАК Логин,
		|	ЭталонныеБазыТестированияПользователи.Пароль КАК Пароль
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования.Пользователи КАК ЭталонныеБазыТестированияПользователи
		|ГДЕ
		|	НЕ ЭталонныеБазыТестированияПользователи.Ссылка.ПометкаУдаления
		|	И ЭталонныеБазыТестированияПользователи.Ссылка.Владелец В(&Проекты)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИдентификаторБазы,
		|	ПрофильПользователяНаименование
		|ИТОГИ ПО
		|	Ссылка";
	
	
	Запрос.УстановитьПараметр("Проекты", НужныеПроекты);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Массив = Новый Массив;
	
	Пока ВыборкаСсылка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ВыборкаСсылка.ПутьКФайлуВыгрузки) Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтруктураБазы = Новый Структура;
		СтруктураБазы.Вставить("Наименование",ВыборкаСсылка.Наименование);
		СтруктураБазы.Вставить("ПутьКФайлуВыгрузки",ВыборкаСсылка.ПутьКФайлуВыгрузки);
		СтруктураБазы.Вставить("ИдентификаторБазы",ВыборкаСсылка.ИдентификаторБазы);
		
		Массив.Добавить(СтруктураБазы);
		
		ПрофилиПользователей = Новый Массив;
		СтруктураБазы.Вставить("ПрофилиПользователей",ПрофилиПользователей);
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеПользователя = Новый Структура;
			ДанныеПользователя.Вставить("ПрофильПользователя",ВыборкаДетальныеЗаписи.ПрофильПользователяНаименование);
			ДанныеПользователя.Вставить("Логин",ВыборкаДетальныеЗаписи.Логин);
			ДанныеПользователя.Вставить("Пароль",ВыборкаДетальныеЗаписи.Пароль);
			
			ПрофилиПользователей.Добавить(ДанныеПользователя);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Массив; 
	
КонецФункции	

// Возвращает токен проекта
// Параметры:
//  Проект - Справочник.Проекты
//
// Возвращаемое значение:
//  Строка
//
Функция ТокенПроекта(Проект) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.РезультатыВыполненияТестовТокен КАК РезультатыВыполненияТестовТокен
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.РезультатыВыполненияТестовТокен; 
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	 

// Возвращает параметры сценария
// Параметры:
//  Данные - Массив
//
// Возвращаемое значение:
//  Массив
//
Функция ПараметрыСценарияИзТекстовыхДанных(Данные) Экспорт
	Тзн = Тестирование.ПараметрыСценарияИзТекстовыхДанных(Данные);
	
	Результат = Новый Массив;
	
	Сч = 0;
	Для Каждого СтрТзн Из Тзн Цикл
		Сч = Сч + 1;
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("НомерСтроки", Сч);
		ДанныеСтроки.Вставить("Имя", СтрТзн.Имя);
		ДанныеСтроки.Вставить("Значение", СтрТзн.Значение);
		ДанныеСтроки.Вставить("ТипПараметра", СтрТзн.ТипПараметра);
		ДанныеСтроки.Вставить("ИсходящийПараметр", СтрТзн.ИсходящийПараметр);
		
		Результат.Добавить(ДанныеСтроки);
	КонецЦикла;	 
	
	Возврат Результат;
КонецФункции	 

// Возвращает теги сценария
// Параметры:
//  Данные - Массив
//
// Возвращаемое значение:
//  Массив
//
Функция ТегиСценарияИзТекстовыхДанных(Данные) Экспорт
	Возврат ТаблицаВМассив(Тестирование.ТегиСценарияИзТекстовыхДанных(Данные));
КонецФункции	 

// Возвращает вложеныне сценарии
// Параметры:
//  Данные - Массив
//
// Возвращаемое значение:
//  Массив
//
Функция ВложенныеСценарииТекстовыхДанных(Данные) Экспорт
	Тзн = Тестирование.ВложенныеСценарииТекстовыхДанных(Данные);
	
	Результат = Новый Массив;
	Для Каждого СтрТзн Из Тзн Цикл
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("UIDВложенныйСценарий", СтрТзн.UID);
		ДанныеСтроки.Вставить("ИмяСценария", СтрТзн.ИмяСценария);
		Результат.Добавить(ДанныеСтроки);
	КонецЦикла;	 
	
	Возврат Результат;
КонецФункции	 

// Возвращает вызывающие сценарии
// Параметры:
//  Данные - Массив
//
// Возвращаемое значение:
//  Массив
//
Функция ВызывающиеСценарииТекстовыхДанных(Данные) Экспорт
	Тзн = Тестирование.ВызывающиеСценарииТекстовыхДанных(Данные);
	
	Результат = Новый Массив;
	Для Каждого СтрТзн Из Тзн Цикл
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("UIDВызывающийСценарий", СтрТзн.UID);
		ДанныеСтроки.Вставить("ИмяСценария", СтрТзн.ИмяСценария);
		Результат.Добавить(ДанныеСтроки);
	КонецЦикла;	 
	
	Возврат Результат;
КонецФункции	 

//Возвращает значение каталога данных, в который выгружаются данные для запуска сценария.
//
// Возвращаемое значение:
//   Строка
//
Функция КаталогДляДанныхТестирования() Экспорт
	Возврат Тестирование.КаталогДляДанныхТестирования();
КонецФункции

//Возвращает результат выполнения метода ПроверкаИсправленияОшибокВВетке.
// Параметры:
//  Ветка - Справочник.Ветки
//
// Возвращаемое значение:
//  Структура
//
Функция ПроверкаИсправленияОшибокВВетке(Ветка) Экспорт
	Возврат Справочники.Ветки.ПроверкаИсправленияОшибокВВетке(Ветка, Истина);
КонецФункции	

#КонецОбласти

#Область ОтчетыТестирования

// Получает данные расшифровки для отчетов тестирования "СтатусПрохожденияТестовВВетке" и "ТестыЗаблокированныеОшибками".
// 
// Параметры:
//	Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор расшифровываемого поля
//	АдресДанныхРасшифровки - Строка - Адрес временного хранилища данных расшифровки
//
// Возвращаемое значение:
//	Структура - Параметры расшифровки. 
//
Функция ДанныеРасшифровкиОтчетовТестирования(Расшифровка, АдресДанныхРасшифровки) Экспорт
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	Результат = Новый Структура;
	
	ТекущееПоле = Новый Структура;
	ПолучитьЗначениеПоля(ТекущееПоле, ДанныеРасшифровки.Элементы[Расшифровка]);
	Для Каждого КлючИЗначение Из ТекущееПоле Цикл
		Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		Если КлючИЗначение.Ключ = "Тест" Тогда
			Результат.Вставить("РезультатыТестаДетализируютсяПоОбъектамМетаданных", КлючИЗначение.Значение.РезультатыТестаДетализируютсяПоОбъектамМетаданных);
		ИначеЕсли КлючИЗначение.Ключ = "ЗапускТестирования"
			И ЗначениеЗаполнено(КлючИЗначение.Значение)
			И ЗначениеЗаполнено(КлючИЗначение.Значение.Проект) 
			И ЗначениеЗаполнено(КлючИЗначение.Значение.Pipeline_ID) Тогда
				ЗапускТестированияСсылка = Документы.ЗапускТестирования.АдресСсылки(КлючИЗначение.Значение.Проект, КлючИЗначение.Значение.Pipeline_ID);
				Результат.Вставить("ЗапускТестированияСсылка", ЗапускТестированияСсылка);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

// Получает описание обработки расшифровки для поля Ошибка для отчетов тестирования "СтатусПрохожденияТестовВВетке" и "ТестыЗаблокированныеОшибками".
//
// Параметры:
//		ОтчетДанныеРасшифровки - Строка - Адрес временного хранилища данных расшифровки
//		Отчет - ДанныеФормыСтруктура - Источник доступных настроек компоновки данных
//		Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор расшифровываемого поля
//
// Возвращаемое значение:
//	ОписаниеОбработкиРасшифровкиКомпоновкиДанных - Параметры для отчета с расшфировкой по ошибкам. 
//
Функция РасшифроватьОшибки(ОтчетДанныеРасшифровки, Отчет, Расшифровка) Экспорт
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		ОтчетДанныеРасшифровки, ИсточникНастроек);
	РасшифрованнаяОбработкаРасшифровки = ОбработкаРасшифровки.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных("Ошибка"));
	Возврат Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ОтчетДанныеРасшифровки, Расшифровка, РасшифрованнаяОбработкаРасшифровки);
	
КонецФункции

// Получает значения полей текущего элемента расшифровки
//
// Параметры:
//		СписокПолей - Структура - Ключ имя поля, значение - значение группировочного поля отчета - параметр в который будет помещен список найденных значений
//		ВыбранноеПоле - ЭлементРасшифровкиКомпоновкиДанныхПоля - элемент расшифровки поля которого необходимо получить.
//
Процедура ПолучитьЗначениеПоля(СписокПолей, ВыбранноеПоле)
	
	Если ТипЗнч(ВыбранноеПоле) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		Для Каждого Поле Из ВыбранноеПоле.ПолучитьПоля() Цикл
			Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				СписокПолей.Вставить(СтрЗаменить(Поле.Поле,".",""), Поле.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Находит заголовки в табличном документе, начинающиеся с подстроки и выносит подстроку в общую ячейку над заголовками
//
// Параметры:
//		ТабличныйДокумент - ТабличныйДокумент - Табличный документ, в котором выполняется поиск подстроки
//		ПодстрокаПоиска   - Строка - Подстрока, которую нужно найти в заголовках
//
Процедура ОбъединитьЗаголовкиВТабличномДокументе(ТабличныйДокумент, ПодстрокаПоиска) Экспорт
	РазделяемыеЯчейки = НайтиОбластиТабличногоДокументаПоНачалуСтроки(ТабличныйДокумент, ПодстрокаПоиска);
	ОбластьОформленияЗаголовка = ТабличныйДокумент.Область(ТабличныйДокумент.ФиксацияСверху - 1, ТабличныйДокумент.ФиксацияСлева);
	
	ОбластиДляОбъединения = Новый ТаблицаЗначений;
	ОбластиДляОбъединения.Колонки.Добавить("Область");
	ОбластиДляОбъединения.Колонки.Добавить("Текст");
	ОбластиДляОбъединения.Колонки.Добавить("Верх");
	ОбластиДляОбъединения.Колонки.Добавить("Лево");
	ОбластиДляОбъединения.Колонки.Добавить("Низ");
	ОбластиДляОбъединения.Колонки.Добавить("Право");
	ОбластиДляОбъединения.Колонки.Добавить("Диапазон");
	
	Для Каждого Строка Из РазделяемыеЯчейки Цикл
		Если Строка.Лево <= ТабличныйДокумент.ФиксацияСлева Тогда
			Продолжить;
		КонецЕсли;
		
		Область = ТабличныйДокумент.Область(Строка.Верх, Строка.Лево, ТабличныйДокумент.ФиксацияСверху, Строка.Право);

		ТекстЗаголовок = ПодстрокаПоиска;
		ТекстКолонки = СокрЛП(СтрЗаменить(Область.Текст, ПодстрокаПоиска, ""));
		
		Область.Разъединить();
		ОбластьЗаголовок = ТабличныйДокумент.Область(Строка.Верх, Строка.Лево, Строка.Низ, Строка.Право);
		ОбластьЗаголовок.Текст = ТекстЗаголовок;
		НоваяСтрока = ОбластиДляОбъединения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбластьЗаголовок);
		НоваяСтрока.Область = ОбластьЗаголовок;

		ОбластьКолонки = ТабличныйДокумент.Область(Строка.Верх+1, Строка.Лево, ТабличныйДокумент.ФиксацияСверху, Строка.Право);
		ОбластьКолонки.Объединить();
		ОбластьКолонки.Текст = ТекстКолонки;
		ОбластьКолонки.ИспользованиеРасшифровки = Область.ИспользованиеРасшифровки;
		ОбластьКолонки.Расшифровка = Область.Расшифровка;
		
	КонецЦикла;

	Для Каждого Строка из ОбластиДляОбъединения Цикл
		Отбор = Новый Структура("Текст,Верх,Лево", Строка.Текст, Строка.Верх-1, Строка.Лево);
		НайденныеСтроки = ОбластиДляОбъединения.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Строка.Диапазон = НайденныеСтроки[0].Диапазон;
			Строка.Диапазон.Низ = Макс(Строка.Диапазон.Низ, Строка.Верх);
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Текст,Верх,Лево", Строка.Текст, Строка.Верх, Строка.Лево-1);
		НайденныеСтроки = ОбластиДляОбъединения.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() Тогда
			Строка.Диапазон = НайденныеСтроки[0].Диапазон;
			Строка.Диапазон.Право = Макс(Строка.Диапазон.Право, Строка.Лево);
			Продолжить;
		КонецЕсли;
		
		Строка.Диапазон = Новый Структура("Текст,Верх,Лево,Низ,Право", Строка.Текст, Строка.Верх, Строка.Лево, Строка.Верх, Строка.Лево);
	КонецЦикла;
	
	ОбластиДляОбъединения.Сортировать("Верх,Право");
	ОбластиДляОбъединения.Свернуть("Диапазон");
	Для Каждого Строка Из ОбластиДляОбъединения Цикл
		Диапазон = Строка.Диапазон;
		
		Область = ТабличныйДокумент.Область(Диапазон.Верх, Диапазон.Лево, Диапазон.Низ, Диапазон.Право);
		Область.Объединить();
		Область.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		Область.Обвести(ОбластьОформленияЗаголовка.ГраницаСлева, ОбластьОформленияЗаголовка.ГраницаСверху, 
						ОбластьОформленияЗаголовка.ГраницаСправа, ОбластьОформленияЗаголовка.ГраницаСнизу);
		Область.ЦветФона = ОбластьОформленияЗаголовка.ЦветФона;
		
	КонецЦикла;
	
КонецПроцедуры

// Находит области табличного документа по вхождению подстроки
Функция НайтиОбластиТабличногоДокументаПоНачалуСтроки(ТабличныйДокумент, НачалоСтроки)
	
	НайденныеОбласти = Новый ТаблицаЗначений;
	НайденныеОбласти.Колонки.Добавить("Область");
	НайденныеОбласти.Колонки.Добавить("Текст");
	НайденныеОбласти.Колонки.Добавить("Верх");
	НайденныеОбласти.Колонки.Добавить("Лево");
	НайденныеОбласти.Колонки.Добавить("Низ");
	НайденныеОбласти.Колонки.Добавить("Право");
	
	НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(НачалоСтроки);
	
	Пока НЕ НайденнаяОбласть = Неопределено Цикл
		Если СтрНачинаетсяС(НайденнаяОбласть.Текст, НачалоСтроки) Тогда
			НоваяСтрока = НайденныеОбласти.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяОбласть);
			НоваяСтрока.Область = НайденнаяОбласть;
		КонецЕсли;
		
		НайденнаяОбласть = ТабличныйДокумент.НайтиТекст(НачалоСтроки, НайденнаяОбласть);
		
	КонецЦикла;
	
	Возврат НайденныеОбласти;
	
КонецФункции

Функция ТаблицаВМассив(Тзн)
	Результат = Новый Массив;
	Для Каждого СтрТзн Из Тзн Цикл
		ДанныеСтроки = Новый Структура;
		Для Каждого ТекКолонка Из Тзн.Колонки Цикл
			ДанныеСтроки.Вставить(ТекКолонка.Имя, СтрТзн[ТекКолонка.Имя]);
		КонецЦикла;	 
		
		Результат.Добавить(ДанныеСтроки);
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции	 

#КонецОбласти
