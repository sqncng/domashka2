
#Область ПрограммныйИнтерфейс

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - объект проводимого документа, 
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеРеквизитов(Объект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	МетаданныеРеквизиты = Объект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		
		Значение = Объект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ТекРеквизит = МетаданныеРеквизиты.Найти(КлючЗначение.Ключ);
				Если ТекРеквизит = Неопределено Тогда
					ПредставлениеРеквизита = КлючЗначение.Ключ;
				Иначе
					ПредставлениеРеквизита = ТекРеквизит.Представление();
				КонецЕсли;
				
				СтрокаСообщения = "Не заполнено значение поля """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			
			Универсальные.СообщитьОбОшибке(СтрокаСообщения,  Заголовок);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет поиск первой, удовлетворяющей условию поика, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТаблицыЗначений(ТабличнаяЧасть, СтруктураОтбора) Экспорт
	
	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;
	
	Возврат СтрокаТабличнойЧасти;
	
КонецФункции // НайтиСтрокуТаблицыЗначений()

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(Сообщение, ОписаниеСообщения = "") Экспорт
	
	ОкончаниеСлужебногоСообщения = Найти(Сообщение, "}:");
	Если ОкончаниеСлужебногоСообщения > 0 И Лев(Сообщение, 1) = "{" Тогда
		Сообщение = СокрЛП(Сред(Сообщение, (ОкончаниеСлужебногоСообщения + 2)));
	КонецЕсли;
	
	#Если ВнешнееСоединение Тогда
		Если ЗначениеЗаполнено(ОписаниеСообщения) Тогда
			Сообщение = ОписаниеСообщения + Символы.ПС + Сообщение;
			ОписаниеСообщения = "";
		КонецЕсли;
		ВызватьИсключение (Сообщение);
	#Иначе
		Если ЗначениеЗаполнено(ОписаниеСообщения) Тогда
			Сообщить(ОписаниеСообщения);
			ОписаниеСообщения = "";
		КонецЕсли; 
		Сообщить(Сообщение, СтатусСообщения.Важное);
	#КонецЕсли
	
КонецПроцедуры

Функция ЗначенияРеквизитовСправочника(Ссылка, ИменаРеквизитов) Экспорт
	
	Если Ссылка.Пустая() Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ИменаРеквизитов + "
	|ИЗ Справочник." + Ссылка.Метаданные().Имя + "
	|Где Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

// Процедура устанавливает доступность элементов управления - настройки отбора, настройки порядка.
//
// Параметры:
//  КоллекцияЭлементов - коллекция элементов, для которых устанавливается доступность.
//  Доступность (булево) - устанавливаемое значение.
//  СтрокаИсключений - список имен элементов (разделенных запятыми), для которых делается исключение.
//
Процедура УстановитьДоступностьЭлементовУправления(КоллекцияЭлементов, Доступность = Истина, СтрокаИсключений = "") Экспорт
	
	СтруктураИсключений = Новый Структура(СтрокаИсключений);
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если НЕ ПустаяСтрока(Элемент.Имя) И СтруктураИсключений.Свойство(Элемент.Имя) Тогда
			Элемент.Доступность = НЕ Доступность;
		Иначе
			Элемент.Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет переданный параметр, если он не соответствует значению, 
// то присваивает ему указанное значение.
//
// Параметры:
//  Параметр - параметр, значение которого проверяется и заполняется.
//  Значение - значение для заполнения пустого параметра.
//
Функция УстановитьНовоеЗначение(Параметр, Значение) Экспорт
	
	Если Параметр <> Значение Тогда
		Параметр = Значение;
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру реквизитов справочника к которому относится объект
Функция СтруктураОбъекта(Знач Объект) Экспорт
	
	Структура = Новый Структура;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Если МетаданныеОбъекта.ДлинаКода > 0 Тогда
			Структура.Вставить("Код", Объект.Код);
		КонецЕсли;
		
		Если МетаданныеОбъекта.ДлинаНаименования > 0 Тогда
			Структура.Вставить("Наименование", Объект.Наименование);
		КонецЕсли;
		
		Если МетаданныеОбъекта.Иерархический Тогда
			Структура.Вставить("Родитель", Объект.Родитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МетаданныеОбъекта.Владельцы) Тогда
			Структура.Вставить("Владелец", Объект.Владелец);
		КонецЕсли;
		
		Структура.Вставить("ПометкаУдаления", Объект.ПометкаУдаления);
		
		Если Объект.ЭтоГруппа Тогда
			Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
				Если Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
					Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
				Если Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
					Структура.Вставить(Реквизит.Имя, Объект[Реквизит.Имя]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Объект.ЭтоГруппа Тогда
			Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
				Если ТабличнаяЧасть.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
					Структура.Вставить(ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
				Если ТабличнаяЧасть.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы Тогда
					Структура.Вставить(ТабличнаяЧасть.Имя, Объект[ТабличнаяЧасть.Имя].Выгрузить());
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// Возвращает структуру с именами реквизитов которые были изменены в объекте справочника
// В качестве значений структуры возвращаются значения из базы данных
Функция СтруктураИзмененныхРеквизитовОбъекта(Знач Объект) Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура;
	
	// Сверяем объект и запись в базе данных
	Для Каждого Реквизит Из СтруктураОбъекта( Объект ) Цикл
		Если ТипЗнч(Реквизит.Значение) <> Тип("ТаблицаЗначений") Тогда
			Если Объект[ Реквизит.Ключ ] <> Объект.Ссылка[ Реквизит.Ключ ] Тогда
				СтруктураИзмененныхРеквизитов.Вставить( Реквизит.Ключ , Объект.Ссылка[ Реквизит.Ключ ]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураИзмененныхРеквизитов;
	
КонецФункции

Процедура ДобавитьНовоеЗначениеКоллекцию(Коллекция, Значение) Экспорт
	
	Если ЗначениеЗаполнено(Значение) И Коллекция.Найти(Значение) = Неопределено Тогда
		Коллекция.Добавить(Значение);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список родителей элемента иерархического справочника включая сам элемент
Функция СписокРодителейЭлемента(Ссылка) Экспорт
	
	ИмяСправочника = Ссылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИерархическийСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ИерархическийСправочник
	|ГДЕ
	|	ИерархическийСправочник.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокРодителей = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		
		СписокРодителей.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СписокРодителей;
	
КонецФункции

// Устанавливает правильное значение реквизита ПолныйКод дочерним элементам записываемого ПВХ.
//
Процедура УстановкаПолногоКодаДочернихЭлементовПВХПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	ПланВидовХарактеристик." + Источник.Метаданные().Имя + "
	|ГДЕ
	|	Родитель = &Родитель
	|	И ПОДСТРОКА(ПолныйКод, 1, &ДлинаПолногоКодаРодителя) <> &ПолныйКодРодителя";
	
	Запрос.УстановитьПараметр("Родитель", Источник.Ссылка);
	Запрос.УстановитьПараметр("ДлинаПолногоКодаРодителя", СтрДлина(Источник.ПолныйКод));
	Запрос.УстановитьПараметр("ПолныйКодРодителя", Источник.ПолныйКод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().Записать();
	КонецЦикла;
	
КонецПроцедуры

// Определяет корневой для указанного элемент в спровчнике с иерархийе
Функция КорневойЭлементВИерархии(Ссылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Ссылка.Родитель) Тогда
		Возврат Ссылка;
	Иначе
		Возврат КорневойЭлементВИерархии(Ссылка.Родитель)
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруЭлементаОтбора(Отбор, ИмяЭлемента) Экспорт
		
	Структура = Новый Структура();
	Структура.Вставить("Значение", Отбор[ИмяЭлемента].Значение);
	Структура.Вставить("ЗначениеС", Отбор[ИмяЭлемента].Значениес);
	Структура.Вставить("ЗначениеПо", Отбор[ИмяЭлемента].ЗначениеПо);
	Структура.Вставить("ВидСравнения", Отбор[ИмяЭлемента].ВидСравнения);
	Структура.Вставить("Использование", Отбор[ИмяЭлемента].Использование);
	
	Возврат Структура;
	
КонецФункции

Процедура ЗаполнитьЭлементОтбораИзСтруктуры(Отбор, ИмяЭлементаОтбора, Структура) Экспорт
	
	Если ТипЗнч(Структура) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Отбор[ИмяЭлементаОтбора].ВидСравнения = Структура.ВидСравнения;
	
	Если Структура.ВидСравнения = ВидСравнения.Интервал
		ИЛИ Структура.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы
		ИЛИ Структура.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало
		ИЛИ Структура.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		Отбор[ИмяЭлементаОтбора].ЗначениеС = Структура.ЗначениеС;
		Отбор[ИмяЭлементаОтбора].ЗначениеПо = Структура.ЗначениеПо;
	Иначе	
		Отбор[ИмяЭлементаОтбора].Значение = Структура.Значение;
	КонецЕсли;
	
	Отбор[ИмяЭлементаОтбора].Использование = Структура.Использование;
		
КонецПроцедуры

#Область ПроцедурыПеренумерацииОбъектов

// Процедура перенумерации объектов справочника
// Объект - Ссылка на объект
// Дочерние - если истина, то дочерние элементы переданного объекта, если ложь - то объекты того же уровня
// Рекурсивно используется только совместно с Дочерними. Предназначена для перенумерации всей ветви, а не только ближайшего уровня
// Владелец - для возможности перенумерации подчиненных справочников из формы владельца.
Процедура Перенумеровать(Объект, ЕстьОшибки, Дочерние = Истина, Рекурсивно = Ложь, Владелец = Неопределено) Экспорт
		
	Если ТипЗнч(Объект.Код) <> Тип("Число") Тогда
		ТекстСообщения = НСтр("ru='Справочник %ИмяСправочника% имеет не числовой код. Перенумерация невозможна'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяСправочника%", Объект.Метаданные().Имя);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Дочерние Тогда
		Родитель = Объект;
	Иначе
		Родитель = Объект.Родитель;
	КонецЕсли;
	
	Если Владелец = Неопределено Тогда
		Владелец = Объект.Владелец;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	УспешноПеренумеровано = Истина;
	
	ПеренумероватьВыборку(Объект, Родитель, 1, Ложь, УспешноПеренумеровано, Рекурсивно и Дочерние, Владелец);
	
	Если УспешноПеренумеровано Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		// Отмена транзакции произошла раньше
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'Перенумерация не выполнена.'");
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры // Перенумеровать

// Процедура перенумерации выборки
// Удаляемые - переменная для возможности итерационного запуска процедуры, при первом запуске должна быть - Ложь
Процедура ПеренумероватьВыборку(Объект, Родитель, НачальныйНомер, Удаляемые, УспешноПеренумеровано, Рекурсивно, Владелец)
	
	Выборка = Справочники[Объект.Метаданные().Имя].Выбрать( Родитель, Владелец, , "Код");
		
	Итератор = НачальныйНомер;
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ПометкаУдаления = Удаляемые Тогда
			Если Выборка.Код <> Итератор Тогда
				ОбъектОбъект = Выборка.ПолучитьОбъект();
				Попытка
					ОбъектОбъект.Заблокировать();
					ОбъектОбъект.Код = Итератор;
					ОбъектОбъект.Записать();
					ОбъектОбъект.Разблокировать();
				Исключение
					ПредставлениеЭлемента = СтрЗаменить( Выборка.Ссылка.ПолныйКод(), "/", ".") + " <" + Выборка.Ссылка.Наименование + ">";
					ТекстСообщения = НСтр("ru='Элемент: %ПредставлениеЭлемента% - ошибка перенумерации.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеЭлемента%", ПредставлениеЭлемента);
					Сообщить(ТекстСообщения);
					ОтменитьТранзакцию();
					УспешноПеренумеровано = Ложь;
					Возврат;
				КонецПопытки;
			КонецЕсли;
			
			Если Рекурсивно Тогда
				ПеренумероватьВыборку( Объект, Выборка.Ссылка, 1, Ложь, УспешноПеренумеровано, Рекурсивно, Владелец);
			КонецЕсли;
			
			Итератор = Итератор + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Если нужно помеченные на удаление нумеровать последними и это еще не помеченные на удаление
	// будет рекуррентный повторный вызов процедуры
	Если НЕ Удаляемые Тогда
		ПеренумероватьВыборку(Объект, Родитель, Итератор, Истина, УспешноПеренумеровано, Рекурсивно, Владелец);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
