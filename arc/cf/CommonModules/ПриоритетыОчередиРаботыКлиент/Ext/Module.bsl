////////////////////////////////////////////////////////////////////////////////
//  Клиентские процедуры и функции подсистемы "Приоритеты и очереди работ"
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет команду поставки изменения приоритета из формы элемента.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма в которой была выполнена команда.
//  Команда - Команда - выполняемая команда.
//
Процедура ВыполнитьКомандуИзмененияПриоритетаИзФормыОбъекта(Форма, Команда) Экспорт
	
	ОчиститьСообщения();
	
	Приоритеты = Форма.Приоритеты;
	
	НомерПриоритета = Число(Прав(Команда.Имя, СтрДлина(Команда.Имя) - СтрДлина("УстановитьПриоритет_")));
	
	ДанныеПриоритета = Приоритеты[НомерПриоритета];
	
	ПараметрыИзмененияПриоритета = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
	ПараметрыИзмененияПриоритета.Работа    = Форма.Объект.Ссылка;
	ПараметрыИзмененияПриоритета.Приоритет = ДанныеПриоритета.Приоритет;
	
	Результат = ПриоритетыОчередиРаботыВызовСервера.РезультатИзмененияПриоритетаРаботы(ПараметрыИзмененияПриоритета);
	
	Если Результат.Успешно Тогда
	
		Для Каждого ДанныеСтроки Из Приоритеты Цикл
			
			ДанныеСтроки.Установлен = (ДанныеСтроки.Приоритет = ДанныеПриоритета.Приоритет);
			
		КонецЦикла;
		
		ОповеститьОбИзмененииПриоритетаРаботы(ПараметрыИзмененияПриоритета.Работа);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Постановка объектов на контроль'") ,, Результат.Сообщение, БиблиотекаКартинок.Информация32);
	
	ПриоритетыОчередиРаботыКлиентСервер.ОбновитьЭлементыФормыИзменитьПриоритет(Форма, Приоритеты);
	
КонецПроцедуры

// Выполняет команду поставки объекта на контроль из формы списка.
//
// Параметры:
//  Форма   - ФормаКлиентскогоПриложения - форма в которой была выполнена команда.
//  Команда - Команда - выполняемая команда.
//
Процедура ВыполнитьКомандуИзмененияПриоритетаИзФормыСписка(Форма, Команда) Экспорт
	
	ОчиститьСообщения();
	
	Приоритеты = Форма.ПриоритетыСписок;
	
	ДанныеКоманды = СтрРазделить(Команда.Имя, "_", Ложь);
	Если ДанныеКоманды.Количество() < 3 Тогда
		Возврат;
	КонецЕсли;
	
	НомерСписка  = Число(ДанныеКоманды[2]);
	ИмяСписка    = ДанныеКоманды[1];
	ДанныеПриоритета = Приоритеты[НомерСписка];
	
	ДанныеКИзменению = Новый Массив;
	ВыделенныеСтроки = Форма.Элементы[ИмяСписка].ВыделенныеСтроки;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Форма.Элементы[ИмяСписка].ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ТипЗнч(ВыделеннаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка")
			И ЗначениеЗаполнено(ВыделеннаяСтрока)Тогда
			
			ДанныеРаботы = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
			ДанныеРаботы.Работа    = ДанныеСтроки.Ссылка;
			ДанныеРаботы.Приоритет = ДанныеПриоритета.Приоритет;
			
			ДанныеКИзменению.Добавить(ДанныеРаботы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеКИзменению.Количество() > 0 Тогда
		
		Результат = ПриоритетыОчередиРаботыВызовСервера.РезультатИзмененияПриоритетаМассиваРабот(ДанныеКИзменению);
		
		Если Результат.ИзмененПриоритет > 0 Тогда
			ТекстОповещения = СтрШаблон(НСтр("ru = 'Изменен приоритет - %1 из %2'"), Результат.ИзмененПриоритет, Результат.ВсегоОбъектов);
			Форма.Элементы[ИмяСписка].Обновить();
		Иначе
			ТекстОповещения = СтрШаблон(НСтр("ru = 'Ни у одного из объектов не изменен приоритет'"));
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение приоритета'") ,, ТекстОповещения, БиблиотекаКартинок.Информация32);
		
		Для Каждого ДанныеСообщения Из Результат.СообщенияПользователю Цикл
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ДанныеСообщения.ТекстСообщения, ДанныеСообщения.Работа);
			
		КонецЦикла;
		
	Иначе
		
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Не выбраны объекты для изменения приоритета'"));
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение приоритета'") ,, ТекстОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "Проверка перетаскивания" в списке очереди работ.
//
// Параметры:
//  Элемент                 - ТаблицаФормы - список, в котором выполняется перетаскивание.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - .
//  СтандартнаяОбработка    - Булево - признак стандартной обработки события.
//  Строка                  - СправочникСсылка.ЗадачиПроцесса - переносимая работа.
//  Поле                    - ПолеФормы - колонка списка, в которой выполняется перетаскивание.
//
Процедура СписокОчередьПриПроверкеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПереносимойСтроки = Элемент.ТекущиеДанные;
	ДанныеСтрокиНазначения  = Элемент.ДанныеСтроки(Строка);
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
	ИначеЕсли ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
	ИначеЕсли ДанныеПереносимойСтроки.Ссылка = ДанныеСтрокиНазначения.Ссылка Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
	ИначеЕсли ДанныеПереносимойСтроки.ПорядокПриоритета <> ДанныеСтрокиНазначения.ПорядокПриоритета Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
	Иначе
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные для обработки события "Перетаскивание" в списке очереди работ.
//
// Параметры:
//  Элемент                 - ТаблицаФормы - список, в котором выполняется перетаскивание.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - .
//  СтандартнаяОбработка    - Булево - признак стандартной обработки события.
//  Строка                  - СправочникСсылка.ЗадачиПроцесса - переносимая работа.
//  Поле                    - ПолеФормы - колонка списка, в которой выполняется перетаскивание.
//
//
// Возвращаемое значение:
//   Структура   - содержит:
//    * ПеретаскиваниеДопустимо - Булево - признак допустимости перетаскивания.
//    * ДанныеПереносимойСтроки - ДанныеФормыСтруктура - данные переносимой строки.
//    * ДанныеСтрокиНазначения  - ДанныеФормыСтруктура - данные строки назначения.
//
Функция ДанныеПеретаскиванияОчередьЗадач(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	ДанныеПеретаскивания = Новый Структура;
	ДанныеПеретаскивания.Вставить("ПеретаскиваниеДопустимо", Ложь);
	ДанныеПеретаскивания.Вставить("ДанныеПереносимойСтроки", Неопределено);
	ДанныеПеретаскивания.Вставить("ДанныеСтрокиНазначения",  Неопределено);
	
	Если ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать Тогда
		Возврат ДанныеПеретаскивания;
	КонецЕсли;
	
	ДанныеПеретаскивания.ДанныеПереносимойСтроки = Элемент.ТекущиеДанные;
	ДанныеПеретаскивания.ДанныеСтрокиНазначения  = Элемент.ДанныеСтроки(Строка);
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Возврат ДанныеПеретаскивания;
		
	ИначеЕсли ТипЗнч(Строка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Возврат ДанныеПеретаскивания;
	
	ИначеЕсли ТипЗнч(Строка) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		Если ДанныеПеретаскивания.ДанныеПереносимойСтроки.Ссылка = ДанныеПеретаскивания.ДанныеСтрокиНазначения.Ссылка Тогда
		
			Возврат ДанныеПеретаскивания;
			
		ИначеЕсли ДанныеПеретаскивания.ДанныеПереносимойСтроки.ПорядокПриоритета <> ДанныеПеретаскивания.ДанныеСтрокиНазначения.ПорядокПриоритета Тогда
			
			Возврат ДанныеПеретаскивания;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеПеретаскивания.ПеретаскиваниеДопустимо = Истина;
	
	Возврат ДанныеПеретаскивания;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповеститьОбИзмененииПриоритетаРаботы(Работа)
	
	Оповестить("Запись_Приоритет", , Работа);
	
КонецПроцедуры

#КонецОбласти

