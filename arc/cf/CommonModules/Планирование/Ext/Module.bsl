
#Область СлужебныйПрограммныйИнтерфейс

// Заполняет список выбора периодичности плана значениеми перечисления "Периодичность планов"
//
// Параметры:
//  СписокВыбора  - СписокЗначений - заполняемый список выбора
//
Процедура ЗаполнитьСписокВыбораПериодичностиПланов(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	
	МетаданныеПеречисления = Метаданные.Перечисления.ПериодичностьПланов;
	
	Для Каждого ЗначениеПеречисления Из МетаданныеПеречисления.ЗначенияПеречисления Цикл
		
		ЭлементСписка = СписокВыбора.Добавить();
		
		ЭлементСписка.Значение      = Перечисления[МетаданныеПеречисления.Имя][ЗначениеПеречисления.Имя];
		ЭлементСписка.Представление = ЗначениеПеречисления.Синоним;
		
	КонецЦикла;
	
КонецПроцедуры

// Используется регламентным заданием по периодическому созданию планов для действующих видов планов.
//
Процедура ПериодическоеСозданиеПланов() Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПланирование") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СозданиеПланов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Справочники.ВидыПланов.СоздатьПланыПоВидуПланаЕслиНеобходимо(Выборка.Ссылка, НачалоДня(ТекущаяДатаСеанса()), 4);
	
	КонецЦикла;

КонецПроцедуры

// Используется фоновым заданим по получению данных фактически выполненных работ.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * ИдентификаторПлана    - Строка
//  * НачалоПериода         - Дата
//  * КонецПериода          - Дата
//  * НаименованиеВидаПлана - Строка
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеФактическиеВыполненныхРабот(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеФактическиВыполненныхРабот(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по получению данных остатков планируемых работ.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * ИдентификаторПлана                   - Строка
//  * ВидСогласуемогоРесурсаПлановыхРабот  - СправочникСсылка.ВидыСогласуемыхРесурсов
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеОстатковПланируемыхРабот(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеОстатковПланируемыхРабот(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданим по заполнению составляемых планов видами деятельности по статистике.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * НачалоПериода - Дата - начало периода составляемого плана.
//  * КонецПериода  - Дата - конец периода составляемого плана.
//  * Сотрудники  - Массив - сотрудники, для которых составляется план.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеВидовДеятельностиПоСтатистике(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеВидовДеятельностиПоСтатистике(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Выполняет запрос по получению данных состояния и плановой даты выполнения работ.
//
// Параметры:
//  МассивОшибок              - Массив
//  МассивЗадач               - Массив
//  МассивТехническихПроектов - Массив
//
// Возвращаемое значение:
//   РезультатЗапроса 
//
Функция РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок, МассивЗадач, МассивТехническихПроектов, МассивВеток = Неопределено) Экспорт
	
	ТекстЗапроса = "";
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеОшибок();
		
	КонецЕсли;
	
	Если МассивЗадач.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединить();
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеЗадач();
		
	КонецЕсли;
	
	Если МассивТехническихПроектов.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединить();
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеТехническихПроектов();
		
	КонецЕсли;
	
	Если МассивВеток <> Неопределено 
		И МассивВеток.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			
			ТекстЗапроса = ТекстЗапроса + ТекстОбъединить();
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДанныеВеток();
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ошибки",             МассивОшибок);
	Запрос.УстановитьПараметр("ТехническиеПроекты", МассивТехническихПроектов);
	Запрос.УстановитьПараметр("Задачи",             МассивЗадач);
	Запрос.УстановитьПараметр("Ветки",              МассивВеток);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// См. процедуру РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание         = Метаданные.РегламентныеЗадания.СозданиеПланов;
	Настройка.ФункциональнаяОпция         = Метаданные.ФункциональныеОпции.ИспользоватьПланирование;
	Настройка.ДоступноВПодчиненномУзлеРИБ = Ложь;
	
КонецПроцедуры

// Формирует массив статусов работ со сроком выполнения, которые не требуют дальнейшего внимания
//
// Возвращаемое значение:
//   Массив
//
Функция СтатусыНеактивыхРаботСоСрокомВыполнения() Экспорт
	
	МассивСтатусов = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатусов, Перечисления.СтатусыОшибок.СтатусыНеТребуюющиеВнимания());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатусов, Перечисления.СтатусыЗадачПроцессов.СтатусыНеТребуюющиеВнимания());
	
	Возврат МассивСтатусов;
	
КонецФункции

// Используется фоновым заданием по получению данных остатков работ в подборе .
// Параметры:
//  ПараметрыПодготовки  - Структура - содержит:
//  * РаботыПодбор                         - Массив
//  * ВидСогласуемогоРесурсаПлановыхРабот  - СправочникСсылка.ВидыСогласуемыхРесурсов
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеОстатковПодбор(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеОстатковПодбор(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по получению данных подобранных задачи по плану занятости.
// Параметры:
//  ПараметрыПодготовки  - Структура -  содержит:
//  * ДанныеДляПолучения - Массив
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДанныеЗадачПланЗанятости(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДанныеЗадачПланаЗанятости(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Формирует массив видов деятельности по работе с различными типами ошибок
//
// Возвращаемое значение:
//   Массив   - содержит различные виды деятельности, относящиеся к работе с ошибками.
//
Функция ВидыДеятельностиРаботаСОшибками() Экспорт
	
	ВидыДеятельностиРаботаСОшибками = Новый Массив;
	ВидыДеятельностиРаботаСОшибками.Добавить(Константы.ВидДеятельностиДляРаботыСОшибками.Получить());
	ВидыДеятельностиРаботаСОшибками.Добавить(Константы.ВидДеятельностиДляРаботыСОшибкамиАвтотестирования.Получить());
	ВидыДеятельностиРаботаСОшибками.Добавить(Константы.ВидДеятельностиДляРаботыСОшибкамиАудита.Получить());
	
	Возврат ВидыДеятельностиРаботаСОшибками;
	
КонецФункции 

// Конструктор параметров заполнения дерева сотрудников подразделений
//
// Возвращаемое значение:
//   Структура  - содержит:
//  * ЗаполняемоеДерево      - ДеревоЗначений
//  * СписокУчастников       - СписокЗначений
//  * ЭтоДанныеФормы         - Булево
//  * РаботаДляПоискаВПланах - Произвольный
//  * РаботаДляПоискаВПланах - Массив
//
Функция НовыйПараметрыЗаполненияДеревоСотрудниковПодразделений() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполняемоеДерево",      Неопределено);
	ПараметрыЗаполнения.Вставить("СписокУчастников",       Неопределено);
	ПараметрыЗаполнения.Вставить("ЭтоДанныеФормы",         Неопределено);
	ПараметрыЗаполнения.Вставить("РаботаДляПоискаВПланах", Неопределено);
	ПараметрыЗаполнения.Вставить("ИдентификаторыПланов",   Неопределено);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Заполняет дерево сотрудников и подразделений.
// Параметры:
//  ПараметрыЗаполнения  - Структура - см. НовыйПараметрыЗаполненияДеревоСотрудниковПодразделений
//
Процедура ЗаполнитьДеревоСотрудниковПодразделений(ПараметрыЗаполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыЗаполнения.РаботаДляПоискаВПланах) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиПроцесса.Исполнитель КАК Исполнитель
		|ПОМЕСТИТЬ СотрудникиСЗадачамиПоЭтапу
		|ИЗ
		|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|		ПО ИерархияЗадачПроцесса.Родитель = ЗадачиПроцесса.Ссылка
		|ГДЕ
		|	ИерархияЗадачПроцесса.Родитель = &РаботаДляПоискаВПланах
		|	И ЗадачиПроцесса.Исполнитель В(&СписокУчастников)
		|	И ИерархияЗадачПроцесса.Уровень = 0
		|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
		|	И НЕ ЗадачиПроцесса.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Участник,
		|	Пользователи.Подразделение КАК Подразделение,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ЗаписиПлана.ИдентификаторПлана ЕСТЬ NULL
		|					И СотрудникиСЗадачамиПоЭтапу.Исполнитель ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК Выбран
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
		|		ПО (ЗаписиПлана.Сотрудник = Пользователи.Ссылка)
		|			И (ЗаписиПлана.ИдентификаторПлана В (&ИдентификаторыПланов))
		|			И (ЗаписиПлана.Работа = &РаботаДляПоискаВПланах)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СотрудникиСЗадачамиПоЭтапу КАК СотрудникиСЗадачамиПоЭтапу
		|		ПО (СотрудникиСЗадачамиПоЭтапу.Исполнитель = Пользователи.Ссылка)
		|ГДЕ
		|	Пользователи.Ссылка В(&СписокУчастников)
		|
		|СГРУППИРОВАТЬ ПО
		|	Пользователи.Ссылка,
		|	Пользователи.Подразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение.Наименование,
		|	Пользователи.Наименование
		|ИТОГИ ПО
		|	Подразделение";
		
		Запрос.УстановитьПараметр("СписокУчастников",       ПараметрыЗаполнения.СписокУчастников);
		Запрос.УстановитьПараметр("ИдентификаторыПланов",   ПараметрыЗаполнения.ИдентификаторыПланов);
		Запрос.УстановитьПараметр("РаботаДляПоискаВПланах", ПараметрыЗаполнения.РаботаДляПоискаВПланах);
		
	Иначе
		
		ТаблицаУчастников = Новый ТаблицаЗначений;
		ТаблицаУчастников.Колонки.Добавить("Участник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		ТаблицаУчастников.Колонки.Добавить("Выбран",   Новый ОписаниеТипов("Булево"));
		
		Для Каждого ЭлементСписка Из ПараметрыЗаполнения.СписокУчастников Цикл
			
			НоваяСтрока = ТаблицаУчастников.Добавить();
			НоваяСтрока.Участник = ЭлементСписка.Значение;
			НоваяСтрока.Выбран   = ЭлементСписка.Пометка;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	УчастникиПланирования.Участник КАК Участник,
		|	УчастникиПланирования.Выбран   КАК Выбран
		|ПОМЕСТИТЬ УчастникиПланирования
		|ИЗ
		|	&ТаблицаУчастников КАК УчастникиПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчастникиПланирования.Участник КАК Участник,
		|	УчастникиПланирования.Выбран   КАК Выбран,
		|	Пользователи.Подразделение     КАК Подразделение
		|ИЗ
		|	УчастникиПланирования КАК УчастникиПланирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО УчастникиПланирования.Участник = Пользователи.Ссылка
		|УПОРЯДОЧИТЬ ПО
		|	Подразделение,
		|	Пользователи.Наименование
		|ИТОГИ ПО
		|	Подразделение";
		
		Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
		
	КонецЕсли;
	
	ВыборкаПодразделения = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделения.Следующий() Цикл
		
		Если ПараметрыЗаполнения.ЭтоДанныеФормы Тогда
			СтрокаПодразделение = ПараметрыЗаполнения.ЗаполняемоеДерево.ПолучитьЭлементы().Добавить();
		Иначе
			СтрокаПодразделение = ПараметрыЗаполнения.ЗаполняемоеДерево.Строки.Добавить();
		КонецЕсли;
		СтрокаПодразделение.Сотрудник      = ВыборкаПодразделения.Подразделение;
		СтрокаПодразделение.ЭтоГруппировка = Истина;
		
		ВыборкаСотрудники = ВыборкаПодразделения.Выбрать();
		
		ЕстьВыбранные   = Ложь;
		ЕстьНеВыбранные = Ложь;
		
		Пока ВыборкаСотрудники.Следующий() Цикл
			
			Если ПараметрыЗаполнения.ЭтоДанныеФормы Тогда
				НоваяСтрока = СтрокаПодразделение.ПолучитьЭлементы().Добавить();
			Иначе
				НоваяСтрока = СтрокаПодразделение.Строки.Добавить();
			КонецЕсли;
			
			НоваяСтрока.Выбран    = ?(ВыборкаСотрудники.Выбран , 1, 0);
			НоваяСтрока.Сотрудник = ВыборкаСотрудники.Участник;
			
			Если ВыборкаСотрудники.Выбран Тогда
				ЕстьВыбранные = Истина;
			Иначе
				ЕстьНеВыбранные = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьВыбранные
			И ЕстьНеВыбранные Тогда
			
			СтрокаПодразделение.Выбран = 2;
			
		ИначеЕсли ЕстьВыбранные Тогда
			
			СтрокаПодразделение.Выбран = 1;
			
		Иначе
			
			СтрокаПодразделение.Выбран = 0;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Возвращает данные выбранных в дереве сотрудников и подразделений
// 
// Параметры:
//  ПодразделенияСотрудники  - ДеревоЗначений, ДанныеФормыДерево - дерево сотрудников с группировкой по подразделениям
//  ЭтоДанныеФормы           - Булево - признак того, как хранятся данные
//
// Возвращаемое значение:
//   Структура  - содержит:
//  * ВыбранныеСотрудники    - CписокЗначений
//  * ПредставлениеВыбора    - Строка
//
Функция ВыбранныеСотрудникиПоДеревуПодразделенийСотрудников(ПодразделенияСотрудники, ЭтоДанныеФормы) Экспорт
	
	ВыбранныеСотрудники    = Новый СписокЗначений;
	ВыбранныеПодразделения = Новый Массив;
	
	ВыбранноеПодразделение                = Неопределено;
	ВсегоПодразделений                    = 0;
	ВсегоСотрудников                      = 0;
	СотрудниковВНевыбранныхПодразделениях = 0;
	
	ВыбраноПодразделений                         = 0;
	ВыбраноСотрудников                           = 0;
	ВыбраноСотрудниковВНевыбранныхПодразделениях = 0;
	
	Если ЭтоДанныеФормы Тогда
		ЭлементыДерева =  ПодразделенияСотрудники.ПолучитьЭлементы();
	Иначе
		ЭлементыДерева =  ПодразделенияСотрудники.Строки;
	КонецЕсли;
	
	Для Каждого СтрокаПодразделение Из ЭлементыДерева Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодразделение.Сотрудник) Тогда
			ВсегоПодразделений = ВсегоПодразделений + 1;
			Если СтрокаПодразделение.Выбран = 1 Тогда
				ВыбраноПодразделений   = ВыбраноПодразделений + 1;
				ВыбранноеПодразделение = СтрокаПодразделение.Сотрудник;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоДанныеФормы Тогда
			ПодчиненныеСтроки =  СтрокаПодразделение.ПолучитьЭлементы();
		Иначе
			ПодчиненныеСтроки =  СтрокаПодразделение.Строки;
		КонецЕсли;
		
		Для Каждого СтрокаСотрудник Из ПодчиненныеСтроки Цикл
			
			ВсегоСотрудников = ВсегоСотрудников + 1; 

				Если СтрокаПодразделение.Выбран <> 1 
					Или Не ЗначениеЗаполнено(СтрокаПодразделение.Сотрудник) Тогда
					Если СтрокаСотрудник.Выбран = 1 Тогда
						ВыбраноСотрудниковВНевыбранныхПодразделениях = ВыбраноСотрудниковВНевыбранныхПодразделениях + 1;
						
					КонецЕсли;
					СотрудниковВНевыбранныхПодразделениях = СотрудниковВНевыбранныхПодразделениях + 1;
				КонецЕсли; 
				
			Если СтрокаСотрудник.Выбран = 1 Тогда
				ВыбраноСотрудников = ВыбраноСотрудников + 1;
				
			КонецЕсли;
			
			ВыбранныеСотрудники.Добавить(СтрокаСотрудник.Сотрудник, , ?(СтрокаСотрудник.Выбран = 1, 1, 0));
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстПредставления = "";
	
	Если ВсегоПодразделений = 0
		Или ВыбраноПодразделений = 0 Тогда
		
		ТекстПредставления = СтрШаблон(НСтр("ru = 'Выбрано участников %1 из %2'"), ВыбраноСотрудников, ВсегоСотрудников);
		
	ИначеЕсли ВыбраноПодразделений = 1
		И ВыбраноСотрудниковВНевыбранныхПодразделениях = 0 Тогда
		
		ТекстПредставления = СтрШаблон(НСтр("ru = 'Отбор по подразделению - ""%1""'"), Строка(ВыбранноеПодразделение));
		
	Иначе
		
		ТекстПредставления = СтрШаблон(НСтр("ru = 'Выбрано подразделений %1 из %2'"), ВыбраноПодразделений, ВсегоПодразделений);
		Если СотрудниковВНевыбранныхПодразделениях > 0 Тогда
			ТекстПредставления = ТекстПредставления + ", " 
				+ СтрШаблон(НСтр("ru = 'других участников %1 из %2'"), ВыбраноСотрудниковВНевыбранныхПодразделениях, СотрудниковВНевыбранныхПодразделениях);
			КонецЕсли;
			
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВыбранныеСотрудники", ВыбранныеСотрудники);
	СтруктураВозврата.Вставить("ПредставлениеВыбора", ТекстПредставления);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Конструктор дерева подразделений и сотрудников
//
// Возвращаемое значение:
//   Дерево значения  - содержит колонки:
//  * Сотрудник       - СправочникСсылка.Подразделения, СправочникСсылка.Пользователи - 
//  * ЭтоГруппировка  - Булево - 
//  * Выбран          - Булево - 
//
Функция НовыйДеревоПодразделенияСотрудники() Экспорт
	
	МассивТиповСотрудник = Новый Массив;;
	МассивТиповСотрудник.Добавить(Тип("СправочникСсылка.Подразделения"));
	МассивТиповСотрудник.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	ПодразделенияСотрудники = Новый ДеревоЗначений;
	
	ПодразделенияСотрудники.Колонки.Добавить("Сотрудник",      Новый ОписаниеТипов(МассивТиповСотрудник));
	ПодразделенияСотрудники.Колонки.Добавить("ЭтоГруппировка", Новый ОписаниеТипов("Булево"));
	ПодразделенияСотрудники.Колонки.Добавить("Выбран",         Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	Возврат ПодразделенияСотрудники;
	
КонецФункции

// Формирует представление отображаемых участников плана.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой формируется представление.
//  ИмяЭлементаДекорация    - Строка - имя элемента формы, в который будет выведено представление.
//  ПодразделенияСотрудники - ДеревоЗначений - на основании данных которого формируется представление.
//
Процедура СформироватьПредставлениеОтображаемыхУчастниковПланаНаСервере(Форма, ИмяЭлементаДекорация, ПодразделенияСотрудники) Экспорт

	ПараметрыЗаполнения = Планирование.НовыйПараметрыЗаполненияДеревоСотрудниковПодразделений();
	ПараметрыЗаполнения.ЗаполняемоеДерево = ПодразделенияСотрудники;
	ПараметрыЗаполнения.СписокУчастников  = Форма.УчастникиВидаПлана;
	ПараметрыЗаполнения.ЭтоДанныеФормы    = Ложь;
	
	Планирование.ЗаполнитьДеревоСотрудниковПодразделений(ПараметрыЗаполнения);
	ДанныеВыбранныхСотрудников = Планирование.ВыбранныеСотрудникиПоДеревуПодразделенийСотрудников(ПодразделенияСотрудники, Ложь);
	
	Форма.Элементы[ИмяЭлементаДекорация].Заголовок = 
			СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href=""ОткрытьПодборСотрудников"">%1</a>'"), ДанныеВыбранныхСотрудников.ПредставлениеВыбора);
	
КонецПроцедуры

// Используется фоновым заданием по получению дополнительных данных для вывода в план занятости от сотрудника.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * ИдентификаторПлана    - Строка
//  * НачалоПериода         - Дата
//  * КонецПериода          - Дата
//  * НаименованиеВидаПлана - Строка
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДополнительныеДанныеПланыЗанятостиОтСотрудников(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДополнительныеДанныеПланыЗанятостиОтСотрудников(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по получению дополнительных данных для вывода в план занятости от тех. проектов.
// Параметры:
//  ПараметрыПодготовки  - Структура - заполняемый список выбора, содержит:
//  * ИдентификаторПлана    - Строка
//  * НачалоПериода         - Дата
//  * КонецПериода          - Дата
//  * НаименованиеВидаПлана - Строка
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ПодготовитьДополнительныеДанныеПланыЗанятостиОтТехПроектов(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	ПодготовленныеДанныеРабот = ПодготовленныеДополнительныеДанныеПланыЗанятостиОтТехПроектов(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(ПодготовленныеДанныеРабот, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по распределению нераспределенного в плане занятости по сотруднику.
// Параметры:
//  ПараметрыРаспределения  - Структура - заполняемый список выбора, содержит:
//  * ВидПлана                  - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ДатаНачалаПериода         - Дата - начало периода отображаемых планов
//  * Сотрудник                 - СправочникСсылка.Пользователи - сотрудник, для которого выполняется распределение этапов.
//  * РаспределятьНачинаяС      - Дата - начало периода с которого распределяются этапы.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура РаспределитьЭтапыПланаЗанятостиПоНастройкамПриоритетовДляСотрудника(ПараметрыРаспределения, АдресХранилища) Экспорт
	
	РезультатВыполненияРаспределения = РезультатВыполненияРаспределенияЭтаповПланаЗанятостиПоНастройкамПриоритетовДляСотрудника(ПараметрыРаспределения);
	
	ПоместитьВоВременноеХранилище(РезультатВыполненияРаспределения, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по подготовке этапов сотрудника к распределению.
// Параметры:
//  ПараметрыРаспределения  - Структура - заполняемый список выбора, содержит:
//  * ВидПлана                  - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ДатаНачалаПериода         - Дата - начало периода отображаемых планов
//  * Сотрудник                 - СправочникСсылка.Пользователи - сотрудник, для которого выполняется распределение этапов.
//  * РаспределятьНачинаяС      - Дата - начало периода с которого распределяются этапы.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данные
//
Процедура ПодготовитьДанныеЭтаповСотрудникаКРаспределению(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	РезультатПодготовки = ПодготовленныеДанныеЭтаповСотрудникаКРаспределению(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по подготовке видов деятельности сотрудника к изменению.
// Параметры:
//  ПараметрыРаспределения  - Структура - заполняемый список выбора, содержит:
//  * ВидПлана              - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ДатаОкончанияПериода  - Дата - конец периода изменения видов деятельности.
//  * ДатаНачалаПериода     - Дата - начало периода изменения видов деятельности
//  * Сотрудник             - СправочникСсылка.Пользователи - сотрудник, для которого выполняется распределение этапов.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данные
//
Процедура ПодготовитьДанныеВидовДеятельностиСотрудникаКИзменению(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	РезультатПодготовки = ПодготовленныеДанныеВидовДеятельностиСотрудникаКИзменению(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по подготовке видов деятельности сотрудника к изменению.
// Параметры:
//  ПараметрыРаспределения  - Структура - заполняемый список выбора, содержит:
//  * ВидПлана              - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ДатаОкончанияПериода  - Дата - конец периода изменения видов деятельности.
//  * ДатаНачалаПериода     - Дата - начало периода изменения видов деятельности
//  * Сотрудник             - СправочникСсылка.Пользователи - сотрудник, для которого выполняется распределение этапов.
//  * ВидыДеятельности      - Массив, содержит информацию о измеяемых видах деятельности - сотрудник, для которого выполняется распределение этапов.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данные
//
Процедура ИзменитьДанныеВидовДеятельностиСотрудника(ПараметрыИзменения, АдресХранилища) Экспорт
	
	РезультатИзменения = РезультатИзмененияДанныхВидовДеятельностиСотрудникаКИзменению(ПараметрыИзменения);
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по подготовке этапа технического проекта к распределению.
// Параметры:
//  ПараметрыРаспределения  - Структура - заполняемый список выбора, содержит:
//  * ВидПлана                  - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ДатаНачалаПериода         - Дата - начало периода отображаемых планов
//  * Сотрудник                 - СправочникСсылка.Пользователи - сотрудник, для которого выполняется распределение этапов.
//  * РаспределятьНачинаяС      - Дата - начало периода с которого распределяются этапы.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данные
//
Процедура ПодготовитьДанныеЭтапаТехническогоПроектаКРаспределению(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	РезультатПодготовки = ПодготовленныеДанныеЭтапаТехническогоПроектаКРаспределению(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по подготовке дат технического проекта к изменению.
// Параметры:
//  ПараметрыПодготовки  - Структура -  содержит:
//  * ВидПлана                  - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ДатаНачалаПериода         - Дата - начало периода отображаемых планов
//  * ТехническийПроект         - СправочникСсылка.ТехническиеПроекты - техпроект, для которого получаютя плановые даты.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данные
//
Процедура ПодготовитьДанныеДатТехническогоПроектаКИзменению(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	РезультатПодготовки = ПодготовленныеДанныеДатТехническогоПроектаКИзменению(ПараметрыПодготовки);
	
	ПоместитьВоВременноеХранилище(РезультатПодготовки, АдресХранилища);
	
КонецПроцедуры

// Используется фоновым заданием по планированию занятости сотрудников по этапу.
// Параметры:
//  ПараметрыРаспределения  - Структура - заполняемый список выбора, содержит:
//  * Сотрудники                - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ВидПлана                  - СправочникСсылка.ВидыПланов - вид плана, для которого выполняется распределение
//  * ДатаНачалаПериода         - Дата - начало периода отображаемых планов
//  * Этап                      - СправочникСсылка.ЗадачаПроцесса - Этап, для которого выполняется планирование.
//  * РаспределятьНачинаяС      - Дата - начало периода с которого распределяются этапы.
//  АдресХранилища       - Строка - адрес временного хранилища, в которое будут помещены данный фактически выполненных работ
//
Процедура ЗапланироватьСотрудниковПоЭтапуПоНастройкам(ПараметрыПланирования, АдресХранилища) Экспорт
	
	РезультатПланиования = РезультатПланированияСотрудниковДляЭтапаПланаЗанятости(ПараметрыПланирования);
	
	ПоместитьВоВременноеХранилище(РезультатПланиования, АдресХранилища);
	
КонецПроцедуры

// Получает значение технической даты начала непланировавшихся этапов для форм распределения
//
// Параметры:
//  ДатаНачалаПериода  - Дата - дата начала планирования
//
// Возвращаемое значение:
//   Дата - 
//
Функция ДатаНачалаНепланировавшихсяЭтапов(ДатаНачалаПериода) Экспорт

	Возврат ДобавитьМесяц(ДатаНачалаПериода, 36);

КонецФункции

// Получает значение технической даты окончания непланировавшихся этапов для форм распределения
//
// Параметры:
//  ДатаНачалаПериода  - Дата - дата начала планирования
//
// Возвращаемое значение:
//   Дата - 
//
Функция ДатаОкончанияНепланировавшихсяЭтапов(ДатаНачалаПериода) Экспорт

	Возврат ДобавитьМесяц(ДатаНачалаПериода, 36);

КонецФункции

// Устанавливает настройки отбора СКД в плане занятости по переданному списку
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма, для которой выполняется действие.
//  СписокФормы  - СписокЗначений - текущие данные списка в форме.
//  ПереданныйСписок  - СписокЗначений - новое значение отбора в виде списка.
//  ИмяРеквизитаНастройкиОтбора  - Строка - имя реквизита формы, в котором будут сохранены настройки СКД.
//  ИмяСКД  - Строка - имя СКД, по которой формируются настройки.
//  ИмяДекорации  - Строка - имя декорации формы, в которую будет выведено представление настроек.
//  СтрокаКоманды  - Строка - имя команды открытия формы изменения настроек.
//
// Возвращаемое значение:
//   Строка   - полное представление настроек СКД
//
Функция УстановитьНастройкиОтбораСКДПоСписку(Форма, СписокФормы, ПереданныйСписок, ИмяРеквизитаНастройкиОтбора, ИмяСКД, ИмяДекорации, СтрокаКоманды) Экспорт
	
	СписокФормы.Очистить();
	
	Для Каждого ЭлементСписка Из ПереданныйСписок Цикл
		
		Если ЭлементСписка.Пометка Тогда
			СписокФормы.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	СхемаКомпоновки = Обработки.Планирование.ПолучитьМакет(ИмяСКД);
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновки, Форма.УникальныйИдентификатор);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	НастройкиКомпоновки = КомпоновщикНастроек.Настройки;
	
	ЭлементОтбора = НайденныйЭлементОтбораКомпоновкиДанных(НастройкиКомпоновки.Отбор.Элементы, "Ссылка");
	
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ПереданныйСписок;
	ЭлементОтбора.Использование  = Истина;
	
	Форма[ИмяРеквизитаНастройкиОтбора] = НастройкиКомпоновки;
	
	ПредставлениеОтбора = ПредставлениеОтбора(НастройкиКомпоновки.Отбор);
	
	ПланированиеКлиентСервер.ВывестиПредставлениеОткрытьПодбор(Форма, ИмяДекорации, СтрокаКоманды, ПредставлениеОтбора.ПредставлениеСокр);
	
	Возврат ПредставлениеОтбора.ПредставлениеПолное; 
	
КонецФункции

// Получает представление настроек отбора СКД
//
// Параметры:
//  ОтборКомпоновки  - ОтборКомпоновкиДанных -
//
// Возвращаемое значение:
//   Структура  - содержит колонки:
//    * ПредставлениеПолное - Строка - полное представление настроек отбора.
//    * ПредставлениеСокр   - Строка - сокращенное представление настроек отбора для вывода в форму.
//
Функция ПредставлениеОтбора(ОтборКомпоновки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставлениеПолное", "");
	Результат.Вставить("ПредставлениеСокр", "");
	
	ПредставлениеОтбора = Строка(ОтборКомпоновки); 
	Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
		
		Результат.ПредставлениеПолное = ПредставлениеОтбора;
		
		Если СтрДлина(ПредставлениеОтбора) < 80 Тогда
			Результат.ПредставлениеСокр   = ПредставлениеОтбора;
		Иначе
			
			ПредставлениеОтбора          = Лев(ПредставлениеОтбора, 80);
			ПозицияПробела               = СтрНайти(ПредставлениеОтбора, " ", НаправлениеПоиска.СКонца);
			Результат.ПредставлениеСокр  = Лев(ПредставлениеОтбора, ПозицияПробела) + "...";
			
		КонецЕсли;
		
	Иначе
		
		Результат.ПредставлениеСокр   = НСтр("ru = 'Отбор не установлен'");
		Результат.ПредставлениеПолное = НСтр("ru = 'Отбор не установлен'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает настройки отбора по СКД
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения     - форма, для которой выполняется действие.
//  ВидПлана  - СправочникСсылка.ВидыПланов - вид плана, для которого формируется отбор.
//  ДанныеСхемыКомпоновки  - Структура      - содержит данные СКД.
//  ИмяРеквизитаСохраняемыеНастройки        - Строка - имя реквизита формы, в котором сохраняются настройки отбора.
//
// Возвращаемое значение:
//   Структура  - содержит колонки:
//    * ПредставлениеОтбораПолное - Строка - полное представление настроек отбора.
//    * ПредставлениеОтбораСокр   - Строка - сокращенное представление настроек отбора для вывода в форму.
//    * СписокОтбора              - СписокЗначений - список отбора, согласно настройкам.
//
Функция РезультатПолученияОтбораПоСКД(Форма, ВидПлана, ДанныеСхемыКомпоновки, ИмяРеквизитаСохраняемыеНастройки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПредставлениеОтбораСокр",   НСтр("ru = 'Отбор не установлен'"));
	Результат.Вставить("ПредставлениеОтбораПолное", НСтр("ru = 'Отбор не установлен'"));
	Результат.Вставить("СписокОтбора",              Новый СписокЗначений);
	
	СхемаКомпоновкиДанных = Обработки.Планирование.ПолучитьМакет(ДанныеСхемыКомпоновки.ИмяСхемыКомпоновкиДанных);
	
	НастройкиКомпоновки = Неопределено;
	Если ЭтоАдресВременногоХранилища(ДанныеСхемыКомпоновки.АдресХранилищаНастройкиКомпоновщика) Тогда
		НастройкиКомпоновки   =  ПолучитьИзВременногоХранилища(ДанныеСхемыКомпоновки.АдресХранилищаНастройкиКомпоновщика);
		Если Не ТипЗнч(НастройкиКомпоновки) = Тип("НастройкиКомпоновкиДанных") Тогда
			НастройкиКомпоновки = Неопределено;
		ИначеЕсли ПустаяСтрока(НастройкиКомпоновки.Отбор) Тогда
			НастройкиКомпоновки = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Форма[ИмяРеквизитаСохраняемыеНастройки] = НастройкиКомпоновки;
	Если НастройкиКомпоновки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПредставлениеОтбора = ПредставлениеОтбора(НастройкиКомпоновки.Отбор);
	Результат.ПредставлениеОтбораСокр   = ПредставлениеОтбора.ПредставлениеСокр;
	Результат.ПредставлениеОтбораПолное = ПредставлениеОтбора.ПредставлениеПолное;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(),,,
	                                                    Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = МакетКомпоновкиДанных.НаборыДанных[0].Запрос;
	
	Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПланЗанятости", ВидПлана);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Результат.СписокОтбора.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФактическиВыполненныеРаботы

Функция ПодготовленныеДанныеФактическиВыполненныхРабот(ПараметрыПодготовки)
	
	ДанныеДляПолучения                 = ПараметрыПодготовки.ДанныеДляПолученияВыполненныхРабот;
	НачалоПериода                      = НачалоДня(ДанныеДляПолучения.НачалоПериода);
	КонецПериода                       = КонецДня(ДанныеДляПолучения.КонецПериода);
	ИдентификаторПлана                 = ДанныеДляПолучения.ИдентификаторПлана;
	РаботыСотрудников                  = ДанныеДляПолучения.РаботыСотрудников;
	НаименованиеВидаПлана              = ДанныеДляПолучения.НаименованиеВидаПлана;
	
	ДанныеРаботСотрудников = ДанныеРаботСотрудников(РаботыСотрудников);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеФактическиВыполненныхРабот();
	
	Запрос.УстановитьПараметр("НачалоПериода",                      НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",                       КонецПериода);
	Запрос.УстановитьПараметр("Сотрудники",                         ДанныеРаботСотрудников.МассивСотрудников);
	Запрос.УстановитьПараметр("ЗапланированныеРаботы",              ДанныеРаботСотрудников.ТаблицаРаботСотрудников);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеПлана = Новый Структура;
	ДанныеПлана.Вставить("НаименованиеВидаПлана", НаименованиеВидаПлана);
	ДанныеПлана.Вставить("НачалоПериода",         НачалоПериода);
	ДанныеПлана.Вставить("КонецПериода",          КонецПериода);
	
	ПодготовленныеДанные = РезультатПреобразованияДанныхЗапросаДанныхФактическиВыполненныхРабот(РезультатЗапроса[14],
	                                                                                            РезультатЗапроса[13],
	                                                                                            РезультатЗапроса[15],
	                                                                                            ДанныеПлана);
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция НовыйДанныеСотрудникаВыполненныеРаботы()
	
	ДанныеВыполненныеРаботы = Новый Структура;
	ДанныеВыполненныеРаботы.Вставить("Сотрудник",                          Справочники.Пользователи.ПустаяСсылка());
	ДанныеВыполненныеРаботы.Вставить("ПлановыеРаботы",                     Новый Массив);
	ДанныеВыполненныеРаботы.Вставить("ПрочиеРаботы",                       Новый Массив);
	ДанныеВыполненныеРаботы.Вставить("КоличествоВнеплановыхРабот",         0);
	ДанныеВыполненныеРаботы.Вставить("ДлительностьВнеплановыхРабот",       0);
	ДанныеВыполненныеРаботы.Вставить("ОтчетВнеплановыеРаботы",             Неопределено);
	ДанныеВыполненныеРаботы.Вставить("ЕстьВидДеятельностиРаботаСОшибками", Ложь);
		
	Возврат ДанныеВыполненныеРаботы;
	
КонецФункции

Функция РезультатПреобразованияДанныхЗапросаДанныхФактическиВыполненныхРабот(ЗапланированныеРаботы, ПрочиеРаботы, ИерархияЗапланированныхЗадач, ДанныеПлана)
	
	Результат = Новый Массив;
	ВидДеятельностиДляРаботыСОшибками = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	ВсеВидыДеятельностиДляРаботыСОшибками = ВидыДеятельностиРаботаСОшибками();
	ДанныеИерархииЗапланированныхЗадач = ДанныеИерархииЗапланированныхЗадач(ИерархияЗапланированныхЗадач);
	
	ВыборкаПланСотрудники = ЗапланированныеРаботы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПланСотрудники.Следующий() Цикл
		
		ВыборкаПланРаботы = ВыборкаПланСотрудники.Выбрать();
		
		МассивРабот = Новый Массив;
		
		ЕстьВидДеятельностиРаботаСОшибками = Ложь;
		
		Пока ВыборкаПланРаботы.Следующий() Цикл
			
			Если ВыборкаПланРаботы.Работа = ВидДеятельностиДляРаботыСОшибками Тогда
				ЕстьВидДеятельностиРаботаСОшибками = Истина;
			КонецЕсли;
			
			ДанныеРаботы = Новый Структура;
			ДанныеРаботы.Вставить("Работа",       ВыборкаПланРаботы.Работа);
			ДанныеРаботы.Вставить("Длительность", ВыборкаПланРаботы.Длительность);
			
			МассивРабот.Добавить(ДанныеРаботы);
			
		КонецЦикла;
		
		ПодготовитьФактическиеДанныеРодительскихЗадачПоСотруднику(ДанныеИерархииЗапланированныхЗадач,
		                                                          МассивРабот, 
		                                                          ВыборкаПланСотрудники.Сотрудник);
		
		ДанныеСотрудникаПоРаботам = НовыйДанныеСотрудникаВыполненныеРаботы();
		ДанныеСотрудникаПоРаботам.Сотрудник                          = ВыборкаПланСотрудники.Сотрудник;
		ДанныеСотрудникаПоРаботам.ПлановыеРаботы                     = МассивРабот;
		ДанныеСотрудникаПоРаботам.ЕстьВидДеятельностиРаботаСОшибками = ЕстьВидДеятельностиРаботаСОшибками;
		
		Результат.Добавить(ДанныеСотрудникаПоРаботам);
		
	КонецЦикла;
	
	ВыборкаВнеплановыеСотрудники = ПрочиеРаботы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВнеплановыеСотрудники.Следующий() Цикл
		
		ВыборкаВнеплановыеРаботы = ВыборкаВнеплановыеСотрудники.Выбрать();
		
		МассивРабот                  = Новый Массив;
		КоличествоВнеплановыхРабот   = 0;
		ДлительностьВнеплановыхРабот = 0;
		
		СотрудникНайден = Ложь;
		
		Для Каждого ЭлементМассива Из Результат Цикл
			
			Если ЭлементМассива.Сотрудник = ВыборкаВнеплановыеСотрудники.Пользователь Тогда
				
				СотрудникНайден = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДлительностьРаботПоДругимВидамДеятельностиОшибкам = 0;
		
		Пока ВыборкаВнеплановыеРаботы.Следующий() Цикл
			
			Если СотрудникНайден
				И ЭлементМассива.ЕстьВидДеятельностиРаботаСОшибками Тогда
				
				Если ЗначениеЗаполнено(ВыборкаВнеплановыеРаботы.ВидДеятельности) 
					И ВсеВидыДеятельностиДляРаботыСОшибками.Найти(ВыборкаВнеплановыеРаботы.ВидДеятельности) <> Неопределено Тогда
					
					ДлительностьРаботПоДругимВидамДеятельностиОшибкам = ДлительностьРаботПоДругимВидамДеятельностиОшибкам + ВыборкаВнеплановыеРаботы.Длительность;
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеРаботы = Новый Структура;
			ДанныеРаботы.Вставить("ВидДеятельности",   ВыборкаВнеплановыеРаботы.ВидДеятельности);
			ДанныеРаботы.Вставить("ТехническийПроект", ВыборкаВнеплановыеРаботы.ТехническийПроект);
			ДанныеРаботы.Вставить("Ошибка",            ВыборкаВнеплановыеРаботы.Ошибка);
			ДанныеРаботы.Вставить("Задача",            ВыборкаВнеплановыеРаботы.Задача);
			ДанныеРаботы.Вставить("Длительность",      ВыборкаВнеплановыеРаботы.Длительность);
			
			МассивРабот.Добавить(ДанныеРаботы);
			
			КоличествоВнеплановыхРабот   = КоличествоВнеплановыхРабот + 1;
			ДлительностьВнеплановыхРабот = ДлительностьВнеплановыхРабот + ВыборкаВнеплановыеРаботы.Длительность;
			
		КонецЦикла;
		
		Если СотрудникНайден Тогда
			
			Если ДлительностьРаботПоДругимВидамДеятельностиОшибкам <> 0 Тогда
				
				Для Каждого ПлановаяРабота Из ЭлементМассива.ПлановыеРаботы Цикл
					
					Если ПлановаяРабота.Работа = ВидДеятельностиДляРаботыСОшибками Тогда
						
						ПлановаяРабота.Длительность = ПлановаяРабота.Длительность + ДлительностьРаботПоДругимВидамДеятельностиОшибкам;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ЭлементМассива.ПрочиеРаботы                 = МассивРабот;
			ЭлементМассива.КоличествоВнеплановыхРабот   = КоличествоВнеплановыхРабот;
			ЭлементМассива.ДлительностьВнеплановыхРабот = ЧасыПоДлительностиВСекундах(ДлительностьВнеплановыхРабот);
			ЭлементМассива.ОтчетВнеплановыеРаботы       = ПрочиеРаботыВФорматеMXL(ЭлементМассива.ПрочиеРаботы,
			                                                                      ЭлементМассива.Сотрудник,
			                                                                      ДанныеПлана,
			                                                                      ДлительностьВнеплановыхРабот);
		
		Иначе
			
			ДанныеСотрудникаПоРаботам = НовыйДанныеСотрудникаВыполненныеРаботы();
			ДанныеСотрудникаПоРаботам.Сотрудник                    = ВыборкаВнеплановыеСотрудники.Пользователь;
			ДанныеСотрудникаПоРаботам.ПрочиеРаботы                 = МассивРабот;
			ДанныеСотрудникаПоРаботам.КоличествоВнеплановыхРабот   = КоличествоВнеплановыхРабот;
			ДанныеСотрудникаПоРаботам.ДлительностьВнеплановыхРабот = ЧасыПоДлительностиВСекундах(ДлительностьВнеплановыхРабот);
			ДанныеСотрудникаПоРаботам.ОтчетВнеплановыеРаботы       = ПрочиеРаботыВФорматеMXL(ДанныеСотрудникаПоРаботам.ПрочиеРаботы,
			                                                                                 ДанныеСотрудникаПоРаботам.Сотрудник, 
			                                                                                 ДанныеПлана,
			                                                                                 ДлительностьВнеплановыхРабот);
			
			Результат.Добавить(ДанныеСотрудникаПоРаботам);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработанныеДанныеДляПрочихРаботФорматеMXL(ПрочиеРаботы);
	
	ОбработанныеДанныеДляПрочихРаботФорматеMXL = НовыйОбработанныеДанныеДляПрочихРаботФорматеMXL();
	
	МассивОшибок              = Новый Массив;
	МассивЗадач               = Новый Массив;
	МассивТехническихПроектов = Новый Массив;
	
	Для Каждого СтрокаРабота Из ПрочиеРаботы Цикл
		
		Если ЗначениеЗаполнено(СтрокаРабота.Задача) Тогда
			
			МассивЗадач.Добавить(СтрокаРабота.Задача);
			
			ДанныеРаботы = НовыйДанныеВнеплановойРаботыСотрудника();
			ДанныеРаботы.Работа       = СтрокаРабота.Задача;
			ДанныеРаботы.Длительность = СтрокаРабота.Длительность;
			
			Если ЗначениеЗаполнено(СтрокаРабота.ТехническийПроект) Тогда
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("Работа", СтрокаРабота.ТехническийПроект);
				ДанныеТехническогоПроекта = 
					ПланированиеКлиентСервер.НайденныйЭлементМассиваПоКлючуСтруктуры(ОбработанныеДанныеДляПрочихРаботФорматеMXL.ЗадачиТехническихПроектов, ПараметрыПоиска);
				
				Если ДанныеТехническогоПроекта = Неопределено Тогда
					
					ДанныеТехническогоПроекта = НовыйДанныеВнеплановойРаботыСотрудника();
					ДанныеТехническогоПроекта.Работа = СтрокаРабота.ТехническийПроект;
					ДанныеТехническогоПроекта.Вставить("Работы", Новый Массив);
					
					ОбработанныеДанныеДляПрочихРаботФорматеMXL.ЗадачиТехническихПроектов.Добавить(ДанныеТехническогоПроекта);
					МассивТехническихПроектов.Добавить(СтрокаРабота.ТехническийПроект);
					
				КонецЕсли;
				
				ДанныеТехническогоПроекта.Работы.Добавить(ДанныеРаботы);
				ДанныеТехническогоПроекта.Длительность = ДанныеТехническогоПроекта.Длительность + ДанныеРаботы.Длительность;
				
			Иначе
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.НеПроектныеЗадачи.Добавить(ДанныеРаботы);
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРабота.ТехническийПроект)
			И Не ЗначениеЗаполнено(СтрокаРабота.Ошибка) Тогда
			
			ДанныеТехническогоПроекта = ОбработанныеДанныеДляПрочихРаботФорматеMXL.ТолькоТехническиеПроекты.Найти(СтрокаРабота.ТехническийПроект);
			
			Если ДанныеТехническогоПроекта = Неопределено Тогда
				
				ДанныеТехническогоПроекта = НовыйДанныеВнеплановойРаботыСотрудника();
				ДанныеТехническогоПроекта.Работа       = СтрокаРабота.ТехническийПроект;
				ДанныеТехническогоПроекта.Длительность = СтрокаРабота.Длительность;
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.ТолькоТехническиеПроекты.Добавить(ДанныеТехническогоПроекта);
				
			Иначе
				
				ДанныеТехническогоПроекта.Длительность = ДанныеТехническогоПроекта.Длительность + СтрокаРабота.Длительность;
				
			КонецЕсли;
			
			МассивТехническихПроектов.Добавить(СтрокаРабота.ТехническийПроект);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРабота.Ошибка) Тогда
			
			ДанныеОшибки = ОбработанныеДанныеДляПрочихРаботФорматеMXL.Ошибки.Найти(СтрокаРабота.Ошибка);
			
			Если ДанныеОшибки = Неопределено Тогда
				
				ДанныеОшибки = НовыйДанныеВнеплановойРаботыСотрудника();
				ДанныеОшибки.Работа       = СтрокаРабота.Ошибка;
				ДанныеОшибки.Длительность = СтрокаРабота.Длительность;
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.Ошибки.Добавить(ДанныеОшибки);
				
			Иначе
				
				ДанныеОшибки.Длительность = ДанныеОшибки.Длительность + СтрокаРабота.Длительность;
				
			КонецЕсли;
			
			МассивОшибок.Добавить(СтрокаРабота.Ошибка);
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаРабота.ВидДеятельности) Тогда
			
			ДанныеВидаДеятельности = ОбработанныеДанныеДляПрочихРаботФорматеMXL.ВидыДеятельности.Найти(СтрокаРабота.ВидДеятельности);
			
			Если ДанныеВидаДеятельности = Неопределено Тогда
				
				ДанныеВидаДеятельности = НовыйДанныеВнеплановойРаботыСотрудника();
				ДанныеВидаДеятельности.Работа       = СтрокаРабота.ВидДеятельности;
				ДанныеВидаДеятельности.Длительность = СтрокаРабота.Длительность;
				
				ОбработанныеДанныеДляПрочихРаботФорматеMXL.ВидыДеятельности.Добавить(ДанныеВидаДеятельности);
				
			Иначе
				
				ДанныеВидаДеятельности.Длительность = ДанныеВидаДеятельности.Длительность + СтрокаРабота.Длительность;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса = РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок, МассивЗадач, МассивТехническихПроектов);
	ДозаполнитьСостоянияРаботВДанныхВнеплановыхРабот(РезультатЗапроса, ОбработанныеДанныеДляПрочихРаботФорматеMXL);
	
	Возврат ОбработанныеДанныеДляПрочихРаботФорматеMXL;
	
КонецФункции

Процедура ДозаполнитьСостоянияРаботВДанныхВнеплановыхРабот(РезультатЗапроса, ОбработанныеДанныеДляПрочихРаботФорматеMXL)
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеРабот = Новый Соответствие;
	
	ВыборкаСостояния = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаСостояния.Следующий() Цикл
		
		ДанныеСостояния = Новый Структура;
		ДанныеСостояния.Вставить("ВыполнитьК",    Формат(ВыборкаСостояния.СрокВыполнения, "ДЛФ=D"));
		ДанныеСостояния.Вставить("Представление", ВыборкаСостояния.Представление);
		ДанныеСостояния.Вставить("Состояние",     СтрШаблон(НСтр("ru = '%1, %2'"),
		                                                    ВыборкаСостояния.ПредставлениеСтатуса, 
		                                                    Формат(ВыборкаСостояния.ДатаИзмененияСтатуса, "ДЛФ=D; ДП=-")));
		
		СоответствиеРабот.Вставить(ВыборкаСостояния.Ссылка, ДанныеСостояния);
		
	КонецЦикла;
	
	Для Каждого ДанныеТехническогоПроекта Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.ЗадачиТехническихПроектов Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеТехническогоПроекта.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеТехническогоПроекта.Состояние     = ДанныеРаботы.Состояние;
			ДанныеТехническогоПроекта.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеТехническогоПроекта.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
		Для Каждого ДанныеЗадачи Из ДанныеТехническогоПроекта.Работы Цикл
			
			ДанныеРаботы = СоответствиеРабот.Получить(ДанныеЗадачи.Работа);
			
			Если ДанныеРаботы <> Неопределено Тогда
				ДанныеЗадачи.Состояние     = ДанныеРаботы.Состояние;
				ДанныеЗадачи.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
				ДанныеЗадачи.Представление = ДанныеРаботы.Представление;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ДанныеТехническогоПроекта Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.ТолькоТехническиеПроекты Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеТехническогоПроекта.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеТехническогоПроекта.Состояние     = ДанныеРаботы.Состояние;
			ДанныеТехническогоПроекта.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеТехническогоПроекта.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеОшибки Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.Ошибки Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеОшибки.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеОшибки.Состояние     = ДанныеРаботы.Состояние;
			ДанныеОшибки.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеОшибки.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеЗадачи Из ОбработанныеДанныеДляПрочихРаботФорматеMXL.НеПроектныеЗадачи Цикл
		
		ДанныеРаботы = СоответствиеРабот.Получить(ДанныеЗадачи.Работа);
		
		Если ДанныеРаботы <> Неопределено Тогда
			ДанныеЗадачи.Состояние     = ДанныеРаботы.Состояние;
			ДанныеЗадачи.ВыполнитьК    = ДанныеРаботы.ВыполнитьК;
			ДанныеЗадачи.Представление = ДанныеРаботы.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйДанныеВнеплановойРаботыСотрудника()
	
	Данные = Новый Структура;
	Данные.Вставить("Работа");
	Данные.Вставить("Длительность", 0);
	Данные.Вставить("Состояние");
	Данные.Вставить("ВыполнитьК");
	Данные.Вставить("Представление");
	
	Возврат Данные;
	
КонецФункции

Функция ПрочиеРаботыВФорматеMXL(ПрочиеРаботы, Сотрудник, ДанныеПлана, ОбщаяДлительность)
	
	Макет = Обработки.Планирование.ПолучитьМакет("ПрочиеРаботы");
	
#Область ОбластиМакета
	
	ОбластиМакета = Новый Структура;
	ОбластиМакета.Вставить("ЗаголовокРаботыСотрудника", Макет.ПолучитьОбласть("ЗаголовокРаботыСотрудника"));
	ОбластиМакета.Вставить("ЗаголовокПериодВидПлана",   Макет.ПолучитьОбласть("ЗаголовокПериодВидПлана"));
	ОбластиМакета.Вставить("ШапкаТаблицы",              Макет.ПолучитьОбласть("ШапкаТаблицы"));
	ОбластиМакета.Вставить("СтрокаРабота",              Макет.ПолучитьОбласть("СтрокаРабота"));
	ОбластиМакета.Вставить("СтрокаГруппировка",         Макет.ПолучитьОбласть("СтрокаГруппировка"));
	ОбластиМакета.Вставить("СтрокаВидДеятельности",     Макет.ПолучитьОбласть("СтрокаВидДеятельности"));
	ОбластиМакета.Вставить("ПустаяСтрока",              Макет.ПолучитьОбласть("ПустаяСтрока"));
	
#КонецОбласти
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(ОбластиМакета.ПустаяСтрока);
	
	ОбластиМакета.ЗаголовокРаботыСотрудника.Параметры.Заголовок = СтрШаблон(НСтр("ru = 'Прочие работы сотрудника %1'"), Сотрудник);
	ТабличныйДокумент.Вывести(ОбластиМакета.ЗаголовокРаботыСотрудника);
	
	ОбластиМакета.ЗаголовокПериодВидПлана.Параметры.Заголовок =  СтрШаблон(НСтр("ru = 'за период %1 - %2 по виду планов ""%3"".'"), 
	                                                                       Формат(ДанныеПлана.НачалоПериода, "ДЛФ=D"),
	                                                                       Формат(ДанныеПлана.КонецПериода, "ДЛФ=D"),
	                                                                       ДанныеПлана.НаименованиеВидаПлана);
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ЗаголовокПериодВидПлана);
	
	ОбработанныеДанные = ОбработанныеДанныеДляПрочихРаботФорматеMXL(ПрочиеРаботы);
	
	ТабличныйДокумент.Вывести(ОбластиМакета.ПустаяСтрока);
	
	ОбластиМакета.ШапкаТаблицы.Параметры.ВсегоВнеплановыеРаботы = ЧасыПоДлительностиВСекундах(ОбщаяДлительность);
	ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаТаблицы);
	
	ВывестиВнеплановыеРаботыТолькоТехническиеПроекты(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыТехническиеПроектыЗадачи(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыПрочиеЗадачи(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыОшибки(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	ВывестиВнеплановыеРаботыВидыДеятельности(ТабличныйДокумент, ОбластиМакета, ОбработанныеДанные);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиВнеплановыеРаботыТолькоТехническиеПроекты(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Для Каждого ДанныеТехническогоПроекта Из Данные.ТолькоТехническиеПроекты Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = ДанныеТехническогоПроекта.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеТехническогоПроекта.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеТехническогоПроекта.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеТехническогоПроекта.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеТехническогоПроекта.Работа;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыТехническиеПроектыЗадачи(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Для Каждого ДанныеТехническогоПроекта Из Данные.ЗадачиТехническихПроектов Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = ДанныеТехническогоПроекта.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеТехническогоПроекта.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеТехническогоПроекта.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеТехническогоПроекта.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеТехническогоПроекта.Работа;
		
		ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы; 
		ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
		Для Каждого ДанныеЗадачи Из ДанныеТехническогоПроекта.Работы Цикл
			
			ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
			ПараметрыОбласти.Работа          = "   " + ДанныеЗадачи.Представление;
			ПараметрыОбласти.СостояниеРаботы = ДанныеЗадачи.Состояние;
			ПараметрыОбласти.СрокВыполнения  = ДанныеЗадачи.ВыполнитьК;
			ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеЗадачи.Длительность), "ЧРД=.");
			ПараметрыОбласти.РаботаСсылка    = ДанныеЗадачи.Работа;
			
			ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы; 
			ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.ЦветФонаВнеплановойРаботы;
			
			ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыПрочиеЗадачи(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Если Данные.НеПроектныеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ОбластиМакета.СтрокаГруппировка.Параметры;
	ПараметрыОбласти.ИмяГруппировки  = НСтр("ru = 'Прочие задачи'");
	ПараметрыОбласти.ВсегоЧасы       = ОбщаяДлительностьПоМассивуРабот(Данные.НеПроектныеЗадачи);
	ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаГруппировка);
	
	Для Каждого ДанныеЗадачи Из Данные.НеПроектныеЗадачи Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = "   " + ДанныеЗадачи.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеЗадачи.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеЗадачи.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеЗадачи.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеЗадачи.Работа;
		
		ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы;
		ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.ЦветФонаВнеплановойРаботы;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыОшибки(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Если Данные.Ошибки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ОбластиМакета.СтрокаГруппировка.Параметры;
	ПараметрыОбласти.ИмяГруппировки  = НСтр("ru = 'Ошибки'");
	ПараметрыОбласти.ВсегоЧасы       = ОбщаяДлительностьПоМассивуРабот(Данные.Ошибки);
	ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаГруппировка);
	
	Для Каждого ДанныеОшибки Из Данные.Ошибки Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаРабота.Параметры;
		ПараметрыОбласти.Работа          = "   " + ДанныеОшибки.Представление;
		ПараметрыОбласти.СостояниеРаботы = ДанныеОшибки.Состояние;
		ПараметрыОбласти.СрокВыполнения  = ДанныеОшибки.ВыполнитьК;
		ПараметрыОбласти.Часы            = Формат(ЧасыПоДлительностиВСекундах(ДанныеОшибки.Длительность), "ЧРД=.");
		ПараметрыОбласти.РаботаСсылка    = ДанныеОшибки.Работа;
		
		ОбластьСтрокаТаблицы          = ОбластиМакета.СтрокаРабота.Области.ДанныеРаботы;
		ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.ЦветФонаВнеплановойРаботы;
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаРабота);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВнеплановыеРаботыВидыДеятельности(ТабличныйДокумент, ОбластиМакета, Данные)
	
	Если Данные.ВидыДеятельности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ОбластиМакета.СтрокаГруппировка.Параметры;
	ПараметрыОбласти.ИмяГруппировки  = НСтр("ru = 'Виды деятельности'");
	ПараметрыОбласти.ВсегоЧасы       = ОбщаяДлительностьПоМассивуРабот(Данные.ВидыДеятельности);
	ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаГруппировка);
	
	Для Каждого ДанныеВидаДеятельности Из Данные.ВидыДеятельности Цикл
		
		ПараметрыОбласти = ОбластиМакета.СтрокаВидДеятельности.Параметры;
		ПараметрыОбласти.Работа = "   " + Строка(ДанныеВидаДеятельности.Работа);
		ПараметрыОбласти.Часы   = Формат(ЧасыПоДлительностиВСекундах(ДанныеВидаДеятельности.Длительность), "ЧРД=.");
		
		ТабличныйДокумент.Вывести(ОбластиМакета.СтрокаВидДеятельности);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбщаяДлительностьПоМассивуРабот(МассивРабот)
	
	ОбщаяДлительность = 0;
	
	Для Каждого Работа Из МассивРабот Цикл
		
		ОбщаяДлительность = Работа.Длительность + ОбщаяДлительность;
		
	КонецЦикла;
	
	Возврат ЧасыПоДлительностиВСекундах(ОбщаяДлительность);
	
КонецФункции

Функция НовыйОбработанныеДанныеДляПрочихРаботФорматеMXL()
	
	Данные = Новый Структура;
	Данные.Вставить("ТолькоТехническиеПроекты",  Новый Массив);
	Данные.Вставить("ЗадачиТехническихПроектов", Новый Массив);
	Данные.Вставить("НеПроектныеЗадачи",         Новый Массив);
	Данные.Вставить("Ошибки",                    Новый Массив);
	Данные.Вставить("ВидыДеятельности",          Новый Массив);
	
	Возврат Данные;
	
КонецФункции

Функция ТекстЗапросаДанныеФактическиВыполненныхРабот()
	
	Возврат "
	|ВЫБРАТЬ
	|	ЗапланированныеРаботы.Сотрудник КАК Сотрудник,
	|	ЗапланированныеРаботы.Работа    КАК Работа
	|ПОМЕСТИТЬ ЗапланированныеРаботы
	|ИЗ
	|	&ЗапланированныеРаботы КАК ЗапланированныеРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	УчетВремени.Пользователь      КАК Пользователь,
	|	УчетВремени.ВидДеятельности   КАК ВидДеятельности,
	|	УчетВремени.Проект            КАК Проект,
	|	УчетВремени.ТехническийПроект КАК ТехническийПроект,
	|	УчетВремени.Ошибка            КАК Ошибка,
	|	УчетВремени.Задача            КАК Задача,
	|	УчетВремени.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремени
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|ГДЕ
	|	УчетВремени.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УчетВремени.Пользователь В(&Сотрудники)
	|	И УчетВремени.ВидДеятельности.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.НеРабочее)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЗапланированныеРаботы.Сотрудник      КАК Сотрудник,
	|	ЗапланированныеРаботы.Работа         КАК Работа,
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ДочерняяЗадачаРаботы
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	ЗапланированныеРаботы КАК ЗапланированныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗапланированныеРаботы.Работа = ИерархияЗадачПроцесса.Родитель
	|ГДЕ
	|	ЗапланированныеРаботы.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	СУММА(ДанныеУчетаВремени.Длительность) КАК Длительность,
	|	ДочерниеЗадачиРабот.Сотрудник          КАК Сотрудник,
	|	ДочерниеЗадачиРабот.Работа             КАК Работа
	|ПОМЕСТИТЬ ФактическиеДанныеРаботЗадач
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|		ПО ДочерниеЗадачиРабот.ДочерняяЗадачаРаботы = ДанныеУчетаВремени.Задача
	|			И ДочерниеЗадачиРабот.Сотрудник = ДанныеУчетаВремени.Пользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Сотрудник,
	|	ДочерниеЗадачиРабот.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ЗапланированныеРаботы.Сотрудник КАК Сотрудник,
	|	ЗапланированныеРаботы.Работа    КАК Работа
	|ПОМЕСТИТЬ РаботыПослеОпределенияЗадач
	|ИЗ
	|	ЗапланированныеРаботы КАК ЗапланированныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботЗадач КАК ФактическиеДанныеРаботЗадач
	|		ПО ЗапланированныеРаботы.Сотрудник = ФактическиеДанныеРаботЗадач.Сотрудник
	|			И ЗапланированныеРаботы.Работа = ФактическиеДанныеРаботЗадач.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботЗадач.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ДанныеУчетаВремени.Пользователь      КАК Пользователь,
	|	ДанныеУчетаВремени.ВидДеятельности   КАК ВидДеятельности,
	|	ДанныеУчетаВремени.Проект            КАК Проект,
	|	ДанныеУчетаВремени.ТехническийПроект КАК ТехническийПроект,
	|	ДанныеУчетаВремени.Ошибка            КАК Ошибка,
	|	ДанныеУчетаВремени.Задача            КАК Задача,
	|	ДанныеУчетаВремени.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремениПослеОпределенияЗадач
	|ИЗ
	|	ДанныеУчетаВремени КАК ДанныеУчетаВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ПО ДанныеУчетаВремени.Пользователь = ДочерниеЗадачиРабот.Сотрудник
	|			И ДанныеУчетаВремени.Задача = ДочерниеЗадачиРабот.ДочерняяЗадачаРаботы
	|ГДЕ
	|	ДочерниеЗадачиРабот.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияЗадач.Сотрудник                       КАК Сотрудник,
	|	РаботыПослеОпределенияЗадач.Работа                          КАК Работа,
	|	СУММА(ДанныеУчетаВремениПослеОпределенияЗадач.Длительность) КАК Длительность
	|ПОМЕСТИТЬ ФактическиеДанныеРаботТехническихПроектов
	|ИЗ
	|	РаботыПослеОпределенияЗадач КАК РаботыПослеОпределенияЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремениПослеОпределенияЗадач КАК ДанныеУчетаВремениПослеОпределенияЗадач
	|		ПО РаботыПослеОпределенияЗадач.Сотрудник = ДанныеУчетаВремениПослеОпределенияЗадач.Пользователь
	|			И РаботыПослеОпределенияЗадач.Работа = ДанныеУчетаВремениПослеОпределенияЗадач.ТехническийПроект
	|ГДЕ
	|	РаботыПослеОпределенияЗадач.Работа ССЫЛКА Справочник.ТехническиеПроекты
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботыПослеОпределенияЗадач.Сотрудник,
	|	РаботыПослеОпределенияЗадач.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////7
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияЗадач.Сотрудник КАК Сотрудник,
	|	РаботыПослеОпределенияЗадач.Работа    КАК Работа
	|ПОМЕСТИТЬ РаботыПослеОпределенияТехническихПроектов
	|ИЗ
	|	РаботыПослеОпределенияЗадач КАК РаботыПослеОпределенияЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботТехническихПроектов КАК ФактическиеДанныеРаботТехническихПроектов
	|		ПО РаботыПослеОпределенияЗадач.Сотрудник = ФактическиеДанныеРаботТехническихПроектов.Сотрудник
	|			И РаботыПослеОпределенияЗадач.Работа = ФактическиеДанныеРаботТехническихПроектов.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботТехническихПроектов.Сотрудник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////8
	|ВЫБРАТЬ
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Пользователь      КАК Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.ВидДеятельности   КАК ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Проект            КАК Проект,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.ТехническийПроект КАК ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Ошибка            КАК Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Задача            КАК Задача,
	|	ДанныеУчетаВремениПослеОпределенияЗадач.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремениПослеОпределенияТехническихПроектов
	|ИЗ
	|	ДанныеУчетаВремениПослеОпределенияЗадач КАК ДанныеУчетаВремениПослеОпределенияЗадач
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботТехническихПроектов КАК ФактическиеДанныеРаботТехническихПроектов
	|		ПО ДанныеУчетаВремениПослеОпределенияЗадач.Пользователь = ФактическиеДанныеРаботТехническихПроектов.Сотрудник
	|			И ДанныеУчетаВремениПослеОпределенияЗадач.ТехническийПроект = ФактическиеДанныеРаботТехническихПроектов.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботТехническихПроектов.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////9
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияТехническихПроектов.Сотрудник                       КАК Сотрудник,
	|	РаботыПослеОпределенияТехническихПроектов.Работа                          КАК Работа,
	|	СУММА(ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Длительность) КАК Длительность
	|ПОМЕСТИТЬ ФактическиеДанныеРаботОшибки
	|ИЗ
	|	РаботыПослеОпределенияТехническихПроектов КАК РаботыПослеОпределенияТехническихПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремениПослеОпределенияТехническихПроектов КАК ДанныеУчетаВремениПослеОпределенияТехническихПроектов
	|		ПО РаботыПослеОпределенияТехническихПроектов.Сотрудник = ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Пользователь
	|			И РаботыПослеОпределенияТехническихПроектов.Работа = ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Ошибка
	|ГДЕ
	|	РаботыПослеОпределенияТехническихПроектов.Работа ССЫЛКА Справочник.Ошибки
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботыПослеОпределенияТехническихПроектов.Сотрудник,
	|	РаботыПослеОпределенияТехническихПроектов.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////10
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияТехническихПроектов.Сотрудник КАК Сотрудник,
	|	РаботыПослеОпределенияТехническихПроектов.Работа    КАК Работа
	|ПОМЕСТИТЬ РаботыПослеОпределенияОшибок
	|ИЗ
	|	РаботыПослеОпределенияТехническихПроектов КАК РаботыПослеОпределенияТехническихПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботОшибки КАК ФактическиеДанныеРаботОшибки
	|		ПО РаботыПослеОпределенияТехническихПроектов.Сотрудник = ФактическиеДанныеРаботОшибки.Сотрудник
	|			И РаботыПослеОпределенияТехническихПроектов.Работа = ФактическиеДанныеРаботОшибки.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботОшибки.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////11
	|ВЫБРАТЬ
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Пользователь      КАК Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.ВидДеятельности   КАК ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Проект            КАК Проект,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.ТехническийПроект КАК ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Ошибка            КАК Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Задача            КАК Задача,
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Длительность      КАК Длительность
	|ПОМЕСТИТЬ ДанныеУчетаВремениПослеОпределенияОшибок
	|ИЗ
	|	ДанныеУчетаВремениПослеОпределенияТехническихПроектов КАК ДанныеУчетаВремениПослеОпределенияТехническихПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботОшибки КАК ФактическиеДанныеРаботОшибки
	|		ПО ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Пользователь = ФактическиеДанныеРаботОшибки.Сотрудник
	|			И ДанныеУчетаВремениПослеОпределенияТехническихПроектов.Ошибка = ФактическиеДанныеРаботОшибки.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботОшибки.Работа ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////12
	|ВЫБРАТЬ
	|	РаботыПослеОпределенияОшибок.Сотрудник                КАК Сотрудник,
	|	РаботыПослеОпределенияОшибок.Работа                   КАК Работа,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Длительность КАК Длительность
	|ПОМЕСТИТЬ ФактическиеДанныеРаботВидовДеятельности
	|ИЗ
	|	РаботыПослеОпределенияОшибок КАК РаботыПослеОпределенияОшибок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеУчетаВремениПослеОпределенияОшибок КАК ДанныеУчетаВремениПослеОпределенияОшибок
	|		ПО РаботыПослеОпределенияОшибок.Сотрудник = ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь
	|			И РаботыПослеОпределенияОшибок.Работа = ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////13
	|ВЫБРАТЬ
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь        КАК Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности     КАК ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Проект              КАК Проект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ТехническийПроект   КАК ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Ошибка              КАК Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Задача              КАК Задача,
	|	СУММА(ДанныеУчетаВремениПослеОпределенияОшибок.Длительность) КАК Длительность
	|ИЗ
	|	ДанныеУчетаВремениПослеОпределенияОшибок КАК ДанныеУчетаВремениПослеОпределенияОшибок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеДанныеРаботВидовДеятельности КАК ФактическиеДанныеРаботВидовДеятельности
	|		ПО ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь = ФактическиеДанныеРаботВидовДеятельности.Сотрудник
	|			И ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности = ФактическиеДанныеРаботВидовДеятельности.Работа
	|ГДЕ
	|	ФактическиеДанныеРаботВидовДеятельности.Работа ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Пользователь,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ВидДеятельности,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Проект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.ТехническийПроект,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Ошибка,
	|	ДанныеУчетаВремениПослеОпределенияОшибок.Задача
	|ИТОГИ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////14
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	|	ВложенныйЗапрос.Работа КАК Работа,
	|	СУММА(ВложенныйЗапрос.Длительность) КАК Длительность
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФактическиеДанныеРаботЗадач.Длительность КАК Длительность,
	|		ФактическиеДанныеРаботЗадач.Сотрудник КАК Сотрудник,
	|		ФактическиеДанныеРаботЗадач.Работа КАК Работа
	|	ИЗ
	|		ФактическиеДанныеРаботЗадач КАК ФактическиеДанныеРаботЗадач
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФактическиеДанныеРаботТехническихПроектов.Длительность,
	|		ФактическиеДанныеРаботТехническихПроектов.Сотрудник,
	|		ФактическиеДанныеРаботТехническихПроектов.Работа
	|	ИЗ
	|		ФактическиеДанныеРаботТехническихПроектов КАК ФактическиеДанныеРаботТехническихПроектов
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ФактическиеДанныеРаботОшибки.Длительность,
	|		ФактическиеДанныеРаботОшибки.Сотрудник,
	|		ФактическиеДанныеРаботОшибки.Работа
	|	ИЗ
	|		ФактическиеДанныеРаботОшибки КАК ФактическиеДанныеРаботОшибки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФактическиеДанныеРаботВидовДеятельности.Длительность,
	|		ФактическиеДанныеРаботВидовДеятельности.Сотрудник,
	|		ФактическиеДанныеРаботВидовДеятельности.Работа
	|	ИЗ
	|		ФактическиеДанныеРаботВидовДеятельности КАК ФактическиеДанныеРаботВидовДеятельности) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Сотрудник,
	|	ВложенныйЗапрос.Работа
	|ИТОГИ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////15
	|ВЫБРАТЬ
	|	ДочерниеЗадачиРабот.Сотрудник            КАК Сотрудник,
	|	ДочерниеЗадачиРабот.Работа               КАК Работа,
	|	ДочерниеЗадачиРабот.ДочерняяЗадачаРаботы КАК ДочерняяЗадачаРаботы
	|ИЗ ДочерниеЗадачиРабот
	|ИТОГИ ПО
	|	Сотрудник,
	|	Работа
	|";
	
КонецФункции

Функция ДанныеРаботСотрудников(РаботыСотрудников)
	
	МассивСотрудников = Новый Массив;
	
	ТаблицаРаботСотрудников = Новый ТаблицаЗначений;
	ТаблицаРаботСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаРаботСотрудников.Колонки.Добавить("Работа", Метаданные.РегистрыСведений.ЗаписиПлана.Измерения.Работа.Тип);
	
	Для Каждого ДанныеРаботСотрудника Из РаботыСотрудников Цикл
		
		МассивСотрудников.Добавить(ДанныеРаботСотрудника.Сотрудник);
		
		Для Каждого Работа Из ДанныеРаботСотрудника.Работы Цикл
			
			НоваяСтрока = ТаблицаРаботСотрудников.Добавить();
			
			НоваяСтрока.Сотрудник = ДанныеРаботСотрудника.Сотрудник;
			НоваяСтрока.Работа    = Работа;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеРаботСотрудников = Новый Структура;
	ДанныеРаботСотрудников.Вставить("ТаблицаРаботСотрудников", ТаблицаРаботСотрудников);
	ДанныеРаботСотрудников.Вставить("МассивСотрудников",       МассивСотрудников);
	
	Возврат ДанныеРаботСотрудников;
	
КонецФункции

Функция ЧасыПоДлительностиВСекундах(Секунды)
	
	Возврат Окр(Секунды / 3600, 1, РежимОкругления.Окр15как20);
	
КонецФункции

Функция ДанныеИерархииЗапланированныхЗадач(ИерархияЗапланированныхЗадач)
	
	ДанныеИерархии = Новый Соответствие;
	
	ВыборкаСотрудник = ИерархияЗапланированныхЗадач.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		ДанныеПоСотруднику = Новый Соответствие;
		
		ВыборкаРодитель = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРодитель.Следующий() Цикл
			
			МассивЗадач = Новый Массив;
			
			ВыборкаЗадача = ВыборкаРодитель.Выбрать();
			
			Пока ВыборкаЗадача.Следующий() Цикл
				
				Если ВыборкаЗадача.ДочерняяЗадачаРаботы = ВыборкаЗадача.Работа Тогда
					Продолжить;
				КонецЕсли;
				
				МассивЗадач.Добавить(ВыборкаЗадача.ДочерняяЗадачаРаботы);
				
			КонецЦикла;
			
			Если МассивЗадач.Количество() > 0 Тогда
				ДанныеПоСотруднику.Вставить(ВыборкаРодитель.Работа, МассивЗадач);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеПоСотруднику.Количество() > 0 Тогда
			ДанныеИерархии.Вставить(ВыборкаСотрудник.Сотрудник, ДанныеПоСотруднику);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеИерархии;
	
КонецФункции

Процедура ПодготовитьФактическиеДанныеРодительскихЗадачПоСотруднику(ДанныеИерархииЗапланированныхЗадач, МассивРабот, Сотрудник)
	
	ДанныеИерархииЗадачПоСотруднику = ДанныеИерархииЗапланированныхЗадач.Получить(Сотрудник);
	
	Если Не ДанныеИерархииЗадачПоСотруднику = Неопределено Тогда
		
		Для Каждого ДанныеРаботы Из МассивРабот Цикл
			
			Если ТипЗнч(ДанныеРаботы.Работа) <> Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДанныеПодчиненныхПоЗадаче = ДанныеИерархииЗадачПоСотруднику.Получить(ДанныеРаботы.Работа);
			
			Если ДанныеПодчиненныхПоЗадаче <> Неопределено Тогда
				
				Для Каждого ДанныеРаботыПоиск Из МассивРабот Цикл
					
					Если ТипЗнч(ДанныеРаботыПоиск.Работа) <> Тип("СправочникСсылка.ЗадачиПроцесса")
						Или ДанныеРаботыПоиск.Работа = ДанныеРаботы.Работа Тогда 
						
						Продолжить;
						
					КонецЕсли;
					
					Если ДанныеПодчиненныхПоЗадаче.Найти(ДанныеРаботыПоиск.Работа) <> Неопределено Тогда
						
						ДанныеРаботы.Длительность = ДанныеРаботы.Длительность - ДанныеРаботыПоиск.Длительность;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОстаткиПланируемыхРабот

Функция ПодготовленныеДанныеОстатковПланируемыхРабот(ПараметрыПодготовки) 
	
	ДанныеДляПолучения = ПараметрыПодготовки.ДанныеДляПолучения;
	
	Возврат ДанныеОстатковПланируемыхРабот(ДанныеДляПолучения);
	
КонецФункции

Функция ДанныеОстатковПланируемыхРабот(ДанныеДляПолучения) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеОстатковПланируемыхРабот();
	
	Запрос.УстановитьПараметр("ВидРесурса",  ДанныеДляПолучения.ВидСогласуемогоРесурсаПлановыхРабот);
	Запрос.УстановитьПараметр("МассивРабот", ДанныеДляПолучения.ПланируемыеРаботы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивРабот = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеРаботы = Новый Структура;
		ДанныеРаботы.Вставить("Работа",            Выборка.Работа);
		ДанныеРаботы.Вставить("Запланировано",     Выборка.Запланировано);
		ДанныеРаботы.Вставить("ДанныеУчетВремени", ЧасыПоДлительностиВСекундах(Выборка.ДлительностьУчетВремени));
		
		МассивРабот.Добавить(ДанныеРаботы);
		
	КонецЦикла;
	
	Возврат МассивРабот;
	
КонецФункции

Функция ТекстЗапросаДанныеОстатковПланируемыхРабот()
	
	Возврат "
	|ВЫБРАТЬ
	|	СУММА(ИтогиСогласованияЗадачРесурсов.Запланировано + ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних) КАК Запланировано,
	|	ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса КАК Работа
	|ПОМЕСТИТЬ ЗапланированоЗадачи
	|ИЗ
	|	РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|ГДЕ
	|	ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса
	|	И ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса В(&МассивРабот)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Предмет КАК Работа,
	|	СУММА(ИтогиСогласованияЗадачРесурсов.Запланировано + ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних) КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоТехническиеПроекты
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ТехническиеПроекты.Ссылка = ЗадачиПроцесса.Предмет
	|			И (ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ЗадачиПроцесса.Ссылка = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&МассивРабот)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Предмет КАК Работа,
	|	СУММА(ИтогиСогласованияЗадачРесурсов.Запланировано + ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних) КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоОшибки
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО Ошибки.Ссылка = ЗадачиПроцесса.Предмет
	|			И (ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ПО (ЗадачиПроцесса.Ссылка = ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса)
	|			И (ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&МассивРабот)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ИерархияЗадачПроцесса.Родитель КАК Родитель
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель В(&МассивРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ДочерниеЗадачиРабот.Родитель КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяЗадачи
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ПО УчетВремени.Задача = ДочерниеЗадачиРабот.ЗадачаПроцесса
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ЗадачиПроцесса.Предмет КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяТехническиеПроекты
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО УчетВремени.Задача = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&МассивРабот)
	|	И ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.Длительность) КАК Длительность,
	|	ВложенныйЗапрос.Работа КАК Работа
	|ПОМЕСТИТЬ ЗатраченноеВремяОшибки
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетВремени.Длительность КАК Длительность,
	|		ЗадачиПроцесса.Предмет КАК Работа
	|	ИЗ
	|		РегистрНакопления.УчетВремени КАК УчетВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО УчетВремени.Задача = ЗадачиПроцесса.Ссылка
	|	ГДЕ
	|		ЗадачиПроцесса.Предмет В(&МассивРабот)
	|		И ЗадачиПроцесса.Предмет ССЫЛКА Справочник.Ошибки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УчетВремени.Длительность,
	|		Ошибки.Ссылка
	|	ИЗ
	|		РегистрНакопления.УчетВремени КАК УчетВремени
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ошибки КАК Ошибки
	|			ПО УчетВремени.Ошибка = Ошибки.Ссылка
	|	ГДЕ
	|		Ошибки.Ссылка В(&МассивРабот)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Работа КАК Работа,
	|	СУММА(ВложенныйЗапрос.Запланировано) КАК Запланировано,
	|	СУММА(ВложенныйЗапрос.ДлительностьУчетВремени) КАК ДлительностьУчетВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапланированоЗадачи.Работа КАК Работа,
	|		ЗапланированоЗадачи.Запланировано КАК Запланировано,
	|		ЕСТЬNULL(ЗатраченноеВремяЗадачи.Длительность, 0) КАК ДлительностьУчетВремени
	|	ИЗ
	|		ЗапланированоЗадачи КАК ЗапланированоЗадачи
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|			ПО ЗапланированоЗадачи.Работа = ЗатраченноеВремяЗадачи.Работа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатраченноеВремяЗадачи.Работа,
	|		0,
	|		ЗатраченноеВремяЗадачи.Длительность
	|	ИЗ
	|		ЗатраченноеВремяЗадачи КАК ЗатраченноеВремяЗадачи
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоЗадачи КАК ЗапланированоЗадачи
	|			ПО (ЗапланированоЗадачи.Работа = ЗатраченноеВремяЗадачи.Работа)
	|	ГДЕ
	|		ЗапланированоЗадачи.Запланировано ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапланированоТехническиеПроекты.Работа,
	|		ЗапланированоТехническиеПроекты.Запланировано,
	|		ЕСТЬNULL(ЗатраченноеВремяТехническиеПроекты.Длительность, 0)
	|	ИЗ
	|		ЗапланированоТехническиеПроекты КАК ЗапланированоТехническиеПроекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяТехническиеПроекты КАК ЗатраченноеВремяТехническиеПроекты
	|			ПО ЗапланированоТехническиеПроекты.Работа = ЗатраченноеВремяТехническиеПроекты.Работа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатраченноеВремяТехническиеПроекты.Работа,
	|		0,
	|		ЗатраченноеВремяТехническиеПроекты.Длительность
	|	ИЗ
	|		ЗатраченноеВремяТехническиеПроекты КАК ЗатраченноеВремяТехническиеПроекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоТехническиеПроекты КАК ЗапланированоТехническиеПроекты
	|			ПО (ЗапланированоТехническиеПроекты.Работа = ЗатраченноеВремяТехническиеПроекты.Работа)
	|	ГДЕ
	|		ЗапланированоТехническиеПроекты.Запланировано ЕСТЬ NULL
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗапланированоОшибки.Работа,
	|		ЗапланированоОшибки.Запланировано,
	|		ЕСТЬNULL(ЗатраченноеВремяОшибки.Длительность, 0)
	|	ИЗ
	|		ЗапланированоОшибки КАК ЗапланированоОшибки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗатраченноеВремяОшибки КАК ЗатраченноеВремяОшибки
	|			ПО ЗапланированоОшибки.Работа = ЗатраченноеВремяОшибки.Работа
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗатраченноеВремяОшибки.Работа,
	|		0,
	|		ЗатраченноеВремяОшибки.Длительность
	|	ИЗ
	|		ЗатраченноеВремяОшибки КАК ЗатраченноеВремяОшибки
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоОшибки КАК ЗапланированоОшибки
	|			ПО (ЗапланированоОшибки.Работа = ЗатраченноеВремяОшибки.Работа)
	|	ГДЕ
	|		ЗапланированоОшибки.Запланировано ЕСТЬ NULL) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Работа";
	
КонецФункции

Функция ПодготовленныеДанныеОстатковПодбор(ПараметрыПодготовки)
	
	ДанныеДляПолучения = ПараметрыПодготовки.ДанныеДляПолучения;
	
	Возврат ДанныеОстатковПодбор(ДанныеДляПолучения);
	
КонецФункции

Функция ДанныеОстатковПодбор(ДанныеДляПолучения) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеОстатковПланируемыхРабот();
	
	Запрос.УстановитьПараметр("ВидРесурса",  ДанныеДляПолучения.ВидСогласуемогоРесурсаПлановыхРабот);
	Запрос.УстановитьПараметр("МассивРабот", ДанныеДляПолучения.РаботыПодбор);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивРабот = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеРаботы = Новый Структура;
		ДанныеРаботы.Вставить("Работа",            Выборка.Работа);
		ДанныеРаботы.Вставить("Запланировано",     Выборка.Запланировано);
		ДанныеРаботы.Вставить("ДанныеУчетВремени", ЧасыПоДлительностиВСекундах(Выборка.ДлительностьУчетВремени));
		
		МассивРабот.Добавить(ДанныеРаботы);
		
	КонецЦикла;
	
	Возврат МассивРабот;
	
КонецФункции

#КонецОбласти

#Область ОстаткиПланируемыхРабот

Функция ПодготовленныеДанныеЗадачПланаЗанятости(ПараметрыПодготовки) 
	
	ПодготовленныеДанные = Новый Структура;
	ПодготовленныеДанные.Вставить("ДанныеРабот",  Новый Соответствие);
	ПодготовленныеДанные.Вставить("ДанныеЭтапов", Новый Соответствие);
	
	ДанныеДляПолучения = ПараметрыПодготовки.ДанныеДляПолучения; 
	
	ПодобранныеРаботы = Новый ТаблицаЗначений;
	ПодобранныеРаботы.Колонки.Добавить("Работа",               Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроцесса")); 
	ПодобранныеРаботы.Колонки.Добавить("ПлановыеТрудозатраты", Новый ОписаниеТипов("Число"));
	
	Для Каждого ДанныеРаботы Из ДанныеДляПолучения.ДанныеДляПолучения Цикл
		
		НоваяСтрока = ПодобранныеРаботы.Добавить();
		НоваяСтрока.Работа               = ДанныеРаботы.Задача;
		НоваяСтрока.ПлановыеТрудозатраты = ДанныеРаботы.ПлановыеТрудозатраты;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеЗадачПланЗанятости();
	
	Запрос.УстановитьПараметр("ПодобранныеРаботы",  ПодобранныеРаботы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("Запланировано", Выборка.ПлановыеТрудозатраты);
		ДанныеЗадачи.Вставить("Этап",          Выборка.Родитель);
		
		ПодготовленныеДанные.ДанныеРабот.Вставить(Выборка.Работа, ДанныеЗадачи); 
		
		ДанныеЭтапа = ПодготовленныеДанные.ДанныеЭтапов.Получить(Выборка.Родитель);
		Если ДанныеЭтапа = Неопределено Тогда
			ПодготовленныеДанные.ДанныеЭтапов.Вставить(Выборка.Родитель, Выборка.ПлановыеТрудозатраты);
		Иначе
			ПодготовленныеДанные.ДанныеЭтапов.Вставить(Выборка.Родитель, ДанныеЭтапа + Выборка.ПлановыеТрудозатраты);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция ТекстЗапросаДанныеЗадачПланЗанятости()
	
	Возврат "
	|ВЫБРАТЬ
	|	ПодобранныеРаботы.Работа КАК Работа,
	|	ПодобранныеРаботы.ПлановыеТрудозатраты КАК ПлановыеТрудозатраты
	|ПОМЕСТИТЬ ПодобранныеРаботы
	|ИЗ
	|	&ПодобранныеРаботы КАК ПодобранныеРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодобранныеРаботы.Работа КАК Работа,
	|	ПодобранныеРаботы.ПлановыеТрудозатраты КАК ПлановыеТрудозатраты,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцесса.Предмет
	|		ИНАЧЕ ЗадачиПроцесса.Ссылка 
	|	КОНЕЦ КАК Родитель
	|ИЗ
	|	ПодобранныеРаботы КАК ПодобранныеРаботы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ПодобранныеРаботы.Работа = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.Родитель = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ИерархияЗадачПроцесса.Уровень = 0";
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеВидовДеятельнстиПоСтатистике

Функция ПодготовленныеДанныеВидовДеятельностиПоСтатистике(ПараметрыПодготовки)
	
	ПодготовленныеДанные = Новый Массив;
	
	НачалоПериода = НачалоДня(ПараметрыПодготовки.ДанныеДляПолучения.НачалоПериода);
	КонецПериода  = КонецДня(ПараметрыПодготовки.ДанныеДляПолучения.КонецПериода);
	
	ДанныеНомерЗапроса = Новый Структура("ВидыДеятельности, ОбщееВремя");
	
	ДанныеПериодов = ПериодыДляОпределенияВидовДеятельностиПоСтатистике(НачалоПериода, КонецПериода);
	
	Запрос = Новый Запрос;
	
	Если ПараметрыПодготовки.ДанныеДляПолучения.ТипЗаполнения = "ЗаполнитьПоСотрудникамНеИзменятьОтсутствующие"
		Или ПараметрыПодготовки.ДанныеДляПолучения.ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат"
		Или ПараметрыПодготовки.ДанныеДляПолучения.ТипЗаполнения = "ЗаполнитьПоСотрудникамОчисткаОтсутствующихВидовДеятельности" Тогда
		
		Запрос.Текст = ТекстЗапросаВидыДеятельностиПоСтатистикеСотрудники();
		Запрос.УстановитьПараметр("Сотрудники", ПараметрыПодготовки.ДанныеДляПолучения.РаботыСотрудники);
		
		ДанныеНомерЗапроса.ВидыДеятельности = 0;
		ДанныеНомерЗапроса.ОбщееВремя       = 1;
		
	Иначе
		
		Запрос.Текст = ТекстЗапросаПоСтатистикеВыбранныеВидыДеятельности();
		Запрос.УстановитьПараметр("СотрудникиВидыДеятельности", ТаблицаСотрудникиВидыДеятельностиПоСтруктуре(ПараметрыПодготовки.ДанныеДляПолучения.РаботыСотрудники));
		
		ДанныеНомерЗапроса.ВидыДеятельности = 1;
		ДанныеНомерЗапроса.ОбщееВремя       = 2;
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериодов", ДанныеПериодов.НачалоПериодов);
	Запрос.УстановитьПараметр("КонецПериодов",  ДанныеПериодов.КонецПериодов);
	Запрос.УстановитьПараметр("НачалоПериода1", ДанныеПериодов.НачалоПериода1);
	Запрос.УстановитьПараметр("КонецПериода1",  ДанныеПериодов.КонецПериода1);
	Запрос.УстановитьПараметр("НачалоПериода2", ДанныеПериодов.НачалоПериода2);
	Запрос.УстановитьПараметр("КонецПериода2",  ДанныеПериодов.КонецПериода2);
	Запрос.УстановитьПараметр("НачалоПериода3", ДанныеПериодов.НачалоПериода3);
	Запрос.УстановитьПараметр("КонецПериода3",  ДанныеПериодов.КонецПериода3);
	Запрос.УстановитьПараметр("НачалоПериода4", ДанныеПериодов.НачалоПериода4);
	Запрос.УстановитьПараметр("КонецПериода4",  ДанныеПериодов.КонецПериода4);
	Запрос.УстановитьПараметр("НачалоПериода5", ДанныеПериодов.НачалоПериода5);
	Запрос.УстановитьПараметр("КонецПериода5",  ДанныеПериодов.КонецПериода5);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НеобработанныеДанные = НеобработанныеДанныеСтатистикиПоСотрудникам(РезультатЗапроса, ДанныеНомерЗапроса);
	
	ПодготовленныеДанные = РезультатОбработкиНеподготовленныхДанныхСтатистики(НеобработанныеДанные);
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция РезультатОбработкиНеподготовленныхДанныхСтатистики(НеобработанныеДанные) 
	
	ПодготовленныеДанные = Новый Массив;
	
	Для Каждого КлючИЗначение Из НеобработанныеДанные Цикл
		
		ОбщееВремя              = 0;
		КоличествоПериодов      = 0;
		СреднееВремя            = 0;
		МассивВидовДеятельности = Новый Массив;
		
		Для Каждого ДанныеПериода Из КлючИЗначение.Значение.ОбщееВремяПоПериодам Цикл
			
			Если ДанныеПериода.Значение <> 0 Тогда
				
				ОбщееВремя        = ОбщееВремя + ДанныеПериода.Значение;
				КоличествоПериодов = КоличествоПериодов + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоПериодов < 2 Тогда
			Продолжить;
		Иначе
			СреднееВремя = ОбщееВремя/КоличествоПериодов;
		КонецЕсли;
		
		УчитываемыеПериоды = Новый Массив;
		
		Для Инд = 1 По 5 Цикл
			
			Если УчитываемыеПериоды.Количество() = 3 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяПериода = "Период_" + Строка(Инд);
			
			ЗатратыПериода = КлючИЗначение.Значение.ОбщееВремяПоПериодам[ИмяПериода];
			
			Если ЗатратыПериода <> 0 Тогда
				
				ОтклонениеПериода = (ЗатратыПериода - СреднееВремя)/СреднееВремя;
				Если ОтклонениеПериода < 0.3 И ОтклонениеПериода > -0.3 Тогда
					УчитываемыеПериоды.Добавить(ИмяПериода);
				КонецЕсли;
				
				ОбщееВремя        = ОбщееВремя + ДанныеПериода.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если УчитываемыеПериоды.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из КлючИЗначение.Значение.ВидыДеятельностиПоПериодам Цикл
			
			ОбщееВремяВидаДеятелности          = 0;
			КоличествоПериодовВидаДеятельности = 0;
			
			Для Каждого ИмяКолонки Из УчитываемыеПериоды Цикл
				
				Если СтрокаТаблицы[ИмяКолонки] > 0 Тогда
					
					ОбщееВремяВидаДеятелности           = ОбщееВремяВидаДеятелности + СтрокаТаблицы[ИмяКолонки];
					КоличествоПериодовВидаДеятельности  = КоличествоПериодовВидаДеятельности + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоПериодовВидаДеятельности > 1 Тогда
				
				ДанныеВидаДеятельности = Новый Структура;
				ДанныеВидаДеятельности.Вставить("ВидДеятельности", СтрокаТаблицы.ВидДеятельности);
				ДанныеВидаДеятельности.Вставить("Часы",            Окр(ЧасыПоДлительностиВСекундах(ОбщееВремяВидаДеятелности)/КоличествоПериодов, 1, РежимОкругления.Окр15как20));
				
				МассивВидовДеятельности.Добавить(ДанныеВидаДеятельности);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("Сотрудник",        КлючИЗначение.Ключ);
		ДанныеСотрудника.Вставить("ВидыДеятельности", МассивВидовДеятельности);
		
		ПодготовленныеДанные.Добавить(ДанныеСотрудника);
		
	КонецЦикла;
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция НеобработанныеДанныеСтатистикиПоСотрудникам(РезультатЗапроса, ДанныеНомерЗапроса)
	
	НеобработанныеДанные = Новый Соответствие;
	
	РезультатВидыДеятельности = РезультатЗапроса[ДанныеНомерЗапроса.ВидыДеятельности];
	
	ВыборкаСотрудники = РезультатВидыДеятельности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		НеобработанныеДанныеСотрудника = НовыйНеобработанныеДанныеСотрудникаВидыДеятельностиСтатистика();
		ВыборкаВидыДеятельности        = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВидыДеятельности.Следующий() Цикл 
			
			НоваяСтрока = НеобработанныеДанныеСотрудника.ВидыДеятельностиПоПериодам.Добавить();
			НоваяСтрока.ВидДеятельности = ВыборкаВидыДеятельности.ВидДеятельности;
			
			ВыборкаДетали = ВыборкаВидыДеятельности.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				 НоваяСтрока["Период_" + Строка(ВыборкаДетали.НомерПериода)] = ВыборкаДетали.Длительность
				
			КонецЦикла;
			
		КонецЦикла;
		
		НеобработанныеДанные.Вставить(ВыборкаСотрудники.Пользователь, НеобработанныеДанныеСотрудника);
		
	КонецЦикла;
	
	РезультатОбщиеДанные = РезультатЗапроса[ДанныеНомерЗапроса.ОбщееВремя];
	
	ВыборкаСотрудники = РезультатОбщиеДанные.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		НеобработанныеДанныеСотрудника = НеобработанныеДанные.Получить(ВыборкаСотрудники.Пользователь);
		
		Если НеобработанныеДанныеСотрудника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетали = ВыборкаСотрудники.Выбрать();
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			НеобработанныеДанныеСотрудника.ОбщееВремяПоПериодам["Период_" + Строка(ВыборкаДетали.НомерПериода)] = ВыборкаДетали.Длительность
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НеобработанныеДанные;
	
КонецФункции

Функция НовыйНеобработанныеДанныеСотрудникаВидыДеятельностиСтатистика()

	ДанныеПоВидамДеятельности = Новый Структура;
	
	ОбщееВремяПоПериодам = Новый Соответствие;
	ОбщееВремяПоПериодам.Вставить("Период_1", 0); 
	ОбщееВремяПоПериодам.Вставить("Период_2", 0);
	ОбщееВремяПоПериодам.Вставить("Период_3", 0);
	ОбщееВремяПоПериодам.Вставить("Период_4", 0);
	ОбщееВремяПоПериодам.Вставить("Период_5", 0);
	
	ДанныеПоВидамДеятельности.Вставить("ОбщееВремяПоПериодам", ОбщееВремяПоПериодам);
	
	ОписаниеТипаЧисло15 = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,0,ДопустимыйЗнак.Неотрицательный));
	
	ВидыДеятельностиПоПериодам = Новый ТаблицаЗначений;
	ВидыДеятельностиПоПериодам.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельности"));
	ВидыДеятельностиПоПериодам.Колонки.Добавить("Период_1", ОписаниеТипаЧисло15);
	ВидыДеятельностиПоПериодам.Колонки.Добавить("Период_2", ОписаниеТипаЧисло15);
	ВидыДеятельностиПоПериодам.Колонки.Добавить("Период_3", ОписаниеТипаЧисло15);
	ВидыДеятельностиПоПериодам.Колонки.Добавить("Период_4", ОписаниеТипаЧисло15);
	ВидыДеятельностиПоПериодам.Колонки.Добавить("Период_5", ОписаниеТипаЧисло15);
	
	ДанныеПоВидамДеятельности.Вставить("ВидыДеятельностиПоПериодам", ВидыДеятельностиПоПериодам);
	
	Возврат ДанныеПоВидамДеятельности;
	
КонецФункции

Функция ТаблицаСотрудникиВидыДеятельностиПоСтруктуре(ВидыДеятельностиСотрудники)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Сотрудник",       Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаДанных.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельности"));
	
	Для Каждого ДанныеВидаДеятельности Из ВидыДеятельностиСотрудники Цикл
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Сотрудник =       ДанныеВидаДеятельности.Сотрудник;
		НоваяСтрока.ВидДеятельности = ДанныеВидаДеятельности.ВидДеятельности;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПериодыДляОпределенияВидовДеятельностиПоСтатистике(НачалоПериода, КонецПериода)
	
	ДлинаПериода = КонецПериода - НачалоПериода + 1;
	
	ДанныеПериодов = Новый Структура;
	
	ДанныеПериодов.Вставить("НачалоПериода1", НачалоПериода - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода1",  НачалоПериода - 1);
	ДанныеПериодов.Вставить("НачалоПериода2", ДанныеПериодов.НачалоПериода1 - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода2",  ДанныеПериодов.НачалоПериода1 - 1);
	ДанныеПериодов.Вставить("НачалоПериода3", ДанныеПериодов.НачалоПериода2 - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода3",  ДанныеПериодов.НачалоПериода2 - 1);
	ДанныеПериодов.Вставить("НачалоПериода4", ДанныеПериодов.НачалоПериода3 - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода4",  ДанныеПериодов.НачалоПериода3 - 1);
	ДанныеПериодов.Вставить("НачалоПериода5", ДанныеПериодов.НачалоПериода4 - ДлинаПериода);
	ДанныеПериодов.Вставить("КонецПериода5",  ДанныеПериодов.НачалоПериода4 - 1);
	ДанныеПериодов.Вставить("КонецПериодов",  ДанныеПериодов.КонецПериода1);
	ДанныеПериодов.Вставить("НачалоПериодов", ДанныеПериодов.НачалоПериода5);
	
	Возврат ДанныеПериодов;
	
КонецФункции

Функция ТекстЗапросаПоСтатистикеВыбранныеВидыДеятельности()
	
	Возврат "
	|ВЫБРАТЬ
	|	СотрудникиВидыДеятельности.Сотрудник       КАК Сотрудник,
	|	СотрудникиВидыДеятельности.ВидДеятельности КАК ВидДеятельности
	|ПОМЕСТИТЬ СотрудникиВидыДеятельности
	|ИЗ
	|	&СотрудникиВидыДеятельности КАК СотрудникиВидыДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетВремени.ВидДеятельности     КАК ВидДеятельности,
	|	УчетВремени.Пользователь        КАК Пользователь,
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК НомерПериода
	|ИЗ
	|	СотрудникиВидыДеятельности КАК СотрудникиВидыДеятельности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.ВидДеятельности = СотрудникиВидыДеятельности.ВидДеятельности)
	|			И (УчетВремени.Пользователь = СотрудникиВидыДеятельности.Сотрудник)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельности КАК ВидыДеятельности
	|		ПО (УчетВремени.ВидДеятельности = ВидыДеятельности.Ссылка)
	|ГДЕ
	|	НЕ ВидыДеятельности.ТребуемаяДетализация = ЗНАЧЕНИЕ(Перечисление.ДетализацияВПланированииИУчетеВремени.Работа)
	|	И УчетВремени.Период МЕЖДУ &НачалоПериодов И &КонецПериодов
	|	И ВидыДеятельности.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.НеРабочее)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетВремени.Пользователь,
	|	УчетВремени.ВидДеятельности,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ
	|
	|ИТОГИ ПО
	|	Пользователь,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	УчетВремени.Пользователь        КАК Пользователь,
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК НомерПериода
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|ГДЕ
	|	УчетВремени.Период МЕЖДУ &НачалоПериодов И &КонецПериодов
	|	И УчетВремени.Пользователь В (ВЫБРАТЬ РАЗЛИЧНЫЕ СотрудникиВидыДеятельности.Сотрудник КАК Пользователь ИЗ СотрудникиВидыДеятельности)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетВремени.Пользователь,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ
	|
	|ИТОГИ ПО
	|	Пользователь
	|;";
	
КонецФункции

Функция ТекстЗапросаВидыДеятельностиПоСтатистикеСотрудники()
	
	Возврат "
	|ВЫБРАТЬ
	|	УчетВремени.ВидДеятельности     КАК ВидДеятельности,
	|	УчетВремени.Пользователь        КАК Пользователь,
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК НомерПериода
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДеятельности КАК ВидыДеятельности
	|		ПО УчетВремени.ВидДеятельности = ВидыДеятельности.Ссылка
	|ГДЕ
	|	УчетВремени.Пользователь В(&Сотрудники)
	|	И НЕ ВидыДеятельности.ТребуемаяДетализация = ЗНАЧЕНИЕ(Перечисление.ДетализацияВПланированииИУчетеВремени.Работа)
	|	И УчетВремени.Период МЕЖДУ &НачалоПериодов И &КонецПериодов
	|	И ВидыДеятельности.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.НеРабочее)
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетВремени.Пользователь,
	|	УчетВремени.ВидДеятельности,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ 
	|
	|ИТОГИ ПО
	|	Пользователь,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	УчетВремени.Пользователь        КАК Пользователь,
	|	СУММА(УчетВремени.Длительность) КАК Длительность,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК НомерПериода
	|ИЗ
	|	РегистрНакопления.УчетВремени КАК УчетВремени
	|ГДЕ
	|	УчетВремени.Пользователь В(&Сотрудники)
	|	И УчетВремени.Период МЕЖДУ &НачалоПериодов И &КонецПериодов
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетВремени.Пользователь,
	|	ВЫБОР
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода1 И &КонецПериода1
	|			ТОГДА 1
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода2 И &КонецПериода2
	|			ТОГДА 2
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода3 И &КонецПериода3
	|			ТОГДА 3
	|		КОГДА УчетВремени.Период МЕЖДУ &НачалоПериода4 И &КонецПериода4
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ
	|
	|ИТОГИ ПО
	|	Пользователь
	|;";
	
КонецФункции

#КонецОбласти

#Область ДополнительныеДанныеПланыЗанятостиОтСотрудников

Функция ПодготовленныеДополнительныеДанныеПланыЗанятостиОтСотрудников(ПараметрыПодготовки)
	
	ДанныеДляПолучения                  = ПараметрыПодготовки.ДанныеДляПолучения;
	ВидПлана                            = ДанныеДляПолучения.ВидПлана;
	ВидСогласуемогоРесурсаПлановыхРабот = ДанныеДляПолучения.ВидСогласуемогоРесурсаПлановыхРабот;
	НачалоПериодаОтображаемыхПланов     = ДанныеДляПолучения.НачалоПериодаОтображаемыхПланов;
	КонецПериодаОтображаемыхПланов      = ДанныеДляПолучения.КонецПериодаОтображаемыхПланов;
	ЭтапыПоСотрудникам                  = ДанныеДляПолучения.ЭтапыПоСотрудникам; 
	
	ДанныеЭтаповПоСотрудникам = ДанныеЭтаповПоСотрудникам(ЭтапыПоСотрудникам);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДополнительныеДанныеПланыЗанятостиОтСотрудников();
	
	Запрос.УстановитьПараметр("ДанныеЭтаповПоСотрудникам",           ДанныеЭтаповПоСотрудникам.ТаблицаРаботСотрудников);
	Запрос.УстановитьПараметр("НачалоПериодаОтображаемыхПланов",     НачалоПериодаОтображаемыхПланов);
	Запрос.УстановитьПараметр("КонецПериодаОтображаемыхПланов",      КонецПериодаОтображаемыхПланов);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурсаПлановыхРабот", ВидСогласуемогоРесурсаПлановыхРабот);
	Запрос.УстановитьПараметр("ВидПлана",                            ВидПлана);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ПодготовленныеДанные = РезультатОбработкиЗапросаДополнительныДанныеПланыЗанятостиОтСотрудников(РезультатЗапроса); 
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция РезультатОбработкиЗапросаДополнительныДанныеПланыЗанятостиОтСотрудников(РезультатЗапроса)
	
	ПодготовленныеДанные = Новый Структура;
	ПодготовленныеДанные.Вставить("СотрудникЭтапы", Новый Массив);
	
	ВыборкаСотрудник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудник.Следующий() Цикл
		
		МассивЭтапов = Новый Массив;
		
		ВыборкаЭтапы = ВыборкаСотрудник.Выбрать();
		
		Пока ВыборкаЭтапы.Следующий() Цикл
			
			ДанныеЭтапа = Новый Структура; 
			
			ДанныеЭтапа.Вставить("Этап",                                 ВыборкаЭтапы.Этап);
			ДанныеЭтапа.Вставить("Факт",                                 ВыборкаЭтапы.Факт);
			ДанныеЭтапа.Вставить("Остаток",                              ВыборкаЭтапы.Остаток);
			ДанныеЭтапа.Вставить("ЗапланированоВНеотображаемыхПериодах", ВыборкаЭтапы.ЗапланированоВНеотображаемыхПериодах);
			
			МассивЭтапов.Добавить(ДанныеЭтапа);
			
		КонецЦикла;
		
		ДанныеПоСотруднику = Новый Структура;
		ДанныеПоСотруднику.Вставить("Сотрудник",       ВыборкаСотрудник.Сотрудник);
		ДанныеПоСотруднику.Вставить("ЭтапыСотрудника", МассивЭтапов);
		
		ПодготовленныеДанные.СотрудникЭтапы.Добавить(ДанныеПоСотруднику);
		
	КонецЦикла;

	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция ДанныеЭтаповПоСотрудникам(ЭтапыПоСотрудникам)
	
	МассивСотрудников = Новый Массив;
	
	МассивДоступныхТиповЭтапы = Новый Массив;
	МассивДоступныхТиповЭтапы.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса")); 
	МассивДоступныхТиповЭтапы.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	МассивДоступныхТиповЭтапы.Добавить(Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана"));
	
	ТаблицаЭтаповСотрудников = Новый ТаблицаЗначений;
	ТаблицаЭтаповСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЭтаповСотрудников.Колонки.Добавить("Этап",      Новый ОписаниеТипов(МассивДоступныхТиповЭтапы));
	
	Для Каждого ДанныеЭтапов Из ЭтапыПоСотрудникам Цикл
		
		МассивСотрудников.Добавить(ДанныеЭтапов.Сотрудник);
		
		Для Каждого Этап Из ДанныеЭтапов.Этапы Цикл
			
			НоваяСтрока = ТаблицаЭтаповСотрудников.Добавить();
			
			НоваяСтрока.Сотрудник = ДанныеЭтапов.Сотрудник;
			НоваяСтрока.Этап      = Этап;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеЭтаповСотрудников = Новый Структура;
	ДанныеЭтаповСотрудников.Вставить("ТаблицаРаботСотрудников", ТаблицаЭтаповСотрудников);
	ДанныеЭтаповСотрудников.Вставить("МассивСотрудников",       МассивСотрудников);
	
	Возврат ДанныеЭтаповСотрудников;

КонецФункции

Функция ТекстЗапросаДополнительныеДанныеПланыЗанятостиОтСотрудников()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап      КАК Этап
	|ПОМЕСТИТЬ ЭтапыПоСотрудникам
	|ИЗ
	|	&ДанныеЭтаповПоСотрудникам КАК ЭтапыПоСотрудникам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка        КАК Задача,
	|	ЗадачиПроцесса.Исполнитель   КАК ИсполнительЗадачи
	|ПОМЕСТИТЬ ЗадачиЭтапов
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЭтапыПоСотрудникам.Этап = ИерархияЗадачПроцесса.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЭтапыПоСотрудникам.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка        КАК Задача,
	|	ЗадачиПроцесса.Исполнитель   КАК ИсполнительЗадачи
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаЭтапы
	|			ПО ЭтапыПоСотрудникам.Этап = ЗадачиПроцессаЭтапы.Предмет 
	|			И ЗадачиПроцессаЭтапы.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|				И ЗадачиПроцессаЭтапы.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцессаЭтапы.Ссылка = ИерархияЗадачПроцесса.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЭтапыПоСотрудникам.Этап ССЫЛКА Справочник.ТехническиеПроекты
	| 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПроцессаЭтапы.Исполнитель                                   КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)  КАК Этап,
	|	ЗадачиПроцессаЭтапы.Ссылка                                        КАК Задача,
	|	ЗадачиПроцессаЭтапы.Исполнитель                                   КАК ИсполнительЗадачи
	|ИЗ
	| Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаЭтапы
	|ГДЕ
	|	ЗадачиПроцессаЭтапы.Предмет ССЫЛКА Справочник.Ошибки
	|	И ЗадачиПроцессаЭтапы.Исполнитель В (ВЫБРАТЬ РАЗЛИЧНЫЕ ЭтапыПоСотрудникам.Сотрудник ИЗ ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам)
	|	И НЕ ЗадачиПроцессаЭтапы.ПометкаУдаления
	|	И ЗадачиПроцессаЭтапы.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Этап                            КАК Этап,
	|	ЗадачиЭтапов.Сотрудник                       КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК ДлительностьВсего
	|ПОМЕСТИТЬ ФактическиеТрудозатраты
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ЗадачиЭтапов.Задача = УчетВремени.Задача
	|			И ЗадачиЭтапов.Сотрудник = УчетВремени.Пользователь
	|			И (УчетВремени.Период < &НачалоПериодаОтображаемыхПланов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиЭтапов.Сотрудник,
	|	ЗадачиЭтапов.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                                    КАК Сотрудник,
	|	ЗадачиЭтапов.Этап                                         КАК Этап,
	|	ЗадачиЭтапов.Задача                                       КАК Задача,
	|	ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0)  КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЭтапов.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоПериодаОтображаемыхПланов
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиЭтапов.Задача = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И (ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот)
	|			И  ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                       КАК Сотрудник,
	|	ЗадачиЭтапов.Этап                            КАК Этап,
	|	ЗадачиЭтапов.Задача                          КАК Задача,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК Длительность
	|ПОМЕСТИТЬ ПотраченоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|			ПО ЗадачиЗапланированоПоСотрудникам.Задача      = ЗадачиЭтапов.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоПериодаОтображаемыхПланов
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = УчетВремени.Задача
	|		И УчетВремени.Пользователь = ЗадачиЗапланированоПоСотрудникам.Пользователь
	|		И УчетВремени.Период < &НачалоПериодаОтображаемыхПланов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиЭтапов.Сотрудник,
	|	ЗадачиЭтапов.Этап,
	|	ЗадачиЭтапов.Задача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапланированоПоЗадачам.Сотрудник КАК Сотрудник,
	|	ЗапланированоПоЗадачам.Этап      КАК Этап,
	|	СУММА(ВЫБОР
	|			КОГДА ЗапланированоПоЗадачам.Запланировано * 3600 > ПотраченоПоЗадачам.Длительность
	|				ТОГДА ЗапланированоПоЗадачам.Запланировано * 3600 - ПотраченоПоЗадачам.Длительность
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|ПОМЕСТИТЬ ОстатокКРаспределению
	|ИЗ
	|	ЗапланированоПоЗадачам КАК ЗапланированоПоЗадачам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотраченоПоЗадачам КАК ПотраченоПоЗадачам
	|		ПО ЗапланированоПоЗадачам.Сотрудник = ПотраченоПоЗадачам.Сотрудник
	|			И ЗапланированоПоЗадачам.Этап = ПотраченоПоЗадачам.Этап
	|			И ЗапланированоПоЗадачам.Задача = ПотраченоПоЗадачам.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапланированоПоЗадачам.Сотрудник,
	|	ЗапланированоПоЗадачам.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап КАК Этап,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ЗапланированоВНеоотображаемыхПериодах
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|			ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|				И (Планы.ВидПлана = &ВидПлана)
	|				И (Планы.НачалоПериода > &КонецПериодаОтображаемыхПланов)
	|		ПО ЭтапыПоСотрудникам.Сотрудник = ЗаписиПлана.Сотрудник
	|			И ЭтапыПоСотрудникам.Этап = ЗаписиПлана.Работа
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПоСотрудникам.Сотрудник,
	|	ЭтапыПоСотрудникам.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап КАК Этап,
	|	ЕСТЬNULL(ФактическиеТрудозатраты.ДлительностьВсего, 0) КАК Факт,
	|	ЕСТЬNULL(ОстатокКРаспределению.Остаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ЗапланированоВНеоотображаемыхПериодах.ПланируемыеТрудозатраты, 0) КАК ЗапланированоВНеотображаемыхПериодах
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|		ПО ЭтапыПоСотрудникам.Сотрудник = ФактическиеТрудозатраты.Сотрудник
	|			И ЭтапыПоСотрудникам.Этап = ФактическиеТрудозатраты.Этап
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстатокКРаспределению КАК ОстатокКРаспределению
	|		ПО ЭтапыПоСотрудникам.Этап = ОстатокКРаспределению.Этап
	|			И ЭтапыПоСотрудникам.Сотрудник = ОстатокКРаспределению.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоВНеоотображаемыхПериодах КАК ЗапланированоВНеоотображаемыхПериодах
	|		ПО ЭтапыПоСотрудникам.Сотрудник = ЗапланированоВНеоотображаемыхПериодах.Сотрудник
	|			И ЭтапыПоСотрудникам.Этап = ЗапланированоВНеоотображаемыхПериодах.Этап
	|ИТОГИ ПО
	|	Сотрудник";
	
КонецФункции

#КонецОбласти

#Область ДополнительныеДанныеПланыЗанятостиОтТехПроектов

Функция ПодготовленныеДополнительныеДанныеПланыЗанятостиОтТехПроектов(ПараметрыПодготовки)
	
	ДанныеДляПолучения                  = ПараметрыПодготовки.ДанныеДляПолучения;
	ВидПлана                            = ДанныеДляПолучения.ВидПлана;
	ВидСогласуемогоРесурсаПлановыхРабот = ДанныеДляПолучения.ВидСогласуемогоРесурсаПлановыхРабот;
	НачалоПериодаОтображаемыхПланов     = ДанныеДляПолучения.НачалоПериодаОтображаемыхПланов;
	КонецПериодаОтображаемыхПланов      = ДанныеДляПолучения.КонецПериодаОтображаемыхПланов;
	СотрудникиПоЭтапам                  = ДанныеДляПолучения.СотрудникиПоЭтапам; 
	
	ДанныеЭтаповПоСотрудникам = ДанныеЭтаповПоТехПроектам(СотрудникиПоЭтапам);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДополнительныеДанныеПланыЗанятостиОтТехПроектов();
	
	Запрос.УстановитьПараметр("ДанныеЭтаповПоСотрудникам",           ДанныеЭтаповПоСотрудникам.ТаблицаРаботСотрудников);
	Запрос.УстановитьПараметр("НачалоПериодаОтображаемыхПланов",     НачалоПериодаОтображаемыхПланов);
	Запрос.УстановитьПараметр("КонецПериодаОтображаемыхПланов",      КонецПериодаОтображаемыхПланов);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурсаПлановыхРабот", ВидСогласуемогоРесурсаПлановыхРабот);
	Запрос.УстановитьПараметр("ВидПлана",                            ВидПлана);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодготовленныеДанные = РезультатОбработкиЗапросаДополнительныДанныеПланыЗанятостиОтТехПроектов(РезультатЗапроса); 
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция ДанныеЭтаповПоТехПроектам(СотрудникиПоЭтапам)
	
	МассивЭтапов = Новый Массив;
	
	МассивДоступныхТиповЭтапы = Новый Массив;
	МассивДоступныхТиповЭтапы.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса")); 
	МассивДоступныхТиповЭтапы.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	
	ТаблицаЭтаповСотрудников = Новый ТаблицаЗначений;
	ТаблицаЭтаповСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЭтаповСотрудников.Колонки.Добавить("Этап",      Новый ОписаниеТипов(МассивДоступныхТиповЭтапы));
	
	Для Каждого ДанныеЭтапов Из СотрудникиПоЭтапам Цикл
		
		МассивЭтапов.Добавить(ДанныеЭтапов.Этап);
		
		Для Каждого Сотрудник Из ДанныеЭтапов.Сотрудники Цикл
			
			НоваяСтрока = ТаблицаЭтаповСотрудников.Добавить();
			
			НоваяСтрока.Этап      = ДанныеЭтапов.Этап;
			НоваяСтрока.Сотрудник = Сотрудник;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеЭтаповСотрудников = Новый Структура;
	ДанныеЭтаповСотрудников.Вставить("ТаблицаРаботСотрудников", ТаблицаЭтаповСотрудников);
	ДанныеЭтаповСотрудников.Вставить("МассивЭтапов",            МассивЭтапов);
	
	Возврат ДанныеЭтаповСотрудников;

КонецФункции

Функция ТекстЗапросаДополнительныеДанныеПланыЗанятостиОтТехПроектов()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап      КАК Этап
	|ПОМЕСТИТЬ ЭтапыПоСотрудникам
	|ИЗ
	|	&ДанныеЭтаповПоСотрудникам КАК ЭтапыПоСотрудникам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка        КАК Задача,
	|	ЗадачиПроцесса.Исполнитель   КАК ИсполнительЗадачи
	|ПОМЕСТИТЬ ЗадачиЭтапов
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЭтапыПоСотрудникам.Этап = ИерархияЗадачПроцесса.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЭтапыПоСотрудникам.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка        КАК Задача,
	|	ЗадачиПроцесса.Исполнитель   КАК ИсполнительЗадачи
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаЭтапы
	|			ПО (ЭтапыПоСотрудникам.Этап = ЗадачиПроцессаЭтапы.Предмет) 
	|			И ЗадачиПроцессаЭтапы.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|				И ЗадачиПроцессаЭтапы.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцессаЭтапы.Ссылка = ИерархияЗадачПроцесса.Родитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЭтапыПоСотрудникам.Этап ССЫЛКА Справочник.ТехническиеПроекты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Этап                            КАК Этап,
	|	ЗадачиЭтапов.Сотрудник                       КАК Сотрудник,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК ДлительностьВсего
	|ПОМЕСТИТЬ ФактическиеТрудозатраты
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ЗадачиЭтапов.Задача = УчетВремени.Задача
	|			И ЗадачиЭтапов.Сотрудник = УчетВремени.Пользователь
	|			И (УчетВремени.Период < &НачалоПериодаОтображаемыхПланов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиЭтапов.Сотрудник,
	|	ЗадачиЭтапов.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Этап,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                                   КАК Сотрудник,
	|	ЗадачиЭтапов.Этап                                        КАК Этап,
	|	ЗадачиЭтапов.Задача                                      КАК Задача,
	|	ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0) КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЭтапов.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоПериодаОтображаемыхПланов
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиЭтапов.Задача = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И (ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот)
	|			И  ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник КАК Сотрудник,
	|	ЗадачиЭтапов.Этап КАК Этап,
	|	ЗадачиЭтапов.Задача КАК Задача,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК Длительность
	|ПОМЕСТИТЬ ПотраченоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|			ПО ЗадачиЗапланированоПоСотрудникам.Задача      = ЗадачиЭтапов.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоПериодаОтображаемыхПланов
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = УчетВремени.Задача
	|			И УчетВремени.Пользователь = ЗадачиЗапланированоПоСотрудникам.Пользователь
	|			И УчетВремени.Период < &НачалоПериодаОтображаемыхПланов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиЭтапов.Сотрудник,
	|	ЗадачиЭтапов.Этап,
	|	ЗадачиЭтапов.Задача
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап,
	|	Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапланированоПоЗадачам.Сотрудник КАК Сотрудник,
	|	ЗапланированоПоЗадачам.Этап КАК Этап,
	|	СУММА(ВЫБОР
	|			КОГДА ЗапланированоПоЗадачам.Запланировано * 3600 > ПотраченоПоЗадачам.Длительность
	|				ТОГДА ЗапланированоПоЗадачам.Запланировано * 3600 - ПотраченоПоЗадачам.Длительность
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|ПОМЕСТИТЬ ОстатокКРаспределению
	|ИЗ
	|	ЗапланированоПоЗадачам КАК ЗапланированоПоЗадачам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотраченоПоЗадачам КАК ПотраченоПоЗадачам
	|		ПО ЗапланированоПоЗадачам.Сотрудник = ПотраченоПоЗадачам.Сотрудник
	|			И ЗапланированоПоЗадачам.Этап = ПотраченоПоЗадачам.Этап
	|			И ЗапланированоПоЗадачам.Задача = ПотраченоПоЗадачам.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапланированоПоЗадачам.Сотрудник,
	|	ЗапланированоПоЗадачам.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЭтапыПоСотрудникам.Этап КАК Этап,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ЗапланированоВНеоотображаемыхПериодах
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|			ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|				И (Планы.ВидПлана = &ВидПлана)
	|				И (Планы.НачалоПериода > &КонецПериодаОтображаемыхПланов)
	|		ПО ЭтапыПоСотрудникам.Сотрудник = ЗаписиПлана.Сотрудник
	|			И ЭтапыПоСотрудникам.Этап = ЗаписиПлана.Работа
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПоСотрудникам.Сотрудник,
	|	ЭтапыПоСотрудникам.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыПоСотрудникам.Этап КАК Этап,
	|	ЭтапыПоСотрудникам.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(ФактическиеТрудозатраты.ДлительностьВсего, 0) КАК Факт,
	|	ЕСТЬNULL(ОстатокКРаспределению.Остаток, 0) КАК Остаток,
	|	ЕСТЬNULL(ЗапланированоВНеоотображаемыхПериодах.ПланируемыеТрудозатраты, 0) КАК ЗапланированоВНеотображаемыхПериодах
	|ИЗ
	|	ЭтапыПоСотрудникам КАК ЭтапыПоСотрудникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактическиеТрудозатраты КАК ФактическиеТрудозатраты
	|		ПО ЭтапыПоСотрудникам.Сотрудник = ФактическиеТрудозатраты.Сотрудник
	|			И ЭтапыПоСотрудникам.Этап = ФактическиеТрудозатраты.Этап
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстатокКРаспределению КАК ОстатокКРаспределению
	|		ПО ЭтапыПоСотрудникам.Этап = ОстатокКРаспределению.Этап
	|			И ЭтапыПоСотрудникам.Сотрудник = ОстатокКРаспределению.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоВНеоотображаемыхПериодах КАК ЗапланированоВНеоотображаемыхПериодах
	|		ПО ЭтапыПоСотрудникам.Сотрудник = ЗапланированоВНеоотображаемыхПериодах.Сотрудник
	|			И ЭтапыПоСотрудникам.Этап = ЗапланированоВНеоотображаемыхПериодах.Этап
	|ИТОГИ ПО
	|	Этап";
	
КонецФункции

Функция РезультатОбработкиЗапросаДополнительныДанныеПланыЗанятостиОтТехПроектов(РезультатЗапроса)
	
	ПодготовленныеДанные = Новый Структура;
	ПодготовленныеДанные.Вставить("ЭтапыСотрудники", Новый Массив);
	
	ВыборкаЭтапы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЭтапы.Следующий() Цикл
		
		МассивСотрудников = Новый Массив;
		
		ВыборкаСотрудники = ВыборкаЭтапы.Выбрать();
		
		Пока ВыборкаСотрудники.Следующий() Цикл
			
			ДанныеСотрудника = Новый Структура; 
			
			ДанныеСотрудника.Вставить("Сотрудник",                            ВыборкаСотрудники.Сотрудник);
			ДанныеСотрудника.Вставить("Факт",                                 ВыборкаСотрудники.Факт);
			ДанныеСотрудника.Вставить("Остаток",                              ВыборкаСотрудники.Остаток);
			ДанныеСотрудника.Вставить("ЗапланированоВНеотображаемыхПериодах", ВыборкаСотрудники.ЗапланированоВНеотображаемыхПериодах);
			
			МассивСотрудников.Добавить(ДанныеСотрудника);
			
		КонецЦикла;
		
		ДанныеПоСотруднику = Новый Структура;
		ДанныеПоСотруднику.Вставить("Этап",            ВыборкаЭтапы.Этап);
		ДанныеПоСотруднику.Вставить("СотрудникиЭтапа", МассивСотрудников);
		
		ПодготовленныеДанные.ЭтапыСотрудники.Добавить(ДанныеПоСотруднику);
		
	КонецЦикла;

	Возврат ПодготовленныеДанные;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтатусовРабот

Функция ТекстЗапросаДанныеОшибок()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ошибки.Ссылка                                        КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                                         КАК Предмет,
	|	Ошибки.Наименование                                  КАК Представление,
	|	Ошибки.Статус                                        КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Статус)                         КАК ПредставлениеСтатуса,
	|	Ошибки.СрокОтработки                                 КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована)
	|			ТОГДА Ошибки.ДатаРегистрации
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана)
	|			ТОГДА Ошибки.ДатаРассмотрения
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена)
	|			ТОГДА Ошибки.ДатаИсправления
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена)
	|			ТОГДА Ошибки.ДатаПроверки
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПризнана)
	|			ТОГДА Ошибки.ДатаРассмотрения
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана)
	|			ТОГДА Ошибки.ДатаОтзыва
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта)
	|			ТОГДА Ошибки.ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка В (&Ошибки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеТехническихПроектов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка                КАК Ссылка,
	|	ТехническиеПроекты.Ссылка                КАК Предмет,
	|	ТехническиеПроекты.Наименование          КАК Представление,
	|	ТехническиеПроекты.Статус                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(ТехническиеПроекты.Статус) КАК ПредставлениеСтатуса,
	|	ТехническиеПроекты.ПлановаяДатаОкончания КАК СрокВыполнения,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса  КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ссылка В (&ТехническиеПроекты)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеЗадач()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                КАК Ссылка,
	|	ЗадачиПроцесса.Предмет               КАК Предмет,
	|	ЗадачиПроцесса.Наименование          КАК Представление,
	|	ЗадачиПроцесса.Статус                КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(ЗадачиПроцесса.Статус) КАК ПредставлениеСтатуса,
	|	ЗадачиПроцесса.КрайняяДатаОкончания  КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                                КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&Задачи)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеВеток()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ветки.Ссылка                 КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                 КАК Предмет,
	|	Ветки.Наименование           КАК Представление,
	|	Ветки.Статус                 КАК Статус,
	|	ПРЕДСТАВЛЕНИЕ(Ветки.Статус)  КАК ПредставлениеСтатуса,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)  КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Разрабатывается)
	|			ТОГДА Ветки.ДатаСоздания
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Тестируется)
	|			ТОГДА Ветки.ДатаНачалаТестирования
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена)
	|			ТОГДА Ветки.ДатаПомещения
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ                       КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	Ветки.Ссылка В (&Ветки)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстОбъединить()
	
	Возврат "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|"
	
КонецФункции

#КонецОбласти

#Область ПолучениеСтатусовРабот

Функция РезультатВыполненияРаспределенияЭтаповПланаЗанятостиПоНастройкамПриоритетовДляСотрудника(ПараметрыРаспределения)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успешно",              Ложь);
	РезультатВыполнения.Вставить("СообщениеПользователю", "");
	
	ВидПлана                                      = ПараметрыРаспределения.ВидПлана;
	Сотрудник                                     = ПараметрыРаспределения.Сотрудник;
	ДатаНачалаПериода                             = ПараметрыРаспределения.ДатаНачалаПериода;
	РаспределятьНачинаяС                          = ПараметрыРаспределения.РаспределятьНачинаяС;
	ЭтапыПриоритеты                               = ПараметрыРаспределения.Этапы;
	НормативПланируемогоВремени                   = ПараметрыРаспределения.НормативПланируемогоВремени;
	
	Попытка
		
		НачатьТранзакцию();
		
		Сотрудники = Новый Массив;
		Сотрудники.Добавить(Сотрудник);
		
		ДатаПоследнейЗаписи = РегистрыСведений.Планы.ПериодПоследнегоПланаСЗаписьюПоСотруднику(ВидПлана, Сотрудник, ДатаНачалаПериода);
		ДанныеВидаПлана     = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
		ТаблицаПланов       = ТаблицаПлановДляРаспределения(РаспределятьНачинаяС, ДатаПоследнейЗаписи , ДанныеВидаПлана);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляРаспределенияПланаЗанятостиПоНастройкамПриоритетовДляСотрудника();
		
		Запрос.УстановитьПараметр("ТаблицаПланов", ТаблицаПланов);
		Запрос.УстановитьПараметр("Сотрудник",     Сотрудник);
		
		УстановитьПривилегированныйРежим(Истина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		РезультатФормированияТаблицыЗаписейПлана = РезультатФормированияТаблицыЗаписейПлана(РезультатЗапроса);
		
		ТаблицаЗаписейПлана = РезультатРаспределенияВТаблицеЗаписейПлана(РезультатФормированияТаблицыЗаписейПлана,
		                                                                 НормативПланируемогоВремени, 
		                                                                 ЭтапыПриоритеты);
		
		ОтразитьВРегистреТаблицыЗаписейПлана(ТаблицаЗаписейПлана, ВидПлана, Сотрудник);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при распределении плановых трудозатрат по участнику %1 по причине:
			     |%2'"), 
			Сотрудник, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Распределение в плане занятости'"), УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ЗаписиПлана, , ТекстСообщения);
		
		РезультатВыполнения.СообщениеПользователю = ТекстСообщения;
		Возврат РезультатВыполнения;
	
	КонецПопытки;
	
	РезультатВыполнения.Успешно = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ОтразитьВРегистреТаблицыЗаписейПлана(ТаблицаЗаписейПлана, ВидПлана, Сотрудник) 
	
	Для ИндексТекущейКолонки = 1 По ТаблицаЗаписейПлана.Колонки.Количество() -1 Цикл
		
		ИмяТекущейКолонки = ТаблицаЗаписейПлана.Колонки[ИндексТекущейКолонки].Имя;
		ИдентификаторПлана = ИдентификаторПланаПоИмениКолонкиПлановыеТрудозатраты(ИмяТекущейКолонки);
		
		НаборЗаписей = РегистрыСведений.ЗаписиПлана.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ИдентификаторПлана.Установить(ИдентификаторПлана);
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		НаборЗаписей.Отбор.ТипСтрокиПлана.Установить(Перечисления.ТипыСтрокПлана.Работа);
		
		Для Каждого СтрокаТаблицы Из ТаблицаЗаписейПлана Цикл
			
			Если СтрокаТаблицы[ИмяТекущейКолонки] > 0 Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ИдентификаторПлана      = ИдентификаторПлана;
				ЗаписьНабора.Сотрудник               = Сотрудник;
				ЗаписьНабора.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
				ЗаписьНабора.Работа                  = СтрокаТаблицы.Работа;
				
				ЗаписьНабора.ПланируемыеТрудозатраты = СтрокаТаблицы[ИмяТекущейКолонки];
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаПлановДляРаспределения(ДатаНачалаПериода, ДатаОкончанияПериода , ДанныеВидаПлана)
	
	ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
	ПараметрыПолученияПлановПоПериоду.ВидПлана              = ДанныеВидаПлана.ВидПлана;
	ПараметрыПолученияПлановПоПериоду.ДатаНачала            = ДатаНачалаПериода;
	ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = ДанныеВидаПлана.ВсеНастройкиПланирования[0];
	ПараметрыПолученияПлановПоПериоду.ДатаОкончания         = ДатаОкончанияПериода;
	
	ТаблицаПланов =  Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
	
	Возврат ТаблицаПланов;
	
КонецФункции 

Функция ТекстЗапросаДляРаспределенияПланаЗанятостиПоНастройкамПриоритетовДляСотрудника()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ТаблицаПланов.НачалоПериода      КАК ДатаНачала,
	|	ТаблицаПланов.КонецПериода       КАК ДатаОкончания,
	|	ТаблицаПланов.Зафиксирован       КАК Зафиксирован
	|ПОМЕСТИТЬ ТаблицаПланов
	|ИЗ
	|	&ТаблицаПланов КАК ТаблицаПланов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПланов.ИдентификаторПлана    КАК ИдентификаторПлана,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЗаписиПлана.Работа                  КАК Работа
	|ИЗ
	|	ТаблицаПланов КАК ТаблицаПланов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ТаблицаПланов.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана
	|			И (ЗаписиПлана.Сотрудник = &Сотрудник)
	|ИТОГИ ПО
	|	ИдентификаторПлана,
	|	Работа";
	
КонецФункции 

Функция РезультатФормированияТаблицыЗаписейПлана(РезультатЗапроса)
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ТаблицаЗаписейПлана");
	РезультатФормирования.Вставить("РаботыСтрокиТаблицы");
	
	МассивТиповРабот = Новый Массив;
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.ВидыДеятельности"));
	МассивТиповРабот.Добавить(Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана"));
	
	ТаблицаЗаписейПлана = Новый ТаблицаЗначений;
	ТаблицаЗаписейПлана.Колонки.Добавить("Работа", Новый ОписаниеТипов(МассивТиповРабот));
	
	РаботыСтрокиТаблицы = Новый Соответствие;
	
	ВыборкаИдентификаторы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаИдентификаторы.Следующий() Цикл
		
		ИмяКолонкиИдентификаторПлана = ИмяДобавленнойКолонкиЗаписейПлана(ТаблицаЗаписейПлана, ВыборкаИдентификаторы.ИдентификаторПлана);
		
		ВыборкаРаботы = ВыборкаИдентификаторы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаРаботы.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаРаботы.Работа) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРаботы = СтрокаЭтапаТаблицыЗаписейПлана(ВыборкаРаботы.Работа, ТаблицаЗаписейПлана, РаботыСтрокиТаблицы);
			
			ВыборкаДетали = ВыборкаРаботы.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				СтрокаРаботы[ИмяКолонкиИдентификаторПлана] = ВыборкаДетали.ПланируемыеТрудозатраты;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатФормирования.ТаблицаЗаписейПлана = ТаблицаЗаписейПлана;
	РезультатФормирования.РаботыСтрокиТаблицы = РаботыСтрокиТаблицы;
	
	Возврат РезультатФормирования;
	
КонецФункции

Функция РезультатРаспределенияВТаблицеЗаписейПлана(РезультатФормированияТаблицыЗаписейПлана,
	                                               НормативПланируемогоВремени, 
	                                               ЭтапыПриоритеты)
	
	ТаблицаЗаписейПлана = РезультатФормированияТаблицыЗаписейПлана.ТаблицаЗаписейПлана;
	РаботыСтрокиТаблицы = РезультатФормированияТаблицыЗаписейПлана.РаботыСтрокиТаблицы;
	
	ДобавитьНераспределеноВПервыйПериодТаблицы(ТаблицаЗаписейПлана, 
	                                           ЭтапыПриоритеты,
	                                           РаботыСтрокиТаблицы);
	
	ПривестиРаспределениеВСоответствиеНормативуПоТекущимЗаписям(ТаблицаЗаписейПлана,
	                                                            РаботыСтрокиТаблицы, 
	                                                            НормативПланируемогоВремени,
	                                                            ЭтапыПриоритеты);
	
	Возврат ТаблицаЗаписейПлана;
	
КонецФункции

 Процедура ПривестиРаспределениеВСоответствиеНормативуПоТекущимЗаписям(ТаблицаЗаписейПлана,
	                                                                  РаботыСтрокиТаблицы,
	                                                                  НормативПланируемогоВремени,
	                                                                  ЭтапыПриоритеты) 
	
	ПриоритетыРаботПоВозрастанию = Новый Массив;
	Для Каждого ЭтапПриоритет Из ЭтапыПриоритеты Цикл
		Если ЭтапПриоритет.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Изменять
			Или ЭтапПриоритет.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ОчиститьИПерераспределить Тогда
			ПриоритетыРаботПоВозрастанию.Вставить(0, ЭтапПриоритет.Этап);
		КонецЕсли;
	КонецЦикла;

	ТекущийИндексКолонки = 1;
	
	Пока Истина Цикл
		
		ИмяТекущейКолонки = ТаблицаЗаписейПлана.Колонки[ТекущийИндексКолонки].Имя;
		УжеЗапланированоВПериоде = ТаблицаЗаписейПлана.Итог(ИмяТекущейКолонки);
		
		ПревышениеНорматива = УжеЗапланированоВПериоде - НормативПланируемогоВремени;
		
		Если ПревышениеНорматива > 0 Тогда
			
			Для Каждого Этап Из ПриоритетыРаботПоВозрастанию Цикл
				
				СтрокаРаспределяемогоЭтапа = СтрокаЭтапаТаблицыЗаписейПлана(Этап, ТаблицаЗаписейПлана, РаботыСтрокиТаблицы);
				
				ЗапланированоПоЭтапу = СтрокаРаспределяемогоЭтапа[ИмяТекущейКолонки];
				
				Если ЗапланированоПоЭтапу > 0 Тогда
					
					ПеренестиВСледующийПериод = Мин(ЗапланированоПоЭтапу, ПревышениеНорматива);
					ПеренестиПланируемыеТрудозатратыПоРаботеВСледующийПериод(ТаблицаЗаписейПлана,
					                                                         ИмяТекущейКолонки, 
					                                                         ТекущийИндексКолонки, 
					                                                         СтрокаРаспределяемогоЭтапа, 
					                                                         ПеренестиВСледующийПериод);
					
					ПревышениеНорматива = ПревышениеНорматива - ПеренестиВСледующийПериод;
					
				КонецЕсли;
				
				Если ПревышениеНорматива <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекущийИндексКолонки = ТекущийИндексКолонки + 1;
		Если ТекущийИндексКолонки = ТаблицаЗаписейПлана.Колонки.Количество() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНераспределеноВПервыйПериодТаблицы(ТаблицаЗаписейПлана, ЭтапыПриоритеты, РаботыСтрокиТаблицы)
	
	Для Каждого ЭтапНераспределено Из ЭтапыПриоритеты Цикл
		
		Если ЭтапНераспределено.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать Тогда
			
			СтрокаЭтапа = СтрокаЭтапаТаблицыЗаписейПлана(ЭтапНераспределено.Этап, ТаблицаЗаписейПлана, РаботыСтрокиТаблицы);
			Для Инд = 1 По ТаблицаЗаписейПлана.Колонки.Количество() -1 Цикл
				
				СтрокаЭтапа[ТаблицаЗаписейПлана.Колонки[Инд].Имя] = 0;
				
			КонецЦикла;
			
		ИначеЕсли ЭтапНераспределено.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ОчиститьИПерераспределить Тогда
			
			СтрокаЭтапа = СтрокаЭтапаТаблицыЗаписейПлана(ЭтапНераспределено.Этап, ТаблицаЗаписейПлана, РаботыСтрокиТаблицы);
			
			Для Инд = 1 По ТаблицаЗаписейПлана.Колонки.Количество() -1 Цикл
				
				ЭтапНераспределено.Нераспределено = ЭтапНераспределено.Нераспределено + СтрокаЭтапа[ТаблицаЗаписейПлана.Колонки[Инд].Имя];
				СтрокаЭтапа[ТаблицаЗаписейПлана.Колонки[Инд].Имя] = 0;
				
			КонецЦикла;
			
			ИмяТекущейКолонки = ТаблицаЗаписейПлана.Колонки[1].Имя;
			СтрокаЭтапа[ИмяТекущейКолонки] = СтрокаЭтапа[ИмяТекущейКолонки] + ЭтапНераспределено.Нераспределено;
			
		ИначеЕсли ЭтапНераспределено.Нераспределено > 0
			И ЭтапНераспределено.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Изменять Тогда 
			
			ИмяТекущейКолонки =  ТаблицаЗаписейПлана.Колонки[1].Имя;
			
			СтрокаЭтапа = СтрокаЭтапаТаблицыЗаписейПлана( ЭтапНераспределено.Этап, ТаблицаЗаписейПлана, РаботыСтрокиТаблицы);
			
			СтрокаЭтапа[ИмяТекущейКолонки] = СтрокаЭтапа[ИмяТекущейКолонки] + ЭтапНераспределено.Нераспределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПеренестиПланируемыеТрудозатратыПоРаботеВСледующийПериод(ТаблицаЗаписейПлана,
	                                                               ИмяТекущейКолонки,
	                                                               ИндексТекущейКолонки,
	                                                               СтрокаРаспределяемогоЭтапа,
	                                                               ПеренестиВСледующийПериод)
	
	ДанныеСледующейКолонки = ДанныеСледующейКолонкиТаблицаЗаписейПлана(ТаблицаЗаписейПлана, ИндексТекущейКолонки);
	
	СтрокаРаспределяемогоЭтапа[ИмяТекущейКолонки] = СтрокаРаспределяемогоЭтапа[ИмяТекущейКолонки] - ПеренестиВСледующийПериод;
	СтрокаРаспределяемогоЭтапа[ДанныеСледующейКолонки.ИмяКолонки] = СтрокаРаспределяемогоЭтапа[ДанныеСледующейКолонки.ИмяКолонки] + ПеренестиВСледующийПериод;
	
КонецПроцедуры

Функция СтрокаЭтапаТаблицыЗаписейПлана(Этап, ТаблицаЗаписейПлана, РаботыСтрокиТаблицы)
	
	СтрокаТаблицыЗаписиПлана = РаботыСтрокиТаблицы.Получить(Этап);
	Если СтрокаТаблицыЗаписиПлана = Неопределено Тогда
		СтрокаТаблицыЗаписиПлана =  ТаблицаЗаписейПлана.Добавить();
		СтрокаТаблицыЗаписиПлана.Работа = Этап;
		РаботыСтрокиТаблицы.Вставить(Этап, СтрокаТаблицыЗаписиПлана);
	КонецЕсли;
	
	Возврат СтрокаТаблицыЗаписиПлана;
	
КонецФункции

Функция ДанныеСледующейКолонкиТаблицаЗаписейПлана(ТаблицаЗаписейПлана, ИндексТекущейКолонки)
	
	ДанныеСледующейКолонки = Новый Структура;
	ДанныеСледующейКолонки.Вставить("ИндексКолонки", Неопределено);
	ДанныеСледующейКолонки.Вставить("ИмяКолонки",    "");
	
	Если Не (ТаблицаЗаписейПлана.Колонки.Количество() > ИндексТекущейКолонки + 1) Тогда
		
		ИмяТекущейКолонки          = ИмяКолонкиТаблицыЗаписейПланаПоИндексу(ТаблицаЗаписейПлана, ИндексТекущейКолонки);
		ИдентификаторТекущегоПлана = ИдентификаторПланаПоИмениКолонкиПлановыеТрудозатраты(ИмяТекущейКолонки);
		
		ДанныеТекущегоПлана   = РегистрыСведений.Планы.ДанныеПланаПоИдентификатору(ИдентификаторТекущегоПлана);
		ДанныеСледующегоПлана = Справочники.ВидыПланов.СледующийСоставляемыйПлан(ДанныеТекущегоПлана.ВидПлана, ДанныеТекущегоПлана.КонецПериода, Истина);
		
		ИмяДобавленнойКолонкиЗаписейПлана(ТаблицаЗаписейПлана, ДанныеСледующегоПлана.ИдентификаторПлана);
		
	КонецЕсли;
	
	ДанныеСледующейКолонки.ИндексКолонки = ИндексТекущейКолонки + 1;
	ДанныеСледующейКолонки.ИмяКолонки    = ТаблицаЗаписейПлана.Колонки[ДанныеСледующейКолонки.ИндексКолонки].Имя;
	
	Возврат ДанныеСледующейКолонки;
	
КонецФункции

Функция ИмяКолонкиТаблицыЗаписейПланаПоИндексу(ТаблицаЗаписейПлана, ИндексКолонки)
	
	Возврат ТаблицаЗаписейПлана.Колонки[ИндексКолонки].Имя;
	
КонецФункции

Функция ИдентификаторПланаПоИмениКолонкиПлановыеТрудозатраты(ИмяКолонки)
	
	Возврат Число(Прав(ИмяКолонки, СтрДлина(ИмяКолонки) - СтрДлина("ПлановыеТрудозатраты_")));
	
КонецФункции

Функция ИмяКолонкиПлановыеТрудозатраты(ИдентификаторПлана)
	
	ИдентификаторПланаСтрокой = ПланированиеКлиентСервер.ИдентификаторПланаСтрокой(ИдентификаторПлана);
	
	Возврат "ПлановыеТрудозатраты_" + ИдентификаторПланаСтрокой;
	
КонецФункции

Функция ИмяДобавленнойКолонкиЗаписейПлана(ТаблицаЗаписейПлана, ИдентификаторПлана)
	
	ИмяКолонкиИдентификаторПлана = ИмяКолонкиПлановыеТрудозатраты(ИдентификаторПлана);
	
	ТаблицаЗаписейПлана.Колонки.Добавить(ИмяКолонкиИдентификаторПлана, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 1)));
	
	Возврат ИмяКолонкиИдентификаторПлана;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанныхЭтаповСотрудникаКРаспределению 

Функция ПодготовленныеДанныеЭтаповСотрудникаКРаспределению(ПараметрыПолученияДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодготовкаДанныхЭтаповСотрудникаКРаспределению(); 
	
	Запрос.УстановитьПараметр("ВидПлана",                                 ПараметрыПолученияДанных.ВидПлана);
	Запрос.УстановитьПараметр("ПустаяДата",                               Дата(1,1,1));
	Запрос.УстановитьПараметр("ДатаНачалаПериода",                        ПараметрыПолученияДанных.ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаНачалаНепланировавшихсяЭтапов",        ДатаНачалаНепланировавшихсяЭтапов(ПараметрыПолученияДанных.ДатаНачалаПериода));
	Запрос.УстановитьПараметр("ДатаОкончанияНепланировавшихсяЭтапов",     ДатаОкончанияНепланировавшихсяЭтапов(ПараметрыПолученияДанных.ДатаНачалаПериода));
	Запрос.УстановитьПараметр("Сотрудник",                                ПараметрыПолученияДанных.Сотрудник);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПараметрыПолученияДанных.ПороговоеЗначениеДляЭтапаПоЗапланировано);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоФакт",          ПараметрыПолученияДанных.ПороговоеЗначениеДляЭтапаПоФакт * 3600);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурсаПлановыхРабот",      ПараметрыПолученияДанных.ВидСогласуемогоРесурсаПлановыхРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодготовленныеДанные = РезультатОбработкиЗапросаПодготовкаДанныхЭтапаСотрудникаКРаспределению(РезультатЗапроса); 
	
	Возврат ПодготовленныеДанные
	
КонецФункции

Функция РезультатОбработкиЗапросаПодготовкаДанныхЭтапаСотрудникаКРаспределению(РезультатЗапроса)
	
	ПодготовленныеЭтапы = НовыйТаблицаПодготовленныеЭтапыСотрудникаКРаспределению();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПодготовленныеЭтапы;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПодготовленныеЭтапы.Добавить();
		
		Если ТипЗнч(Выборка.Этап) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
			
			НоваяСтрока.Этап              = Перечисления.ТипыГруппировокСтрокПлана.ПустаяСсылка();
			НоваяСтрока.ТехническийПроект = Выборка.Этап;
			
		ИначеЕсли ТипЗнч(Выборка.Этап) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			НоваяСтрока.Этап              = Справочники.ЗадачиПроцесса.ПустаяСсылка();
			НоваяСтрока.ТехническийПроект = Выборка.ТехПроект;
			
		Иначе
			
			НоваяСтрока.Этап              = Выборка.Этап;
			НоваяСтрока.ТехническийПроект = Выборка.ТехПроект;
			
		КонецЕсли;
			
		НоваяСтрока.Версия            = Выборка.Версия;
		НоваяСтрока.Статус            = Выборка.Статус;
		НоваяСтрока.ДатаНачала        = ?(ТипЗнч(Выборка.Этап) = Тип("СправочникСсылка.ТехническиеПроекты"), Выборка.ПлановаяДатаНачалаТехПроект, Выборка.ПлановаяДатаНачалаЗадача);
		НоваяСтрока.ДатаОкончания     = ?(ТипЗнч(Выборка.Этап) = Тип("СправочникСсылка.ТехническиеПроекты"), Выборка.ПлановаяДатаОкончанияТехПроект, Выборка.КрайняяДатаОкончанияЗадача) ;
		НоваяСтрока.Нераспределено    = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(Выборка.Нераспределено);
		НоваяСтрока.Запланировано     = Выборка.ПланируемыеТрудозатраты;
		НоваяСтрока.ВПланахС          = Выборка.ПерваяДатаПланаПоЭтапу;
		НоваяСтрока.ВПланахПо         = Выборка.ПоследняяДатаПланаПоЭтапу;
		НоваяСтрока.ЧтоДелать         = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Изменять;
		
	КонецЦикла;
	
	Возврат ПодготовленныеЭтапы;
	
КонецФункции

Функция НовыйТаблицаПодготовленныеЭтапыСотрудникаКРаспределению()
	
	Статусы = Новый Массив;
	Статусы.Добавить(Тип("ПеречислениеСсылка.СтатусыЗадачПроцессов"));
	Статусы.Добавить(Тип("ПеречислениеСсылка.СтатусыТехническихПроектов")); 
	
	ТипыЭтапа = Новый Массив;
	Статусы.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	Статусы.Добавить(Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана"));
	
	
	ТипыТехПроект = Новый Массив;
	Статусы.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	Статусы.Добавить(Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана")); 
	
	ОписаниеТипаДата    = Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТипаЧисло61 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 1));
	
	ПодготовленныеЭтапы = Новый ТаблицаЗначений;
	
	ПодготовленныеЭтапы.Колонки.Добавить("Этап",              Новый ОписаниеТипов(ТипыЭтапа));
	ПодготовленныеЭтапы.Колонки.Добавить("ТехническийПроект", Новый ОписаниеТипов(ТипыТехПроект));
	ПодготовленныеЭтапы.Колонки.Добавить("Версия",            Новый ОписаниеТипов("СправочникСсылка.ВерсииПроекта"));
	ПодготовленныеЭтапы.Колонки.Добавить("Статус",            Новый ОписаниеТипов(Статусы));
	ПодготовленныеЭтапы.Колонки.Добавить("ДатаНачала",        ОписаниеТипаДата);
	ПодготовленныеЭтапы.Колонки.Добавить("ДатаОкончания",     ОписаниеТипаДата);
	ПодготовленныеЭтапы.Колонки.Добавить("Нераспределено",    ОписаниеТипаЧисло61);
	ПодготовленныеЭтапы.Колонки.Добавить("Запланировано",     ОписаниеТипаЧисло61);
	ПодготовленныеЭтапы.Колонки.Добавить("ВПланахС",          ОписаниеТипаДата);
	ПодготовленныеЭтапы.Колонки.Добавить("ВПланахПо",         ОписаниеТипаДата);
	ПодготовленныеЭтапы.Колонки.Добавить("ЧтоДелать",         Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРаспределенияРаботПланЗанятости"));
	
	Возврат ПодготовленныеЭтапы;
	
КонецФункции

Функция ТекстЗапросаПодготовкаДанныхЭтаповСотрудникаКРаспределению()
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиПлана.Сотрудник КАК Сотрудник,
	|	ЗаписиПлана.Работа    КАК Работа 
	|ПОМЕСТИТЬ ЭтапыПоКоторымЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|				И Планы.ВидПлана = &ВидПлана
	|				И Планы.НачалоПериода >= &ДатаНачалаПериода)
	|	ГДЕ ЗаписиПлана.Сотрудник = &Сотрудник 
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка                         КАК Задача,
	|	ИерархияЗадачПроцесса.Родитель                КАК Родитель
	|ПОМЕСТИТЬ НевыполненныеЗадачиЭтапов
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ИерархияЗадачПроцесса.Уровень = 0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = &Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		И НЕ ТехническиеПроекты.ПометкаУдаления
	|		И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	| 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь                    КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка                                            КАК Задача,
	|	ИерархияЗадачПроцесса.Родитель                                   КАК Родитель
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ИерархияЗадачПроцесса.Уровень = 0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = &Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ошибки КАК Ошибки
	|		ПО ЗадачиПроцесса.Предмет = Ошибки.Ссылка
	|		И НЕ Ошибки.ПометкаУдаления
	|		И Ошибки.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача,
	|	Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НевыполненныеЗадачиЭтапов.Исполнитель                            КАК Исполнитель,
	|	НевыполненныеЗадачиЭтапов.Родитель                               КАК Родитель,
	|	СУММА(ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0))  КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                     КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаЗапланированоУчетВремени
	|ИЗ
	|	НевыполненныеЗадачиЭтапов КАК НевыполненныеЗадачиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО (ЗадачиЗапланированоПоСотрудникам.Задача = НевыполненныеЗадачиЭтапов.Задача)
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = НевыполненныеЗадачиЭтапов.Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = НевыполненныеЗадачиЭтапов.Задача)
	|			И (УчетВремени.Пользователь = НевыполненныеЗадачиЭтапов.Исполнитель)
	|			И (УчетВремени.Период < &ДатаНачалаПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	НевыполненныеЗадачиЭтапов.Родитель,
	|	НевыполненныеЗадачиЭтапов.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель                КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет Ссылка Справочник.Ошибки 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка) 
	|			ТОГДА ЗадачиПроцесса.Предмет 
	|		ИНАЧЕ ЭтапыСотрудникаЗапланированоУчетВремени.Родитель
	|	КОНЕЦ                                                              КАК Этап,
	|	СУММА(ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано)       КАК Запланировано,
	|	СУММА(ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды)  КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланах
	|ИЗ
	|	ЭтапыСотрудникаЗапланированоУчетВремени КАК ЭтапыСотрудникаЗапланированоУчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЭтапыСотрудникаЗапланированоУчетВремени.Родитель = ЗадачиПроцесса.Ссылка) 
	|ГДЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|	ИЛИ ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет Ссылка Справочник.Ошибки 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка) 
	|			ТОГДА ЗадачиПроцесса.Предмет 
	|		ИНАЧЕ ЭтапыСотрудникаЗапланированоУчетВремени.Родитель
	|	 КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Сотрудник КАК Сотрудник,
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка                          КАК Задача,
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь  КАК ИсполнительЗадачи
	|ПОМЕСТИТЬ ЗадачиЭтапов
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ИерархияЗадачПроцесса.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО (ЗадачиЗапланированоПоСотрудникам.Задача = ЗадачиПроцесса.Ссылка)
	|			И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = &Сотрудник
	|ГДЕ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Сотрудник КАК Сотрудник,
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап      КАК Этап,
	|	ЗадачиПроцесса.Ссылка                          КАК Задача,
	|	ЗадачиПроцесса.Исполнитель                     КАК ИсполнительЗадачи
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаЭтапы
	|			ПО (ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗадачиПроцессаЭтапы.Предмет) 
	|			И ЗадачиПроцессаЭтапы.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|				И ЗадачиПроцессаЭтапы.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцессаЭтапы.Ссылка = ИерархияЗадачПроцесса.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ТехническиеПроекты
	|	И ЗадачиПроцесса.Исполнитель = &Сотрудник
	| 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиПроцессаЭтапы.Исполнитель                                   КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)  КАК Этап,
	|	ЗадачиПроцессаЭтапы.Ссылка                                        КАК Задача,
	|	ЗадачиПроцессаЭтапы.Исполнитель                                   КАК ИсполнительЗадачи
	|ИЗ
	| Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаЭтапы
	|ГДЕ
	|	ЗадачиПроцессаЭтапы.Предмет ССЫЛКА Справочник.Ошибки
	|	И ЗадачиПроцессаЭтапы.Исполнитель = &Сотрудник
	|	И НЕ ЗадачиПроцессаЭтапы.ПометкаУдаления
	|	И ЗадачиПроцессаЭтапы.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                                    КАК Сотрудник,
	|	ЗадачиЭтапов.Этап                                         КАК Этап,
	|	ЗадачиЭтапов.Задача                                       КАК Задача,
	|	ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0)  КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЭтапов.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &ДатаНачалаПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиЭтапов.Задача = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И (ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот)
	|			И  ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                       КАК Сотрудник,
	|	ЗадачиЭтапов.Этап                            КАК Этап,
	|	ЗадачиЭтапов.Задача                          КАК Задача,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК Длительность
	|ПОМЕСТИТЬ ПотраченоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|			ПО ЗадачиЗапланированоПоСотрудникам.Задача      = ЗадачиЭтапов.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &ДатаНачалаНепланировавшихсяЭтапов
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = УчетВремени.Задача
	|			И УчетВремени.Пользователь = ЗадачиЗапланированоПоСотрудникам.Пользователь
	|			И УчетВремени.Период < &ДатаНачалаНепланировавшихсяЭтапов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиЭтапов.Сотрудник,
	|	ЗадачиЭтапов.Этап,
	|	ЗадачиЭтапов.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////7
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапланированоПоЗадачам.Сотрудник КАК Сотрудник,
	|	ЗапланированоПоЗадачам.Этап      КАК Этап,
	|	СУММА(ВЫБОР
	|			КОГДА ЗапланированоПоЗадачам.Запланировано * 3600 > ПотраченоПоЗадачам.Длительность
	|				ТОГДА ЗапланированоПоЗадачам.Запланировано * 3600 - ПотраченоПоЗадачам.Длительность
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|ПОМЕСТИТЬ ОстатокКРаспределению
	|ИЗ
	|	ЗапланированоПоЗадачам КАК ЗапланированоПоЗадачам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотраченоПоЗадачам КАК ПотраченоПоЗадачам
	|		ПО ЗапланированоПоЗадачам.Сотрудник = ПотраченоПоЗадачам.Сотрудник
	|			И ЗапланированоПоЗадачам.Этап = ПотраченоПоЗадачам.Этап
	|			И ЗапланированоПоЗадачам.Задача = ПотраченоПоЗадачам.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапланированоПоЗадачам.Сотрудник,
	|	ЗапланированоПоЗадачам.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////8
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(Планы.КонецПериода)  КАК ПланируемыеТрудозатраты	
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода >= &ДатаНачалаПериода)
	|ГДЕ
	|	ЗаписиПлана.Сотрудник = &Сотрудник
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////9
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	МИНИМУМ(Планы.НачалоПериода)               КАК НачалоПериода,
	|	МАКСИМУМ(Планы.КонецПериода)               КАК КонецПериода,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты,
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап  КАК Этап
	|ПОМЕСТИТЬ ЗапланированоПланыЗанятости
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗаписиПлана.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода >= &ДатаНачалаПериода)
	|ГДЕ
	|	ЗаписиПлана.Сотрудник = &Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////10
	|ВЫБРАТЬ
	|	ОстатокКРаспределению.Этап                                                                              КАК Этап,
	|	ОстатокКРаспределению.Остаток - ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты * 3600, 0) КАК Нераспределено
	|ПОМЕСТИТЬ НераспределенныеЭтапы
	|ИЗ
	|	ОстатокКРаспределению КАК ОстатокКРаспределению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятости КАК ЗапланированоПланыЗанятости
	|		ПО ОстатокКРаспределению.Этап = ЗапланированоПланыЗанятости.Этап
	|ГДЕ
	|	ОстатокКРаспределению.Остаток - ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты * 3600, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////11
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Этап                                                  КАК Этап,
	|	ЕСТЬNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)) КАК Статус,
	|	ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, &ПустаяДата)                                   КАК ПлановаяДатаНачалаЗадача,
	|	ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, &ПустаяДата)                                 КАК КрайняяДатаОкончанияЗадача,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.НачалоПериода, &ДатаНачалаНепланировавшихсяЭтапов)    КАК ПерваяДатаПланаПоЭтапу,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.КонецПериода, &ДатаОкончанияНепланировавшихсяЭтапов)  КАК ПоследняяДатаПланаПоЭтапу,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты, 0)                           КАК ПланируемыеТрудозатраты,
	|	ЕСТЬNULL(НераспределенныеЭтапы.Нераспределено, 0)                                          КАК Нераспределено,
	|	ВЫБОР
	|		КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|		ТОГДА ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка))
	|		ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|	КОНЕЦ                                                                                      КАК ТехПроект,
	|	ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Версия, ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Версия
	|	КОНЕЦ                                                                                      КАК Версия,
	|	ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаОкончания, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаОкончания
	|	КОНЕЦ                                                                                      КАК ПлановаяДатаОкончанияТехПроект,
	|	ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Этап ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаНачала, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаНачала
	|	КОНЕЦ                                                                                       КАК ПлановаяДатаНачалаТехПроект,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)                                 КАК ЗначениеУпорядочивания
	|ИЗ
	|		ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗадачиПроцесса.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыБезШаблона
	|			ПО (ЭтапыСотрудникаДляОтображенияВПланах.Этап = ТехническиеПроектыЭтапыБезШаблона.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = СостоянияЗадачПроцессов.ЗадачаПроцесса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятости КАК ЗапланированоПланыЗанятости
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = ЗапланированоПланыЗанятости.Этап
	|			ЛЕВОЕ СОЕДИНЕНИЕ НераспределенныеЭтапы КАК НераспределенныеЭтапы
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Этап = НераспределенныеЭтапы.Этап
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяДатаПланаПоЭтапу,
	|	ПланируемыеТрудозатраты,
	|	ЗначениеУпорядочивания";
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанныхВидовДеятельностиСотрудникаКИзменению 

Функция ПодготовленныеДанныеВидовДеятельностиСотрудникаКИзменению(ПараметрыПодготовки) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодготовкаДанныхВидовДеятельностиКИзменению();
	
	Запрос.УстановитьПараметр("ВидПлана",      ПараметрыПодготовки.ВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПараметрыПодготовки.ДатаНачалаПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыПодготовки.ДатаОкончанияПериода));
	Запрос.УстановитьПараметр("Сотрудник",     ПараметрыПодготовки.Сотрудник);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	ПодготовленныеДанные = РезультатОбработкиЗапросаПодготовкаВидовДеятельностиКИзменению(РезультатЗапроса, ПараметрыПодготовки); 
	
	Возврат ПодготовленныеДанные;
	
КонецФункции 

Функция ТекстЗапросаПодготовкаДанныхВидовДеятельностиКИзменению()
	
	Возврат "
	|ВЫБРАТЬ
	|	ЗаписиПлана.Работа                         КАК Работа,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|			И (Планы.НачалоПериода >= &НачалоПериода)
	|			И (Планы.КонецПериода <= &КонецПериода)
	|			И (Планы.ВидПлана = &ВидПлана)
	|ГДЕ
	|	ЗаписиПлана.Сотрудник = &Сотрудник
	|	И ЗаписиПлана.Работа Ссылка Справочник.ВидыДеятельности
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиПлана.Работа";
	 
КонецФункции

Функция РезультатОбработкиЗапросаПодготовкаВидовДеятельностиКИзменению(РезультатЗапроса, ПараметрыПодготовки)
	
	ПодготовленныеДанные = НовыйТаблицаПодготовленныеВидыДеятельностиКИзменению();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПодготовленныеДанные;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ПодготовленныеДанные.Добавить();
		НоваяСтрока.ВидДеятельности = Выборка.Работа;
		НоваяСтрока.Среднее         = Выборка.ПланируемыеТрудозатраты / ПараметрыПодготовки.КоличествоПериодов;
		НоваяСтрока.Всего           = Выборка.ПланируемыеТрудозатраты;
		НоваяСтрока.ЧтоДелать       = Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять;
		
	КонецЦикла;
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция НовыйТаблицаПодготовленныеВидыДеятельностиКИзменению()
	
	ОписаниеТипаЧисло61 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 1));
	
	ПодготовленныеВидыДеятельнсти = Новый ТаблицаЗначений;
	
	ПодготовленныеВидыДеятельнсти.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельности"));
	ПодготовленныеВидыДеятельнсти.Колонки.Добавить("Среднее",         ОписаниеТипаЧисло61);
	ПодготовленныеВидыДеятельнсти.Колонки.Добавить("Всего",           ОписаниеТипаЧисло61);
	ПодготовленныеВидыДеятельнсти.Колонки.Добавить("ЧтоДелать",       Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРаспределенияРаботПланЗанятости"));
	ПодготовленныеВидыДеятельнсти.Колонки.Добавить("НовоеЗначение",   ОписаниеТипаЧисло61);
	
	Возврат ПодготовленныеВидыДеятельнсти;
	
КонецФункции

#КонецОбласти

#Область ИзменениеДанныхВидовДеятельностиСотрудника 

Функция РезультатИзмененияДанныхВидовДеятельностиСотрудникаКИзменению(ПараметрыИзменения)
	
	Результат = РезультатИзмененияВидовДеятельностиСотрудника(ПараметрыИзменения);

	Возврат ПодготовленныеДанныеВидовДеятельностиСотрудникаКИзменению(ПараметрыИзменения)
	
КонецФункции 

Функция РезультатИзмененияВидовДеятельностиСотрудника(ПараметрыИзменения)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успешно",              Ложь);
	РезультатВыполнения.Вставить("СообщениеПользователю", "");
	
	ВидПлана = ПараметрыИзменения.ВидПлана;
	Сотрудник            = ПараметрыИзменения.Сотрудник;
	ДатаНачалаПериода    = ПараметрыИзменения.ДатаНачалаПериода;
	ДатаОкончанияПериода = ПараметрыИзменения.ДатаОкончанияПериода;
	
	ИзменяемыеВидыДеятельности = Новый Массив;
	Для Каждого ДанныеВидаДеятельности Из ПараметрыИзменения.ВидыДеятельности Цикл
		
		ИзменяемыеВидыДеятельности.Добавить(ДанныеВидаДеятельности.Ключ);
		
	КонецЦикла;
	
	Попытка
		
		НачатьТранзакцию();
		
		ДанныеВидаПлана          = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
		ТаблицаПланов            = ТаблицаПлановДляРаспределения(ДатаНачалаПериода, ДатаОкончанияПериода , ДанныеВидаПлана);
		ТаблицаВидовДеятельности = НовыйТаблицыВидовДеятельностиДляИзменения(ТаблицаПланов);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляИзмененияВидовДеятельности();
		
		Запрос.УстановитьПараметр("ТаблицаПланов", ТаблицаПланов);
		Запрос.УстановитьПараметр("ИзменяемыеВидыДеятельности", ИзменяемыеВидыДеятельности); 
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаВидыДеятельности = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидыДеятельности.Следующий() Цикл
			
			ДанныеВидаДеятельности = ПараметрыИзменения.ВидыДеятельности.Получить(ВыборкаВидыДеятельности.Работа);
			Если ДанныеВидаДеятельности = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаВидовДеятельности.Добавить();
			НоваяСтрока.ВидДеятельности = ВыборкаВидыДеятельности.Работа;
			НоваяСтрока.ЧтоДелать       = ДанныеВидаДеятельности.ЧтоДелать;
			НоваяСтрока.НовоеЗначение   = ДанныеВидаДеятельности.НовоеЗначение;
			
			ВыборкаДатаНачала = ВыборкаВидыДеятельности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДатаНачала.Следующий() Цикл
				
				ВыборкаДетали = ВыборкаДатаНачала.Выбрать();
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					НоваяСтрока[ИмяКолонкиПлановыеТрудозатраты(ВыборкаДетали.ИдентификаторПлана)] = ВыборкаДетали.ПланируемыеТрудозатраты;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ИзменитьДанныеВидовДеятельностиВТаблице(ТаблицаВидовДеятельности);
		ВыполнитьЗаписьВРегистрПоТаблицеВидовДеятельности(ВидПлана, Сотрудник, ТаблицаВидовДеятельности);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при измнении плановых трудозатрат по участнику %1 по причине:
			     |%2'"), 
			Сотрудник, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Распределение в плане занятости'"), УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ЗаписиПлана, , ТекстСообщения);
		
		РезультатВыполнения.СообщениеПользователю = ТекстСообщения;
		Возврат РезультатВыполнения;
		
	КонецПопытки; 
	
	РезультатВыполнения.Успешно = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Процедура ВыполнитьЗаписьВРегистрПоТаблицеВидовДеятельности(ВидПлана, Сотрудник, ТаблицаВидовДеятельности)
	
	Для ИндексТекущейКолонки = 3 По ТаблицаВидовДеятельности.Колонки.Количество() -1 Цикл
		
		ИмяТекущейКолонки = ТаблицаВидовДеятельности.Колонки[ИндексТекущейКолонки].Имя;
		ИдентификаторПлана = ИдентификаторПланаПоИмениКолонкиПлановыеТрудозатраты(ИмяТекущейКолонки);
		
		Для Каждого СтрокаТаблицы Из ТаблицаВидовДеятельности Цикл 
			
			Если СтрокаТаблицы.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять
				Или СтрокаТаблицы.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ПустаяСсылка() Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ЗаписиПлана.СоздатьНаборЗаписей();
		
			НаборЗаписей.Отбор.ИдентификаторПлана.Установить(ИдентификаторПлана);
			НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
			НаборЗаписей.Отбор.ТипСтрокиПлана.Установить(Перечисления.ТипыСтрокПлана.Работа);
			НаборЗаписей.Отбор.Работа.Установить(СтрокаТаблицы.ВидДеятельности);
			
			Если СтрокаТаблицы[ИмяТекущейКолонки] > 0 Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ИдентификаторПлана      = ИдентификаторПлана;
				ЗаписьНабора.Сотрудник               = Сотрудник;
				ЗаписьНабора.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
				ЗаписьНабора.Работа                  = СтрокаТаблицы.ВидДеятельности;
				
				ЗаписьНабора.ПланируемыеТрудозатраты = СтрокаТаблицы[ИмяТекущейКолонки];
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьДанныеВидовДеятельностиВТаблице(ТаблицаВидовДеятельности)
	
	Для Каждого СтрокаТаблицы Из ТаблицаВидовДеятельности Цикл
		
		Если СтрокаТаблицы.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать Тогда
			
			УстановитьНовоеЗначениеПериодыТаблицаВидыДеятельности(ТаблицаВидовДеятельности, СтрокаТаблицы, 0);
			
		ИначеЕсли СтрокаТаблицы.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.УстановитьНовое Тогда
			
			УстановитьНовоеЗначениеПериодыТаблицаВидыДеятельности(ТаблицаВидовДеятельности, СтрокаТаблицы, СтрокаТаблицы.НовоеЗначение);
			
		ИначеЕсли СтрокаТаблицы.ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ПропорциональноИзменитьВсего Тогда
			
			Если СтрокаТаблицы.НовоеЗначение = 0 Тогда
				
				УстановитьНовоеЗначениеПериодыТаблицаВидыДеятельности(ТаблицаВидовДеятельности, СтрокаТаблицы, 0);
				
			Иначе
			
				РаспределитьВсегоПоПериодамВидыДеятельности(ТаблицаВидовДеятельности, СтрокаТаблицы); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьВсегоПоПериодамВидыДеятельности(ТаблицаВидовДеятельности, СтрокаТаблицы)
	
	ТекущееВсего                = 0;
	КоличествоНеНулевыхПериодов = 0;
	НовоеВсего                  = СтрокаТаблицы.НовоеЗначение;
	
	Для Инд = 3 По ТаблицаВидовДеятельности.Колонки.Количество() -1 Цикл
		
		ЗапланированоВПериоде = СтрокаТаблицы[ТаблицаВидовДеятельности.Колонки[Инд].Имя];
		
		ТекущееВсего = ТекущееВсего + ЗапланированоВПериоде;
		
		Если ЗапланированоВПериоде > 0 Тогда
			КоличествоНеНулевыхПериодов = КоличествоНеНулевыхПериодов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	РазницаВсего = ТекущееВсего - НовоеВсего;
	Если РазницаВсего > 0 Тогда
		
		КоэффицентКорректировки = 1+ (1 - НовоеВсего / ТекущееВсего);
	
	Иначе
		
		КоэффицентКорректировки = НовоеВсего / ТекущееВсего;
		
	КонецЕсли;
	
	ИндексПоследнегоЗначимогоПериода = - 1;
	
	Для Инд = 3 По ТаблицаВидовДеятельности.Колонки.Количество() -1 Цикл
		
		ЗапланированоВПериоде = СтрокаТаблицы[ТаблицаВидовДеятельности.Колонки[Инд].Имя];
		
		Если ЗапланированоВПериоде = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексПоследнегоЗначимогоПериода = Инд;
		ИзмененияПоПериоду = Окр(ЗапланированоВПериоде * КоэффицентКорректировки - ЗапланированоВПериоде, 1, РежимОкругления.Окр15как20);
		
		Если РазницаВсего > 0 Тогда
			
			ЗапланированоВПериоде = Окр(ЗапланированоВПериоде - ИзмененияПоПериоду, 1, РежимОкругления.Окр15как20);
			РазницаВсего = РазницаВсего - ИзмененияПоПериоду;
			
		Иначе
			
			ЗапланированоВПериоде = Окр(ЗапланированоВПериоде + ИзмененияПоПериоду, 1, РежимОкругления.Окр15как20);
			РазницаВсего = РазницаВсего + ИзмененияПоПериоду;
			
		КонецЕсли;
		
		СтрокаТаблицы[ТаблицаВидовДеятельности.Колонки[Инд].Имя] = ЗапланированоВПериоде;
		
	КонецЦикла;
	
	Если РазницаВсего <> 0 Тогда 
		
		СтрокаТаблицы[ТаблицаВидовДеятельности.Колонки[ИндексПоследнегоЗначимогоПериода].Имя] = 
			СтрокаТаблицы[ТаблицаВидовДеятельности.Колонки[ИндексПоследнегоЗначимогоПериода].Имя] - РазницаВсего;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНовоеЗначениеПериодыТаблицаВидыДеятельности(ТаблицаВидовДеятельности, СтрокаТаблицы, НовоеЗначение);
	
	Для Инд = 3 По ТаблицаВидовДеятельности.Колонки.Количество() -1 Цикл
		
		СтрокаТаблицы[ТаблицаВидовДеятельности.Колонки[Инд].Имя] = НовоеЗначение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаДляИзмененияВидовДеятельности()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ТаблицаПланов.НачалоПериода      КАК ДатаНачала,
	|	ТаблицаПланов.КонецПериода       КАК ДатаОкончания,
	|	ТаблицаПланов.Зафиксирован       КАК Зафиксирован
	|ПОМЕСТИТЬ ТаблицаПланов
	|ИЗ
	|	&ТаблицаПланов КАК ТаблицаПланов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПланов.ИдентификаторПлана                КАК ИдентификаторПлана,
	|	ТаблицаПланов.ДатаНачала                        КАК ДатаНачала,
	|	ЗаписиПлана.Работа                              КАК Работа,
	|	ЕстьNULL(ЗаписиПлана.ПланируемыеТрудозатраты,0) КАК ПланируемыеТрудозатраты
	|ИЗ
	|	ТаблицаПланов КАК ТаблицаПланов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО (ТаблицаПланов.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана
	|				И ЗаписиПлана.Работа В (&ИзменяемыеВидыДеятельности)
	|				И ЗаписиПлана.Сотрудник = &Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала
	|ИТОГИ ПО
	|	Работа,
	|	ДатаНачала";
	
КонецФункции

Функция НовыйТаблицыВидовДеятельностиДляИзменения(ТаблицаПланов)
	
	ОписаниеТипаЧисло61 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 1));
	ОписаниеТипаЧисло41 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 1));
	
	ТаблицаВидовДеятельности = Новый ТаблицаЗначений;
	ТаблицаВидовДеятельности.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельности"));
	ТаблицаВидовДеятельности.Колонки.Добавить("ЧтоДелать",       Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРаспределенияРаботПланЗанятости"));
	ТаблицаВидовДеятельности.Колонки.Добавить("НовоеЗначение",   ОписаниеТипаЧисло61);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПланов Цикл
		
		ТаблицаВидовДеятельности.Колонки.Добавить(ИмяКолонкиПлановыеТрудозатраты(СтрокаТаблицы.ИдентификаторПлана),
		                                          ОписаниеТипаЧисло61);
		
	КонецЦикла; 
	
	Возврат ТаблицаВидовДеятельности;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанныхЭтапаТехническогоПроектаКРаспределению

Функция ПодготовленныеДанныеЭтапаТехническогоПроектаКРаспределению(ПараметрыПодготовки) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПодготовкаДанныхЭтапаТехническогоПроектаКРаспределению();
	
	Запрос.УстановитьПараметр("ВидПлана",                                 ПараметрыПодготовки.ВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода",                            НачалоДня(ПараметрыПодготовки.ДатаНачалаПериода));
	Запрос.УстановитьПараметр("Этап",                                     ПараметрыПодготовки.Этап);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурсаПлановыхРабот",      ПараметрыПодготовки.ВидСогласуемогоРесурсаПлановыхРабот);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПараметрыПодготовки.ПороговоеЗначениеДляЭтапаПоЗапланировано);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоФакт",          ПараметрыПодготовки.ПороговоеЗначениеДляЭтапаПоФакт * 3600);
	Запрос.УстановитьПараметр("ДатаНачалаНепланировавшихсяЭтапов",        ДатаНачалаНепланировавшихсяЭтапов(ПараметрыПодготовки.ДатаНачалаПериода));
	Запрос.УстановитьПараметр("ДатаОкончанияНепланировавшихсяЭтапов",     ДатаОкончанияНепланировавшихсяЭтапов(ПараметрыПодготовки.ДатаНачалаПериода));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПодготовленныеДанные = РезультатОбработкиЗапросаПодготовкаЭтапаТехническогоПроектаКРаспределению(РезультатЗапроса, ПараметрыПодготовки); 
	
	Возврат ПодготовленныеДанные;
	
КонецФункции

Функция ТекстЗапросаПодготовкаДанныхЭтапаТехническогоПроектаКРаспределению()

	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиПлана.Сотрудник КАК Сотрудник,
	|	ЗаписиПлана.Работа    КАК Работа 
	|ПОМЕСТИТЬ СотрудникиПоКоторымЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|				И Планы.ВидПлана = &ВидПлана
	|				И Планы.НачалоПериода >= &НачалоПериода)
	|	ГДЕ ЗаписиПлана.Работа = &Этап 
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка                         КАК Задача,
	|	ИерархияЗадачПроцесса.Родитель                КАК Родитель
	|ПОМЕСТИТЬ НевыполненныеЗадачиЭтапа
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ИерархияЗадачПроцесса.Родитель = &Этап
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НевыполненныеЗадачиЭтапа.Исполнитель                            КАК Исполнитель,
	|	НевыполненныеЗадачиЭтапа.Родитель                               КАК Родитель,
	|	СУММА(ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0)) КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                    КАК УчетВремениСекунды
	|ПОМЕСТИТЬ СотрудникиЭтапаЗапланированоУчетВремени
	|ИЗ
	|	НевыполненныеЗадачиЭтапа КАК НевыполненныеЗадачиЭтапа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО (ЗадачиЗапланированоПоСотрудникам.Задача = НевыполненныеЗадачиЭтапа.Задача)
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = НевыполненныеЗадачиЭтапа.Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = НевыполненныеЗадачиЭтапа.Задача)
	|			И (УчетВремени.Пользователь = НевыполненныеЗадачиЭтапа.Исполнитель)
	|			И (УчетВремени.Период < &НачалоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	НевыполненныеЗадачиЭтапа.Родитель,
	|	НевыполненныеЗадачиЭтапа.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиЭтапаЗапланированоУчетВремени.Исполнитель                КАК Сотрудник,
	|	СотрудникиЭтапаЗапланированоУчетВремени.Родитель                   КАК Этап,
	|	СУММА(СотрудникиЭтапаЗапланированоУчетВремени.Запланировано)       КАК Запланировано,
	|	СУММА(СотрудникиЭтапаЗапланированоУчетВремени.УчетВремениСекунды)  КАК УчетВремениСекунды
	|ПОМЕСТИТЬ СотрудникиЭтапаДляОтображенияВПланах
	|ИЗ
	|	СотрудникиЭтапаЗапланированоУчетВремени КАК СотрудникиЭтапаЗапланированоУчетВремени
	|ГДЕ
	|	СотрудникиЭтапаЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|	ИЛИ СотрудникиЭтапаЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиЭтапаЗапланированоУчетВремени.Исполнитель,
	|	СотрудникиЭтапаЗапланированоУчетВремени.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиЭтапаДляОтображенияВПланах.Сотрудник КАК Сотрудник,
	|	ЗадачиПроцесса.Ссылка                          КАК Задача,
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь  КАК ИсполнительЗадачи
	|ПОМЕСТИТЬ ЗадачиЭтапов
	|ИЗ
	|	СотрудникиЭтапаДляОтображенияВПланах КАК СотрудникиЭтапаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО СотрудникиЭтапаДляОтображенияВПланах.Этап = ИерархияЗадачПроцесса.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО (ЗадачиЗапланированоПоСотрудникам.Задача = ЗадачиПроцесса.Ссылка)
	|			И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = СотрудникиЭтапаДляОтображенияВПланах.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                                    КАК Сотрудник,
	|	ЗадачиЭтапов.Задача                                       КАК Задача,
	|	ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0)  КАК Запланировано
	|ПОМЕСТИТЬ ЗапланированоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЭтапов.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиЭтапов.Задача = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И (ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот)
	|			И  ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЭтапов.Сотрудник                       КАК Сотрудник,
	|	ЗадачиЭтапов.Задача                          КАК Задача,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК Длительность
	|ПОМЕСТИТЬ ПотраченоПоЗадачам
	|ИЗ
	|	ЗадачиЭтапов КАК ЗадачиЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|			ПО ЗадачиЗапланированоПоСотрудникам.Задача      = ЗадачиЭтапов.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = ЗадачиЭтапов.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = ЗадачиПроцесса.Ссылка
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &ДатаНачалаНепланировавшихсяЭтапов
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = УчетВремени.Задача
	|			И УчетВремени.Пользователь = ЗадачиЗапланированоПоСотрудникам.Пользователь
	|			И УчетВремени.Период < &ДатаНачалаНепланировавшихсяЭтапов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиЭтапов.Сотрудник,
	|	ЗадачиЭтапов.Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////7
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапланированоПоЗадачам.Сотрудник КАК Сотрудник,
	|	СУММА(ВЫБОР
	|			КОГДА ЗапланированоПоЗадачам.Запланировано * 3600 > ПотраченоПоЗадачам.Длительность
	|				ТОГДА ЗапланированоПоЗадачам.Запланировано * 3600 - ПотраченоПоЗадачам.Длительность
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|ПОМЕСТИТЬ ОстатокКРаспределению
	|ИЗ
	|	ЗапланированоПоЗадачам КАК ЗапланированоПоЗадачам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПотраченоПоЗадачам КАК ПотраченоПоЗадачам
	|		ПО ЗапланированоПоЗадачам.Сотрудник = ПотраченоПоЗадачам.Сотрудник
	|			И ЗапланированоПоЗадачам.Задача = ПотраченоПоЗадачам.Задача
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапланированоПоЗадачам.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////9
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	МИНИМУМ(Планы.НачалоПериода)                   КАК НачалоПериода,
	|	МАКСИМУМ(Планы.КонецПериода)                   КАК КонецПериода,
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты)     КАК ПланируемыеТрудозатраты,
	|	СотрудникиЭтапаДляОтображенияВПланах.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ЗапланированоПланыЗанятости
	|ИЗ
	|	СотрудникиЭтапаДляОтображенияВПланах КАК СотрудникиЭтапаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО СотрудникиЭтапаДляОтображенияВПланах.Сотрудник = ЗаписиПлана.Сотрудник
	|			И ЗаписиПлана.Работа = &Этап
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода >= &НачалоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиЭтапаДляОтображенияВПланах.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////10
	|ВЫБРАТЬ
	|	ОстатокКРаспределению.Сотрудник                                                                         КАК Сотрудник,
	|	ОстатокКРаспределению.Остаток - ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты * 3600, 0) КАК Нераспределено
	|ПОМЕСТИТЬ НераспределенныеСотрудники
	|ИЗ
	|	ОстатокКРаспределению КАК ОстатокКРаспределению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятости КАК ЗапланированоПланыЗанятости
	|		ПО ОстатокКРаспределению.Сотрудник = ЗапланированоПланыЗанятости.Сотрудник
	|ГДЕ
	|	ОстатокКРаспределению.Остаток - ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты * 3600, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////11
	|ВЫБРАТЬ
	|	СотрудникиЭтапаДляОтображенияВПланах.Сотрудник                                             КАК Сотрудник,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.НачалоПериода, &ДатаНачалаНепланировавшихсяЭтапов)    КАК ПерваяДатаПланаПоСотруднику,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.КонецПериода, &ДатаОкончанияНепланировавшихсяЭтапов)  КАК ПоследняяДатаПланаПоСотруднику,
	|	ЕСТЬNULL(ЗапланированоПланыЗанятости.ПланируемыеТрудозатраты, 0)                           КАК ПланируемыеТрудозатраты,
	|	ЕСТЬNULL(НераспределенныеСотрудники.Нераспределено, 0)                                     КАК Нераспределено
	|ИЗ
	|		СотрудникиЭтапаДляОтображенияВПланах КАК СотрудникиЭтапаДляОтображенияВПланах
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗапланированоПланыЗанятости КАК ЗапланированоПланыЗанятости
	|			ПО СотрудникиЭтапаДляОтображенияВПланах.Сотрудник = ЗапланированоПланыЗанятости.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ НераспределенныеСотрудники КАК НераспределенныеСотрудники
	|			ПО СотрудникиЭтапаДляОтображенияВПланах.Сотрудник = НераспределенныеСотрудники.Сотрудник
	|УПОРЯДОЧИТЬ ПО
	|	ПерваяДатаПланаПоСотруднику,
	|	ПланируемыеТрудозатраты
	|";
	
КонецФункции

Функция РезультатОбработкиЗапросаПодготовкаЭтапаТехническогоПроектаКРаспределению(РезультатЗапроса, ПараметрыПодготовки)
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

#КонецОбласти 

#Область ПодготовкаДанныхЭтапаТехническогоПроектаКРаспределению

Функция РезультатПланированияСотрудниковДляЭтапаПланаЗанятости(ПараметрыПланирования)
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Успешно",              Ложь);
	РезультатВыполнения.Вставить("СообщениеПользователю", "");
	
	ВидПлана                                      = ПараметрыПланирования.ВидПлана;
	Этап                                          = ПараметрыПланирования.Этап;
	ДатаНачалаПериода                             = ПараметрыПланирования.ДатаНачалаПериода;
	РаспределятьНачинаяС                          = ПараметрыПланирования.РаспределятьНачинаяС;
	СотрудникиЧтоДелать                           = ПараметрыПланирования.Сотрудники;
	НормативПланируемогоВремени                   = ПараметрыПланирования.НормативПланируемогоВремени;
	
	НачатьТранзакцию();
	
	Попытка
		
		МассивСотрудников = МассивСотрудниковПоПараметрамПланирования(ПараметрыПланирования.Сотрудники);
		
		ДатаПоследнейЗаписи = РегистрыСведений.Планы.ПериодПоследнегоПланаСЗаписьюПоСотруднику(ВидПлана, МассивСотрудников, ДатаНачалаПериода);
		ДанныеВидаПлана     = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
		ТаблицаПланов       = ТаблицаПлановДляРаспределения(РаспределятьНачинаяС, ДатаПоследнейЗаписи , ДанныеВидаПлана);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляПланированияСотрудниковПоЭтапу();
		
		Запрос.УстановитьПараметр("ТаблицаПланов", ТаблицаПланов);
		Запрос.УстановитьПараметр("Сотрудники",    МассивСотрудников);
		
		УстановитьПривилегированныйРежим(Истина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		РезультатФормированияТаблицЗаписейПлана = РезультатФормированияТаблицЗаписейПлана(РезультатЗапроса);
		
		ЗапланироватьСотрудниковПоЭтапуВТаблицахЗаписейПлана(РезультатФормированияТаблицЗаписейПлана,
		                                                     НормативПланируемогоВремени,
		                                                     СотрудникиЧтоДелать,
		                                                     Этап);
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при планировании плановых трудозатрат по этапу %1 по причине:
			     |%2'"), 
			Этап, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Планирование сотрудников по этапу в плане занятости'"), УровеньЖурналаРегистрации.Предупреждение,
			                         Метаданные.РегистрыСведений.ЗаписиПлана, , ТекстСообщения);
		
		РезультатВыполнения.СообщениеПользователю = ТекстСообщения;
		Возврат РезультатВыполнения;
	
	КонецПопытки;
	
	РезультатВыполнения.Успешно = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции 

Функция ТекстЗапросаДляПланированияСотрудниковПоЭтапу()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ТаблицаПланов.НачалоПериода      КАК ДатаНачала,
	|	ТаблицаПланов.КонецПериода       КАК ДатаОкончания,
	|	ТаблицаПланов.Зафиксирован       КАК Зафиксирован
	|ПОМЕСТИТЬ ТаблицаПланов
	|ИЗ
	|	&ТаблицаПланов КАК ТаблицаПланов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ Сотрудники
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&Сотрудники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПланов.ИдентификаторПлана КАК ИдентификаторПлана,
	|	ТаблицаПланов.ДатаНачала         КАК ДатаНачала,
	|	ТаблицаПланов.ДатаОкончания      КАК ДатаОкончания,
	|	ТаблицаПланов.Зафиксирован       КАК Зафиксирован,
	|	Сотрудники.Сотрудник             КАК Сотрудник
	|ПОМЕСТИТЬ ПланыСотрудники
	|ИЗ
	|	ТаблицаПланов КАК ТаблицаПланов,
	|	Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыСотрудники.ИдентификаторПлана                                             КАК ИдентификаторПлана,
	|	ЕСТЬNULL(ЗаписиПлана.ПланируемыеТрудозатраты, 0)                               КАК ПланируемыеТрудозатраты,
	|	ПланыСотрудники.Сотрудник                                                      КАК Сотрудник,
	|	ЕСТЬNULL(ЗаписиПлана.Работа, ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)) КАК Работа
	|ИЗ
	|	ПланыСотрудники КАК ПланыСотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ПланыСотрудники.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана
	|			И ПланыСотрудники.Сотрудник = ЗаписиПлана.Сотрудник
	|ИТОГИ ПО
	|	Сотрудник,
	|	ИдентификаторПлана,
	|	Работа";
	
КонецФункции 

Функция МассивСотрудниковПоПараметрамПланирования(ДанныеСотрудников)
	
	МассивСотрудников = Новый Массив;
	
	Для Каждого КлючИЗначение Из ДанныеСотрудников Цикл
		 МассивСотрудников.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат МассивСотрудников;
	
КонецФункции

Функция РезультатФормированияТаблицЗаписейПлана(РезультатЗапроса)
	
	РезультатФормирования = Новый Соответствие;
	
	ВыборкаСотрудники = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотрудники.Следующий() Цикл
		
		МассивТиповРабот = Новый Массив;
		МассивТиповРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
		МассивТиповРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
		МассивТиповРабот.Добавить(Тип("СправочникСсылка.ВидыДеятельности"));
		МассивТиповРабот.Добавить(Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана"));
		
		ТаблицаЗаписейПлана = Новый ТаблицаЗначений;
		ТаблицаЗаписейПлана.Колонки.Добавить("Работа", Новый ОписаниеТипов(МассивТиповРабот));
		
		РаботыСтрокиТаблицы = Новый Соответствие;
		
		ВыборкаИдентификаторы = ВыборкаСотрудники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		Пока ВыборкаИдентификаторы.Следующий() Цикл
			
			ИмяКолонкиИдентификаторПлана = ИмяДобавленнойКолонкиЗаписейПлана(ТаблицаЗаписейПлана, ВыборкаИдентификаторы.ИдентификаторПлана);
			
			ВыборкаРаботы = ВыборкаИдентификаторы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРаботы.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаРаботы.Работа) Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаботы = СтрокаЭтапаТаблицыЗаписейПлана(ВыборкаРаботы.Работа, ТаблицаЗаписейПлана, РаботыСтрокиТаблицы);
				
				ВыборкаДетали = ВыборкаРаботы.Выбрать();
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					СтрокаРаботы[ИмяКолонкиИдентификаторПлана] = ВыборкаДетали.ПланируемыеТрудозатраты;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла; 
		
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("ТаблицаЗаписейПлана", ТаблицаЗаписейПлана);
		ДанныеСотрудника.Вставить("РаботыСтрокиТаблицы", РаботыСтрокиТаблицы);
		
		РезультатФормирования.Вставить(ВыборкаСотрудники.Сотрудник, ДанныеСотрудника);
	
	КонецЦикла;
	
	Возврат РезультатФормирования;
	
КонецФункции

Процедура ОтразитьИзмененияВТаблицеЗаписейПланаПоЭтапуДляСотрудника(Сотрудник, ДанныеСотрудника, ЧтоДелатьПоСотруднику, Этап, НормативПланируемогоВремени)
	
	ТаблицаЗаписейПлана = ДанныеСотрудника.ТаблицаЗаписейПлана;
	
	СтрокаСЭтапом = ДанныеСотрудника.РаботыСтрокиТаблицы.Получить(Этап);
	Если СтрокаСЭтапом = Неопределено Тогда
		СтрокаСЭтапом = ТаблицаЗаписейПлана.Добавить();
		СтрокаСЭтапом.Работа = Этап;
	КонецЕсли;
	
	Нераспределено     = ЧтоДелатьПоСотруднику.Нераспределено;
	ЧтоДелать          = ЧтоДелатьПоСотруднику.ЧтоДелать;
	НовоеЗначениеПлана = ЧтоДелатьПоСотруднику.НовоеЗначениеПлана;
	
	МассивИменКолонокДляЗаписи = Новый Массив;
	
	Если ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать Тогда
		
		Для ИндексТекущейКолонки = 1 По ТаблицаЗаписейПлана.Колонки.Количество() - 1 Цикл
			
			ИмяТекущейКолонки = ТаблицаЗаписейПлана.Колонки[ИндексТекущейКолонки].Имя;
			Если СтрокаСЭтапом[ИмяТекущейКолонки] <> 0 Тогда
				СтрокаСЭтапом[ИмяТекущейКолонки] = 0;
				МассивИменКолонокДляЗаписи.Добавить(ИмяТекущейКолонки);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСПревышениемНорматива Тогда
		
		УдалитьЗаписиПланаСотрудникаПоЭтапу(СтрокаСЭтапом, ТаблицаЗаписейПлана, Нераспределено, МассивИменКолонокДляЗаписи);
		
		Для ИндексТекущейКолонки = 1 По ТаблицаЗаписейПлана.Колонки.Количество() - 1 Цикл
			
			Если Нераспределено <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			ИмяТекущейКолонки = ТаблицаЗаписейПлана.Колонки[ИндексТекущейКолонки].Имя;
			
			ЗапланироватьВТекущемПериоде = Мин(Нераспределено, НовоеЗначениеПлана);
			
			Нераспределено = Нераспределено - ЗапланироватьВТекущемПериоде;
			СтрокаСЭтапом[ИмяТекущейКолонки] = ЗапланироватьВТекущемПериоде;
			МассивИменКолонокДляЗаписи.Добавить(ИмяТекущейКолонки);
			
		КонецЦикла;
		
	ИначеЕсли ЧтоДелать = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСУчетомНорматива Тогда
		
		УдалитьЗаписиПланаСотрудникаПоЭтапу(СтрокаСЭтапом, ТаблицаЗаписейПлана, Нераспределено, МассивИменКолонокДляЗаписи);
		
		Для ИндексТекущейКолонки = 1 По ТаблицаЗаписейПлана.Колонки.Количество() - 1 Цикл
			
			Если Нераспределено <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			ОсталосьПоНормативу = НормативПланируемогоВремени - ТаблицаЗаписейПлана.Итог(ИндексТекущейКолонки);
			Если ОсталосьПоНормативу <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗапланироватьВТекущемПериоде = Мин(Нераспределено, НовоеЗначениеПлана, ОсталосьПоНормативу);
			ИмяТекущейКолонки = ТаблицаЗаписейПлана.Колонки[ИндексТекущейКолонки].Имя;
			
			Если Нераспределено >= ЗапланироватьВТекущемПериоде Тогда
				
				Нераспределено = Нераспределено - ЗапланироватьВТекущемПериоде;
				СтрокаСЭтапом[ИмяТекущейКолонки] = ЗапланироватьВТекущемПериоде;
				МассивИменКолонокДляЗаписи.Добавить(ИмяТекущейКолонки);
				
			Иначе 
				
				СтрокаСЭтапом[ИмяТекущейКолонки] = ЗапланироватьВТекущемПериоде;
				Нераспределено = 0;
				МассивИменКолонокДляЗаписи.Добавить(ИмяТекущейКолонки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЧтоДелать <> Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать Тогда 
		Пока Нераспределено > 0 Цикл
			
			ИмяТекущейКолонки          = ИмяКолонкиТаблицыЗаписейПланаПоИндексу(ТаблицаЗаписейПлана, ТаблицаЗаписейПлана.Колонки.Количество() - 1);
			ИдентификаторТекущегоПлана = ИдентификаторПланаПоИмениКолонкиПлановыеТрудозатраты(ИмяТекущейКолонки);
			
			ДанныеТекущегоПлана   = РегистрыСведений.Планы.ДанныеПланаПоИдентификатору(ИдентификаторТекущегоПлана);
			ДанныеСледующегоПлана = Справочники.ВидыПланов.СледующийСоставляемыйПлан(ДанныеТекущегоПлана.ВидПлана, ДанныеТекущегоПлана.КонецПериода, Истина);
			
			ИмяТекущейКолонки = ИмяДобавленнойКолонкиЗаписейПлана(ТаблицаЗаписейПлана, ДанныеСледующегоПлана.ИдентификаторПлана);
			
			ЗапланироватьВТекущемПериоде = Мин(Нераспределено, НовоеЗначениеПлана);
			
			Нераспределено = Нераспределено - ЗапланироватьВТекущемПериоде;
			СтрокаСЭтапом[ИмяТекущейКолонки] = ЗапланироватьВТекущемПериоде;
			МассивИменКолонокДляЗаписи.Добавить(ИмяТекущейКолонки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивИменКолонокДляЗаписи = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИменКолонокДляЗаписи); 
	
	Для Каждого ИмяКолонки Из МассивИменКолонокДляЗаписи Цикл
		
		ИдентификаторПлана = ИдентификаторПланаПоИмениКолонкиПлановыеТрудозатраты(ИмяКолонки);
		
		ДанныеЗаписиПлана  = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
		ДанныеЗаписиПлана.ИдентификаторПлана      = ИдентификаторПлана; 
		ДанныеЗаписиПлана.Сотрудник               = Сотрудник;
		ДанныеЗаписиПлана.Работа                  = Этап;
		ДанныеЗаписиПлана.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
		ДанныеЗаписиПлана.ПланируемыеТрудозатраты = СтрокаСЭтапом[ИмяКолонки];
		ДанныеЗаписиПлана.Удалить                 = ?(СтрокаСЭтапом[ИмяКолонки] = 0, Истина, Ложь);
		
		Если ДанныеЗаписиПлана.Удалить Тогда
			РегистрыСведений.ЗаписиПлана.УдалитьЗаписьПлана(ДанныеЗаписиПлана);
		Иначе
			РегистрыСведений.ЗаписиПлана.ЗаписатьДанные(ДанныеЗаписиПлана);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЗаписиПланаСотрудникаПоЭтапу(СтрокаСЭтапом, ТаблицаЗаписейПлана, Нераспределено, МассивИменКолонокДляЗаписи)
	
	Для ИндексТекущейКолонки = 1 По ТаблицаЗаписейПлана.Колонки.Количество() - 1 Цикл
		
		ИмяТекущейКолонки = ТаблицаЗаписейПлана.Колонки[ИндексТекущейКолонки].Имя;
		
		Если СтрокаСЭтапом[ИмяТекущейКолонки] > 0 Тогда 
			
			Нераспределено = Нераспределено + СтрокаСЭтапом[ИмяТекущейКолонки];
			СтрокаСЭтапом[ИмяТекущейКолонки] = 0;
			МассивИменКолонокДляЗаписи.Добавить(ИмяТекущейКолонки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапланироватьСотрудниковПоЭтапуВТаблицахЗаписейПлана(РезультатФормированияТаблицЗаписейПлана,
	                                                           НормативПланируемогоВремени,
	                                                           СотрудникиЧтоДелать,
	                                                           Этап)
	
	Для Каждого КлючИЗначение Из РезультатФормированияТаблицЗаписейПлана Цикл
		
		ЧтоДелатьПоСотруднику = СотрудникиЧтоДелать.Получить(КлючИЗначение.Ключ); 
		Если ЧтоДелатьПоСотруднику = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОтразитьИзмененияВТаблицеЗаписейПланаПоЭтапуДляСотрудника(КлючИЗначение.Ключ, КлючИЗначение.Значение, ЧтоДелатьПоСотруднику, Этап, НормативПланируемогоВремени);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхДатТехническогоПроектаКИзменению

Функция ПодготовленныеДанныеДатТехническогоПроектаКИзменению(ПараметрыПодготовки)
	
	ВидПлана                                      = ПараметрыПодготовки.ВидПлана;
	ТехническийПроект                             = ПараметрыПодготовки.ТехническийПроект;
	ДатаНачалаПериодаПланирования                 = ПараметрыПодготовки.ДатаНачалаПериодаПланирования;
	ПороговоеЗначениеДляЭтапаПоЗапланировано      = ПараметрыПодготовки.ПороговоеЗначениеДляЭтапаПоЗапланировано;
	ПороговоеЗначениеДляЭтапаПоФакт               = ПараметрыПодготовки.ПороговоеЗначениеДляЭтапаПоФакт;
	ВидСогласуемогоРесурсаПлановыхРабот           = ПараметрыПодготовки.ВидСогласуемогоРесурсаПлановыхРабот;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДатТехническогоПроектаКИзменению();
	
	Запрос.УстановитьПараметр("ВидПлана",                                 ВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода",                            ДатаНачалаПериодаПланирования);
	Запрос.УстановитьПараметр("ТехническийПроект",                        ТехническийПроект);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПороговоеЗначениеДляЭтапаПоЗапланировано);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоФакт",          ПороговоеЗначениеДляЭтапаПоФакт);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурсаПлановыхРабот",      ВидСогласуемогоРесурсаПлановыхРабот);
	Запрос.УстановитьПараметр("ПустаяДата",                               Дата(1, 1, 1));
	
	Результат = Запрос.Выполнить();
	
	Возврат РезультатОбработкиРезультатаЗапросаПодготовкаДатТехническогоПроекта(Результат, ТехническийПроект);
	
КонецФункции

Функция РезультатОбработкиРезультатаЗапросаПодготовкаДатТехническогоПроекта(Результат, ТехническийПроект)
	
	ПодготовленныеДанные = Новый Структура;
	ПодготовленныеДанные.Вставить("ДатаОкончанияТехПроекта", Неопределено);
	ПодготовленныеДанные.Вставить("Этапы", НовыйТаблицыЭтапыКИзменениюДат());
	ПодготовленныеДанные.Вставить("ПроектИВерсия", ДанныеПроектаИВерсии(ТехническийПроект));
	
	ВыборкаЭтапы = Результат.Выбрать();
	
	Пока ВыборкаЭтапы.Следующий() Цикл
		
		НоваяСтрока = ПодготовленныеДанные.Этапы.Добавить();
		НоваяСтрока.Этап           = ВыборкаЭтапы.Этап;
		НоваяСтрока.Остаток        = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаЭтапы.Остаток);
		НоваяСтрока.Нераспределено = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ВыборкаЭтапы.Нераспределено);
		НоваяСтрока.ДатаЭтапа      = ВыборкаЭтапы.ДатаОкончанияЭтапа;
		НоваяСтрока.ДатаПоПланам   = ВыборкаЭтапы.КонецПланируемыхРабот;
		
		Если Не ЗначениеЗаполнено(ПодготовленныеДанные.ДатаОкончанияТехПроекта) Тогда
			ПодготовленныеДанные.ДатаОкончанияТехПроекта = ВыборкаЭтапы.ДатаОкончанияТехПроекта;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодготовленныеДанные;
	
КонецФункции 

Функция ДанныеПроектаИВерсии(ТехническийПроект)
	
	ДанныеПроектаИВерсии = Новый Структура;
	ДанныеПроектаИВерсии.Вставить("Проект",                  Неопределено);
	ДанныеПроектаИВерсии.Вставить("Версия",                  Неопределено);
	ДанныеПроектаИВерсии.Вставить("ДатаОкончанияРазработки", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Владелец                                 КАК Проект,
	|	ТехническиеПроекты.Версия                                   КАК Версия,
	|	ЕстьNULL(ВерсииПроекта.ДатаОкончанияРазработки,&ПустаяДата) КАК ДатаОкончанияРазработки
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ПО ТехническиеПроекты.Версия = ВерсииПроекта.Ссылка
	|ГДЕ
	|	ТехническиеПроекты.Ссылка = &ТехническийПроект";
	
	Запрос.УстановитьПараметр("ТехническийПроект", ТехническийПроект);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ДанныеПроектаИВерсии;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		ДанныеПроектаИВерсии.Проект                  = Выборка.Проект ;
		ДанныеПроектаИВерсии.Версия                  = Выборка.Версия ;
		ДанныеПроектаИВерсии.ДатаОкончанияРазработки = Выборка.ДатаОкончанияРазработки ;
	КонецЕсли;
	
	Возврат ДанныеПроектаИВерсии;
	
КонецФункции

Функция НовыйТаблицыЭтапыКИзменениюДат()
	
	ОписаниеТипаЧисло61  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 1));
	ОписаниеТипаЧисло41  = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 1));
	ОписаниеТипаДатаДата =  Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	ТипыЭтапа = Новый Массив;
	ТипыЭтапа.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	ТипыЭтапа.Добавить(Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана"));
	
	ТаблицаКИзменениюДат = Новый ТаблицаЗначений;
	ТаблицаКИзменениюДат.Колонки.Добавить("Этап",           Новый ОписаниеТипов(ТипыЭтапа));
	ТаблицаКИзменениюДат.Колонки.Добавить("Нераспределено", ОписаниеТипаЧисло61);
	ТаблицаКИзменениюДат.Колонки.Добавить("Остаток",        ОписаниеТипаЧисло61);
	ТаблицаКИзменениюДат.Колонки.Добавить("ДатаЭтапа",      ОписаниеТипаДатаДата);
	ТаблицаКИзменениюДат.Колонки.Добавить("ДатаПоПланам",   ОписаниеТипаДатаДата);
	
	Возврат ТаблицаКИзменениюДат;
	
КонецФункции

Функция ТекстЗапросаДатТехническогоПроектаКИзменению()
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.КонецПериода       КАК КонецПериода
	|ПОМЕСТИТЬ ПланыПоКоторымЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы 
	|			ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО ЗаписиПлана.Работа = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И Планы.НачалоПериода >= &НачалоПериода
	|	И ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|	И ЗаписиПлана.ПланируемыеТрудозатраты <> 0
	|	И (ЗадачиПроцесса.Предмет = &ТехническийПроект Или ЗаписиПлана.Работа = &ТехническийПроект)
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ЗаписиПлана.Сотрудник               КАК Сотрудник,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ СуществующиеЗаписиПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО ЗаписиПлана.Работа = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|	И ЗаписиПлана.ПланируемыеТрудозатраты <> 0
	|	И (ЗадачиПроцесса.Предмет = &ТехническийПроект Или ЗаписиПлана.Работа = &ТехническийПроект)
	|	И ЗаписиПлана.ИдентификаторПлана В (ВЫБРАТЬ ПланыПоКоторымЕстьЗаписи.ИдентификаторПлана ИЗ ПланыПоКоторымЕстьЗаписи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь                    КАК Исполнитель,
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцессаРодители.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцессаРодители.Предмет
	|			ИНАЧЕ ИерархияЗадачПроцесса.Родитель
	|	КОНЕЦ                                                            КАК Родитель,
	|	СУММА(ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0))  КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                     КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаЗапланированоУчетВремени
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО (ЗадачиЗапланированоПоСотрудникам.Задача = ЗадачиПроцесса.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = ИерархияЗадачПроцесса.ЗадачаПроцесса 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодители
	|		ПО ЗадачиПроцессаРодители.Ссылка = ИерархияЗадачПроцесса.Родитель
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = ЗадачиЗапланированоПоСотрудникам.Задача)
	|			И (УчетВремени.Пользователь = ЗадачиЗапланированоПоСотрудникам.Пользователь)
	|			И (УчетВремени.Период < &НачалоПериода)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет = &ТехническийПроект
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ИерархияЗадачПроцесса.Уровень = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР 
	|		КОГДА ЗадачиПроцессаРодители.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцессаРодители.Предмет
	|			ИНАЧЕ ИерархияЗадачПроцесса.Родитель
	|	КОНЕЦ,
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель         КАК Исполнитель,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Родитель            КАК Родитель,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано       КАК Запланировано,
	|	ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды  КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени
	|ИЗ
	|	ЭтапыСотрудникаЗапланированоУчетВремени КАК ЭтапыСотрудникаЗапланированоУчетВремени
	|ГДЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|	ИЛИ ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Исполнитель   КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка        КАК Ссылка
	|ПОМЕСТИТЬ ЭтапыСотрудникаПоИсполнителю
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Предмет = &ТехническийПроект
	|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.ЗадачаШаблона <> ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени.Исполнитель КАК Исполнитель,
	|	ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени.Родитель    КАК Родитель
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланах
	|ИЗ 
	|	ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаПоИсполнителю.Исполнитель,
	|	ЭтапыСотрудникаПоИсполнителю.Ссылка
	|ИЗ ЭтапыСотрудникаПоИсполнителю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Родитель    КАК Работа,
	|	МИНИМУМ(Планы.НачалоПериода)                     КАК НачалоПериода,
	|	МАКСИМУМ(Планы.КонецПериода)                     КАК КонецПериода
	|ПОМЕСТИТЬ ДатыПланируемыхРабот
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ЭтапыСотрудникаДляОтображенияВПланах.Исполнитель = ЗаписиПлана.Сотрудник
	|			И ЭтапыСотрудникаДляОтображенияВПланах.Родитель = ЗаписиПлана.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|			ПО (Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСотрудникаДляОтображенияВПланах.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СуществующиеЗаписиПлана.Работа КАК Работа
	|ПОМЕСТИТЬ ОтображаемыеРаботы
	|ИЗ
	|	СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланах.Родитель
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ВложенныйЗапрос.Сотрудник               КАК Сотрудник,
	|	ВложенныйЗапрос.Работа                  КАК Работа,
	|	ВложенныйЗапрос.ИдентификаторПлана      КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ДанныеВыводимыхРабот
	|ИЗ
	|	(ВЫБРАТЬ
	|		СуществующиеЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|		СуществующиеЗаписиПлана.Сотрудник КАК Сотрудник,
	|		СуществующиеЗаписиПлана.Работа КАК Работа,
	|		СуществующиеЗаписиПлана.ИдентификаторПлана КАК ИдентификаторПлана
	|	ИЗ
	|		СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Исполнитель,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Родитель,
	|		0
	|	ИЗ
	|		ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Работа,
	|	ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ДанныеВыводимыхРабот.Работа КАК Работа,
	|	ДанныеВыводимыхРабот.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ОтображаемыеРаботыСотрудники
	|ИЗ
	|	ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Работа,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка  КАК ЭтапНеПоШаблону,
	|	ЗадачиПроцесса.Предмет КАК ТехПроект
	|ПОМЕСТИТЬ ЭтапыНеПоШаблону
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса 
	|ГДЕ
	|	ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Предмет В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ДанныеВыводимыхРабот.Работа КАК Работа
	|		ИЗ
	|			ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ИерархияЗадачПроцесса.Родитель       КАК Родитель
	|ПОМЕСТИТЬ ДочерниеЗадачиРабот
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтображаемыеРаботы КАК ОтображаемыеРаботы
	|		ПО (ОтображаемыеРаботы.Работа = ИерархияЗадачПроцесса.Родитель)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса,
	|	ЭтапыНеПоШаблону.ТехПроект           КАК Родитель
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыНеПоШаблону КАК ЭтапыНеПоШаблону
	|		ПО (ЭтапыНеПоШаблону.ЭтапНеПоШаблону = ИерархияЗадачПроцесса.Родитель)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель                             КАК Этап,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса                       КАК ЗадачаПроцесса,
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь            КАК Исполнитель,
	|	ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0) КАК Запланировано
	|ПОМЕСТИТЬ ОстатокЗапланированоНачалоТекущегоПериода
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И (ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурсаПлановыхРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДочерниеЗадачиРабот.Родитель                 КАК Этап,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса           КАК ЗадачаПроцесса,
	|	УчетВремени.Пользователь                     КАК Исполнитель,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0)) КАК ФактСекундыДоТекущегоПериода
	|ПОМЕСТИТЬ ФактЗадачиНачалоТекущегоПериода
	|ИЗ
	|	ДочерниеЗадачиРабот КАК ДочерниеЗадачиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ВЫБОР
	|				КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА ВЫБОР
	|							КОГДА ЗадачиПроцесса.ФактическаяДатаОкончания < &НачалоПериода
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО ДочерниеЗадачиРабот.ЗадачаПроцесса = УчетВремени.Задача
	|			И (УчетВремени.Период < &НачалоПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДочерниеЗадачиРабот.Родитель,
	|	ДочерниеЗадачиРабот.ЗадачаПроцесса,
	|	УчетВремени.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФактЗадачиНачалоТекущегоПериода.Этап                                                КАК Этап,
	|	ФактЗадачиНачалоТекущегоПериода.Исполнитель                                         КАК Исполнитель,
	|	СУММА(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода)                 КАК ФактСекундыДоТекущегоПериода
	|ПОМЕСТИТЬ ФактЭтапыНачалоТекущегоПериода
	|ИЗ
	|	ФактЗадачиНачалоТекущегоПериода КАК ФактЗадачиНачалоТекущегоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ФактЗадачиНачалоТекущегоПериода.Этап,
	|	ФактЗадачиНачалоТекущегоПериода.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстатокЗапланированоНачалоТекущегоПериода.Этап        КАК Этап,
	|	ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель КАК Исполнитель,
	|	СУММА(ВЫБОР
	|			КОГДА ОстатокЗапланированоНачалоТекущегоПериода.Запланировано * 3600 > ЕСТЬNULL(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода, 0)
	|				ТОГДА ОстатокЗапланированоНачалоТекущегоПериода.Запланировано * 3600 - ЕСТЬNULL(ФактЗадачиНачалоТекущегоПериода.ФактСекундыДоТекущегоПериода, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Остаток
	|
	|ПОМЕСТИТЬ ОстатокФактНачалоТекущегоПериода
	|ИЗ
	|	ОстатокЗапланированоНачалоТекущегоПериода КАК ОстатокЗапланированоНачалоТекущегоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени КАК ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени
	|			ПО ОстатокЗапланированоНачалоТекущегоПериода.Этап = ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени.Родитель
	|				И ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель = ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени.Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФактЗадачиНачалоТекущегоПериода КАК ФактЗадачиНачалоТекущегоПериода
	|			ПО ОстатокЗапланированоНачалоТекущегоПериода.Этап = ФактЗадачиНачалоТекущегоПериода.Этап
	|				И ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель = ФактЗадачиНачалоТекущегоПериода.Исполнитель
	|				И ОстатокЗапланированоНачалоТекущегоПериода.ЗадачаПроцесса = ФактЗадачиНачалоТекущегоПериода.ЗадачаПроцесса 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстатокЗапланированоНачалоТекущегоПериода.Исполнитель,
	|	ОстатокЗапланированоНачалоТекущегоПериода.Этап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуществующиеЗаписиПлана.Работа                         КАК Работа,
	|	СуществующиеЗаписиПлана.Сотрудник                      КАК Сотрудник,
	|	СУММА(СуществующиеЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ ИтогиСуществующихЗаписейПлана
	|ИЗ
	|	СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|
	|СГРУППИРОВАТЬ ПО
	|	СуществующиеЗаписиПлана.Работа,
	|	СуществующиеЗаписиПлана.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Этап                  КАК Этап,
	|	СУММА(ВложенныйЗапрос.Остаток)        КАК Остаток,
	|	СУММА(ВложенныйЗапрос.Нераспределено) КАК Нераспределено
	|ПОМЕСТИТЬ ЭтапыОстатокНераспределено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИтогиСуществующихЗаписейПлана.Работа                                                                                 КАК Этап,
	|		ЕСТЬNULL(ОстатокФактНачалоТекущегоПериода.Остаток, 0) - ИтогиСуществующихЗаписейПлана.ПланируемыеТрудозатраты * 3600 КАК Нераспределено,
	|		ОстатокФактНачалоТекущегоПериода.Остаток                                                                             КАК Остаток
	|	ИЗ
	|		ИтогиСуществующихЗаписейПлана КАК ИтогиСуществующихЗаписейПлана
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОстатокФактНачалоТекущегоПериода КАК ОстатокФактНачалоТекущегоПериода
	|			ПО ИтогиСуществующихЗаписейПлана.Работа = ОстатокФактНачалоТекущегоПериода.Этап
	|				И ИтогиСуществующихЗаписейПлана.Сотрудник = ОстатокФактНачалоТекущегоПериода.Исполнитель
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстатокФактНачалоТекущегоПериода.Этап,
	|		ОстатокФактНачалоТекущегоПериода.Остаток,
	|		ОстатокФактНачалоТекущегоПериода.Остаток
	|	ИЗ
	|		ОстатокФактНачалоТекущегоПериода КАК ОстатокФактНачалоТекущегоПериода
	|			ЛЕВОЕ СОЕДИНЕНИЕ ИтогиСуществующихЗаписейПлана КАК ИтогиСуществующихЗаписейПлана
	|			ПО ОстатокФактНачалоТекущегоПериода.Этап = ИтогиСуществующихЗаписейПлана.Работа
	|				И ОстатокФактНачалоТекущегоПериода.Исполнитель = ИтогиСуществующихЗаписейПлана.Сотрудник
	|	ГДЕ
	|		ИтогиСуществующихЗаписейПлана.Работа ЕСТЬ NULL) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтображаемыеРаботы.Работа                                                                                       КАК Этап,
	|	ЕСТЬNULL(ЭтапыОстатокНераспределено.Остаток, 0)                                                                 КАК Остаток,
	|	ЕСТЬNULL(ЭтапыОстатокНераспределено.Нераспределено, 0)                                                          КАК Нераспределено,
	|	ЕСТЬNULL(ДатыПланируемыхРабот.КонецПериода, &ПустаяДата)                                                        КАК КонецПланируемыхРабот,
	|	ЕстьNULL(ЭтапыТехПроекты.ПлановаяДатаОкончания, ЕСТЬNULL(ЭтапыЗадачи.КрайняяДатаОкончания, &ПустаяДата))        КАК ДатаОкончанияЭтапа,
	|	ЕстьNULL(ЭтапыТехПроекты.ПлановаяДатаОкончания, ЕСТЬNULL(ТехПроектыОтЗадач.ПлановаяДатаОкончания, &ПустаяДата)) КАК ДатаОкончанияТехПроекта,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)                                                     КАК ЗначениеУпорядочиванияЭтапа
	|	
	|ИЗ
	|	ОтображаемыеРаботы КАК ОтображаемыеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЭтапыОстатокНераспределено КАК ЭтапыОстатокНераспределено
	|			ПО ОтображаемыеРаботы.Работа = ЭтапыОстатокНераспределено.Этап
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПланируемыхРабот КАК ДатыПланируемыхРабот
	|			ПО ДатыПланируемыхРабот.Работа = ЭтапыОстатокНераспределено.Этап
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЭтапыЗадачи
	|			ПО ЭтапыЗадачи.Ссылка = ОтображаемыеРаботы.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО ОтображаемыеРаботы.Работа = СостоянияЗадачПроцессов.ЗадачаПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехПроектыОтЗадач
	|			ПО ЭтапыЗадачи.Предмет = ТехПроектыОтЗадач.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ЭтапыТехПроекты
	|			ПО ЭтапыТехПроекты.Ссылка = ОтображаемыеРаботы.Работа
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочиванияЭтапа,
	|	ДатаОкончанияЭтапа";
	
КонецФункции

#КонецОбласти

#Область НастройкиОтбораПоСКД

Функция НайденныйЭлементОтбораКомпоновкиДанных(КоллекцияЭлементовОтбора, ИмяЭлемента)
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементовОтбора Цикл
		
		Если ЭлементКоллекции.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента) Тогда
			
			Возврат ЭлементКоллекции;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйЭлементКоллекции = КоллекцияЭлементовОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементКоллекции.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	Возврат НовыйЭлементКоллекции;
	
КонецФункции

#КонецОбласти

#КонецОбласти
