#Область СлужебныйПрограммныйИнтерфейс

// Заполняет представление периодов в списке выбора с учетом склонения в зависимости от количества периодов
//
// Параметры:
//  СписокВыбора        - СписокЗначений - список, содержащий периоды.
//  КоличествоПериодов  - Число - выбранное пользователем количество периодов
//
Процедура ЗаполнитьПредставлениеЗначенийСпискаВыбораПериодаВЗависимостиОтКоличестваПериодов(СписокВыбора, КоличествоПериодов) Экспорт
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		
		ЭлементСписка.Представление = ПредставлениеПеридичностиВЗависимостиОтКоличестваПериодов(ЭлементСписка.Значение, КоличествоПериодов);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет представление периода с учетом склонения в зависимости от количества периодов
//
// Параметры:
//  Периодичность       - ПеричислениеСсылка.ПериодичностьПланов - период, представление которого определяется.
//  КоличествоПериодов  - Число
//
Функция ПредставлениеПеридичностиВЗависимостиОтКоличестваПериодов(Периодичность, КоличествоПериодов)  Экспорт
	
	Представление = "";
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Год") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'год'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'года'");
		Иначе
			Представление = НСтр("ru = 'лет'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.День") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'день'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'дня'");
		Иначе
			Представление = НСтр("ru = 'дней'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Квартал") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'квартал'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'квартала'");
		Иначе
			Представление = НСтр("ru = 'кварталов'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Месяц") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'месяц'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'месяца'");
		Иначе
			Представление = НСтр("ru = 'месяцев'");
		КонецЕсли;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Неделя") Тогда
		
		Если КоличествоПериодов = 1 Тогда
			Представление = НСтр("ru = 'неделя'");
		ИначеЕсли КоличествоПериодов > 1 
			И  КоличествоПериодов < 5 Тогда
			Представление = НСтр("ru = 'недели'");
		Иначе
			Представление = НСтр("ru = 'недель'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Ищет строку по значению в заданной колонке дерева
//
// Параметры:
//  ГдеИскать           - ДанныеФормыДерево, ДанныеФормыЭлементДерева - .
//  Колонка             - Строка
//  Значение            - Произвольный
//  ИскатьВПодчиненных  - Булево
//
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева, Неопределено
//
Функция НайденнаяСтрокаВДанныхФормыДерево(ГдеИскать,Колонка , Значение, УровнейПоиска, Знач УровеньПоиска = 0) Экспорт
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева[Колонка] = Значение Тогда
			
			Возврат ЭлементДерева;
			
		ИначеЕсли УровеньПоиска < УровнейПоиска Тогда
			
			ТекущийУровеньПоиска = УровеньПоиска + 1;
			
			НайденнаяСтрока = НайденнаяСтрокаВДанныхФормыДерево(ЭлементДерева, Колонка , Значение, УровнейПоиска, ТекущийУровеньПоиска);
			Если НайденнаяСтрока <> Неопределено Тогда
				Возврат НайденнаяСтрока;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НайденнаяСтрокаПоСтруктуреВКоллекцииСтрокДерева(СтрокаРодитель, ПараметрыПоиска) Экспорт
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаРодитель.ПолучитьЭлементы() Цикл
		
		СовпадениеНайдено = Истина;
		
		Для Каждого КлючИЗначение Из ПараметрыПоиска Цикл
			
			Если ПодчиненнаяСтрока[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				
				СовпадениеНайдено = Ложь; 
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СовпадениеНайдено Тогда
			Возврат ПодчиненнаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Конструктор структуры, содержащей данные периода плана.
//
// Возвращаемое значение:
//   Структура - содержит:
//     * ДатаНачала    - Дата
//     * ДатаОкончания - Дата
//
Функция НовыйПериодПлана() Экспорт
	
	ПериодПлана = Новый Структура;
	ПериодПлана.Вставить("ДатаНачала", Дата(1,1,1));
	ПериодПлана.Вставить("ДатаОкончания", Дата(1,1,1));
	
	Возврат ПериодПлана;
	
КонецФункции

// Конструктор структуры, содержащей данные записей плана.
//
// Возвращаемое значение:
//   Структура - содержит:
//   * ИдентификаторПлана - Число
//   * Сотрудник          - СправочникСсылка.Пользователи
//   * Работа             - СправочникСсылка.ЗадачиПроцессов, СправочникСсылка.ТехническиеПроекты, СправочникСсылка.Ошибки, СправочникСсылка.ВидыДеятельности
//   * ПланируемыеТрудозатраты - Число
//   * Цель                    - Строка
//   * Достигнуто              - Строка
//   * Комментарий             - Строка
//   * ПеренестиВСледующийПлан - Булево
//   * Результат - Булево      - Перечисление.РезультатыВыполненияПланируемыхРабот
//
Функция НовыйДанныеЗаписиПлана() Экспорт
	
	ДанныеЗаписиПлана = Новый Структура;
	ДанныеЗаписиПлана.Вставить("ИдентификаторПлана",      0);
	ДанныеЗаписиПлана.Вставить("Сотрудник",               ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ДанныеЗаписиПлана.Вставить("Работа",                  Неопределено);
	ДанныеЗаписиПлана.Вставить("ТипСтрокиПлана",          ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.ПустаяСсылка"));
	ДанныеЗаписиПлана.Вставить("Группировка",             Неопределено);
	ДанныеЗаписиПлана.Вставить("ПланируемыеТрудозатраты", 0);
	ДанныеЗаписиПлана.Вставить("Цель",                    "");
	ДанныеЗаписиПлана.Вставить("Достигнуто",              "");
	ДанныеЗаписиПлана.Вставить("Комментарий",             "");
	ДанныеЗаписиПлана.Вставить("ПеренестиВСледующийПлан", Ложь);
	ДанныеЗаписиПлана.Вставить("Результат",               ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.ПустаяСсылка"));
	ДанныеЗаписиПлана.Вставить("Удалить",                 Ложь);
	
	Возврат ДанныеЗаписиПлана;
	
КонецФункции

// Формирует список плановых работ, по которым согласуются трудозатраты.
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция СписокТиповРаботПоКоторымСогласуютсяТрудозатраты() Экспорт
	
	СписокТиповРабот = Новый СписокЗначений;
	СписокТиповРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	СписокТиповРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	СписокТиповРабот.Добавить(Тип("СправочникСсылка.Ошибки"));
	
	Возврат СписокТиповРабот;
	
КонецФункции

// Формирует массив типов работ, у которых есть статусы и даты.
//
// Возвращаемое значение:
//   Массив
//
Функция ТипыРаботСоСтатусамиДатами() Экспорт
	
	МассивТиповРабот = Новый Массив;
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	МассивТиповРабот.Добавить(Тип("СправочникСсылка.Ошибки"));
	
	Возврат МассивТиповРабот;
	
КонецФункции

// Формирует список значений всех типов работ планирования.
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ВсеТипыРабот() Экспорт
	
	СписокРабот = Новый СписокЗначений;
	СписокРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	СписокРабот.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	СписокРабот.Добавить(Тип("СправочникСсылка.Ошибки"));
	СписокРабот.Добавить(Тип("СправочникСсылка.ВидыДеятельности"));
	
	Возврат СписокРабот;
	
КонецФункции

// Переводит секунды в часы
//
// Параметры:
//  Секунды - Число - количество секунд.
//
// Возвращаемое значение:
//   Число
//
Функция ЧасыПоДлительностиВСекундах(Секунды) Экспорт
	
	Возврат Окр(Секунды / 3600, 1, РежимОкругления.Окр15как20);
	
КонецФункции

// Находит в массиве структур элемент, соответствующий структуре поиска
//
// Параметры:
//  МассивСтруктур  - Массив - в нем выполняется поиск
//  СтруктураПоиска - Структура - параметры поиска
//
// Возвращаемое значение:
//   ЭлементМассива, Неопределено   - ЭлементМассива, если найдено, Неопределено если нет.
//
Функция НайденныйЭлементМассиваПоКлючуСтруктуры(МассивСтруктур, СтруктураПоиска) Экспорт
	
	Для Каждого ЭлементМассива Из МассивСтруктур Цикл
		
		ЗначенияИдентичны = Истина;
		
		Для Каждого КлючИЗначение Из СтруктураПоиска Цикл 
			
			Если ЭлементМассива[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
				ЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла; 
		
		Если ЗначенияИдентичны Тогда
			Возврат ЭлементМассива;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет, является ли текущий пользователь владельцем плана
//
// Параметры:
//  ВладельцыПлана  - СписокЗначений               - содержит владельцев плана
//  ВладельцыПлана - СправочникСсылка.Пользователи - пользователь, для которого 
//
// Возвращаемое значение:
//   Булево - Истина, если является.
//
Функция ТекущийПользовательВладелецПлана(ВладельцыПлана, ТекущийПользователь) Экспорт

	Возврат ВладельцыПлана.НайтиПоЗначению(ТекущийПользователь) <> Неопределено;

КонецФункции

// Рассчитывает значение колонки родительской строки по данным подчиненных строк.
//
// Параметры:
//  СтрокаДерева              - ДанныеФормыСтрокаДерева - строка дерева.
//  ИмяКолонки                - Строка - имя колонки, для которой рассчитывается значение.
//  РассчитыватьОстаток       - Булево - признак того, выводимое значение будет рассчитано по формуле: НормативДляРасчетаОстатка - Значение.
//  НормативДляРасчетаОстатка - Число - норматив, из которого будет рассчитываться остаток.
//
Процедура РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаДерева, ИмяКолонки, РассчитыватьОстаток = Ложь, НормативДляРасчетаОстатка = 0) Экспорт
	
	СтрокаДерева[ИмяКолонки] = 0;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		СтрокаДерева[ИмяКолонки] = СтрокаДерева[ИмяКолонки] + ПодчиненнаяСтрока[ИмяКолонки];
	КонецЦикла;
	
	Если РассчитыватьОстаток Тогда
		
		СтрокаДерева[ИмяКолонки] = НормативДляРасчетаОстатка - СтрокаДерева[ИмяКолонки];
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает значение массива колонок дерева по данным подчиненных строк.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, в котором находится дерево.
//  ИмяДерева         - Строка                     - имя дерева формы, для которого выполняется перерасчет.
//  МассивИменКолонок - Массив                     - имена колонок, для которых выполняется перерасчет.
//
Процедура ПересчитатьМассивКолонокРодительскихСтрокДереваПоДаннымПодчиненных(Форма, ИмяДерева, МассивИменКолонок) Экспорт

	Для Каждого СтрокаВерхнегоУровня Из Форма[ИмяДерева].ПолучитьЭлементы() Цикл
		
		ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня, МассивИменКолонок, Истина);
		
	КонецЦикла;

КонецПроцедуры

// Рассчитывает значение массива колонок строки дерева по данным подчиненных строк.
//
// Параметры:
//  СтрокаВерхнегоУровня - ДанныеФормыСтрокаДерева - строка, для которой выполняется перерасчет.
//  МассивИменКолонок    - Массив - имена колонок, для которых выполняется перерасчет.
//  ВключаяПодчиненные   - Булево - признак того, что для требуется перерасчитывать и значения подчиненных строк.
//
Процедура ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня, МассивИменКолонок, ВключаяПодчиненные) Экспорт

	Если ВключаяПодчиненные Тогда
	
		Для Каждого ПодчиненнаяСтрока Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл
			
			Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
				
				РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(ПодчиненнаяСтрока, ИмяКолонки);
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		
		РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня, ИмяКолонки);
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор параметров получения видов деятельности по статистике.
//
// Возвращаемое значение:
//   Структура - содержит:
//    * ТипЗаполнения     - Строка - 
//    * РаботыСотрудники  - Массив - 
//    * КонецПериода      - Дата - 
//    * НачалоПериода     - Дата - 
//
Функция ПараметрыПолученияВидовДеятельностиПоСтатистике() Экспорт
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ТипЗаполнения",                      "");
	ПараметрыПолучения.Вставить("РаботыСотрудники",                   Новый Массив);
	ПараметрыПолучения.Вставить("КонецПериода",                       Неопределено);
	ПараметрыПолучения.Вставить("НачалоПериода",                      Неопределено);
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Выполняет удаление из дерева формы массива строк.
//
// Параметры:
//  МассивСтрокКУдалению    - Массив - строки, которые требуется удалить.
//
Процедура ОбработатьУдалениеИзДереваМассиваСтрок(МассивСтрокКУдалению) Экспорт
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		
		РодительскаяСтрока = СтрокаКУдалению.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
		КоллекцияСтрок.Удалить(КоллекцияСтрок.Индекс(СтрокаКУдалению));
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, идентичны ли списки значений
//
// Параметры:
//  Список1 - СписокЗначений -
//  Список2 - СписокЗначений -
//
// Возвращаемое значение:
//   Булево - Истина, если списки идентичны.
//
Функция СпискиЗначенийИдентичны(Список1, Список2) Экспорт
	
	Если Список1.Количество() <> Список2.Количество() Тогда
		 Возврат Ложь;
	КонецЕсли;
	 
	Для Каждого ЭлементСписка Из Список1 Цикл
		
		Если Список2.НайтиПоЗначению(ЭлементСписка) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает родительскую строку верхнего уровня для строки дерева
//
// Параметры:
//  СтрокаДерева - ДанныеФормыДерево - строка, для которой получается строка верхнего уровня
//
// Возвращаемое значение:
//   ДанныеФормыДерево - найденная строка.
//
Функция РодительскаяСтрокаВерхнегоУровня(Знач СтрокаДерева) Экспорт

	СтрокаДерева = СтрокаДерева;
	
	Пока Истина Цикл
		
		РодительТекущейСтроки = СтрокаДерева.ПолучитьРодителя();
		
		Если РодительТекущейСтроки = Неопределено Тогда
			Возврат СтрокаДерева;
		Иначе
			СтрокаДерева = РодительТекущейСтроки;
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

// Конструктор параметров формирования отчета контроль планирования.
//
// Возвращаемое значение:
//   Структура - содержит:
//    * ПланЗанятости               - СправочникСсылка.ВидыПланов - 
//    * ВариантГруппировки          - Строка - 
//    * ПериодОтчета                - СтандартынйПериод - 
//    * ОтборПоУчастникам           - СписокЗначений -
//    * ОтборПоТехническимПроектам  - СписокЗначений -
//    * СформироватьПриОткрытии     - Истина - 
//    * КлючНазначенияИспользования - Строка - 
//
Функция НовыйПараметрыФормированияОтчетаКонтрольПланирования() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ПланЗанятости",                                       Неопределено);
	ПараметрыОткрытия.Вставить("ВариантГруппировки",                                  ""); 
	ПараметрыОткрытия.Вставить("ПериодОтчета",                                        Новый СтандартныйПериод);
	ПараметрыОткрытия.Вставить("ОтборПоУчастникам",                                   Неопределено);
	ПараметрыОткрытия.Вставить("ОтборПоТехническимПроектам",                          Неопределено);
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии",                             Ложь);
	ПараметрыОткрытия.Вставить("ПредставлениеОтбора",                                 "");
	ПараметрыОткрытия.Вставить("КлючНазначенияИспользования",                         "");
	ПараметрыОткрытия.Вставить("ДопустимыйПроцентОтклонения",                         0);
	ПараметрыОткрытия.Вставить("ТолькоСОтклонениемМеньшеНорматива",                   Ложь);
	ПараметрыОткрытия.Вставить("ТолькоСОтклонениемПревышениеНорматива",               Ложь);
	ПараметрыОткрытия.Вставить("ТолькоСОтклонениемРабочиеПланы",                      Ложь);
	ПараметрыОткрытия.Вставить("ТолькоСОтклонениемФакт",                              Ложь);
	ПараметрыОткрытия.Вставить("НеВыделятьДопустимыеДаты",                            Ложь);
	ПараметрыОткрытия.Вставить("НеВыделятьНераспределено",                            Ложь);
	ПараметрыОткрытия.Вставить("НеВыделятьРезерв",                                    Ложь);
	ПараметрыОткрытия.Вставить("НеВыделятьФактМинусПЗ",                               Ложь);
	ПараметрыОткрытия.Вставить("НеВыделятьСроки",                                     Ложь);
	ПараметрыОткрытия.Вставить("НеВыводитьПроект",                                    Ложь);
	ПараметрыОткрытия.Вставить("НеВыводитьВерсию",                                    Ложь);
	ПараметрыОткрытия.Вставить("НеВыводитьСроки",                                     Ложь);
	ПараметрыОткрытия.Вставить("НеВыводитьРПВПериодах",                               Ложь);
	ПараметрыОткрытия.Вставить("НеВыводитьФактВПериодах",                             Ложь);
	ПараметрыОткрытия.Вставить("СкрыватьПериодыНеСоотствующиеОтбору",                 Ложь);
	ПараметрыОткрытия.Вставить("СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору", Ложь);
	ПараметрыОткрытия.Вставить("СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору",      Ложь);
	ПараметрыОткрытия.Вставить("АбсолютноеДопустимоеОтлонение",                       0);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Возвращает идентификатор плана, преобразованный к строке.
//
// Возвращаемое значение:
//   Строка - преобразованный идентификатор
//
Функция ИдентификаторПланаСтрокой(ИдентификаторПлана) Экспорт

	Возврат Формат(ИдентификаторПлана, "ЧГ=0");

КонецФункции

// Формирует представление отображаемых технических проектов
//
// Параметры:
//  СписокПроектов - СписокЗначений - технические проекты, для которых формируется представление
//  ЭлементФормы   - ДекорацияФормы - элемент формы, в котором отображается представление
//  ЦветТекста     - Цвет - цвет, которым будет отображено представление
//
Процедура СформироватьПредставлениеОтображаемыхТехПроектов(СписокПроектов, ЭлементФормы, ЦветТекста) Экспорт
	
	КоличествоВыбранныхТехническихПроектов = СписокПроектов.Количество();
	
	Если СписокПроектов.Количество() = 0 Тогда
		
		ТекстПредставления = НСтр("ru = 'Ни одного тех.проекта не выбрано для отображения'");
		
	Иначе
		
		ТекстПредставления = СтрШаблон(НСтр("ru = 'Отбор: %1'"), ЭлементФормы.Заголовок);
		
	КонецЕсли;
	
	ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(ТекстПредставления,,ЦветТекста,,"ОткрытьПодборТехПроектов");
	
КонецПроцедуры

// Конструктор параметров условного оформления колонок рабочего места планирования по виду плана
//
// Параметры:
//  МассивСтруктур  - Массив - в нем выполняется поиск
//  СтруктураПоиска - Структура - параметры поиска
//
// Возвращаемое значение:
//   ЭлементМассива, Неопределено   - ЭлементМассива, если найдено, Неопределено если нет.
//
Функция НовыйПараметрыОформленияПоВидуПлана() Экспорт
	
	ПустойЦвет = Новый Цвет(0, 0, 0);
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("Использовать",              Ложь);
	ПараметрыОформления.Вставить("ЦветТекста" ,               ПустойЦвет);
	ПараметрыОформления.Вставить("Текст",                     "");
	ПараметрыОформления.Вставить("ЦветФона",                  ПустойЦвет);
	ПараметрыОформления.Вставить("АвтоотметкаНезаполненного", Ложь);
	
	Возврат ПараметрыОформления;
	
КонецФункции 

// Формирует значения параметров запроса по пороговому значению, указанному в виде плана.
//
// Параметры:
//  ПороговоеЗначение  - Число - указанное в виде плана пороговое значение.
//
// Возвращаемое значение:
//   Структура - содержит:
//    * ПороговоеЗначениеДляЭтапаПоЗапланировано - Число - 
//    * ПороговоеЗначениеДляЭтапаПоФакт          - Число - пересчитанное пороговое значение в секунды.
//
Функция ПараметрыОтображенияЭтапаПланаЗанятости(ПороговоеЗначение) Экспорт
	
	Если ПороговоеЗначение = 0 Тогда
		ПороговоеЗначение = -1;
	КонецЕсли;
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПороговоеЗначение);
	ПараметрыОтображения.Вставить("ПороговоеЗначениеДляЭтапаПоФакт",          ПороговоеЗначение * 3600);
	
	Возврат ПараметрыОтображения;
	
КонецФункции

// Формирует параметры отображения .
//
// Параметры:
//  НормативПланируемогоВремени                    - Число - указанный в виде плана норматив планируемого времени.
//  ПорогОтклоненияОтНормативаПланируемогоВремени  - Число - указанный в виде плана допустимый процент отклонения.
//
// Возвращаемое значение:
//   Структура - содержит:
//    * ПороговоеЗначениеДляЭтапаПоЗапланировано - Число - 
//    * ПороговоеЗначениеДляЭтапаПоФакт          - Число - пересчитанное пороговое значение в секунды.
//
Функция ПараметрыОтображенияПоНормативамВидаПлана(НормативПланируемогоВремени, 
	                                              ПорогОтклоненияОтНормативаПланируемогоВремени, 
	                                              ИнвертироватьОтображениеЗапланированоПоСотруднику) Экспорт
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("ВыделятьЗапланированноеСотрудникаЕслиБольше",  0);
	ПараметрыОтображения.Вставить("ВыделятьЗапланированноеСотрудникаЕслиМеньше",  0);
	ПараметрыОтображения.Вставить("ЕстьНормативПланируемогоВремени",              Ложь);
	ПараметрыОтображения.Вставить("НормативПланируемогоВремени",                  0);
	ПараметрыОтображения.Вставить("ПорогОтклоненияОтНормативаПланируемогоВремени",0);
	
	Инвертировать = ИнвертироватьОтображениеЗапланированоПоСотруднику = 1;
	
	Если НормативПланируемогоВремени = 0 Тогда
		Возврат ПараметрыОтображения;
	КонецЕсли;
	
	ПараметрыОтображения.НормативПланируемогоВремени                   = НормативПланируемогоВремени;
	ПараметрыОтображения.ПорогОтклоненияОтНормативаПланируемогоВремени = ПорогОтклоненияОтНормативаПланируемогоВремени;
	ПараметрыОтображения.ЕстьНормативПланируемогоВремени               = Истина;
	
	Если ПорогОтклоненияОтНормативаПланируемогоВремени = 0 Тогда
		
		Если Инвертировать Тогда
			
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиБольше = 0;
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиМеньше = 0;
			
		Иначе
			
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиБольше = НормативПланируемогоВремени;
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиМеньше = НормативПланируемогоВремени;
			
		КонецЕсли;
		
	Иначе
		
		ВеличинаОтклонения = (НормативПланируемогоВремени / 100) * ПорогОтклоненияОтНормативаПланируемогоВремени;
		
		Если Инвертировать Тогда
			
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиБольше = ВеличинаОтклонения;
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиМеньше = - ВеличинаОтклонения;
			
		Иначе
			
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиБольше = НормативПланируемогоВремени + ВеличинаОтклонения;
			ПараметрыОтображения.ВыделятьЗапланированноеСотрудникаЕслиМеньше = НормативПланируемогоВремени - ВеличинаОтклонения;
			
		КонецЕсли
		
	КонецЕсли;
	
	Возврат ПараметрыОтображения;
	
КонецФункции

// Устанавливает в форме значения параметров расчета по нормативам рабочего времение плана .
//
// Параметры:
//  Форма                                              - ФормаКлиентскогоПриложения - форма, для реквизитов которой устанавливаются значения
//  НормативПланируемогоВремени                        - Число - указанный в виде плана норматив планируемого времени.
//  ПорогОтклоненияОтНормативаПланируемогоВремени      - Число - указанный в виде плана допустимый процент отклонения.
//  ИнвертироватьОтображениеЗапланированоПоСотруднику  - Число - признак того, что в стороке по сотруднику,
//                                                                требуется показывать не общеее количество запланированных часов, а остаток до норматива.
//
Процедура УстановитьЗначенияПараметровРасчетаПоНормативам(Форма,
	                                                      НормативПланируемогоВремени, 
	                                                      ПорогОтклоненияОтНормативаПланируемогоВремени, 
	                                                      ИнвертироватьОтображениеЗапланированоПоСотруднику)  Экспорт
	
	ПараметрыОтображенияПоНормативамВидаПлана = ПланированиеКлиентСервер.ПараметрыОтображенияПоНормативамВидаПлана(
	                                            НормативПланируемогоВремени,
	                                            ПорогОтклоненияОтНормативаПланируемогоВремени,
	                                            ИнвертироватьОтображениеЗапланированоПоСотруднику);
	
	Форма.ВыделятьЗапланированноеСотрудникаЕслиБольше   = ПараметрыОтображенияПоНормативамВидаПлана.ВыделятьЗапланированноеСотрудникаЕслиБольше;
	Форма.ВыделятьЗапланированноеСотрудникаЕслиМеньше   = ПараметрыОтображенияПоНормативамВидаПлана.ВыделятьЗапланированноеСотрудникаЕслиМеньше;
	Форма.ЕстьНормативПланируемогоВремени               = ПараметрыОтображенияПоНормативамВидаПлана.ЕстьНормативПланируемогоВремени;
	Форма.НормативПланируемогоВремени                   = ПараметрыОтображенияПоНормативамВидаПлана.НормативПланируемогоВремени;
	Форма.ПорогОтклоненияОтНормативаПланируемогоВремени = ПараметрыОтображенияПоНормативамВидаПлана.ПорогОтклоненияОтНормативаПланируемогоВремени;
	
КонецПроцедуры

// Формирует параметры отображения .
//
// Параметры:
//  ЕстьНормативПланируемогоВремени                    - Булево - признак того, что в выбранном виде плана указан норматив рабочего времени.
//  ИнвертироватьОтображениеЗапланированоПоСотруднику  - Число - признак того, что в стороке по сотруднику,
//                                                                требуется показывать не общеее количество запланированных часов, а остаток до норматива.
//
// Возвращаемое значение:
//   Булево - Истина, если требуется рассчитывать остаток
//
Функция РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику) Экспорт

	Возврат ЕстьНормативПланируемогоВремени И ИнвертироватьОтображениеЗапланированоПоСотруднику = 1;

КонецФункции 

// Устанавливает состояние ожидания для табличного документа .
//
// Параметры:
//  ПолеТабличногоДокумента     - ПолеТабличногоДокумента - элемент формы, связанный с табличным документом.
//  КартинкаДлительнаяОперация  - Картинка                - картинка, демонстрирующая пользователю признак длительной операции.
//
Процедура УстановитьСостояниеОбновляется(ПолеТабличногоДокумента, КартинкаДлительнаяОперация) Экспорт

	ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = КартинкаДлительнаяОперация;
	ОтображениеСостояния.Текст                          = НСтр("ru = 'Данные обновляются, ожидайте...'");

КонецПроцедуры

// Конструктор параметров данных СКД для отборов в плане занятости.
//
// Возвращаемое значение:
//   Структура - содержит:
//    * АдресХранилищаНастройкиКомпоновщика - УникальныйИдентификатор - 
//    * ИмяСхемыКомпоновкиДанных            - Строка - 
//
Функция НовыйДанныеСхемыКомпоновкиОтбора() Экспорт
	
	ДанныеСхемыКомпоновкиОтбора = Новый Структура;
	ДанныеСхемыКомпоновкиОтбора.Вставить("АдресХранилищаНастройкиКомпоновщика", Неопределено);
	ДанныеСхемыКомпоновкиОтбора.Вставить("ИмяСхемыКомпоновкиДанных",            "");
	
	Возврат ДанныеСхемыКомпоновкиОтбора;
	
	
КонецФункции

// Конструктор параметров открытия формы настойки отборов в плане занятости.
//
// Возвращаемое значение:
//   Структура - содержит:
//    * ИмяСхемыКомпоновкиДанных         - Строка - 
//    * НастройкиКомпоновки              - НастройкиКомпоновкиДанных - 
//    * УникальныйИдентификаторВладельца - УникальныйИдентификатор - 
//
Функция НовыйПараметрыОткрытияФормыОтбораСКД() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяСхемыКомпоновкиДанных",         "");
	ПараметрыФормы.Вставить("НастройкиКомпоновки",              Неопределено);
	ПараметрыФормы.Вставить("УникальныйИдентификаторВладельца", Неопределено);
	
	Возврат ПараметрыФормы;
	
КонецФункции	

// Выводит представление отбора в форму .
//
// Параметры:
//  Форма               - ФормаКлиентскогоПриложения - форма, в которую выводится представление
//  ИмяДекорации        - Строка - имя декорации формы, в которой будет размещено представление.
//  ИмяКоманды          - Строка - имя команды, которая будет указана в гиперссылке.
//  ПредставлениеОтбора - Строка - представление отбора.
//

Процедура ВывестиПредставлениеОткрытьПодбор(Форма, ИмяДекорации, ИмяКоманды, ПредставлениеОтбора) Экспорт
	
	Форма.Элементы[ИмяДекорации].Заголовок 
		= Новый ФорматированнаяСтрока(ПредставлениеОтбора,,Форма.ЦветТекстаГиперссылки,, ИмяКоманды);

КонецПроцедуры

#КонецОбласти