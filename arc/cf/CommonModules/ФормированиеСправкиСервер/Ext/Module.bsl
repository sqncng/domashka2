
#Область ПрограммныйИнтерфейс

Функция СформироватьСправку(Знач Ссылка, ПараметрыФормированияСправки, ВариантыВыбраннойСправки = Неопределено, СоответствиеКартинокСправки = Неопределено) Экспорт
	
	ВариантыВыбраннойСправки = Новый СписокЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСправки = "";
	
	Проект = ОбщегоНазначенияСППРВызовСервера.ПроектОбъекта(Ссылка);
	
	Если ЗначениеЗаполнено(ПараметрыФормированияСправки.ВариантПроектСправки)
	   И ТипЗнч(ПараметрыФормированияСправки.ВариантПроектСправки) = Тип("СправочникСсылка.Проекты") Тогда
	
		ДеревоПодсистем = ДеревоПодсистем(ПараметрыФормированияСправки.ВариантПроектСправки);
	Иначе
		ДеревоПодсистем = ДеревоПодсистем(Проект);
	КонецЕсли; 
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		
		ИмяКласса = РаботаСОбъектамиМетаданных.ИмяКлассаОбъектаМетаданных(Ссылка);
		Если ИмяКласса = "Константы" ИЛИ ИмяКласса = "Роли" Тогда
			Возврат "";
		КонецЕсли;
		
		ТекстСправки = СформироватьСправкуОбъектаМетаданных(Ссылка, 
		                   Проект,
		                   ПараметрыФормированияСправки,
		                   ВариантыВыбраннойСправки, 
		                   СоответствиеКартинокСправки);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Подсистемы") Тогда
		
		ТекстСправки = СформироватьСправкуПодсистемы(Ссылка, 
			               Проект,
			               ПараметрыФормированияСправки,
			               ДеревоПодсистем,
			               ВариантыВыбраннойСправки,
			               СоответствиеКартинокСправки);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
		
		ТекстСправки = СформироватьСправкуФормы(Ссылка, 
		                   Проект,
		                   ПараметрыФормированияСправки, 
		                   ДеревоПодсистем,
		                   ВариантыВыбраннойСправки, 
		                   СоответствиеКартинокСправки);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлементыСправки") Тогда
		
		ТекстСправки = СформироватьСправкуЭлементаСправкиСИерархией(Ссылка, 
		                   ПараметрыФормированияСправки.ИспользоватьСсылкиСППР, 
		                   ПараметрыФормированияСправки.ПоказатьСсылкуДляРедактирования, 
		                   СоответствиеКартинокСправки);
		
		// других вариантов не предусмотрено
	КонецЕсли;
	
	Возврат ТекстСправки;
	
КонецФункции

Функция ПараметрыФормированияСправки() Экспорт
	
	ПараметрыФормированияСправки = Новый Структура;
	ПараметрыФормированияСправки.Вставить("ИспользоватьСсылкиСППР", Ложь);
	ПараметрыФормированияСправки.Вставить("ВариантыПроектСправки",  Неопределено);
	ПараметрыФормированияСправки.Вставить("ДатаВерсии",            '00010101000000');
	ПараметрыФормированияСправки.Вставить("ПоказатьСсылкуДляРедактирования",       Ложь);
	ПараметрыФормированияСправки.Вставить("ВключатьСсылкиНаСправкуПоискаВСписках", Ложь);
	Возврат ПараметрыФормированияСправки;

КонецФункции

Функция СформироватьВариантыСправки(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Владелец.Владелец");
	Иначе 
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Владелец");
	КонецЕсли; 
	
	ПроектыДляКоторыхВедетсяСправка = РаботаСоСправкойПовтИсп.ПроектыДляКоторыхВедетсяСправка(Проект);
	
	ВариантыСправки = Новый Соответствие;
	
	Для Каждого Строка Из ПроектыДляКоторыхВедетсяСправка Цикл
	
		ПараметрыФормированияСправки = ФормированиеСправкиСервер.ПараметрыФормированияСправки();
		ПараметрыФормированияСправки.Вставить("ИспользоватьСсылкиСППР", Истина);
		ПараметрыФормированияСправки.Вставить("ВариантПроектСправки",   Строка.Проект);
		
		ТекстСправки = СформироватьСправку(Ссылка, ПараметрыФормированияСправки);
		ТекстСправки = "<HTML>" + ТекстСправки + "</HTML>";
		
		ВариантыСправки.Вставить(Строка.Проект, ТекстСправки);
	
	КонецЦикла; 
	
	ПроектПустаяСсылка = Справочники.Проекты.ПустаяСсылка();
	
	ПараметрыФормированияСправки = ФормированиеСправкиСервер.ПараметрыФормированияСправки();
	ПараметрыФормированияСправки.Вставить("ИспользоватьСсылкиСППР", Истина);
	ПараметрыФормированияСправки.Вставить("ВариантПроектСправки",   ПроектПустаяСсылка);
	
	ТекстСправки = СформироватьСправку(Ссылка, ПараметрыФормированияСправки);
	ТекстСправки = "<HTML>" + ТекстСправки + "</HTML>";
	
	ВариантыСправки.Вставить(ПроектПустаяСсылка, ТекстСправки);
	
	Возврат ВариантыСправки;
	
КонецФункции

// Обновление стиля в окне просмотра
Процедура ОбновитьСтили() Экспорт
	
	// Удалять ничего не будем - могут быть стили отсутствующие в шаблоне
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Спр.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтилиФорматирования КАК Спр
	|");
	
	ТекущиеСтили = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Макет = Справочники.СтилиФорматирования.ПолучитьМакет("ЭталонныеСтилиФорматирования");
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Макет.Область(2, , Макет.ВысотаТаблицы));
	
	ЗагружаемыеСтили = Новый ТаблицаЗначений;
	ЗагружаемыеСтили.Колонки.Добавить("Ссылка");
	ЗагружаемыеСтили.Колонки.Добавить("Родитель");
	ЗагружаемыеСтили.Колонки.Добавить("ЭтоГруппа");
	ЗагружаемыеСтили.Колонки.Добавить("Наименование");
	ЗагружаемыеСтили.Колонки.Добавить("Шаблон");
	ЗагружаемыеСтили.Колонки.Добавить("СтильКартинка");
	ЗагружаемыеСтили.Колонки.Добавить("ИмяПредопределенного");
	
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗагружаемыеСтили.Добавить();
		
		НоваяСтрока.Ссылка		  = ЗначениеИзСтрокиВнутр(Выборка.Ссылка);
		НоваяСтрока.Родитель	  = ЗначениеИзСтрокиВнутр(Выборка.Родитель);
		НоваяСтрока.ЭтоГруппа	  = Булево(Число(Выборка.ЭтоГруппа));
		НоваяСтрока.Наименование  = Выборка.Наименование;
		НоваяСтрока.ИмяПредопределенного  = Выборка.ИмяПредопределенного;
		
		Если Не НоваяСтрока.ЭтоГруппа Тогда
			НоваяСтрока.Шаблон = Выборка.Шаблон;
			НоваяСтрока.СтильКартинка = Булево(Число(Выборка.СтильКартинка));
		КонецЕсли
	КонецЦикла;
	
	Для Каждого ЗагружаемыйСтиль Из ЗагружаемыеСтили Цикл
		
		Если ТекущиеСтили.Найти(ЗагружаемыйСтиль.Ссылка) <> Неопределено Тогда
			ТекОбъект = ЗагружаемыйСтиль.Ссылка.ПолучитьОбъект();
		Иначе
			Если ЗагружаемыйСтиль.ЭтоГруппа Тогда
				ТекОбъект = Справочники.СтилиФорматирования.СоздатьГруппу();
			Иначе
				ТекОбъект = Справочники.СтилиФорматирования.СоздатьЭлемент();
			КонецЕсли;
		КонецЕсли;
		
		Если ТекОбъект <> Неопределено Тогда
			
			Если ТекОбъект.ЭтоНовый() Тогда
				ТекОбъект.УстановитьСсылкуНового(ЗагружаемыйСтиль.Ссылка);
			КонецЕсли;
			
			ТекОбъект.Родитель          = ЗагружаемыйСтиль.Родитель;
			ТекОбъект.Наименование      = ЗагружаемыйСтиль.Наименование;
			ТекОбъект.ИмяПредопределенныхДанных = ЗагружаемыйСтиль.ИмяПредопределенного;
			
			Если Не ТекОбъект.ЭтоГруппа Тогда
				ТекОбъект.Шаблон = ЗагружаемыйСтиль.Шаблон;
				ТекОбъект.СтильКартинка = ЗагружаемыйСтиль.СтильКартинка;
			КонецЕсли;
			
			ТекОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение идентификатора объекта справки
Функция ИдентификаторОбъекта(Знач Ссылка, ИспользоватьСсылкиСППР, ДеревоПодсистем = Неопределено)
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	// Для некоторых типов идентификатор в справке должен быть сложным и включать закладку
	ИмяЗакладки = "";
	
	Если ИспользоватьСсылкиСППР Тогда
		Идентификатор = ЗначениеВСтрокуВнутр(Ссылка);
		Идентификатор = СтрЗаменить(СтрЗаменить(Идентификатор, "}", ""), "{""#""", "");
		Идентификатор = "../" + Идентификатор;
	Иначе
		Идентификатор = ИдентификаторОбъектаДляСправки(Ссылка, Ложь, ДеревоПодсистем) + "/Help";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяЗакладки) Тогда
		Идентификатор = Идентификатор+ "#"+ ИмяЗакладки;
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ИдентификаторОбъектаДляСправки(Ссылка, ВыгружатьВФорматеEDT = Ложь, ДеревоПодсистем = Неопределено) Экспорт
	
	ИдентификаторОбъекта = Неопределено;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Подсистемы") Тогда
		Если ЗначениеЗаполнено(ДеревоПодсистем) Тогда
			ИдентификаторОбъекта = ПолныйИдентификаторПодсистемы(Ссылка, ДеревоПодсистем, ВыгружатьВФорматеEDT);
		Иначе
			ИдентификаторОбъекта = ИдентификаторПодсистемы(Ссылка, ВыгружатьВФорматеEDT);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		ИдентификаторОбъекта = ИдентификаторОбъектаМетаданных(Ссылка, ВыгружатьВФорматеEDT);
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
		ИдентификаторОбъекта = ИдентификаторФормыОбъектаМетаданных(Ссылка, ВыгружатьВФорматеEDT);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = Неопределено Тогда
		ИдентификаторОбъекта = "";
	КонецЕсли;
	
	Возврат ИдентификаторОбъекта;
	
КонецФункции

Функция ИдентификаторПодсистемы(Ссылка, ВФорматеEDT)
	
	Имя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Имя");
	
	Возврат ?(ВФорматеEDT, "Subsystems/" + Имя, "Subsystem." + Имя);
	
КонецФункции

Функция ИдентификаторОбъектаМетаданных(Ссылка, ВФорматеEDT)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыМетаданных.Родитель.Имя КАК ИмяКласса,
	|	ОбъектыМетаданных.Имя КАК Имя
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Имя = Выборка.Имя;
		ИмяКласса = Выборка.ИмяКласса;
	Иначе
		Возврат "_";
	КонецЕсли;
	
	Если ИмяКласса = "ПланыОбмена" Тогда
		Идентификатор = ?(ВФорматеEDT, "ExchangePlans/" + Имя,
		                               "ExchangePlan."  + Имя);
	ИначеЕсли ИмяКласса = "ОбщиеФормы" Тогда
		Идентификатор = ?(ВФорматеEDT, "CommonForms/" + Имя,
		                               "CommonForm."  + Имя);
	ИначеЕсли ИмяКласса = "ОбщиеКоманды" Тогда
		Идентификатор = ?(ВФорматеEDT, "CommonCommands/" + Имя,
		                               "CommonCommand."  + Имя);
	ИначеЕсли ИмяКласса = "Справочники" Тогда
		Идентификатор = ?(ВФорматеEDT, "Catalogs/" + Имя,
		                               "Catalog."  + Имя);
	ИначеЕсли ИмяКласса = "Документы" Тогда
		Идентификатор = ?(ВФорматеEDT, "Documents/" + Имя,
		                               "Document."  + Имя);
	ИначеЕсли ИмяКласса = "ЖурналыДокументов" Тогда
		Идентификатор = ?(ВФорматеEDT, "DocumentJournals/" + Имя,
		                               "DocumentJournal."  + Имя);
	ИначеЕсли ИмяКласса = "Перечисления" Тогда
		Идентификатор = ?(ВФорматеEDT, "Enums/" + Имя,
		                               "Enum."  + Имя);
	ИначеЕсли ИмяКласса = "Отчеты" Тогда
		Идентификатор = ?(ВФорматеEDT, "Reports/" + Имя,
		                               "Report."  + Имя);
	ИначеЕсли ИмяКласса = "Обработки" Тогда
		Идентификатор = ?(ВФорматеEDT, "DataProcessors/" + Имя,
		                               "DataProcessor."  + Имя);
	ИначеЕсли ИмяКласса = "ПланыВидовХарактеристик" Тогда
		Идентификатор = ?(ВФорматеEDT, "ChartsOfCharacteristicTypes/" + Имя,
		                               "ChartOfCharacteristicTypes."  + Имя);
	ИначеЕсли ИмяКласса = "ПланыСчетов" Тогда
		Идентификатор = ?(ВФорматеEDT, "ChartsOfAccounts/" + Имя,
		                               "ChartOfAccounts."  + Имя);
	ИначеЕсли ИмяКласса = "ПланыВидовРасчета" Тогда
		Идентификатор = ?(ВФорматеEDT, "ChartsOfCalculationTypes/" + Имя,
		                               "ChartOfCalculationTypes."  + Имя);
	ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
		Идентификатор = ?(ВФорматеEDT, "InformationRegisters/" + Имя,
		                               "InformationRegister."  + Имя);
	ИначеЕсли ИмяКласса = "РегистрыНакопления" Тогда
		Идентификатор = ?(ВФорматеEDT, "InformationRegisters/" + Имя,
		                               "InformationRegister."  + Имя);
	ИначеЕсли ИмяКласса = "РегистрыБухгалтерии" Тогда
		Идентификатор = ?(ВФорматеEDT, "AccountingRegisters/" + Имя,
		                               "AccountingRegister."  + Имя);
	ИначеЕсли ИмяКласса = "РегистрыРасчета" Тогда
		Идентификатор = ?(ВФорматеEDT, "CalculationRegisters/" + Имя,
		                               "CalculationRegister."  + Имя);
	ИначеЕсли ИмяКласса = "БизнесПроцессы" Тогда
		Идентификатор = ?(ВФорматеEDT, "BusinessProcesses/" + Имя,
		                               "BusinessProcess."   + Имя);
	ИначеЕсли ИмяКласса = "Задачи" Тогда
		Идентификатор = ?(ВФорматеEDT, "Tasks/" + Имя,
		                               "Task."  + Имя);
	Иначе
		Идентификатор = "_";
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

Функция ИдентификаторФормыОбъектаМетаданных(Ссылка, ВФорматеEDT)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФормыОбъектовМетаданных.Владелец.Имя КАК ИмяОбъекта,
	|	ФормыОбъектовМетаданных.Имя КАК ИмяФормы,
	|	ФормыОбъектовМетаданных.Владелец.Родитель.Имя КАК ИмяКласса
	|ИЗ
	|	Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|ГДЕ
	|	ФормыОбъектовМетаданных.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИмяОбъекта = Выборка.ИмяОбъекта;
		ИмяКласса = Выборка.ИмяКласса;
		ИмяФормы = Выборка.ИмяФормы;
	Иначе
		Возврат "_";
	КонецЕсли;
	
	Если ИмяКласса = "ПланыОбмена" Тогда
		Идентификатор = ?(ВФорматеEDT, "ExchangePlans/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "ExchangePlan."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "КритерииОтбора" Тогда
		Идентификатор = ?(ВФорматеEDT, "FilterCriteria/"  + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "FilterCriterion." + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "ХранилищаНастроек" Тогда
		Идентификатор = ?(ВФорматеEDT, "SettingsStorages/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "SettingsStorage."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "Справочники" Тогда
		Идентификатор = ?(ВФорматеEDT, "Catalogs/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "Catalog."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "Документы" Тогда
		Идентификатор = ?(ВФорматеEDT, "Documents/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "Document." + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "ЖурналыДокументов" Тогда
		Идентификатор = ?(ВФорматеEDT, "DocumentJournals/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "DocumentJournal."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "Перечисления" Тогда
		Идентификатор = ?(ВФорматеEDT, "Enums/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "Enum."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "Отчеты" Тогда
		Идентификатор = ?(ВФорматеEDT, "Reports/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "Report." + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "Обработки" Тогда
		Идентификатор = ?(ВФорматеEDT, "DataProcessors/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "DataProcessor."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "ПланыВидовХарактеристик" Тогда
		Идентификатор = ?(ВФорматеEDT, "ChartsOfCharacteristicTypes/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "ChartOfCharacteristicTypes."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "ПланыСчетов" Тогда
		Идентификатор = ?(ВФорматеEDT, "ChartsOfAccounts/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "ChartOfAccounts." + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "ПланыВидовРасчета" Тогда
		Идентификатор = ?(ВФорматеEDT, "ChartsOfCalculationTypes/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "ChartOfCalculationTypes."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "РегистрыСведений" Тогда
		Идентификатор = ?(ВФорматеEDT, "InformationRegisters/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "InformationRegister."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "РегистрыНакопления" Тогда
		Идентификатор = ?(ВФорматеEDT, "AccumulationRegisters/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "AccumulationRegister."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "РегистрыБухгалтерии" Тогда
		Идентификатор = ?(ВФорматеEDT, "AccountingRegisters/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "AccountingRegister."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "РегистрыРасчета" Тогда
		Идентификатор = ?(ВФорматеEDT, "CalculationRegisters/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "CalculationRegister."  + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "БизнесПроцессы" Тогда
		Идентификатор = ?(ВФорматеEDT, "BusinessProcesses/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "BusinessProcess."   + ИмяОбъекта + ".Form." + ИмяФормы);
	ИначеЕсли ИмяКласса = "Задачи" Тогда
		Идентификатор = ?(ВФорматеEDT, "Tasks/" + ИмяОбъекта + "/Forms/" + ИмяФормы,
		                               "Task."  + ИмяОбъекта + ".Form." + ИмяФормы);
	Иначе
		Идентификатор = "_";
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Получение текста по имени области
Функция ПолучитьТекстОбласти(ИмяОбласти, Макет) Экспорт
	
	Если ПустаяСтрока(ИмяОбласти) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстМакета = Макет.ПолучитьТекст();
	ТекстДляПоиска = "#Область " + СокрЛП(ИмяОбласти);
	
	Если Найти(ТекстМакета, ТекстДляПоиска) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Область.УдалитьСтроку(1);
		Область.УдалитьСтроку(Область.КоличествоСтрок());
		
		Возврат  Область.ПолучитьТекст();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Процедура добавления подстроки к строке
Процедура ДобавитьТекстКСправке(ДобавляемыйТекст, ТекстСправки) Экспорт
	
	Если ПустаяСтрока(ДобавляемыйТекст) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСправки) Тогда
		ТекстСправки = СокрЛП(ТекстСправки) + Символы.ПС;
	КонецЕсли;
	
	ТекстСправки = ТекстСправки + СокрЛП(ДобавляемыйТекст);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПОДСИСТЕМЫ

// Основная функция формирования справки для справочника "Подсистемы"
Функция СформироватьСправкуПодсистемы(Ссылка, Проект, ПараметрыФормированияСправки,
                                      ДеревоПодсистем, ВариантыВыбраннойСправки, СоответствиеКартинокСправки)
	
	ТекстСправки = "";
	ДатаВерсии                      = ПараметрыФормированияСправки.ДатаВерсии;
	ИспользоватьСсылкиСППР          = ПараметрыФормированияСправки.ИспользоватьСсылкиСППР;
	ВариантПроектСправки            = ПараметрыФормированияСправки.ВариантПроектСправки;
	ПоказатьСсылкуДляРедактирования = ПараметрыФормированияСправки.ПоказатьСсылкуДляРедактирования;
	
	Если Ссылка.ЭтоГруппа Тогда
		Возврат ТекстСправки;
	КонецЕсли;
	
	Если ДатаВерсии <> '00010101000000' Тогда
		Возврат ВерсияСправкиНаДату(Ссылка, ДатаВерсии, ВариантПроектСправки);
	КонецЕсли;
	
	// Для общей справки используется шаблон
	ТекстШаблона = Справочники.СтилиФорматирования.СтильПодсистемыПоУмолчанию.Шаблон;
	
	Если ПустаяСтрока(ТекстШаблона) Тогда
		Возврат ТекстСправки;
	КонецЕсли;
	
	Макет = Новый ТекстовыйДокумент;
	Макет.УстановитьТекст(ТекстШаблона);
	
	// Заголовок справки
	ТекстИмяПодсистемы = ЗаголовокОбъекта(Ссылка, Проект, ВариантПроектСправки, ВариантыВыбраннойСправки);
	ТекстЗаголовка     = СтрЗаменить(ПолучитьТекстОбласти("ОбластьЗаголовка", Макет), "[ТекстЗаголовка]", ТекстИмяПодсистемы);
	
	ТекстСправкиПослеЗаголовка = "";
	
	ДеревоСправкиПодсистемы = СформироватьДеревоЭлементовСправки(Ссылка, ВариантПроектСправки, ВариантыВыбраннойСправки);
	ТекстСобственногоОписания = СформироватьТекстСправкиПоДеревуЭлементов(ДеревоСправкиПодсистемы, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки);
	
	Поправка = 0;
	Если НЕ ПустаяСтрока(ТекстСобственногоОписания) Тогда
		Поправка = 1;
	КонецЕсли;
	
	// Вывод общего описания
	Если НЕ ПустаяСтрока(ТекстСобственногоОписания) Тогда
		ТекстОписанияПодсистемы = ПолучитьТекстОбласти("ОбластьОписанияПодсистемы", Макет);
		ТекстОписанияПодсистемы = СтрЗаменить(ТекстОписанияПодсистемы, "[ТекстОписания]", ТекстСобственногоОписания);
		ДобавитьТекстКСправке(ТекстОписанияПодсистемы, ТекстСправкиПослеЗаголовка);
	КонецЕсли;
	
	// Подсистемы
	ДеревоДочернихПодсистем = ДеревоДочернихПодсистем(Ссылка, Проект, ВариантПроектСправки);
	
	Если ДеревоДочернихПодсистем.Строки.Количество() > 0 Тогда
		ДобавитьТекстКСправке(ПолучитьТекстОбласти("ОбластьЗаголовкаПерейтиКПодсистемам", Макет), ТекстСправкиПослеЗаголовка);
		ТекстСвязанныхПодсистем = ПолучитьТекстОбласти("ОбластьСвязанныхПодсистем", Макет);
		// Иерархический вывод
		ВыводИерархииПодсистем(ДеревоДочернихПодсистем, ТекстСвязанныхПодсистем, ТекстСправкиПослеЗаголовка, ИспользоватьСсылкиСППР, ДеревоПодсистем);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСправкиПослеЗаголовка) Тогда
		
		ДобавитьТекстКСправке(ТекстЗаголовка, ТекстСправки);
		ДобавитьТекстКСправке(ТекстСправкиПослеЗаголовка, ТекстСправки);
	
		// Завершающий блок
		ДобавитьТекстКСправке(ПолучитьТекстОбласти("ОбластьЗавершенияТекста", Макет), ТекстСправки);
		
	КонецЕсли;
	
	Возврат ТекстСправки;
	
КонецФункции

// Определение дерева дочерних подсистем
Функция ДеревоДочернихПодсистем(Ссылка, Проект, ВариантПроектСправки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подсистема",    Ссылка);
	Запрос.УстановитьПараметр("ВариантПроект", ВариантПроектСправки);
	
	ЭтоВариантДочернегоПроекта = ЗначениеЗаполнено(ВариантПроектСправки) И ВариантПроектСправки <> Проект;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подсистемы.Ссылка          КАК Ссылка,
	|	Подсистемы.Наименование    КАК Наименование,
	|	Подсистемы.Синоним         КАК Синоним,
	|	Подсистемы.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(ПодсистемыДочерние.Ссылка, ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)) КАК СсылкаДочернего,
	|	ЕСТЬNULL(ПодсистемыДочерние.Наименование, """")    КАК НаименованиеДочернего,
	|	ЕСТЬNULL(ПодсистемыДочерние.Синоним,      """")    КАК СинонимДочернего
	|ИЗ
	|	Справочник.Подсистемы КАК Подсистемы
	|" +?(ЭтоВариантДочернегоПроекта, "ВНУТРЕННЕЕ", "ЛЕВОЕ") + " СОЕДИНЕНИЕ Справочник.Подсистемы КАК ПодсистемыДочерние
	|		ПО 	Подсистемы.uuid = ПодсистемыДочерние.uuid
	|				И ПодсистемыДочерние.Владелец = &ВариантПроект
	|				И ПодсистемыДочерние.Поставщик = Подсистемы.Владелец
	|				И НЕ ПодсистемыДочерние.ПометкаУдаления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ЭлементыСправки
	|		ПО ЭлементыСправки.Владелец = Подсистемы.Ссылка
	|			И НЕ ВЫРАЗИТЬ(ЭлементыСправки.ТекстСправки КАК СТРОКА(10)) = """"
	|			И (ЭлементыСправки.ВключатьВСправку)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки.ПроектыВключающиеСправку КАК ПроектыЭлементовСправкиВсего
	|		ПО ПроектыЭлементовСправкиВсего.Ссылка = ЭлементыСправки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки.ПроектыВключающиеСправку КАК ПроектыЭлементовСправкиПоВарианту
	|		ПО ПроектыЭлементовСправкиПоВарианту.Ссылка = ЭлементыСправки.Ссылка
	|			И ПроектыЭлементовСправкиПоВарианту.Проект = &ВариантПроект
	|ГДЕ
	|	Подсистемы.Родитель В ИЕРАРХИИ(&Подсистема)
	|	И (НЕ Подсистемы.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	Подсистемы.Ссылка,
	|	Подсистемы.Наименование,
	|	Подсистемы.Синоним,
	|	Подсистемы.ПометкаУдаления,
	|	ПодсистемыДочерние.Ссылка,
	|	ПодсистемыДочерние.Наименование,
	|	ПодсистемыДочерние.Синоним
	|
	|ИМЕЮЩИЕ
	| КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) > 0
	| И (    МИНИМУМ(ВЫБОР КОГДА ПроектыЭлементовСправкиВсего.Проект ЕСТЬ NULL ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) = 0
	|    ИЛИ (КОЛИЧЕСТВО(ПроектыЭлементовСправкиВсего.Проект) > 0 И КОЛИЧЕСТВО(ПроектыЭлементовСправкиПоВарианту.Проект) > 0)
	|   )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подсистемы.ПометкаУдаления,
	|	Подсистемы.Код ИЕРАРХИЯ";
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

// Вывод в справку иерархии дочерних подсистем
Процедура ВыводИерархииПодсистем(ВеткаДерева, ТекстСвязанныхПодсистем, ТекстСправки, ИспользоватьСсылкиСППР, ДеревоПодсистем, Уровень = 1)
	
	Для Каждого СтрокаДерева Из ВеткаДерева.Строки Цикл
		
		Синоним = ?(ЗначениеЗаполнено(СтрокаДерева.СинонимДочернего), СтрокаДерева.СинонимДочернего, СтрокаДерева.Синоним);
		СтрокаПодсистемы = СтрЗаменить(ТекстСвязанныхПодсистем, "[СвязаннаяПодсистема]", Синоним);
		
		Ссылка = ?(ЗначениеЗаполнено(СтрокаДерева.СсылкаДочернего), СтрокаДерева.СсылкаДочернего, СтрокаДерева.Ссылка);
		СтрокаПодсистемы = СтрЗаменить(СтрокаПодсистемы, "[СвязаннаяПодсистемаСсылка]", ИдентификаторОбъекта(Ссылка, ИспользоватьСсылкиСППР, ДеревоПодсистем));
		СтрокаПодсистемы = СтрЗаменить(СтрокаПодсистемы, "[ОтступСлева]", Строка(Уровень * 20));
			
		ДобавитьТекстКСправке(СтрокаПодсистемы, ТекстСправки);
			
		ВыводИерархииПодсистем(СтрокаДерева, ТекстСвязанныхПодсистем, ТекстСправки, ИспользоватьСсылкиСППР, ДеревоПодсистем, Уровень + 1);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЪЕКТЫ МЕТАДАННЫХ

// Основная функция формирования справки для объекта метаданных
Функция СформироватьСправкуОбъектаМетаданных(Ссылка, Проект, ПараметрыФормированияСправки, 
                  ВариантыВыбраннойСправки, СоответствиеКартинокСправки)
	
	ТекстСправки = "";
	ДатаВерсии                      = ПараметрыФормированияСправки.ДатаВерсии;
	ИспользоватьСсылкиСППР          = ПараметрыФормированияСправки.ИспользоватьСсылкиСППР;
	ВариантПроектСправки            = ПараметрыФормированияСправки.ВариантПроектСправки;
	ПоказатьСсылкуДляРедактирования = ПараметрыФормированияСправки.ПоказатьСсылкуДляРедактирования;
	
	Если Ссылка.ЭтоГруппа Тогда
		Возврат ТекстСправки;
	КонецЕсли;
	
	Если ДатаВерсии <> '00010101000000' Тогда
		Возврат ВерсияСправкиНаДату(Ссылка, ДатаВерсии, ВариантПроектСправки);
	КонецЕсли;
	
	ТекстШаблона = Справочники.СтилиФорматирования.СтильМетаданныхПоУмолчанию.Шаблон;
	
	Если ПустаяСтрока(ТекстШаблона) Тогда
		Возврат ТекстСправки;
	КонецЕсли;
	
	Макет = Новый ТекстовыйДокумент;
	Макет.УстановитьТекст(ТекстШаблона);
	
	// Заголовок справки
	ТекстИмяПодсистемы = ЗаголовокОбъекта(Ссылка, Проект, ВариантПроектСправки, ВариантыВыбраннойСправки);
	ТекстЗаголовка     = СтрЗаменить(ПолучитьТекстОбласти("ОбластьЗаголовка", Макет), "[НазваниеМетаданных]", ТекстИмяПодсистемы);
	
	ТекстСправкиПослеЗаголовка = "";
	
	ДеревоЭлементовСправки = СформироватьДеревоЭлементовСправки(Ссылка, ВариантПроектСправки, ВариантыВыбраннойСправки);
	
	ТекстКраткогоОписанияОМ = СформироватьЧастьСправкиДоПервогоЗаголовка(ДеревоЭлементовСправки, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки);
	ДобавитьТекстКСправке(ТекстКраткогоОписанияОМ, ТекстСправкиПослеЗаголовка);
	
	ОглавлениеСправки = СформироватьОглавлениеСправкиПоДеревуЭлементов(ДеревоЭлементовСправки, Макет, ИспользоватьСсылкиСППР);
	ДобавитьТекстКСправке(ОглавлениеСправки, ТекстСправкиПослеЗаголовка);
	
	ТекстСобственнойСправки = СформироватьТекстСправкиПоДеревуЭлементов(ДеревоЭлементовСправки, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки);
	ДобавитьТекстКСправке(ТекстСобственнойСправки, ТекстСправкиПослеЗаголовка);
	
	Если ЗначениеЗаполнено(ТекстСправкиПослеЗаголовка) Тогда
		
		ДобавитьТекстКСправке(ТекстЗаголовка, ТекстСправки);
		ДобавитьТекстКСправке(ТекстСправкиПослеЗаголовка, ТекстСправки);
		
		// Завершающий блок
		ДобавитьТекстКСправке(ПолучитьТекстОбласти("ОбластьЗавершенияТекста", Макет), ТекстСправки);
		
	КонецЕсли;
	
	Возврат ТекстСправки;
	
КонецФункции

Функция ВерсияСправкиНаДату(Ссылка, ДатаВерсии, ВариантПроектСправки)
	Перем ВариантыСправки;
	
	Версионирование.ОписаниеСхемаВерсииОбъекта(Ссылка, ДатаВерсии,,,ВариантыСправки, Перечисления.ВидыОбъектов.СправкаОбъектаМетаданных);
	
	Если ЗначениеЗаполнено(ВариантПроектСправки) Тогда
		Возврат ВариантыСправки.Получить(ВариантПроектСправки);
	КонецЕсли;
		
	Возврат ВариантыСправки.Получить(Справочники.Проекты.ПустаяСсылка());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМЫ ОБЪЕКТОВ МЕТАДАННЫХ

// Основная функция для формирования справки для форм объектов метаданных
Функция СформироватьСправкуФормы(Ссылка, Проект, ПараметрыФормированияСправки, ДеревоПодсистем, ВариантыВыбраннойСправки, СоответствиеКартинокСправки)
	
	ТекстСправки = "";
	
	Если Ссылка.ЭтоГруппа Тогда
		Возврат ТекстСправки;
	КонецЕсли;
	
	Если ПараметрыФормированияСправки.ДатаВерсии <> '00010101000000' Тогда
		Возврат ВерсияСправкиНаДату(Ссылка, 
		                            ПараметрыФормированияСправки.ДатаВерсии, 
		                            ПараметрыФормированияСправки.ВариантПроектСправки);
	КонецЕсли;
	
	// Из шаблона по умолчанию берется общее оформление и стили для строк, у которых не задан свой стиль
	ТекстШаблонаПоУмолчанию = Справочники.СтилиФорматирования.СтильФормыПоУмолчанию.Шаблон;
	ТекстШаблонаПодсистемыПоУмолчанию = Справочники.СтилиФорматирования.СтильПодсистемыПоУмолчанию.Шаблон;
	
	Макет = Новый ТекстовыйДокумент;
	Макет.УстановитьТекст(ТекстШаблонаПоУмолчанию);
	
	МакетПодсистемы = Новый ТекстовыйДокумент;
	МакетПодсистемы.УстановитьТекст(ТекстШаблонаПодсистемыПоУмолчанию);
		
	// Заголовок справки
	ТекстИмяФормы  = ЗаголовокОбъекта(Ссылка, Проект, ПараметрыФормированияСправки.ВариантПроектСправки, ВариантыВыбраннойСправки);
	ТекстЗаголовка = СтрЗаменить(ПолучитьТекстОбласти("ОбластьЗаголовка", Макет), "[НазваниеФормы]", ТекстИмяФормы);
	ДобавитьТекстКСправке(ТекстЗаголовка, ТекстСправки);   	
	
	ТекстОглавленияОМ = "";
	
	ВариантыВыбраннойСправкиВладельца = Новый СписокЗначений;
	
	МассивТиповФормы = ТипыФормы(Ссылка);
	Если ЭтоОсновнаяФорма(МассивТиповФормы) Тогда
		
		ДеревоЭлементовСправкиОбъектаМетаданных = СформироватьДеревоЭлементовСправки(Ссылка.Владелец, 
		                                              ПараметрыФормированияСправки.ВариантПроектСправки,
		                                              ВариантыВыбраннойСправкиВладельца);
	
		ТекстКраткогоОписанияОМ = СформироватьЧастьСправкиДоПервогоЗаголовка(ДеревоЭлементовСправкиОбъектаМетаданных, 
		                              ПараметрыФормированияСправки.ИспользоватьСсылкиСППР, 
		                              ПараметрыФормированияСправки.ПоказатьСсылкуДляРедактирования, 
		                              СоответствиеКартинокСправки);
		
		ДобавитьТекстКСправке(ТекстКраткогоОписанияОМ,ТекстСправки);
	
		ТекстОглавленияОМ = СформироватьОглавлениеСправкиПоДеревуЭлементов(ДеревоЭлементовСправкиОбъектаМетаданных,
		                        Макет,
		                        ПараметрыФормированияСправки.ИспользоватьСсылкиСППР,
		                        Ссылка.Владелец);
		
		ДобавитьТекстКСправке(ТекстОглавленияОМ, ТекстСправки);

	КонецЕсли;
	
	// Собственная справка Формы
	ТекстСобственнойСправки = "";

	ДеревоЭлементовСправкиФормы = СформироватьДеревоЭлементовСправки(Ссылка, 
	                                  ПараметрыФормированияСправки.ВариантПроектСправки, 
	                                  ВариантыВыбраннойСправки);
	
	Для каждого ЭлементКоллекции Из ВариантыВыбраннойСправкиВладельца Цикл
		Если ВариантыВыбраннойСправки.НайтиПоЗначению(ЭлементКоллекции.Значение) = Неопределено Тогда
			ВариантыВыбраннойСправки.Добавить(ЭлементКоллекции.Значение, ЭлементКоллекции.Представление);
		КонецЕсли;
	КонецЦикла;
	
	ТекстОбщегоОписанияФормы = СформироватьЧастьСправкиДоПервогоЗаголовка(ДеревоЭлементовСправкиФормы, 
	                               ПараметрыФормированияСправки.ИспользоватьСсылкиСППР, 
	                               ПараметрыФормированияСправки.ПоказатьСсылкуДляРедактирования, 
	                               СоответствиеКартинокСправки,
	                               ДеревоПодсистем);
	
	ДобавитьТекстКСправке(ТекстОбщегоОписанияФормы,ТекстСобственнойСправки);
	
	ТекстОглавленияФормы = СформироватьОглавлениеСправкиПоДеревуЭлементов(ДеревоЭлементовСправкиФормы,
	                           Макет,
	                           ПараметрыФормированияСправки.ИспользоватьСсылкиСППР);
	
	ДобавитьТекстКСправке(ТекстОглавленияФормы, ТекстСобственнойСправки);
	
	ТекстСправкиФормы = СформироватьТекстСправкиПоДеревуЭлементов(ДеревоЭлементовСправкиФормы, 
	                        ПараметрыФормированияСправки.ИспользоватьСсылкиСППР, 
	                        ПараметрыФормированияСправки.ПоказатьСсылкуДляРедактирования, 
	                        СоответствиеКартинокСправки);

	ДобавитьТекстКСправке(ТекстСправкиФормы, ТекстСобственнойСправки);
	
	//Если собственной справки по форме нет - оставляем всю справку пустой, платформа автоматически вызовет справку объекта метаданных
	Если ЗначениеЗаполнено(ТекстСобственнойСправки) Тогда
		
		Если ЗначениеЗаполнено(ТекстОглавленияОМ) Тогда
			//Линия, отделяющая справку формы от справки объекта
			ДобавитьТекстКСправке("<HR>", ТекстСправки);
		КонецЕсли;


		ДобавитьТекстКСправке(ТекстСобственнойСправки, ТекстСправки);

		Если ПараметрыФормированияСправки.ВключатьСсылкиНаСправкуПоискаВСписках И ЭтоФормаСпискаИлиВыбора(МассивТиповФормы) Тогда
			ТекстСсылкиНаСправкуПоиска = "<P><A href=""v8help://mngbase/UniversalListFindExt.lf"">Поиск данных в списках</A></P>";
			ДобавитьТекстКСправке(ТекстСсылкиНаСправкуПоиска, ТекстСправки);
		КонецЕсли;
		
		// Завершающий блок
		ДобавитьТекстКСправке(ПолучитьТекстОбласти("ОбластьЗавершенияТекста", Макет), ТекстСправки);

	Иначе
		ТекстСправки = "";
	КонецЕсли;
		
	Возврат ТекстСправки;	
	
КонецФункции

// Формирование заголовка формы аналогично механизмам платформы: с учетом представления объекта или списка
Функция ЗаголовокФормы(Ссылка)
	
	Если НЕ Ссылка.ТипыФормы.Найти(Перечисления.ТипыФорм.ОсновнаяФормаОбъекта) = Неопределено
		ИЛИ НЕ Ссылка.ТипыФормы.Найти(Перечисления.ТипыФорм.ОсновнаяФормаЗаписи) = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Ссылка.Владелец.РасширенноеПредставлениеОбъекта) Тогда
			ЗаголовокФормы = Ссылка.Владелец.РасширенноеПредставлениеОбъекта;
		ИначеЕсли ЗначениеЗаполнено(Ссылка.Владелец.ПредставлениеОбъекта) Тогда
			ЗаголовокФормы = Ссылка.Владелец.ПредставлениеОбъекта;
		Иначе
			ЗаголовокФормы = Ссылка.Владелец.Синоним;
		КонецЕсли;
		
	ИначеЕсли НЕ Ссылка.ТипыФормы.Найти(Перечисления.ТипыФорм.ОсновнаяФормаСписка)=Неопределено
		ИЛИ НЕ Ссылка.ТипыФормы.Найти(Перечисления.ТипыФорм.ОсновнаяФормаДляВыбора)=Неопределено
		ИЛИ НЕ Ссылка.ТипыФормы.Найти(Перечисления.ТипыФорм.ОсновнаяФормаГруппы)=Неопределено
		ИЛИ НЕ Ссылка.ТипыФормы.Найти(Перечисления.ТипыФорм.ОсновнаяФорма)=Неопределено Тогда
		
		Если ЗначениеЗаполнено(Ссылка.Владелец.РасширенноеПредставлениеСписка) Тогда
			ЗаголовокФормы = Ссылка.Владелец.РасширенноеПредставлениеСписка;
		ИначеЕсли ЗначениеЗаполнено(Ссылка.Владелец.ПредставлениеСписка) Тогда
			ЗаголовокФормы = Ссылка.Владелец.ПредставлениеСписка;
		Иначе
			ЗаголовокФормы = Ссылка.Владелец.Синоним;
		КонецЕсли;
		
	Иначе
		
		ЗаголовокФормы = Ссылка.Синоним;
		
	КонецЕсли;	
	
	Возврат ЗаголовокФормы;
	
КонецФункции

Функция ЭтоОсновнаяФорма(МассивТиповФормы)
	
	Для Каждого ТипФормы из МассивТиповФормы Цикл
		
		Если ТипФормы = Перечисления.ТипыФорм.ОсновнаяФорма
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаОбъекта
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаЗаписи
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаСписка
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаГруппы
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаДляВыбора
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаДляВыбораГруппы
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаНастроек
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаВарианта
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаЗагрузки
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаСохранения Тогда
	
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СформироватьСправкуЭлементаСправкиСИерархией(Ссылка, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки)
	
	ДеревоЭлементовСправки = СформироватьДеревоЭлементовСправки(Ссылка);
	
	ТекстСобственнойСправки = СформироватьТекстСправкиПоДеревуЭлементов(ДеревоЭлементовСправки, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки);
		
	Возврат ТекстСобственнойСправки;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Получение имени закладки
Функция ПодготовитьИмяЗакладки(Ссылка)
	
	ИмяЗакладки = ЗначениеВСтрокуВнутр(Ссылка);
	ИмяЗакладки = СтрЗаменить(
						  СтрЗаменить(
						  СтрЗаменить(
						  СтрЗаменить(
						  СтрЗаменить(
						  СтрЗаменить(
						  СтрЗаменить(ИмяЗакладки, "-", "")
											     , "}", "")
											     , "{""#""", "")
											     , """", "")
											     , ":", "")
											     , ";", "")
											     , ",", "");
	
	Возврат ИмяЗакладки;
	
КонецФункции

Функция ТекстБезКартинок(Текст)
	
	ПозицияОткрывающегоТэга = Найти(Текст, "<IMG>");
	Пока ПозицияОткрывающегоТэга > 0 Цикл
		ОставшийсяТекст = Сред(Текст, ПозицияОткрывающегоТэга + 5);
		ПозицияЗакрывающегоТэга = Найти(ОставшийсяТекст, "</IMG>");
		Если ПозицияЗакрывающегоТэга = 0 Тогда
			// Это ошибка и тэг начала нужно просто удалить
			Текст = Сред(Текст, 1, ПозицияОткрывающегоТэга - 1) + Сред(Текст, ПозицияОткрывающегоТэга + 5);
		Иначе
			КлючеваяФраза = Сред(ОставшийсяТекст, 1, ПозицияЗакрывающегоТэга - 1);
			ЗаменяемыйТекст = "<IMG>" + КлючеваяФраза + "</IMG>";
			Текст = СтрЗаменить(Текст, ЗаменяемыйТекст, "");	
		КонецЕсли;	
		ПозицияОткрывающегоТэга = Найти(Текст, "<IMG>");
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

//Формирует дерево элементов справки, подчиненных переданному владельцу или элементу справки (в иерархии)
Функция СформироватьДеревоЭлементовСправки(ВладелецРодитель, ВариантПроектСправки = Неопределено, ВариантыВыбраннойСправки = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецРодитель",     ВладелецРодитель);
	Запрос.УстановитьПараметр("ВариантПроектСправки", ВариантПроектСправки);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлементыСправки.Ссылка,
	|	КОЛИЧЕСТВО(ПодчиненныеЭлементыСправки.Ссылка) КАК КоличествоПодчиненныхЭлементов
	|ПОМЕСТИТЬ ЭлеменыСправкиСКоличествомПодчиненных
	|ИЗ
	|	Справочник.ЭлементыСправки КАК ЭлементыСправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ПодчиненныеЭлементыСправки
	|		ПО ЭлементыСправки.Ссылка = ПодчиненныеЭлементыСправки.Родитель
	|			И НЕ ПодчиненныеЭлементыСправки.ПометкаУдаления
	|ГДЕ
	|	НЕ ЭлементыСправки.ПометкаУдаления
	|	И ЭлементыСправки.ВключатьВСправку
	|	И ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(&ВладелецРодитель) = ТИП(Справочник.ЭлементыСправки)
	|				ТОГДА ЭлементыСправки.Ссылка В ИЕРАРХИИ (&ВладелецРодитель)
	|						ИЛИ ЭлементыСправки.Ссылка = &ВладелецРодитель
	|			ИНАЧЕ ЭлементыСправки.Владелец = &ВладелецРодитель
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭлементыСправки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭлементыСправкиПроектыВключающиеСправку.Проект,
	|	ЭлементыСправкиПроектыВключающиеСправку.Проект.Представление КАК Представление
	|ИЗ
	|	Справочник.ЭлементыСправки.ПроектыВключающиеСправку КАК ЭлементыСправкиПроектыВключающиеСправку
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлеменыСправкиСКоличествомПодчиненных КАК ЭлеменыСправкиСКоличествомПодчиненных
	|		ПО ЭлементыСправкиПроектыВключающиеСправку.Ссылка = ЭлеменыСправкиСКоличествомПодчиненных.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка КАК Ссылка,
	|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ВключатьВСправку КАК ВключатьВСправку,
	|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ТекстСправки КАК ТекстСправки,
	|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.СтильФорматированияСправки.Шаблон КАК ШаблонСтиля,
	|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.СтильФорматированияСправки.Наименование КАК НаименованиеСтиля,
	|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ПодменяющийЭлементСправки КАК ПодменяющийЭлементСправки,
	|	ЭлеменыСправкиСКоличествомПодчиненных.КоличествоПодчиненныхЭлементов
	|ИЗ
	|	ЭлеменыСправкиСКоличествомПодчиненных КАК ЭлеменыСправкиСКоличествомПодчиненных
	|" + ?(ВариантПроектСправки <> Неопределено И ВариантПроектСправки <> Справочники.Проекты.ПустаяСсылка(), "
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки.ПроектыВключающиеСправку КАК ЭлементыСправкиПроектыВключающиеСправку
	|		ПО (ЭлеменыСправкиСКоличествомПодчиненных.Ссылка = ЭлементыСправкиПроектыВключающиеСправку.Ссылка)
	|ГДЕ
	| ЭлементыСправкиПроектыВключающиеСправку.Проект = &ВариантПроектСправки ИЛИ ЭлементыСправкиПроектыВключающиеСправку.Проект ЕСТЬ NULL
	|","") + "
	|УПОРЯДОЧИТЬ ПО
	|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ПолныйКод ИЕРАРХИЯ";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если ВариантыВыбраннойСправки = Неопределено Тогда 
		ВариантыВыбраннойСправки = Новый СписокЗначений;
	КонецЕсли;
	
	Выборка = Результат[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ВариантыВыбраннойСправки.НайтиПозначению(Выборка.Проект) = Неопределено Тогда
			ВариантыВыбраннойСправки.Добавить(Выборка.Проект, Выборка.Представление);
		КонецЕсли
	КонецЦикла;
	
	ДеревоЭлементовСправки = Результат[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДополнитьДеревоИерархиейПодменяющихЭлементовСправки(ДеревоЭлементовСправки, ВариантыВыбраннойСправки);
	 
	Возврат ДеревоЭлементовСправки;

КонецФункции

//Для получения полного дерева справки - в него должны попасть ПодменяющийЭлементСправки и дерево подчиненных ему элементов
Процедура ДополнитьДеревоИерархиейПодменяющихЭлементовСправки(ДополняемоеДерево, ВариантыВыбраннойСправки)

	Для Каждого СтрокаДерева из ДополняемоеДерево.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаДерева.ПодменяющийЭлементСправки) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлементыСправки.Ссылка,
			|	КОЛИЧЕСТВО(ПодчиненныеЭлементыСправки.Ссылка) КАК КоличествоПодчиненныхЭлементов
			|ПОМЕСТИТЬ ЭлеменыСправкиСКоличествомПодчиненных
			|ИЗ
			|	Справочник.ЭлементыСправки КАК ЭлементыСправки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ПодчиненныеЭлементыСправки
			|		ПО (ЭлементыСправки.Ссылка = ПодчиненныеЭлементыСправки.Родитель
			|				И НЕ ПодчиненныеЭлементыСправки.ПометкаУдаления)
			|ГДЕ
			|	НЕ ЭлементыСправки.ПометкаУдаления
			|	И ЭлементыСправки.ВключатьВСправку
			|	И (ЭлементыСправки.Ссылка = &Ссылка
			|			ИЛИ ЭлементыСправки.Ссылка В ИЕРАРХИИ (&Ссылка))
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭлементыСправки.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЭлементыСправкиПроектыВключающиеСправку.Проект,
			|	ЭлементыСправкиПроектыВключающиеСправку.Проект.Представление КАК Представление
			|ИЗ
			|	Справочник.ЭлементыСправки.ПроектыВключающиеСправку КАК ЭлементыСправкиПроектыВключающиеСправку
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлеменыСправкиСКоличествомПодчиненных КАК ЭлеменыСправкиСКоличествомПодчиненных
			|		ПО ЭлементыСправкиПроектыВключающиеСправку.Ссылка = ЭлеменыСправкиСКоличествомПодчиненных.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка КАК Ссылка,
			|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ВключатьВСправку КАК ВключатьВСправку,
			|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ТекстСправки КАК ТекстСправки,
			|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.СтильФорматированияСправки.Шаблон КАК ШаблонСтиля,
			|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.СтильФорматированияСправки.Наименование КАК НаименованиеСтиля,
			|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ПодменяющийЭлементСправки КАК ПодменяющийЭлементСправки,
			|	ЭлеменыСправкиСКоличествомПодчиненных.КоличествоПодчиненныхЭлементов
			|ИЗ
			|	ЭлеменыСправкиСКоличествомПодчиненных КАК ЭлеменыСправкиСКоличествомПодчиненных
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭлеменыСправкиСКоличествомПодчиненных.Ссылка.ПолныйКод ИЕРАРХИЯ";
			
			Запрос.УстановитьПараметр("Ссылка",СтрокаДерева.ПодменяющийЭлементСправки);
			Результат = Запрос.ВыполнитьПакет();
			ДополняющееДерево = Результат[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Выборка = Результат[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ВариантыВыбраннойСправки.НайтиПозначению(Выборка.Проект) = Неопределено Тогда
					ВариантыВыбраннойСправки.Добавить(Выборка.Проект, Выборка.Представление);
				КонецЕсли; 
			КонецЦикла; 
			
			//Дерево следует дополнять рекурсивно, т.к. подменяющий элемент справки может иметь среди дочерних элементов такой,
			//который, в свою очередь, заполняется по другому подменяющему элементу справки.
			ДополнитьДеревоИерархиейПодменяющихЭлементовСправки(ДополняющееДерево, ВариантыВыбраннойСправки);
			
			Если ДополняющееДерево.Строки.Количество() > 0 Тогда
				ДополнитьДеревоДругим(СтрокаДерева,ДополняющееДерево.Строки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнитьДеревоИерархиейПодменяющихЭлементовСправки(СтрокаДерева, ВариантыВыбраннойСправки);
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьДеревоДругим(СтрокаДополняемогоДерева,СтрокаДополняющегоДерева)
	
	ЗаполнитьЗначенияСвойств(СтрокаДополняемогоДерева,СтрокаДополняющегоДерева,
		"Ссылка,ТекстСправки,ШаблонСтиля,НаименованиеСтиля,ПодменяющийЭлементСправки,КоличествоПодчиненныхЭлементов");
	
	Для каждого СтрокаДополняющего из СтрокаДополняющегоДерева.Строки Цикл
		СтрокаДополняемого = СтрокаДополняемогоДерева.Строки.Добавить();
		ДополнитьДеревоДругим(СтрокаДополняемого,СтрокаДополняющего);
	КонецЦикла;		

КонецПроцедуры   

Функция СформироватьОглавлениеСправкиПоДеревуЭлементов(ДеревоЭлементов, Макет, ИспользоватьСсылкиСППР, ОбъектНаКоторыйСсылаетсяОглавление=Неопределено, Уровень=0)

	ТекстСправки = "";	
	
	Для каждого СтрокаДерева Из ДеревоЭлементов.Строки Цикл
		
		Если СтрокаДерева.КоличествоПодчиненныхЭлементов>0 
			И СтрокаДерева.ВключатьВСправку<> Неопределено И СтрокаДерева.ВключатьВСправку Тогда
			
			Текст = СтрЗаменить(ПолучитьТекстОбласти("ОбластьПунктаОглавленияОбъектаМетаданных", Макет), "[ТекстЗаголовка]", СтрокаДерева.ТекстСправки);
			Если ЗначениеЗаполнено(ОбъектНаКоторыйСсылаетсяОглавление) Тогда
				СсылкаНаДругойОбъект = ИдентификаторОбъекта(ОбъектНаКоторыйСсылаетсяОглавление, ИспользоватьСсылкиСППР);
			иначе
				СсылкаНаДругойОбъект = "";	
			КонецЕсли;
			Текст = СтрЗаменить(Текст, "[Ссылка]", СсылкаНаДругойОбъект);
			Текст = СтрЗаменить(Текст, "[ИмяЗакладки]", ПодготовитьИмяЗакладки(СтрокаДерева.Ссылка));
			Текст = СтрЗаменить(Текст, "[Отступ]", Уровень * 20 + 20);
			Текст = ТекстБезКартинок(Текст);
														
			ДобавитьТекстКСправке(Текст,ТекстСправки);
			
			ОглавлениеПоДереву = СформироватьОглавлениеСправкиПоДеревуЭлементов(СтрокаДерева,
																				Макет,
																				ИспользоватьСсылкиСППР,
																				ОбъектНаКоторыйСсылаетсяОглавление,
																				Уровень+1);
			
			ДобавитьТекстКСправке(ОглавлениеПоДереву, ТекстСправки);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат	ТекстСправки;

КонецФункции

Функция СформироватьТекстСправкиПоДеревуЭлементов(ДеревоЭлементов, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки, Уровень=0)

	ТекстСправки = "";
	
	Для Каждого СтрокаДерева Из ДеревоЭлементов.Строки Цикл
		
		Если СтрокаДерева.ВключатьВСправку <> Неопределено И СтрокаДерева.ВключатьВСправку Тогда
			
			Текст = СформироватьСтрокуСправкиПоЭлементу(СтрокаДерева.Ссылка,
			СтрокаДерева.ТекстСправки,
			СтрокаДерева.ШаблонСтиля,
			СтрокаДерева.НаименованиеСтиля,
			ИспользоватьСсылкиСППР,
			ПоказатьСсылкуДляРедактирования,
			СоответствиеКартинокСправки,
			,
			Уровень);
			
			Если СтрокаДерева.КоличествоПодчиненныхЭлементов>0 Тогда
				Закладка = ПодготовитьИмяЗакладки(СтрокаДерева.Ссылка);
				Текст = "<A name=" + Закладка + ">" + Текст + "</A>";
			КонецЕсли;
			
			ДобавитьТекстКСправке(Текст,ТекстСправки);
			
			ТекстСправкиПоДереву = СформироватьТекстСправкиПоДеревуЭлементов(СтрокаДерева, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки, Уровень+1);
			
			ДобавитьТекстКСправке(ТекстСправкиПоДереву, ТекстСправки);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат	ТекстСправки;	

КонецФункции

//Получает часть справки до первого заголовка, удаляет эту часть из дерева элементов справки.
Функция СформироватьЧастьСправкиДоПервогоЗаголовка(ДеревоЭлементовСправки, ИспользоватьСсылкиСППР, ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки, ДеревоПодсистем = Неопределено)
	
	ТекстОписания = "";
	МассивУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаДерева из ДеревоЭлементовСправки.Строки Цикл
		Если СтрокаДерева.КоличествоПодчиненныхЭлементов>0 Тогда
			Прервать;
		Иначе
			
			Если СтрокаДерева.ВключатьВСправку <> Неопределено И СтрокаДерева.ВключатьВСправку Тогда
				Текст = СформироватьСтрокуСправкиПоЭлементу(СтрокаДерева.Ссылка,
				СтрокаДерева.ТекстСправки,
				СтрокаДерева.ШаблонСтиля,
				СтрокаДерева.НаименованиеСтиля,
				ИспользоватьСсылкиСППР,
				ПоказатьСсылкуДляРедактирования,
				СоответствиеКартинокСправки,
				ДеревоПодсистем,
				0);
				
				ДобавитьТекстКСправке(Текст,ТекстОписания);
			КонецЕсли;
			
			МассивУдаляемыхСтрок.Добавить(СтрокаДерева);
			
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементМассива из МассивУдаляемыхСтрок Цикл
		ДеревоЭлементовСправки.Строки.Удалить(ЭлементМассива);
	КонецЦикла;
	
	Возврат ТекстОписания;

КонецФункции

Функция СформироватьСтрокуСправкиПоЭлементу(ЭлементСправки, ТекстСправки, ШаблонСтиля, НаименованиеСтиля, ИспользоватьСсылкиСППР, 
	                                          ПоказатьСсылкуДляРедактирования, СоответствиеКартинокСправки, ДеревоПодсистем = Неопределено, Отступ = 0)
	
	Текст = СтрЗаменить(ШаблонСтиля,
	                    "[ТекстСправки]",
	                    ОбработатьТекстСправкиПоЭлементу(ЭлементСправки, ТекстСправки, НаименованиеСтиля, 
	                                                     ИспользоватьСсылкиСППР, СоответствиеКартинокСправки, ДеревоПодсистем));
	
	Если ЭлементСправки.Картинка Тогда
		
		Текст = СтрЗаменить(Текст, 
							"[URLКартинки]", 
							ОбработатьURLКартинки(ЭлементСправки, ИспользоватьСсылкиСППР, СоответствиеКартинокСправки));
	КонецЕсли;
						
	Если ПоказатьСсылкуДляРедактирования Тогда
		ТекстСсылки = "<A href=""#СсылкаДляРедактирования" + ЭлементСправки.УникальныйИдентификатор() + """>" + НСтр("ru = '[изменить]'") + "</A>";
		Если Найти(Текст, "[СсылкаДляРедактирования]") <> 0 Тогда
			Текст = СтрЗаменить(Текст, "[СсылкаДляРедактирования]", ТекстСсылки);
		Иначе
			Текст = Текст + ТекстСсылки;
		КонецЕсли; 
	Иначе
		Текст = СтрЗаменить(Текст, "[СсылкаДляРедактирования]", "");
	КонецЕсли;
	
	Если Найти(ВРег(НаименованиеСтиля), "МАРКИРОВ") > 0 Тогда
		Текст = СтрЗаменить(Текст,
						"[Отступ]",
						Строка(Отступ * 20 + 20));
	Иначе
		Текст = СтрЗаменить(Текст,
						"[Отступ]",
						Строка(Отступ * 20));
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Функция заменяет условные форматы на реальные форматы html документов
//
Функция ОбработатьТекстСправкиПоЭлементу(ЭлементСправки, Знач ТекстСправки, НаименованиеСтиля, ИспользоватьСсылкиСППР, 
	                                       СоответствиеКартинокСправки, ДеревоПодсистем = Неопределено)
	
	Если Найти(ВРег(НаименованиеСтиля), "МАРКИРОВАННЫЙ")
		ИЛИ Найти(ВРег(НаименованиеСтиля), "НУМЕРОВАННЫЙ") Тогда
		ТекстСправки = СтрЗаменить(ТекстСправки, Символы.ПС, "<LI>");
	Иначе
		ТекстСправки = СтрЗаменить(ТекстСправки, Символы.ПС, "<BR>");
	КонецЕсли;
	
	ТекстСправки = СтрЗаменить(ТекстСправки, Символы.Таб, "<tt>    </tt>"); // замена на 4 моноширинных пробела
	
	ТекстыГиперссылокВРег = ЭлементСправки.ГиперссылкиДляСправки.Выгрузить();
	Для Каждого Строка ИЗ ТекстыГиперссылокВРег Цикл
		Строка.ТекстГиперссылки = ВРег(Строка.ТекстГиперссылки);
	КонецЦикла;
	
	// Подстановка ссылок
	МассивЗначенийДляЗамены = Новый Массив;
	ПозицияОткрывающегоТэга = Найти(ТекстСправки, "<A>");
	ОставшийсяТекст = ТекстСправки;
	Пока ПозицияОткрывающегоТэга > 0 Цикл
		ОставшийсяТекст = Сред(ОставшийсяТекст, ПозицияОткрывающегоТэга + 3);
		ПозицияЗакрывающегоТэга = Найти(ОставшийсяТекст, "</A>");
		Если ПозицияЗакрывающегоТэга = 0 Тогда
			// Это ошибка и тэг начала нужно просто удалить
			ТекстСправки = Сред(ТекстСправки, 1, ПозицияОткрывающегоТэга - 1) + Сред(ТекстСправки, ПозицияОткрывающегоТэга + 3);
		Иначе
			КлючеваяФраза = Сред(ОставшийсяТекст, 1, ПозицияЗакрывающегоТэга - 1);
			Гиперссылка = Неопределено;
			СтрокаГиперссылки = ТекстыГиперссылокВРег.Найти(ВРег(КлючеваяФраза), "ТекстГиперссылки");
			Если СтрокаГиперссылки <> Неопределено Тогда
				Гиперссылка = СтрокаГиперссылки.Гиперссылка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Гиперссылка) Тогда
				Идентификатор = ИдентификаторОбъекта(Гиперссылка, ИспользоватьСсылкиСППР, ДеревоПодсистем);
				Текст = "<A href=""" + Идентификатор + """>" + КлючеваяФраза + "</A>";
			Иначе
				Текст = КлючеваяФраза;
			КонецЕсли;
			
			ЗаменяемыйТекст = "<A>" + КлючеваяФраза + "</A>";
			МассивЗначенийДляЗамены.Добавить(Новый Структура("ЗаменяемыйТекст, НовыйТекст", ЗаменяемыйТекст, Текст));
		КонецЕсли;
		ПозицияОткрывающегоТэга = Найти(ОставшийсяТекст, "<A>");
	КонецЦикла;
	
	Для Каждого ЗначениеДляЗамены Из МассивЗначенийДляЗамены Цикл
		ТекстСправки = СтрЗаменить(ТекстСправки, ЗначениеДляЗамены.ЗаменяемыйТекст, ЗначениеДляЗамены.НовыйТекст);			
	КонецЦикла;
	
	НазванияКартинокВРег = ЭлементСправки.КартинкиДляСправки.Выгрузить();
	Для Каждого Строка ИЗ НазванияКартинокВРег Цикл
		Строка.НазваниеКартинки = ВРег(Строка.НазваниеКартинки);
	КонецЦикла;
	
	// Подстановка картинок
	ПозицияОткрывающегоТэга = Найти(ТекстСправки, "<IMG>");
	Пока ПозицияОткрывающегоТэга > 0 Цикл
		ОставшийсяТекст = Сред(ТекстСправки, ПозицияОткрывающегоТэга + 5);
		ПозицияЗакрывающегоТэга = Найти(ОставшийсяТекст, "</IMG>");
		Если ПозицияЗакрывающегоТэга = 0 Тогда
			// Это ошибка и тэг начала нужно просто удалить
			ТекстСправки = Сред(ТекстСправки, 1, ПозицияОткрывающегоТэга - 1) + Сред(ТекстСправки, ПозицияОткрывающегоТэга + 5);
		Иначе
			КлючеваяФраза = Сред(ОставшийсяТекст, 1, ПозицияЗакрывающегоТэга - 1);
			КартинкаСправки = Неопределено;
			СтрокаКартинки = НазванияКартинокВРег.Найти(ВРег(КлючеваяФраза), "НазваниеКартинки");
			Если СтрокаКартинки <> Неопределено Тогда
				КартинкаСправки = СтрокаКартинки.Картинка;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КартинкаСправки) Тогда
								
				Если ИспользоватьСсылкиСППР Тогда
					КартинкаТекстом = Base64Строка(КартинкаСправки.ХранилищеКартинки.Получить());
					Если ВРег(КартинкаСправки.Расширение) = ".JPEG" Тогда
						Расширение = "jpeg";
					Иначе
						Расширение = Сред(КартинкаСправки.Расширение, 2, 3);
					КонецЕсли;
					Идентификатор = "data:image/" + Сред(КартинкаСправки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
				Иначе
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(КартинкаСправки.ХранилищеКартинки.Получить());
					
					Проект = ОбщегоНазначенияСППРВызовСервера.ПроектОбъекта(ЭлементСправки.Владелец);
					РежимРазработкиПроекта  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "РежимРазработки");
					ВыгружатьВФорматеEDT    = (РежимРазработкиПроекта = Перечисления.РежимРазработки.ВGitРепозитории);
					
					Если ВыгружатьВФорматеEDT Тогда
						ПутьКФайлу = СтрШаблон("%1/Help/_files/%2", 
						                       ИдентификаторОбъектаДляСправки(ЭлементСправки.Владелец, ВыгружатьВФорматеEDT),
						                       КартинкаСправки.Наименование + КартинкаСправки.Расширение);
						Идентификатор = СтрШаблон("_files/%1", КартинкаСправки.Наименование + КартинкаСправки.Расширение);
					Иначе
						ПутьКФайлу = СтрШаблон("%1.Help.%2.png", 
						                       ИдентификаторОбъектаДляСправки(ЭлементСправки.Владелец, ВыгружатьВФорматеEDT),
						                       КартинкаСправки.Наименование + КартинкаСправки.Расширение);
						Идентификатор = ПутьКФайлу;
					КонецЕсли;
					
					Если СоответствиеКартинокСправки <> Неопределено Тогда
						СоответствиеКартинокСправки.Вставить(ПутьКФайлу, АдресВоВременномХранилище);
					КонецЕсли;
				КонецЕсли;
				
				Текст = "<IMG src=""" + Идентификатор + """ style=""vertical-align: middle"" alt=""" + КлючеваяФраза + """></IMG>";
				
			Иначе
				Текст = КлючеваяФраза;
			КонецЕсли;
			
			ЗаменяемыйТекст = "<IMG>" + КлючеваяФраза + "</IMG>";
			ТекстСправки = СтрЗаменить(ТекстСправки, ЗаменяемыйТекст, Текст);
			
		КонецЕсли;
		
		ПозицияОткрывающегоТэга = Найти(ТекстСправки, "<IMG>");
	КонецЦикла;
	
	Возврат ТекстСправки;
	
КонецФункции

Функция ОбработатьURLКартинки(ЭлементСправки, ИспользоватьСсылкиСППР, СоответствиеКартинокСправки)
	
	Если ЭлементСправки.КартинкиДляСправки.Количество() > 0 Тогда
		КартинкаСправки = ЭлементСправки.КартинкиДляСправки[0].Картинка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КартинкаСправки) Тогда
		
		Если ИспользоватьСсылкиСППР Тогда
			КартинкаТекстом = Base64Строка(КартинкаСправки.ХранилищеКартинки.Получить());
			Если ВРег(КартинкаСправки.Расширение) = ".JPEG" Тогда
				Расширение = "jpeg";
			Иначе
				Расширение = Сред(КартинкаСправки.Расширение, 2, 3);
			КонецЕсли;
			Идентификатор = "data:image/" + Сред(КартинкаСправки.Расширение,2) + ";base64," + Символы.ПС + КартинкаТекстом;
		Иначе
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(КартинкаСправки.ХранилищеКартинки.Получить());
			
			Проект = ОбщегоНазначенияСППРВызовСервера.ПроектОбъекта(ЭлементСправки.Владелец);
			РежимРазработкиПроекта  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "РежимРазработки");
			ВыгружатьВФорматеEDT    = (РежимРазработкиПроекта = Перечисления.РежимРазработки.ВGitРепозитории);
			
			Если ВыгружатьВФорматеEDT Тогда
				ПутьКФайлу = СтрШаблон("%1/Help/_files/%2", 
				                       ИдентификаторОбъектаДляСправки(ЭлементСправки.Владелец, ВыгружатьВФорматеEDT),
				                       КартинкаСправки.Наименование + КартинкаСправки.Расширение);
				Идентификатор = СтрШаблон("_files/%1", КартинкаСправки.Наименование + КартинкаСправки.Расширение);
			Иначе
				ПутьКФайлу = СтрШаблон("%1.Help.%2.png", 
				                       ИдентификаторОбъектаДляСправки(ЭлементСправки.Владелец, ВыгружатьВФорматеEDT),
				                       КартинкаСправки.Наименование + КартинкаСправки.Расширение);
				Идентификатор = ПутьКФайлу;
			КонецЕсли;
			
			Если СоответствиеКартинокСправки <> Неопределено Тогда
				СоответствиеКартинокСправки.Вставить(ПутьКФайлу, АдресВоВременномХранилище);
			КонецЕсли;
		КонецЕсли;
	
		Возврат Идентификатор;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ДеревоПодсистем(Проект)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подсистемы.Ссылка КАК Ссылка,
	|	Подсистемы.Имя КАК Имя
	|ИЗ
	|	Справочник.Подсистемы КАК Подсистемы
	|ГДЕ
	|	Подсистемы.Владелец = &Проект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
КонецФункции

Функция ПолныйИдентификаторПодсистемы(Ссылка, ДеревоПодсистем, ВФорматеEDT)
	
	СтруктураОтбора = Новый Структура("Ссылка", Ссылка);
	
	МассивСтрок = ДеревоПодсистем.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДерева = МассивСтрок[0];
		
		ПолныйИдентификатор = ?(ВФорматеEDT, "Subsystems/" + СтрокаДерева.Имя, "Subsystem." + СтрокаДерева.Имя);
		
		РодительПодсистемы = СтрокаДерева.Родитель;
		
		Пока ЗначениеЗаполнено(РодительПодсистемы) Цикл
			ПолныйИдентификатор = ?(ВФорматеEDT, "Subsystems/" + РодительПодсистемы.Имя + "/" + ПолныйИдентификатор,
			                                     "Subsystem."  + РодительПодсистемы.Имя + "." + ПолныйИдентификатор);
			РодительПодсистемы = РодительПодсистемы.Родитель;
		КонецЦикла;
		
		Возврат ПолныйИдентификатор;
		
	Иначе
		Возврат ИдентификаторПодсистемы(Ссылка, ВФорматеEDT);
	КонецЕсли;
	
КонецФункции

Функция ЭтоФормаСпискаИлиВыбора(МассивТиповФормы)
	
	Для Каждого ТипФормы из МассивТиповФормы Цикл
		
		Если ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаСписка
			ИЛИ ТипФормы = Перечисления.ТипыФорм.ОсновнаяФормаДляВыбора Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТипыФормы(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФормыОбъектовМетаданныхТипыФормы.ТипФормы КАК ТипФормы
	|ИЗ
	|	Справочник.ФормыОбъектовМетаданных.ТипыФормы КАК ФормыОбъектовМетаданныхТипыФормы
	|ГДЕ
	|	ФормыОбъектовМетаданныхТипыФормы.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипФормы");
	
КонецФункции

Процедура ДобавитьВариантыСправки(ТаблицаСЗаголовками, ВариантПроекты, ВариантыВыбраннойСправки)

	Заголовки = ТаблицаСЗаголовками.Скопировать(,"Заголовок");
	Заголовки.Свернуть("Заголовок");
	Если Заголовки.Количество() > 1 Тогда
	
		Для Каждого Строка Из ВариантПроекты Цикл
			
			Если ВариантыВыбраннойСправки.НайтиПозначению(Строка.Проект) = Неопределено Тогда
				ВариантыВыбраннойСправки.Добавить(Строка.Проект, Строка.ИмяПроекта);
			КонецЕсли;
			
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗаголовокОбъекта(Ссылка, Проект, ВариантПроектСправки, ВариантыВыбраннойСправки)
	
	ВариантПроекты = РаботаСоСправкойПовтИсп.ПроектыДляКоторыхВедетсяСправка(Проект);
	
	Если ВариантПроекты.Количество() < 2 Тогда
	
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
			Возврат ЗаголовокФормы(Ссылка);
		Иначе 
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Имя,Синоним");
			Возврат ?(ПустаяСтрока(РеквизитыОбъекта.Синоним), РеквизитыОбъекта.Имя, РеквизитыОбъекта.Синоним);
		КонецЕсли;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
		
		Запрос.Параметры.Вставить("Ссылка",         Ссылка);
		Запрос.Параметры.Вставить("ВариантПроекты", ВариантПроекты.ВыгрузитьКолонку("Проект"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДочерниеФормыОбъектовМетаданных.Владелец.Владелец КАК ВариантПроект,
		|	ДочерниеФормыОбъектовМетаданных.Ссылка
		|ИЗ
		|	Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФормыОбъектовМетаданных КАК ДочерниеФормыОбъектовМетаданных
		|		ПО ФормыОбъектовМетаданных.uuid = ДочерниеФормыОбъектовМетаданных.uuid
		|			И (НЕ ДочерниеФормыОбъектовМетаданных.uuid = """")
		|			И (ДочерниеФормыОбъектовМетаданных.Владелец.Владелец В(&ВариантПроекты))
		|			И (НЕ ДочерниеФормыОбъектовМетаданных.ПометкаУдаления)
		|ГДЕ
		|	ФормыОбъектовМетаданных.Ссылка = &Ссылка";
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Выгрузка.Колонки.Добавить("Заголовок");
		
		Если Выгрузка.Количество() = 0 Тогда
			
			НоваяСтрока = Выгрузка.Добавить();
			НоваяСтрока.Ссылка        = Ссылка;
			НоваяСтрока.ВариантПроект = ВариантПроектСправки;
			
		КонецЕсли; 
		
		Заголовок                     = "";
		ЗаголовокРодительскогоОбъекта = "";
		Для Каждого Строка Из Выгрузка Цикл
			
			Строка.Заголовок = ЗаголовокФормы(Строка.Ссылка);
			
			Если Строка.ВариантПроект = ВариантПроектСправки Тогда
				Заголовок = Строка.Заголовок;
			КонецЕсли; 
			
			Если Строка.ВариантПроект = Проект Тогда
				ЗаголовокРодительскогоОбъекта = Строка.Заголовок;
			КонецЕсли; 
			
		КонецЦикла; 
		
		ДобавитьВариантыСправки(Выгрузка, ВариантПроекты, ВариантыВыбраннойСправки);
		
		Возврат ?(ЗначениеЗаполнено(Заголовок), Заголовок, ЗаголовокРодительскогоОбъекта);
		
	КонецЕсли;
	
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		
		Запрос.Параметры.Вставить("Ссылка",         Ссылка);
		Запрос.Параметры.Вставить("ВариантПроекты", ВариантПроекты.ВыгрузитьКолонку("Проект"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДочерниеОбъектыМетаданных.Владелец               КАК ВариантПроект,
		|	ДочерниеОбъектыМетаданных.Владелец.Представление КАК Представление,
		|	ОбъектыМетаданных.Синоним,
		|	ОбъектыМетаданных.Имя,
		|	ДочерниеОбъектыМетаданных.Синоним КАК СинонимДочернего,
		|	ДочерниеОбъектыМетаданных.Имя     КАК ИмяДочернего
		|ИЗ
		|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ДочерниеОбъектыМетаданных
		|		ПО ОбъектыМетаданных.uuid = ДочерниеОбъектыМетаданных.uuid
		|			И НЕ ДочерниеОбъектыМетаданных.uuid = """"
		|			И (ДочерниеОбъектыМетаданных.Владелец В (&ВариантПроекты))
		|			И (НЕ ДочерниеОбъектыМетаданных.ПометкаУдаления)
		|ГДЕ
		|	ОбъектыМетаданных.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Подсистемы") Тогда
		
		Запрос.Параметры.Вставить("Ссылка",         Ссылка);
		Запрос.Параметры.Вставить("ВариантПроекты", ВариантПроекты.ВыгрузитьКолонку("Проект"));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДочерниеПодсистемы.Владелец               КАК ВариантПроект,
		|	ДочерниеПодсистемы.Владелец.Представление КАК Представление,
		|	Подсистемы.Синоним,
		|	Подсистемы.Имя,
		|	ДочерниеПодсистемы.Синоним    КАК СинонимДочернего,
		|	ДочерниеПодсистемы.Имя        КАК ИмяДочернего
		|ИЗ
		|	Справочник.Подсистемы КАК Подсистемы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК ДочерниеПодсистемы
		|		ПО Подсистемы.uuid = ДочерниеПодсистемы.uuid
		|			И НЕ ДочерниеПодсистемы.uuid = """"
		|			И (ДочерниеПодсистемы.Владелец В (&ВариантПроекты))
		|			И (НЕ ДочерниеПодсистемы.ПометкаУдаления)
		|ГДЕ
		|	Подсистемы.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Выгрузка.Колонки.Добавить("Заголовок");
	
	Заголовок                     = "";
	ЗаголовокРодительскогоОбъекта = "";
	Для Каждого Строка Из Выгрузка Цикл
		
		Если Строка.СинонимДочернего <> null Тогда
			Строка.Заголовок = ?(ПустаяСтрока(Строка.СинонимДочернего), Строка.ИмяДочернего, Строка.СинонимДочернего);
		Иначе 
			Строка.Заголовок = ?(ПустаяСтрока(Строка.Синоним), Строка.Имя, Строка.Синоним);
		КонецЕсли;
		
		Если Строка.ВариантПроект = ВариантПроектСправки Тогда
			Заголовок = Строка.Заголовок;
		КонецЕсли; 
		
		Если Строка.ВариантПроект = Проект Тогда
			ЗаголовокРодительскогоОбъекта = Строка.Заголовок;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ДобавитьВариантыСправки(Выгрузка, ВариантПроекты, ВариантыВыбраннойСправки);
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		Возврат Заголовок;
	ИначеЕсли ЗначениеЗаполнено(ЗаголовокРодительскогоОбъекта) Тогда
		Возврат ЗаголовокРодительскогоОбъекта;
	Иначе 
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Имя,Синоним");
		Возврат ?(ПустаяСтрока(РеквизитыОбъекта.Синоним), РеквизитыОбъекта.Имя, РеквизитыОбъекта.Синоним);
	КонецЕсли; 
	
КонецФункции

#КонецОбласти
