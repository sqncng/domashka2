
#Область ПрограммныйИнтерфейс

// Выполняет помещение в запись регистра печатных форм/схем версионируемого объекта
//
// Параметры:
//  ЗаписьВерсииОбъекта - запись регистра
//
Процедура ЗаполнитьХранилищеВерсии(ЗаписьВерсииОбъекта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ссылка = ЗаписьВерсииОбъекта.ВерсионируемыйОбъект;
	
	ПечатныеФормы = ОписаниеОбъектов.СформироватьОписаниеОбъекта(Ссылка);
	
	Документ = Неопределено;
	
	ИмяСправочника = Ссылка.Метаданные().Имя;
	
	ЕстьСхема = (ИмяСправочника = "Функции");
	ЕстьСправка = (ИмяСправочника = "ОбъектыМетаданных") ИЛИ (ИмяСправочника = "ФормыОбъектовМетаданных") ИЛИ (ИмяСправочника = "Подсистемы");
	
	Если ПечатныеФормы.Количество()>0 Тогда
		
		СтруктураПечати = ПечатныеФормы.Получить(Ссылка);
			
		Если ТипЗнч(СтруктураПечати) = Тип("Структура") Тогда
			
			Если СтруктураПечати.Свойство("Описание") Тогда
				Документ = СтруктураПечати.Описание;
			КонецЕсли;
			
			Если СтруктураПечати.Свойство("Сзема") Тогда
				Схема = СтруктураПечати.Схема;
			КонецЕсли;
			
			Если СтруктураПечати.Свойство("ВариантыСправки") Тогда
				ВариантыСправки = СтруктураПечати.ВариантыСправки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЕстьСхема Тогда
			ЗаписьВерсииОбъекта.ХранилищеСхемы = Новый ХранилищеЗначения(Схема);
		КонецЕсли;
		
		Если ЕстьСправка Тогда
			ЗаписьВерсииОбъекта.ХранилищеСправки = Новый ХранилищеЗначения(ВариантыСправки);
		Иначе
			ЗаписьВерсииОбъекта.ХранилищеОписания = Новый ХранилищеЗначения(Документ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определение даты-времени последней проверенной версии
// Если записи не обнаружено - возвращается пустая дата
Функция ДатаВремяПровереннойВерсии(СсылкаНаВерсионируемыйОбъект, ВидОбъекта = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВерсииОбъектов.Период КАК Период
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИзменений КАК КонтрольИзменений
	|		ПО (ВерсииОбъектов.ВерсионируемыйОбъект = &ВерсионируемыйОбъект)
	|			И (КонтрольИзменений.КонтролируемыйОбъект = &ВерсионируемыйОбъект)
	|			И (КонтрольИзменений.ВидОбъекта = &ВидОбъекта)
	|			И (КонтрольИзменений.Пользователь = &Пользователь)
	|			И (КонтрольИзменений.СтатусКонтроля = &СтатусКонтроля)
	|			И ВерсииОбъектов.Период <= КонтрольИзменений.ДатаКонтроля
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииОбъектов.Период УБЫВ";

	Запрос.УстановитьПараметр("ВерсионируемыйОбъект", СсылкаНаВерсионируемыйОбъект);
	Запрос.УстановитьПараметр("ВидОбъекта", ?(ВидОбъекта <> Неопределено, ВидОбъекта, ВидВерсионируемогоОбъекта(СсылкаНаВерсионируемыйОбъект)));
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("СтатусКонтроля", Перечисления.СостоянияКонтроляОбъектов.НаКонтроле);
	
	// В запросе всегда будет не более одной строки
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Дата(1,1,1);
	КонецЕсли;
	
	Выборка.Следующий();
	Возврат Выборка.Период;
	
КонецФункции

// Вызывает регистрацию изменений объекта в механизме версионирования
//
// Параметры:
//  Объект - версионируемый объект
//
Процедура ЗарегистрироватьИзмененияОбъекта(Объект) Экспорт
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("КоллекцияИзмененныхОбъектов") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоллекцияИзмененныхОбъектов = Объект.ДополнительныеСвойства.КоллекцияИзмененныхОбъектов;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	Если НЕ ПустаяСтрока(МетаданныеОбъекта.Синоним) Тогда
		ПредставлениеОбъекта = МетаданныеОбъекта.Синоним;
	Иначе
		ПредставлениеОбъекта = ИмяОбъекта;
	КонецЕсли;
	
	Если Объект.ЭтоНовый() Тогда
		Ссылка = Объект.ПолучитьСсылкуНового();
		Если Ссылка.Пустая() Тогда
			Ссылка = Справочники[ИмяОбъекта].ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	
	Если ИмяОбъекта = "ШагиПроцесса" Тогда
		
		КоллекцияИзмененныхОбъектов.Добавить(Новый Структура("Ссылка,ВидОбъекта", Объект.Владелец, ВидВерсионируемогоОбъекта(Объект.Владелец)));
		
	ИначеЕсли ИмяОбъекта = "ЭлементыСправки" Тогда
		
		КоллекцияИзмененныхОбъектов.Добавить(Новый Структура("Ссылка,ВидОбъекта", Объект.Владелец, ВидВерсионируемогоОбъекта(Ссылка)));
		
	Иначе
		
		КоллекцияИзмененныхОбъектов.Добавить(Новый Структура("Ссылка,ВидОбъекта", Ссылка, ВидВерсионируемогоОбъекта(Ссылка)));
		
	КонецЕсли;
	
	КомментарийЗаписи = НСтр("ru='Изменен объект <'") + ПредставлениеОбъекта + "> - <" + Объект.Наименование + ">";
	
	ЗарегистрироватьИзмененияКоллекцииОбъектов(КоллекцияИзмененныхОбъектов, Пользователи.ТекущийПользователь(), КомментарийЗаписи);
	
КонецПроцедуры

// Регистрация изменений коллекции объектов как новой версии
Процедура ЗарегистрироватьИзмененияКоллекцииОбъектов(КоллекцияИзмененныхОбъектов, ТекущийПользователь, Комментарии) Экспорт
	
	Если КоллекцияИзмененныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// При необходимости записываются версии изменяемых объектов
	// Последняя (актуальная) версия всегда соответствует объекту и в регистре не хранится
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцияИзмененныхОбъектов.Ссылка КАК Ссылка,
	|	КоллекцияИзмененныхОбъектов.ВидОбъекта КАК ВидОбъекта
	|ПОМЕСТИТЬ КоллекцияИзмененныхОбъектов
	|ИЗ
	|	&КоллекцияИзмененныхОбъектов КАК КоллекцияИзмененныхОбъектов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ВидОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыИзмененияОбъектов.КонтролируемыйОбъект,
	|	ДатыИзмененияОбъектов.ДатаИзменения,
	|	ДатыИзмененияОбъектов.Пользователь,
	|	ДатыИзмененияОбъектов.ВидОбъекта
	|ИЗ
	|	КоллекцияИзмененныхОбъектов КАК КоллекцияИзмененныхОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.КонтролируемыйОбъект = КоллекцияИзмененныхОбъектов.Ссылка)
	|			И (ДатыИзмененияОбъектов.ВидОбъекта = КоллекцияИзмененныхОбъектов.ВидОбъекта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|		ПО (ДатыИзмененияОбъектов.КонтролируемыйОбъект = ВерсииОбъектов.ВерсионируемыйОбъект)
	|			И (ДатыИзмененияОбъектов.ВидОбъекта = ВерсииОбъектов.ВидОбъекта)
	|			И (ДатыИзмененияОбъектов.ДатаИзменения = ВерсииОбъектов.Период)
	|ГДЕ
	|	ДатыИзмененияОбъектов.Пользователь <> &ТекущийПользователь
	|	И ВерсииОбъектов.Период ЕСТЬ NULL ";
	
	ТипОбъекта = Метаданные.ОпределяемыеТипы.ВерсионируемыйОбъект.Тип;
	
	КоллекцияИзмененныхОбъектовТаблица = Новый ТаблицаЗначений;
	КоллекцияИзмененныхОбъектовТаблица.Колонки.Добавить("Ссылка", ТипОбъекта);
	КоллекцияИзмененныхОбъектовТаблица.Колонки.Добавить("ВидОбъекта", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбъектов"));
	Для каждого ИзмененныйОбъект Из КоллекцияИзмененныхОбъектов Цикл
		ЗаполнитьЗначенияСвойств(КоллекцияИзмененныхОбъектовТаблица.Добавить(), ИзмененныйОбъект);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КоллекцияИзмененныхОбъектов", КоллекцияИзмененныхОбъектовТаблица);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаписьВерсииОбъекта = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
		
		ЗаписьВерсииОбъекта.Период               = Выборка.ДатаИзменения;
		ЗаписьВерсииОбъекта.ВерсионируемыйОбъект = Выборка.КонтролируемыйОбъект;
		ЗаписьВерсииОбъекта.ВидОбъекта           = Выборка.ВидОбъекта;
		ЗаписьВерсииОбъекта.Пользователь         = Выборка.Пользователь;
		
		ЗаполнитьХранилищеВерсии(ЗаписьВерсииОбъекта);
		
		ЗаписьВерсииОбъекта.Записать(Ложь);
	КонецЦикла;
	
	// Коллекция записывается в регистр сведений
	
	ДатаИзменения = ТекущаяДата();
	
	Для каждого ИзмененныйОбъект Из КоллекцияИзмененныхОбъектов Цикл
		ЗаписьДатыИзменения = РегистрыСведений.ДатыИзмененияОбъектов.СоздатьМенеджерЗаписи();
		
		ЗаписьДатыИзменения.КонтролируемыйОбъект = ИзмененныйОбъект.Ссылка;
		ЗаписьДатыИзменения.ВидОбъекта           = ИзмененныйОбъект.ВидОбъекта;
		ЗаписьДатыИзменения.ДатаИзменения        = ДатаИзменения;
		ЗаписьДатыИзменения.Комментарии          = Комментарии;
		ЗаписьДатыИзменения.Пользователь         = ТекущийПользователь;
		
		ЗаписьДатыИзменения.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Вспомогательная процедура добавления в версию функции
// изменения элементов схемы
Процедура ДобавитьВКоллекциюИзмененияЭлементовСхем(КоллекцияИзмененныхОбъектов, Объект, ИмяСправочника) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлементыСхемы.ВидЭлементаСхемы,
	|	ЭлементыСхемы.НаименованиеЭлементаСхемы,
	|	ЭлементыСхемы.ОписаниеЭлементаСхемы,
	|	ЭлементыСхемы.Гиперссылка,
	|	ЭлементыСхемы.Ссылка.ПометкаУдаления,
	|	-1 КАК Счетчик
	|ИЗ
	|	Справочник." + ИмяСправочника + ".ЭлементыСхемы КАК ЭлементыСхемы
	|ГДЕ
	|	ЭлементыСхемы.Ссылка = &Ссылка
	|	И (НЕ ЭлементыСхемы.Гиперссылка.Ссылка ЕСТЬ NULL )";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТаблицаИзменений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицыОбъекта Из Объект.ЭлементыСхемы Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицыОбъекта.Гиперссылка) Тогда
			СтрокаТаблицыИзменений = ТаблицаИзменений.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыИзменений, СтрокаТаблицыОбъекта);
			СтрокаТаблицыИзменений.ПометкаУдаления = Объект.ПометкаУдаления;
			СтрокаТаблицыИзменений.Счетчик = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаИзменений.Свернуть("ВидЭлементаСхемы, НаименованиеЭлементаСхемы, ОписаниеЭлементаСхемы, Гиперссылка, ПометкаУдаления", "Счетчик");
	
	Для каждого СтрокаТаблицыИзменений Из ТаблицаИзменений Цикл
		Если СтрокаТаблицыИзменений.Счетчик <> 0 Тогда
			ДобавитьВКоллекциюИзмененныхОбъектов(СтрокаТаблицыИзменений.Гиперссылка, КоллекцияИзмененныхОбъектов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает документ с описанием и схемой (если она есть) для версионируемого объекта
Функция ОписаниеСхемаВерсииОбъекта(Ссылка, ДатаВерсии = Неопределено, Документ = Неопределено, Схема = Неопределено, ВариантыСправки = Неопределено, ВидОбъекта = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСправочника  = Ссылка.Метаданные().Имя;
	ЕстьСхема = (ИмяСправочника = "ФункцииСистемы");
	ЕстьСправка = (ИмяСправочника = "ОбъектыМетаданных") ИЛИ (ИмяСправочника = "ФормыОбъектовМетаданных") ИЛИ (ИмяСправочника = "Подсистемы");
	
	Если НЕ ЗначениеЗаполнено(ДатаВерсии) Тогда
		
		ПечатныеФормы = ОписаниеОбъектов.СформироватьОписаниеОбъекта(Ссылка);
		
		Документ = Неопределено;
		
		Если ПечатныеФормы.Количество()>0 Тогда
			
			СтруктураПечати = ПечатныеФормы.Получить(Ссылка);
			
			Если ТипЗнч(СтруктураПечати) = Тип("Структура") Тогда
				
				Если СтруктураПечати.Свойство("Описание") Тогда
					Документ = СтруктураПечати.Описание;
				КонецЕсли;
				
				Если СтруктураПечати.Свойство("Схема") Тогда
					Схема = СтруктураПечати.Схема;
				КонецЕсли;
				
				Если СтруктураПечати.Свойство("ВариантыСправки") Тогда
					ВариантыСправки = СтруктураПечати.ВариантыСправки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВерсииОбъектов.ХранилищеОписания,
		|	ВерсииОбъектов.ХранилищеСхемы,
		|	ВерсииОбъектов.ХранилищеСправки
		|ИЗ
		|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
		|ГДЕ
		|	ВерсииОбъектов.Период <= &ДатаВерсии
		|	И ВерсииОбъектов.ВерсионируемыйОбъект = &Ссылка
		|	И ВерсииОбъектов.ВидОбъекта = &ВидОбъекта
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииОбъектов.Период УБЫВ";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ВидОбъекта", ?(ВидОбъекта <> Неопределено, ВидОбъекта, ВидВерсионируемогоОбъекта(Ссылка)));
		Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсии);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			ВызватьИсключение("Версия объекта """ + Ссылка + """ от " + ДатаВерсии + " не существует.");
		КонецЕсли;
		
		Если ЕстьСхема Тогда
			Схема = Выборка.ХранилищеСхемы.Получить();
		КонецЕсли;
		
		Если ЕстьСправка Тогда
			ВариантыСправки = Выборка.ХранилищеСправки.Получить();
		Иначе
			Документ = Выборка.ХранилищеОписания.Получить();
			Если ТипЗнч(Документ) <> Тип("ТабличныйДокумент") Тогда
				ВызватьИсключение("Версия объекта """ + Ссылка + """ от " + ДатаВерсии + " имеет неверный формат.");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Документ;
	
КонецФункции

Функция СтруктураНастроекПользователяДляСравненияОбъектов() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СравнениеСредствами1СПредприятия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", 
														"НастройкаСравненияСравнениеСредствами1СПредприятия", Истина);
	
	ТекстовыйФормат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя",
														"НастройкаСравненияТекстовыйФормат", Ложь);
														
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
														
	СтруктураНастроек.Вставить("СравнениеСредствами1СПредприятия",
		ОписаниеТипаБулево.ПривестиЗначение(СравнениеСредствами1СПредприятия));
		
	СтруктураНастроек.Вставить("ТекстовыйФормат",
		ОписаниеТипаБулево.ПривестиЗначение(ТекстовыйФормат));
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Определяет вид объекта
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ВидыОбъектов   - вид объекта
//
Функция ВидВерсионируемогоОбъекта(Ссылка) Экспорт

	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		ВидОбъекта = Перечисления.ВидыОбъектов.ТехническийПроект;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ФункцииСистемы") Тогда
		ВидОбъекта = Перечисления.ВидыОбъектов.Функция;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ЭлементыСправки") Тогда
		ВидОбъекта = Перечисления.ВидыОбъектов.СправкаОбъектаМетаданных;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.КлючевыеОперации") Тогда
		ВидОбъекта = Перечисления.ВидыОбъектов.КлючеваяОперация;
	Иначе
		ВидОбъекта = Перечисления.ВидыОбъектов.Прочее;
	КонецЕсли;
	
	Возврат ВидОбъекта;
	
КонецФункции

// Подготавливает данные для сравнения версий объектов
//    
Функция ПодготовитьДанныеДляСравнения(Ссылка, ДатаВерсии1, ДатаВерсии2, ВидОбъекта = Неопределено) Экспорт
	Перем ВариантыСправки1, ВариантыСправки2;

	Если ДатаВерсии1 = Неопределено Тогда
		ДатаВерсии1 = Версионирование.ДатаВремяПровереннойВерсии(Ссылка, ВидОбъекта);
		Если ДатаВерсии1 = '000101010000' Тогда
			Возврат Неопределено;	
		КонецЕсли;
	КонецЕсли; 
	
	Описание1 = ОписаниеСхемаВерсииОбъекта(Ссылка, ДатаВерсии1,,, ВариантыСправки1, ВидОбъекта);
	Описание2 = ОписаниеСхемаВерсииОбъекта(Ссылка, ДатаВерсии2,,, ВариантыСправки2, ВидОбъекта);
	
	ДанныеДляСравнения =
	    ДанныеДляСравненияВерсий(Описание1, Описание2, ВариантыСправки1, ВариантыСправки2, ДатаВерсии1, ДатаВерсии2, ВидОбъекта);

	Возврат ДанныеДляСравнения;
	
КонецФункции

Функция ДанныеДляСравненияВерсий(Описание1, Описание2, ВариантыСправки1=Неопределено, ВариантыСправки2=Неопределено, ДатаВерсии1='00010101',ДатаВерсии2='00010101', ВидОбъекта=Неопределено) Экспорт
	
	ДанныеДляСравнения = Новый Структура;
	ДанныеДляСравнения.Вставить("Версия1", Описание1);
	ДанныеДляСравнения.Вставить("Версия2", Описание2);
	ДанныеДляСравнения.Вставить("ВариантыСправки1", ВариантыСправки1);
	ДанныеДляСравнения.Вставить("ВариантыСправки2", ВариантыСправки2);
	ДанныеДляСравнения.Вставить("ДатаВерсии1", ДатаВерсии1);
	ДанныеДляСравнения.Вставить("ДатаВерсии2", ДатаВерсии2);
	ДанныеДляСравнения.Вставить("ВидОбъекта", ВидОбъекта);
	ДанныеДляСравнения.Вставить("НастройкиСравнения", СтруктураНастроекПользователяДляСравненияОбъектов());
	
	Возврат ДанныеДляСравнения;
	
КонецФункции

// Определяет и возвращает дату последнего изменения указанного объекта.
//
// Параметры:
//  Ссылка - Определяемый тип ВерсионируемыйОбъект - ссылка на объект, дату изменения которого нужно получить.
//
// Возвращаемое значение:
//  ДатаИзменения - дата - дата последнего изменения указанного объекта.
//
Функция ДатаПоследнегоИзмененияОбъекта(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаИзменения = '00010101';
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДатыИзмененияОбъектов.ДатаИзменения КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|ГДЕ
	|	ДатыИзмененияОбъектов.КонтролируемыйОбъект = &КонтролируемыйОбъект
	|	И ДатыИзмененияОбъектов.ВидОбъекта = &ВидОбъекта"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("КонтролируемыйОбъект", Ссылка);
	Запрос.УстановитьПараметр("ВидОбъекта", ВидВерсионируемогоОбъекта(Ссылка));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаИзменения = Выборка.ДатаИзменения;
	КонецЕсли;
	
	Возврат ДатаИзменения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВКоллекциюИзмененныхОбъектов(Ссылка, КоллекцияИзмененныхОбъектов)

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из КоллекцияИзмененныхОбъектов Цикл
		Если ЭлементКоллекции.Ссылка = Ссылка Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла; 
	
	КоллекцияИзмененныхОбъектов.Добавить(Новый Структура("Ссылка,ВидОбъекта", Ссылка, ВидВерсионируемогоОбъекта(Ссылка)));
	
КонецПроцедуры

#КонецОбласти
