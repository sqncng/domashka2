#Область ПрограммныйИнтерфейс

// Устанавливает указанный статус для указанных технических проектов
//
// Параметры:
//  МассивТехническихПроектов - массив, содержащий технический проекты
//  Статус - статус, который необходимо установить проектам
//
Процедура УстановитьСтатусТехническихПроектов(МассивТехническихПроектов, Статус) Экспорт
	
	Для Каждого ТехническийПроект из МассивТехническихПроектов Цикл
		
		Объект = ТехническийПроект.ПолучитьОбъект();
		Попытка
			Объект.Заблокировать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось установить статус для технического проекта: %Проект% по причине: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ТехническийПроект);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "[ERRORDESC]", ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТехническийПроект);
		КонецПопытки;
		
		Попытка
			Объект.Статус = Статус;
			
			Если НЕ Объект.ПроверитьЗаполнение() Тогда
				ТекстСообщения = НСтр("ru='Технический проект %Проект% не записан'"); 
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ТехническийПроект);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТехническийПроект);
				Возврат;
			КонецЕсли;
		
			Объект.Записать();
			Объект.Разблокировать();
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось установить статус для технического проекта: %Проект% по причине: %ОписаниеОшибки%'"); 
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ТехническийПроект);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТехническийПроект);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - Текст с описанием тезнического проекта для закладки в хранилище
//
// Параметры:
//  ТехническийПроект - СправочникСсылка.ТехническийПроект - Технический проект
// 
// Возвращаемое значение:
//   - Строка - Текст с описанием
//
Функция ТекстДляХранилищаКонфигурации(ТехническийПроект) Экспорт
	
	ИменаРеквизитов = "Код, Наименование, Ответственный, Публикуется, ХранилищеОписания";
	Реквизиты = Новый Структура(ИменаРеквизитов);
	Реквизиты.Вставить("ИспользоватьСлеши", "Владелец.ИспользоватьСлешиВТекстеЗакладкиВХранилище");
	
	КоллекцияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТехническийПроект, Реквизиты);
	
	Префикс              = ?(КоллекцияРеквизитов.ИспользоватьСлеши, "//", "");
	ПрефиксПриПубликации = ?(КоллекцияРеквизитов.Публикуется, "", Префикс);
	
	Текст = ПрефиксПриПубликации + НСтр("ru='Технический проект'") + " " + КоллекцияРеквизитов.Код + Символы.ПС
		+ Символы.ПС + ПрефиксПриПубликации + НСтр("ru='Наименование:'") + " " + КоллекцияРеквизитов.Наименование
		+ Символы.ПС + Префикс + НСтр("ru='Ответственный:'") + " " + КоллекцияРеквизитов.Ответственный;
	
	Если КоллекцияРеквизитов.Публикуется Тогда
		
		Описание = КоллекцияРеквизитов.ХранилищеОписания.Получить();
		ТекстОписания = "";
				
		Если ТипЗнч(Описание) = Тип("ФорматированныйДокумент") Тогда
			ТекстОписания = Описание.ПолучитьТекст();
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТекстОписания) Тогда
			Текст = Текст + Символы.ПС + ПрефиксПриПубликации + "Описание: " + Символы.ПС + ТекстОписания;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ТекстОписанияПроектаИзХранилищаОписания(ХранилищеОписания) Экспорт
	
	Описание = "";
	
	Если ТипЗнч(ХранилищеОписания) = Тип("ХранилищеЗначения") Тогда
		
		ФорматированноеОписание = ХранилищеОписания.Получить();
		Если ТипЗнч(ФорматированноеОписание) = Тип("ФорматированныйДокумент") Тогда
			Описание = ФорматированноеОписание.ПолучитьТекст();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Сохраняет настройки технического проекта в хранилище общих настроек
//
// Параметры:
//  ТехническийПроект	 - СправочникСсылка.ТехническийПроект - Технический проект для которого сохраняются настройки
//  ЗначенияНастроек	 - Структура - Содержит значения настроек, которые нужно сохранить
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБТехпроекта
//					* ПользовательИБТехпроекта
//					* ПользовательХранилищаТехпроекта
//					* ПарольХранилищаТехпроекта
//
Функция СохранитьНастройкиТехническогоПроекта(ТехническийПроект, ЗначенияНастроек) Экспорт
	
	НастройкиПроекта = ПолучитьНастройкиТехническогоПроекта(ТехническийПроект);
	ЗаполнитьЗначенияСвойств(НастройкиПроекта, ЗначенияНастроек);
	
	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиТехническихПроектов", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
	КонецЕсли;
	ТекущиеНастройки.Вставить(ТехническийПроект, НастройкиПроекта);
	ХранилищеОбщихНастроек.Сохранить("НастройкиТехническихПроектов", "Версия1", ТекущиеНастройки);
	
КонецФункции

// Возвращает настройки технического проекта
//
// Параметры:
//  ТехническийПроект	 - СправочникСсылка.ТехническийПроект - Технический проект для которого нужно получить настройки
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБТехпроекта
//					* ПользовательИБТехпроекта
//					* ПользовательХранилищаТехпроекта
//					* ПарольХранилищаТехпроекта
//
Функция ПолучитьНастройкиТехническогоПроекта(ТехническийПроект) Экспорт

	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиТехническихПроектов", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
		НастройкиПроекта = Неопределено;
	Иначе
		НастройкиПроекта = ТекущиеНастройки.Получить(ТехническийПроект);
	КонецЕсли;
	
	Если НастройкиПроекта = Неопределено Тогда
		НастройкиПроекта = СтруктураНастроекПроекта();
		ТекущиеНастройки.Вставить(ТехническийПроект, НастройкиПроекта);
	КонецЕсли; 
	
	Возврат ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(НастройкиПроекта);

КонецФункции

// Возвращает структуру настроек проекта
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБТехпроекта
//					* ПользовательИБТехпроекта
//					* ПользовательХранилищаТехпроекта
//					* ПарольХранилищаТехпроекта
//
Функция СтруктураНастроекПроекта() Экспорт

	НастройкиПроекта = Новый Структура;
	НастройкиПроекта.Вставить("РасположениеИБТехпроекта", "");
	НастройкиПроекта.Вставить("ПользовательИБТехпроекта", "");
	НастройкиПроекта.Вставить("ПользовательХранилищаТехпроекта", "");
	НастройкиПроекта.Вставить("ПарольХранилищаТехпроекта", "");

	Возврат НастройкиПроекта;
	
КонецФункции
 
// Сохраняет настройки версии в хранилище общих настроек
//
// Параметры:
//  Версия			 - СправочникСсылка.ВерсииПроекта - Версия для которой нужно сохранить настройки
//  ЗначенияНастроек - Структура - Содержит значения настроек, которые нужно сохранить
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//  * РасположениеИБОсновногоХранилища
//  * ПользовательИБОсновногоХранилища
//  * ПользовательОсновногоХранилища
//  * ПарольОсновногоХранилища
//
Функция СохранитьНастройкиВерсии(Версия, ЗначенияНастроек) Экспорт

	НастройкиВерсии = ПолучитьНастройкиВерсии(Версия);
	ЗаполнитьЗначенияСвойств(НастройкиВерсии, ЗначенияНастроек);
	
	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиВерсий", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
	КонецЕсли;
	ТекущиеНастройки.Вставить(Версия, НастройкиВерсии);
	ХранилищеОбщихНастроек.Сохранить("НастройкиВерсий", "Версия1", ТекущиеНастройки);

КонецФункции

// Возвращает настройки версии
//
// Параметры:
//  Версия	 - СправочникСсылка.ВерсииПроекта - Версия для которой нужно получить настройки
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБОсновногоХранилища
//					* ПользовательИБОсновногоХранилища
//					* ПользовательОсновногоХранилища
//					* ПарольОсновногоХранилища
//
Функция ПолучитьНастройкиВерсии(Версия) Экспорт

	ТекущиеНастройки = ХранилищеОбщихНастроек.Загрузить("НастройкиВерсий", "Версия1");
	Если ТекущиеНастройки = Неопределено Тогда
		ТекущиеНастройки = Новый Соответствие;
		НастройкиВерсии = Неопределено;
	Иначе
		НастройкиВерсии = ТекущиеНастройки.Получить(Версия);
	КонецЕсли;
	
	Если НастройкиВерсии = Неопределено Тогда
		НастройкиВерсии = СтруктураНастроекВерсии();
		ТекущиеНастройки.Вставить(Версия, НастройкиВерсии);
	КонецЕсли; 
	
	Возврат НастройкиВерсии;

КонецФункции

// Возвращает структуру настроек версии
// 
// Возвращаемое значение:
//  Структура - Содержит сохраненные настройки:
//					* РасположениеИБОсновногоХранилища
//					* ПользовательИБОсновногоХранилища
//					* ПользовательОсновногоХранилища
//					* ПарольОсновногоХранилища
//
Функция СтруктураНастроекВерсии() Экспорт

	НастройкиВерсии = Новый Структура;
	НастройкиВерсии.Вставить("РасположениеИБОсновногоХранилища", "");
	НастройкиВерсии.Вставить("ПользовательИБОсновногоХранилища", "");
	НастройкиВерсии.Вставить("ПользовательОсновногоХранилища", "");
	НастройкиВерсии.Вставить("ПарольОсновногоХранилища", "");

	Возврат НастройкиВерсии;
	
КонецФункции

#КонецОбласти
