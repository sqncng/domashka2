#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Настройки = Тестирование.НастройкиВыгрузкиТестов();
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("КаталогВыгрузкиСценариев") Тогда
			КаталогВыгрузкиСценариев = Настройки.КаталогВыгрузкиСценариев;
		ИначеЕсли Настройки.Свойство("КаталогВыгрузки") Тогда
			КаталогВыгрузкиСценариев = Настройки.КаталогВыгрузки;
		КонецЕсли;	 
		Если Настройки.Свойство("КаталогВыгрузкиПроцессов") Тогда
			КаталогВыгрузкиПроцессов = Настройки.КаталогВыгрузкиПроцессов;
		КонецЕсли;	 
		КаталогДанныхЭталонныхБД = Настройки.КаталогДанныхЭталонныхБД;
		Если Настройки.Свойство("ЗакрыватьФормуПослеВыгрузки") Тогда
			ЗакрыватьФормуПослеВыгрузки = Настройки.ЗакрыватьФормуПослеВыгрузки;
		КонецЕсли;	 
	КонецЕсли;
	
	Если Параметры.Свойство("СписокТестов") Тогда
		ПереданныйСписокТестов.ЗагрузитьЗначения(Параметры.СписокТестов);
	КонецЕсли;	 
	Если Параметры.Свойство("ПереданныйТипВыгрузки") Тогда
		ПереданныйСписокТестов.ЗагрузитьЗначения(Параметры.СписокТестов);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтандартноеЗначениеОтступа = СтандартноеЗначениеОтступа();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыгрузкаНастроекТестированияСценариев" Тогда
		ПереданныйСписокТестов.Очистить();
		ПереданныйСписокТестов.ЗагрузитьЗначения(Параметр.СписокТестов);
		ПереданныйТипВыгрузки = Параметр.ТипВыгрузки;
	ИначеЕсли ИмяСобытия = "ВыгрузкаНастроекПроцессов" Тогда
		ПереданныйСписокТестов.Очистить();
		ПереданныйСписокТестов.ЗагрузитьЗначения(Параметр.СписокТестов);
		ПереданныйТипВыгрузки = Параметр.ТипВыгрузки;
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выгрузить(Команда)
	ВыгрузитьТестыВКаталог(ПереданныйСписокТестов);
	ПроверитьНаКорректностьСлужебный();
	ДанныеДляОбновления = Новый Структура;
	ДанныеДляОбновления.Вставить("ОбновлятьКеш", Истина);
	ДанныеДляОбновления.Вставить("ОбновлятьСлужебныеДанныеСценариев", Истина);
	ОбновитьКешДанныхСценариев(ДанныеДляОбновления);
	СохранитьНастройки();
	Если ЗакрыватьФормуПослеВыгрузки Тогда
		Закрыть();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКеш(Команда)
	ДанныеДляОбновления = Новый Структура;
	ДанныеДляОбновления.Вставить("ОбновлятьКеш", Истина);
	ДанныеДляОбновления.Вставить("ОбновлятьСлужебныеДанныеСценариев", Ложь);
	ОбновитьКешДанныхСценариев(ДанныеДляОбновления);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСлужебныеДанныеСценариев(Команда)
	ДанныеДляОбновления = Новый Структура;
	ДанныеДляОбновления.Вставить("ОбновлятьКеш", Ложь);
	ДанныеДляОбновления.Вставить("ОбновлятьСлужебныеДанныеСценариев", Истина);
	ОбновитьКешДанныхСценариев(ДанныеДляОбновления);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогВыгрузкиСценариев;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор каталога'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогВыгрузкиСценариев = ОпределитьКаталогВыгрузки(ДиалогВыбораФайла.Каталог,КаталогВыгрузкиСценариев);
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхЭталонныхБДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогДанныхЭталонныхБД;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор каталога'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогДанныхЭталонныхБД = ОпределитьКаталогВыгрузки(ДиалогВыбораФайла.Каталог,КаталогВыгрузкиСценариев);
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиПроцессовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогВыгрузкиПроцессов;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор каталога'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогВыгрузкиПроцессов = ОпределитьКаталогВыгрузки(ДиалогВыбораФайла.Каталог,КаталогВыгрузкиПроцессов);
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиПроцессовПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура КаталогДанныхЭталонныхБДПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЭтоФайлНастройкиСценария(ИмяФайла)
	Статус = Истина;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,"НастройкаПроцесса") > 0 Тогда
			Статус = Ложь;
		КонецЕсли;	 
		
		Прервать;
	КонецЦикла;	
	
	Текст.Закрыть();
	
	Возврат Статус;
КонецФункции	 

&НаСервере
Процедура СохранитьНастройки()
	Настройки = Новый Структура;
	Настройки.Вставить("КаталогВыгрузкиСценариев",КаталогВыгрузкиСценариев);
	Настройки.Вставить("КаталогВыгрузкиПроцессов",КаталогВыгрузкиПроцессов);
	Настройки.Вставить("КаталогДанныхЭталонныхБД",КаталогДанныхЭталонныхБД);
	Настройки.Вставить("ЗакрыватьФормуПослеВыгрузки",ЗакрыватьФормуПослеВыгрузки);
	
	Тестирование.СохранитьНастройкиВыгрузкиТестов(Настройки);
КонецПроцедуры

&НаКлиенте
Функция UIDИзФайла(ПутьКФайлу)
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ПутьКФайлу,"UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;
				
		Индекс = Найти(Стр, "UID:");
		Если Индекс <> 0 Тогда
			UID = СокрЛП(Прав(Стр, СтрДлина(Стр) - Индекс - СтрДлина("UID:")));
			UID = СтрЗаменить(UID, """", "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Текст.Закрыть();
	
	Возврат UID;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьТестыВКаталог(СписокТестов)
	ТестированиеКлиент.ВыгрузитьТестыВКаталог(СписокТестов, КаталогВыгрузкиСценариев, КаталогВыгрузкиПроцессов, КаталогДанныхЭталонныхБД, ПереданныйТипВыгрузки);
КонецПроцедуры

&НаКлиенте
Функция ДополнитьРазделительПути(Знач Путь)
	СимволСлеша = ПолучитьРазделительПути();
	Если Прав(Путь,1) <> СимволСлеша Тогда
		Путь = Путь + СимволСлеша;
	КонецЕсли;	 
	
	Возврат Путь;
КонецФункции

&НаКлиенте
Функция ОпределитьКаталогВыгрузки(Каталог,ТекущееЗначение)
	Возврат Каталог;
КонецФункции	

&НаКлиенте
Процедура ПроверитьНаКорректностьСлужебный()
	Файл = Новый Файл(КаталогВыгрузкиСценариев);
	Если Не Файл.Существует() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Каталог <%1> не существует.'"),КаталогВыгрузкиСценариев);
	КонецЕсли;	 
	
	КаталогиСценариев = Новый Массив;
	UIDыПроцессов = Новый Массив;
	ИменаФайловНастроекСценариев  = Новый Массив;
	ИменаФайловНастроекПроцессов  = Новый Массив;
	ДублиСценариев = Новый Массив;
	ДублиUIDПроцессов = Новый Массив;
	ДублиНастроекСценариев = Новый Массив;
	ДублиНастроекПроцессов = Новый Массив;
	ФайлыСценариев = Новый Массив;
	ФайлыПроцессов = Новый Массив;
	ФайлыНастроекСценариев  = Новый Массив;
	ФайлыНастроекПроцессов  = Новый Массив;
	
	Файлы = НайтиФайлы(КаталогВыгрузкиСценариев,"*.yaml",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Нрег(Файл.Имя) = "scen.yaml" ИЛИ Нрег(Файл.Имя) = "meta.yaml" Тогда
			Каталог = Файл.Путь;
			ФайлКаталога = Новый Файл(Каталог);
			ИмяКаталога = ФайлКаталога.Имя;
			
			Если КаталогиСценариев.Найти(ИмяКаталога) <> Неопределено Тогда
				  ДублиСценариев.Добавить(ИмяКаталога);
			КонецЕсли;	 
			
			ФайлыСценариев.Добавить(Файл);
			КаталогиСценариев.Добавить(ИмяКаталога);
		ИначеЕсли Нрег(Файл.Имя) = "proc.yaml" Тогда
			UID = UIDИзФайла(Файл.ПолноеИмя);
			
			Если UIDыПроцессов.Найти(UID) <> Неопределено Тогда
				  ДублиUIDПроцессов.Добавить(UID);
			КонецЕсли; 
			
			ФайлыПроцессов.Добавить(Файл);
			UIDыПроцессов.Добавить(UID);
		Иначе
			Если ЭтоФайлНастройкиСценария(Файл.ПолноеИмя) Тогда
				Если ИменаФайловНастроекСценариев.Найти(НРег(Файл.Имя)) <> Неопределено Тогда
					ДублиНастроекСценариев.Добавить(НРег(Файл.Имя));
				КонецЕсли;	 
				
				ФайлыНастроекСценариев.Добавить(Файл);
				ИменаФайловНастроекСценариев.Добавить(НРег(Файл.Имя));
			Иначе	
				Если ИменаФайловНастроекПроцессов.Найти(НРег(Файл.Имя)) <> Неопределено Тогда
					ДублиНастроекПроцессов.Добавить(НРег(Файл.Имя));
				КонецЕсли;	 
				
				ФайлыНастроекПроцессов.Добавить(Файл);
				ИменаФайловНастроекПроцессов.Добавить(НРег(Файл.Имя));
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	Ошибки = Новый Массив;
	
	Счетчик = -1;	
	Для Каждого КаталогСценария Из КаталогиСценариев Цикл
		Счетчик = Счетчик + 1;
		Если ДублиСценариев.Найти(КаталогСценария) <> Неопределено Тогда
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			      НСтр("ru = 'Сценарий <%1> встречается несколько раз.'"),ФайлыСценариев[Счетчик].ПолноеИмя);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Стр);
			Ошибки.Добавить(Стр);  
		КонецЕсли; 
	КонецЦикла;
	
	Счетчик = -1;
	Для Каждого UIDПроцесса Из UIDыПроцессов Цикл
		Счетчик = Счетчик + 1;
		Если ДублиUIDПроцессов.Найти(UIDПроцесса) <> Неопределено Тогда
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			      НСтр("ru = 'Процесс <%1> встречается несколько раз.'"),ФайлыПроцессов[Счетчик].ПолноеИмя);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Стр);
			Ошибки.Добавить(Стр);  
		КонецЕсли; 
	КонецЦикла;
	
	Счетчик = -1;
	Для Каждого ИмяНастройки Из ИменаФайловНастроекСценариев Цикл
		Счетчик = Счетчик + 1;
		Если ДублиНастроекСценариев.Найти(ИмяНастройки) <> Неопределено Тогда
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			      НСтр("ru = 'Настройка сценария <%1> встречается несколько раз.'"),ФайлыНастроекСценариев[Счетчик].ПолноеИмя);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Стр);
			Ошибки.Добавить(Стр);	  
		КонецЕсли;	 
	КонецЦикла;	
	
	Счетчик = -1;	
	Для Каждого ИмяНастройки Из ИменаФайловНастроекПроцессов Цикл
		Счетчик = Счетчик + 1;
		Если ДублиНастроекПроцессов.Найти(ИмяНастройки) <> Неопределено Тогда
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			      НСтр("ru = 'Настройка процесса <%1> встречается несколько раз.'"),ФайлыНастроекПроцессов[Счетчик].ПолноеИмя);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Стр);
			Ошибки.Добавить(Стр);
		КонецЕсли;
	КонецЦикла;
	
	Если ДублиСценариев.Количество() > 0 ИЛИ ДублиНастроекСценариев.Количество() > 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Обнаружены ошибки. %1'"),
		    Символы.ПС + СтрСоединить(Ошибки,Символы.ПС));
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьКавычкиСДвухСторон(Стр)
	Если Лев(Стр, 1) = """" Тогда
		Стр = Сред(Стр, 2);
	КонецЕсли;	 
	
	Если Прав(Стр, 1) = """" Тогда
		Стр = Лев(Стр, СтрДлина(Стр) - 1);
	КонецЕсли;	 
КонецПроцедуры 

&НаСервереБезКонтекста
Функция УпорядочитьДанныеФайлов(ДанныеФайлов)
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаДанных.Колонки.Добавить("ИмяСценария");
	ТаблицаДанных.Колонки.Добавить("UID");
	ТаблицаДанных.Колонки.Добавить("ЕстьПрисоединенныеФайлы");
	ТаблицаДанных.Колонки.Добавить("НастройкиСценария");
	ТаблицаДанных.Колонки.Добавить("UIDОтветственный");
	
	
	Для Каждого Элем Из ДанныеФайлов Цикл
		СтрокаТаблицаДанных = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицаДанных, Элем);
	КонецЦикла;	 
	
	ТаблицаДанных.Сортировать("ПолноеИмяФайла");
	
	Результат = Новый Массив;
	Для Каждого СтрокаТаблицаДанных Из ТаблицаДанных Цикл
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ПолноеИмяФайла", СтрокаТаблицаДанных.ПолноеИмяФайла);
		ДанныеФайла.Вставить("ИмяСценария", СтрокаТаблицаДанных.ИмяСценария);
		ДанныеФайла.Вставить("UID", СтрокаТаблицаДанных.UID);
		ДанныеФайла.Вставить("ЕстьПрисоединенныеФайлы", СтрокаТаблицаДанных.ЕстьПрисоединенныеФайлы);
		ДанныеФайла.Вставить("UIDОтветственный", СтрокаТаблицаДанных.UIDОтветственный);
			
		Если СтрокаТаблицаДанных.НастройкиСценария <> Неопределено Тогда
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.ЗагрузитьЗначения(СтрокаТаблицаДанных.НастройкиСценария);
			СписокЗначений.СортироватьПоЗначению();
			МассивНастроек = СписокЗначений.ВыгрузитьЗначения();
			ДанныеФайла.Вставить("НастройкиСценария", МассивНастроек);
		КонецЕсли;	 	
			
		Результат.Добавить(ДанныеФайла);
	КонецЦикла;	 
	
	Возврат Результат; 
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКешДанныхСценариевСлужебный(КаталогТестов, ИмяФайлаРезультата, ДанныеДляОбновления)
	ОбновлятьКеш = Истина;
	ОбновлятьСлужебныеДанныеСценариев = Истина;
	Если ДанныеДляОбновления.Свойство("ОбновлятьКеш") Тогда
		ОбновлятьКеш = ДанныеДляОбновления.ОбновлятьКеш;
	КонецЕсли;	
	Если ДанныеДляОбновления.Свойство("ОбновлятьСлужебныеДанныеСценариев") Тогда
		ОбновлятьСлужебныеДанныеСценариев = ДанныеДляОбновления.ОбновлятьСлужебныеДанныеСценариев;
	КонецЕсли;	
	
	ДанныеФайлов = Новый Массив;
	Файлы = НайтиФайлы(КаталогТестов, "*.yaml", Истина);
	
	ДанныеНастроек = Новый Соответствие;
	
	Текст = Новый ЧтениеТекста;
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.Имя) = "meta.yaml" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Текст.Открыть(Файл.ПолноеИмя,"UTF-8");
		ТекстФайла = Текст.Прочитать();
		Текст.Закрыть();
		
		МассивСтрок = СтрРазделить(ТекстФайла,Символы.ПС);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПерваяСтрока = СокрЛ(НРег(МассивСтрок[0]));
		Если Лев(ПерваяСтрока, 9) = "типфайла:" Тогда
			Значение = СокрЛП(Сред(ПерваяСтрока, 10));
			УбратьКавычкиСДвухСторон(Значение);
			Если НРег(Значение) = "настройкатеста" Тогда
				//Это настройка теста
				UIDНастройки = Неопределено;
				UIDСценария = Неопределено;
				Для Каждого Стр Из МассивСтрок Цикл
					Стр = СокрЛ(Стр);
					НРегСтр = НРег(Стр);
					Если Лев(НРегСтр, 4) = "uid:" Тогда
						UIDНастройки = СокрЛП(Сред(Стр, 5));
						УбратьКавычкиСДвухСторон(UIDНастройки);
					ИначеЕсли Лев(НРегСтр, 12) = "uidсценария:" Тогда
						UIDСценария = СокрЛП(Сред(Стр, 13));
						УбратьКавычкиСДвухСторон(UIDСценария);
					КонецЕсли;	 
				КонецЦикла;	 
				
				Если ПустаяСтрока(UIDНастройки) Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не получилось определить идентификатор у файла <%1>.'"), Файл.ПолноеИмя);
				ИначеЕсли ПустаяСтрока(UIDСценария) Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не получилось определить UID сценария у файла <%1>.'"), Файл.ПолноеИмя);
				КонецЕсли;	 
				
				НастройкиСценария = ДанныеНастроек[UIDСценария];
				Если НастройкиСценария = Неопределено Тогда
					НастройкиСценария = Новый Массив;
					ДанныеНастроек.Вставить(UIDСценария, НастройкиСценария);
				КонецЕсли;	 
				
				НастройкиСценария.Добавить(UIDНастройки);
				
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;
	
	КешДанныхСценариев = Новый Соответствие;
	
	Для Каждого Файл Из Файлы Цикл
		Если НРег(Файл.Имя) <> "meta.yaml" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Текст.Открыть(Файл.ПолноеИмя,"UTF-8");
		ИмяСценария = Неопределено;
		UID = Неопределено;
		UIDОтветственный = "00000000-0000-0000-0000-000000000000";
		
		ВложенныеСценарии = Новый Соответствие;
		ВызывающиеСценарии = Новый Соответствие;
		ВызывающиеСценарииИмя = Новый Соответствие;
		УровеньОтчета1 = "";
		УровеньОтчета2 = "";
		
		ТекстФайла = Текст.Прочитать();
		МассивСтрокФайла = СтрРазделить(ТекстФайла, Символы.ПС);
		
		
		Для СчСтрокФайла = 0 По МассивСтрокФайла.Количество() - 1 Цикл
			
			Стр = МассивСтрокФайла[СчСтрокФайла];
			
			Стр = СокрЛ(Стр);
			
			НРегСтр = НРег(Стр);
			
			Если Лев(НРегСтр, 4) = "uid:" И UID = Неопределено Тогда
				UID = СокрЛП(Сред(Стр, 5));
				УбратьКавычкиСДвухСторон(UID);
			ИначеЕсли Лев(НРегСтр, 4) = "имя:" И ИмяСценария = Неопределено Тогда
				ИмяСценария = СокрЛП(Сред(Стр, 5));
				ИмяСценария = СтрЗаменить(ИмяСценария, "\""", """");
				УбратьКавычкиСДвухСторон(ИмяСценария);
			ИначеЕсли Лев(НРегСтр, 17) = "uidответственный:" Тогда
				UIDОтветственный = СокрЛП(Сред(Стр, 18));
				УбратьКавычкиСДвухСторон(UIDОтветственный);
			ИначеЕсли Лев(НРегСтр, 21) = "uidвложенныйсценарий:" Тогда
				UIDВложенныйСценарий = СокрЛП(Сред(Стр, 22));
				УбратьКавычкиСДвухСторон(UIDВложенныйСценарий);
				ВложенныеСценарии.Вставить(UIDВложенныйСценарий, UIDВложенныйСценарий);
			ИначеЕсли Лев(НРегСтр, 22) = "uidвызывающийсценарий:" Тогда
				UIDВызывающийСценарий = СокрЛП(Сред(Стр, 23));
				УбратьКавычкиСДвухСторон(UIDВызывающийСценарий);
				ВызывающиеСценарии.Вставить(UIDВызывающийСценарий, UIDВызывающийСценарий);
				СледСтрока = СокрЛ(Сред(СокрЛ(МассивСтрокФайла[СчСтрокФайла + 1]), 13));
				УбратьКавычкиСДвухСторон(СледСтрока);
				ВызывающиеСценарииИмя.Вставить(UIDВызывающийСценарий, СледСтрока);
			ИначеЕсли Лев(НРегСтр, 15) = "уровеньотчета1:" Тогда
				УровеньОтчета1 = СокрЛП(Сред(Стр, 16));
				УбратьКавычкиСДвухСторон(УровеньОтчета1);
			ИначеЕсли Лев(НРегСтр, 15) = "уровеньотчета2:" Тогда
				УровеньОтчета2 = СокрЛП(Сред(Стр, 16));
				УбратьКавычкиСДвухСторон(УровеньОтчета2);
			КонецЕсли;	 
			
		КонецЦикла;	
		Текст.Закрыть();
		
		ДанныеСценария = Новый Структура;
		ДанныеСценария.Вставить("ИмяСценария", ИмяСценария);
		ДанныеСценария.Вставить("UID", UID);
		ДанныеСценария.Вставить("ИмяФайла", Файл.ПолноеИмя);
		ДанныеСценария.Вставить("ВложенныеСценарии", ВложенныеСценарии);
		ДанныеСценария.Вставить("ВызывающиеСценарии", ВызывающиеСценарии);
		ДанныеСценария.Вставить("ВызывающиеСценарииИмя", ВызывающиеСценарииИмя);
		ДанныеСценария.Вставить("НадоОбновитьВызывающиеСценарии", Ложь);
		ДанныеСценария.Вставить("ВызовНесуществующегоСценария", Неопределено);
		ДанныеСценария.Вставить("ВызываетНесуществующийСценарий", Неопределено);
		ДанныеСценария.Вставить("ОбновитьИмяВызывающегоСценария", Неопределено);
		ДанныеСценария.Вставить("ДанныеДляДобавленияВызывающиеСценарии", Неопределено);
		ДанныеСценария.Вставить("ДанныеДляУдаленияВызывающиеСценарии", Неопределено);
		ДанныеСценария.Вставить("УровеньОтчета1", УровеньОтчета1);
		ДанныеСценария.Вставить("УровеньОтчета2", УровеньОтчета2);
		ДанныеСценария.Вставить("НадоОбновитьУровеньОтчета1", Ложь);
		ДанныеСценария.Вставить("НадоОбновитьУровеньОтчета2", Ложь);
		
		КешДанныхСценариев.Вставить(UID, ДанныеСценария);
		
		ПолноеИмяФайла = Сред(Файл.ПолноеИмя, СтрДлина(КаталогТестов) + 1);
		ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, "\", "/");
		
		Если ПустаяСтрока(UID) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не получилось определить идентификатор у файла <%1>.'"), Файл.ПолноеИмя);
		ИначеЕсли ПустаяСтрока(ИмяСценария) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не получилось определить имя сценария у файла <%1>.'"), Файл.ПолноеИмя);
		ИначеЕсли ПустаяСтрока(ПолноеИмяФайла) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не получилось определить относительный путь у файла <%1>.'"), Файл.ПолноеИмя);
		ИначеЕсли ПустаяСтрока(UIDОтветственный) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не получилось определить UID ответственного у файла <%1>.'"), Файл.ПолноеИмя);
		КонецЕсли;	 
		
		КаталогСценария = Файл.Путь;
		Файлы = НайтиФайлы(КаталогСценария + "files", "*", Истина);
		ЕстьПрисоединенныеФайлы = (Файлы.Количество() > 0);
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		ДанныеФайла.Вставить("ИмяСценария", ИмяСценария);
		ДанныеФайла.Вставить("UID", UID);
		ДанныеФайла.Вставить("ЕстьПрисоединенныеФайлы", ЕстьПрисоединенныеФайлы);
		ДанныеФайла.Вставить("UIDОтветственный", UIDОтветственный);
		
		НастройкиСценария = ДанныеНастроек[UID];
		Если НастройкиСценария <> Неопределено Тогда
			ДанныеФайла.Вставить("НастройкиСценария", НастройкиСценария);
		КонецЕсли;	 
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;	
	
	Для Каждого Элем Из КешДанныхСценариев Цикл
		UIDСценарияДляОбработки = Элем.Ключ;
		
		ВтораяЧастьПути = Сред(Элем.Значение.ИмяФайла, СтрДлина(КаталогТестов));
		ВтораяЧастьПути = СтрЗаменить(ВтораяЧастьПути, "\", "/");
		МассивСтрок = СтрРазделить(ВтораяЧастьПути, "/");
		Если МассивСтрок.Количество() > 0 Тогда
			Если НЕ ЗначениеЗаполнено(МассивСтрок[0]) Тогда
				МассивСтрок.Удалить(0);
			КонецЕсли;	 
		КонецЕсли;	 
		
		ТекУровень1 = Неопределено;
		ТекУровень2 = Неопределено;
		Если МассивСтрок.Количество() >= 4 Тогда
			ТекУровень1 = МассивСтрок[0];
			ТекУровень2 = МассивСтрок[1];
		ИначеЕсли МассивСтрок.Количество() >= 3 Тогда
			ТекУровень1 = МассивСтрок[0];
		КонецЕсли;	 
		
		Если ТекУровень1 <> Неопределено И Элем.Значение.УровеньОтчета1 <> ТекУровень1 Тогда
			ДанныеСценарияИзКеш = КешДанныхСценариев[UIDСценарияДляОбработки];
			ДанныеСценарияИзКеш.НадоОбновитьУровеньОтчета1 = Истина;
			ДанныеСценарияИзКеш.Вставить("ТекУровень1", ТекУровень1);
		КонецЕсли;	 
		Если ТекУровень2 <> Неопределено И Элем.Значение.УровеньОтчета2 <> ТекУровень2 Тогда
			ДанныеСценарияИзКеш = КешДанныхСценариев[UIDСценарияДляОбработки];
			ДанныеСценарияИзКеш.НадоОбновитьУровеньОтчета2 = Истина;
			ДанныеСценарияИзКеш.Вставить("ТекУровень2", ТекУровень2);
		КонецЕсли;	 
		
		Для Каждого ДанныеВложенногоСценария Из Элем.Значение.ВложенныеСценарии Цикл
			UIDВложенныйСценарий = ДанныеВложенногоСценария.Ключ;
			ДанныеСценарияИзКеш = КешДанныхСценариев[UIDВложенныйСценарий];
			Если ДанныеСценарияИзКеш = Неопределено Тогда
				Если Элем.Значение.ВызовНесуществующегоСценария = Неопределено Тогда
					Элем.Значение.ВызовНесуществующегоСценария = Новый Массив;
				КонецЕсли;	 
				
				Элем.Значение.ВызовНесуществующегоСценария.Добавить(UIDВложенныйСценарий);
				Элем.Значение.НадоОбновитьВызывающиеСценарии = Истина;
				
				Продолжить;
			КонецЕсли;	 
				
			Если ДанныеСценарияИзКеш.ВызывающиеСценарии[UIDСценарияДляОбработки] = Неопределено Тогда
				// Источником данных считается вызывающий сценарий. Поэтому вложенному сценарию надо добавить, что его вызывают.
				ДанныеСценарияИзКеш.НадоОбновитьВызывающиеСценарии = Истина;
				
				Если ДанныеСценарияИзКеш.ДанныеДляДобавленияВызывающиеСценарии = Неопределено Тогда
					ДанныеСценарияИзКеш.ДанныеДляДобавленияВызывающиеСценарии = Новый Массив;
				КонецЕсли;	 
				
				ДанныеВызывающегоСценарияДляОбновления = Новый Структура;
				ДанныеВызывающегоСценарияДляОбновления.Вставить("UIDВызывающийСценарий", UIDСценарияДляОбработки);
				ДанныеВызывающегоСценарияДляОбновления.Вставить("ИмяСценария", Элем.Значение.ИмяСценария);
				ДанныеСценарияИзКеш.ДанныеДляДобавленияВызывающиеСценарии.Добавить(ДанныеВызывающегоСценарияДляОбновления);
				
			КонецЕсли;	 	
		КонецЦикла;	 
		
		Для Каждого ДанныеВызывающегоСценария Из Элем.Значение.ВызывающиеСценарии Цикл
			UIDТекВызывающийСценарий = ДанныеВызывающегоСценария.Ключ;
			ДанныеСценарияИзКеш = КешДанныхСценариев[UIDТекВызывающийСценарий];
			Если ДанныеСценарияИзКеш = Неопределено Тогда
				Если Элем.Значение.ВызываетНесуществующийСценарий = Неопределено Тогда
					Элем.Значение.ВызываетНесуществующийСценарий = Новый Массив;
				КонецЕсли;	 
				
				Элем.Значение.ВызываетНесуществующийСценарий.Добавить(UIDТекВызывающийСценарий);
				Элем.Значение.НадоОбновитьВызывающиеСценарии = Истина;
				
				Продолжить;
			КонецЕсли;	 
			
			ИмяТекВызывающийСценарийРеальное = ДанныеСценарияИзКеш.ИмяСценария;
			Если Элем.Значение.ВызывающиеСценарииИмя[UIDТекВызывающийСценарий] <> ИмяТекВызывающийСценарийРеальное Тогда
				Элем.Значение.НадоОбновитьВызывающиеСценарии = Истина;
				
				Если Элем.Значение.ОбновитьИмяВызывающегоСценария = Неопределено Тогда
					Элем.Значение.ОбновитьИмяВызывающегоСценария = Новый Массив;
				КонецЕсли;	 
				
				Элем.Значение.ОбновитьИмяВызывающегоСценария.Добавить(UIDТекВызывающийСценарий);
				Продолжить;
			КонецЕсли;	
				
			Если ДанныеСценарияИзКеш.ВложенныеСценарии[UIDСценарияДляОбработки] = Неопределено Тогда
				// Источником данных считается вызывающий сценарий. Поэтому вложенному сценарию надо указать, что его в реальности не вызывают.
				Элем.Значение.НадоОбновитьВызывающиеСценарии = Истина;
				
				Если Элем.Значение.ДанныеДляУдаленияВызывающиеСценарии = Неопределено Тогда
					Элем.Значение.ДанныеДляУдаленияВызывающиеСценарии = Новый Массив;
				КонецЕсли;	 
				
				ДанныеВложенногоСценарияДляОбновления = Новый Структура;
				ДанныеВложенногоСценарияДляОбновления.Вставить("UIDВызывающийСценарий", UIDТекВызывающийСценарий);
				ДанныеВложенногоСценарияДляОбновления.Вставить("ИмяСценария", ДанныеСценарияИзКеш.ИмяСценария);
				Элем.Значение.ДанныеДляУдаленияВызывающиеСценарии.Добавить(ДанныеВложенногоСценарияДляОбновления);
				
			КонецЕсли;
			
		КонецЦикла;	 
	КонецЦикла;	 
	
	Для Каждого Элем Из КешДанныхСценариев Цикл
		Если НЕ Элем.Значение.НадоОбновитьВызывающиеСценарии И НЕ Элем.Значение.НадоОбновитьУровеньОтчета1 И НЕ Элем.Значение.НадоОбновитьУровеньОтчета2 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ПолноеИмяФайла", Элем.Значение.ИмяФайла);
		ФайлСценария = Новый Файл(Элем.Значение.ИмяФайла);
		ФайлФичи = Новый Файл(ФайлСценария.Путь + "scen.feature");
		Если НЕ ФайлФичи.Существует() Тогда
			Продолжить;
		КонецЕсли;	 
		
		ДанныеСценарияИзYaml = ТестированиеКлиент.ДанныеСценарияИзYaml(Элем.Значение.ИмяФайла, ФайлФичи.ПолноеИмя, ДопПараметры);
		НадоВыгрузитьЭлемент = Ложь;
		
		Если Элем.Значение.НадоОбновитьУровеньОтчета1 Тогда
			ДанныеСценарияИзYaml["ДанныеСценария"]["УровеньОтчета1"] = Элем.Значение.ТекУровень1;
			НадоВыгрузитьЭлемент = Истина;
		КонецЕсли;	 
		Если Элем.Значение.НадоОбновитьУровеньОтчета2 Тогда
			ДанныеСценарияИзYaml["ДанныеСценария"]["УровеньОтчета2"] = Элем.Значение.ТекУровень2;
			НадоВыгрузитьЭлемент = Истина;
		КонецЕсли;	 
		
		Если Элем.Значение.ДанныеДляДобавленияВызывающиеСценарии <> Неопределено Тогда
			Для Каждого ТекДанныеДляДобавленияВызывающиеСценарии Из Элем.Значение.ДанныеДляДобавленияВызывающиеСценарии Цикл
				Данные = Новый Структура;
				Данные.Вставить("UIDВызывающийСценарий", ТекДанныеДляДобавленияВызывающиеСценарии.UIDВызывающийСценарий);
				Данные.Вставить("ИмяСценария", ТекДанныеДляДобавленияВызывающиеСценарии.ИмяСценария);
				
				Если ТипЗнч(ДанныеСценарияИзYaml["ВызывающиеСценарии"]) <> Тип("Массив") Тогда
					ДанныеСценарияИзYaml.Вставить("ВызывающиеСценарии", Новый Массив);
				КонецЕсли;	 
				
				ДанныеСценарияИзYaml["ВызывающиеСценарии"].Добавить(Данные);
				
				НадоВыгрузитьЭлемент = Истина;
			КонецЦикла;	 
		КонецЕсли;
		
		Если Элем.Значение.ДанныеДляУдаленияВызывающиеСценарии <> Неопределено Тогда
			Для Каждого ТекДанныеДляУдаленияВызывающиеСценарии Из Элем.Значение.ДанныеДляУдаленияВызывающиеСценарии Цикл
				Если ТипЗнч(ДанныеСценарияИзYaml["ВызывающиеСценарии"]) <> Тип("Массив") Тогда
					ДанныеСценарияИзYaml.Вставить("ВызывающиеСценарии", Новый Массив);
				КонецЕсли;	 
				
				ИдДляУдаления = Новый СписокЗначений;
				Ид = -1;
				Для Каждого ТекВызывающийСценарий Из ДанныеСценарияИзYaml["ВызывающиеСценарии"] Цикл
					Ид = Ид + 1;
					Если ТекВызывающийСценарий["UIDВызывающийСценарий"] = ТекДанныеДляУдаленияВызывающиеСценарии.UIDВызывающийСценарий Тогда
						ИдДляУдаления.Добавить(Ид);
					КонецЕсли;	 
				КонецЦикла;	 
				
				ИдДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				Для Каждого ЭлементСписка Из ИдДляУдаления Цикл
					ДанныеСценарияИзYaml["ВызывающиеСценарии"].Удалить(ЭлементСписка.Значение);
					НадоВыгрузитьЭлемент = Истина;
				КонецЦикла;	 
				
			КонецЦикла;	 
		КонецЕсли;	 
		
		Если Элем.Значение.ВызываетНесуществующийСценарий <> Неопределено Тогда
			Для Каждого ТекДанныеНесуществующийСценарий Из Элем.Значение.ВызываетНесуществующийСценарий Цикл
				Если ТипЗнч(ДанныеСценарияИзYaml["ВызывающиеСценарии"]) <> Тип("Массив") Тогда
					ДанныеСценарияИзYaml.Вставить("ВызывающиеСценарии", Новый Массив);
				КонецЕсли;	 
				
				ИдДляУдаления = Новый СписокЗначений;
				Ид = -1;
				Для Каждого ТекВызывающийСценарий Из ДанныеСценарияИзYaml["ВызывающиеСценарии"] Цикл
					Ид = Ид + 1;
					Если ТекВызывающийСценарий["UIDВызывающийСценарий"] = ТекДанныеНесуществующийСценарий Тогда
						ИдДляУдаления.Добавить(Ид);
					КонецЕсли;	 
				КонецЦикла;	 
				
				ИдДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				Для Каждого ЭлементСписка Из ИдДляУдаления Цикл
					ДанныеСценарияИзYaml["ВызывающиеСценарии"].Удалить(ЭлементСписка.Значение);
					НадоВыгрузитьЭлемент = Истина;
				КонецЦикла;	 
			КонецЦикла;	 
		КонецЕсли;	 
		
		Если Элем.Значение.ОбновитьИмяВызывающегоСценария <> Неопределено Тогда
			Для Каждого ТекДанныеОбновитьИмяВызывающегоСценария Из Элем.Значение.ОбновитьИмяВызывающегоСценария Цикл
				Если ТипЗнч(ДанныеСценарияИзYaml["ВызывающиеСценарии"]) <> Тип("Массив") Тогда
					ДанныеСценарияИзYaml.Вставить("ВызывающиеСценарии", Новый Массив);
				КонецЕсли;	 
				
				Для Каждого ТекВызывающийСценарий Из ДанныеСценарияИзYaml["ВызывающиеСценарии"] Цикл
					Если ТекВызывающийСценарий["UIDВызывающийСценарий"] = ТекДанныеОбновитьИмяВызывающегоСценария Тогда
						ТекВызывающийСценарий["ИмяСценария"] = КешДанныхСценариев[ТекДанныеОбновитьИмяВызывающегоСценария].ИмяСценария;
						НадоВыгрузитьЭлемент = Истина;
					КонецЕсли;	
				КонецЦикла;	 
				
			КонецЦикла;	 
		КонецЕсли;	 
		
		Если НадоВыгрузитьЭлемент И ОбновлятьСлужебныеДанныеСценариев Тогда
			
			ДанныеСценарияИзYaml = ТестированиеКлиент.ДанныYamlВФорматСтруктурыСценария(ДанныеСценарияИзYaml);
			
			ДанныеДляВыгрузки = Новый Массив;
			ДанныеСценарияИзYaml.Вставить("ТипЭлементаВыгрузки", "Сценарий");
			Файл = Новый Файл(Элем.Значение.ИмяФайла);
			ДанныеСценарияИзYaml.Вставить("КаталогВыгрузки", Файл.Путь);
			
			ДанныеДляВыгрузки.Добавить(ДанныеСценарияИзYaml);
			ТестированиеКлиент.ВыгрузитьДанныеВКаталогВФорматеYaml(ДанныеДляВыгрузки);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если ДанныеФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновлятьКеш Тогда
		Результат = УпорядочитьДанныеФайлов(ДанныеФайлов);
		
		ИмяФайлаКеш = ИмяФайлаРезультата;
		УдалитьФайлы(ИмяФайлаКеш);
		
		#Если Не ВебКлиент Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.ОткрытьФайл(ИмяФайлаКеш,"UTF-8");
		ЗаписатьJSON(ЗаписьJSON, Результат);
		ЗаписьJSON.Закрыть();
		
		#КонецЕсли
		
	КонецЕсли;	
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьКешДанныхСценариев(ДанныеДляОбновления)
	КаталогВыгрузкиСценариев = ДополнитьРазделительПути(КаталогВыгрузкиСценариев);
	ОбновитьКешДанныхСценариевСлужебный(КаталогВыгрузкиСценариев, КаталогВыгрузкиСценариев + "scencache.json", ДанныеДляОбновления);
КонецПроцедуры 

&НаКлиенте
Функция СтандартноеЗначениеОтступа()
	Возврат "    "; 
КонецФункции	 

#КонецОбласти
