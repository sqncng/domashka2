///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебный");
		
		Элементы.ГруппаНастройкаИспользованияПрофилейБезопасности.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И МодульРаботаВБезопасномРежимеСлужебный.ДоступнаНастройкаПрофилейБезопасности();
	Иначе
		Элементы.ГруппаНастройкаИспользованияПрофилейБезопасности.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Элементы.ГруппаОткрытьПараметрыПроксиСервера.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Иначе
		Элементы.ГруппаОткрытьПараметрыПроксиСервера.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда

		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Элементы.СоздаватьЭлектронныеПодписиНаСервере.Видимость = Ложь;
		КонецЕсли;

		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		ДоступнаУсовершенствованнаяПодпись = МодульЭлектроннаяПодпись.ДоступнаУсовершенствованнаяПодпись();
		Элементы.ГруппаУсовершенствованнаяПодпись.Видимость = ДоступнаУсовершенствованнаяПодпись;
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
			И Не ОбщегоНазначения.КлиентПодключенЧерезВебСервер() Тогда
			Элементы.ГруппаАвтоматическаяОбработкаПодписей.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЭлектроннаяПодписьИШифрование.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Элементы.ГруппаДополнительныеРеквизитыИСведения.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		ЭтоАдминистратор = Пользователи.ЭтоПолноправныйПользователь(, Истина);
		Элементы.ИспользоватьСервисОблачнойПодписи.Видимость = ЭтоАдминистратор;
		Элементы.ИспользоватьСервисОблачнойПодписи.РасширеннаяПодсказка.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(
					"Разрешает использовать для подписания сервисы подписи DSS. Использование сервиса для формирования квалифицированной электронной подписи требует <a href = ""НастройкиDSS"">дополнительных настроек</a>.")
	Иначе	
		Элементы.ГруппаОблачнаяПодпись.Видимость = Ложь;
	КонецЕсли;
		
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Элементы.ГруппаВерсионирование.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПубликацияИнформационнойБазы.Видимость = Не (ОбщегоНазначения.РазделениеВключено() 
		Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		ХранитьИсториюИзменений = МодульВерсионированиеОбъектов.ЗначениеФлажкаХранитьИсторию();
	Иначе 
		Элементы.ГруппаВерсионирование.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") 
		И Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
		ИспользоватьПолнотекстовыйПоиск = МодульПолнотекстовыйПоискСервер.ЗначениеФлажкаИспользоватьПоиск();
	Иначе
		Элементы.ГруппаУправлениеПолнотекстовымПоиском.Видимость = Ложь;
	КонецЕсли;
	
	Если (ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов") )
		И Пользователи.ЭтоПолноправныйПользователь(,Истина) Тогда
		
		МодульУдалениеПомеченныхОбъектов = ОбщегоНазначения.ОбщийМодуль("УдалениеПомеченныхОбъектов");
		РежимРегламентногоЗадания = МодульУдалениеПомеченныхОбъектов.РежимУдалятьПоРасписанию();
		УдалениеПомеченныхИспользование = РежимРегламентногоЗадания.Использование;
		Элементы.НастроитьРасписание.Доступность = УдалениеПомеченныхИспользование;
	Иначе
		Элементы.ГруппаУдалениеПомеченных.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.РегиональныеНастройки.Видимость = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность");
	
	НастройкиРазделаПроизводительность();
	
	// СППР
	
	Шрифт = Константы.ШрифтФорматированногоТекста.Получить().Получить();
	Если Шрифт = Неопределено Тогда
		Шрифт = РаботаСФорматированнымДокументом.ШрифтПоУмолчанию();
	КонецЕсли; 
	ШрифтФорматированногоТекста = Шрифт;
	
	ПутьКВерсиямПлатформыНаСервере = Константы.ПутьКВерсиямПлатформыНаСервере.Получить();
	Если НЕ ЗначениеЗаполнено(ПутьКВерсиямПлатформыНаСервере) Тогда
	
		СисИнфо = Новый СистемнаяИнформация;
		КаталогПрограммы = КаталогПрограммы();
		Если Найти(КаталогПрограммы, СисИнфо.ВерсияПриложения) > 0  Тогда
		
			ПутьКВерсиямПлатформыНаСервере = СтрЗаменить(КаталогПрограммы, СисИнфо.ВерсияПриложения, "%ВерсияПлатформы%");
		
		КонецЕсли; 
	
	КонецЕсли;
	
	Если Найти(ПутьКВерсиямПлатформыНаСервере, "%ВерсияПлатформы%") > 0 Тогда
	
		НачалоПутиКВерсиямПлатформыНаСервере = Лев(ПутьКВерсиямПлатформыНаСервере, Найти(ПутьКВерсиямПлатформыНаСервере, "%ВерсияПлатформы%")-1);
		ОкончаниеПутиКВерсиямПлатформыНаСервере = СтрЗаменить(ПутьКВерсиямПлатформыНаСервере, НачалоПутиКВерсиямПлатформыНаСервере, "");
		ОкончаниеПутиКВерсиямПлатформыНаСервере = СтрЗаменить(ОкончаниеПутиКВерсиямПлатформыНаСервере, "%ВерсияПлатформы%", "");
		
		ОбновитьДоступныеВерсииПлатформы(ПутьКВерсиямПлатформыНаСервере);
		
	КонецЕсли;
	
	ИмяСервера = ИмяКомпьютера();
	Элементы.НачалоПутиКВерсиямПлатформыНаСервере.Заголовок = НСтр("ru = 'Путь к версиям платформы на сервере'")+ " ("+СокрЛП(ИмяСервера)+")";
	
	АдресСервиса = Константы.АдресСервисаПубликацииИсправлений.Получить();
	Если ЗначениеЗаполнено(АдресСервиса) Тогда
		Элементы.ПатчиСтатус.Заголовок = НСтр("ru = 'Подключение к сервису публикации патчей настроено'");
		Элементы.НастроитьСервисПубликацииПатчей.Заголовок = НСтр("ru = 'Изменить'");
	КонецЕсли;
	
	Элементы.ГруппаНастройкаПубликации.Доступность = НаборКонстант.ИспользоватьПубликациюПатчейВСервисе;
	
	УстановитьВидимостьЭлементовНастроекУчетаВремени();
	
	Элементы.ГруппаОбсуждения.Видимость = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения");
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;

	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("8.3.17.0", ВерсияПлатформы) > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОбсужденияНастроитьИнтеграциюСВнешнимиСистемами",
			"Видимость",
			Ложь);
	КонецЕсли;
	
	РасписаниеОтслеживанияСостоянияПовторяемыхОшибок =
		РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработкаОшибокОжидающихИсправленияПовторяемых).Расписание;
		
	ОбновитьПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок(Элементы, РасписаниеОтслеживанияСостоянияПовторяемыхОшибок);
	
	СформироватьТекстМаксимальныйПорядокПриоритетаРаботы();
	УправлениеДоступностьюПриоритетыОчереди(ЭтотОбъект);
	// Конец СППР
	
	УстановитьДоступность();
	
	НастройкиПрограммыПереопределяемый.ОбщиеНастройкиПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		МодульВерсионированиеОбъектовКлиент.ОбработкаОповещенияИзмененияФлажкаХранитьИсторию(
			ИмяСобытия, 
			ХранитьИсториюИзменений);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		МодульПолнотекстовыйПоискКлиент.ОбработкаОповещенияИзмененияФлажкаИспользоватьПоиск(
			ИмяСобытия, 
			ИспользоватьПолнотекстовыйПоиск);
	КонецЕсли;
	
	// СППР
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда 
		ПриИзмененииСостоянияПодключенияОбсуждений(Параметр);
	КонецЕсли;
	// Конец СППР
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("УстановитьВидимостьОбработчикОжидания", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаголовокПрограммыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловДляWindowsПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВременныхФайловДляLinuxПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПотоковДлительныхОперацийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбораПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбораПродолжение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ХранитьИсториюИзмененийПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		МодульВерсионированиеОбъектовКлиент.ПриИзмененииФлажкаХранитьИсторию(ХранитьИсториюИзменений);
	КонецЕсли;
	
	УстановитьДоступность("ХранитьИсториюИзменений");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПолнотекстовыйПоискПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		МодульПолнотекстовыйПоискКлиент.ПриИзмененииФлажкаИспользоватьПоиск(ИспользоватьПолнотекстовыйПоиск);
	КонецЕсли;
	
	УстановитьДоступность("ИспользоватьПолнотекстовыйПоиск");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеПриИзменении(Элемент)
	ОповещениеОбИзменении = Новый ОписаниеОповещения("УдалениеПомеченныхИспользованиеПриИзмененииЗавершение", ЭтотОбъект);
	
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов")) Тогда
		МодульУдалениеПомеченныхОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УдалениеПомеченныхОбъектовКлиент");
		МодульУдалениеПомеченныхОбъектовКлиент.ПриИзмененииФлажкаУдалятьПоРасписанию(УдалениеПомеченныхИспользование, ОповещениеОбИзменении);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеПриИзмененииЗавершение(Изменение, ДополнительныеПараметры) Экспорт
	Если (Изменение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	УдалениеПомеченныхИспользование = Изменение.Использование;
	Элементы.НастроитьРасписание.Доступность = УдалениеПомеченныхИспользование;
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаСерверовМетокВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДобавлятьМеткиВремениАвтоматическиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиСДатыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаАвтоматическаяОбработкаПодписейРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЭлектронныеПодписиНаСервереРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипПодписиКриптографииПоУмолчаниюРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура УсовершенствоватьПодписиАвтоматическиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
		МодульЭлектроннаяПодписьКлиент.ОткрытьОтчетПродлениеСрокаДействияЭлектронныхПодписей("ТребуетсяУсовершенствоватьПодписи")
	КонецЕсли;
	
КонецПроцедуры

// СППР

&НаКлиенте
Процедура ОсновнойКалендарьПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ШрифтФорматированногоТекстаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоИнтервалаРабочегоВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеИнтервалаРабочегоВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПутиКВерсиямПлатформыНаСервереПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПутиКВерсиямПлатформыНаСервере) Тогда
		
		ПутьКВерсиямПлатформыНаСервере =
			НачалоПутиКВерсиямПлатформыНаСервере + "%ВерсияПлатформы%" + ОкончаниеПутиКВерсиямПлатформыНаСервере;
			
		ОбновитьДоступныеВерсииПлатформы(ПутьКВерсиямПлатформыНаСервере);
	
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПутиКВерсиямПлатформыНаСервереПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПутиКВерсиямПлатформыНаСервере) Тогда
		
		ПутьКВерсиямПлатформыНаСервере =
			НачалоПутиКВерсиямПлатформыНаСервере + "%ВерсияПлатформы%" + ОкончаниеПутиКВерсиямПлатформыНаСервере;
			
		ОбновитьДоступныеВерсииПлатформы(ПутьКВерсиямПлатформыНаСервере);
	
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакиПолученияИнформацииОбОшибкахИзВнешнихИсточниковПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакиИдентификаторовОбращенийПоОшибкамПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСогласованиеРесурсовПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеТестированияПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	УстановитьВидимостьЭлементовНастроекУчетаВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСинхронизациюКалендарейПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВидДеятельностиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиДляСогласованияИзмененийМетаданныхВВеткахПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиДляРаботыСОшибкамиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиДляРаботыСОшибкамиАвтотестированияПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиДляРаботыСОшибкамиАудитаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПубликациюПатчейВСервисеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	Элементы.ГруппаНастройкаПубликации.Доступность = НаборКонстант.ИспользоватьПубликациюПатчейВСервисе;
КонецПроцедуры

&НаКлиенте
Процедура ДопустимыйИнтервалОкругленияВУчетеВремениПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПланированиеПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКонтрольОбъектовПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПриоритетыПриИзменении(Элемент)
	
	УправлениеДоступностьюПриоритетыОчереди(ЭтотОбъект);
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОчередиЗадачПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияМаксимальныйПорядокПриоритетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьМаксимальныйПорядокПриоритета" Тогда
		
		ОповещениеОбИзмененииМаксимальногоПорядокПриоритета = Новый ОписаниеОповещения("ПослеИзмененияМаксимальногоПорядкаПриоритета", ЭтотОбъект);
		ОткрытьФорму("Справочник.ПриоритетыРабот.Форма.ИзменениеМаксимальногоПорядкаПриоритета",, ЭтотОбъект, ,,,
		             ОповещениеОбИзмененииМаксимальногоПорядокПриоритета, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтслеживатьСостояниеПовторяемыхОшибокПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	ПриИзмененииФлагаОтслеживатьСостояниеПовторяемыхОшибокСервер();
	
КонецПроцедуры

// КОНЕЦ СППР

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользованиеПрофилейБезопасности(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежимеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВБезопасномРежимеКлиент");
		МодульРаботаВБезопасномРежимеКлиент.ОткрытьДиалогНастройкиИспользованияПрофилейБезопасности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизиты(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОткрытьСписокСвойств(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеСведения(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОткрытьСписокСвойств();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьХранениеИсторииИзменений(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		МодульВерсионированиеОбъектовКлиент.ПоказатьНастройку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолнотекстовыйПоиск(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		МодульПолнотекстовыйПоискКлиент.ПоказатьНастройку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегиональныеНастройки(Команда)
	
	ПараметрыФормы = Новый Структура("Источник", "ПанельАдминистрированияБСП");
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Мультиязычность") Тогда
		МодульМультиязычностьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МультиязычностьКлиент");
		МодульМультиязычностьКлиент.ОткрытьФормуРегиональныхНастроек(, ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьПомеченныеНаУдаление(Команда)
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов")) Тогда
		МодульУдалениеПомеченныхОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УдалениеПомеченныхОбъектовКлиент");
		МодульУдалениеПомеченныхОбъектовКлиент.ПерейтиКПомеченнымНаУдаление(ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	Если (ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.УдалениеПомеченныхОбъектов")) Тогда
		МодульУдалениеПомеченныхОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УдалениеПомеченныхОбъектовКлиент");
		МодульУдалениеПомеченныхОбъектовКлиент.НачатьИзменениеРасписанияРегламентногоЗадания();
	КонецЕсли;
КонецПроцедуры

// СППР

&НаКлиенте
Процедура НастройкаАдресатовУведомленийОСборках(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаАдресатовУведомленийОСборках",, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСервисПубликацииПатчей(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьСервисПубликацииПатчейЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкаПодключенияКСервисуПубликацииПатчей",,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОтключитьОбсуждения(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		
		МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
		
		Если МодульОбсужденияСлужебныйКлиент.Подключены() Тогда
			МодульОбсужденияСлужебныйКлиент.ПоказатьОтключение();
		Иначе 
			МодульОбсужденияСлужебныйКлиент.ПоказатьПодключение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбсужденияНастроитьИнтеграциюСВнешнимиСистемами(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
		МодульОбсужденияСлужебныйКлиент.ПоказатьНастройкуИнтеграцииСВнешнимиСистемами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРаписанияОтслеживанияСостоянияПовторяемыхОшибок(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеОтслеживанияСостоянияПовторяемыхОшибок);
	
	// открываем диалог для редактирования Расписания
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаРаписанияОтслеживанияСостоянияПовторяемыхОшибокЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

// КОНЕЦ СППР

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьОбработчикОжидания()
	
	УстановитьВидимостьНаКлиенте("");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбораПродолжение()
	
	АдресПубликацииИнформационнойНачалоВыбораЗавершение("АдресПубликацииИнформационнойБазыВИнтернете");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбораПродолжение()
	
	АдресПубликацииИнформационнойНачалоВыбораЗавершение("АдресПубликацииИнформационнойБазыВЛокальнойСети");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПубликацииИнформационнойНачалоВыбораЗавершение(ИмяРеквизита)
	
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		АдресПубликацииИнформационнойБазыНачалоВыбораНаСервере(ИмяРеквизита, СтрокаСоединенияИнформационнойБазы());
		Подключаемый_ПриИзмененииРеквизита(Элементы[ИмяРеквизита]);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось автоматически заполнить поле, т.к. клиентское приложение не подключено через веб-сервер.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АдресПубликацииИнформационнойБазыНачалоВыбораНаСервере(ИмяРеквизита, СтрокаСоединения)
	
	ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения);
	Если ПараметрыСоединения.Свойство("WS") Тогда
		НаборКонстант[ИмяРеквизита] = ПараметрыСоединения.WS;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	УстановитьВидимостьНаКлиенте(ИмяКонстанты);
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Программы" Тогда
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Программы");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПроверитьУстановкуПрограммКриптографии" Тогда
		
		ПараметрыПроверки = Новый Структура;
		ПараметрыПроверки.Вставить("УстанавливатьРасширение", Истина);
		ПараметрыПроверки.Вставить("УстанавливатьКомпоненту", Истина);
		ПараметрыПроверки.Вставить("ПредлагатьУстановитьПрограмму", Истина);
		МодульЭлектроннаяПодписьКлиент.ПроверитьУстановкуПрограммКриптографии(ЭтотОбъект, ПараметрыПроверки,
			Новый ОписаниеОповещения("ПослеПроверкиПрограммКриптографии", ЭтотОбъект));
		
	Иначе
		МодульЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования("Сертификаты");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// СППР
	
	Если РеквизитПутьКДанным = "ШрифтФорматированногоТекста" Тогда
		
		КонстантаМенеджер = Константы.ШрифтФорматированногоТекста;
		КонстантаМенеджер.Установить(Новый ХранилищеЗначения(ШрифтФорматированногоТекста));
		
		Возврат "";
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НачалоПутиКВерсиямПлатформыНаСервере"
		ИЛИ РеквизитПутьКДанным = "ОкончаниеПутиКВерсиямПлатформыНаСервере" Тогда
		
		ПутьКВерсиямПлатформыНаСервере =
			НачалоПутиКВерсиямПлатформыНаСервере + "%ВерсияПлатформы%" + ОкончаниеПутиКВерсиямПлатформыНаСервере;
			
		КонстантаМенеджер = Константы.ПутьКВерсиямПлатформыНаСервере;
		КонстантаМенеджер.Установить(ПутьКВерсиямПлатформыНаСервере);
		
		Возврат "";
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПриоритетыРабот"
		И Константы.ИспользоватьОчередиЗадач.Получить() Тогда
		
		Константы.ИспользоватьОчередиЗадач.Установить(Ложь);
		ЭтотОбъект.Прочитать();
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОчередиЗадач"
		И Константы.ИспользоватьОчередиЗадач.Получить() Тогда
		
		РегистрыСведений.ОчередиРаботСотрудников.СформироватьОчередьРаботСотрудниковВФоне(
			РегистрыСведений.ОчередиРаботСотрудников.НовыйПараметрыФормированияОчередиСотрудников());
		
	КонецЕсли;
	
	// Конец СППР
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КонстантаИмя = ЧастиИмени[1];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
	ИначеЕсли ЧастиИмени.Количество() = 1 И НРег(Лев(РеквизитПутьКДанным, 9)) = НРег("Константа") Тогда
		КонстантаИмя = Сред(РеквизитПутьКДанным, 10);
		КонстантаЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если Константы[КонстантаИмя].Получить() <> КонстантаЗначение Тогда
		Константы[КонстантаИмя].Установить(КонстантаЗначение);
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьДополнительныеРеквизитыИСведения" И КонстантаЗначение = Ложь Тогда
		ЭтотОбъект.Прочитать();
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		Элементы.ГруппаДополнительныеРеквизитыИлиСведения.Доступность =
			НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "ХранитьИсториюИзменений" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		
		Элементы.НастроитьХранениеИсторииИзменений.Доступность = ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		
		Элементы.НастроитьПолнотекстовыйПоиск.Доступность = ИспользоватьПолнотекстовыйПоиск;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодписьСлужебный = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьСлужебный");
		МодульЭлектроннаяПодписьСлужебный.НастроитьФормуОбщихНастроек(ЭтотОбъект, РеквизитПутьКДанным);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		ИспользуютсяПрофилиБезопасности = МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности();
	Иначе
		ИспользуютсяПрофилиБезопасности = Ложь;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		ДоступностьНастройкиПроксиНаСервере = Не ИспользуютсяПрофилиБезопасности;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаОткрытьПараметрыПроксиСервера",
			"Доступность", ДоступностьНастройкиПроксиНаСервере);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкаПроксиСервераНаСервереНедоступнаПриИспользованииПрофилейБезопасности",
			"Видимость", Не ДоступностьНастройкиПроксиНаСервере);
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЭлектронныеПодписи"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьШифрование"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСервисDSS"
		ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодписьСервисаDSS") Тогда
		
		ДоступностьОблачнойПодписи = (НаборКонстант.ИспользоватьЭлектронныеПодписи ИЛИ НаборКонстант.ИспользоватьШифрование)
			И (НаборКонстант.ИспользоватьСервисDSS);
			
		Элементы.ОбработкаУправлениеПодключениемDSSСерверыОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		Элементы.ОбработкаУправлениеПодключениемDSSУчетныеЗаписиОблачнойПодписи.Доступность = ДоступностьОблачнойПодписи;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНаКлиенте(ИмяКонстанты)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Если ИмяКонстанты = "ИспользоватьЭлектронныеПодписи"
			Или ИмяКонстанты = "ИспользоватьШифрование"
			Или ИмяКонстанты = "СоздаватьЭлектронныеПодписиНаСервере"
			Или ИмяКонстанты = "ПроверятьЭлектронныеПодписиНаСервере"
			Или ИмяКонстанты = "" Тогда
				
			МодульЭлектроннаяПодписьКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЭлектроннаяПодписьКлиент");
			
			Если Не МодульЭлектроннаяПодписьКлиент.СоздаватьЭлектронныеПодписиНаСервере()
				И Не МодульЭлектроннаяПодписьКлиент.ПроверятьЭлектронныеПодписиНаСервере()
				И (МодульЭлектроннаяПодписьКлиент.ИспользоватьЭлектронныеПодписи()
					Или МодульЭлектроннаяПодписьКлиент.ИспользоватьШифрование()) Тогда
				
				ПараметрыПроверки = Новый Структура;
				ПараметрыПроверки.Вставить("УстанавливатьРасширение", Ложь);
				ПараметрыПроверки.Вставить("УстанавливатьКомпоненту", Ложь);
				ПараметрыПроверки.Вставить("ПредлагатьУстановитьПрограмму", Ложь);
				
				МодульЭлектроннаяПодписьКлиент.ПроверитьУстановкуПрограммКриптографии(ЭтотОбъект, ПараметрыПроверки,
					Новый ОписаниеОповещения("ПослеПроверкиПрограммКриптографии", ЭтотОбъект));
			Иначе
				Элементы.ГруппаПодсказкаКриптопровайдеры.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПодсказкаКриптопровайдеры.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Программы.Количество() = 0 И Результат.ПрограммыНаСервере.Количество() = 0 Тогда
		Элементы.ГруппаПодсказкаКриптопровайдеры.Видимость = Истина;
	Иначе
		Элементы.ГруппаПодсказкаКриптопровайдеры.Видимость = Ложь;
	КонецЕсли;
	 
КонецПроцедуры

&НаСервере
Процедура НастройкиРазделаПроизводительность()
	
	МногопоточныеОперацииДоступны = Не (ОбщегоНазначения.ИнформационнаяБазаФайловая() Или ОбщегоНазначения.РазделениеВключено());
	
	Элементы.ГруппаПроизводительность.Видимость = МногопоточныеОперацииДоступны;
	Элементы.ГруппаВременныеКаталогиКластераСерверов.Видимость = МногопоточныеОперацииДоступны;
	
	Если МногопоточныеОперацииДоступны Тогда
		Если НаборКонстант.КоличествоПотоковДлительныхОпераций < 1 Или НаборКонстант.КоличествоПотоковДлительныхОпераций > 99 Тогда
			НаборКонстант.КоличествоПотоковДлительныхОпераций = 4;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СППР

&НаСервере
Процедура ОбновитьДоступныеВерсииПлатформы(ПутьКВерсиямПлатформыНаСервере)

	ДоступныеВерсииПлатформы = "";
	
	Для каждого ДоступнаяВерсия Из ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы(ПутьКВерсиямПлатформыНаСервере) Цикл
		
		Если НЕ ПустаяСтрока(ДоступныеВерсииПлатформы) Тогда
		
			ДоступныеВерсииПлатформы = ДоступныеВерсииПлатформы + "; ";
		
		КонецЕсли; 
		ДоступныеВерсииПлатформы = ДоступныеВерсииПлатформы + ДоступнаяВерсия;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УказатьСервисПубликацииПатчейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Элементы.ПатчиСтатус.Заголовок = НСтр("ru = 'Подключение к сервису публикации патчей настроено'");
		Элементы.НастроитьСервисПубликацииПатчей.Заголовок = НСтр("ru = 'Изменить'");
	Иначе
		Элементы.ПатчиСтатус.Заголовок = НСтр("ru = 'Подключение к сервису публикации патчей не настроено'");
		Элементы.НастроитьСервисПубликацииПатчей.Заголовок = НСтр("ru = 'Настроить'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовНастроекУчетаВремени()
	
	ИспользоватьУчетВремени = НаборКонстант.ИспользоватьУчетВремени;
	
	Элементы.ЕдиницаИзмеренияИнтервалаОкругленияВУчетеВремени.Видимость = ИспользоватьУчетВремени;
	Элементы.ПояснениеКИнтервалуОкругленияВремени.Видимость = ИспользоватьУчетВремени;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСостоянияПодключенияОбсуждений(ОбсужденияПодключены = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		
		Если ОбсужденияПодключены = Неопределено Тогда 
			МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
			ОбсужденияПодключены = МодульОбсужденияСлужебныйКлиент.Подключены();
		КонецЕсли;
		
		Если ОбсужденияПодключены Тогда 
			Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("ru = 'Отключить'");
			Элементы.СостояниеПодключенияОбсуждений.Заголовок = НСтр("ru = 'Обсуждения подключены.'");
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
				"ОбсужденияНастроитьИнтеграциюСВнешнимиСистемами",
				"Доступность",
				Истина);
		Иначе 
			Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("ru = 'Подключить'");
			Элементы.СостояниеПодключенияОбсуждений.Заголовок = НСтр("ru = 'Подключение обсуждений не выполнено.'");
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, 
				"ОбсужденияНастроитьИнтеграциюСВнешнимиСистемами",
				"Доступность",
				Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРаписанияОтслеживанияСостоянияПовторяемыхОшибокЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		РасписаниеОтслеживанияСостоянияПовторяемыхОшибок = Расписание;
	КонецЕсли;
	
	ЗаписатьРасписаниеОтслеживанияСостоянияПовторяемыхОшибок(РасписаниеОтслеживанияСостоянияПовторяемыхОшибок);
	ОбновитьПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок(Элементы, РасписаниеОтслеживанияСостоянияПовторяемыхОшибок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок(Элементы, РасписаниеОтслеживанияСостоянияПовторяемыхОшибок)
	
	ПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок = Строка(РасписаниеОтслеживанияСостоянияПовторяемыхОшибок);
	
	Если ПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок = Строка(Новый РасписаниеРегламентногоЗадания)
		ИЛИ РасписаниеОтслеживанияСостоянияПовторяемыхОшибок = Неопределено Тогда
		ПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок = НСтр("ru = 'Настроить расписание обработки ошибок'");
	КонецЕсли;
	
	Элементы.НастройкаРасписанияОтслеживанияСостоянияПовторяемыхОшибок.Заголовок =
		ПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФлагаОтслеживатьСостояниеПовторяемыхОшибокСервер()
	
	РасписаниеОтслеживанияСостоянияПовторяемыхОшибок =
		РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработкаОшибокОжидающихИсправленияПовторяемых).Расписание;
		
	ЗаписатьРасписаниеОтслеживанияСостоянияПовторяемыхОшибок(РасписаниеОтслеживанияСостоянияПовторяемыхОшибок);
	
	ОбновитьПредставлениеРасписанияОтслеживанияСостоянияПовторяемыхОшибок(Элементы, РасписаниеОтслеживанияСостоянияПовторяемыхОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРасписаниеОтслеживанияСостоянияПовторяемыхОшибок(Расписание)
	
	РегламентноеЗаданиеОтслеживания =
		РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработкаОшибокОжидающихИсправленияПовторяемых);
	
	ИспользоватьЗадание = Константы.ОтслеживатьСостояниеПовторяемыхОшибок.Получить();
	
	РегламентноеЗаданиеОтслеживания.Использование = ИспользоватьЗадание;
	
	Если ИспользоватьЗадание Тогда
		РегламентноеЗаданиеОтслеживания.Расписание = Расписание;
	Иначе
		РегламентноеЗаданиеОтслеживания.Расписание = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	РегламентноеЗаданиеОтслеживания.Записать();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПриоритетыОчереди(Форма)

	ЭлементыФормы = Форма.Элементы;
	
	Если Форма.НаборКонстант.ИспользоватьПриоритетыРабот Тогда
		
		ЭлементыФормы.ДекорацияМаксимальныйПорядокПриоритета.Видимость = Истина;
		ЭлементыФормы.ИспользоватьОчередиЗадач.Доступность             = Истина;
		ЭлементыФормы.ГруппаПриоритетыНеВключены.Видимость             = Ложь;
		ЭлементыФормы.ИспользоватьОчередиЗадач.ОтображениеПодсказки    = ОтображениеПодсказки.ОтображатьСнизу;
		
	Иначе
		
		ЭлементыФормы.ДекорацияМаксимальныйПорядокПриоритета.Видимость = Ложь;
		ЭлементыФормы.ИспользоватьОчередиЗадач.Доступность             = Ложь;
		ЭлементыФормы.ГруппаПриоритетыНеВключены.Видимость             = Истина;
		ЭлементыФормы.ИспользоватьОчередиЗадач.ОтображениеПодсказки    = ОтображениеПодсказки.Нет;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьТекстМаксимальныйПорядокПриоритетаРаботы()
	
	Если ПравоДоступа("Изменение", Метаданные.Константы.МаксимальныйПорядокПриоритетаРаботы) Тогда
		
		ТекстЗаголовка = СтроковыеФункции.ФорматированнаяСтрока("<span style=""color: ЦветОписанийГиперссылок"">%1 - <b>%2</b>,</span> <a href=""%3"">%4</a>",
		                                                        НСтр("ru = 'Максимальный возможный порядок приоритета'"),
		                                                        Строка(НаборКонстант.МаксимальныйПорядокПриоритетаРаботы),
		                                                        "ИзменитьМаксимальныйПорядокПриоритета",
		                                                        НСтр("ru = 'изменить'"));
		
	Иначе
		
		ТекстЗаголовка = СтроковыеФункции.ФорматированнаяСтрока("<span style=""color: ЦветОписанийГиперссылок"">%1 - <b>%2</b></span>",
		                                                        НСтр("ru = 'Максимальный возможный порядок приоритета'"),
		                                                        Строка(НаборКонстант.МаксимальныйПорядокПриоритетаРаботы));
		
	КонецЕсли;
	
	Элементы.ДекорацияМаксимальныйПорядокПриоритета.Заголовок = ТекстЗаголовка;

КонецПроцедуры 

&НаКлиенте
Процедура ПослеИзмененияМаксимальногоПорядкаПриоритета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат = Истина Тогда
		ПриИзмененииМаксимальногоПорядкаПриоритета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаксимальногоПорядкаПриоритета()

	ЭтотОбъект.Прочитать();
	СформироватьТекстМаксимальныйПорядокПриоритетаРаботы();

КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияПроверкаУстановкиКриптопровайдераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработкаНавигационнойСсылкиОткрытиеНастроекЭП(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		
КонецПроцедуры

// Конец СППР

#КонецОбласти