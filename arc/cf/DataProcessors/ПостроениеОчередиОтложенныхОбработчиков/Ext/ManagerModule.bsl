
#Область ПрограммныйИнтерфейс

// Возвращает признак того - осуществлено ли выполнение построения очереди отложенных обработчиков обновления 
// информационной базы, включенных в подсистемы текущего проекта и библиотеки стандартных подсистем, поддерживающих 
// режим параллельного обновления обработчиков обновления.
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - проект.
//	Версия - СправочникСсылка.ВерсииПроекта - версия проекта.
//
// Возвращаемое значение:
//	Булево - Истина - признак того, что успешно осуществлено построение очереди отложенных обработчиков обновления 
//		информационной базы, Ложь - нет.
//
Функция ПостроитьОчередьОбработчиковОбновления(Проект, Версия) Экспорт
	
	БиблиотекиМассивом = РаботаСОбъектамиМетаданных.ОбрабатываемыеБиблиотекиОбработчиковОбновления(Проект, Истина);
	
	ВсеХорошо = МожноСтроитьОчередь(Проект, Версия);
	
	Если Не ВсеХорошо Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Обработчик КАК Обработчик,
	|	ВложенныйЗапрос.СборкаЧислом КАК СборкаЧислом,
	|	ВложенныйЗапрос.Процедура КАК Процедура,
	|	СУММА(ВложенныйЗапрос.КоличествоПересечений) КАК КоличествоПересечений,
	|	СУММА(ВложенныйЗапрос.КоличествоСначалаОбработчик1) КАК КоличествоСначалаОбработчик1,
	|	СУММА(ВложенныйЗапрос.ВсеРавноВКакойПоследовательности) КАК ВсеРавноВКакойПоследовательности
	|ПОМЕСТИТЬ Обработчики
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбработчикиОбновления.Ссылка КАК Обработчик,
	|		ОбработчикиОбновления.СборкаЧислом КАК СборкаЧислом,
	|		ОбработчикиОбновления.Процедура КАК Процедура,
	|		0 КАК КоличествоПересечений,
	|		0 КАК КоличествоСначалаОбработчик1,
	|		0 КАК ВсеРавноВКакойПоследовательности
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновления
	|	ГДЕ
	|		ОбработчикиОбновления.Владелец = &Проект
	|		И ОбработчикиОбновления.Версия = &Версия
	|		И ОбработчикиОбновления.Библиотека В(&Библиотеки)
	|		И ОбработчикиОбновления.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|		И НЕ ОбработчикиОбновления.ПометкаУдаления
	|		И НЕ ОбработчикиОбновления.МонопольныйРежимОправдан
	|		И НЕ ОбработчикиОбновления.НачальноеЗаполнение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПриоритетыВыполнения.Обработчик1,
	|		ПриоритетыВыполнения.Обработчик1.СборкаЧислом,
	|		ПриоритетыВыполнения.Обработчик1.Процедура,
	|		1,
	|		ВЫБОР
	|			КОГДА ПриоритетыВыполнения.ПорядокПомещенияВОчередь = ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ПриоритетыВыполнения.ПорядокПомещенияВОчередь = ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.ВсеРавноВКакойПоследовательности)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполнения
	|	ГДЕ
	|		ПриоритетыВыполнения.Обработчик1.Владелец = &Проект
	|		И ПриоритетыВыполнения.Обработчик1.Версия = &Версия
	|		И ПриоритетыВыполнения.Обработчик1.Библиотека В(&Библиотеки)
	|		И ПриоритетыВыполнения.Обработчик1.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|		И НЕ ПриоритетыВыполнения.Обработчик1.ПометкаУдаления
	|		И НЕ ПриоритетыВыполнения.Обработчик1.НачальноеЗаполнение
	|		И НЕ ПриоритетыВыполнения.Обработчик1.МонопольныйРежимОправдан
	|		И ПриоритетыВыполнения.Обработчик2.Владелец = &Проект
	|		И ПриоритетыВыполнения.Обработчик2.Версия = &Версия
	|		И ПриоритетыВыполнения.Обработчик2.Библиотека В(&Библиотеки)
	|		И ПриоритетыВыполнения.Обработчик2.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|		И НЕ ПриоритетыВыполнения.Обработчик2.ПометкаУдаления
	|		И НЕ ПриоритетыВыполнения.Обработчик2.НачальноеЗаполнение
	|		И НЕ ПриоритетыВыполнения.Обработчик2.МонопольныйРежимОправдан) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Обработчик,
	|	ВложенныйЗапрос.Процедура,
	|	ВложенныйЗапрос.СборкаЧислом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроблемыОбработчиков.ОбработчикПисатель КАК Обработчик1,
	|	ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель КАК Обработчик2,
	|	МАКСИМУМ(ПроблемыОбработчиков.ПовторнаяЗаписьОбъекта) КАК ПовторнаяЗаписьОбъекта
	|ПОМЕСТИТЬ ПовторнаяЗапись
	|ИЗ
	|	РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК ПроблемыОбработчиков
	|ГДЕ
	|	ПроблемыОбработчиков.ОбработчикПисатель.Владелец = &Проект
	|	И ПроблемыОбработчиков.ОбработчикПисатель.Версия = &Версия
	|	И НЕ ПроблемыОбработчиков.ОбработчикПисатель.МонопольныйРежимОправдан
	|	И ПроблемыОбработчиков.ОбработчикПисатель.Библиотека В(&Библиотеки)
	|	И ПроблемыОбработчиков.ОбработчикПисатель.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ПроблемыОбработчиков.ОбработчикПисатель.ПометкаУдаления
	|	И НЕ ПроблемыОбработчиков.ОбработчикПисатель.НачальноеЗаполнение
	|	И ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель.Владелец = &Проект
	|	И ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель.Версия = &Версия
	|	И НЕ ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель.МонопольныйРежимОправдан
	|	И ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель.Библиотека В(&Библиотеки)
	|	И ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель.ПометкаУдаления
	|	И НЕ ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель.НачальноеЗаполнение
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроблемыОбработчиков.ОбработчикПисатель,
	|	ПроблемыОбработчиков.ОбработчикЧитательИлиПисатель
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ПроблемыОбработчиков.ПовторнаяЗаписьОбъекта) = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработчики.Обработчик КАК Обработчик,
	|	Обработчики.СборкаЧислом КАК СборкаЧислом,
	|	Обработчики.Процедура КАК Процедура,
	|	Обработчики.КоличествоПересечений <> 0 КАК ЕстьПересечения,
	|	Обработчики.КоличествоСначалаОбработчик1 КАК СначалаОбработчик1,
	|	Обработчики.ВсеРавноВКакойПоследовательности КАК ЛюбойПорядок,
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.СборкаЧислом КАК СвязаннаяСборкаЧислом,
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 КАК СвязанныйОбработчик,
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.Процедура КАК СвязаннаяПроцедура,
	|	ПриоритетыВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь КАК ПорядокПомещенияВОчередь,
	|	ЕСТЬNULL(ПовторнаяЗапись.ПовторнаяЗаписьОбъекта, ЛОЖЬ) КАК ПовторнаяЗаписьОбъекта
	|ИЗ
	|	Обработчики КАК Обработчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполненияОбработчиковОбновления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПовторнаяЗапись КАК ПовторнаяЗапись
	|			ПО ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 = ПовторнаяЗапись.Обработчик1
	|				И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 = ПовторнаяЗапись.Обработчик2
	|		ПО Обработчики.Обработчик = ПриоритетыВыполненияОбработчиковОбновления.Обработчик1
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.Владелец = &Проект)
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.Версия = &Версия)
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.Библиотека В (&Библиотеки))
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно)
	|			И (НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.ПометкаУдаления)
	|			И (НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.НачальноеЗаполнение)
	|			И (НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.МонопольныйРежимОправдан)
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.Владелец = &Проект)
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.Версия = &Версия)
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.Библиотека В (&Библиотеки))
	|			И (ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно)
	|			И (НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.ПометкаУдаления)
	|			И (НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.НачальноеЗаполнение)
	|			И (НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.МонопольныйРежимОправдан)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕстьПересечения,
	|	Обработчики.КоличествоСначалаОбработчик1 УБЫВ,
	|	Обработчики.ВсеРавноВКакойПоследовательности УБЫВ,
	|	СборкаЧислом,
	|	Процедура,
	|	СвязаннаяСборкаЧислом,
	|	СвязаннаяПроцедура
	|ИТОГИ
	|	МАКСИМУМ(ЕстьПересечения)
	|ПО
	|	Обработчик";	
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотеки", БиблиотекиМассивом);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	ОчередьОбработчиков = Новый Соответствие;
	НаличиеОбработчиковВОчереди = Новый Соответствие;
	МаксимальнаяОчередь = 1;
	
	ВыборкаПоДобавляемымОбработчикам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДобавляемымОбработчикам.Следующий() Цикл
		
		ДобавляемыйОбработчик = ВыборкаПоДобавляемымОбработчикам.Обработчик;
		
		ОписаниеОбработчика = Новый Структура;
		ОписаниеОбработчика.Вставить("Очередь",1);
		ОписаниеОбработчика.Вставить("СвязанныеОбработчики", Новый Соответствие);
		
		ОчередьОбработчиков.Вставить(ДобавляемыйОбработчик, ОписаниеОбработчика);
		
		ДобавитьОбработчикВНаличияВОчереди(НаличиеОбработчиковВОчереди, 1, ДобавляемыйОбработчик, МаксимальнаяОчередь);
		
		Если Не ВыборкаПоДобавляемымОбработчикам.ЕстьПересечения Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоСвязаннымОбработчикам = ВыборкаПоДобавляемымОбработчикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСвязаннымОбработчикам.Следующий() Цикл
			
			СвязанныйОбработчик = ВыборкаПоСвязаннымОбработчикам.СвязанныйОбработчик;
			
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ПорядокПомещенияВОчередь", ВыборкаПоСвязаннымОбработчикам.ПорядокПомещенияВОчередь);
			ОписаниеСвязи.Вставить("ПовторнаяЗаписьОбъекта", ВыборкаПоСвязаннымОбработчикам.ПовторнаяЗаписьОбъекта);
			
			ОчередьОбработчиков[ДобавляемыйОбработчик].СвязанныеОбработчики.Вставить(СвязанныйОбработчик, ОписаниеСвязи); 
			
		КонецЦикла;
		
		СдвинутьРекуссивноСвязанныеОбработчики(ОчередьОбработчиков, НаличиеОбработчиковВОчереди, ДобавляемыйОбработчик, МаксимальнаяОчередь);
		
	КонецЦикла;
	
	//Уберем пропуски в номерах очередей, которые могли появится из-за рекурсивных переносов
	ИзменениеНомера = 0;
	
	Для НомерОчереди = 1 По МаксимальнаяОчередь Цикл
		
		Если НаличиеОбработчиковВОчереди.Получить(НомерОчереди) = Неопределено
			Или НаличиеОбработчиковВОчереди[НомерОчереди].Количество() = 0 Тогда
			ИзменениеНомера = ИзменениеНомера + 1;
		Иначе 
			Для Каждого Обработчик из НаличиеОбработчиковВОчереди[НомерОчереди] Цикл
				
				НовыйНомерОчереди = ОчередьОбработчиков[Обработчик.Ключ].Очередь - ИзменениеНомера;
				
				ОбработчикОбъект = Обработчик.Ключ.ПолучитьОбъект();
				
				Если ОбработчикОбъект.ОчередьОтложеннойОбработкиУстановлено <> НовыйНомерОчереди Тогда
					ОбработчикОбъект.ОчередьОтложеннойОбработкиУстановлено = НовыйНомерОчереди;
					ОбработчикОбъект.ОбменДанными.Загрузка = Истина;
					ОбработчикОбъект.Записать();
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсеХорошо = Не ЕстьОшибкиВПостроенииОчереди(Проект, Версия);
	
	Возврат ВсеХорошо;
	
КонецФункции

// Возвращает признак того - соблюдены ли все условия для построения очереди отложенных обработчиков обновления 
// информационной базы.
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - проект,
//	Версия - СправочникСсылка.ВерсииПроекта - версия проекта.
//
// Возвращаемое значение:
//	Булево - Истина - признак того, что можно осуществлять построение очереди отложенных обработчиков обновления 
//		информационной базы, Ложь - нет.
//
Функция МожноСтроитьОчередь(Проект, Версия) Экспорт
	Библиотеки = РаботаСОбъектамиМетаданных.ОбрабатываемыеБиблиотекиОбработчиковОбновления(Проект, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбновленияИнформационнойБазы.Ссылка КАК Обработчик,
	|	ЕСТЬNULL(ПриоритетыВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь, ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)) КАК ПорядокПомещенияВОчередь,
	|	ЕСТЬNULL(ПриоритетыВыполненияОбработчиковОбновления.Обработчик2, ЗНАЧЕНИЕ(Справочник.ОбработчикиОбновленияИнформационнойБазы.ПустаяСсылка)) КАК СвязанныйОбработчик,
	|	ОбработчикиОбновленияИнформационнойБазы.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено КАК ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено,
	|	ОбработчикиОбновленияИнформационнойБазы.РежимВыполнения КАК РежимВыполнения,
	|	ОбработчикиОбновленияИнформационнойБазы.МонопольныйРежимОправдан КАК МонопольныйРежимОправдан
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновленияИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполненияОбработчиковОбновления
	|		ПО ОбработчикиОбновленияИнформационнойБазы.Ссылка = ПриоритетыВыполненияОбработчиковОбновления.Обработчик1
	|ГДЕ
	|	ОбработчикиОбновленияИнформационнойБазы.Владелец = &Проект
	|	И ОбработчикиОбновленияИнформационнойБазы.Версия = &Версия
	|	И ОбработчикиОбновленияИнформационнойБазы.Библиотека В(&Библиотеки)
	|	И ОбработчикиОбновленияИнформационнойБазы.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ОбработчикиОбновленияИнформационнойБазы.ПометкаУдаления
	|	И НЕ ОбработчикиОбновленияИнформационнойБазы.НачальноеЗаполнение
	|	И ((ПриоритетыВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь В (ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ), ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики)))
	|			ИЛИ ОбработчикиОбновленияИнформационнойБазы.РежимВыполнения = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОбработчиковОбновления.Монопольно)
	|				И НЕ ОбработчикиОбновленияИнформационнойБазы.МонопольныйРежимОправдан
	|			ИЛИ НЕ ОбработчикиОбновленияИнформационнойБазы.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикиОбновленияИнформационнойБазы.Ответственный.Наименование,
	|	ОбработчикиОбновленияИнформационнойБазы.Наименование
	|ИТОГИ ПО
	|	Обработчик";
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотеки", Библиотеки);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсеХорошо = Истина;
	
	Пока Выборка.Следующий() Цикл
		ВсеХорошо = Ложь;
		
		Если Выборка.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно
			И Не Выборка.МонопольныйРежимОправдан Тогда
			
			ТекстСообщения = НСтр("ru = 'Обработчик %Обработчик% не оправдано сделан монопольным. Необходимо сначала переделать обработчик на отложенный.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", Выборка.Обработчик);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если Не Выборка.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено Тогда
			
			ТекстСообщения = НСтр("ru = 'По обработчику %Обработчик% не завершено заполнение информации о читаемых и изменяемых данных.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", Выборка.Обработчик);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		Если Выборка.ПорядокПомещенияВОчередь <> Перечисления.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы Тогда
			
			ТекстСообщения = НСтр("ru = 'Не завершены работы по паре обработчиков %Обработчик% - %СвязанныйОбработчик%. Статус проблемы: %ПорядокПомещенияВОчередь%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик%", Выборка.Обработчик);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СвязанныйОбработчик%", Выборка.СвязанныйОбработчик);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПорядокПомещенияВОчередь%", Выборка.ПорядокПомещенияВОчередь);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсеХорошо;
КонецФункции

// Возвращает признак того - обнаружены ли ошибки при построении очереди отложенных обработчиков обновления 
// информационной базы.
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - проект,
//	Версия - СправочникСсылка.ВерсииПроекта - версия проекта.
//	СообщатьОбОшибках - Булево, Истина - признак того, что требуется сообщать о выявляемых ошибках.
//
// Возвращаемое значение:
//	Булево - Истина - признак того, что можно осуществлять построение очереди отложенных обработчиков обновления 
//		информационной базы, Ложь - нет.
//
Функция ЕстьОшибкиВПостроенииОчереди(Проект, Версия, СообщатьОбОшибках = Истина) Экспорт
	Библиотеки = РаботаСОбъектамиМетаданных.ОбрабатываемыеБиблиотекиОбработчиковОбновления(Проект, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель КАК Обработчик1,
	|	ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель КАК Обработчик2
	|ПОМЕСТИТЬ ПовторнаяЗапись
	|ИЗ
	|	РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК ПроблемыОбработчиковОбновленияИнформационнойБазы
	|ГДЕ
	|	ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель.Владелец = &Проект
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель.Версия = &Версия
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель.Библиотека В(&Библиотеки)
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель.ПометкаУдаления
	|	И НЕ ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель.НачальноеЗаполнение
	|	И НЕ ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель.МонопольныйРежимОправдан
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель.Владелец = &Проект
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель.Версия = &Версия
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель.Библиотека В(&Библиотеки)
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель.ПометкаУдаления
	|	И НЕ ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель.НачальноеЗаполнение
	|	И НЕ ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель.МонопольныйРежимОправдан
	|	И ПроблемыОбработчиковОбновленияИнформационнойБазы.ПовторнаяЗаписьОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик1,
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик2,
	|	""ПроблемаВПорядкеСледованияОбработчиков"" КАК Проблема
	|ИЗ
	|	РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполненияОбработчиковОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПовторнаяЗапись КАК ПовторнаяЗапись
	|		ПО ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 = ПовторнаяЗапись.Обработчик1
	|			И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 = ПовторнаяЗапись.Обработчик2
	|ГДЕ
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.Владелец = &Проект
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.Версия = &Версия
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.Библиотека В(&Библиотеки)
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.ПометкаУдаления
	|	И НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.НачальноеЗаполнение
	|	И НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.МонопольныйРежимОправдан
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.Владелец = &Проект
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.Версия = &Версия
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.Библиотека В(&Библиотеки)
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.ПометкаУдаления
	|	И НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.НачальноеЗаполнение
	|	И НЕ ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.МонопольныйРежимОправдан
	|	И (ПриоритетыВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь = ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1)
	|				И ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.ОчередьОтложеннойОбработкиУстановлено >= ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.ОчередьОтложеннойОбработкиУстановлено
	|			ИЛИ ПриоритетыВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь = ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.ВсеРавноВКакойПоследовательности)
	|				И НЕ ПовторнаяЗапись.Обработчик1 ЕСТЬ NULL 
	|				И ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.ОчередьОтложеннойОбработкиУстановлено = ПриоритетыВыполненияОбработчиковОбновления.Обработчик2.ОчередьОтложеннойОбработкиУстановлено)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбработчикиОбновленияИнформационнойБазы.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.ОбработчикиОбновленияИнформационнойБазы.ПустаяСсылка),
	|	""ПроблемаНеПерваяОчередь""
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновленияИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполненияОбработчиковОбновления
	|		ПО ОбработчикиОбновленияИнформационнойБазы.Ссылка = ПриоритетыВыполненияОбработчиковОбновления.Обработчик1
	|ГДЕ
	|	ОбработчикиОбновленияИнформационнойБазы.Владелец = &Проект
	|	И ОбработчикиОбновленияИнформационнойБазы.Версия = &Версия
	|	И ОбработчикиОбновленияИнформационнойБазы.Библиотека В(&Библиотеки)
	|	И ОбработчикиОбновленияИнформационнойБазы.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И НЕ ОбработчикиОбновленияИнформационнойБазы.ПометкаУдаления
	|	И ОбработчикиОбновленияИнформационнойБазы.РежимВыполнения = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОбработчиковОбновления.Отложенно)
	|	И ОбработчикиОбновленияИнформационнойБазы.ОчередьОтложеннойОбработкиУстановлено <> 1
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 ЕСТЬ NULL "; 
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотеки", Библиотеки);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьПроблема = Ложь;
	
	Если СообщатьОбОшибках Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
	
		Пока Выборка.Следующий() Цикл
			ЕстьПроблема = Истина;
			
			Если Выборка.Проблема = "ПроблемаВПорядкеСледованияОбработчиков" Тогда
				
				ТекстСообщения = НСтр("ru = 'Ошибка в алгоритме построения очереди: обработчики %Обработчик1% и %Обработчик2% размещены в неправильном порядке.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик1%", Выборка.Обработчик1);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик2%", Выборка.Обработчик2);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Ошибка в алгоритме построения очереди: обработчик %Обработчик1% должен быть отнесен к очереди 1.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обработчик1%", Выборка.Обработчик1);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			ЕстьПроблема = Истина;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат ЕстьПроблема;
	
КонецФункции

// Возвращает структуру, значением которой является текст кода процедуры обработчиков обновления
// ПриДобавленииОбработчиковОбновления() или ПриФормированииОчередейОтложенныхОбработчиков().
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - проект,
//	Версия - СправочникСсылка.ВерсииПроекта - версия проекта.
//
// Возвращаемое значение:
//	КодОбработчиков - Структура - текст кода процедуры обработчиков обновления
//		* ИмяБиблиотеки - Строка - текст кода процедуры обработчиков обновления.
//
Функция КодОбработчиковПриДобавленииОбработчиковОбновления(Проект, Версия, ТолькоСписокМодулей = Ложь) Экспорт
	
	КодОбработчиков = Новый Структура;
	
	Библиотеки = РаботаСОбъектамиМетаданных.ОбрабатываемыеБиблиотекиОбработчиковОбновления(Проект, Истина);
	НеразрабатываемыеБиблиотеки = БиблиотекиНеразрабатываемыеВТекущемПроекте(Проект);
	ПоддерживаетсяРасширенноеОписаниеОбработчиков = Справочники.ВерсииПроекта.ПоддерживаетсяРасширенноеОписаниеОбработчиков(Версия);
	
	ИнформацияПоБиблиотекам = Новый Соответствие;
	
	Для Каждого Библиотека из Библиотеки Цикл
		
		Если НеразрабатываемыеБиблиотеки.Найти(Библиотека) = Неопределено Тогда
			ИнформацияПоБиблиотеке = ИнформацияПоБиблиотеке(Проект, Библиотека);
			
			ИнформацияПоБиблиотекам.Вставить(Библиотека, ИнформацияПоБиблиотеке);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Библиотека из ИнформацияПоБиблиотекам Цикл
		Если Не ТолькоСписокМодулей Тогда
			ТекстОбработчика = КодОбработчикаПриДобавленииОбработчиковОбновления(Проект, Версия, Библиотека.Ключ, ИнформацияПоБиблиотекам,
											ПоддерживаетсяРасширенноеОписаниеОбработчиков);
			
			КодОбработчиков.Вставить(ИнформацияПоБиблиотекам[Библиотека.Ключ].ОбщийМодуль, ТекстОбработчика);
		Иначе	
			КодОбработчиков.Вставить(ИнформацияПоБиблиотекам[Библиотека.Ключ].ОбщийМодуль, "");
		КонецЕсли
	КонецЦикла;
	
	Если ПоддерживаетсяРасширенноеОписаниеОбработчиков Тогда
		Если Не ТолькоСписокМодулей Тогда										
			ТекстОбработчика = КодОбработчикаПриФормированииОчередейОтложенныхОбработчиков(Проект, Версия, НеразрабатываемыеБиблиотеки);
			КодОбработчиков.Вставить("ОбновлениеИнформационнойБазыПереопределяемый", ТекстОбработчика);
		Иначе	
			КодОбработчиков.Вставить("ОбновлениеИнформационнойБазыПереопределяемый", "");
		КонецЕсли
	КонецЕсли;
	
	Возврат КодОбработчиков;
	
КонецФункции

// Возвращает значение количества обработчиков обновления информационной базы, у котороых осуществлено заполнение 
// реквизита "ПроцедураПроверки".
//
// Параметры:
//	Проект - СправочникСсылка.Проекты - проект,
//	Версия - СправочникСсылка.ВерсииПроекта - версия проекта.
//
// Возвращаемое значение:
//	Число - количество обработчиков обновления информационной базы, у которых осуществлено заполнение 
//		реквизита "ПроцедураПроверки".
//
Функция ЗаполнитьПроцедуруПроверки(Проект, Версия) Экспорт
	Библиотеки = РаботаСОбъектамиМетаданных.ОбрабатываемыеБиблиотекиОбработчиковОбновления(Проект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ОбработчикОбновления КАК ОбработчикОбновления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИзменяемыеДанные.Ссылка КАК ОбработчикОбновления,
	|		0 КАК Контроль
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ИзменяемыеДанные
	|	ГДЕ
	|		ИзменяемыеДанные.Ссылка.Владелец = &Проект
	|		И ИзменяемыеДанные.Ссылка.Библиотека В (&Библиотеки)
	|		И НЕ ИзменяемыеДанные.Ссылка.ПометкаУдаления
	|		И НЕ ИзменяемыеДанные.Ссылка.НачальноеЗаполнение
	|		И ИзменяемыеДанные.БлокироватьИнтерфейс
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧитаемыеДанные.Ссылка,
	|		-1
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ЧитаемыеДанные КАК ЧитаемыеДанные
	|	ГДЕ
	|		ЧитаемыеДанные.Ссылка.Владелец = &Проект
	|		И ЧитаемыеДанные.Ссылка.Библиотека В (&Библиотеки)
	|		И НЕ ЧитаемыеДанные.Ссылка.ПометкаУдаления
	|		И НЕ ЧитаемыеДанные.Ссылка.НачальноеЗаполнение
	|		И ЧитаемыеДанные.БлокироватьИнтерфейс) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОбработчикОбновления
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Контроль) = 0";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотеки", Библиотеки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Счетчик = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ОбработчикОбновленияОбъект = Выборка.ОбработчикОбновления.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ОбработчикОбновленияОбъект.ПроцедураПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработчикОбновленияОбъект.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
		
		ОбработчикОбновленияОбъект.Записать();
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат Счетчик;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СдвинутьРекуссивноСвязанныеОбработчики(ОчередьОбработчиков, НаличиеОбработчиковВОчереди, Обработчик, МаксимальнаяОчередь)
	
	СвязанныеОбработчики = ОчередьОбработчиков[Обработчик].СвязанныеОбработчики;
	
	Для каждого СвязанныйОбработчик из СвязанныеОбработчики Цикл
		
		Если ОчередьОбработчиков.Получить(СвязанныйОбработчик.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СвязанныйОбработчик.Значение.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.ВсеРавноВКакойПоследовательности Тогда
			
			Если СвязанныйОбработчик.Значение.ПовторнаяЗаписьОбъекта
				И ОчередьОбработчиков[Обработчик].Очередь = ОчередьОбработчиков[СвязанныйОбработчик.Ключ].Очередь Тогда
				
				УдалитьОбработчикИзНаличияВОчереди(НаличиеОбработчиковВОчереди, ОчередьОбработчиков[Обработчик].Очередь, Обработчик);
				ОчередьОбработчиков[Обработчик].Очередь = ОчередьОбработчиков[Обработчик].Очередь + 1;
				ДобавитьОбработчикВНаличияВОчереди(НаличиеОбработчиковВОчереди, ОчередьОбработчиков[Обработчик].Очередь, Обработчик, МаксимальнаяОчередь);

				//Сдвинуть уже отработанные связанные обработчики
				СдвинутьРекуссивноСвязанныеОбработчики(ОчередьОбработчиков, НаличиеОбработчиковВОчереди, Обработчик, МаксимальнаяОчередь);
			КонецЕсли;
			
		ИначеЕсли СвязанныйОбработчик.Значение.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1 Тогда
			
			Если ОчередьОбработчиков[Обработчик].Очередь >= ОчередьОбработчиков[СвязанныйОбработчик.Ключ].Очередь Тогда
				
				УдалитьОбработчикИзНаличияВОчереди(НаличиеОбработчиковВОчереди, ОчередьОбработчиков[СвязанныйОбработчик.Ключ].Очередь, СвязанныйОбработчик.Ключ);
				ОчередьОбработчиков[СвязанныйОбработчик.Ключ].Очередь = ОчередьОбработчиков[Обработчик].Очередь + 1;
				ДобавитьОбработчикВНаличияВОчереди(НаличиеОбработчиковВОчереди, ОчередьОбработчиков[СвязанныйОбработчик.Ключ].Очередь, СвязанныйОбработчик.Ключ, МаксимальнаяОчередь);
				
				//Сдвинуть связанные обработчики связанного обработчика
				СдвинутьРекуссивноСвязанныеОбработчики(ОчередьОбработчиков, НаличиеОбработчиковВОчереди, СвязанныйОбработчик.Ключ, МаксимальнаяОчередь);
			КонецЕсли;
			
		ИначеЕсли СвязанныйОбработчик.Значение.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2 Тогда
			
			Если ОчередьОбработчиков[СвязанныйОбработчик.Ключ].Очередь >= ОчередьОбработчиков[Обработчик].Очередь Тогда
				
				УдалитьОбработчикИзНаличияВОчереди(НаличиеОбработчиковВОчереди, ОчередьОбработчиков[Обработчик].Очередь, Обработчик);
				ОчередьОбработчиков[Обработчик].Очередь = ОчередьОбработчиков[СвязанныйОбработчик.Ключ].Очередь + 1;
				ДобавитьОбработчикВНаличияВОчереди(НаличиеОбработчиковВОчереди, ОчередьОбработчиков[Обработчик].Очередь, Обработчик, МаксимальнаяОчередь);
				
				//Сдвинуть уже отработанные связанные обработчики
				СдвинутьРекуссивноСвязанныеОбработчики(ОчередьОбработчиков, НаличиеОбработчиковВОчереди, Обработчик, МаксимальнаяОчередь);
			КонецЕсли;
			
		Иначе
			ТекстИсключения = НСтр("ru = 'Ошибка при формировании очереди.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьОбработчикИзНаличияВОчереди(НаличиеОбработчиковВОчереди, Очередь, Обработчик)
	НаличиеОбработчиковВОчереди[Очередь].Удалить(Обработчик);
КонецПроцедуры

Процедура ДобавитьОбработчикВНаличияВОчереди(НаличиеОбработчиковВОчереди, Очередь, Обработчик, МаксимальнаяОчередь)
	Если НаличиеОбработчиковВОчереди.Получить(Очередь) = Неопределено Тогда
		НаличиеОбработчиковВОчереди.Вставить(Очередь, Новый Соответствие);
	КонецЕсли;
	НаличиеОбработчиковВОчереди[Очередь].Вставить(Обработчик);
	
	Если МаксимальнаяОчередь < Очередь Тогда
		МаксимальнаяОчередь = Очередь;
	КонецЕсли;
КонецПроцедуры

Функция КодОбработчикаПриДобавленииОбработчиковОбновления(Проект, Версия, ТекущаяБиблиотека, ИнформацияПоБиблиотекам, ПоддерживаетсяРасширенноеОписаниеОбработчиков)
	
	Запрос = Новый Запрос;
	
	МассивТекстовЗапросаМетаданныхБиблиотеки = Новый Массив;
	
	ТекстПервогоЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыМетаданных.ПустаяСсылка) КАК ОбъектМетаданных,
	|	"""" КАК Библиотека
	|ПОМЕСТИТЬ ВсеМетаданныеБиблиотеки
	|ГДЕ
	|	ЛОЖЬ";
	
	МассивТекстовЗапросаМетаданныхБиблиотеки.Добавить(ТекстПервогоЗапроса);	

	ВсеБиблиотеки = Новый ТаблицаЗначений;
	ВсеБиблиотеки.Колонки.Добавить("Библиотека", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная)));
	ВсеБиблиотеки.Колонки.Добавить("НужныТегиОтБиблиотеки", Новый ОписаниеТипов("Булево"));
	ВсеБиблиотеки.Колонки.Добавить("МодульЛокализации", Новый ОписаниеТипов("Булево"));
	ВсеБиблиотеки.Колонки.Добавить("УровеньВложенности", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10, 0)));
	ЕстьМодульЛокализации = Ложь;
	МодулиЛокализации = Новый Массив;
		
	Если ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ВПроектеРазрабатываютсяНесколькоКонфигураций Тогда
		
		#Область ШаблонЗапросаМетаданныеБиблиотеки
		ШаблонЗапросаМетаданныеБиблиотеки = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ОбъектМетаданных КАК ОбъектМетаданных,
		|	&Библиотека КАК Библиотека
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодсистемыСостав.ОбъектМетаданных КАК ОбъектМетаданных,
		|		ИСТИНА КАК ОбъектНужноДобавитьВПодсистему
		|	ИЗ
		|		Справочник.Подсистемы.Состав КАК ПодсистемыСостав
		|	ГДЕ
		|		ПодсистемыСостав.Ссылка.Владелец = &Проект
		|		И ПодсистемыСостав.Ссылка В ИЕРАРХИИ(&ПодсистемыБиблиотеки)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВерсииПроектаОтличияВСоставеПодсистем.ОбъектМетаданных,
		|		ВерсииПроектаОтличияВСоставеПодсистем.ОбъектНужноДобавитьВПодсистему
		|	ИЗ
		|		Справочник.ВерсииПроекта.ОтличияВСоставеПодсистем КАК ВерсииПроектаОтличияВСоставеПодсистем
		|	ГДЕ
		|		ВерсииПроектаОтличияВСоставеПодсистем.Ссылка = &ВерсияПроекта
		|		И ВерсииПроектаОтличияВСоставеПодсистем.Подсистема В ИЕРАРХИИ(&ПодсистемыБиблиотеки)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ОбъектМетаданных
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВложенныйЗапрос.ОбъектНужноДобавитьВПодсистему) = ИСТИНА";
		#КонецОбласти
		
		#Область ШаблонЗапросаМетаданные_БЕЗ_ЛокализованныхОбъектов
		ШаблонЗапросаНелокализуемыхМетаданных = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ОбъектМетаданных КАК ОбъектМетаданных,
		|	&Библиотека КАК Библиотека
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПодсистемыСостав.ОбъектМетаданных КАК ОбъектМетаданных,
		|		ИСТИНА КАК ОбъектНужноДобавитьВПодсистему
		|	ИЗ
		|		Справочник.Подсистемы.Состав КАК ПодсистемыСостав
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подсистемы.Состав КАК ПодсистемыЛокализации
		|			ПО ПодсистемыСостав.ОбъектМетаданных = ПодсистемыЛокализации.ОбъектМетаданных
		|			И ПодсистемыЛокализации.Ссылка В ИЕРАРХИИ(&ПодсистемыЛокализации)
		|	ГДЕ
		|		ПодсистемыСостав.Ссылка.Владелец = &Проект
		|		И ПодсистемыСостав.Ссылка В ИЕРАРХИИ(&ПодсистемыБиблиотеки)
		|		И ПодсистемыЛокализации.ОбъектМетаданных ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВерсииПроектаОтличияВСоставеПодсистем.ОбъектМетаданных,
		|		ВерсииПроектаОтличияВСоставеПодсистем.ОбъектНужноДобавитьВПодсистему
		|	ИЗ
		|		Справочник.ВерсииПроекта.ОтличияВСоставеПодсистем КАК ВерсииПроектаОтличияВСоставеПодсистем
		|	ГДЕ
		|		ВерсииПроектаОтличияВСоставеПодсистем.Ссылка = &ВерсияПроекта
		|		И ВерсииПроектаОтличияВСоставеПодсистем.Подсистема В ИЕРАРХИИ(&ПодсистемыБиблиотеки)) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ОбъектМетаданных
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВложенныйЗапрос.ОбъектНужноДобавитьВПодсистему) = ИСТИНА";
		#КонецОбласти
		
		Для Каждого СтрТабл из ИнформацияПоБиблиотекам Цикл
			
			СтрокаБиблиотеки = ВсеБиблиотеки.Добавить();
			СтрокаБиблиотеки.Библиотека = СтрТабл.Ключ;
			ИнформацияПоБиблиотеке = ИнформацияПоБиблиотекам[СтрТабл.Ключ]; 
			Если НЕ ЕстьМодульЛокализации И ИнформацияПоБиблиотеке.ЭтоМодульЛокализации Тогда
				ЕстьМодульЛокализации = Истина;
			КонецЕсли; 
			Если ИнформацияПоБиблиотеке.ЭтоМодульЛокализации Тогда
				МодулиЛокализации.Добавить(СтрокаБиблиотеки.Библиотека);
			КонецЕсли;
			
			НеВходит = ИнформацияПоБиблиотеке.ВсеПодсистемы.Найти(ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ОсновнаяПодсистема) <> Неопределено;
			СтрокаБиблиотеки.НужныТегиОтБиблиотеки = ЗначениеЗаполнено(ИнформацияПоБиблиотеке.ОткрывающийТэг);
			СтрокаБиблиотеки.МодульЛокализации = ИнформацияПоБиблиотеке.ЭтоМодульЛокализации;
			
			
			Если ЗначениеЗаполнено(ИнформацияПоБиблиотеке.ОсновнаяПодсистема) Тогда
				
				//Если текущей библиотеки нет в списке подсистем другой библиотеки, значит модуль
				//текущей библиотеки целиком вырезается из этой другой, поэтому в модуле текущей
				//библиотеки нет смысла проставлять теги от этой другой
				
				СтрокаБиблиотеки.НужныТегиОтБиблиотеки = 
					ТекущаяБиблиотека = СтрТабл.Ключ
					ИЛИ ИнформацияПоБиблиотеке.ВсеПодсистемы.Найти(ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ОсновнаяПодсистема) <> Неопределено
					//если указан модуль локализации, то тэги локализаци нужны во всех входящих в конфигурациию библиотеках
					ИЛИ ИнформацияПоБиблиотеке.ЭтоМодульЛокализации
					ИЛИ ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЭтоМодульЛокализации;
					
				Если СтрокаБиблиотеки.НужныТегиОтБиблиотеки Тогда
					
					Если ИнформацияПоБиблиотеке.ЭтоМодульЛокализации Тогда
						ТекстЗапросаМетаданныеБиблиотекиТекущая = СтрЗаменить(ШаблонЗапросаНелокализуемыхМетаданных,"&Библиотека", "&Библиотека" + СтрТабл.Ключ); 
						ТекстЗапросаМетаданныеБиблиотекиТекущая = СтрЗаменить(ТекстЗапросаМетаданныеБиблиотекиТекущая,"&ПодсистемыБиблиотеки", "&ПодсистемыБиблиотеки" + СтрТабл.Ключ);
						ТекстЗапросаМетаданныеБиблиотекиТекущая = СтрЗаменить(ТекстЗапросаМетаданныеБиблиотекиТекущая,"&ПодсистемыЛокализации", "&ПодсистемыЛокализации" + СтрТабл.Ключ);
						Запрос.УстановитьПараметр("ПодсистемыЛокализации" + СтрТабл.Ключ, ИнформацияПоБиблиотеке.ОсновнаяПодсистема);
					Иначе
						ТекстЗапросаМетаданныеБиблиотекиТекущая = СтрЗаменить(ШаблонЗапросаМетаданныеБиблиотеки,"&Библиотека", "&Библиотека" + СтрТабл.Ключ); 
						ТекстЗапросаМетаданныеБиблиотекиТекущая = СтрЗаменить(ТекстЗапросаМетаданныеБиблиотекиТекущая,"&ПодсистемыБиблиотеки", "&ПодсистемыБиблиотеки" + СтрТабл.Ключ); 
					КонецЕсли;
					
					МассивТекстовЗапросаМетаданныхБиблиотеки.Добавить(ТекстЗапросаМетаданныеБиблиотекиТекущая);
					
					Запрос.УстановитьПараметр("Библиотека" + СтрТабл.Ключ, СтрТабл.Ключ);
					Запрос.УстановитьПараметр("ВерсияПроекта", Версия);
					Запрос.УстановитьПараметр("ПодсистемыБиблиотеки" + СтрТабл.Ключ, ИнформацияПоБиблиотеке.ВсеПодсистемы);
				КонецЕсли;
			Иначе
				СтрокаБиблиотеки.НужныТегиОтБиблиотеки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		ОпределитьВложенностьБиблиотек(ИнформацияПоБиблиотекам, ВсеБиблиотеки);
		
	КонецЕсли;
	
	#Область ТекстЗапроса
	Разделитель =
	"
	|	ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросаМетаданныхБиблиотеки, Разделитель) + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ВсеБиблиотеки.Библиотека,
	|	ВсеБиблиотеки.НужныТегиОтБиблиотеки,
	|	ВсеБиблиотеки.МодульЛокализации,
	|	ВсеБиблиотеки.УровеньВложенности
	|ПОМЕСТИТЬ ВсеБиблиотеки
	|ИЗ
	|	&ВсеБиблиотеки КАК ВсеБиблиотеки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбработчикиОбновления.Ссылка КАК ОбработчикОбновления,
	|	ОбработчикиОбновления.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ВЫБОР
	|		КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|				И &ДоступнаЧастьОбработчиков
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОбъектВходитВКонфигурацию
	|ПОМЕСТИТЬ ОбработчикиОбновленияДляЗапроса
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|		ПО ОбработчикиОбновления.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|			И (ВсеМетаданныеБиблиотеки.Библиотека = &Библиотека)
	|ГДЕ
	|	ОбработчикиОбновления.Владелец = &Проект
	|	И ОбработчикиОбновления.Версия = &Версия
	|	И ОбработчикиОбновления.Библиотека = &Библиотека
	|	И НЕ ОбработчикиОбновления.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбработчикиОбновления.Процедура КАК Процедура,
	|	ОбработчикиОбновления.РежимВыполнения КАК РежимВыполнения,
	|	ОбработчикиОбновления.ВерсияНомер КАК ВерсияНомер,
	|	ОбработчикиОбновления.СборкаНомер КАК СборкаНомер,
	|	ОбработчикиОбновления.КомментарийУстановлено КАК КомментарийУстановлено,
	|	ОбработчикиОбновления.ПроцедураЗаполненияДанныхОбновления КАК ПроцедураЗаполненияДанныхОбновления,
	|	ОбработчикиОбновления.ОчередьОтложеннойОбработкиУстановлено КАК ОчередьОтложеннойОбработкиУстановлено,
	|	ОбработчикиОбновления.ЗапускатьТолькоВГлавномУзлеУстановлено КАК ЗапускатьТолькоВГлавномУзлеУстановлено,
	|	ОбработчикиОбновления.ЗапускатьИВПодчиненномУзлеРИБСФильтрамиУстановлено КАК ЗапускатьИВПодчиненномУзлеРИБСФильтрамиУстановлено,
	|	ОбработчикиОбновления.СборкаЧислом КАК СборкаЧислом,
	|	ОбработчикиОбновления.ПроцедураПроверки КАК ПроцедураПроверки,
	|	ОбработчикиОбновления.НачальноеЗаполнение КАК НачальноеЗаполнение,
	|	ОбработчикиОбновления.Ссылка КАК ОбработчикОбновления,
	|	ОбработчикиОбновленияДляЗапроса.ОбъектВходитВКонфигурацию КАК ОбъектВходитВКонфигурацию,
	|	ОбработчикиОбновленияДляЗапроса.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ОбработчикиОбновления.Идентификатор КАК Идентификатор,
	|	ОбработчикиОбновления.ОбщиеДанныеУстановлено КАК ОбщиеДанныеУстановлено,
	|	ОбработчикиОбновления.УправлениеОбработчикамиУстановлено КАК УправлениеОбработчикамиУстановлено,
	|	ОбработчикиОбновления.МногопоточныйУстановлено КАК МногопоточныйУстановлено
	|ИЗ
	|	ОбработчикиОбновленияДляЗапроса КАК ОбработчикиОбновленияДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновления
	|		ПО ОбработчикиОбновленияДляЗапроса.ОбработчикОбновления = ОбработчикиОбновления.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикиОбновления.РежимВыполнения.Порядок,
	|	ОбработчикиОбновления.СборкаЧислом,
	|	ОбработчикиОбновления.Процедура
	|ИТОГИ
	|	МАКСИМУМ(СборкаЧислом)
	|ПО
	|	РежимВыполнения,
	|	ВерсияНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПриоритетыВыполнения.Обработчик1 КАК ОбработчикОбновления,
	|	ПриоритетыВыполнения.Обработчик2 КАК Процедура,
	|	ПриоритетыВыполнения.ПорядокПомещенияВОчередь КАК Порядок,
	|	ВЫБОР
	|		КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|				И &ДоступнаЧастьОбъектов
	|				И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОбъектВходитВКонфигурацию,
	|	ВсеБиблиотеки.Библиотека КАК Библиотека
	|ИЗ
	|	ОбработчикиОбновленияДляЗапроса КАК ОбработчикиОбновленияДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполнения
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеБиблиотеки КАК ВсеБиблиотеки
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|			ПО ПриоритетыВыполнения.Обработчик2.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|				И (ВсеБиблиотеки.Библиотека = ВсеМетаданныеБиблиотеки.Библиотека)
	|		ПО ОбработчикиОбновленияДляЗапроса.ОбработчикОбновления = ПриоритетыВыполнения.Обработчик1
	|ГДЕ
	|	НЕ ПриоритетыВыполнения.Обработчик2.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикОбновления,
	|	Процедура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВерсииПроектаОтличияВИменахМетаданных.ПолноеИмя, ЧитаемыеДанные.ОбъектМетаданных.Наименование) КАК ОбъектМетаданных,
	|	ЧитаемыеДанные.Ссылка КАК ОбработчикОбновления,
	|	ВЫБОР
	|		КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL
	|				И &ДоступнаЧастьОбъектов
	|				И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОбъектВходитВКонфигурацию,
	|	ВсеБиблиотеки.Библиотека КАК Библиотека
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы.ЧитаемыеДанные КАК ЧитаемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеБиблиотеки КАК ВсеБиблиотеки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|		ПО ЧитаемыеДанные.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|			И (ВсеБиблиотеки.Библиотека = ВсеМетаданныеБиблиотеки.Библиотека)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта.ОтличияВИменахМетаданных КАК ВерсииПроектаОтличияВИменахМетаданных
	|			ПО ЧитаемыеДанные.ОбъектМетаданных = ВерсииПроектаОтличияВИменахМетаданных.ОбъектМетаданных
	|				И ВерсииПроектаОтличияВИменахМетаданных.Ссылка = &Версия
	|ГДЕ
	|	ЧитаемыеДанные.Ссылка.Владелец = &Проект
	|	И ЧитаемыеДанные.Ссылка.Версия = &Версия
	|	И ЧитаемыеДанные.Ссылка.Библиотека = &Библиотека
	|	И НЕ ЧитаемыеДанные.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикОбновления,
	|	ОбъектМетаданных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВерсииПроектаОтличияВИменахМетаданных.ПолноеИмя, ИзменяемыеДанные.ОбъектМетаданных.Наименование) КАК ОбъектМетаданных,
	|	ИзменяемыеДанные.Ссылка КАК ОбработчикОбновления,
	|	ВЫБОР
	|		КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|				И &ДоступнаЧастьОбъектов
	|				И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОбъектВходитВКонфигурацию,
	|	ВсеБиблиотеки.Библиотека КАК Библиотека
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ИзменяемыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеБиблиотеки КАК ВсеБиблиотеки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|		ПО ИзменяемыеДанные.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|			И (ВсеБиблиотеки.Библиотека = ВсеМетаданныеБиблиотеки.Библиотека)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта.ОтличияВИменахМетаданных КАК ВерсииПроектаОтличияВИменахМетаданных
	|			ПО ИзменяемыеДанные.ОбъектМетаданных = ВерсииПроектаОтличияВИменахМетаданных.ОбъектМетаданных
	|				И ВерсииПроектаОтличияВИменахМетаданных.Ссылка = &Версия
	|ГДЕ
	|	ИзменяемыеДанные.Ссылка.Владелец = &Проект
	|	И ИзменяемыеДанные.Ссылка.Версия = &Версия
	|	И ИзменяемыеДанные.Ссылка.Библиотека = &Библиотека
	|	И НЕ ИзменяемыеДанные.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикОбновления,
	|	ОбъектМетаданных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.БлокируемыйОбъект КАК ОбъектМетаданных,
	|	ВложенныйЗапрос.ОбработчикОбновления КАК ОбработчикОбновления,
	|	ВложенныйЗапрос.ОбъектВходитВКонфигурацию КАК ОбъектВходитВКонфигурацию,
	|	ВложенныйЗапрос.Библиотека КАК Библиотека
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(ВерсииПроектаОтличияВИменахМетаданных.ПолноеИмя, ИзменяемыеДанные.ОбъектМетаданных.Наименование) КАК БлокируемыйОбъект,
	|		ИзменяемыеДанные.Ссылка КАК ОбработчикОбновления,
	|		ВЫБОР
	|			КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|					И &ДоступнаЧастьОбъектов
	|					И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК ОбъектВходитВКонфигурацию,
	|		ВсеБиблиотеки.Библиотека КАК Библиотека
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ИзменяемыеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеБиблиотеки КАК ВсеБиблиотеки
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|			ПО ИзменяемыеДанные.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|				И (ВсеБиблиотеки.Библиотека = ВсеМетаданныеБиблиотеки.Библиотека)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта.ОтличияВИменахМетаданных КАК ВерсииПроектаОтличияВИменахМетаданных
	|			ПО ИзменяемыеДанные.ОбъектМетаданных = ВерсииПроектаОтличияВИменахМетаданных.ОбъектМетаданных
	|				И ВерсииПроектаОтличияВИменахМетаданных.Ссылка = &Версия
	|	ГДЕ
	|		ИзменяемыеДанные.Ссылка.Владелец = &Проект
	|		И ИзменяемыеДанные.Ссылка.Версия = &Версия
	|		И ИзменяемыеДанные.Ссылка.Библиотека = &Библиотека
	|		И НЕ ИзменяемыеДанные.Ссылка.ПометкаУдаления
	|		И ИзменяемыеДанные.БлокироватьИнтерфейс
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(ВерсииПроектаОтличияВИменахМетаданных.ПолноеИмя, ЧитаемыеДанные.ОбъектМетаданных.Наименование) КАК БлокируемыйОбъект,
	|		ЧитаемыеДанные.Ссылка,
	|		ВЫБОР
	|			КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|					И &ДоступнаЧастьОбъектов
	|					И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ,
	|		ВсеБиблиотеки.Библиотека
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ЧитаемыеДанные КАК ЧитаемыеДанные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеБиблиотеки КАК ВсеБиблиотеки
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|			ПО ЧитаемыеДанные.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|				И (ВсеБиблиотеки.Библиотека = ВсеМетаданныеБиблиотеки.Библиотека)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта.ОтличияВИменахМетаданных КАК ВерсииПроектаОтличияВИменахМетаданных
	|			ПО ЧитаемыеДанные.ОбъектМетаданных = ВерсииПроектаОтличияВИменахМетаданных.ОбъектМетаданных
	|				И ВерсииПроектаОтличияВИменахМетаданных.Ссылка = &Версия
	|	ГДЕ
	|		ЧитаемыеДанные.Ссылка.Владелец = &Проект
	|		И ЧитаемыеДанные.Ссылка.Версия = &Версия
	|		И ЧитаемыеДанные.Ссылка.Библиотека = &Библиотека
	|		И НЕ ЧитаемыеДанные.Ссылка.ПометкаУдаления
	|		И ЧитаемыеДанные.БлокироватьИнтерфейс
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(ВерсииПроектаОтличияВИменахМетаданных.ПолноеИмя, ПрочиеБлокируемыеОбъекты.ОбъектМетаданных.Наименование) КАК БлокируемыйОбъект,
	|		ПрочиеБлокируемыеОбъекты.Ссылка,
	|		ВЫБОР
	|			КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|					И &ДоступнаЧастьОбъектов
	|					И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ,
	|		ВсеБиблиотеки.Библиотека
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ПрочиеБлокируемыеОбъекты КАК ПрочиеБлокируемыеОбъекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеБиблиотеки КАК ВсеБиблиотеки
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|			ПО ПрочиеБлокируемыеОбъекты.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|				И (ВсеБиблиотеки.Библиотека = ВсеМетаданныеБиблиотеки.Библиотека)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта.ОтличияВИменахМетаданных КАК ВерсииПроектаОтличияВИменахМетаданных
	|			ПО ПрочиеБлокируемыеОбъекты.ОбъектМетаданных = ВерсииПроектаОтличияВИменахМетаданных.ОбъектМетаданных
	|				И ВерсииПроектаОтличияВИменахМетаданных.Ссылка = &Версия
	|	ГДЕ
	|		ПрочиеБлокируемыеОбъекты.Ссылка.Владелец = &Проект
	|		И ПрочиеБлокируемыеОбъекты.Ссылка.Библиотека = &Библиотека
	|		И НЕ ПрочиеБлокируемыеОбъекты.Ссылка.ПометкаУдаления) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикОбновления,
	|	ОбъектМетаданных
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВерсииПроектаОтличияВИменахМетаданных.ПолноеИмя, Обработчики.ОбъектМетаданных.Наименование) КАК ОбъектМетаданных,
	|	Обработчики.Ссылка КАК ОбработчикОбновления,
	|	ВЫБОР
	|		КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|				И &ДоступнаЧастьОбъектов
	|				И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОбъектВходитВКонфигурацию,
	|	ВсеБиблиотеки.Библиотека КАК Библиотека,
	|	ВсеБиблиотеки.УровеньВложенности КАК УровеньВложенности
	|ПОМЕСТИТЬ втБиблиотекиОбработчиков
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК Обработчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеБиблиотеки КАК ВсеБиблиотеки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеМетаданныеБиблиотеки КАК ВсеМетаданныеБиблиотеки
	|		ПО Обработчики.ОбъектМетаданных = ВсеМетаданныеБиблиотеки.ОбъектМетаданных
	|			И (ВсеБиблиотеки.Библиотека = ВсеМетаданныеБиблиотеки.Библиотека)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта.ОтличияВИменахМетаданных КАК ВерсииПроектаОтличияВИменахМетаданных
	|			ПО Обработчики.ОбъектМетаданных = ВерсииПроектаОтличияВИменахМетаданных.ОбъектМетаданных
	|				И ВерсииПроектаОтличияВИменахМетаданных.Ссылка = &Версия
	|ГДЕ
	|	Обработчики.Владелец = &Проект
	|	И Обработчики.Версия = &Версия
	|	И Обработчики.Библиотека = &Библиотека
	|	И НЕ Обработчики.ПометкаУдаления
	|	И НЕ (ВсеБиблиотеки.Библиотека В (&МодулиЛокализации))
	|	И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|	И НЕ (ВЫБОР
	|			КОГДА ВсеМетаданныеБиблиотеки.ОбъектМетаданных ЕСТЬ NULL 
	|					И &ДоступнаЧастьОбъектов
	|					И ВсеБиблиотеки.НужныТегиОтБиблиотеки
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БиблиотекиОбработчиков.ОбъектМетаданных КАК ОбъектМетаданных,
	|	МИНИМУМ(БиблиотекиОбработчиков.УровеньВложенности) КАК УровеньВложенности
	|ПОМЕСТИТЬ втУровни
	|ИЗ
	|	втБиблиотекиОбработчиков КАК БиблиотекиОбработчиков
	|СГРУППИРОВАТЬ ПО
	|	БиблиотекиОбработчиков.ОбъектМетаданных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработчики.ОбъектМетаданных КАК ОбъектМетаданных,
	|	Обработчики.ОбработчикОбновления КАК ОбработчикОбновления,
	|	Обработчики.ОбъектВходитВКонфигурацию КАК ОбъектВходитВКонфигурацию,
	|	Обработчики.Библиотека КАК Библиотека,
	|	Обработчики.УровеньВложенности КАК УровеньВложенности
	|ИЗ
	|	втБиблиотекиОбработчиков КАК Обработчики
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУровни КАК Уровни
	|	ПО Обработчики.ОбъектМетаданных = Уровни.ОбъектМетаданных
	|		И Обработчики.УровеньВложенности = Уровни.УровеньВложенности
	|
	|;";
	#КонецОбласти
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотека", ТекущаяБиблиотека);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("ВсеБиблиотеки", ВсеБиблиотеки);
	Запрос.УстановитьПараметр("ДоступнаЧастьОбработчиков", ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ВПроектеРазрабатываютсяНесколькоКонфигураций
													 	И ЗначениеЗаполнено(ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ОсновнаяПодсистема));
	Если ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЭтоМодульЛокализации Тогда
		Запрос.УстановитьПараметр("ДоступнаЧастьОбработчиков", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоступнаЧастьОбъектов", ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ВПроектеРазрабатываютсяНесколькоКонфигураций
													И ЗначениеЗаполнено(ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ОсновнаяПодсистема)
													ИЛИ ЕстьМодульЛокализации);
	Запрос.УстановитьПараметр("МодулиЛокализации", МодулиЛокализации);
	Запрос.Текст = ТекстЗапроса;
	
	ТекстОбработчика =
	"Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	|";
	
	Если ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЭтоМодульЛокализации Тогда
		ТекстОбработчика = ТекстОбработчика + "
		|" + ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ОткрывающийТэг + "
		|";
	КонецЕсли;
	
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоРежимуВыполнения = РезультатыЗапросов[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПриоритетыВыполнения      = РезультатыЗапросов[4].Выгрузить();
	
	ТЗЧитаемыеОбъекты    = РезультатыЗапросов[5].Выгрузить();
	ТЗИзменяемыеОбъекты  = РезультатыЗапросов[6].Выгрузить();
	ТЗБлокируемыеОбъекты = РезультатыЗапросов[7].Выгрузить();
	ТЗОбработчикиБиблиотек = РезультатыЗапросов[10].Выгрузить();
	
	ПереопределяемыеОбработчики = Новый Соответствие;
	
	ЕстьОшибки = Ложь;
	
	Пока ВыборкаПоРежимуВыполнения.Следующий() Цикл 
		
		ТекстОбработчика = ТекстОбработчика + "
		|#Область " + Строка(ВыборкаПоРежимуВыполнения.РежимВыполнения) + "
		|";
		
		ВыборкаПоВерсиям = ВыборкаПоРежимуВыполнения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоВерсиям.Следующий() Цикл
			
			Если ВыборкаПоВерсиям.СборкаЧислом = 0 Тогда
				Если ВыборкаПоВерсиям.ВерсияНомер = "*" Тогда
					ИмяОбласти = "НаКаждуюВерсию";
				Иначе
					ИмяОбласти = "НачальноеЗаполнение";
				КонецЕсли;
			Иначе
				ИмяОбласти = "Версия_" + СтрЗаменить(ВыборкаПоВерсиям.ВерсияНомер,".","_");
			КонецЕсли;
			
			ТекстОбработчика = ТекстОбработчика + "
			|#Область " + ИмяОбласти + "
			|";
			
			ВыборкаПоОбработчикам = ВыборкаПоВерсиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоОбработчикам.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаПоОбработчикам.ОбъектМетаданных) Тогда
					ТекстИсключения = НСтр("ru = 'По имени обработчика %ОбработчикОбновления% не удалось определить объект метаданных, к которому он относится. Либо есть ошибка в названии процедуры, либо объект метаданных был переименован и его нужно указать вручную в карточке обработчика.'");
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ОбработчикОбновления%", ВыборкаПоОбработчикам.Процедура);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения,ВыборкаПоОбработчикам.ОбработчикОбновления,,,ЕстьОшибки);
					Продолжить;
					
				ИначеЕсли Не ВыборкаПоОбработчикам.ОбъектВходитВКонфигурацию Тогда
					
					ТекстИсключения = НСтр("ru = 'Объект %ОбъектМетаданных% не входит в библиотеку %Библиотека%, поэтому не имеет смысл объявлять расположенный в этом объекте обработчик обновления в модуле этой библиотеки. Перенесите обработчик в другую библиотеку.'");
					
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ОбъектМетаданных%", ВыборкаПоОбработчикам.ОбъектМетаданных);
					ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Библиотека%", ТекущаяБиблиотека);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения,ВыборкаПоОбработчикам.ОбработчикОбновления,,,ЕстьОшибки);
					Продолжить;
					
				КонецЕсли;
				
				ОтложенныйРежимВыполнения = ВыборкаПоОбработчикам.РежимВыполнения =
					Перечисления.РежимыВыполненияОбработчиковОбновления.Отложенно;
					
				Если ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЭтоМодульЛокализации Тогда
					ТэгиОбработчика = ОпределитьТэгиБиблиотеки(ВыборкаПоОбработчикам, ТЗОбработчикиБиблиотек, ИнформацияПоБиблиотекам);
					Если ТэгиОбработчика.ОткрывающийТэг <> "" Тогда
						ТекстОбработчика = ТекстОбработчика + "
						|" + ТэгиОбработчика.ОткрывающийТэг;
					КонецЕсли;
				КонецЕсли;
				
				ИмяОбласти = СтрЗаменить(ВыборкаПоОбработчикам.Процедура, ".", "_");
				ТекстОбработчика = ТекстОбработчика + "
				|#Область " + ИмяОбласти + "
				|";
				
				ТекстОбработчика = ТекстОбработчика + "
				|	Обработчик = Обработчики.Добавить();";
				ТекстОбработчика = ТекстОбработчика + "
				|	Обработчик.Версия = """ + ВыборкаПоОбработчикам.СборкаНомер + """;";
				
				Если ВыборкаПоОбработчикам.НачальноеЗаполнение Тогда
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.НачальноеЗаполнение = Истина;";
				КонецЕсли;
				
				ТекстОбработчика = ТекстОбработчика + "
				|	Обработчик.РежимВыполнения = """ + Строка(ВыборкаПоОбработчикам.РежимВыполнения) + """;";
				ТекстОбработчика = ТекстОбработчика + "
				|	Обработчик.Процедура = """ + ВыборкаПоОбработчикам.Процедура + """;";
				
				Если Не ПустаяСтрока(ВыборкаПоОбработчикам.Идентификатор) Тогда
					
					ИД = Новый УникальныйИдентификатор(ВыборкаПоОбработчикам.Идентификатор);
					
					Если ЗначениеЗаполнено(ИД) Тогда
						ТекстОбработчика = ТекстОбработчика + "
						|	Обработчик.Идентификатор = Новый УникальныйИдентификатор(""" + ВыборкаПоОбработчикам.Идентификатор + """);";
					КонецЕсли;
				КонецЕсли;
				
				Если ВыборкаПоОбработчикам.ОбщиеДанныеУстановлено Тогда
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.ОбщиеДанные = Истина;";
				КонецЕсли;
				
				Если ВыборкаПоОбработчикам.УправлениеОбработчикамиУстановлено Тогда
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.УправлениеОбработчиками = Истина;";
				КонецЕсли;
				
				Если ВыборкаПоОбработчикам.МногопоточныйУстановлено Тогда
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.Многопоточный = Истина;";
				КонецЕсли;
				
				Если ОтложенныйРежимВыполнения Тогда
					
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.ПроцедураЗаполненияДанныхОбновления = """ + ВыборкаПоОбработчикам.ПроцедураЗаполненияДанныхОбновления + """;";
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.ОчередьОтложеннойОбработки = " + Формат(ВыборкаПоОбработчикам.ОчередьОтложеннойОбработкиУстановлено,"ЧН=; ЧГ=") + ";";
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.ПроцедураПроверки = """ + ВыборкаПоОбработчикам.ПроцедураПроверки + """;";
					
				КонецЕсли;
				
				Если ВыборкаПоОбработчикам.ЗапускатьТолькоВГлавномУзлеУстановлено Тогда
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.ЗапускатьТолькоВГлавномУзле = Истина;";
				КонецЕсли;
				
				Если ВыборкаПоОбработчикам.ЗапускатьИВПодчиненномУзлеРИБСФильтрамиУстановлено Тогда
					ТекстОбработчика = ТекстОбработчика + "
					|	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;";
				КонецЕсли;
				
				Обработчик = Новый Структура;
				Обработчик.Вставить("Описание", ВыборкаПоОбработчикам);
				Обработчик.Вставить("Тэги", ТэгиОбработчика);
				Обработчик.Вставить("ТекущаяБиблиотека", ТекущаяБиблиотека);
				Обработчик.Вставить("ИнформацияПоБиблиотекам", ИнформацияПоБиблиотекам);
				Если ПоддерживаетсяРасширенноеОписаниеОбработчиков Тогда
					
					ТекстИнформацииОбОбъектах = ТекстИнформацииОбОбъектах(ТЗЧитаемыеОбъекты, "ЧитаемыеОбъекты", Обработчик);
				
					Если Не ПустаяСтрока(ТекстИнформацииОбОбъектах) Тогда
						ТекстОбработчика = ТекстОбработчика + ТекстИнформацииОбОбъектах;
					КонецЕсли;
					
					ТекстИнформацииОбОбъектах = ТекстИнформацииОбОбъектах(ТЗИзменяемыеОбъекты, "ИзменяемыеОбъекты", Обработчик);
					
					Если Не ПустаяСтрока(ТекстИнформацииОбОбъектах) Тогда
						ТекстОбработчика = ТекстОбработчика + ТекстИнформацииОбОбъектах;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ОтложенныйРежимВыполнения Тогда
					
					ТекстИнформацииОбОбъектах = ТекстИнформацииОбОбъектах(ТЗБлокируемыеОбъекты, "БлокируемыеОбъекты", Обработчик);
					
					Если Не ПустаяСтрока(ТекстИнформацииОбОбъектах) Тогда
						ТекстОбработчика = ТекстОбработчика + ТекстИнформацииОбОбъектах;
					КонецЕсли;
					
				КонецЕсли;
				
				ТекстКомментария = СокрЛП(ВыборкаПоОбработчикам.КомментарийУстановлено);
				ТекстКомментария = СтрЗаменить(ТекстКомментария, Символы.ПС, Символы.ПС + "	|");
				ТекстКомментария = СтрЗаменить(ТекстКомментария, """", """""");
				ТекстОбработчика = ТекстОбработчика + "
				|	Обработчик.Комментарий = НСтр(""ru = '" + ТекстКомментария +"'"");";
				
				Если ОтложенныйРежимВыполнения
					И ПоддерживаетсяРасширенноеОписаниеОбработчиков Тогда
					
					Отбор = Новый Структура("ОбработчикОбновления", ВыборкаПоОбработчикам.ОбработчикОбновления);
					ПриоритетыВыполненияОбработчика = ПриоритетыВыполнения.НайтиСтроки(Отбор);
					
					Если ПриоритетыВыполненияОбработчика.Количество() > 0 Тогда
						
						ТекстОбработчика = ТекстОбработчика + "
						|	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();";
						
						ВхождениеВБиблиотеки = Новый Соответствие;
						
						Для Каждого СтрокаПриоритетов Из ПриоритетыВыполненияОбработчика Цикл
							
							ТекущаяПроцедура = ВхождениеВБиблиотеки.Получить(СтрокаПриоритетов.Процедура);
							
							Если ТекущаяПроцедура = Неопределено Тогда
								ВхождениеВБиблиотеки.Вставить(СтрокаПриоритетов.Процедура, Новый Структура("Порядок, Библиотеки",
																											СтрокаПриоритетов.Порядок,
																											Новый Массив));
								ТекущаяПроцедура = ВхождениеВБиблиотеки.Получить(СтрокаПриоритетов.Процедура);
							КонецЕсли;
							
							ТекущаяПроцедура.Библиотеки.Добавить(Новый Структура("Библиотека, ОбъектВходитВКонфигурацию",
																		СтрокаПриоритетов.Библиотека,
																		СтрокаПриоритетов.ОбъектВходитВКонфигурацию)); 
							
						КонецЦикла;
						
						Для Каждого СтрокаПриоритетов из ВхождениеВБиблиотеки Цикл	
							
							БиблиотекаИсточникТега = БиблиотекаИсточникТега(СтрокаПриоритетов.Значение.Библиотеки, ТекущаяБиблиотека, ИнформацияПоБиблиотекам);
							
							Для Каждого БиблиотекаТега Из БиблиотекаИсточникТега Цикл
								ТэгОбъекта = ИнформацияПоБиблиотекам[БиблиотекаТега].ОткрывающийТэг;
								Если ТэгиОбработчика = Неопределено ИЛИ СтрНачинаетсяС(ТэгиОбработчика.ОткрывающийТэг, ТэгОбъекта) = 0 Тогда
									ТекстОбработчика = ТекстОбработчика + "
									|	" + ИнформацияПоБиблиотекам[БиблиотекаТега].ОткрывающийТэг;
								КонецЕсли;
							КонецЦикла;
							
							ПорядокСтрокой = ИмяЗначенияПеречисления(СтрокаПриоритетов.Значение.Порядок);
							
							ТекстОбработчика = ТекстОбработчика + "
							|
							|	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
							|	НоваяСтрока.Процедура = """ + СтрокаПриоритетов.Ключ + """;
							|	НоваяСтрока.Порядок = """ + ПорядокСтрокой + """;";
							
							Для Индекс = 0 По БиблиотекаИсточникТега.ВГраница() Цикл
								БиблиотекаТега = БиблиотекаИсточникТега[БиблиотекаИсточникТега.ВГраница() - Индекс];
								ТэгОбъекта = ИнформацияПоБиблиотекам[БиблиотекаТега].ЗакрывающийТэг;
								Если ТэгиОбработчика = Неопределено ИЛИ СтрНачинаетсяС(ТэгиОбработчика.ЗакрывающийТэг, ТэгОбъекта) = 0 Тогда
									ТекстОбработчика = ТекстОбработчика + "
									|	" + ИнформацияПоБиблиотекам[БиблиотекаТега].ЗакрывающийТэг;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
	
						Если БиблиотекаИсточникТега.Количество() > 0 Тогда
							Для Каждого БиблиотекаТега Из ИнформацияПоБиблиотекам Цикл
								ЛишниеТэги = Символы.Таб + БиблиотекаТега.Значение.ЗакрывающийТэг + Символы.ПС
										   + Символы.Таб + БиблиотекаТега.Значение.ОткрывающийТэг + Символы.ПС;
								ТекстОбработчика = СтрЗаменить(ТекстОбработчика, ЛишниеТэги, "");
							КонецЦикла;
						КонецЕсли;
						
						ТекстОбработчика = ТекстОбработчика + "
						|";
					Иначе
						ТекстОбработчика = ТекстОбработчика + "
						|";
					КонецЕсли;
				Иначе
					ТекстОбработчика = ТекстОбработчика + "
					|";
				КонецЕсли;
				
				ТекстОбработчика = ТекстОбработчика + "
				|#КонецОбласти
				|";
				Если ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЭтоМодульЛокализации Тогда
					Если ТэгиОбработчика.ЗакрывающийТэг <> "" Тогда
						ТекстОбработчика = ТекстОбработчика + ТэгиОбработчика.ЗакрывающийТэг + "
							|";
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстОбработчика = ТекстОбработчика + "
			|#КонецОбласти
			|";
			
		КонецЦикла;
		
		ТекстОбработчика = ТекстОбработчика + "
		|#КонецОбласти
		|";
		
	КонецЦикла;
	
	Если ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЭтоМодульЛокализации Тогда
	
		Для Каждого БиблиотекаТега Из ИнформацияПоБиблиотекам Цикл
			ЛишниеТэги = БиблиотекаТега.Значение.ЗакрывающийТэг + Символы.ПС + Символы.ПС
					   + БиблиотекаТега.Значение.ОткрывающийТэг + Символы.ПС;
			ТекстОбработчика = СтрЗаменить(ТекстОбработчика, ЛишниеТэги, Символы.ПС);
		КонецЦикла;
		
		ТекстОбработчика = ТекстОбработчика + "
		|" + ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЗакрывающийТэг + "
		|";
	КонецЕсли;
	
	ТекстОбработчика = ТекстОбработчика + "
	|КонецПроцедуры";
	
	Если ЕстьОшибки Тогда
		ТекстИсключения = НСтр("ru = 'Есть ошибки при генерации модулей.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Возврат ТекстОбработчика;
	
КонецФункции

Функция КодОбработчикаПриФормированииОчередейОтложенныхОбработчиков(Проект, Версия, Библиотеки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбновления.Процедура КАК Процедура,
	|	ОбработчикиОбновления.РежимВыполнения КАК РежимВыполнения,
	|	ОбработчикиОбновления.ВерсияНомер КАК ВерсияНомер,
	|	ОбработчикиОбновления.СборкаЧислом КАК СборкаЧислом,
	|	ОбработчикиОбновления.ОчередьОтложеннойОбработкиУстановлено КАК ОчередьУстановленная,
	|	ОбработчикиОбновления.ОчередьОтложеннойОбработкиЗагружено КАК ОчередьЗагруженная,
	|	ОбработчикиОбновления.Ссылка КАК ОбработчикОбновления
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновления
	|ГДЕ
	|	ОбработчикиОбновления.Владелец = &Проект
	|	И ОбработчикиОбновления.Версия = &Версия
	|	И ОбработчикиОбновления.Библиотека В(&Библиотека)
	|	И ОбработчикиОбновления.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|	И ОбработчикиОбновления.РежимВыполнения = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОбработчиковОбновления.Отложенно)
	|	И ОбработчикиОбновления.ОчередьОтложеннойОбработкиУстановлено <> ОбработчикиОбновления.ОчередьОтложеннойОбработкиЗагружено
	|	И НЕ ОбработчикиОбновления.МонопольныйРежимОправдан
	|	И НЕ ОбработчикиОбновления.ПометкаУдаления
	|	И НЕ ОбработчикиОбновления.НачальноеЗаполнение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбработчикиОбновления.СборкаЧислом,
	|	ВерсияНомер УБЫВ
	|";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотека", Библиотеки);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Обработчики = Запрос.Выполнить().Выгрузить();
	//сгруппируем процедуры обработчиков в последнюю сборку
	ПереопределяемыеОбработчики = Новый Соответствие;
	Для Каждого СтрокаОбработчиков Из Обработчики Цикл
		ПереопределяемыеОбработчики.Вставить(СтрокаОбработчиков.Процедура, СтрокаОбработчиков.ОчередьУстановленная);
	КонецЦикла;
	
	ТекстОбработчика =
	"Процедура ПриФормированииОчередейОтложенныхОбработчиков(ОбработчикИОчередь) Экспорт
	|";
	
	Процедуры = Обработчики.Скопировать();
	Процедуры.Свернуть("Процедура");
	Процедуры.Сортировать("Процедура");
	Для Каждого Имя Из Процедуры Цикл
		Очередь = ПереопределяемыеОбработчики[Имя.Процедура];
		ТекстОбработчика = ТекстОбработчика + "
		|	ОбработчикИОчередь.Вставить(""" + Имя.Процедура + """, " + Формат(Очередь,"ЧН=; ЧГ=") + ");";
	КонецЦикла;
	
	ТекстОбработчика = ТекстОбработчика + "
	|";
	ТекстОбработчика = ТекстОбработчика + "
	|КонецПроцедуры";
	
	Возврат ТекстОбработчика;
	
КонецФункции

Функция ИмяЗначенияПеречисления(Значение)
	
	Если Значение = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1") Тогда
		Возврат "До";
	ИначеЕсли Значение = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2") Тогда
		Возврат "После";
	ИначеЕсли Значение = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.ВсеРавноВКакойПоследовательности") Тогда
		Возврат "Любой";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ТекстИнформацииОбОбъектах(ТЗОбработчика, ИмяСвойства, Обработчик)
	
	Описание = Обработчик.Описание;
	ТекущаяБиблиотека = Обработчик.ТекущаяБиблиотека;
	ИнформацияПоБиблиотекам = Обработчик.ИнформацияПоБиблиотекам;
	ТэгиОбработчика = Обработчик.Тэги;
	
	ТекстОбъектов = "";
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбработчикОбновления", Описание.ОбработчикОбновления);
	
	ОбъектыМетаданныхТЧОбработчика = ТЗОбработчика.НайтиСтроки(Отбор);
	
	ВхождениеВБиблиотеки = Новый Соответствие;
	
	ОбъектыОбработчика = Новый Массив;
	Для Каждого СтрокаОбъекта Из ОбъектыМетаданныхТЧОбработчика Цикл
		
		ТекущийОбъект = ВхождениеВБиблиотеки.Получить(СтрокаОбъекта.ОбъектМетаданных);
		
		Если ТекущийОбъект = Неопределено Тогда
			ВхождениеВБиблиотеки.Вставить(СтрокаОбъекта.ОбъектМетаданных, Новый Массив);
			ТекущийОбъект = ВхождениеВБиблиотеки.Получить(СтрокаОбъекта.ОбъектМетаданных);
			ОбъектыОбработчика.Добавить(СтрокаОбъекта.ОбъектМетаданных);
		КонецЕсли;
		
		ТекущийОбъект.Добавить(Новый Структура("Библиотека, ОбъектВходитВКонфигурацию",
												СтрокаОбъекта.Библиотека,
												СтрокаОбъекта.ОбъектВходитВКонфигурацию)); 
		
	КонецЦикла;
	
	ВсегоОбъектов = ВхождениеВБиблиотеки.Количество();
	ТекущийНомерОбъекта = 0;
	
	Для Каждого ИспользуемыйОбъект из ОбъектыОбработчика Цикл	
		
		БиблиотекиОбъекта = ВхождениеВБиблиотеки[ИспользуемыйОбъект];
		ТекущийНомерОбъекта = ТекущийНомерОбъекта + 1;
		БиблиотекаИсточникТега = БиблиотекаИсточникТега(БиблиотекиОбъекта, ТекущаяБиблиотека, ИнформацияПоБиблиотекам);
		
		Первый = ТекущийНомерОбъекта = 1;
		Последний = ТекущийНомерОбъекта = ВсегоОбъектов;
		Если Первый Тогда
			
			Если БиблиотекаИсточникТега.Количество() > 0 Тогда
				ТекстОбъектов = """""";
			Иначе
				ТекстОбъектов = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого БиблиотекаТега Из БиблиотекаИсточникТега Цикл
			ТэгОбъекта = ИнформацияПоБиблиотекам[БиблиотекаТега].ОткрывающийТэг;
			Если ТэгиОбработчика = Неопределено ИЛИ СтрНачинаетсяС(ТэгиОбработчика.ОткрывающийТэг, ТэгОбъекта) = 0 Тогда
				ТекстОбъектов = ТекстОбъектов + "
				|	" + ИнформацияПоБиблиотекам[БиблиотекаТега].ОткрывающийТэг;
			КонецЕсли;
		КонецЦикла;
		
		Если Первый И БиблиотекаИсточникТега.Количество() = 0 Тогда
			ТекстОбъектов = ТекстОбъектов + """" + ИспользуемыйОбъект + ?(Последний, """", ",""");
		Иначе	
			ТекстОбъектов = ТекстОбъектов + "
			|"  + Символы.Таб + Символы.Таб + "+ """ + ИспользуемыйОбъект + ?(Последний, """", ",""");
		КонецЕсли;
		
		Для Индекс = 0 По БиблиотекаИсточникТега.ВГраница() Цикл
			БиблиотекаТега = БиблиотекаИсточникТега[БиблиотекаИсточникТега.ВГраница() - Индекс];
			ТэгОбъекта = ИнформацияПоБиблиотекам[БиблиотекаТега].ЗакрывающийТэг;
			Если ТэгиОбработчика = Неопределено ИЛИ СтрНачинаетсяС(ТэгиОбработчика.ЗакрывающийТэг, ТэгОбъекта) = 0 Тогда
				ТекстОбъектов = ТекстОбъектов + "
				|	" + ИнформацияПоБиблиотекам[БиблиотекаТега].ЗакрывающийТэг;
			КонецЕсли;
		КонецЦикла;
		Если БиблиотекаИсточникТега.Количество() > 0 Тогда
			ТекстОбъектов = ТекстОбъектов
							+ ?(ТекущийНомерОбъекта = ВсегоОбъектов, "
																	|	", "");
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОбъектов) И БиблиотекаИсточникТега.Количество() > 0 Тогда
		Для Каждого БиблиотекаТега Из БиблиотекаИсточникТега Цикл
			ЛишниеТэги = Символы.Таб + ИнформацияПоБиблиотекам[БиблиотекаТега].ЗакрывающийТэг + Символы.ПС
						+ Символы.Таб + ИнформацияПоБиблиотекам[БиблиотекаТега].ОткрывающийТэг + Символы.ПС;
			ТекстОбъектов = СтрЗаменить(ТекстОбъектов, ЛишниеТэги, "");
		КонецЦикла;
	КонецЕсли;
	
	Возврат "
	|	Обработчик." + ИмяСвойства + " = "  + ?(ПустаяСтрока(ТекстОбъектов), """""",ТекстОбъектов) + ";";
	
КонецФункции

Функция БиблиотекаИсточникТега(ОписанияВхожденийВБиблиотеку, ТекущаяБиблиотека, ИнформацияПоБиблиотекам)
	
	ТегиБиблиотек = Новый СписокЗначений;
	БиблиотекаИсточникТега = Новый Массив;
	ЭтоМодульЛокализации = ИнформацияПоБиблиотекам[ТекущаяБиблиотека].ЭтоМодульЛокализации;
	Для Каждого ОписаниеВхожденияВБиблиотеку из ОписанияВхожденийВБиблиотеку Цикл
		Если Не ОписаниеВхожденияВБиблиотеку.ОбъектВходитВКонфигурацию Тогда
			УровеньВложенности = ИнформацияПоБиблиотекам[ОписаниеВхожденияВБиблиотеку.Библиотека].УровеньВложенности;
			Если УровеньВложенности = 0 Тогда
				УровеньВложенности = "9999";
			КонецЕсли;
			Если НЕ ЭтоМодульЛокализации ИЛИ ОписаниеВхожденияВБиблиотеку.Библиотека <> ТекущаяБиблиотека Тогда
				ТегиБиблиотек.Добавить(ОписаниеВхожденияВБиблиотеку.Библиотека, УровеньВложенности);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТегиБиблиотек.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	БиблиотекаИсточникТега = ТегиБиблиотек.ВыгрузитьЗначения();
	Возврат БиблиотекаИсточникТега;
	
КонецФункции

// Определяет уровень вложенности библиотек.
// Все библиотеки вложены друг в друга по принципу матрешки
// - каждая библиотека потребитель включает в себя библиотеку поставщика 
//		и все его вложеные библиотеки поставщики
// т.о. чем большее количество вхождений у библиотеки, тем "глубже" ее уровень вложенности
// Библиотека с уровнем вложенности один - "матрешка в сборе" (например УП)
// 	содержит в себе библиотеку поставщик с уровнем вложенности 2 (например КА)
// 	и сождержит в себе библиотеку поставщик с уровнем вложенности 3 (например УТ)
//
// Библиотека с уровнем вложенности два - "матрешка без первой" (в нашем случае КА)
// 	содержит в себе библиотеку поставщик с уровнем вложенности 3 (в нашем случае УТ)
//и т.д.
//
Процедура ОпределитьВложенностьБиблиотек(ИнформацияПоБиблиотекам, ВсеБиблиотеки)
	
	Для Каждого Поставщик из ИнформацияПоБиблиотекам Цикл
		БиблиотекаПоставщик = Поставщик.Значение;
		Если ЗначениеЗаполнено(БиблиотекаПоставщик.ОсновнаяПодсистема) И НЕ БиблиотекаПоставщик.ЭтоМодульЛокализации Тогда
			Библиотека = ВсеБиблиотеки.Найти(Поставщик.Ключ, "Библиотека");
			Если Библиотека <> Неопределено Тогда
				Для Каждого Потребитель из ИнформацияПоБиблиотекам Цикл
					БиблиотекаПотребитель = Потребитель.Значение;
					Если БиблиотекаПотребитель.ВсеПодсистемы.Найти(БиблиотекаПоставщик.ОсновнаяПодсистема) <> Неопределено Тогда
						Библиотека.УровеньВложенности = Библиотека.УровеньВложенности + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИнфомарцияБиблиотеки Из ИнформацияПоБиблиотекам Цикл
		Библиотека = ВсеБиблиотеки.Найти(ИнфомарцияБиблиотеки.Ключ, "Библиотека");
		ИнфомарцияБиблиотеки.Значение.Вставить("УровеньВложенности", 0);
		Если Библиотека <> Неопределено Тогда
			ИнфомарцияБиблиотеки.Значение.УровеньВложенности = Библиотека.УровеньВложенности;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьТэгиБиблиотеки(ВыборкаПоОбработчикам, ТЗОбработчикиБиблиотек, ИнформацияПоБиблиотекам)
	
	Результат = Новый Структура("ОткрывающийТэг, ЗакрывающийТэг","","");
	Инфо = ТЗОбработчикиБиблиотек.Найти(ВыборкаПоОбработчикам.ОбработчикОбновления,"ОбработчикОбновления");
	Если Инфо <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ИнформацияПоБиблиотекам[Инфо.Библиотека]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияПоБиблиотеке(Проект, Библиотека)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проекты.ВПроектеРазрабатываютсяНесколькоКонфигураций,
	|	ЕСТЬNULL(СлужебныеПодсистемы.Подсистема, ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)) КАК ОсновнаяПодсистема,
	|	ЕСТЬNULL(СлужебныеПодсистемы.ЗакрывающийТэг, """") КАК ЗакрывающийТэг,
	|	ЕСТЬNULL(СлужебныеПодсистемы.ОткрывающийТэг, """") КАК ОткрывающийТэг,
	|	БиблиотекиОбновления.ОбщийМодуль.Имя КАК ОбщийМодуль,
	|	БиблиотекиОбновления.МодульЛокализации КАК ЭтоМодульЛокализации
	|ПОМЕСТИТЬ ДанныеОсновнойПодсистемы
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты.МодулиОбновленияИнформационнойБазы КАК БиблиотекиОбновления
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты.КонфигурацииРазрабатываемыеВПроекте КАК СлужебныеПодсистемы
	|			ПО БиблиотекиОбновления.Ссылка = СлужебныеПодсистемы.Ссылка
	|				И БиблиотекиОбновления.Подсистема = СлужебныеПодсистемы.Подсистема
	|		ПО Проекты.Ссылка = БиблиотекиОбновления.Ссылка
	|			И (БиблиотекиОбновления.Библиотека = &Библиотека)
	|ГДЕ
	|	Проекты.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОсновнойПодсистемы.ВПроектеРазрабатываютсяНесколькоКонфигураций КАК ВПроектеРазрабатываютсяНесколькоКонфигураций,
	|	ДанныеОсновнойПодсистемы.ОсновнаяПодсистема КАК ОсновнаяПодсистема,
	|	ДанныеОсновнойПодсистемы.ЗакрывающийТэг КАК ЗакрывающийТэг,
	|	ДанныеОсновнойПодсистемы.ОткрывающийТэг КАК ОткрывающийТэг,
	|	ДанныеОсновнойПодсистемы.ОбщийМодуль КАК ОбщийМодуль,
	|	ДанныеОсновнойПодсистемы.ЭтоМодульЛокализации КАК ЭтоМодульЛокализации
	|ИЗ
	|	ДанныеОсновнойПодсистемы КАК ДанныеОсновнойПодсистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроектыПодсистемыВходящиеВКонфигурацию.ДополнительнаяПодсистема КАК ДополнительнаяПодсистема
	|ИЗ
	|	ДанныеОсновнойПодсистемы КАК ДанныеОсновнойПодсистемы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты.ПодсистемыВходящиеВКонфигурацию КАК ПроектыПодсистемыВходящиеВКонфигурацию
	|		ПО ДанныеОсновнойПодсистемы.ОсновнаяПодсистема = ПроектыПодсистемыВходящиеВКонфигурацию.ОсновнаяПодсистема
	|			И (ПроектыПодсистемыВходящиеВКонфигурацию.Ссылка = &Проект)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотека", Библиотека);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ИнформацияПоБиблиотеке = Новый Структура;
	ИнформацияПоБиблиотеке.Вставить("ВПроектеРазрабатываютсяНесколькоКонфигураций");
	ИнформацияПоБиблиотеке.Вставить("ОсновнаяПодсистема");
	ИнформацияПоБиблиотеке.Вставить("ЗакрывающийТэг");
	ИнформацияПоБиблиотеке.Вставить("ОткрывающийТэг");
	ИнформацияПоБиблиотеке.Вставить("ВсеПодсистемы");
	ИнформацияПоБиблиотеке.Вставить("ОбщийМодуль");
	ИнформацияПоБиблиотеке.Вставить("ЭтоМодульЛокализации");
	
	ВыборкаПоОсновнойПодсистеме = РезультатыЗапроса[1].Выбрать();
	ВыборкаПоОсновнойПодсистеме.Следующий();
	
	ЗаполнитьЗначенияСвойств(ИнформацияПоБиблиотеке, ВыборкаПоОсновнойПодсистеме);
	
	ИнформацияПоБиблиотеке.ВсеПодсистемы = РезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("ДополнительнаяПодсистема");
	ИнформацияПоБиблиотеке.ВсеПодсистемы.Добавить(ИнформацияПоБиблиотеке.ОсновнаяПодсистема);
	
	Возврат ИнформацияПоБиблиотеке;
	
КонецФункции

Функция БиблиотекиНеразрабатываемыеВТекущемПроекте(Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МодулиОбновленияИБ.Библиотека КАК Библиотека
	|ИЗ
	|	Справочник.Проекты.МодулиОбновленияИнформационнойБазы КАК МодулиОбновленияИБ
	|ГДЕ
	|	МодулиОбновленияИБ.Ссылка = &Проект
	|	И НЕ МодулиОбновленияИБ.ЭтоПодсистемаТекущегоПроекта
	|	И МодулиОбновленияИБ.РежимВыполненияОтложенныхОбработчиков = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОтложенныхОбработчиковОбновления.Параллельно)";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Библиотека");
	
КонецФункции

#КонецОбласти
