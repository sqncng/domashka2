
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеФильтра = 0;
	ТекущийШаг = "Выбор проектов";
	
	УстановитьВидимостьКомандДействийИЭлементов();
	УстановитьДоступностьКомандФильтра();
	
	ОтборПоИзменениям = "Без фильтра";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ОтборПоИзменениямПриИзменении(Элемент)
	
	ПриИзмененииФильтраНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФункции

&НаКлиенте
Процедура ФункцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборОбъектаВТаблице(ФункцииСОтбором, ВыбраннаяСтрока, Поле);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элементы.Функции.ТекущиеДанные <> Неопределено Тогда
		
		ОбработанныеСтроки = Новый Соответствие;
		ОбработанныеСтроки.Вставить(Элементы.Функции.ТекущиеДанные.ИдентификаторИсходнойСтроки,
		                            Элементы.Функции.ТекущиеДанные);
		
	    ПеренестиИзмененияВФункции(ОбработанныеСтроки, Функции);
		
	Конецесли;
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ФункцииПравилоИспользованияПриИзменении(Элемент)
	
	ОбработатьИзменениеПравилаИспользования(Элементы.Функции.ТекущиеДанные);
	ПроверитьОчиститьДатуОбновленияПриемника(Элементы.Функции.ТекущиеДанные);
	
КонецПроцедуры
									   
&НаКлиенте
Процедура ФункцииПравилоИспользованияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцииПриемникПриИзменении(Элемент)
	
	ОбработатьИзменениеПриемника(Элементы.Функции.ТекущиеДанные);
	ПроверитьОчиститьДатуОбновленияПриемника(Элементы.Функции.ТекущиеДанные);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПрофилиПользователей

&НаКлиенте
Процедура ПрофилиПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборОбъектаВТаблице(ПрофилиПользователей, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейПравилоИспользованияПриИзменении(Элемент)
	
	ОбработатьИзменениеПравилаИспользования(Элементы.ПрофилиПользователей.ТекущиеДанные);
	ПроверитьОчиститьДатуОбновленияПриемника(Элементы.ПрофилиПользователей.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейПравилоИспользованияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейПриемникПриИзменении(Элемент)
	
	ОбработатьИзменениеПриемника(Элементы.ПрофилиПользователей.ТекущиеДанные);
	ПроверитьОчиститьДатуОбновленияПриемника(Элементы.ПрофилиПользователей.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВидыДоступа

&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОбработатьВыборОбъектаВТаблице(ВидыДоступа, ВыбраннаяСтрока, Поле);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПравилоИспользованияПриИзменении(Элемент)
	
	ОбработатьИзменениеПравилаИспользования(Элементы.ВидыДоступа.ТекущиеДанные);
	ПроверитьОчиститьДатуОбновленияПриемника(Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПравилоИспользованияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриемникПриИзменении(Элемент)
	
	ОбработатьИзменениеПриемника(Элементы.ВидыДоступа.ТекущиеДанные);
	ПроверитьОчиститьДатуОбновленияПриемника(Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВидыДоступаУстановитьОтметки(Команда)
	
	ВыделенныеСтроки = Элементы.ВидыДоступа.ВыделенныеСтроки;
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьОтметкиВТаблице(ВидыДоступа, Истина, ОбработанныеСтроки, "ВидыДоступа", ВыделенныеСтроки);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаСнятьОтметки(Команда)
	
	ВыделенныеСтроки = Элементы.ВидыДоступа.ВыделенныеСтроки;
	ОбработанныеСтроки = Новый Соответствие;
	УстановитьОтметкиВТаблице(ВидыДоступа, Ложь, ОбработанныеСтроки, "ВидыДоступа", ВыделенныеСтроки);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейУстановитьОтметки(Команда)
	
	ВыделенныеСтроки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	ОбработанныеСтроки = Новый Соответствие;
	УстановитьОтметкиВТаблице(ПрофилиПользователей, Истина, ОбработанныеСтроки, "ПрофилиПользователей", ВыделенныеСтроки);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейСнятьОтметки(Команда)
	
	ВыделенныеСтроки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	ОбработанныеСтроки = Новый Соответствие;
	УстановитьОтметкиВТаблице(ПрофилиПользователей, Ложь, ОбработанныеСтроки, "ПрофилиПользователей", ВыделенныеСтроки);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ФункцииУстановитьОтметки(Команда)
	
	ВыделенныеСтроки = Элементы.Функции.ВыделенныеСтроки;
	ОбработанныеСтроки = Новый Соответствие;
	УстановитьОтметкиВТаблице(ФункцииСОтбором, Истина, ОбработанныеСтроки, "ФункцииСОтбором", ВыделенныеСтроки);
	
	ПеренестиИзмененияВФункции(ОбработанныеСтроки, Функции);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ФункцииСнятьОтметки(Команда)
	
	ВыделенныеСтроки = Элементы.Функции.ВыделенныеСтроки;
	ОбработанныеСтроки = Новый Соответствие;
	УстановитьОтметкиВТаблице(ФункцииСОтбором, Ложь, ОбработанныеСтроки, "ФункцииСОтбором", ВыделенныеСтроки);
	
	ПеренестиИзмененияВФункции(ОбработанныеСтроки, Функции);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСравнениеОбъектов(Команда)
	
	ТекущийШаг = "Сравнение объектов";
	ВыполнитьСравнениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаУстановитьПравилоБезИзменений(Команда)
	
	СтрокиДляОбработки = Элементы.ВидыДоступа.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ВидыДоступа,
	                                                ОбработанныеСтроки, "ВидыДоступа");
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаУстановитьПравилоСИзменениями(Команда)
	
	СтрокиДляОбработки = Элементы.ВидыДоступа.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ВидыДоступа,
	                                                ОбработанныеСтроки, "ВидыДоступа");
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаУстановитьПравилоНеИспользуется(Команда)
	
	СтрокиДляОбработки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.НеИспользуется");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ВидыДоступа,
	                                                ОбработанныеСтроки, "ВидыДоступа");
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейУстановитьПравилоБезИзменений(Команда)
	
	СтрокиДляОбработки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ПрофилиПользователей,
	                                                ОбработанныеСтроки, "ПрофилиПользователей");
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейУстановитьПравилоСИзменениями(Команда)
	
	СтрокиДляОбработки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ПрофилиПользователей,
	                                                ОбработанныеСтроки, "ПрофилиПользователей");
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейУстановитьПравилоНеИспользуется(Команда)
	
	СтрокиДляОбработки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.НеИспользуется");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ПрофилиПользователей,
	                                                ОбработанныеСтроки, "ПрофилиПользователей");
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ФункцииУстановитьПравилоБезИзменений(Команда)
	
	СтрокиДляОбработки = Элементы.Функции.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ФункцииСОтбором,
	                                                ОбработанныеСтроки, "Функции");
	
    ПеренестиИзмененияВФункции(ОбработанныеСтроки, Функции);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ФункцииУстановитьПравилоСИзменениями(Команда)
	
	СтрокиДляОбработки = Элементы.Функции.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ФункцииСОтбором,
	                                                ОбработанныеСтроки, "Функции");
	
	ПеренестиИзмененияВФункции(ОбработанныеСтроки, Функции);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ФункцииУстановитьПравилоНеИспользуется(Команда)
	
	СтрокиДляОбработки = Элементы.Функции.ВыделенныеСтроки;
	Правило = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.НеИспользуется");
	
	ОбработанныеСтроки = Новый Соответствие;
	
	УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, ФункцииСОтбором,
	                                                ОбработанныеСтроки, "Функции");
	
	ПеренестиИзмененияВФункции(ОбработанныеСтроки, Функции);
	
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение);
						  
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеОбновление(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ВыполнитьКонтроль(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийШаг = "Обновление объектов";
	
	ТекстПротокола.Очистить();
	ЗапуститьФоновоеЗаданиеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьПереносИзменений(Команда)
	
	ПодтвердитьПереносИзмененийНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Выполняется сравнение источника и приемника на текущий момент,
// с учетом текущего (установленного в диалоге) соответствия объектов.
Процедура СравнитьОбъекты(Команда)
	
	ОчиститьСообщения();
	
	Источник = Неопределено;
	Приемник = Неопределено;
	ДатаОбновления = '00010101';
	
	Отказ = Ложь;
	
	ПроверитьДанныеПередСравнением(Истина, Истина, Источник, Приемник, ДатаОбновления, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСравнениеИсточникаИПриемника(Источник, Приемник, ДатаОбновления);
	
КонецПроцедуры

&НаКлиенте
// Выполняет сравнение состояния источника на текущий момент
// с состоянием источника в результате последнего обновления.
Процедура ПоказатьИзмененияИсточникаПослеПоследнегоОбновления(Команда)
	
	ОчиститьСообщения();
	
	Источник = Неопределено;
	Приемник = Неопределено;
	ДатаОбновления = '00010101';
	
	Отказ = Ложь;
	
	ПроверитьДанныеПередСравнением(Истина, Ложь, Источник, Приемник, ДатаОбновления, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСравнениеВерсийОбъекта(Источник, ДатаОбновления);
	
КонецПроцедуры

&НаКлиенте
// Выполняет сравнение состояния приемника на текущий момент
// с состоянием приемника в результате последнего обновления.
Процедура ПоказатьИзмененияПриемникаПослеПоследнегоОбновления(Команда)
	
	ОчиститьСообщения();
	
	Источник = Неопределено;
	Приемник = Неопределено;
	ДатаОбновления = '00010101';
	
	Отказ = Ложь;
	
	ПроверитьДанныеПередСравнением(Ложь, Истина, Источник, Приемник, ДатаОбновления, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСравнениеВерсийОбъекта(Приемник, ДатаОбновления);
	
КонецПроцедуры

&НаКлиенте
// Выполняет сравнение источника и приемника на момент
// последнего обновления.
Процедура ПоказатьРазличияОбъектовПриПоследнемОбновлении(Команда)
	
	ОчиститьСообщения();
	
	Источник = Неопределено;
	Приемник = Неопределено;
	ДатаОбновления = '00010101';
	
	Отказ = Ложь;
	
	ПроверитьДанныеПередСравнением(Истина, Истина, Источник, Приемник, ДатаОбновления, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьСравнениеИсточникаИПриемникаНаМоментПоследнегоОбновления(Источник, Приемник, ДатаОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыБезИзменений(Команда)
	
	ЗначениеФильтра = 0;
	ПриИзмененииФильтраНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыСИзменениями(Команда)
	
	ЗначениеФильтра = 1;
	ПриИзмененииФильтраНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НеиспользуемыеОбъекты(Команда)
	
	ЗначениеФильтра = 3;
	ПриИзмененииФильтраНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыеОбъекты(Команда)
	
	ЗначениеФильтра = 2;
	ПриИзмененииФильтраНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьВидыДоступа()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка,
	|	ВидыДоступа.Ссылка КАК Источник,
	|	ВидыДоступа.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ЕСТЬNULL(ИспользованиеОбъектов.Приемник, ЗНАЧЕНИЕ(Справочник.ВидыДоступа.ПустаяСсылка)) КАК Приемник,
	|	ЕСТЬNULL(ИспользованиеОбъектов.Приемник, ЗНАЧЕНИЕ(Справочник.ВидыДоступа.ПустаяСсылка)) КАК ИсходныйПриемник,
	|	ЕСТЬNULL(ИспользованиеОбъектов.ПравилоИспользования, ЗНАЧЕНИЕ(Перечисление.ПравилаиспользованияОбъектов.ПустаяСсылка)) КАК ПравилоИспользования,
	|	ЕСТЬNULL(ИспользованиеОбъектов.ПравилоИспользования, ЗНАЧЕНИЕ(Перечисление.ПравилаиспользованияОбъектов.ПустаяСсылка)) КАК ИсходноеПравилоИспользования,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияИсточника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинкиИзмененийИсточника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияПриемника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинкиИзмененийПриемника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияИсточника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзмененияИсточника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияПриемника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзмененияПриемника,
	|	ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника КАК ДатаОбновленияПриемникаИзИсточника,
	|	ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника КАК ДатаОбновленияПриемникаИзИсточникаИсходная,
	|	ВЫБОР
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|			ТОГДА 0
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.СИзменениями)
	|			ТОГДА 1
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)
	|			ТОГДА 2
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК ИндексКартинкиПравилаИспользования,
	|	ВЫБОР
	|		КОГДА ВидыДоступа.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ВидыДоступа КАК ВидыДоступа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеОбъектов КАК ИспользованиеОбъектов
	|		ПО (ИспользованиеОбъектов.Источник = ВидыДоступа.Ссылка)
	|			И (ИспользованиеОбъектов.Приемник.Владелец = &ПроектПриемник
	|				ИЛИ ИспользованиеОбъектов.Проект = &ПроектПриемник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияИсточника
	|		ПО ВидыДоступа.Ссылка = ДатыИзмененияИсточника.КонтролируемыйОбъект
	|			И (ДатыИзмененияИсточника.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.Прочее))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияПриемника
	|		ПО (ИспользованиеОбъектов.Приемник = ДатыИзмененияПриемника.КонтролируемыйОбъект)
	|			И (ДатыИзмененияПриемника.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.Прочее))
	|ГДЕ
	|	ВидыДоступа.Владелец = &ПроектИсточник
	|	И (ИспользованиеОбъектов.Приемник.Владелец = &ПроектПриемник
	|			ИЛИ ИспользованиеОбъектов.Проект = &ПроектПриемник
	|			ИЛИ ИспользованиеОбъектов.ПравилоИспользования ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыДоступа.Код"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроектИсточник", ПроектИсточник);
	Запрос.УстановитьПараметр("ПроектПриемник", ПроектПриемник);
	
	ВидыДоступа.Загрузить(Запрос.Выполнить().Выгрузить());
	УстановитьОтборВидовДоступа();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрофилиПользователей()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка,
	|	ПрофилиПользователей.Ссылка КАК Источник,
	|	ПрофилиПользователей.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ЕСТЬNULL(ИспользованиеОбъектов.Приемник, ЗНАЧЕНИЕ(Справочник.ВидыДоступа.ПустаяСсылка)) КАК Приемник,
	|	ЕСТЬNULL(ИспользованиеОбъектов.Приемник, ЗНАЧЕНИЕ(Справочник.ВидыДоступа.ПустаяСсылка)) КАК ИсходныйПриемник,
	|	ЕСТЬNULL(ИспользованиеОбъектов.ПравилоИспользования, ЗНАЧЕНИЕ(Перечисление.ПравилаиспользованияОбъектов.ПустаяСсылка)) КАК ПравилоИспользования,
	|	ЕСТЬNULL(ИспользованиеОбъектов.ПравилоИспользования, ЗНАЧЕНИЕ(Перечисление.ПравилаиспользованияОбъектов.ПустаяСсылка)) КАК ИсходноеПравилоИспользования,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияИсточника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинкиИзмененийИсточника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияПриемника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинкиИзмененийПриемника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияИсточника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзмененияИсточника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияПриемника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзмененияПриемника,
	|	ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника КАК ДатаОбновленияПриемникаИзИсточника,
	|	ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника КАК ДатаОбновленияПриемникаИзИсточникаИсходная,
	|	ВЫБОР
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|			ТОГДА 0
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.СИзменениями)
	|			ТОГДА 1
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)
	|			ТОГДА 2
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК ИндексКартинкиПравилаИспользования,
	|	ВЫБОР
	|		КОГДА ПрофилиПользователей.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ПрофилиПользователей КАК ПрофилиПользователей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеОбъектов КАК ИспользованиеОбъектов
	|		ПО (ИспользованиеОбъектов.Источник = ПрофилиПользователей.Ссылка)
	|			И (ИспользованиеОбъектов.Приемник.Владелец = &ПроектПриемник
	|				ИЛИ ИспользованиеОбъектов.Проект = &ПроектПриемник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияИсточника
	|		ПО ПрофилиПользователей.Ссылка = ДатыИзмененияИсточника.КонтролируемыйОбъект
	|			И (ДатыИзмененияИсточника.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.Прочее))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияПриемника
	|		ПО (ИспользованиеОбъектов.Приемник = ДатыИзмененияПриемника.КонтролируемыйОбъект)
	|			И (ДатыИзмененияПриемника.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.Прочее))
	|ГДЕ
	|	ПрофилиПользователей.Владелец = &ПроектИсточник
	|	И НЕ ПрофилиПользователей.ЭтоГруппа
	|	И (ИспользованиеОбъектов.Приемник.Владелец = &ПроектПриемник
	|			ИЛИ ИспользованиеОбъектов.Проект = &ПроектПриемник
	|			ИЛИ ИспользованиеОбъектов.ПравилоИспользования ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофилиПользователей.ПолныйКод"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроектИсточник", ПроектИсточник);
	Запрос.УстановитьПараметр("ПроектПриемник", ПроектПриемник);
	
	ПрофилиПользователей.Загрузить(Запрос.Выполнить().Выгрузить());
	УстановитьОтборПрофилей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункции()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка,
	|	ФункцииСистемы.Ссылка КАК Источник,
	|	ФункцииСистемы.ПометкаУдаления КАК ПометкаУдаленияИсточника,
	|	ФункцииСистемы.Наименование КАК НаименованиеИсточник,
	|	ФункцииСистемы.ОтображаетсяВИнтерфейсе КАК ОтображаетсяВИнтерфейсеИсточник,
	|	ЕСТЬNULL(ИспользованиеОбъектов.Приемник, ЗНАЧЕНИЕ(Справочник.ФункцииСистемы.ПустаяСсылка)) КАК Приемник,
	|	ЕСТЬNULL(ИспользованиеОбъектов.Приемник, ЗНАЧЕНИЕ(Справочник.ФункцииСистемы.ПустаяСсылка)) КАК ИсходныйПриемник,
	|	ИспользованиеОбъектов.Приемник.Наименование КАК НаименованиеПриемник,
	|	ИспользованиеОбъектов.Приемник.ОтображаетсяВИнтерфейсе КАК ОтображаетсяВИнтерфейсеПриемник,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияИсточника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинкиИзмененийИсточника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияПриемника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ИндексКартинкиИзмененийПриемника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияИсточника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзмененияИсточника,
	|	ВЫБОР
	|		КОГДА ДатыИзмененияПриемника.ДатаИзменения > ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника
	|				И ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника <> ДАТАВРЕМЯ(1, 1, 1)
	|				И НЕ ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзмененияПриемника,
	|	ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника КАК ДатаОбновленияПриемникаИзИсточника,
	|	ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника КАК ДатаОбновленияПриемникаИзИсточникаИсходная,
	|	ВЫБОР
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|			ТОГДА 0
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.СИзменениями)
	|			ТОГДА 1
	|		КОГДА ИспользованиеОбъектов.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)
	|			ТОГДА 2
	|		ИНАЧЕ 9
	|	КОНЕЦ КАК ИндексКартинкиПравилаИспользования,
	|	ЕСТЬNULL(ИспользованиеОбъектов.ПравилоИспользования, ЗНАЧЕНИЕ(Перечисление.ПравилаиспользованияОбъектов.ПустаяСсылка)) КАК ПравилоИспользования,
	|	ЕСТЬNULL(ИспользованиеОбъектов.ПравилоИспользования, ЗНАЧЕНИЕ(Перечисление.ПравилаиспользованияОбъектов.ПустаяСсылка)) КАК ИсходноеПравилоИспользования,
	|	ФункцииСистемы.ЭтоГруппа КАК ЭтоГруппа,
	|	ВЫБОР
	|		КОГДА ФункцииСистемы.ЭтоГруппа И ФункцииСистемы.ПометкаУдаления
	|			ТОГДА 3
	|		КОГДА ФункцииСистемы.ЭтоГруппа И НЕ ФункцииСистемы.ПометкаУдаления
	|			ТОГДА 2
	|		КОГДА НЕ ФункцииСистемы.ЭтоГруппа И ФункцииСистемы.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ФункцииСистемы КАК ФункцииСистемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИспользованиеОбъектов КАК ИспользованиеОбъектов
	|		ПО (ИспользованиеОбъектов.Источник = ФункцииСистемы.Ссылка)
	|			И (ИспользованиеОбъектов.Приемник.Владелец = &ПроектПриемник
	|				ИЛИ ИспользованиеОбъектов.Проект = &ПроектПриемник)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияИсточника
	|		ПО ФункцииСистемы.Ссылка = ДатыИзмененияИсточника.КонтролируемыйОбъект
	|			И (ДатыИзмененияИсточника.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.Функция))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияПриемника
	|		ПО (ИспользованиеОбъектов.Приемник = ДатыИзмененияПриемника.КонтролируемыйОбъект)
	|			И (ДатыИзмененияПриемника.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.Функция))
	|ГДЕ
	|	ФункцииСистемы.Владелец = &ПроектИсточник
	|	И (ИспользованиеОбъектов.Приемник.Владелец = &ПроектПриемник
	|			ИЛИ ИспользованиеОбъектов.Проект = &ПроектПриемник
	|			ИЛИ ИспользованиеОбъектов.ПравилоИспользования ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Источник ИЕРАРХИЯ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроектПриемник", ПроектПриемник);
	Запрос.УстановитьПараметр("ПроектИсточник", ПроектИсточник);
	
	ДеревоФункций = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Функции.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьФункцииПоДереву(ДеревоФункций.Строки, Функции.ПолучитьЭлементы(), Неопределено);
	
	ЗаполнитьФункцииСОтбором();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДоступаИсточника()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДоступа.Ссылка КАК Источник,
	|	ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений) КАК ПравилоИспользования,
	|	0 КАК ИндексКартинкиПравилаИспользования,
	|	ВЫБОР
	|		КОГДА ВидыДоступа.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Владелец = &ПроектИсточник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыДоступа.Код"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроектИсточник", ПроектИсточник);
	
	ВидыДоступа.Загрузить(Запрос.Выполнить().Выгрузить());
	 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрофилиПользователейИсточника()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиПользователей.Ссылка КАК Источник,
	|	ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений) КАК ПравилоИспользования,
	|	0 КАК ИндексКартинкиПравилаИспользования,
	|	ВЫБОР
	|		КОГДА ПрофилиПользователей.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ПрофилиПользователей КАК ПрофилиПользователей
	|ГДЕ
	|	ПрофилиПользователей.Владелец = &ПроектИсточник
	|	И НЕ ПрофилиПользователей.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофилиПользователей.ПолныйКод"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроектИсточник", ПроектИсточник);
	
	ПрофилиПользователей.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункцииИсточника()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемы.Наименование КАК НаименованиеИсточник,
	|	ФункцииСистемы.ОтображаетсяВИнтерфейсе КАК ОтображаетсяВИнтерфейсеИсточник,
	|	ФункцииСистемы.Ссылка КАК Источник,
	|	ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений) КАК ПравилоИспользования,
	|	ФункцииСистемы.ЭтоГруппа КАК ЭтоГруппа,
	|	0 КАК ИндексКартинкиПравилаИспользования,
	|	ВЫБОР
	|		КОГДА ФункцииСистемы.ЭтоГруппа И ФункцииСистемы.ПометкаУдаления
	|			ТОГДА 3
	|		КОГДА ФункцииСистемы.ЭтоГруппа И НЕ ФункцииСистемы.ПометкаУдаления
	|			ТОГДА 2
	|		КОГДА НЕ ФункцииСистемы.ЭтоГруппа И ФункцииСистемы.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	Справочник.ФункцииСистемы КАК ФункцииСистемы
	|ГДЕ
	|	ФункцииСистемы.Владелец = &ПроектИсточник
	|
	|УПОРЯДОЧИТЬ ПО
	|	Источник ИЕРАРХИЯ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПроектИсточник", ПроектИсточник);
	
	ДеревоФункций = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Функции.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьФункцииПоДереву(ДеревоФункций.Строки, Функции.ПолучитьЭлементы(), Неопределено);
	
	ЗаполнитьФункцииСОтбором();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоПроектам()
	
	ЗаполнитьВидыДоступа();
	ЗаполнитьПрофилиПользователей();
	ЗаполнитьФункции();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоИсточнику()
	
	ЗаполнитьВидыДоступаИсточника();
	ЗаполнитьПрофилиПользователейисточника();
	ЗаполнитьФункцииИсточника();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункцииПоДереву(СтрокиДерева, СтрокиФункций, СтрокаРодитель)
	
	ВходитВОтборБезИзмененийЕстьИзменения = Ложь;
	ВходитВОтборБезИзмененийНетИзменений = Ложь;
	ВходитВОтборБезИзмененийПомеченныеНаУдаление = Ложь;
	
	ВходитВОтборСИзменениямиЕстьИзменения = Ложь;
	ВходитВОтборСИзменениямиНетИзменений = Ложь;
	ВходитВОтборСИзменениямиПомеченныеНаУдаление = Ложь;
	
	ВходитВОтборНеиспользуемыеЕстьИзменения = Ложь;
	ВходитВОтборНеиспользуемыеНетИзменений = Ложь;
	ВходитВОтборНеиспользуемыеПомеченныеНаУдаление = Ложь;
	
	ВходитВОтборНовыеЕстьИзменения = Ложь;
	ВходитВОтборНовыеНетИзменений = Ложь;
	ВходитВотборНовыеПомеченныеНаУдаление = Ложь;
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		СтрокаФункции = СтрокиФункций.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаФункции, СтрокаДерева);
		
		ЗаполнитьФункцииПоДереву(СтрокаДерева.Строки, СтрокаФункции.ПолучитьЭлементы(), СтрокаФункции);
		
		Если СтрокаФункции.ИсходноеПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
			
			Если СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборБезИзмененийЕстьИзменения Тогда
				ВходитВОтборБезИзмененийЕстьИзменения = Истина;
				СтрокаФункции.ВходитВОтборБезИзмененийЕстьИзменения = Истина;
			КонецЕсли;
			
			Если НЕ СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборБезИзмененийНетИзменений Тогда
				ВходитВОтборБезИзмененийНетИзменений = Истина;
				СтрокаФункции.ВходитВОтборБезИзмененийНетИзменений = Истина;
			КонецЕсли;
			
			Если СтрокаФункции.ПометкаУдаленияИсточника ИЛИ СтрокаФункции.ВходитВОтборБезИзмененийПомеченныеНаУдаление Тогда
				ВходитВОтборБезИзмененийПомеченныеНаУдаление = Истина;
				СтрокаФункции.ВходитВОтборБезИзмененийПомеченныеНаУдаление = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаФункции.ИсходноеПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.СИзменениями Тогда
			
			Если СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборСИзменениямиЕстьИзменения Тогда
				ВходитВОтборСИзменениямиЕстьИзменения = Истина;                                 
				СтрокаФункции.ВходитВОтборСИзменениямиЕстьИзменения = Истина;
			КонецЕсли;
			
			Если НЕ СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборСИзменениямиНетИзменений Тогда
				ВходитВОтборСИзменениямиНетИзменений = Истина;
				СтрокаФункции.ВходитВОтборСИзменениямиНетИзменений = Истина;
			КонецЕсли;
			
			Если СтрокаФункции.ПометкаУдаленияИсточника ИЛИ СтрокаФункции.ВходитВОтборСИзменениямиПомеченныеНаУдаление Тогда
				ВходитВОтборСИзменениямиПомеченныеНаУдаление = Истина;
				СтрокаФункции.ВходитВОтборСИзменениямиПомеченныеНаУдаление = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаФункции.ИсходноеПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
			
			Если СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборНеиспользуемыеЕстьИзменения Тогда
				ВходитВОтборНеиспользуемыеЕстьИзменения = Истина;                                 
				СтрокаФункции.ВходитВОтборНеиспользуемыеЕстьИзменения = Истина;
			КонецЕсли;
			
			Если НЕ СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборНеиспользуемыеНетИзменений Тогда
				ВходитВОтборНеиспользуемыеНетИзменений = Истина;
				СтрокаФункции.ВходитВОтборНеиспользуемыеНетИзменений = Истина;
			КонецЕсли;
			
			Если СтрокаФункции.ПометкаУдаленияИсточника ИЛИ СтрокаФункции.ВходитВОтборНеиспользуемыеПомеченныеНаУдаление Тогда
				ВходитВОтборНеиспользуемыеПомеченныеНаУдаление = Истина;
				СтрокаФункции.ВходитВОтборНеиспользуемыеПомеченныеНаУдаление = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаФункции.ИсходноеПравилоИспользования) Тогда
			
			Если СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборНовыеЕстьИзменения Тогда
				ВходитВОтборНовыеЕстьИзменения = Истина;
				СтрокаФункции.ВходитВОтборНовыеЕстьИзменения = Истина;
			КонецЕсли;
			
			Если НЕ СтрокаФункции.ЕстьИзмененияИсточника ИЛИ СтрокаФункции.ВходитВОтборНовыеНетИзменений Тогда
				ВходитВОтборНовыеНетИзменений = Истина;
				СтрокаФункции.ВходитВОтборНовыеНетИзменений = Истина;
			КонецЕсли;
			
			Если СтрокаФункции.ПометкаУдаленияИсточника ИЛИ СтрокаФункции.ВходитВОтборНовыеПомеченныеНаУдаление Тогда
				ВходитВОтборНовыеПомеченныеНаУдаление = Истина;
				СтрокаФункции.ВходитВОтборНовыеПомеченныеНаУдаление = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаРодитель <> Неопределено Тогда
		
		// без изменений
		Если ВходитВОтборБезИзмененийЕстьИзменения Тогда
			СтрокаРодитель.ВходитВОтборБезИзмененийЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ВходитВОтборБезИзмененийНетИзменений Тогда
			СтрокаРодитель.ВходитВОтборБезИзмененийНетИзменений = Истина;
		КонецЕсли;
		
		Если ВходитВОтборБезИзмененийПомеченныеНаУдаление Тогда
			СтрокаРодитель.ВходитВОтборБезИзмененийПомеченныеНаУдаление = Истина;
		КонецЕсли;
		
		// с изменениями
		
		Если ВходитВОтборСИзменениямиЕстьИзменения Тогда
			СтрокаРодитель.ВходитВОтборСИзменениямиЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ВходитВОтборСИзменениямиНетИзменений Тогда
			СтрокаРодитель.ВходитВОтборСИзменениямиНетИзменений = Истина;
		КонецЕсли;
		
		Если ВходитВОтборСИзменениямиПомеченныеНаУдаление Тогда
			СтрокаРодитель.ВходитВОтборСИзменениямиПомеченныеНаУдаление = Истина;
		КонецЕсли;
		
		// неиспользуемые
		
		Если ВходитВОтборНеиспользуемыеЕстьИзменения Тогда
			СтрокаРодитель.ВходитВОтборНеиспользуемыеЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ВходитВОтборНеиспользуемыеНетИзменений Тогда
			СтрокаРодитель.ВходитВОтборНеиспользуемыеНетИзменений = Истина;
		КонецЕсли;
		
		Если ВходитВОтборНеиспользуемыеПомеченныеНаУдаление Тогда
			СтрокаРодитель.ВходитВОтборНеиспользуемыеПомеченныеНаУдаление = Истина;
		КонецЕсли;
		
		// новые
		
		Если ВходитВОтборНовыеЕстьИзменения Тогда
			СтрокаРодитель.ВходитВОтборНовыеЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ВходитВОтборНовыеНетИзменений Тогда
			СтрокаРодитель.ВходитВОтборНовыеНетИзменений = Истина;
		КонецЕсли;
		
		Если ВходитВОтборНовыеПомеченныеНаУдаление Тогда
			СтрокаРодитель.ВходитВОтборНовыеПомеченныеНаУдаление = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФункцииСОтбором()
	
	ФункцииСОтбором.ПолучитьЭлементы().Очистить();
	
	СтрокиДерева = Функции.ПолучитьЭлементы();
	СтрокиДереваСОтбором = ФункцииСОтбором.ПолучитьЭлементы();
	
	ИмяОтбора = ИмяОтбора();
	
	ЗаполнитьСтрокиФункцийСОтбором(СтрокиДерева, СтрокиДереваСОтбором, ИмяОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиФункцийСОтбором(СтрокиДерева, СтрокиДереваСОтбором, ИмяОтбора)
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если СтрокаУдовлетворяетОтборам(СтрокаДерева, ИмяОтбора) Тогда
			
			НоваяСтрока = СтрокиДереваСОтбором.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.ИдентификаторИсходнойСтроки = СтрокаДерева.ПолучитьИдентификатор();
			
			ЗаполнитьСтрокиФункцийСОтбором(СтрокаДерева.ПолучитьЭлементы(), НоваяСтрока.ПолучитьЭлементы(), ИмяОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтрокаУдовлетворяетОтборам(СтрокаДерева, ИмяОтбора)
	
	Результат = Ложь;
	
	Если ИмяОтбора = "ВходитВОтборСИзменениями" Тогда
		
		Если СтрокаДерева.ВходитВОтборСИзменениямиЕстьИзменения
			ИЛИ СтрокаДерева.ВходитВОтборСИзменениямиНетИзменений
			ИЛИ СтрокаДерева.ВходитВОтборСИзменениямиПомеченныеНаУдаление Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяОтбора = "ВходитВОтборНовые" Тогда
		
		Если СтрокаДерева.ВходитВОтборНовыеЕстьИзменения
			ИЛИ СтрокаДерева.ВходитВОтборНовыеНетИзменений
			ИЛИ СтрокаДерева.ВходитВОтборНовыеПомеченныеНаУдаление Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяОтбора = "ВходитВОтборНеиспользуемые" Тогда
		
		Если СтрокаДерева.ВходитВОтборНеиспользуемыеЕстьИзменения
			ИЛИ СтрокаДерева.ВходитВОтборНеиспользуемыеНетИзменений
			ИЛИ СтрокаДерева.ВходитВОтборНеиспользуемыеПомеченныеНаУдаление Тогда
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли ИмяОтбора = "ВходитВОтборБезИзменений" Тогда
		
		Если СтрокаДерева.ВходитВОтборБезИзмененийЕстьИзменения
			ИЛИ СтрокаДерева.ВходитВОтборБезИзмененийНетИзменений
			ИЛИ СтрокаДерева.ВходитВОтборБезИзмененийПомеченныеНаУдаление Тогда
			Результат = Истина;
		КонецЕсли;
		
	Иначе
		Результат = СтрокаДерева[ИмяОтбора];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяОтбора()
	
	 ИмяОтбораПоИспользованию = "";
	 ИмяОтбораПоИзменениям = "";
	
	Если ЗначениеФильтра = 1 Тогда
		ИмяОтбораПоИспользованию =  "ВходитВОтборСИзменениями";
	ИначеЕсли ЗначениеФильтра = 2 Тогда
	    ИмяОтбораПоИспользованию = "ВходитВОтборНовые";	
	ИначеЕсли ЗначениеФильтра = 3 Тогда
	    ИмяОтбораПоИспользованию = "ВходитВОтборНеиспользуемые";
	Иначе // 0 - без изменений
		ИмяОтбораПоИспользованию = "ВходитВОтборБезИзменений";
	КонецЕсли;
	
	Если ОтборПоИзменениям = "Нет изменений" Тогда
		ИмяОтбораПоИзменениям = "НетИзменений";
	ИначеЕсли ОтборПоИзменениям = "Измененные" Тогда
		ИмяОтбораПоИзменениям = "ЕстьИзменения";
	ИначеЕсли ОтборПоИзменениям = "Помеченные на удаление" Тогда
		ИмяОтбораПоИзменениям = "ПомеченныеНаУдаление";
	Иначе
		ИмяОтбораПоИзменениям = "";
	Конецесли;
	
	ИмяОтбора = ИмяОтбораПоИспользованию + ИмяОтбораПоИзменениям;
	
	Возврат ИмяОтбора;
	
Конецфункции

&НаСервере
Процедура ВыполнитьСравнениеНаСервере()
	
	НачальноеСравнение = 
		НЕ РегистрыСведений.ИспользованиеОбъектов.ОбъектыПроектаИспользованы(ПроектИсточник, ПроектПриемник);
		
	Если НачальноеСравнение Тогда
		ЗначениеФильтра = 2;
		ЗаполнитьДанныеПоИсточнику();
	Иначе
		ЗначениеФильтра = 0;
		ОтборПоИзменениям = "Измененные";
		ЗаполнитьДанныеПоПроектам();
	КонецЕсли;
	
	УстановитьЗаголовки();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСравнениеОбъектов;
	
	УстановитьВидимостьКомандДействийИЭлементов();
	УстановитьНадписьТребуемыеДействия();
	УстановитьТекстГиперссылокФильтров();
	УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции,
	                      КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандДействийИЭлементов()
	
	ЭтоШагВыборПроектов = (ТекущийШаг = "Выбор проектов");
	ЭтоШагСравнениеОбъектов = (ТекущийШаг = "Сравнение объектов");
	ЭтоШагОбновлениеОбъектов = (ТекущийШаг = "Обновление объектов");
	ЭтоШагЗавершение = (ТекущийШаг = "Завершение");
	
	Элементы.ГруппаНастройкиСравнения.Видимость = ЭтоШагСравнениеОбъектов И НЕ НачальноеСравнение;
	
	Элементы.ГруппаФильтрыОбъектов.Видимость = ЭтоШагСравнениеОбъектов И НЕ НачальноеСравнение;
	
	Элементы.ФункцииПриемник.Видимость = Не НачальноеСравнение;
	Элементы.ФункцииИндексКартинкиИзмененийПриемника.Видимость = Не НачальноеСравнение;
	
	Элементы.ПрофилиПользователейПриемник.Видимость = Не НачальноеСравнение;
	Элементы.ПрофилиПользователейИндексКартинкиИзмененийПриемника.Видимость = Не НачальноеСравнение;
	
	Элементы.ВидыДоступаПриемник.Видимость = Не НачальноеСравнение;
	Элементы.ВидыДоступаИндексКартинкиИзмененийПриемника.Видимость = Не НачальноеСравнение;
	
	Элементы.ВыполнитьСравнениеОбъектов.Видимость = ЭтоШагВыборПроектов;
	Элементы.ВыполнитьСозданиеОбновление.Видимость = ЭтоШагСравнениеОбъектов;
	
	Элементы.ДекорацияНадписьОбъектыКСозданиюОбновлению.Видимость =  ЭтоШагСравнениеОбъектов;
	
	Элементы.ФункцииУстановитьВсеОтметки.Видимость =
		ЭтоШагСравнениеОбъектов И Не НачальноеСравнение;
		
	Элементы.ФункцииСнятьВсеОтметки.Видимость =
	    ЭтоШагСравнениеОбъектов И Не НачальноеСравнение;
	
	Элементы.ПрофилиПользователейУстановитьВсеОтметки.Видимость =
	    ЭтоШагСравнениеОбъектов И Не НачальноеСравнение;
		
	Элементы.ПрофилиПользователейСнятьВсеОтметки.Видимость =
	    ЭтоШагСравнениеОбъектов И Не НачальноеСравнение;
	
	Элементы.ВидыДоступаУстановитьВсеОтметки.Видимость
	    = ЭтоШагСравнениеОбъектов И Не НачальноеСравнение;
		
	Элементы.ВидыДоступаСнятьВсеОтметки.Видимость
	    = ЭтоШагСравнениеОбъектов И Не НачальноеСравнение;
		
	Элементы.ФункцииКонтекстноеМенюФункцииУстановитьОтметки.Видимость = Не НачальноеСравнение;
	Элементы.ФункцииКонтекстноеМенюФункцииСнятьОтметки.Видимость = Не НачальноеСравнение;
	Элементы.ФункцииКонтекстноеМенюПодтвердитьПереносИзменений.Видимость = Не НачальноеСравнение;
	Элементы.ФункцииКонтекстноеМенюПоказатьИзмененияИсточника.Видимость = Не НачальноеСравнение;
	Элементы.ФункцииКонтекстноеМенюПоказатьИзмененияПриемника.Видимость = Не НачальноеСравнение;
	Элементы.ФункцииКонтекстноеМенюСравнитьОбъекты.Видимость = Не НачальноеСравнение;
	Элементы.ФункцииКонтекстноеМенюПоказатьРазличияОбъектовПриПоследнемПереносеИзменений.Видимость =
	    Не НачальноеСравнение;
	
	Элементы.ПрофилиПользователейКонтекстноеМенюПрофилиПользователейУстановитьОтметки.Видимость = Не НачальноеСравнение;
	Элементы.ПрофилиПользователейКонтекстноеМенюПрофилиПользователейСнятьОтметки.Видимость = Не НачальноеСравнение;
	Элементы.ПрофилиПользователейКонтекстноеМенюПодтвердитьПереносИзменений.Видимость = Не НачальноеСравнение;
	Элементы.ПрофилиПользователейКонтекстноеМенюПоказатьИзмененияИсточника.Видимость = Не НачальноеСравнение;
	Элементы.ПрофилиПользователейКонтекстноеМенюПоказатьИзмененияПриемника.Видимость = Не НачальноеСравнение;
	Элементы.ПрофилиПользователейКонтекстноеМенюСравнитьОбъекты.Видимость = Не НачальноеСравнение;
	Элементы.ПрофилиПользователейКонтекстноеМенюПоказатьРазличияОбъектовПриПоследнемПереносеИзменений.Видимость =
		Не НачальноеСравнение;
	
	Элементы.ВидыДоступаКонтекстноеМенюВидыДоступаУстановитьОтметки.Видимость = Не НачальноеСравнение;
	Элементы.ВидыДоступаКонтекстноеМенюВидыДоступаСнятьОтметки.Видимость = Не НачальноеСравнение;
	Элементы.ВидыДоступаКонтекстноеМенюПодтвердитьПереносИзменений.Видимость = Не НачальноеСравнение;
	Элементы.ВидыДоступаКонтекстноеМенюПоказатьИзмененияИсточника.Видимость = Не НачальноеСравнение;
	Элементы.ВидыДоступаКонтекстноеМенюПоказатьИзмененияПриемника.Видимость = Не НачальноеСравнение;
	Элементы.ВидыДоступаКонтекстноеМенюСравнитьОбъекты.Видимость = Не НачальноеСравнение;
	Элементы.ВидыДоступаКонтекстноеМенюПоказатьРазличияОбъектовПриПоследнемПереносеИзменений.Видимость =
		Не НачальноеСравнение;
	
	Элементы.ВыполнитьСравнениеОбъектов.КнопкаПоУмолчанию = ЭтоШагВыборПроектов;
	Элементы.ВыполнитьСозданиеОбновление.КнопкаПоУмолчанию  = ЭтоШагСравнениеОбъектов;
	Элементы.Закрыть.КнопкаПоУмолчанию  = ЭтоШагЗавершение;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуПравилаИспользования(ИндексКартинки, ПравилоИспользования)
	
	Если ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений") Тогда
		ИндексКартинки = 0;
	ИначеЕсли ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями") Тогда
		ИндексКартинки = 1;
	ИначеЕсли ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.НеИспользуется") Тогда
		ИндексКартинки = 2;
	Иначе
		ИндексКартинки = 9;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборОбъектаВТаблице(Таблица, ВыбраннаяСтрока, Поле)
	
	СтрокаТаблицы = Таблица.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Неопределено;
		
	Если Поле.Имя = "ФункцииПриемник" ИЛИ Поле.Имя = "ПрофилиПользователейПриемник" ИЛИ Поле.Имя = "ВидыДоступаПриемник" Тогда
		Ссылка = СтрокаТаблицы.Приемник;
	ИначеЕсли Поле.Имя = "ФункцииИсточник" ИЛИ Поле.Имя = "ПрофилиПользователейИсточник" ИЛИ Поле.Имя = "ВидыДоступаИсточник" Тогда
		Ссылка = СтрокаТаблицы.Источник;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПоказатьЗначение(, Ссылка);
	КонецЕслИ;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФильтраНаСервере()
	
	ЗаполнитьФункцииСОтбором();
	УстановитьОтборВидовДоступа();
	УстановитьОтборПрофилей();
	
	УстановитьВидимостьКомандДействийИЭлементов();
	УстановитьДоступностьКомандФильтра();
	УстановитьТекстГиперссылокФильтров();
	УстановитьНадписьТребуемыеДействия();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандФильтра()
	
	Элементы.ОбъектыБезИзменений.Доступность   = (ЗначениеФильтра<>0);
	Элементы.ОбъектыСИзменениями.Доступность   = (ЗначениеФильтра<>1);
	Элементы.НовыеОбъекты.Доступность          = (ЗначениеФильтра<>2);
	Элементы.НеиспользуемыеОбъекты.Доступность = (ЗначениеФильтра<>3);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВидовДоступа()
	
	Элементы.ПрофилиПользователей.ОтборСтрок = СтруктураОтбораПоФильтру();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПрофилей()
	
	Элементы.ВидыДоступа.ОтборСтрок = СтруктураОтбораПоФильтру();
	
КонецПроцедуры

&НаСервере
Функция ЗначениеОтбораПоФильтру()
	
	Если ЗначениеФильтра = 1 Тогда
		ЗначениеОтбора = Перечисления.ПравилаИспользованияОбъектов.СИзменениями;
	ИначеЕсли ЗначениеФильтра = 2 Тогда
	    ЗначениеОтбора = Перечисления.ПравилаИспользованияОбъектов.ПустаяСсылка();
	ИначеЕсли ЗначениеФильтра = 3 Тогда
	    ЗначениеОтбора = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется;
	Иначе
		ЗначениеОтбора = Перечисления.ПравилаИспользованияОбъектов.БезИзменений;
	КонецЕсли;
	
	Возврат ЗначениеОтбора;
	
КонецФункции

&НаСервере
Функция СтруктураОтбораПоФильтру()
	
	ЗначениеОтбора = ЗначениеОтбораПоФильтру();
	
	Структура = Новый Структура;
	Структура.Вставить("ИсходноеПравилоИспользования", ЗначениеОтбора);
	
	Если ОтборПоИзменениям = "Нет изменений" Тогда
		Структура.Вставить("ЕстьИзмененияИсточника", Ложь);
	ИначеЕсли ОтборПоИзменениям = "Измененные" Тогда
		Структура.Вставить("ЕстьИзмененияИсточника", Истина);
	ИначеЕсли ОтборПоИзменениям = "Помеченные на удаление" Тогда
		Структура.Вставить("ПометкаУдаленияИсточника", Истина);
	КонецЕсли;
	
	СтруктураОтбора = Новый ФиксированнаяСтруктура(структура);
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервере
Функция КоличествоОбъектовПоПравилуИспользования(ПравилоИспользования, ДеревоФункций)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИсходноеПравилоИспользования", ПравилоИспользования);
	
	Строки = ДеревоФункций.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	КоличествоФункций = Строки.Количество();
	
	Строки = ПрофилиПользователей.НайтиСтроки(СтруктураОтбора);
	КоличествоПрофилей = Строки.Количество();
	
	Строки = ВидыДоступа.НайтиСтроки(СтруктураОтбора);
	КоличествоВидовДоступа = Строки.Количество();
	
	ОбщееКоличество = КоличествоФункций + КоличествоПрофилей + КоличествоВидовДоступа;
	
	Возврат ОбщееКоличество;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстГиперссылокФильтров()
	
	ДеревоФункций = РеквизитФормыВЗначение("Функции");
	
	КоличествоБезИзменений =
	    КоличествоОбъектовПоПравилуИспользования(Перечисления.ПравилаИспользованияОбъектов.БезИзменений, ДеревоФункций);
		
	КоличествоСИзменениями = 
	    КоличествоОбъектовПоПравилуИспользования(Перечисления.ПравилаИспользованияОбъектов.СИзменениями, ДеревоФункций);
		
	КоличествоНеИспользуются = 
	    КоличествоОбъектовПоПравилуИспользования(Перечисления.ПравилаИспользованияОбъектов.НеИспользуется, ДеревоФункций);
		
	КоличествоНовые = 
	    КоличествоОбъектовПоПравилуИспользования(Перечисления.ПравилаИспользованияОбъектов.ПустаяСсылка(), ДеревоФункций);
		
	ЗаголовокБезИзменений  = НСтр("ru='Без изменений (%Количество%)'");
	ЗаголовокБезИзменений  = СтрЗаменить(ЗаголовокБезИзменений, "%Количество%", КоличествоБезИзменений);
	Элементы.ОбъектыБезИзменений.Заголовок = ЗаголовокБезИзменений;
	
	ЗаголовокСИзменениями  = НСтр("ru='С изменениями (%Количество%)'");
	ЗаголовокСИзменениями  = СтрЗаменить(ЗаголовокСИзменениями, "%Количество%", КоличествоСИзменениями);
	Элементы.ОбъектыСИзменениями.Заголовок = ЗаголовокСИзменениями;
	
	ЗаголовокНеИспользуются  = НСтр("ru='Не используются (%Количество%)'");
	ЗаголовокНеИспользуются  = СтрЗаменить(ЗаголовокНеИспользуются, "%Количество%", КоличествоНеИспользуются);
	Элементы.НеиспользуемыеОбъекты.Заголовок = ЗаголовокНеИспользуются;
	
	ЗаголовокНовые  = НСтр("ru='Новые (%Количество%)'");
	ЗаголовокНовые  = СтрЗаменить(ЗаголовокНовые, "%Количество%", КоличествоНовые);
	Элементы.НовыеОбъекты.Заголовок = ЗаголовокНовые;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСравнениеИсточникаИПриемника(Источник, Приемник, ДатаОбновления)
	
	ДанныеДляСравнения = ДанныеДляСравненияИсточникаИПриемника(Источник, Приемник, ДатаОбновления, Ложь);
	ВерсионированиеКлиент.СравнитьОбъекты(ДанныеДляСравнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСравнениеИсточникаИПриемникаНаМоментПоследнегоОбновления(Источник, Приемник, ДатаОбновления)
	
	ДанныеДляСравнения = ДанныеДляСравненияИсточникаИПриемника(Источник, Приемник, ДатаОбновления, Истина);
	ВерсионированиеКлиент.СравнитьОбъекты(ДанныеДляСравнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСравнениеВерсийОбъекта(ВерсионируемыйОбъект, ДатаОбновления)
	
	Если НЕ ЗначениеЗаполнено(ДатаОбновления) Тогда
		ТекстСообщения = НСтр("ru='Нет данных о дате последнего обновления приемника из источника.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДанныеДляСравнения = ДанныеДляСравненияВерсийОбъекта(ВерсионируемыйОбъект, ДатаОбновления);
	ВерсионированиеКлиент.СравнитьОбъекты(ДанныеДляСравнения);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляСравненияВерсийОбъекта(ВерсионируемыйОбъект, ДатаОбновления)
	
	ТекущаяДата = ТекущаяДата();
	
	// Если дата изменения объекта менее даты последнего обновления приемника из источника,
	// то используется описание текущего объекта, в противном случае- соответствующая версия
	
	ДатаИзменения = Версионирование.ДатаПоследнегоИзмененияОбъекта(ВерсионируемыйОбъект);
	
	Если ДатаИзменения < ДатаОбновления Тогда
		Версия1 = Версионирование.ОписаниеСхемаВерсииОбъекта(ВерсионируемыйОбъект);
	Иначе
		Версия1 = Версионирование.ОписаниеСхемаВерсииОбъекта(ВерсионируемыйОбъект, ДатаОбновления);
	КонецЕсли;
	
	Версия2 = Версионирование.ОписаниеСхемаВерсииОбъекта(ВерсионируемыйОбъект);
	
	ВидОбъекта = Версионирование.ВидВерсионируемогоОбъекта(ВерсионируемыйОбъект);
	
	Возврат Версионирование.ДанныеДляСравненияВерсий(Версия1, Версия2,,, ДатаОбновления, ТекущаяДата, ВидОбъекта);
	
КонецФункции

&НаСервере
Функция ДанныеДляСравненияИсточникаИПриемника(Источник, Приемник, ДатаОбновления, НаМоментПоследнегоОбновления)
	
	Если НаМоментПоследнегоОбновления Тогда
		
		СтруктураОписаний = ОписаниеОбъектовНаМоментПоследнегоОбновления(Источник, Приемник);
		
		ОписаниеИсточника = СтруктураОписаний.ОписаниеИсточника;
		ОписаниеПриемника = СтруктураОписаний.ОписаниеПриемника;
		
		Если ТипЗнч(ОписаниеИсточника) <> Тип("ТабличныйДокумент")
			ИЛИ ТипЗнч(ОписаниеПриемника) <> Тип("ТабличныйДокумент")Тогда
			ТекстСообщения = НСтр("ru='Нет данных о версиях объектов на момент последнего обновления приемника из источника'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		
		ПечатныеФормы = ОписаниеОбъектов.СформироватьОписаниеОбъекта(Источник, Истина, ДанныеСоответствияОбъектов());
		СтруктураОписаний = ПечатныеФормы.Получить(Источник);
		
		ОписаниеИсточника = СтруктураОписаний.Описание;
		ОписаниеПриемника = СтруктураОписаний.ОписаниеПриемника;
		
	КонецЕсли;
	
	ВидОбъекта = Версионирование.ВидВерсионируемогоОбъекта(Источник);
	
	Если НаМоментПоследнегоОбновления Тогда
		ДатаВерсии = ДатаОбновления;
	Иначе
		ДатаВерсии = ТекущаяДата();
	КонецЕсли;
	
	Возврат Версионирование.ДанныеДляСравненияВерсий(ОписаниеИсточника, ОписаниеПриемника,,,ДатаВерсии, ДатаВерсии, ВидОбъекта);
	
КонецФункции

&НаСервере
Функция ОписаниеОбъектовНаМоментПоследнегоОбновления(Источник, Приемник)
	
	МенеджерЗаписи = РегистрыСведений.ИспользованиеОбъектов.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Приемник = Приемник;
	МенеджерЗаписи.Источник = Источник;
	МенеджерЗаписи.Проект = Справочники.Проекты.ПустаяСсылка();
	
	МенеджерЗаписи.Прочитать();
	
	СтруктураОписаний = Новый Структура;
	
	ОписаниеИсточника = МенеджерЗаписи.ХранилищеОписанияИсточника.Получить();
	ОписаниеПриемника = МенеджерЗаписи.ХранилищеОписанияПриемника.Получить();
	
	СтруктураОписаний.Вставить("ОписаниеИсточника", ОписаниеИсточника);
	СтруктураОписаний.Вставить("ОписаниеПриемника", ОписаниеПриемника);
	
	Возврат СтруктураОписаний;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьДанныеПередСравнением(ПроверятьИсточник, ПроверятьПриемник, Источник, Приемник, ДатаОбновления, Отказ)
	
	Если ТекущийЭлемент = Элементы.Функции Тогда
		ИмяТаблицы = "Функции";
	ИначеЕсли ТекущийЭлемент = Элементы.ПрофилиПользователей Тогда
		ИмяТаблицы = "ПрофилиПользователей";
	ИначеЕсли ТекущийЭлемент = Элементы.ВидыДоступа Тогда
		ИмяТаблицы = "ВидыДоступа";
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Элементы[ИмяТаблицы].ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Источник = Элементы[ИмяТаблицы].ТекущиеДанные.Источник;
	Приемник = Элементы[ИмяТаблицы].ТекущиеДанные.Приемник;	
	
	Если ПроверятьИсточник И НЕ ЗначениеЗаполнено(Источник) Тогда
		ТекстСообщения = НСтр("ru='В выбранной строке не указан объект-источник.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	ИначеЕсли ПроверятьПриемник И НЕ ЗначениеЗаполнено(Приемник) Тогда
		ТекстСообщения = НСтр("ru='В выбранной строке не указан объект-приемник.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДатаОбновления = Элементы[ИмяТаблицы].ТекущиеДанные.ДатаОбновленияПриемникаИзИсточника;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновоеЗаданиеКлиент()
	
	Задание = ЗапуститьФоновоеЗадание();
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	
	Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗадания", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновоеЗадание()
	
	Если ТекущийШаг = "Обновление объектов" Тогда
		
		ИмяМетода = "ИспользованиеОбъектов.ВыполнитьЗаписьОбновлениеОбъектов";
		НаименованиеМетода = НСтр("ru = 'Использование объектов: Выполнить запись, обновление объектов'");
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("НачальноеСравнение",   НачальноеСравнение);
		ПараметрыМетода.Вставить("ТекстПротокола",       ТекстПротокола);
		ПараметрыМетода.Вставить("ПроектИсточник",       ПроектИсточник);
		ПараметрыМетода.Вставить("ПроектПриемник",       ПроектПриемник);
		ПараметрыМетода.Вставить("ВидыДоступа",          ВидыДоступа.Выгрузить());
		ПараметрыМетода.Вставить("ПрофилиПользователей", ПрофилиПользователей.Выгрузить());
		ПараметрыМетода.Вставить("Функции",              РеквизитФормыВЗначение("Функции"));
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеМетода;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.БезРасширений = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗадания(Задание, ДополнительныеПараметры) Экспорт
	
	Если Задание = Неопределено Тогда
		// Задание отменено
		Возврат;
	КонецЕсли;
	
	Если Задание.Статус <> "Ошибка" И Задание.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийШаг = "Обновление объектов" Тогда
		
		ТекущийШаг = "Завершение";
		
		Если ЭтоАдресВременногоХранилища(Задание.АдресРезультата) Тогда
			
			ДанныеРезультата = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
			
			Если ТипЗнч(Данныерезультата) = Тип("ТекстовыйДокумент") Тогда
				ТекстПротокола = ДанныеРезультата;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Задание.Статус = "Ошибка" Тогда
			ТекстПротокола.ДобавитьСтроку(Задание.ПодробноеПредставлениеОшибки);
			СообщениеОбОкончании = НСтр("ru='Обработка завершена с ошибками'");
		Иначе
			СообщениеОбОкончании = НСтр("ru='Обработка завершена'");
		КонецЕсли;
		
		ТекстПротокола.ДобавитьСтроку(СообщениеОбОкончании);
	
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершение;
		УстановитьВидимостьКомандДействийИЭлементов();
		
		Активизировать();
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовки()
	
	ЗаголовокИсточник = НСтр("ru='Источник (%ПроектИсточник%)'");
	НазваниеИсточника = НазваниеДляЗаголовка(ПроектИсточник);
	ЗаголовокИсточник = СтрЗаменить(ЗаголовокИсточник, "%ПроектИсточник%", НазваниеИсточника);
	
	ЗаголовокПриемник = НСтр("ru='Приемник (%ПроектПриемник%)'");
	НазваниеПриемника = НазваниеДляЗаголовка(ПроектПриемник);
	ЗаголовокПриемник = СтрЗаменить(ЗаголовокПриемник, "%ПроектПриемник%", НазваниеПриемника);
	
	Элементы.ФункцииИсточник.Заголовок = ЗаголовокИсточник;
	Элементы.ПрофилиПользователейИсточник.Заголовок = ЗаголовокИсточник;
	Элементы.ВидыДоступаИсточник.Заголовок = ЗаголовокИсточник;
	
	Элементы.ФункцииПриемник.Заголовок = ЗаголовокПриемник;
	Элементы.ПрофилиПользователейПриемник.Заголовок = ЗаголовокПриемник;
	Элементы.ВидыДоступаПриемник.Заголовок = ЗаголовокПриемник;
	
	Заголовок = Заголовок + " (" + Строка(ПроектИсточник) + " -> " + Строка(ПроектПриемник) + ")";
	
КонецПроцедуры

&НаСервере
Функция НазваниеДляЗаголовка(Проект)
	
	НазваниеПроекта = СОКРП(Строка(Проект));
	Если СтрДлина(НазваниеПроекта)>25 Тогда
		НазваниеПроекта = Лев(НазваниеПроекта,25)+ "...";
	КонецЕсли;
	
	Возврат НазваниеПроекта;
	
КонецФункции

&НаСервере
Процедура УстановитьНадписьТребуемыеДействия()
	
	Если НачальноеСравнение Тогда
		ТекстНадписи = НСтр("ru='При необходимости измените правило использования объектов.'");
	Иначе
		Если ЗначениеФильтра = 1 Тогда
			ТекстНадписи = НСтр("ru='Выполните ручной перенос изменений в объекты-приемники и подтвердите выполнение обновления. При необходимости измените правило использования объектов.'");
		ИначеЕсли ЗначениеФильтра = 2 Тогда
			ТекстНадписи = НСтр("ru='Укажите правило использования объектов.'");
		ИначеЕсли  ЗначениеФильтра = 3 Тогда
			ТекстНадписи = НСтр("ru='При необходимости измените правило использования объектов.'");
		Иначе
			ТекстНадписи = НСтр("ru='Отметьте объекты для автоматического обновления. При необходимости измените правило использования объектов.'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НадписьТребуемыеДействия.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаСервере
Процедура ПодтвердитьПереносИзмененийНаСервере()
	
	ДатаОбновления = ТекущаяДата();
	
	Если ТекущийЭлемент = Элементы.Функции Тогда
		ТекущаяТаблица = ФункцииСОтбором;
		СтрокиДляОбработки = Элементы.Функции.ВыделенныеСтроки;
	ИначеЕсли ТекущийЭлемент = Элементы.ПрофилиПользователей Тогда
		ТекущаяТаблица = ПрофилиПользователей;
		СтрокиДляОбработки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	ИначеЕсли ТекущийЭлемент = Элементы.ВидыДоступа Тогда
		ТекущаяТаблица = ВидыДоступа;
		СтрокиДляОбработки = Элементы.ВидыДоступа.ВыделенныеСтроки;
	Иначе
	    Возврат;
	Конецесли;
	
	Для Каждого ИдентификаторСтроки из СтрокиДляОбработки Цикл
		
		СтрокаТаблицы = ТекущаяТаблица.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Приемник)
				И СтрокаТаблицы.Правилоиспользования = Перечисления.ПравилаИспользованияОбъектов.СИзменениями Тогда
				
				СтрокаТаблицы.ДатаОбновленияПриемникаИзИсточника = ДатаОбновления;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПриемника(ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Приемник) Тогда
		
		НовыеДанные = ДанныеОПриемнике(ДанныеСтроки.Приемник, ДанныеСтроки.Источник);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, НовыеДанные);
		ДанныеСтроки.ДатаОбновленияПриемникаИзИсточникаИсходная = НовыеДанные.ДатаОбновленияПриемникаИзИсточника;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ПравилоИспользования)
			ИЛИ ДанныеСтроки.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.НеИспользуется") Тогда
			
			ДанныеСтроки.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями");
			ДанныеСтроки.Отметка = Ложь;
			
			УстановитьКартинкуПравилаИспользования(ДанныеСтроки.ИндексКартинкиПравилаИспользования,
	                                       ДанныеСтроки.ПравилоИспользования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПравилаИспользования(ДанныеСтроки)
	
	УстановитьКартинкуПравилаИспользования(ДанныеСтроки.ИндексКартинкиПравилаИспользования,
	                                       ДанныеСтроки.ПравилоИспользования);
	
	Если ДанныеСтроки.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.НеИспользуется")
	    И ЗначениеЗаполнено(ДанныеСтроки.Приемник) Тогда
		ДанныеСтроки.Приемник = Неопределено;
		ДанныеСтроки.ИндексКартинкиИзмененийПриемника = 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаОбновленияПриемникаИзИсточника)
		И (ДанныеСтроки.ПравилоИспользования <> ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями")
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Приемник)) Тогда
		
		ДанныеСтроки.ДатаОбновленияПриемникаИзИсточника = '00010101';
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Приемник) Тогда
		ДанныеСтроки.ДатаОбновленияПриемникаИзИсточникаИсходная = '00010101';
	КонецЕсли;
	
	Если ДанныеСтроки.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений") Тогда
		ДанныеСтроки.Отметка = Истина;
	Иначе
		ДанныеСтроки.Отметка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПравилоИспользованияДляУказанныхСтрок(Правило, СтрокиДляОбработки, Таблица, ОбработанныеСтроки, ИмяТаблицы)
	
	Для Каждого ИдентификаторСтроки из СтрокиДляОбработки Цикл
		
		СтрокаТаблицы = Таблица.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.ПравилоИспользования = Правило;
			ОбработатьИзменениеПравилаИспользования(СтрокаТаблицы);
			
			Если ИмяТаблицы = "Функции" Тогда
				ОбработанныеСтроки.Вставить(СтрокаТаблицы.ИдентификаторИсходнойСтроки, СтрокаТаблицы);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиВТаблице(Таблица, Отметка, ОбработанныеСтроки, ИмяТаблицы, ВыделенныеСтроки)
	
	Если ВыделенныеСтроки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Таблица.НайтиПоИдентификатору(ИдентификаторСтроки);
	
		Если СтрокаТаблицы.ПравилоИспользования =
			 ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений") Тогда
			 
			СтрокаТаблицы.Отметка = Отметка;
			
			Если ИмяТаблицы = "ФункцииСОтбором" Тогда			
				ОбработанныеСтроки.Вставить(СтрокаТаблицы.ИдентификаторИсходнойСтроки, СтрокаТаблицы);
			Иначе
				ОбработанныеСтроки.Вставить(СтрокаТаблицы.ПолучитьИдентификатор(), СтрокаТаблицы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстНадписиОбъектыКОбновлениюСозданию(Элементы, ВидыДоступа, ПрофилиПользователей, Функции, КоличествоОбъектовКОбновлению, КоличествоОбъектовКсозданию, НачальноеСравнение)
	
	Если НачальноеСравнение Тогда
		ТекстНадписи = НСтр("ru='Будет создано %ОбъектовКСозданию% объектов.'");
	Иначе
		ТекстНадписи = НСтр("ru='Будет создано %ОбъектовКСозданию%, обновлено %ОбъектовКОбновлению% объектов.'");
	КонецЕсли;
	
	РассчитатьКоличествоОбъектовКОбновлениюСозданию(ВидыДоступа, ПрофилиПользователей, Функции,
	                                                КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию,
													НачальноеСравнение);
													
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ОбъектовКСозданию%", КоличествоОбъектовКСозданию);
	ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ОбъектовКОбновлению%", КоличествоОбъектовКОбновлению);
	
	Элементы.ДекорацияНадписьОбъектыКСозданиюОбновлению.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоОбъектовКОбновлениюСозданию(ВидыДоступа, ПрофилиПользователей, Функции, КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение)
	
	ОбъектовКОбновлению = 0;
	ОбъектовКСозданию = 0;
	
	РассчитатьКоличествоОбъектов(ВидыДоступа, ОбъектовКОбновлению, ОбъектовКСозданию, НачальноеСравнение);
	РассчитатьКоличествоОбъектов(ПрофилиПользователей, ОбъектовКОбновлению, ОбъектовКСозданию, НачальноеСравнение);
		
	РассчитатьКоличествоФункцийКСозданиюОбновлению(Функции.ПолучитьЭлементы(),ОбъектовКОбновлению,
	                                               ОбъектовКСозданию, НачальноеСравнение);
	
	КоличествоОбъектовКОбновлению = ОбъектовКОбновлению;
	КоличествоОбъектовКСозданию = ОбъектовКСозданию;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоОбъектов(Таблица, ОбъектовКОбновлению, ОбъектовКСозданию, НачальноеСравнение)
	
	Для Каждого СтрокаТаблицы из Таблица Цикл
		
		Если (СтрокаТаблицы.Отметка ИЛИ НачальноеСравнение)
			И (СтрокаТаблицы.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений")
			ИЛИ (СтрокаТаблицы.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями")
			И НачальноеСравнение)) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ИсходноеПравилоИспользования) Тогда 
				ОбъектовКОбновлению = ОбъектовКОбновлению + 1;
			Иначе
				ОбъектовКСозданию = ОбъектовКСозданию + 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоФункцийКСозданиюОбновлению(СтрокиДерева, КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию, НачальноеСравнение)
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если (СтрокаДерева.Отметка ИЛИ НачальноеСравнение)
			И (СтрокаДерева.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.БезИзменений")
			ИЛИ (СтрокаДерева.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями")
			     И НачальноеСравнение)) Тогда
			
			Если ЗначениеЗаполнено(СтрокаДерева.ИсходноеПравилоИспользования) Тогда
				КоличествоОбъектовКОбновлению = КоличествоОбъектовКОбновлению + 1;
			Иначе
				КоличествоОбъектовКСозданию = КоличествоОбъектовКСозданию + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		РассчитатьКоличествоФункцийКСозданиюОбновлению(ПодчиненныеСтроки,
		    КоличествоОбъектовКОбновлению, КоличествоОбъектовКСозданию,
			НачальноеСравнение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиИзмененияВФункции(ОбработанныеСтроки, Функции)

	Для Каждого ЭлементСоответствия из ОбработанныеСтроки Цикл
		
		ИдентификаторСтроки = ЭлементСоответствия.Ключ;
		
		СтрокаТаблицы = Функции.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементСоответствия.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКонтроль(Отказ)
	
	// Проверка заполнения необходимых данных
	ОбработанныеОбъекты = Новый Массив;
	ДублиФункций = Новый Массив;
	ПроверитьЗаполнениеПолейНайтиДубли(Отказ, Функции, "Функции", ОбработанныеОбъекты,
	                                   ДублиФункций,Функции.ПолучитьЭлементы());
	СообщитьОНаличииДублей(ДублиФункций, "Функция");
									   
	ОбработанныеОбъекты = Новый Массив;
	ДублиПрофилей = Новый Массив;
	ПроверитьЗаполнениеПолейНайтиДубли(Отказ, ПрофилиПользователей, "ПрофилиПользователей", ОбработанныеОбъекты,
	                                   ДублиПрофилей);
	СообщитьОНаличииДублей(ДублиПрофилей, "Профиль пользователя");
	
	ОбработанныеОбъекты = Новый Массив;
	ДублиВидовДоступа = Новый Массив;
	ПроверитьЗаполнениеПолейНайтиДубли(Отказ, ВидыДоступа, "ВидыДоступа", ОбработанныеОбъекты, ДублиВидовДоступа);
	СообщитьОНаличииДублей(ДублиВидовДоступа, "Вид доступа");
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьКонтрольНаСервере(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПолейНайтиДубли(Отказ, Таблица, ИмяТаблицы, ОбработанныеОбъекты, Дубли, Строки = Неопределено)
	
	Если ИмяТаблицы = "Функции" Тогда
		КоллекцияСтрок = Строки;
	Иначе
		КоллекцияСтрок = Таблица;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы из КоллекцияСтрок Цикл
		
		// Проверка заполнения правила использования
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ПравилоИспользования) Тогда
			СообщитьОНезаполненномПоле(Таблица, ИмяТаблицы, СтрокаТаблицы, "ПравилоИспользования");
			Отказ = Истина;
		КонецЕсли;
		
		// Проверка заполнения приемника
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
			Если Не НачальноеСравнение
				И СтрокаТаблицы.ПравилоИспользования = ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями") Тогда
				
				СообщитьОНезаполненномПоле(Таблица, ИмяТаблицы, СтрокаТаблицы, "Приемник");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Приемник) Тогда
			Если ОбработанныеОбъекты.Найти(СтрокаТаблицы.Приемник) = Неопределено Тогда
				ОбработанныеОбъекты.Добавить(СтрокаТаблицы.Приемник);
			Иначе
				Дубли.Добавить(СтрокаТаблицы.Приемник);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяТаблицы = "Функции" Тогда
			ПроверитьЗаполнениеПолейНайтиДубли(Отказ, Таблица, ИмяТаблицы, ОбработанныеОбъекты, Дубли,
			                                   СтрокаТаблицы.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНаличииДублей(Дубли, ИмяОбъекта)
	
	Для Каждого ДублируемыйОбъект из Дубли Цикл
		
		Если ИмяОбъекта = "Функция" Тогда
			ТекстСообщения = НСтр("ru='%ИмяОбъекта% %ДублируемыйОбъект% указана в качестве приемника более чем для одного объекта источника.'");
		Иначе
			ТекстСообщения = НСтр("ru='%ИмяОбъекта% %ДублируемыйОбъект% указан в качестве приемника более чем для одного объекта источника.'");
		КонецЕсли;
	
		ТекстСообщения= СтрЗаменить(ТекстСОобщения, "%ИмяОбъекта%", ИмяОбъекта);
		ТекстСообщения= СтрЗаменить(ТекстСОобщения, "%ДублируемыйОбъект%", ДублируемыйОбъект);
		
		ОбщегоНазначенияКЛиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОНезаполненномПоле(Таблица, ИмяТаблицы, СтрокаТаблицы, ИмяПоля)
	
	Если ИмяТаблицы = "Функции" Тогда
		ИндексСтроки = 0;
	Иначе
		ИндексСтроки = Таблица.Индекс(СтрокаТаблицы);
	КонецЕсли;
	
	Если ИмяПоля = "ПравилоИспользования" Тогда
		ТекстСообщения = НСтр("ru='Не указано правило использования источника для %ВидИсточника% %Источник%'");
	Иначе
		ТекстСообщения = НСтр("ru='Не указан приемник для источника %ВидИсточника% %Источник%'");
	КонецЕсли;
	
	Если ИмяТаблицы = "Функции" Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидИсточника%", "функции");
	ИначеЕсли ИмяТаблицы = "ПрофилиПользователей" Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидИсточника%", "профиля пользователя");
	ИначеЕсли ИмяТаблицы = "ВидыДоступа" Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидИсточника%", "вида доступа");
	Конецесли;
	
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Источник%", СтрокаТаблицы.Источник);
	ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицы, ИндексСтроки+1, ИмяПоля);
	
	ОбщегоНазначенияКЛиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКРеквизиту);
			
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольНаСервере(Отказ)
	
	ВыполнитьКонтрольФункцийПоИерархии(Функции.ПолучитьЭлементы(), Неопределено, Ложь, Отказ);
	ВыполнитьКонтрольСвязанныхДанных(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольФункцийПоИерархии(СтрокиДерева, ПравилоИспользованияРодителя, ОтметкаРодителя, Отказ)
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если ПравилоИспользованияРодителя <> Неопределено Тогда
			
			Если НачальноеСравнение Тогда
				Если ПравилоИспользованияРодителя = Перечисления.ПравилаИспользованияОбъектов.БезИзменений
					И СтрокаДерева.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
					
					ТекстСОобщения = НСтр("ru='Функция %Функция% должна обязательно использоваться, т.к. родительская функция используется без изменений.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаДерева.Источник);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Отказ = Истина;
					
				КонецЕсли;
			Иначе
				Если ОтметкаРодителя Тогда
					
					Если СтрокаДерева.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
						ТекстСОобщения = НСтр("ru='Функция %Функция% должна обязательно использоваться, т.к. родительская функция используется без изменений.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаДерева.Источник);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;
					КонецЕсли;
					
					Если НЕ СтрокаДерева.Отметка
						И СтрокаДерева.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений
						И Не ЗначениеЗаполнено(Строкадерева.ИсходноеПравилоИспользования) Тогда
						
						ТекстСОобщения = НСтр("ru='Для функции %Функция% необходимо установить отметку создания/обновления, т.к. родительская функция используется без изменений.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаДерева.Источник);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						Отказ = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ВыполнитьКонтрольФункцийПоИерархии(СтрокаДерева.ПолучитьЭлементы(), СтрокаДерева.ПравилоИспользования,
		                         СтрокаДерева.Отметка, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКонтрольСвязанныхДанных(Отказ)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрофилиПользователей.Источник КАК Профиль,
	|	ПрофилиПользователей.ПравилоИспользования КАК ПравилоИспользования,
	|	ВЫБОР
	|		КОГДА ПрофилиПользователей.ИсходноеПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НовыйОбъект,
	|	ПрофилиПользователей.Отметка КАК Отметка
	|ПОМЕСТИТЬ ВТПрофили
	|ИЗ
	|	&ТаблицаПрофилей КАК ПрофилиПользователей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоступа.Источник КАК ВидДоступа,
	|	ВидыДоступа.ПравилоИспользования КАК ПравилоИспользования,
	|	ВЫБОР
	|		КОГДА ВидыДоступа.ИсходноеПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НовыйОбъект,
	|	ВидыДоступа.Отметка КАК Отметка
	|ПОМЕСТИТЬ ВТВидыДоступа
	|ИЗ
	|	&ТаблицаВидовДоступа КАК ВидыДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФункций.Источник КАК Функция,
	|	ТаблицаФункций.Правилоиспользования КАК ПравилоИспользования,
	|	ВЫБОР
	|		КОГДА ТаблицаФункций.ИсходноеПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НовыйОбъект,
	|	ТаблицаФункций.Отметка КАК Отметка,
	|	ТаблицаФункций.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВТФункции
	|ИЗ
	|	&ТаблицаФункций КАК ТаблицаФункций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыВходящиеДанные.Ссылка КАК Функция,
	|	ВТФункцииСвязи.Функция КАК Вход,
	|	ВТФункцииСвязи.ПравилоИспользования КАК ПравилоИспользования,
	|	ВТФункцииСвязи.Отметка КАК Отметка,
	|	ВТФункцииСвязи.НовыйОбъект КАК НовыйОбъект
	|ПОМЕСТИТЬ ВТПроблемыВходов
	|ИЗ
	|	Справочник.ФункцииСистемы.ВходящиеДанные КАК ФункцииСистемыВходящиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФункции КАК ВТФункции
	|		ПО ФункцииСистемыВходящиеДанные.Ссылка = ВТФункции.Функция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФункции КАК ВТФункцииСвязи
	|		ПО (&НачальноеСравнение
	|					И ФункцииСистемыВходящиеДанные.Функция = ВТФункцииСвязи.Функция
	|					И ВТФункции.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|					И ВТФункцииСвязи.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)
	|				ИЛИ НЕ &НачальноеСравнение
	|					И ФункцииСистемыВходящиеДанные.Функция = ВТФункцииСвязи.Функция
	|					И ВТФункции.Отметка
	|					И (ВТФункцииСвязи.НовыйОбъект
	|							И ВТФункцииСвязи.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|							И НЕ ВТФункцииСвязи.Отметка
	|						ИЛИ ВТФункцииСвязи.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыИсполнители.Ссылка КАК Функция,
	|	ВТПрофили.Профиль КАК Профиль,
	|	ВТПрофили.ПравилоИспользования КАК ПравилоИспользования,
	|	ВТПрофили.Отметка КАК Отметка,
	|	ВТПрофили.НовыйОбъект КАК НовыйОбъект
	|ПОМЕСТИТЬ ВТПроблемыПрофилей
	|ИЗ
	|	Справочник.ФункцииСистемы.Исполнители КАК ФункцииСистемыИсполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФункции КАК ВТФункции
	|		ПО ФункцииСистемыИсполнители.Ссылка = ВТФункции.Функция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрофили КАК ВТПрофили
	|		ПО (&НачальноеСравнение
	|					И ФункцииСистемыИсполнители.Исполнитель = ВТПрофили.Профиль
	|					И ВТФункции.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|					И ВТПрофили.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)
	|				ИЛИ НЕ &НачальноеСравнение
	|					И ФункцииСистемыИсполнители.Исполнитель = ВТПрофили.Профиль
	|					И ВТФункции.Отметка
	|					И (ВТПрофили.НовыйОбъект
	|							И ВТПрофили.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|							И НЕ ВТПрофили.Отметка
	|						ИЛИ ВТПрофили.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиПользователейВидыДоступа.Ссылка КАК Профиль,
	|	ВТВидыДоступа.ВидДоступа КАК ВидДоступа,
	|	ВТВидыДоступа.ПравилоИспользования КАК ПравилоИспользования,
	|	ВТВидыДоступа.Отметка КАК Отметка,
	|	ВТВидыДоступа.НовыйОбъект КАК НовыйОбъект
	|ИЗ
	|	Справочник.ПрофилиПользователей.ВидыДоступа КАК ПрофилиПользователейВидыДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрофили КАК ВТПрофили
	|		ПО ПрофилиПользователейВидыДоступа.Ссылка = ВТПрофили.Профиль
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыДоступа КАК ВТВидыДоступа
	|		ПО (&НачальноеСравнение
	|					И ПрофилиПользователейВидыДоступа.ВидДоступа = ВТВидыДоступа.ВидДоступа
	|					И ВТПрофили.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|					И ВТВидыДоступа.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)
	|				ИЛИ НЕ &НачальноеСравнение
	|					И ПрофилиПользователейВидыДоступа.ВидДоступа = ВТВидыДоступа.ВидДоступа
	|					И ВТПрофили.Отметка
	|					И (ВТВидыДоступа.НовыйОбъект
	|							И ВТВидыДоступа.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.БезИзменений)
	|							И НЕ ВТВидыДоступа.Отметка
	|						ИЛИ ВТВидыДоступа.ПравилоИспользования = ЗНАЧЕНИЕ(Перечисление.ПравилаИспользованияОбъектов.НеИспользуется)))"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачальноеСравнение", НачальноеСравнение);
	Запрос.УстановитьПараметр("ТаблицаПрофилей", ПрофилиПользователей.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаВидовДоступа", ВидыДоступа.Выгрузить());
	
	Всефункции = ТаблицаФункций.Выгрузить();
	ЗаполнитьТаблицуФункций(Всефункции, Функции.ПолучитьЭлементы());
	
	Запрос.УстановитьПараметр("ТаблицаФункций", ВсеФункции);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПроблемыВходов = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТПроблемыВходов"].ПолучитьДанные().Выгрузить();
	ПроблемыПрофилей = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТПроблемыПрофилей"].ПолучитьДанные().Выгрузить();
	
	ПроблемыВидовДоступа = РезультатЗапроса.Выгрузить();
	
	СообщитьОПроблемахСвязанныхФункций(ПроблемыВходов, Отказ);
	СообщитьОПроблемахСвязанныхПрофилей(ПроблемыПрофилей, Отказ);
	СообщитьОПроблемахСвязанныхВидовДоступа(ПроблемыВидовДоступа, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОПроблемахСвязанныхФункций(ПроблемыВходов, Отказ)
	
	Для Каждого СтрокаТаблицы из ПроблемыВходов Цикл
		
		Если НачальноеСравнение Тогда
			
			ТекстСообщения = НСтр("ru='Функция %Связь% обязательно должна использоваться, т.к. используюшая функция %Функция% используется без изменений.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.Вход);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаТаблицы.Функция);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
				
		Иначе
			
			Если СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
				
				ТекстСообщения = НСтр("ru='Функция %Связь% обязательно должна использоваться, т.к. используюшая функция %Функция% используется без изменений.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.Вход);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаТаблицы.Функция);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			
			ИначеЕсли СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
				
				ТекстСообщения = НСтр("ru='Для функции %Связь% необходимо установить отметку создания/обновления, т.к. использующая функция %Функция% используется без изменений'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.Вход);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаТаблицы.Функция);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОПроблемахСвязанныхПрофилей(ПроблемыПрофилей, Отказ)
	
		Для Каждого СтрокаТаблицы из ПроблемыПрофилей Цикл
		
		Если НачальноеСравнение Тогда
			
			ТекстСообщения = НСтр("ru='Профиль %Связь% обязательно должен использоваться, т.к. используюшая функция %Функция% используется без изменений.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.Профиль);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаТаблицы.Функция);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
				
		Иначе
			
			Если СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
				
				ТекстСообщения = НСтр("ru='Профиль %Связь% обязательно должен использоваться, т.к. используюшая функция %Функция% используется без изменений.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.Профиль);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаТаблицы.Функция);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			
			ИначеЕсли СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
				
				ТекстСообщения = НСтр("ru='Для профиля %Связь% необходимо установить отметку создания/обновления, т.к. использующая функция %Функция% используется без изменений'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.Профиль);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Функция%", СтрокаТаблицы.Функция);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОПроблемахСвязанныхВидовДоступа(ПроблемыВидовДоступа, Отказ)
	
		Для Каждого СтрокаТаблицы из ПроблемыВидовДоступа Цикл
		
		Если НачальноеСравнение Тогда
			
			ТекстСообщения = НСтр("ru='Вид доступа %Связь% обязательно должен использоваться, т.к. используюший профиль %Профиль% используется без изменений.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.ВидДоступа);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Профиль%", СтрокаТаблицы.Профиль);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
				
		Иначе
			
			Если СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.НеИспользуется Тогда
				
				ТекстСообщения = НСтр("ru='Вид доступа %Связь% обязательно должен использоваться, т.к. используюший профиль %Профиль% используется без изменений.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.ВидДоступа);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Профиль%", СтрокаТаблицы.Профиль);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
			
			ИначеЕсли СтрокаТаблицы.ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
				
				ТекстСообщения = НСтр("ru='Для вида доступа %Связь% необходимо установить отметку создания/обновления, т.к. использующий профиль %Профиль% используется без изменений'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Связь%", СтрокаТаблицы.ВидДоступа);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Профиль%", СтрокаТаблицы.Профиль);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуФункций(ВсеФункции, СтрокиДерева)
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		НоваяСтрока = ВсеФункции.Добавить();
	    ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		ЗаполнитьТаблицуФункций(ВсеФункции, СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОчиститьДатуОбновленияПриемника(ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаОбновленияПриемникаИзИсточника)
		И (ДанныеСтроки.ПравилоИспользования <> ПредопределенноеЗначение("Перечисление.ПравилаИспользованияОбъектов.СИзменениями")
		И  ДанныеСтроки.Приемник <> ДанныеСтроки.ИсходныйПриемник
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеСтроки.Приемник)) Тогда
		
		ДанныеСтроки.ДатаОбновленияПриемникаИзИсточника = '00010101';
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Приемник) Тогда
		ДанныеСтроки.ДатаОбновленияПриемникаИзИсточникаИсходная = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеСоответствияОбъектов()
	
	ДанныеСоответствия = Новый Структура;
	
	ДанныеВидовДоступа = Новый ТаблицаЗначений;
	ДанныеВидовДоступа.Колонки.Добавить("Источник", Новый ОписаниеТипов("СправочникСсылка.ВидыДоступа"));
	ДанныеВидовДоступа.Колонки.Добавить("Приемник", Новый ОписаниеТипов("СправочникСсылка.ВидыДоступа"));
	
	ДанныеПрофилей = Новый ТаблицаЗначений;
	ДанныеПрофилей.Колонки.Добавить("Источник", Новый ОписаниеТипов("СправочникСсылка.ПрофилиПользователей"));
	ДанныеПрофилей.Колонки.Добавить("Приемник", Новый ОписаниеТипов("СправочникСсылка.ПрофилиПользователей"));
	
	ДанныеФункций = Новый ТаблицаЗначений;
	ДанныеФункций.Колонки.Добавить("Источник", Новый ОписаниеТипов("СправочникСсылка.ФункцииСистемы"));
	ДанныеФункций.Колонки.Добавить("Приемник", Новый ОписаниеТипов("СправочникСсылка.ФункцииСистемы"));
	
	ДанныеСоответствия.Вставить("ВидыДоступа", ДанныеВидовДоступа);
	ДанныеСоответствия.Вставить("Профили",     ДанныеПрофилей);
	ДанныеСоответствия.Вставить("Функции",     ДанныеФункций);
	
	ЗаполнитьДанныеСоответствия(ВидыДоступа, ДанныеВидовДоступа);
	ЗаполнитьДанныеСоответствия(ПрофилиПользователей, ДанныеПрофилей);
	ЗаполнитьДанныеСоответствия(Функции.ПолучитьЭлементы(), ДанныеФункций, Истина);
	
	Возврат ДанныеСоответствия;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСоответствия(КоллекцияСтрок, ТаблицаСоответствия, Рекурсивно = Ложь)
	
	Для Каждого СтрокаДанных из КоллекцияСтрок Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Приемник) Тогда
			НоваяСтрока = ТаблицаСоответствия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		КонецЕсли;
		 
		Если Рекурсивно Тогда
			ЗаполнитьДанныеСоответствия(СтрокаДанных.ПолучитьЭлементы(), ТаблицаСоответствия, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеОПриемнике(Приемник, Источник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ИспользованиеОбъектов.ДатаОбновленияПриемникаИзИсточника КАК ДатаОбновленияПриемникаИзИсточника,
	|	ЕСТЬNULL(ДатыИзмененияОбъектов.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаИзменения
	|ИЗ
	|	РегистрСведений.ИспользованиеОбъектов КАК ИспользованиеОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО ИспользованиеОбъектов.Приемник = ДатыИзмененияОбъектов.КонтролируемыйОбъект
	|			И (ДатыИзмененияОбъектов.ВидОбъекта = &ВидОбъекта)
	|ГДЕ
	|	ИспользованиеОбъектов.Источник = &Источник
	|	И ИспользованиеОбъектов.Приемник = &Приемник"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Источник", Источник);
	Запрос.УстановитьПараметр("Приемник", Приемник);
	Запрос.УстановитьПараметр("ВидОбъекта", Версионирование.ВидВерсионируемогоОбъекта(Приемник));
	
	Данные = Новый Структура;
	
	Данные.Вставить("ДатаОбновленияПриемникаИзИсточника", '00010101');
	Данные.Вставить("ЕстьИзмененияПриемника", Ложь);
	Данные.Вставить("ИндексКартинкиИзмененийПриемника", 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		
		Если ЗначениеЗаполнено(Выборка.ДатаОбновленияПриемникаИзИсточника)
			И Выборка.ДатаИзменения > Выборка.ДатаОбновленияПриемникаИзИсточника Тогда
			Данные.Вставить("ЕстьИзмененияПриемника", Истина);
			Данные.Вставить("ИндексКартинкиИзмененийПриемника", 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти