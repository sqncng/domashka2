
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ЭталоннаяБаза") Тогда
		Если Параметры.ЭталоннаяБаза <> Неопределено Тогда
			ЭталоннаяБаза = Параметры.ЭталоннаяБаза;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗапускИзСценария = Истина;
	НастройкиБДДляЗапускаТестовИзСценария = Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
	Если НастройкиБДДляЗапускаТестовИзСценария <> Неопределено Тогда
		АдресИБ            = НастройкиБДДляЗапускаТестовИзСценария.СтрокаИБ;
		ИмяПользователяИнформационнойБазы    = НастройкиБДДляЗапускаТестовИзСценария.Пользователь;
		ПарольПользователяИнформационнойБазы = НастройкиБДДляЗапускаТестовИзСценария.Пароль;
		ЭталоннаяБаза                        = НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза;
		Если НастройкиБДДляЗапускаТестовИзСценария.СППРTestManager = 1 Тогда
			СППРTestManager = 1;
		ИначеЕсли НастройкиБДДляЗапускаТестовИзСценария.СППРTestManager = 0 Тогда
			СППРTestManager = 0;
		ИначеЕсли НастройкиБДДляЗапускаТестовИзСценария.СППРTestManager = Истина Тогда
			СППРTestManager = 0;
		Иначе	
			СППРTestManager = 1;
		КонецЕсли;	 
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("КлючиЗапускаTestClient") Тогда
			КлючиЗапускаTestClient = НастройкиБДДляЗапускаТестовИзСценария.КлючиЗапускаTestClient;
		КонецЕсли;	 
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("КлючиЗапускаTestManager") Тогда
			КлючиЗапускаTestManager = НастройкиБДДляЗапускаТестовИзСценария.КлючиЗапускаTestManager;
		КонецЕсли;	 
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("КаталогИсполняемогоФайла") Тогда
			КаталогИсполняемогоФайла = НастройкиБДДляЗапускаТестовИзСценария.КаталогИсполняемогоФайла;
		КонецЕсли;	 
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("АдресИБTestManager") Тогда
			АдресИБTestManager = НастройкиБДДляЗапускаТестовИзСценария.АдресИБTestManager;
		КонецЕсли;	 
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ТаймаутЗапускаTestManager") Тогда
			ТаймаутЗапускаTestManager = НастройкиБДДляЗапускаТестовИзСценария.ТаймаутЗапускаTestManager;
		Иначе	
			ТаймаутЗапускаTestManager = 60;
		КонецЕсли;
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ТипКлиента") Тогда
			ТипКлиента = НастройкиБДДляЗапускаТестовИзСценария.ТипКлиента;
		Иначе	
			ТипКлиента = "Тонкий";
		КонецЕсли;
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("МенеджерКластера") Тогда
			МенеджерКластера = НастройкиБДДляЗапускаТестовИзСценария.МенеджерКластера;
		Иначе	
			МенеджерКластера = "localhost";
		КонецЕсли;
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("Порт") Тогда
			Порт = НастройкиБДДляЗапускаТестовИзСценария.Порт;
		Иначе	
			Порт = 1538;
		КонецЕсли;
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ЗначенияАдресИБ") Тогда
			Элементы.АдресИБ.СписокВыбора.ЗагрузитьЗначения(НастройкиБДДляЗапускаТестовИзСценария.ЗначенияАдресИБ);
		КонецЕсли;
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ЗначенияКаталогИсполняемогоФайла") Тогда
			Элементы.КаталогИсполняемогоФайла.СписокВыбора.ЗагрузитьЗначения(
			   НастройкиБДДляЗапускаТестовИзСценария.ЗначенияКаталогИсполняемогоФайла);
		КонецЕсли;
		
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ЗначенияАдресИБTestManager") Тогда
			Элементы.АдресИБTestManager.СписокВыбора.ЗагрузитьЗначения(
			   НастройкиБДДляЗапускаТестовИзСценария.ЗначенияАдресИБTestManager);
		КонецЕсли;
		
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СППРTestManagerПриИзменении(Элемент)
	СППРTestManagerПриИзмененииСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогИсполняемогоФайла;
	ДиалогВыбораФайла.Заголовок = "Выбор каталога программных файлов 1С:Предприятия";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогИсполняемогоФайла = ДиалогВыбораФайла.Каталог;
		ДобавитьКаталогИсполняемогоФайлаВСписокВыбора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СППРTestManagerПриИзмененииСлужебный();
	Если НЕ ЗначениеЗаполнено(ТипКлиента) Тогда
		ТипКлиента = "Тонкий";
	КонецЕсли;	 
	ТипКлиентаПриИзмененииСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура ТипКлиентаПриИзменении(Элемент)
	ТипКлиентаПриИзмененииСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКаталогИсполняемогоФайлаВСписокВыбора()
	Если ЗначениеЗаполнено(КаталогИсполняемогоФайла) Тогда
		Если Элементы.КаталогИсполняемогоФайла.СписокВыбора.НайтиПоЗначению(
			 КаталогИсполняемогоФайла) <> Неопределено Тогда
			 
			Элементы.КаталогИсполняемогоФайла.СписокВыбора.Удалить(
			     Элементы.КаталогИсполняемогоФайла.СписокВыбора.НайтиПоЗначению(КаталогИсполняемогоФайла));
		КонецЕсли;	 
		
		Элементы.КаталогИсполняемогоФайла.СписокВыбора.Вставить(0,КаталогИсполняемогоФайла);
		
		Если Элементы.КаталогИсполняемогоФайла.СписокВыбора.Количество() > 10 Тогда
			Элементы.КаталогИсполняемогоФайла.СписокВыбора.Удалить(
			  Элементы.КаталогИсполняемогоФайла.СписокВыбора[Элементы.КаталогИсполняемогоФайла.СписокВыбора.Количество()-1]);
		КонецЕсли;	 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресИБTestManagerВСписокВыбора()
	Если ЗначениеЗаполнено(АдресИБTestManager) Тогда
		Если Элементы.АдресИБTestManager.СписокВыбора.НайтиПоЗначению(АдресИБTestManager) <> Неопределено Тогда
			Элементы.АдресИБTestManager.СписокВыбора.Удалить(
			   Элементы.АдресИБTestManager.СписокВыбора.НайтиПоЗначению(АдресИБTestManager));
		КонецЕсли;	 
		
		Элементы.АдресИБTestManager.СписокВыбора.Вставить(0,АдресИБTestManager);
		
		Если Элементы.АдресИБTestManager.СписокВыбора.Количество() > 10 Тогда
			Элементы.АдресИБTestManager.СписокВыбора.Удалить(
			  Элементы.АдресИБTestManager.СписокВыбора[Элементы.АдресИБTestManager.СписокВыбора.Количество()-1]);
		КонецЕсли;	 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресИБВСписокВыбора()
	Если ЗначениеЗаполнено(АдресИБ) Тогда
		Если Элементы.АдресИБ.СписокВыбора.НайтиПоЗначению(АдресИБ) <> Неопределено Тогда
			Элементы.АдресИБ.СписокВыбора.Удалить(Элементы.АдресИБ.СписокВыбора.НайтиПоЗначению(АдресИБ));
		КонецЕсли;	 
		
		Элементы.АдресИБ.СписокВыбора.Вставить(0,АдресИБ);
		
		Если Элементы.АдресИБ.СписокВыбора.Количество() > 10 Тогда
			Элементы.АдресИБ.СписокВыбора.Удалить(Элементы.АдресИБ.СписокВыбора[Элементы.АдресИБ.СписокВыбора.Количество()-1]);
		КонецЕсли;	 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресИБПриИзменении(Элемент)
	Если Лев(АдресИБ,4) = "http" Тогда
		АдресИБ = "ws=" + АдресИБ;
	КонецЕсли;
	
	ДобавитьАдресИБВСписокВыбора();
	
	ВосстановитьНастройкиПоРанееСохраненномуЗначению();
КонецПроцедуры

&НаКлиенте
Процедура АдресИБTestManagerПриИзменении(Элемент)
	ДобавитьАдресИБTestManagerВСписокВыбора();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьБазуИзСписка(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("БазыДоступныеПоВебСсылке",Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьБазуИзСпискаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияСППРКлиент.ВыбратьБазуИзСписка(ОписаниеОповещения, УникальныйИдентификатор,
	     Ложь,ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБазуИзСпискаTestManager(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьБазуИзСпискаЗавершениеTestManager", ЭтотОбъект);
	ОбщегоНазначенияСППРКлиент.ВыбратьБазуИзСписка(ОписаниеОповещения, УникальныйИдентификатор, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если СППРTestManager = 1 Тогда
		Если НЕ ЗначениеЗаполнено(КаталогИсполняемогоФайла) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
			     "ru = 'Не указана версия платформы.'"),,"КаталогИсполняемогоФайла");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТипКлиента = "Web" Тогда
		СтрокаАдреса = СокрЛП(НРег(АдресИБ));
		Если (Лев(СтрокаАдреса,4) <> "http") и (Лев(СтрокаАдреса,3) <> "ws=") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
			    "ru = 'Для запуска Web клиента надо указать строку подключения, которая начинается с http.'"),,"АдресИБ");
			Возврат;
		КонецЕсли;	 
	КонецЕсли;	 
	
	СохранитьНастройки();
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюБазуВАдресИБ(Команда)
	АдресИБ = СтрокаСоединенияИнформационнойБазы();
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТест(Команда)
	СохранитьНастройки();
	Закрыть();
	ПараметрыОповещения = Новый Структура("ИмяСобытия","ЗапуститьТест");
	ОповеститьОВыборе(ПараметрыОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВосстановитьНастройкиПоРанееСохраненномуЗначению(ВерсияПлатформы = Неопределено)
	НастройкаЗапускаБазыTestClient = НастройкаЗапускаБазыTestClient();
	Если НастройкаЗапускаБазыTestClient <> Неопределено Тогда
		ЭталоннаяБаза          = НастройкаЗапускаБазыTestClient.ЭталоннаяБаза;
		КлючиЗапускаTestClient = НастройкаЗапускаБазыTestClient.КлючиЗапускаTestClient;
		ТипКлиента             = НастройкаЗапускаБазыTestClient.ТипКлиента;
		МенеджерКластера       = НастройкаЗапускаБазыTestClient.МенеджерКластера;
		Порт                   = НастройкаЗапускаБазыTestClient.Порт;
		
		Если НастройкаЗапускаБазыTestClient.СППРTestManager = 1 Тогда
			СППРTestManager = 1;
		ИначеЕсли НастройкаЗапускаБазыTestClient.СППРTestManager = 0 Тогда
			СППРTestManager = 0;
		ИначеЕсли НастройкаЗапускаБазыTestClient.СППРTestManager = Истина Тогда
			СППРTestManager = 0;
		Иначе	
			СППРTestManager = 1;
		КонецЕсли;	 
		
		СППРTestManagerПриИзмененииСлужебный();
		ВидимостьНастроекМенеджераКластера();
	Иначе	
		ТипКлиентаПриИзмененииСлужебный();
	КонецЕсли;	 
	
	Если ВерсияПлатформы <> Неопределено Тогда
		Если СППРTestManager = 0 Тогда
			СистемнаяИнформация = Новый СистемнаяИнформация;
			ВерсияПриложения    = СистемнаяИнформация.ВерсияПриложения;
			Если Найти(ВерсияПриложения,ВерсияПлатформы) = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У выбранной базы указана версия платформы %1, а СППР запущена на версии %2'"),
				ВерсияПлатформы,ВерсияПриложения),,"АдресИБ");
			КонецЕсли;	 
		Иначе
			ВерсияПриложения = КаталогИсполняемогоФайла;
			Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
				Если Найти(ВерсияПриложения,ВерсияПлатформы) = 0 Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У выбранной базы указана версия платформы %1, а для внешнего TestManager выбрана версия платформы %2'"),
					ВерсияПлатформы,ВерсияПриложения),,"КаталогИсполняемогоФайла");
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБазуИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	АдресИБ         = РезультатЗакрытия.СтрокаСоединения;
	ВерсияПлатформы = РезультатЗакрытия.Version;
	
	ДобавитьАдресИБВСписокВыбора();
	
	ВосстановитьНастройкиПоРанееСохраненномуЗначению(ВерсияПлатформы);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБазуИзСпискаЗавершениеTestManager(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	АдресИБTestManager = РезультатЗакрытия.СтрокаСоединения;
	
	ДобавитьАдресИБTestManagerВСписокВыбора();
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	НастройкиБДДляЗапускаТестовИзСценария = Новый Структура;
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("СтрокаИБ",АдресИБ);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("Пользователь",ИмяПользователяИнформационнойБазы);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("Пароль",ПарольПользователяИнформационнойБазы);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("ЭталоннаяБаза",ЭталоннаяБаза);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("СППРTestManager",СППРTestManager);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("КлючиЗапускаTestClient",КлючиЗапускаTestClient);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("КлючиЗапускаTestManager",КлючиЗапускаTestManager);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("КаталогИсполняемогоФайла",КаталогИсполняемогоФайла);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("АдресИБTestManager",АдресИБTestManager);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("ТаймаутЗапускаTestManager",ТаймаутЗапускаTestManager);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("ТипКлиента",ТипКлиента);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("МенеджерКластера",МенеджерКластера);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("Порт",Порт);
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("ЗначенияАдресИБ",Элементы.АдресИБ.СписокВыбора.ВыгрузитьЗначения());
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("ЗначенияКаталогИсполняемогоФайла",
	   Элементы.КаталогИсполняемогоФайла.СписокВыбора.ВыгрузитьЗначения());
	НастройкиБДДляЗапускаТестовИзСценария.Вставить("ЗначенияАдресИБTestManager",
	   Элементы.АдресИБTestManager.СписокВыбора.ВыгрузитьЗначения());
	   
	Тестирование.СохранитьНастройкиБДДляЗапускаТестовИзСценария(НастройкиБДДляЗапускаТестовИзСценария);
	
	Тестирование.СохранитьНастройкиЗапускаБазыTestClient(НастройкиЗапускаБазыTestClient());
КонецПроцедуры

&НаСервере
Функция НастройкиЗапускаБазыTestClient()
	Структура = Новый Структура;
	Структура.Вставить("АдресИБ",АдресИБ);
	Структура.Вставить("ЭталоннаяБаза",ЭталоннаяБаза);
	Структура.Вставить("КлючиЗапускаTestClient",КлючиЗапускаTestClient);
	Структура.Вставить("ТипКлиента",ТипКлиента);
	Структура.Вставить("МенеджерКластера",МенеджерКластера);
	Структура.Вставить("Порт",Порт);
	Структура.Вставить("СППРTestManager",СППРTestManager);
	Возврат Структура; 
КонецФункции	

&НаКлиенте
Процедура СППРTestManagerПриИзмененииСлужебный()
	Элементы.КаталогИсполняемогоФайла.Доступность = НЕ СППРTestManager = 0;
	Элементы.ИмяПользователяИнформационнойБазы.Доступность = НЕ СППРTestManager = 0;
	Элементы.ПарольПользователяИнформационнойБазы.Доступность = НЕ СППРTestManager = 0;
	Элементы.КлючиЗапускаTestManager.Доступность = НЕ СППРTestManager = 0;
	Элементы.АдресИБTestManager.Доступность = НЕ СППРTestManager = 0;
	Элементы.ТаймаутЗапускаTestManager.Доступность = НЕ СППРTestManager = 0;
	Элементы.ВыбратьБазуИзСпискаTestManager.Доступность = НЕ СППРTestManager = 0;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьНастроекМенеджераКластера()
	Если ТипКлиента = "Тонкий" Тогда
		Элементы.МенеджерКластера.Доступность = Ложь;
		Элементы.Порт.Доступность             = Ложь;
	Иначе	
		Элементы.МенеджерКластера.Доступность = Истина;
		Элементы.Порт.Доступность             = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТипКлиентаПриИзмененииСлужебный()
	ВидимостьНастроекМенеджераКластера();
	Если ТипКлиента = "Web" Тогда
		Если Найти(НРег(АдресИБ),"file=") > 0 Тогда
			МенеджерКластера = "localhost";
			Порт = 1538;
		ИначеЕсли Найти(НРег(АдресИБ),"srvr=") > 0 Тогда
			МассивСтрок = СтрРазделить(АдресИБ,";");
			Если МассивСтрок.Количество() > 0 Тогда
				Стр = МассивСтрок[0];
				Поз = Найти(Стр,"="); 
				
				МенеджерКластера = СтрЗаменить(Сред(Стр,Поз+1),"""","");
				Порт = 1541;
				
				Если Найти(МенеджерКластера,":") > 0 Тогда
					Стр              = МенеджерКластера;
					Поз              = Найти(Стр,":");
					МенеджерКластера = Лев(Стр,Поз-1);
					ПортСтрока       = СокрЛП(СтрЗаменить(Сред(Стр,Поз+1),Символы.НПП,""));
					Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПортСтрока) Тогда
						Порт = Число(ПортСтрока);
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Функция НастройкаЗапускаБазыTestClient()
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "НастройкиЗапускаБазыTestClient_" + НРег(АдресИБ));
КонецФункции	

#КонецОбласти