
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Хранилище") Тогда
		
		СкрытьСелектор = Истина;
		
		Если ТипЗнч(Параметры.Хранилище) = Тип("СправочникСсылка.Проекты") Тогда
			
			Селектор = СелекторПроект();
			Проект   = Параметры.Хранилище;
			
		ИначеЕсли ТипЗнч(Параметры.Хранилище) = Тип("СправочникСсылка.ВерсииПроекта") Тогда
			
			Селектор = СелекторВерсия();
			Версия   = Параметры.Хранилище;
			
		ИначеЕсли ТипЗнч(Параметры.Хранилище) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			Селектор          = СелекторТехническийПроект();
			ТехническийПроект = Параметры.Хранилище;
			
		КонецЕсли;
		
		ДанныеХранилища = ПолучитьДанныеХранилища(Селектор, Параметры.Хранилище);
		Проект         = ДанныеХранилища.Проект;
		АдресХранилища = ДанныеХранилища.АдресХранилища;
		
	КонецЕсли; 
	
	ПрочитатьНастройкиФормы();
	ПодключитьКонфигурациюКХранилищу = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьКаталогРазработки();
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СелекторПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьБезПодключенияПриИзменении(Элемент)
	
	Если ПодключитьКонфигурациюКХранилищу Тогда
	
		ОбновитьКонфигурациюИБ = Ложь;
	
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталог(КаталогИсполняемогоФайла);
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогБазыРазработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталог(КаталогБазыРазработки);
	УстановитьВидимостьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КаталогБазыРазработкиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресХранилищаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталог(АдресХранилища);
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ДанныеХранилища = ПолучитьДанныеХранилища(Селектор, Проект);
	АдресХранилища  = ДанныеХранилища.АдресХранилища;
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПриИзменении(Элемент)
	
	ДанныеХранилища = ПолучитьДанныеХранилища(Селектор, Версия);
	АдресХранилища  = ДанныеХранилища.АдресХранилища;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническийПроектПриИзменении(Элемент)
	
	ДанныеХранилища = ПолучитьДанныеХранилища(Селектор, ТехническийПроект);
	АдресХранилища  = ДанныеХранилища.АдресХранилища;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключиться(Команда)
	
	Отказ = Не ПроверитьЗаполнение();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ПроцессВыполняется  = Истина;
	ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонфигуратор(Команда)
	
	Отказ = Не ПроверитьЗаполнение();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСоединенияИБ = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(КаталогБазыРазработки);
	
	СтрокаКоманды = """%КаталогИсполняемогоФайла%1cv8"" DESIGNER /visible "
		+ " %СтрокаСоединенияИБ% "
		+ " " + ?(ЗначениеЗаполнено(ИмяПользователяБазыРазработки), "/N ""%ИмяПользователяИБ%"" ", "") + " "
		+ " " + ?(ЗначениеЗаполнено(ПарольПользователяБазыРазработки), "/P ""%ПарольПользователяИБ%"" ", "") + " "
		+ " /ConfigurationRepositoryF ""%КаталогХранилища%"" "
		+ " /ConfigurationRepositoryN ""%ИмяПользователяХранилища%"" "
		+ " " + ?(ЗначениеЗаполнено(ПарольПользователяХранилища), "/ConfigurationRepositoryP ""%ПарольПользователяХранилища%"" ", "") + " ";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",         
	                            ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла));
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединенияИБ%",               СтрокаСоединенияИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%",    ИмяПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилища%",                 АдресХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилища%",         ИмяПользователяХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилища%",      ПарольПользователяХранилища);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Если ЗначениеЗаполнено(ИмяПользователяХранилища) Тогда
	
		ИменаПользователейХранилищ = Элементы.ИмяПользователяХранилища.СписокВыбора.ВыгрузитьЗначения();
		
		ТекущееИмя = ИменаПользователейХранилищ.Найти(ИмяПользователяХранилища);
		Если ТекущееИмя <> Неопределено Тогда
			ИменаПользователейХранилищ.Удалить(ТекущееИмя);
		КонецЕсли; 
		
		ИменаПользователейХранилищ.Вставить(0, ИмяПользователяХранилища);
		
		КоличествоЗапоминаемыхИмен = 10;
		Если ИменаПользователейХранилищ.Количество() > КоличествоЗапоминаемыхИмен Тогда
			ИменаПользователейХранилищ.Удалить(КоличествоЗапоминаемыхИмен);
		КонецЕсли; 
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиПодключенияКБазе",
			"ИменаПользователейХранилищ",
			ИменаПользователейХранилищ,
			,
			,
			Истина);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогБазыРазработки) Тогда
		
		Если Селектор = СелекторПроект() Тогда
			КлючНастроек = Проект;
		ИначеЕсли Селектор = СелекторВерсия() Тогда
			КлючНастроек = Версия;
		ИначеЕсли Селектор = СелекторТехническийПроект() Тогда
			КлючНастроек = ТехническийПроект;
		КонецЕсли; 
		
		НастройкиКаталогаБазы = Новый Структура;
		НастройкиКаталогаБазы.Вставить("КаталогБазыРазработки",            КаталогБазыРазработки);
		НастройкиКаталогаБазы.Вставить("ИмяПользователяБазыРазработки",    ИмяПользователяБазыРазработки);
		НастройкиКаталогаБазы.Вставить("ПарольПользователяБазыРазработки", ПарольПользователяБазыРазработки);
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"НастройкиПодключенияКБазе",
		КлючНастроек,
		НастройкиКаталогаБазы,
		,
		,
		Истина);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиФормы()
	
	ИменаПользователейХранилищ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПодключенияКБазе",
		"ИменаПользователейХранилищ");
	
	Если ЗначениеЗаполнено(ИменаПользователейХранилищ) Тогда
		Элементы.ИмяПользователяХранилища.СписокВыбора.ЗагрузитьЗначения(ИменаПользователейХранилищ);
	КонецЕсли; 
	
	Если Селектор = СелекторПроект() Тогда
		КлючНастроек = Проект;
	ИначеЕсли Селектор = СелекторВерсия() Тогда
		КлючНастроек = Версия;
	ИначеЕсли Селектор = СелекторТехническийПроект() Тогда
		КлючНастроек = ТехническийПроект;
	КонецЕсли; 
	
	НастройкиКаталогаБазы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПодключенияКБазе",
		КлючНастроек);
	
	РасположениеЛокальногоПутиРазработки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСБазамиРазработки", 
		"РасположениеЛокальногоПутиРазработки",
		РасположениеЛокальногоПутиРазработки);
	
	Если ЗначениеЗаполнено(НастройкиКаталогаБазы) Тогда
		
		КаталогБазыРазработки            = НастройкиКаталогаБазы.КаталогБазыРазработки;
		ИмяПользователяБазыРазработки    = НастройкиКаталогаБазы.ИмяПользователяБазыРазработки;
		ПарольПользователяБазыРазработки = НастройкиКаталогаБазы.ПарольПользователяБазыРазработки;
		
		НастройкиКаталогаБазыНайдены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогРазработки()

	Если ЗначениеЗаполнено(АдресХранилища) 
	   И ЗначениеЗаполнено(РасположениеЛокальногоПутиРазработки) И Не НастройкиКаталогаБазыНайдены Тогда
		
		РазделительПути    = ?(СтрНайти(АдресХранилища, "://"), "/", "\");
		ПозицияРазделителя = СтрНайти(АдресХранилища, РазделительПути, НаправлениеПоиска.СКонца);
		
		Если ПозицияРазделителя <> 0 Тогда
			
			ПредлагаемоеИмяБазы = Сред(АдресХранилища, ПозицияРазделителя + 1);
			
			КаталогБазыРазработки = 
				  ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РасположениеЛокальногоПутиРазработки)
				+ ПредлагаемоеИмяБазы;
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

#Область ВыполнениеОперации

&НаКлиенте
Процедура ВыполнитьОперации()
	
	Если ПустаяСтрока(ИмяФайлаЛогов) Тогда
		
		#Если ВебКлиент Тогда
			ИмяФайлаЛогов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
			              + "Connection_" + Строка(Новый УникальныйИдентификатор) + ".log";
		#Иначе
			ИмяФайлаЛогов = ПолучитьИмяВременногоФайла("log");
		#КонецЕсли
	КонецЕсли; 
	
	Результат = РезультатТекущейОперации();
	Если Результат = "НеЗавершена" Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОперации", 5, Истина);
		Возврат;
	КонецЕсли;
	
	Если ПроцессВыполняется Тогда
		Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация;
	Иначе
		Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
		Возврат;
	КонецЕсли; 
	
	Если РезультатПодключениеКБазе = 0 ИЛИ РезультатПодключениеКБазе = 4 Тогда
		
		Если Результат = "НеНачата" Тогда
			Попытка
				ВыполнитьПодключениеКБазе();
			Исключение
				
				ДобавитьЗаписьВЛог(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОтобразитьЛогЗавершитьПроцесс();
				Результат = "";
				ВызватьИсключение НСтр("ru = 'В процессе создания хранилища возникли ошибки.'")
				
			КонецПопытки; 
		Иначе
			ОтобразитьРезультат("РезультатПодключениеКБазе");
			
			ТекстЗавершения = ?(ПодключитьКонфигурациюКХранилищу, 
			                    НСтр("ru='Подключение к хранилищу завершено.'"),
			                    НСтр("ru='Обновление из хранилища завершено.'"));
			
			ДобавитьЗаписьВЛог(ТекстЗавершения);
			ОтобразитьЛогЗавершитьПроцесс();
			
			ПоказатьПредупреждение(, ТекстЗавершения);
			СохранитьНастройки();
			Результат = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроцессВыполняется
		И (Результат = "УспешноЗавершена" ИЛИ Результат = "НеНачата") Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЛогЗавершитьПроцесс()
	
	Лог = Новый ТекстовыйДокумент;
	Лог.Прочитать(ИмяФайлаЛогов);
	Лог.Показать("Результат выполнения операций");
	
	Файл = Новый Файл(ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ИмяФайлаЛогов);
	КонецЕсли; 
	
	Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
	ПроцессВыполняется  = Ложь;
	ИмяФайлаРезультатов = "";
	ИмяФайлаЛогов       = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеБазыДанных()
	
	Если СтрНайти(Врег(КаталогБазыРазработки), "FILE=") = 1 Тогда // файловая ИБ
		КаталогИБ = Сред(КаталогБазыРазработки, 7, СтрДлина(КаталогБазыРазработки) - 8);
	Иначе 
		КаталогИБ = КаталогБазыРазработки;
	КонецЕсли;
	
	КаталогИБ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИБ);
	
	ДобавитьЗаписьВЛог(НСтр("ru='Проверка существования базы разработки.'"));
	
	Если ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИБ) Тогда 
		
		Файл = Новый Файл(КаталогИБ);
		БазаДанныхСуществует = Ложь;
		Если Файл.Существует() Тогда
			ФайлыБазыДанных = НайтиФайлы(КаталогИБ, "1Cv8.1CD");
			Если ФайлыБазыДанных.Количество() > 0 Тогда
				БазаДанныхСуществует = Истина;
				ДобавитьЗаписьВЛог(НСтр("ru='База данных в выбранном каталоге существует.'"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		БазаДанныхСуществует = Истина;
		ДобавитьЗаписьВЛог(НСтр("ru='База данных существует.'"));
	КонецЕсли;
	
	Если БазаДанныхСуществует Тогда
		Возврат;
	Иначе
		
		ДобавитьЗаписьВЛог(НСтр("ru='База данных не обнаружена. Начало создания базы данных разработки.'"));
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 CREATEINFOBASE File=""%КаталогИБ%"" /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
					  + " /AddInList ""%ИмяБазыРазработки%""";
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%", ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%",            ИмяФайлаЛогов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИБ%",                КаталогИБ);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяБазыРазработки%",        ПолучитьИмяБазы());
		
		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина, КодВозврата); // выполняется монопольно, т.к. лог не возможно получить
		
		Если КодВозврата <> 0 Тогда
			ТекстСообщения = НСтр("ru='Создание базы данных разработки закончилось неуспешно.'");
			ДобавитьЗаписьВЛог(ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
		ДобавитьЗаписьВЛог(НСтр("ru='Создание базы данных разработки завершено.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключениеКБазе()
	
	ВыполнитьСозданиеБазыДанных();
	
	ТекстНачала = ?(ПодключитьКонфигурациюКХранилищу, 
	                НСтр("ru='Начало подключения к базе разработки.'"),
	                НСтр("ru='Начало обновления базы разработки.'"));
	
	ДобавитьЗаписьВЛог(ТекстНачала);
	
	#Если ВебКлиент Тогда
		ИмяФайлаРезультатов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов())
		                    + "Connection_" + Строка(Новый УникальныйИдентификатор) + ".log";
	#Иначе
		ИмяФайлаРезультатов = ПолучитьИмяВременногоФайла("log");
	#КонецЕсли
	
	СтрокаСоединенияИБ = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(КаталогБазыРазработки);
	
	Если Не ЗначениеЗаполнено(СтрокаСоединенияИБ) Тогда
		ВызватьИсключение НСтр("ru = 'Указанный каталог базы разработки не является каталогом или строкой соединения'");
	КонецЕсли; 
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate "
			+ " %СтрокаСоединенияИБ% "
			+ " " + ?(ЗначениеЗаполнено(ИмяПользователяБазыРазработки), "/N ""%ИмяПользователяИБ%"" ", "") + " "
			+ " " + ?(ЗначениеЗаполнено(ПарольПользователяБазыРазработки), "/P ""%ПарольПользователяИБ%"" ", "") + " "
			+ " /ConfigurationRepositoryF ""%КаталогХранилища%"" "
			+ " /ConfigurationRepositoryN ""%ИмяПользователяХранилища%"" "
			+ " " + ?(ЗначениеЗаполнено(ПарольПользователяХранилища), "/ConfigurationRepositoryP ""%ПарольПользователяХранилища%"" ", "") + " "
			+ " %ДействияСБазой% /DumpResult ""%ИмяФайлаРезультатов%""";
	
	Если ПодключитьКонфигурациюКХранилищу Тогда
		
		ДействияСБазой = "/ConfigurationRepositoryBindCfg %ПодключитьПринудительно% -forceReplaceCfg";
		ПодключитьПринудительноСтрока = ?(ПодключитьПринудительно, "-forceBindAlreadyBindedUser", "");
		ДействияСБазой = СтрЗаменить(ДействияСБазой, "%ПодключитьПринудительно%", ПодключитьПринудительноСтрока);
		
	Иначе 
		ДействияСБазой = "/ConfigurationRepositoryUpdateCfg -revised -force";
		Если ОбновитьКонфигурациюИБ Тогда
			
			ДействияСБазой = ДействияСБазой + " -UpdateDBCfg ";
			
		КонецЕсли;
	КонецЕсли;
	
	 
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%",    ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла));
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",               ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБ%",          СтрокаСоединенияИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБ%",           ИмяПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБ%",        ПарольПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилища%",            АдресХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилища%",    ИмяПользователяХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилища%", ПарольПользователяХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ДействияСБазой%",              ДействияСБазой);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%",         ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла);
	
КонецПроцедуры

&НаКлиенте
Функция РезультатТекущейОперации()

	Если ПустаяСтрока(ИмяФайлаРезультатов) Тогда
		Возврат "НеНачата";
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Файл = Новый Файл(ИмяФайлаРезультатов);
		
		Если Файл.Существует() Тогда
			ТекстовыйДокумент.Прочитать(ИмяФайлаРезультатов);
			ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
			Если ПустаяСтрока(ТекстФайла) Тогда
				Возврат "НеЗавершена";
			Иначе
				Ответ = Число(ТекстФайла);
				
				Если Ответ = 0 Тогда
					Возврат "УспешноЗавершена";
				Иначе
					Возврат "ЗавершенаСОшибками";
				КонецЕсли;
			КонецЕсли; 
		Иначе
			Возврат "НеЗавершена";
		КонецЕсли;
	
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОтобразитьРезультат(ТекущаяОперация)
	
	Файл = Новый Файл(ИмяФайлаРезультатов);
	
	Если Файл.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайлаРезультатов);
		Ответ = Число(ТекстовыйДокумент.ПолучитьТекст());
		УдалитьФайлы(ИмяФайлаРезультатов);
		ИмяФайлаРезультатов = "";
	Иначе
		Ответ = 1;
		ИмяФайлаРезультатов = "";
	КонецЕсли;
	
	Если Ответ = 0 Тогда
		Результат = 2;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	ЭтаФорма[ТекущаяОперация] = Результат;
	
	Если Ответ <> 0 Тогда
		
		Лог = Новый ТекстовыйДокумент;
		Лог.Прочитать(ИмяФайлаЛогов);
		Лог.Показать("Результат выполнения операций");
		Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
		ОтключитьОбработчикОжидания("ВыполнитьОперации");
		ВызватьИсключение "В процессе создания хранилища возникли ошибки.";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПолучитьИмяБазы()
	
	Если Селектор = СелекторПроект() Тогда
		
		РеквизитыПроекта = ЗначениеРеквизитаОбъекта(Проект, "Код,Наименование");
		Возврат СтрШаблон("%1 %2", РеквизитыПроекта.Код, РеквизитыПроекта.Наименование);
		
	ИначеЕсли Селектор = СелекторВерсия() Тогда
		
		ПрефиксВерсии = "";
		Если СтрНайти(ВРег(АдресХранилища), ВРег("Corrective")) <> 0 Тогда
			ПрефиксВерсии = "Corrective ";
		КонецЕсли; 
		
		Возврат СтрШаблон("%1 %2", Строка(Проект), ПрефиксВерсии + Строка(Версия));
		
	ИначеЕсли Селектор = СелекторТехническийПроект() Тогда
		
		РеквизитыТехническогоПроекта = ЗначениеРеквизитаОбъекта(ТехническийПроект, "Код");
		Возврат СтрШаблон("%1 %2", РеквизитыТехническогоПроекта.Код, Строка(ТехническийПроект));
		
	Иначе
		Возврат "";
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, Реквизиты)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаписьВЛог(Запись)
	
	Лог  = Новый ТекстовыйДокумент;
	Файл = Новый Файл(ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(ИмяФайлаЛогов);
	КонецЕсли;
	Лог.ДобавитьСтроку(Строка(ТекущаяДата()) + " " +  Запись);
	Лог.Записать(ИмяФайлаЛогов);
	Лог = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКаталог(ЗаполняемыйРеквизит)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ЗаполняемыйРеквизит;
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ЗаполняемыйРеквизит = ДиалогОткрытияФайла.Каталог;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеХранилища(Селектор, Хранилище)
	
	ДанныеХранилища = Новый Структура("Проект,АдресХранилища");
	
	Если Селектор = СелекторПроект() И ТипЗнч(Хранилище) = Тип("СправочникСсылка.Проекты") Тогда
		
		ДанныеХранилища.Проект         = Хранилище;
		ДанныеХранилища.АдресХранилища = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Хранилище, "Ветка.Имя");
		
	ИначеЕсли Селектор = СелекторВерсия() И ТипЗнч(Хранилище) = Тип("СправочникСсылка.ВерсииПроекта") Тогда
		
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, "Владелец,Ветка.Имя");
		ДанныеХранилища.Проект         = РеквизитыВерсии.Владелец;
		ДанныеХранилища.АдресХранилища = РеквизитыВерсии.ВеткаИмя;
		
	ИначеЕсли Селектор = СелекторТехническийПроект() И ТипЗнч(Хранилище) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		РеквизитыТехническогоПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Хранилище, "Владелец,Ветка.Имя");
		ДанныеХранилища.Проект         = РеквизитыТехническогоПроекта.Владелец;
		ДанныеХранилища.АдресХранилища = РеквизитыТехническогоПроекта.ВеткаИмя;
		
	КонецЕсли; 
	
	Возврат ДанныеХранилища;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Версия.Видимость            = (Форма.Селектор = СелекторВерсия());
	Элементы.ТехническийПроект.Видимость = (Форма.Селектор = СелекторТехническийПроект());
	Элементы.Селектор.Видимость          = Не Форма.СкрытьСелектор;
	
	Элементы.Проект.ТолькоПросмотр                  = Форма.СкрытьСелектор;
	Элементы.Версия.ТолькоПросмотр                  = Форма.СкрытьСелектор;
	Элементы.ТехническийПроект.ТолькоПросмотр       = Форма.СкрытьСелектор;
	Элементы.ПодключитьПринудительно.ТолькоПросмотр = Не Форма.ПодключитьКонфигурациюКХранилищу;
	Элементы.ОбновитьКонфигурациюИБ.ТолькоПросмотр = НЕ Форма.ПодключитьКонфигурациюКХранилищу;
	
	Если Форма.ПодключитьКонфигурациюКХранилищу Тогда
		Элементы.Подключиться.Заголовок = НСтр("ru = 'Подключиться к хранилищу'");
	Иначе
		Элементы.Подключиться.Заголовок = НСтр("ru = 'Обновить конфигурацию из хранилища'");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Форма.КаталогИсполняемогоФайла) И ЗначениеЗаполнено(Форма.КаталогБазыРазработки) Тогда
		Элементы.ОткрытьКонфигуратор.Доступность = Истина;
	Иначе
		Элементы.ОткрытьКонфигуратор.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#Область Селектор

&НаКлиентеНаСервереБезКонтекста
Функция СелекторПроект()
	Возврат 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СелекторВерсия()
	Возврат 1;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СелекторТехническийПроект()
	Возврат 2;
КонецФункции

#КонецОбласти

#КонецОбласти
