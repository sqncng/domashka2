
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ТехническийПроект",                                ТехническийПроект);
	Параметры.Свойство("КаталогХранилищаДляЗагрузкиМетаданных",            КаталогХранилищаТехПроекта);
	Параметры.Свойство("ИмяПользователяХранилищаДляЗагрузкиМетаданных",    ИмяПользователяХранилищаТехПроекта);
	Параметры.Свойство("ПарольПользователяХранилищаДляЗагрузкиМетаданных", ПарольПользователяХранилищаТехПроекта);
	Параметры.Свойство("КаталогБазыРазработки",                            КаталогБазыРазработки);
	Параметры.Свойство("ИмяПользователяБазыРазработки",                    ИмяПользователяБазыРазработки);
	Параметры.Свойство("ПарольПользователяБазыРазработки",                 ПарольПользователяБазыРазработки);
	
	Если ЗначениеЗаполнено(ТехническийПроект) Тогда
		ТехническийПроектПриИзмененииНаСервере();
	КонецЕсли; 
	
	СозданиеФайлаПоставкиКонфигурации    = Истина;
	ЗагрузкаКонфигурацииИзФайлаПоставки  = Истина;
	СозданиеХранилищаТехническогоПроекта = Истина;
	ДобавлениеПользователей              = Истина;
	НачатоВыполнениеЗадания              = Ложь;
	
	СозданиеФайлаПоставкиКонфигурацииРезультат    = 4;
	ЗагрузкаКонфигурацииИзФайлаПоставкиРезультат  = 4;
	СозданиеХранилищаТехническогоПроектаРезультат = 4;
	ДобавлениеПользователейРезультат              = 4;
	ЗагрузитьБазуРезультат                        = 4;
	
	ТекстСостоянияДлительнойОперации = НСтр("ru = '(для прерывания нажмите Ctrl + Break)'");
	
	Элементы.Прогресс.МинимальноеЗначение = 0;
	Элементы.Прогресс.МаксимальноеЗначение = 100;
	
	ЗагрузитьНастройкиВыполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеХранилищаПроекта_ОбновлениеСтатуса" Тогда
		
		Прогресс        = Параметр.Прогресс;
		ТекущаяОперация = Параметр.ТекущаяОперация;
		ЭтаФорма.ОбновитьОтображениеДанных();
		
	ИначеЕсли ИмяСобытия = "СозданиеХранилищаПроекта_ОтобразитьРезультат" Тогда
		ТекущиеОперации = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметр.ТекущаяОперация, ";");
		Для Каждого Операция Из ТекущиеОперации Цикл
			ЭтаФорма[Операция] = Параметр.Результат;
		КонецЦикла;
		ЭтаФорма.ОбновитьОтображениеДанных();
		
	ИначеЕсли ИмяСобытия = "СозданиеХранилищаПроекта_ЗакрытьФорму" Тогда
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьКаталогРазработки();
	
	Если НЕ ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных)
		И ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИБДляЗагрузкиМетаданных) Тогда
		Файл = Новый Файл(КаталогИБДляЗагрузкиМетаданных);
		Если НЕ Файл.Существует() Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, НСтр("ru = 'Не доступен каталог ИБ для загрузки метаданных по проекту. Создание хранилища не возможно.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда 
		
		#Если НЕ ВебКлиент Тогда
		СисИнфо = Новый СистемнаяИнформация;
		КаталогПрограммы = КаталогПрограммы();
		
		Если Найти(КаталогПрограммы, СисИнфо.ВерсияПриложения) > 0 И НЕ ЗначениеЗаполнено(ПутьКВерсиямПлатформыНаКлиенте) Тогда
			
			ПутьКВерсиямПлатформыНаКлиенте = СтрЗаменить(КаталогПрограммы, СисИнфо.ВерсияПриложения, "%ВерсияПлатформы%");
			
		КонецЕсли; 
		#КонецЕсли
		
		Если ЗначениеЗаполнено(ВерсияПлатформыХранилищаТехническихПроектов)
		   И ВерсияПлатформы <> ВерсияПлатформыХранилищаТехническихПроектов Тогда
			
			Если Найти(ПутьКВерсиямПлатформыНаКлиенте, "%ВерсияПлатформы%") > 0 Тогда
				
				НачалоПутиКВерсиямПлатформыНаКлиенте = Лев(ПутьКВерсиямПлатформыНаКлиенте, Найти(ПутьКВерсиямПлатформыНаКлиенте, "%ВерсияПлатформы%")-1);
				ОкончаниеПутиКВерсиямПлатформыНаКлиенте = СтрЗаменить(ПутьКВерсиямПлатформыНаКлиенте, НачалоПутиКВерсиямПлатформыНаКлиенте, "");
				ОкончаниеПутиКВерсиямПлатформыНаКлиенте = СтрЗаменить(ОкончаниеПутиКВерсиямПлатформыНаКлиенте, "%ВерсияПлатформы%", "");
				
				Файл1 = Новый Файл(СтрЗаменить(ПутьКВерсиямПлатформыНаКлиенте, "%ВерсияПлатформы%", ВерсияПлатформы));
				Файл2 = Новый Файл(СтрЗаменить(ПутьКВерсиямПлатформыНаКлиенте, "%ВерсияПлатформы%", ВерсияПлатформыХранилищаТехническихПроектов));
				
				Если НЕ Файл1.Существует() И НЕ Файл2.Существует() Тогда
					
					Элементы.ДекорацияНеНайденныеВерсии.Заголовок = НСтр("ru = 'Версии платформы:'") + 
						Символы.ПС + Файл1.ПолноеИмя + Символы.ПС + Файл2.ПолноеИмя + Символы.ПС + НСтр("ru = 'не найдены.'");
					
					Элементы.ДекорацияНеНайденныеВерсии.Видимость         = Истина;
					Элементы.ДекорацияВерсияПроекта.Видимость             = Ложь;
					Элементы.ДекорацияВерсияТехническогоПроекта.Видимость = Ложь;
					
				Иначе 
					
					Если Файл1.Существует() Тогда
						ПутьКВерсии = НСтр("ru = 'Для создания поставки будет использована версия платформы: %ПутьКВерсии%'");
						Элементы.ДекорацияВерсияПроекта.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ТекстИнформационнойНадписи");
					Иначе
						ПутьКВерсии = НСтр("ru = 'Версия платформы: %ПутьКВерсии% не найдена.'");
						Элементы.ДекорацияВерсияПроекта.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветОсобогоТекста");
					КонецЕсли; 
					Элементы.ДекорацияВерсияПроекта.Заголовок = СтрЗаменить(ПутьКВерсии, "%ПутьКВерсии%", Файл1.ПолноеИмя);
					
					Если Файл2.Существует() Тогда
						ПутьКВерсии = НСтр("ru = 'Для создания хранилища технического проекта будет использована версия платформы: %ПутьКВерсии%'");
						Элементы.ДекорацияВерсияТехническогоПроекта.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ТекстИнформационнойНадписи");
					Иначе
						ПутьКВерсии = НСтр("ru = 'Версия платформы: %ПутьКВерсии% не найдена.'");
						Элементы.ДекорацияВерсияТехническогоПроекта.ЦветТекста = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветОсобогоТекста");
					КонецЕсли; 
					Элементы.ДекорацияВерсияТехническогоПроекта.Заголовок = СтрЗаменить(ПутьКВерсии, "%ПутьКВерсии%", Файл2.ПолноеИмя);
					
					Элементы.ДекорацияНеНайденныеВерсии.Видимость         = Ложь;
					Элементы.ДекорацияВерсияПроекта.Видимость             = Истина;
					Элементы.ДекорацияВерсияТехническогоПроекта.Видимость = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Элементы.СтраницыКаталогИсполняемогоФайла.ТекущаяСтраница = Элементы.ГруппаШаблонПутиИсполняемогоФайла;
			
		Иначе 
			
			ПутьДоВерсии = СтрЗаменить(ПутьКВерсиямПлатформыНаКлиенте, "%ВерсияПлатформы%", ВерсияПлатформы);
			Файл         = Новый Файл(ПутьДоВерсии);
			
			Если Файл.Существует() Тогда 
				КаталогИсполняемогоФайла = ПутьДоВерсии;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	УстановитьДоступностьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗагрузитьБазу Тогда
		Если Не ЗначениеЗаполнено(ИмяФайлаБазыДляЗагрузки) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Поле ""Имя файла базы для загрузки"" не заполнено.'");
			Сообщение.Поле = "ИмяФайлаБазыДляЗагрузки";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ИсточникПоставки = 0 Тогда
		НепроверяемыеРеквизиты.Добавить("ПутьКФайлуПоставки");
	КонецЕсли; 
	
	Если НЕ (ЗначениеЗаполнено(ВерсияПлатформы) 
		И ЗначениеЗаполнено(ВерсияПлатформыХранилищаТехническихПроектов)
		И ВерсияПлатформы <> ВерсияПлатформыХранилищаТехническихПроектов) Тогда
		
		НепроверяемыеРеквизиты.Добавить("НачалоПутиКВерсиямПлатформыНаКлиенте");
	Иначе
		НепроверяемыеРеквизиты.Добавить("КаталогИсполняемогоФайла");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СтруктураНастроекПроекта = ТехническиеПроекты.СтруктураНастроекПроекта();
	СтруктураНастроекПроекта.РасположениеИБТехпроекта = КаталогБазыРазработки;
	СтруктураНастроекПроекта.ПользовательИБТехпроекта = ИмяПользователяБазыРазработки;
	ТехническиеПроекты.СохранитьНастройкиТехническогоПроекта(ТехническийПроект, СтруктураНастроекПроекта);
	Настройки.Удалить("КаталогБазыРазработки");
	Настройки.Удалить("ИмяПользователяБазыРазработки");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура КаталогХранилищТехническихПроектовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлКаталог(КаталогХранилищТехническихПроектов, РежимДиалогаВыбораФайла.ВыборКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлКаталог(КаталогИсполняемогоФайла, РежимДиалогаВыбораФайла.ВыборКаталога);
	УстановитьДоступностьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПоставкиПриИзменении(Элемент)
	
	УстановитьДоступностьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлКаталог(ПутьКФайлуПоставки, РежимДиалогаВыбораФайла.Открытие);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИБДляЗагрузкиМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлКаталог(КаталогИБДляЗагрузкиМетаданных, РежимДиалогаВыбораФайла.ВыборКаталога);
	
	СтрокаСоединенияИБДляЗагрузкиМетаданных = СтрокаСоединенияИБ(КаталогИБДляЗагрузкиМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогХранилищаДляЗагрузкиМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлКаталог(КаталогХранилищаДляЗагрузкиМетаданных, РежимДиалогаВыбораФайла.ВыборКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьБазуПриИзменении(Элемент)
	
	УстановитьДоступностьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогБазыРазработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлКаталог(КаталогБазыРазработки, РежимДиалогаВыбораФайла.ВыборКаталога);
	УстановитьДоступностьВидимостьЭлементов();
	ОповеститьОбИзмененииПараметра("КаталогБазыРазработки");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяБазыРазработкиПриИзменении(Элемент)
	
	ОповеститьОбИзмененииПараметра("ИмяПользователяБазыРазработки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПарольПользователяБазыРазработкиПриИзменении(Элемент)
	
	ОповеститьОбИзмененииПараметра("ПарольПользователяБазыРазработки");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаБазыДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайлаБазыДляЗагрузки;
	Текст = "ru = ""Файл выгрузки базы данных""; en = ""Data base dump file""";
	Фильтр = НСтр(Текст)+" (*.dt)|*.dt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Введите имя файла";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайлаБазыДляЗагрузки = МассивФайлов[0];
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЛоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Текст = "ru = ""Текстовый файл""; en = ""Text file""";
	Фильтр = НСтр(Текст)+" (*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Введите имя файла";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
	    МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Если МассивФайлов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайлаЛогов = МассивФайлов[0];
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническийПроектПриИзменении(Элемент)
	
	ТехническийПроектПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПутиКВерсиямПлатформыНаКлиентеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПутиКВерсиямПлатформыНаКлиенте) Тогда
		
		ПутьКВерсиямПлатформыНаКлиенте = НачалоПутиКВерсиямПлатформыНаКлиенте + "%ВерсияПлатформы%" + ОкончаниеПутиКВерсиямПлатформыНаКлиенте;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПутиКВерсиямПлатформыНаКлиентеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НачалоПутиКВерсиямПлатформыНаКлиенте) Тогда
		
		ПутьКВерсиямПлатформыНаКлиенте = НачалоПутиКВерсиямПлатформыНаКлиенте + "%ВерсияПлатформы%" + ОкончаниеПутиКВерсиямПлатформыНаКлиенте;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьХранилище(Команда)
	
	Отказ = Не ПроверитьЗаполнение();
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	Если ПроцессВыполняется Тогда
		ТекстВопроса = НСтр("ru='Продолжить с места остановки?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Начать с начала'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		Оповещение = Новый ОписаниеОповещения("СоздатьХранилищеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		
	Иначе
		ПроцессВыполняется = Истина;
		ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьХранилищеЗавершение(Результат, ДопПарметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПроцессВыполняется = Истина;
		ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		СозданиеФайлаПоставкиКонфигурацииРезультат    = 4;
		СозданиеБазыДанныхРезультат                   = 4;
		ЗагрузитьБазуРезультат                        = 4;
		ЗагрузкаКонфигурацииИзФайлаПоставкиРезультат  = 4;
		СозданиеХранилищаТехническогоПроектаРезультат = 4;
		ДобавлениеПользователейРезультат              = 4;
		
		ПроцессВыполняется = Истина;
		ИмяФайлаРезультатов = "";
		
		ОчиститьНастройкиВыполнения(ТехническийПроект);
		
		ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонфигуратор(Команда)
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /visible"
				  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%""";
		
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%",КаталогБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%",ИмяПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%",ПарольПользователяБазыРазработки);
		
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла);
	
	Если ДобавлениеПользователейРезультат = 2 Тогда
		Закрыть();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ОстановитьВыполнениеОпераций(Команда)
	
	ПрерватьПроцесс = Истина;
	ТекстСостоянияДлительнойОперации = НСтр("ru = 'Ожидание завершения операции...'");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьВидимостьЭлементов()
	
	Элементы.ПутьКФайлуПоставки.Видимость = (ИсточникПоставки = 1);
	
	Если ЗагрузитьБазу Тогда
		Элементы.ИмяФайлаБазыДляЗагрузки.Доступность = Истина;
		Элементы.ИмяФайлаБазыДляЗагрузки.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ИмяФайлаБазыДляЗагрузки.Доступность = Ложь;
		Элементы.ИмяФайлаБазыДляЗагрузки.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогИсполняемогоФайла) И ЗначениеЗаполнено(КаталогБазыРазработки) Тогда
		Элементы.ОткрытьКонфигуратор.Доступность = Истина;
	Иначе
		Элементы.ОткрытьКонфигуратор.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТехническийПроектПриИзмененииНаСервере()
	
	РеквизитыТехПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТехническийПроект, "Владелец, Код, Наименование, Ответственный, Участники");
	НомерТехПроекта = РеквизитыТехПроекта.Код;
	
	НедопустимыеСимволы = "%""(){}[]+=-|\/><.,*&^$#@!':;~`?";
	
	ИмяТехПроекта = РеквизитыТехПроекта.Наименование;
	Для НомерСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
		ИмяТехПроекта = СтрЗаменить(ИмяТехПроекта, Сред(НедопустимыеСимволы, НомерСимвола, 1), "");
		НомерТехПроекта = СтрЗаменить(НомерТехПроекта, Сред(НедопустимыеСимволы, НомерСимвола, 1), "");
	КонецЦикла;
	
	Пока Найти(ИмяТехПроекта," ") <> 0 Цикл
		ПозицияПробела = Найти(ИмяТехПроекта," ");
		СимволЗаПробелом = Сред(ИмяТехПроекта, ПозицияПробела + 1, 1);
		КодСимвола = КодСимвола(СимволЗаПробелом);
		Если КодСимвола >= 1072 И КодСимвола <= 1103 Тогда
			СимволЗаПробелом = Символ(КодСимвола - 32);
		КонецЕсли;
		ДлинаСтроки = СтрДлина(ИмяТехПроекта);
		ОстатокИмениПослеСимволаЗаПробелом = Сред(ИмяТехПроекта, ПозицияПробела + 2, СтрДлина(ИмяТехПроекта) - ПозицияПробела); 
		
		ИмяТехПроекта = Лев(ИмяТехПроекта, ПозицияПробела - 1) + СимволЗаПробелом + ОстатокИмениПослеСимволаЗаПробелом;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИмяПользователяХранилищаТехПроекта) Тогда
		ИмяПользователяХранилищаТехПроекта = РеквизитыТехПроекта.Ответственный;
		ПозицияПробела = Найти(ИмяПользователяХранилищаТехПроекта, " ");
		Если ПозицияПробела <> 0 Тогда
			ИмяПользователяХранилищаТехПроекта = Лев(ИмяПользователяХранилищаТехПроекта, ПозицияПробела - 1);
		КонецЕсли;
		Для НомерСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
			ИмяПользователяХранилищаТехПроекта = СтрЗаменить(ИмяПользователяХранилищаТехПроекта, Сред(НедопустимыеСимволы, НомерСимвола, 1), "");
		КонецЦикла;
	КонецЕсли; 
	
	УчастникиПроекта.Очистить();
	
	Если ЗначениеЗаполнено(ТехническийПроект) Тогда
		ДанныеУчастников = РеквизитыТехПроекта.Участники.Выгрузить();
		Для Каждого СтрокаУчастника Из ДанныеУчастников Цикл
			ИмяУчастника = СокрЛП(Строка(СтрокаУчастника.Участник));
			ПозицияПробела = Найти(ИмяУчастника, " ");
			Если ПозицияПробела <> 0 Тогда
				ИмяУчастника = Лев(ИмяУчастника, ПозицияПробела - 1);
			КонецЕсли;
			Для НомерСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
				ИмяУчастника = СтрЗаменить(ИмяУчастника, Сред(НедопустимыеСимволы, НомерСимвола, 1), "");
			КонецЦикла;
			
			Если УчастникиПроекта.НайтиПоЗначению(ИмяУчастника) = Неопределено 
				И ИмяУчастника <> ИмяПользователяХранилищаТехПроекта Тогда
				УчастникиПроекта.Добавить(ИмяУчастника);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыПроекта = Новый Массив;
	РеквизитыПроекта.Добавить("КаталогИБДляЗагрузкиМетаданных");
	РеквизитыПроекта.Добавить("ВерсияПлатформы");
	РеквизитыПроекта.Добавить("ИмяПользователяИБДляЗагрузкиМетаданных");
	РеквизитыПроекта.Добавить("ПарольПользователяИБДляЗагрузкиМетаданных");
	РеквизитыПроекта.Добавить("Ветка.Имя");
	РеквизитыПроекта.Добавить("ИмяПользователяХранилищаДляЗагрузкиМетаданных");
	РеквизитыПроекта.Добавить("ПарольПользователяХранилищаДляЗагрузкиМетаданных");
	РеквизитыПроекта.Добавить("КаталогХранилищТехническихПроектов");
	РеквизитыПроекта.Добавить("ВерсияПлатформыХранилищаТехническихПроектов");
	
	ДанныеПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыТехПроекта.Владелец, РеквизитыПроекта);
	ДанныеПроекта.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", ДанныеПроекта.ВеткаИмя);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеПроекта);
	
	СтрокаСоединенияИБДляЗагрузкиМетаданных = СтрокаСоединенияИБ(КаталогИБДляЗагрузкиМетаданных);
	
	НастройкиТехническогоПроекта  = ТехническиеПроекты.ПолучитьНастройкиТехническогоПроекта(ТехническийПроект);
	КаталогБазыРазработки         = НастройкиТехническогоПроекта.РасположениеИБТехпроекта;
	ИмяПользователяБазыРазработки = НастройкиТехническогоПроекта.ПользовательИБТехпроекта;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСоединенияИБ(КаталогИБДляЗагрузкиМетаданных)
	
	СтрокаСоединения = "";
	
	Если ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных) Тогда
		
		СтрокаСоединения = " /IBConnectionString ""%СтрокаСоединения%""";
		ПутьИБ = КаталогИБДляЗагрузкиМетаданных;
		Если Найти(ПутьИБ, """""") = 0 Тогда
			ПутьИБ = СтрЗаменить(ПутьИБ, """", """""");
		КонецЕсли; 
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%СтрокаСоединения%", ПутьИБ);
	ИначеЕсли ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИБДляЗагрузкиМетаданных) Тогда
		
		СтрокаСоединения = " /F ""%Путь%""";
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%Путь%", КаталогИБДляЗагрузкиМетаданных);
		
	ИначеЕсли Найти(КаталогИБДляЗагрузкиМетаданных, "\") > 0 Тогда
		
		СтрокаСоединения = " /S ""%Путь%""";
		СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "%Путь%", КаталогИБДляЗагрузкиМетаданных);
	
	КонецЕсли;
	
	Возврат СтрокаСоединения;
	
КонецФункции 
 
&НаКлиенте
Процедура ВыполнитьОперации()
	
	Если ПустаяСтрока(ИмяФайлаЛогов) Тогда
		ИмяФайлаЛогов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогБазыРазработки) + "main.log";
	КонецЕсли; 
	
	Результат = РезультатТекущейОперации();
	Если Результат = "НеЗавершена" Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОперации", 5, Истина);
		Если ПрерватьПроцесс Тогда
			ТекстСостоянияДлительнойОперации = НСтр("ru = 'Ожидание завершения операции...'");
		Иначе
			ТекстСостоянияДлительнойОперации = НСтр("ru = '(для прерывания нажмите Ctrl + Break)'");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПроцессВыполняется И НЕ (ПрерватьПроцесс И Результат = "НеНачата") Тогда
		Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация;
	Иначе
		Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
		ПрерватьПроцесс = Ложь;
		Возврат;
	КонецЕсли; 
	
	Если СозданиеФайлаПоставкиКонфигурацииРезультат = 0 Или СозданиеФайлаПоставкиКонфигурацииРезультат = 4 Тогда
		Если Не НачатоВыполнениеЗадания Тогда
			ПодключитьОбработчикОжидания("ВыполнитьСозданиеФайлаПоставкиКонфигурации", 0.1, Истина);
		ИначеЕсли СозданиеФайлаПоставкиКонфигурацииРезультат = 2 Тогда
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ТекущаяОперация", "СозданиеФайлаПоставкиКонфигурацииРезультат");
			ПараметрыОповещения.Вставить("Результат", 2);
			Оповестить("СозданиеХранилищаПроекта_ОтобразитьРезультат", ПараметрыОповещения);
		КонецЕсли;
	ИначеЕсли СозданиеБазыДанныхРезультат = 0 Или СозданиеБазыДанныхРезультат = 4 Тогда
		Если Результат = "НеНачата" Тогда
			ВыполнитьСозданиеБазыДанных();
		Иначе
			ОтобразитьРезультат("СозданиеБазыДанныхРезультат");
			ДобавитьЗаписьВЛог(НСтр("ru='Создание базы данных разработки завершено.'"));
		КонецЕсли;
	ИначеЕсли ЗагрузитьБазуРезультат = 0 Или ЗагрузитьБазуРезультат = 4 Тогда
		Если Результат = "НеНачата" Тогда
			ВыполнитьЗагрузитьБазу();
		Иначе
			ОтобразитьРезультат("ЗагрузитьБазуРезультат");
			ДобавитьЗаписьВЛог(НСтр("ru='Загрузка данных в базу разработки завершена.'"));
		КонецЕсли;
	ИначеЕсли ЗагрузкаКонфигурацииИзФайлаПоставкиРезультат = 0 Или ЗагрузкаКонфигурацииИзФайлаПоставкиРезультат = 4 Тогда
		Если Результат = "НеНачата" Тогда
			ВыполнитьЗагрузкаКонфигурацииИзФайлаПоставки();
		Иначе
			ОтобразитьРезультат("ЗагрузкаКонфигурацииИзФайлаПоставкиРезультат");
			ДобавитьЗаписьВЛог(НСтр("ru='Загрузка конфигурации из файла поставки завершена.'"));
		КонецЕсли;
	ИначеЕсли СозданиеХранилищаТехническогоПроектаРезультат = 0 Или СозданиеХранилищаТехническогоПроектаРезультат = 4 Тогда
		Если Результат = "НеНачата" Тогда
			ВыполнитьСозданиеХранилищаТехническогоПроекта();
		Иначе
			ОтобразитьРезультат("СозданиеХранилищаТехническогоПроектаРезультат");
			ДобавитьЗаписьВЛог(НСтр("ru='Создание хранилища технического проекта завершено.'"));
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", КаталогХранилищаТехПроекта);
			ПараметрОповещения.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", ИмяПользователяХранилищаТехПроекта);
			ПараметрОповещения.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", ПарольПользователяХранилищаТехПроекта);
			ПараметрОповещения.Вставить("КаталогБазыРазработки", КаталогБазыРазработки);
			ПараметрОповещения.Вставить("ИмяПользователяБазыРазработки", ИмяПользователяБазыРазработки);
			ПараметрОповещения.Вставить("ПарольПользователяБазыРазработки", ПарольПользователяБазыРазработки);
			ПараметрОповещения.Вставить("ТехническийПроект", ТехническийПроект);
			
			Оповестить("СозданиеХранилищаТехПроектаЗавершено", ПараметрОповещения, ЭтаФорма.ВладелецФормы);
		КонецЕсли;
	ИначеЕсли ДобавлениеПользователейРезультат = 0 Или ДобавлениеПользователейРезультат = 4 Тогда
		Если Результат = "НеНачата" Тогда
			ВыполнитьДобавлениеПользователей();
		Иначе
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Прогресс", 100);
			ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Создание хранилища технического проекта завершено.'"));
			Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
			
			ОтобразитьРезультат("ДобавлениеПользователейРезультат");
			ДобавитьЗаписьВЛог(НСтр("ru='Добавление пользователей в хранилище технического проекта завершено.'"));
			
			Лог = Новый ТекстовыйДокумент;
			Лог.Прочитать(ИмяФайлаЛогов);
			Лог.Показать("Результат выполнения операций");
			
			Файл = Новый Файл(ИмяФайлаЛогов);
			Если Файл.Существует() Тогда
				УдалитьФайлы(ИмяФайлаЛогов);
			КонецЕсли; 
			
			Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
			ПроцессВыполняется = Ложь;
			
			ПоказатьПредупреждение(, НСтр("ru='Создание хранилища технического проекта завершено.'"));
			Результат = "";
			
			ОчиститьНастройкиВыполнения(ТехническийПроект);

		КонецЕсли;
	КонецЕсли;
	
	Если ПроцессВыполняется
		И (Результат = "УспешноЗавершена" 
		ИЛИ Результат = "НеНачата") Тогда
		ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ОперацииСозданияХранилища 

&НаКлиенте
Процедура ВыполнитьСозданиеФайлаПоставкиКонфигурации()
	
	ФайлПоставкиКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогБазыРазработки) + "conf.cf";
	
	Если СозданиеФайлаПоставкиКонфигурации Тогда
		
		Если ИсточникПоставки = 1 Тогда
			
			Попытка
				
				Файл = Новый Файл(КаталогБазыРазработки);
				Если Не Файл.Существует() Тогда
					СоздатьКаталог(КаталогБазыРазработки);
				КонецЕсли; 
				КопироватьФайл(ПутьКФайлуПоставки, ФайлПоставкиКонфигурации);
				
			Исключение
				
				ПроцессВыполняется = Ложь;
				ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецПопытки;
			
			СозданиеФайлаПоставкиКонфигурацииРезультат = 2;
			ЭтаФорма.ОбновитьОтображениеДанных();
			
			ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);
			
		Иначе
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Прогресс", 20);
			ПараметрыОповещения.Вставить("ТекущаяОперация", "Cоздание файла поставки...");
			Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
			
			НачатоВыполнениеЗадания = Истина;
			
			РезультатРасчета = ВыполнитьСозданиеИОбновлениеБазыДляЗагрузкиМетаданных();
			
			АдресХранилищаПоставка = РезультатРасчета.АдресХранилища;
			ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
			
			Если РезультатРасчета.ЗаданиеВыполнено Тогда
				СохранитьФайлПоставкиНаКлиенте();
			Иначе
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьСозданиеИОбновлениеБазыДляЗагрузкиМетаданных()
	
	УстановитьПривилегированныйРежим(Истина);
	
	КлючЗадания = Строка(ТехническийПроект.Владелец.УникальныйИдентификатор());
	КлючЗадания = "СозданиеПоставки_"+ КлючЗадания;
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ,Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно));
	
	Если МассивЗаданий.Количество() = 0 Тогда
		Ожидаем = Ложь;
		
		НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Создание поставки проекта: %1'"),
			Строка(ТехническийПроект.Владелец));
			
		РезультатРасчета = ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.СозданиеХранилища.ВыполнитьСозданиеФайлаПоставки",
			ТехническийПроект,
			НаименованиеЗадания,
			,
			КлючЗадания);
		
	Иначе
		Ожидаем = Истина;
		ФЗ = МассивЗаданий[0];
		
		РезультатРасчета = Новый Структура;
		РезультатРасчета.Вставить("АдресХранилища",       Неопределено);
		РезультатРасчета.Вставить("ЗаданиеВыполнено",     Ложь);
		РезультатРасчета.Вставить("ИдентификаторЗадания", ФЗ.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаСервере
Функция ВыполнитьКопированиеПоставки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ожидаем = Ложь;
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Копирование поставки тех. проекта: %1'"),
		Строка(ТехническийПроект));
	
	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.СозданиеХранилища.ВыполнитьКопированиеФайлаПоставки",
		ТехническийПроект,
		НаименованиеЗадания);
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если Ожидаем Тогда
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			РезультатРасчета = ВыполнитьКопированиеПоставки();
			АдресХранилищаПоставка = РезультатРасчета.АдресХранилища;
			ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
			Если РезультатРасчета.ЗаданиеВыполнено Тогда
				СохранитьФайлПоставкиНаКлиенте();
			Иначе
				ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли; 
			Возврат;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		СохранитьФайлПоставкиНаКлиенте();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлПоставкиНаКлиенте()
	
	Перем ДвоичныеДанные;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилищаПоставка);
	Если ДвоичныеДанные <> Неопределено Тогда
		ДвоичныеДанные.Записать(ФайлПоставкиКонфигурации);
	КонецЕсли;
	
	СозданиеФайлаПоставкиКонфигурацииРезультат = 2;
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	ПодключитьОбработчикОжидания("ВыполнитьОперации", 0.1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

// Заменить на процедуру БСП 2.3.2!!!
// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
&НаСервере
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, 
	Знач Параметры, Знач НаименованиеЗадания = "", ИспользоватьДополнительноеВременноеХранилище = Ложь, КлючФоновогоЗадания = "") Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	РежимОтладки = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	Если РежимОтладки Тогда
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
		
	Иначе
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
		ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		Задание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, КлючФоновогоЗадания, НаименованиеЗадания);
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
		Результат.ЗаданиеВыполнено = ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСозданиеБазыДанных()
	
	Если ЗагрузкаКонфигурацииИзФайлаПоставки Тогда
		
		ДобавитьЗаписьВЛог(НСтр("ru='Проверка существования базы разработки.'"));
		Файл = Новый Файл(КаталогБазыРазработки);
		БазаДанныхСуществует = Ложь;
		Если Файл.Существует() Тогда
			ФайлыБазыДанных = НайтиФайлы(КаталогБазыРазработки,"1Cv8.1CD");
			Если ФайлыБазыДанных.Количество() > 0 Тогда
				БазаДанныхСуществует = Истина;
				ДобавитьЗаписьВЛог(НСтр("ru='База данных в выбранном каталоге существует.'"));
			КонецЕсли;
		КонецЕсли;
		
		Если БазаДанныхСуществует Тогда
			СозданиеБазыДанныхРезультат = 2;
		Иначе
			
			ИмяФайлаРезультатов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогБазыРазработки)+"db_create.log";
			
			СозданиеБазыДанныхРезультат = 4;
			
			ДобавитьЗаписьВЛог(НСтр("ru='База данных не обнаружена. Начало создания базы данных разработки.'"));
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Прогресс", 30);
			ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Создание базы данных разработки...'"));
			Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
			
			СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 CREATEINFOBASE File=""%КаталогБазыРазработки%"" /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
			              + " /AddInList ""%ИмяБазыРазработки%""";
			
			ИмяБазыРазработки = НомерТехПроекта + " " + Строка(ТехническийПроект);
			НедопустимыеСимволы = """'";
			Для НомерСимвола = 1 По СтрДлина(НедопустимыеСимволы) Цикл
				ИмяБазыРазработки = СтрЗаменить(ИмяБазыРазработки, Сред(НедопустимыеСимволы, НомерСимвола, 1), "");
			КонецЦикла;
			
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%",         ИмяФайлаЛогов);
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяБазыРазработки%",     ИмяБазыРазработки);
			
			ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла(Истина), Истина); // выполняется монопольно, т.к. лог не возможно получить
			
			ДобавитьЗаписьВЛог(НСтр("ru='Создание базы данных разработки завершено.'"));
			ДобавитьЗаписьВЛог(НСтр("ru='Начало тестирования созданной базы данных разработки.'"));
			
			СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /F ""%КаталогБазыРазработки%"" /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
						  + " /IBCheckAndRepair -LogIntegrity /DumpResult ""%ИмяФайлаРезультатов%""";
						  
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%",           ИмяФайлаЛогов);
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%",   КаталогБазыРазработки);
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%",     ИмяФайлаРезультатов);
			
			ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла(Истина));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузитьБазу()
	
	Если ЗагрузкаКонфигурацииИзФайлаПоставки Тогда
		
		Если НЕ ЗагрузитьБазу Тогда
			ЗагрузитьБазуРезультат = 2;
		КонецЕсли;
		
		Если ЗагрузитьБазу И (ЗагрузитьБазуРезультат = 4 Или ЗагрузитьБазуРезультат = 0) Тогда
			
			ИмяФайлаРезультатов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогБазыРазработки)+"upload_dt.log";
			
			ДобавитьЗаписьВЛог(НСтр("ru='Начало загрузки данных в базу разработки.'"));
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Прогресс", 35);
			ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Создание базы данных разработки...'"));
			Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
			
			СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /F ""%КаталогБазыРазработки%"" /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
						  + " /RestoreIB ""%ИмяФайлаБазыДляЗагрузки%"" /DumpResult ""%ИмяФайлаРезультатов%""";
						  
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаБазыДляЗагрузки%", ИмяФайлаБазыДляЗагрузки);
			СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
			
			ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла(Истина));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкаКонфигурацииИзФайлаПоставки()
	
	Если ЗагрузкаКонфигурацииИзФайлаПоставки Тогда
		
		ИмяФайлаРезультатов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогБазыРазработки)+"load_cf.log";
		
		ДобавитьЗаписьВЛог(НСтр("ru='Начало загрузки конфигурации из файла поставки.'"));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Прогресс", 45);
		ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Загрузка конфигурации из файла поставки...'"));
		Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
					  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%""" 
					  + " /LoadCfg ""%ФайлПоставкиКонфигурации%"" /UpdateDBCfg /DumpResult ""%ИмяФайлаРезультатов%""";
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%", ИмяПользователяБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПоставкиКонфигурации%", ФайлПоставкиКонфигурации);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
		
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеХранилищаТехническогоПроекта()
	
	Если СозданиеХранилищаТехническогоПроекта Тогда
		
		ИмяФайлаРезультатов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогБазыРазработки)+"repo_create.log";
		
		Если НЕ ПустаяСтрока(ФайлПоставкиКонфигурации) Тогда
			Файл = Новый Файл(ФайлПоставкиКонфигурации);
			Если Файл.Существует() Тогда
				УдалитьФайлы(ФайлПоставкиКонфигурации);
			КонецЕсли; 
		КонецЕсли; 
		
		ДобавитьЗаписьВЛог(НСтр("ru='Начало создания хранилища технического проекта.'"));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Прогресс", 60);
		ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Создание хранилища технического проекта...'"));
		Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
		СимволСлэша = ?(ВРег(Лев(КаталогХранилищТехническихПроектов, 3)) = "TCP","/","\");
		КаталогХранилищаТехПроекта = КаталогХранилищТехническихПроектов 
			+ ?(Прав(КаталогХранилищТехническихПроектов, 1) = СимволСлэша, "", СимволСлэша) 
			+ НомерТехПроекта + "_" + ИмяПользователяХранилищаТехПроекта + "_" + ИмяТехПроекта;
			
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
					  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%"""
					  + " /ConfigurationRepositoryF ""%КаталогХранилищаТехПроекта%"""
					  + " /ConfigurationRepositoryN ""%ИмяПользователяХранилищаТехПроекта%""" 
					  + " /ConfigurationRepositoryP ""%ПарольПользователяХранилищаТехПроекта%"""
					  + " /ConfigurationRepositoryCreate -AllowConfigurationChanges -ChangesAllowedRule ObjectNotEditable"
					  + " -ChangesNotRecommendedRule ObjectNotEditable /DumpResult ""%ИмяФайлаРезультатов%""";
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%",ИмяФайлаЛогов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%",КаталогБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%",ИмяПользователяБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%",ПарольПользователяБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилищаТехПроекта%",КаталогХранилищаТехПроекта);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилищаТехПроекта%",ИмяПользователяХранилищаТехПроекта);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилищаТехПроекта%", ПарольПользователяХранилищаТехПроекта);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%",ИмяФайлаРезультатов);
		
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДобавлениеПользователей()
	
	Если ДобавлениеПользователей Тогда
		
		ИмяФайлаРезультатов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогБазыРазработки)+"add_users.log";
		
		ДобавитьЗаписьВЛог(НСтр("ru='Начало добавления пользователей в хранилище технического проекта.'"));
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Прогресс", 80);
		ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Добавление пользователей...'"));
		Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
		Для Каждого ИмяУчастника Из УчастникиПроекта Цикл
			Если ИмяУчастника <> ИмяПользователяХранилищаТехПроекта Тогда
				
				СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
							  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%""" 
							  + " /ConfigurationRepositoryF ""%КаталогХранилищаТехПроекта%""" 
							  + " /ConfigurationRepositoryN ""%ИмяПользователяХранилищаТехПроекта%""" 
							  + " /ConfigurationRepositoryP ""%ПарольПользователяХранилищаТехПроекта%""" 
							  + " /ConfigurationRepositoryAddUser -User ""%ИмяУчастника%"" -Pwd """"" 
							  + " -Rights LockObjects /DumpResult ""%ИмяФайлаРезультатов%""";
							  
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%", ИмяПользователяБазыРазработки);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилищаТехПроекта%", КаталогХранилищаТехПроекта);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилищаТехПроекта%", ИмяПользователяХранилищаТехПроекта);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилищаТехПроекта%", ПарольПользователяХранилищаТехПроекта);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяУчастника%", ИмяУчастника.Значение);
				СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
				
				ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла(Истина), Истина);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Прогресс", 90);
		ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Добавление пользователей...'"));
		Оповестить("СозданиеХранилищаПроекта_ОбновлениеСтатуса", ПараметрыОповещения);
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
					  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%"""
					  + " /ConfigurationRepositoryF ""%КаталогХранилищаТехПроекта%"""
					  + " /ConfigurationRepositoryN ""%ИмяПользователяХранилищаТехПроекта%""" 
					  + " /ConfigurationRepositoryP ""%ПарольПользователяХранилищаТехПроекта%"""
					  + " /ConfigurationRepositoryAddUser -User ""ТолькоПросмотр"" -Pwd """" -Rights ReadOnly"
					  + " /DumpResult ""%ИмяФайлаРезультатов%""";
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла(Истина));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%", ИмяПользователяБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилищаТехПроекта%", КаталогХранилищаТехПроекта);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилищаТехПроекта%", ИмяПользователяХранилищаТехПроекта);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилищаТехПроекта%", ПарольПользователяХранилищаТехПроекта);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
		
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла(Истина));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатТекущейОперации()

	Если ПустаяСтрока(ИмяФайлаРезультатов) Тогда
		Возврат "НеНачата";
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		Файл = Новый Файл(ИмяФайлаРезультатов);
		
		Если Файл.Существует() Тогда
			ТекстовыйДокумент.Прочитать(ИмяФайлаРезультатов);
			ТекстФайла = ТекстовыйДокумент.ПолучитьТекст();
			Если ПустаяСтрока(ТекстФайла) Тогда
				Возврат "НеЗавершена";
			Иначе
				Ответ = Число(ТекстФайла);
				
				Если Ответ = 0 Тогда
					Возврат "УспешноЗавершена";
				Иначе
					Возврат "ЗавершенаСОшибками";
				КонецЕсли;
			КонецЕсли; 
		Иначе
			Возврат "НеЗавершена";
		КонецЕсли;
	
	КонецЕсли;

КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ВыбратьФайлКаталог(ЗаполняемыйРеквизит, Режим)
	
	РежимКаталога = (Режим = РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ЗаполняемыйРеквизит;
	ДиалогОткрытияФайла.Заголовок = ?(РежимКаталога, "Выберите каталог", "Выберите файл");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ЗаполняемыйРеквизит = ?(РежимКаталога, ДиалогОткрытияФайла.Каталог, ДиалогОткрытияФайла.ПолноеИмяФайла);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРезультат(ТекущаяОперация)
	
	Файл = Новый Файл(ИмяФайлаРезультатов);
	
	Если Файл.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайлаРезультатов);
		Ответ = Число(ТекстовыйДокумент.ПолучитьТекст());
		УдалитьФайлы(ИмяФайлаРезультатов);
		ИмяФайлаРезультатов = "";
	Иначе
		Ответ = 1;
		ИмяФайлаРезультатов = "";
	КонецЕсли;
	
	Если Ответ = 0 Тогда
		Результат = 2;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ТекущаяОперация", ТекущаяОперация);
	ПараметрыОповещения.Вставить("Результат",       Результат);
	Оповестить("СозданиеХранилищаПроекта_ОтобразитьРезультат", ПараметрыОповещения);
	
	Если Ответ <> 0 Тогда
		
		ОбработкаОповещения("СозданиеХранилищаПроекта_ОтобразитьРезультат", ПараметрыОповещения, Неопределено);
		СохранитьНастройкиВыполнения();
		
		Лог = Новый ТекстовыйДокумент;
		Лог.Прочитать(ИмяФайлаЛогов);
		Лог.Показать("Результат выполнения операций");
		Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
		ОтключитьОбработчикОжидания("ВыполнитьОперации");
		ВызватьИсключение "В процессе создания хранилища возникли ошибки.";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаписьВЛог(Запись)
	
	Лог = Новый ТекстовыйДокумент;
	Файл = Новый Файл(ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(ИмяФайлаЛогов);
	КонецЕсли;
	Лог.ДобавитьСтроку(Строка(ТекущаяДата()) + " " +  Запись);
	Лог.Записать(ИмяФайлаЛогов);
	Лог = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииПараметра(ИмяПараметра)
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("ТехническийПроект", ТехническийПроект);
	ПараметрОповещения.Вставить(ИмяПараметра, ЭтаФорма[ИмяПараметра]);
	
	Оповестить("СозданиеХранилищаТехПроектаЗавершено", ПараметрОповещения, ЭтаФорма.ВладелецФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПротоколОпераций(Команда)
	
	Если ПустаяСтрока(ИмяФайлаЛогов) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Протокол выполнения операций еще не создан.'"));
	Иначе 
		
		Файл = Новый Файл(ИмяФайлаЛогов);
		Если НЕ Файл.Существует() Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Протокол выполнения операций еще не создан.'"));
			Возврат;
		КонецЕсли;
		
		Попытка
		
			Лог = Новый ТекстовыйДокумент;
			Лог.Прочитать(ИмяФайлаЛогов);
			Лог.Показать("Результат выполнения операций");
			Лог = Неопределено;
		
		Исключение
			ПоказатьПредупреждение(, НСтр("ru = 'Протокол выполнения операций временно не доступен для просмотра. Попробуйте позже.'"));
		КонецПопытки; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Функция КаталогИсполняемогоФайла(ВерсияПлатформыТехПроектов = Ложь)

	Если ЗначениеЗаполнено(ВерсияПлатформы) 
		И ЗначениеЗаполнено(ВерсияПлатформыХранилищаТехническихПроектов)
		И ВерсияПлатформы <> ВерсияПлатформыХранилищаТехническихПроектов Тогда
		
		Если Найти(ПутьКВерсиямПлатформыНаКлиенте, "%ВерсияПлатформы%") > 0 Тогда
			
			Если ВерсияПлатформыТехПроектов Тогда
				КаталогИсполняемогоФайла = СтрЗаменить(ПутьКВерсиямПлатформыНаКлиенте, 
					"%ВерсияПлатформы%", 
					ВерсияПлатформыХранилищаТехническихПроектов);
			Иначе
				КаталогИсполняемогоФайла = СтрЗаменить(ПутьКВерсиямПлатформыНаКлиенте, 
					"%ВерсияПлатформы%", 
					ВерсияПлатформы);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	КаталогИсполняемогоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла);
	
	Возврат КаталогИсполняемогоФайла;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНастройкиВыполнения()
	
	СостояниеСозданиеХранилища = Новый Структура;
	
	СостояниеСозданиеХранилища.Вставить("СозданиеФайлаПоставкиКонфигурации",    СозданиеФайлаПоставкиКонфигурации);
	СостояниеСозданиеХранилища.Вставить("ЗагрузкаКонфигурацииИзФайлаПоставки",  ЗагрузкаКонфигурацииИзФайлаПоставки);
	СостояниеСозданиеХранилища.Вставить("СозданиеХранилищаТехническогоПроекта", СозданиеХранилищаТехническогоПроекта);
	СостояниеСозданиеХранилища.Вставить("ДобавлениеПользователей",              ДобавлениеПользователей);
	СостояниеСозданиеХранилища.Вставить("НачатоВыполнениеЗадания",              НачатоВыполнениеЗадания);
	
	СостояниеСозданиеХранилища.Вставить("СозданиеФайлаПоставкиКонфигурацииРезультат",    СозданиеФайлаПоставкиКонфигурацииРезультат);
	СостояниеСозданиеХранилища.Вставить("ЗагрузкаКонфигурацииИзФайлаПоставкиРезультат",  ЗагрузкаКонфигурацииИзФайлаПоставкиРезультат);
	СостояниеСозданиеХранилища.Вставить("СозданиеХранилищаТехническогоПроектаРезультат", СозданиеХранилищаТехническогоПроектаРезультат);
	СостояниеСозданиеХранилища.Вставить("ДобавлениеПользователейРезультат",              ДобавлениеПользователейРезультат);
	СостояниеСозданиеХранилища.Вставить("ЗагрузитьБазуРезультат",                        ЗагрузитьБазуРезультат);
	
	СостояниеСозданиеХранилища.Вставить("ПроцессВыполняется",       ПроцессВыполняется);
	СостояниеСозданиеХранилища.Вставить("ФайлПоставкиКонфигурации", ФайлПоставкиКонфигурации);
	
	Если ЗначениеЗаполнено(ИмяФайлаЛогов) Тогда
		СостояниеСозданиеХранилища.Вставить("ИмяФайлаЛогов", ИмяФайлаЛогов);
	КонецЕсли; 
	
	СохранитьНастройкиВыполненияСервер(ТехническийПроект, СостояниеСозданиеХранилища);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиВыполненияСервер(ТехническийПроект, СостояниеСозданиеХранилища)
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(ТехническийПроект, 
		"СостояниеСозданиеХранилища", 
		СостояниеСозданиеХранилища);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиВыполнения()
	
	СостояниеСозданиеХранилища = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		ТехническийПроект, 
		"СостояниеСозданиеХранилища", 
		Новый Структура);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СостояниеСозданиеХранилища);
	
	РасположениеЛокальногоПутиРазработки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСБазамиРазработки", 
		"РасположениеЛокальногоПутиРазработки",
		РасположениеЛокальногоПутиРазработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКаталогРазработки()
	
	Если Не ЗначениеЗаполнено(КаталогБазыРазработки) И ЗначениеЗаполнено(РасположениеЛокальногоПутиРазработки) Тогда 
		
		КаталогБазыРазработки = "%Директория%%НомерТехПроекта%_%ИмяПользователя%_%ИмяТехПроекта%";
		
		КаталогБазыРазработки = СтрЗаменить(КаталогБазыРазработки, "%Директория%", 
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РасположениеЛокальногоПутиРазработки));
		
		КаталогБазыРазработки = СтрЗаменить(КаталогБазыРазработки, "%НомерТехПроекта%", НомерТехПроекта);
		КаталогБазыРазработки = СтрЗаменить(КаталогБазыРазработки, "%ИмяПользователя%", ИмяПользователяХранилищаТехПроекта);
		КаталогБазыРазработки = СтрЗаменить(КаталогБазыРазработки, "%ИмяТехПроекта%",   ИмяТехПроекта);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОчиститьНастройкиВыполнения(ТехническийПроект)
	
	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить(
		ТехническийПроект, 
		"СостояниеСозданиеХранилища", 
		Новый Структура);
		
КонецПроцедуры

#КонецОбласти
