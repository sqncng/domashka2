&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем АдресХранилища;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Проект",      Проект);
	Параметры.Свойство("Версия",      ВерсияПроекта);
	Параметры.Свойство("НомерВерсии", НомерВерсии);
	Параметры.Свойство("РасположениеХранилища",       РасположениеХранилища);
	Параметры.Свойство("ИмяПользователяХранилища",    ИмяПользователяХранилища);
	Параметры.Свойство("ПарольПользователяХранилища", ПарольПользователяХранилища);
	Параметры.Свойство("КаталогИБ",                   КаталогИБ);
	Параметры.Свойство("ИмяПользователяИБ",           ИмяПользователяИБ);
	Параметры.Свойство("ПарольПользователяИБ",        ПарольПользователяИБ);
	
	СкопироватьПользователейИзОсновногоХранилища = Истина;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ПоляПроекта = "Ветка.Имя,ИмяПользователяХранилищаДляЗагрузкиМетаданных,"
		            + "ПарольПользователяХранилищаДляЗагрузкиМетаданных,ВерсияПлатформы,"
		            + "КаталогИБДляЗагрузкиМетаданных,ИмяПользователяИБДляЗагрузкиМетаданных,ПарольПользователяИБДляЗагрузкиМетаданных";
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, ПоляПроекта);
		
		РеквизитыПроекта.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", РеквизитыПроекта.ВеткаИмя);

		РасположениеХранилищаПроекта          = РеквизитыПроекта.КаталогХранилищаДляЗагрузкиМетаданных;
		ИмяПользователяХранилищаПроекта       = РеквизитыПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных;
		ПарольПользователяХранилищаПроекта    = РеквизитыПроекта.ПарольПользователяХранилищаДляЗагрузкиМетаданных;
		ВерсияПлатформыПроекта                = РеквизитыПроекта.ВерсияПлатформы;
		КаталогИБДляПомещенияМетки            = РеквизитыПроекта.КаталогИБДляЗагрузкиМетаданных;
		ИмяПользователяИБДляПомещенияМетки    = РеквизитыПроекта.ИмяПользователяИБДляЗагрузкиМетаданных;
		ПарольПользователяИБДляПомещенияМетки = РеквизитыПроекта.ПарольПользователяИБДляЗагрузкиМетаданных;
		
		Если Не ЗначениеЗаполнено(РасположениеХранилища) Тогда
			
			РасположениеХранилища = СтрШаблон("%1Corrective%2",
				РеквизитыПроекта.КаталогХранилищаДляЗагрузкиМетаданных, СтрЗаменить(НомерВерсии, ".", "_"));
			
			ИмяПользователяХранилища    = РеквизитыПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных;
			ПарольПользователяХранилища = РеквизитыПроекта.ПарольПользователяХранилищаДляЗагрузкиМетаданных;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных) Тогда
		
			Элементы.ИмяПользователяХранилищаПроекта.СписокВыбора.Добавить(РеквизитыПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
			Элементы.ИмяПользователяХранилища.СписокВыбора.Добавить(РеквизитыПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
		
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогИБ) Тогда
		
		СоздатьБазуДляВерсии = Истина;
		
	КонецЕсли; 
	
	СисИнфо = Новый СистемнаяИнформация;
	Элементы.ВерсияПлатформыПроекта.ПодсказкаВвода = СисИнфо.ВерсияПриложения;
	Элементы.ВерсияПлатформы.ПодсказкаВвода        = СисИнфо.ВерсияПриложения;
	Элементы.ВерсияПлатформы.СписокВыбора.Добавить("", НСтр("ru = '<версия по умолчанию>'"));
	
	Для Каждого ДоступнаяВерсия Из ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы() Цикл
		
		Элементы.ВерсияПлатформы.СписокВыбора.Добавить(ДоступнаяВерсия);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	ОбновитьСостояниеВыполнения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ИспользоватьВерсию = 0 Тогда
		НепроверяемыеРеквизиты.Добавить("НомерВерсииХранилища");
	КонецЕсли; 
	
	Если НепроверяемыеРеквизиты.Количество() > 0 Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьХранилище(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРасчета = СоздатьХранилищеНаСервере();
	
	АдресХранилища = Неопределено;
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		СозданиеХранилищеЗавершение();
	Иначе
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьБазуИзВерсииПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВерсиюПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПользователейИзОсновногоХранилищаПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КаталогИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВыбратьКаталог(КаталогИБ);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМеткуВОсновномХранилищеПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьКаталог(ЗаполняемыйРеквизит)
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.Каталог = ЗаполняемыйРеквизит;
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ЗаполняемыйРеквизит = ДиалогОткрытияФайла.Каталог;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.КаталогИБ.Доступность                  = СоздатьБазуДляВерсии;
	Элементы.ГруппаПользовательПарольИБ.Доступность = СоздатьБазуДляВерсии;
	Элементы.ПодключитьБазуКХранилищу.Доступность   = СоздатьБазуДляВерсии;
	
	Элементы.ВерсияХранилища.Видимость = (ИспользоватьВерсию = 1);
	Элементы.РезультатКопированияПользователей.Видимость = СкопироватьПользователейИзОсновногоХранилища;
	
	ВерсияСтарше838 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформыПроекта, "8.3.8.0") > 0;
	Если Не ВерсияСтарше838 ИЛИ Не ЗначениеЗаполнено(КаталогИБДляПомещенияМетки) Тогда
		УстановитьМеткуВОсновномХранилище = Ложь;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(КаталогИБДляПомещенияМетки) Тогда
		Элементы.УстановитьМеткуВОсновномХранилище.Подсказка = НСтр("ru = 'Будет установлена метка с текстом: ""Создано хранилище исправительной версии: <НомерВерсииПроекта>""'")
	Иначе
		Элементы.УстановитьМеткуВОсновномХранилище.Подсказка = НСтр("ru = 'Для доступности данной опции, в проекте должна быть заполнена база, подключенная к хранилищу'")
	КонецЕсли; 
	
	Элементы.УстановитьМеткуВОсновномХранилище.Доступность = ЗначениеЗаполнено(КаталогИБДляПомещенияМетки);
	
	Элементы.УстановитьМеткуВОсновномХранилище.Видимость = ВерсияСтарше838;
	Элементы.РезультатУстановкиМеткиВХранилище.Видимость = УстановитьМеткуВОсновномХранилище;
	
КонецПроцедуры

&НаСервере
Функция СоздатьХранилищеНаСервере()
	
	ПараметрыЗадания = Новый Структура;
	
	ПараметрыЗадания.Вставить("КаталогХранилища",             РасположениеХранилищаПроекта);
	ПараметрыЗадания.Вставить("ИмяПользователяХранилища",     ИмяПользователяХранилищаПроекта);
	ПараметрыЗадания.Вставить("ПарольПользователяХранилища",  ПарольПользователяХранилищаПроекта);
	ПараметрыЗадания.Вставить("КаталогСоздаваемогоХранилища",             РасположениеХранилища);
	ПараметрыЗадания.Вставить("ИмяПользователяСоздаваемогоХранилища",     ИмяПользователяХранилища);
	ПараметрыЗадания.Вставить("ПарольПользователяСоздаваемогоХранилища",  ПарольПользователяХранилища);
	ПараметрыЗадания.Вставить("ВерсияПлатформы",              ВерсияПлатформы);
	ПараметрыЗадания.Вставить("ВерсияПлатформыПроекта",       ВерсияПлатформыПроекта);
	ПараметрыЗадания.Вставить("СкопироватьПользователей",     СкопироватьПользователейИзОсновногоХранилища);
	ПараметрыЗадания.Вставить("УстановитьМеткуВХранилище",    УстановитьМеткуВОсновномХранилище);
	ПараметрыЗадания.Вставить("НомерВерсииПроекта",           НомерВерсии);
	ПараметрыЗадания.Вставить("КаталогИБДляПомещенияМетки",            КаталогИБДляПомещенияМетки);
	ПараметрыЗадания.Вставить("ИмяПользователяИБДляПомещенияМетки",    ИмяПользователяИБДляПомещенияМетки);
	ПараметрыЗадания.Вставить("ПарольПользователяИБДляПомещенияМетки", ПарольПользователяИБДляПомещенияМетки);
	
	Если ИспользоватьВерсию = 1 Тогда
		ПараметрыЗадания.Вставить("НомерВерсииХранилища", НомерВерсииХранилища);
	Иначе 
		ПараметрыЗадания.Вставить("НомерВерсииХранилища", 0);
	КонецЕсли; 
	
	Если СоздатьБазуДляВерсии Тогда
	
		ПараметрыЗадания.Вставить("КаталогИБ",                КаталогИБ);
		ПараметрыЗадания.Вставить("ИмяПользователяИБ",        ИмяПользователяИБ);
		ПараметрыЗадания.Вставить("ПарольПользователяИБ",     ПарольПользователяИБ);
		ПараметрыЗадания.Вставить("ПодключитьБазуКХранилищу", ПодключитьБазуКХранилищу);
	
	Иначе 
		
		ПараметрыЗадания.Вставить("КаталогИБ",                "");
		ПараметрыЗадания.Вставить("ИмяПользователяИБ",        "");
		ПараметрыЗадания.Вставить("ПарольПользователяИБ",     "");
		ПараметрыЗадания.Вставить("ПодключитьБазуКХранилищу", Ложь);

	КонецЕсли; 
	
	НаименованиеЗадания = СтрШаблон(
			НСтр("ru = 'Создание хранилища версии %1 проекта %2'"),
			НомерВерсии, Проект);
	
	РезультатРасчета = ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
			"Обработки.СозданиеХранилища.ВыполнитьСозданиеХранилища",
			ПараметрыЗадания,
			НаименованиеЗадания,
			ВерсияПроекта.УникальныйИдентификатор());
			
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиенте
Процедура СозданиеХранилищеЗавершение()
	
	Если ЗначениеЗаполнено(ВерсияПроекта) Тогда
	
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ВерсияПроекта",                                    ВерсияПроекта);
		ПараметрыОповещения.Вставить("РасположениеХранилища",                            РасположениеХранилища);
		ПараметрыОповещения.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных",    ИмяПользователяХранилища);
		ПараметрыОповещения.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", ПарольПользователяХранилища);
		ПараметрыОповещения.Вставить("ВерсияПлатформыХранилища",                         ВерсияПлатформы);
		ПараметрыОповещения.Вставить("КаталогИБДляЗагрузкиМетаданных",                   КаталогИБ);
		ПараметрыОповещения.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных",           ИмяПользователяИБ);
		ПараметрыОповещения.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных",        ПарольПользователяИБ);
		
		Оповестить("СозданиеХранилищаВерсииЗавершено", ПараметрыОповещения, ЭтаФорма);
		
	КонецЕсли; 
	
	РезультатСозданияБазы             = 2;
	РезультатОбновленияБазы           = 2;
	РезультатСозданияХранилища        = 2;
	РезультатКопированияПользователей = 2;
	
	ТекстСообщения = НСтр("ru='Создание хранилища версии завершено'");
	ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаДлительнаяОперация Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
				СозданиеХранилищеЗавершение();
				
			Иначе
				
				ОбновитьСостояниеВыполнения();
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		ОбновитьСостояниеВыполнения();
		Элементы.ГруппаОтображениеОперации.ТекущаяСтраница = Элементы.ГруппаПустаяКартинка;
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеВыполнения()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		Прогресс            = ПрочитатьПрогресс(ИдентификаторЗадания);
		СостояниеВыполнения = Неопределено;
		
		Если Прогресс <> Неопределено И Прогресс.Свойство("ДополнительныеПараметры", СостояниеВыполнения) Тогда 
		
			РезультатСозданияБазы              = СостояниеВыполнения.РезультатСозданияБазы;
			РезультатСозданияФайлаКонфигурации = СостояниеВыполнения.РезультатСозданияФайлаКонфигурации;
			РезультатУстановкиМеткиВХранилище  = СостояниеВыполнения.РезультатУстановкиМеткиВХранилище;
			РезультатОбновленияБазы            = СостояниеВыполнения.РезультатОбновленияБазы;
			РезультатСозданияХранилища         = СостояниеВыполнения.РезультатСозданияХранилища;
			РезультатКопированияПользователей  = СостояниеВыполнения.РезультатКопированияПользователей;
		
		КонецЕсли; 
		
	Иначе 
		
		РезультатСозданияБазы              = 4;
		РезультатСозданияФайлаКонфигурации = 4;
		РезультатУстановкиМеткиВХранилище  = 4;
		РезультатОбновленияБазы            = 4;
		РезультатСозданияХранилища         = 4;
		РезультатКопированияПользователей  = 4;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, Знач Параметры,
	Знач НаименованиеЗадания = "", Знач КлючФоновогоЗадания, ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ЗапущеноЗаданий = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки()
		Или ЗапущеноЗаданий > 0 Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
		
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,	ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
		Результат.ЗаданиеВыполнено = ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

