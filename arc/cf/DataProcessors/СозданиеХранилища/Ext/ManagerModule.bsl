#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьСозданиеХранилища(Параметры, АдресХранилища) Экспорт
	
	// 0 - неуспешное выполнение
	// 2 - успешное выполнение
	// 4 - еще не выполнялось
	СостояниеВыполнения = Новый Структура;
	СостояниеВыполнения.Вставить("РезультатСозданияБазы",              4);
	СостояниеВыполнения.Вставить("РезультатОбновленияБазы",            4);
	СостояниеВыполнения.Вставить("РезультатСозданияХранилища",         4);
	СостояниеВыполнения.Вставить("РезультатСозданияФайлаКонфигурации", 4);
	СостояниеВыполнения.Вставить("РезультатУстановкиМеткиВХранилище",  4);
	СостояниеВыполнения.Вставить("РезультатКопированияПользователей",  4);
	
	ДлительныеОперации.СообщитьПрогресс(,,СостояниеВыполнения);
	
	КаталогИсполняемогоФайлаОсновногоХранилища
		= ОбщегоНазначенияСППР.КаталогИсполняемогоФайлаНаСервере(Параметры.ВерсияПлатформыПроекта);
	КаталогИсполняемогоФайлаОсновногоХранилища 
		= ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайлаОсновногоХранилища);
	
	КаталогИсполняемогоФайла = ОбщегоНазначенияСППР.КаталогИсполняемогоФайлаНаСервере(Параметры.ВерсияПлатформы);
	КаталогИсполняемогоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла);
	
	КаталогХранилища             = Параметры.КаталогХранилища;
	ИмяПользователяХранилища     = Параметры.ИмяПользователяХранилища;
	ПарольПользователяХранилища  = Параметры.ПарольПользователяХранилища;
	КаталогСоздаваемогоХранилища            = Параметры.КаталогСоздаваемогоХранилища;
	ИмяПользователяСоздаваемогоХранилища    = Параметры.ИмяПользователяСоздаваемогоХранилища;
	ПарольПользователяСоздаваемогоХранилища = Параметры.ПарольПользователяСоздаваемогоХранилища;
	КаталогИБ                    = Параметры.КаталогИБ;
	ИмяПользователяИБ            = Параметры.ИмяПользователяИБ;
	ПарольПользователяИБ         = Параметры.ПарольПользователяИБ;
	СкопироватьПользователей     = Параметры.СкопироватьПользователей;
	ПодключитьБазуКХранилищу     = Параметры.ПодключитьБазуКХранилищу;
	НомерВерсииХранилища         = Параметры.НомерВерсииХранилища;
	УстановитьМеткуВХранилище    = Параметры.УстановитьМеткуВХранилище;
	НомерВерсииПроекта           = Параметры.НомерВерсииПроекта;
	КаталогИБДляПомещенияМетки            = Параметры.КаталогИБДляПомещенияМетки;
	ИмяПользователяИБДляПомещенияМетки    = Параметры.ИмяПользователяИБДляПомещенияМетки;
	ПарольПользователяИБДляПомещенияМетки = Параметры.ПарольПользователяИБДляПомещенияМетки;
	
	Если СтрНайти(Врег(КаталогИБ), "FILE=") = 1 Тогда // файловая ИБ
		КаталогИБ = Сред(КаталогИБ, 7, СтрДлина(КаталогИБ) - 8);
	КонецЕсли;
	
	ЭтоВременнаяБаза = Ложь;
	Если Не ЗначениеЗаполнено(КаталогИБ) Тогда
		
		КаталогИБ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
		КаталогИБ = КаталогИБ + Строка(Новый УникальныйИдентификатор());
		КаталогИБ = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИБ);
		ИмяПользователяИБ    = "";
		ПарольПользователяИБ = "";
		
		ЭтоВременнаяБаза = Истина;
		
	КонецЕсли; 
	
	СтрокаСоединенияИБ = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(КаталогИБ);
	ЭтоФайловаяБаза    = ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИБ);
	
	Если ЭтоФайловаяБаза Тогда 
		
		БазаДанныхСуществует = Ложь;
		
		Файл = Новый Файл(КаталогИБ);
		Если Файл.Существует() Тогда
			ФайлыБазыДанных = НайтиФайлы(КаталогИБ,"1Cv8.1CD");
			Если ФайлыБазыДанных.Количество() > 0 Тогда
				БазаДанныхСуществует = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		БазаДанныхСуществует = Истина;
	КонецЕсли;
	
#Область СозданиеБазы
	
	Если Не БазаДанныхСуществует Тогда
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 CREATEINFOBASE File=""%КаталогИБ%"" /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
		
		ИмяФайлаЛоговСозданияБазы = ПолучитьИмяВременногоФайла("txt");
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИБ%",                ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИБ));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",            ИмяФайлаЛоговСозданияБазы);
		
		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина, КодВозврата);
		
		Если КодВозврата = Неопределено Тогда
			
			ТекстЛога = "";
			Попытка
				Лог = Новый ТекстовыйДокумент;
				Лог.Прочитать(ИмяФайлаЛоговСозданияБазы);
				ТекстЛога = Лог.ПолучитьТекст();
				УдалитьФайлы(ИмяФайлаЛоговСозданияБазы);
			Исключение
				ТекстЛога = ТекстЛога + Символы.ПС + ОписаниеОшибки();
			КонецПопытки; 
			
			Если ЭтоВременнаяБаза Тогда
				УдалитьФайлы(КаталогИБ);
			КонецЕсли; 
			
			СостояниеВыполнения.РезультатСозданияБазы = 0;
			ДлительныеОперации.СообщитьПрогресс(,,СостояниеВыполнения);
			
			ВызватьИсключение НСтр("ru = 'Не получилось создать базу для создания хранилища. Запустите создание хранилища еще раз.
				|Лог пакетных операций:
				|'") + ТекстЛога;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СостояниеВыполнения.РезультатСозданияБазы = 2;
	ДлительныеОперации.СообщитьПрогресс(,,СостояниеВыполнения);
	
#КонецОбласти
	
#Область СозданиеФайлаКонфигурации
	
	СтрокаКоманды = "%КаталогИсполняемогоФайлаОсновногоХранилища%1cv8  DESIGNER /DisableStartupDialogs 
		| %СтрокаСоединенияИБ% /N ""%ИмяПользователяИБ%"" /P ""%ПарольПользователяИБ%""
		| /ConfigurationRepositoryF ""%КаталогХранилища%""
		| /ConfigurationRepositoryN ""%ИмяПользователяХранилища%""
		| /ConfigurationRepositoryP ""%ПарольПользователяХранилища%""
		| /ConfigurationRepositoryDumpCfg ""%ПутьККонфигурации%"" -v %НомерВерсииХранилища%
		| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
	
	Если ЭтоФайловаяБаза Тогда 
		ПутьККонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИБ)
		                  + Строка(Новый УникальныйИдентификатор) + ".cf";
	Иначе 
		ПутьККонфигурации = ПолучитьИмяВременногоФайла("cf");
	КонецЕсли;
	НомерВерсииХранилищаСтрока        = ?(ЗначениеЗаполнено(НомерВерсииХранилища), Формат(НомерВерсииХранилища, "ЧДЦ=; ЧГ=0"), "-1");
	ИмяФайлаЛоговСозданияФайлаКонфигурации = ПолучитьИмяВременногоФайла("txt");
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайлаОсновногоХранилища%", КаталогИсполняемогоФайлаОсновногоХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБ%",          СтрокаСоединенияИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБ%",           ИмяПользователяИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБ%",        ПарольПользователяИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилища%",            КаталогХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилища%",    ИмяПользователяХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилища%", ПарольПользователяХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПутьККонфигурации%",           ПутьККонфигурации);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%НомерВерсииХранилища%",        НомерВерсииХранилищаСтрока);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",               ИмяФайлаЛоговСозданияФайлаКонфигурации);
	
	ФайлыНаУдалениеВСлучаеОшибки = Новый Массив;
	Если ЭтоВременнаяБаза Тогда
		ФайлыНаУдалениеВСлучаеОшибки.Добавить(КаталогИБ);
	КонецЕсли;
	
	Запустить(СтрокаКоманды, 
	          КаталогИсполняемогоФайлаОсновногоХранилища,
	          ИмяФайлаЛоговСозданияФайлаКонфигурации, 
	          ФайлыНаУдалениеВСлучаеОшибки, 
	          "РезультатСозданияФайлаКонфигурации", 
	          НСтр("ru = 'Создание файла конфигурации из хранилища закончилось неудачей.'"),
	          СостояниеВыполнения);
	
#КонецОбласти
	
#Область ОтметкаВХранилище
	
	ФайлыНаУдалениеВСлучаеОшибки.Добавить(ПутьККонфигурации);
	
	Если УстановитьМеткуВХранилище Тогда
		
		СтрокаКоманды = "%КаталогИсполняемогоФайлаОсновногоХранилища%1cv8  DESIGNER /DisableStartupDialogs 
			| %СтрокаСоединенияИБ% /N ""%ИмяПользователяИБ%"" /P ""%ПарольПользователяИБ%""
			| /ConfigurationRepositoryF ""%КаталогХранилища%""
			| /ConfigurationRepositoryN ""%ИмяПользователяХранилища%""
			| /ConfigurationRepositoryP ""%ПарольПользователяХранилища%""
			| /ConfigurationRepositorySetLabel -v %НомерВерсииХранилища% -name ""%НазваниеМетки%"" 
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
		
		ИмяФайлаЛоговУстановкиМетки = ПолучитьИмяВременногоФайла("txt");
		НазваниеМетки = "Создано хранилище исправительной версии: " + НомерВерсииПроекта;
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайлаОсновногоХранилища%", КаталогИсполняемогоФайлаОсновногоХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБ%",          
			ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(КаталогИБДляПомещенияМетки));
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБ%",           ИмяПользователяИБДляПомещенияМетки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБ%",        ПарольПользователяИБДляПомещенияМетки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилища%",            КаталогХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилища%",    ИмяПользователяХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилища%", ПарольПользователяХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%НомерВерсииХранилища%",        НомерВерсииХранилищаСтрока);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%НазваниеМетки%",               НазваниеМетки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",               ИмяФайлаЛоговУстановкиМетки);
		
		Запустить(СтрокаКоманды, 
		          КаталогИсполняемогоФайлаОсновногоХранилища,
		          ИмяФайлаЛоговУстановкиМетки, 
		          ФайлыНаУдалениеВСлучаеОшибки, 
		          "РезультатУстановкиМеткиВХранилище", 
		          НСтр("ru = 'Обновление информационной базы из конфигурации закончилось неудачей.'"),
		          СостояниеВыполнения);
	КонецЕсли; 
	
#КонецОбласти
	
#Область ОбновлениеБазыКонфигурацией
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8  DESIGNER /DisableStartupDialogs 
		| %СтрокаСоединенияИБ% /N ""%ИмяПользователяИБ%"" /P ""%ПарольПользователяИБ%""
		| /LoadCfg ""%ПутьККонфигурации%"" /UpdateDBCfg
		| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
		
	ИмяФайлаЛоговОбновленияБазы = ПолучитьИмяВременногоФайла("txt");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%",    КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБ%",          СтрокаСоединенияИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБ%",           ИмяПользователяИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБ%",        ПарольПользователяИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПутьККонфигурации%",           ПутьККонфигурации);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%",               ИмяФайлаЛоговОбновленияБазы);
	
	Запустить(СтрокаКоманды, 
	          КаталогИсполняемогоФайла,
	          ИмяФайлаЛоговОбновленияБазы, 
	          ФайлыНаУдалениеВСлучаеОшибки, 
	          "РезультатОбновленияБазы", 
	          НСтр("ru = 'Обновление информционной базы из конфигурации закончилось неудачей.'"),
	          СостояниеВыполнения);
	
#КонецОбласти
	
#Область СозданиеХранилища
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate
			| %СтрокаСоединенияИБ% /N ""%ИмяПользователяИБ%"" /P ""%ПарольПользователяИБ%""
			| /ConfigurationRepositoryF ""%КаталогХранилища%""
			| /ConfigurationRepositoryN ""%ИмяПользователяХранилища%"" 
			| /ConfigurationRepositoryP ""%ПарольПользователяХранилища%""
			| /ConfigurationRepositoryCreate %ПодключитьБазуКХранилищу%";
	
	ИмяФайлаЛоговСозданияХранилища = ПолучитьИмяВременногоФайла("txt");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",    КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединенияИБ%",          СтрокаСоединенияИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяИБ%",           ИмяПользователяИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяИБ%",        ПарольПользователяИБ);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилища%",            КаталогСоздаваемогоХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилища%",    ИмяПользователяСоздаваемогоХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилища%", ПарольПользователяСоздаваемогоХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%",               ИмяФайлаЛоговСозданияХранилища);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПодключитьБазуКХранилищу%",    ?(ПодключитьБазуКХранилищу, "", "-NoBind"));
	
	Запустить(СтрокаКоманды, 
	          КаталогИсполняемогоФайла,
	          ИмяФайлаЛоговСозданияХранилища, 
	          ФайлыНаУдалениеВСлучаеОшибки, 
	          "РезультатСозданияХранилища", 
	          НСтр("ru = 'Не получилось создать хранилище. Запустите создание хранилища еще раз.'"),
	          СостояниеВыполнения);
	
#КонецОбласти
	
#Область КопированиеПользователей
	
	Если СкопироватьПользователей Тогда 
	
		СтрокаКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate
				| %СтрокаСоединенияИБ% /N ""%ИмяПользователяИБ%"" /P ""%ПарольПользователяИБ%""
				| /ConfigurationRepositoryF ""%КаталогХранилища%""
				| /ConfigurationRepositoryN ""%ИмяПользователяХранилища%"" 
				| /ConfigurationRepositoryP ""%ПарольПользователяХранилища%""
				| /ConfigurationRepositoryCopyUsers -Path ""%КаталогХранилищаИсточник%""
				| -User ""%ИмяПользователяХранилищаИсточника%"" -Pwd ""%ПарольПользователяХранилищаИсточника%""";

		ИмяФайлаЛоговКопированияПользователей = ПолучитьИмяВременногоФайла("txt");
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",    КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединенияИБ%",          СтрокаСоединенияИБ);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяИБ%",           ИмяПользователяИБ);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяИБ%",        ПарольПользователяИБ);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилища%",            КаталогСоздаваемогоХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилища%",    ИмяПользователяСоздаваемогоХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилища%", ПарольПользователяСоздаваемогоХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилищаИсточник%",             КаталогХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилищаИсточника%",    ИмяПользователяХранилища);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилищаИсточника%", ПарольПользователяХранилища);

		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%",               ИмяФайлаЛоговКопированияПользователей);
		
		Запустить(СтрокаКоманды, 
		          КаталогИсполняемогоФайла,
		          ИмяФайлаЛоговКопированияПользователей, 
		          ФайлыНаУдалениеВСлучаеОшибки, 
		          "РезультатКопированияПользователей", 
		          НСтр("ru = 'Не получилось скопировать пользователей хранилища. Запустите создание хранилища еще раз.'"),
		          СостояниеВыполнения);
		
	КонецЕсли;
	
#КонецОбласти
	
	Если ЭтоВременнаяБаза Тогда
		УдалитьФайлы(КаталогИБ);
	КонецЕсли; 
	УдалитьФайлы(ПутьККонфигурации);
	
КонецПроцедуры

Процедура ВыполнитьСозданиеФайлаПоставки(Знач Проект, АдресХранилища) Экспорт
	
	ТипЗначения = ТипЗнч(Проект);
	
	Если ТипЗначения = Тип("СправочникСсылка.Проекты") Тогда
	
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "КаталогИБДляЗагрузкиМетаданных, 
		|Ветка.Имя, ИмяПользователяХранилищаДляЗагрузкиМетаданных, 
		|ПарольПользователяХранилищаДляЗагрузкиМетаданных, ВерсияПлатформы");
		Параметры.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", Параметры.ВеткаИмя);
	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Владелец");
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "КаталогИБДляЗагрузкиМетаданных, 
		|Ветка.Имя, ИмяПользователяХранилищаДляЗагрузкиМетаданных, 
		|ПарольПользователяХранилищаДляЗагрузкиМетаданных, ВерсияПлатформы");
		Параметры.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", Параметры.ВеткаИмя);

	
	Иначе
	
		Возврат;
	
	КонецЕсли; 
	
	КаталогИсполняемогоФайла                         = ОбщегоНазначенияСППР.КаталогИсполняемогоФайлаНаСервере(Параметры.ВерсияПлатформы);
	КаталогХранилищаДляЗагрузкиМетаданных            = Параметры.КаталогХранилищаДляЗагрузкиМетаданных;
	ИмяПользователяХранилищаДляЗагрузкиМетаданных    = Параметры.ИмяПользователяХранилищаДляЗагрузкиМетаданных;
	ПарольПользователяХранилищаДляЗагрузкиМетаданных = Параметры.ПарольПользователяХранилищаДляЗагрузкиМетаданных;
	КаталогИБДляЗагрузкиМетаданных                   = Параметры.КаталогИБДляЗагрузкиМетаданных;
	
	// Для серверных ИБ файл поставки будет сохранен в хранилище настроек СППР, файл будет удален
	СохранятьФайлПоставкиВХранилище = Ложь;
	
	Если НЕ ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных) 
		и ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИБДляЗагрузкиМетаданных) Тогда
		КаталогНаСервереДляЗагрузкиМетаданных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИБДляЗагрузкиМетаданных) + "p_base_cf";
		КаталогПоставки = КаталогИБДляЗагрузкиМетаданных;
	ИначеЕсли ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных) Тогда
		ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных);
		Если ЗначениеЗаполнено(ПараметрыСоединения.КаталогИнформационнойБазы) Тогда
			КаталогНаСервереДляЗагрузкиМетаданных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПараметрыСоединения.КаталогИнформационнойБазы) + "p_base_cf";
			КаталогПоставки = ПараметрыСоединения.КаталогИнформационнойБазы;
		Иначе
			ИдентификаторПроекта = СтрЗаменить(Строка(Проект.УникальныйИдентификатор()), "-", "_");
			КаталогНаСервереДляЗагрузкиМетаданных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + "p_base_cf_"+ИдентификаторПроекта;
			КаталогПоставки = КаталогНаСервереДляЗагрузкиМетаданных;
			СохранятьФайлПоставкиВХранилище = Истина;
		КонецЕсли;
	Иначе
		ИдентификаторПроекта = СтрЗаменить(Строка(Проект.УникальныйИдентификатор()), "-", "_");
		КаталогНаСервереДляЗагрузкиМетаданных = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов()) + "p_base_cf_"+ИдентификаторПроекта;
		КаталогПоставки = КаталогНаСервереДляЗагрузкиМетаданных;
		СохранятьФайлПоставкиВХранилище = Истина;
	КонецЕсли;
	
	СтрокаСоединенияНаСервере = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(КаталогНаСервереДляЗагрузкиМетаданных);
	
	ФайлПоставкиКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПоставки) + "conf.cf";
	ИмяФайлаЛогов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПоставки) + "create_distributive_log.txt";
	
	Если НЕ ПустаяСтрока(КаталогНаСервереДляЗагрузкиМетаданных) Тогда
		Файл = Новый Файл(КаталогНаСервереДляЗагрузкиМетаданных);
		Если Файл.Существует() Тогда
			УдалитьФайлы(КаталогНаСервереДляЗагрузкиМетаданных);
		КонецЕсли; 
	КонецЕсли; 
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 CREATEINFOBASE File=""%КаталогНаСервереДляЗагрузкиМетаданных%"" /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогНаСервереДляЗагрузкиМетаданных%", КаталогНаСервереДляЗагрузкиМетаданных);
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", ИмяФайлаЛогов);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	Если КодВозврата <> Неопределено Тогда
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8  DESIGNER /DisableStartupDialogs 
			| %СтрокаСоединенияИБДляЗагрузкиМетаданных% /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"" 
			| /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%""
			| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
			| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
			| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
			| /ConfigurationRepositoryUpdateCfg -force /UpdateDBCfg
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%СтрокаСоединенияИБДляЗагрузкиМетаданных%", СтрокаСоединенияНаСервере);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%", "");
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%", "");
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%", КаталогХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%", ИмяПользователяХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", ПарольПользователяХранилищаДляЗагрузкиМетаданных);
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", ИмяФайлаЛогов);
		
		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина, КодВозврата);
		
		Если КодВозврата <> 0 Тогда
			
			ТекстЛога = "";
			Попытка
				Лог = Новый ТекстовыйДокумент;
				Лог.Прочитать(ИмяФайлаЛогов);
				ТекстЛога = Лог.ПолучитьТекст();
				УдалитьФайлы(ИмяФайлаЛогов);
			Исключение
				ТекстЛога = ТекстЛога + Символы.ПС + ОписаниеОшибки();
			КонецПопытки; 
			
			УдалитьФайлы(КаталогНаСервереДляЗагрузкиМетаданных);
			ВызватьИсключение НСтр("ru = 'Обновление информционной базы из хранилища конфигураций закончилось неудачей.
				|Лог пакетных операций:
				|'") + ТекстЛога;
		КонецЕсли;
			
		СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 DESIGNER /DisableStartupDialogs 
			| %СтрокаСоединенияИБДляЗагрузкиМетаданных% /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%""
			| /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%""
			| /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""
			| /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""
			| /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""
			| /CreateDistributionFiles -cffile ""%ФайлПоставкиКонфигурации%""
			| /Out ""%ИмяФайлаЛогов%"" -NoTruncate";
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%СтрокаСоединенияИБДляЗагрузкиМетаданных%", СтрокаСоединенияНаСервере);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяИБДляЗагрузкиМетаданных%", "");
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяИБДляЗагрузкиМетаданных%", "");
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилищаДляЗагрузкиМетаданных%", КаталогХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилищаДляЗагрузкиМетаданных%", ИмяПользователяХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", ПарольПользователяХранилищаДляЗагрузкиМетаданных);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПоставкиКонфигурации%", ФайлПоставкиКонфигурации);
		
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", ИмяФайлаЛогов);
		
		КодВозврата = Неопределено;
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина, КодВозврата);
		
		Если КодВозврата = 0 Тогда
			Файл = Новый Файл(ФайлПоставкиКонфигурации);
			Если Файл.Существует() Тогда
				ДвоичныеДанные = Новый ДвоичныеДанные(ФайлПоставкиКонфигурации);
				АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
				Если СохранятьФайлПоставкиВХранилище Тогда
					
					ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИдентификаторПроекта, "ФайлПоставки", ДвоичныеДанные);
					УдалитьФайлы(ФайлПоставкиКонфигурации);
					
				КонецЕсли; 
				Лог = Новый ТекстовыйДокумент;
				Лог.Прочитать(ИмяФайлаЛогов);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Создание поставки для хранилища технического проекта'"), 
					УровеньЖурналаРегистрации.Информация,
					,
					,
					Лог.ПолучитьТекст());
				УдалитьФайлы(ИмяФайлаЛогов);
			Иначе
				ТекстЛога = "";
				Попытка
					Лог = Новый ТекстовыйДокумент;
					Лог.Прочитать(ИмяФайлаЛогов);
					ТекстЛога = Лог.ПолучитьТекст();
					УдалитьФайлы(ИмяФайлаЛогов);
				Исключение
					ТекстЛога = ТекстЛога + Символы.ПС + ОписаниеОшибки();
				КонецПопытки; 
				УдалитьФайлы(КаталогНаСервереДляЗагрузкиМетаданных);
				ВызватьИсключение НСтр("ru = 'Не найден созданный файл поставки. Запустите создание поставки еще раз.
					|Лог пакетных операций:
					|'") + ТекстЛога;
			КонецЕсли;
		Иначе
			ТекстЛога = "";
			Попытка
				Лог = Новый ТекстовыйДокумент;
				Лог.Прочитать(ИмяФайлаЛогов);
				ТекстЛога = Лог.ПолучитьТекст();
				УдалитьФайлы(ИмяФайлаЛогов);
			Исключение
				ТекстЛога = ТекстЛога + Символы.ПС + ОписаниеОшибки();
			КонецПопытки;
			УдалитьФайлы(КаталогНаСервереДляЗагрузкиМетаданных);
			ВызватьИсключение НСтр("ru = 'Создание файла поставки закончилось неудачей. Запустите создание поставки еще раз.
				|Лог пакетных операций:
				|'") + ТекстЛога;
		КонецЕсли;
		
	Иначе
		ТекстЛога = "";
		Попытка
			Лог = Новый ТекстовыйДокумент;
			Лог.Прочитать(ИмяФайлаЛогов);
			ТекстЛога = Лог.ПолучитьТекст();
			УдалитьФайлы(ИмяФайлаЛогов);
		Исключение
			ТекстЛога = ТекстЛога + Символы.ПС + ОписаниеОшибки();
		КонецПопытки; 
		УдалитьФайлы(КаталогНаСервереДляЗагрузкиМетаданных);
		ВызватьИсключение НСтр("ru = 'Не получилось создать временную базу для создания поставки. Запустите создание поставки еще раз.
			|Лог пакетных операций:
			|'") + ТекстЛога;
	КонецЕсли;
	
	УдалитьФайлы(КаталогНаСервереДляЗагрузкиМетаданных);
	
КонецПроцедуры

Процедура ВыполнитьКопированиеФайлаПоставки(Знач Проект, АдресХранилища) Экспорт
	
	ТипЗначения = ТипЗнч(Проект);
	
	Если ТипЗначения = Тип("СправочникСсылка.Проекты") Тогда
	
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "КаталогИБДляЗагрузкиМетаданных");
	
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Владелец");
		Параметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "КаталогИБДляЗагрузкиМетаданных");
	
	Иначе
	
		Возврат;
	
	КонецЕсли; 
	
	КаталогИБДляЗагрузкиМетаданных = Параметры.КаталогИБДляЗагрузкиМетаданных;
	
	Если НЕ ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных) 
		и ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИБДляЗагрузкиМетаданных) Тогда
		КаталогПоставки = КаталогИБДляЗагрузкиМетаданных;
	ИначеЕсли ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных) Тогда
		ПараметрыСоединения = ОбщегоНазначенияКлиентСервер.ПолучитьПараметрыПодключенияИзСтрокиСоединенияИнформационнойБазы(КаталогИБДляЗагрузкиМетаданных);
		Если ЗначениеЗаполнено(ПараметрыСоединения.File) Тогда
			КаталогПоставки = ПараметрыСоединения.File;
		Иначе
			// Загружаем из внутреннего хранилища в ИБ
			ИдентификаторПроекта = СтрЗаменить(Строка(Проект.УникальныйИдентификатор()), "-", "_");
			ДвоичныеДанные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИдентификаторПроекта, "ФайлПоставки");
			АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
			Возврат;
		КонецЕсли;
	Иначе
		// Загружаем из внутреннего хранилища в ИБ
		ИдентификаторПроекта = СтрЗаменить(Строка(Проект.УникальныйИдентификатор()), "-", "_");
		ДвоичныеДанные = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИдентификаторПроекта, "ФайлПоставки");
		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ФайлПоставкиКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПоставки) + "conf.cf";
	
	Файл = Новый Файл(ФайлПоставкиКонфигурации);
	
	Если Файл.Существует() Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ФайлПоставкиКонфигурации);
		АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
	Иначе
		ВызватьИсключение НСтр("ru = 'Не найден файл поставки, созданный другим процессом. Запустите создание поставки еще раз.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура Запустить(СтрокаКоманды, КаталогИсполняемогоФайла, ИмяФайлаЛогов, 
                    ФайлыНаУдалениеВСлучаеОшибки, ИмяФлага, ЗаголовокСообщенияОбОшибке, СостояниеВыполнения)

	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина, КодВозврата);
	
	Если КодВозврата <> 0 Тогда
		
		ТекстЛога = "";
		Попытка
			Лог = Новый ТекстовыйДокумент;
			Лог.Прочитать(ИмяФайлаЛогов);
			ТекстЛога = Лог.ПолучитьТекст();
			УдалитьФайлы(ИмяФайлаЛогов);
		Исключение
			ТекстЛога = ТекстЛога + Символы.ПС + ОписаниеОшибки();
		КонецПопытки; 
		
		Для Каждого ИмяФайла Из ФайлыНаУдалениеВСлучаеОшибки Цикл
			УдалитьФайлы(ИмяФайла);
		КонецЦикла; 
		
		СостояниеВыполнения.Вставить(ИмяФлага, 0);
		ДлительныеОперации.СообщитьПрогресс(,,СостояниеВыполнения);
		
		ВызватьИсключение ЗаголовокСообщенияОбОшибке + НСтр("ru = '
			|Лог пакетных операций:
			|'") + ТекстЛога;
		
	КонецЕсли;
	
	СостояниеВыполнения.Вставить(ИмяФлага, 2);
	ДлительныеОперации.СообщитьПрогресс(,,СостояниеВыполнения);
	
КонецПроцедуры
 
#КонецОбласти

#КонецЕсли
