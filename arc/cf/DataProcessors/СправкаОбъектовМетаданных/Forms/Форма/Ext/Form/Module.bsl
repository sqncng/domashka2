
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОтборНаличиеСправки = 1;
	
	ПараметрыОтбора = ХранилищеНастроекДанныхФорм.Загрузить("СправкаОбъектовМетаданных", "ПараметрыОтбора");
	Если ЗначениеЗаполнено(ПараметрыОтбора) Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыОтбора);
	КонецЕсли;
	
	ПроектПоУмолчанию = Проекты.ПроектПоУмолчанию();
	Если ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
		ОтборПроект = ПроектПоУмолчанию;
	КонецЕсли; 
	
	ТекущийПроект = ОтборПроект;
	
	ЗаполнитьВыборВариантаСправки();
	ДобавитьДопРеквизитыОбъектовМетаданных();
	ЗаполнитьСписокОбъектов(, Параметры.Ссылка);
	УправлениеИсториейНавигации();
	УправлениеДоступностьюСравненияВерсий();
	
	ИнициализацияНастройкиСписков();
	
	Элементы.ПоказыватьДопРеквизиты.Пометка = ПоказыватьДопРеквизиты;
	Элементы.РежимРедактирования.Пометка = ПоказатьСсылкуДляРедактирования;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЭлементыСправки" Тогда
		ПриЗаписиЭлементаСправкиНаСервере(Источник);
	ИначеЕсли ИмяСобытия = "ПоказатьСправкуОбъектаМетаданных" Тогда
		ПерейтиПоДаннымНавигации(Параметр, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПроектПриИзменении(Элемент)
	
	ОтборПроектПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРазделПроектаПриИзменении(Элемент)
	
	ЗаполнитьСписокОбъектов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	ЗаполнитьСписокОбъектов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеКонтроляПриИзменении(Элемент)
	
	ЗаполнитьСписокОбъектов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаличиеСправкиПриИзменении(Элемент)
	
	ЗаполнитьСписокОбъектов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискОбъектаПриИзменении(Элемент)
	
	ЗаполнитьСписокОбъектов(Ложь);
	Если НЕ ПустаяСтрока(БыстрыйПоискОбъекта) Тогда
		РазвернутьВсе();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантПроектСправкиПриИзменении(Элемент)
	
	ПоказатьСправку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСправкиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Попытка
		Идентификатор = ДанныеСобытия.Anchor.outerHTML;
	Исключение
		Идентификатор = "";
	КонецПопытки;
	
	ПозицияТочек = Найти(Идентификатор, "../");
	Если ПозицияТочек > 0 Тогда
		
		Идентификатор = Сред(Идентификатор, ПозицияТочек);
		КоличествоСимовлов = Найти(Идентификатор, """>");
		Если КоличествоСимовлов > 0 Тогда
			Идентификатор = Сред(Идентификатор, 1, КоличествоСимовлов - 1);
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		ПоказатьСправкуВыбраннойГиперСсылки(Идентификатор);
		Возврат;
	КонецЕсли;
	
	ПозицияСсылка = Найти(Идентификатор, "#СсылкаДляРедактирования");
	Если ПозицияСсылка > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСсылки = Сред(Идентификатор, ПозицияСсылка + СтрДлина("#СсылкаДляРедактирования"));
		ТекстСсылки = Лев(ТекстСсылки, Найти(ТекстСсылки, """>") - 1);
		ОткрытьФорму("Справочник.ЭлементыСправки.ФормаОбъекта", Новый Структура("Ключ", ЭлементСправкиПоИД(ТекстСсылки)));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов

&НаКлиенте
Процедура СписокОбъектовПриАктивизацииСтроки(Элемент)
	
	Если НеОбрабатыватьАктивизациюСтроки Тогда
		НеОбрабатыватьАктивизациюСтроки = Ложь;
	Иначе
		ПоказатьСправку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.СписокОбъектовАвторПоследнегоИзменения ИЛИ Поле = Элементы.СписокОбъектовДатаПоследнегоИзменения Тогда
		ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.СправкаБеретсяИзПроекта) И ЗначениеЗаполнено(ТекущиеДанные.ОбъектПоставщика) Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ссылка",                   ТекущиеДанные.ОбъектПоставщика);
			ПараметрыФормы.Вставить("ВариантПроектСправки",     ТекущиеДанные.Проект);
			ПараметрыФормы.Вставить("АвторПоследнегоИзменения", ТекущиеДанные.АвторПоследнегоИзменения);
			ПараметрыФормы.Вставить("ДатаПоследнегоИзменения",  ТекущиеДанные.ДатаПоследнегоИзменения);
			ОткрытьФорму("Обработка.СправкаОбъектовМетаданных.Форма.ИсторияИзмененийСправки", ПараметрыФормы);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
				
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ссылка",                   ТекущиеДанные.Ссылка);
			ПараметрыФормы.Вставить("ВариантПроектСправки",     ВариантПроектСправки);
			ПараметрыФормы.Вставить("АвторПоследнегоИзменения", ТекущиеДанные.АвторПоследнегоИзменения);
			ПараметрыФормы.Вставить("ДатаПоследнегоИзменения",  ТекущиеДанные.ДатаПоследнегоИзменения);
			ОткрытьФорму("Обработка.СправкаОбъектовМетаданных.Форма.ИсторияИзмененийСправки", ПараметрыФормы);
			
		КонецЕсли;
	Иначе
		ИзменитьСправку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ОткрытьОбъектМетаданных();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НавигацияВперед(Команда)
	
	ТекущаяПозицияВИстории = ТекущаяПозицияВИстории + 1;
	ДанныеИстории = ИсторияНавигации.Получить(ТекущаяПозицияВИстории - 1);
	ПерейтиПоДаннымНавигации(ДанныеИстории.Значение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияНазад(Команда)
	
	ТекущаяПозицияВИстории = ТекущаяПозицияВИстории - 1;
	ДанныеИстории = ИсторияНавигации.Получить(ТекущаяПозицияВИстории - 1);
	ПерейтиПоДаннымНавигации(ДанныеИстории.Значение, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДанные(Команда)
	
	ЗаполнитьСписокОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроизвольнаяНастройкаСпискаВыбрать(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОбъекта", "СправкаОбъектовМетаданных");
	ПараметрыФормы.Вставить("КлючНастроек", "СписокОбъектов");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроизвольнаяНастройкаСпискаВыбратьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ФормаЗагрузкиПользовательскихНастроекДинамическихСписков", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроизвольнаяНастройкаСписка(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСхемы", АдресСхемыПроизвольнойНастрокиСписокОбъектов);
	ПараметрыФормы.Вставить("НастройкиСписка", ПроизвольнаяНастройкаСпискаСписокОбъектов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроизвольнаяНастройкаСпискаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Отчет.НастройкаСписка.Форма.НастройкаСписка", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроизвольнаяНастройкаСпискаСохранить(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючОбъекта", "СправкаОбъектовМетаданных");
	ПараметрыФормы.Вставить("КлючНастроек", "СписокОбъектов");
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроизвольнаяНастройкаСпискаСохранитьЗавершение", ЭтотОбъект);
	ОткрытьФорму("ФормаСохраненияПользовательскихНастроекДинамическихСписков", 
			ПараметрыФормы,,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусПроверено(Команда)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеКонтроляНаСервере("НаКонтроле");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусНеПроверено(Команда)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеКонтроляНаСервере("НеПроверено");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусСнятоСКонтроля(Команда)

	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеКонтроляНаСервере("СнятоСКонтроля");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСравнитьСПровереннойВерсией(Команда)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипОбъекта = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СравнитьСПровереннойВерсией();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРазвернутьВсе(Команда)
	
	РазвернутьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвернутьВсе(Команда)
	
	СвернутьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСравнитьВариантыСправки(Команда)
	
	СравнитьВариантыСправки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьПараметрыСравнения(Команда)
	
	ОткрытьФорму("ОбщаяФорма.СравнениеВерсий");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказыватьДопРеквизиты(Команда)
	
	ПоказыватьДопРеквизитыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьОбъектМетаданных(Команда)
	
	ОткрытьОбъектМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРежимРедактирования(Команда)
	
	ПоказатьСсылкуДляРедактирования = НЕ ПоказатьСсылкуДляРедактирования;
	Элементы.РежимРедактирования.Пометка = ПоказатьСсылкуДляРедактирования;
	СохранитьПараметрыОтбора();
	ПоказатьСправку();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДанных

&НаСервере
Процедура ЗаполнитьВыборВариантаСправки()
	
	Элементы.ВариантПроектСправки.СписокВыбора.Очистить();
	Элементы.ГруппаПроектыСправки.ТекущаяСтраница = Элементы.СтраницаНетПроектов;
	ВариантПроектСправки = Справочники.Проекты.ПустаяСсылка();
	
	Если ТекущийПроект.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	ПроектыСправки = РаботаСоСправкойПовтИсп.ПроектыДляКоторыхВедетсяСправка(ТекущийПроект);
	
	Для Каждого Строка Из ПроектыСправки Цикл
		Элементы.ВариантПроектСправки.СписокВыбора.Добавить(Строка.Проект, Строка.ИмяПроекта);
	КонецЦикла; 
	
	Если Элементы.ВариантПроектСправки.СписокВыбора.Количество() <> 0 Тогда
		ВариантПроектСправки = Элементы.ВариантПроектСправки.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДопРеквизитыОбъектовМетаданных()

	ДобавляемыеРеквизиты = Новый Массив;
	УдалямыеРеквизиты = Новый Массив;
	
	Для каждого НовыйДопРеквизит Из ДополнительныеРеквизиты Цикл
		УдалямыеРеквизиты.Добавить("СписокОбъектов." + НовыйДопРеквизит.ИмяРеквизита);
	КонецЦикла;

	Для каждого ЭлементКоллекции Из УсловноеОформление.Элементы Цикл
		Если ЭлементКоллекции.Представление = "_Служебный_ВидимостьДопРеквизитов" Тогда
			УсловноеОформление.Элементы.Удалить(ЭлементКоллекции);
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	ДополнительныеРеквизиты.Очистить();
	
	Если ПоказыватьДопРеквизиты И НЕ ОтборПроект.Пустая() Тогда
		
		НовыйЭлемент = Справочники.ОбъектыМетаданных.СоздатьЭлемент();
		НовыйЭлемент.Владелец = ОтборПроект;
		СписокСвойств = УправлениеСвойствами.СвойстваОбъекта(НовыйЭлемент);
		
		НомерРеквизита = 1;
		Для каждого ДопРеквизит Из СписокСвойств Цикл
			НовыйДопРеквизит = ДополнительныеРеквизиты.Добавить();
			НовыйДопРеквизит.Свойство = ДопРеквизит;
			НовыйДопРеквизит.ИмяРеквизита = "ДопРеквизит" + Формат(НомерРеквизита, "ЧГ=");
			
			НовыйРеквизитФормы = Новый РеквизитФормы(
											НовыйДопРеквизит.ИмяРеквизита, 
											Новый ОписаниеТипов(ДопРеквизит.ТипЗначения), 
											"СписокОбъектов",
											ДопРеквизит.Заголовок);
											
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизитФормы);
			
			НомерРеквизита = НомерРеквизита + 1;
		КонецЦикла;
		
	КонецЕсли;

	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдалямыеРеквизиты);
	
	Для каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл
		НовыйЭлементФормы = Элементы.Вставить("СписокОбъектов" + ДопРеквизит.ИмяРеквизита, Тип("ПолеФормы"), Элементы.СписокОбъектов, Элементы.СписокОбъектовПустаяКолонка);
		НовыйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи;
		НовыйЭлементФормы.ПутьКДанным = "СписокОбъектов." + ДопРеквизит.ИмяРеквизита;
	КонецЦикла; 
	
	// Скроем значения доп реквизитов для строк которые не относятся к объекту метаданных
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Представление = "_Служебный_ВидимостьДопРеквизитов";
	
	Для каждого ДопРеквизит Из ДополнительныеРеквизиты Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СписокОбъектов" + ДопРеквизит.ИмяРеквизита);
	КонецЦикла; 

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектов.ТипОбъекта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОбъектов(СохранитьПараметрыОтбора = Ложь, ТекущаяСсылка = Неопределено)

	Если СохранитьПараметрыОтбора Тогда
		СохранитьПараметрыОтбора();
	КонецЕсли; 
	
	Если ТекущаяСсылка = Неопределено Тогда
		ТекущаяСтрока = Элементы.СписокОбъектов.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСсылка = СписокОбъектов.НайтиПоИдентификатору(ТекущаяСтрока).Ссылка;
		КонецЕсли;
	КонецЕсли; 
	
	КоллекцияОбъектов = СписокОбъектов.ПолучитьЭлементы();
	КоллекцияОбъектов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Ссылка КАК Проект,
	|	ПроектыВключаемыеПроекты.Проект КАК ПроектБиблиотека
	|ПОМЕСТИТЬ СвязиПроектовБиблиотек
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.СправкаВедетсяВБиблиотеке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыМетаданных.Владелец КАК Проект,
	|	ОбъектыМетаданных.Ссылка,
	|	ОбъектыМетаданных.Имя,
	|	ОбъектыМетаданных.Родитель,
	|	ОбъектыМетаданных.Родитель.Наименование КАК РодительИмя,
	|	ОбъектыМетаданных.Родитель.Имя КАК ТипОбъекта,
	|	ОбъектыМетаданных.Родитель.Код КАК РодительКод,
	|	ОбъектыМетаданных.РазделПроекта,
	|	ВЫБОР
	|		КОГДА СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ)
	|				ИЛИ НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И ЕСТЬNULL(НаличиеСправкиПоставщика.ЕстьСправка, ЛОЖЬ)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключатьВСправку,
	|	ВЫБОР
	|		КОГДА НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СправкаБерется,
	|	ВЫБОР
	|		КОГДА ОбъектыМетаданных.Поставщик = СвязиПроектовБиблиотек.ПроектБиблиотека
	|		ТОГДА ОбъектыМетаданных.Поставщик
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	КОНЕЦ КАК СправкаБеретсяИзПроекта,
	|	ОбъектыМетаданных.Поставщик,
	|	ОбъектыМетаданных.Ответственный,
	|	ЕСТЬNULL(ОбъектыМетаданныхПоставщика.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыМетаданных.ПустаяСсылка)) КАК ОбъектПоставщика
	|ПОМЕСТИТЬ ОбъектыМетаданных
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиПроектовБиблиотек КАК СвязиПроектовБиблиотек
	|		ПО ОбъектыМетаданных.Владелец = СвязиПроектовБиблиотек.Проект
	|			И ОбъектыМетаданных.Поставщик = СвязиПроектовБиблиотек.ПроектБиблиотека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданныхПоставщика
	|		ПО 	ОбъектыМетаданных.uuid = ОбъектыМетаданныхПоставщика.uuid
	|				И НЕ ОбъектыМетаданныхПоставщика.uuid = """"
	|				И ОбъектыМетаданных.Поставщик = ОбъектыМетаданныхПоставщика.Владелец 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеСправки КАК НаличиеСправки
	|		ПО ВЫРАЗИТЬ(НаличиеСправки.ВладелецСправки КАК Справочник.ОбъектыМетаданных) = ОбъектыМетаданных.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеСправки КАК НаличиеСправкиПоставщика
	|		ПО ВЫРАЗИТЬ(НаличиеСправкиПоставщика.ВладелецСправки КАК Справочник.ОбъектыМетаданных) = ОбъектыМетаданныхПоставщика.Ссылка
	|ГДЕ
	|	(ОбъектыМетаданных.Владелец = &ТекущийПроект
	|			ИЛИ &ТекущийПроект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|	И ОбъектыМетаданных.Родитель.ЕстьСправочнаяИнформация
	|	И НЕ ОбъектыМетаданных.ЭтоГруппа
	|	И НЕ ОбъектыМетаданных.ПометкаУдаления
	|	И (ОбъектыМетаданных.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	И (ОбъектыМетаданных.РазделПроекта = &РазделПроекта
	|			ИЛИ &РазделПроекта = ЗНАЧЕНИЕ(Справочник.РазделыПроекта.ПустаяСсылка))
	|	И ОбъектыМетаданных.Имя ПОДОБНО &БыстрыйПоискОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыМетаданных.Владелец,
	|	ОбъектыМетаданных.Ссылка,
	|	ОбъектыМетаданных.Имя,
	|	ОбъектыМетаданных.Родитель,
	|	ОбъектыМетаданных.Родитель.Наименование,
	|	ОбъектыМетаданных.Родитель.Имя,
	|	ОбъектыМетаданных.Родитель.Код,
	|	ОбъектыМетаданных.РазделПроекта,
	|	ОбъектыМетаданных.Поставщик,
	|	ОбъектыМетаданных.Ответственный,
	|	ОбъектыМетаданныхПоставщика.Ссылка,
	|	СвязиПроектовБиблиотек.ПроектБиблиотека,
	|	НаличиеСправки.ЕстьСправка,
	|	НаличиеСправкиПоставщика.ЕстьСправка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Подсистемы.Владелец КАК Проект,
	|	Подсистемы.Ссылка,
	|	Подсистемы.Имя,
	|	Подсистемы.Родитель,
	|	ВЫБОР
	|		КОГДА Подсистемы.Родитель = ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)
	|			ТОГДА ""Подсистемы""
	|		ИНАЧЕ Подсистемы.Родитель.Наименование
	|	КОНЕЦ КАК РодительИмя,
	|	""Подсистемы"",
	|	ВЫБОР
	|		КОГДА Подсистемы.Родитель = ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ Подсистемы.Родитель.Код
	|	КОНЕЦ КАК РодительКод,
	|	Подсистемы.РазделПроекта,
	|	ВЫБОР
	|		КОГДА СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ)
	|				ИЛИ НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И ЕСТЬNULL(НаличиеСправкиПоставщика.ЕстьСправка, ЛОЖЬ)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключатьВСправку,
	|	ВЫБОР
	|		КОГДА НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СправкаБерется,
	|	ВЫБОР
	|		КОГДА Подсистемы.Поставщик = СвязиПроектовБиблиотек.ПроектБиблиотека
	|		ТОГДА Подсистемы.Поставщик
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	КОНЕЦ КАК СправкаБеретсяИзПроекта,
	|	Подсистемы.Поставщик,
	|	Подсистемы.Ответственный,
	|	ЕСТЬNULL(ПодсистемыПоставщика.Ссылка, ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)) КАК ОбъектПоставщика
	|ИЗ
	|	Справочник.Подсистемы КАК Подсистемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиПроектовБиблиотек КАК СвязиПроектовБиблиотек
	|		ПО Подсистемы.Владелец = СвязиПроектовБиблиотек.Проект
	|			И Подсистемы.Поставщик = СвязиПроектовБиблиотек.ПроектБиблиотека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК ПодсистемыПоставщика
	|		ПО 	Подсистемы.uuid = ПодсистемыПоставщика.uuid
	|				И НЕ ПодсистемыПоставщика.uuid = """"
	|				И Подсистемы.Поставщик = ПодсистемыПоставщика.Владелец 
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеСправки КАК НаличиеСправки
	|		ПО ВЫРАЗИТЬ(НаличиеСправки.ВладелецСправки КАК Справочник.Подсистемы) = Подсистемы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеСправки КАК НаличиеСправкиПоставщика
	|		ПО ВЫРАЗИТЬ(НаличиеСправкиПоставщика.ВладелецСправки КАК Справочник.Подсистемы) = ПодсистемыПоставщика.Ссылка
	|ГДЕ
	|	(Подсистемы.Владелец = &ТекущийПроект
	|			ИЛИ &ТекущийПроект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|	И НЕ Подсистемы.ПометкаУдаления
	|	И (Подсистемы.Ответственный = &Ответственный
	|			ИЛИ &Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	И (Подсистемы.РазделПроекта = &РазделПроекта
	|			ИЛИ &РазделПроекта = ЗНАЧЕНИЕ(Справочник.РазделыПроекта.ПустаяСсылка))
	|	И Подсистемы.Имя ПОДОБНО &БыстрыйПоискОбъекта
	|	И (&ОтборНаличиеСправки = 0 И НЕ ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ) И СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 0 И НЕ ЕСТЬNULL(НаличиеСправкиПоставщика.ЕстьСправка, ЛОЖЬ)И Не СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 1 И ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ) И СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 1 И ЕСТЬNULL(НаличиеСправкиПоставщика.ЕстьСправка, ЛОЖЬ) И Не СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 2)
	|
	|СГРУППИРОВАТЬ ПО
	|	Подсистемы.Ссылка,
	|	Подсистемы.Владелец,
	|	Подсистемы.Имя,
	|	Подсистемы.РазделПроекта,
	|	Подсистемы.Поставщик,
	|	Подсистемы.Ответственный,
	|	ПодсистемыПоставщика.Ссылка,
	|	СвязиПроектовБиблиотек.ПроектБиблиотека,
	|	НаличиеСправки.ЕстьСправка,
	|	НаличиеСправкиПоставщика.ЕстьСправка
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектыМетаданных.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ФормыОбъектовМетаданных.Владелец,
	|	ФормыОбъектовМетаданных.Имя,
	|	ФормыОбъектовМетаданных.Код,
	|	ВЫБОР
	|		КОГДА (ОбъектыМетаданных.СправкаБерется И НЕ ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL И ЕСТЬNULL(НаличиеСправкиПоставщика.ЕстьСправка, ЛОЖЬ))
	|		  ИЛИ (ОбъектыМетаданных.СправкаБерется И ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL И ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ))
	|		  ИЛИ (НЕ ОбъектыМетаданных.СправкаБерется И ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключатьВСправку,
	|	ВЫБОР
	|		КОГДА ОбъектыМетаданных.СправкаБерется И НЕ ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СправкаБерется,
	|	ВЫБОР
	|		КОГДА ОбъектыМетаданных.СправкаБерется И НЕ ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL
	|		ТОГДА ОбъектыМетаданных.Поставщик
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	КОНЕЦ КАК СправкаБеретсяИзПроекта,
	|	ЕСТЬNULL(ФормыОбъектовМетаданныхПоставщика.Ссылка, ЗНАЧЕНИЕ(Справочник.ФормыОбъектовМетаданных.ПустаяСсылка)) КАК ОбъектПоставщика
	|ПОМЕСТИТЬ ФормыОбъектовМетаданных
	|	ИЗ
	|		ОбъектыМетаданных КАК ОбъектыМетаданных
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|			ПО (ФормыОбъектовМетаданных.Владелец = ОбъектыМетаданных.Ссылка)
	|				И (НЕ ФормыОбъектовМетаданных.ПометкаУдаления)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданныхПоставщика
	|			ПО 	ФормыОбъектовМетаданных.uuid = ФормыОбъектовМетаданныхПоставщика.uuid
	|					И НЕ ФормыОбъектовМетаданныхПоставщика.uuid = """"
	|					И ОбъектыМетаданных.ОбъектПоставщика = ФормыОбъектовМетаданныхПоставщика.Владелец
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеСправки КАК НаличиеСправки
	|			ПО ВЫРАЗИТЬ(НаличиеСправки.ВладелецСправки КАК Справочник.ФормыОбъектовМетаданных) = ФормыОбъектовМетаданных.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеСправки КАК НаличиеСправкиПоставщика
	|			ПО 	ВЫРАЗИТЬ(НаличиеСправкиПоставщика.ВладелецСправки КАК Справочник.ФормыОбъектовМетаданных) = ФормыОбъектовМетаданныхПоставщика.Ссылка
	|ГДЕ
	|	(&ОтборНаличиеСправки = 0 И НЕ ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ) И НЕ ОбъектыМетаданных.СправкаБерется
	|		ИЛИ &ОтборНаличиеСправки = 0 И НЕ ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ) И ОбъектыМетаданных.СправкаБерется И ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 0 И НЕ ЕСТЬNULL(НаличиеСправкиПоставщика.ЕстьСправка, ЛОЖЬ) И ОбъектыМетаданных.СправкаБерется И НЕ ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 1 И ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ) И НЕ ОбъектыМетаданных.СправкаБерется
	|		ИЛИ &ОтборНаличиеСправки = 1 И ЕСТЬNULL(НаличиеСправки.ЕстьСправка, ЛОЖЬ) И ОбъектыМетаданных.СправкаБерется И ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 1 И ЕСТЬNULL(НаличиеСправкиПоставщика.ЕстьСправка, ЛОЖЬ) И ОбъектыМетаданных.СправкаБерется И НЕ ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL
	|		ИЛИ &ОтборНаличиеСправки = 2)
	|
	|	СГРУППИРОВАТЬ ПО
	|		ФормыОбъектовМетаданных.Ссылка,
	|		ФормыОбъектовМетаданныхПоставщика.Ссылка,
	|		ОбъектыМетаданных.Поставщик,
	|		ОбъектыМетаданных.СправкаБерется,
	|		НаличиеСправки.ЕстьСправка,
	|		НаличиеСправкиПоставщика.ЕстьСправка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ФормыОбъектовМетаданных.Владелец
	|;
	|ВЫБРАТЬ
	|	ФормыОбъектовМетаданных.Владелец,
	|	МАКСИМУМ(ФормыОбъектовМетаданных.ВключатьВСправку) КАК ВключатьВСправку
	|ПОМЕСТИТЬ НаличиеСправкиФорм
	|	ИЗ
	|		ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|
	|	СГРУППИРОВАТЬ ПО
	|	ФормыОбъектовМетаданных.Владелец
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФормыОбъектовМетаданных.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ОбъектыМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ТОГДА ОбъектыМетаданных.Ссылка
	|		ИНАЧЕ ОбъектыМетаданных.ОбъектПоставщика
	|	КОНЕЦ КАК ОбъектИстории,
	|	МАКСИМУМ(ДатыИзмененияОбъектов.ДатаИзменения) КАК ДатаИзменения
	|ПОМЕСТИТЬ ПоследняяДатаИзмененияОбъектов
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.КонтролируемыйОбъект = ОбъектыМетаданных.ОбъектПоставщика)
	|			И (НЕ ОбъектыМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|			И (ДатыИзмененияОбъектов.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных))
	|			И (ДатыИзмененияОбъектов.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыМетаданных.Ссылка,
	|	ОбъектыМетаданных.ОбъектПоставщика,
	|	ОбъектыМетаданных.СправкаБеретсяИзПроекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка,
	|	ВЫБОР
	|		КОГДА ОбъектыМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ТОГДА ОбъектыМетаданных.Ссылка
	|		ИНАЧЕ ОбъектыМетаданных.ОбъектПоставщика
	|	КОНЕЦ,
	|	МАКСИМУМ(ДатыИзмененияОбъектов.ДатаИзменения)
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.КонтролируемыйОбъект = ОбъектыМетаданных.Ссылка)
	|			И (ОбъектыМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|			И (ДатыИзмененияОбъектов.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных))
	|			И (ДатыИзмененияОбъектов.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыМетаданных.Ссылка,
	|	ОбъектыМетаданных.ОбъектПоставщика,
	|	ОбъектыМетаданных.СправкаБеретсяИзПроекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ВЫБОР
	|		КОГДА ФормыОбъектовМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ТОГДА ФормыОбъектовМетаданных.Ссылка
	|		ИНАЧЕ ФормыОбъектовМетаданных.ОбъектПоставщика
	|	КОНЕЦ,
	|	МАКСИМУМ(ДатыИзмененияОбъектов.ДатаИзменения)
	|ИЗ
	|	ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.КонтролируемыйОбъект = ФормыОбъектовМетаданных.ОбъектПоставщика)
	|			И (НЕ ФормыОбъектовМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|			И (ДатыИзмененияОбъектов.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных))
	|			И (ДатыИзмененияОбъектов.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ФормыОбъектовМетаданных.ОбъектПоставщика,
	|	ФормыОбъектовМетаданных.СправкаБеретсяИзПроекта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ВЫБОР
	|		КОГДА ФормыОбъектовМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|			ТОГДА ФормыОбъектовМетаданных.Ссылка
	|		ИНАЧЕ ФормыОбъектовМетаданных.ОбъектПоставщика
	|	КОНЕЦ,
	|	МАКСИМУМ(ДатыИзмененияОбъектов.ДатаИзменения)
	|ИЗ
	|	ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.КонтролируемыйОбъект = ФормыОбъектовМетаданных.Ссылка)
	|			И (ФормыОбъектовМетаданных.СправкаБеретсяИзПроекта = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|			И (ДатыИзмененияОбъектов.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных))
	|			И (ДатыИзмененияОбъектов.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ФормыОбъектовМетаданных.ОбъектПоставщика,
	|	ФормыОбъектовМетаданных.СправкаБеретсяИзПроекта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследняяДатаИзмененияОбъектов.Ссылка КАК Ссылка,
	|	ДатыИзмененияОбъектов.Пользователь КАК АвторПоследнегоИзменения,
	|	ПоследняяДатаИзмененияОбъектов.ДатаИзменения КАК ДатаПоследнегоИзменения
	|ПОМЕСТИТЬ ДатыИзмененияОбъектов
	|ИЗ
	|	ПоследняяДатаИзмененияОбъектов КАК ПоследняяДатаИзмененияОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.КонтролируемыйОбъект = ПоследняяДатаИзмененияОбъектов.ОбъектИстории)
	|			И (ДатыИзмененияОбъектов.ДатаИзменения = ПоследняяДатаИзмененияОбъектов.ДатаИзменения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Проект,
	|	ОбъектыМетаданных.Ссылка,
	|	ОбъектыМетаданных.Имя,
	|	ОбъектыМетаданных.Родитель,
	|	ОбъектыМетаданных.РодительКод,
	|	ОбъектыМетаданных.РодительИмя,
	|	ОбъектыМетаданных.ТипОбъекта,
	|	ОбъектыМетаданных.ВключатьВСправку,
	|	ОбъектыМетаданных.СправкаБеретсяИзПроекта,
	|	ОбъектыМетаданных.РазделПроекта,
	|	ОбъектыМетаданных.Ответственный,
	|	ОбъектыМетаданных.ОбъектПоставщика,
	|	ДатыИзмененияОбъектов.АвторПоследнегоИзменения,
	|	ДатыИзмененияОбъектов.ДатаПоследнегоИзменения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КонтрольИзменений.СтатусКонтроля, ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроляОбъектов.СнятоСКонтроля)) = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроляОбъектов.СнятоСКонтроля)
	|			ТОГДА &СостояниеКонтроля_НетКонтроля
	|		КОГДА КонтрольИзменений.ДатаКонтроля >= ЕСТЬNULL(ДатыИзмененияОбъектов.ДатаПоследнегоИзменения, ДАТАВРЕМЯ(1,1,1))
	|				И КонтрольИзменений.СтатусКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроляОбъектов.НаКонтроле)
	|			ТОГДА &СостояниеКонтроля_Проверено
	|		ИНАЧЕ &СостояниеКонтроля_НеПроверено
	|	КОНЕЦ КАК СостояниеКонтроля
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.Ссылка = ОбъектыМетаданных.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИзменений КАК КонтрольИзменений
	|		ПО (КонтрольИзменений.КонтролируемыйОбъект = ОбъектыМетаданных.Ссылка)
	|			И (КонтрольИзменений.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных))
	|			И (КонтрольИзменений.Пользователь = &ТекущийПользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаличиеСправкиФорм КАК НаличиеСправкиФорм
	|		ПО (ОбъектыМетаданных.Ссылка = НаличиеСправкиФорм.Владелец)
	| ГДЕ
	|	(&ОтборНаличиеСправки = 0 И (НЕ ОбъектыМетаданных.ВключатьВСправку ИЛИ НаличиеСправкиФорм.ВключатьВСправку = ЛОЖЬ))
	|		ИЛИ (&ОтборНаличиеСправки = 1 И (ОбъектыМетаданных.ВключатьВСправку ИЛИ ЕСТЬNULL(НаличиеСправкиФорм.ВключатьВСправку, ЛОЖЬ)))
	|		ИЛИ &ОтборНаличиеСправки = 2
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыМетаданных.РодительКод,
	|	ОбъектыМетаданных.Имя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ФормыОбъектовМетаданных.Владелец,
	|	ФормыОбъектовМетаданных.Имя,
	|	ФормыОбъектовМетаданных.ВключатьВСправку,
	|	ФормыОбъектовМетаданных.СправкаБеретсяИзПроекта,
	|	ДатыИзмененияОбъектов.АвторПоследнегоИзменения,
	|	ДатыИзмененияОбъектов.ДатаПоследнегоИзменения,
	|	ФормыОбъектовМетаданных.ОбъектПоставщика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КонтрольИзменений.СтатусКонтроля, ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроляОбъектов.СнятоСКонтроля)) = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроляОбъектов.СнятоСКонтроля)
	|			ТОГДА &СостояниеКонтроля_НетКонтроля
	|		КОГДА КонтрольИзменений.ДатаКонтроля >= ЕСТЬNULL(ДатыИзмененияОбъектов.ДатаПоследнегоИзменения, ДАТАВРЕМЯ(1,1,1))
	|				И КонтрольИзменений.СтатусКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроляОбъектов.НаКонтроле)
	|			ТОГДА &СостояниеКонтроля_Проверено
	|		ИНАЧЕ &СостояниеКонтроля_НеПроверено
	|	КОНЕЦ КАК СостояниеКонтроля
	|ИЗ
	|	ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|		ПО (ДатыИзмененияОбъектов.Ссылка = ФормыОбъектовМетаданных.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольИзменений КАК КонтрольИзменений
	|		ПО (КонтрольИзменений.КонтролируемыйОбъект = ФормыОбъектовМетаданных.Ссылка)
	|			И (КонтрольИзменений.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных))
	|			И (КонтрольИзменений.Пользователь = &ТекущийПользователь)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФормыОбъектовМетаданных.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка,
	|	ДополнительныеРеквизиты.Свойство,
	|	ДополнительныеРеквизиты.Значение
	|ИЗ
	|	ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
	|		ПО (ДополнительныеРеквизиты.Ссылка = ОбъектыМетаданных.Ссылка)";
	
	Запрос.УстановитьПараметр("Ответственный",       ОтборОтветственный);
	Запрос.УстановитьПараметр("РазделПроекта",       ОтборРазделПроекта);
	Запрос.УстановитьПараметр("ТекущийПроект",       ОтборПроект);
	Запрос.УстановитьПараметр("ОтборНаличиеСправки", ОтборНаличиеСправки);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Если НЕ ПустаяСтрока(БыстрыйПоискОбъекта) Тогда
		Запрос.УстановитьПараметр("БыстрыйПоискОбъекта", "%" + БыстрыйПоискОбъекта + "%");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОбъектыМетаданных.Имя ПОДОБНО &БыстрыйПоискОбъекта", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Подсистемы.Имя ПОДОБНО &БыстрыйПоискОбъекта", "");
	КонецЕсли;
	
	ЗначенияСостояниеКонтроля = ЗначенияСостояниеКонтроля();
	
	Запрос.УстановитьПараметр("СостояниеКонтроля_НетКонтроля", ЗначенияСостояниеКонтроля.НетКонтроля);
	Запрос.УстановитьПараметр("СостояниеКонтроля_Проверено",   ЗначенияСостояниеКонтроля.Проверено);
	Запрос.УстановитьПараметр("СостояниеКонтроля_НеПроверено", ЗначенияСостояниеКонтроля.НеПроверено);
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка               = Результат[6].Выбрать();
	СписокФорм            = Результат[7].Выгрузить();
	ЗначенияДопРеквизитов = Результат[8].Выгрузить();
	
	СсылкиНаТипыОбъектов   = Новый Соответствие;
	РодительскиеПодсистемы = Новый Соответствие;
	
	ТаблицаТипОбъектаИндексКартинки = РаботаСОбъектамиМетаданных.ТаблицаТипОбъектаИндексКартинки();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Владелец", Выборка.Ссылка);
	 	ВыборкаФормОбъекта = СписокФорм.НайтиСтроки(СтруктураПоиска);
		Если НЕ ОбъектИЕгоФормыСоответствуютОтбору(Выборка, ВыборкаФормОбъекта, ЗначенияСостояниеКонтроля) Тогда
			Продолжить;
		КонецЕсли;
		
		Родитель    = Выборка.Родитель;
		РодительИмя = Выборка.РодительИмя;
		
		СтрокаРодитель = Неопределено;
		Если Выборка.ТипОбъекта = СтрокаПодсистем() И ЗначениеЗаполнено(Родитель) Тогда
			
			СтрокаРодитель = РодительскиеПодсистемы.Получить(Родитель);
			Если СтрокаРодитель = Неопределено Тогда
				Родитель    = Справочники.Подсистемы.ПустаяСсылка();
				РодительИмя = СтрокаПодсистем();
			КонецЕсли;
			
		КонецЕсли; 
		
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаРодитель = СсылкиНаТипыОбъектов.Получить(Родитель);
		КонецЕсли; 
		
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаРодитель = КоллекцияОбъектов.Добавить();
			СтрокаРодитель.Ссылка         = Родитель;
			СтрокаРодитель.Представление  = РодительИмя;
			СтрокаРодитель.ИндексКартинки = РаботаСОбъектамиМетаданных.ИндексКартинкиПоТипуОбъекта(Выборка.ТипОбъекта, ТаблицаТипОбъектаИндексКартинки);
			СтрокаРодитель.Проект         = Выборка.Проект;
			СсылкиНаТипыОбъектов.Вставить(Родитель, СтрокаРодитель);
		КонецЕсли;
		КоллекцияТипаОбъекта = СтрокаРодитель.ПолучитьЭлементы();
		
		НовыйОбъект = КоллекцияТипаОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйОбъект, Выборка);
		НовыйОбъект.Представление  = Выборка.Имя;
		НовыйОбъект.ИндексКартинки = РаботаСОбъектамиМетаданных.ИндексКартинкиПоТипуОбъекта(Выборка.ТипОбъекта, ТаблицаТипОбъектаИндексКартинки);
		НовыйОбъект.СостояниеКонтроляИндексКартинки = ИндексКартинкиСостоянияКонтроля(Выборка.СостояниеКонтроля, ЗначенияСостояниеКонтроля);
		НовыйОбъект.ТипОбъекта = 1;
		
		Если Выборка.ТипОбъекта = СтрокаПодсистем() Тогда
			РодительскиеПодсистемы.Вставить(Выборка.Ссылка, НовыйОбъект);
		КонецЕсли; 
		
		// Значения доп реквизитов объекта метаданных
		Если ПоказыватьДопРеквизиты И НЕ ОтборПроект.Пустая() Тогда
			СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
	  		ДопРеквизитыОбъекта = ЗначенияДопРеквизитов.НайтиСтроки(СтруктураПоиска);
			Для каждого ДопРеквизит Из ДопРеквизитыОбъекта Цикл
				СтруктураПоиска = Новый Структура("Свойство", ДопРеквизит.Свойство);
	   			СписокСтрок = ДополнительныеРеквизиты.НайтиСтроки(СтруктураПоиска);
				НовыйОбъект[СписокСтрок[0].ИмяРеквизита] = ДопРеквизит.Значение;
			КонецЦикла; 
		КонецЕсли; 
		
		// Формы объекта метаданных
		КоллекцияФормОбъекта = НовыйОбъект.ПолучитьЭлементы();
		Для каждого ВыборкаФорма Из ВыборкаФормОбъекта Цикл
			Если НЕ СостояниеКонтроляСоответствуетОтбору(ВыборкаФорма.СостояниеКонтроля, ЗначенияСостояниеКонтроля) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйОбъект = КоллекцияФормОбъекта.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйОбъект, ВыборкаФорма);
			НовыйОбъект.Представление = ВыборкаФорма.Имя;
			НовыйОбъект.Проект = Выборка.Проект;
			НовыйОбъект.ИндексКартинки = 59;
			НовыйОбъект.ТипОбъекта = 2;
			НовыйОбъект.СостояниеКонтроляИндексКартинки = ИндексКартинкиСостоянияКонтроля(ВыборкаФорма.СостояниеКонтроля, ЗначенияСостояниеКонтроля);
		КонецЦикла; 
		
	КонецЦикла;
	
	ПрименитьПроизвольнуюНастройкуСписка();
	
	Если ТекущаяСсылка <> Неопределено Тогда
		НайденнаяСтрока = НайтиСтрокуПоСсылке(СписокОбъектов.ПолучитьЭлементы(), ТекущаяСсылка);
		Если НайденнаяСтрока <> Неопределено Тогда
			Элементы.СписокОбъектов.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОбъектИЕгоФормыСоответствуютОтбору(Выборка, ВыборкаФормОбъекта, ЗначенияСостояниеКонтроля)
	
	Если ОтборСостояниеКонтроля = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СостояниеКонтроляСоответствуетОтбору(Выборка.СостояниеКонтроля, ЗначенияСостояниеКонтроля) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ВыборкаФорма Из ВыборкаФормОбъекта Цикл
		Если СостояниеКонтроляСоответствуетОтбору(ВыборкаФорма.СостояниеКонтроля, ЗначенияСостояниеКонтроля)  Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СостояниеКонтроляСоответствуетОтбору(СостояниеКонтроля, ЗначенияСостояниеКонтроля)
	
	Если ОтборСостояниеКонтроля = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОтборСостояниеКонтроля = "НеПроверено" И СостояниеКонтроля = ЗначенияСостояниеКонтроля.НеПроверено 
		ИЛИ ОтборСостояниеКонтроля = "Проверено" И СостояниеКонтроля = ЗначенияСостояниеКонтроля.Проверено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ИндексКартинкиСостоянияКонтроля(СостояниеКонтроля, ЗначенияСостояниеКонтроля)
	
	Если СостояниеКонтроля = ЗначенияСостояниеКонтроля.НеПроверено Тогда 
		Возврат 1;
	ИНачеЕсли СостояниеКонтроля = ЗначенияСостояниеКонтроля.Проверено Тогда 
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СтрокаПодсистем()
	Возврат "Подсистемы";
КонецФункции

&НаСервере
Процедура ПриЗаписиЭлементаСправкиНаСервере(Ссылка)
	
	ТекущаяСтрока = Элементы.СписокОбъектов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = СписокОбъектов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные.Ссылка = Ссылка Тогда
			ПоказатьСправкуПоСтроке(ТекущиеДанные, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаОбъект = НайтиСтрокуПоСсылке(СписокОбъектов.ПолучитьЭлементы(), Ссылка);
	Если СтрокаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияСостояниеКонтроля = ЗначенияСостояниеКонтроля();
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Ссылка, Перечисления.ВидыОбъектов.СправкаОбъектаМетаданных);
	Если СтатусКонтроля = "Проверено" Тогда
		ТекущиеДанные.СостояниеКонтроля = ЗначенияСостояниеКонтроля.Проверено;
	ИначеЕсли СтатусКонтроля = "Не проверено" ИЛИ СтатусКонтроля = "Изменено" Тогда
		ТекущиеДанные.СостояниеКонтроля = ЗначенияСостояниеКонтроля.НеПроверено;
	Иначе
		ТекущиеДанные.СостояниеКонтроля = ЗначенияСостояниеКонтроля.НетКонтроля;
	КонецЕсли;
	ТекущиеДанные.СостояниеКонтроляИндексКартинки = ИндексКартинкиСостоянияКонтроля(ТекущиеДанные.СостояниеКонтроля, ЗначенияСостояниеКонтроля);	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыИзмененияОбъектов.Пользователь,
	|	ДатыИзмененияОбъектов.ДатаИзменения
	|ИЗ
	|	РегистрСведений.ДатыИзмененияОбъектов КАК ДатыИзмененияОбъектов
	|ГДЕ
	|	ДатыИзмененияОбъектов.КонтролируемыйОбъект = &КонтролируемыйОбъект
	|	И ДатыИзмененияОбъектов.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных)";
	
	Запрос.УстановитьПараметр("КонтролируемыйОбъект", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекущиеДанные.АвторПоследнегоИзменения = Выборка.Пользователь;
		ТекущиеДанные.ДатаПоследнегоИзменения = Выборка.ДатаИзменения;
	Иначе
		ТекущиеДанные.АвторПоследнегоИзменения = Справочники.Пользователи.ПустаяСсылка();
		ТекущиеДанные.ДатаПоследнегоИзменения = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияНавигации

&НаСервере
Процедура ДобавитьВИсториюПросмотра(Ссылка)

	// Удалим историю которая позже текущей позиции, т.к. вперед уже нельзя перейти
	Для Сч = ТекущаяПозицияВИстории По ИсторияНавигации.Количество() - 1 Цикл
		ИсторияНавигации.Удалить(ТекущаяПозицияВИстории);
	КонецЦикла; 

	КоличествоЭлементовИстории = ИсторияНавигации.Количество();
	Если КоличествоЭлементовИстории = 0 
		ИЛИ ИсторияНавигации[КоличествоЭлементовИстории-1].Значение <> Ссылка Тогда
		
		ИсторияНавигации.Добавить(Ссылка);
		
		// Сократим количество записей в истории
		МаксИндексУдаляемойЗаписи = ИсторияНавигации.Количество() - 15;
		Для Сч = 0 По МаксИндексУдаляемойЗаписи - 1 Цикл
			ИсторияНавигации.Удалить(0);
		КонецЦикла; 
		
		ТекущаяПозицияВИстории = ИсторияНавигации.Количество();
	КонецЕсли; 
	
	УправлениеИсториейНавигации();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеИсториейНавигации()

	МожноПерейтиНазад = ТекущаяПозицияВИстории > 1;
	МожноПерейтиВперед = ТекущаяПозицияВИстории < ИсторияНавигации.Количество();
	
	Элементы.СписокОбъектовНавигацияНазад.Доступность = МожноПерейтиНазад;
	Элементы.СписокОбъектовНавигацияВперед.Доступность = МожноПерейтиВперед;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиПоДаннымНавигации(Ссылка, ОбновитьИсториюНавигации)

	НайденнаяСтрока = НайтиСтрокуПоСсылке(СписокОбъектов.ПолучитьЭлементы(), Ссылка);
	Если НайденнаяСтрока <> Неопределено Тогда
		НеОбрабатыватьАктивизациюСтроки = Истина;
		Элементы.СписокОбъектов.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		ПоказатьСправкуПоСтроке(НайденнаяСтрока, ОбновитьИсториюНавигации);
	Иначе
		ПоказатьСправкуНаСервере(Ссылка, ТекущийПроект, ОбновитьИсториюНавигации);
	КонецЕсли;

	УправлениеИсториейНавигации();
	
КонецПроцедуры

#КонецОбласти

#Область ВыводСправки

&НаКлиенте
Процедура ПоказатьСправку(ПоказатьСразу = Ложь)

	ТекстСправки = "";
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ТипОбъекта <> 0 Тогда
		Если ПоказатьСразу Тогда
			Подключаемый_ВывестиСправку();
		Иначе
			ТекстСправки = НСтр("ru = '<HTML><BODY>Подождите справка формируется...</BODY><HTML>'");
			ПодключитьОбработчикОжидания("Подключаемый_ВывестиСправку", 0.5, Истина);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиСправку()

	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СправкаБеретсяИзПроекта) И ЗначениеЗаполнено(ТекущиеДанные.ОбъектПоставщика) Тогда
		ПоказатьСправкуНаСервере(ТекущиеДанные.ОбъектПоставщика, ТекущиеДанные.СправкаБеретсяИзПроекта, Истина, 
		                         ТекущиеДанные.Проект, Ложь);
	Иначе 
		ПоказатьСправкуНаСервере(ТекущиеДанные.Ссылка, ТекущиеДанные.Проект, Истина, ВариантПроектСправки);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСправкуПоСтроке(Строка, ДобавитьВИсториюПросмотра)
	
	Если ЗначениеЗаполнено(Строка.СправкаБеретсяИзПроекта) И ЗначениеЗаполнено(Строка.ОбъектПоставщика) Тогда
		ПоказатьСправкуНаСервере(Строка.ОбъектПоставщика, Строка.СправкаБеретсяИзПроекта, ДобавитьВИсториюПросмотра, Строка.Проект, Ложь);
	Иначе 
		ПоказатьСправкуНаСервере(Строка.Ссылка, Строка.Проект, ДобавитьВИсториюПросмотра, ВариантПроектСправки);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСправкуНаСервере(Знач Ссылка, Знач Проект, Знач ДобавитьВИсториюПросмотра, 
                                   Знач ВариантПроект = Неопределено, ПоказыватьВарианты = Истина)
	
	Если Проект <> ТекущийПроект Тогда
		ТекущийПроект = Проект;
		ЗаполнитьВыборВариантаСправки();
	КонецЕсли;
	
	ВариантыВыбраннойСправки = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыФормированияСправки = ФормированиеСправкиСервер.ПараметрыФормированияСправки();
		ПараметрыФормированияСправки.Вставить("ИспользоватьСсылкиСППР",          Истина);
		ПараметрыФормированияСправки.Вставить("ВариантПроектСправки",            ВариантПроект);
		ПараметрыФормированияСправки.Вставить("ПоказатьСсылкуДляРедактирования", ПоказатьСсылкуДляРедактирования);
		ТекстСправки = ФормированиеСправкиСервер.СформироватьСправку(Ссылка, ПараметрыФормированияСправки, ВариантыВыбраннойСправки);
	Иначе
		ТекстСправки = "";
	КонецЕсли;
	ТекстСправки = "<HTML>" + ТекстСправки + "</HTML>";
	
	Если ВариантыВыбраннойСправки.Количество() > 0 И ПоказыватьВарианты Тогда
		Элементы.ГруппаПроектыСправки.ТекущаяСтраница = Элементы.СтраницаЕстьПроекты;
	Иначе	
		Элементы.ГруппаПроектыСправки.ТекущаяСтраница = Элементы.СтраницаНетПроектов;
	КонецЕсли;
	
	Если ДобавитьВИсториюПросмотра Тогда
		ДобавитьВИсториюПросмотра(Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПоказатьСправкуВыбраннойГиперСсылки(Идентификатор)

	КоличествоСимволов = Найти(Идентификатор, "#");
	
	Если КоличествоСимволов > 0 Тогда
		Идентификатор = Сред(Идентификатор, 1, КоличествоСимволов - 1);
	КонецЕсли;
	
	Идентификатор = СтрЗаменить(Идентификатор, "../", "");
	
	Идентификатор = "{""#""" + Идентификатор + "}";
	Ссылка = ЗначениеИзСтрокиВнутр(Идентификатор);
	
	НеОбрабатыватьАктивизациюСтроки = Истина;
	
	НайденнаяСтрока = НайтиСтрокуПоСсылке(СписокОбъектов.ПолучитьЭлементы(), Ссылка);
	Если НайденнаяСтрока <> Неопределено Тогда
		Элементы.СписокОбъектов.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		ПоказатьСправкуПоСтроке(НайденнаяСтрока, Истина);
	Иначе
		ПоказатьСправкуНаСервере(Ссылка, ТекущийПроект, Истина);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область НастройкаСписков

&НаСервере
Процедура ИнициализацияНастройкиСписков()

	Если Метаданные.Отчеты.Найти("НастройкаСписка") = Неопределено Тогда
		Элементы.СписокОбъектовГруппаНастройкаСписка.Видимость  = Ложь;
		Элементы.ПроизвольнаяНастройкаСписка.Видимость          = Ложь;
		Элементы.ПроизвольнаяНастройкаСпискаВыбрать.Видимость   = Ложь;
		Элементы.ПроизвольнаяНастройкаСпискаСохранить.Видимость = Ложь;
		Элементы.СписокОбъектовКонтекстноеМенюПроизвольнаяНастройкаСписка.Видимость = Ложь;
		Возврат;
	КонецЕсли; 
	
	НастройкаПолей = Новый Структура;
	НастройкаПолей.Вставить("ИспользоватьНастройкуСортировки", Ложь);
	
	НедоступныеПоляДляНастройки = Новый Массив;
	НедоступныеПоляДляНастройки.Добавить("ИндексКартинки");
	НедоступныеПоляДляНастройки.Добавить("СостояниеКонтроля");
	НедоступныеПоляДляНастройки.Добавить("СостояниеКонтроляИндексКартинки");
	НедоступныеПоляДляНастройки.Добавить("Представление");
	НедоступныеПоляДляНастройки.Добавить("ТипОбъекта");
	НастройкаПолей.Вставить("НедоступныеПоля", НедоступныеПоляДляНастройки);
	
	РеквизитыСписка = ПолучитьРеквизиты("СписокОбъектов");
	АдресСхемыПроизвольнойНастрокиСписокОбъектов = Отчеты.НастройкаСписка.ИнициализацияНастройки(
															РеквизитыСписка,
															ПроизвольнаяНастройкаСпискаСписокОбъектов,
															УникальныйИдентификатор,
															НастройкаПолей);

КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяНастройкаСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ПроизвольнаяНастройкаСпискаНаСервере(РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвольнаяНастройкаСпискаНаСервере(Знач КомпоновщикНастроек)

	ПроизвольнаяНастройкаСпискаСписокОбъектов.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	ПроизвольнаяНастройкаСпискаСписокОбъектов.ЗагрузитьПользовательскиеНастройки(КомпоновщикНастроек.ПользовательскиеНастройки);
	ЗаполнитьСписокОбъектов();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьПроизвольнуюНастройкуСписка()

	Если НЕ ЭтоАдресВременногоХранилища(АдресСхемыПроизвольнойНастрокиСписокОбъектов) Тогда
		Возврат;
	КонецЕсли; 
	
	ЕстьОтбор = Ложь;
	Для каждого ЭлементНастройки из ПроизвольнаяНастройкаСпискаСписокОбъектов.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ОтборКомпоновкиДанных") Тогда
			ЕстьОтбор = (ЭлементНастройки.Элементы.Количество() <> 0);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОтбор Тогда
		Элементы.СписокОбъектовГруппаНастройкаСписка.Картинка = БиблиотекаКартинок.НастроитьСписок;
		Элементы.ПроизвольнаяНастройкаСписка.Картинка = БиблиотекаКартинок.НастроитьСписок;
		Элементы.СписокОбъектовКонтекстноеМенюПроизвольнаяНастройкаСписка.Картинка = БиблиотекаКартинок.НастроитьСписок;
		Возврат;
	КонецЕсли;
	
	Элементы.СписокОбъектовГруппаНастройкаСписка.Картинка = БиблиотекаКартинок.НастроитьСписокОтборУстановлен;
	Элементы.ПроизвольнаяНастройкаСписка.Картинка = БиблиотекаКартинок.НастроитьСписокОтборУстановлен;
	Элементы.СписокОбъектовКонтекстноеМенюПроизвольнаяНастройкаСписка.Картинка = БиблиотекаКартинок.НастроитьСписокОтборУстановлен;
	
	СписокОбъектовДерево = РеквизитФормыВЗначение("СписокОбъектов");
	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	ТаблицаМетаданных.Колонки.Добавить("НеСоответствуетНастройкеСписка", Новый ОписаниеТипов("Булево"));
	Для каждого ЭлементКоллекции Из СписокОбъектовДерево.Колонки Цикл
		ТаблицаМетаданных.Колонки.Добавить(ЭлементКоллекции.Имя, Новый ОписаниеТипов(ЭлементКоллекции.ТипЗначения));
	КонецЦикла;
	
	Идентификатор = 1;
	Для каждого ГруппаОбъектовМетаданных Из СписокОбъектовДерево.Строки Цикл
		Для каждого ОбъектМетаданных Из ГруппаОбъектовМетаданных.Строки Цикл
			НоваяСтрока = ТаблицаМетаданных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектМетаданных);
			НоваяСтрока.Идентификатор = Идентификатор;
			Идентификатор = Идентификатор + 1;
		КонецЦикла; 
	КонецЦикла; 

	Отчеты.НастройкаСписка.ПрименитьНастройкуКСписку(
				ТаблицаМетаданных, 
				АдресСхемыПроизвольнойНастрокиСписокОбъектов,
				ПроизвольнаяНастройкаСпискаСписокОбъектов.ПолучитьНастройки(),
				"Представление");
				
	СтрокиКУдалению = Новый Массив;
	Для каждого ГруппаОбъектовМетаданных Из СписокОбъектовДерево.Строки Цикл
		
		Для каждого ОбъектМетаданных Из ГруппаОбъектовМетаданных.Строки Цикл
			НайденнаяСтрока = ТаблицаМетаданных.Найти(ОбъектМетаданных.Ссылка, "Ссылка");
			Если НайденнаяСтрока.НеСоответствуетНастройкеСписка Тогда
				СтрокиКУдалению.Добавить(ОбъектМетаданных);
				ЕстьСтрокиКУдалению = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	Для каждого ЭлементКоллекции Из СтрокиКУдалению Цикл
		ЭлементКоллекции.Родитель.Строки.Удалить(ЭлементКоллекции);
	КонецЦикла; 
	
	// Удаление пустых групп
	СтрокиКУдалению = Новый Массив;
	Для каждого ГруппаОбъектовМетаданных Из СписокОбъектовДерево.Строки Цикл
		Если ГруппаОбъектовМетаданных.Строки.Количество() = 0 Тогда
			СтрокиКУдалению.Добавить(ГруппаОбъектовМетаданных);
		КонецЕсли;
	КонецЦикла; 
	Для каждого ЭлементКоллекции Из СтрокиКУдалению Цикл
		СписокОбъектовДерево.Строки.Удалить(ЭлементКоллекции);
	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(СписокОбъектовДерево, "СписокОбъектов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяНастройкаСпискаВыбратьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("ВыборНастроек") Тогда
		ПроизвольнаяНастройкаСпискаВыбратьНаСервере(РезультатЗакрытия.КлючНастроек);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроизвольнаяНастройкаСпискаВыбратьНаСервере(Знач КлючНастроек)
	
	Отчеты.НастройкаСписка.ЗагрузитьНастройкиИзХранилища("СправкаОбъектовМетаданных", КлючНастроек, ПроизвольнаяНастройкаСпискаСписокОбъектов);

	ЗаполнитьСписокОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвольнаяНастройкаСпискаСохранитьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("ВыборНастроек") Тогда
		ПроизвольнаяНастройкаСпискаСохранитьНаСервере(РезультатЗакрытия.КлючНастроек);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроизвольнаяНастройкаСпискаСохранитьНаСервере(Знач КлючНастроек)

	Отчеты.НастройкаСписка.СохранитьНастройкиВХранилище("СправкаОбъектовМетаданных", КлючНастроек, ПроизвольнаяНастройкаСпискаСписокОбъектов);
	
КонецПроцедуры

#КонецОбласти

#Область СравнениеСправки

&НаКлиенте
Процедура СравнитьСПровереннойВерсией()
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	
	ДанныеДляСравнения = Версионирование.ПодготовитьДанныеДляСравнения(
								ТекущиеДанные.Ссылка, 
								Неопределено, 
								'000101010000', 
								ПредопределенноеЗначение("Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных"));
								
	Если ДанныеДляСравнения = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Отсутствует проверенная версия'"),, НСтр("ru = 'Сравнение невозможно'"));
		Возврат;
	КонецЕсли;
	
	ДанныеДляСравнения.Вставить("ВариантСправки1", ВариантПроектСправки);
	ДанныеДляСравнения.Вставить("ВариантСправки2", ВариантПроектСправки);
	
	ВерсионированиеКлиент.СравнитьОбъекты(ДанныеДляСравнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВариантыСправки()
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипОбъекта = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВариантов = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из Элементы.ВариантПроектСправки.СписокВыбора Цикл
		Если ЭлементСписка.Значение <> ВариантПроектСправки Тогда
			СписокВариантов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокВариантов.Количество() > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СравнитьВариантыСправкиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВариантов);
	Иначе
		СравнитьВариантыСправкиЗавершение(СписокВариантов[0], Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СравнитьВариантыСправкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	
	ДанныеДляСравнения = Версионирование.ПодготовитьДанныеДляСравнения(
								ТекущиеДанные.Ссылка, 
								'000101010000', 
								'000101010000', 
								ПредопределенноеЗначение("Перечисление.ВидыОбъектов.СправкаОбъектаМетаданных"));
								
	ДанныеДляСравнения.Вставить("ВариантСправки1", ВариантПроектСправки);
	ДанныеДляСравнения.Вставить("ВариантСправки2", ВыбранныйЭлемент.Значение);
	
	ВерсионированиеКлиент.СравнитьОбъекты(ДанныеДляСравнения);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюСравненияВерсий()
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		
		Элементы.СписокОбъектовСравнитьСПровереннойВерсией.Видимость                = Ложь;
		Элементы.СписокОбъектовКонтекстноеМенюСравнитьСПровереннойВерсией.Видимость = Ложь;
		Элементы.СравнитьВариантыСправки.Видимость                                  = Ложь;
		Элементы.СписокОбъектовКонтекстноеМенюСравнитьВариантыСправки.Видимость     = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Цвет объектов не включаемых в справку
	#Область ЦветГиперссылки
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбъектов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектов.ВключатьВСправку");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектов.ТипОбъекта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеактивныхСтрокСписков);
	#КонецОбласти

	// Цвет гиперссылки
	#Область ЦветГиперссылки
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбъектовАвторПоследнегоИзменения.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбъектовДатаПоследнегоИзменения.Имя);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	#КонецОбласти

	// Видимость поля проект
	#Область ВидимостьПоляПроект
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокОбъектовПроект.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПроект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыОтбора()
	
	ПараметрыОтбора = Новый Структура("ОтборПроект,ОтборРазделПроекта,ОтборОтветственный,ИсторияПросмотра,ПоказатьСсылкуДляРедактирования,
	                                  |ОтборСостояниеКонтроля,ОтборНаличиеСправки,ПоказыватьДопРеквизиты");
	
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЭтаФорма);
	ХранилищеНастроекДанныхФорм.Сохранить("СправкаОбъектовМетаданных", "ПараметрыОтбора", ПараметрыОтбора);
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуПоСсылке(Коллекцияобъектов, Ссылка)

	Для каждого ЭлементКоллекции Из Коллекцияобъектов Цикл
		Если ЭлементКоллекции.Ссылка = Ссылка Тогда
			НайденнаяСтрока = ЭлементКоллекции;
		Иначе
			НайденнаяСтрока = НайтиСтрокуПоСсылке(ЭлементКоллекции.ПолучитьЭлементы(), Ссылка);
		КонецЕсли;
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли; 
	КонецЦикла; 

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьСправку()
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ТекущиеДанные.Ссылка));
		ОткрытьФорму("Справочник.ЭлементыСправки.ФормаСписка", ПараметрыФормы,, ТекущиеДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеКонтроляНаСервере(СостояниеКонтроля)
	
	ЗначенияСостояниеКонтроля = ЗначенияСостояниеКонтроля();

	Для Каждого ТекущаяСтрока Из Элементы.СписокОбъектов.ВыделенныеСтроки Цикл
		ТекущиеДанные = СписокОбъектов.НайтиПоИдентификатору(ТекущаяСтрока);
		Если ТекущиеДанные.ТипОбъекта = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КонтрольИзменений.УстановитьСтатусКонтроля(
				ТекущиеДанные.Ссылка, 
				Перечисления.ВидыОбъектов.СправкаОбъектаМетаданных,
				Пользователи.ТекущийПользователь(), 
				Перечисления.СостоянияКонтроляОбъектов[СостояниеКонтроля]);
		
		Если СостояниеКонтроля = "НаКонтроле" Тогда
			ТекущиеДанные.СостояниеКонтроля = ЗначенияСостояниеКонтроля.Проверено;
		ИначеЕсли СостояниеКонтроля = "НеПроверено" Тогда
			ТекущиеДанные.СостояниеКонтроля = ЗначенияСостояниеКонтроля.НеПроверено;
		Иначе
			ТекущиеДанные.СостояниеКонтроля = ЗначенияСостояниеКонтроля.НетКонтроля;
		КонецЕсли;
		
		ТекущиеДанные.СостояниеКонтроляИндексКартинки = ИндексКартинкиСостоянияКонтроля(ТекущиеДанные.СостояниеКонтроля, ЗначенияСостояниеКонтроля);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ЗначенияСостояниеКонтроля()
	
	ЗначенияСостояниеКонтроля = Новый Структура;
	ЗначенияСостояниеКонтроля.Вставить("НетКонтроля", НСтр("ru = ''"));
	ЗначенияСостояниеКонтроля.Вставить("Проверено", НСтр("ru = 'Проверено'"));
	ЗначенияСостояниеКонтроля.Вставить("НеПроверено", НСтр("ru = 'Не проверено'"));
	
	Возврат ЗначенияСостояниеКонтроля;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьВсе()

	СтрокиДерева = СписокОбъектов.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Элементы.СписокОбъектов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе()

	СтрокиДерева = СписокОбъектов.ПолучитьЭлементы();
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		Элементы.СписокОбъектов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОтборПроектПриИзмененииНаСервере()

	ЗаполнитьВыборВариантаСправки();
	ДобавитьДопРеквизитыОбъектовМетаданных();
	ЗаполнитьСписокОбъектов(Истина);

КонецПроцедуры

&НаСервере
Процедура ПоказыватьДопРеквизитыНаСервере()

	ПоказыватьДопРеквизиты = НЕ ПоказыватьДопРеквизиты;
	Элементы.ПоказыватьДопРеквизиты.Пометка = ПоказыватьДопРеквизиты;
	ДобавитьДопРеквизитыОбъектовМетаданных();
	ЗаполнитьСписокОбъектов(Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭлементСправкиПоИД(СсылкаДляРедактирования)

	Возврат Справочники.ЭлементыСправки.ПолучитьСсылку(Новый УникальныйИдентификатор(СсылкаДляРедактирования));

КонецФункции

&НаКлиенте
Процедура ОткрытьОбъектМетаданных()

	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ТипОбъекта = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПоказатьЗначение(,ТекущиеДанные.Ссылка);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

