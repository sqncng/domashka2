&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПолноправныйПользователь = РольДоступна("ПолныеПрава");
	Если Параметры.Свойство("ЗагрузкаИзмененийИзФормыВетки") Тогда
		ЗагрузкаИзмененийИзФормыВетки = Параметры.ЗагрузкаИзмененийИзФормыВетки;
	КонецЕсли;	
	
	Если Параметры.Свойство("АдресОбъектыМетаданных") Тогда
		ОбъектыМетаданных.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресОбъектыМетаданных));
	КонецЕсли; 
	
	СисИнфо = Новый СистемнаяИнформация;
	Элементы.ВерсияПлатформы.ПодсказкаВвода = СисИнфо.ВерсияПриложения;
	Элементы.ВерсияПлатформы.СписокВыбора.Добавить("", НСтр("ru = '<версия по умолчанию>'"));
	
	Для каждого ДоступнаяВерсия Из ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы() Цикл
	
		Элементы.ВерсияПлатформы.СписокВыбора.Добавить(ДоступнаяВерсия);
		
	КонецЦикла; 
	
	Если Параметры.Свойство("Проект") Тогда
		Проект = Параметры.Проект;
		РежимРазработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "РежимРазработки");
		ЭтоGitРепозиторий = РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории;
	Иначе 
		Проект = Проекты.ПроектПоУмолчанию();
	КонецЕсли;
	
	ЗагрузитьНастройки(Проект);
	
	Если Параметры.Свойство("Ветка") Тогда
		КаталогХранилища = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ветка, "Имя");
	КонецЕсли;	
	
	Если Параметры.Свойство("Версия") Тогда
		Версия = Параметры.Версия;
		ПриИзмененииВерсииСервер();
	КонецЕсли;
	
	ПоясненияПодключенияКИнформационнойБазе = ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы);
	
	Если Параметры.Свойство("Ветка") Тогда
		Ветка = Параметры.Ветка;
		Элементы.Проект.ТолькоПросмотр = Истина;
		Элементы.Ветка.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	ПроверитьВыполнениеЗагрузкиУстановитьДоступнеостьКоманд();
	
	ОбновитьДоступныеВерсииПроекта();
	
	УстановитьВидимостьЭлементов();
	
	УстановитьЗначениеИДоступностьНастройкиОбновленияИзХранилища();
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ТехническийПроект) Тогда
		
		УдалитьНастройки(Настройки, Истина);
			
		НастройкиПоТехническомуПроекту = Настройки.Получить(ТехническийПроект);
		Если ТипЗнч(НастройкиПоТехническомуПроекту) = Тип("Структура") Тогда
			
			Если НастройкиПоТехническомуПроекту.Свойство("ОбновлятьКонфигурациюИзХранилища") Тогда
				ОбновлятьКонфигурациюИзХранилища = НастройкиПоТехническомуПроекту["ОбновлятьКонфигурациюИзХранилища"];
			КонецЕсли;
			
			Если НастройкиПоТехническомуПроекту.Свойство("КаталогИнформационнойБазы") Тогда
				КаталогИнформационнойБазы = НастройкиПоТехническомуПроекту["КаталогИнформационнойБазы"];
			КонецЕсли;
			
			Если НастройкиПоТехническомуПроекту.Свойство("ИмяПользователяИнформационнойБазы") Тогда
				ИмяПользователяИнформационнойБазы = НастройкиПоТехническомуПроекту["ИмяПользователяИнформационнойБазы"];
			КонецЕсли;
			
			Если НастройкиПоТехническомуПроекту.Свойство("ПарольПользователяИнформационнойБазы") Тогда
				ПарольПользователяИнформационнойБазы = НастройкиПоТехническомуПроекту["ПарольПользователяИнформационнойБазы"];
			КонецЕсли;
			
			Если НастройкиПоТехническомуПроекту.Свойство("МестоЗагрузки") Тогда
				МестоЗагрузки = НастройкиПоТехническомуПроекту.МестоЗагрузки;
			КонецЕсли;
			
			Если НастройкиПоТехническомуПроекту.Свойство("ВерсияПлатформы") Тогда
				ВерсияПлатформы = НастройкиПоТехническомуПроекту.ВерсияПлатформы;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КаталогИнформационнойБазы) Тогда
				ПоясненияПодключенияКИнформационнойБазе = ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы);
				Если ЗначениеЗаполнено(КаталогХранилища) И НЕ ПустаяСтрока(ПоясненияПодключенияКИнформационнойБазе) Тогда
					МестоЗагрузки = 1;
					ПоясненияПодключенияКХранилищуТехПроекта = НСтр("ru = 'Все новые метаданные должны быть помещены в хранилище тех.проекта.'");
					ПоясненияПодключенияКИнформационнойБазе = "";
					ОбновлятьКонфигурациюИзХранилища = Истина;
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		УдалитьНастройки(Настройки, Ложь);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастройкаОбновлятьКонфигурациюИзХранилища = Настройки.Получить("ОбновлятьКонфигурациюИзХранилища");
	
	УстановитьЗначениеИДоступностьНастройкиОбновленияИзХранилища();
	
	Если Не ЗначениеЗаполнено(КаталогИнформационнойБазы) Тогда
		КаталогИнформационнойБазы = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ТехническийПроект, "КаталогБазыРазработки");	
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ИмяПользователяИнформационнойБазы) Тогда
		ИмяПользователяИнформационнойБазы = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ТехническийПроект, "ИмяПользователяБазыРазработки");
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПарольПользователяИнформационнойБазы) Тогда
		ПарольПользователяИнформационнойБазы = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ТехническийПроект, "ПарольПользователяБазыРазработки");
	КонецЕсли; 
	
	ИсторияВвода = Настройки.Получить("ИсторияВводаИмяПользователя");
	Если ИсторияВвода <> Неопределено Тогда
		СписокВыбора = Элементы.ИмяПользователяИнформационнойБазыРазработкиТехническогоПроекта.СписокВыбора;
		СписокВыбора.ЗагрузитьЗначения(ИсторияВвода);
	КонецЕсли; 
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ТехническийПроект) Тогда
		
		УдалитьНастройки(Настройки, Истина);
		
		СтруктураНастроекПоТехническомуПроекту = Новый Структура;
		СтруктураНастроекПоТехническомуПроекту.Вставить("ОбновлятьКонфигурациюИзХранилища", ОбновлятьКонфигурациюИзХранилища);
		СтруктураНастроекПоТехническомуПроекту.Вставить("КаталогИнформационнойБазы", КаталогИнформационнойБазы);
		СтруктураНастроекПоТехническомуПроекту.Вставить("ИмяПользователяИнформационнойБазы", ИмяПользователяИнформационнойБазы);
		СтруктураНастроекПоТехническомуПроекту.Вставить("ПарольПользователяИнформационнойБазы", ПарольПользователяИнформационнойБазы);
		СтруктураНастроекПоТехническомуПроекту.Вставить("МестоЗагрузки", МестоЗагрузки);
		СтруктураНастроекПоТехническомуПроекту.Вставить("ВерсияПлатформы", ВерсияПлатформы);
		
		Настройки.Вставить(ТехническийПроект, СтруктураНастроекПоТехническомуПроекту);
		
	Иначе
		УдалитьНастройки(Настройки, Ложь);
	КонецЕсли;
	
	ИсторияВвода = Элементы.ИмяПользователяИнформационнойБазыРазработкиТехническогоПроекта.СписокВыбора.ВыгрузитьЗначения();
	Если НЕ ПустаяСтрока(ИмяПользователяИнформационнойБазы) И ИсторияВвода.Найти(ИмяПользователяИнформационнойБазы) = Неопределено Тогда
		ИсторияВвода.Вставить(0, ИмяПользователяИнформационнойБазы);
	КонецЕсли;
	Если ИсторияВвода.Количество() > 5 Тогда
		Для Сч = 6 По ИсторияВвода.Количество() Цикл
			ИсторияВвода.Удалить(5);
		КонецЦикла; 
	КонецЕсли; 
	Настройки.Вставить("ИсторияВводаИмяПользователя", ИсторияВвода);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ЭтоGitРепозиторий И МестоЗагрузки = 0 И НЕ ЗначениеЗаполнено(КаталогИнформационнойБазы) Тогда
		ТекстСообщения = НСтр("ru='В настройках загрузки не указан каталог информационной базы'");
		ОбщегоНазначенияКЛиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если ОбновлятьКонфигурациюИзХранилища Тогда
		Если НЕ ЗначениеЗаполнено(КаталогХранилища) Тогда
			ТекстСообщения = НСтр("ru='В настройках загрузки не указан каталог хранилища'");
			ОбщегоНазначенияКЛиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИмяПользователяХранилища");
	КонецЕсли;
	
	Если НЕ УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеОбъектовМетаданных", Проект) Тогда
		ТекстСообщения = НСтр("ru='Недостаточно прав для загрузки метаданных по указанному проекту'");
		ОбщегоНазначенияКЛиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗагрузкаИзмененийИзФормыВетки Тогда
		Элементы.МестоЗагрузкиБаза.Видимость = Ложь;
		Элементы.ПодключениеКИнформационнойБазеРазработкиТехническогоПроекта.Видимость = Ложь;
		ОбновлятьКонфигурациюИзХранилища = Истина;
		МестоЗагрузки = 1;
		Элементы.ИмяПользователяХранилища.Доступность = Истина;
		Элементы.ПарольПользователяХранилища.Доступность = Истина;
		Элементы.ОбновлятьКонфигурациюИзХранилища.Видимость = Ложь;
		Элементы.МестоЗагрузкиХранилище.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогИнформационнойБазыРазработкиТехническогоПроектаПриИзменении(Элемент)
	
	ПоясненияПодключенияКИнформационнойБазе = ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИнформационнойБазыРазработкиТехническогоПроектаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если НЕ ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИнформационнойБазы) Тогда
		ДиалогВыбораФайла.Каталог   = КаталогИнформационнойБазы;
	КонецЕсли; 
	ДиалогВыбораФайла.Заголовок = "Выбор каталога информационной базы";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогИнформационнойБазы = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
	ПоясненияПодключенияКИнформационнойБазе = ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПриИзмененииПроектаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКонфигурациюИзХранилищаПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоЗагрузкиПриИзменении(Элемент)
	
	Если МестоЗагрузки = 1 Тогда
		ОбновлятьКонфигурациюИзХранилища = Истина;
		ПоясненияПодключенияКХранилищуТехПроекта = НСтр("ru = 'Все новые метаданные должны быть помещены в хранилище тех.проекта.'");
		ПоясненияПодключенияКИнформационнойБазе = "";
	Иначе
		ПоясненияПодключенияКИнформационнойБазе = ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы);
		ПоясненияПодключенияКХранилищуТехПроекта = "";
	КонецЕсли;
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПриИзменении(Элемент)
	
	ПриИзмененииВерсииСервер();
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВерсииСервер();
	
	ЭтоВерсияОсновногоХранилища = ЭтоВерсияОсновногоХранилища(Версия);
	
	Если Не ЗначениеЗаполнено(Версия) ИЛИ ЭтоВерсияОсновногоХранилища Тогда
		ПриИзмененииПроектаСервер();
	Иначе 
		ЗагрузитьНастройки(Версия);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьМетаданныеИОбработчики(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ветка) И ВеткаРазрабатываетсяВGit(Ветка) Тогда
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Проект", Проект);
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Ветка", Ветка);
		ПараметрыЗадания.Вставить("ДопПараметры", ДопПараметры);
	Иначе	
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Проект", Проект);
		ПараметрыЗадания.Вставить("ВерсияПроекта", Версия);
		ПараметрыЗадания.Вставить("ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных", ОбновлятьКонфигурациюИзХранилища);
		ПараметрыЗадания.Вставить("ВерсияПлатформы", ВерсияПлатформы);
		ПараметрыЗадания.Вставить("ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем", ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
		
		Если ЗначениеЗаполнено(ТехническийПроект) ИЛИ ЗначениеЗаполнено(Ветка) Тогда
		
			ПараметрыЗадания.Вставить("ТехническийПроект", ТехническийПроект);
			ПараметрыЗадания.Вставить("Ветка", Ветка);
			Если МестоЗагрузки = 0 Тогда
			
				ПараметрыЗадания.Вставить("КаталогИБДляЗагрузкиМетаданных", КаталогИнформационнойБазы);
				ПараметрыЗадания.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных", ИмяПользователяИнформационнойБазы);
				ПараметрыЗадания.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных", ПарольПользователяИнформационнойБазы);
				ПараметрыЗадания.Вставить("СоздаватьНовуюИБИзХранилища", Ложь);
			
			КонецЕсли; 
			
			Если ОбновлятьКонфигурациюИзХранилища Тогда
				
				ПараметрыЗадания.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", ИмяПользователяХранилища);
				ПараметрыЗадания.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", ПарольПользователяХранилища);
			
			КонецЕсли; 
			
		КонецЕсли; 
	КонецЕсли;	
	
	РезультатРасчета = ЗагрузитьМетаданныеИОбработчикиНаСервере(ПараметрыЗадания);
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		ЗагрузитьМетаданныеЗавершение();
	Иначе
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМетаданные(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Проект", Проект);
	ПараметрыЗадания.Вставить("ВерсияПроекта", Версия);
	ПараметрыЗадания.Вставить("ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных", ОбновлятьКонфигурациюИзХранилища);
	ПараметрыЗадания.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	
	РезультатРасчета = ЗагрузитьМетаданныеНаСервере(ПараметрыЗадания);
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		ЗагрузитьМетаданныеЗавершение();
	Иначе
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработчикиОбновления(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Проект", Проект);
	ПараметрыЗадания.Вставить("ВерсияПроекта", Версия);
	ПараметрыЗадания.Вставить("ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных", ОбновлятьКонфигурациюИзХранилища);
	ПараметрыЗадания.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	ПараметрыЗадания.Вставить("ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем", ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем);
	
	РезультатРасчета = ЗагрузитьОбработчикиНаСервере(ПараметрыЗадания);
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		ЗагрузитьОбработчикиОбновленияЗавершение();
	Иначе
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища = РезультатРасчета.АдресХранилища;
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;


КонецПроцедуры
 
&НаКлиенте
Процедура ВыбратьБазуИзСписка(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьБазуИзСпискаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияСППРКлиент.ВыбратьБазуИзСписка(ОписаниеОповещения, УникальныйИдентификатор, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПутьКВерсиямПлатформыНаСервере(Команда)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.ОбщиеНастройки");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьНастройки(Ссылка)
	
	СтруктураНастроек = РаботаСОбъектамиМетаданных.НастройкиПодключенияКИнформационнойБазеИХранилищу(Ссылка);
	
	СтруктураНастроек.Свойство("КаталогИнформационнойБазы",            КаталогИнформационнойБазы);
	СтруктураНастроек.Свойство("ИмяПользователяИнформационнойБазы",    ИмяПользователяИнформационнойБазы);
	СтруктураНастроек.Свойство("ПарольПользователяИнформационнойБазы", ПарольПользователяИнформационнойБазы);
		
	СтруктураНастроек.Свойство("КаталогХранилища",                     КаталогХранилища);
	СтруктураНастроек.Свойство("ИмяПользователяХранилища",             ИмяПользователяХранилища);
	СтруктураНастроек.Свойство("ПарольПользователяХранилища",          ПарольПользователяХранилища);
	СтруктураНастроек.Свойство("ВерсияПлатформы",                      ВерсияПлатформы);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступныеВерсииПроекта()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииПроекта.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|ГДЕ
		|	ВерсииПроекта.Владелец = &Проект
		|	И ВерсииПроекта.Ветка.РежимРазработки = ЗНАЧЕНИЕ(Перечисление.РежимРазработки.ВХранилище)
		|	И ВерсииПроекта.Ветка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена)
		|	И (ВерсииПроекта.ДатаПрекращенияПоддержки >= &ТекущаяДата
		|			ИЛИ ВерсииПроекта.ДатаПрекращенияПоддержки = ДАТАВРЕМЯ(1, 1, 1))";
	
	Запрос.УстановитьПараметр("Проект",      Проект);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ДоступныеВерсии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Элементы.Версия.СписокВыбора.ЗагрузитьЗначения(ДоступныеВерсии);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНастройки()
	
	КаталогИнформационнойБазы = "";
	ИмяПользователяИнформационнойБазы = "";
	ПарольПользователяИнформационнойБазы = "";
	ПоясненияПодключенияКИнформационнойБазе = "";
	
	КаталогХранилища = "";
	ИмяПользователяХранилища = "";
	ПарольПользователяХранилища = "";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ВестиОбработчики = ПолучитьФункциональнуюОпцию("ВестиОписанияОбработчиковОбновленияИнформационнойБазы", Новый Структура("Проект", Проект));
	ЗагрузкаПоТехническомуПроекту = ЗначениеЗаполнено(ТехническийПроект);
	
	Если ВестиОбработчики
		И Не ЗагрузкаПоТехническомуПроекту
		И ЗначениеЗаполнено(Версия)Тогда
		ПоддерживаетсяРасширенноеОписаниеОбработчиков = Справочники.ВерсииПроекта.ПоддерживаетсяРасширенноеОписаниеОбработчиков(Версия);
	Иначе
		ПоддерживаетсяРасширенноеОписаниеОбработчиков = Ложь;
	КонецЕсли;
	
	Элементы.Группа2.Видимость = НЕ ЭтоGitРепозиторий;
	Элементы.ГруппаВерсияПлатформы.Видимость = НЕ ЭтоGitРепозиторий;
	Элементы.ПодключениеКИнформационнойБазеПроекта.Видимость = НЕ ЗагрузкаПоТехническомуПроекту И НЕ ЭтоGitРепозиторий И НЕ ЗагрузкаИзмененийИзФормыВетки;
	Элементы.ПодключениеКИнформационнойБазеРазработкиТехническогоПроекта.Видимость = ЗагрузкаПоТехническомуПроекту ИЛИ ЗагрузкаИзмененийИзФормыВетки;
	
	Элементы.ГруппаВыборМестаЗагрузкиТехПроекта.Видимость = ЗагрузкаПоТехническомуПроекту ИЛИ ЗагрузкаИзмененийИзФормыВетки;
	Элементы.ИмяПарольПользователяХранилища.Видимость     = ЗагрузкаПоТехническомуПроекту ИЛИ ЗагрузкаИзмененийИзФормыВетки; 
	
	Элементы.НастроитьПутьКВерсиямПлатформыНаСервере.Видимость = ПолноправныйПользователь;
	
	ВерсияЗаполнена = ЗначениеЗаполнено(Версия);
	
	ТолькоОбработчики = Параметры.Режим = "ТолькоОбработчики";
	
	Элементы.ФормаЗагрузитьМетаданные.Видимость = Не ТолькоОбработчики
	                                            И (ЗагрузкаПоТехническомуПроекту ИЛИ ЭтоВерсияОсновногоХранилища ИЛИ Не ВерсияЗаполнена);
	Элементы.ФормаЗагрузитьТолькоМетаданные.Видимость = Не ТолькоОбработчики И ВестиОбработчики И Не ЗагрузкаПоТехническомуПроекту
	                                                  И (ЭтоВерсияОсновногоХранилища ИЛИ Не ВерсияЗаполнена) и Не ЭтоGitРепозиторий;
	Элементы.ФормаЗагрузитьОбработчикиОбновления.Видимость = ВестиОбработчики И Не ЗагрузкаПоТехническомуПроекту И Не ЭтоGitРепозиторий;
	
	Если ВестиОбработчики И ВерсияЗаполнена И Не ЭтоВерсияОсновногоХранилища И НЕ ЗагрузкаИзмененийИзФормыВетки Тогда
		Элементы.ГруппаПроектВерсия.РасширеннаяПодсказка.Заголовок 
			= НСтр("ru = 'Выбрана неосновная версия проекта, возможна загрузка только обработчиков обновления'");
	ИначеЕсли ВестиОбработчики И Не ВерсияЗаполнена И Не ЗагрузкаПоТехническомуПроекту И НЕ ЗагрузкаИзмененийИзФормыВетки Тогда
		Элементы.ГруппаПроектВерсия.РасширеннаяПодсказка.Заголовок
			= НСтр("ru = 'Версия не указана, обработчики обновления будут загружены из основного и всех поддерживаемых версий'");
	Иначе 
		Элементы.ГруппаПроектВерсия.РасширеннаяПодсказка.Заголовок = " ";
	КонецЕсли; 

	Если ЗначениеЗаполнено(Ветка) Тогда
		Элементы.Ветка.Видимость = Истина;
		Элементы.Версия.Видимость = Ложь;
	Иначе	
		Элементы.Версия.Видимость = Не ЗагрузкаПоТехническомуПроекту;
		Элементы.Ветка.Видимость = Ложь;
	КонецЕсли;	
	
	Если Не ТолькоОбработчики И (ЗагрузкаПоТехническомуПроекту ИЛИ ЭтоВерсияОсновногоХранилища ИЛИ Не ВерсияЗаполнена) Тогда
		Элементы.ФормаЗагрузитьМетаданные.КнопкаПоУмолчанию = Истина;
	Иначе 
		Элементы.ФормаЗагрузитьОбработчикиОбновления.КнопкаПоУмолчанию = Истина;
	КонецЕсли; 
	
	Элементы.ФормаЗагрузитьМетаданные.Заголовок 
		= ?(ЗагрузкаПоТехническомуПроекту ИЛИ ЭтоGitРепозиторий ИЛИ Не ВестиОбработчики, НСтр("ru = 'Загрузить метаданные'"), 
		                                                                   НСтр("ru = 'Загрузить метаданные и обработчики'"));
	Элементы.ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем.Видимость = ПоддерживаетсяРасширенноеОписаниеОбработчиков;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНастройки(Настройки, ЗагрузкаПоТехническомуПроекту)
	
	Если ЗагрузкаПоТехническомуПроекту Тогда
		Если Настройки.Получить("ОбновлятьКонфигурациюИзХранилища") <> Неопределено Тогда
			Настройки.Удалить("ОбновлятьКонфигурациюИзХранилища");
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки.Получить("КаталогИнформационнойБазы") <> Неопределено Тогда
		Настройки.Удалить("КаталогИнформационнойБазы");
	КонецЕсли;
	
	Если Настройки.Получить("ИмяПользователяИнформационнойБазы") <> Неопределено Тогда
		Настройки.Удалить("ИмяПользователяИнформационнойБазы");
	КонецЕсли;
	
	Если Настройки.Получить("ПарольПользователяИнформационнойБазы") <> Неопределено Тогда
		Настройки.Удалить("ПарольПользователяИнформационнойБазы");
	КонецЕсли;
	
	Если Настройки.Получить("ВерсияПлатформы") <> Неопределено Тогда
		Настройки.Удалить("ВерсияПлатформы");
	КонецЕсли;
	
	Если Настройки.Получить("МестоЗагрузки") <> Неопределено Тогда
		Настройки.Удалить("МестоЗагрузки");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроектаСервер()
	
	Если ЗначениеЗаполнено(Проект) Тогда
		ЗагрузитьНастройки(Проект);
		ПоясненияПодключенияКИнформационнойБазе = ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы);
		ПроверитьВыполнениеЗагрузкиУстановитьДоступнеостьКоманд();
	Иначе
		ОчиститьНастройки();
	КонецЕсли;
	
	ОбновитьДоступныеВерсииПроекта();
	
	УстановитьЗначениеИДоступностьНастройкиОбновленияИзХранилища();
	
	УстановитьВидимостьЭлементов();
	
	УправлениеДоступностью(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеИДоступностьНастройкиОбновленияИзХранилища()
	
	Если ЗначениеЗаполнено(Проект) Тогда
		НастройкаПроектаОбновлятьКонфигурациюИзХранилища = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных");
	Иначе
		НастройкаПроектаОбновлятьКонфигурациюИзХранилища = Истина;
	КонецЕсли;
	
	Элементы.ОбновлятьКонфигурациюИзХранилища.Доступность = ПолноправныйПользователь
											ИЛИ ЗначениеЗаполнено(ТехническийПроект)
											ИЛИ НЕ НастройкаПроектаОбновлятьКонфигурациюИзХранилища;
	
	Если НЕ ПолноправныйПользователь 
		И НЕ ЗначениеЗаполнено (ТехническийПроект) 
		И НастройкаПроектаОбновлятьКонфигурациюИзХранилища Тогда
		ОбновлятьКонфигурациюИзХранилища = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьМетаданныеИОбработчикиНаСервере(ПараметрыЗадания)

	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загрузка измененных метаданных из ветки %1'"),
		Ветка);
		
	Если ЗначениеЗаполнено(Ветка) И ВеткаРазрабатываетсяВGit(Ветка) Тогда
		ПараметрыЗадания.Вставить("ЗагрузкаВВетку", Истина);
		
		ТекСообщения = НСтр("ru='Пользователь запустил загрузку изменений метаданных по ветке.'");
		ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
									УровеньЖурналаРегистрации.Информация,,Ветка,ТекСообщения)
									;
		РезультатРасчета = ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ЗагрузкаМетаданных.ЗагрузитьИзмененияВВетках",
			ПараметрыЗадания,
			НаименованиеЗадания,
			Строка(Проект.УникальныйИдентификатор()));
	Иначе	
		Если НЕ ТехническийПроект.Пустая() ИЛИ ЗначениеЗаполнено(Ветка) Тогда
			Если Не ЗначениеЗаполнено(ПараметрыЗадания.ВерсияПлатформы) Тогда
				ПараметрыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "ВерсияПлатформы, ВерсияПлатформыХранилищаТехническихПроектов");
				Если ЗначениеЗаполнено(ПараметрыПроекта.ВерсияПлатформыХранилищаТехническихПроектов) Тогда
					ПараметрыЗадания.ВерсияПлатформы = ПараметрыПроекта.ВерсияПлатформыХранилищаТехническихПроектов;
				ИначеЕсли ЗначениеЗаполнено(ПараметрыПроекта.ВерсияПлатформы) Тогда
					ПараметрыЗадания.ВерсияПлатформы = ПараметрыПроекта.ВерсияПлатформы;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Ветка) Тогда
				ПараметрыЗадания.Вставить("ЗагрузитьИзмененияМетаданныхИзХранилища", Истина);
				НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка метаданных ветки %1'"),
					Ветка);
			Иначе	
				НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Загрузка метаданных техпроекта %1'"),
					ТехническийПроект);
			КонецЕсли;	
				
			ПараметрыЗадания.Вставить("ОбъектыМетаданныхТехПроекта", Новый ХранилищеЗначения(ОбъектыМетаданных.Выгрузить()));
			ПараметрыЗадания.Вставить("Ветка", Ветка);
			ПараметрыЗадания.Вставить("ВеткаИсточник", Ветка);
			
			ТекСообщения = НСтр("ru='Пользователь запустил загрузку изменений метаданных по ветке.'");
			ЗаписьЖурналаРегистрации("ЗагрузитьИзмененияВВетках",
										УровеньЖурналаРегистрации.Информация,,Ветка,ТекСообщения);
			
			РезультатРасчета = ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"ЗагрузкаМетаданных.ЗагрузитьМетаданныеТехническогоПроекта",
				ПараметрыЗадания,
				НаименованиеЗадания,
				Строка(ТехническийПроект.УникальныйИдентификатор()));

		Иначе
			
			ПараметрыЗадания.Вставить("Режим", "МетаданныеИОбработчики");
			ПараметрыЗадания.Вставить("ВеткаИсточник", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗадания.Проект, "Ветка"));
			НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка метаданных и обработчиков проекта %1'"),
				Проект);
			
			РезультатРасчета = ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"ЗагрузкаМетаданных.ЗагрузитьМетаданныеИОбработчикиОбновленияПроекта",
				ПараметрыЗадания,
				НаименованиеЗадания,
				Строка(Проект.УникальныйИдентификатор()));

		КонецЕсли;
	КонецЕсли;	

	Возврат РезультатРасчета;

КонецФункции

&НаСервере
Функция ЗагрузитьМетаданныеНаСервере(ПараметрыЗадания)
	
	ПараметрыЗадания.Вставить("Режим", "ТолькоМетаданные");
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загрузка метаданных проекта %1'"),
		Проект);
	
	РезультатРасчета = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ЗагрузкаМетаданных.ЗагрузитьМетаданныеИОбработчикиОбновленияПроекта",
		ПараметрыЗадания,
		НаименованиеЗадания,
		Строка(Проект.УникальныйИдентификатор()));

	Возврат РезультатРасчета;
	
КонецФункции

&НаСервере
Функция ЗагрузитьОбработчикиНаСервере(ПараметрыЗадания)
	
	ПараметрыЗадания.Вставить("Режим", "ТолькоОбработчики");
	
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Загрузка обработчиков обновления проекта %1'"),
		Проект);
	
	РезультатРасчета = ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ЗагрузкаМетаданных.ЗагрузитьМетаданныеИОбработчикиОбновленияПроекта",
		ПараметрыЗадания,
		НаименованиеЗадания,
		Строка(Проект.УникальныйИдентификатор()));
	
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьМетаданныеЗавершение()
	
	Если ЗначениеЗаполнено(ТехническийПроект) Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ТехническийПроект", ТехническийПроект);
		ПараметрыОповещения.Вставить("ИмяПользователяХранилища", ИмяПользователяХранилища);
		ПараметрыОповещения.Вставить("ПарольПользователяХранилища", ПарольПользователяХранилища);
		ПараметрыОповещения.Вставить("АдресОбъектыМетаданных", АдресХранилища);
		
		Оповестить("ЗагрузкаМетаданныхЗавершена", ПараметрыОповещения, ЭтаФорма);
	
	КонецЕсли; 
	
	ТекстСообщения = НСтр("ru='Загрузка метаданных завершена'");
	ПоказатьПредупреждение(Неопределено, ТекстСообщения);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработчикиОбновленияЗавершение()
	
	ТекстСообщения = НСтр("ru='Загрузка обработчиков обновления завершена'");
	ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ЗагрузитьМетаданныеЗавершение();
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
					
			КонецЕсли;
				
		Иначе
			
			Если ПроверитьВыполнениеЗагрузкиУстановитьДоступнеостьКоманд() Тогда
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);	
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()

	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБазуИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	КаталогИнформационнойБазы = РезультатЗакрытия.КаталогИБ;
	
	ПоясненияПодключенияКИнформационнойБазе = ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	Если НЕ ЗначениеЗаполнено(Форма.КаталогХранилища) Тогда
		Форма.ОбновлятьКонфигурациюИзХранилища = Ложь;
		Форма.Элементы.ОбновлятьКонфигурациюИзХранилища.Доступность = Ложь;
		
		Форма.Элементы.КаталогХранилища.Доступность = Ложь;
		Если НЕ Форма.ТехническийПроект.Пустая() Тогда
			Форма.Элементы.ОбновлятьКонфигурациюИзХранилища.Заголовок = НСтр("ru = 'Обновить конфигурацию из хранилища перед загрузкой (недоступно, т.к. в тех. проекте не указан каталог хранилища)'");
			Форма.МестоЗагрузки = 0;
			Форма.Элементы.МестоЗагрузкиБаза.Доступность = Ложь;
			Форма.Элементы.МестоЗагрузкиХранилище.Доступность = Ложь;
		Иначе
			Форма.Элементы.ОбновлятьКонфигурациюИзХранилища.Заголовок = НСтр("ru = 'Обновить конфигурацию из хранилища перед загрузкой (недоступно, т.к. в проекте не указан каталог хранилища)'");
		КонецЕсли;
	Иначе
		Форма.Элементы.ОбновлятьКонфигурациюИзХранилища.Доступность = Истина;
		Форма.Элементы.КаталогХранилища.Доступность = Истина;
		Форма.Элементы.ОбновлятьКонфигурациюИзХранилища.Заголовок = НСтр("ru = 'Обновить конфигурацию из хранилища перед загрузкой'");
	КонецЕсли;
	
	Форма.Элементы.ИмяПользователяХранилища.Доступность = Форма.ОбновлятьКонфигурациюИзХранилища;
	Форма.Элементы.ПарольПользователяХранилища.Доступность = Форма.ОбновлятьКонфигурациюИзХранилища;
	
	Если Форма.МестоЗагрузки = 1 Тогда
	
		Форма.Элементы.ПодключениеКХранилищу.Доступность = Истина;
		Форма.Элементы.ОбновлятьКонфигурациюИзХранилища.Доступность = Ложь;
		Форма.Элементы.ПодключениеКИнформационнойБазеРазработкиТехническогоПроекта.Доступность = Ложь;
	
	Иначе
	
		Форма.Элементы.ПодключениеКИнформационнойБазеРазработкиТехническогоПроекта.Доступность = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПоясненияПодключенияКИнформационнойБазе(КаталогИнформационнойБазы)
	
	Если ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(КаталогИнформационнойБазы)
		ИЛИ НЕ ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИнформационнойБазы) Тогда
	
		Возврат "";
	
	КонецЕсли; 
	
	Файл = Новый Файл(КаталогИнформационнойБазы);
	Если Файл.Существует() Тогда
	
		Возврат "";
	
	Иначе
	
		Возврат НСтр("ru = 'Информационная база не доступна для сервера СППР. Загрузка не возможна.'")
	
	КонецЕсли; 

КонецФункции 

&НаСервере
Функция ПроверитьВыполнениеЗагрузкиУстановитьДоступнеостьКоманд()
	
	ВыполняемоеЗадание = ВыполняемоеЗаданиеЗагрузки(Проект, ТехническийПроект);
	
	Элементы.ФормаЗагрузитьМетаданные.Доступность = Истина;
	Элементы.ФормаЗагрузитьТолькоМетаданные.Доступность = Истина;
	Элементы.ФормаЗагрузитьОбработчикиОбновления.Доступность = Истина;
	
	Если ЗначениеЗаполнено(КаталогХранилища) И ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогХранилища) Тогда
		
		Файл = Новый Файл(КаталогХранилища);
		Если НЕ Файл.Существует() Тогда
			ПояснениеПодключенияКХранилищуПроекта = НСтр("ru = 'Файловое хранилище конфигураций недоступно для сервера СППР. Обновление ИБ невозможно.'");
			Возврат ВыполняемоеЗадание <> Неопределено;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ВыполняемоеЗадание <> Неопределено Тогда
	
		ПояснениеПодключенияКХранилищуПроекта = СтрШаблон(НСтр("ru = 'Выполняется задание по загрузке метаданных с %1. Повторный запуск невозможен.'"), ВыполняемоеЗадание.Начало);
		
		Элементы.ФормаЗагрузитьМетаданные.Доступность = Ложь;
		Элементы.ФормаЗагрузитьТолькоМетаданные.Доступность = Ложь;
		Элементы.ФормаЗагрузитьОбработчикиОбновления.Доступность = Ложь;
	Иначе
		ПояснениеПодключенияКХранилищуПроекта = "";
	КонецЕсли; 
	
	Возврат ВыполняемоеЗадание <> Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполняемоеЗаданиеЗагрузки(Проект, ТехническийПроект)

	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("Состояние ", СостояниеФоновогоЗадания.Активно);
	
	Если ЗначениеЗаполнено(ТехническийПроект) Тогда
		Отбор.Вставить("Ключ", Строка(ТехническийПроект.УникальныйИдентификатор()));
	Иначе
		Отбор.Вставить("Ключ", Строка(Проект.УникальныйИдентификатор()));
	КонецЕсли; 
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если МассивЗаданий.Количество() > 0 Тогда
		Возврат МассивЗаданий[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоВерсияОсновногоХранилища(Версия)
	
	Если ЗначениеЗаполнено(Версия) Тогда
		ВеткаТип = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Версия, "Ветка.Тип");
		ЭтоВерсияОсновногоХранилища = ВеткаТип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта;
		Возврат ЭтоВерсияОсновногоХранилища;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, Знач Параметры,
	Знач НаименованиеЗадания = "", Знач КлючФоновогоЗадания, ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	Если Параметры.Свойство("ЗагрузкаВВетку") И Параметры.ЗагрузкаВВетку Тогда
		ПараметрыЭкспортнойПроцедуры = Новый Массив;
		ПараметрыЭкспортнойПроцедуры.Добавить(Параметры.Проект);
		ПараметрыЭкспортнойПроцедуры.Добавить(Параметры.ДопПараметры);
	Иначе	
		ПараметрыЭкспортнойПроцедуры = Новый Массив;
		ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	КонецЕсли;	
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ЗапущеноЗаданий = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки()
		Или ЗапущеноЗаданий > 0 Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
				
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,	ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
		
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
		Результат.ЗаданиеВыполнено = ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагружатьИнформациюОбОбработчикахРазрабатываемыхПодсистемПриИзменении(Элемент)
	Если ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем Тогда
		ТекстВопроса = НСтр("ru = 'Обычно расширеная информация об обработчиках заполняется в СППР и выгружается в код конфигурации, поэтому по умолчанию эта информация из конфигурации не загружается. Вы действительно хотите загрузить эту информацию из кода?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагружатьИнформациюОбОбработчикахРазрабатываемыхПодсистемПриИзмененииЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьИнформациюОбОбработчикахРазрабатываемыхПодсистемПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		ЗагружатьРасширеннуюИнформациюОбОбработчикахРазрабатываемыхПодсистем = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВеткаРазрабатываетсяВGit(Ветка)
	РежимРазработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка,"РежимРазработки");
	Если РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
		Возврат Истина;
	КонецЕсли;	       
	
	Возврат Ложь;
КонецФункции	

#КонецОбласти
