
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	ОбработатьПереданныеПараметры();
	СформироватьПредставлениеТекущегоСотрудникаПодбора(ЭтотОбъект);
	СформироватьПредставлениеТекущегоЭтапа(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	УправлениеДоступностью(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПараметрыИзмененияВидаПлана = ПараметрыИзмененияВидаПлана();
	
	СохраненноеИнвертироватьОтображениеЗапланированоПоСотруднику = Настройки.Получить("ИнвертироватьОтображениеЗапланированоПоСотруднику");
	Если СохраненноеИнвертироватьОтображениеЗапланированоПоСотруднику <> Неопределено Тогда
		ИнвертироватьОтображениеЗапланированоПоСотруднику = СохраненноеИнвертироватьОтображениеЗапланированоПоСотруднику;
		Настройки.Удалить("СохраненноеИнвертироватьОтображениеЗапланированоПоСотруднику");
	КонецЕсли;
	
	ВыводитьПериодыПланированияПо = Настройки.Получить("ВыводитьПериодыПланированияПо");
	
	Если ВыводитьПериодыПланированияПо < ТекущаяДата 
		Или ВыводитьПериодыПланированияПо = Неопределено Тогда
		
		ВыводитьПериодыПланированияПо = Дата(1, 1, 1);
		
		Если ВыводитьПериодыПланированияПо = Неопределено Тогда
			
			Настройки.Удалить("ВыводитьПериодыПланированияПо");
			
		КонецЕсли;
		
	Иначе
		
		Настройки.Удалить("ВыводитьПериодыПланированияПо");
		
	КонецЕсли;
	
	ТекущееЗначениеВыводитьПериодыПланированияПо = ВыводитьПериодыПланированияПо;
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
	
		ВидПлана = Настройки.Получить("ВидПлана");
		
		Если ВидПлана <> Неопределено Тогда
			
			ДанныеВидаПлана = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
			Если ДанныеВидаПлана.Статус = Перечисления.СтатусыВидовПланов.Действует
				И ДанныеВидаПлана.ТипПлана = Перечисления.ТипыПланов.Занятости Тогда
				
				ПараметрыИзмененияВидаПлана.ВидПланаИзменен = Истина;
				ПередЗагрузкойНаСервереНастройкиОтбораСКД(Настройки, ПараметрыИзмененияВидаПлана);
				ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана);
				УправлениеДоступностью(ЭтотОбъект);
				ТекущийВидПлана = ВидПлана;
			
			Иначе
				
				ВидПлана = Справочники.ВидыПланов.ПустаяСсылка();
				
			КонецЕсли;
			
			Настройки.Удалить("ВидПлана");
			
		КонецЕсли; 
		
	Иначе 
		
		Настройки.Удалить("ВидПлана");
		ПараметрыИзмененияВидаПлана.ВидПланаИзменен              = Ложь;
		ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтТехПроектов = Ложь;
		ПередЗагрузкойНаСервереНастройкиОтбораСКД(Настройки, ПараметрыИзмененияВидаПлана);
		ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана);
		УправлениеДоступностью(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		ОпределитьВидПланаПользователяПоУмолчанию();
		УправлениеДоступностью(ЭтотОбъект);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьНеобходимостьПолученияДополнительныхДанных", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ДекорацияСостояниеОтображенияВидаПланаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПодборСотрудников" Тогда
		
		ПараметрыФормы = ПланированиеКлиентСервер.НовыйПараметрыОткрытияФормыОтбораСКД();
		ПараметрыФормы.ИмяСхемыКомпоновкиДанных          = "ОтборПоСотрудникам";
		ПараметрыФормы.НастройкиКомпоновки               = НастройкиОтбораУчастники;
		ПараметрыФормы.УникальныйИдентификаторВладельца  = УникальныйИдентификатор;
		
		ОповещениеПослеЗакрытияПодбора = Новый ОписаниеОповещения("ПослеЗакрытияВыбораУчастников", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ОтборПоСКД", ПараметрыФормы, ЭтотОбъект,,,,
		             ОповещениеПослеЗакрытияПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПериодыПланированияПоПриИзменении(Элемент)
	
	Если ВыводитьПериодыПланированияПо = ТекущееЗначениеВыводитьПериодыПланированияПо Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыводитьПериодыПланированияПо < ТекущаяДата Тогда
		
		ВыводитьПериодыПланированияПо = ТекущаяДата;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатыВОдномПериодеПланирования(ВыводитьПериодыПланированияПо, ТекущееЗначениеВыводитьПериодыПланированияПо) Тогда
		
		ТекущееЗначениеВыводитьПериодыПланированияПо = ВыводитьПериодыПланированияПо;
		Возврат;
		
	КонецЕсли;
	
	ТекущееЗначениеВыводитьПериодыПланированияПо = ВыводитьПериодыПланированияПо;
	
	КлючТекущейСтрокиДереваОтСотрудников     = КлючТекущейСтрокиДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота");
	КлючиРазвернутыхУзловДереваОтСотрудников = КлючиРазвернутыхУзловДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота");
	
	КлючТекущейСтрокиДереваОтТехПроектов     = КлючТекущейСтрокиДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота");
	КлючиРазвернутыхУзловДереваОтТехПроектов = КлючиРазвернутыхУзловДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота");
	
	ПослеИзмененияВыводитьПериодыПланированияПоНаСервере();
	
	ВосстановитьРазвернутыеУзлыДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота", КлючиРазвернутыхУзловДереваОтСотрудников);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПланЗанятостиОтСотрудников", "СотрудникРабота", КлючТекущейСтрокиДереваОтСотрудников);
	
	ВосстановитьРазвернутыеУзлыДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота", КлючиРазвернутыхУзловДереваОтТехПроектов);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПланЗанятостиОтТехпроектов", "СотрудникРабота", КлючТекущейСтрокиДереваОтТехПроектов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПланаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыВидовПланов.Действует"));
	СтруктураБыстрогоОтбора.Вставить("ПоказыватьВидыПланов", "УчастникИлиВладелец");
	СтруктураБыстрогоОтбора.Вставить("ТипПлана", ПредопределенноеЗначение("Перечисление.ТипыПланов.Занятости"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОповещениеПослеВыбораПлана = Новый ОписаниеОповещения("ПослеВыбораВидаПлана", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыПланов.ФормаВыбора",
	             ПараметрыФормы,
	             ЭтотОбъект,,,, 
	             ОповещениеПослеВыбораПлана, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПланаПриИзменении(Элемент)
	
	ПриИзмененииВидаПланаНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиПодразделенияСотрудники

&НаКлиенте
Процедура ПодразделенияСотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	ПереносимыеДанные  = ПодборПодразделенияСотрудники.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ПереносимыеДанные.ДобавленоВПлан Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 уже есть в планах для этапа %2'"), 
		                           ПереносимыеДанные.Сотрудник,
		                           ТекущийЭтап);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПереносимыеДанные.ДобавленоВПлан = Истина;
	
	ИзмененныеЗаписи = Новый Массив;
	ДобавитьСотрудникаВЭтап(ТекущийЭтап,
	                        ПереносимыеДанные.Сотрудник, 
	                        0, 
	                        ИзмененныеЗаписи);
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи,
	                                     Неопределено, 
	                                     Неопределено); 
	
	ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице("ПланЗанятостиОтТехПроектов", ИзмененныеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПодразделенияСотрудникиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПриНачалеПеретаскиванияСотрудников(Элемент, ПараметрыПеретаскивания, Выполнение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваПланЗанятостиОтСотрудников

&НаКлиенте
Процедура ПланЗанятостиОтСотрудниковПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные            = Элементы.ПланЗанятостиОтСотрудников.ТекущиеДанные;
	ПользовательПустаяСсылка = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСотрудникИзменен = Ложь;
	
	СтрокаСотрудник = СтрокаСотрудникПоСтрокеПланаОтСотрудников(ТекущиеДанные);
	
	Если СтрокаСотрудник = Неопределено Тогда
		
		Если ТекущийСотрудник = ПользовательПустаяСсылка Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ТекущийСотрудник = ПользовательПустаяСсылка;
		
	Иначе
		
		Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудник Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ТекущийСотрудник = СтрокаСотрудник.СотрудникРабота;
		
	КонецЕсли;
	
	ОбработатьИзменениеТекущегоСотрудника();
	СформироватьПредставлениеТекущегоСотрудникаПодбора(ЭтотОбъект);
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланЗанятостиОтСотрудниковПриИзменении()

	ТекущиеДанные = Элементы.ПланЗанятостиОтСотрудников.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = Элементы.ПланЗанятостиОтСотрудников.ТекущийЭлемент.Имя;
	
	ПослеИзмененияПлановыхТрудозатратОтСотрудника(ТекущиеДанные, ИмяТекущейКолонки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки  = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПланЗанятостиСотрудникРабота"
		   Или Поле.Имя = "ПланЗанятостиФакт"
		   Или Поле.Имя = "ПланЗанятостиОстаток"
		   Или Поле.Имя = "ПланЗанятостиНераспределено" Тогда
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПоказатьЗначение(, ДанныеСтроки.СотрудникРабота);
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			Если ДанныеСтроки.СотрудникРабота = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
				
				ПоказатьЗначение(, ДанныеСтроки.ТехническийПроект);
				
			Иначе
				
				ПоказатьЗначение(, ДанныеСтроки.СотрудникРабота);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (Поле.Имя = "ПланЗанятостиТехПроект"
		Или Поле.Имя = "ПланЗанятостиВерсия") Тогда 
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ТехническийПроект)
			И ТипЗнч(ДанныеСтроки.ТехническийПроект) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
			СтандартнаяОбработка = Ложь;
		
			ПоказатьЗначение(, ДанныеСтроки.ТехническийПроект);
			
		Иначе
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтСотрудниковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеУдаляемыхСтрок            = Новый Массив;
	ИдентификаторыСтрокКПерерасчету = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПланЗанятостиОтСотрудников.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ДанныеСтроки.ДоступноУдалениеСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипСотрудникРабота <> Тип("СправочникСсылка.ВидыДеятельности")
			И ДанныеСтроки.ТипСотрудникРабота <> Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
		
		Если РодительскаяСтрока = Неопределено 
			Или РодительскаяСтрока.ТипСотрудникРабота <> Тип("СправочникСсылка.Пользователи") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаПодразделение = РодительскаяСтрока.ПолучитьРодителя();
		Если Не СтрокаПодразделение = Неопределено Тогда
			
			ИдентификаторСтрокиПодразделение = СтрокаПодразделение.ПолучитьИдентификатор();
			
			Если ИдентификаторыСтрокКПерерасчету.Найти(ИдентификаторСтрокиПодразделение) = Неопределено Тогда 
				 ИдентификаторыСтрокКПерерасчету.Добавить(ИдентификаторСтрокиПодразделение);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеУдаляемойСтроки = НовыйДанныеУдаляемойРаботы();
		
		ДанныеУдаляемойСтроки.Работа    = ДанныеСтроки.СотрудникРабота;
		ДанныеУдаляемойСтроки.Сотрудник = РодительскаяСтрока.СотрудникРабота;
		ДанныеУдаляемыхСтрок.Добавить(ДанныеУдаляемойСтроки);
		
		НайтиОтметитьЗначениеВФормахПодбора(ЭтотОбъект, ДанныеСтроки.СотрудникРабота, Ложь);
		
		КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
		КоллекцияСтрок.Удалить(КоллекцияСтрок.Индекс(ДанныеСтроки));
		
	КонецЦикла;
	
	Если ДанныеУдаляемыхСтрок.Количество() > 0 Тогда
		
		УдалитьЗаписиРегистраПоУдаляемымСтрокамПлана(ДанныеУдаляемыхСтрок, ИдентификаторыОтображаемыхПланов(ЭтотОбъект));
		
	КонецЕсли;
	
	Для Каждого ИдентификаторСтрокиКПерерасчету Из ИдентификаторыСтрокКПерерасчету Цикл
		
		СтрокаКПерерасчету = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ИдентификаторСтрокиКПерерасчету);
		Если СтрокаКПерерасчету = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаКПерерасчету, 
		                                                                                       МассивИменКолонокКПерерасчетуПослеУдаленияСтроки(ЭтотОбъект),
		                                                                                       Истина);
		
		ПересчитатьОстатокПоНормативамДляРодительскойСтроки(ЭтотОбъект, СтрокаКПерерасчету);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтСотрудниковПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	МассивЗначений = ПараметрыПеретаскивания.Значение;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(Строка);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСотрудник = СтрокаСотрудникПоСтрокеПланаОтСотрудников(ДанныеСтроки);
	
	Если СтрокаСотрудник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПеретаскивания = ЧтоПеретаскиваемПланЗанятостиОтСотрудников(Элемент, ПараметрыПеретаскивания.Значение, Истина); 
	
	Если ДанныеПеретаскивания.ТипЗначений = Тип("СправочникСсылка.ВидыДеятельности") Тогда
		 ОбработатьПеретаскиваниеВидыДеятельностиОтСотрудников(СтрокаСотрудник, ДанныеПеретаскивания.ПеретаскиваемыеЗначения);
	ИначеЕсли ДанныеПеретаскивания.ТипЗначений = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		ОбработатьПеретаскиваниеЭтаповОтСотрудников(СтрокаСотрудник, ДанныеПеретаскивания.ПеретаскиваемыеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтСотрудниковНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ЗначенияПеретаскивания     = ПараметрыПеретаскивания.Значение;
	ЧтоПеретаскиваем  = ПеретаскиваемыеЭтапы(Элемент,ЗначенияПеретаскивания, Ложь);
	
	Если ЧтоПеретаскиваем.ПеретаскиваемыеЭтапы.Количество() = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтСотрудниковПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрокиНазначения = Элемент.ДанныеСтроки(Строка);
	
	СотрудникСтрокиНазначения = СотрудникПоСтрокеПланаОтСотрудников(ДанныеСтрокиНазначения);
	
	Если СотрудникСтрокиНазначения = Неопределено Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
		Возврат;
		
	КонецЕсли;
	
	ЧтоПеретаскиваем = ЧтоПеретаскиваемПланЗанятостиОтСотрудников(Элемент, ПараметрыПеретаскивания.Значение, Ложь);
	
	Если ЧтоПеретаскиваем.ТипЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЧтоПеретаскиваем.СотрудникиПеретаскиваемоего.Количество() = 1 
		И ЧтоПеретаскиваем.СотрудникиПеретаскиваемоего[0] = СотрудникСтрокиНазначения Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииДатРаботы("ПланЗанятостиОтСотрудников", "ДатаНачала");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииДатРаботы("ПланЗанятостиОтСотрудников", "ДатаОкончания");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьОтображениеЗапланированоПоСотрудникуСуммаПриИзменении(Элемент)
	
	ПриИзмененииИнвертироватьОтображениеЗапланированоПоСотруднику();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьОтображениеЗапланированоПоСотрудникуОстатокПриИзменении(Элемент)
	
	ПриИзмененииИнвертироватьОтображениеЗапланированоПоСотруднику();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДереваПланЗанятостиОтТехПроектов

&НаКлиенте
Процедура ДекорацияОтборПоТехПроектамОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПодборТехПроектов" Тогда
		
		ПараметрыФормы = ПланированиеКлиентСервер.НовыйПараметрыОткрытияФормыОтбораСКД();
		ПараметрыФормы.ИмяСхемыКомпоновкиДанных          = "ОтборПоТехническимПроектам";
		ПараметрыФормы.НастройкиКомпоновки               = НастройкиОтбораТехническиеПроекты;
		ПараметрыФормы.УникальныйИдентификаторВладельца  = УникальныйИдентификатор;
		
		ОповещениеПослеЗакрытияПодбора = Новый ОписаниеОповещения("ПослеЗакрытияОтбораТехническиеПроекты", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ОтборПоСКД", ПараметрыФормы, ЭтотОбъект,,,,
		             ОповещениеПослеЗакрытияПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланЗанятостиОтТехПроектовПриИзменении()

	ТекущиеДанные = Элементы.ПланЗанятостиОтТехпроектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = Элементы.ПланЗанятостиОтТехпроектов.ТекущийЭлемент.Имя;
	
	ПослеИзмененияПлановыхТрудозатратОтТехПроекта(ТекущиеДанные, ИмяТекущейКолонки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки  = ПланЗанятостиОтТехпроектов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ПланЗанятостиОтТехпроектовТехПроектЭтап"
		   Или Поле.Имя = "ПланЗанятостиОтТехпроектовВерсия"
		   Или Поле.Имя = "ПланЗанятостиОтТехпроектовФакт"
		   Или Поле.Имя = "ПланЗанятостиОтТехпроектовОстаток"
		   Или Поле.Имя = "ПланЗанятостиОтТехпроектовНераспределено" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			Если ЗначениеЗаполнено(ДанныеСтроки.СотрудникРабота) Тогда
				
				ПоказатьЗначение(, ДанныеСтроки.СотрудникРабота);
				
			Иначе
				
				РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
				Если РодительскаяСтрока <> Неопределено Тогда
					ПоказатьЗначение(, РодительскаяСтрока.СотрудникРабота);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			ПоказатьЗначение(, ДанныеСтроки.СотрудникРабота);
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Если Поле.Имя = "ПланЗанятостиОтТехпроектовТехПроектЭтап" Тогда
				
				ПоказатьЗначение(, ДанныеСтроки.СотрудникРабота);
				
			Иначе
				
				РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
				Если РодительскаяСтрока <> Неопределено Тогда
					ПоказатьЗначение(, РодительскаяСтрока.СотрудникРабота);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные              = Элементы.ПланЗанятостиОтТехпроектов.ТекущиеДанные;
	ЗадачаПроцессаПустаяСсылка = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка");
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЭтап = СтрокаЭтапПоСтрокеПланаОтТехПроектов(ТекущиеДанные);
	
	Если СтрокаЭтап = Неопределено Тогда
		
		Если ТекущийЭтап = ЗадачаПроцессаПустаяСсылка Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ТекущийЭтап              = ЗадачаПроцессаПустаяСсылка;
		ТекущийТехническийПроект = ПредопределенноеЗначение("Справочник.ТехническиеПроекты.ПустаяСсылка");
		
	Иначе
		
		Если СтрокаЭтап.СотрудникРабота = ТекущийЭтап Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ТекущийЭтап = СтрокаЭтап.СотрудникРабота;
		
		РодительскаяСтрока = СтрокаЭтап.ПолучитьРодителя();
		Если РодительскаяСтрока <> Неопределено Тогда
			ТекущийТехническийПроект = РодительскаяСтрока.СотрудникРабота;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьИзменениеТекущегоЭтапа();
	СформироватьПредставлениеТекущегоЭтапа(ЭтотОбъект);
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеУдаляемыхСтрок            = Новый Массив;
	ИдентификаторыСтрокКПерерасчету = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПланЗанятостиОтТехпроектов.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланЗанятостиОтТехпроектов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ДанныеСтроки.ДоступноУдалениеСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипСотрудникРабота <> Тип("СправочникСсылка.Пользователи") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
		
		Если РодительскаяСтрока = Неопределено 
			Или РодительскаяСтрока.ТипСотрудникРабота <> Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТехПроект = РодительскаяСтрока.ПолучитьРодителя();
		Если Не СтрокаТехПроект = Неопределено Тогда
			
			ИдентификаторСтрокиТехПроект = СтрокаТехПроект.ПолучитьИдентификатор();
			
			Если ИдентификаторыСтрокКПерерасчету.Найти(ИдентификаторСтрокиТехПроект) = Неопределено Тогда 
				 ИдентификаторыСтрокКПерерасчету.Добавить(ИдентификаторСтрокиТехПроект);
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеУдаляемойСтроки = НовыйДанныеУдаляемойРаботы();
		
		ДанныеУдаляемойСтроки.Работа    = РодительскаяСтрока.СотрудникРабота;
		ДанныеУдаляемойСтроки.Сотрудник = ДанныеСтроки.СотрудникРабота;
		ДанныеУдаляемыхСтрок.Добавить(ДанныеУдаляемойСтроки);
		
		НайтиОтметитьЗначениеВФормахПодбора(ЭтотОбъект, ДанныеСтроки.СотрудникРабота, Ложь);
		
		КоллекцияСтрок = РодительскаяСтрока.ПолучитьЭлементы();
		КоллекцияСтрок.Удалить(КоллекцияСтрок.Индекс(ДанныеСтроки));
		
	КонецЦикла;
	
	Если ДанныеУдаляемыхСтрок.Количество() > 0 Тогда
		
		УдалитьЗаписиРегистраПоУдаляемымСтрокамПлана(ДанныеУдаляемыхСтрок, ИдентификаторыОтображаемыхПланов(ЭтотОбъект));
		
	КонецЕсли;
	
	Для Каждого ИдентификаторСтрокиКПерерасчету Из ИдентификаторыСтрокКПерерасчету Цикл
		
		СтрокаКПерерасчету = ПланЗанятостиОтТехпроектов.НайтиПоИдентификатору(ИдентификаторСтрокиКПерерасчету);
		Если СтрокаКПерерасчету = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаКПерерасчету, 
		                                                                                       МассивИменКолонокКПерерасчетуПослеУдаленияСтроки(ЭтотОбъект),
		                                                                                       Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПриНачалеПеретаскиванияСотрудников(Элемент, ПараметрыПеретаскивания, Выполнение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		Возврат;
		
	КонецЕсли;
	
	ДанныеСтрокиНазначения = Элемент.ДанныеСтроки(Строка);
	
	СтрокаЭтапаНазначения = СтрокаЭтапПоСтрокеПланаОтТехПроектов(ДанныеСтрокиНазначения);
	
	Если СтрокаЭтапаНазначения = Неопределено Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
		Возврат;
		
	КонецЕсли;
	
	ПеретаскиваемыеСотрудники = ПеретаскиваемыеСотрудники(Элемент, ПараметрыПеретаскивания.Значение);
	
	ЧтоПеренесется = ЧтоПеренесетсяПланЗанятостиОтСотрудников(Элемент, ПараметрыПеретаскивания.Значение, СтрокаЭтапаНазначения);
	
	Если ЧтоПеренесется.Количество() = 0 Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		
		Возврат;
		
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	МассивЗначений = ПараметрыПеретаскивания.Значение;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ПланЗанятостиОтТехпроектов.НайтиПоИдентификатору(Строка);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЭтапаНазначения = СтрокаЭтапПоСтрокеПланаОтТехПроектов(ДанныеСтроки);
	
	Если СтрокаЭтапаНазначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧтоПеренесется = ЧтоПеренесетсяПланЗанятостиОтСотрудников(Элемент, ПараметрыПеретаскивания.Значение, СтрокаЭтапаНазначения);

	Если ЧтоПеренесется.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеСотрудниковПланОтТехпроектов(СтрокаЭтапаНазначения, ЧтоПеренесется);

КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовДатаНачалаПриИзменении(Элемент)
	
	ПриИзмененииДатРаботы("ПланЗанятостиОтТехпроектов", "ДатаНачала");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиОтТехпроектовДатаОкончанияПриИзменении(Элемент)
	
	ПриИзмененииДатРаботы("ПланЗанятостиОтТехпроектов", "ДатаОкончания");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТабличнойЧастиПодразделенияСотрудники

&НаКлиенте
Процедура ВидыДеятельностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	ПереносимыеДанные  = ВидыДеятельности.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ПереносимыеДанные.ДобавленоВПлан Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 уже есть в планах сотрудника %2'"), 
		                           ПереносимыеДанные.Работа,
		                           ТекущийСотрудник);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПереносимыеДанные.ДобавленоВПлан = Истина;
	
	ИзмененныеЗаписи = Новый Массив;
	ДобавитьВидДеятельностиВПлан(ТекущийСотрудник,
	                             ПереносимыеДанные.Работа, 
	                             0, 
	                             ИзмененныеЗаписи);
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи,
	                                     Неопределено, 
	                                     Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

#Область Отчеты

&НаКлиенте
Процедура КонтрольПланированияОтСотрудников(Команда)
	
	ПараметрыОткрытия = ПланированиеКлиентСервер.НовыйПараметрыФормированияОтчетаКонтрольПланирования();
	
	ПараметрыОткрытия.ВариантГруппировки          = "ОтСотрудников";
	ПараметрыОткрытия.КлючНазначенияИспользования = "ИзРабочегоМестаПланЗанятостиОтСотрудников";
	ПараметрыОткрытия.ПланЗанятости               = ВидПлана;
	ПараметрыОткрытия.ПериодОтчета                = СтандартныйПериодОтображаемыхПланов();
	ПараметрыОткрытия.СформироватьПриОткрытии     = Истина;
	ОтборПоУчастникам = Новый СписокЗначений;
	ОтборПоУчастникам.ЗагрузитьЗначения(ВыделенныеВСпискеСотрудники());
	ПараметрыОткрытия.ОтборПоУчастникам = ОтборПоУчастникам;
	
	ОткрытьФорму("Отчет.КонтрольПланирования.Форма.ФормаОтчета", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПланированияОтТехПроектов(Команда)
	
	ПараметрыОткрытия = ПланированиеКлиентСервер.НовыйПараметрыФормированияОтчетаКонтрольПланирования();
	
	ПараметрыОткрытия.ВариантГруппировки          = "ОтТехПроектов";
	ПараметрыОткрытия.КлючНазначенияИспользования = "ИзРабочегоМестаПланЗанятостиОтТехПроектов";
	ПараметрыОткрытия.ПланЗанятости               = ВидПлана;
	ПараметрыОткрытия.ПериодОтчета                = СтандартныйПериодОтображаемыхПланов();
	ПараметрыОткрытия.СформироватьПриОткрытии     = Истина;
	
	ВыделенныеТехПроекты = Новый СписокЗначений;
	ВыделенныеТехПроекты.ЗагрузитьЗначения(ВыделенныеВСпискеТехПроекты());
	ПараметрыОткрытия.ОтборПоТехническимПроектам = ВыделенныеТехПроекты;
	
	ОткрытьФорму("Отчет.КонтрольПланирования.Форма.ФормаОтчета", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПланЗанятостиОтТехПроектов

&НаКлиенте
Процедура СкрытьПоказатьПодборОтТехПроекта(Команда)
	
	Элементы.ГруппаПланЗанятостиОтТехПроектовПодбор.Видимость = Не Элементы.ГруппаПланЗанятостиОтТехПроектовПодбор.Видимость;
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиенте
Процедура УстановитьОтборПоВыделеннымСотрудникам(Команда)
	
	ОчиститьСообщения();
	
	ИзменитьОтборСотрудникиПоКомандеИОбновить(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПланируемыеЧасыОтТехПроектов(Команда)
	
	ОчиститьСообщения();
	
	РезультатПодготовки = РезультатПодготовкиУказаниеПлановыхЧасов(
		"ПланЗанятостиОтТехпроектов", Тип("СправочникСсылка.Пользователи"));
	
	Если РезультатПодготовки.Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВводПлановыхЧасовКомандой(РезультатПодготовки, "ПослеВводаПлановыхЧасовОтТехПроектов");
	
КонецПроцедуры

&НаКлиенте
Процедура РаскопироватьВыделеннуюЯчейкуВправоОтТехПроекта(Команда)
	
	ОчиститьСообщения();
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	РезультатПодготовки = РезультатПодготовкиКопированияЗначенияКолонки(
		"ПланЗанятостиОтТехпроектов", ДопустимыеТипы);
	
	Если РезультатПодготовки.Отказ = Истина Тогда
		Возврат; 
	КонецЕсли;
	
	Если РезультатПодготовки.ПоследующиеПериодыНеПустые Тогда
		
		ОповещениеПослеВопроса = Новый ОписаниеОповещения("КопироватьВыделеннуюЯчейкуВправоЗавершение", ЭтотОбъект, РезультатПодготовки);
		ТекстВопроса           = СтрШаблон(НСтр("ru = 'Плановые трудозатраты в периодах начиная с %1 будут изменены на %2. Продолжить?'"), 
		                                   Формат(РезультатПодготовки.НачалоПериодаПланаСКоторогоРаспределяем, "ДФ=dd.MM.yy"),
		                                   РезультатПодготовки.КопируемоеЗначение); 
		
		ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		КопироватьВыделеннуюЯчейкуВправоЗавершение(КодВозвратаДиалога.ОК, РезультатПодготовки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСотрудникаПоЭтапуОтТехпроектов(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ПланЗанятостиОтТехпроектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.СотрудникРабота) <> Тип("СправочникСсылка.Пользователи") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для просмотра невыполненных задач этапа по участнику необходимо выбрать строку с участником планирования.'")); 
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = ПараметрыОткрытияЗадачЭтапаСотрудника();
	
	ПараметрыОткрытия.Исполнитель = ТекущиеДанные.СотрудникРабота; 
	
	РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительскаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РодительскаяСтрока.СотрудникРабота) Тогда
		
		ПараметрыОткрытия.Этап = РодительскаяСтрока.СотрудникРабота;
		
	Иначе
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		ПараметрыОткрытия.ТехПроект = РодительскаяСтрока.СотрудникРабота;
		ПараметрыОткрытия.ИмяФормы  = "ФормаСпискаПараметрическая";
		
	КонецЕсли;
	
	ОткрытьФормуЗадачЭтапаСотрудника(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстатокСУчетомНормативаОтТехПроектов(Команда)
	
	ОчиститьСообщения();
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	РезультатПодготовки = РезультатПодготовкиРаспределенияОстатка(
		 "ПланЗанятостиОтТехпроектов", ДопустимыеТипы); 
	
	Если РезультатПодготовки.Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РезультатРаспределения = РезультатРаспределенияОстатка(РезультатПодготовки);
	
	Если РезультатРаспределения.Успешно Тогда
		
		Если  РезультатРаспределения.КоличествоИзмененныхЗаписей <> 0 Тогда
		
			ТекущаяСтрока = ЭтотОбъект.ПланЗанятостиОтТехпроектов.НайтиПоИдентификатору(РезультатПодготовки.ИдентификаторТекущейСтроки); 
			Если ТипЗнч(ТекущаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
				ТекущаяСтрока.ДополнительныеДанныеНеПолучены        = Истина;
				ТребуетсяПолучениеДополнительныхДанныхОтТехПроектов = Истина;
				ОбновитьДанныеСтраницаОтСотрудниковНаКлиенте();
			КонецЕсли;
			
			ТекстОповещения = СтрШаблон(НСтр("ru = 'Было изменено записей плана - %1'"), 
			                            РезультатРаспределения.КоличествоИзмененныхЗаписей);
		
			ПоказатьОповещениеПользователя(НСтр("ru = 'Распределение остатков по нормативам'") ,, ТекстОповещения, БиблиотекаКартинок.Информация32);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьСотрудниковПоЭтапу(Команда)
	
	ОчиститьСообщения();
	
	СтрокаЭтап = Неопределено;
	ТекстСообщения = НСтр("ru = 'Для выполнения команды необходимо выбрать строку с этапом технического проекта'");
	
	ТекущиеДанные = Элементы.ПланЗанятостиОтТехпроектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	 
	Если ТипЗнч(ТекущиеДанные.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		СтрокаЭтап = ТекущиеДанные;
	Иначе 
		
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено Тогда 
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		СтрокаЭтап = СтрокаРодитель;
		Если ТипЗнч(СтрокаЭтап.СотрудникРабота) <> Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТехПроект = СтрокаЭтап.ПолучитьРодителя();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТехПроект", СтрокаТехПроект.СотрудникРабота);
	
	ПараметрыОткрытия = ПараметрыОткрытияПротоколаРесурса(ВидСогласуемогоРесурсаПлановыхРабот, СтрокаЭтап.СотрудникРабота);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПротоколПланированияПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("РегистрСведений.ПротоколСогласованияРесурсов.Форма.ПараметрическаяОтЗадачи", 
	              ПараметрыОткрытия,
	              ЭтотОбъект,,,,
	              ОповещениеОЗакрытии, 
	              РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаСервере
Функция ПараметрыОткрытияПротоколаРесурса(ВидСогласуемогоРесурса, Этап)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПротоколСогласованияРесурсов.Период             КАК Период,
	|	ПротоколСогласованияРесурсов.ВидРесурса         КАК ВидРесурса,
	|	ПротоколСогласованияРесурсов.Пользователь       КАК Пользователь,
	|	ПротоколСогласованияРесурсов.СтатусСогласования КАК СтатусСогласования,
	|	ПротоколСогласованияРесурсов.Количество         КАК Количество,
	|	ПротоколСогласованияРесурсов.Автор              КАК Автор,
	|	ЛОЖЬ КАК ЭтоТекущееРедактирование
	|ИЗ
	|	РегистрСведений.ПротоколСогласованияРесурсов КАК ПротоколСогласованияРесурсов
	|ГДЕ
	|	ПротоколСогласованияРесурсов.ВидРесурса = &ВидСогласуемогоРесурса
	|	И ПротоколСогласованияРесурсов.Задача = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь КАК Пользователь,
	|	ЗадачиЗапланированоПоСотрудникам.Количество   КАК Количество
	|ИЗ
	|	РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|ГДЕ
	|	ЗадачиЗапланированоПоСотрудникам.Задача = &Задача
	|	И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидСогласуемогоРесурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Исполнитель КАК Исполнитель
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Этап);
	Запрос.УстановитьПараметр("ВидСогласуемогоРесурса", ВидСогласуемогоРесурса);

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаПротокол = Результат[0].Выгрузить();
	
	ЗапланированоПоПользователямПоВидуРесурса = Новый Массив;
	
	ВыборкаЗапланированоПоПользователям = Результат[1].Выбрать();
	
	Пока ВыборкаЗапланированоПоПользователям.Следующий() Цикл
		
		ДанныеПоПользователю = Новый Структура;
		ДанныеПоПользователю.Вставить("Пользователь", ВыборкаЗапланированоПоПользователям.Пользователь);
		ДанныеПоПользователю.Вставить("Количество",   ВыборкаЗапланированоПоПользователям.Количество);
		
		ЗапланированоПоПользователямПоВидуРесурса.Добавить(ДанныеПоПользователю);
		
	КонецЦикла;
	
	ВыборкаЗадача = Результат[2].Выбрать();
	Если ВыборкаЗадача.Следующий() Тогда
		ИсполнительЭтапа = ВыборкаЗадача.Исполнитель;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПротоколаВоВременномХранилище", ПоместитьВоВременноеХранилище(ТаблицаПротокол, УникальныйИдентификатор));
	ПараметрыОткрытия.Вставить("ЗапланированоПоПользователям",       ЗапланированоПоПользователямПоВидуРесурса);
	ПараметрыОткрытия.Вставить("Задача",                             Этап);
	ПараметрыОткрытия.Вставить("Исполнитель",                        ИсполнительЭтапа);
	ПараметрыОткрытия.Вставить("ВидРесурса",                         ВидСогласуемогоРесурса);
	ПараметрыОткрытия.Вставить("ВыполняетсяСогласование",            Ложь);
	ПараметрыОткрытия.Вставить("Согласующие",                        Неопределено);
	ПараметрыОткрытия.Вставить("ДоступноВРодительской",              0);
	ПараметрыОткрытия.Вставить("ИсполнительРодительскойЗадачи",      Неопределено);
	ПараметрыОткрытия.Вставить("ВариантОтображения",                "ПланированиеПоПользователям");
	
	Возврат ПараметрыОткрытия;

КонецФункции 

&НаКлиенте
Процедура ПротоколПланированияПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьИзмененияПланированияДляЭтапа(Результат.Задача,
	                                      Результат.ВидРесурса,
	                                      Результат.ЗапланированоПоПользователям, 
	                                      ДополнительныеПараметры.ТехПроект);
	
	ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияПланированияДляЭтапа(Этап, ВидРесурса, ЗапланированоПоПользователям, ТехПроект)
	
	ТекущийПланПоПользователям = Новый ТаблицаЗначений;
	ТекущийПланПоПользователям.Колонки.Добавить("ВидРесурса",   Новый ОписаниеТипов("СправочникСсылка.ВидыСогласуемыхРесурсов"));
	ТекущийПланПоПользователям.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи")); 
	ТекущийПланПоПользователям.Колонки.Добавить("Количество",   Новый ОписаниеТипов("Число"));
		
	Для Каждого КлючИЗначение Из ЗапланированоПоПользователям Цикл
		
		НоваяСтрока = ТекущийПланПоПользователям.Добавить();
		НоваяСтрока.Пользователь = КлючИЗначение.Ключ;
		НоваяСтрока.Количество   = КлючИЗначение.Значение;
		НоваяСтрока.ВидРесурса   = ВидРесурса;
		
	КонецЦикла;
	
	РегистрыСведений.ПротоколСогласованияРесурсов.ОтразитьИзмененияПриЗаписиЗадачи(Этап, ТекущийПланПоПользователям, ТехПроект, ВидРесурса);
	РегистрыСведений.ЗадачиЗапланированоПоСотрудникам.ВыполнитьЗаписьВРегистрПоТаблице(Этап, ТекущийПланПоПользователям, ВидРесурса);
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Этап);
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадач, ВидРесурса, ТехПроект);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьЭтапТехническогоПроекта(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ПланЗанятостиОтТехпроектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЭтап = СтрокаЭтапПоСтрокеПланаОтТехПроектов(ТекущиеДанные);
	
	ТекстСообщения = НСтр("ru = 'Не выбран этап технического проекта для распределения нераспределенного в плане занятости.'");
	
	Если СтрокаЭтап = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
		Возврат;
		
	КонецЕсли;
	
	СтрокаТехПроект = СтрокаЭтап.ПолучитьРодителя(); 
	
	Если СтрокаТехПроект = Неопределено
		Или ТипЗнч(СтрокаТехПроект.СотрудникРабота) <> Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Этап",                                          СтрокаЭтап.СотрудникРабота);
	ПараметрыОткрытия.Вставить("ТехПроект",                                     СтрокаТехПроект.СотрудникРабота);
	ПараметрыОткрытия.Вставить("ДатаНачалаПериода",                             ПериодыОтображаемыхПланов(ЭтотОбъект).НачалоПериода);
	ПараметрыОткрытия.Вставить("ВидПлана",                                      ВидПлана);
	ПараметрыОткрытия.Вставить("ВидСогласуемогоРесурсаПлановыхРабот",           ВидСогласуемогоРесурсаПлановыхРабот);
	ПараметрыОткрытия.Вставить("ЕдиницаИзмеренияВидРесурса",                    ЕдиницаИзмеренияВидРесурса);
	ПараметрыОткрытия.Вставить("ДатыНачинаяС",                                  ДатыНачалаОтображаемыхПериодов(ЭтотОбъект));
	ПараметрыОткрытия.Вставить("НормативПланируемогоВремени",                   НормативПланируемогоВремени);
	ПараметрыОткрытия.Вставить("ПороговоеЗначениеОтображениеЭтапПланЗанятости", ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	
	ОповещениеПослеЗакрытияФормыНастроекРаспределения = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроекРаспределенияЭтапТехническогоПроекта", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Планирование.Форма.РаспределениеЭтапТехническогоПроекта", ПараметрыОткрытия, ЭтотОбъект,,,,
	             ОповещениеПослеЗакрытияФормыНастроекРаспределения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроекРаспределенияЭтапТехническогоПроекта(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		
		ПерезаполнитьДеревьяНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатыПоТехническомуПроекту(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ПланЗанятостиОтТехпроектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТехПроект = СтрокаТехПроектПоСтрокеПланаОтТехПроектов(ТекущиеДанные);
	
	Если СтрокаТехПроект = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран технический проект для изменения дат.'")); 
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТехническийПроект",                             СтрокаТехПроект.СотрудникРабота);
	ПараметрыОткрытия.Вставить("ВидПлана",                                      ВидПлана);
	ПараметрыОткрытия.Вставить("ПороговоеЗначениеОтображениеЭтапПланЗанятости", ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	ПараметрыОткрытия.Вставить("ВидСогласуемогоРесурсаПлановыхРабот",           ВидСогласуемогоРесурсаПлановыхРабот);
	ПараметрыОткрытия.Вставить("ДатаНачалаПериодаПланирования",                 ПериодыОтображаемыхПланов(ЭтотОбъект).НачалоПериода);
	
	ОповещениеПослеЗакрытияФормыИзмененияДат = Новый ОписаниеОповещения("ПослеЗакрытияФормыИзмененияДат", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Планирование.Форма.ИзменениеДат", ПараметрыОткрытия, ЭтотОбъект,,,,
	             ОповещениеПослеЗакрытияФормыИзмененияДат,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборСотрудники

&НаКлиенте
Процедура СвернутьСтрокиПодбораСотрудники(Команда)
	
	Для Каждого РодительскаяСтрока Из ПодборПодразделенияСотрудники.ПолучитьЭлементы() Цикл
		
		Элементы.ПодразделенияСотрудники.Свернуть(РодительскаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиПодбораСотрудники(Команда)
	
	Для Каждого РодительскаяСтрока Из ПодборПодразделенияСотрудники.ПолучитьЭлементы() Цикл
		
		Элементы.ПодразделенияСотрудники.Развернуть(РодительскаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеСтрокиПодбораСотрудников(Команда)
	
	ТекущиеДанные = Элементы.ПодразделенияСотрудники.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) Тогда
		ПоказатьЗначение( ,ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПланЗанятостиОтСотрудников

&НаКлиенте
Процедура ЗафиксироватьПлан(Команда)
	
	ОчиститьСообщения();
	
	ДанныеПлана = ДанныеПервогоНезафиксированногоПлана(ЭтотОбъект);
	Если ДанныеПлана = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'На форме отображаются только зафиксированные план. Выполнение команды возможно только для отображаемых планов'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'План за период %1 - %2 будет зафиксирован. Продолжить?'"),
	                         Формат(ДанныеПлана.НачалоПериода, "ДФ=dd.MM.yy"), 
	                         Формат(ДанныеПлана.КонецПериода,  "ДФ=dd.MM.yy"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПлана",                   ДанныеПлана.ИдентификаторПлана);
	ДополнительныеПараметры.Вставить("ИдентификаторСтрокиОтображаемыеПланы", ДанныеПлана.ПолучитьИдентификатор());
	ДополнительныеПараметры.Вставить("ИмяКолонкиРедактирование",             ДанныеПлана.ИмяКолонкиРедактированиеДоступно);
	ДополнительныеПараметры.Вставить("Фиксировать",                          Истина);
	
	ОповещениеПослеВопроса = Новый ОписаниеОповещения("ПослеОтветаНаВопросФиксацияПлана", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФиксациюПлана(Команда)
	
	ОчиститьСообщения();
	
	ДанныеПлана = ДанныеПоследнегоЗафиксированногоПлана(ЭтотОбъект);
	Если ДанныеПлана = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'На форме не отображаются зафиксированные планы. Выполнение команды возможно только для отображаемых планов'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Фиксация плана будет за период %1 - %2 будет отменена. Продолжить?'"),
	                         Формат(ДанныеПлана.НачалоПериода, "ДФ=dd.MM.yy"), 
	                         Формат(ДанныеПлана.КонецПериода, "ДФ=dd.MM.yy"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторПлана",                   ДанныеПлана.ИдентификаторПлана);
	ДополнительныеПараметры.Вставить("ИдентификаторСтрокиОтображаемыеПланы", ДанныеПлана.ПолучитьИдентификатор());
	ДополнительныеПараметры.Вставить("ИмяКолонкиРедактирование",             ДанныеПлана.ИмяКолонкиРедактированиеДоступно);
	ДополнительныеПараметры.Вставить("Фиксировать",                          Ложь);
	
	ОповещениеПослеВопроса = Новый ОписаниеОповещения("ПослеОтветаНаВопросФиксацияПлана", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПланируемыеЧасыОтСотрудников(Команда)
	
	ОчиститьСообщения();
	
	РезультатПодготовки = РезультатПодготовкиУказаниеПлановыхЧасов(
		"ПланЗанятостиОтСотрудников", Тип("СправочникСсылка.ЗадачиПроцесса"));
	
	Если РезультатПодготовки.Отказ = Истина Тогда
		Возврат; 
	КонецЕсли;
	
	ПоказатьВводПлановыхЧасовКомандой(РезультатПодготовки, "ПослеВводаПлановыхЧасовОтСотрудников");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыПросмотрПланаОт.ТекущаяСтраница = Элементы.СтраницаПланЗанятостиОтСотрудника Тогда
		
		ОбновитьДанныеСтраницаОтСотрудниковНаКлиенте();
		
	ИначеЕсли Элементы.СтраницыПросмотрПланаОт.ТекущаяСтраница = Элементы.СтраницаПланЗанятостиОтТехПроектов Тогда
		
		ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиДляВыбранныхСотрудников(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыПолучения = ПланированиеКлиентСервер.ПараметрыПолученияВидовДеятельностиПоСтатистике();
	ОпределитьДатыДляПолученияВидовДеятельностиПоСтатистике(ПараметрыПолучения);
	ЕстьЗапланированныеВидыДеятельности = Ложь;
	ОпределитьВыбранныхСотрудниковПолучениеДанныхПоСтатистике(ПараметрыПолучения, ЕстьЗапланированныеВидыДеятельности);
	
	Если ПараметрыПолучения.РаботыСотрудники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбраны сотрудники, для которых требуется получить данные видов деятельности по статистике.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Не ЕстьЗапланированныеВидыДеятельности Тогда
		
		ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудниковПослеВопроса("ЗаполнитьПоСотрудникамНеИзменятьОтсутствующие", ПараметрыПолучения);
		
	Иначе
		
		ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения("ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудниковПослеВопроса",
		                                                          ЭтотОбъект,
		                                                          ПараметрыПолучения);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ВопросПриЗаполненииПоСтатистике", 
		             Новый Структура("ВариантЗаполнения", "ЗаполнитьПоСотрудникамНеИзменятьОтсутствующие"), 
		             ЭтотОбъект,,,,
		             ОписаниеОповещенияПослеВопроса, 
		             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокиОтСотрудников(Команда)
	
	Для Каждого РодительскаяСтрока Из ПланЗанятостиОтСотрудников.ПолучитьЭлементы() Цикл
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			Элементы.ПланЗанятостиОтСотрудников.Свернуть(ПодчиненнаяСтрока.ПолучитьИдентификатор());
			
		КонецЦикла;
		
		Элементы.ПланЗанятостиОтСотрудников.Свернуть(РодительскаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиОтСотрудников(Команда)
	
	Для Каждого РодительскаяСтрока Из ПланЗанятостиОтСотрудников.ПолучитьЭлементы() Цикл
		
		Элементы.ПланЗанятостиОтСотрудников.Развернуть(РодительскаяСтрока.ПолучитьИдентификатор()); 
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			Элементы.ПланЗанятостиОтСотрудников.Развернуть(ПодчиненнаяСтрока.ПолучитьИдентификатор());
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапВРаботыСотрудника(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ПланЗанятостиОтСотрудников.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСотрудникРабота <> Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо позиционироваться на этапе технического проекта'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора",                      Истина);
	ПараметрыОткрытия.Вставить("ЗадачаПроцесса",                   ТекущиеДанные.СотрудникРабота);
	ПараметрыОткрытия.Вставить("ТехническийПроект",                ТекущиеДанные.ТехническийПроект);
	ПараметрыОткрытия.Вставить("ИдентификаторыОтображаемыхПланов", ИдентификаторыОтображаемыхПланов(ЭтотОбъект));
	ПараметрыОткрытия.Вставить("СписокУчастников",                 УчастникиВидаПлана);
	ПараметрыОткрытия.Вставить("Заголовок",                        НСтр("ru = 'Подбор участника'"));
	
	ДополнительныеПараметры =  ДанныеПереносимогоЭтапа(ТекущиеДанные);
	
	ОповещениеПослеВыбораСотрудникаДобавлениеЭтапа
		= Новый ОписаниеОповещения("ПослеВыбораСотрудникаДобавлениеЭтапа", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.Планирование.Форма.ОтборПоГруппаРазработки",
	             ПараметрыОткрытия,
	             ЭтотОбъект,,,,
	             ОповещениеПослеВыбораСотрудникаДобавлениеЭтапа,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПодборОтСотрудников(Команда)
	
	Элементы.ГруппаПодборПланЗанятости.Видимость = Не Элементы.ГруппаПодборПланЗанятости.Видимость;
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоВыделеннымТехпроектам(Команда)
	
	ОчиститьСообщения();
	
	ИзменитьОтборТехПроектыПоКомандеИОбновить(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура РаскопироватьВыделеннуюЯчейкуВправоОтСотрудника(Команда)
	
	ОчиститьСообщения();
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ВидыДеятельности"));
	
	РезультатПодготовки = РезультатПодготовкиКопированияЗначенияКолонки(
		"ПланЗанятостиОтСотрудников", ДопустимыеТипы);
	
	Если РезультатПодготовки.Отказ = Истина Тогда
		Возврат; 
	КонецЕсли;
	
	Если РезультатПодготовки.ПоследующиеПериодыНеПустые Тогда
		
		ОповещениеПослеВопроса = Новый ОписаниеОповещения("КопироватьВыделеннуюЯчейкуВправоЗавершение", ЭтотОбъект, РезультатПодготовки);
		ТекстВопроса           = СтрШаблон(НСтр("ru = 'Плановые трудозатраты в периодах начиная с %1 будут изменены на %2. Продолжить?'"), 
		                                   Формат(РезультатПодготовки.НачалоПериодаПланаСКоторогоРаспределяем, "ДФ=dd.MM.yy"),
		                                   РезультатПодготовки.КопируемоеЗначение); 
		
		ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
	Иначе
		
		КопироватьВыделеннуюЯчейкуВправоЗавершение(КодВозвратаДиалога.ОК, РезультатПодготовки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСотрудникаПоЭтапуОтСотрудника(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ПланЗанятостиОтСотрудников.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.СотрудникРабота) <> Тип("СправочникСсылка.ЗадачиПроцесса")
		И ТипЗнч(ТекущиеДанные.СотрудникРабота) <> Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда 
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для просмотра невыполненных задач этапа по участнику необходимо выбрать строку с этапом технического проекта.'")); 
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = ПараметрыОткрытияЗадачЭтапаСотрудника();
	
	Если ТипЗнч(ТекущиеДанные.СотрудникРабота) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
		
		ПараметрыОткрытия.Этап      = ТекущиеДанные.СотрудникРабота;
		ПараметрыОткрытия.ИмяФормы  = "ФормаСписка";
	
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.СотрудникРабота) Тогда
		
		ПараметрыОткрытия.Этап      = ТекущиеДанные.СотрудникРабота;
		
	Иначе
		
		ПараметрыОткрытия.ТехПроект = ТекущиеДанные.ТехническийПроект;
		ПараметрыОткрытия.ИмяФормы  = "ФормаСпискаПараметрическая";
		
	КонецЕсли;
	
	РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
	
	Если РодительскаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия.Исполнитель = РодительскаяСтрока.СотрудникРабота;
	
	ОткрытьФормуЗадачЭтапаСотрудника(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОстатокСУчетомНормативаОтСотрудников(Команда)
	
	ОчиститьСообщения();
	
	ДопустимыеТипы = Новый Массив;
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	
	РезультатПодготовки = РезультатПодготовкиРаспределенияОстатка(
		 "ПланЗанятостиОтСотрудников", ДопустимыеТипы); 
	
	Если РезультатПодготовки.Отказ = Истина Тогда
		Возврат;
	КонецЕсли; 
	
	РезультатРаспределения = РезультатРаспределенияОстатка(РезультатПодготовки);
	
	Если РезультатРаспределения.Успешно Тогда
		
		Если  РезультатРаспределения.КоличествоИзмененныхЗаписей <> 0 Тогда
		
			ТекущаяСтрока = ЭтотОбъект.ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(РезультатПодготовки.ИдентификаторТекущейСтроки); 
			Если ТипЗнч(ТекущаяСтрока.СотрудникРабота) <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
				ТекущаяСтрока.ДополнительныеДанныеНеПолучены        = Истина;
				ТребуетсяПолучениеДополнительныхДанныхОтСотрудников = Истина;
				ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте();
			КонецЕсли;
			
			ТекстОповещения = СтрШаблон(НСтр("ru = 'Было изменено записей плана - %1'"), 
			                            РезультатРаспределения.КоличествоИзмененныхЗаписей);
		
			ПоказатьОповещениеПользователя(НСтр("ru = 'Распределение остатков по нормативам'") ,, ТекстОповещения, БиблиотекаКартинок.Информация32);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьНераспределено(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ПланЗанятостиОтСотрудников.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСотрудник = СтрокаСотрудникПоСтрокеПланаОтСотрудников(ТекущиеДанные);
	
	Если СтрокаСотрудник = Неопределено Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран сотрудник для распределения в плане нераспределенного.'")); 
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Сотрудник",                                     СтрокаСотрудник.СотрудникРабота);
	ПараметрыОткрытия.Вставить("ДатаНачалаПериода",                             ПериодыОтображаемыхПланов(ЭтотОбъект).НачалоПериода);
	ПараметрыОткрытия.Вставить("ВидПлана",                                      ВидПлана);
	ПараметрыОткрытия.Вставить("ПороговоеЗначениеОтображениеЭтапПланЗанятости", ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	ПараметрыОткрытия.Вставить("ВидСогласуемогоРесурсаПлановыхРабот",           ВидСогласуемогоРесурсаПлановыхРабот);
	ПараметрыОткрытия.Вставить("ДатыНачинаяС",                                  ДатыНачалаОтображаемыхПериодов(ЭтотОбъект));
	ПараметрыОткрытия.Вставить("НормативПланируемогоВремени",                   НормативПланируемогоВремени);
	
	ОповещениеПослеЗакрытияФормыНастроекРаспределения = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроекРаспределения", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.Планирование.Форма.РаспределениеНераспределенного", ПараметрыОткрытия, ЭтотОбъект,,,,
	             ОповещениеПослеЗакрытияФормыНастроекРаспределения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриСозданииНаСервере

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	ТекущийПользователь     = Пользователи.ТекущийПользователь();
	ЦветАктивности          = ЦветаСтиля.ЦветАктивности;
	ТекущаяДата             = НачалоДня(ТекущаяДата());
	ИспользуетсяУчетВремени = ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени");
	ЦветТекстаГиперссылки   = ЦветаСтиля.ЦветГиперссылкиЗадачи;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидПланаПользователяПоУмолчанию()

	ВидПлана = Справочники.ВидыПланов.ВидПланаПользователяПоУмолчанию(ТекущийПользователь,
	                                                                  Перечисления.ТипыПланов.Занятости);
	ТекущийВидПлана = ВидПлана;
	
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		
		ПараметрыИзмененияВидаПлана = ПараметрыИзмененияВидаПлана();
		ПараметрыИзмененияВидаПлана.ВидПланаИзменен = Истина;
		ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТипыДоступноРедактированиеДат(ВключаяСотрудника) Экспорт
	
	ТипыРедактированиеДат = Новый СписокЗначений;
	ТипыРедактированиеДат.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	ТипыРедактированиеДат.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	
	Если ВключаяСотрудника Тогда
		ТипыРедактированиеДат.Добавить(Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	
	Возврат ТипыРедактированиеДат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ПодборПодразделенияСотрудники

	// Подразделение сотрудника не указано
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодразделенияСотрудникиСотрудник.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодборПодразделенияСотрудники.Сотрудник");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Подразделения.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Без подразделения>'"));
	
	// Сотрудник уже добавлен в план
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодборПодразделенияСотрудники.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодборПодразделенияСотрудники.ДобавленоВПлан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
#КонецОбласти

#Область ПодборВидыДеятельности
	
	// Уже добавлено в план
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ДобавленоВПлан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	
#КонецОбласти

#Область СоставлениеПлановОтСотрудников

	//Текст группировка без подразделения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиСотрудникРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.СотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Подразделения.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Без подразделения>'")); 
	
	//Выделение участника плана
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиСотрудникРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.Пользователи");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	//Выделение числовых показателей группировок
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиФакт.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОстаток.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиНераспределено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыГруппировокДеревоОтСотрудников();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	//Нераспределено больше 0
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиНераспределено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.Нераспределено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	//Резерв больше нуля
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиРезерв.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.Резерв");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиЗадачи);
	
	//Срок окончания этапа меньше текущей даты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиДатаОкончания.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.ДатаОкончания");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	//Даты редактировать невозможно
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиДатаНачала.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиДатаОкончания.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыДоступноРедактированиеДат(Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина); 
	
	//Этап не заполнен, это этапы верхнего уровня по проекту
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиСотрудникРабота.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.ТипСотрудникРабота");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ЗадачиПроцесса");
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.СотрудникРабота");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Задачи не по шаблону>'"));
	
	//Тип работы Перечисление "ТипыГруппировокСтрокПлана". Это задачи по ошибкам
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиСотрудникРабота.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.ТехническийПроект");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыГруппировокСтрокПлана.РаботаСОшибками;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Задачи по ошибкам>'"));
	
	//Выделение участника плана
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиСотрудникРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтСотрудников.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.Пользователи");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
#КонецОбласти

#Область СоставлениеПлановОтТехПроектов

	//Выделение этапа тех. проекта
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовТехПроектЭтап.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ЗадачиПроцесса");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	//Выделение числовых показателей группировок
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовФакт.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовОстаток.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовНераспределено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыГруппировокДеревоОтТехПроектов();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	//Нераспределено не равно 0
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовНераспределено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.Нераспределено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный); 
	
	//Резерв не равно 0
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовРезерв.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.Резерв");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиЗадачи);
	
	//Срок окончания версии меньше даты 
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовВерсия.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ДатаОкончания");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.СрокВерсии");
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ТехническиеПроекты");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный); 
	
	//Срок даты планирования по этапу меньше даты окончания этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовДатаОкончания.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ДатаОкончания");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.КонецПериодаЭтапаСотрудник");;
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.Пользователи");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	//Даты редактировать невозможно
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовДатаНачала.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовДатаОкончания.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыДоступноРедактированиеДат(Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Этап не заполнен, это этапы верхнего уровня по проекту
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовТехПроектЭтап.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ЗадачиПроцесса");
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.СотрудникРабота");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
		
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Задачи не по шаблону>'"));
	
	
	//Дата начала для сотрудника недоступна для редактирования
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.Пользователи");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина); 
	
	//Дата окончания для сотрудника недоступна для редактирования
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовДатаОкончания.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.Пользователи");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Есть проблемы дата окончания для технического проекта
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПланЗанятостиОтТехпроектовДатаОкончания.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ЕстьПроблемаДатаОкончания");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПланЗанятостиОтТехпроектов.ТипСотрудникРабота");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ТехническиеПроекты");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный); 
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры()
	
	Если Параметры.ОтборПоТехПроектам.Количество() > 0 Тогда
		
		ВыводимыеТехническиеПроекты = Параметры.ОтборПоТехПроектам.Скопировать();
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.НачальнаяСтраница)
		И Параметры.НачальнаяСтраница = "ПоТехПроектам" Тогда
		
		Элементы.СтраницыПросмотрПланаОт.ТекущаяСтраница = Элементы.СтраницаПланЗанятостиОтТехПроектов;
		
	КонецЕсли;
	
	Если Параметры.ПланЗанятостиИзСохраненныхНастроек Тогда
		
		ВидПланаЗанятостиНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВидПланаПоКоторомуВыводятсяДанныеДляЗадач",
		                                                                              "НастройкиПользователя",
		                                                                              Неопределено);
		
		Если ВидПланаЗанятостиНастройки <> Неопределено Тогда
			ВидПлана = ВидПланаЗанятостиНастройки;
			ТекущийВидПлана = ВидПланаЗанятостиНастройки;
		КонецЕсли; 
		
		ПараметрыИзмененияВидаПлана = ПараметрыИзмененияВидаПлана();
		ПараметрыИзмененияВидаПлана.ВидПланаИзменен              = Истина;
		ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтТехПроектов = Истина;
		ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтСотрудников = Ложь;
		
		ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Элементы = Форма.Элементы;
	ЭтоВладелецПлана = ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(Форма.ВладельцыПлана, Форма.ТекущийПользователь);
	ВидПланаНеПустой = ЗначениеЗаполнено(Форма.ВидПлана);
	
	Если Элементы.ГруппаПодборПланЗанятости.Видимость Тогда
		Элементы.СкрытьПоказатьПодбор.Картинка = БиблиотекаКартинок.НавигацияВперед;
	Иначе
		Элементы.СкрытьПоказатьПодбор.Картинка = БиблиотекаКартинок.НавигацияНазад;
	КонецЕсли;
	
	Если Элементы.ГруппаПланЗанятостиОтТехПроектовПодбор.Видимость Тогда
		Элементы.СкрытьПоказатьПодборОтТехПроекта.Картинка = БиблиотекаКартинок.НавигацияВперед;
	Иначе
		Элементы.СкрытьПоказатьПодборОтТехПроекта.Картинка = БиблиотекаКартинок.НавигацияНазад;
	КонецЕсли;
	
	Если Форма.ТекущийСотрудник = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") Тогда
		Элементы.СтраницыПодборВидовДеятельности.ТекущаяСтраница = Элементы.СтраницаПодборВидовДеятельностиПустая;
	Иначе
		Элементы.СтраницыПодборВидовДеятельности.ТекущаяСтраница = Элементы.СтраницаПодборВидовДеятельности;
	КонецЕсли;
	
	Если Форма.ТекущийЭтап = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
		Элементы.СтраницыПодборСотрудников.ТекущаяСтраница = Элементы.СтраницаПодборСотрудниковПустая;
	Иначе
		Элементы.СтраницыПодборСотрудников.ТекущаяСтраница = Элементы.СтраницаПодборСотрудников;
	КонецЕсли;
	
	Элементы.ГруппаНастройки.Видимость                                                              = Форма.ЕстьНормативПланируемогоВремени;
	Элементы.РаспределитьОстатокСУчетомНорматива.Видимость                                          = Форма.ЕстьНормативПланируемогоВремени;
	Элементы.ПланЗанятостиОтСотрудниковКонтекстноеМенюРаспределитьОстатокСУчетомНорматива.Видимость = Форма.ЕстьНормативПланируемогоВремени;
	Элементы.ПланЗанятостиОтТехпроектовКонтекстноеМенюРаспределитьОстатокСУчетомНорматива.Видимость = Форма.ЕстьНормативПланируемогоВремени;
	Элементы.РаспределитьОстатокСУчетомНормативаОтТехПроектов.Видимость                             = Форма.ЕстьНормативПланируемогоВремени;
	
	Элементы.ЗафиксироватьПлан.Видимость         = ЭтоВладелецПлана;
	Элементы.ЗафиксироватьПлан.Доступность       = Форма.ДоступнаФиксация;

	Элементы.ОтменитьФиксациюПлана.Видимость   = ЭтоВладелецПлана;
	Элементы.ОтменитьФиксациюПлана.Доступность = Форма.ДоступнаОтменаФиксации;
	
	Элементы.ДекорацияПредставлениеОтборСотрудников.Видимость = ВидПланаНеПустой;
	Элементы.ДекорацияОтборПоТехПроектам.Видимость            = ВидПланаНеПустой;
	
	Элементы.КонтрольПланирования.Доступность              = ВидПланаНеПустой;
	Элементы.КонтрольПланированияОтТехпроектов.Доступность = ВидПланаНеПустой;
	
	Элементы.ПланЗанятостиОтСотрудниковКонтекстноеМенюРаспределитьНераспределено.Доступность = ВидПланаНеПустой;
	Элементы.РаспределитьНераспределено.Доступность                                          = ВидПланаНеПустой;

КонецПроцедуры 

#КонецОбласти

#Область ИзменениеВидаПлана

&НаСервере
Процедура ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана)
	
	Если ПараметрыИзмененияВидаПлана.ВидПланаИзменен = Ложь
		И ТекущийВидПлана <> ВидПлана Тогда
		
		ПараметрыИзмененияВидаПлана.ВидПланаИзменен = Истина;
		ТекущийВидПлана = ВидПлана;
		
	КонецЕсли;
	
	Если ПараметрыИзмененияВидаПлана.ВидПланаИзменен = Ложь
		И  ТекущаяДатаНеСоответствуетПериодамПланирования() Тогда
		
		ПараметрыИзмененияВидаПлана.ВидПланаИзменен = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		
		ОчиститьДанныеПлановВФорме();
		ОчиститьВсеТаблицыФормы();
		
	Иначе
		
		ЗаполнитьДанныеВидаПлана(ПараметрыИзмененияВидаПлана);
		ЗаполнитьДанныеПланов(ПараметрыИзмененияВидаПлана);
		
	КонецЕсли;
	
	ОпределитьЗаголовкиКомандФиксации(ЭтотОбъект);
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ОчиститьВсеТаблицыФормы()
	
	ВидыДеятельности.Очистить();
	ВладельцыПлана.Очистить();
	ОтображаемыеПланы.Очистить();
	ПланЗанятостиОтСотрудников.ПолучитьЭлементы().Очистить();
	ПланЗанятостиОтТехпроектов.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПлановВФорме()
	
	УдаляемыеРеквизиты = Новый Массив;
	
	Для Каждого СтрокаОтображаемыйПлан Из ОтображаемыеПланы Цикл
		
		УдаляемыеРеквизиты.Добавить("ПланЗанятостиОтСотрудников." + СтрокаОтображаемыйПлан.ИмяКолонкиПлановыеТрудозатраты);
		УдаляемыеРеквизиты.Добавить("ПланЗанятостиОтСотрудников." + СтрокаОтображаемыйПлан.ИмяКолонкиНеВходитВПериод);
		УдаляемыеРеквизиты.Добавить("ПланЗанятостиОтСотрудников." + СтрокаОтображаемыйПлан.ИмяКолонкиРедактированиеДоступно);
		УдаляемыеРеквизиты.Добавить("ПланЗанятостиОтСотрудников." + СтрокаОтображаемыйПлан.ИмяКолонкиОстатокПоНормативу);
		
		УдаляемыеРеквизиты.Добавить("ПланЗанятостиОтТехпроектов." + СтрокаОтображаемыйПлан.ИмяКолонкиПлановыеТрудозатраты);
		УдаляемыеРеквизиты.Добавить("ПланЗанятостиОтТехпроектов." + СтрокаОтображаемыйПлан.ИмяКолонкиНеВходитВПериод);
		УдаляемыеРеквизиты.Добавить("ПланЗанятостиОтТехпроектов." + СтрокаОтображаемыйПлан.ИмяКолонкиРедактированиеДоступно);
		
		Элементы.Удалить(Элементы.Найти("ПланЗанятостиОтСотрудников" + СтрокаОтображаемыйПлан.ИмяКолонкиПлановыеТрудозатраты));
		Элементы.Удалить(Элементы.Найти("ПланЗанятостиОтСотрудников" + СтрокаОтображаемыйПлан.ИмяКолонкиОстатокПоНормативу));
		Элементы.Удалить(Элементы.Найти("ПланЗанятостиОтТехпроектов" + СтрокаОтображаемыйПлан.ИмяКолонкиПлановыеТрудозатраты));
		
	КонецЦикла;
	
	ИзменитьРеквизиты( , УдаляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВидаПлана(ПараметрыИзмененияВидаПлана)

	ДанныеВидаПлана = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
	
	НаименованиеВидаПлана                         = ДанныеВидаПлана.Наименование;
	ВидСогласуемогоРесурсаПлановыхРабот           = ДанныеВидаПлана.ВидСогласуемогоРесурсаПлановыхРабот;
	ЕдиницаИзмеренияВидРесурса                    = ДанныеВидаПлана.ЕдиницаИзмеренияВидРесурса;
	НаименованиеВидРесурса                        = ДанныеВидаПлана.НаименованиеВидРесурса;
	ПороговоеЗначениеОтображениеЭтапПланЗанятости = ДанныеВидаПлана.ПороговоеЗначениеЭтапаПопаданиеВПланЗанятости;
	
	ПланированиеКлиентСервер.УстановитьЗначенияПараметровРасчетаПоНормативам(ЭтотОбъект,
	                                                                         ДанныеВидаПлана.НормативПланируемогоВремени,
	                                                                         ДанныеВидаПлана.ПорогОтклоненияОтНормативаПланируемогоВремени,
	                                                                         ИнвертироватьОтображениеЗапланированоПоСотруднику);
	
	НастройкиПланирования.Загрузить(ДанныеВидаПлана.ВсеНастройкиПланирования);
	
	Если ПараметрыИзмененияВидаПлана.ОтображаемыеУчастникиЗагружены Тогда 
		
		ОпределитьОтображаемыхУчастниковПланированияПослеЗагрузки(ДанныеВидаПлана.Участники);
		
	Иначе
		
		УчастникиВидаПлана.ЗагрузитьЗначения(ДанныеВидаПлана.Участники);
		
		Если ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(ВладельцыПлана, ТекущийПользователь)
			Или УчастникиВидаПлана.НайтиПоЗначению(ТекущийПользователь) = Неопределено Тогда
			
			Для Каждого ЭлементСписка Из УчастникиВидаПлана Цикл
				ЭлементСписка.Пометка = Истина;
			КонецЦикла;
			
		Иначе
			
			НайденныйЭлемент = УчастникиВидаПлана.НайтиПоЗначению(ТекущийПользователь);
			Если НайденныйЭлемент <> Неопределено Тогда
				НайденныйЭлемент.Пометка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидСогласуемогоРесурсаПлановыхРабот) Тогда
		
		Элементы.ЗапланироватьСотрудниковПоЭтапу.Видимость = Истина;
		Элементы.ЗапланироватьСотрудниковПоЭтапу.Заголовок = СтрШаблон(НСтр("ru = 'Указать %1 по сотрудникам в этапе'"), НРег(НаименованиеВидРесурса));
		
	Иначе
		
		Элементы.ЗапланироватьСотрудниковПоЭтапу.Видимость = Ложь;
		
	КонецЕсли;
	
	ВладельцыПлана.ЗагрузитьЗначения(ДанныеВидаПлана.ВладельцыПлана);
	ЗаполнитьПодборВидовДеятельности();
	
	ПодразделенияСотрудники = Планирование.НовыйДеревоПодразделенияСотрудники();
	ЗаполнитьПодборУчастниковДляОтображенияОтТехПроектов(ПодразделенияСотрудники);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПланов(ПараметрыИзмененияВидаПлана)
	
	Если ПараметрыИзмененияВидаПлана.ВидПланаИзменен Тогда
		
		ОчиститьДанныеПлановВФорме();
		
		ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
		ПараметрыПолученияПлановПоПериоду.ВидПлана              = ВидПлана;
		ПараметрыПолученияПлановПоПериоду.ДатаНачала            = ТекущаяДата;
		ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = НастройкиПланирования[0];
		Если ВыводитьПериодыПланированияПо >= ТекущаяДата Тогда
			ПараметрыПолученияПлановПоПериоду.ДатаОкончания      = ВыводитьПериодыПланированияПо;
		Иначе
			ПараметрыПолученияПлановПоПериоду.КоличествоПериодов = 5;
		КонецЕсли;
		
		ТаблицаПланов = Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
		ОтображаемыеПланы.Загрузить(ТаблицаПланов);
		УстановитьПризнакОтображаетсяВТаблицеПланов();
		ОпределитьДатуОтображенияПланов();
		ОтобразитьТаблицыПланирования();
	
	КонецЕсли;
	
	Если ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтСотрудников Тогда
		ЗаполнитьДеревоОтСотрудников();
	КонецЕсли;
	
	Если ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтТехПроектов Тогда
		ЗаполнитьДеревоОтТехническихПроектов();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПризнакОтображаетсяВТаблицеПланов()
	
	Для Каждого СтрокаТаблицы Из ОтображаемыеПланы Цикл
		
		СтрокаТаблицы.Отображается = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДатуОтображенияПланов()
	
	Если Не ЗначениеЗаполнено(ВыводитьПериодыПланированияПо) Тогда
	
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Отображается", Истина);
		
		НайденныеСтроки = ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
		КоличествоОтображаемыхПериодов = НайденныеСтроки.Количество();
		Если КоличествоОтображаемыхПериодов > 0 Тогда
			ВыводитьПериодыПланированияПо                = НайденныеСтроки[КоличествоОтображаемыхПериодов - 1].КонецПериода;
			ТекущееЗначениеВыводитьПериодыПланированияПо = ВыводитьПериодыПланированияПо;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьТаблицыПланирования()
	
	СоздатьРеквизитыПериодовТаблицПланирования();
	ДобавитьЭлементыФормыПериодовТаблицПланирования();
	
	УправлениеВидимостьюПлановыеТрудозатратыОстатокПоНормативу(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементыФормыПериодовТаблицПланирования()
	
	ТипыГруппировокДеревоОтСотрудников = ТипыГруппировокДеревоОтСотрудников();
	ТипыГруппировокДеревоОтТехПроектов = ТипыГруппировокДеревоОтТехПроектов();
	
	Для Каждого СтрокаТаблицы Из ОтображаемыеПланы Цикл
		
		ИмяКолонки = ИмяКолонкиПлановыеТрудозатраты(СтрокаТаблицы.ИдентификаторПлана);
		
		ЭлементКолонкаОтСотрудников =  РезультатСозданияКолонкиПлановыеТрудозатраты(Элементы.ПланЗанятостиОтСотрудников, 
		                                                                            "ПланЗанятостиОтСотрудников", 
		                                                                             СтрокаТаблицы,
		                                                                             ТипыГруппировокДеревоОтСотрудников,
		                                                                             ИмяКолонки);
		
		ЭлементКолонкаОтТехПроектов =  РезультатСозданияКолонкиПлановыеТрудозатраты(Элементы.ПланЗанятостиОтТехпроектов,
		                                                                            "ПланЗанятостиОтТехпроектов",
		                                                                            СтрокаТаблицы,
		                                                                            ТипыГруппировокДеревоОтТехПроектов,
		                                                                            ИмяКолонки);
		 
		ИмяКолонки = ИмяКолонкиОстатокПоНормативу(СтрокаТаблицы.ИдентификаторПлана);
		
		ЭлементКолонкаОтСотрудников =  РезультатСозданияКолонкиПлановыеТрудозатраты(Элементы.ПланЗанятостиОтСотрудников, 
		                                                                            "ПланЗанятостиОтСотрудников", 
		                                                                             СтрокаТаблицы,
		                                                                             ТипыГруппировокДеревоОтСотрудников,
		                                                                             ИмяКолонки);
		
		СтрокаТаблицы.Создано = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РезультатСозданияКолонкиПлановыеТрудозатраты(РодительскаяТаблицаФормы,
	                                                 ИмяТаблицыРеквизита,
	                                                 СтрокаТаблицыОтображаемыеПериоды,
	                                                 ТипыГруппировок,
	                                                 ИмяКолонкиРеквизита)

	НаименованиеЭлементаКолонки = ИмяТаблицыРеквизита + ИмяКолонкиРеквизита;
	
	Если Не СтрокаТаблицыОтображаемыеПериоды.Создано Тогда
		
		ЭлементКолонка = Элементы.Добавить(НаименованиеЭлементаКолонки,
		                                   Тип("ПолеФормы"),
		                                   РодительскаяТаблицаФормы);
		
		ЭлементКолонка.ПутьКДанным = ИмяТаблицыРеквизита + "." + ИмяКолонкиРеквизита;
		ЭлементКолонка.Вид         = ВидПоляФормы.ПолеВвода;
		
		ЭлементКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_" + ИмяТаблицыРеквизита + "ПриИзменении");
		
		УстановитьУсловноеОформлениеДляСозданногоЭлементаПлановыеТрудозатраты(НаименованиеЭлементаКолонки,
		                                                                      ИмяКолонкиРеквизита,
		                                                                      ИмяТаблицыРеквизита,
		                                                                      СтрокаТаблицыОтображаемыеПериоды,
		                                                                      ТипыГруппировок); 
		
	Иначе
		
		ЭлементКолонка = Элементы.Найти(НаименованиеЭлементаКолонки);
		
	КонецЕсли;
	
	ЭлементКолонка.Видимость = СтрокаТаблицыОтображаемыеПериоды.Отображается;
	
	Если ТекущаяДата >= СтрокаТаблицыОтображаемыеПериоды.НачалоПериода
		И ТекущаяДата <= СтрокаТаблицыОтображаемыеПериоды.КонецПериода Тогда
		ЭлементКолонка.ШрифтЗаголовка = Новый Шрифт(,,Истина);
	Иначе
		ЭлементКолонка.ШрифтЗаголовка = Новый Шрифт();
	КонецЕсли;
	
	ОпределитьКартинкуКолонкиПериодаПланирования(ЭлементКолонка, СтрокаТаблицыОтображаемыеПериоды.Зафиксирован);
	
	ЭлементКолонка.Заголовок = ПредставлениеПериодаПлана(СтрокаТаблицыОтображаемыеПериоды.НачалоПериода, СтрокаТаблицыОтображаемыеПериоды.КонецПериода);
	
	Возврат ЭлементКолонка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаПлана(НачалоПериода, КонецПериода)
	
	Возврат СтрШаблон("%1 - %2",
	                  Формат(НачалоПериода, "ДФ=dd.MM.yy"),
	                  Формат(КонецПериода, "ДФ=dd.MM.yy"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьКартинкуКолонкиПериодаПланирования(ЭлементКолонка, Зафиксирован)

	Если Зафиксирован Тогда
		
		ЭлементКолонка.КартинкаШапки = БиблиотекаКартинок.ОбъектНаКонтроле;
		
	Иначе
		
		ЭлементКолонка.КартинкаШапки = БиблиотекаКартинок.Изменить;
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформлениеДляСозданногоЭлементаПлановыеТрудозатраты(НаименованиеЭлементаКолонки,
	                                                                            ИмяКолонкиРеквизита,
	                                                                            ИмяТаблицыРеквизита,
	                                                                            СтрокаТаблицыОтображаемыеПериоды,
	                                                                            ТипыГруппировок)
	
	РедактируемыеТипыРабот = Новый Массив;
	РедактируемыеТипыРабот.Добавить(Тип("СправочникСсылка.ВидыДеятельности"));
	РедактируемыеТипыРабот.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	
	// Выделение фоном периодов, которые  попадают в плановые даты этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлементаКолонки);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицыРеквизита + "." + СтрокаТаблицыОтображаемыеПериоды.ИмяКолонкиНеВходитВПериод);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаВходитВПериодПланирования);
	
	// Выделение фоном периодов, которые не попадают в плановые даты этапа
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлементаКолонки);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицыРеквизита + "." + СтрокаТаблицыОтображаемыеПериоды.ИмяКолонкиРедактированиеДоступно);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//Выделение числовых показателей группировок
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлементаКолонки);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицыРеквизита + ".ТипСотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипыГруппировок;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	Если ИмяТаблицыРеквизита = "ПланЗанятостиОтСотрудников" Тогда
		
		// Выделение плановых часов сотрудника, если есть отклонение от нормативов
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(НаименованиеЭлементаКолонки);
		
		ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
			ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицыРеквизита + ".ТипСотрудникРабота");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.Пользователи");
			
			ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьНормативПланируемогоВремени");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;
			
			ГруппаЭлементовОтбораИли = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
				ОтборЭлемента = ГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицыРеквизита + "." + ИмяКолонкиРеквизита);
				ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
				ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВыделятьЗапланированноеСотрудникаЕслиБольше");
				
				ОтборЭлемента = ГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяТаблицыРеквизита + "." + ИмяКолонкиРеквизита);
				ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
				ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВыделятьЗапланированноеСотрудникаЕслиМеньше");
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыПериодовТаблицПланирования()
	
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеТипаПлановыеТрудозатраты = Новый ОписаниеТипов(Метаданные.РегистрыСведений.ЗаписиПлана.Ресурсы.ПланируемыеТрудозатраты.Тип.Типы());
	ОписаниеТипаБулево               = Новый ОписаниеТипов("Булево");
	
	Для Каждого СтрокаТаблицы Из ОтображаемыеПланы Цикл
		
		Если СтрокаТаблицы.Отображается
			И Не СтрокаТаблицы.Создано Тогда
			
			ИдентификаторПланаСтрокой        = ПланированиеКлиентСервер.ИдентификаторПланаСтрокой(СтрокаТаблицы.ИдентификаторПлана);
			ИмяКолонкиПлановыеТрудозатраты   = ИмяКолонкиПлановыеТрудозатраты(СтрокаТаблицы.ИдентификаторПлана);
			ИмяКолонкиНеВходитВПериод        = ИмяКолонкиНеВходитВПериод(СтрокаТаблицы.ИдентификаторПлана);
			ИмяКолонкиРедактированиеДоступно = ИмяКолонкиРедактированиеДоступно(СтрокаТаблицы.ИдентификаторПлана);
			ИмяКолонкиОстатокПоНормативу     = ИмяКолонкиОстатокПоНормативу(СтрокаТаблицы.ИдентификаторПлана);
			
			СтрокаТаблицы.ИмяКолонкиПлановыеТрудозатраты   = ИмяКолонкиПлановыеТрудозатраты;
			СтрокаТаблицы.ИмяКолонкиНеВходитВПериод        = ИмяКолонкиНеВходитВПериод;
			СтрокаТаблицы.ИмяКолонкиРедактированиеДоступно = ИмяКолонкиРедактированиеДоступно;
			СтрокаТаблицы.ИмяКолонкиОстатокПоНормативу     = ИмяКолонкиОстатокПоНормативу;
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонкиПлановыеТрудозатраты,
			                              ОписаниеТипаПлановыеТрудозатраты,
			                              "ПланЗанятостиОтСотрудников"));
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонкиНеВходитВПериод,
			                              ОписаниеТипаБулево,
			                              "ПланЗанятостиОтСотрудников"));
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонкиРедактированиеДоступно,
			                              ОписаниеТипаБулево,
			                              "ПланЗанятостиОтСотрудников"));
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонкиОстатокПоНормативу,
			                              ОписаниеТипаПлановыеТрудозатраты,
			                              "ПланЗанятостиОтСотрудников"));
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонкиПлановыеТрудозатраты,
			                              ОписаниеТипаПлановыеТрудозатраты,
			                              "ПланЗанятостиОтТехпроектов"));
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонкиНеВходитВПериод,
			                              ОписаниеТипаБулево,
			                              "ПланЗанятостиОтТехпроектов"));
			
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяКолонкиРедактированиеДоступно,
			                              ОписаниеТипаБулево,
			                              "ПланЗанятостиОтТехпроектов"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыИзмененияВидаПлана()
	
	ПараметрыИзменения = Новый Структура;
	
	ПараметрыИзменения.Вставить("ВидПланаИзменен",                Ложь);
	ПараметрыИзменения.Вставить("ОтображаемыеУчастникиЗагружены", Ложь);
	ПараметрыИзменения.Вставить("ОбновлятьДеревоОтСотрудников",   Истина);
	ПараметрыИзменения.Вставить("ОбновлятьДеревоОтТехПроектов",   Истина);
	
	Возврат ПараметрыИзменения;
	
КонецФункции 

&НаСервере
Процедура ОпределитьОтображаемыхУчастниковПланированияПослеЗагрузки(УчастникиДанныеВидаПлана)
	
	ЗагруженныеУчастники = УчастникиВидаПлана.Скопировать();
	
	УчастникиВидаПлана.ЗагрузитьЗначения(УчастникиДанныеВидаПлана);
	
	Для Каждого КлючИЗначение Из УчастникиВидаПлана Цикл
		
		НайденныйЭлемент = ЗагруженныеУчастники.НайтиПоЗначению(КлючИЗначение.Значение);
		Если НайденныйЭлемент <> Неопределено 
			И НайденныйЭлемент.Пометка Тогда
			
			КлючИЗначение.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборВидовДеятельности()
	
	ВидыДеятельности.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДеятельности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыДеятельности КАК ВидыДеятельности
	|ГДЕ
	|	НЕ ВидыДеятельности.ПометкаУдаления
	|	И ВидыДеятельности.Используется
	|	И НЕ ВидыДеятельности.ТребуемаяДетализация = ЗНАЧЕНИЕ(Перечисление.ДетализацияВПланированииИУчетеВремени.Работа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыДеятельности.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ВидыДеятельности.Добавить();
		НоваяСтрока.Работа    = Выборка.Ссылка;
		НоваяСтрока.ТипРаботы = Тип("СправочникСсылка.ВидыДеятельности");
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаПлана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидПлана = Результат;
	
	ПриИзмененииВидаПланаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаПланаНаКлиенте()
	
	Если ВидПлана <> ТекущийВидПлана Тогда
		
		ПараметрыИзмененияВидаПлана = ПараметрыИзмененияВидаПлана();
		ПараметрыИзмененияВидаПлана.ВидПланаИзменен                = Истина;
		ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтТехПроектов   = Истина;
		ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтСотрудников   = Истина;
		ПараметрыИзмененияВидаПлана.ОтображаемыеУчастникиЗагружены = Ложь;
		
		ТекущийВидПлана = ВидПлана;
		
		ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененияОтбражаемыхУчастников

&НаКлиенте
Процедура ПослеЗакрытияВыбораУчастников(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПолученияОтбораПоСКД = РезультатПолученияОтбораПоСКД(Результат, "НастройкиОтбораУчастники");
	ВывестиПредставлениеОткрытьПодборСотрудники(ЭтотОбъект, РезультатПолученияОтбораПоСКД.ПредставлениеОтбораСокр);
	
	Если ПланированиеКлиентСервер.СпискиЗначенийИдентичны(РезультатПолученияОтбораПоСКД.СписокОтбора, ВыводимыеСотрудники) Тогда
		Возврат;
	КонецЕсли;
	
	ВыводимыеСотрудники = РезультатПолученияОтбораПоСКД.СписокОтбора;
	
	ОбновитьДанныеСтраницаОтСотрудниковНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборУчастниковДляОтображенияОтТехПроектов(ПодразделенияСотрудники)
	
	ПодборПодразделенияСотрудники.ПолучитьЭлементы().Очистить();
	
	Для Каждого СтрокаПодразделение Из ПодразделенияСотрудники.Строки Цикл
		
		СтрокаПодразделениеПодбор = ПодборПодразделенияСотрудники.ПолучитьЭлементы().Добавить();
		СтрокаПодразделениеПодбор.Сотрудник = СтрокаПодразделение.Сотрудник;
		
		Для Каждого СтрокаСотрудник Из СтрокаПодразделение.Строки Цикл
			
			СтрокаСотрудникПодбор = СтрокаПодразделениеПодбор.ПолучитьЭлементы().Добавить();
			СтрокаСотрудникПодбор.Сотрудник = СтрокаСотрудник.Сотрудник;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтборСотрудникиПоКомандеИОбновить(ИмяКоманды)
	
	ВыделенныеСотрудники =  ВыделенныеСотрудникиПланОтТехПроектов();
	
	Если ВыделенныеСотрудники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выделено ни одной строки с участником плана'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	СписокУчастников = Новый СписокЗначений;
	
	Для Каждого ВыделенныйСотрудник Из ВыделенныеСотрудники Цикл
		
		СписокУчастников.Добавить(ВыделенныйСотрудник,,Истина);
		
	КонецЦикла;
	
	УстановитьОтборУчастникиПоСпискуУчастников(СписокУчастников);
	
	ОбновитьДанныеСтраницаОтСотрудниковНаКлиенте();
	Элементы.СтраницыПросмотрПланаОт.ТекущаяСтраница = Элементы.СтраницаПланЗанятостиОтСотрудника;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеСотрудникиПланОтТехПроектов()

	ВыделенныеСотрудники = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПланЗанятостиОтТехпроектов.ВыделенныеСтроки Цикл

		ДанныеСтроки = Элементы.ПланЗанятостиОтТехпроектов.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;;
		
		Если ВыделенныеСотрудники.Найти(ДанныеСтроки.СотрудникРабота) = Неопределено Тогда
			ВыделенныеСотрудники.Добавить(ДанныеСтроки.СотрудникРабота);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыделенныеСотрудники;
	
КонецФункции 

#КонецОбласти

#Область ЗаполнениеПланаОтСотрудников

&НаСервере
Функция ТекстЗапросаДанныеПланаОтСотрудников()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ЗаписиПлана.Сотрудник               КАК Сотрудник,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ СуществующиеЗаписиПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В(&ИдентификаторыОтоображаемыхПланов)
	|	И ЗаписиПлана.Сотрудник В(&ВыбранныеСотрудники)
	|	И ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь                    КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка                                            КАК Задача,
	|	ИерархияЗадачПроцесса.Родитель                                   КАК Родитель
	|ПОМЕСТИТЬ НевыполненныеЗадачиЭтапов
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ИерархияЗадачПроцесса.Уровень = 0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидРесурса
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь В (&ВыбранныеСотрудники)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		И НЕ ТехническиеПроекты.ПометкаУдаления
	|		И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	| 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь                    КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка                                            КАК Задача,
	|	ИерархияЗадачПроцесса.Родитель                                   КАК Родитель
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ИерархияЗадачПроцесса.Уровень = 0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидРесурса
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь В (&ВыбранныеСотрудники)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ошибки КАК Ошибки
	|		ПО ЗадачиПроцесса.Предмет = Ошибки.Ссылка
	|		И НЕ Ошибки.ПометкаУдаления
	|		И Ошибки.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Задача,
	|	Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НевыполненныеЗадачиЭтапов.Исполнитель                            КАК Исполнитель,
	|	НевыполненныеЗадачиЭтапов.Родитель                               КАК Родитель,
	|	СУММА(ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0))  КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                     КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаЗапланированоУчетВремени
	|ИЗ
	|	НевыполненныеЗадачиЭтапов КАК НевыполненныеЗадачиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО (ЗадачиЗапланированоПоСотрудникам.Задача = НевыполненныеЗадачиЭтапов.Задача)
	|			И ЗадачиЗапланированоПоСотрудникам.Пользователь = НевыполненныеЗадачиЭтапов.Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = НевыполненныеЗадачиЭтапов.Задача)
	|			И (УчетВремени.Пользователь = НевыполненныеЗадачиЭтапов.Исполнитель)
	|			И (УчетВремени.Период < &НачалоПериодаОтображаемыхПланов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НевыполненныеЗадачиЭтапов.Родитель,
	|	НевыполненныеЗадачиЭтапов.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель                КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет Ссылка Справочник.Ошибки 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка) 
	|			ТОГДА ЗадачиПроцесса.Предмет 
	|		ИНАЧЕ ЭтапыСотрудникаЗапланированоУчетВремени.Родитель
	|	КОНЕЦ                                                              КАК Родитель,
	|	СУММА(ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано)       КАК Запланировано,
	|	СУММА(ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды)  КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланах
	|ИЗ
	|	ЭтапыСотрудникаЗапланированоУчетВремени КАК ЭтапыСотрудникаЗапланированоУчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЭтапыСотрудникаЗапланированоУчетВремени.Родитель = ЗадачиПроцесса.Ссылка) 
	|ГДЕ
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|	ИЛИ ЭтапыСотрудникаЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСотрудникаЗапланированоУчетВремени.Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет Ссылка Справочник.Ошибки 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка) 
	|			ТОГДА ЗадачиПроцесса.Предмет 
	|			ИНАЧЕ ЭтапыСотрудникаЗапланированоУчетВремени.Родитель
	|	 КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ПланируемыеТрудозатраты        КАК ПланируемыеТрудозатраты,
	|	ВложенныйЗапрос.Сотрудник                      КАК Сотрудник,
	|	ВложенныйЗапрос.Работа                         КАК Работа,
	|	ВложенныйЗапрос.ИдентификаторПлана             КАК ИдентификаторПлана,
	|	ВложенныйЗапрос.СтатусЗадачи                   КАК СтатусЗадачи,
	|	ВложенныйЗапрос.ПлановаяДатаНачалаЗадачи       КАК ПлановаяДатаНачалаЗадачи,
	|	ВложенныйЗапрос.ПлановаяДатаОкончанияЗадачи    КАК ПлановаяДатаОкончанияЗадачи,
	|	ВложенныйЗапрос.ТехническийПроект              КАК ТехническийПроект,
	|	ВложенныйЗапрос.ВерсияПроекта                  КАК ВерсияПроекта,
	|	ВложенныйЗапрос.ПлановаяДатаОкончанияТехПроект КАК ПлановаяДатаОкончанияТехПроект,
	|	ВложенныйЗапрос.ПлановаяДатаНачалаТехПроект    КАК ПлановаяДатаНачалаТехПроект,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Работа ССЫЛКА Справочник.ВидыДеятельности
	|			ТОГДА 2
	|		КОГДА ВложенныйЗапрос.Работа ССЫЛКА Перечисление.ТипыГруппировокСтрокПлана
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УпорядочиваниеПоТипуРаботы,
	|	ВложенныйЗапрос.ЗначениеУпорядочиванияЭтапа КАК ЗначениеУпорядочиванияЭтапа
	|ПОМЕСТИТЬ ДанныеВыводимыхРабот
	|ИЗ
	|	(ВЫБРАТЬ
	|		СуществующиеЗаписиПлана.ПланируемыеТрудозатраты                                            КАК ПланируемыеТрудозатраты,
	|		СуществующиеЗаписиПлана.Сотрудник                                                          КАК Сотрудник,
	|		СуществующиеЗаписиПлана.Работа                                                             КАК Работа,
	|		СуществующиеЗаписиПлана.ИдентификаторПлана                                                 КАК ИдентификаторПлана,
	|		ЕСТЬNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)) КАК СтатусЗадачи,
	|		ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, &ПустаяДата)                                   КАК ПлановаяДатаНачалаЗадачи,
	|		ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, &ПустаяДата)                                 КАК ПлановаяДатаОкончанияЗадачи,
	|		ВЫБОР
	|			КОГДА СуществующиеЗаписиПлана.Работа ССЫЛКА Перечисление.ТипыГруппировокСтрокПлана 
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)
	|			КОГДА СуществующиеЗаписиПлана.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|		КОНЕЦ                                                                                      КАК ТехническийПроект,
	|		ВЫБОР
	|			КОГДА СуществующиеЗаписиПлана.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Версия, ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Версия
	|		КОНЕЦ                                                                                      КАК ВерсияПроекта,
	|		ВЫБОР
	|			КОГДА СуществующиеЗаписиПлана.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаОкончания, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаОкончания
	|		КОНЕЦ                                                                                      КАК ПлановаяДатаОкончанияТехПроект,
	|		ВЫБОР
	|			КОГДА СуществующиеЗаписиПлана.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаНачала, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаНачала
	|		КОНЕЦ                                                                                      КАК ПлановаяДатаНачалаТехПроект,
	|		ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)                                КАК ЗначениеУпорядочиванияЭтапа
	|	ИЗ
	|		СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО СуществующиеЗаписиПлана.Работа = ЗадачиПроцесса.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка) 
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыБезШаблона
	|			ПО (СуществующиеЗаписиПлана.Работа = ТехническиеПроектыЭтапыБезШаблона.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО СуществующиеЗаписиПлана.Работа = СостоянияЗадачПроцессов.ЗадачаПроцесса
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Исполнитель,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Родитель,
	|		0,
	|		ЕСТЬNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)),
	|		ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, &ПустаяДата),
	|		ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, &ПустаяДата),
	|		ВЫБОР
	|		КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Родитель ССЫЛКА Перечисление.ТипыГруппировокСтрокПлана 
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками)
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Родитель ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Родитель ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Версия, ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Версия
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Родитель ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаОкончания, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаОкончания
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Родитель ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.ПлановаяДатаНачала, &ПустаяДата)
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.ПлановаяДатаНачала
	|		КОНЕЦ,
	|		ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)
	|	ИЗ
	|		ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Родитель = ЗадачиПроцесса.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыБезШаблона
	|			ПО (ЭтапыСотрудникаДляОтображенияВПланах.Родитель = ТехническиеПроектыЭтапыБезШаблона.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Родитель = СостоянияЗадачПроцессов.ЗадачаПроцесса) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка                                 КАК Сотрудник,
	|	Пользователи.Наименование                           КАК НаименованиеСотрудника,
	|	Пользователи.Подразделение                          КАК Подразделение,
	|	ДанныеВыводимыхРабот.Работа                         КАК Работа,
	|	ДанныеВыводимыхРабот.ПланируемыеТрудозатраты        КАК ПланируемыеТрудозатраты,
	|	ДанныеВыводимыхРабот.ИдентификаторПлана             КАК ИдентификаторПлана,
	|	ДанныеВыводимыхРабот.СтатусЗадачи                   КАК СтатусЗадачи,
	|	ДанныеВыводимыхРабот.ПлановаяДатаНачалаЗадачи       КАК ПлановаяДатаНачалаЗадачи,
	|	ДанныеВыводимыхРабот.ПлановаяДатаОкончанияЗадачи    КАК ПлановаяДатаОкончанияЗадачи,
	|	ДанныеВыводимыхРабот.ТехническийПроект              КАК ТехническийПроект,
	|	ДанныеВыводимыхРабот.ПлановаяДатаНачалаТехПроект    КАК ПлановаяДатаНачалаТехПроект,
	|	ДанныеВыводимыхРабот.ПлановаяДатаОкончанияТехПроект КАК ПлановаяДатаОкончанияТехПроект,
	|	ДанныеВыводимыхРабот.ВерсияПроекта                  КАК ВерсияПроекта,
	|	ДанныеВыводимыхРабот.УпорядочиваниеПоТипуРаботы     КАК УпорядочиваниеПоТипуРаботы
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ПО (ДанныеВыводимыхРабот.Сотрудник = Пользователи.Ссылка)
	|ГДЕ
	|	Пользователи.Ссылка В(&ВыбранныеСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	НаименованиеСотрудника,
	|	УпорядочиваниеПоТипуРаботы,
	|	ДанныеВыводимыхРабот.ПлановаяДатаОкончанияТехПроект,
	|	ДанныеВыводимыхРабот.ЗначениеУпорядочиванияЭтапа
	|ИТОГИ ПО
	|	Подразделение,
	|	Сотрудник,
	|	УпорядочиваниеПоТипуРаботы,
	|	ТехническийПроект,
	|	Работа";

КонецФункции

&НаСервере
Процедура ВывестиДанныеВДеревоОтСотрудников(РезультатЗапроса)

	ВыборкаПодразделения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПодразделения.Следующий() Цикл
		
		СтрокаПодразделение = ПланЗанятостиОтСотрудников.ПолучитьЭлементы().Добавить();
		СтрокаПодразделение.ТипСотрудникРабота = Тип("СправочникСсылка.Подразделения");
		СтрокаПодразделение.СотрудникРабота    = ВыборкаПодразделения.Подразделение;
		
		ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, СтрокаПодразделение, "ОтСотрудников");
		ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаПодразделение);
		
		ВыборкаСотрудник = ВыборкаПодразделения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСотрудник.Следующий() Цикл
			
			СтрокаСотрудник = СтрокаПодразделение.ПолучитьЭлементы().Добавить();
			СтрокаСотрудник.ТипСотрудникРабота = Тип("СправочникСсылка.Пользователи");
			СтрокаСотрудник.СотрудникРабота    = ВыборкаСотрудник.Сотрудник;
			
			ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, СтрокаСотрудник, "ОтСотрудников");
			ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаСотрудник);
			
			ВыборкаЗначениеУпорядочивания = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаЗначениеУпорядочивания.Следующий() Цикл
			
				ВыборкаТехническийПроект = ВыборкаЗначениеУпорядочивания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
				Пока ВыборкаТехническийПроект.Следующий() Цикл
					
					ВыборкаРабота = ВыборкаТехническийПроект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаРабота.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаРабота.Работа) Тогда
							Продолжить;
						КонецЕсли;
						
						ЕстьПустойИдентификаторПлана = Ложь;
						
						СтрокаРабота = СтрокаСотрудник.ПолучитьЭлементы().Добавить();
						
						Если ТипЗнч(ВыборкаРабота.Работа) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
							СтрокаРабота.СотрудникРабота = Перечисления.ТипыГруппировокСтрокПлана.ПустаяСсылка();
						ИначеЕсли ТипЗнч(ВыборкаРабота.Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
							СтрокаРабота.СотрудникРабота = Справочники.ЗадачиПроцесса.ПустаяСсылка();
						Иначе
							СтрокаРабота.СотрудникРабота = ВыборкаРабота.Работа;
						КонецЕсли;
						
						СтрокаРабота.ТехническийПроект = ВыборкаРабота.ТехническийПроект; 
						
						ТипРаботы = ТипЗнч(СтрокаРабота.СотрудникРабота);
						
						СтрокаРабота.ТипСотрудникРабота  = ТипРаботы;
						
						Если ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса")
							Или ТипРаботы = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
							СтрокаРабота.ДополнительныеДанныеНеПолучены = Истина;
							ТребуетсяПолучениеДополнительныхДанныхОтСотрудников = Истина;
						ИначеЕсли ТипРаботы = Тип("СправочникСсылка.ВидыДеятельности") Тогда
							СтрокаРабота.ДоступноУдалениеСтроки         = Истина;
						КонецЕсли;
						
						ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, СтрокаРабота, "ОтСотрудников");
						
						ДополнительныеДанныеРаботыЗаполнены = Ложь;
						
						ВыборкаДетали = ВыборкаРабота.Выбрать();
						
						Пока ВыборкаДетали.Следующий() Цикл
							
							Если ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
								
								Если Не ДополнительныеДанныеРаботыЗаполнены Тогда
									
									ДополнительныеДанныеРаботыЗаполнены = Истина;
								
									СтрокаРабота.ТехническийПроект = ВыборкаДетали.ТехническийПроект;
									СтрокаРабота.Версия            = ВыборкаДетали.ВерсияПроекта;
									
									Если ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса")
										И Не ЗначениеЗаполнено(СтрокаРабота.СотрудникРабота) Тогда 
										
										СтрокаРабота.ДатаНачала        = ВыборкаДетали.ПлановаяДатаНачалаТехПроект;
										СтрокаРабота.ДатаОкончания     = ВыборкаДетали.ПлановаяДатаОкончанияТехПроект;
										
									Иначе
										
										СтрокаРабота.ДатаНачала        = ВыборкаДетали.ПлановаяДатаНачалаЗадачи;
										СтрокаРабота.ДатаОкончания     = ВыборкаДетали.ПлановаяДатаОкончанияЗадачи;
									
									КонецЕсли;
									
									ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаРабота);
									
								КонецЕсли;
								
								ТребуетсяПолучениеДополнительныхДанныхОтСотрудников = Истина;
								
							КонецЕсли;
							
							Если ВыборкаДетали.ИдентификаторПлана = 0 Тогда
								ЕстьПустойИдентификаторПлана = Истина;
							КонецЕсли;
							
							Если ВыборкаДетали.ИдентификаторПлана <> 0
								И ВыборкаДетали.ПланируемыеТрудозатраты <> 0 Тогда
								
								ПараметрыПоиска = Новый Структура;
								ПараметрыПоиска.Вставить("ИдентификаторПлана", ВыборкаДетали.ИдентификаторПлана);
								
								НайденныеСтроки = ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
								Если НайденныеСтроки.Количество() <> 0 Тогда
									СтрокаРабота[НайденныеСтроки[0].ИмяКолонкиПлановыеТрудозатраты] = ВыборкаДетали.ПланируемыеТрудозатраты;
									СтрокаРабота[НайденныеСтроки[0].ИмяКолонкиОстатокПоНормативу]   = ВыборкаДетали.ПланируемыеТрудозатраты;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						СтрокаРабота.ДоступноУдалениеСтроки = Не ЕстьПустойИдентификаторПлана;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОтСотрудников()
	
	ПланЗанятостиОтСотрудников.ПолучитьЭлементы().Очистить();
	ТекущийСотрудник                 = Справочники.Пользователи.ПустаяСсылка();
	ИдентификаторыОтображаемыхПланов = ИдентификаторыОтображаемыхПланов(ЭтотОбъект);
	ПериодыОтображаемыхПланов        = ПериодыОтображаемыхПланов(ЭтотОбъект);
	ПараметрыОтображенияЭтапа        = ПланированиеКлиентСервер.ПараметрыОтображенияЭтапаПланаЗанятости(ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	
	Запрос =  Новый Запрос;
	Запрос.Текст = ТекстЗапросаДанныеПланаОтСотрудников();
	
	Запрос.УстановитьПараметр("ВыбранныеСотрудники",                      ВыводимыеСотрудники);
	Запрос.УстановитьПараметр("ИдентификаторыОтоображаемыхПланов",        ИдентификаторыОтображаемыхПланов);
	Запрос.УстановитьПараметр("ПустаяДата",                               Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПараметрыОтображенияЭтапа.ПороговоеЗначениеДляЭтапаПоЗапланировано);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоФакт",          ПараметрыОтображенияЭтапа.ПороговоеЗначениеДляЭтапаПоФакт);
	Запрос.УстановитьПараметр("НачалоПериодаОтображаемыхПланов",          ПериодыОтображаемыхПланов.НачалоПериода);
	Запрос.УстановитьПараметр("ВидРесурса",                               ВидСогласуемогоРесурсаПлановыхРабот);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиДанныеВДеревоОтСотрудников(Результат);
	
	МассивИменКолонок = МассивИменКолонокДляПерерасчетаПослеЗаполненияДерева(ЭтотОбъект);
	ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскихСтрокДереваПоДаннымПодчиненных(
			ЭтотОбъект, 
			"ПланЗанятостиОтСотрудников",
			МассивИменКолонокДляПерерасчетаПослеЗаполненияДерева(ЭтотОбъект));
	
	ПересчитатьОстаткиПоНормативамВДереве(ЭтотОбъект);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьОстатокПоНормативамДляРодительскойСтроки(Форма, СтрокаКПерерасчету)
		
	Для Каждого СтрокаПланы Из Форма.ОтображаемыеПланы Цикл
		
		Если Не СтрокаПланы.Отображается Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаКПерерасчету[СтрокаПланы.ИмяКолонкиОстатокПоНормативу] = СтрокаКПерерасчету[СтрокаПланы.ИмяКолонкиПлановыеТрудозатраты];
		
	КонецЦикла;
	
	Для Каждого СтрокаСотрудник Из СтрокаКПерерасчету.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаПланы Из Форма.ОтображаемыеПланы Цикл
			
			Если Не СтрокаПланы.Отображается Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаСотрудник[СтрокаПланы.ИмяКолонкиОстатокПоНормативу] = Форма.НормативПланируемогоВремени - СтрокаСотрудник[СтрокаПланы.ИмяКолонкиПлановыеТрудозатраты];
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьОстаткиПоНормативамВДереве(Форма)
	
	Для Каждого СтрокаПодразделение Из Форма.ПланЗанятостиОтСотрудников.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаПланы Из Форма.ОтображаемыеПланы Цикл
			
			Если Не СтрокаПланы.Отображается Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаПодразделение[СтрокаПланы.ИмяКолонкиОстатокПоНормативу] = СтрокаПодразделение[СтрокаПланы.ИмяКолонкиПлановыеТрудозатраты];
			
		КонецЦикла;
		
		Для Каждого СтрокаСотрудник Из СтрокаПодразделение.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаПланы Из Форма.ОтображаемыеПланы Цикл
			
				Если Не СтрокаПланы.Отображается Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаСотрудник[СтрокаПланы.ИмяКолонкиОстатокПоНормативу] = Форма.НормативПланируемогоВремени - СтрокаСотрудник[СтрокаПланы.ИмяКолонкиПлановыеТрудозатраты];
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(Форма, СтрокаРабота, Вариант)
	
	ЭтоВладелецПлана = ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(Форма.ВладельцыПлана,Форма.ТекущийПользователь);
	
	Для Каждого СтрокаОтображаемыеПланы Из Форма.ОтображаемыеПланы Цикл
	
		Если СтрокаОтображаемыеПланы.Зафиксирован
			И Не ЭтоВладелецПлана Тогда
			
			СтрокаРабота[СтрокаОтображаемыеПланы.ИмяКолонкиРедактированиеДоступно] = Ложь;
			
		ИначеЕсли Вариант = "ОтСотрудников" 
			     И СтрокаРабота.ТипСотрудникРабота <> Тип("СправочникСсылка.ВидыДеятельности")
			     И СтрокаРабота.ТипСотрудникРабота <> Тип("СправочникСсылка.ЗадачиПроцесса")
			     И СтрокаРабота.ТипСотрудникРабота <> Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана")Тогда
		
			СтрокаРабота[СтрокаОтображаемыеПланы.ИмяКолонкиРедактированиеДоступно] = Ложь;
			
		ИначеЕсли Вариант = "ОтТехПроектов" 
			     И СтрокаРабота.ТипСотрудникРабота <> Тип("СправочникСсылка.Пользователи") Тогда
			
			СтрокаРабота[СтрокаОтображаемыеПланы.ИмяКолонкиРедактированиеДоступно] = Ложь;
			
		Иначе
			
			СтрокаРабота[СтрокаОтображаемыеПланы.ИмяКолонкиРедактированиеДоступно] = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(Форма, СтрокаПлана)
	
	Для Каждого СтрокаОтображаемыеПланы Из Форма.ОтображаемыеПланы Цикл
		
		Если СтрокаОтображаемыеПланы.НачалоПериода > СтрокаПлана.ДатаОкончания
			Или СтрокаОтображаемыеПланы.КонецПериода < СтрокаПлана.ДатаНачала Тогда
			
			СтрокаПлана[СтрокаОтображаемыеПланы.ИмяКолонкиНеВходитВПериод] = Истина;
			
		Иначе
			
			СтрокаПлана[СтрокаОтображаемыеПланы.ИмяКолонкиНеВходитВПериод] = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеВСпискеСотрудники()
	
	ВыделенныеСотрудники = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПланЗанятостиОтСотрудников.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.Подразделения") Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйСотрудник = Неопределено;
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			
			НайденныйСотрудник = ДанныеСтроки.СотрудникРабота;
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса")
			      Или ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
			
			РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
			
			Если РодительскаяСтрока <> Неопределено 
				И ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
				
				НайденныйСотрудник = РодительскаяСтрока.СотрудникРабота;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НайденныйСотрудник <> Неопределено Тогда
			Если ВыделенныеСотрудники.Найти(НайденныйСотрудник) = Неопределено Тогда
				ВыделенныеСотрудники.Добавить(НайденныйСотрудник);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыделенныеСотрудники;
	
КонецФункции

&НаКлиенте
Функция ВыделенныеВСпискеТехПроекты()
	
	ВыделенныеТехПроекты = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПланЗанятостиОтТехпроектов.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПланЗанятостиОтТехпроектов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныйТехПроект = Неопределено;
		
		РодительскаяСтрока = ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(ДанныеСтроки);
		
		Если РодительскаяСтрока <> Неопределено 
				И ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
				
				НайденныйТехПроект = РодительскаяСтрока.СотрудникРабота;
				
		КонецЕсли;
		
		Если НайденныйТехПроект <> Неопределено Тогда
			Если ВыделенныеТехПроекты.Найти(НайденныйТехПроект) = Неопределено Тогда
				ВыделенныеТехПроекты.Добавить(НайденныйТехПроект);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыделенныеТехПроекты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторыОтображаемыхПланов(Форма)
	
	ИдентификаторыОтображаемыхПланов = Новый Массив;
	
	Для Каждого СтрокаПланы Из Форма.ОтображаемыеПланы Цикл
		
		Если СтрокаПланы.Отображается Тогда
			
			ИдентификаторыОтображаемыхПланов.Добавить(СтрокаПланы.ИдентификаторПлана);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИдентификаторыОтображаемыхПланов;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеСтраницаОтСотрудников()
	
	ПараметрыИзмененияВидаПлана = ПараметрыИзмененияВидаПлана();
	ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтТехПроектов   = Ложь;
	ПараметрыИзмененияВидаПлана.ОтображаемыеУчастникиЗагружены = Истина;
	ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеСтраницаОтСотрудниковНаКлиенте()

	КлючТекущейСтрокиДерева     = КлючТекущейСтрокиДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота");
	КлючиРазвернутыхУзловДерева = КлючиРазвернутыхУзловДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота");
	
	ОбновитьДанныеСтраницаОтСотрудников();
	
	ВосстановитьРазвернутыеУзлыДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота", КлючиРазвернутыхУзловДерева);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПланЗанятостиОтСотрудников", "СотрудникРабота", КлючТекущейСтрокиДерева);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипыГруппировокДеревоОтСотрудников()
	
	ТипыГруппировкаОтСотрудника = Новый СписокЗначений;
	ТипыГруппировкаОтСотрудника.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипыГруппировкаОтСотрудника.Добавить(Тип("СправочникСсылка.Подразделения"));
	
	Возврат ТипыГруппировкаОтСотрудника;
	
КонецФункции

#КонецОбласти 

#Область ОбработкаИзмененияОтбораПоТехническимПроектам

&НаКлиенте
Процедура ПослеЗакрытияОтбораТехническиеПроекты(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПолученияОтбораПоСКД = РезультатПолученияОтбораПоСКД(Результат, "НастройкиОтбораТехническиеПроекты");
	ВывестиПредставлениеОткрытьПодборТехПроекты(ЭтотОбъект, РезультатПолученияОтбораПоСКД.ПредставлениеОтбораСокр);
	
	Если ПланированиеКлиентСервер.СпискиЗначенийИдентичны(РезультатПолученияОтбораПоСКД.СписокОтбора, ВыводимыеТехническиеПроекты) Тогда
		Возврат;
	КонецЕсли;
	
	ВыводимыеТехническиеПроекты = РезультатПолученияОтбораПоСКД.СписокОтбора;
	
	ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтборТехПроектыПоКомандеИОбновить(ИмяКоманды)

	ВыделенныеТехПроектыПланОтСотрудников =  ВыделенныеТехПроектыПланОтСотрудников();
	
	Если ВыделенныеТехПроектыПланОтСотрудников.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выделено ни одной строки с этапом технического проекта'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ВыводимыеТехническиеПроекты.Очистить();
	СписокТехническихПроектов = Новый СписокЗначений;
		
	Для Каждого ВыделенныйТехПроект Из ВыделенныеТехПроектыПланОтСотрудников Цикл
		
		ВыводимыеТехническиеПроекты.Добавить(ВыделенныйТехПроект, , Истина);
		
	КонецЦикла;
	
	УстановитьОтборТехническиеПроектыПоСпискуТехническихПроектов(ВыводимыеТехническиеПроекты);
	
	ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте();
	Элементы.СтраницыПросмотрПланаОт.ТекущаяСтраница = Элементы.СтраницаПланЗанятостиОтТехПроектов;

КонецПроцедуры 

&НаКлиенте
Функция ВыделенныеТехПроектыПланОтСотрудников()
	
	ВыделенныеТехПроекты = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПланЗанятостиОтСотрудников.ВыделенныеСтроки Цикл

		ДанныеСтроки = Элементы.ПланЗанятостиОтСотрудников.ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.ТехническийПроект) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВыделенныеТехПроекты.Найти(ДанныеСтроки.ТехническийПроект) = Неопределено Тогда
			ВыделенныеТехПроекты.Добавить(ДанныеСтроки.ТехническийПроект);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыделенныеТехПроекты;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПланаОтТехПроектов

&НаСервере
Процедура ЗаполнитьДеревоОтТехническихПроектов()
	
	ПланЗанятостиОтТехпроектов.ПолучитьЭлементы().Очистить();
	ТекущийТехническийПроект           = Справочники.Пользователи.ПустаяСсылка();
	ИдентификаторыОтображаемыхПланов   = ИдентификаторыОтображаемыхПланов(ЭтотОбъект);
	ПериодыОтображаемыхПланов          = ПериодыОтображаемыхПланов(ЭтотОбъект);
	ПараметрыОтображенияЭтапа          = ПланированиеКлиентСервер.ПараметрыОтображенияЭтапаПланаЗанятости(ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗаполненияДереваОтТехПроекта();
	
	Запрос.УстановитьПараметр("ТехническиеПроекты",                       ВыводимыеТехническиеПроекты.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ИдентификаторыОтоображаемыхПланов",        ИдентификаторыОтображаемыхПланов);
	Запрос.УстановитьПараметр("ПустаяДата",                               Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ВидПлана",                                 ВидПлана);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПараметрыОтображенияЭтапа.ПороговоеЗначениеДляЭтапаПоЗапланировано);
	Запрос.УстановитьПараметр("ПороговоеЗначениеДляЭтапаПоФакт",          ПараметрыОтображенияЭтапа.ПороговоеЗначениеДляЭтапаПоФакт);
	Запрос.УстановитьПараметр("НачалоПериодаОтображаемыхПланов",          ПериодыОтображаемыхПланов.НачалоПериода);
	Запрос.УстановитьПараметр("ВидРесурса",                               ВидСогласуемогоРесурсаПлановыхРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиДанныеВДеревоПоТехПроектам(РезультатЗапроса);
	
	МассивИменКолонок = МассивИменКолонокДляПерерасчетаПослеЗаполненияДерева(ЭтотОбъект);
	ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскихСтрокДереваПоДаннымПодчиненных(ЭтотОбъект, 
	                                                                                            "ПланЗанятостиОтТехпроектов", 
	                                                                                             МассивИменКолонокДляПерерасчетаПослеЗаполненияДерева(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВДеревоПоТехПроектам(РезультатЗапроса)
	
	ВыборкаТехническиеПроекты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТехническиеПроекты.Следующий() Цикл
		
		СтрокаТехническийПроект = ПланЗанятостиОтТехпроектов.ПолучитьЭлементы().Добавить();
		СтрокаТехническийПроект.СотрудникРабота = ВыборкаТехническиеПроекты.ТехническийПроект; 
		СтрокаТехническийПроект.ТипСотрудникРабота = Тип("СправочникСсылка.ТехническиеПроекты");
		
		ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, СтрокаТехническийПроект, "ОтТехПроектов");
		
		ВыборкаЭтапы = ВыборкаТехническиеПроекты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЭтапы.Следующий() Цикл 
			
			Если Не ЗначениеЗаполнено(ВыборкаЭтапы.Работа) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЭтап = СтрокаТехническийПроект.ПолучитьЭлементы().Добавить();
			СтрокаЭтап.ТипСотрудникРабота = Тип("СправочникСсылка.ЗадачиПроцесса");
			Если ТипЗнч(ВыборкаЭтапы.Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
				СтрокаЭтап.СотрудникРабота = Справочники.ЗадачиПроцесса.ПустаяСсылка();
			Иначе
				СтрокаЭтап.СотрудникРабота = ВыборкаЭтапы.Работа;
			КонецЕсли;
			
			ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, СтрокаЭтап, "ОтТехПроектов");
			
			ВыборкаСотрудники = ВыборкаЭтапы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСотрудники.Следующий() Цикл
				
				СтрокаСотрудник = СтрокаЭтап.ПолучитьЭлементы().Добавить();
				СтрокаСотрудник.ТипСотрудникРабота = Тип("СправочникСсылка.Пользователи");
				СтрокаСотрудник.СотрудникРабота    = ВыборкаСотрудники.Сотрудник; 
				
				ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, СтрокаСотрудник, "ОтТехПроектов");
				
				СтрокаСотрудник.ДополнительныеДанныеНеПолучены = Истина;
				
				ДополнительныеДанныеРаботЗаполнены = Ложь;
				ЕстьПустойИдентификаторПлана       = Ложь;
				
				ВыборкаДетали = ВыборкаСотрудники.Выбрать();
				
				Пока ВыборкаДетали.Следующий() Цикл
						
					Если Не ДополнительныеДанныеРаботЗаполнены Тогда
						
						ДополнительныеДанныеРаботыЗаполнены = Истина;
					
						СтрокаТехническийПроект.Версия        = ВыборкаДетали.ВерсияТехПроекта;
						СтрокаТехническийПроект.СрокВерсии    = ВыборкаДетали.ДатаОкончанияРазработкиВерсии;
						СтрокаТехническийПроект.ДатаНачала    = ВыборкаДетали.ПлановаяДатаНачалаТехпроекта;
						СтрокаТехническийПроект.ДатаОкончания = ВыборкаДетали.ПлановаяДатаОкончанияТехпроекта;
						
						ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаТехническийПроект);
						
						СтрокаЭтап.Версия            = ВыборкаДетали.ВерсияТехПроекта;
						Если ЗначениеЗаполнено(СтрокаЭтап.СотрудникРабота) Тогда
							СтрокаЭтап.ДатаНачала        = ВыборкаДетали.ПлановаяДатаНачалаЗадачи;
							СтрокаЭтап.ДатаОкончания     = ВыборкаДетали.ПлановаяДатаОкончанияЗадачи; 
						Иначе
							СтрокаЭтап.ДатаНачала        = ВыборкаДетали.ПлановаяДатаНачалаТехпроекта;
							СтрокаЭтап.ДатаОкончания     = ВыборкаДетали.ПлановаяДатаОкончанияТехпроекта;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТехническийПроект.ДатаОкончания) 
							И ЗначениеЗаполнено(СтрокаЭтап.ДатаОкончания)
							И СтрокаТехническийПроект.ДатаОкончания < СтрокаЭтап.ДатаОкончания Тогда 
							
							СтрокаТехническийПроект.ЕстьПроблемаДатаОкончания = Истина;
							
						КонецЕсли;
						
						ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаЭтап);
						
						СтрокаСотрудник.Версия            = ВыборкаДетали.ВерсияТехПроекта;
						
						Если ЗначениеЗаполнено(СтрокаЭтап.СотрудникРабота) Тогда
							СтрокаСотрудник.НачалоПериодаЭтапаСотрудник  = ВыборкаДетали.ПлановаяДатаНачалаЗадачи;
							СтрокаСотрудник.КонецПериодаЭтапаСотрудник   = ВыборкаДетали.ПлановаяДатаОкончанияЗадачи; 
						Иначе
							СтрокаСотрудник.НачалоПериодаЭтапаСотрудник = ВыборкаДетали.ПлановаяДатаНачалаТехпроекта;
							СтрокаСотрудник.КонецПериодаЭтапаСотрудник  = ВыборкаДетали.ПлановаяДатаОкончанияТехпроекта;
						КонецЕсли;
						
						СтрокаСотрудник.ДатаНачала    = ВыборкаДетали.НачалоПериодаПланируемыхРабот;
						СтрокаСотрудник.ДатаОкончания = ВыборкаДетали.КонецПериодаПланируемыхРабот;
						
						ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаСотрудник);
						
					КонецЕсли;
					
					ТребуетсяПолучениеДополнительныхДанныхОтТехПроектов = Истина;
					
					Если ВыборкаДетали.ИдентификаторПлана = 0 Тогда
						ЕстьПустойИдентификаторПлана = Истина;
					КонецЕсли;
					
					Если ВыборкаДетали.ИдентификаторПлана <> 0
						И ВыборкаДетали.ПланируемыеТрудозатраты <> 0 Тогда
						
						ПараметрыПоиска = Новый Структура;
						ПараметрыПоиска.Вставить("ИдентификаторПлана", ВыборкаДетали.ИдентификаторПлана);
						
						НайденныеСтроки = ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
						Если НайденныеСтроки.Количество() <> 0 Тогда
							СтрокаСотрудник[НайденныеСтроки[0].ИмяКолонкиПлановыеТрудозатраты] = ВыборкаДетали.ПланируемыеТрудозатраты;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
			
			СтрокаСотрудник.ДоступноУдалениеСтроки = Не ЕстьПустойИдентификаторПлана;
			
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаЗаполненияДереваОтТехПроекта()

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиПлана.ИдентификаторПлана       КАК ИдентификаторПлана,
	|	ЗаписиПлана.Сотрудник                КАК Сотрудник,
	|	ЗаписиПлана.Работа                   КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты  КАК ПланируемыеТрудозатраты
	|ПОМЕСТИТЬ СуществующиеЗаписиПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗаписиПлана.Работа = ЗадачиПроцесса.Ссылка
	|			И (ЗадачиПроцесса.Предмет В (&ТехническиеПроекты))
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В(&ИдентификаторыОтоображаемыхПланов)
	|	И ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиПлана.ИдентификаторПлана,
	|	ЗаписиПлана.Сотрудник,
	|	ЗаписиПлана.Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана В(&ИдентификаторыОтоображаемыхПланов)
	|	И ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Работа)
	|	И ЗаписиПлана.Работа В(&ТехническиеПроекты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка                         КАК Задача,
	|	ИерархияЗадачПроцесса.Родитель                КАК Родитель
	|ПОМЕСТИТЬ НевыполненныеЗадачиЭтапов
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И (ИерархияЗадачПроцесса.Уровень = 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО ЗадачиПроцесса.Ссылка = ЗадачиЗапланированоПоСотрудникам.Задача
	|			И (ЗадачиЗапланированоПоСотрудникам.ВидРесурса = &ВидРесурса)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&ТехническиеПроекты)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Исполнитель КАК Исполнитель,
	|	ЗадачиПроцесса.Ссылка      КАК Ссылка
	|ПОМЕСТИТЬ ЭтапыСотрудникаПоИсполнителю
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В(&ТехническиеПроекты)
	|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.ЗадачаШаблона <> ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Исполнитель,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НевыполненныеЗадачиЭтапов.Исполнитель                           КАК Исполнитель,
	|	НевыполненныеЗадачиЭтапов.Родитель                              КАК Родитель,
	|	СУММА(ЕСТЬNULL(ЗадачиЗапланированоПоСотрудникам.Количество, 0)) КАК Запланировано,
	|	СУММА(ЕСТЬNULL(УчетВремени.Длительность, 0))                    КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаПоЗапланированоУчетВремени
	|ИЗ
	|	НевыполненныеЗадачиЭтапов КАК НевыполненныеЗадачиЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ПО (ЗадачиЗапланированоПоСотрудникам.Задача = НевыполненныеЗадачиЭтапов.Задача)
	|			И (ЗадачиЗапланированоПоСотрудникам.Пользователь = НевыполненныеЗадачиЭтапов.Исполнитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УчетВремени КАК УчетВремени
	|		ПО (УчетВремени.Задача = НевыполненныеЗадачиЭтапов.Задача)
	|			И (УчетВремени.Пользователь = НевыполненныеЗадачиЭтапов.Исполнитель)
	|			И (УчетВремени.Период < &НачалоПериодаОтображаемыхПланов)
	|
	|СГРУППИРОВАТЬ ПО
	|	НевыполненныеЗадачиЭтапов.Родитель,
	|	НевыполненныеЗадачиЭтапов.Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыСотрудникаПоЗапланированоУчетВремени.Исполнитель КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцесса.Предмет
	|		ИНАЧЕ ЭтапыСотрудникаПоЗапланированоУчетВремени.Родитель
	|	КОНЕЦ КАК Родитель,
	|	СУММА(ЭтапыСотрудникаПоЗапланированоУчетВремени.Запланировано) КАК Запланировано,
	|	СУММА(ЭтапыСотрудникаПоЗапланированоУчетВремени.УчетВремениСекунды) КАК УчетВремениСекунды
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени
	|ИЗ
	|	ЭтапыСотрудникаПоЗапланированоУчетВремени КАК ЭтапыСотрудникаПоЗапланированоУчетВремени
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЭтапыСотрудникаПоЗапланированоУчетВремени.Родитель = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	(ЭтапыСотрудникаПоЗапланированоУчетВремени.Запланировано > &ПороговоеЗначениеДляЭтапаПоЗапланировано
	|			ИЛИ ЭтапыСотрудникаПоЗапланированоУчетВремени.УчетВремениСекунды > &ПороговоеЗначениеДляЭтапаПоФакт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыСотрудникаПоЗапланированоУчетВремени.Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			ТОГДА ЗадачиПроцесса.Предмет
	|		ИНАЧЕ ЭтапыСотрудникаПоЗапланированоУчетВремени.Родитель
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени.Исполнитель КАК Исполнитель,
	|	ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени.Родитель    КАК Родитель
	|ПОМЕСТИТЬ ЭтапыСотрудникаДляОтображенияВПланах
	|ИЗ
	|	ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени КАК ЭтапыСотрудникаДляОтображенияВПланахПоПланированиюУчетуВремени
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭтапыСотрудникаПоИсполнителю.Исполнитель,
	|	ЭтапыСотрудникаПоИсполнителю.Ссылка
	|ИЗ
	|	ЭтапыСотрудникаПоИсполнителю КАК ЭтапыСотрудникаПоИсполнителю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ПланируемыеТрудозатраты     КАК ПланируемыеТрудозатраты,
	|	ВложенныйЗапрос.Сотрудник                   КАК Сотрудник,
	|	ВложенныйЗапрос.Работа                      КАК Работа,
	|	ВложенныйЗапрос.ИдентификаторПлана          КАК ИдентификаторПлана,
	|	ВложенныйЗапрос.СтатусЗадачи                КАК СтатусЗадачи,
	|	ВложенныйЗапрос.ПлановаяДатаНачалаЗадачи    КАК ПлановаяДатаНачалаЗадачи,
	|	ВложенныйЗапрос.ПлановаяДатаОкончанияЗадачи КАК ПлановаяДатаОкончанияЗадачи,
	|	ВложенныйЗапрос.ТехническийПроект           КАК ТехническийПроект,
	|	ВложенныйЗапрос.ЗначениеУпорядочиванияЭтапа КАК ЗначениеУпорядочиванияЭтапа
	|ПОМЕСТИТЬ ДанныеВыводимыхРабот
	|ИЗ
	|	(ВЫБРАТЬ
	|		СуществующиеЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|		СуществующиеЗаписиПлана.Сотрудник КАК Сотрудник,
	|		СуществующиеЗаписиПлана.Работа КАК Работа,
	|		СуществующиеЗаписиПлана.ИдентификаторПлана КАК ИдентификаторПлана,
	|		ЕСТЬNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)) КАК СтатусЗадачи,
	|		ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, &ПустаяДата) КАК ПлановаяДатаНачалаЗадачи,
	|		ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, &ПустаяДата) КАК ПлановаяДатаОкончанияЗадачи,
	|		ВЫБОР
	|			КОГДА СуществующиеЗаписиПлана.Работа ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|		КОНЕЦ КАК ТехническийПроект,
	|		ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0) КАК ЗначениеУпорядочиванияЭтапа
	|	ИЗ
	|		СуществующиеЗаписиПлана КАК СуществующиеЗаписиПлана
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО СуществующиеЗаписиПлана.Работа = ЗадачиПроцесса.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыБезШаблона
	|			ПО СуществующиеЗаписиПлана.Работа = ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО СуществующиеЗаписиПлана.Сотрудник = Пользователи.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО СуществующиеЗаписиПлана.Работа = СостоянияЗадачПроцессов.ЗадачаПроцесса
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Исполнитель,
	|		ЭтапыСотрудникаДляОтображенияВПланах.Родитель,
	|		0,
	|		ЕСТЬNULL(ЗадачиПроцесса.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)),
	|		ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДатаНачала, &ПустаяДата),
	|		ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, &ПустаяДата),
	|		ВЫБОР
	|			КОГДА ЭтапыСотрудникаДляОтображенияВПланах.Родитель ССЫЛКА Справочник.ЗадачиПроцесса
	|				ТОГДА ЕСТЬNULL(ТехническиеПроекты.Ссылка, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка))
	|			ИНАЧЕ ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|		КОНЕЦ,
	|		ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)
	|	ИЗ
	|		ЭтапыСотрудникаДляОтображенияВПланах КАК ЭтапыСотрудникаДляОтображенияВПланах
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Родитель = ЗадачиПроцесса.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыЭтапыБезШаблона
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Родитель = ТехническиеПроектыЭтапыБезШаблона.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Исполнитель = Пользователи.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО ЭтапыСотрудникаДляОтображенияВПланах.Родитель = СостоянияЗадачПроцессов.ЗадачаПроцесса) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеВыводимыхРабот.Сотрудник КАК Сотрудник,
	|	ДанныеВыводимыхРабот.Работа    КАК Работа,
	|	МИНИМУМ(Планы.НачалоПериода)   КАК НачалоПериода,
	|	МАКСИМУМ(Планы.КонецПериода)   КАК КонецПериода
	|ПОМЕСТИТЬ ДатыПланируемыхРабот
	|ИЗ
	|	ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ДанныеВыводимыхРабот.Сотрудник = ЗаписиПлана.Сотрудник
	|			И ДанныеВыводимыхРабот.Работа = ЗаписиПлана.Работа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|			ПО (Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана)
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеВыводимыхРабот.Сотрудник,
	|	ДанныеВыводимыхРабот.Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Ссылка                                    КАК ТехническийПроект,
	|	ДанныеВыводимыхРабот.Работа                                  КАК Работа,
	|	ДанныеВыводимыхРабот.Сотрудник                               КАК Сотрудник,
	|	ДанныеВыводимыхРабот.ПланируемыеТрудозатраты                 КАК ПланируемыеТрудозатраты,
	|	ДанныеВыводимыхРабот.ИдентификаторПлана                      КАК ИдентификаторПлана,
	|	ДанныеВыводимыхРабот.СтатусЗадачи                            КАК СтатусЗадачи,
	|	ДанныеВыводимыхРабот.ПлановаяДатаНачалаЗадачи                КАК ПлановаяДатаНачалаЗадачи,
	|	ДанныеВыводимыхРабот.ПлановаяДатаОкончанияЗадачи             КАК ПлановаяДатаОкончанияЗадачи,
	|	ТехническиеПроекты.ПлановаяДатаНачала                        КАК ПлановаяДатаНачалаТехпроекта,
	|	ТехническиеПроекты.ПлановаяДатаОкончания                     КАК ПлановаяДатаОкончанияТехпроекта,
	|	ЕСТЬNULL(ВерсииПроекта.ДатаОкончанияРазработки, &ПустаяДата) КАК ДатаОкончанияРазработкиВерсии,
	|	ТехническиеПроекты.Версия                                    КАК ВерсияТехПроекта,
	|	ЕСТЬNULL(ДатыПланируемыхРабот.НачалоПериода, &ПустаяДата)    КАК НачалоПериодаПланируемыхРабот,
	|	ЕСТЬNULL(ДатыПланируемыхРабот.КонецПериода, &ПустаяДата)     КАК КонецПериодаПланируемыхРабот
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВыводимыхРабот КАК ДанныеВыводимыхРабот
	|		ПО (ДанныеВыводимыхРабот.ТехническийПроект = ТехническиеПроекты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыПланируемыхРабот КАК ДатыПланируемыхРабот
	|		ПО (ДанныеВыводимыхРабот.Сотрудник = ДатыПланируемыхРабот.Сотрудник)
	|			И (ДанныеВыводимыхРабот.Работа = ДатыПланируемыхРабот.Работа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ПО (ВерсииПроекта.Ссылка = ТехническиеПроекты.Версия)
	|ГДЕ
	|	ТехническиеПроекты.Ссылка В(&ТехническиеПроекты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТехническийПроект,
	|	ДанныеВыводимыхРабот.ЗначениеУпорядочиванияЭтапа,
	|	ДанныеВыводимыхРабот.ПлановаяДатаОкончанияЗадачи,
	|	ДанныеВыводимыхРабот.Сотрудник
	|ИТОГИ ПО
	|	ТехническийПроект,
	|	Работа,
	|	Сотрудник";
	
КонецФункции 

&НаКлиенте
Процедура ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте()

	КлючТекущейСтрокиДерева       = КлючТекущейСтрокиДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота");
	КлючиРазвернутыхУзловДерева   = КлючиРазвернутыхУзловДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота");
	КлючТекущейСтрокиДереваПодбор = КлючТекущейСтрокиДерева("ПодборПодразделенияСотрудники", "Сотрудник");
	КлючиРазвернутыхУзловПодбор   = КлючиРазвернутыхУзловДерева("ПодборПодразделенияСотрудники", "Сотрудник");
	
	ОбновитьДанныеСтраницаОтТехПроектов();
	
	ВосстановитьРазвернутыеУзлыДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота", КлючиРазвернутыхУзловДерева);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПланЗанятостиОтТехпроектов", "СотрудникРабота", КлючТекущейСтрокиДерева);
	ВосстановитьРазвернутыеУзлыДерева("ПодборПодразделенияСотрудники", "Сотрудник", КлючиРазвернутыхУзловПодбор);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПодборПодразделенияСотрудники", "Сотрудник", КлючТекущейСтрокиДереваПодбор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтраницаОтТехПроектов()
	
	ПараметрыИзмененияВидаПлана = ПараметрыИзмененияВидаПлана();
	ПараметрыИзмененияВидаПлана.ОбновлятьДеревоОтСотрудников   = Ложь;
	ПараметрыИзмененияВидаПлана.ОтображаемыеУчастникиЗагружены = Истина;
	ПриИзмененииВидаПланаНаСервере(ПараметрыИзмененияВидаПлана);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипыГруппировокДеревоОтТехПроектов()
	
	ТипыГруппировкаОтСотрудника = Новый СписокЗначений;
	ТипыГруппировкаОтСотрудника.Добавить(Тип("СправочникСсылка.ТехническиеПроекты"));
	ТипыГруппировкаОтСотрудника.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	
	Возврат ТипыГруппировкаОтСотрудника;
	
КонецФункции

#КонецОбласти 

#Область ОбработкаИзмененияПлановыхТрудозатрат

&НаКлиенте
Процедура ПослеИзмененияПлановыхТрудозатратОтСотрудника(ТекущиеДанные, ИмяТекущейКолонки);
	
	ИмяКолонкиБезИмениТаблицыФормы = ИмяКолонкиБезИмениТаблицыФормы(ИмяТекущейКолонки, "ПланЗанятостиОтСотрудников");
	
	Если ЭтоКолонкаПлановыеТрудозатраты(ИмяКолонкиБезИмениТаблицыФормы) Тогда
		
		ИмяКолонкиПлановыеТрудозатраты = ИмяКолонкиБезИмениТаблицыФормы;
		ИмяКолонкиОстатокПоНормативу = ИмяКолонкиОстатокПоНормативуПоИмениКолонкиПлановыеТрудозатраты(ИмяКолонкиБезИмениТаблицыФормы);
		ТекущиеДанные[ИмяКолонкиОстатокПоНормативу] = ТекущиеДанные[ИмяКолонкиБезИмениТаблицыФормы];
		
	Иначе
		
		ИмяКолонкиОстатокПоНормативу = ИмяКолонкиБезИмениТаблицыФормы;
		ИмяКолонкиПлановыеТрудозатраты = ИмяКолонкиПлановыеТрудозатратыОстатокПоНормативуПоИмениКолонки(ИмяКолонкиБезИмениТаблицыФормы);
		ТекущиеДанные[ИмяКолонкиПлановыеТрудозатраты] = ТекущиеДанные[ИмяКолонкиОстатокПоНормативу];
		
	КонецЕсли;
	
	ДанныеЗаписиПлана = ДанныеЗаписиРегистраПоТаблицеОтСотрудника(ТекущиеДанные, ИмяКолонкиПлановыеТрудозатраты);
	
	Если ДанныеЗаписиПлана = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана);
	
	ПересчитатьНераспределено(ТекущиеДанные, ДопустимыеТипыПересчетНераспределеноОтСотрудников());
	ПересчитатьМассивКолонокРодительскихСтрокДереваПослеИзмененияПодчиненного(
		ЭтотОбъект,
		ТекущиеДанные, 
		МассивИменКолонокКПерерасчетуПослеИзмененияПлановыеТрудозатраты(ИмяКолонкиПлановыеТрудозатраты),
		Истина);
		
	ИзменяемыеЗаписи = Новый Массив;
	ИзменяемыеЗаписи.Добавить(ДанныеЗаписиПлана);
	ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице("ПланЗанятостиОтСотрудников", ИзменяемыеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияПлановыхТрудозатратОтТехПроекта(ТекущиеДанные, ИмяТекущейКолонки) 
	
	ИмяКолонкиБезИмениТаблицыФормы = ИмяКолонкиБезИмениТаблицыФормы(ИмяТекущейКолонки, "ПланЗанятостиОтТехпроектов");
	ДанныеЗаписиПлана = ДанныеЗаписиРегистраПоТаблицеОтТехПроекта(ТекущиеДанные, ИмяКолонкиБезИмениТаблицыФормы);
	
	Если ДанныеЗаписиПлана = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана);
	
	ПересчитатьДатыНачалаИОкончанияПланированияПоСотруднику(ТекущиеДанные);
	ПересчитатьНераспределено(ТекущиеДанные, ДопустимыеТипыПересчетНераспределеноОтТехПроектов());
	ПересчитатьМассивКолонокРодительскихСтрокДереваПослеИзмененияПодчиненного(
		ЭтотОбъект,
		ТекущиеДанные, 
		МассивИменКолонокКПерерасчетуПослеИзмененияПлановыеТрудозатраты(ИмяКолонкиБезИмениТаблицыФормы),
		Ложь);
		
	ИзменяемыеЗаписи = Новый Массив;
	ИзменяемыеЗаписи.Добавить(ДанныеЗаписиПлана);
	ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице("ПланЗанятостиОтТехПроектов", ИзменяемыеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеЗаписиРегистраПоТаблицеОтТехПроекта(ТекущиеДанные, ИмяТекущейКолонки)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИмяКолонкиПлановыеТрудозатраты", ИмяТекущейКолонки);
	
	НайденныеСтроки = ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗаписиПлана = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
	ДанныеЗаписиПлана.ИдентификаторПлана      = НайденныеСтроки[0].ИдентификаторПлана;
	ДанныеЗаписиПлана.Сотрудник               = ТекущиеДанные.СотрудникРабота; 
	ДанныеЗаписиПлана.Работа                  = ЭтапПоСтрокеПланаОтТехПроектов(ТекущиеДанные);
	ДанныеЗаписиПлана.ТипСтрокиПлана          = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа");
	ДанныеЗаписиПлана.ПланируемыеТрудозатраты = ТекущиеДанные[ИмяТекущейКолонки];
	
	Если Не ТекущиеДанные.ДоступноУдалениеСтроки
		И ДанныеЗаписиПлана.ПланируемыеТрудозатраты = 0 Тогда
		
		ДанныеЗаписиПлана.Удалить = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеЗаписиПлана;
	
КонецФункции

&НаКлиенте
Функция ДанныеЗаписиРегистраПоТаблицеОтСотрудника(ТекущиеДанные, ИмяТекущейКолонки)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИмяКолонкиПлановыеТрудозатраты", ИмяТекущейКолонки);
	
	НайденныеСтроки = ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗаписиПлана = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
	ДанныеЗаписиПлана.ИдентификаторПлана      = НайденныеСтроки[0].ИдентификаторПлана;
	ДанныеЗаписиПлана.Сотрудник               = СотрудникПоСтрокеПланаОтСотрудников(ТекущиеДанные);
	ДанныеЗаписиПлана.ТипСтрокиПлана          = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа");
	ДанныеЗаписиПлана.ПланируемыеТрудозатраты = ТекущиеДанные[ИмяТекущейКолонки];
	
	Если ТекущиеДанные.ТипСотрудникРабота = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
		
		ДанныеЗаписиПлана.Работа = ТекущиеДанные.ТехническийПроект;
		
	ИначеЕсли ТекущиеДанные.ТипСотрудникРабота = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.СотрудникРабота) Тогда
			
			ДанныеЗаписиПлана.Работа = ТекущиеДанные.ТехническийПроект;
			
		Иначе
			
			ДанныеЗаписиПлана.Работа = ТекущиеДанные.СотрудникРабота;
			
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипСотрудникРабота = Тип("СправочникСсылка.ВидыДеятельности") Тогда
		
		ДанныеЗаписиПлана.Работа = ТекущиеДанные.СотрудникРабота;
		
	КонецЕсли; 
	
	Если Не ТекущиеДанные.ДоступноУдалениеСтроки
		И ДанныеЗаписиПлана.ПланируемыеТрудозатраты = 0 Тогда
		
		ДанныеЗаписиПлана.Удалить = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеЗаписиПлана;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана)
	
	Если ДанныеЗаписиПлана.Удалить Тогда
		РегистрыСведений.ЗаписиПлана.УдалитьЗаписьПлана(ДанныеЗаписиПлана);
	Иначе
		РегистрыСведений.ЗаписиПлана.ЗаписатьДанные(ДанныеЗаписиПлана);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеПлановыеТрудозатратыВоВсехОтображаемыхКолонкахСтроки(СтрокаДерева, ПлановыеТрудозатраты, ИзмененныеЗаписи)

	Для Каждого СтрокаОтображаемыеПланы Из ОтображаемыеПланы Цикл
		СтрокаДерева[СтрокаОтображаемыеПланы.ИмяКолонкиПлановыеТрудозатраты] = ПлановыеТрудозатраты;
		СтрокаДерева[СтрокаОтображаемыеПланы.ИмяКолонкиОстатокПоНормативу]   = ПлановыеТрудозатраты;
		ДанныеЗаписи = ДанныеЗаписиРегистраПоТаблицеОтСотрудника(СтрокаДерева, СтрокаОтображаемыеПланы.ИмяКолонкиПлановыеТрудозатраты);
		ИзмененныеЗаписи.Добавить(ДанныеЗаписи);
	КонецЦикла;

КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОтразитьИзменениеМассиваЗаписейПлана(ИзменяемыеЗаписи, УдаляемыеСтроки, ИдентификаторыОтображаемыхПланов)
	
	Для Каждого ДанныеЗаписиПлана Из ИзменяемыеЗаписи Цикл
		
		ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана);
		
	КонецЦикла;
	
	УдалитьЗаписиРегистраПоУдаляемымСтрокамПлана(УдаляемыеСтроки, ИдентификаторыОтображаемыхПланов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице(ИмяИзменяемогоДерева, ИзменяемыеЗаписи)
	
	Если ИзменяемыеЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИзменяемаяЗапись Из ИзменяемыеЗаписи Цикл
		
		Если ИмяИзменяемогоДерева = "ПланЗанятостиОтТехПроектов" Тогда
			
			ЧтоИщемГруппировка              = ИзменяемаяЗапись.Сотрудник;
			ЧтоИщемНижнийУровень            = ИзменяемаяЗапись.Работа;
			ИмяДереваВКоторомИщем           = "ПланЗанятостиОтСотрудников";
			ДоступныйТип                    = ДопустимыеТипыПересчетНераспределеноОтСотрудников();
			ПересчитыватьОстатокПоНормативу = Истина;
			
		ИначеЕсли ИмяИзменяемогоДерева = "ПланЗанятостиОтСотрудников" Тогда
			
			ЧтоИщемГруппировка              = ИзменяемаяЗапись.Работа;
			ЧтоИщемНижнийУровень            = ИзменяемаяЗапись.Сотрудник;
			ИмяДереваВКоторомИщем           = "ПланЗанятостиОтТехпроектов";
			ДоступныйТип                    = ДопустимыеТипыПересчетНераспределеноОтТехПроектов();;
			ПересчитыватьОстатокПоНормативу = Ложь;
			
		КонецЕсли;
		
		СтрокаГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(
				ЭтотОбъект[ИмяДереваВКоторомИщем], "СотрудникРабота", ЧтоИщемГруппировка, 1);
		
		Если СтрокаГруппировка = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаНижнийУровень = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(
				СтрокаГруппировка, "СотрудникРабота", ЧтоИщемНижнийУровень, 1);
		
		Если СтрокаНижнийУровень = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКолонкиПлановыеТрудозатраты = ИмяКолонкиПлановыеТрудозатраты(ИзменяемаяЗапись.ИдентификаторПлана);
		
		СтрокаНижнийУровень[ИмяКолонкиПлановыеТрудозатраты] = ИзменяемаяЗапись.ПланируемыеТрудозатраты;
		Если ПересчитыватьОстатокПоНормативу Тогда
			ИмяКолонкиОстатокПоНормативу = ИмяКолонкиОстатокПоНормативу(ИзменяемаяЗапись.ИдентификаторПлана);
			СтрокаНижнийУровень[ИмяКолонкиОстатокПоНормативу] = ИзменяемаяЗапись.ПланируемыеТрудозатраты;
		КонецЕсли;
		
		ПересчитатьНераспределено(СтрокаНижнийУровень, ДоступныйТип);
		ПересчитатьМассивКолонокРодительскихСтрокДереваПослеИзмененияПодчиненного(
			ЭтотОбъект,
			СтрокаНижнийУровень, 
			МассивИменКолонокКПерерасчетуПослеИзмененияПлановыеТрудозатраты(ИмяКолонкиПлановыеТрудозатраты),
			ПересчитыватьОстатокПоНормативу);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтандартныйПериодОтображаемыхПланов()

	СтандартныйПериодОтображаемыхПланов = Новый СтандартныйПериод;
	
	ПериодыОтображаемыхПланов = ПериодыОтображаемыхПланов(ЭтотОбъект);
	
	СтандартныйПериодОтображаемыхПланов.ДатаНачала    = ПериодыОтображаемыхПланов.НачалоПериода;
	СтандартныйПериодОтображаемыхПланов.ДатаОкончания = ПериодыОтображаемыхПланов.КонецПериода;
	
	Возврат СтандартныйПериодОтображаемыхПланов;

КонецФункции

&НаКлиенте
Процедура ПересчитатьДатыНачалаИОкончанияПланированияПоСотруднику(ДанныеСтроки)
	
	Если ДанныеСтроки.ТипСотрудникРабота <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаПланирования = Неопределено;
	ДатаОкончанияПланирования = ?(ДанныеСтроки.ДатаОкончания>  ВыводитьПериодыПланированияПо, ДатаОкончанияПланирования, Неопределено);
	
	Для Каждого СтрокаТаблицы Из ОтображаемыеПланы Цикл
		
		Если СтрокаТаблицы.Отображается Тогда
			
			ИмяКолонки = ИмяКолонкиПлановыеТрудозатраты(СтрокаТаблицы.ИдентификаторПлана);
			Если ДанныеСтроки[ИмяКолонки] > 0 Тогда
				
				Если ДатаНачалаПланирования = Неопределено 
					Или СтрокаТаблицы.НачалоПериода < ДатаНачалаПланирования Тогда
					
					ДатаНачалаПланирования = СтрокаТаблицы.НачалоПериода;
					
				КонецЕсли;
				
				Если ДатаОкончанияПланирования = Неопределено
					Или СтрокаТаблицы.КонецПериода > ДатаОкончанияПланирования Тогда
				
					ДатаОкончанияПланирования = СтрокаТаблицы.КонецПериода
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеСтроки.ДатаОкончания = ?(ДатаОкончанияПланирования = Неопределено, Дата(1,1,1), ДатаОкончанияПланирования);
	ДанныеСтроки.ДатаНачала    = ?(ДатаНачалаПланирования = Неопределено, Дата(1,1,1),    ДатаНачалаПланирования);
	
КонецПроцедуры

#КонецОбласти 

#Область УказаниеПлановыхТрудозатратКомандой

&НаКлиенте
Процедура ДобавитьСтрокуДереваВСоответствие(КоллекцияСтрок, СтрокаКДобавлению, ИмяКолонки);
	
	Если КоллекцияСтрок.Получить(СтрокаКДобавлению[ИмяКолонки]) = Неопределено Тогда
		
		КоллекцияСтрок.Вставить(СтрокаКДобавлению[ИмяКолонки], СтрокаКДобавлению)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеОтображаемогоПланаПоИмениКолонки(Форма, ИмяКолонки, ЗначениеПоиска)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить(ИмяКолонки, ЗначениеПоиска); 
	
	НайденныеСтроки = Форма.ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат НайденныеСтроки[0];
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаПлановыхЧасовОтТехПроектов(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьВводПлановыхТрудозатратКомандой(Результат,
	                                          Тип("СправочникСсылка.Пользователи"),
	                                          "ПланЗанятостиОтТехпроектов",
	                                           ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПлановыхЧасовОтСотрудников(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьВводПлановыхТрудозатратКомандой(Результат,
	                                          Тип("СправочникСсылка.ЗадачиПроцесса"),
	                                          "ПланЗанятостиОтСотрудников",
	                                           ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВводПлановыхТрудозатратКомандой(Результат, ДопустимыйТип, ИмяДерева, ДополнительныеПараметры)

	Если ТипЗнч(Результат) <> Тип("Число") Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененныеЗаписи = Новый Массив;
	СтрокиКПересчету = Новый Соответствие;
	
	Для Каждого ДанныеСтроки Из ДополнительныеПараметры.ИзменяемыеСтроки Цикл
		
		ДанныеСтроки[ДополнительныеПараметры.ИмяКолонки] = Результат;
		ПересчитатьНераспределено(ДанныеСтроки,ДопустимыйТип);
		
		ДобавитьСтрокуДереваВСоответствие(СтрокиКПересчету, 
		                                 ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(ДанныеСтроки),
		                                 "СотрудникРабота");
		
		Если ИмяДерева = "ПланЗанятостиОтТехпроектов" Тогда
			ДанныеЗаписиПлана = ДанныеЗаписиРегистраПоТаблицеОтТехПроекта(ДанныеСтроки, ДополнительныеПараметры.ИмяКолонки);
		ИначеЕсли ИмяДерева = "ПланЗанятостиОтСотрудников" Тогда
			ДанныеЗаписиПлана = ДанныеЗаписиРегистраПоТаблицеОтСотрудника(ДанныеСтроки, ДополнительныеПараметры.ИмяКолонки);
		КонецЕсли;
		ИзмененныеЗаписи.Добавить(ДанныеЗаписиПлана);
		
	КонецЦикла;
	
	Если ИзмененныеЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаКПересчету Из СтрокиКПересчету Цикл
		
		ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскихСтрокДереваПоДаннымПодчиненных(
			ЭтотОбъект,
			ИмяДерева,
			МассивИменКолонокКПерерасчетуПослеИзмененияПлановыеТрудозатраты(ДополнительныеПараметры.ИмяКолонки));
			
	КонецЦикла;
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи,
	                                     Неопределено, 
	                                     Неопределено);
	
	ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице(ИмяДерева, ИзмененныеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВводПлановыхЧасовКомандой(РезультатПодготовки, ИмяПроцедурыОбработки)
	
	Если РезультатПодготовки.ИзменяемыеСтроки.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИзменяемыеСтроки", РезультатПодготовки.ИзменяемыеСтроки);
		ДополнительныеПараметры.Вставить("ИмяКолонки",       РезультатПодготовки.ИмяКолонки);
		
		ОписаниеОповещенияВводеПлановыхЧасов = Новый ОписаниеОповещения(ИмяПроцедурыОбработки,
		                                                                ЭтотОбъект, 
		                                                                ДополнительныеПараметры);
		
		ПоказатьВводЧисла(ОписаниеОповещенияВводеПлановыхЧасов, 0, НСтр("ru = 'Введите плановые часы'"), 4, 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РезультатПодготовкиУказаниеПлановыхЧасов(ИмяТаблицы, ТребуемыйТип)
	
	РезультатПодготовки = Новый Структура;
	РезультатПодготовки.Вставить("ИзменяемыеСтроки", Новый Массив);
	РезультатПодготовки.Вставить("Отказ",            Ложь);
	РезультатПодготовки.Вставить("ИмяКолонки",       "");
	
	ИзменяемыеЗаписи = Новый Массив;
	
	ИмяКолонкиБезИмениТаблицыФормы = ИмяКолонкиБезИмениТаблицыФормы(
			Элементы[ИмяТаблицы].ТекущийЭлемент.Имя, 
			ИмяТаблицы);
		
	ДанныеОтображаемогоПлана = ДанныеОтображаемогоПланаПоИмениКолонки(
		ЭтотОбъект, "ИмяКолонкиПлановыеТрудозатраты", ИмяКолонкиБезИмениТаблицыФормы); 
		
	РезультатПодготовки.ИмяКолонки = ИмяКолонкиБезИмениТаблицыФормы;
	
	Если ДанныеОтображаемогоПлана = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать колонку с плановыми трудозатратами'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	Если ДанныеОтображаемогоПлана.Зафиксирован Тогда
		
		ТекстСообщения = НСтр("ru = 'Редактирование зафиксированного плана недоступно'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
	
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы[ИмяТаблицы].ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы[ИмяТаблицы].ДанныеСтроки(ВыделеннаяСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) <> ТребуемыйТип Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПодготовки.ИзменяемыеСтроки.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	Если РезультатПодготовки.ИзменяемыеСтроки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрано ни одной строки для которой возможно указать плановые часы'"));
		РезультатПодготовки.Отказ = Истина;
		
	КонецЕсли;
	
	Возврат РезультатПодготовки;

КонецФункции

#КонецОбласти

#Область РаспределениеОстаткаСУчетомНорматива

&НаКлиенте
Функция РезультатПодготовкиРаспределенияОстатка(ИмяТаблицы, ДопустимыеТипы)
	
	РезультатПодготовки = Новый Структура;
	РезультатПодготовки.Вставить("Отказ",                                   Ложь);
	РезультатПодготовки.Вставить("Нераспределено",                          0); 
	РезультатПодготовки.Вставить("ПоследующиеПериодыНеПустые",              Ложь);
	РезультатПодготовки.Вставить("РаспределятьОстаткиПоНормативу",          Ложь);
	РезультатПодготовки.Вставить("Сотрудник",                               Неопределено);
	РезультатПодготовки.Вставить("Работа",                                  Неопределено);
	РезультатПодготовки.Вставить("ИдентификаторТекущейСтроки",              0);
	РезультатПодготовки.Вставить("ВидПлана",                                ВидПлана);
	РезультатПодготовки.Вставить("ИмяТаблицы",                              ИмяТаблицы);
	РезультатПодготовки.Вставить("НачалоПериодаПланаРаспределения",         Неопределено);
	РезультатПодготовки.Вставить("НормативПланируемогоВремени",             НормативПланируемогоВремени);
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Чтобы выполнить команду необходимо выполнить позиционирование на строке'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	РезультатПодготовки.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если ДопустимыеТипы.Найти(ТипЗнч(ТекущиеДанные.СотрудникРабота)) = Неопределено Тогда
		
		Если ИмяТаблицы = "ПланЗанятостиОтСотрудников" Тогда
			
			ТекстСообщения = НСтр("ru = 'Выполнение команды доступно только для строки с этапом'");
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Выполнение команды доступно только для строки с участником'");
		
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	Если ТекущиеДанные.Нераспределено <= 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В выбранной строке отсутсвует нераспределенный остаток'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
	Если РодительскаяСтрока = Неопределено Тогда
		
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	Иначе 
		
		Если ИмяТаблицы = "ПланЗанятостиОтСотрудников" Тогда
			
			РезультатПодготовки.Работа         = ТекущиеДанные.СотрудникРабота;
			РезультатПодготовки.Сотрудник      = РодительскаяСтрока.СотрудникРабота;
			
		Иначе
			
			РезультатПодготовки.Работа         = РодительскаяСтрока.СотрудникРабота;
			РезультатПодготовки.Сотрудник      = ТекущиеДанные.СотрудникРабота;
			
		КонецЕсли;
	
		РезультатПодготовки.Нераспределено = ТекущиеДанные.Нераспределено;
		
	КонецЕсли;
	
	ИмяКолонкиБезИмениТаблицыФормы = ИмяКолонкиБезИмениТаблицыФормы(
			Элементы[ИмяТаблицы].ТекущийЭлемент.Имя, 
			ИмяТаблицы);
			
			
	Если ИнвертироватьОтображениеЗапланированоПоСотруднику = 0 Тогда
		
		ДанныеОтображаемогоПлана = ДанныеОтображаемогоПланаПоИмениКолонки(
			ЭтотОбъект, "ИмяКолонкиПлановыеТрудозатраты", ИмяКолонкиБезИмениТаблицыФормы);
		
	Иначе
		
		ДанныеОтображаемогоПлана = ДанныеОтображаемогоПланаПоИмениКолонки(
			ЭтотОбъект, "ИмяКолонкиОстатокПоНормативу", ИмяКолонкиБезИмениТаблицыФормы);
		
	КонецЕсли;
		
	Если ДанныеОтображаемогоПлана = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо выделить колонку с плановыми трудозатратами'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	Иначе
		
		РезультатПодготовки.НачалоПериодаПланаРаспределения = ДанныеОтображаемогоПлана.НачалоПериода;
		
	КонецЕсли;
	
	Если ИмяТаблицы = "ПланЗанятостиОтСотрудников" Тогда
		
		РезультатПодготовки.РаспределятьОстаткиПоНормативу = Истина;
		
	КонецЕсли;
	
	Возврат РезультатПодготовки;
	
КонецФункции

&НаСервере
Функция РезультатРаспределенияОстатка(РезультатПодготовки) 
	
	РезультатРаспределения = Новый Структура;
	РезультатРаспределения.Вставить("КоличествоИзмененныхЗаписей", 0);
	РезультатРаспределения.Вставить("Успешно",                     Истина);
	
	СтрокаДерева = ЭтотОбъект[РезультатПодготовки.ИмяТаблицы].НайтиПоИдентификатору(РезультатПодготовки.ИдентификаторТекущейСтроки); 
	ИзменяемыеЗаписи                          = Новый Массив;
	ДатаОкончанияПоследнегоСуществующегоПлана = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРаспределениеОстаткаПоНормативу();
	
	Запрос.УстановитьПараметр("НачалоПериода", РезультатПодготовки.НачалоПериодаПланаРаспределения);
	Запрос.УстановитьПараметр("ВидПлана",      РезультатПодготовки.ВидПлана);
	Запрос.УстановитьПараметр("Работа",        РезультатПодготовки.Работа);
	Запрос.УстановитьПараметр("Сотрудник",     РезультатПодготовки.Сотрудник);
	
	Нераспределено = РезультатПодготовки.Нераспределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДатаОкончанияПоследнегоСуществующегоПлана = Выборка.КонецПериода;
		
		Если Нераспределено <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		ДоступныйОстатокДляЭтогоПлана = РезультатПодготовки.НормативПланируемогоВремени - Выборка.ТрудозатратыПлана;
		Если ДоступныйОстатокДляЭтогоПлана <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Нераспределено > ДоступныйОстатокДляЭтогоПлана Тогда
			
			ДобавитьВТекущийПлан = ДоступныйОстатокДляЭтогоПлана;
			
		Иначе
			
			ДобавитьВТекущийПлан = Нераспределено;
			
		КонецЕсли;
		
		Нераспределено = Нераспределено - ДобавитьВТекущийПлан;
		
		ДанныеЗаписи = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
		ДанныеЗаписи.ИдентификаторПлана      = Выборка.ИдентификаторПлана;
		ДанныеЗаписи.Сотрудник               = РезультатПодготовки.Сотрудник;
		ДанныеЗаписи.Работа                  = РезультатПодготовки.Работа;
		ДанныеЗаписи.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
		ДанныеЗаписи.ПланируемыеТрудозатраты = Выборка.ТрудозатратыРаботы + ДобавитьВТекущийПлан;
		
		ИзменитьЗначениеПлановыеТрудозатратыЕслиОтображается(СтрокаДерева, 
		                                                     ДанныеЗаписи.ПланируемыеТрудозатраты,
		                                                     Выборка.ИдентификаторПлана,
		                                                     РезультатПодготовки.РаспределятьОстаткиПоНормативу);
		
		ИзменяемыеЗаписи.Добавить(ДанныеЗаписи);
		
	КонецЦикла;
	
	Если Нераспределено > 0
		И ДатаОкончанияПоследнегоСуществующегоПлана <> Неопределено Тогда
		
		КоличествоТребуемыхПериодов = Цел(Нераспределено / РезультатПодготовки.НормативПланируемогоВремени) + 1;
		
		ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
		ПараметрыПолученияПлановПоПериоду.ВидПлана              = РезультатПодготовки.ВидПлана;
		ПараметрыПолученияПлановПоПериоду.ДатаНачала            = КонецДня(ДатаОкончанияПоследнегоСуществующегоПлана) + 1;
		ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = НастройкиПланирования[0];
		ПараметрыПолученияПлановПоПериоду.КоличествоПериодов    = КоличествоТребуемыхПериодов;
		
		ДанныеПланов = Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
		
		Для Каждого ДанныеПлана Из ДанныеПланов Цикл
			
			Если Нераспределено <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Нераспределено > РезультатПодготовки.НормативПланируемогоВремени Тогда
				
				ДобавитьВТекущийПлан = РезультатПодготовки.НормативПланируемогоВремени;
				
			Иначе
				
				ДобавитьВТекущийПлан = Нераспределено;
				
			КонецЕсли;
			
			Нераспределено = Нераспределено - ДобавитьВТекущийПлан;
			
			ДанныеЗаписи = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
			ДанныеЗаписи.ИдентификаторПлана      = ДанныеПлана.ИдентификаторПлана;
			ДанныеЗаписи.Сотрудник               = РезультатПодготовки.Сотрудник;
			ДанныеЗаписи.Работа                  = РезультатПодготовки.Работа;
			ДанныеЗаписи.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
			ДанныеЗаписи.ПланируемыеТрудозатраты = ДобавитьВТекущийПлан;
			
			ИзменитьЗначениеПлановыеТрудозатратыЕслиОтображается(СтрокаДерева, 
			                                                     ДанныеЗаписи.ПланируемыеТрудозатраты,
			                                                     Выборка.ИдентификаторПлана,
			                                                     РезультатПодготовки.РаспределятьОстаткиПоНормативу);
			
			ИзменяемыеЗаписи.Добавить(ДанныеЗаписи);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатРаспределения.КоличествоИзмененныхЗаписей = ИзменяемыеЗаписи.Количество();
	
	Для Каждого ДанныеЗаписиПлана Из ИзменяемыеЗаписи Цикл
		
		ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана);
		
	КонецЦикла;
	
	РезультатРаспределения.Успешно = Истина;
	
	Возврат РезультатРаспределения;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаРаспределениеОстаткаПоНормативу()

	Возврат "
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ЗаписиПлана.ПланируемыеТрудозатраты,0)) КАК ПланируемыеТрудозатраты,
	|	Планы.ИдентификаторПлана                               КАК ИдентификаторПлана,
	|	Планы.НачалоПериода                                    КАК НачалоПериода,
	|	Планы.КонецПериода                                     КАК КонецПериода
	|ПОМЕСТИТЬ ДанныеПланов
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана
	|			И ЗаписиПлана.Сотрудник = &Сотрудник
	|
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И Планы.НачалоПериода >= &НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Планы.ИдентификаторПлана,
	|	Планы.НачалоПериода,
	|	Планы.КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ЗаписиПлана.ПланируемыеТрудозатраты) КАК ПланируемыеТрудозатраты,
	|	Планы.ИдентификаторПлана                   КАК ИдентификаторПлана
	|ПОМЕСТИТЬ ДанныеПлановРаспределяемаяРабота
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО Планы.ИдентификаторПлана = ЗаписиПлана.ИдентификаторПлана 
	|			И ЗаписиПлана.Работа = &Работа
	|			И ЗаписиПлана.Сотрудник = &Сотрудник
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И Планы.НачалоПериода >= &НачалоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Планы.ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПланов.ПланируемыеТрудозатраты                                  КАК ТрудозатратыПлана,
	|	ДанныеПланов.ИдентификаторПлана                                       КАК ИдентификаторПлана,
	|	ДанныеПланов.НачалоПериода                                            КАК НачалоПериода,
	|	ДанныеПланов.КонецПериода                                             КАК КонецПериода,
	|	ЕСТЬNULL(ДанныеПлановРаспределяемаяРабота.ПланируемыеТрудозатраты, 0) КАК ТрудозатратыРаботы
	|ИЗ
	|	ДанныеПланов КАК ДанныеПланов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПлановРаспределяемаяРабота КАК ДанныеПлановРаспределяемаяРабота
	|		ПО ДанныеПланов.ИдентификаторПлана = ДанныеПлановРаспределяемаяРабота.ИдентификаторПлана
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПланов.НачалоПериода";
	 
	 

КонецФункции // ()

#КонецОбласти

#Область КопированиеЗначенияКолонки

&НаКлиенте
Функция РезультатПодготовкиКопированияЗначенияКолонки(ИмяТаблицы, ДопустимыеТипы)
	
	РезультатПодготовки = Новый Структура;
	РезультатПодготовки.Вставить("НачалоПериодаПланаСКоторогоРаспределяем", Неопределено);
	РезультатПодготовки.Вставить("Отказ",                                   Ложь);
	РезультатПодготовки.Вставить("КоличествоПериодовДляКопирования",        0);
	РезультатПодготовки.Вставить("КопируемоеЗначение",                      0);
	РезультатПодготовки.Вставить("КоличествоКРаспределению",                0); 
	РезультатПодготовки.Вставить("ПоследующиеПериодыНеПустые",              Ложь);
	РезультатПодготовки.Вставить("Сотрудник",                               Неопределено);
	РезультатПодготовки.Вставить("Работа",                                  Неопределено);
	РезультатПодготовки.Вставить("ИдентификаторТекущейСтроки",              0);
	РезультатПодготовки.Вставить("ИмяТаблицы",                              ИмяТаблицы);
	РезультатПодготовки.Вставить("РассчитыватьОстатокПоНормативу",          Ложь);
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Чтобы выполнить команду необходимо выполнить позиционирование на строке'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	РезультатПодготовки.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если ДопустимыеТипы.Найти(ТипЗнч(ТекущиеДанные.СотрудникРабота)) = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Выполнение команды не доступно для строки группировки'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
	Если РодительскаяСтрока = Неопределено Тогда
		
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	Иначе
		
		Если ДопустимыеТипы.Найти(Тип("СправочникСсылка.Пользователи")) <> Неопределено Тогда
			
			РезультатПодготовки.Сотрудник = ТекущиеДанные.СотрудникРабота;
			РезультатПодготовки.Работа    = РодительскаяСтрока.СотрудникРабота;
			
		ИначеЕсли ДопустимыеТипы.Найти(Тип("СправочникСсылка.ЗадачиПроцесса")) <> Неопределено
			Или ДопустимыеТипы.Найти(Тип("СправочникСсылка.ВидыДеятельности")) <> Неопределено Тогда
			
			РезультатПодготовки.Работа     = ТекущиеДанные.СотрудникРабота;
			РезультатПодготовки.Сотрудник  = РодительскаяСтрока.СотрудникРабота;
			
		Иначе
			
			РезультатПодготовки.Отказ = Истина;
			Возврат РезультатПодготовки;
			
		КонецЕсли;
		
	КонецЕсли;

	ИмяКолонкиБезИмениТаблицыФормы = ИмяКолонкиБезИмениТаблицыФормы(
			Элементы[ИмяТаблицы].ТекущийЭлемент.Имя, 
			ИмяТаблицы);
		
	ДанныеОтображаемогоПлана = ДанныеОтображаемогоПланаПоИмениКолонки(
		ЭтотОбъект, "ИмяКолонкиПлановыеТрудозатраты", ИмяКолонкиБезИмениТаблицыФормы);
		
	Если ДанныеОтображаемогоПлана = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Необходимо выделить колонку с плановыми трудозатратами'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
		
	РезультатПодготовки.КопируемоеЗначение = ТекущиеДанные[ИмяКолонкиБезИмениТаблицыФормы];
	
	РезультатОпределенияДоступности = РезультатОпределенияДоступностиРаспределенияПлановыхТрудозатратКопированием(ТекущиеДанные, ИмяКолонкиБезИмениТаблицыФормы);
	
	Если РезультатОпределенияДоступности.ОперацияДоступна = Ложь Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенной строке нет нераспределенных трудозатрат'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	Если РезультатПодготовки.КопируемоеЗначение = 0
		И Не РезультатОпределенияДоступности.ЭтоВидДеятельности Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенной ячейке не указаны плановые трудозатраты'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		РезультатПодготовки.Отказ = Истина;
		Возврат РезультатПодготовки;
		
	КонецЕсли;
	
	РезультатПодготовки.НачалоПериодаПланаСКоторогоРаспределяем = РезультатОпределенияДоступности.НачалоПериодаПланаСКоторогоРаспределяем;
	РезультатПодготовки.КоличествоКРаспределению                = РезультатОпределенияДоступности.КоличествоКРаспределению;
	
	Если РезультатПодготовки.КоличествоКРаспределению > 0 Тогда
		
		КоличествоПериодов = РезультатПодготовки.КоличествоКРаспределению / РезультатПодготовки.КопируемоеЗначение;
		Если КоличествоПериодов > Цел(КоличествоПериодов) Тогда
			КоличествоПериодов = Цел(КоличествоПериодов) + 1; 
		КонецЕсли;
		
		РезультатПодготовки.КоличествоПериодовДляКопирования = КоличествоПериодов;
		
	ИначеЕсли РезультатОпределенияДоступности.ЭтоВидДеятельности Тогда
		
		Для Каждого СтрокаОтображаемыеПланы Из ОтображаемыеПланы Цикл
			
			Если СтрокаОтображаемыеПланы.Отображается
				И СтрокаОтображаемыеПланы.НачалоПериода > РезультатПодготовки.НачалоПериодаПланаСКоторогоРаспределяем Тогда
				
				РезультатПодготовки.КоличествоПериодовДляКопирования = РезультатПодготовки.КоличествоПериодовДляКопирования + 1; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не РезультатОпределенияДоступности.ЭтоВидДеятельности Тогда
		РезультатПодготовки.ПоследующиеПериодыНеПустые = РезультатОпределенияДоступности.ПоследующиеПериодыНеПустые;
	КонецЕсли;
	
	Если ИмяТаблицы = "ПланЗанятостиОтСотрудников" Тогда
		РезультатПодготовки.РассчитыватьОстатокПоНормативу = Истина;
	КонецЕсли;
	
	Возврат РезультатПодготовки;
	
КонецФункции

&НаКлиенте
Функция РезультатОпределенияДоступностиРаспределенияПлановыхТрудозатратКопированием(СтрокаДерева, ИмяКопируемойКолонки)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Результат = Новый Структура;
	Результат.Вставить("ОперацияДоступна",                        Ложь);
	Результат.Вставить("НачалоПериодаПланаСКоторогоРаспределяем", ПустаяДата);
	Результат.Вставить("КоличествоКРаспределению",                0);
	Результат.Вставить("ПоследующиеПериодыНеПустые",              Ложь);
	Результат.Вставить("ЭтоВидДеятельности",                      Ложь);
	
	ЗапланированоВПоследующихПериодах = 0;
	КолонкаНайдена                    = Ложь;
	Результат.ЭтоВидДеятельности      = (ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности"));
	
	Для Каждого ДанныеОтображаемогоПлана Из ОтображаемыеПланы Цикл
		
		Если КолонкаНайдена 
			И Не ДанныеОтображаемогоПлана.Зафиксирован Тогда
			
			ЗапланированоВПоследующихПериодах = ЗапланированоВПоследующихПериодах 
			                                  + СтрокаДерева[ДанныеОтображаемогоПлана.ИмяКолонкиПлановыеТрудозатраты]; 
			
			Если Результат.НачалоПериодаПланаСКоторогоРаспределяем = ПустаяДата Тогда
				Если Результат.ЭтоВидДеятельности Тогда
					Если ДанныеОтображаемогоПлана.Отображается Тогда
						Результат.НачалоПериодаПланаСКоторогоРаспределяем = ДанныеОтображаемогоПлана.НачалоПериода;
					КонецЕсли;
				Иначе
					Результат.НачалоПериодаПланаСКоторогоРаспределяем = ДанныеОтображаемогоПлана.НачалоПериода;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДанныеОтображаемогоПлана.ИмяКолонкиПлановыеТрудозатраты = ИмяКопируемойКолонки Тогда
			КолонкаНайдена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КолонкаНайдена 
		И Результат.НачалоПериодаПланаСКоторогоРаспределяем = ПустаяДата Тогда
		
		Результат.НачалоПериодаПланаСКоторогоРаспределяем = ДанныеОтображаемогоПлана.КонецПериода + 86400;
		
	КонецЕсли;
	
	ЗапланированоВПоследующихПериодах = ЗапланированоВПоследующихПериодах + СтрокаДерева.ЗапланированоВНеотображаемыхПериодах;
	
	Если Не Результат.ЭтоВидДеятельности Тогда
		Результат.КоличествоКРаспределению = ЗапланированоВПоследующихПериодах + СтрокаДерева.Нераспределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.СотрудникРабота) <> Тип("СправочникСсылка.ВидыДеятельности") Тогда 
		Если ЗапланированоВПоследующихПериодах + СтрокаДерева.Нераспределено > 0 Тогда
			Результат.ОперацияДоступна = Истина;
		КонецЕсли;
	Иначе
		Результат.ОперацияДоступна = Истина;
	КонецЕсли;
	
	Результат.ПоследующиеПериодыНеПустые = (ЗапланированоВПоследующихПериодах > 0);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция РезультатКопированияНеВидДеятельностиВправо(ПараметрыКопирования, Результат)

	СтрокаДерева = ЭтотОбъект[ПараметрыКопирования.ИмяТаблицы].НайтиПоИдентификатору(ПараметрыКопирования.ИдентификаторТекущейСтроки);
	
	ИзменяемыеЗаписи = Новый Массив;
	
	ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
	ПараметрыПолученияПлановПоПериоду.ВидПлана              = ВидПлана;
	ПараметрыПолученияПлановПоПериоду.ДатаНачала            = ПараметрыКопирования.НачалоПериодаПланаСКоторогоРаспределяем;
	ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = НастройкиПланирования[0];
	ПараметрыПолученияПлановПоПериоду.КоличествоПериодов    = ПараметрыКопирования.КоличествоПериодовДляКопирования;
	
	ДанныеПланов = Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
	
	КоличествоКРаспределению     = ПараметрыКопирования.КоличествоКРаспределению;
	НачалоПериодаУдаленияЗаписей = Неопределено; 
	
	Для Каждого ДанныеПлана Из ДанныеПланов Цикл
		
		Если КоличествоКРаспределению = 0 Тогда
			НачалоПериодаУдаленияЗаписей = ДанныеПлана.НачалоПериода;
			Прервать;
		КонецЕсли;
		
		ПлановыеТрудозатратыПериода = ?(КоличествоКРаспределению > ПараметрыКопирования.КопируемоеЗначение,
		                                ПараметрыКопирования.КопируемоеЗначение,
		                                КоличествоКРаспределению); 
		
		КоличествоКРаспределению =  КоличествоКРаспределению - ПлановыеТрудозатратыПериода;
		
		ДанныеЗаписи = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
		ДанныеЗаписи.ИдентификаторПлана      = ДанныеПлана.ИдентификаторПлана;
		ДанныеЗаписи.Сотрудник               = ПараметрыКопирования.Сотрудник;
		ДанныеЗаписи.Работа                  = ПараметрыКопирования.Работа;
		ДанныеЗаписи.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
		ДанныеЗаписи.ПланируемыеТрудозатраты = ПлановыеТрудозатратыПериода;
		
		ИзменитьЗначениеПлановыеТрудозатратыЕслиОтображается(СтрокаДерева, 
		                                                     ПлановыеТрудозатратыПериода,
		                                                     ДанныеПлана.ИдентификаторПлана,
		                                                     ПараметрыКопирования.РассчитыватьОстатокПоНормативу);
		
		ИзменяемыеЗаписи.Добавить(ДанныеЗаписи);
		
	КонецЦикла;
	
	Результат.КоличествоИзмененныхЗаписей = ИзменяемыеЗаписи.Количество();
	
	ЗаписиПланаКУдалению = РегистрыСведений.ЗаписиПлана.ЗаписиПланаПоСотрудникуИРаботеНачинаяС
		(ВидПлана, НачалоПериодаУдаленияЗаписей, ПараметрыКопирования.Сотрудник, ПараметрыКопирования.Работа);
	
	Для Каждого ЗаписьПланаКУдалению Из ЗаписиПланаКУдалению Цикл
		
		ДанныеЗаписи = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
		ДанныеЗаписи.ИдентификаторПлана      = ЗаписьПланаКУдалению.ИдентификаторПлана;
		ДанныеЗаписи.Сотрудник               = ПараметрыКопирования.Сотрудник;
		ДанныеЗаписи.Работа                  = ПараметрыКопирования.Работа;
		ДанныеЗаписи.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
		ДанныеЗаписи.Удалить                 = Истина;
		
		ИзменитьЗначениеПлановыеТрудозатратыЕслиОтображается(СтрокаДерева,
		                                                     0,
		                                                     ЗаписьПланаКУдалению.ИдентификаторПлана,
		                                                     ПараметрыКопирования.РассчитыватьОстатокПоНормативу);
		
		ИзменяемыеЗаписи.Добавить(ДанныеЗаписи); 
		
	КонецЦикла;
	
	Результат.КоличествоУдаленныхЗаписей = ИзменяемыеЗаписи.Количество() - Результат.КоличествоИзмененныхЗаписей;
	
	Для Каждого ДанныеЗаписиПлана Из ИзменяемыеЗаписи Цикл
		
		ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция РезультатКопированияВидДеятельностиВправо(ПараметрыКопирования, Результат)
	
	СтрокаДерева = ЭтотОбъект[ПараметрыКопирования.ИмяТаблицы].НайтиПоИдентификатору(ПараметрыКопирования.ИдентификаторТекущейСтроки);
	
	ИзменяемыеЗаписи = Новый Массив;
	
	ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
	ПараметрыПолученияПлановПоПериоду.ВидПлана              = ВидПлана;
	ПараметрыПолученияПлановПоПериоду.ДатаНачала            = ПараметрыКопирования.НачалоПериодаПланаСКоторогоРаспределяем;
	ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = НастройкиПланирования[0];
	ПараметрыПолученияПлановПоПериоду.КоличествоПериодов    = ПараметрыКопирования.КоличествоПериодовДляКопирования;
	
	ДанныеПланов = Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
	
	Для Каждого ДанныеПлана Из ДанныеПланов Цикл
		
		ДанныеЗаписи = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
		ДанныеЗаписи.ИдентификаторПлана      = ДанныеПлана.ИдентификаторПлана;
		ДанныеЗаписи.Сотрудник               = ПараметрыКопирования.Сотрудник;
		ДанныеЗаписи.Работа                  = ПараметрыКопирования.Работа;
		ДанныеЗаписи.ТипСтрокиПлана          = Перечисления.ТипыСтрокПлана.Работа;
		ДанныеЗаписи.ПланируемыеТрудозатраты = ПараметрыКопирования.КопируемоеЗначение;
		
		ИзменитьЗначениеПлановыеТрудозатратыЕслиОтображается(СтрокаДерева, 
		                                                     ПараметрыКопирования.КопируемоеЗначение,
		                                                     ДанныеПлана.ИдентификаторПлана,
		                                                     Истина);
		
		ИзменяемыеЗаписи.Добавить(ДанныеЗаписи);
		
	КонецЦикла;
	
	Результат.КоличествоИзмененныхЗаписей = ИзменяемыеЗаписи.Количество();
	
	Для Каждого ДанныеЗаписиПлана Из ИзменяемыеЗаписи Цикл
		
		ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатКопированияВыделеннойЯчейкиВправо(ПараметрыКопирования)
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоИзмененныхЗаписей", 0);
	Результат.Вставить("КоличествоУдаленныхЗаписей", 0);
	
	ЭтоВидДеятельности = ТипЗнч(ПараметрыКопирования.Работа) = Тип("СправочникСсылка.ВидыДеятельности");
	
	Если ЭтоВидДеятельности Тогда
		Возврат РезультатКопированияВидДеятельностиВправо(ПараметрыКопирования, Результат);
	Иначе
		Возврат РезультатКопированияНеВидДеятельностиВправо(ПараметрыКопирования, Результат);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИзменитьЗначениеПлановыеТрудозатратыЕслиОтображается(СтрокаДерева, НовоеЗначение, ИдентификаторПлана, РассчитыватьОстатокПоНормативу)

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИдентификаторПлана", ИдентификаторПлана);
	
	НайденныеСтроки = ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрокаДерева[НайденныеСтроки[0].ИмяКолонкиПлановыеТрудозатраты] = НовоеЗначение;
		Если РассчитыватьОстатокПоНормативу Тогда
			 СтрокаДерева[НайденныеСтроки[0].ИмяКолонкиОстатокПоНормативу] = НовоеЗначение;
		КонецЕсли;
		ПересчитатьМассивКолонокРодительскихСтрокДереваПослеИзмененияПодчиненного(
			ЭтотОбъект,
			СтрокаДерева, 
			МассивИменКолонокКПерерасчетуПослеИзмененияПлановыеТрудозатраты(НайденныеСтроки[0].ИмяКолонкиПлановыеТрудозатраты),
			РассчитыватьОстатокПоНормативу);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВыделеннуюЯчейкуВправоЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	РезультатКопирования = РезультатКопированияВыделеннойЯчейкиВправо(ДополнительныеПараметры);
	
	Если РезультатКопирования.КоличествоИзмененныхЗаписей <> 0
		Или РезультатКопирования.КоличествоУдаленныхЗаписей <> 0 Тогда
		
		Если ДополнительныеПараметры.ИмяТаблицы = "ПланЗанятостиОтСотрудников" Тогда
			
			ТекущаяСтрока = ЭтотОбъект.ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки); 
			Если ТипЗнч(ТекущаяСтрока.СотрудникРабота) <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
				ТекущаяСтрока.ДополнительныеДанныеНеПолучены        = Истина;
				ТребуетсяПолучениеДополнительныхДанныхОтСотрудников = Истина;
				ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте();
			КонецЕсли;
			
		ИначеЕсли ДополнительныеПараметры.ИмяТаблицы = "ПланЗанятостиОтТехпроектов" Тогда

			ТекущаяСтрока = ЭтотОбъект.ПланЗанятостиОтТехпроектов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторТекущейСтроки);
			ТекущаяСтрока.ДополнительныеДанныеНеПолучены        = Истина;
			ТребуетсяПолучениеДополнительныхДанныхОтТехПроектов = Истина;
			
			ОбновитьДанныеСтраницаОтСотрудниковНаКлиенте();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ФиксацияПлана

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеПервогоНезафиксированногоПлана(Форма)
	
	ДанныеПлана = Неопределено;
	Для Каждого СтрокаОтображаемыеПланы Из Форма.ОтображаемыеПланы Цикл
		Если Не СтрокаОтображаемыеПланы.Зафиксирован Тогда
			 ДанныеПлана = СтрокаОтображаемыеПланы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДанныеПлана;
	
КонецФункции

&НаКлиенте
Функция ДанныеПоследнегоЗафиксированногоПлана(Форма)
	
	ДанныеПлана = Неопределено;
	Для Каждого СтрокаОтображаемыеПланы Из Форма.ОтображаемыеПланы Цикл
		Если СтрокаОтображаемыеПланы.Зафиксирован Тогда
			ДанныеПлана = СтрокаОтображаемыеПланы;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ДанныеПлана;
	
КонецФункции

&НаКлиенте
Процедура ПослеОтветаНаВопросФиксацияПлана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьФиксациюПланаНаСервере(ДополнительныеПараметры.ИдентификаторПлана, 
	                               ДополнительныеПараметры.ИдентификаторСтрокиОтображаемыеПланы, 
	                               ДополнительныеПараметры.Фиксировать,
	                               ДополнительныеПараметры.ИмяКолонкиРедактирование);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФиксациюПланаНаСервере(ИдентификаторПлана, ИдентификаторСтрокиОтображаемыеПланы, Зафиксировать, ИмяКолонкиРедактирование)

	УстановитьПривилегированныйРежим(Истина);
	
	Если Зафиксировать Тогда
		РегистрыСведений.Планы.ЗафиксироватьПлан(ИдентификаторПлана);
	Иначе
		РегистрыСведений.Планы.ОтменитьФиксациюПлана(ИдентификаторПлана);
	КонецЕсли; 
	
	Если Не ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(ВладельцыПлана, ТекущийПользователь) Тогда
		ИзменитьЗначениеКолонкиДерева(ПланЗанятостиОтСотрудников, ИмяКолонкиРедактирование, Не Зафиксировать, "СотрудникРабота", Тип("СправочникСсылка.ЗадачиПроцесса"));
		ИзменитьЗначениеКолонкиДерева(ПланЗанятостиОтТехпроектов, ИмяКолонкиРедактирование, Не Зафиксировать, "СотрудникРабота", Тип("СправочникСсылка.Пользователи"));
	КонецЕсли;
	
	СтрокаОтображаемыеПланы = ОтображаемыеПланы.НайтиПоИдентификатору(ИдентификаторСтрокиОтображаемыеПланы);
	СтрокаОтображаемыеПланы.Зафиксирован = Зафиксировать;
	
	ОбновитьОтображениеКартинокКолонокПериодов();
	
	ОпределитьЗаголовкиКомандФиксации(ЭтотОбъект);
	УправлениеДоступностью(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКартинокКолонокПериодов()

	Для Каждого ДанныеОтображаемогоПлана Из ОтображаемыеПланы Цикл
		
		Если Не ДанныеОтображаемогоПлана.Отображается Тогда
			Продолжить;
		КонецЕсли;
		
		ОпределитьКартинкуКолонкиПериодаПланирования(
			Элементы["ПланЗанятостиОтСотрудников" + ДанныеОтображаемогоПлана.ИмяКолонкиПлановыеТрудозатраты],
			ДанныеОтображаемогоПлана.Зафиксирован);
			
		ОпределитьКартинкуКолонкиПериодаПланирования(
			Элементы["ПланЗанятостиОтТехпроектов" + ДанныеОтображаемогоПлана.ИмяКолонкиПлановыеТрудозатраты],
			ДанныеОтображаемогоПлана.Зафиксирован);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗначениеКолонкиДерева (КоллекцияЗначений, ИмяКолонки, УстанавливаемоеЗначение, ИмяКолонкиПроверки, ПроверяемыйТип)

	Для Каждого СтрокаДерева Из КоллекцияЗначений.ПолучитьЭлементы() Цикл
		
		Если ТипЗнч(СтрокаДерева[ИмяКолонкиПроверки]) = ПроверяемыйТип Тогда
			
			СтрокаДерева[ИмяКолонки] = УстанавливаемоеЗначение;
			
		КонецЕсли;
		
		ИзменитьЗначениеКолонкиДерева (СтрокаДерева, ИмяКолонки, УстанавливаемоеЗначение, ИмяКолонкиПроверки, ПроверяемыйТип)
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьЗаголовкиКомандФиксации(Форма)
	
	Форма.ДоступнаОтменаФиксации = Ложь;
	Форма.ДоступнаФиксация       = Ложь;
	
	ТекстКомандыЗафиксировать    = НСтр("ru = 'Зафиксировать'");
	ТекстКомандыОтменитьФиксацию = НСтр("ru = 'Отменить фиксацию плана'");
	
	Для Каждого ДанныеПлана Из Форма.ОтображаемыеПланы Цикл
		
		Если ДанныеПлана.Зафиксирован Тогда
			
			ТекстКомандыОтменитьФиксацию = СтрШаблон(НСтр("ru = 'Отменить фиксацию (%1)'"), ПредставлениеПериодаПлана(ДанныеПлана.НачалоПериода, ДанныеПлана.КонецПериода));
			Форма.ДоступнаОтменаФиксации = Истина;
			
		Иначе
			
			ТекстКомандыЗафиксировать = СтрШаблон(НСтр("ru = 'Зафиксировать (%1)'"), ПредставлениеПериодаПлана(ДанныеПлана.НачалоПериода, ДанныеПлана.КонецПериода));
			Форма.ДоступнаФиксация    = Истина;
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Форма.Элементы.ЗафиксироватьПлан.Заголовок     = ТекстКомандыЗафиксировать;
	Форма.Элементы.ОтменитьФиксациюПлана.Заголовок = ТекстКомандыОтменитьФиксацию;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеДатыГоризонтаПланирования

&НаКлиенте
Функция ДатыВОдномПериодеПланирования(Дата1, Дата2)
	
	Для Каждого СтрокаОтображаемыеПланы Из ОтображаемыеПланы Цикл
		
		Дата1Входит = (Дата1 >= СтрокаОтображаемыеПланы.НачалоПериода 
		               И Дата1 <=  СтрокаОтображаемыеПланы.КонецПериода);
		
		Дата2Входит = (Дата2 >= СтрокаОтображаемыеПланы.НачалоПериода 
		               И Дата2 <=  СтрокаОтображаемыеПланы.КонецПериода);
		
		Если Дата1Входит И Дата2Входит Тогда
			Возврат Истина;
		ИначеЕсли Дата1Входит <> Дата2Входит Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПослеИзмененияВыводитьПериодыПланированияПоНаСервере()

	ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
	ПараметрыПолученияПлановПоПериоду.ВидПлана              = ВидПлана;
	ПараметрыПолученияПлановПоПериоду.ДатаНачала            = ТекущаяДата;
	ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = НастройкиПланирования[0];
	ПараметрыПолученияПлановПоПериоду.ДатаОкончания         = ВыводитьПериодыПланированияПо;
	
	ТаблицаПланов = Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
	
	Для Каждого СтрокаТаблицыНовыйПериод Из ТаблицаПланов Цикл
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИдентификаторПлана", СтрокаТаблицыНовыйПериод.ИдентификаторПлана);
		
		НайденныеСтроки = ОтображаемыеПланы.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрокаОтображаемыеПланы = ОтображаемыеПланы.Добавить(); 
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОтображаемыеПланы, СтрокаТаблицыНовыйПериод);
			НоваяСтрокаОтображаемыеПланы.Отображается = Истина;
			
			ТребуетсяОбновление = Истина;
			
		Иначе
			
			Если Не НайденныеСтроки[0].Отображается Тогда
				ТребуетсяОбновление = Ложь;
			КонецЕсли;
			НайденныеСтроки[0].Отображается = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоСтрокОтображаемыеПланы = ОтображаемыеПланы.Количество();
	КоличествоСтрокТекущийПериод     = ТаблицаПланов.Количество();
	
	Если КоличествоСтрокОтображаемыеПланы > КоличествоСтрокТекущийПериод Тогда
		
		Для Инд = КоличествоСтрокТекущийПериод По КоличествоСтрокОтображаемыеПланы - 1 Цикл
			
			ОтображаемыеПланы[Инд].Отображается = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОтобразитьТаблицыПланирования();
	ЗаполнитьДеревоОтСотрудников();
	ЗаполнитьДеревоОтТехническихПроектов();
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеРаскрытыхУзлов

&НаКлиенте
Функция КлючТекущейСтрокиДерева(ИмяДерева, ИмяКолонки)
	
	КлючСтроки = Новый Структура;
	КлючСтроки.Вставить("Уровень1", Неопределено);
	КлючСтроки.Вставить("Уровень2", Неопределено);
	КлючСтроки.Вставить("Уровень3", Неопределено);
	
	ТекущиеДанные = Элементы[ИмяДерева].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаРодитель = Неопределено Тогда
		КлючСтроки.Вставить("Уровень1", ТекущиеДанные[ИмяКолонки]);
		Возврат КлючСтроки;
	КонецЕсли; 
	
	СтрокаВерхнегоУровня = СтрокаРодитель.ПолучитьРодителя();
	Если СтрокаВерхнегоУровня = Неопределено Тогда
		КлючСтроки.Вставить("Уровень1", СтрокаРодитель[ИмяКолонки]);
		КлючСтроки.Вставить("Уровень2", ТекущиеДанные[ИмяКолонки]);
		Возврат КлючСтроки;
	КонецЕсли;
	
	КлючСтроки.Вставить("Уровень1", СтрокаВерхнегоУровня[ИмяКолонки]);
	КлючСтроки.Вставить("Уровень2", СтрокаРодитель[ИмяКолонки]);
	КлючСтроки.Вставить("Уровень3", ТекущиеДанные[ИмяКолонки]);
	
	Возврат КлючСтроки;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьТекущуюСтрокуДереваПоКлючу(ИмяДерева, ИмяКолонки, КлючТекущейСтроки)

	Если КлючТекущейСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если КлючТекущейСтроки.Уровень1 <> Неопределено Тогда
		
		НайденнаяСтрокаУровень1 = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ЭтотОбъект[ИмяДерева],
		                                                                                     ИмяКолонки,
		                                                                                     КлючТекущейСтроки.Уровень1,
		                                                                                     0);
		
		Если НайденнаяСтрокаУровень1 <> Неопределено Тогда
			
			Если КлючТекущейСтроки.Уровень2 <> Неопределено Тогда
				
				НайденнаяСтрокаУровень2 = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(НайденнаяСтрокаУровень1,
				                                                                                     ИмяКолонки,
				                                                                                     КлючТекущейСтроки.Уровень2,
				                                                                                     0); 
				
				Если НайденнаяСтрокаУровень2 <> Неопределено Тогда
			
					Если КлючТекущейСтроки.Уровень3 <> Неопределено Тогда 
						
						НайденнаяСтрокаУровень3 = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(НайденнаяСтрокаУровень2,
						                                                                                     ИмяКолонки,
						                                                                                     КлючТекущейСтроки.Уровень3,
						                                                                                     0);
						
						Если НайденнаяСтрокаУровень3 <> Неопределено Тогда
							 
							Элементы[ИмяДерева].ТекущаяСтрока = НайденнаяСтрокаУровень3.ПолучитьИдентификатор();
							 
						КонецЕсли;
						
					Иначе
						
						Элементы[ИмяДерева].ТекущаяСтрока = НайденнаяСтрокаУровень2.ПолучитьИдентификатор();
						
					КонецЕсли;
					
				Иначе 
					
					Элементы[ИмяДерева].ТекущаяСтрока = НайденнаяСтрокаУровень1.ПолучитьИдентификатор()
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КлючиРазвернутыхУзловДерева(ИмяДерева, ИмяКолонки)

	КлючиРазвернутыхУзловДерева = Новый Соответствие;
	
	Для Каждого СтрокаВерхнегоУровня Из ЭтотОбъект[ИмяДерева].ПолучитьЭлементы() Цикл
		
		Если Элементы[ИмяДерева].Развернут(СтрокаВерхнегоУровня.ПолучитьИдентификатор()) = Истина Тогда
			
			РазвернутныеПодчиненныеСтроки = Новый Массив;
			
			Для Каждого СтрокаГруппировка Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл
				
				Если Элементы[ИмяДерева].Развернут(СтрокаГруппировка.ПолучитьИдентификатор()) = Истина Тогда
					
					РазвернутныеПодчиненныеСтроки.Добавить(СтрокаГруппировка[ИмяКолонки]);
					
				КонецЕсли;
				
			КонецЦикла;
				
			КлючиРазвернутыхУзловДерева.Вставить(СтрокаВерхнегоУровня[ИмяКолонки], РазвернутныеПодчиненныеСтроки);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КлючиРазвернутыхУзловДерева;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьРазвернутыеУзлыДерева(ИмяДерева, ИмяКолонки, КлючиРазвернутыхУзловДерева)

	Для Каждого КлючИЗначение Из КлючиРазвернутыхУзловДерева Цикл
		
		НайденнаяСтрокаВерхнийУровень = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ЭтотОбъект[ИмяДерева],
		                                                                                           ИмяКолонки,
		                                                                                           КлючИЗначение.Ключ,
		                                                                                           0);
		
		Если НайденнаяСтрокаВерхнийУровень = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Элементы[ИмяДерева].Развернут(НайденнаяСтрокаВерхнийУровень.ПолучитьИдентификатор()) Тогда
			Элементы[ИмяДерева].Развернуть(НайденнаяСтрокаВерхнийУровень.ПолучитьИдентификатор());
		КонецЕсли;
		
		Для Каждого ЗначениеГруппировки Из КлючИЗначение.Значение Цикл
			
			НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(НайденнаяСтрокаВерхнийУровень,
			                                                                             ИмяКолонки, 
			                                                                             ЗначениеГруппировки,
			                                                                             0);
			
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Элементы[ИмяДерева].Развернут(НайденнаяСтрока.ПолучитьИдентификатор()) Тогда
				Элементы[ИмяДерева].Развернуть(НайденнаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДополнительныхДанных

&НаКлиенте
Процедура ПроверитьНеобходимостьПолученияДополнительныхДанных()
	
	Если ТребуетсяПолучениеДополнительныхДанныхОтСотрудников Тогда
		
		ПолучитьДополнительныеДанныеОтСотрудников();
		
	КонецЕсли;
	
	Если ТребуетсяПолучениеДополнительныхДанныхОтТехПроектов Тогда
		
		ПолучитьДополнительныеДанныеОтТехПроектов();
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьНеобходимостьПолученияДополнительныхДанных", 0.2, Истина);
	
КонецПроцедуры

#Область ПолучениеДополнительныхДанныхОтТехПроектов

&НаКлиенте
Функция ДанныеДляПолученияДополнительныхДанныхОтТехПроектов()
	
	ПериодыОтображаемыхПланов = ПериодыОтображаемыхПланов(ЭтотОбъект);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВидПлана", ВидПлана); 
	СтруктураВозврата.Вставить("НачалоПериодаОтображаемыхПланов",     ПериодыОтображаемыхПланов.НачалоПериода);
	СтруктураВозврата.Вставить("КонецПериодаОтображаемыхПланов",      ПериодыОтображаемыхПланов.КонецПериода);
	СтруктураВозврата.Вставить("ВидСогласуемогоРесурсаПлановыхРабот", ВидСогласуемогоРесурсаПлановыхРабот);
	СтруктураВозврата.Вставить("СотрудникиПоЭтапам",                  Новый Массив); 
	
	Для Каждого СтрокаТехПроект Из ПланЗанятостиОтТехпроектов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаЭтап Из СтрокаТехПроект.ПолучитьЭлементы() Цикл
			
			Если ЗначениеЗаполнено(СтрокаЭтап.СотрудникРабота) Тогда
				Этап = СтрокаЭтап.СотрудникРабота;
			Иначе
				Этап = СтрокаТехПроект.СотрудникРабота;
			КонецЕсли;
			
			СотрудникиЭтапа = Новый Структура;
			СотрудникиЭтапа.Вставить("Этап",       Этап);
			СотрудникиЭтапа.Вставить("Сотрудники", Новый Массив);
			
			Для Каждого СтрокаСотрудник Из СтрокаЭтап.ПолучитьЭлементы() Цикл
				
				Если СтрокаСотрудник.ДополнительныеДанныеНеПолучены Тогда
					
					СотрудникиЭтапа.Сотрудники.Добавить(СтрокаСотрудник.СотрудникРабота);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураВозврата.СотрудникиПоЭтапам.Добавить(СотрудникиЭтапа);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьДополнительныеДанныеОтТехПроектовДлительнаяОперация(ДанныеДляПолучения, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолучения", ДанныеДляПолучения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дополнительных данных для планов занятости от технических проектов'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДополнительныеДанныеПланыЗанятостиОтТехПроектов",
		                                                    ПараметрыПроцедуры, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДополнительныеДанныеОтТехПроектов()
	
	ТребуетсяПолучениеДополнительныхДанныхОтТехПроектов = Ложь;
	
	ДанныеДляПолучения = ДанныеДляПолученияДополнительныхДанныхОтТехПроектов();
	
	Если ДанныеДляПолучения.СотрудникиПоЭтапам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПолучитьДополнительныеДанныеОтТехПроектовДлительнаяОперация(ДанныеДляПолучения,
	                                                                                 УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПолучитьДополнительныеДанныеОтТехПроектовЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДополнительныеДанныеОтТехПроектовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДополнительныеДанныеОтТехПроектов(АдресРезультата, ДополнительныеПараметры)

	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеДанные = ДанныеВременногоХранилища(АдресРезультата);
	
	Если ДополнительныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭтапСотрудники Из ДополнительныеДанные.ЭтапыСотрудники Цикл 
		
		Если ТипЗнч(ЭтапСотрудники.Этап) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда 
				
				СтрокаТехПроект = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтТехпроектов,
				                                                                        "СотрудникРабота", 
				                                                                         ЭтапСотрудники.Этап ,
				                                                                         0);
				
				Если СтрокаТехПроект = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				СтрокаЭтап = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтТехпроектов,
				                                                                        "СотрудникРабота", 
				                                                                         ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"),
				                                                                         1);
				
				
			Иначе
				
				СтрокаЭтап = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтТехпроектов,
				                                                                        "СотрудникРабота", 
				                                                                         ЭтапСотрудники.Этап,
				                                                                         1); 
				
		КонецЕсли;
		
		Если СтрокаЭтап = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		Для Каждого ДанныеСотрудника Из ЭтапСотрудники.СотрудникиЭтапа Цикл
			
			СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаЭтап,
			                                                                             "СотрудникРабота",
			                                                                             ДанныеСотрудника.Сотрудник,
			                                                                             0);
			
			Если СтрокаСотрудник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСотрудник.ДополнительныеДанныеНеПолучены = Ложь;
			
			СтрокаСотрудник.Факт                                 = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ДанныеСотрудника.Факт);
			СтрокаСотрудник.ЗапланированоВНеотображаемыхПериодах = ДанныеСотрудника.ЗапланированоВНеотображаемыхПериодах;
			СтрокаСотрудник.Остаток                              = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ДанныеСотрудника.Остаток);
			
			ПересчитатьНераспределено(СтрокаСотрудник, ДопустимыеТипыПересчетНераспределеноОтТехПроектов());
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскихСтрокДереваПоДаннымПодчиненных(ЭтотОбъект,
	                                                                                           "ПланЗанятостиОтТехПроектов",
	                                                                                            МассивИменКолонокДляПерерасчетаПослеЗаполненияДополнительныеДанные(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДополнительныеДанныеОтТехПроектовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДополнительныеДанныеОтТехПроектов(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДополнительныхДанныхОтСотрудников

&НаКлиенте
Процедура ПолучитьДополнительныеДанныеОтСотрудников()
	
	ТребуетсяПолучениеДополнительныхДанныхОтСотрудников = Ложь;
	
	ДанныеДляПолучения = ДанныеДляПолученияДополнительныхДанныхОтСотрудников();
	
	Если ДанныеДляПолучения.ЭтапыПоСотрудникам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПолучитьДополнительныеДанныеОтСотрудниковДлительнаяОперация(ДанныеДляПолучения,
	                                                                                 УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПолучитьДополнительныеДанныеОтСотрудниковЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДополнительныеДанныеОтСотрудниковЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДополнительныеДанныеОтСотрудниковДлительнаяОперация(ДанныеДляПолучения, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолучения", ДанныеДляПолучения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дополнительных данных для планов занятости от сотрудников'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДополнительныеДанныеПланыЗанятостиОтСотрудников",
		                                                    ПараметрыПроцедуры, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДополнительныеДанныеОтСотрудниковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДополнительныеДанныеОтСотрудников(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДополнительныеДанныеОтСотрудников(АдресРезультата, ДополнительныеПараметры)

	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеДанные = ДанныеВременногоХранилища(АдресРезультата);
	
	Если ДополнительныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СотрудникЭтапы Из ДополнительныеДанные.СотрудникЭтапы Цикл
		
		СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтСотрудников,
		                                                                             "СотрудникРабота", 
		                                                                             СотрудникЭтапы.Сотрудник,
		                                                                             1);
		
		Если СтрокаСотрудник = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		Для Каждого ДанныеЭтапа Из СотрудникЭтапы.ЭтапыСотрудника Цикл
			
			Если ТипЗнч(ДанныеЭтапа.Этап) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда 
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("СотрудникРабота", ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка"));
				ПараметрыПоиска.Вставить("ТехническийПроект", ДанныеЭтапа.Этап); 
				
				СтрокаЭтап = ПланированиеКлиентСервер.НайденнаяСтрокаПоСтруктуреВКоллекцииСтрокДерева(СтрокаСотрудник, ПараметрыПоиска);
				
			ИначеЕсли ТипЗнч(ДанныеЭтапа.Этап) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда 
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("СотрудникРабота", ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПустаяСсылка"));
				ПараметрыПоиска.Вставить("ТехническийПроект", ДанныеЭтапа.Этап); 
				
				СтрокаЭтап = ПланированиеКлиентСервер.НайденнаяСтрокаПоСтруктуреВКоллекцииСтрокДерева(СтрокаСотрудник, ПараметрыПоиска);
				
			Иначе
				
				СтрокаЭтап = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
				                                                                        "СотрудникРабота",
				                                                                        ДанныеЭтапа.Этап,
				                                                                        0); 
				
			КонецЕсли;
			
			Если СтрокаЭтап = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЭтап.ДополнительныеДанныеНеПолучены = Ложь;
			
			СтрокаЭтап.Факт                                 = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ДанныеЭтапа.Факт);
			СтрокаЭтап.ЗапланированоВНеотображаемыхПериодах = ДанныеЭтапа.ЗапланированоВНеотображаемыхПериодах;
			СтрокаЭтап.Остаток                              = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ДанныеЭтапа.Остаток);
			
			ПересчитатьНераспределено(СтрокаЭтап, ДопустимыеТипыПересчетНераспределеноОтСотрудников());
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскихСтрокДереваПоДаннымПодчиненных(ЭтотОбъект,
	                                                                                            "ПланЗанятостиОтСотрудников",
	                                                                                             МассивИменКолонокДляПерерасчетаПослеЗаполненияДополнительныеДанные(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляПолученияДополнительныхДанныхОтСотрудников()
	
	ПериодыОтображаемыхПланов = ПериодыОтображаемыхПланов(ЭтотОбъект);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВидПлана", ВидПлана); 
	СтруктураВозврата.Вставить("НачалоПериодаОтображаемыхПланов",     ПериодыОтображаемыхПланов.НачалоПериода);
	СтруктураВозврата.Вставить("КонецПериодаОтображаемыхПланов",      ПериодыОтображаемыхПланов.КонецПериода);
	СтруктураВозврата.Вставить("ВидСогласуемогоРесурсаПлановыхРабот", ВидСогласуемогоРесурсаПлановыхРабот);
	СтруктураВозврата.Вставить("ЭтапыПоСотрудникам",                  Новый Массив); 
	
	Для Каждого СтрокаПодразделение Из ПланЗанятостиОтСотрудников.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаСотрудник Из СтрокаПодразделение.ПолучитьЭлементы() Цикл
			
			ЭтапыСотрудника = Новый Структура;
			ЭтапыСотрудника.Вставить("Сотрудник", СтрокаСотрудник.СотрудникРабота);
			ЭтапыСотрудника.Вставить("Этапы", Новый Массив);
			
			Для Каждого СтрокаРабота Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
				
				Если СтрокаРабота.ДополнительныеДанныеНеПолучены Тогда
					
					Если ЗначениеЗаполнено(СтрокаРабота.СотрудникРабота) Тогда
						ЭтапыСотрудника.Этапы.Добавить(СтрокаРабота.СотрудникРабота);
					Иначе
						ЭтапыСотрудника.Этапы.Добавить(СтрокаРабота.ТехническийПроект);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураВозврата.ЭтапыПоСотрудникам.Добавить(ЭтапыСотрудника);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПериодыОтображаемыхПланов(Форма)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НачалоПериода", Неопределено);
	СтруктураВозврата.Вставить("КонецПериода",  Неопределено);
	
	Для Каждого СтрокаОтображаемыеПланы Из Форма.ОтображаемыеПланы Цикл
		
		Если СтрокаОтображаемыеПланы.Отображается Тогда
			
			Если СтруктураВозврата.НачалоПериода = Неопределено Тогда
				
				СтруктураВозврата.НачалоПериода = СтрокаОтображаемыеПланы.НачалоПериода;
				
			КонецЕсли;
			
			СтруктураВозврата.КонецПериода = СтрокаОтображаемыеПланы.КонецПериода;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВременногоХранилища(АдресВременногоХранилища)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Перерасчеты

&НаКлиенте
Процедура ПересчитатьНераспределено(СтрокаДерева, ДопустимыеТипы)
	
	Если ДопустимыеТипы.Найти(СтрокаДерева.ТипСотрудникРабота) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Распределено = 0;
	
	Для Каждого СтрокаОтображаемыеПланы Из ОтображаемыеПланы Цикл
	
		Распределено = Распределено + СтрокаДерева[СтрокаОтображаемыеПланы.ИмяКолонкиПлановыеТрудозатраты];
	
	КонецЦикла;
	
	Распределено = Распределено + СтрокаДерева.ЗапланированоВНеотображаемыхПериодах; 
	
	Нераспределено = СтрокаДерева.Остаток - Распределено;
	Если Нераспределено > 0 Тогда
		СтрокаДерева.Нераспределено = Нераспределено;
		СтрокаДерева.Резерв         = 0;
	Иначе
		
		СтрокаДерева.Нераспределено = 0;
		СтрокаДерева.Резерв         = - Нераспределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДопустимыеТипыПересчетНераспределеноОтСотрудников()
	
	ДопустимыеТипы = Новый Массив;
	
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.ЗадачиПроцесса"));
	ДопустимыеТипы.Добавить(Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана"));
	
	Возврат ДопустимыеТипы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДопустимыеТипыПересчетНераспределеноОтТехПроектов()
	
	ДопустимыеТипы = Новый Массив;
	
	ДопустимыеТипы.Добавить(Тип("СправочникСсылка.Пользователи"));
	
	Возврат ДопустимыеТипы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивИменКолонокДляПерерасчетаПослеЗаполненияДерева(Форма)
	
	МассивИменКолонок = Новый Массив;
	
	Для Каждого СтрокаОтображаемыеПланы Из Форма.ОтображаемыеПланы Цикл
		
		Если СтрокаОтображаемыеПланы.Отображается Тогда
			
			МассивИменКолонок.Добавить(СтрокаОтображаемыеПланы.ИмяКолонкиПлановыеТрудозатраты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивИменКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивИменКолонокКПерерасчетуПослеУдаленияСтроки(Форма)
	
	МассивИменКолонок = МассивИменКолонокДляПерерасчетаПослеЗаполненияДерева(Форма);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИменКолонок, МассивИменКолонокДляПерерасчетаПослеЗаполненияДополнительныеДанные(Форма));
	
	Возврат МассивИменКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьМассивКолонокРодительскихСтрокДереваПослеИзмененияПодчиненного(Форма,
	                                                                                ИзмененнаяСтрока,
	                                                                                МассивИменКолонок,
	                                                                                ПересчитыватьОстатокПоНормативу)
	
	СтрокаРодитель = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Если СтрокаРодитель <> Неопределено Тогда
		
		Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
			
			ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаРодитель, ИмяКолонки);
			
			Если ПересчитыватьОстатокПоНормативу
				И Форма.ЕстьНормативПланируемогоВремени
				И ЭтоКолонкаПлановыеТрудозатраты(ИмяКолонки) Тогда
				
				ИмяКолонкиОстаткиПоНормативу = ИмяКолонкиОстатокПоНормативуПоИмениКолонкиПлановыеТрудозатраты(ИмяКолонки);
				
				Если СтрокаРодитель.ТипСотрудникРабота = Тип("СправочникСсылка.Пользователи") Тогда
					СтрокаРодитель[ИмяКолонкиОстаткиПоНормативу] = Форма.НормативПланируемогоВремени - СтрокаРодитель[ИмяКолонки];
				Иначе
					СтрокаРодитель[ИмяКолонкиОстаткиПоНормативу] = СтрокаРодитель[ИмяКолонки];
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЦикла;
		
		ПересчитатьМассивКолонокРодительскихСтрокДереваПослеИзмененияПодчиненного(Форма,
		                                                                          СтрокаРодитель,
		                                                                          МассивИменКолонок,
		                                                                          ПересчитыватьОстатокПоНормативу);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МассивИменКолонокДляПерерасчетаПослеЗаполненияДополнительныеДанные(Форма)
	
	МассивИменКолонок = Новый Массив;
	
	МассивИменКолонок.Добавить("Остаток");
	МассивИменКолонок.Добавить("Факт");
	МассивИменКолонок.Добавить("Нераспределено");
	МассивИменКолонок.Добавить("Резерв");
	МассивИменКолонок.Добавить("ЗапланированоВНеотображаемыхПериодах");
	
	Возврат МассивИменКолонок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МассивИменКолонокКПерерасчетуПослеИзмененияПлановыеТрудозатраты(ИмяИзмененнойКолонки)
	
	МассивИменКолонок = Новый Массив;
	
	МассивИменКолонок.Добавить("Нераспределено");
	МассивИменКолонок.Добавить("Резерв");
	МассивИменКолонок.Добавить(ИмяИзмененнойКолонки);
	
	Возврат МассивИменКолонок;
	
КонецФункции

#КонецОбласти

#Область ИменаКолонок

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиПлановыеТрудозатраты(ИдентификаторПлана)
	
	ИдентификаторПланаСтрокой = ПланированиеКлиентСервер.ИдентификаторПланаСтрокой(ИдентификаторПлана);
	Возврат "ПлановыеТрудозатраты_" + ИдентификаторПланаСтрокой;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоКолонкаПлановыеТрудозатраты(ИмяКолонки)

	Возврат СтрНайти(ИмяКолонки, "ПлановыеТрудозатраты") <> 0;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиПлановыеТрудозатратыОстатокПоНормативуПоИмениКолонки(ИмяКолонки)
	
	Возврат СтрЗаменить(ИмяКолонки, "ОстатокПоНормативу", "ПлановыеТрудозатраты");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиОстатокПоНормативуПоИмениКолонкиПлановыеТрудозатраты(ИмяКолонки)
	
	Возврат СтрЗаменить(ИмяКолонки, "ПлановыеТрудозатраты", "ОстатокПоНормативу");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиОстатокПоНормативу(ИдентификаторПлана)
	
	ИдентификаторПланаСтрокой = ПланированиеКлиентСервер.ИдентификаторПланаСтрокой(ИдентификаторПлана);
	Возврат "ОстатокПоНормативу_" + ИдентификаторПланаСтрокой;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиНеВходитВПериод(ИдентификаторПлана)
	
	ИдентификаторПланаСтрокой = ПланированиеКлиентСервер.ИдентификаторПланаСтрокой(ИдентификаторПлана);
	Возврат "НеВходитВПериод_" + ИдентификаторПланаСтрокой;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиРедактированиеДоступно(ИдентификаторПлана)
	
	ИдентификаторПланаСтрокой = ПланированиеКлиентСервер.ИдентификаторПланаСтрокой(ИдентификаторПлана);
	Возврат "РедактированиеДоступно_" + ИдентификаторПланаСтрокой;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКолонкиБезИмениТаблицыФормы(ИмяКолонкиФормы, ИмяТаблицы)
	
	Возврат Прав(ИмяКолонкиФормы, СтрДлина(ИмяКолонкиФормы) - СтрДлина(ИмяТаблицы));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПервойНезафиксированнойКолонки(Форма)
	
	ДанныеПлана = ДанныеПервогоНезафиксированногоПлана(Форма);
	
	Если ДанныеПлана = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДанныеПлана.ИмяКолонкиПлановыеТрудозатраты;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПланаПервойНезафиксированнойКолонки(Форма)
	
	ДанныеПлана = ДанныеПервогоНезафиксированногоПлана(Форма);
	
	Если ДанныеПлана = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ДанныеПлана.ИдентификаторПлана;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПодборВидовДеятельности

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеТекущегоСотрудникаПодбора(Форма)
	
	Если ЗначениеЗаполнено(Форма.ТекущийСотрудник) Тогда
		ПредставлениеТекущегоСотрудника = СтрШаблон(НСтр("ru = 'Подбор видов деятельности для: %1'"), Форма.ТекущийСотрудник);
	Иначе
		ПредставлениеТекущегоСотрудника = НСтр("ru = 'Спозиционируйтесь на участнике плана для подбора...'");
	КонецЕсли;
	
	Форма.Элементы.ДекорацияПодбираютсяПланыПоСотруднику.Заголовок = ПредставлениеТекущегоСотрудника;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеТекущегоСотрудника()
	
	ОчиститьПодобраноВПланВВидахДеятельности();
	НайтиОтметитьВидыДеятельностиСотрудникаВФормахПодбора();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодобраноВПланВВидахДеятельности()

	Для Каждого СтрокаВидыДеятельности Из ВидыДеятельности Цикл
		
		СтрокаВидыДеятельности.ДобавленоВПлан = Ложь;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура НайтиОтметитьВидыДеятельностиСотрудникаВФормахПодбора()
	
	СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтСотрудников,
	                                                                             "СотрудникРабота", 
	                                                                             ТекущийСотрудник,
	                                                                             1);
	
	Если СтрокаСотрудник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРабота Из СтрокаСотрудник.ПолучитьЭлементы() Цикл 
		
		Если ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
			НайтиОтметитьЗначениеВФормахПодбора(ЭтотОбъект, СтрокаРабота.СотрудникРабота, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиОтметитьЗначениеВФормахПодбора(Форма, ЧтоИщем, ДобавленоВПлан) 
	
	Если ТипЗнч(ЧтоИщем) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Работа", ЧтоИщем);
		
		НайденныеСтроки = Форма.ВидыДеятельности.НайтиСтроки(ПараметрыПоиска); 
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ДобавленоВПлан = ДобавленоВПлан;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ЧтоИщем) = Тип("СправочникСсылка.Пользователи") Тогда
		
		НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(
			Форма.ПодборПодразделенияСотрудники, "Сотрудник", ЧтоИщем, 2);
			
		Если НайденнаяСтрока <> Неопределено Тогда
			НайденнаяСтрока.ДобавленоВПлан = Истина;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьВидДеятельностиВПлан(КудаДобавляем, ВидДеятельности, ПлановыеТрудозатраты, ИзмененныеЗаписи) 
	
	Если ТипЗнч(КудаДобавляем) = Тип("СправочникСсылка.Пользователи") Тогда
		
		СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтСотрудников,
		                                                                             "СотрудникРабота", 
		                                                                             ТекущийСотрудник,
		                                                                             1);
		
	Иначе
		
		СтрокаСотрудник = КудаДобавляем;
		
	КонецЕсли;
	
	НоваяСтрока = СтрокаСотрудник.ПолучитьЭлементы().Добавить();
	НоваяСтрока.СотрудникРабота        = ВидДеятельности;
	НоваяСтрока.ТипСотрудникРабота     = Тип("СправочникСсылка.ВидыДеятельности");
	НоваяСтрока.ДоступноУдалениеСтроки = Истина; 
	
	ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, НоваяСтрока, "ОтСотрудников");
	
	Если ПлановыеТрудозатраты = 0 Тогда
		
		ИмяПервойНезафиксированнойКолонки = ИмяПервойНезафиксированнойКолонки(ЭтотОбъект);
		
		Если ИмяПервойНезафиксированнойКолонки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеЗаписиПлана = ДанныеЗаписиРегистраПоТаблицеОтСотрудника(НоваяСтрока, ИмяПервойНезафиксированнойКолонки);
		ИзмененныеЗаписи.Добавить(ДанныеЗаписиПлана);
		
	Иначе
		
		ИзменитьЗначениеПлановыеТрудозатратыВоВсехОтображаемыхКолонкахСтроки(НоваяСтрока, ПлановыеТрудозатраты, ИзмененныеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборСотрудники

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеТекущегоЭтапа(Форма)

	Если ЗначениеЗаполнено(Форма.ТекущийЭтап) Тогда
		ПредставлениеТекущегоЭтапа = СтрШаблон(НСтр("ru = 'Подбор сотрудников для: %1 (%2)'"), Форма.ТекущийЭтап , Форма.ТекущийТехническийПроект);
	Иначе
		ПредставлениеТекущегоЭтапа = НСтр("ru = 'Спозиционируйтесь на этапе технического проекта для подбора...'");;
	КонецЕсли;
	
	Форма.Элементы.ДекорацияПодбираютсяСотрудникиПоЭтапуТехПроекта.Заголовок = ПредставлениеТекущегоЭтапа;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодобраноВПланПодборСотрудники()

	Для Каждого СтрокаПодразделение Из ПодборПодразделенияСотрудники.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаСотрудник Из СтрокаПодразделение.ПолучитьЭлементы() Цикл
			
			СтрокаСотрудник.ДобавленоВПлан = Ложь;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеТекущегоЭтапа()
	
	ОчиститьПодобраноВПланПодборСотрудники();
	НайтиОтметитьСотрудниковЭтапаВФормахПодбора();
	
КонецПроцедуры

&НаСервере
Процедура НайтиОтметитьСотрудниковЭтапаВФормахПодбора()
	
	СтрокаЭтап = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтТехпроектов,
	                                                                             "СотрудникРабота", 
	                                                                             ТекущийЭтап,
	                                                                             1);
	
	Если СтрокаЭтап = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСотрудник Из СтрокаЭтап.ПолучитьЭлементы() Цикл 
		
		Если ТипЗнч(СтрокаСотрудник.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			НайтиОтметитьЗначениеВФормахПодбора(ЭтотОбъект, СтрокаСотрудник.СотрудникРабота, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудникаВЭтап(КудаДобавляем, Сотрудник, ПлановыеТрудозатраты, ИзмененныеЗаписи) 
	
	Если ТипЗнч(КудаДобавляем) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		СтрокаЭтап = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтТехпроектов,
		                                                                        "СотрудникРабота", 
		                                                                        ТекущийЭтап,
		                                                                        1);
		
	Иначе
		
		СтрокаЭтап = КудаДобавляем;
		
	КонецЕсли;
	
	НоваяСтрока = СтрокаЭтап.ПолучитьЭлементы().Добавить();
	НоваяСтрока.СотрудникРабота                = Сотрудник;
	НоваяСтрока.Версия                         = СтрокаЭтап.Версия;
	НоваяСтрока.ДатаНачала                     = СтрокаЭтап.ДатаНачала;
	НоваяСтрока.ДатаОкончания                  = СтрокаЭтап.ДатаОкончания;
	НоваяСтрока.ТипСотрудникРабота             = Тип("СправочникСсылка.Пользователи");
	НоваяСтрока.ДоступноУдалениеСтроки         = Истина;
	НоваяСтрока.ДополнительныеДанныеНеПолучены = Истина;
	
	ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, НоваяСтрока, "ОтСотрудников");
	ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, НоваяСтрока);
	
	ТребуетсяПолучениеДополнительныхДанныхОтТехПроектов = Истина;
	
	Если ПлановыеТрудозатраты = 0 Тогда
		
		ИмяПервойНезафиксированнойКолонки = ИмяПервойНезафиксированнойКолонки(ЭтотОбъект);
		
		Если ИмяПервойНезафиксированнойКолонки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеЗаписиПлана = ДанныеЗаписиРегистраПоТаблицеОтТехПроекта(НоваяСтрока, ИмяПервойНезафиксированнойКолонки);
		ИзмененныеЗаписи.Добавить(ДанныеЗаписиПлана);
		
	Иначе
		
		ИзменитьЗначениеПлановыеТрудозатратыВоВсехОтображаемыхКолонкахСтроки(НоваяСтрока, ПлановыеТрудозатраты, ИзмененныеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеСтрокДерева

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеУдаляемойРаботы()
	
	ДанныеУдаляемойРаботы = Новый Структура;
	ДанныеУдаляемойРаботы.Вставить("Сотрудник", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	ДанныеУдаляемойРаботы.Вставить("Работа",    Неопределено);
	
	Возврат ДанныеУдаляемойРаботы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьЗаписиРегистраПоУдаляемымСтрокамПлана(ДанныеУдаляемыхСтрок, ИдентификаторыОтображаемыхПланов)
	
	Если ДанныеУдаляемыхСтрок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеУдаляемойСтроки Из ДанныеУдаляемыхСтрок Цикл
		
		ДанныеЗаписиПлана = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
		ДанныеЗаписиПлана.Сотрудник      = ДанныеУдаляемойСтроки.Сотрудник;
		ДанныеЗаписиПлана.Работа         = ДанныеУдаляемойСтроки.Работа;
		ДанныеЗаписиПлана.ТипСтрокиПлана = Перечисления.ТипыСтрокПлана.Работа; 
		
		Для Каждого ИдентификаторПлана Из ИдентификаторыОтображаемыхПланов Цикл
			
			ДанныеЗаписиПлана.ИдентификаторПлана = ИдентификаторПлана;
			
			РегистрыСведений.ЗаписиПлана.УдалитьЗаписьПлана(ДанныеЗаписиПлана);
			
		КонецЦикла;
		
	КонецЦикла

КонецПроцедуры

&НаКлиенте
Функция ДанныеУдаляемыхСтрок(СтрокиКУдалению)
	
	ДанныеУдаляемыхСтрок = Новый Массив;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		
		РодительскаяСтрока = СтрокаКУдалению.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеУдаляемойСтроки = НовыйДанныеУдаляемойРаботы();
		
		ДанныеУдаляемойСтроки.Работа    = СтрокаКУдалению.СотрудникРабота;
		ДанныеУдаляемойСтроки.Сотрудник = РодительскаяСтрока.СотрудникРабота;
		ДанныеУдаляемыхСтрок.Добавить(ДанныеУдаляемойСтроки);
		
	КонецЦикла;
	
	Возврат ДанныеУдаляемыхСтрок;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПеретаскиванияОтСотрудников

&НаКлиентеНаСервереБезКонтекста
Функция СотрудникПоСтрокеПланаОтСотрудников(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.Подразделения") Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат СтрокаДерева.СотрудникРабота;
	Иначе
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			Возврат РодительскаяСтрока.СотрудникРабота; 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСотрудникПоСтрокеПланаОтСотрудников(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.Подразделения") Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
		Возврат СтрокаДерева;
	Иначе
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			Возврат РодительскаяСтрока;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПеретаскиваемыеЭтапы(Элемент, ЗначенияПеретаскивания, ЗаполнятьПеретаскиваемое)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ПеретаскиваемыеЭтапы", Новый Массив);
	СтруктураВозврата.Вставить("СотрудникиЭтапов",     Новый Массив);
	
	УжеДобавленныеЭтапы = Новый Массив;
	
	Для Каждого ПеретаскиваемоеЗначение Из ЗначенияПеретаскивания Цикл
		
		ДанныеПеретаскиваемойСтроки =  Элемент.ДанныеСтроки(ПеретаскиваемоеЗначение);
		
		Если ТипЗнч(ДанныеПеретаскиваемойСтроки) = Тип("ДанныеФормыЭлементДерева")
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПеретаскиваемойСтроки, "СотрудникРабота")
			И ТипЗнч(ДанныеПеретаскиваемойСтроки.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса")
			И УжеДобавленныеЭтапы.Найти(ДанныеПеретаскиваемойСтроки.СотрудникРабота) = Неопределено Тогда
			
				УжеДобавленныеЭтапы.Добавить(ДанныеПеретаскиваемойСтроки.СотрудникРабота);
				
				Если ЗаполнятьПеретаскиваемое Тогда
					СтруктураВозврата.ПеретаскиваемыеЭтапы.Добавить(ДанныеПереносимогоЭтапа(ДанныеПеретаскиваемойСтроки));
				Иначе
					СтруктураВозврата.ПеретаскиваемыеЭтапы.Добавить(ДанныеПеретаскиваемойСтроки.СотрудникРабота);
				КонецЕсли;
				РодительскаяСтрока = ДанныеПеретаскиваемойСтроки.ПолучитьРодителя();
				
				Если СтруктураВозврата.СотрудникиЭтапов.Найти(РодительскаяСтрока.СотрудникРабота) = Неопределено Тогда
					 СтруктураВозврата.СотрудникиЭтапов.Добавить(РодительскаяСтрока.СотрудникРабота);
				КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция ЧтоПеретаскиваемПланЗанятостиОтСотрудников(Элемент, ЗначенияПеретаскивания, ЗаполнятьПеретаскиваемое) 
	
	ДанныеПеретаскивания = Новый Структура;
	ДанныеПеретаскивания.Вставить("ТипЗначений",                  Неопределено);
	ДанныеПеретаскивания.Вставить("ПеретаскиваемыеЗначения",      Новый Массив);
	ДанныеПеретаскивания.Вставить("СотрудникиПеретаскиваемоего" , Новый Массив);
	
	Если ЗначенияПеретаскивания.Количество() <> 0 Тогда 
		
		Если ТипЗнч(ЗначенияПеретаскивания[0]) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			
			ДанныеПеретаскивания.ТипЗначений = Тип("СправочникСсылка.ВидыДеятельности");
			Если ЗаполнятьПеретаскиваемое Тогда
				ДанныеПеретаскивания.ПеретаскиваемыеЗначения = ЗначенияПеретаскивания;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначенияПеретаскивания[0]) = Тип("Число") Тогда
			
			ЧтоПеретаскиваем = ПеретаскиваемыеЭтапы(Элемент, ЗначенияПеретаскивания, ЗаполнятьПеретаскиваемое);
			Если ЧтоПеретаскиваем.ПеретаскиваемыеЭтапы.Количество() > 0 Тогда
				
				ДанныеПеретаскивания.ТипЗначений = Тип("СправочникСсылка.ЗадачиПроцесса");
				ДанныеПеретаскивания.ПеретаскиваемыеЗначения     = ЧтоПеретаскиваем.ПеретаскиваемыеЭтапы;
				ДанныеПеретаскивания.СотрудникиПеретаскиваемоего = ЧтоПеретаскиваем.СотрудникиЭтапов ;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПеретаскивания;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПеретаскиваниеВидыДеятельностиОтСотрудников(СтрокаСотрудник, ЗначенияПеретаскивания)
	
	ИзмененныеЗаписи = Новый Массив;
	
	Для Каждого ПеретаскиваемоеЗначение Из ЗначенияПеретаскивания Цикл
		
		НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, "СотрудникРабота", ПеретаскиваемоеЗначение.Работа, 0);
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			ДобавитьВидДеятельностиВПлан(СтрокаСотрудник, ПеретаскиваемоеЗначение.Работа, 0, ИзмененныеЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи,
	                                     Неопределено, 
	                                     Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеретаскиваниеЭтаповОтСотрудников(СтрокаСотрудник, ПеретаскиваемыеЭтапы)
	
	ИзмененныеЗаписи = Новый Массив;
	
	Для Каждого ПереносимыйЭтап Из ПеретаскиваемыеЭтапы Цикл
		
		НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, "СотрудникРабота", ПереносимыйЭтап.Этап,0);
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			ДобавитьЭтапВПлан(СтрокаСотрудник, ПереносимыйЭтап, 0, ИзмененныеЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТребуетсяПолучениеДополнительныхДанныхОтСотрудников = Истина;
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи,
	                                     Неопределено,
	                                     Неопределено);
	
	ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице("ПланЗанятостиОтСотрудников", ИзмененныеЗаписи);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработкаПеретаскиванияОтТехПроектов

&НаКлиенте
Функция ПеретаскиваемыеСотрудники(Элемент, ЗначенияПеретаскивания)
	
	ПеретаскиваемыеСотрудники = Новый Массив;
	
	Для Каждого ПеретаскиваемоеЗначение Из ЗначенияПеретаскивания Цикл
		
		Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("ДанныеФормыЭлементДерева") Тогда
			ДанныеПеретаскиваемойСтроки = ПеретаскиваемоеЗначение
		ИначеЕсли ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Число") Тогда
			ДанныеПеретаскиваемойСтроки = Элемент.ДанныеСтроки(ПеретаскиваемоеЗначение);
		Иначе
			Возврат ПеретаскиваемыеСотрудники;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеПеретаскиваемойСтроки) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПеретаскиваемойСтроки, "СотрудникРабота")
			И ТипЗнч(ДанныеПеретаскиваемойСтроки.СотрудникРабота) = Тип("СправочникСсылка.Пользователи")
			И ПеретаскиваемыеСотрудники.Найти(ДанныеПеретаскиваемойСтроки.СотрудникРабота) = Неопределено Тогда
			
				ПеретаскиваемыеСотрудники.Добавить(ДанныеПеретаскиваемойСтроки.СотрудникРабота);
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПеретаскиваемойСтроки, "Сотрудник")
			И ТипЗнч(ДанныеПеретаскиваемойСтроки.Сотрудник) = Тип("СправочникСсылка.Пользователи")
			И ПеретаскиваемыеСотрудники.Найти(ДанныеПеретаскиваемойСтроки.Сотрудник) = Неопределено Тогда
			
				ПеретаскиваемыеСотрудники.Добавить(ДанныеПеретаскиваемойСтроки.Сотрудник); 
			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ПеретаскиваемыеСотрудники;
	
КонецФункции

&НаКлиенте
Функция ЧтоПеренесетсяПланЗанятостиОтСотрудников(Элемент, ЗначенияПеретаскивания, СтрокаЭтапаНазначения)
	
	ЧтоПеренесется = Новый Массив;
	
	ПеретаскиваемыеСотрудники = ПеретаскиваемыеСотрудники(Элемент, ЗначенияПеретаскивания);
	
	Для Каждого ПеретаскиваемыйСотрудник Из ПеретаскиваемыеСотрудники Цикл
		
		НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаЭтапаНазначения, "СотрудникРабота", ПеретаскиваемыйСотрудник, 1);
		
		Если НайденнаяСтрока = Неопределено Тогда
			ЧтоПеренесется.Добавить(ПеретаскиваемыйСотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЧтоПеренесется;
	
КонецФункции

&НаКлиенте
Процедура ПриНачалеПеретаскиванияСотрудников(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ЗначенияПеретаскивания    = ПараметрыПеретаскивания.Значение;
	ПеретаскиваемыеСотрудники = ПеретаскиваемыеСотрудники(Элемент, ЗначенияПеретаскивания);
	
	Если ПеретаскиваемыеСотрудники.Количество() = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтапПоСтрокеПланаОтТехПроектов(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.СотрудникРабота) Тогда
			Возврат СтрокаДерева.СотрудникРабота;
		Иначе
			РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
			Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
				Возврат РодительскаяСтрока.СотрудникРабота; 
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			Если ЗначениеЗаполнено(РодительскаяСтрока.СотрудникРабота) Тогда
				Возврат РодительскаяСтрока.СотрудникРабота;
			Иначе
				РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
				Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
					Возврат РодительскаяСтрока.СотрудникРабота; 
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЭтапПоСтрокеПланаОтТехПроектов(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		Возврат СтрокаДерева;
	Иначе
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			Возврат РодительскаяСтрока; 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТехПроектПоСтрокеПланаОтТехПроектов(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Возврат СтрокаДерева;
	ИначеЕсли ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			Возврат РодительскаяСтрока; 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			Возврат СтрокаТехПроектПоСтрокеПланаОтТехПроектов(РодительскаяСтрока); 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ОбработатьПеретаскиваниеСотрудниковПланОтТехпроектов(СтрокаЭтап, ЧтоПеренесется)
	
	ИзмененныеЗаписи = Новый Массив; 
	
	Для Каждого ПереносимыйСотрудник Из ЧтоПеренесется Цикл
	
		ДобавитьСотрудникаВЭтап(СтрокаЭтап,
		                        ПереносимыйСотрудник,
		                        0, 
		                        ИзмененныеЗаписи);
		
	КонецЦикла;
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи,
	                                     Неопределено, 
	                                     Неопределено); 
	
	ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице("ПланЗанятостиОтТехПроектов", ИзмененныеЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеЭтапаДляСотрудника

&НаКлиенте
Процедура ПослеВыбораСотрудникаДобавлениеЭтапа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.Пользователи") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтСотрудников,
	                                                                             "СотрудникРабота", 
	                                                                             Результат,
	                                                                             1);
	
	ИзмененныеЗаписи = Новый Массив;
	
	Если СтрокаСотрудник = Неопределено Тогда
		
		ИмяПервойНезафиксированнойКолонки = ИмяПервойНезафиксированнойКолонки(ЭтотОбъект);
		
		Если ИмяПервойНезафиксированнойКолонки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеЗаписиПлана = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
		ДанныеЗаписиПлана.ИдентификаторПлана      = ИдентификаторПланаПервойНезафиксированнойКолонки(ЭтотОбъект);
		ДанныеЗаписиПлана.Сотрудник               = Результат;
		ДанныеЗаписиПлана.Работа                  = ДополнительныеПараметры.Этап;
		ДанныеЗаписиПлана.ТипСтрокиПлана          = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа");
		ДанныеЗаписиПлана.ПланируемыеТрудозатраты = 0;
		
		ИзмененныеЗаписи.Добавить(ДанныеЗаписиПлана);
		
	Иначе
		
		ДобавитьЭтапВПлан(СтрокаСотрудник, ДополнительныеПараметры, 0, ИзмененныеЗаписи);
		
	КонецЕсли;
	
	ТребуетсяПолучениеДополнительныхДанныхОтСотрудников = Истина;
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи,
	                                     Неопределено,
	                                     Неопределено);
	
	ОтразитьИзменениеПлановыхТрудозатратНаДругойСтранице("ПланЗанятостиОтСотрудников", ИзмененныеЗаписи);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеПереносимогоЭтапа(СтрокаДерева)
	
	ДанныеПереносимогоЭтапа = Новый Структура;
	ДанныеПереносимогоЭтапа.Вставить("Этап",              СтрокаДерева.СотрудникРабота);
	ДанныеПереносимогоЭтапа.Вставить("ТехническийПроект", СтрокаДерева.ТехническийПроект);
	ДанныеПереносимогоЭтапа.Вставить("Версия",            СтрокаДерева.Версия);
	ДанныеПереносимогоЭтапа.Вставить("ДатаНачала",        СтрокаДерева.ДатаНачала);
	ДанныеПереносимогоЭтапа.Вставить("ДатаОкончания",     СтрокаДерева.ДатаОкончания);
	
	Возврат ДанныеПереносимогоЭтапа;
	
КонецФункции 

&НаКлиенте
Процедура ДобавитьЭтапВПлан(КудаДобавляем, ДанныеЭтапа, ПлановыеТрудозатраты, ИзмененныеЗаписи)
	
	Если ТипЗнч(КудаДобавляем) = Тип("СправочникСсылка.Пользователи") Тогда
		
		СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтСотрудников,
		                                                                             "СотрудникРабота", 
		                                                                             ТекущийСотрудник,
		                                                                             1);
		
	Иначе
		
		СтрокаСотрудник = КудаДобавляем;
		
	КонецЕсли;
	
	СтрокаПередКоторойДобавить = СтрокаПередКоторойДобавляетсяЭтап(СтрокаСотрудник, ДанныеЭтапа);
	
	КоллекцияСтрок = СтрокаСотрудник.ПолучитьЭлементы();
	
	Если СтрокаПередКоторойДобавить = Неопределено Тогда
		НоваяСтрока = КоллекцияСтрок.Добавить();
	Иначе
		ИндексСтрокиДобавления = КоллекцияСтрок.Индекс(СтрокаПередКоторойДобавить);
		НоваяСтрока = КоллекцияСтрок.Вставить(ИндексСтрокиДобавления);
	КонецЕсли; 
	
	НоваяСтрока.СотрудникРабота                = ДанныеЭтапа.Этап;
	НоваяСтрока.Версия                         = ДанныеЭтапа.Версия;
	НоваяСтрока.ДатаНачала                     = ДанныеЭтапа.ДатаНачала;
	НоваяСтрока.ДатаОкончания                  = ДанныеЭтапа.ДатаОкончания;
	НоваяСтрока.ТехническийПроект              = ДанныеЭтапа.ТехническийПроект;
	НоваяСтрока.ТипСотрудникРабота             = Тип("СправочникСсылка.ЗадачиПроцесса");
	НоваяСтрока.ДополнительныеДанныеНеПолучены = Истина;
	НоваяСтрока.ДоступноУдалениеСтроки         = Истина; 
	
	ОпределитьДоступностьРедактированияПлановыеТрудозатратыДляСтроки(ЭтотОбъект, НоваяСтрока, "ОтСотрудников");
	ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, НоваяСтрока);
	
	Если ПлановыеТрудозатраты = 0 Тогда
		
		ИмяПервойНезафиксированнойКолонки = ИмяПервойНезафиксированнойКолонки(ЭтотОбъект);
		
		Если ИмяПервойНезафиксированнойКолонки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеЗаписиПлана = ДанныеЗаписиРегистраПоТаблицеОтСотрудника(НоваяСтрока, ИмяПервойНезафиксированнойКолонки);
		
		ИзмененныеЗаписи.Добавить(ДанныеЗаписиПлана)
		
	Иначе
		
		ИзменитьЗначениеПлановыеТрудозатратыВоВсехОтображаемыхКолонкахСтроки(НоваяСтрока, ПлановыеТрудозатраты, ИзмененныеЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаПередКоторойДобавляетсяЭтап(СтрокаСотрудник, ДанныеЭтапа)
	
	ОпределеннаяСтрока        = Неопределено;
	ТехПроектПредыдущегоЭтапа = Неопределено;
	
	Для Каждого СтрокаРабота Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
		
		Если СтрокаРабота.ТипСотрудникРабота = Тип("СправочникСсылка.ВидыДеятельности") Тогда
			
			ОпределеннаяСтрока = СтрокаРабота;
			Прервать;
			
		КонецЕсли;
		
		Если СтрокаРабота.ТехническийПроект <> ДанныеЭтапа.ТехническийПроект
			И ТехПроектПредыдущегоЭтапа = ДанныеЭтапа.ТехническийПроект Тогда
			
			ОпределеннаяСтрока = СтрокаРабота;
			Прервать;
			
		КонецЕсли;
		
		Если СтрокаРабота.ТехническийПроект = ДанныеЭтапа.ТехническийПроект
			И СтрокаРабота.ДатаНачала > ДанныеЭтапа.ДатаНачала Тогда
			
			ОпределеннаяСтрока = СтрокаРабота;
			Прервать;
			
		КонецЕсли;
		
		ТехПроектПредыдущегоЭтапа = СтрокаРабота.ТехническийПроект
	
	КонецЦикла;
	
	Возврат ОпределеннаяСтрока; 
	
КонецФункции

#КонецОбласти

#Область ПолучениеВидовДеятельностиПоСтатистике

&НаКлиенте
Процедура ОпределитьДатыДляПолученияВидовДеятельностиПоСтатистике(ПараметрыПолучения)
	
	Если ОтображаемыеПланы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения.КонецПериода     = ОтображаемыеПланы[0].КонецПериода;
	ПараметрыПолучения.НачалоПериода    = ОтображаемыеПланы[0].НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВыбранныхСотрудниковПолучениеДанныхПоСтатистике(ПараметрыПолучения, ЕстьЗапланированныеВидыДеятельности)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.ПланЗанятостиОтСотрудников.ВыделенныеСтроки Цикл
		
		ДанныеСтроки    = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СотрудникРабота = ДанныеСтроки.СотрудникРабота;
		
		Если ТипЗнч(СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			
			СотрудникКДобавлению = СотрудникРабота; 
			
		ИначеЕсли ТипЗнч(СотрудникРабота) = Тип("СправочникСсылка.Подразделения") Тогда
			
			Продолжить;
			
		Иначе
			
			СотрудникКДобавлению = СотрудникПоСтрокеПланаОтСотрудников(ДанныеСтроки);
			
			Если СотрудникКДобавлению = Неопределено  Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЕстьЗапланированныеВидыДеятельности Тогда
			
			Для Каждого СтрокаРабота Из ДанныеСтроки.ПолучитьЭлементы() Цикл
					
				Если ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
					ЕстьЗапланированныеВидыДеятельности = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
				
		КонецЕсли;
		
		Если ПараметрыПолучения.РаботыСотрудники.Найти(СотрудникКДобавлению) = Неопределено Тогда
			ПараметрыПолучения.РаботыСотрудники.Добавить(СотрудникКДобавлению);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудниковПослеВопроса(Результат, ПараметрыПолучения) Экспорт
	
	Если ТипЗнч(Результат) <> ТипЗнч("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОповещения = НСтр("ru = 'Выполняется получение данных'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение видов деятельности для выделенных сотрудников по статистике'"),,
	                               ТекстОповещения, БиблиотекаКартинок.Информация32);
	
	ПараметрыПолучения.ТипЗаполнения    = Результат;
	
	ВыполнитьПолучениеВидовДеятельностиПоСтатистике(ПараметрыПолучения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолучениеВидовДеятельностиПоСтатистике(ПараметрыПолучения)
	
	ДлительнаяОперация = ДанныеВидовДеятельностиПоСтатистикеДлительнаяОперация(ПараметрыПолучения,
	                                                                           УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипЗаполнения", ПараметрыПолучения.ТипЗаполнения);
	ДополнительныеПараметры.Вставить("РаботыСотрудники", ПараметрыПолучения.РаботыСотрудники);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ВыполнитьПолучениеВидовДеятельностиПоСтатистикеЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПолучениеВидовДеятельностиПоСтатистикеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеВидовДеятельностиПоСтатистикеДлительнаяОперация(ДанныеДляПолучения, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолучения", ДанныеДляПолучения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных для заполнения видов деятельности по статистике'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеВидовДеятельностиПоСтатистике",
	                                                       ПараметрыПроцедуры,
	                                                       ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПолучениеВидовДеятельностиПоСтатистикеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДанныеВидовДеятельностиПоСтатистике(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеВидовДеятельностиПоСтатистике(АдресРезультата, ДополнительныеПараметры)
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПоСтатистике = ДанныеВременногоХранилища(АдресРезультата);
	Если ДанныеПоСтатистике = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиДанныеВидовДеятельностиПоСтатистикеПоСотрудникам(ДанныеПоСтатистике, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеВидовДеятельностиПоСтатистикеПоСотрудникам(ДанныеПоСтатистике, ПараметрыЗаполнения)
	
	ТипЗаполнения = ПараметрыЗаполнения.ТипЗаполнения;
	
	ОбработанныеСотрудники           = Новый Массив;
	ИзмененныеЗаписи                 = Новый Массив;
	ИдентификаторыСтрокКПересчету    = Новый Массив;
	СтрокиКУдалению                  = Новый Массив;
	ДобавленоВидовДеятельности       = 0;
	ИзмененоВидовДеятельности        = 0;
	УдаленоВидовДеятельности         = 0;
	
	Для Каждого ДанныеСотрудника Из ДанныеПоСтатистике Цикл
		
		ОбработанныеСотрудники.Добавить(ДанныеСотрудника.Сотрудник);
		
		СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтСотрудников,
		                                                                             "СотрудникРабота",
		                                                                             ДанныеСотрудника.Сотрудник,
		                                                                             1);
		
		Если СтрокаСотрудник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВидовДеятельностиСотрудникаПоСтатистике = Новый Массив;
		
		Для Каждого ДанныеВидаДеятельности Из ДанныеСотрудника.ВидыДеятельности Цикл
			
			МассивВидовДеятельностиСотрудникаПоСтатистике.Добавить(ДанныеВидаДеятельности.ВидДеятельности);
			
			СтрокаРабота = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
			                                                                          "СотрудникРабота",
			                                                                          ДанныеВидаДеятельности.ВидДеятельности,
			                                                                          0);
			
			ДанныеРаботы = Новый Структура;
			ДанныеРаботы.Вставить("Работа", ДанныеВидаДеятельности.ВидДеятельности);
			ДанныеРаботы.Вставить("ТипРаботы", Тип("СправочникСсылка.ВидыДеятельности"));
			
			Если СтрокаРабота = Неопределено Тогда
				
				ДобавитьВидДеятельностиВПлан(СтрокаСотрудник, 
				                             ДанныеВидаДеятельности.ВидДеятельности, 
				                             ДанныеВидаДеятельности.Часы, 
				                             ИзмененныеЗаписи);
				
				ДобавленоВидовДеятельности = ДобавленоВидовДеятельности + 1;
				ДобавитьИдентификаторСтрокиВМассив(СтрокаСотрудник, ИдентификаторыСтрокКПересчету);
				
				Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудник Тогда
					НайтиОтметитьЗначениеВФормахПодбора(ЭтотОбъект, ДанныеВидаДеятельности.ВидДеятельности, Истина);
				КонецЕсли;
				
			Иначе
				
				ИзмененоВидовДеятельности = ИзмененоВидовДеятельности + 1;
				ДобавитьИдентификаторСтрокиВМассив(СтрокаСотрудник, ИдентификаторыСтрокКПересчету);
				
				ИзменитьЗначениеПлановыеТрудозатратыВоВсехОтображаемыхКолонкахСтроки(СтрокаРабота,
				                                                                     ДанныеВидаДеятельности.Часы, 
				                                                                     ИзмененныеЗаписи);
				
				КонецЕсли; 
			
		КонецЦикла;
		
		Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат"
		     Или ТипЗаполнения = "ЗаполнитьПоСотрудникамОчисткаОтсутствующихВидовДеятельности" Тогда
		
			Для Каждого СтрокаРабота Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
				
					Если ТипЗнч(СтрокаРабота.СотрудникРабота) <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
						Продолжить;
					КонецЕсли;
					
					ОбработатьОтсутствующийВДанныхСтатистикиВидДеятельности(МассивВидовДеятельностиСотрудникаПоСтатистике,
					                                                        СтрокаРабота,
					                                                        ИзмененныеЗаписи,
					                                                        СтрокиКУдалению,
					                                                        ИзмененоВидовДеятельности,
					                                                        УдаленоВидовДеятельности,
					                                                        ИдентификаторыСтрокКПересчету,
					                                                        ТипЗаполнения,
					                                                        СтрокаСотрудник);
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат"
		 Или ТипЗаполнения = "ЗаполнитьПоСотрудникамОчисткаОтсутствующихВидовДеятельности" Тогда
	
		Для Каждого Сотрудник Из ПараметрыЗаполнения.РаботыСотрудники Цикл
			
			ДанныеСтрокиИзменены = Ложь;
			
			Если ОбработанныеСотрудники.Найти(Сотрудник) <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПланЗанятостиОтСотрудников,
			                                                                             "СотрудникРабота",
			                                                                              Сотрудник,
			                                                                              0);
			
			Если СтрокаСотрудник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаРабота Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
			
				Если ТипЗнч(СтрокаРабота.СотрудникРабота) <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
					Продолжить;
				КонецЕсли;
				
				ОбработатьОтсутствующихВДанныхСтатистикиСотрудников(СтрокаРабота,
				                                                    ИзмененныеЗаписи,
				                                                    СтрокиКУдалению,
				                                                    ИзмененоВидовДеятельности,
				                                                    УдаленоВидовДеятельности,
				                                                    ИдентификаторыСтрокКПересчету,
				                                                    ТипЗаполнения,
				                                                    СтрокаСотрудник);
			
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеЗаписи, 
	                                     ДанныеУдаляемыхСтрок(СтрокиКУдалению), 
	                                     ИдентификаторыОтображаемыхПланов(ЭтотОбъект));
	ПланированиеКлиентСервер.ОбработатьУдалениеИзДереваМассиваСтрок(СтрокиКУдалению);
	ПересчитатьДанныеПослеЗаполненияВидовДеятельностиПоСтатистике(ИдентификаторыСтрокКПересчету);
	
	ПланированиеКлиент.ВывестиОповещенияОЗаполненииВидовДеятельностиПоСтатистике(ТипЗаполнения,
	                                                                             ДобавленоВидовДеятельности,
	                                                                             ИзмененоВидовДеятельности,
	                                                                             УдаленоВидовДеятельности);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтсутствующийВДанныхСтатистикиВидДеятельности(МассивВидовДеятельностиСотрудникаПоСтатистике,
	                                                              СтрокаРабота,
	                                                              ИзмененныеЗаписи,
	                                                              СтрокиКУдалению,
	                                                              ИзмененоВидовДеятельности,
	                                                              УдаленоВидовДеятельности,
	                                                              ИдентификаторыСтрокКПересчету,
	                                                              ТипЗаполнения,
	                                                              СтрокаСотрудник)
	
	Если МассивВидовДеятельностиСотрудникаПоСтатистике.Найти(СтрокаРабота.СотрудникРабота) = Неопределено Тогда
		
		Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат" Тогда
			
			ИзменитьЗначениеПлановыеТрудозатратыВоВсехОтображаемыхКолонкахСтроки(СтрокаРабота,
			                                                                     0,
			                                                                     ИзмененныеЗаписи);
			
			ИзмененоВидовДеятельности = ИзмененоВидовДеятельности + 1;
			ДобавитьИдентификаторСтрокиВМассив(СтрокаСотрудник, ИдентификаторыСтрокКПересчету);
			
		Иначе
			
			СтрокиКУдалению.Добавить(СтрокаРабота);
			УдаленоВидовДеятельности      = УдаленоВидовДеятельности + 1;
			ДобавитьИдентификаторСтрокиВМассив(СтрокаСотрудник, ИдентификаторыСтрокКПересчету);
			
			Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудник Тогда
				НайтиОтметитьЗначениеВФормахПодбора(ЭтотОбъект, СтрокаРабота.СотрудникРабота, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьОтсутствующихВДанныхСтатистикиСотрудников(СтрокаРабота,
	                                                          ИзмененныеСтроки,
	                                                          СтрокиКУдалению,
	                                                          ИзмененоВидовДеятельности,
	                                                          УдаленоВидовДеятельности,
	                                                          ИдентификаторыСтрокКПересчету,
	                                                          ТипЗаполнения,
	                                                          СтрокаСотрудник)
	
	СтрокаРабота.ПлановыеТрудозатраты = 0;
	
	Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат" Тогда
		
		ИзменитьЗначениеПлановыеТрудозатратыВоВсехОтображаемыхКолонкахСтроки(СтрокаРабота,
		                                                                     0,
		                                                                     ИзмененныеСтроки);
		
		ИзмененоВидовДеятельности = ИзмененоВидовДеятельности + 1;
		ДобавитьИдентификаторСтрокиВМассив(СтрокаСотрудник, ИдентификаторыСтрокКПересчету);
		
	Иначе
		
		СтрокиКУдалению.Добавить(СтрокаРабота);
		УдаленоВидовДеятельности = УдаленоВидовДеятельности + 1;
		ДобавитьИдентификаторСтрокиВМассив(СтрокаСотрудник, ИдентификаторыСтрокКПересчету);
		
		Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудник Тогда
			НайтиОтметитьЗначениеВФормахПодбора(ЭтотОбъект, СтрокаРабота.СотрудникРабота, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИдентификаторСтрокиВМассив(СтрокаДерева, ИдентификаторыСтрок)
	
	ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
	
	Если ИдентификаторыСтрок.Найти(ИдентификаторСтроки) = Неопределено Тогда
		ИдентификаторыСтрок.Добавить(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДанныеПослеЗаполненияВидовДеятельностиПоСтатистике(ИдентификаторыСтрокКПересчету)
	
	ИдентификаторыРодительскихСтрок = Новый Массив;
	ИменаКолонокКПересчету = МассивИменКолонокДляПерерасчетаПослеЗаполненияДерева(ЭтотОбъект);
	
	Для Каждого ИдентификаторСтрокиКПересчету Из ИдентификаторыСтрокКПересчету Цикл
		
		СтрокаКПересчету = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ИдентификаторСтрокиКПересчету);
		Если ИдентификаторСтрокиКПересчету = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаКПересчету, ИменаКолонокКПересчету, Ложь);
		
		РодительскаяСтрока = СтрокаКПересчету.ПолучитьРодителя();
		ДобавитьИдентификаторСтрокиВМассив(РодительскаяСтрока, ИдентификаторыРодительскихСтрок);
		
	КонецЦикла;
	
	Для Каждого ИдентификаторСтрокиКПересчету Из ИдентификаторыРодительскихСтрок Цикл
		
		СтрокаКПересчету = ПланЗанятостиОтСотрудников.НайтиПоИдентификатору(ИдентификаторСтрокиКПересчету);
		Если ИдентификаторСтрокиКПересчету = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПланированиеКлиентСервер.ПересчитатьМассивКолонокРодительскойСтрокиПоДаннымПодчиненных(СтрокаКПересчету, ИменаКолонокКПересчету, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти 

#Область ИзменениеДатРабот

&НаКлиенте
Процедура ПриИзмененииДатРаботы(ИмяДерева, ИмяКолонки)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы[ИмяДерева].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИзменения = ПараметрыИзмененияДатыРаботыНаСервере();
	
	Если ИмяДерева = "ПланЗанятостиОтТехпроектов" Тогда
		Если ТипЗнч(ТекущиеДанные.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя(); 
			Если РодительскаяСтрока = Неопределено Тогда 
				Возврат;
			КонецЕсли;
			ПараметрыИзменения.Объект = РодительскаяСтрока.СотрудникРабота;
		Иначе
			ПараметрыИзменения.Объект = ТекущиеДанные.СотрудникРабота;
		КонецЕсли;
	Иначе
		
		Если ЗначениеЗаполнено(ТекущиеДанные.СотрудникРабота) Тогда
			ПараметрыИзменения.Объект = ТекущиеДанные.СотрудникРабота;
		Иначе
			ПараметрыИзменения.Объект = ТекущиеДанные.ТехническийПроект;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыИзменения.ТипДаты      = ИмяКолонки;
	ПараметрыИзменения.ЗначениеДаты = ТекущиеДанные[ИмяКолонки];
	
	РезультатИзменения = РезультатИзмененияДатыРаботыНаСервере(ПараметрыИзменения);
	
	Если Не РезультатИзменения.Успешно Тогда
		
		Если РезультатИзменения.СтароеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные[ИмяКолонки] = РезультатИзменения.СтароеЗначение;
		
		Если ПустаяСтрока(РезультатИзменения.ТекстОшибки) Тогда
			Возврат;
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатИзменения.ТекстОшибки);
		
	Иначе
		
		ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, ТекущиеДанные);
		ИзменитьДатыРаботыВДругихМестахДеревьев(ПараметрыИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатыРаботыВДругихМестахДеревьев(ПараметрыИзменения)

	Для Каждого СтрокаПодразделение Из ПланЗанятостиОтСотрудников.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаСотрудник Из СтрокаПодразделение.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаРабота Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
				
				Если СтрокаРабота.СотрудникРабота = ПараметрыИзменения.Объект Тогда
					
					Если СтрокаРабота[ПараметрыИзменения.ТипДаты] <> ПараметрыИзменения.ЗначениеДаты Тогда
						
						СтрокаРабота[ПараметрыИзменения.ТипДаты] = ПараметрыИзменения.ЗначениеДаты;
						ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаРабота);
						
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТехПроект Из ПланЗанятостиОтТехпроектов.ПолучитьЭлементы() Цикл 
		
		Если СтрокаТехПроект.СотрудникРабота = ПараметрыИзменения.Объект Тогда
			
			Если СтрокаТехПроект[ПараметрыИзменения.ТипДаты] <> ПараметрыИзменения.ЗначениеДаты Тогда
				
				СтрокаТехПроект[ПараметрыИзменения.ТипДаты] = ПараметрыИзменения.ЗначениеДаты;
				ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаТехПроект);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
		Для Каждого СтрокаЭтап Из СтрокаТехПроект.ПолучитьЭлементы() Цикл
			
			Если СтрокаЭтап[ПараметрыИзменения.ТипДаты] <> ПараметрыИзменения.ЗначениеДаты Тогда
				
				СтрокаЭтап[ПараметрыИзменения.ТипДаты] = ПараметрыИзменения.ЗначениеДаты;
				ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаЭтап); 
				
				Для Каждого СтрокаСотрудник Из СтрокаЭтап.ПолучитьЭлементы() Цикл
					
					СтрокаСотрудник[ПараметрыИзменения.ТипДаты] = ПараметрыИзменения.ЗначениеДаты;
					ОпределитьКорректностьПериодовПланированияОтносительноДатЭтапа(ЭтотОбъект, СтрокаСотрудник);
					
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыИзмененияДатыРаботыНаСервере()
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Объект", Неопределено);
	ПараметрыИзменения.Вставить("ТипДаты",      "");
	ПараметрыИзменения.Вставить("ЗначениеДаты", Неопределено);
	
	Возврат ПараметрыИзменения;
	
КонецФункции

&НаСервере
Функция РезультатИзмененияДатыРаботыНаСервере(ПараметрыИзменения) 

	Результат = Новый Структура;
	Результат.Вставить("Успешно",        Ложь);
	Результат.Вставить("ТекстОшибки",    "");
	Результат.Вставить("СтароеЗначение", Неопределено);
	
	Если Не ЗначениеЗаполнено(ПараметрыИзменения.Объект) Тогда
		
		Результат.ТекстОшибки = НСтр("ru = 'Не указан объект для измнения даты.'");
		Возврат Результат;
		
	КонецЕсли;
	
	ИмяРеквизита = "";
	
	Если ТипЗнч(ПараметрыИзменения.Объект) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		Если ПараметрыИзменения.ТипДаты = "ДатаОкончания" Тогда
			ИмяРеквизита = "КрайняяДатаОкончания";
		ИначеЕсли  ПараметрыИзменения.ТипДаты = "ДатаНачала" Тогда
			ИмяРеквизита = "ПлановаяДатаНачала";
			КонецЕсли;
	ИначеЕсли ТипЗнч(ПараметрыИзменения.Объект) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Если ПараметрыИзменения.ТипДаты = "ДатаОкончания" Тогда 
			ИмяРеквизита = "ПлановаяДатаОкончания";
		ИначеЕсли  ПараметрыИзменения.ТипДаты = "ДатаНачала" Тогда
			ИмяРеквизита = "ПлановаяДатаНачала";
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяРеквизита = "" Тогда
		
		Результат.ТекстОшибки = НСтр("ru = 'Не удалось определить изменяемый реквизит.'");
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.СтароеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыИзменения.Объект, ИмяРеквизита);
	Если Результат.СтароеЗначение = ПараметрыИзменения.ЗначениеДаты Тогда
		
		Результат.ТекстОшибки = НСтр("ru = 'Значение даты не изменилось.'");
		Результат.СтароеЗначение = Неопределено;
		Возврат Результат;
		
	КонецЕсли; 
	
	РаботаОбъект = ПараметрыИзменения.Объект.ПолучитьОбъект();
	Попытка
		РаботаОбъект.Заблокировать();
	Исключение
		Результат.ТекстОшибки = СтрШаблон(НСтр(" ru= ""Не заблокировать %1 по причине: %2""; "), ПараметрыИзменения.Объект, ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;

	Попытка
		РаботаОбъект[ИмяРеквизита] = ПараметрыИзменения.ЗначениеДаты;
		РаботаОбъект.Записать();
		РаботаОбъект.Разблокировать();
	Исключение
		Результат.ТекстОшибки = СтрШаблон(НСтр(" ru= ""Не записать %1 по причине: %2""; "), ПараметрыИзменения.Объект, ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Результат.Успешно = Истина;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗадачиПоСотрудникуИЭтапу

&НаКлиенте
Процедура ОткрытьФормуЗадачЭтапаСотрудника(ПараметрыОткрытия)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлюЧНазначенияИспользования", "ПланЗанятости");
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Исполнитель",    ПараметрыОткрытия.Исполнитель);
	СтруктураБыстрогоОтбора.Вставить("СостояниеОтбор", ЗадачиПроцессовКлиентСервер.СостоянияЗадачиТребуетВыполнения());
	
	Если ТипЗнч(ПараметрыОткрытия.Этап) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
		
		СтруктураБыстрогоОтбора.Вставить("ТипПредмета", Тип("СправочникСсылка.Ошибки"));
	
	ИначеЕсли ЗначениеЗаполнено(ПараметрыОткрытия.Этап) Тогда
		ПараметрыФормы.Вставить("ТекущаяЗадача", ПараметрыОткрытия.Этап);
	Иначе
		ПараметрыФормы.Вставить("Предмет", ПараметрыОткрытия.ТехПроект);
		ПараметрыФормы.Вставить("РежимОтбораЗадач", "НевыполненныеЗадачиИсполнителяВерхнегоУровняНеПоШаблонуСПодчиненными");
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма." + ПараметрыОткрытия.ИмяФормы, ПараметрыФормы, ЭтотОбъект, ,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияЗадачЭтапаСотрудника()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Этап",        Неопределено);
	ПараметрыОткрытия.Вставить("Исполнитель", Неопределено);
	ПараметрыОткрытия.Вставить("ИмяФормы",    "ДеревоОтЗадачи");
	ПараметрыОткрытия.Вставить("ТехПроект",   Неопределено);
	
	Возврат ПараметрыОткрытия;

КонецФункции

#КонецОбласти

#Область ИзменениеНастроек

&НаКлиенте
Процедура ПриИзмененииИнвертироватьОтображениеЗапланированоПоСотруднику()
	
	ПланированиеКлиентСервер.УстановитьЗначенияПараметровРасчетаПоНормативам(ЭтотОбъект,
	                                                                         НормативПланируемогоВремени, 
	                                                                         ПорогОтклоненияОтНормативаПланируемогоВремени, 
	                                                                         ИнвертироватьОтображениеЗапланированоПоСотруднику);
	
	УправлениеВидимостьюПлановыеТрудозатратыОстатокПоНормативу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюПлановыеТрудозатратыОстатокПоНормативу(Форма)

	ПоказыватьОстатокПоНормативам = Форма.ЕстьНормативПланируемогоВремени
	                                И Форма.ИнвертироватьОтображениеЗапланированоПоСотруднику = 1;
	
	Для Каждого СтрокаПланы Из Форма.ОтображаемыеПланы Цикл
		
		Если Не СтрокаПланы.Отображается Тогда
			Прервать;
		КонецЕсли;
		
		Форма.Элементы["ПланЗанятостиОтСотрудников" + СтрокаПланы.ИмяКолонкиПлановыеТрудозатраты].Видимость = Не ПоказыватьОстатокПоНормативам;
		Форма.Элементы["ПланЗанятостиОтСотрудников" + СтрокаПланы.ИмяКолонкиОстатокПоНормативу].Видимость   = ПоказыватьОстатокПоНормативам;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаспределитьНераспределено

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроекРаспределения(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат Тогда
		
		ПерезаполнитьДеревьяНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДатыНачалаОтображаемыхПериодов(Форма)
	
	ДатыНачалаОтображаемыхПериодов = Новый СписокЗначений;
	
	Для Каждого СтрокаПланы Из Форма.ОтображаемыеПланы Цикл
		
		Если СтрокаПланы.Отображается Тогда
			
			ДатыНачалаОтображаемыхПериодов.Добавить(СтрокаПланы.НачалоПериода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатыНачалаОтображаемыхПериодов;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьДеревья()

	ЗаполнитьДеревоОтСотрудников();
	ЗаполнитьДеревоОтТехническихПроектов();

КонецПроцедуры 

&НаКлиенте
Процедура ПерезаполнитьДеревьяНаКлиенте()
	
	КлючТекущейСтрокиДереваОтСотрудников     = КлючТекущейСтрокиДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота");
	КлючиРазвернутыхУзловДереваОтСотрудников = КлючиРазвернутыхУзловДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота");
	
	КлючТекущейСтрокиДереваОтТехПроектов     = КлючТекущейСтрокиДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота");
	КлючиРазвернутыхУзловДереваОтТехПроектов = КлючиРазвернутыхУзловДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота");
	
	ПерезаполнитьДеревья();
	
	ВосстановитьРазвернутыеУзлыДерева("ПланЗанятостиОтСотрудников", "СотрудникРабота", КлючиРазвернутыхУзловДереваОтСотрудников);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПланЗанятостиОтСотрудников", "СотрудникРабота", КлючТекущейСтрокиДереваОтСотрудников);
	
	ВосстановитьРазвернутыеУзлыДерева("ПланЗанятостиОтТехпроектов", "СотрудникРабота", КлючиРазвернутыхУзловДереваОтТехПроектов);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПланЗанятостиОтТехпроектов", "СотрудникРабота", КлючТекущейСтрокиДереваОтТехПроектов);
	
КонецПроцедуры

#КонецОбласти 

#Область ИзменениеДат

&НаКлиенте
Процедура ПослеЗакрытияФормыИзмененияДат(Результат, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЧтоИзменять = Ложь;
	
	Если Результат.ИзменятьДатуТехПроекта Тогда
		ЕстьЧтоИзменять = Истина;
	Иначе
		Если Результат.ИзменяемыеЭтапы.Количество() > 0 Тогда
			ЕстьЧтоИзменять = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Изменение дат технического проекта'");
	
	Если ЕстьЧтоИзменять Тогда
		
		ТекстСообщения = РезультатИзмененияДатТехпроектаНаСервере(Результат);
		
	Иначе 
		
		ТекстСообщения = НСтр("ru = 'Ни одна дата не была изменена'");
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
	ОбновитьДанныеСтраницаОтТехПроектовНаКлиенте();
	
КонецПроцедуры

&НаСервере
Функция РезультатИзмененияДатТехпроектаНаСервере(ДанныеДляИзменения)
	
	КоличествоИзменено = 0;
	ИзмененТехПроект   = Ложь;
	КоличествоОшибок   = 0;
	
	ТехпроектДляИзмененияДаты = ?(ДанныеДляИзменения.ИзменятьДатуТехПроекта, ДанныеДляИзменения.ТехническийПроект, Неопределено);
	
	ИзменяемыеЭтапы = Новый Массив;
	Для Каждого ДанныеИзменяемогоЭтапа Из ДанныеДляИзменения.ИзменяемыеЭтапы Цикл
		
		ИзменяемыеЭтапы.Добавить(ДанныеИзменяемогоЭтапа.ИзменяемыйЭтап);
		
	КонецЦикла;
	
	ТекущееСостояниеИзменяемыхДатТехПроекта = ТекущееСостояниеИзменяемыхДатТехПроекта(ТехпроектДляИзмененияДаты, ИзменяемыеЭтапы);
	
	Для Каждого ДанныеИзменяемогоЭтапа Из ДанныеДляИзменения.ИзменяемыеЭтапы Цикл
		
		ТекущаяДатаЭтапа = ТекущееСостояниеИзменяемыхДатТехПроекта.Получить(ДанныеИзменяемогоЭтапа.ИзменяемыйЭтап); 
		Если ТекущаяДатаЭтапа <> ДанныеИзменяемогоЭтапа.НоваяДата Тогда
			
			ПараметрыИзменения =ПараметрыИзмененияРеквизитаОбъекта();
			ПараметрыИзменения.Объект        = ДанныеИзменяемогоЭтапа.ИзменяемыйЭтап;
			ПараметрыИзменения.ИмяРеквизита  = "КрайняяДатаОкончания";
			ПараметрыИзменения.НовоеЗначение = ДанныеИзменяемогоЭтапа.НоваяДата;
			
			Успешно = РезультатИзмененияДатыОбъекта(ПараметрыИзменения);
			Если Успешно Тогда
				КоличествоИзменено = КоличествоИзменено + 1;
			Иначе
				КоличествоОшибок = КоличествоОшибок + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляИзменения.ИзменятьДатуТехПроекта Тогда
		
		ТекущаяДатаТехПроекта = ТекущееСостояниеИзменяемыхДатТехПроекта.Получить(ДанныеДляИзменения.ТехническийПроект);
		
		Если ДанныеДляИзменения.НоваяДатаТехПроекта <> ТекущаяДатаТехПроекта Тогда
			
			ПараметрыИзменения =ПараметрыИзмененияРеквизитаОбъекта();
			ПараметрыИзменения.Объект        = ДанныеДляИзменения.ТехническийПроект;
			ПараметрыИзменения.ИмяРеквизита  = "ПлановаяДатаОкончания";
			ПараметрыИзменения.НовоеЗначение = ДанныеДляИзменения.НоваяДатаТехПроекта;
			
			Успешно = РезультатИзмененияДатыОбъекта(ПараметрыИзменения);
			Если Успешно Тогда
				КоличествоИзменено = КоличествоИзменено + 1
			Иначе
				КоличествоОшибок = КоличествоОшибок + 1;
			КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоВсего = КоличествоОшибок + КоличествоИзменено;
	
	Возврат СтрШаблон(НСтр("ru = 'Изменено дат - %1 из %2'"), КоличествоИзменено, КоличествоВсего);
	
КонецФункции

&НаСервере
Функция ПараметрыИзмененияРеквизитаОбъекта()
	
	ПараметрыИзменения = Новый Структура;
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Объект",       Неопределено);
	ПараметрыИзменения.Вставить("ИмяРеквизита",  "");
	ПараметрыИзменения.Вставить("НовоеЗначение", Неопределено);
	
	Возврат ПараметрыИзменения;
	
	
КонецФункции

&НаСервере
Функция РезультатИзмененияДатыОбъекта(ПараметрыИзменения)
	
	РаботаОбъект = ПараметрыИзменения.Объект.ПолучитьОбъект();
	
	Попытка
		РаботаОбъект.Заблокировать();
	Исключение
		ТекстОшибки = СтрШаблон(НСтр(" ru= ""Не заблокировать %1 по причине: %2""; "), ПараметрыИзменения.Объект, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ПараметрыИзменения.Объект);
		Возврат Ложь;
	КонецПопытки;

	Попытка
		РаботаОбъект[ПараметрыИзменения.ИмяРеквизита] = ПараметрыИзменения.НовоеЗначение;
		РаботаОбъект.Записать();
		РаботаОбъект.Разблокировать();
	Исключение
		ТекстОшибки = СтрШаблон(НСтр(" ru= ""Не записать %1 по причине: %2""; "), ПараметрыИзменения.Объект, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ПараметрыИзменения.Объект);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТекущееСостояниеИзменяемыхДатТехПроекта(ТехпроектДляИзмененияДаты, ИзменяемыеЭтапы)
	
	ТекущееСостояниеИзменяемыхДатТехПроекта = Новый Соответствие;
	
	ТекстЗапросаТехПроект = "";
	
	Если ТехпроектДляИзмененияДаты <> Неопределено Тогда
		
		ТекстЗапросаТехПроект = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТехническиеПроекты.Ссылка                КАК Ссылка,
		|	ТехническиеПроекты.ПлановаяДатаОкончания КАК ТекущаяДатаОкончания
		|ИЗ
		|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
		|ГДЕ
		|	ТехническиеПроекты.Ссылка = &ТехническийПроект";
		
	КонецЕсли;
	
	ТекстЗапросаЭтапы= "";
	
	Если ИзменяемыеЭтапы.Количество() > 0 Тогда
		
		ТекстЗапросаЭтапы = "ВЫБРАТЬ
		|	ЗадачиПроцесса.Ссылка               КАК Ссылка,
		|	ЗадачиПроцесса.КрайняяДатаОкончания КАК ТекущаяДатаОкончания
		|ИЗ
		|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|ГДЕ
		|	ЗадачиПроцесса.Ссылка В(&ИзменяемыеЭтапы)";
		
	КонецЕсли;
	
	ТекстОбъединить = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	
	ТекстЗапроса = "";
	
	Если Не ПустаяСтрока(ТекстЗапросаТехПроект)
		И Не ПустаяСтрока(ТекстЗапросаЭтапы) Тогда
		
		ТекстЗапроса = ТекстЗапросаТехПроект + ТекстОбъединить + ТекстЗапросаЭтапы;
		
	ИначеЕсли Не ПустаяСтрока(ТекстЗапросаТехПроект) Тогда
		
		ТекстЗапроса = ТекстЗапросаТехПроект;
		
	ИначеЕсли Не ПустаяСтрока(ТекстЗапросаЭтапы) Тогда
		
		ТекстЗапроса = ТекстЗапросаЭтапы; 
		
	КонецЕсли;

	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат ТекущееСостояниеИзменяемыхДатТехПроекта;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТехническийПроект", ТехпроектДляИзмененияДаты);
	Запрос.УстановитьПараметр("ИзменяемыеЭтапы",   ИзменяемыеЭтапы);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ТекущееСостояниеИзменяемыхДатТехПроекта;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекущееСостояниеИзменяемыхДатТехПроекта.Вставить(Выборка.Ссылка, Выборка.ТекущаяДатаОкончания);
	КонецЦикла;

	Возврат ТекущееСостояниеИзменяемыхДатТехПроекта;
	
КонецФункции

&НаСервере
Функция ТекущаяДатаНеСоответствуетПериодамПланирования()
	
	ЭтотОбъект["ТекущаяДата"] = ТекущаяДатаСеанса();
	
	ДанныеПлана = Неопределено;
	Для Каждого СтрокаОтображаемыеПланы Из ОтображаемыеПланы Цикл
		Если СтрокаОтображаемыеПланы.Отображается Тогда
			 ДанныеПлана = СтрокаОтображаемыеПланы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПлана = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеПлана.КонецПериода < ТекущаяДата Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти 

#Область НастройкиОтборовПоСКД

&НаСервере
Процедура УстановитьОтборТехническиеПроектыПоСпискуТехническихПроектов(СохраненныеТехническиеПроекты)
	
	Планирование.УстановитьНастройкиОтбораСКДПоСписку(
		ЭтотОбъект,
		ВыводимыеТехническиеПроекты,
		СохраненныеТехническиеПроекты,
		"НастройкиОтбораТехническиеПроекты",
		"ОтборПоТехническимПроектам", 
		"ДекорацияОтборПоТехПроектам", 
		"ОткрытьПодборТехПроектов");
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьОтборУчастникиПоСпискуУчастников(СохраненныеУчастники)
	
	Планирование.УстановитьНастройкиОтбораСКДПоСписку(
		ЭтотОбъект,
		ВыводимыеСотрудники,
		СохраненныеУчастники,
		"НастройкиОтбораУчастники",
		"ОтборПоСотрудникам", 
		"ДекорацияПредставлениеОтборСотрудников", 
		"ОткрытьПодборСотрудников");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиПредставлениеОткрытьПодборСотрудники(Форма, ПредставлениеОтбора)
	
	ПланированиеКлиентСервер.ВывестиПредставлениеОткрытьПодбор(Форма, "ДекорацияПредставлениеОтборСотрудников", "ОткрытьПодборСотрудников", ПредставлениеОтбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиПредставлениеОткрытьПодборТехПроекты(Форма, ПредставлениеОтбора)
	
	ПланированиеКлиентСервер.ВывестиПредставлениеОткрытьПодбор(Форма, "ДекорацияОтборПоТехПроектам", "ОткрытьПодборТехПроектов", ПредставлениеОтбора);
	
КонецПроцедуры 
	
Процедура ПередЗагрузкойНаСервереНастройкиОтбораСКД(Настройки, ПараметрыИзмененияВидаПлана) 
	
	НастройкиОтбораУчастники = Настройки.Получить("НастройкиОтбораУчастники");
	Если НастройкиОтбораУчастники = Неопределено Тогда
		
		СохраненныеУчастникиВидаПлана = Настройки.Получить("УчастникиВидаПлана");
		Если СохраненныеУчастникиВидаПлана <> Неопределено Тогда
			УстановитьОтборУчастникиПоСпискуУчастников(СохраненныеУчастникиВидаПлана);
			ПараметрыИзмененияВидаПлана.ОтображаемыеУчастникиЗагружены = Истина;
		КонецЕсли;
		
		Настройки.Удалить("УчастникиВидаПлана");
		Настройки.Удалить("НастройкиОтбораУчастники");
		
	Иначе
		
		ДанныеСхемыКомпоновкиОтбора = ПланированиеКлиентСервер.НовыйДанныеСхемыКомпоновкиОтбора();
		ДанныеСхемыКомпоновкиОтбора.АдресХранилищаНастройкиКомпоновщика =  ПоместитьВоВременноеХранилище(НастройкиОтбораУчастники, УникальныйИдентификатор);
		ДанныеСхемыКомпоновкиОтбора.ИмяСхемыКомпоновкиДанных             = "ОтборПоСотрудникам";
		РезультатОтбора = РезультатПолученияОтбораПоСКД(ДанныеСхемыКомпоновкиОтбора,"НастройкиОтбораУчастники");
		ВывестиПредставлениеОткрытьПодборСотрудники(ЭтотОбъект, РезультатОтбора.ПредставлениеОтбораСокр);
		ВыводимыеСотрудники = РезультатОтбора.СписокОтбора;

		ПараметрыИзмененияВидаПлана.ОтображаемыеУчастникиЗагружены = Истина;

		Настройки.Удалить("УчастникиВидаПлана");
		Настройки.Удалить("НастройкиОтбораУчастники");
		
	КонецЕсли;
	
	Если ВыводимыеТехническиеПроекты.Количество() = 0 Тогда
		НастройкиОтбораТехническиеПроекты = Настройки.Получить("НастройкиОтбораТехническиеПроекты");
		Если НастройкиОтбораТехническиеПроекты = Неопределено Тогда
			ВыводимыеТехническиеПроекты = Настройки.Получить("ВыводимыеТехническиеПроекты"); 
			Если ВыводимыеТехническиеПроекты <> Неопределено Тогда
				УстановитьОтборТехническиеПроектыПоСпискуТехническихПроектов(ВыводимыеТехническиеПроекты);
			КонецЕсли;
		Иначе
			
			ДанныеСхемыКомпоновкиОтбора = ПланированиеКлиентСервер.НовыйДанныеСхемыКомпоновкиОтбора();
			ДанныеСхемыКомпоновкиОтбора.АдресХранилищаНастройкиКомпоновщика =  ПоместитьВоВременноеХранилище(НастройкиОтбораТехническиеПроекты, УникальныйИдентификатор);
			ДанныеСхемыКомпоновкиОтбора.ИмяСхемыКомпоновкиДанных             = "ОтборПоТехническимПроектам";
			РезультатОтбора = РезультатПолученияОтбораПоСКД(ДанныеСхемыКомпоновкиОтбора,"НастройкиОтбораТехническиеПроекты");
			ВывестиПредставлениеОткрытьПодборТехПроекты(ЭтотОбъект, РезультатОтбора.ПредставлениеОтбораСокр);
			ВыводимыеТехническиеПроекты = РезультатОтбора.СписокОтбора;
			
		КонецЕсли;
	Иначе
		Настройки.Удалить("ВыводимыеТехническиеПроекты");
		Настройки.Удалить("НастройкиОтбораТехническиеПроекты");
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция РезультатПолученияОтбораПоСКД(ДанныеСхемыКомпоновки, ИмяРеквизитаСохраняемыеНастройки)
	
	Возврат Планирование.РезультатПолученияОтбораПоСКД(ЭтотОбъект, ВидПлана, ДанныеСхемыКомпоновки, ИмяРеквизитаСохраняемыеНастройки);
	
КонецФункции

#КонецОбласти

#КонецОбласти