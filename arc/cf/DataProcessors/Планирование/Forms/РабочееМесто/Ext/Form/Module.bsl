
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	УстановитьУсловноеОформление();
	
	УправлениеДоступностью(ЭтотОбъект);
	ОтобразитьТекстНастроитьГруппировкуОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		ОпределитьВидПланаПользователяПоУмолчанию();
		УправлениеДоступностью(ЭтотОбъект);
	КонецЕсли;
	
	ПослеВыводаПодбораТехПроектыЗадачи();
	
	ПодключитьОбработчикОжидания("ПроверитьНеобходимостьПолученияДополнительныхДанных", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода = Настройки.Получить("НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода");
	
	Если НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода <> Неопределено Тогда
		Настройки.Удалить("МаксимальныйВозможныйСтатусДляВыводаЗадач");
	Иначе
		НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода = "ТребующиеВыполнения";
	КонецЕсли;
	
	СкрыватьНеАктивныеПроекты = Настройки.Получить("СкрыватьНеАктивныеПроекты");
	
	Если НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода <> Неопределено Тогда
		Настройки.Удалить("СкрыватьНеАктивныеПроекты");
	КонецЕсли;
	
	ОтображатьВПодбореТехПроектовИЗадач = Настройки.Получить("ОтображатьВПодбореТехПроектовИЗадач");
	
	Если ОтображатьВПодбореТехПроектовИЗадач <> Неопределено Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОчередиЗадач") Тогда
			ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот";
		КонецЕсли;
		
		ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
		Настройки.Удалить("ОтображатьВПодбореТехПроектовИЗадач");
	КонецЕсли;
	
	ВидПлана = Настройки.Получить("ВидПлана");
	
	Если ВидПлана <> Неопределено Тогда
		
		ДанныеВидаПлана = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
		Если ДанныеВидаПлана.Статус = Перечисления.СтатусыВидовПланов.Действует
			И ДанныеВидаПлана.ТипПлана = Перечисления.ТипыПланов.Рабочий Тогда
		
			ПриИзмененииВидаПланаНаСервере(Истина);
			УправлениеДоступностью(ЭтотОбъект);
		
		Иначе
			
			ВидПлана = Справочники.ВидыПланов.ПустаяСсылка();
			
		КонецЕсли;
		
		Настройки.Удалить("ВидПлана");
		
	КонецЕсли;
	
	НастройкиГруппировкиОшибокВПодбореСохраненная = Настройки.Получить("НастройкиГруппировкиОшибокВПодборе");
	
	Если НастройкиГруппировкиОшибокВПодбореСохраненная <> Неопределено Тогда
		
		Для Каждого СтрокаНастроек Из НастройкиГруппировкиОшибокВПодборе Цикл
			
			Если НастройкиГруппировкиОшибокВПодбореСохраненная.Найти(СтрокаНастроек.ТипГруппировки, "ТипГруппировки") = Неопределено Тогда
				
				НоваяСтрока = НастройкиГруппировкиОшибокВПодбореСохраненная.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастроек);
				
			КонецЕсли; 
			
		КонецЦикла;
		
		НастройкиГруппировкиОшибокВПодборе.Загрузить(НастройкиГруппировкиОшибокВПодбореСохраненная); 
		
		Настройки.Удалить("НастройкиГруппировкиОшибокВПодборе");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СсылкаНаОбъектДляОбновленияДанных = Неопределено;
	
	Если ИмяСобытия = "ЗаписанТехническийПроект" Тогда
		
		ОпределитьНеобходимостьОбновленияДанныхРаботы(Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_Ошибки" Тогда
		
		ОпределитьНеобходимостьОбновленияДанныхРаботы(Параметр.Ссылка);
		
	ИначеЕсли ИмяСобытия = "Запись_ЗадачаПроцесса" Тогда
	
		ОпределитьНеобходимостьОбновленияДанныхРаботы(Источник);
		
	ИначеЕсли ИмяСобытия = "Запись_ВидыПланов" Тогда
		
		ОпределитьНеобходимостьОбновленияПослеИзмененияВидаПлана(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидПланаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыВидовПланов.Действует"));
	СтруктураБыстрогоОтбора.Вставить("ПоказыватьВидыПланов", "УчастникИлиВладелец");
	СтруктураБыстрогоОтбора.Вставить("ТипПлана", ПредопределенноеЗначение("Перечисление.ТипыПланов.Рабочий"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОповещениеПослеВыбораПлана = Новый ОписаниеОповещения("ПослеВыбораВидаПлана", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыПланов.ФормаВыбора",
	             ПараметрыФормы,
	             ЭтотОбъект,,,, 
	             ОповещениеПослеВыбораПлана, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПланаПриИзменении(Элемент)
	
	ПриИзмененииВидаПланаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеОтображенияВидаПланаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПодборСотрудников" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СписокУчастников", УчастникиВидаПлана);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияВыбораУчастников", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ОтборПоГруппаРазработки", ПараметрыОткрытия, 
		              ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРодительскийПланОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьРодительскийВидПлана"
		И ЗначениеЗаполнено(РодительскийВидПлана) Тогда
		
		ПоказатьЗначение(, РодительскийВидПлана);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставлениеПланов

&НаКлиенте
Процедура СоставлениеПлановВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки  = СоставлениеПланов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (Поле.Имя = "СоставлениеПлановСотрудникРабота"
		   Или Поле.Имя = "СоставлениеПлановСрокВыполнения"
		   Или Поле.Имя = "СоставлениеПлановСтатус"
		   Или Поле.Имя = "СоставлениеПлановДатаСтатуса") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") 
			Или ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПоказатьЗначение(, ДанныеСтроки.СотрудникРабота);
		
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СоставлениеПланов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НеИзменятьТекущегоСотрудникаСоставлениеПланов Тогда
		НеИзменятьТекущегоСотрудникаСоставлениеПланов = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда 
		Если ТекущийСотрудникСоставлениеПланов <> ТекущиеДанные.СотрудникРабота Тогда
			
			ТекущийСотрудникСоставлениеПланов = ТекущиеДанные.СотрудникРабота;
			ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов();
			
		КонецЕсли;
		
	Иначе
		
		РодительскаяСтрока = ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(ТекущиеДанные);
		Если ТипЗнч(РодительскаяСтрока.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда 
			Если ТекущийСотрудникСоставлениеПланов <> РодительскаяСтрока.СотрудникРабота Тогда
				
				ТекущийСотрудникСоставлениеПланов = РодительскаяСтрока.СотрудникРабота;
				ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	МассивИдентификаторовСтрокВыполненПересчет = Новый Массив;
	ВыделенныеСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элементы.СоставлениеПланов.ВыделенныеСтроки);
	ДанныеУдаляемыхСтрок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = СоставлениеПланов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.Пользователи") Тогда
			Если УчастникиВидаПлана.НайтиПоЗначению(ДанныеСтроки.СотрудникРабота) <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ПодчиненнаяСтрока Из ДанныеСтроки.ПолучитьЭлементы() Цикл
			
			НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, ПодчиненнаяСтрока.СотрудникРабота, Ложь);
			ДанныеУдаляемойСтроки = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, ПодчиненнаяСтрока);
			ДанныеУдаляемойСтроки.Удалить = Истина;
			ДанныеУдаляемыхСтрок.Добавить(ДанныеУдаляемойСтроки);
			
			Для Каждого СтрокаНижнегоУровня Из ПодчиненнаяСтрока.ПолучитьЭлементы() Цикл
				
				НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаНижнегоУровня.СотрудникРабота, Ложь);
				ДанныеУдаляемойСтроки = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаНижнегоУровня);
				ДанныеУдаляемойСтроки.Удалить = Истина;
				ДанныеУдаляемыхСтрок.Добавить(ДанныеУдаляемойСтроки);
				
			КонецЦикла;
			
		КонецЦикла;
		
		НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, ДанныеСтроки.СотрудникРабота, Ложь);
		
		ДанныеУдаляемойСтроки = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, ДанныеСтроки);
		ДанныеУдаляемойСтроки.Удалить = Истина;
		ДанныеУдаляемыхСтрок.Добавить(ДанныеУдаляемойСтроки);
		
		СтрокаРодитель = ДанныеСтроки.ПолучитьРодителя();
		
		Если СтрокаРодитель <> Неопределено Тогда
			
			НеИзменятьТекущегоСотрудникаСоставлениеПланов = Истина;
			
			КоллекцияСтрок = СтрокаРодитель.ПолучитьЭлементы();
			КоллекцияСтрок.Удалить(КоллекцияСтрок.Индекс(ДанныеСтроки));
			
			ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
			
			СтрокаВерхнегоУровня = СтрокаРодитель.ПолучитьРодителя(); 
			
			Если СтрокаВерхнегоУровня =  Неопределено Тогда
				
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(
				              СтрокаРодитель, 
				              "ПлановыеТрудозатраты",
				              ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику),
				              НормативПланируемогоВремени);
				
				МассивИдентификаторовСтрокВыполненПересчет.Добавить(СтрокаРодитель.ПолучитьИдентификатор());
				
			Иначе
				
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаРодитель, "ПлановыеТрудозатраты");
				МассивИдентификаторовСтрокВыполненПересчет.Добавить(СтрокаРодитель.ПолучитьИдентификатор());
				
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(
				              СтрокаВерхнегоУровня, 
				              "ПлановыеТрудозатраты",
				              ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику),
				              НормативПланируемогоВремени);
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня, "ПлановыеТрудозатраты");
				
			КонецЕсли;
			
		Иначе
			
			КоллекцияСтрок = СоставлениеПланов.ПолучитьЭлементы();
			КоллекцияСтрок.Удалить(КоллекцияСтрок.Индекс(ДанныеСтроки));
			
			ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
		
		КонецЕсли;
		
	КонецЦикла;
	
	НормализоватьРодительскиеУзлыСоставлениеПланов(ЭтотОбъект, МассивИдентификаторовСтрокВыполненПересчет, ДанныеУдаляемыхСтрок);
	
	ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
	ОтразитьИзменениеМассиваЗаписейПлана(ДанныеУдаляемыхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	МассивЗначений = ПараметрыПеретаскивания.Значение;
	
	Если Строка = Неопределено Тогда
		
		СтрокиВерхнегоУровня = СоставлениеПланов.ПолучитьЭлементы();
		
		КоличествоОтображаемыхСотрудников = СтрокиВерхнегоУровня.Количество();
		
		Если КоличествоОтображаемыхСотрудников = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Строка = СтрокиВерхнегоУровня[КоличествоОтображаемыхСотрудников - 1].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Для Каждого ПеретаскиваемоеЗначение Из МассивЗначений Цикл
		
		Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("ДанныеФормыЭлементДерева") 
			Или  ТипЗнч(ПеретаскиваемоеЗначение) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПеретаскиваемоеЗначение, "Работа") Тогда
				
				ДанныеСтроки = СоставлениеПланов.НайтиПоИдентификатору(Строка);
				Если ДанныеСтроки = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				Если ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Сотрудник") Тогда
					СтрокаРодитель = ДанныеСтроки;
				Иначе
					СтрокаРодитель = ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(ДанныеСтроки);
				КонецЕсли;
				
				НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаРодитель, "СотрудникРабота", ПеретаскиваемоеЗначение.Работа, 2);
				Если НайденнаяСтрока <> Неопределено Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = '%1 уже есть в плане сотрудника %2'"), ПеретаскиваемоеЗначение.Работа, СтрокаРодитель.СотрудникРабота);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат;
				КонецЕсли;
				
				ДобавитьСтрокуСоставленияПлана(СтрокаРодитель, ПеретаскиваемоеЗначение);
				
			КонецЕсли;
			
			Если Не Элементы.СоставлениеПланов.Развернут(Строка) Тогда
				Элементы.СоставлениеПланов.Развернуть(Строка)
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановЦельПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтрокиСоставлениеПланов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановПлановыеТрудозатратыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СоставлениеПланов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеИзмененияПлановыхТрудозатрат(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановКомментарийПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтрокиСоставлениеПланов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеСоставлениеПланаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьСоставляемыйПлан" Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПлана();

		ПараметрыОткрытия.ВидПлана                   = ВидПлана;
		ПараметрыОткрытия.ИдентификаторТекущегоПлана = ИдентификаторСоставляемогоПлана;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Зафиксирован", Ложь);
		
		ОповещениеПослеВыбораПлана = Новый ОписаниеОповещения("ВыборПланаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("РегистрСведений.Планы.Форма.ВыборПлана", 
		             ПараметрыОткрытия, ЭтотОбъект,,,,
		             ОповещениеПослеВыбораПлана, 
		             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставлениеПлановНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ЗначенияПеретаскивания = ПараметрыПеретаскивания.Значение;
	ЕстьДопустимыеЗначения = Ложь;
	
	Для Каждого ИдентификаторСтроки Из ЗначенияПеретаскивания Цикл
		
		ДанныеСтроки = СоставлениеПланов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа") Тогда
			ЕстьДопустимыеЗначения = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьДопустимыеЗначения Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьОтображениеЗапланированоПоСотрудникуСуммаПриИзменении(Элемент)
	
	ПриИзмененииИнвертироватьОтображениеЗапланированоПоСотруднику();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьОтображениеЗапланированоПоСотрудникуОстатокПриИзменении(Элемент)
	
	ПриИзмененииИнвертироватьОтображениеЗапланированоПоСотруднику();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодведениеИтогов

&НаКлиенте
Процедура ПодведениеИтоговВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = ПодведениеИтогов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПрочиеРаботы")
		И Поле.Имя <> "ПодведениеИтоговДостигнуто"
		И Поле.Имя <> "ПодведениеИтоговКомментарий"
		И Поле.Имя <> "ПодведениеИтоговРезультат" Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Сотрудник", ДанныеСтроки.ПолучитьРодителя().СотрудникРабота);
		
		НайденныеСтроки = ДанныеПрочихРабот.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", НайденныеСтроки[0].АдресВоВременномХранилище);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ПрочиеРаботы", ПараметрыОткрытия, ЭтотОбъект,
		             ,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		Возврат;
		
	КонецЕсли;
	
	Если Поле.Имя = "ПодведениеИтоговСотрудникРабота"
		Или Поле.Имя = "ПодведениеИтоговСрокВыполнения"
		Или Поле.Имя = "ПодведениеИтоговСтатус"
		Или Поле.Имя = "ПодведениеИтоговДатаСтатуса" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана")
			Или ТипЗнч(ДанныеСтроки.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьЗначение(, ДанныеСтроки.СотрудникРабота);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодведениеИтоговРезультатПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодведениеИтогов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РезультатУказан = ЗначениеЗаполнено(ТекущиеДанные.Результат);
	
	ИзменениеЗначенияПеренестиТребуется = Ложь;
	
	Если ТекущиеДанные.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Группировка") Тогда
		
		Если ПланированиеКлиентСервер.ВсеТипыРабот().НайтиПоЗначению(ТекущиеДанные.ТипРаботы) <> Неопределено Тогда 
			ИзменениеЗначенияПеренестиТребуется = Истина;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа") Тогда
		
		ИзменениеЗначенияПеренестиТребуется = Истина;
		
	КонецЕсли;
	
	Если Не ИзменениеЗначенияПеренестиТребуется Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Результат = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.НеВыполнялась")
		Или ТекущиеДанные.Результат = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.ЧастичноВыполнена") Тогда
		
		ТекущиеДанные.ПеренестиРаботуВСледующийПериод = Истина;
		
	ИначеЕсли ТекущиеДанные.ТипРаботы <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
		
		ТекущиеДанные.ПеренестиРаботуВСледующийПериод = Ложь;
		
	КонецЕсли;
	
	ПриИзмененииДанныхСтрокиПодведениеИтогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодведениеИтоговПеренестиРаботуВСледующийПериодПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтрокиПодведениеИтогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодведениеИтоговДостигнутоПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтрокиПодведениеИтогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодведениеИтоговКомментарийПриИзменении(Элемент)
	
	ПриИзмененииДанныхСтрокиПодведениеИтогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСостояниеПодведениеИтоговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьЗафиксированныйПлан" Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПлана();

		ПараметрыОткрытия.ВидПлана                   = ВидПлана;
		ПараметрыОткрытия.Зафиксирован               = Истина;
		ПараметрыОткрытия.ИдентификаторТекущегоПлана = ИдентификаторЗафиксированногоПлана;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Зафиксирован", Истина);
		
		ОповещениеПослеВыбораПлана = Новый ОписаниеОповещения("ВыборПланаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("РегистрСведений.Планы.Форма.ВыборПлана", 
		             ПараметрыОткрытия, ЭтотОбъект,,,,
		             ОповещениеПослеВыбораПлана, 
		             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодведениеИтоговПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтраницаТехПроектыЗадачи

&НаКлиенте
Процедура ДекорацияТолькоТехпроектыПодборНажатие(Элемент)
	
	ОтображатьВПодбореТехПроектовИЗадач = "ТолькоТехпроекты";
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ТекущийЭлемент = Элементы.ТехПроектыЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТехпроектыЗадачиСотрудникаПодборНажатие(Элемент)
	
	ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыЗадачиСотрудника";
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ТекущийЭлемент                      = Элементы.ТехПроектыЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТехпроектыВсеЗадачиПодборНажатие(Элемент)
	
	ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыВсеЗадачи";
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ТекущийЭлемент = Элементы.ТехПроектыЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОчередиРаботПодборНажатие(Элемент)
	
	ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот";
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ПослеВыводаПодбораТехПроектыЗадачи();
	ТекущийЭлемент = Элементы.ТехПроектыЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехПроектыЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПриВыбореИзПанелиНавигации("ТехПроектыЗадачи", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТехПроектыЗадачиПередРазворачиванием(Элемент, Строка, Отказ)
	
	Если ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыВсеЗадачи"
		Или ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот" Тогда
		
		ДанныеСтроки = ТехПроектыЗадачи.НайтиПоИдентификатору(Строка);
		
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УровеньСтрокиДерева = УровеньСтрокиДерева(ДанныеСтроки);
		
		Если (ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыВсеЗадачи"
			Или ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот")
			И ТипЗнч(ДанныеСтроки.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			ДобавитьПодчиненныеСтрокиДеревоТехПроектыЗадачи(ДанныеСтроки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехПроектыЗадачиПередСворачиванием(Элемент, Строка, Отказ)
	
	Если ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыВсеЗадачи"
		Или ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот" Тогда
		
		ДанныеСтроки = ТехПроектыЗадачи.НайтиПоИдентификатору(Строка);
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если (УровеньСтрокиДерева(ДанныеСтроки) > 0
			И ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыВсеЗадачи")
			Или (УровеньСтрокиДерева(ДанныеСтроки) > 1
			И ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот") Тогда
			
			ДанныеСтроки.ПолучитьЭлементы().Очистить();
			ДанныеСтроки.ПолучитьЭлементы().Добавить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНезапланированныеТехническиеПроектыПриИзменении(Элемент)
	
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ТекущийЭлемент = Элементы.ТехПроектыЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьНеАктивныеПроектыПриИзменении(Элемент)
	
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ТекущийЭлемент = Элементы.ТехПроектыЗадачи;
	
	Если СкрыватьНеАктивныеПроекты Тогда
		ПоказыватьНезапланированныеТехническиеПроекты      = Ложь;
		ПоказыватьОтмененныеИЗавершенныеТехническиеПроекты = Ложь;
	КонецЕсли;
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтмененныеИЗавершенныеТехническиеПроектыПриИзменении(Элемент)
	
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ТекущийЭлемент = Элементы.ТехПроектыЗадачи;
	ПослеВыводаПодбораТехПроектыЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоГотовыеКВыполнениюЗадачиПриИзменении(Элемент)
	
	ПриИзмененииНастройкиМаксимальныйВозможныйСтатусДляВыводаЗадач()
	
КонецПроцедуры 

&НаКлиенте
Процедура ДоступныеДляВыполненияПриИзменении(Элемент)
	
	ПриИзмененииНастройкиМаксимальныйВозможныйСтатусДляВыводаЗадач()
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеДляЗавершенияПриИзменении(Элемент)
	
	ПриИзмененииНастройкиМаксимальныйВозможныйСтатусДляВыводаЗадач()
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибкиНевыпоненоПредыдущиеПланы

&НаКлиенте
Процедура НевыпоненоПредыдущиеПланыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореИзПанелиНавигации("НевыпоненоПредыдущиеПланы", ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибки

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПриВыбореИзПанелиНавигации("Ошибки", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияГруппировкаОшибокОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьГруппировкуОшибок" Тогда
		
		ОткрытьФормуНастройкиГруппировкиОшибок();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтраницаВидыДеятельности

&НаКлиенте
Процедура ВидыДеятельностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореИзПанелиНавигации("ВидыДеятельности", ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботыРодительскогоПлана

&НаКлиенте
Процедура РаботыРодительскогоПланаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = РаботыРодительскогоПлана.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.НеДоступноДляВыбора Тогда
		Возврат;
	КонецЕсли; 
	
	ПриВыбореИзПанелиНавигации("РаботыРодительскогоПлана", ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыРодительскогоПланаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ЗначенияПеретаскивания  = ПараметрыПеретаскивания.Значение;
	ПеретаскиваемыеРаботы   = ПеретаскиваемыеРаботыРодительскогоПлана(Элемент, ЗначенияПеретаскивания);
	
	Если ПеретаскиваемыеРаботы.Количество() = 0 Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура РаботыРодительскогоПланаПередРазворачиванием(Элемент, Строка, Отказ)
		
		ДанныеСтроки = РаботыРодительскогоПлана.НайтиПоИдентификатору(Строка);
		
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УровеньСтрокиДерева = УровеньСтрокиДерева(ДанныеСтроки);
		
		Если (ТипЗнч(ДанныеСтроки.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса")
			    И УровеньСтрокиДерева > 1)
			  Или ТипЗнч(ДанныеСтроки.Работа) = Тип("СправочникСсылка.Ошибки")Тогда 
			
			МаксимальныеСтатусы = Новый Массив;
			МаксимальныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению"));
			МаксимальныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована"));
			МаксимальныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена"));
			
			ДобавитьПодчиненныеСтрокиДеревоТехПроектыЗадачи(ДанныеСтроки, МаксимальныеСтатусы);
			
			ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
			
		КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыРодительскогоПланаПередСворачиванием(Элемент, Строка, Отказ)
	
	ДанныеСтроки = РаботыРодительскогоПлана.НайтиПоИдентификатору(Строка);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтроки.Работа) <> Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		Возврат;
	КонецЕсли;
	
	Если УровеньСтрокиДерева(ДанныеСтроки) > 1 Тогда
			
			ДанныеСтроки.ПолучитьЭлементы().Очистить();
			ДанныеСтроки.ПолучитьЭлементы().Добавить();
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗафиксироватьПлан(Команда)
	
	ТекстВопроса = НСтр("ru = 'План будет зафиксирован. Продолжить?'");
	ОповещениеПослеВопроса = Новый ОписаниеОповещения("ПослеОтветаНаВопросФиксацияПлана", ЭтотОбъект);
	
	ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиРаботу(Команда)
	
	ОбластьПоискаРабот = Новый СписокЗначений;
	ОбластьПоискаРабот.Добавить(0, НСтр("ru = 'Ошибки'"));
	ОбластьПоискаРабот.Добавить(2, НСтр("ru = 'Технические проекты'"));
	ОбластьПоискаРабот.Добавить(3, НСтр("ru = 'Задачи'"));
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбластьПоиска",               ОбластьПоискаРабот);
	ПараметрыОткрытия.Вставить("ВозвращатьНайденноеЗначение", Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сотрудник", ТекущийСотрудникСоставлениеПланов);
	
	ОповещениеОбОкончанииПоиска = Новый ОписаниеОповещения("ПослеОкончанияПоискаРаботы", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ПоискОбъектов", ПараметрыОткрытия, ЭтотОбъект,,,,
	             ОповещениеОбОкончанииПоиска, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьПланируемыеЧасы(Команда)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элементы.СоставлениеПланов.ВыделенныеСтроки;
	ЕстьСтрокиДляКоторыхОперацияИмеетСмысл = Ложь;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = СоставлениеПланов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа") Тогда
			
			ЕстьСтрокиДляКоторыхОперацияИмеетСмысл = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСтрокиДляКоторыхОперацияИмеетСмысл Тогда
		
		ОписаниеОповещенияВводеПлановыхЧасов = Новый ОписаниеОповещения("ПослеВводаПлановыхЧасов", ЭтотОбъект);
		
		ПоказатьВводЧисла(ОписаниеОповещенияВводеПлановыхЧасов, 0, НСтр("ru = 'Введите плановые часы'"), 4, 1);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрано ни одной строки для которой возможно указать плановые часы'"));
		
	КонецЕсли;
	
КонецПроцедуры

 #Область ВидыДеятельностиПоСтатистике

&НаКлиенте
Процедура ЗаполнитьВидыДеятельностиПоСтатистике(Команда)
	
	ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудников();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьВидыДеятельностиПоСтатистике(Команда)
	
	АктуализироватьВыбранныеВидыДеятельностиПоСтатистике();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФиксациюПлана(Команда)
	
	ТекстВопроса = НСтр("ru = 'Фиксация плана будет отменена. Продолжить?'");
	ОповещениеПослеВопроса = Новый ОписаниеОповещения("ПослеОтветаНаВопросОтменаФиксацияПлана", ЭтотОбъект);
	
	ПоказатьВопрос(ОповещениеПослеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеЗначений

&НаКлиенте
Процедура ПоказатьЗначениеСтрокиПодбора(Команда)
	
	Если Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаПоРодительскомуПлану Тогда
		ТекущиеДанные = Элементы.РаботыРодительскогоПлана.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаОшибки Тогда
		ТекущиеДанные = Элементы.Ошибки.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаЗадачиТехпроекты Тогда
		ТекущиеДанные = Элементы.ТехПроектыЗадачи.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаНевыполненоВПредыдущихПланах Тогда
		ТекущиеДанные = Элементы.НевыпоненоПредыдущиеПланы.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаВидыДеятельности Тогда
		ТекущиеДанные = Элементы.ВидыДеятельности.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Работа) <> Тип("Строка") Тогда
		ПоказатьЗначение(, ТекущиеДанные.Работа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазвернутьСвернутьСтроки

&НаКлиенте
Процедура СвернутьСтрокиПодведениеИтогов(Команда)
	
	Для Каждого РодительскаяСтрока Из ПодведениеИтогов.ПолучитьЭлементы() Цикл
		
		Элементы.ПодведениеИтогов.Свернуть(РодительскаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиПодведениеИтогов(Команда)
	
	Для Каждого РодительскаяСтрока Из ПодведениеИтогов.ПолучитьЭлементы() Цикл
		
		Элементы.ПодведениеИтогов.Развернуть(РодительскаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтрокиСоставлениеПланов(Команда)
	
	Для Каждого РодительскаяСтрока Из СоставлениеПланов.ПолучитьЭлементы() Цикл
		
		Элементы.СоставлениеПланов.Свернуть(РодительскаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтрокиСоставлениеПланов(Команда)
	
	Для Каждого РодительскаяСтрока Из СоставлениеПланов.ПолучитьЭлементы() Цикл
		
		Элементы.СоставлениеПланов.Развернуть(РодительскаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьРезультат

&НаКлиенте
Процедура УстановитьРезультатВыполнена(Команда)
	
	УстановитьРезультат(ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.Выполнена"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиРаботыВСледующийПериод(Команда)
	
	ОчиститьСообщения(); 
	
	ВыделенныеСтроки  = Элементы.ПодведениеИтогов.ВыделенныеСтроки;
	МассивСотрудников = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПодведениеИтогов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ДобавитьСотрудникаВМассивЧьиСтрокиИзменяются(МассивСотрудников, ДанныеСтроки);
		
	КонецЦикла;
	
	МассивПереносимыхРабот = Новый Массив;
	
	Для Каждого СтрокаСотрудник Из МассивСотрудников Цикл
		
		Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
			
			Если СтрокаГруппировка.ПеренестиРаботуВСледующийПериод Тогда
				МассивПереносимыхРабот.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, СтрокаГруппировка));
			КонецЕсли;
			
			Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
				
				Если СтрокаРабота.ПеренестиРаботуВСледующийПериод Тогда
					МассивПереносимыхРабот.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, СтрокаРабота));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если МассивПереносимыхРабот.Количество() > 0 Тогда
		
		КлючиРазвернутыхУзловДерева = КлючиРазвернутыхУзловДерева("СоставлениеПланов", "СотрудникРабота");
		КлючТекущейСтрокиДерева     = КлючТекущейСтрокиДерева("СоставлениеПланов", "СотрудникРабота");
		
		РезультатПереноса = РезультатПереносаРаботВСледующийПериод(МассивПереносимыхРабот);
		
		Если Не ПустаяСтрока(РезультатПереноса.ТекстОшибки) Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатПереноса.ТекстОшибки);
			
		Иначе
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Перенесено в следующий план работ %1 из %2'"), 
			                           РезультатПереноса.КоличествоПеренесено,
			                           РезультатПереноса.КоличествоКПереносу);
			
			ТекстЗаголовка = НСтр("ru = 'Перенос работ'");
			
			ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
		ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
		
		ВосстановитьРазвернутыеУзлыДерева("СоставлениеПланов", "СотрудникРабота", КлючиРазвернутыхУзловДерева);
		ВосстановитьТекущуюСтрокуДереваПоКлючу("СоставлениеПланов", "СотрудникРабота", КлючТекущейСтрокиДерева);
		
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Нет работ, выбранных для переноса в план следующего периода.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатНеВыполнялась(Команда)
	
	УстановитьРезультат(ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.НеВыполнялась"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатОтменена(Команда)
	
	УстановитьРезультат(ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.Отменена"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатЧастичноВыполнена(Команда)
	
	УстановитьРезультат(ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.ЧастичноВыполнена"));
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеПлана

&НаКлиенте
Процедура ПредыдущаяВерсияСоставлениеПланов(Команда)
	
	ИзменитьПлан("Предыдущий", "Составление");
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяВерсияСоставлениеПланов(Команда)
	
	ИзменитьПлан("Следующий", "Составление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяВерсияПодведениеИтогов(Команда)
	
	ИзменитьПлан("Предыдущий", "ПодведениеИтогов");
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяВерсияПодведениеИтогов(Команда)
	
	ИзменитьПлан("Следующий", "ПодведениеИтогов");
	
КонецПроцедуры

#КонецОбласти

#Область Обновление

&НаКлиенте
Процедура ОбновитьПодведениеИтогов(Команда)
	
	КлючиРазвернутыхУзловДерева = КлючиРазвернутыхУзловДерева("ПодведениеИтогов", "СотрудникРабота");
	КлючТекущейСтрокиДерева     = КлючТекущейСтрокиДерева("ПодведениеИтогов", "СотрудникРабота");
	
	ПослеВыбораПланаНаСервере(Истина);
	
	ВосстановитьРазвернутыеУзлыДерева("ПодведениеИтогов", "СотрудникРабота", КлючиРазвернутыхУзловДерева);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ПодведениеИтогов", "СотрудникРабота", КлючТекущейСтрокиДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоставлениеПланов(Команда)
	
	КлючиРазвернутыхУзловДерева = КлючиРазвернутыхУзловДерева("СоставлениеПланов", "СотрудникРабота");
	КлючТекущейСтрокиДерева     = КлючТекущейСтрокиДерева("СоставлениеПланов", "СотрудникРабота");
	
	КлючиРазвернутыхУзловДереваТехПроекты = КлючиРазвернутыхУзловДерева("ТехПроектыЗадачи", "Работа");
	КлючТекущейСтрокиДереваТехПроекты     = КлючТекущейСтрокиДерева("ТехПроектыЗадачи", "Работа");
	
	ПослеВыбораПланаНаСервере(Ложь);
	
	ВосстановитьРазвернутыеУзлыДерева("СоставлениеПланов", "СотрудникРабота", КлючиРазвернутыхУзловДерева);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("СоставлениеПланов", "СотрудникРабота", КлючТекущейСтрокиДерева);
	
	ВосстановитьРазвернутыеУзлыДерева("ТехПроектыЗадачи", "Работа", КлючиРазвернутыхУзловДереваТехПроекты);
	ВосстановитьТекущуюСтрокуДереваПоКлючу("ТехПроектыЗадачи", "Работа", КлючТекущейСтрокиДереваТехПроекты);
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеЗаписи

&НаКлиенте
Процедура ИзменитьЗаписьСоставлениеПланов(Команда)
	
	ТекущиеДанные = Элементы.СоставлениеПланов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПересчитанныхСтрок = Новый Массив;
	ДанныеЗаписи = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект,ТекущиеДанные);
	ДанныеЗаписи.Вставить("Статус",                                      ТекущиеДанные.Статус);
	ДанныеЗаписи.Вставить("ТекстДанныеЧасовПоЗадаче",                    ТекущиеДанные.ТекстДанныеЧасовПоЗадаче);
	ДанныеЗаписи.Вставить("СрокВыполнения",                              ТекущиеДанные.СрокВыполнения);
	ДанныеЗаписи.Вставить("ДатаСтатуса",                                 ТекущиеДанные.ДатаСтатуса);
	ДанныеЗаписи.Вставить("РедактированиеПлановыхТрудозатратНедоступно", ТекущиеДанные.РедактированиеПлановыхТрудозатратНедоступно);
	ДанныеЗаписи.Вставить("ЭтоВладелецПлана",                            ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(ВладельцыПлана, ТекущийПользователь));
	
	Если ЗначениеЗаполнено(ДанныеЗаписи.Работа) 
		И ТипЗнч(ДанныеЗаписи.Группировка) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		ДанныеЗаписи.Вставить("СтатусТехническогоПроекта",         СтрокаРодитель.Статус);
		ДанныеЗаписи.Вставить("СрокВыполненияТехническогоПроекта", СтрокаРодитель.СрокВыполнения);
		ДанныеЗаписи.Вставить("ДатаСтатусаТехническогоПроекта",    СтрокаРодитель.ДатаСтатуса);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ОповещениеОЗакрытииФормыРедактирования = Новый ОписаниеОповещения("ПослеРедактированияЗаписиСоставляемогоПлана",
	                                                                  ЭтотОбъект, 
	                                                                  ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.Планирование.Форма.РедактированиеЗаписиСоставлениеПланов",
	             ДанныеЗаписи, ЭтотОбъект,,,,
	             ОповещениеОЗакрытииФормыРедактирования, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаписьПодведениеИтогов(Команда)
	
	ТекущиеДанные = Элементы.ПодведениеИтогов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПересчитанныхСтрок = Новый Массив;
	ДанныеЗаписи = ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект,ТекущиеДанные);
	ДанныеЗаписи.Вставить("Статус",                  ТекущиеДанные.Статус);
	ДанныеЗаписи.Вставить("СрокВыполнения",          ТекущиеДанные.СрокВыполнения);
	ДанныеЗаписи.Вставить("ДатаСтатуса",             ТекущиеДанные.ДатаСтатуса);
	ДанныеЗаписи.Вставить("ЭтоВладелецПлана",        ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(ВладельцыПлана, ТекущийПользователь));
	ДанныеЗаписи.Вставить("ФактическиеТрудозатраты", ТекущиеДанные.ФактическиеТрудозатраты);
	
	Если ЗначениеЗаполнено(ДанныеЗаписи.Работа) 
		И ТипЗнч(ДанныеЗаписи.Группировка) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
		ДанныеЗаписи.Вставить("СтатусТехническогоПроекта",         СтрокаРодитель.Статус);
		ДанныеЗаписи.Вставить("СрокВыполненияТехническогоПроекта", СтрокаРодитель.СрокВыполнения);
		ДанныеЗаписи.Вставить("ДатаСтатусаТехническогоПроекта",    СтрокаРодитель.ДатаСтатуса);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ОповещениеОЗакрытииФормыРедактирования = Новый ОписаниеОповещения("ПослеРедактированияЗаписиЗафиксированногоПлана",
	                                                                  ЭтотОбъект, 
	                                                                  ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.Планирование.Форма.РедактированиеЗаписиПодведениеИтогов",
	             ДанныеЗаписи, ЭтотОбъект,,,,
	             ОповещениеОЗакрытииФормыРедактирования, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриСозданииНаСервере

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	ТекущийПользователь                                 = Пользователи.ТекущийПользователь();
	ЦветАктивности                                      = ЦветаСтиля.ЦветАктивности;
	ТекущаяДата                                         = НачалоДня(ТекущаяДата());
	ПустойЦвет                                          = Новый Цвет(0, 0, 0);
	ИспользуетсяУчетВремени                             = ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени");
	ИспользоватьОчередиЗадач                            = ПолучитьФункциональнуюОпцию("ИспользоватьОчередиЗадач");
	ВидДеятельностиДляРаботыСОшибками                   = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	ИндексЭлементаУсловногоОформленияЦель               = -1;
	ИндексЭлементаУсловногоОформленияДостигнуто         = -1;
	НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода = "ТребующиеВыполнения";
	ИнициализироватьНастройкиГруппировокВПодбореОшибок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РезультатыМожноПеренестиВСледующийПериод = Новый СписокЗначений;
	РезультатыМожноПеренестиВСледующийПериод.Добавить(Перечисления.РезультатыВыполненияПланируемыхРабот.НеВыполнялась);
	РезультатыМожноПеренестиВСледующийПериод.Добавить(Перечисления.РезультатыВыполненияПланируемыхРабот.ЧастичноВыполнена);
	
	РаботыНеТребующиеВнимания = Новый СписокЗначений;
	РаботыНеТребующиеВнимания.ЗагрузитьЗначения(Планирование.СтатусыНеактивыхРаботСоСрокомВыполнения());
	
	УсловноеОформление.Элементы.Очистить();
	
#Область СоставлениеПланов
	
	//Выделение участника плана
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановСотрудникРабота.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановПлановыеТрудозатраты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ТипСтрокиПлана");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыСтрокПлана.Сотрудник;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",          Новый Шрифт(,,Истина));
	
	// Выделение цветом участника плана, чьи работы сейчас подбираются
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановСотрудникРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ЭтоТекущийСотрудникПодобра");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылки);
	
	// "Дата статуса" не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановДатаСтатуса.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ТипРаботы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ВидыДеятельности");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Отметка незаполненного плановые трудозатраты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановПлановыеТрудозатраты.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ПлановыеТрудозатраты");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.РедактированиеПлановыхТрудозатратНедоступно");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Недоступность плановые трудозатраты
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановПлановыеТрудозатраты.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.РедактированиеПлановыхТрудозатратНедоступно");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	// Срок выполнения "Просрочено"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановСрокВыполнения.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ТипРаботы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ВидыДеятельности");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// Остаток по часам задачи меньше планируемого в текущем периоде
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановОстаток.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ОстатокЧасовПоЗадачеМеньшеЧемПланируется");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// Остаток не по часам задачи
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановОстаток.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ТипРаботы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ПланированиеКлиентСервер.СписокТиповРаботПоКоторымСогласуютсяТрудозатраты();
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ТипСтрокиПлана");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыСтрокПлана.Сотрудник;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '-'")); 
	
	// Выделение плановых часов сотрудника, если есть отклонение от нормативов
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановПлановыеТрудозатраты.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ТипСтрокиПлана");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыСтрокПлана.Сотрудник;
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЕстьНормативПланируемогоВремени");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ГруппаЭлементовОтбораИли = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		
			ОтборЭлемента = ГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ПлановыеТрудозатраты");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
			ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВыделятьЗапланированноеСотрудникаЕслиБольше");
			
			ОтборЭлемента = ГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ПлановыеТрудозатраты");
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
			ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ВыделятьЗапланированноеСотрудникаЕслиМеньше");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
#КонецОбласти

#Область ПодведениеИтогов

	//Выделение участника плана
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговСотрудникРабота.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговПлановыеТрудозатраты.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговФактическиеТрудозатраты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.ТипСтрокиПлана");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыСтрокПлана.Сотрудник;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",          Новый Шрифт(,,Истина));

	// Отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговРезультат.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.РезультатУказан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ГруппаЭлементовУсловиеУказывать = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовУсловиеУказывать.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаЭлементовУсловиеУказывать.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Цель");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаЭлементовУсловиеУказывать.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.ТипРаботы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ПланированиеКлиентСервер.ТипыРаботСоСтатусамиДатами();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Результат "Выполнено"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговРезультат.Имя);
	
	ГруппаЭлементовОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.РезультатУказан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Результат");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатыВыполненияПланируемыхРабот.Выполнена;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЗеленый);
	
	// Результат "Частично выполнено"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговРезультат.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.РезультатУказан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Результат");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатыВыполненияПланируемыхРабот.ЧастичноВыполнена;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЖелтый);
	
	// Результат "Не выполнено"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговРезультат.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.РезультатУказан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Результат");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатыВыполненияПланируемыхРабот.НеВыполнялась;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// Результат "Отменена"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговРезультат.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.РезультатУказан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Результат");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.РезультатыВыполненияПланируемыхРабот.Отменена;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);
	
	// Результат для "Внеплановых работ"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговРезультат.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.СотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыГруппировокСтрокПлана.ПрочиеРаботы;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Только просмотр для колонок строки "Внеплановые работы"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговПлановыеТрудозатраты.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговКомментарий.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговДостигнуто.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.СотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыГруппировокСтрокПлана.ПрочиеРаботы;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// "Дата статуса" не требуется
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговДатаСтатуса.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.ТипРаботы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ВидыДеятельности");
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.СотрудникРабота");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыГруппировокСтрокПлана.ПрочиеРаботы;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Срок выполнения "Просрочено"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговСрокВыполнения.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.ТипРаботы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Тип("СправочникСсылка.ВидыДеятельности");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// Перенести работу в следующий период
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговПеренестиРаботуВСледующийПериод.Имя);
	
	//ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	//ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговРезультат.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Результат");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = РезультатыМожноПеренестиВСледующийПериод;
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.ТипРаботы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ПланированиеКлиентСервер.ВсеТипыРабот();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

#Область ТехПроектыЗадачи
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТехПроектыЗадачиСрокВыполнения.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТехПроектыЗадачи.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТехПроектыЗадачи.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// Уже добавлено в план
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТехПроектыЗадачиРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТехПроектыЗадачи.ДобавленоВПлан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	
	ПриоритетыОчередиРабот.УстановитьУсловноеЭлементаФормы(УсловноеОформление, "ТехПроектыЗадачиРабота", "ТехПроектыЗадачи.Работа");
	
	// Остаток по часам задачи меньше планируемого в текущем периоде
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТехПроектыЗадачиТекстДанныеЧасовПоЗадаче.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТехПроектыЗадачи.ОстатокЧасовПоЗадачеМеньшеЧемПланируется");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
#КонецОбласти

#Область ПодборПоРодительскомуПлану
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыРодительскогоПланаСрокВыполнения.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РаботыРодительскогоПлана.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РаботыРодительскогоПлана.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// Уже добавлено в план
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыРодительскогоПланаРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РаботыРодительскогоПлана.ДобавленоВПлан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	
	// Остаток по часам задачи меньше планируемого в текущем периоде
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыРодительскогоПланаТекстДанныеЧасовПоЗадаче.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РаботыРодительскогоПлана.ОстатокЧасовПоЗадачеМеньшеЧемПланируется");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	// В текущем рабочем плане запланировано мешьше чем в плане занятости
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыРодительскогоПланаЗапланировано.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РаботыРодительскогоПлана.ВТекущемПланеМеньшеЧемВПланеЗанятости");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный); 
	
	// Этап задачи не по шаблону
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыРодительскогоПланаРабота.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РаботыРодительскогоПлана.Работа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ЗадачиПроцесса.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Задачи не по шаблону'"));
	
	// Этап задачи не по шаблону
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РаботыРодительскогоПланаРабота.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РаботыРодительскогоПлана.Работа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыГруппировокСтрокПлана.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Задачи по ошибкам'"));
	
#КонецОбласти

#Область Ошибки

	// Уже добавлено в план
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ошибки.ДобавленоВПлан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	
	// Срок выполнения - просрочено
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОшибкиСрокОтработки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ошибки.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
#КонецОбласти

#Область НевыпоненоПредыдущиеПланы

// Уже добавлено в план
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НевыпоненоПредыдущиеПланыРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НевыпоненоПредыдущиеПланы.ДобавленоВПлан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	
// Срок выполнения "Просрочено"
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НевыпоненоПредыдущиеПланыСрокВыполнения.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НевыпоненоПредыдущиеПланы.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НевыпоненоПредыдущиеПланы.СрокВыполнения");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
#КонецОбласти

#Область ВидыДеятельности
	
	// Уже добавлено в план
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиРабота.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ДобавленоВПлан");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",  ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ОпределитьВидПланаПользователяПоУмолчанию()

	ВидПлана        = Справочники.ВидыПланов.ВидПланаПользователяПоУмолчанию(ТекущийПользователь, Перечисления.ТипыПланов.Рабочий);
	ТекущийВидПлана = ВидПлана;
	
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		ПриИзмененииВидаПланаНаСервере(Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	Элементы = Форма.Элементы;
	
	ВидПланаЗаполнен                     = ЗначениеЗаполнено(Форма.ВидПлана);
	ТекущийПользовательВладелецВидаПлана = ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(Форма.ВладельцыПлана, Форма.ТекущийПользователь);
	ЕстьРодительскийВидПлана             = ЗначениеЗаполнено(Форма.РодительскийВидПлана);
	
	Элементы.СтраницыФормы.ТолькоПросмотр                   = Не ВидПланаЗаполнен;
	Элементы.СтраницыПодборСоставляемыеПланы.ТолькоПросмотр = Не ВидПланаЗаполнен;
	
	Элементы.ПредыдущаяВерсияПодведениеИтогов.Доступность  = Форма.ЕстьПредыдущийЗафиксированныйПлан;
	Элементы.СледующаяВерсияПодведениеИтогов.Доступность   = Форма.ЕстьСледующийЗафиксированныйПлан;
	Элементы.ПредыдущаяВерсияСоставлениеПланов.Доступность = Форма.ЕстьПредыдущийСоставляемыйПлан;
	Элементы.СледующаяВерсияСоставлениеПланов.Доступность  = Форма.ЕстьСледующийСоставляемыеПлан;
	
	Элементы.СтраницаПодведениеИтогов.Видимость = Форма.ЕстьЗафиксированныеПланы;
	
	Элементы.ЗафиксироватьПлан.Доступность = ТекущийПользовательВладелецВидаПлана;
	
	Элементы.ДекорацияСостояниеСоставлениеПлана.Видимость  = ВидПланаЗаполнен;
	Элементы.ПредыдущаяВерсияСоставлениеПланов.Видимость   = ВидПланаЗаполнен;
	Элементы.СледующаяВерсияСоставлениеПланов.Видимость    = ВидПланаЗаполнен;
	Элементы.ПредыдущаяВерсияПодведениеИтогов.Видимость    = ВидПланаЗаполнен;
	Элементы.ДекорацияСостояниеПодведениеИтогов.Видимость  = ВидПланаЗаполнен;
	Элементы.СледующаяВерсияПодведениеИтогов.Видимость     = ВидПланаЗаполнен;
	
	Элементы.ДекорацияОчередьЗадачи.Видимость         = Форма.ИспользоватьОчередиЗадач;
	Элементы.ДекорацияПояснениеОчередиЗадач.Видимость = Форма.ИспользоватьОчередиЗадач;
	
	Элементы.ПодменюУстановитьРезультат.Доступность = ВидПланаЗаполнен;
	Элементы.ОбновитьПодведениеИтогов.Доступность   = ВидПланаЗаполнен;
	
	ОтображатьОстатокПоПланируемымРаботам = Форма.ИспользуетсяУчетВремени 
	                                        И ЗначениеЗаполнено(Форма.ВидСогласуемогоРесурсаПлановыхРабот);
	
	Элементы.СоставлениеПлановГруппаОстаток.Видимость                = ОтображатьОстатокПоПланируемымРаботам;
	Элементы.ПодведениеИтоговГруппаФактическиеТрудозатраты.Видимость = Форма.ИспользуетсяУчетВремени;
	Элементы.ЗаполнитьВидыДеятельностиПоСтатистике.Видимость         = Форма.ИспользуетсяУчетВремени;
	
	ВидимостьКомментария = ТекущийПользовательВладелецВидаПлана;
	Элементы.ПодведениеИтоговКомментарий.Видимость  = ВидимостьКомментария;
	Элементы.СоставлениеПлановКомментарий.Видимость = ВидимостьКомментария;
	
	Элементы.ОтменитьФиксациюПлана.Видимость =  ТекущийПользовательВладелецВидаПлана
	                                            И ЗначениеЗаполнено(Форма.ИдентификаторЗафиксированногоПлана);
	
	Элементы.ГруппаНастройки.Видимость = Форма.ЕстьНормативПланируемогоВремени;
	
	Элементы.ПоказыватьНезапланированныеТехническиеПроекты.ТолькоПросмотр      = Форма.СкрыватьНеАктивныеПроекты;
	Элементы.ПоказыватьОтмененныеИЗавершенныеТехническиеПроекты.ТолькоПросмотр = Форма.СкрыватьНеАктивныеПроекты; 
	
	Элементы.СтраницаПоРодительскомуПлану.Видимость = ЕстьРодительскийВидПлана 
	                                                  И Форма.РаботыРодительскогоПлана.ПолучитьЭлементы().Количество() > 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененияВидаПлана

&НаСервере
Процедура ОчиститьВсеТаблицыФормы()
	
	ПодведениеИтогов.ПолучитьЭлементы().Очистить();
	СоставлениеПланов.ПолучитьЭлементы().Очистить();
	Ошибки.ПолучитьЭлементы().Очистить();
	ТехПроектыЗадачи.ПолучитьЭлементы().Очистить();
	НевыпоненоПредыдущиеПланы.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеПлановВФорме(Форма)
	
	Форма.ИдентификаторЗафиксированногоПлана = 0;
	Форма.ИдентификаторСоставляемогоПлана    = 0;
	Форма.ЕстьЗафиксированныеПланы           = Ложь;
	Форма.ЕстьПредыдущийЗафиксированныйПлан  = Ложь;
	Форма.ЕстьПредыдущийСоставляемыйПлан     = Ложь;
	Форма.ЕстьСледующийЗафиксированныйПлан   = Ложь;
	Форма.НачалоПериодаЗафиксированногоПлана = Дата(1,1,1);
	Форма.НачалоПериодаСоставляемогоПлана    = Дата(1,1,1);
	Форма.ТекущийСотрудникСоставлениеПланов  = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВидаПлана()

	ДанныеВидаПлана = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
	
	НаименованиеВидаПлана               = ДанныеВидаПлана.Наименование;
	ВидСогласуемогоРесурсаПлановыхРабот = ДанныеВидаПлана.ВидСогласуемогоРесурсаПлановыхРабот;
	ПороговоеЗначениеПрочихРабот        = ДанныеВидаПлана.ПороговоеЗначениеПрочихРабот;
	РодительскийВидПлана                = ДанныеВидаПлана.РодительскийВидПлана;
	ТипРодительскогоПлана               = ДанныеВидаПлана.ТипРодительскогоПлана;
	
	ОбработатьНастройкиОформления(ДанныеВидаПлана.НастройкиОформленияНезаполненнаяЦель.Получить(),
	                              ДанныеВидаПлана.НастройкиОформленияНезаполненоЧтоДостигнуто.Получить());
	
	ПланированиеКлиентСервер.УстановитьЗначенияПараметровРасчетаПоНормативам(ЭтотОбъект,
	                                                                         ДанныеВидаПлана.НормативПланируемогоВремени,
	                                                                         ДанныеВидаПлана.ПорогОтклоненияОтНормативаПланируемогоВремени,
	                                                                         ИнвертироватьОтображениеЗапланированоПоСотруднику);
	
	НастройкиПланирования.Загрузить(ДанныеВидаПлана.ВсеНастройкиПланирования);
	
	УчастникиВидаПлана.ЗагрузитьЗначения(ДанныеВидаПлана.Участники);
	ВладельцыПлана.ЗагрузитьЗначения(ДанныеВидаПлана.ВладельцыПлана);
	
	Если ПланированиеКлиентСервер.ТекущийПользовательВладелецПлана(ВладельцыПлана, ТекущийПользователь)
		Или УчастникиВидаПлана.НайтиПоЗначению(ТекущийПользователь) = Неопределено Тогда
		
		Для Каждого ЭлементСписка Из УчастникиВидаПлана Цикл
			ЭлементСписка.Пометка = Истина;
		КонецЦикла;
		
	Иначе
		
		НайденныйЭлемент = УчастникиВидаПлана.НайтиПоЗначению(ТекущийПользователь);
		Если НайденныйЭлемент <> Неопределено Тогда
			НайденныйЭлемент.Пометка = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьНастройкиОформления(СохраненныеНастройкиНезаполненнаяЦель, СохраненныеНастройкиНезаполненоЧтоДостигнуто)
	
	Если СохраненныеНастройкиНезаполненнаяЦель = Неопределено 
		И СохраненныеНастройкиНезаполненоЧтоДостигнуто = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СохраненныеНастройкиНезаполненнаяЦель <> Неопределено Тогда
	
		НастройкиНезаполненнаяЦель = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		ЗаполнитьЗначенияСвойств(НастройкиНезаполненнаяЦель, СохраненныеНастройкиНезаполненнаяЦель);
		
		Если ИспользуетсяУчетВремени
			И НастройкиНезаполненнаяЦель <> Неопределено
			И НастройкиНезаполненнаяЦель.Использовать Тогда
			
			ИспользоватьОформлениеЦель = Истина;
			
			ЦветТекстаЦель  = НастройкиНезаполненнаяЦель.ЦветТекста;
			ТекстЦель       = НастройкиНезаполненнаяЦель.Текст;
			ЦветФонаЦель    = НастройкиНезаполненнаяЦель.ЦветФона;
			АвтоотметкаЦель = НастройкиНезаполненнаяЦель.АвтоотметкаНезаполненного;
			
		Иначе
			
			ИспользоватьОформлениеЦель = Ложь;
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Если СохраненныеНастройкиНезаполненоЧтоДостигнуто <> Неопределено Тогда
		
		НастройкиНезаполненоЧтоДостигнуто = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		ЗаполнитьЗначенияСвойств(НастройкиНезаполненоЧтоДостигнуто, СохраненныеНастройкиНезаполненоЧтоДостигнуто);
		
		Если НастройкиНезаполненоЧтоДостигнуто <> Неопределено
			И НастройкиНезаполненоЧтоДостигнуто.Использовать Тогда
			
			ИспользоватьОформлениеЧтоДостигнуто = Истина;
			
			ЦветТекстаЧтоДостигнуто  = НастройкиНезаполненоЧтоДостигнуто.ЦветТекста;
			ТекстЧтоДостигнуто       = НастройкиНезаполненоЧтоДостигнуто.Текст;
			ЦветФонаЧтоДостигнуто    = НастройкиНезаполненоЧтоДостигнуто.ЦветФона;
			АвтоотметкаЧтоДостигнуто = НастройкиНезаполненоЧтоДостигнуто.АвтоотметкаНезаполненного;
			
		Иначе
			
			ИспользоватьОформлениеЧтоДостигнуто = Ложь;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ИзменитьУсловноеОформлениеПоНастройкамВидаПлана();

КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеВидаПлана()
	
	ПодразделенияСотрудники = Планирование.НовыйДеревоПодразделенияСотрудники();
	Планирование.СформироватьПредставлениеОтображаемыхУчастниковПланаНаСервере(ЭтотОбъект, "ДекорацияСостояниеОтображенияВидаПлана", ПодразделенияСотрудники);
	
	МассивСтрокПредставлениеПлана = Новый Массив;
	
	Если ЗначениеЗаполнено(ВидПлана) Тогда
		
		Если ЗначениеЗаполнено(РодительскийВидПлана) Тогда
			
			Если ТипРодительскогоПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.Занятости") Тогда
				
				СтрокаНаОсновании = НСтр("ru = 'На основании плана занятости'");
				СтрокаРодительскийПлна = СтрШаблон(НСтр("ru = '%1: <a href = ""%2"">%3</a>'"), СтрокаНаОсновании, "ОткрытьРодительскийВидПлана" , РодительскийВидПлана);
				
			Иначе
				
				СтрокаНаОсновании = НСтр("ru = 'На основании рабочего плана'");
				СтрокаРодительскийПлна = СтрШаблон(НСтр("ru = '%1: <a href = ""%2"">%3</a>'"), СтрокаНаОсновании, "ОткрытьРодительскийВидПлана" , РодительскийВидПлана);
				
			КонецЕсли;
			
			СтрокаРодительскийПлан = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(СтрокаРодительскийПлна);
			
		Иначе
			СтрокаРодительскийПлан = "";
		КонецЕсли;
		
	Иначе
		
		СтрокаРодительскийПлан = "";
		
	КонецЕсли;
	
	Элементы.ДекорацияРодительскийПлан.Заголовок = СтрокаРодительскийПлан;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПланов(ОпределятьВыводимыеПланы)
	
	Если ОпределятьВыводимыеПланы Тогда
		
		ОчиститьДанныеПлановВФорме(ЭтотОбъект);
		
		ДанныеПланаТекущегоПериода = Справочники.ВидыПланов.ПланПериода(ВидПлана, ТекущаяДата);
		
		Если ДанныеПланаТекущегоПериода.ИдентификаторПлана = Неопределено Тогда
			ДанныеПланаТекущегоПериода = Справочники.ВидыПланов.СледующийСоставляемыйПлан(ВидПлана, ТекущаяДата, Истина);
		КонецЕсли;
		
		Если ДанныеПланаТекущегоПериода.ИдентификаторПлана = Неопределено Тогда
			Справочники.ВидыПланов.СоздатьПланыПоВидуПланаЕслиНеобходимо(ВидПлана, ТекущаяДата, 1);
			ДанныеПланаТекущегоПериода = Справочники.ВидыПланов.СледующийСоставляемыйПлан(ВидПлана, ТекущаяДата, Истина)
		КонецЕсли;
		
		Если ДанныеПланаТекущегоПериода.ИдентификаторПлана = Неопределено Тогда
			
 			Возврат;
			
		КонецЕсли;
		
		Если ДанныеПланаТекущегоПериода.Зафиксирован Тогда
			
			НачалоПериодаЗафиксированногоПлана = ДанныеПланаТекущегоПериода.НачалоПериода;
			КонецПериодаЗафиксированогоПлана   = ДанныеПланаТекущегоПериода.КонецПериода;
			ИдентификаторЗафиксированногоПлана = ДанныеПланаТекущегоПериода.ИдентификаторПлана;
			
			ЕстьЗафиксированныеПланы = Истина;
			
			ДанныеСоставляемогоПлана = Справочники.ВидыПланов.СледующийСоставляемыйПлан(ВидПлана, ТекущаяДата, Истина);
			
			НачалоПериодаСоставляемогоПлана = ДанныеСоставляемогоПлана.НачалоПериода;
			КонецПериодаСоставляемогоПлана  = ДанныеСоставляемогоПлана.КонецПериода;
			ИдентификаторСоставляемогоПлана = ДанныеСоставляемогоПлана.ИдентификаторПлана;
			
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПодведениеИтогов;
			
		Иначе
			
			НачалоПериодаСоставляемогоПлана = ДанныеПланаТекущегоПериода.НачалоПериода;
			КонецПериодаСоставляемогоПлана  = ДанныеПланаТекущегоПериода.КонецПериода;
			ИдентификаторСоставляемогоПлана = ДанныеПланаТекущегоПериода.ИдентификаторПлана;
			
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСоставлениеПлана;
			
			ДанныеЗафиксированногоПлана = Справочники.ВидыПланов.ПредыдущийЗафиксированныйПлан(ВидПлана, Макс(ТекущаяДата, НачалоПериодаСоставляемогоПлана));
			
			Если ДанныеЗафиксированногоПлана <> Неопределено Тогда
				
				ЕстьЗафиксированныеПланы = Истина;
				
				НачалоПериодаЗафиксированногоПлана = ДанныеЗафиксированногоПлана.НачалоПериода;
				КонецПериодаЗафиксированогоПлана   = ДанныеЗафиксированногоПлана.КонецПериода;
				ИдентификаторЗафиксированногоПлана = ДанныеЗафиксированногоПлана.ИдентификаторПлана;
				
			Иначе
				
				ЕстьЗафиксированныеПланы           = Ложь;
				НачалоПериодаЗафиксированногоПлана = Дата(1, 1, 1);
				КонецПериодаЗафиксированогоПлана   = Дата(1, 1, 1);
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ОпределитьНаличиеСледующихПредшествующихПланов();
	
	ЗаполнитьДанныеСоставляемогоПлана();
	ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов();
	
	Если ЕстьЗафиксированныеПланы Тогда
		ЗаполнитьДанныеЗафиксированногоПлана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставленияПериодов(Форма)

#Область СоставлениеПланов

	Если Не ЗначениеЗаполнено(Форма.ИдентификаторСоставляемогоПлана) Тогда
	
		ТекстДанныеСоставляемогоПлана = НСтр("ru = 'План не выбран'");
		
		ТекстЗаголововкаСтраницы = НСтр("ru = 'Составление планов'");
	
	Иначе
	
		ТекстДанныеСоставляемогоПлана = СтрШаблон(НСтр("ru = 'План за период с %1 по %2'"), 
		                                          Формат(Форма.НачалоПериодаСоставляемогоПлана, "ДЛФ=D"),
		                                          Формат(Форма.КонецПериодаСоставляемогоПлана, "ДЛФ=D"));
		
		ТекстЗаголововкаСтраницы = СтрШаблон(НСтр("ru = 'Составление планов (%1 - %2)'"),
		                                     Формат(Форма.НачалоПериодаСоставляемогоПлана, "ДЛФ=D"),
		                                     Формат(Форма.КонецПериодаСоставляемогоПлана, "ДЛФ=D"));
	КонецЕсли;
	
	ТекстПредставленияСоставлениеПланов = СтрШаблон(НСтр("ru = '%1 <a href = ""%2"">изменить</a>'"), 
	                                                ТекстДанныеСоставляемогоПлана, 
	                                                "ИзменитьСоставляемыйПлан");
	
	Форма.Элементы.ДекорацияСостояниеСоставлениеПлана.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПредставленияСоставлениеПланов);
	
	Форма.Элементы.СтраницаСоставлениеПлана.Заголовок = ТекстЗаголововкаСтраницы;
	
#КонецОбласти

#Область ПодведениеИтогов

	Если Не ЗначениеЗаполнено(Форма.ИдентификаторЗафиксированногоПлана) Тогда
		
		ТекстДанныеЗафиксированногоПлана = НСтр("ru = 'План не выбран'");
		
		ТекстЗаголововкаСтраницы = НСтр("ru = 'Подведение итогов'");
		
	Иначе
		
		ТекстДанныеЗафиксированногоПлана = СтрШаблон(НСтр("ru = 'План за период с %1 по %2'"), 
		                                             Формат(Форма.НачалоПериодаЗафиксированногоПлана, "ДЛФ=D"),
		                                             Формат(Форма.КонецПериодаЗафиксированогоПлана, "ДЛФ=D"));
		
		ТекстЗаголововкаСтраницы = СтрШаблон(НСтр("ru = 'Подведение итогов (%1 - %2)'"),
		                                     Формат(Форма.НачалоПериодаЗафиксированногоПлана, "ДЛФ=D"),
		                                     Формат(Форма.КонецПериодаЗафиксированогоПлана, "ДЛФ=D"));
		
	КонецЕсли;
	
	ТекстПредставленияЗафиксированногоПлана = СтрШаблон(НСтр("ru = '%1 <a href = ""%2"">изменить</a>'"),
	                                                    ТекстДанныеЗафиксированногоПлана, 
	                                                    "ИзменитьЗафиксированныйПлан");
	
	Форма.Элементы.ДекорацияСостояниеПодведениеИтогов.Заголовок = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПредставленияЗафиксированногоПлана);
	
	
	
	Форма.Элементы.СтраницаПодведениеИтогов.Заголовок = ТекстЗаголововкаСтраницы;
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Функция ДанныеУчастниковВидаПланаДляЗапроса()
	
	ДанныеУчастников = Новый Структура;
	ДанныеУчастников.Вставить("ЕстьОтбор",       Ложь);
	ДанныеУчастников.Вставить("ОтборУчастников", Новый Массив);
	
	Для Каждого ЭлементСписка Из УчастникиВидаПлана Цикл
		Если ЭлементСписка.Пометка Тогда
			ДанныеУчастников.ОтборУчастников.Добавить(ЭлементСписка.Значение);
		Иначе
			ДанныеУчастников.ЕстьОтбор = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДанныеУчастников;
	
КонецФункции

&НаСервере
Процедура ИзменитьУсловноеОформлениеПоНастройкамВидаПлана()
	
	РезультатыНеВыполнено = Новый СписокЗначений;
	РезультатыНеВыполнено.Добавить(Перечисления.РезультатыВыполненияПланируемыхРабот.НеВыполнялась);
	РезультатыНеВыполнено.Добавить(Перечисления.РезультатыВыполненияПланируемыхРабот.Отменена);
	РезультатыНеВыполнено.Добавить(Перечисления.РезультатыВыполненияПланируемыхРабот.ЧастичноВыполнена);
	
	ОчиститьУсловноеОформлениеПоВидуПлана();
	
	Если ИспользоватьОформлениеЧтоДостигнуто Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ИндексЭлементаУсловногоОформленияДостигнуто = УсловноеОформление.Элементы.Индекс(Элемент);
		Элемент.Представление = НСтр("ru = 'Оформление ""Достигнуто"" по виду плана'");
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодведениеИтоговДостигнуто.Имя);
		
		ГруппаЭлементовОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Результат");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = РезультатыНеВыполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодведениеИтогов.Достигнуто");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		Если Не ПустаяСтрока(ТекстЧтоДостигнуто) Тогда
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстЧтоДостигнуто);
			
			Если ЦветТекстаЧтоДостигнуто <> ПустойЦвет Тогда
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаЧтоДостигнуто);
			КонецЕСли;
		КонецЕсли;
		
		Если ЦветФонаЧтоДостигнуто <> ПустойЦвет Тогда
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаЧтоДостигнуто);
			
		КонецЕсли;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", АвтоотметкаЧтоДостигнуто);
		
	КонецЕсли;
	
	Если ИспользоватьОформлениеЦель Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ИндексЭлементаУсловногоОформленияЦель = УсловноеОформление.Элементы.Индекс(Элемент);
		Элемент.Представление = НСтр("ru = 'Оформление ""Цель"" по виду плана'");
	
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СоставлениеПлановЦель.Имя);
		
		ГруппаЭлементовОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
		ОтборЭлемента = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ЗапланированоМеньшеЧемОстатокЧасов");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗапланированоМеньшеЧемОстатокЧасов.Цель");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.ПлановыеТрудозатраты");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СоставлениеПланов.РедактированиеПлановыхТрудозатратНедоступно");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

			
		Если Не ПустаяСтрока(ТекстЦель) Тогда
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстЦель);
			
			Если ЦветТекстаЦель <> ПустойЦвет Тогда
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекстаЦель);
			КонецЕСли;
		КонецЕсли;
		
		Если ЦветФонаЦель <> ПустойЦвет Тогда
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФонаЦель);
			
		КонецЕсли;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", АвтоотметкаЦель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьУсловноеОформлениеПоВидуПлана()

	Если ИндексЭлементаУсловногоОформленияЦель <> - 1 Тогда
		
		ЭлементУсловноеОформление = УсловноеОформление.Элементы.Получить(ИндексЭлементаУсловногоОформленияЦель);
		Если ЭлементУсловноеОформление <> Неопределено Тогда
			УсловноеОформление.Элементы.Удалить(ИндексЭлементаУсловногоОформленияЦель);
		КонецЕсли;
		
		ИндексЭлементаУсловногоОформленияЦель = - 1;
		
	КонецЕсли;
	
	Если ИндексЭлементаУсловногоОформленияДостигнуто <> - 1 Тогда
		
		ЭлементУсловноеОформление = УсловноеОформление.Элементы.Получить(ИндексЭлементаУсловногоОформленияДостигнуто);
		Если ЭлементУсловноеОформление <> Неопределено Тогда
			УсловноеОформление.Элементы.Удалить(ИндексЭлементаУсловногоОформленияДостигнуто);
		КонецЕсли;
		
		ИндексЭлементаУсловногоОформленияДостигнуто = - 1;
		
	КонецЕсли;

КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеДереваСоставлениеПланов

&НаСервере
Процедура ЗаполнитьДанныеСоставляемогоПлана()
	
	СоставлениеПланов.ПолучитьЭлементы().Очистить();
	ТекущийСотрудникСоставлениеПланов = Справочники.Пользователи.ПустаяСсылка();
	
	ДанныеОтбораУчастников = ДанныеУчастниковВидаПланаДляЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыПлановУчастникиПланирования.Участник    КАК Участник,
	|	ВидыПлановУчастникиПланирования.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ УчастникиПланированияПоВидуПлана
	|ИЗ
	|	Справочник.ВидыПланов.УчастникиПланирования КАК ВидыПлановУчастникиПланирования
	|ГДЕ
	|	ВидыПлановУчастникиПланирования.Ссылка = &ВидПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиПлана.Сотрудник КАК Участник
	|ПОМЕСТИТЬ УчастникиПланаНетВВидеПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчастникиПланированияПоВидуПлана КАК УчастникиПланирования
	|		ПО ЗаписиПлана.Сотрудник = УчастникиПланирования.Участник
	|ГДЕ
	|	УчастникиПланирования.Участник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчастникиПланирования.Участник    КАК Участник,
	|	ИСТИНА                            КАК ЕстьВВидеПлана,
	|	УчастникиПланирования.НомерСтроки КАК НомерСтрокиВидаПлана
	|ПОМЕСТИТЬ ВсеУчастникиПлана
	|ИЗ
	|	УчастникиПланированияПоВидуПлана КАК УчастникиПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчастникиПланаНетВВидеПлана.Участник,
	|	ЛОЖЬ,
	|	9999
	|ИЗ
	|	УчастникиПланаНетВВидеПлана КАК УчастникиПланаНетВВидеПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиПлана.Сотрудник               КАК Участник,
	|	ЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЗаписиПлана.Цель                    КАК Цель,
	|	ЗаписиПлана.Достигнуто              КАК Достигнуто,
	|	ЗаписиПлана.ТипСтрокиПлана          КАК ТипСтрокиПлана,
	|	ЗаписиПлана.Группировка             КАК Группировка,
	|	ЗаписиПлана.Комментарий             КАК Комментарий,
	|	ЗаписиПлана.ПеренестиВСледующийПлан КАК ПеренестиВСледующийПлан
	|ПОМЕСТИТЬ ЗаписиПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &УстановленОтборПоСотрудникам
	|			ТОГДА ЗаписиПлана.Сотрудник В (&ОтборУчастниковПлана)
	|		ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеУчастникиПлана.Участник          КАК Участник,
	|	ВсеУчастникиПлана.ЕстьВВидеПлана    КАК УчастникЕстьВВидеПлана,
	|	ЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЗаписиПлана.Цель                    КАК Цель,
	|	ЗаписиПлана.Достигнуто              КАК Достигнуто,
	|	ЗаписиПлана.ТипСтрокиПлана          КАК ТипСтрокиПлана,
	|	ЗаписиПлана.Группировка             КАК Группировка,
	|	ЗаписиПлана.Комментарий             КАК Комментарий,
	|	ЗаписиПлана.ПеренестиВСледующийПлан КАК ПеренестиВСледующийПлан,
	|	ВЫБОР
	|		КОГДА ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Сотрудник)
	|			ТОГДА 0
	|		КОГДА ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Группировка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ЗначениеУпорядочиванияПоТипуСтроки
	|ИЗ
	|	ВсеУчастникиПлана КАК ВсеУчастникиПлана
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписиПлана КАК ЗаписиПлана
	|		ПО (ЗаписиПлана.Участник = ВсеУчастникиПлана.Участник)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &УстановленОтборПоСотрудникам
	|				ТОГДА ВсеУчастникиПлана.Участник В (&ОтборУчастниковПлана)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеУчастникиПлана.НомерСтрокиВидаПлана,
	|	ЗначениеУпорядочиванияПоТипуСтроки
	|ИТОГИ ПО
	|	Участник,
	|	Группировка";
	
	Запрос.УстановитьПараметр("ВидПлана",                     ВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоПериодаСоставляемогоПлана);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецПериодаСоставляемогоПлана);
	Запрос.УстановитьПараметр("УстановленОтборПоСотрудникам", ДанныеОтбораУчастников.ЕстьОтбор);
	Запрос.УстановитьПараметр("ОтборУчастниковПлана",         ДанныеОтбораУчастников.ОтборУчастников);
	
	ВыборкаУчастники = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеРабот = Новый Соответствие;
	ЕстьРаботыДляКоторыхТребуетсяПолучениеОстатка = Ложь;
	
	Пока ВыборкаУчастники.Следующий() Цикл
		
		СтрокаУчастник = СоставлениеПланов.ПолучитьЭлементы().Добавить();
		СтрокаУчастник.СотрудникРабота                      = ВыборкаУчастники.Участник;
		СтрокаУчастник.ТипСтрокиПлана                       = ?(ЗначениеЗаполнено(ВыборкаУчастники.ТипСтрокиПлана), 
		                                                        ВыборкаУчастники.ТипСтрокиПлана,
		                                                        Перечисления.ТипыСтрокПлана.Сотрудник);
		СтрокаУчастник.ОстатокЗапланированныхЧасовНеПолучен = Ложь;
		
		Если Не ЗначениеЗаполнено(ТекущийСотрудникСоставлениеПланов) Тогда
			ТекущийСотрудникСоставлениеПланов = ВыборкаУчастники.Участник;
		КонецЕсли;
		
		ВыборкаГруппировки = ВыборкаУчастники.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГруппировки.Следующий() Цикл
			
			ЗаполнятьСтрокуГруппировки = Истина;
			Если ВыборкаГруппировки.Группировка = Неопределено
				Или ВыборкаГруппировки.Группировка = NULL
				Или Не ЗначениеЗаполнено(ВыборкаГруппировки.Группировка)Тогда
				ЗаполнятьСтрокуГруппировки = Ложь;
			КонецЕсли;
			
			Если ЗаполнятьСтрокуГруппировки Тогда
				СтрокаГруппировка = СтрокаУчастник.ПолучитьЭлементы().Добавить();
				СтрокаГруппировка.СотрудникРабота       = ВыборкаГруппировки.Группировка;
				СтрокаГруппировка.ТипСтрокиПлана        = Перечисления.ТипыСтрокПлана.Группировка;
			КонецЕсли;
			
			ВыборкаРаботы = ВыборкаГруппировки.Выбрать();
			
			Пока ВыборкаРаботы.Следующий() Цикл
				
				СтрокаУчастник.УчастникЕстьВВидеПлана = ВыборкаРаботы.УчастникЕстьВВидеПлана;
				
				Если ВыборкаРаботы.ТипСтрокиПлана = Перечисления.ТипыСтрокПлана.Сотрудник Тогда
					
					СтрокаКИзменению = СтрокаУчастник;
					
				ИначеЕсли ВыборкаРаботы.ТипСтрокиПлана = Перечисления.ТипыСтрокПлана.Группировка Тогда
					
					СтрокаКИзменению = СтрокаГруппировка;
					Если ТипЗнч(СтрокаКИзменению.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
						СтрокаКИзменению.ТипРаботы = ТипЗнч(СтрокаКИзменению.СотрудникРабота);
					КонецЕсли;
					
				ИначеЕсли ВыборкаРаботы.ТипСтрокиПлана = Перечисления.ТипыСтрокПлана.Работа Тогда
					
					СтрокаКИзменению = СтрокаГруппировка.ПолучитьЭлементы().Добавить();
					СтрокаКИзменению.СотрудникРабота = ВыборкаРаботы.Работа;
					СтрокаКИзменению.ТипРаботы       = ТипЗнч(ВыборкаРаботы.Работа);
					СтрокаКИзменению.ТипСтрокиПлана  = Перечисления.ТипыСтрокПлана.Работа;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаКИзменению.Цель                  = ВыборкаРаботы.Цель;
				СтрокаКИзменению.ПлановыеТрудозатраты  = ВыборкаРаботы.ПланируемыеТрудозатраты;
				СтрокаКИзменению.Комментарий           = ВыборкаРаботы.Комментарий;
				
				ОпределитьНеобходимостьПолученияДанныеОстатковЗапланированнойРаботы(СтрокаКИзменению);
				Если СтрокаКИзменению.ОстатокЗапланированныхЧасовНеПолучен Тогда
					ЕстьРаботыДляКоторыхТребуетсяПолучениеОстатка = Истина;
				КонецЕсли;
				
				ДобавитьРаботуВСоответствиеСтрокДерева(СоответствиеРабот, СтрокаКИзменению);
				
			КонецЦикла;
			
			Если ЗаполнятьСтрокуГруппировки Тогда
				
				Если СтрокаГруппировка.ПолучитьЭлементы().Количество() = 0 
					И СтрокаГруппировка.СотрудникРабота = Перечисления.ТипыГруппировокСтрокПлана.РаботаСОшибками Тогда
					
					СтрокаГруппировка.СотрудникРабота = ВидДеятельностиДляРаботыСОшибками;
					
				КонецЕсли;
				
				ОпределитьНеобходимостьПодчиненныхРаботГруппировкаТехПроект(СтрокаГруппировка);
			
			КонецЕсли;
			
		КонецЦикла;
		
		ИдентификаторыПеренесенныхСтрок = Новый Массив;
		ОпределитьПрочиеРаботыПослеИзмененияРаботСотрудника(ЭтотОбъект, СтрокаУчастник, ИдентификаторыПеренесенныхСтрок);
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаУчастник,
		                                                                                 "ПлановыеТрудозатраты", 
		                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику), 
		                                                                                 НормативПланируемогоВремени);
	
	КонецЦикла;
	
	Если СоответствиеРабот.Количество() > 0 Тогда
		ДозаполнитьДанныеРаботВДереве(СоставлениеПланов , СоответствиеРабот, Ложь);
	КонецЕсли;
	
	Если ЕстьРаботыДляКоторыхТребуетсяПолучениеОстатка Тогда
		ТребуетсяПолучениеОстатковПланируемыхРабот = Истина;
	КонецЕсли;
	
	ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьПрочиеРаботыПослеИзмененияРаботСотрудника(Форма, СтрокаСотрудник, ИдентификаторыПеренесенныхСтрок)
	
	СтрокиГруппировки            = СтрокиГруппировкиДляОпределенияПрочихРабот(СтрокаСотрудник);
	ПеренестиВПрочиеРаботы       = Новый Массив;
	ПеренестиИзПрочихРабот       = Новый Массив;
	ПороговоеЗначениеПрочихРабот = Форма.ПороговоеЗначениеПрочихРабот;
	ИдентификаторыСтрокПересчет  = Новый Массив;
	
	Для Каждого СтрокаГруппировка Из СтрокиГруппировки Цикл
		
		Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
		
			Если СтрокаГруппировка.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ВидыДеятельности")
				Или СтрокаГруппировка.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.НеПроектныеЗадачи") Тогда
				
				Если СтрокаРабота.ПлановыеТрудозатраты <> 0
					И Не СтрокаРабота.ПлановыеТрудозатраты > ПороговоеЗначениеПрочихРабот Тогда
					ПеренестиВПрочиеРаботы.Добавить(СтрокаРабота);
				КонецЕсли;
				
			ИначеЕсли СтрокаГруппировка.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПрочиеРаботы") Тогда
				
				Если СтрокаРабота.ПлановыеТрудозатраты > ПороговоеЗначениеПрочихРабот Тогда
					ПеренестиИзПрочихРабот.Добавить(СтрокаРабота);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	ИзмененныеСтроки = Новый Массив;
	УдаляемыеСтроки  = Новый Массив;
	
	Для Каждого СтрокаКПереносу Из ПеренестиИзПрочихРабот Цикл
		
		ПеренестиРаботуПриОпределенииПрочихРабот(Форма,
		                                         СтрокаСотрудник,
		                                         СтрокаКПереносу,
		                                         ИзмененныеСтроки,
		                                         УдаляемыеСтроки,
		                                         ИдентификаторыСтрокПересчет,
		                                         ИдентификаторыПеренесенныхСтрок,
		                                         Ложь);
		
	КонецЦикла;
	
	Для Каждого СтрокаКПереносу Из ПеренестиВПрочиеРаботы Цикл
		
		ПеренестиРаботуПриОпределенииПрочихРабот(Форма,
		                                         СтрокаСотрудник,
		                                         СтрокаКПереносу,
		                                         ИзмененныеСтроки,
		                                         УдаляемыеСтроки,
		                                         ИдентификаторыСтрокПересчет,
		                                         ИдентификаторыПеренесенныхСтрок,
		                                         Истина);
		
	КонецЦикла;
	
	ПланированиеКлиентСервер.ОбработатьУдалениеИзДереваМассиваСтрок(УдаляемыеСтроки);
	
	ИдентификаторыСтрокПересчет = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыСтрокПересчет);
	
	Для Каждого ИдентификаторСтрокиКПереносу Из ИдентификаторыСтрокПересчет Цикл
		
		СтрокаКПересчету = Форма.СоставлениеПланов.НайтиПоИдентификатору(ИдентификаторСтрокиКПереносу);
		
		Если СтрокаКПересчету = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаКПересчету, "ПлановыеТрудозатраты");
		ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, СтрокаКПересчету));
		
	КонецЦикла;
	
	Если ИдентификаторыСтрокПересчет.Количество() > 0 Тогда
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаСотрудник,
		                                                                                 "ПлановыеТрудозатраты", 
		                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(
		                                                                                        Форма.ЕстьНормативПланируемогоВремени, 
		                                                                                        Форма.ИнвертироватьОтображениеЗапланированоПоСотруднику), 
		                                                                                 Форма.НормативПланируемогоВремени);
		ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, СтрокаСотрудник));
		
	КонецЕсли;
	
	НормализоватьРодительскиеУзлыСоставлениеПланов(Форма, ИдентификаторыСтрокПересчет, ИзмененныеСтроки);
	
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПеренестиРаботуПриОпределенииПрочихРабот(Форма,
	                                               СтрокаСотрудник,
	                                               СтрокаКПереносу,
	                                               ИзмененныеСтроки,
	                                               УдаляемыеСтроки,
	                                               ИдентификаторыСтрокПересчет,
	                                               ИдентификаторыПеренесенныхСтрок,
	                                               ВПрочиеРаботы)
	
	ДанныеПереносимойСтроки = Новый Структура;
	ДанныеПереносимойСтроки.Вставить("Работа",    СтрокаКПереносу.СотрудникРабота);
	ДанныеПереносимойСтроки.Вставить("ТипРаботы", СтрокаКПереносу.ТипРаботы);
	ДанныеПереносимойСтроки.Вставить("Предмет",   Неопределено);
	
	Результат = РезультатОпределенияГруппировкиДобавляемойСтроки(Форма, СтрокаСотрудник, ДанныеПереносимойСтроки, ВПрочиеРаботы);
	СтрокаГруппировка = Результат.Группировка;
	ИдентификаторыСтрокПересчет.Добавить(СтрокаГруппировка.ПолучитьИдентификатор());
	ИдентификаторыСтрокПересчет.Добавить(СтрокаКПереносу.ПолучитьРодителя().ПолучитьИдентификатор());
	
	НоваяСтрока = СтрокаГруппировка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКПереносу);
	ИдентификаторыПеренесенныхСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	УдаляемыеСтроки.Добавить(СтрокаКПереносу);
	ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, НоваяСтрока));
	
	ДанныеУдаляемойСтроки = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, СтрокаКПереносу);
	ДанныеУдаляемойСтроки.Удалить = Истина;
	ИзмененныеСтроки.Добавить(ДанныеУдаляемойСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиГруппировкиДляОпределенияПрочихРабот(СтрокаСотрудник)
	
	СтрокиГруппировок      = Новый Массив;
	МассивТиповГруппировок = Новый Массив;
	
	МассивТиповГруппировок.Добавить(ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ВидыДеятельности"));
	МассивТиповГруппировок.Добавить(ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.НеПроектныеЗадачи"));
	МассивТиповГруппировок.Добавить(ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПрочиеРаботы"));
	
	Для Каждого ТипГруппировки Из МассивТиповГруппировок Цикл
	
		СтрокаГруппировки = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, 
		                                                                               "СотрудникРабота", 
		                                                                               ТипГруппировки,
		                                                                               0);

		Если СтрокаГруппировки <> Неопределено Тогда
			СтрокиГруппировок.Добавить(СтрокаГруппировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиГруппировок;
		
КонецФункции

&НаСервере
Процедура ОпределитьНеобходимостьПодчиненныхРаботГруппировкаТехПроект(СтрокаГруппировка)

	Если ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		ЕстьЗадачиВРаботах    = Ложь;
		ЕстьТехПроектВРаботах = Ложь;
		СтрокаТехПроект       = Неопределено;
		
		ПодчиненныеСтроки = СтрокаГруппировка.ПолучитьЭлементы();
		
		Для Каждого СтрокаРабота Из ПодчиненныеСтроки Цикл 
			Если ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
				ЕстьЗадачиВРаботах = Истина;
			ИначеЕсли ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
				СтрокаТехПроект = СтрокаРабота;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьЗадачиВРаботах
			И СтрокаТехПроект <> Неопределено Тогда
			
			СтрокаГруппировка.Цель        = СтрокаТехПроект.Цель;
			СтрокаГруппировка.Комментарий = СтрокаТехПроект.Комментарий;
			
			Для Каждого СтрокаРабота Из ПодчиненныеСтроки Цикл
				ОтразитьУдалениеЗаписиПлана(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРабота));
			КонецЦикла;
			
			ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаГруппировка));
			
			ПодчиненныеСтроки.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьРаботуВСоответствиеСтрокДерева(СоответствиеРабот, СтрокаРабота)
	
	СтрокиРаботы = СоответствиеРабот.Получить(СтрокаРабота.СотрудникРабота);
	
	Если СтрокиРаботы = Неопределено Тогда
		СтрокиРаботы = Новый Массив;
	КонецЕсли;
	
	СтрокиРаботы.Добавить(СтрокаРабота.ПолучитьИдентификатор());
	СоответствиеРабот.Вставить(СтрокаРабота.СотрудникРабота, СтрокиРаботы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьНеобходимостьПолученияДанныеОстатковЗапланированнойРаботы(СтрокаДерева)
	
	Если СтрокаДерева.ТипРаботы = Тип("СправочникСсылка.ТехническиеПроекты")
		Или СтрокаДерева.ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса")
		Или СтрокаДерева.ТипРаботы = Тип("СправочникСсылка.Ошибки") Тогда
		
		СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен = Истина;
		
	Иначе
		
		СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен = Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииНастройкиМаксимальныйВозможныйСтатусДляВыводаЗадач()
	
	ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
	ТекущийЭлемент = Элементы.ТехПроектыЗадачи;
	ПослеВыводаПодбораТехПроектыЗадачи();
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДереваЗафиксированногоПлана

&НаСервере
Процедура ЗаполнитьДанныеЗафиксированногоПлана() Экспорт

	ПодведениеИтогов.ПолучитьЭлементы().Очистить();
	
	ДанныеОтбораУчастников = ДанныеУчастниковВидаПланаДляЗапроса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыПлановУчастникиПланирования.Участник    КАК Участник,
	|	ВидыПлановУчастникиПланирования.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ УчастникиПланированияПоВидуПлана
	|ИЗ
	|	Справочник.ВидыПланов.УчастникиПланирования КАК ВидыПлановУчастникиПланирования
	|ГДЕ
	|	ВидыПлановУчастникиПланирования.Ссылка = &ВидПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиПлана.Сотрудник КАК Участник
	|ПОМЕСТИТЬ УчастникиПланаНетВВидеПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчастникиПланированияПоВидуПлана КАК УчастникиПланирования
	|		ПО ЗаписиПлана.Сотрудник = УчастникиПланирования.Участник
	|ГДЕ
	|	УчастникиПланирования.Участник ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчастникиПланирования.Участник    КАК Участник,
	|	ИСТИНА                            КАК ЕстьВВидеПлана,
	|	УчастникиПланирования.НомерСтроки КАК НомерСтрокиВидаПлана
	|ПОМЕСТИТЬ ВсеУчастникиПлана
	|ИЗ
	|	УчастникиПланированияПоВидуПлана КАК УчастникиПланирования
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчастникиПланаНетВВидеПлана.Участник,
	|	ЛОЖЬ,
	|	9999 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиПлана.Сотрудник               КАК Участник,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ТипСтрокиПлана          КАК ТипСтрокиПлана,
	|	ЗаписиПлана.Группировка             КАК Группировка,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЗаписиПлана.Результат               КАК Результат,
	|	ЗаписиПлана.Цель                    КАК Цель,
	|	ЗаписиПлана.Достигнуто              КАК Достигнуто,
	|	ЗаписиПлана.Комментарий             КАК Комментарий,
	|	ЗаписиПлана.ПеренестиВСледующийПлан КАК ПеренестиВСледующийПлан
	|ПОМЕСТИТЬ ЗаписиПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|			И (Планы.ВидПлана = &ВидПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &УстановленОтборПоСотрудникам
	|			ТОГДА ЗаписиПлана.Сотрудник В (&ОтборУчастниковПлана)
	|		ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеУчастникиПлана.Участник          КАК Участник,
	|	ЗаписиПлана.ТипСтрокиПлана          КАК ТипСтрокиПлана,
	|	ЗаписиПлана.Группировка             КАК Группировка,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.Результат               КАК Результат,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЗаписиПлана.Цель                    КАК Цель,
	|	ЗаписиПлана.Достигнуто              КАК Достигнуто,
	|	ЗаписиПлана.Комментарий             КАК Комментарий,
	|	ЗаписиПлана.ПеренестиВСледующийПлан КАК ПеренестиВСледующийПлан
	|ИЗ
	|	ВсеУчастникиПлана КАК ВсеУчастникиПлана
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписиПлана КАК ЗаписиПлана
	|		ПО (ЗаписиПлана.Участник = ВсеУчастникиПлана.Участник)
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &УстановленОтборПоСотрудникам
	|			ТОГДА ВсеУчастникиПлана.Участник В (&ОтборУчастниковПлана)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВсеУчастникиПлана.НомерСтрокиВидаПлана
	|ИТОГИ ПО
	|	Участник,
	|	Группировка";
	
	Запрос.УстановитьПараметр("ВидПлана",                     ВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода",                НачалоПериодаЗафиксированногоПлана);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецПериодаЗафиксированогоПлана);
	Запрос.УстановитьПараметр("УстановленОтборПоСотрудникам", ДанныеОтбораУчастников.ЕстьОтбор);
	Запрос.УстановитьПараметр("ОтборУчастниковПлана",         ДанныеОтбораУчастников.ОтборУчастников);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПолучениеДанныхВыполненныхРабот = Истина;
	ТипыРаботыСтатусыДаты = ПланированиеКлиентСервер.ТипыРаботСоСтатусамиДатами();
	
	ВыборкаУчастник = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СоответствиеРабот = Новый Соответствие;
	
	Пока ВыборкаУчастник.Следующий() Цикл
		
		ТекущаяСтрока = Неопределено;
		
		ЕстьГруппировкаПрочиеРаботы = Ложь;
		
		СтрокаУчастник = ПодведениеИтогов.ПолучитьЭлементы().Добавить();
		
		ВыборкаГруппировки = ВыборкаУчастник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГруппировки.Следующий() Цикл
			
			ЗаполнятьСтрокуГруппировки = Истина;
			Если ВыборкаГруппировки.Группировка = Неопределено
				Или ВыборкаГруппировки.Группировка = NULL
				Или Не ЗначениеЗаполнено(ВыборкаГруппировки.Группировка) Тогда
				ЗаполнятьСтрокуГруппировки = Ложь;
			КонецЕсли;
			
			Если ЗаполнятьСтрокуГруппировки
				И ВыборкаГруппировки.Группировка <> Перечисления.ТипыГруппировокСтрокПлана.ПрочиеРаботы Тогда
				СтрокаГруппировка = СтрокаУчастник.ПолучитьЭлементы().Добавить();
				СтрокаГруппировка.СотрудникРабота       = ВыборкаГруппировки.Группировка;
				СтрокаГруппировка.ТипСтрокиПлана        = Перечисления.ТипыСтрокПлана.Группировка;
				СтрокаГруппировка.ТипРаботы             = ТипЗнч(ВыборкаГруппировки.Группировка);
			КонецЕсли;
			
			ВыборкаДетали = ВыборкаГруппировки.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если ВыборкаДетали.ТипСтрокиПлана = Перечисления.ТипыСтрокПлана.Сотрудник Тогда
				
					СтрокаУчастник.СотрудникРабота                   = ВыборкаДетали.Участник;
					СтрокаУчастник.ТипСтрокиПлана                    = ВыборкаДетали.ТипСтрокиПлана;
					СтрокаУчастник.ФактическиеТрудозатратыНеПолучены = Истина;
					СтрокаУчастник.Цель                              = ВыборкаДетали.Цель;
					СтрокаУчастник.Результат                         = ВыборкаДетали.Результат;
					СтрокаУчастник.Комментарий                       = ВыборкаДетали.Комментарий;
					СтрокаУчастник.Достигнуто                        = ВыборкаДетали.Достигнуто;
					СтрокаУчастник.ПлановыеТрудозатраты              = ВыборкаДетали.ПланируемыеТрудозатраты;
					СтрокаУчастник.РезультатУказан                   = ЗначениеЗаполнено(СтрокаУчастник.Результат);
					СтрокаУчастник.ТипРаботы                         = ТипЗнч(ВыборкаДетали.Участник);
					
					ТекущаяСтрока = СтрокаУчастник;
					
				ИначеЕсли Не ЗначениеЗаполнено(ВыборкаДетали.ТипСтрокиПлана) Тогда
					
					СтрокаУчастник.СотрудникРабота                   = ВыборкаДетали.Участник;
					СтрокаУчастник.ТипСтрокиПлана                    = Перечисления.ТипыСтрокПлана.Сотрудник;
					
				ИначеЕсли ВыборкаДетали.ТипСтрокиПлана = Перечисления.ТипыСтрокПлана.Группировка Тогда
					
					Если ВыборкаДетали.Группировка = Перечисления.ТипыГруппировокСтрокПлана.ПрочиеРаботы Тогда
						
						ЕстьГруппировкаПрочиеРаботы = Истина;
						
						ПрочиеРаботыЦель                              = ВыборкаДетали.Цель;
						ПрочиеРаботыКомментарий                       = ВыборкаДетали.Комментарий;
						ПрочиеРаботыДостигнуто                        = ВыборкаДетали.Достигнуто;
						ПрочиеРаботыПлановыеТрудозатраты              = ВыборкаДетали.ПланируемыеТрудозатраты;
						ПрочиеРаботыРезультат                         = ВыборкаДетали.Результат;
						
					Иначе
						
						СтрокаГруппировка.СотрудникРабота                   = ВыборкаДетали.Группировка;
						СтрокаГруппировка.ТипСтрокиПлана                    = ВыборкаДетали.ТипСтрокиПлана;
						СтрокаГруппировка.ФактическиеТрудозатратыНеПолучены = Истина;
						СтрокаГруппировка.Цель                              = ВыборкаДетали.Цель;
						СтрокаГруппировка.Комментарий                       = ВыборкаДетали.Комментарий;
						СтрокаГруппировка.Результат                         = ВыборкаДетали.Результат;
						СтрокаГруппировка.Достигнуто                        = ВыборкаДетали.Достигнуто;
						СтрокаГруппировка.ПлановыеТрудозатраты              = ВыборкаДетали.ПланируемыеТрудозатраты;
						СтрокаГруппировка.ПеренестиРаботуВСледующийПериод   = ВыборкаДетали.ПеренестиВСледующийПлан;
						СтрокаГруппировка.РезультатУказан                   = ЗначениеЗаполнено(СтрокаГруппировка.Результат);
						СтрокаГруппировка.ТипРаботы                         = ТипЗнч(ВыборкаДетали.Группировка);
						
						ТекущаяСтрока = СтрокаГруппировка;
						
					КонецЕсли;
					
				ИначеЕсли ВыборкаДетали.ТипСтрокиПлана = Перечисления.ТипыСтрокПлана.Работа
					И ВыборкаДетали.Группировка <> Перечисления.ТипыГруппировокСтрокПлана.ПрочиеРаботы Тогда
					
					СтрокаРабота = СтрокаГруппировка.ПолучитьЭлементы().Добавить();
					
					СтрокаРабота.СотрудникРабота                   = ВыборкаДетали.Работа;
					СтрокаРабота.ТипСтрокиПлана                    = ВыборкаДетали.ТипСтрокиПлана;
					СтрокаРабота.Цель                              = ВыборкаДетали.Цель;
					СтрокаРабота.Комментарий                       = ВыборкаДетали.Комментарий;
					СтрокаРабота.Результат                         = ВыборкаДетали.Результат;
					СтрокаРабота.ПеренестиРаботуВСледующийПериод   = ВыборкаДетали.ПеренестиВСледующийПлан;
					СтрокаРабота.Достигнуто                        = ВыборкаДетали.Достигнуто;
					СтрокаРабота.ПлановыеТрудозатраты              = ВыборкаДетали.ПланируемыеТрудозатраты;
					СтрокаРабота.ТипРаботы                         = ТипЗнч(ВыборкаДетали.Работа);
					СтрокаРабота.ФактическиеТрудозатратыНеПолучены = Истина;
					СтрокаРабота.РезультатУказан                   = ЗначениеЗаполнено(СтрокаРабота.Результат);
					
					ТекущаяСтрока = СтрокаРабота;
					
				КонецЕсли;
				
				Если ТекущаяСтрока <> Неопределено
					И ТипыРаботыСтатусыДаты.Найти(ТипЗнч(ТекущаяСтрока.СотрудникРабота)) <> Неопределено Тогда
					
					СтрокиРаботы = СоответствиеРабот.Получить(ТекущаяСтрока.СотрудникРабота);
					Если СтрокиРаботы = Неопределено Тогда
						СтрокиРаботы = Новый Массив;
					КонецЕсли;
					
					СтрокиРаботы.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
					СоответствиеРабот.Вставить(ТекущаяСтрока.СотрудникРабота, СтрокиРаботы);
			
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если ЕстьГруппировкаПрочиеРаботы Тогда
			
			СтрокаГруппировка = СтрокаУчастник.ПолучитьЭлементы().Добавить();
			СтрокаГруппировка.СотрудникРабота                   = Перечисления.ТипыГруппировокСтрокПлана.ПрочиеРаботы;
			СтрокаГруппировка.ТипСтрокиПлана                    = Перечисления.ТипыСтрокПлана.Группировка;
			СтрокаГруппировка.Цель                              = ПрочиеРаботыЦель;
			СтрокаГруппировка.Комментарий                       = ПрочиеРаботыКомментарий;
			СтрокаГруппировка.Достигнуто                        = ПрочиеРаботыДостигнуто;
			СтрокаГруппировка.ПлановыеТрудозатраты              = ПрочиеРаботыПлановыеТрудозатраты;
			СтрокаГруппировка.Результат                         = ПрочиеРаботыРезультат;
			СтрокаГруппировка.ФактическиеТрудозатратыНеПолучены = Истина;
			СтрокаГруппировка.РезультатУказан                   = ЗначениеЗаполнено(СтрокаГруппировка.Результат);
			СтрокаГруппировка.ТипРаботы                         = ТипЗнч(ВыборкаДетали.Группировка);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если СоответствиеРабот.Количество() > 0 Тогда
		ДозаполнитьДанныеРаботВДереве(ПодведениеИтогов, СоответствиеРабот, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанныхРаботВДеревьях

Процедура ДозаполнитьДанныеРаботВТаблице(ТаблицаРабот, ЗаполнятьПредмет = Ложь)
	
	МассивОшибок              = Новый Массив;
	МассивЗадач               = Новый Массив;
	МассивТехническихПроектов = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРабот Цикл
		
		Если ТипЗнч(СтрокаТаблицы.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
			
			МассивОшибок.Добавить(СтрокаТаблицы.Работа);
			
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			МассивЗадач.Добавить(СтрокаТаблицы.Работа);
			
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			МассивТехническихПроектов.Добавить(СтрокаТаблицы.Работа);
		
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса = Планирование.РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок, МассивЗадач, МассивТехническихПроектов);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Работа", Выборка.Ссылка);
		
		НайденныеСтроки = ТаблицаРабот.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			НайденнаяСтрока.Статус         = Выборка.Статус;
			НайденнаяСтрока.СрокВыполнения = Выборка.СрокВыполнения;
			НайденнаяСтрока.ДатаСтатуса    = Выборка.ДатаИзмененияСтатуса;
			
			Если ЗаполнятьПредмет Тогда
				НайденнаяСтрока.Предмет    = Выборка.Предмет;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьДанныеРаботВДереве(ДеревоРабот , СоответствиеРаботСтрокДерева, ОпределятьРезультат)
	
	МассивОшибок              = Новый Массив;
	МассивЗадач               = Новый Массив;
	МассивТехническихПроектов = Новый Массив;
	
	Для Каждого ЭлементСоответствия Из СоответствиеРаботСтрокДерева Цикл
		
		Если ТипЗнч(ЭлементСоответствия.Ключ) = Тип("СправочникСсылка.Ошибки") Тогда
			
			МассивОшибок.Добавить(ЭлементСоответствия.Ключ);
			
		ИначеЕсли ТипЗнч(ЭлементСоответствия.Ключ) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			МассивЗадач.Добавить(ЭлементСоответствия.Ключ);
			
		ИначеЕсли ТипЗнч(ЭлементСоответствия.Ключ) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			МассивТехническихПроектов.Добавить(ЭлементСоответствия.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса = Планирование.РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок, МассивЗадач, МассивТехническихПроектов);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ИдентификаторыСтрокДерева = СоответствиеРаботСтрокДерева.Получить(Выборка.Ссылка);
		Если ИдентификаторыСтрокДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрокДерева Цикл
			
			СтрокаДерева = ДеревоРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.Статус         = Выборка.Статус;
			СтрокаДерева.СрокВыполнения = Выборка.СрокВыполнения;
			СтрокаДерева.ДатаСтатуса    = Выборка.ДатаИзмененияСтатуса;
			
			Если ОпределятьРезультат Тогда
				
				МассивСтрокСОпределеннымРезультатом = Новый Массив;
				ОпределитьРезультатВыполненияРаботы(СтрокаДерева, МассивСтрокСОпределеннымРезультатом);
				
				Если МассивСтрокСОпределеннымРезультатом.Количество() > 0 Тогда
					ОтразитьИзменениеМассиваЗаписейПлана(МассивСтрокСОпределеннымРезультатом);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРезультатВыполненияРаботы(СтрокаДерева, МассивСтрокСОпределеннымРезультатом);
	
	Если ЗначениеЗаполнено(СтрокаДерева.Результат)
		Или Не ЗначениеЗаполнено(СтрокаДерева.Статус) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.Ошибки") Тогда
		
		Если СтрокаДерева.Статус = Перечисления.СтатусыОшибок.Закрыта
			Или СтрокаДерева.Статус = Перечисления.СтатусыОшибок.Отозвана
			Или СтрокаДерева.Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена Тогда
			
			СтрокаДерева.Результат       = Перечисления.РезультатыВыполненияПланируемыхРабот.Выполнена;
			СтрокаДерева.РезультатУказан = Истина;
			МассивСтрокСОпределеннымРезультатом.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, СтрокаДерева));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		Если СтрокаДерева.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			
			СтрокаДерева.Результат       = Перечисления.РезультатыВыполненияПланируемыхРабот.Выполнена;
			СтрокаДерева.РезультатУказан = Истина;
			МассивСтрокСОпределеннымРезультатом.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, СтрокаДерева));
			
		ИначеЕсли СтрокаДерева.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
			
			СтрокаДерева.Результат = Перечисления.РезультатыВыполненияПланируемыхРабот.Отменена;
			СтрокаДерева.РезультатУказан = Истина;
			МассивСтрокСОпределеннымРезультатом.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, СтрокаДерева));
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		Если СтрокаДерева.Статус = Перечисления.СтатусыТехническихПроектов.Выполнен Тогда
			
			СтрокаДерева.Результат = Перечисления.РезультатыВыполненияПланируемыхРабот.Выполнена;
			СтрокаДерева.РезультатУказан = Истина;
			МассивСтрокСОпределеннымРезультатом.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, СтрокаДерева));
			
		ИначеЕсли СтрокаДерева.Статус = Перечисления.СтатусыТехническихПроектов.Отменен Тогда
			
			СтрокаДерева.Результат = Перечисления.РезультатыВыполненияПланируемыхРабот.Отменена;
			СтрокаДерева.РезультатУказан = Истина;
			МассивСтрокСОпределеннымРезультатом.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, СтрокаДерева));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененияПериодаУчастников

&НаКлиенте
Процедура ПослеЗакрытияВыбораУчастников(Результат, ДополнительныеПараметры) Экспорт
	
	Если ПланированиеКлиент.ЕстьИзмененияПослеВыбораУчастников(ЭтотОбъект, Результат, "ДекорацияСостояниеОтображенияВидаПлана") Тогда
		ОбработатьИзменениеСпискаУчастниковНаСервере();
		РазвернутьВерхнийУровеньДерева("СоставлениеПланов");
		РазвернутьВерхнийУровеньДерева("ПодведениеИтогов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСпискаУчастниковНаСервере()

	ЗаполнитьДанныеСоставляемогоПлана();
	ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов();
	
	Если ЕстьЗафиксированныеПланы Тогда
		ЗаполнитьДанныеЗафиксированногоПлана();
	КонецЕсли;
	
	СформироватьПредставлениеВидаПлана();

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДеревьевПодбора

&НаСервере
Процедура ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов() Экспорт
	
	СформироватьПредставлениеТекущегоСотрудникаПодбора(ЭтотОбъект);
	ЗаполнитьСтраницыПодбораРабот();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеТекущегоСотрудникаПодбора(Форма)
	
	Если ЗначениеЗаполнено(Форма.ТекущийСотрудникСоставлениеПланов) Тогда
		ПредставлениеТекущегоСотрудника = СтрШаблон(НСтр("ru = 'Подбор работ для: %1'"), Форма.ТекущийСотрудникСоставлениеПланов);
	Иначе
		ПредставлениеТекущегоСотрудника = "";
	КонецЕсли;
	
	Форма.Элементы.ДекорацияПодбираютсяПланыПоСотруднику.Заголовок = ПредставлениеТекущегоСотрудника;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтраницыПодбораРабот()
	
	Если Не ЗначениеЗаполнено(ТекущийСотрудникСоставлениеПланов) Тогда
		
		ОчиститьДанныеПодбора();
		Элементы.СтраницыПодборСоставляемыеПланы.Доступность = Ложь;
		
	Иначе
		
		Элементы.СтраницыПодборСоставляемыеПланы.Доступность = Истина;
		
		Если ИспользуетсяУчетВремени Тогда
			
			ЗаполнитьПодборВидовДеятельности();
			
		Иначе
			
			Элементы.СтраницаВидыДеятельности.Видимость = Ложь;
		
		КонецЕсли;
		
		ЗаполнитьПодборОшибок();
		ЗаполнитьПодборТехническиеПроектыЗадачи(Ложь);
		ЗаполнитьПодборИзПредыдущихПланов();
		ЗаполнитьПодборДанныеРодительскогоПлана();
		
		Если РаботыРодительскогоПлана.ПолучитьЭлементы().Количество() > 0 Тогда
			Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаПоРодительскомуПлану;
		ИначеЕсли НевыпоненоПредыдущиеПланы.Количество() > 0 Тогда
			Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаНевыполненоВПредыдущихПланах;
		Иначе
			Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаЗадачиТехпроекты;
		КонецЕсли;
		
		НайтиОтметитьРаботыСотрудникаВФормахПодбора();
		
	КонецЕсли;
	
	ОбновитьПризнакТекущегоСотрудникаСоставлениеПланаВДереве(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПризнакТекущегоСотрудникаСоставлениеПланаВДереве(Форма);
	
	Для Каждого СтрокаДерева Из Форма.СоставлениеПланов.ПолучитьЭлементы() Цикл
	
		СтрокаДерева.ЭтоТекущийСотрудникПодобра = (СтрокаДерева.СотрудникРабота = Форма.ТекущийСотрудникСоставлениеПланов);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиОтметитьРаботыСотрудникаВФормахПодбора()
	
	СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СоставлениеПланов,
	                                                                             "СотрудникРабота", 
	                                                                             ТекущийСотрудникСоставлениеПланов,
	                                                                             0);
	
	Если СтрокаСотрудник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл 
		
		Если ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты")
			И СтрокаГруппировка.ПолучитьЭлементы().Количество() = 0 Тогда
			НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаГруппировка.СотрудникРабота, Истина);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности")
			И СтрокаГруппировка.ПолучитьЭлементы().Количество() = 0 Тогда
			НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаГруппировка.СотрудникРабота, Истина);
		КонецЕсли;
		
		Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
			НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаРабота.СотрудникРабота, Истина);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборИзПредыдущихПланов()
	
	НевыпоненоПредыдущиеПланы.Очистить();
	
	ДанныеПредыдущегоЗафиксированногоПлана = Справочники.ВидыПланов.ПредыдущийЗафиксированныйПлан(ВидПлана, КонецПериодаСоставляемогоПлана);
	
	НевыполненныеРаботы = РегистрыСведений.Планы.НевыполненныеРаботыПредыдущегоПлана(ДанныеПредыдущегоЗафиксированногоПлана, ТекущийСотрудникСоставлениеПланов);
	
	Для Каждого НевыполненнаяРабота Из НевыполненныеРаботы Цикл
		
		НоваяСтрока = НевыпоненоПредыдущиеПланы.Добавить();
		НоваяСтрока.ВыбранаКПереносу =  НевыполненнаяРабота.ВыбранаКПереносу;
		НоваяСтрока.Работа           =  НевыполненнаяРабота.Работа;
		НоваяСтрока.Комментарий      =  НевыполненнаяРабота.Комментарий;
		НоваяСтрока.Цель             =  НевыполненнаяРабота.Цель;
		НоваяСтрока.ТипРаботы        =  ТипЗнч(НевыполненнаяРабота.Работа);
		
	КонецЦикла;
	
	Если НевыпоненоПредыдущиеПланы.Количество() > 0 Тогда
		
		ДозаполнитьДанныеРаботВТаблице(НевыпоненоПредыдущиеПланы, Истина);
		НевыпоненоПредыдущиеПланы.Сортировать("СрокВыполнения");
		Элементы.СтраницаНевыполненоВПредыдущихПланах.Видимость = Истина;
		
	Иначе
		
		Элементы.СтраницаНевыполненоВПредыдущихПланах.Видимость  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборТехническиеПроектыЗадачи(ИскатьУжеПодобранныеРаботы)
	
	Если Не ИспользоватьОчередиЗадач
		И ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот" Тогда
		
		ОтображатьВПодбореТехПроектовИЗадач = "";
		
	КонецЕсли;
	
	ТехПроектыЗадачи.ПолучитьЭлементы().Очистить();
	
	Если ЗначениеЗаполнено(ТекущийСотрудникСоставлениеПланов) Тогда
		
		ОтображаемыеСтатусыТехПроектов               = ОтображаемыеСтатусыТехническихПроектовДляПодбора();
		ОтображаемыеМаксимальноВозможныеСтатусыЗадач = ОтображаемыеМаксимальноВозможныеСтатусыЗадач(НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода);
		
		Если ОтображатьВПодбореТехПроектовИЗадач = "ТолькоТехпроекты" Тогда
			
			ЗаполнитьПодборТолькоТехпроекты(ОтображаемыеСтатусыТехПроектов, ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
			
		ИначеЕсли ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыЗадачиСотрудника" Тогда
			
			ЗаполнитьПодборТехпроектыЗадачиСотрудника(ОтображаемыеСтатусыТехПроектов, ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
			
		ИначеЕсли ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыВсеЗадачи" Тогда
			
			ЗаполнитьПодборТехпроектыВсеЗадачи(ОтображаемыеСтатусыТехПроектов, ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
			
		ИначеЕсли ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот" Тогда
			
			ЗаполнитьПодборОчередиЗадач(ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
			
		Иначе
			
			ОтображатьВПодбореТехПроектовИЗадач = "ТолькоТехпроекты";
			ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот" Тогда
		Элементы.ТехПроектыЗадачиПорядокНомерОчереди.Видимость = Истина;
	Иначе
		Элементы.ТехПроектыЗадачиПорядокНомерОчереди.Видимость = Ложь;
	КонецЕсли;
	
	ЕстьЗадачиИлиТехПроектыСотрудника = Ложь;
	
	Если ТехПроектыЗадачи.ПолучитьЭлементы().Количество() = 0 Тогда
		ЕстьЗадачиИлиТехПроектыСотрудника = ЕстьТехПроектыЗадачиСотрудника();
	Иначе
		Если ИскатьУжеПодобранныеРаботы Тогда
		НайтиОтметитьРаботыСотрудникаВФормахПодбора();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СтраницаЗадачиТехпроекты.Видимость = ТехПроектыЗадачи.ПолучитьЭлементы().Количество() > 0
	                                              Или ЕстьЗадачиИлиТехПроектыСотрудника;
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеСтатусыТехническихПроектовДляПодбора()
	
	ТребуемыеСтатусыТехническихПроектов = Новый Массив;
	Если Не СкрыватьНеАктивныеПроекты Тогда
		ТребуемыеСтатусыТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.Запланирован);
	КонецЕсли;
	ТребуемыеСтатусыТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.Активен);
	
	Если ПоказыватьНезапланированныеТехническиеПроекты
		И Не СкрыватьНеАктивныеПроекты Тогда
		ТребуемыеСтатусыТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.НеЗапланирован);
	КонецЕсли;
	
	Если ПоказыватьОтмененныеИЗавершенныеТехническиеПроекты 
		И Не СкрыватьНеАктивныеПроекты Тогда
		ТребуемыеСтатусыТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.Отменен);
		ТребуемыеСтатусыТехническихПроектов.Добавить(Перечисления.СтатусыТехническихПроектов.Выполнен);
	КонецЕсли;
	
	Возврат ТребуемыеСтатусыТехническихПроектов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтображаемыеМаксимальноВозможныеСтатусыЗадач(МаксимальныйВозможныйСтатусДляВыводаЗадач) 
	
	ТребуемыеМаксимальноВозможныеСтатусыЗадач = Новый Массив;
	ТребуемыеМаксимальноВозможныеСтатусыЗадач.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена"));
	
	Если МаксимальныйВозможныйСтатусДляВыводаЗадач = "ДоступныеДляВыполнения" Тогда
		ТребуемыеМаксимальноВозможныеСтатусыЗадач.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению"));
	КонецЕсли;
	
	Если МаксимальныйВозможныйСтатусДляВыводаЗадач = "ТребующиеВыполнения" Тогда
		ТребуемыеМаксимальноВозможныеСтатусыЗадач.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению"));
		ТребуемыеМаксимальноВозможныеСтатусыЗадач.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована"));
	КонецЕсли;
	
	Возврат ТребуемыеМаксимальноВозможныеСтатусыЗадач;
	
КонецФункции

&НаСервере
Функция ЕстьТехПроектыЗадачиСотрудника()

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТехническиеПроектыУчастники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты.Участники КАК ТехническиеПроектыУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ТехническиеПроектыУчастники.Ссылка = ТехническиеПроекты.Ссылка
	|ГДЕ
	|	ТехническиеПроектыУчастники.Участник = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ответственный = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Предмет
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Запланирован), ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник";
	
	Запрос.УстановитьПараметр("ТекущийСотрудник", ТекущийСотрудникСоставлениеПланов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПодборОчередиЗадач(ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка               КАК Задача,
	|	ЗадачиПроцесса.Статус               КАК СтатусЗадачи,
	|	ЗадачиПроцесса.Предмет              КАК Предмет,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполненияЗадачи,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                                                                                               КАК ДатаИзмененияСтатусаЗадачи,
	|	ОчередиРаботСотрудников.Приоритет                                                                   КАК Приоритет,
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди                                                        КАК ПорядокНомерВОчереди,
	|	ЕстьNuLL(ТехническиеПроекты.ДатаИзмененияСтатуса, ДАТАВРЕМЯ(1,1,1))                                 КАК ДатаИзмененияСтатусаТехническийПроект,
	|	ЕстьNuLL(ТехническиеПроекты.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.ПустаяСсылка)) КАК СтатусТехническогоПроекта,
	|	ЕстьNuLL(ТехническиеПроекты.ДатаЗавершения, ДАТАВРЕМЯ(1,1,1))                                       КАК ДатаЗавершенияТехническогоПроекта
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ОчередиРаботСотрудников.Работа = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &ТекущийСотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди
	|ИТОГИ ПО
	|	ПорядокНомерВОчереди,
	|	Предмет";
	
	Запрос.УстановитьПараметр("ТекущийСотрудник", ТекущийСотрудникСоставлениеПланов);
	
	ВыборкаПорядокНомерВОчереди = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПредыдущийПредмет = Неопределено;
	
	Пока ВыборкаПорядокНомерВОчереди.Следующий() Цикл
	
		ВыборкаПредметы   = ВыборкаПорядокНомерВОчереди.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПредметы.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаПредметы.Предмет) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда 
				
				Если  ВыборкаПредметы.Предмет <> ПредыдущийПредмет Тогда
				
				СтрокаПредмет = ТехПроектыЗадачи.ПолучитьЭлементы().Добавить();
				
				СтрокаПредмет.Работа                               = ВыборкаПредметы.Предмет;
				СтрокаПредмет.Предмет                              = ВыборкаПредметы.Предмет;
				СтрокаПредмет.СрокВыполнения                       = ВыборкаПредметы.ДатаЗавершенияТехническогоПроекта;
				СтрокаПредмет.ТипРаботы                            = Тип("СправочникСсылка.ТехническиеПроекты");
				СтрокаПредмет.Статус                               = ВыборкаПредметы.СтатусТехническогоПроекта;
				СтрокаПредмет.ДатаСтатуса                          = ВыборкаПредметы.ДатаЗавершенияТехническогоПроекта;
				СтрокаПредмет.ОстатокЗапланированныхЧасовНеПолучен = Истина;
				
				КоллекцияДобавленияЗадачи = СтрокаПредмет.ПолучитьЭлементы();
				
				ПредыдущийПредмет = ВыборкаПредметы.Предмет;
				
				КонецЕсли;
				
			Иначе
				
				КоллекцияДобавленияЗадачи = ТехПроектыЗадачи.ПолучитьЭлементы();
				ПредыдущийПредмет = Неопределено;
				
			КонецЕсли;
			
			ВыборкаДетали = ВыборкаПредметы.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				СтрокаЗадача = КоллекцияДобавленияЗадачи.Добавить();
				СтрокаЗадача.Работа                               = ВыборкаДетали.Задача;
				СтрокаЗадача.Предмет                              = ВыборкаДетали.Предмет;
				СтрокаЗадача.СрокВыполнения                       = ВыборкаДетали.СрокВыполненияЗадачи;
				СтрокаЗадача.ТипРаботы                            = Тип("СправочникСсылка.ЗадачиПроцесса");
				СтрокаЗадача.Статус                               = ВыборкаДетали.СтатусЗадачи;
				СтрокаЗадача.ДатаСтатуса                          = ВыборкаДетали.ДатаИзмененияСтатусаЗадачи;
				СтрокаЗадача.ПорядокНомерОчереди                  = ВыборкаДетали.ПорядокНомерВОчереди;
				СтрокаЗадача.ЭтоЗадачаТекущегоСотрудника          = Истина;
				СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
				
				ПустаяСтрока = СтрокаЗадача.ПолучитьЭлементы().Добавить();
				
			КонецЦикла;
			
		КонецЦикла;
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
	
	КонецЦикла;
	
	РегистрыСведений.ОчередиРаботСотрудников.УстановитьФорматПорядокНомерОчереди(ТекущийСотрудникСоставлениеПланов,
	                                                                             Элементы.ТехПроектыЗадачиПорядокНомерОчереди);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборТехпроектыВсеЗадачи(ОтображаемыеСтатусыТехПроектов, ОтображаемыеМаксимальноВозможныеСтатусыЗадач)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроектыУчастники.Ссылка КАК Предмет
	|ПОМЕСТИТЬ ТехПроектыСотрудника
	|ИЗ
	|	Справочник.ТехническиеПроекты.Участники КАК ТехническиеПроектыУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО ТехническиеПроектыУчастники.Ссылка = ТехническиеПроекты.Ссылка
	|ГДЕ
	|	ТехническиеПроектыУчастники.Участник = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (&ОтображаемыеСтатусыТехПроектов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ответственный = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (&ОтображаемыеСтатусыТехПроектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка               КАК Ссылка,
	|	ЗадачиПроцесса.Статус               КАК Статус,
	|	ЗадачиПроцесса.Предмет              КАК Предмет,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                               КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И НЕ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                    КАК Задача,
	|	ЗадачиПроцесса.Предмет                   КАК Предмет,
	|	ЗадачиПроцесса.Статус                    КАК СтатусЗадачи,
	|	ЗадачиПроцесса.КрайняяДатаОкончания      КАК СрокВыполненияЗадачи,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                                   КАК ДатаИзмененияСтатусаЗадачи,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЗадачаТекущегоСотрудника
	|ПОМЕСТИТЬ ЗадачиСотрудника
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В
	|			(ВЫБРАТЬ
	|				ТехПроектыСотрудника.Предмет КАК Предмет
	|			ИЗ
	|				ТехПроектыСотрудника КАК ТехПроектыСотрудника)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Ссылка                     КАК Предмет,
	|	ТехническиеПроекты.Статус                     КАК Статус,
	|	ТехническиеПроекты.ПлановаяДатаОкончания      КАК СрокВыполнения,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса       КАК ДатаИзмененияСтатуса,
	|	ЗадачиСотрудника.Задача                       КАК Задача,
	|	ЗадачиСотрудника.СтатусЗадачи                 КАК СтатусЗадачи,
	|	ЗадачиСотрудника.СрокВыполненияЗадачи         КАК СрокВыполненияЗадачи,
	|	ЗадачиСотрудника.ДатаИзмененияСтатусаЗадачи   КАК ДатаИзмененияСтатусаЗадачи,
	|	ЗадачиСотрудника.ЭтоЗадачаТекущегоСотрудника  КАК ЭтоЗадачаТекущегоСотрудника
	|ИЗ
	|	ТехПроектыСотрудника КАК ТехПроектыСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ТехПроектыСотрудника.Предмет = ТехническиеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиСотрудника КАК ЗадачиСотрудника
	|		ПО (ТехническиеПроекты.Ссылка = ЗадачиСотрудника.Предмет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиСотрудника.Задача
	|УПОРЯДОЧИТЬ ПО
	|	СрокВыполнения,
	|	СостоянияЗадачПроцессов.ЗначениеУпорядочивания
	|ИТОГИ ПО
	|	Предмет";
	
	Запрос.УстановитьПараметр("ТекущийСотрудник",                             ТекущийСотрудникСоставлениеПланов);
	Запрос.УстановитьПараметр("ОтображаемыеСтатусыТехПроектов",               ОтображаемыеСтатусыТехПроектов);
	Запрос.УстановитьПараметр("ОтображаемыеМаксимальноВозможныеСтатусыЗадач", ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаНеПроектныеЗадачи = Результат[1].Выбрать();
	ВыборкаТехПроекты        = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТехПроекты.Следующий() Цикл
	
		НоваяСтрока = ТехПроектыЗадачи.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Работа                               = ВыборкаТехПроекты.Предмет;
		НоваяСтрока.Предмет                              = ВыборкаТехПроекты.Предмет;
		НоваяСтрока.СрокВыполнения                       = ВыборкаТехПроекты.СрокВыполнения;
		НоваяСтрока.ТипРаботы                            = Тип("СправочникСсылка.ТехническиеПроекты");
		НоваяСтрока.Статус                               = ВыборкаТехПроекты.Статус;
		НоваяСтрока.ДатаСтатуса                          = ВыборкаТехПроекты.ДатаИзмененияСтатуса;
		НоваяСтрока.ЭтоГруппировка                       = Истина;
		НоваяСтрока.ОстатокЗапланированныхЧасовНеПолучен = Истина;
		
		ВыборкаДетали = ВыборкаТехПроекты.Выбрать();
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетали.Задача) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗадача = НоваяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаЗадача.Работа                               = ВыборкаДетали.Задача;
			СтрокаЗадача.Предмет                              = ВыборкаДетали.Предмет;
			СтрокаЗадача.СрокВыполнения                       = ВыборкаДетали.СрокВыполненияЗадачи;
			СтрокаЗадача.ТипРаботы                            = Тип("СправочникСсылка.ЗадачиПроцесса");
			СтрокаЗадача.Статус                               = ВыборкаДетали.СтатусЗадачи;
			СтрокаЗадача.ДатаСтатуса                          = ВыборкаДетали.ДатаИзмененияСтатусаЗадачи;
			СтрокаЗадача.ЭтоЗадачаТекущегоСотрудника          = ВыборкаДетали.ЭтоЗадачаТекущегоСотрудника;
			СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
			
			ПустаяСтрока = СтрокаЗадача.ПолучитьЭлементы().Добавить();
			
		КонецЦикла;
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
	
	КонецЦикла;
	
	Если ВыборкаНеПроектныеЗадачи.Количество() > 0 Тогда
		
		НоваяСтрока = ТехПроектыЗадачи.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Работа         = НСтр("ru = 'Непроектные задачи'");
		НоваяСтрока.ЭтоГруппировка = Истина;
		
		Пока ВыборкаНеПроектныеЗадачи.Следующий() Цикл
			
			СтрокаЗадача = НоваяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаЗадача.Работа                               = ВыборкаНеПроектныеЗадачи.Ссылка;
			СтрокаЗадача.Предмет                              = ВыборкаНеПроектныеЗадачи.Предмет;
			СтрокаЗадача.СрокВыполнения                       = ВыборкаНеПроектныеЗадачи.СрокВыполнения;
			СтрокаЗадача.ТипРаботы                            = Тип("СправочникСсылка.ЗадачиПроцесса");
			СтрокаЗадача.Статус                               = ВыборкаНеПроектныеЗадачи.Статус;
			СтрокаЗадача.ДатаСтатуса                          = ВыборкаНеПроектныеЗадачи.ДатаИзмененияСтатуса;
			СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
			
		КонецЦикла;
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборТехпроектыЗадачиСотрудника(ОтображаемыеСтатусыТехПроектов, ОтображаемыеМаксимальноВозможныеСтатусыЗадач)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроектыУчастники.Ссылка КАК Предмет
	|ПОМЕСТИТЬ ТехПроектыСотрудника
	|ИЗ
	|	Справочник.ТехническиеПроекты.Участники КАК ТехническиеПроектыУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ТехническиеПроектыУчастники.Ссылка = ТехническиеПроекты.Ссылка
	|ГДЕ
	|	ТехническиеПроектыУчастники.Участник = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В(&ОтображаемыеСтатусыТехПроектов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ответственный = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В(&ОтображаемыеСтатусыТехПроектов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Предмет
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В(&ОтображаемыеСтатусыТехПроектов)
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Предмет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка               КАК Ссылка,
	|	ЗадачиПроцесса.Предмет              КАК Предмет,
	|	ЗадачиПроцесса.Статус               КАК Статус,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И НЕ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка               КАК Задача,
	|	ЗадачиПроцесса.Предмет              КАК Предмет,
	|	ЗадачиПроцесса.Статус               КАК СтатусЗадачи,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполненияЗадачи,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИзмененияСтатусаЗадачи
	|ПОМЕСТИТЬ ЗадачиСотрудника
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЗадачиПроцесса.Предмет В
	|			(ВЫБРАТЬ
	|				ТехПроектыСотрудника.Предмет КАК Предмет
	|			ИЗ
	|				ТехПроектыСотрудника КАК ТехПроектыСотрудника)
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Ссылка                   КАК Предмет,
	|	ТехническиеПроекты.Статус                   КАК Статус,
	|	ТехническиеПроекты.ПлановаяДатаОкончания    КАК СрокВыполнения,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса     КАК ДатаИзмененияСтатуса,
	|	ЗадачиСотрудника.Задача                     КАК Задача,
	|	ЗадачиСотрудника.СтатусЗадачи               КАК СтатусЗадачи,
	|	ЗадачиСотрудника.СрокВыполненияЗадачи       КАК СрокВыполненияЗадачи,
	|	ЗадачиСотрудника.ДатаИзмененияСтатусаЗадачи КАК ДатаИзмененияСтатусаЗадачи
	|ИЗ
	|	ТехПроектыСотрудника КАК ТехПроектыСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ТехПроектыСотрудника.Предмет = ТехническиеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиСотрудника КАК ЗадачиСотрудника
	|		ПО (ТехническиеПроекты.Ссылка = ЗадачиСотрудника.Предмет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокВыполнения
	|ИТОГИ ПО
	|	Предмет";
	
	Запрос.УстановитьПараметр("ТекущийСотрудник",   ТекущийСотрудникСоставлениеПланов);
	Запрос.УстановитьПараметр("ОтображаемыеСтатусыТехПроектов",ОтображаемыеСтатусыТехПроектов);
	Запрос.УстановитьПараметр("ОтображаемыеМаксимальноВозможныеСтатусыЗадач", ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаНеПроектныеЗадачи = Результат[1].Выбрать();
	ВыборкаТехПроекты        = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТехПроекты.Следующий() Цикл
	
		НоваяСтрока = ТехПроектыЗадачи.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Работа                               = ВыборкаТехПроекты.Предмет;
		НоваяСтрока.Предмет                              = ВыборкаТехПроекты.Предмет;
		НоваяСтрока.СрокВыполнения                       = ВыборкаТехПроекты.СрокВыполнения;
		НоваяСтрока.ТипРаботы                            = Тип("СправочникСсылка.ТехническиеПроекты");
		НоваяСтрока.Статус                               = ВыборкаТехПроекты.Статус;
		НоваяСтрока.ДатаСтатуса                          = ВыборкаТехПроекты.ДатаИзмененияСтатуса;
		НоваяСтрока.ЭтоГруппировка                       = Истина;
		НоваяСтрока.ОстатокЗапланированныхЧасовНеПолучен = Истина;
		
		ВыборкаДетали = ВыборкаТехПроекты.Выбрать();
		
		Пока ВыборкаДетали.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетали.Задача) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗадача = НоваяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаЗадача.Работа                              = ВыборкаДетали.Задача;
			СтрокаЗадача.Предмет                             = ВыборкаДетали.Предмет;
			СтрокаЗадача.СрокВыполнения                      = ВыборкаДетали.СрокВыполненияЗадачи;
			СтрокаЗадача.ТипРаботы                           = Тип("СправочникСсылка.ЗадачиПроцесса");
			СтрокаЗадача.Статус                              = ВыборкаДетали.СтатусЗадачи;
			СтрокаЗадача.ДатаСтатуса                         = ВыборкаДетали.ДатаИзмененияСтатусаЗадачи;
			СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
			
		КонецЦикла;
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
		
	КонецЦикла;
	
	Если ВыборкаНеПроектныеЗадачи.Количество() > 0 Тогда
		
		НоваяСтрока = ТехПроектыЗадачи.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Работа         = НСтр("ru = 'Непроектные задачи'");
		НоваяСтрока.ЭтоГруппировка = Истина;
		
		Пока ВыборкаНеПроектныеЗадачи.Следующий() Цикл
			
			СтрокаЗадача = НоваяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаЗадача.Работа                               = ВыборкаНеПроектныеЗадачи.Ссылка;
			СтрокаЗадача.Предмет                              = ВыборкаНеПроектныеЗадачи.Предмет;
			СтрокаЗадача.СрокВыполнения                       = ВыборкаНеПроектныеЗадачи.СрокВыполнения;
			СтрокаЗадача.ТипРаботы                            = Тип("СправочникСсылка.ЗадачиПроцесса");
			СтрокаЗадача.Статус                               = ВыборкаНеПроектныеЗадачи.Статус;
			СтрокаЗадача.ДатаСтатуса                          = ВыборкаНеПроектныеЗадачи.ДатаИзмененияСтатуса;
			СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
			
		КонецЦикла;
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборТолькоТехпроекты(ОтображаемыеСтатусыТехПроектов, ОтображаемыеМаксимальноВозможныеСтатусыЗадач)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроектыУчастники.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТехПроектыСотрудника
	|ИЗ
	|	Справочник.ТехническиеПроекты.Участники КАК ТехническиеПроектыУчастники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ТехническиеПроектыУчастники.Ссылка = ТехническиеПроекты.Ссылка
	|ГДЕ
	|	ТехническиеПроектыУчастники.Участник = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (&ОтображаемыеСтатусыТехПроектов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ответственный = &ТекущийСотрудник
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (&ОтображаемыеСтатусыТехПроектов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Предмет
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|	И ТехническиеПроекты.Статус В (&ОтображаемыеСтатусыТехПроектов)
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка               КАК Ссылка,
	|	ЗадачиПроцесса.Статус               КАК Статус,
	|	ЗадачиПроцесса.Предмет              КАК Предмет,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                               КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Исполнитель = &ТекущийСотрудник
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И НЕ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Ссылка                КАК Ссылка,
	|	ТехническиеПроекты.Статус                КАК Статус,
	|	ТехническиеПроекты.ПлановаяДатаОкончания КАК СрокВыполнения,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса  КАК ДатаИзмененияСтатуса
	|ИЗ
	|	ТехПроектыСотрудника КАК ТехПроектыСотрудника
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ТехПроектыСотрудника.Ссылка = ТехническиеПроекты.Ссылка";
	
	Запрос.УстановитьПараметр("ТекущийСотрудник",                             ТекущийСотрудникСоставлениеПланов);
	Запрос.УстановитьПараметр("ОтображаемыеСтатусыТехПроектов",               ОтображаемыеСтатусыТехПроектов);
	Запрос.УстановитьПараметр("ОтображаемыеМаксимальноВозможныеСтатусыЗадач", ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаНеПроектныеЗадачи = Результат[1].Выбрать();
	ВыборкаТехПроекты   = Результат[2].Выбрать();
	
	Пока ВыборкаТехПроекты.Следующий() Цикл
	
		НоваяСтрока = ТехПроектыЗадачи.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Работа                               = ВыборкаТехПроекты.Ссылка;
		НоваяСтрока.Предмет                              = ВыборкаТехПроекты.Ссылка;
		НоваяСтрока.СрокВыполнения                       = ВыборкаТехПроекты.СрокВыполнения;
		НоваяСтрока.ТипРаботы                            = Тип("СправочникСсылка.ТехническиеПроекты");
		НоваяСтрока.Статус                               = ВыборкаТехПроекты.Статус;
		НоваяСтрока.ДатаСтатуса                          = ВыборкаТехПроекты.ДатаИзмененияСтатуса;
		НоваяСтрока.ОстатокЗапланированныхЧасовНеПолучен = Истина;
		НоваяСтрока.ЭтоГруппировка                       = Истина;
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
		
	КонецЦикла;
	
	Если ВыборкаНеПроектныеЗадачи.Количество() > 0 Тогда
		
		НоваяСтрока = ТехПроектыЗадачи.ПолучитьЭлементы().Добавить();
		НоваяСтрока.Работа         = НСтр("ru = 'Непроектные задачи'");
		НоваяСтрока.ЭтоГруппировка = Истина;
		
		Пока ВыборкаНеПроектныеЗадачи.Следующий() Цикл
			
			СтрокаЗадача = НоваяСтрока.ПолучитьЭлементы().Добавить();
			СтрокаЗадача.Работа                              = ВыборкаНеПроектныеЗадачи.Ссылка;
			СтрокаЗадача.Предмет                             = ВыборкаНеПроектныеЗадачи.Предмет;
			СтрокаЗадача.СрокВыполнения                      = ВыборкаНеПроектныеЗадачи.СрокВыполнения;
			СтрокаЗадача.ТипРаботы                           = Тип("СправочникСсылка.ЗадачиПроцесса");
			СтрокаЗадача.Статус                              = ВыборкаНеПроектныеЗадачи.Статус;
			СтрокаЗадача.ДатаСтатуса                         = ВыборкаНеПроектныеЗадачи.ДатаИзмененияСтатуса;
			СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
			
		КонецЦикла;
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеПодбора()

	НевыпоненоПредыдущиеПланы.Очистить();
	Ошибки.ПолучитьЭлементы().Очистить();
	ТехПроектыЗадачи.ПолучитьЭлементы().Очистить();
	РаботыРодительскогоПлана.ПолучитьЭлементы().Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборОшибок()
	
	Ошибки.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ошибки.Ссылка        КАК Работа,
	|	Ошибки.Статус        КАК Статус,
	|	Ошибки.СрокОтработки КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована)
	|			ТОГДА Ошибки.ДатаРегистрации
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана)
	|			ТОГДА Ошибки.ДатаРассмотрения
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена)
	|			ТОГДА Ошибки.ДатаИсправления
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена)
	|			ТОГДА Ошибки.ДатаПроверки
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПризнана)
	|			ТОГДА Ошибки.ДатаРассмотрения
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана)
	|			ТОГДА Ошибки.ДатаОтзыва
	|		КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта)
	|			ТОГДА Ошибки.ДатаЗакрытия
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                    КАК ДатаИзмененияСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.ВерсияИсправления) КАК ВерсияИсправления,
	|	ВЫБОР
	|		КОГДА Ошибки.Обнаружена = ЗНАЧЕНИЕ(Перечисление.МестаОбнаруженияОшибок.ВСборке)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Ошибки.СборкаОбнаружения)
	|		КОГДА Ошибки.Обнаружена = ЗНАЧЕНИЕ(Перечисление.МестаОбнаруженияОшибок.ВВетке)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Ошибки.ВеткаОбнаружения)
	|		ИНАЧЕ """"
	|	КОНЕЦ                                      КАК Обнаружена,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.СрочностьИсправления) КАК СрочностьИсправления,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.МетодВыявленияОшибки) КАК МетодВыявления,
	|	ПРЕДСТАВЛЕНИЕ(Ошибки.Владелец)             КАК Проект
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.КомуНаправлена = &ТекущийСотрудник
	|	И НЕ Ошибки.ПометкаУдаления
	|	И НЕ Ошибки.Статус В (&МассивСтатусовОшибкиНеТребуютВнимания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокВыполнения";
	
	Запрос.УстановитьПараметр("ТекущийСотрудник", ТекущийСотрудникСоставлениеПланов);
	Запрос.УстановитьПараметр("МассивСтатусовОшибкиНеТребуютВнимания", Перечисления.СтатусыОшибок.СтатусыНеТребуюющиеВнимания());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Элементы.СтраницаОшибки.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.СтраницаОшибки.Видимость = Истина;
	КонецЕсли;
	
	МассивГруппировок = Новый Массив;
	
	Для Каждого СтрокаТаблицыНастроек Из НастройкиГруппировкиОшибокВПодборе Цикл
		
		Если СтрокаТаблицыНастроек.Использовать Тогда
			МассивГруппировок.Добавить(СтрокаТаблицыНастроек.ТипГруппировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивГруппировок.Количество() = 0 Тогда
	
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			НоваяСтрока = Ошибки.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Работа         = Выборка.Работа;
			НоваяСтрока.СрокВыполнения = Выборка.СрокВыполнения;
			НоваяСтрока.ТипРаботы      = Тип("СправочникСсылка.Ошибки");
			НоваяСтрока.Статус         = Выборка.Статус;
			НоваяСтрока.ДатаСтатуса    = Выборка.ДатаИзмененияСтатуса;
		
		КонецЦикла;
		
	Иначе
		
		ТаблицаОшибокCГруппировками = Новый ТаблицаЗначений;
		ТаблицаОшибокCГруппировками.Колонки.Добавить("Работа",         Новый ОписаниеТипов("СправочникСсылка.Ошибки"));
		ТаблицаОшибокCГруппировками.Колонки.Добавить("СрокВыполнения", Новый ОписаниеТипов("Дата"));
		ТаблицаОшибокCГруппировками.Колонки.Добавить("Статус",         Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОшибок"));
		ТаблицаОшибокCГруппировками.Колонки.Добавить("ДатаСтатуса",    Новый ОписаниеТипов("Дата"));
		ТаблицаОшибокCГруппировками.Колонки.Добавить("Группировка",    Новый ОписаниеТипов("Строка", ,,,Новый КвалификаторыСтроки(300)));
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаОшибокCГруппировками.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Счетчик = 0;
			
			Для Каждого ЭлементМассива Из МассивГруппировок Цикл
				
				Если Счетчик > 0 Тогда
					НоваяСтрока.Группировка =  НоваяСтрока.Группировка +", ";
				КонецЕсли;
				
				НоваяСтрока.Группировка =  НоваяСтрока.Группировка + Выборка[ЭлементМассива];
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДанныеОшибокСГруппировками.Работа         КАК Работа,
		|	ДанныеОшибокСГруппировками.СрокВыполнения КАК СрокВыполнения,
		|	ДанныеОшибокСГруппировками.Статус         КАК Статус,
		|	ДанныеОшибокСГруппировками.ДатаСтатуса    КАК ДатаСтатуса,
		|	ДанныеОшибокСГруппировками.Группировка    КАК Группировка
		|ПОМЕСТИТЬ ДанныеОшибокСГруппировками
		|ИЗ
		|	&ДанныеОшибокСГруппировками КАК ДанныеОшибокСГруппировками
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеОшибокСГруппировками.Работа         КАК Работа,
		|	ДанныеОшибокСГруппировками.СрокВыполнения КАК СрокВыполнения,
		|	ДанныеОшибокСГруппировками.Статус         КАК Статус,
		|	ДанныеОшибокСГруппировками.ДатаСтатуса    КАК ДатаИзмененияСтатуса,
		|	ДанныеОшибокСГруппировками.Группировка    КАК Группировка
		|ИЗ
		|	ДанныеОшибокСГруппировками КАК ДанныеОшибокСГруппировками
		|ИТОГИ ПО
		|	Группировка";
		
		Запрос.УстановитьПараметр("ДанныеОшибокСГруппировками", ТаблицаОшибокCГруппировками);
		
		ВыборкаГруппировки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаГруппировки.Следующий() Цикл
		
			ВыборкаДетали = ВыборкаГруппировки.Выбрать();
			
			СтрокаГруппировка = Ошибки.ПолучитьЭлементы().Добавить();
			СтрокаГруппировка.Работа                = ВыборкаГруппировки.Группировка;
			СтрокаГруппировка.ЭтоСтрокаГруппировки  = Истина;
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				НоваяСтрока = СтрокаГруппировка.ПолучитьЭлементы().Добавить();
				НоваяСтрока.Работа         = ВыборкаДетали.Работа;
				НоваяСтрока.СрокВыполнения = ВыборкаДетали.СрокВыполнения;
				НоваяСтрока.ТипРаботы      = Тип("СправочникСсылка.Ошибки");
				НоваяСтрока.Статус         = ВыборкаДетали.Статус;
				НоваяСтрока.ДатаСтатуса    = ВыборкаДетали.ДатаИзмененияСтатуса;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	ОтобразитьТекстНастроитьГруппировкуОшибок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборДанныеРодительскогоПлана()
	
	РаботыРодительскогоПлана.ПолучитьЭлементы().Очистить();
	Если Не ЗначениеЗаполнено(РодительскийВидПлана) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЗадачиПроцесса.Предмет              КАК Предмет,
	|	ЗадачиПроцесса.Статус               КАК Статус,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ПОМЕСТИТЬ ЭтапыПланаЗанятости
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО (Планы.ВидПлана = &ВидПлана)
	|			И (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|			И (ЗаписиПлана.Сотрудник = &Сотрудник)
	|			И (ЗаписиПлана.ПланируемыеТрудозатраты > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЗаписиПлана.Работа = ЗадачиПроцесса.Ссылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.ПустаяСсылка)    КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты                              КАК ПланируемыеТрудозатраты,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.ПустаяСсылка)    КАК Предмет,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)        КАК Статус,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)                                      КАК СрокВыполнения,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)                                      КАК ДатаИзмененияСтатуса
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО (Планы.ВидПлана = &ВидПлана)
	|			И (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|			И (ЗаписиПлана.Сотрудник = &Сотрудник)
	|			И (ЗаписиПлана.ПланируемыеТрудозатраты > 0)
	|			И (ЗаписиПлана.Работа ССЫЛКА Перечисление.ТипыГруппировокСтрокПлана)
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка) КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты              КАК ПланируемыеТрудозатраты,
	|	ЗаписиПлана.Работа                               КАК Предмет,
	|	ТехническиеПроекты.Статус                        КАК Статус,
	|	ТехническиеПроекты.ПлановаяДатаОкончания         КАК СрокВыполнения,
	|	ТехническиеПроекты.ДатаИзмененияСтатуса          КАК ДатаИзмененияСтатуса
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО (Планы.ВидПлана = &ВидПлана)
	|			И (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|			И (ЗаписиПлана.Сотрудник = &Сотрудник)
	|			И (ЗаписиПлана.ПланируемыеТрудозатраты > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО (ЗаписиПлана.Работа = ТехническиеПроекты.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ЭтапыПланаЗанятости.Работа                  КАК Этап,
	|	ЗадачиПроцесса.Ссылка                       КАК ЗадачаНижнегоУровня,
	|	ЭтапыПланаЗанятости.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЭтапыПланаЗанятости.Предмет                 КАК ТехническийПроект,
	|	ЭтапыПланаЗанятости.СрокВыполнения          КАК СрокВыполненияЭтап,
	|	ЭтапыПланаЗанятости.ДатаИзмененияСтатуса    КАК ДатаИзмененияСтатусаЭтап,
	|	ЭтапыПланаЗанятости.Статус                  КАК СтатусЭтап,
	|	ЗадачиПроцесса.Статус                       КАК Статус,
	|	ЗадачиПроцесса.Исполнитель                  КАК Исполнитель,
	|	ЗадачиПроцесса.КрайняяДатаОкончания         КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	ЭтапыПланаЗанятости КАК ЭтапыПланаЗанятости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЗадачиПроцесса.Родитель = ЭтапыПланаЗанятости.Работа)
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И ЭтапыПланаЗанятости.Работа <> ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|			И (ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)))
	|
	|ОБЪЕДИНИТЬ
	| 
	|ВЫБРАТЬ
	|	ЭтапыПланаЗанятости.Работа                  КАК Этап,
	|	ЗадачиПроцесса.Ссылка                       КАК ЗадачаНижнегоУровня,
	|	ЭтапыПланаЗанятости.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЭтапыПланаЗанятости.Предмет                 КАК ТехническийПроект,
	|	ЭтапыПланаЗанятости.СрокВыполнения          КАК СрокВыполненияЭтап,
	|	ЭтапыПланаЗанятости.ДатаИзмененияСтатуса    КАК ДатаИзмененияСтатусаЭтап,
	|	ЭтапыПланаЗанятости.Статус                  КАК СтатусЭтап,
	|	ЗадачиПроцесса.Статус                       КАК Статус,
	|	ЗадачиПроцесса.Исполнитель                  КАК Исполнитель,
	|	ЗадачиПроцесса.КрайняяДатаОкончания         КАК СрокВыполнения,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	ЭтапыПланаЗанятости КАК ЭтапыПланаЗанятости
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|			ПО (ЭтапыПланаЗанятости.Предмет = ТехническиеПроекты.Ссылка)
	|			И ЭтапыПланаЗанятости.Работа = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ПО (ЗадачиПроцесса.Предмет = ТехническиеПроекты.Ссылка)
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|			И ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|			И (ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))) 
	|
	|ОБЪЕДИНИТЬ
	| 
	|ВЫБРАТЬ
	|	Ошибки.Ссылка                               КАК Этап,
	|	ИерархияЗадачПроцесса.Родитель              КАК ЗадачаНижнегоУровня,
	|	ЭтапыПланаЗанятости.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ЭтапыПланаЗанятости.Предмет                 КАК ТехническийПроект,
	|	Ошибки.СрокОтработки                        КАК СрокВыполненияЭтап,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)                 КАК ДатаИзмененияСтатусаЭтап,
	|	Ошибки.Статус                               КАК СтатусЭтап,
	|	ЗадачиПроцессаРодители.Статус               КАК Статус,
	|	ЗадачиПроцессаРодители.Исполнитель          КАК Исполнитель,
	|	ЗадачиПроцессаРодители.КрайняяДатаОкончания КАК СрокВыполнения,
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)                 КАК ДатаИзмененияСтатуса
	|ИЗ
	|	ЭтапыПланаЗанятости КАК ЭтапыПланаЗанятости
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ  Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|	ПО (ЗадачиПроцесса.Предмет ССЫЛКА Справочник.Ошибки)
	|		И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|		И (ЗадачиПроцесса.Исполнитель = &Сотрудник)
	|		И (ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)))
	|		И (ЭтапыПланаЗанятости.Работа = ЗНАЧЕНИЕ(Перечисление.ТипыГруппировокСтрокПлана.ПустаяСсылка))
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ  РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО (ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса)
	|		И  (ИерархияЗадачПроцесса.Уровень = 0) 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ  Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодители
	|		ПО (ЗадачиПроцессаРодители.Ссылка = ИерархияЗадачПроцесса.Родитель)
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ошибки КАК Ошибки
	|	ПО (ЗадачиПроцесса.Предмет = Ошибки.Ссылка)
	|		И НЕ Ошибки.ПометкаУдаления
	|		И Ошибки.Статус НЕ В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|
	|ИТОГИ ПО
	|	ТехническийПроект,
	|	Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО (Планы.ВидПлана = &ВидПлана)
	|			И (ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана)
	|			И (Планы.НачалоПериода = &НачалоПериода)
	|			И (Планы.КонецПериода = &КонецПериода)
	|			И (ЗаписиПлана.Сотрудник = &Сотрудник)
	|			И (ЗаписиПлана.ПланируемыеТрудозатраты > 0)
	|			И (ЗаписиПлана.Работа ССЫЛКА Справочник.ВидыДеятельности)"; 
	
	Запрос.УстановитьПараметр("ВидПлана",      РодительскийВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаСоставляемогоПлана);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаСоставляемогоПлана);
	Запрос.УстановитьПараметр("Сотрудник",     ТекущийСотрудникСоставлениеПланов);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаТехПроекты = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТехПроекты.Следующий() Цикл
		
		СтрокаТехПроект = РаботыРодительскогоПлана.ПолучитьЭлементы().Добавить();
		
		ТипСтрокиТехПроект = ТипЗнч(ВыборкаТехПроекты.ТехническийПроект);
		
		СтрокаТехПроект.Работа                               = ВыборкаТехПроекты.ТехническийПроект;
		СтрокаТехПроект.ТипРаботы                            = ТипСтрокиТехПроект;
		СтрокаТехПроект.НеДоступноДляВыбора                  = Истина;
		СтрокаТехПроект.ОстатокЗапланированныхЧасовНеПолучен = (ТипСтрокиТехПроект = Тип("СправочникСсылка.ТехническиеПроекты"));
		
		ТребуетсяПолучениеОстатковПодбор = Истина;
		
		ВыборкаЭтапы = ВыборкаТехПроекты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЭтапы.Следующий() Цикл
			
			СтрокаЭтап = СтрокаТехПроект.ПолучитьЭлементы().Добавить();
			СтрокаЭтап.Работа              = ВыборкаЭтапы.Этап;
			СтрокаЭтап.НеДоступноДляВыбора = ТипЗнч(СтрокаЭтап.Работа) <> Тип("СправочникСсылка.ЗадачиПроцесса");
			
			СтрокаЭтапНеЗаполнена      = Истина;
			
			ВыборкаЗадачи = ВыборкаЭтапы.Выбрать();
			
			Пока ВыборкаЗадачи.Следующий() Цикл
				
				Если СтрокаЭтапНеЗаполнена Тогда
					
					СтрокаЭтап.ТипРаботы                                 = Тип("СправочникСсылка.ЗадачиПроцесса");
					СтрокаЭтап.ДатаСтатуса                               = ВыборкаЗадачи.ДатаИзмененияСтатусаЭтап;
					СтрокаЭтап.Статус                                    = ВыборкаЗадачи.СтатусЭтап;
					СтрокаЭтап.Предмет                                   = ВыборкаЗадачи.ТехническийПроект;
					СтрокаЭтап.СрокВыполнения                            = ВыборкаЗадачи.СрокВыполненияЭтап;
					СтрокаЭтап.ЗапланированоВРодительском                = ?(ТипЗнч(СтрокаЭтап.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса"), 
					                                                         ВыборкаЗадачи.ПланируемыеТрудозатраты, 0);
					СтрокаЭтап.ОстатокЗапланированныхЧасовНеПолучен      = Истина;
					
					Если Не ЗначениеЗаполнено(СтрокаЭтап.Работа) Тогда
						СтрокаЭтап.НеДоступноДляВыбора = Истина;
					КонецЕсли;
					
					Если ТипЗнч(СтрокаТехПроект.Работа) = Тип("СправочникСсылка.ТехническиеПроекты") 
						Или СтрокаТехПроект.ЗапланированоВРодительском = 0 Тогда
						СтрокаТехПроект.ЗапланированоВРодительском = СтрокаТехПроект.ЗапланированоВРодительском + ВыборкаЗадачи.ПланируемыеТрудозатраты;
					КонецЕсли;
					
					СтрокаЭтапНеЗаполнена = Ложь;
					
				КонецЕсли;
				
				Если ВыборкаЗадачи.Этап = ВыборкаЗадачи.ЗадачаНижнегоУровня Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаЗадача = СтрокаЭтап.ПолучитьЭлементы().Добавить();
				
				СтрокаЗадача.Работа                               = ВыборкаЗадачи.ЗадачаНижнегоУровня;
				СтрокаЗадача.ЭтоЗадачаТекущегоСотрудника          = (ВыборкаЗадачи.Исполнитель = ТекущийСотрудникСоставлениеПланов);
				СтрокаЗадача.ДатаСтатуса                          = ВыборкаЗадачи.ДатаИзмененияСтатуса;
				СтрокаЗадача.Статус                               = ВыборкаЗадачи.Статус;
				СтрокаЗадача.СрокВыполнения                       = ВыборкаЗадачи.СрокВыполнения;
				СтрокаЗадача.Предмет                              = ВыборкаЗадачи.ТехническийПроект;
				СтрокаЗадача.ТипРаботы                            = ТипЗнч(ВыборкаЗадачи.ЗадачаНижнегоУровня);
				СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
				
				ПустаяСтрока = СтрокаЗадача.ПолучитьЭлементы().Добавить();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если РаботыРодительскогоПлана.ПолучитьЭлементы().Количество() > 0 Тогда
		ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
	КонецЕсли;
	
	ВыборкаВидыДеятельности = Результат[2].Выбрать();
	Если ВыборкаВидыДеятельности.Количество() <> 0 Тогда
		СтрокаВидыДеятельности  = РаботыРодительскогоПлана.ПолучитьЭлементы().Добавить();
		СтрокаВидыДеятельности.Работа              = Перечисления.ТипыГруппировокСтрокПлана.ВидыДеятельности;
		СтрокаВидыДеятельности.НеДоступноДляВыбора = Истина;
		
		Пока ВыборкаВидыДеятельности.Следующий() Цикл
			
			СтрокаВидДеятельности                            = СтрокаВидыДеятельности.ПолучитьЭлементы().Добавить();
			СтрокаВидДеятельности.Работа                     = ВыборкаВидыДеятельности.Работа;
			СтрокаВидДеятельности.ЗапланированоВРодительском = ВыборкаВидыДеятельности.ПланируемыеТрудозатраты;
			СтрокаВидДеятельности.ТипРаботы                  = Тип("СправочникСсылка.ВидыДеятельности");
			
			ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаВидыДеятельности, "ЗапланированоВРодительском");
			
		КонецЦикла;
	КонецЕсли;
	
	Элементы.СтраницаПоРодительскомуПлану.Видимость = (РаботыРодительскогоПлана.ПолучитьЭлементы().Количество() > 0); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодборВидовДеятельности()
	
	ВидыДеятельности.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДеятельности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыДеятельности КАК ВидыДеятельности
	|ГДЕ
	|	НЕ ВидыДеятельности.ПометкаУдаления
	|	И ВидыДеятельности.Используется
	|	И НЕ ВидыДеятельности.ТребуемаяДетализация = ЗНАЧЕНИЕ(Перечисление.ДетализацияВПланированииИУчетеВремени.Работа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыДеятельности.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ВидыДеятельности.Добавить();
		НоваяСтрока.Работа    = Выборка.Ссылка;
		НоваяСтрока.ТипРаботы = Тип("СправочникСсылка.ВидыДеятельности");
	
	КонецЦикла;
	
	Элементы.СтраницаВидыДеятельности.Видимость = ВидыДеятельности.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач()
	
	СохраняемыеВНастройкахДанныеМодифицированы  = Истина;
	
	ЗаголовокГруппы = "";
	
	Если ОтображатьВПодбореТехПроектовИЗадач = "ТолькоТехпроекты" Тогда
		
		ЗаголовокГруппы = НСтр("ru = 'Только технические проекты'");
		
	ИначеЕсли ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыЗадачиСотрудника" Тогда
		
		ЗаголовокГруппы = НСтр("ru = 'Технические проекты и задачи сотрудника'");
		
	ИначеЕсли ОтображатьВПодбореТехПроектовИЗадач = "ТехпроектыВсеЗадачи" Тогда
		
		ЗаголовокГруппы = НСтр("ru = 'Технические проекты и все задачи'");
		
	ИначеЕсли ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот" Тогда
		
		ЗаголовокГруппы = НСтр("ru = 'Очередь задач для выполнения'");
		
	КонецЕсли;
	
	ЗаполнитьПодборТехническиеПроектыЗадачи(Истина);
	
	Элементы.ГруппаЧтоОтображаетсяТехПроектыЗадачи.Заголовок = ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненныеСтрокиДеревоТехПроектыЗадачи(ДанныеСтроки, ОтображаемыеМаксимальноВозможныеСтатусыЗадач = Неопределено) Экспорт
	
	ПодчиненныеСтроки = ДанныеСтроки.ПолучитьЭлементы();
	ДанныеСтроки.ПолучитьЭлементы().Очистить();
	
	Если ОтображаемыеМаксимальноВозможныеСтатусыЗадач = Неопределено Тогда
		ОтображаемыеМаксимальноВозможныеСтатусыЗадач = ОтображаемыеМаксимальноВозможныеСтатусыЗадач(НастройкаМаксимальноВозможныхСтатусовЗадачДляВывода);
	КонецЕсли;
	
	ДанныеПодчиненныхЗадач = ДанныеПодчиненныхЗадач(ДанныеСтроки.Работа, ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
	
	Для Каждого ДанныеЗадачи Из ДанныеПодчиненныхЗадач Цикл
		
		СтрокаЗадача = ПодчиненныеСтроки.Добавить();
		СтрокаЗадача.Работа                               = ДанныеЗадачи.Задача;
		СтрокаЗадача.СрокВыполнения                       = ДанныеЗадачи.СрокВыполнения;
		СтрокаЗадача.ТипРаботы                            = Тип("СправочникСсылка.ЗадачиПроцесса");
		СтрокаЗадача.Статус                               = ДанныеЗадачи.Статус;
		СтрокаЗадача.ДатаСтатуса                          = ДанныеЗадачи.ДатаИзмененияСтатуса;
		СтрокаЗадача.ЭтоЗадачаТекущегоСотрудника          = (ДанныеЗадачи.Исполнитель = ТекущийСотрудникСоставлениеПланов);
		СтрокаЗадача.ОстатокЗапланированныхЧасовНеПолучен = Истина;
		
		ПустаяСтрока = СтрокаЗадача.ПолучитьЭлементы().Добавить();
		
		ТребуетсяПолучениеОстатковПодбор           = Истина;
		
	КонецЦикла;
	
	НайтиОтметитьРаботыСотрудникаВФормахПодбора();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПодчиненныхЗадач(ЗадачаРодитель, ОтображаемыеМаксимальноВозможныеСтатусыЗадач)
	
	ДанныеПодчиненныхЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка               КАК Ссылка,
	|	ЗадачиПроцесса.Статус               КАК Статус,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполнения,
	|	ЗадачиПроцесса.Исполнитель          КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИзмененияСтатуса
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ВЫБОР
	|			КОГДА НЕ &ЗадачаРодительЭтоПредмет
	|				ТОГДА ЗадачиПроцесса.Родитель = &ЗадачаРодитель
	|			ИНАЧЕ ЗадачиПроцесса.Предмет = &ЗадачаРодитель
	|					И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
	|		КОНЕЦ
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В(&МаксимальноВозможныеСтатусыЗадач)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияЗадачПроцессов.ЗначениеУпорядочивания";
	
	Запрос.УстановитьПараметр("ЗадачаРодитель",                    ЗадачаРодитель);
	Запрос.УстановитьПараметр("ЗадачаРодительЭтоПредмет",         ?(ТипЗнч(ЗадачаРодитель) = Тип("СправочникСсылка.ЗадачиПроцесса"), Ложь, Истина));
	Запрос.УстановитьПараметр("МаксимальноВозможныеСтатусыЗадач", ОтображаемыеМаксимальноВозможныеСтатусыЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("Задача",               Выборка.Ссылка);
		ДанныеЗадачи.Вставить("Статус",               Выборка.Статус);
		ДанныеЗадачи.Вставить("СрокВыполнения",       Выборка.СрокВыполнения);
		ДанныеЗадачи.Вставить("ДатаИзмененияСтатуса", Выборка.ДатаИзмененияСтатуса);
		ДанныеЗадачи.Вставить("Исполнитель",          Выборка.Исполнитель);
		
		ДанныеПодчиненныхЗадач.Добавить(ДанныеЗадачи);
		
	КонецЦикла;
	
	Возврат ДанныеПодчиненныхЗадач;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьНастройкиГруппировокВПодбореОшибок()
	
	НоваяСтрока = НастройкиГруппировкиОшибокВПодборе.Добавить();
	НоваяСтрока.ТипГруппировки = "Обнаружена";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Обнаружена'");
	
	НоваяСтрока = НастройкиГруппировкиОшибокВПодборе.Добавить();
	НоваяСтрока.ТипГруппировки = "ВерсияИсправления";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Версия исправления'");
	
	НоваяСтрока = НастройкиГруппировкиОшибокВПодборе.Добавить();
	НоваяСтрока.ТипГруппировки = "СрочностьИсправления";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Срочность исправления'");
	
	НоваяСтрока = НастройкиГруппировкиОшибокВПодборе.Добавить();
	НоваяСтрока.ТипГруппировки = "Проект";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Проект'");
	
	НоваяСтрока = НастройкиГруппировкиОшибокВПодборе.Добавить();
	НоваяСтрока.ТипГруппировки = "МетодВыявления";
	НоваяСтрока.ПредставлениеГруппировки = НСтр("ru = 'Метод выявления'");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьТекстНастроитьГруппировкуОшибок()

	МассивГруппировок = Новый Массив;
	
	Для Каждого СтрокаТаблицыНастроек Из НастройкиГруппировкиОшибокВПодборе Цикл
		
		Если СтрокаТаблицыНастроек.Использовать Тогда
			МассивГруппировок.Добавить(СтрокаТаблицыНастроек.ПредставлениеГруппировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивГруппировок.Количество() = 0 Тогда
		
		ТекстДекорации = НСтр("ru = 'Настроить группировку'");
		
	Иначе
		
		ТекстДекорации = НСтр("ru = 'Сгруппировано по:'");
		
		Счетчик = 0;
		
		Для Каждого ЭлементМассива Из МассивГруппировок Цикл
			
			Если Счетчик > 0 Тогда
				
				ТекстДекорации = ТекстДекорации + ", "
				
			КонецЕсли;
			
			ТекстДекорации = ТекстДекорации + ЭлементМассива;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.ДекорацияГруппировкаОшибок.Заголовок 
	      = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href=""НастроитьГруппировкуОшибок"">%1</a>'"), ТекстДекорации);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиГруппировкиОшибок()
	
	ОписаниеОповещениеНастройкаГруппировкиОшибок = Новый ОписаниеОповещения("ПослеИзмененияНастройкиГруппировокПодборОшибок", ЭтотОбъект);
	ОткрытьФорму("Обработка.Планирование.Форма.НастройкаГрупировкиОшибок", Новый Структура("ДанныеНастроек", ДанныеНастроекГруппировки()),
	             ЭтотОбъект, ,,,ОписаниеОповещениеНастройкаГруппировкиОшибок, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияНастройкиГруппировокПодборОшибок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОтразитьИзменениеНастройкиГруппировокПодборОшибокНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзменениеНастройкиГруппировокПодборОшибокНаСервере(Результат)
	
	НастройкиГруппировкиОшибокВПодборе.Загрузить(ПолучитьИзВременногоХранилища(Результат));
	ЗаполнитьПодборОшибок();
	
	НайтиОтметитьРаботыСотрудникаВФормахПодбора();
	
КонецПроцедуры

&НаКлиенте
Функция ПеретаскиваемыеРаботыРодительскогоПлана(Элемент, ЗначенияПеретаскивания)
	
	ПеретаскиваемыеРаботы = Новый Массив;
	
	Для Каждого ПеретаскиваемоеЗначение Из ЗначенияПеретаскивания Цикл
		
		Если ТипЗнч(ПеретаскиваемоеЗначение) = Тип("ДанныеФормыЭлементДерева") Тогда
			ДанныеПеретаскиваемойСтроки = ПеретаскиваемоеЗначение
		ИначеЕсли ТипЗнч(ПеретаскиваемоеЗначение) = Тип("Число") Тогда
			ДанныеПеретаскиваемойСтроки = Элемент.ДанныеСтроки(ПеретаскиваемоеЗначение);
		Иначе
			Возврат ПеретаскиваемыеРаботы;
		КонецЕсли;
		
		Если ДанныеПеретаскиваемойСтроки.НеДоступноДляВыбора Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		ПеретаскиваемыеРаботы.Добавить(ДанныеПеретаскиваемойСтроки.Работа);
		
	КонецЦикла;
	
	Возврат ПеретаскиваемыеРаботы;
	
КонецФункции

&НаКлиенте
Функция ДанныеНастроекГруппировки()
	
	ДанныеНастроек = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из НастройкиГруппировкиОшибокВПодборе Цикл
		
		ДанныеНастройки = Новый Структура;
		ДанныеНастройки.Вставить("Использовать",             СтрокаТаблицы.Использовать);
		ДанныеНастройки.Вставить("ТипГруппировки",           СтрокаТаблицы.ТипГруппировки);
		ДанныеНастройки.Вставить("ПредставлениеГруппировки", СтрокаТаблицы.ПредставлениеГруппировки);
		
		ДанныеНастроек.Добавить(ДанныеНастройки);
		
	КонецЦикла;
	
	Возврат ДанныеНастроек;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеМетодаРаботыСДеревьями

&НаКлиенте
Процедура РазвернутьВерхнийУровеньДерева( ИмяДерева)
	
	ДеревоРеквизит     = ЭтотОбъект[ИмяДерева];
	ДеревоЭлементФормы = Элементы[ИмяДерева];
	
	Для Каждого СтрокаВерхнегоУровня Из ДеревоРеквизит.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = СтрокаВерхнегоУровня.ПолучитьИдентификатор();
		
		УжеРазвернут = ДеревоЭлементФормы.Развернут(ИдентификаторСтроки);
		
		Если УжеРазвернут = Неопределено
			Или УжеРазвернут = Истина Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДеревоЭлементФормы.Развернуть(ИдентификаторСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УровеньСтрокиДерева(СтрокаДерева) Экспорт

	Уровень = 0;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Уровень = Уровень + 1;
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Уровень;
	
КонецФункции

&НаКлиенте
Функция НайтиСтрокиДерева(Строки, Поле, Значение)
	
	НайденныеСтроки = Новый Массив;
	
	Для каждого Строка Из Строки Цикл
		Если Строка[Поле] = Значение Тогда
			НайденныеСтроки.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеДереваВключаяПодчиненные(СтрокаДерева, ИмяКолонки, УстанавливаемоеЗначение)
	
	СтрокаДерева[ИмяКолонки] = УстанавливаемоеЗначение;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьЗначениеДереваВключаяПодчиненные(ПодчиненнаяСтрока, ИмяКолонки, УстанавливаемоеЗначение)
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСоставаСтрокДеревьев

&НаКлиенте
Процедура ПослеОкончанияПоискаРаботы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СоставлениеПланов,
	                                                                             "СотрудникРабота",
	                                                                              ТекущийСотрудникСоставлениеПланов,
	                                                                              0);
	
	Если СтрокаСотрудник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРабота = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
	                                                                          "СотрудникРабота",
	                                                                           Результат,
	                                                                           0);
	
	Если СтрокаРабота = Неопределено Тогда
		
		ДанныеДобавляемойСтроки = Новый Структура;
		ДанныеДобавляемойСтроки.Вставить("Работа", Результат);
		ДанныеДобавляемойСтроки.Вставить("ТипРаботы", ТипЗнч(Результат));
		ДанныеДобавляемойСтроки.Вставить("Предмет", Неопределено);
		
		ДобавитьСтрокуСоставленияПлана(СтрокаСотрудник, ДанныеДобавляемойСтроки);
		
		НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, Результат, Истина);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ИдентификаторСтрокиСотрудник = СтрокаСотрудник.ПолучитьИдентификатор();
	Если Не Элементы.СоставлениеПланов.Развернут(ИдентификаторСтрокиСотрудник) Тогда
		Элементы.СоставлениеПланов.Развернуть(ИдентификаторСтрокиСотрудник);
	КонецЕсли;
	
	ТребуетсяПолучениеОстатковПланируемыхРабот = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореИзПанелиНавигации(ИмяКоллекцииПодбора, ВыбраннаяСтрока)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;
	
	ПереносимыеДанные  = ЭтотОбъект[ИмяКоллекцииПодбора].НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТипЗнч(ПереносимыеДанные.Работа) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПереносимыеДанные.ДобавленоВПлан Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 уже есть в планах сотрудника %2'"), 
		                           ПереносимыеДанные.Работа,
		                           ТекущийСотрудникСоставлениеПланов);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	НайденныеСтроки = НайтиСтрокиДерева(СоставлениеПланов.ПолучитьЭлементы(), "СотрудникРабота", ТекущийСотрудникСоставлениеПланов);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСотрудник  = НайденныеСтроки[0];
	
	Если ИспользоватьОчередиЗадач
		И ПереносимыеДанные.ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса")
		Или ПереносимыеДанные.ТипРаботы = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		ПроверитьПодбираемуюРаботуНаСоответствиеОчереди(СтрокаСотрудник, ПереносимыеДанные);
		
		
	Иначе
		
		ПриВыбореИзПанелиНавигацииЗавершение(СтрокаСотрудник, ПереносимыеДанные);
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодбираемуюРаботуНаСоответствиеОчереди(СтрокаСотрудник, ПереносимыеДанные)

	УжеПодобранныеРаботы = Новый Массив;
	
	Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
		
		Если СтрокаГруппировка.ТипРаботы = Тип("СправочникСсылка.ТехническиеПроекты")
			И СтрокаГруппировка.ПолучитьЭлементы().Количество() = 0 Тогда
			
			УжеПодобранныеРаботы.Добавить(СтрокаГруппировка.СотрудникРабота);
			
		КонецЕсли;
		
		Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
			
			Если СтрокаРабота.ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса")
				Или СтрокаРабота.ТипРаботы = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
				УжеПодобранныеРаботы.Добавить(СтрокаРабота.СотрудникРабота);
			
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
	РезультатПроверки = РезультатПроверкиПодбираемойРаботыНаСоответствиеОчереди(СтрокаСотрудник.СотрудникРабота,
	                                                                            ПереносимыеДанные.Работа,
	                                                                            УжеПодобранныеРаботы);
	
	Если РезультатПроверки.ПодборСогласноОчередиКорректен Тогда
		
		ПриВыбореИзПанелиНавигацииЗавершение(СтрокаСотрудник, ПереносимыеДанные);
		
	ИначеЕсли Не ПустаяСтрока(РезультатПроверки.ВопросПользователю) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СтрокаСотрудник",   СтрокаСотрудник);
		ДополнительныеПараметры.Вставить("ПереносимыеДанные", ПереносимыеДанные);
		
		ПодборНеПоОчередиПослеОтвета = Новый ОписаниеОповещения("ПодборНеПоОчередиПослеОтвета", ЭтотОбъект, ДополнительныеПараметры);
		
		КнопкиВопроса = Новый СписокЗначений;
		Если Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница <> Элементы.СтраницаЗадачиТехпроекты 
			Или ОтображатьВПодбореТехПроектовИЗадач <> "ОчередиРабот" Тогда
			КнопкиВопроса.Добавить("ВПодборПоОчереди", НСтр("ru = 'В подбор по очереди'"));
		КонецЕсли;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК);
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ПодборНеПоОчередиПослеОтвета, 
		               РезультатПроверки.ВопросПользователю,
		               КнопкиВопроса,,
		               ?(КнопкиВопроса.Количество() = 3, "ВПодборПоОчереди", КодВозвратаДиалога.Отмена));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНеПоОчередиПослеОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ПриВыбореИзПанелиНавигацииЗавершение(ДополнительныеПараметры.СтрокаСотрудник, ДополнительныеПараметры.ПереносимыеДанные);
		
	ИначеЕсли Результат = "ВПодборПоОчереди" Тогда
		
		Элементы.СтраницыПодборСоставляемыеПланы.ТекущаяСтраница = Элементы.СтраницаЗадачиТехпроекты; 
		ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот";
		
		ПриИзмененииРежимаОтображенияПодбораТехПроектовИЗадач();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПроверкиПодбираемойРаботыНаСоответствиеОчереди(Сотрудник, ПодбираемаяРабота, УжеПодобранныеРаботы)
	
	Результат = Новый Структура;
	Результат.Вставить("ПодбираетсяРаботаИзОчереди",         Ложь);
	Результат.Вставить("ПодборСогласноОчередиКорректен",     Ложь);
	Результат.Вставить("НеподобранныхРаботИзОчередиВпереди", 0);
	Результат.Вставить("НеподобранныхРаботИзОчередиВсего",   0);
	Результат.Вставить("ВопросПользователю",                 "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.Работа КАК Работа,
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди КАК ПорядокНомерВОчереди,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТехническиеПроекты.Ссылка ЕСТЬ NULL
	|				ТОГДА ВЫБОР
	|						КОГДА ИерархияЗадачПроцесса.Родитель ЕСТЬ NULL
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Подобрана,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТехническиеПроектыПодбираемаяРабота.Ссылка ЕСТЬ NULL
	|				ТОГДА ВЫБОР
	|						КОГДА ИерархияЗадачПроцессаПодбираемаяРабота.ЗадачаПроцесса ЕСТЬ NULL
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ПодбираемаяРабота
	|ПОМЕСТИТЬ ПодобраноПодбирается
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО ОчередиРаботСотрудников.Работа.Предмет = ТехническиеПроекты.Ссылка
	|			И (ТехническиеПроекты.Ссылка В (&УжеПодобранныеРаботы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ОчередиРаботСотрудников.Работа = ИерархияЗадачПроцесса.Родитель
	|			И (ИерархияЗадачПроцесса.Родитель В (&УжеПодобранныеРаботы))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроектыПодбираемаяРабота
	|		ПО ОчередиРаботСотрудников.Работа.Предмет = ТехническиеПроектыПодбираемаяРабота.Ссылка
	|			И (ТехническиеПроектыПодбираемаяРабота.Ссылка = &ПодбираемаяРабота)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцессаПодбираемаяРабота
	|		ПО ОчередиРаботСотрудников.Работа = ИерархияЗадачПроцессаПодбираемаяРабота.Родитель
	|			И (ИерархияЗадачПроцессаПодбираемаяРабота.ЗадачаПроцесса = &ПодбираемаяРабота)
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередиРаботСотрудников.Работа,
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.КоличествоНеподобранныхРаботПодбираетсяИзОчереди) КАК КоличествоНеподобранныхРаботПодбираетсяИзОчереди,
	|	СУММА(ВложенныйЗапрос.КоличествоНеподобранныхРаботВОчереди)             КАК КоличествоНеподобранныхРаботВОчереди,
	|	МАКСИМУМ(ВложенныйЗапрос.ПодбираетсяРаботаИзОчериди)                    КАК ПодбираетсяРаботаИзОчериди
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодобраноПодбирается.Работа) КАК КоличествоНеподобранныхРаботПодбираетсяИзОчереди,
	|		0 КАК КоличествоНеподобранныхРаботВОчереди,
	|		ЛОЖЬ КАК ПодбираетсяРаботаИзОчериди
	|	ИЗ
	|		ПодобраноПодбирается КАК ПодобраноПодбирается
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПодобраноПодбирается КАК ПодобраноПодбираетсяСвязь
	|			ПО ПодобраноПодбирается.ПорядокНомерВОчереди < ПодобраноПодбираетсяСвязь.ПорядокНомерВОчереди
	|				И (НЕ ПодобраноПодбирается.Подобрана)
	|				И (ПодобраноПодбираетсяСвязь.ПодбираемаяРабота)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПодобраноПодбирается.Работа),
	|		ЛОЖЬ
	|	ИЗ
	|		ПодобраноПодбирается КАК ПодобраноПодбирается
	|	ГДЕ
	|		НЕ ПодобраноПодбирается.Подобрана
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		0,
	|		ИСТИНА
	|	ИЗ
	|		ПодобраноПодбирается КАК ПодобраноПодбирается
	|	ГДЕ
	|		ПодобраноПодбирается.ПодбираемаяРабота) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Сотрудник",            Сотрудник);
	Запрос.УстановитьПараметр("УжеПодобранныеРаботы", УжеПодобранныеРаботы);
	Запрос.УстановитьПараметр("ПодбираемаяРабота",    ПодбираемаяРабота);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Результат.ПодбираетсяРаботаИзОчереди         = Выборка.ПодбираетсяРаботаИзОчериди;
	Результат.НеподобранныхРаботИзОчередиВпереди = Выборка.КоличествоНеподобранныхРаботПодбираетсяИзОчереди;
	Результат.НеподобранныхРаботИзОчередиВсего   = Выборка.КоличествоНеподобранныхРаботВОчереди;
	
	Если Результат.НеподобранныхРаботИзОчередиВпереди = 0 
		И Результат.ПодбираетсяРаботаИзОчереди Тогда
		
		Результат.ПодборСогласноОчередиКорректен = Истина;
		
	ИначеЕсли Не Результат.ПодбираетсяРаботаИзОчереди 
		И Результат.НеподобранныхРаботИзОчередиВсего = 0 Тогда
		
		Результат.ПодборСогласноОчередиКорректен = Истина;
		
	КонецЕсли;
	
	Если Результат.ПодборСогласноОчередиКорректен Тогда
		
		Возврат Результат;
		
	Иначе
		
		Если Результат.НеподобранныхРаботИзОчередиВпереди <> 0 Тогда
			
			Результат.ВопросПользователю = НСтр("ru = 'В очереди работ есть работы, которые находятся выше, но не подобраны. Все равно продолжить?'");
			
		Иначе
			
			Результат.ВопросПользователю = НСтр("ru = 'Подбирается работа не из очереди, при этом есть неподобранные задачи из очереди. Все равно продолжить?'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореИзПанелиНавигацииЗавершение(СтрокаСотрудник, ПереносимыеДанные)
	
	ДобавитьСтрокуСоставленияПлана(СтрокаСотрудник, ПереносимыеДанные);
	
	ПереносимыеДанные.ДобавленоВПлан = Истина;
	
	ИдентификаторСтроки = СтрокаСотрудник.ПолучитьИдентификатор();
	Если Не Элементы.СоставлениеПланов.Развернут(ИдентификаторСтроки) Тогда
		 Элементы.СоставлениеПланов.Развернуть(ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РезультатОпределенияГруппировкиДобавляемойСтроки(Форма, СтрокаСотрудник, ДанныеДобавляемойСтроки, ЭтоПрочиеРаботы = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Группировка", Неопределено);
	Результат.Вставить("Создана", Ложь);
	
	ТипГруппировкиРаботаСОшибками    = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками");
	ТипГруппировкиВидыДеятельности   = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ВидыДеятельности");
	ТипГруппировкиНеПроектныеЗадачи  = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.НеПроектныеЗадачи");
	ТипГруппировкиПрочиеРаботы       = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПрочиеРаботы");
	
	Если ЭтоПрочиеРаботы Тогда
		
		НайденнаяГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
		                                                                                  "СотрудникРабота",
		                                                                                  ТипГруппировкиПрочиеРаботы,
		                                                                                  0);
		
		Если НайденнаяГруппировка = Неопределено Тогда
			НайденнаяГруппировка = РезультатДобавленияСтрокиГруппировки(Форма, СтрокаСотрудник, ТипГруппировкиПрочиеРаботы);
			Результат.Создана = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		НайденнаяГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
			                                                                              "СотрудникРабота",
			                                                                              ДанныеДобавляемойСтроки.Работа,
			                                                                              0);
			
		Если НайденнаяГруппировка = Неопределено Тогда
			НайденнаяГруппировка = РезультатДобавленияСтрокиГруппировки(Форма, СтрокаСотрудник, ДанныеДобавляемойСтроки.Работа);
		КонецЕсли;
		
	ИначеЕсли ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.ВидыДеятельности") Тогда
		
		Если ДанныеДобавляемойСтроки.Работа = Форма.ВидДеятельностиДляРаботыСОшибками Тогда
			
			НайденнаяГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
			                                                                                  "СотрудникРабота",
			                                                                                  ТипГруппировкиРаботаСОшибками,
			                                                                                   2);
			
			Если НайденнаяГруппировка = Неопределено Тогда
				НайденнаяГруппировка = РезультатДобавленияСтрокиГруппировки(Форма, СтрокаСотрудник, ТипГруппировкиРаботаСОшибками);
				Результат.Создана = Истина;
			КонецЕсли;
			
		Иначе
			
			НайденнаяГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, 
			                                                                                  "СотрудникРабота", 
			                                                                                  ТипГруппировкиВидыДеятельности,
			                                                                                  2);
			
			Если НайденнаяГруппировка = Неопределено Тогда
				НайденнаяГруппировка = РезультатДобавленияСтрокиГруппировки(Форма, СтрокаСотрудник, ТипГруппировкиВидыДеятельности);
				Результат.Создана = Истина;
			КонецЕсли;
			
		КонецЕсли
		
	ИначеЕсли ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.Ошибки") Тогда
		
		НайденнаяГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, 
		                                                                                  "СотрудникРабота", 
		                                                                                  ТипГруппировкиРаботаСОшибками,
		                                                                                  2);
		
		Если НайденнаяГруппировка = Неопределено Тогда
			НайденнаяГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, 
			                                                                                  "СотрудникРабота", 
			                                                                                  Форма.ВидДеятельностиДляРаботыСОшибками,
			                                                                                  2);
			Если НайденнаяГруппировка = Неопределено Тогда
				НайденнаяГруппировка = РезультатДобавленияСтрокиГруппировки(Форма, СтрокаСотрудник, ТипГруппировкиРаботаСОшибками);
				Результат.Создана = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		Если ДанныеДобавляемойСтроки.Предмет = Неопределено Тогда
			ДанныеДобавляемойСтроки.Предмет = ПредметЗадачиПроцесса(ДанныеДобавляемойСтроки.Работа);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеДобавляемойСтроки.Предмет) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			ИскомаяГруппировка = ДанныеДобавляемойСтроки.Предмет;
		Иначе
			ИскомаяГруппировка = ТипГруппировкиНеПроектныеЗадачи;
		КонецЕсли;
		
		НайденнаяГруппировка = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, 
			                                                                              "СотрудникРабота", 
			                                                                              ИскомаяГруппировка,
			                                                                              2);
			
		Если НайденнаяГруппировка = Неопределено Тогда
			НайденнаяГруппировка = РезультатДобавленияСтрокиГруппировки(Форма, СтрокаСотрудник, ИскомаяГруппировка);
			Результат.Создана = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Группировка = НайденнаяГруппировка;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредметЗадачиПроцесса(ЗадачаПроцесса)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "Предмет");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатДобавленияСтрокиГруппировки(Форма, СтрокаСотрудник, ЗначениеГруппировки)

	НоваяСтрока = СтрокаСотрудник.ПолучитьЭлементы().Добавить();
	НоваяСтрока.СотрудникРабота      = ЗначениеГруппировки;
	НоваяСтрока.ТипСтрокиПлана       = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Группировка");
	
	Если ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		НоваяСтрока.ОстатокЗапланированныхЧасовНеПолучен = Истина;
		Форма.ТребуетсяПолучениеОстатковПланируемыхРабот = Истина;
		НоваяСтрока.ТипРаботы                            = Тип("СправочникСсылка.ТехническиеПроекты");
		
	КонецЕсли;
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НормализоватьРодительскиеУзлыСоставлениеПланов(Форма, ИдентификаторыРодительскихУзлов, ДанныеИзмененныхСтрок)

	ИдентификаторыРодительскихУзлов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыРодительскихУзлов);
	
	Для Каждого ИдентификаторРодительскогоУзла Из ИдентификаторыРодительскихУзлов Цикл
		
		СтрокаВыполненПересчет = Форма.СоставлениеПланов.НайтиПоИдентификатору(ИдентификаторРодительскогоУзла);
		Если СтрокаВыполненПересчет = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтрокиПересчет = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, СтрокаВыполненПересчет);
		
		Если СтрокаВыполненПересчет.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Группировка") Тогда
			
			ПодчиненныеСтроки = СтрокаВыполненПересчет.ПолучитьЭлементы();
			КоличествоПодчиненныхЭлементов = ПодчиненныеСтроки.Количество();
			
			Если КоличествоПодчиненныхЭлементов = 0 Тогда
			
				ДанныеСтрокиПересчет.Удалить = Истина;
				КоллекцияСтрок = СтрокаВыполненПересчет.ПолучитьРодителя().ПолучитьЭлементы();
				КоллекцияСтрок.Удалить(КоллекцияСтрок.Индекс(СтрокаВыполненПересчет));
				
			ИначеЕсли КоличествоПодчиненныхЭлементов = 1 Тогда
				
				Если ТипЗнч(СтрокаВыполненПересчет.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
					
					Если ТипЗнч(ПодчиненныеСтроки[0].СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
						
						ДанныеСтрокиТехПроекта = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, ПодчиненныеСтроки[0]);
						ДанныеСтрокиТехПроекта.Удалить = Истина;
						ДанныеИзмененныхСтрок.Добавить(ДанныеСтрокиТехПроекта);
						
						Если ПустаяСтрока(ДанныеСтрокиПересчет.Цель) Тогда
							СтрокаВыполненПересчет.Цель = ДанныеСтрокиТехПроекта.Цель;
							ДанныеСтрокиПересчет.Цель   = ДанныеСтрокиТехПроекта.Цель;
						КонецЕсли;
						
						Если ПустаяСтрока(ДанныеСтрокиПересчет.Комментарий) Тогда
							СтрокаВыполненПересчет.Комментарий = ДанныеСтрокиТехПроекта.Комментарий;
							ДанныеСтрокиПересчет.Комментарий   = ДанныеСтрокиТехПроекта.Комментарий;
						КонецЕсли;
						
						ПодчиненныеСтроки.Удалить(ПодчиненныеСтроки.Индекс(ПодчиненныеСтроки[0]));
						
					КонецЕсли;
					
				ИначеЕсли СтрокаВыполненПересчет.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками") Тогда
					
					Если ПодчиненныеСтроки[0].СотрудникРабота = Форма.ВидДеятельностиДляРаботыСОшибками Тогда
						
						ДанныеСтрокиВидДеятельностиОшибки = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, ПодчиненныеСтроки[0]);
						ДанныеСтрокиВидДеятельностиОшибки.Удалить = Истина;
						ДанныеИзмененныхСтрок.Добавить(ДанныеСтрокиВидДеятельностиОшибки);
						
						Если ПустаяСтрока(ДанныеСтрокиПересчет.Цель) Тогда
							СтрокаВыполненПересчет.Цель = ДанныеСтрокиВидДеятельностиОшибки.Цель;
							ДанныеСтрокиПересчет.Цель   = ДанныеСтрокиВидДеятельностиОшибки.Цель;
						КонецЕсли;
						
						Если ПустаяСтрока(ДанныеСтрокиПересчет.Комментарий) Тогда
							СтрокаВыполненПересчет.Комментарий = ДанныеСтрокиВидДеятельностиОшибки.Комментарий;
							ДанныеСтрокиПересчет.Комментарий   = ДанныеСтрокиВидДеятельностиОшибки.Комментарий;
						КонецЕсли;
						
						ПодчиненныеСтроки.Удалить(ПодчиненныеСтроки.Индекс(ПодчиненныеСтроки[0]));
						
						СтрокаВыполненПересчет.СотрудникРабота = Форма.ВидДеятельностиДляРаботыСОшибками;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеИзмененныхСтрок.Добавить(ДанныеСтрокиПересчет);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуСоставленияПлана(СтрокаСотрудник, ДанныеДобавляемойСтроки)
	
	ИзмененныеСтроки = Новый Массив;
	
	Результат = РезультатОпределенияГруппировкиДобавляемойСтроки(ЭтотОбъект, СтрокаСотрудник, ДанныеДобавляемойСтроки);
	СтрокаГруппировка  = Результат.Группировка;
	Если СтрокаГруппировка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокиГруппировки  = СтрокаГруппировка.ПолучитьЭлементы();
	
	Если ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.ТехническиеПроекты")
		И СтрокиГруппировки.Количество() = 0 Тогда
		
		ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаГруппировка));
		ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеСтроки);
		ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
		Элементы.СоставлениеПланов.ТекущаяСтрока = СтрокаГруппировка.ПолучитьИдентификатор();
		
		Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудникСоставлениеПланов Тогда
			НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаГруппировка.СотрудникРабота, Истина);
		КонецЕсли;
		
		СтрокаГруппировка.ОстатокЗапланированныхЧасовНеПолучен = Истина;
		ТребуетсяПолучениеОстатковПланируемыхРабот             = Истина;
		
		Возврат;
		
	ИначеЕсли ДанныеДобавляемойСтроки.Работа = ВидДеятельностиДляРаботыСОшибками 
		И СтрокиГруппировки.Количество() = 0 Тогда
		
		СтрокаГруппировка.СотрудникРабота = ВидДеятельностиДляРаботыСОшибками;
		ПеренестиПлановыеТрудозатратыДляДобавляемойСтроки(СтрокаГруппировка, ДанныеДобавляемойСтроки, ИзмененныеСтроки);
		ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаГруппировка));
		ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеСтроки);
		ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
		Элементы.СоставлениеПланов.ТекущаяСтрока = СтрокаГруппировка.ПолучитьИдентификатор();
		
		Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудникСоставлениеПланов Тогда
			НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаГруппировка.СотрудникРабота, Истина);
		КонецЕсли;
		
		ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
		
		Возврат;
		
	ИначеЕсли ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.Ошибки") 
		И СтрокаГруппировка.СотрудникРабота = ВидДеятельностиДляРаботыСОшибками Тогда
		
		НоваяСтрока = СтрокиГруппировки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировка);
		НоваяСтрока.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа");
		
		СтрокаГруппировка.Комментарий = "";
		СтрокаГруппировка.Цель        = "";
		СтрокаГруппировка.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками");
		
		ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, НоваяСтрока));
		
	ИначеЕсли ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса")
		И ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты")
		И СтрокиГруппировки.Количество() = 0
		И Не Результат.Создана Тогда
		
		НоваяСтрока = СтрокиГруппировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировка);
		НоваяСтрока.ТипСтрокиПлана    = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа");
		СтрокаГруппировка.Комментарий = "";
		СтрокаГруппировка.Цель        = "";
		ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, НоваяСтрока));
		
	КонецЕсли;
	
	ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаГруппировка));
	
	НоваяСтрока                 = СтрокиГруппировки.Добавить();
	НоваяСтрока.СотрудникРабота = ДанныеДобавляемойСтроки.Работа;
	НоваяСтрока.ТипСтрокиПлана  = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДобавляемойСтроки, "Статус") Тогда
		НоваяСтрока.Статус = ДанныеДобавляемойСтроки.Статус;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДобавляемойСтроки, "ДатаСтатуса") Тогда
		НоваяСтрока.ДатаСтатуса = ДанныеДобавляемойСтроки.ДатаСтатуса;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДобавляемойСтроки, "СрокВыполнения") Тогда
		НоваяСтрока.СрокВыполнения = ДанныеДобавляемойСтроки.СрокВыполнения;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДобавляемойСтроки, "ТипРаботы") Тогда
		НоваяСтрока.ТипРаботы = ДанныеДобавляемойСтроки.ТипРаботы;
		Если ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.ЗадачиПроцесса")
			Или ДанныеДобавляемойСтроки.ТипРаботы = Тип("СправочникСсылка.ВидыДеятельности") Тогда
			ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДобавляемойСтроки, "ПлановыеТрудозатраты") Тогда
		НоваяСтрока.ПлановыеТрудозатраты = ДанныеДобавляемойСтроки.ПлановыеТрудозатраты;
	КонецЕсли;
		
	ОпределитьНеобходимостьПолученияДанныеОстатковЗапланированнойРаботы(НоваяСтрока);
	
	Если НоваяСтрока.ОстатокЗапланированныхЧасовНеПолучен Тогда
		ТребуетсяПолучениеОстатковПланируемыхРабот = Истина;
	КонецЕсли;
	
	ПеренестиПлановыеТрудозатратыДляДобавляемойСтроки(НоваяСтрока, ДанныеДобавляемойСтроки, ИзмененныеСтроки);
	
	Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудникСоставлениеПланов Тогда
		НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, НоваяСтрока.СотрудникРабота, Истина);
	КонецЕсли;
	
	ИзмененныеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, НоваяСтрока));
	ОтразитьИзменениеМассиваЗаписейПлана(ИзмененныеСтроки);
	
	Элементы.СоставлениеПланов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПлановыеТрудозатратыДляДобавляемойСтроки(ДобавленнаяСтрока, ДанныеДобавляемойСтроки, ИзменяемыеСтроки)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДобавляемойСтроки, "ЗапланированоВРодительском")
		И ДанныеДобавляемойСтроки.ЗапланированоВРодительском <> 0 Тогда
		
		ДобавленнаяСтрока.ПлановыеТрудозатраты = ДанныеДобавляемойСтроки.ЗапланированоВРодительском;
		
		СтрокаРодитель = ДобавленнаяСтрока.ПолучитьРодителя();
		Если СтрокаРодитель <> Неопределено Тогда
			
			СтрокаВерхнегоУровня = СтрокаРодитель.ПолучитьРодителя();
			
			Если СтрокаВерхнегоУровня = Неопределено Тогда
				
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаРодитель,
				                                                                                 "ПлановыеТрудозатраты", 
				                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику), 
				                                                                                 НормативПланируемогоВремени);;
				ИзменяемыеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРодитель));
				
			Иначе 
				
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаРодитель, "ПлановыеТрудозатраты");
				ИзменяемыеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРодитель));
				
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня,
				                                                                                 "ПлановыеТрудозатраты", 
				                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику), 
				                                                                                 НормативПланируемогоВремени);
				ИзменяемыеСтроки.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаВерхнегоУровня));
				КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НайтиОтметитьРаботуВФормахПодбора(Форма, Работа, ДобавленоВПлан) 
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Работа", Работа);
	
	НайденныеСтроки = Форма.НевыпоненоПредыдущиеПланы.НайтиСтроки(ПараметрыПоиска); 
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ДобавленоВПлан = ДобавленоВПлан;
	КонецЦикла;
	
	НайденныеСтроки = Форма.ВидыДеятельности.НайтиСтроки(ПараметрыПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.ДобавленоВПлан = ДобавленоВПлан;
	КонецЦикла;
	
	НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(Форма.Ошибки, "Работа", Работа, 2);
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ДобавленоВПлан = ДобавленоВПлан;
	КонецЕсли;
	
	НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(Форма.ТехПроектыЗадачи, "Работа", Работа, 10);
	Если НайденнаяСтрока <> Неопределено Тогда
		
		Если ТипЗнч(НайденнаяСтрока.Работа) <> Тип("СправочникСсылка.ТехническиеПроекты")Тогда
			УстановитьЗначениеДереваВключаяПодчиненные(НайденнаяСтрока, "ДобавленоВПлан", ДобавленоВПлан);
		Иначе
			НайденнаяСтрока.ДобавленоВПлан = ДобавленоВПлан;
		КонецЕсли;
	КонецЕсли;
	
	НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(Форма.РаботыРодительскогоПлана, "Работа", Работа, 15);
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ДобавленоВПлан = ДобавленоВПлан;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьВТекущемПланеМеньшеЧемВПланеЗанятости(СтрокаДерева)
	
	Если СтрокаДерева.ЗапланированоВРодительском > 0 
		И СтрокаДерева.ПлановыеТрудозатраты < СтрокаДерева.ЗапланированоВРодительском Тогда
		
		СтрокаДерева.ВТекущемПланеМеньшеЧемВПланеЗанятости = Истина;
		
	Иначе
		
		СтрокаДерева.ВТекущемПланеМеньшеЧемВПланеЗанятости = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьДоступностьРедактированияПлановыхТрудозатрат(КоллекцияСтрок)
	
	Для Каждого ПодчиненнаяСтрока Из КоллекцияСтрок Цикл
		
		Если ПодчиненнаяСтрока.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Сотрудник") Тогда
			ПодчиненнаяСтрока.РедактированиеПлановыхТрудозатратНедоступно = Истина;
			ОпределитьДоступностьРедактированияПлановыхТрудозатрат(ПодчиненнаяСтрока.ПолучитьЭлементы());
		ИначеЕсли ПодчиненнаяСтрока.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Группировка") Тогда
			ПодчиненнаяСтрока.РедактированиеПлановыхТрудозатратНедоступно = ПодчиненнаяСтрока.ПолучитьЭлементы().Количество() > 0;
		КонецЕсли;
		
		Если Не ПодчиненнаяСтрока.РедактированиеПлановыхТрудозатратНедоступно Тогда
			ОпределитьЗапланированоМеньшеЧемОстатокЧасовДляСтроки(ПодчиненнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьЗапланированоМеньшеЧемОстатокЧасовДляСтроки(СтрокаДерева)
	
	СтрокаДерева.ЗапланированоМеньшеЧемОстатокЧасов = ((СтрокаДерева.Остаток - СтрокаДерева.ПлановыеТрудозатраты )> 0);
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеЗаписейПлана

&НаКлиенте
Процедура ПриИзмененииДанныхСтрокиСоставлениеПланов(ДанныеИзмененныхСтрок = Неопределено)
	
	Если ДанныеИзмененныхСтрок = Неопределено Тогда
		ДанныеИзмененныхСтрок = Новый Массив;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СоставлениеПланов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьЗапланированоМеньшеЧемОстатокЧасовДляСтроки(ТекущиеДанные);
	ДанныеИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, ТекущиеДанные));
	ОтразитьИзменениеМассиваЗаписейПлана(ДанныеИзмененныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДанныхСтрокиПодведениеИтогов()

	ТекущиеДанные = Элементы.ПодведениеИтогов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписиПлана = ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, ТекущиеДанные);
	ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПлана)
	
	РегистрыСведений.ЗаписиПлана.ЗаписатьДанные(ДанныеЗаписиПлана);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтразитьУдалениеЗаписиПлана(ДанныеЗаписиПлана)

	РегистрыСведений.ЗаписиПлана.УдалитьЗаписьПлана(ДанныеЗаписиПлана);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтразитьИзменениеМассиваЗаписейПлана(МассивЗаписейПлана)
	
	Для Каждого ДанныеЗаписиПлана Из МассивЗаписейПлана Цикл
		
		Если ДанныеЗаписиПлана.Удалить Тогда
			РегистрыСведений.ЗаписиПлана.УдалитьЗаписьПлана(ДанныеЗаписиПлана);
		Иначе
			РегистрыСведений.ЗаписиПлана.ЗаписатьДанные(ДанныеЗаписиПлана);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(Форма, СтрокаСоставляемыеПланы)
	
	ДанныеЗаписиПлана = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
	ДанныеЗаписиПлана.ИдентификаторПлана      = Форма.ИдентификаторСоставляемогоПлана;
	ДанныеЗаписиПлана.Сотрудник               = ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(СтрокаСоставляемыеПланы).СотрудникРабота;
	ДанныеЗаписиПлана.ТипСтрокиПлана          = СтрокаСоставляемыеПланы.ТипСтрокиПлана;
	ДанныеЗаписиПлана.Группировка             = ГруппировкаДляРаботыПоСтрокеПлана(Форма, СтрокаСоставляемыеПланы);
	ДанныеЗаписиПлана.Работа                  = РаботаСтрокиПлана(СтрокаСоставляемыеПланы);
	ДанныеЗаписиПлана.ПланируемыеТрудозатраты = СтрокаСоставляемыеПланы.ПлановыеТрудозатраты;
	ДанныеЗаписиПлана.Цель                    = СтрокаСоставляемыеПланы.Цель;
	ДанныеЗаписиПлана.Комментарий             = СтрокаСоставляемыеПланы.Комментарий;
	
	Возврат ДанныеЗаписиПлана;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РаботаСтрокиПлана(СтрокаДерева)

	Если СтрокаДерева.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа") Тогда
		Возврат СтрокаДерева.СотрудникРабота;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ГруппировкаДляРаботыПоСтрокеПлана(Форма, СтрокаДерева)

	Если СтрокаДерева.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Группировка") Тогда
		Если СтрокаДерева.СотрудникРабота = Форма.ВидДеятельностиДляРаботыСОшибками Тогда
			Возврат ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками");
		Иначе
			Возврат СтрокаДерева.СотрудникРабота;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа") Тогда
		Возврат СтрокаДерева.ПолучитьРодителя().СотрудникРабота;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(Форма, СтрокаЗафиксированныеПланы)
	
	ДанныеЗаписиПлана = ПланированиеКлиентСервер.НовыйДанныеЗаписиПлана();
	ДанныеЗаписиПлана.ИдентификаторПлана      = Форма.ИдентификаторЗафиксированногоПлана;
	ДанныеЗаписиПлана.Сотрудник               = ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(СтрокаЗафиксированныеПланы).СотрудникРабота;
	ДанныеЗаписиПлана.Работа                  = РаботаСтрокиПлана(СтрокаЗафиксированныеПланы);
	ДанныеЗаписиПлана.ТипСтрокиПлана          = СтрокаЗафиксированныеПланы.ТипСтрокиПлана;
	ДанныеЗаписиПлана.Группировка             = ГруппировкаДляРаботыПоСтрокеПлана(Форма, СтрокаЗафиксированныеПланы);
	ДанныеЗаписиПлана.ПланируемыеТрудозатраты = СтрокаЗафиксированныеПланы.ПлановыеТрудозатраты;
	ДанныеЗаписиПлана.Цель                    = СтрокаЗафиксированныеПланы.Цель;
	ДанныеЗаписиПлана.Результат               = СтрокаЗафиксированныеПланы.Результат;
	ДанныеЗаписиПлана.Достигнуто              = СтрокаЗафиксированныеПланы.Достигнуто;
	ДанныеЗаписиПлана.ПеренестиВСледующийПлан = СтрокаЗафиксированныеПланы.ПеренестиРаботуВСледующийПериод;
	ДанныеЗаписиПлана.Комментарий             = СтрокаЗафиксированныеПланы.Комментарий;
	
	Возврат ДанныеЗаписиПлана;
	
КонецФункции

&НаСервере
Функция РезультатПереносаРаботВСледующийПериод(МассивПереносимыхРабот)
	
	МассивРаботДляОпределенияВПодборах = Новый Массив;
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоКПереносу", 0);
	Результат.Вставить("КоличествоПеренесено", 0);
	Результат.Вставить("ТекстОшибки", "");
	
	Если МассивПереносимыхРабот.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.КоличествоКПереносу = МассивПереносимыхРабот.Количество();
	
	ДанныеПланаПриемника = Справочники.ВидыПланов.СоставляемыйПланТекущегоПериода(ВидПлана);
	Если ДанныеПланаПриемника = Неопределено Тогда
		Результат.Вставить("ТекстОшибки",НСтр("ru = 'Не удалось найти составляемый план.'"));
	КонецЕсли;
	
	ТаблицаРабот = ТаблицаРаботПоМассивуДанныхРабот(МассивПереносимыхРабот);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаПереносимыхРабот.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ТаблицаПереносимыхРабот.Сотрудник               КАК Сотрудник,
	|	ТаблицаПереносимыхРабот.Работа                  КАК Работа,
	|	ТаблицаПереносимыхРабот.ТипСтрокиПлана          КАК ТипСтрокиПлана,
	|	ТаблицаПереносимыхРабот.Группировка             КАК Группировка,
	|	ТаблицаПереносимыхРабот.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты,
	|	ТаблицаПереносимыхРабот.Цель                    КАК Цель,
	|	ТаблицаПереносимыхРабот.Достигнуто              КАК Достигнуто,
	|	ТаблицаПереносимыхРабот.Комментарий             КАК Комментарий,
	|	ТаблицаПереносимыхРабот.ПеренестиВСледующийПлан КАК ПеренестиВСледующийПлан,
	|	ТаблицаПереносимыхРабот.Результат               КАК Результат
	|ПОМЕСТИТЬ ДанныеПереносимыхРабот
	|ИЗ
	|	&ТаблицаПереносимыхРабот КАК ТаблицаПереносимыхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ИдентификаторПланаПриемника                                             КАК ИдентификаторПлана,
	|	ДанныеПереносимыхРабот.Сотрудник                                         КАК Сотрудник,
	|	ДанныеПереносимыхРабот.Работа                                            КАК Работа,
	|	ДанныеПереносимыхРабот.ТипСтрокиПлана                                    КАК ТипСтрокиПлана,
	|	ДанныеПереносимыхРабот.Группировка                                       КАК Группировка,
	|	0                                                                        КАК ПланируемыеТрудозатраты,
	|	ДанныеПереносимыхРабот.Цель                                              КАК Цель,
	|	""""                                                                     КАК Достигнуто,
	|	ДанныеПереносимыхРабот.Комментарий                                       КАК Комментарий,
	|	Ложь                                                                     КАК ПеренестиВСледующийПлан,
	|	ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияПланируемыхРабот.ПустаяСсылка) КАК Результат
	|ИЗ
	|	ДанныеПереносимыхРабот КАК ДанныеПереносимыхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ПО ДанныеПереносимыхРабот.Сотрудник         = ЗаписиПлана.Сотрудник
	|			И ДанныеПереносимыхРабот.Работа         = ЗаписиПлана.Работа
	|			И ДанныеПереносимыхРабот.ТипСтрокиПлана = ЗаписиПлана.ТипСтрокиПлана
	|			И ДанныеПереносимыхРабот.Группировка    = ЗаписиПлана.Группировка
	|			И (ЗаписиПлана.ИдентификаторПлана       = &ИдентификаторПланаПриемника)
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаПереносимыхРабот",     ТаблицаРабот);
	Запрос.УстановитьПараметр("ИдентификаторПланаПриемника", ДанныеПланаПриемника.ИдентификаторПлана);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		РегистрыСведений.ЗаписиПлана.ЗаписатьДанные(Выборка);
		Результат.КоличествоПеренесено = Результат.КоличествоПеренесено + 1;
		
		Если Выборка.Сотрудник = ТекущийСотрудникСоставлениеПланов Тогда
			МассивРаботДляОпределенияВПодборах.Добавить(Выборка.Работа);
		КонецЕсли;
	
	КонецЦикла;
	
	Если Результат.КоличествоПеренесено > 0 Тогда
		
		ЗаполнитьДанныеСоставляемогоПлана();
		ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаРаботПоМассивуДанныхРабот(МассивДанныхРабот)
	
	ТаблицаРабот = Новый ТаблицаЗначений;
	ТаблицаРабот.Колонки.Добавить("ИдентификаторПлана",      Новый ОписаниеТипов("Число"));
	ТаблицаРабот.Колонки.Добавить("Сотрудник",               Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаРабот.Колонки.Добавить("Группировка",             Новый ОписаниеТипов(Метаданные.РегистрыСведений.ЗаписиПлана.Измерения.Группировка.Тип.Типы()));
	ТаблицаРабот.Колонки.Добавить("ТипСтрокиПлана",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСтрокПлана"));
	ТаблицаРабот.Колонки.Добавить("Работа",                  Метаданные.РегистрыСведений.ЗаписиПлана.Измерения.Работа.Тип);
	ТаблицаРабот.Колонки.Добавить("ПланируемыеТрудозатраты", Новый ОписаниеТипов("Число"));
	ТаблицаРабот.Колонки.Добавить("Цель",                    Новый ОписаниеТипов("Строка"));
	ТаблицаРабот.Колонки.Добавить("Достигнуто",              Новый ОписаниеТипов("Строка"));
	ТаблицаРабот.Колонки.Добавить("Комментарий",             Новый ОписаниеТипов("Строка"));
	ТаблицаРабот.Колонки.Добавить("ПеренестиВСледующийПлан", Новый ОписаниеТипов("Булево"));
	ТаблицаРабот.Колонки.Добавить("Результат",               Новый ОписаниеТипов("ПеречислениеСсылка.РезультатыВыполненияПланируемыхРабот"));
	
	Для Каждого ДанныеРаботы Из МассивДанныхРабот Цикл
		
		НоваяСтрока = ТаблицаРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРаботы);
		
	КонецЦикла;
	
	Возврат ТаблицаРабот;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРезультат(Результат)

	ВыделенныеСтроки = Элементы.ПодведениеИтогов.ВыделенныеСтроки;
	МассивДанныхИзмененныхСтрок = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПодведениеИтогов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Сотрудник")
			Или ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Группировка") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСтроки.Результат       = Результат;
		ДанныеСтроки.РезультатУказан = Истина;
		
		Если Результат = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.НеВыполнялась")
			Или Результат = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияПланируемыхРабот.ЧастичноВыполнена") Тогда
			
			ДанныеСтроки.ПеренестиРаботуВСледующийПериод = Истина;
			
		ИначеЕсли ДанныеСтроки.ТипРаботы <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
			
			ДанныеСтроки.ПеренестиРаботуВСледующийПериод = Ложь;
			
		КонецЕсли;
		
		МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, ДанныеСтроки));
		
	КонецЦикла;
	
	ОтразитьИзменениеМассиваЗаписейПлана(МассивДанныхИзмененныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияПлановыхТрудозатрат(ТекущиеДанные)
	
	ТекущиеДанные = Элементы.СоставлениеПланов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПересчитанныхСтрок = Новый Массив;
	
	ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, ТекущиеДанные));
		Возврат;
	КонецЕсли;
	
	СтрокаСотрудник      = СтрокаРодитель;
	СтрокаВерхнегоУровня = СтрокаРодитель.ПолучитьРодителя();
	
	Если СтрокаВерхнегоУровня = Неопределено Тогда 
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(
		              СтрокаСотрудник, 
		              "ПлановыеТрудозатраты",
		              ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику),
		              НормативПланируемогоВремени); 
		
		ДанныеПересчитанныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРодитель));
		
	Иначе
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(
		              СтрокаРодитель, 
		              "ПлановыеТрудозатраты");
		ДанныеПересчитанныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРодитель));
		
		СтрокаСотрудник = СтрокаВерхнегоУровня;
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(
		              СтрокаСотрудник, 
		              "ПлановыеТрудозатраты",
		              ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику),
		              НормативПланируемогоВремени);
		ДанныеПересчитанныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаВерхнегоУровня));
		
	КонецЕсли;
	
	ИдентификаторыПеренесенныхСтрок = Новый Массив;
	ПриИзмененииДанныхСтрокиСоставлениеПланов(ДанныеПересчитанныхСтрок);
	ОпределитьПрочиеРаботыПослеИзмененияРаботСотрудника(ЭтотОбъект, СтрокаСотрудник, ИдентификаторыПеренесенныхСтрок);
	
	Если ИдентификаторыПеренесенныхСтрок.Количество() > 0 Тогда
		
		Элементы.СоставлениеПланов.Обновить();
		
		ИдентификаторПеренесеннойСтроки = ИдентификаторыПеренесенныхСтрок[0];
		
		ПеренесеннаяСтрока = СоставлениеПланов.НайтиПоИдентификатору(ИдентификаторПеренесеннойСтроки);
		Если ПеренесеннаяСтрока <> Неопределено Тогда
			ИдентификаторРодительскойСтроки = ПеренесеннаяСтрока.ПолучитьРодителя().ПолучитьИдентификатор();
			Если Не Элементы.СоставлениеПланов.Развернут(ИдентификаторРодительскойСтроки) Тогда
				Элементы.СоставлениеПланов.Развернуть(ИдентификаторРодительскойСтроки);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.СоставлениеПланов.ТекущаяСтрока = ИдентификаторПеренесеннойСтроки;
		
	КонецЕсли;
	
	ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
	
КонецПроцедуры

#КонецОбласти

#Область ФиксацияПлана

&НаКлиенте
Процедура ПослеОтветаНаВопросФиксацияПлана(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьСоставляемыйПлан();

КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьСоставляемыйПлан()

	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.Планы.ЗафиксироватьПлан(ИдентификаторСоставляемогоПлана);
	
	ЗаполнитьДанныеПланов(Истина);
	
	СформироватьПредставлениеВидаПлана();
	СформироватьПредставленияПериодов(ЭтотОбъект);
	
	УправлениеДоступностью(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОтменитьФиксациюПланаНаСервере()

	УстановитьПривилегированныйРежим(Истина);
	
	РегистрыСведений.Планы.ОтменитьФиксациюПлана(ИдентификаторЗафиксированногоПлана);
	
	ИдентификаторСоставляемогоПлана = ИдентификаторЗафиксированногоПлана;
	НачалоПериодаСоставляемогоПлана = НачалоПериодаЗафиксированногоПлана;
	КонецПериодаСоставляемогоПлана  = КонецПериодаЗафиксированогоПлана;
	ДанныеЗафиксированогоПлана = Справочники.ВидыПланов.ПредыдущийЗафиксированныйПлан(ВидПлана, НачалоПериодаСоставляемогоПлана);
	
	Если ДанныеЗафиксированогоПлана <> Неопределено Тогда
		ИдентификаторЗафиксированногоПлана = ДанныеЗафиксированогоПлана.ИдентификаторПлана;
		НачалоПериодаЗафиксированногоПлана = ДанныеЗафиксированогоПлана.НачалоПериода;
		КонецПериодаЗафиксированогоПлана   = ДанныеЗафиксированогоПлана.КонецПериода;
	Иначе
		
		ДанныеЗафиксированогоПлана = Справочники.ВидыПланов.СледующийЗафиксированныйПлан(ВидПлана, НачалоПериодаСоставляемогоПлана);
		
		Если ДанныеЗафиксированогоПлана <> Неопределено Тогда
			ИдентификаторЗафиксированногоПлана = ДанныеЗафиксированогоПлана.ИдентификаторПлана;
			НачалоПериодаЗафиксированногоПлана = ДанныеЗафиксированогоПлана.НачалоПериода;
			КонецПериодаЗафиксированогоПлана   = ДанныеЗафиксированогоПлана.КонецПериода;
		Иначе
			
			ИдентификаторЗафиксированногоПлана = 0;
			ЕстьЗафиксированныеПланы           = Ложь;
			ЕстьПредыдущийЗафиксированныйПлан  = Ложь;
			ЕстьСледующийЗафиксированныйПлан   = Ложь;
			НачалоПериодаЗафиксированногоПлана = Дата(1,1,1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДанныеПланов(Ложь);
	ОпределитьНаличиеСледующихПредшествующихПланов();
	
	СформироватьПредставлениеВидаПлана();
	СформироватьПредставленияПериодов(ЭтотОбъект);
	
	УправлениеДоступностью(ЭтотОбъект);
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСоставлениеПлана;

КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОтменаФиксацияПлана(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьФиксациюПланаНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ИзменениеПлана

&НаСервере
Процедура ОпределитьНаличиеСледующихПредшествующихПланов()
	
	ДанныеСоставляемогоПлана = РегистрыСведений.Планы.НовыйДанныеПлана();
	ДанныеСоставляемогоПлана.ИдентификаторПлана = ИдентификаторСоставляемогоПлана;
	ДанныеСоставляемогоПлана.ВидПлана           = ВидПлана;
	ДанныеСоставляемогоПлана.НачалоПериода      = НачалоПериодаСоставляемогоПлана;
	ДанныеСоставляемогоПлана.КонецПериода       = КонецПериодаСоставляемогоПлана;
	ДанныеСоставляемогоПлана.Зафиксирован       = Ложь;
	
	ДанныеБлижайшихПланов = Справочники.ВидыПланов.ДанныеПредшествующегоСледующегоПланов(ДанныеСоставляемогоПлана);
	
	ЕстьПредыдущийСоставляемыйПлан = (ДанныеБлижайшихПланов.ДанныеПредыдущегоПлана <> Неопределено);
	ЕстьСледующийСоставляемыеПлан = Истина;
	
	Если ЕстьЗафиксированныеПланы Тогда
		
		ДанныеЗафиксированногоПлана = РегистрыСведений.Планы.НовыйДанныеПлана();
		ДанныеЗафиксированногоПлана.ИдентификаторПлана = ИдентификаторЗафиксированногоПлана;
		ДанныеЗафиксированногоПлана.ВидПлана           = ВидПлана;
		ДанныеЗафиксированногоПлана.НачалоПериода      = НачалоПериодаЗафиксированногоПлана;
		ДанныеЗафиксированногоПлана.КонецПериода       = КонецПериодаЗафиксированогоПлана;
		ДанныеЗафиксированногоПлана.Зафиксирован       = Истина;
		
		ДанныеБлижайшихПланов = Справочники.ВидыПланов.ДанныеПредшествующегоСледующегоПланов(ДанныеЗафиксированногоПлана);
		
		ЕстьПредыдущийЗафиксированныйПлан = (ДанныеБлижайшихПланов.ДанныеПредыдущегоПлана <> Неопределено);
		ЕстьСледующийЗафиксированныйПлан  = (ДанныеБлижайшихПланов.ДанныеСледующегоПлана <> Неопределено);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПлан(Направление, ТипПлана)
	
	Если ТипПлана = "Составление" Тогда
		
		Если Направление = "Предыдущий" Тогда
			
			ДанныеПлана = Справочники.ВидыПланов.ПредыдущийСоставляемыйПлан(ВидПлана, НачалоПериодаСоставляемогоПлана);
			
		Иначе
			
			ДанныеПлана = Справочники.ВидыПланов.СледующийСоставляемыйПлан(ВидПлана, КонецПериодаСоставляемогоПлана, Истина);
			
		КонецЕсли;
		
		Если ДанныеПлана = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторСоставляемогоПлана = ДанныеПлана.ИдентификаторПлана;
		НачалоПериодаСоставляемогоПлана = ДанныеПлана.НачалоПериода;
		КонецПериодаСоставляемогоПлана  = ДанныеПлана.КонецПериода;
		
		ЗаполнитьДанныеСоставляемогоПлана();
		ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов();
		
	Иначе
		
		Если Направление = "Предыдущий" Тогда
			
			ДанныеПлана = Справочники.ВидыПланов.ПредыдущийЗафиксированныйПлан(ВидПлана, НачалоПериодаЗафиксированногоПлана);
			
		Иначе
			
			ДанныеПлана = Справочники.ВидыПланов.СледующийЗафиксированныйПлан(ВидПлана, КонецПериодаЗафиксированогоПлана);
			
		КонецЕсли;
		
		Если ДанныеПлана = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторЗафиксированногоПлана = ДанныеПлана.ИдентификаторПлана;
		НачалоПериодаЗафиксированногоПлана = ДанныеПлана.НачалоПериода;
		КонецПериодаЗафиксированогоПлана   = ДанныеПлана.КонецПериода;
		
		Если ЕстьЗафиксированныеПланы Тогда
			ЗаполнитьДанныеЗафиксированногоПлана();
		КонецЕсли;
		
	КонецЕсли;
	
	ПослеИзмененияПланаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыОткрытияФормыВыбораПлана()

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Зафиксирован",               Ложь);
	ПараметрыОткрытия.Вставить("ВидПлана",                   ПредопределенноеЗначение("Справочник.ВидыПланов.ПустаяСсылка"));
	ПараметрыОткрытия.Вставить("ИдентификаторТекущегоПлана", Неопределено);
	ПараметрыОткрытия.Вставить("РежимВыбора",                Истина);
	
	Возврат ПараметрыОткрытия;

КонецФункции

&НаКлиенте
Процедура ВыборПланаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Зафиксирован Тогда
		
		Если Результат.ИдентификаторПлана = ИдентификаторЗафиксированногоПлана Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторЗафиксированногоПлана = Результат.ИдентификаторПлана;
		НачалоПериодаЗафиксированногоПлана = Результат.НачалоПериода;
		КонецПериодаЗафиксированогоПлана   = Результат.КонецПериода;
		
		ПослеВыбораПланаНаСервере(ДополнительныеПараметры.Зафиксирован);
		
	Иначе
		
		Если Результат.ИдентификаторПлана = ИдентификаторСоставляемогоПлана Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторСоставляемогоПлана = Результат.ИдентификаторПлана;
		НачалоПериодаСоставляемогоПлана = Результат.НачалоПериода;
		КонецПериодаСоставляемогоПлана  = Результат.КонецПериода;
		
		ПослеВыбораПланаНаСервере(ДополнительныеПараметры.Зафиксирован);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеВыбораПланаНаСервере(Зафиксирован)
	
	Если Зафиксирован Тогда
		
		ЗаполнитьДанныеЗафиксированногоПлана();
		
	Иначе
		
		ЗаполнитьДанныеСоставляемогоПлана();
		ОбработатьИзменениеТекущегоСотрудникаСоставлениеПланов();
		
	КонецЕсли;
	
	ПослеИзмененияПланаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияПланаНаСервере()
	
	ОпределитьНаличиеСледующихПредшествующихПланов();
	СформироватьПредставленияПериодов(ЭтотОбъект);
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаПодбораТехПроектыЗадачи()
	
	Для Каждого СтрокаДерева Из ТехПроектыЗадачи.ПолучитьЭлементы() Цикл
		
		ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
		
		Если ТипЗнч(СтрокаДерева.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Элементы.ТехПроектыЗадачи.Развернут(ИдентификаторСтроки) Тогда
			Элементы.ТехПроектыЗадачи.Развернуть(ИдентификаторСтроки);
		КонецЕсли;
		
		Если ОтображатьВПодбореТехПроектовИЗадач = "ОчередиРабот" Тогда
			
			Для Каждого СтрокаТехПроекты Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если ТипЗнч(СтрокаТехПроекты.Работа) <> Тип("СправочникСсылка.ТехническиеПроекты") Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторСтроки = СтрокаТехПроекты.ПолучитьИдентификатор();
				
				Если Не Элементы.ТехПроектыЗадачи.Развернут(ИдентификаторСтроки) Тогда
					Элементы.ТехПроектыЗадачи.Развернуть(ИдентификаторСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ИзменениеВидаПлана

&НаКлиенте
Процедура ОпределитьНеобходимостьОбновленияПослеИзмененияВидаПлана(Источник)
	
	Если Источник = ВидПлана Тогда
		
		КлючиРазвернутыхУзловДереваСоставление = КлючиРазвернутыхУзловДерева("СоставлениеПланов", "СотрудникРабота");
		КлючТекущейСтрокиДереваСоставление     = КлючТекущейСтрокиДерева("СоставлениеПланов", "СотрудникРабота");
		КлючиРазвернутыхУзловДереваПодведение = КлючиРазвернутыхУзловДерева("ПодведениеИтогов", "СотрудникРабота");
		КлючТекущейСтрокиДереваПодведение     = КлючТекущейСтрокиДерева("ПодведениеИтогов", "СотрудникРабота");
		
		ПриИзмененииВидаПланаНаСервере();
		
		ВосстановитьРазвернутыеУзлыДерева("СоставлениеПланов", "СотрудникРабота",      КлючиРазвернутыхУзловДереваСоставление);
		ВосстановитьТекущуюСтрокуДереваПоКлючу("СоставлениеПланов", "СотрудникРабота", КлючТекущейСтрокиДереваСоставление);
		ВосстановитьРазвернутыеУзлыДерева("ПодведениеИтогов", "СотрудникРабота",      КлючиРазвернутыхУзловДереваПодведение);
		ВосстановитьТекущуюСтрокуДереваПоКлючу("ПодведениеИтогов", "СотрудникРабота", КлючТекущейСтрокиДереваПодведение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаПланаНаКлиенте()
	
	Если ВидПлана <> ТекущийВидПлана Тогда
		
		ПриИзмененииВидаПланаНаСервере();
		
		ПослеВыводаПодбораТехПроектыЗадачи();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаПлана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидПлана = Результат;
	ПриИзмененииВидаПланаНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаПланаНаСервере(ВидПланаИзменен = Ложь)
	
	Если ВидПланаИзменен = Ложь
		И ТекущийВидПлана <> ВидПлана Тогда
		
		ВидПланаИзменен = Истина;
		ТекущийВидПлана = ВидПлана;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		
		ОчиститьВсеТаблицыФормы();
		ОчиститьДанныеПлановВФорме(ЭтотОбъект);
		
	Иначе
		
		ЗаполнитьДанныеВидаПлана();
		ЗаполнитьДанныеПланов(ВидПланаИзменен);
		
	КонецЕсли;
	
	СформироватьПредставлениеВидаПлана();
	СформироватьПредставленияПериодов(ЭтотОбъект);
	
	УправлениеДоступностью(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДополнительныхДанных

&НаКлиенте
Процедура ОпределитьНеобходимостьОбновленияДанныхРаботы(Работа)
	
	СтрокиДеревьевРаботы = Новый Соответствие;
	
	ИдентификаторыСтрок = Новый Массив;
	
	Для Каждого СтрокаДерева Из СоставлениеПланов.ПолучитьЭлементы() Цикл
		
		НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаДерева, "СотрудникРабота", Работа, 2);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ИдентификаторыСтрок.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторыСтрок.Количество() > 0 Тогда
		
		СтрокиДеревьевРаботы.Вставить("СоставлениеПланов", ИдентификаторыСтрок);
		
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	
	Для Каждого СтрокаДерева Из ПодведениеИтогов.ПолучитьЭлементы() Цикл
		
		НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаДерева, "СотрудникРабота", Работа, 2);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ИдентификаторыСтрок.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторыСтрок.Количество() > 0 Тогда
		
		СтрокиДеревьевРаботы.Вставить("ПодведениеИтогов", ИдентификаторыСтрок);
		
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Работа", Работа);
	
	ИдентификаторыСтрок = Новый Массив;
	НайденныеСтроки = НевыпоненоПредыдущиеПланы.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	Если ИдентификаторыСтрок.Количество() > 0 Тогда
		
		СтрокиДеревьевРаботы.Вставить("НевыпоненоПредыдущиеПланы", ИдентификаторыСтрок);
		
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	
	НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(Ошибки, "Работа", Работа, 2);
	Если НайденнаяСтрока <> Неопределено Тогда
		ИдентификаторыСтрок = Новый Массив;
		ИдентификаторыСтрок.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
		СтрокиДеревьевРаботы.Вставить("Ошибки", ИдентификаторыСтрок);;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	НайденныеСтроки = ВидыДеятельности.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ИдентификаторыСтрок.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	Если ИдентификаторыСтрок.Количество() > 0 Тогда
		СтрокиДеревьевРаботы.Вставить("ВидыДеятельности", ИдентификаторыСтрок);
	КонецЕсли;
	
	НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ТехПроектыЗадачи, "Работа", Работа, 10);
	Если НайденнаяСтрока <> Неопределено Тогда
		ИдентификаторыСтрок = Новый Массив;
		ИдентификаторыСтрок.Добавить(НайденнаяСтрока.ПолучитьИдентификатор());
		СтрокиДеревьевРаботы.Вставить("ТехПроектыЗадачи", ИдентификаторыСтрок);;
	КонецЕсли;
	
	Если СтрокиДеревьевРаботы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСостоянияРаботы = ДанныеСостоянияРаботы(Работа);
	
	Если ДанныеСостоянияРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеРаботыВСтрокахДерева(ДанныеСостоянияРаботы, СтрокиДеревьевРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРаботыВСтрокахДерева(ДанныеСостоянияРаботы, СтрокиДеревьевРаботы)
	
	Для Каждого ДанныеСтрокДерева Из СтрокиДеревьевРаботы Цикл
		
		Для Каждого ИдентификаторСтроки Из ДанныеСтрокДерева.Значение Цикл
			
			СтрокаДерева = ЭтотОбъект[ДанныеСтрокДерева.Ключ].НайтиПоИдентификатору(ИдентификаторСтроки);
			
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеСтрокДерева.Ключ = "СоставлениеПланов"
				Или ДанныеСтрокДерева.Ключ = "ПодведениеИтогов" Тогда
				
				СтрокаДерева.СотрудникРабота =  ДанныеСостоянияРаботы.Работа;
				СтрокаДерева.Статус         = ДанныеСостоянияРаботы.Статус;
				СтрокаДерева.ДатаСтатуса    = ДанныеСостоянияРаботы.ДатаСтатуса;
				СтрокаДерева.СрокВыполнения = ДанныеСостоянияРаботы.СрокВыполнения;
				
			Иначе
				
				СтрокаДерева.Работа         = ДанныеСостоянияРаботы.Работа;
				СтрокаДерева.Статус         = ДанныеСостоянияРаботы.Статус;
				СтрокаДерева.ДатаСтатуса    = ДанныеСостоянияРаботы.ДатаСтатуса;
				СтрокаДерева.СрокВыполнения = ДанныеСостоянияРаботы.СрокВыполнения;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСостоянияРаботы(Работа)
	
	МассивОшибок              = Новый Массив;
	МассивЗадач               = Новый Массив;
	МассивТехническихПроектов = Новый Массив;
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		МассивТехническихПроектов.Добавить(Работа);
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		МассивЗадач.Добавить(Работа);
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.Ошибки") Тогда
		МассивОшибок.Добавить(Работа);
	КонецЕсли;
	
	РезультатЗапроса = Планирование.РезультатЗапросаДляДополненияДанныхРабот(МассивОшибок, МассивЗадач, МассивТехническихПроектов);
	
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ДанныеРаботы = Новый Структура;
	ДанныеРаботы.Вставить("Статус",         Выборка.Статус);
	ДанныеРаботы.Вставить("ДатаСтатуса",    Выборка.ДатаИзмененияСтатуса);
	ДанныеРаботы.Вставить("СрокВыполнения", Выборка.СрокВыполнения);
	ДанныеРаботы.Вставить("Работа",         Выборка.Ссылка);
	
	Возврат ДанныеРаботы;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНеобходимостьПолученияДополнительныхДанных()
	
	Если ТребуетсяПолучениеДанныхВыполненныхРабот Тогда
		
		ПолучитьДанныеФактическиВыполненныхРабот();
		
	КонецЕсли;
	
	Если ТребуетсяПолучениеОстатковПланируемыхРабот Тогда
		
		ПолучитьДанныеОстатковПланируемыхРабот();
		
	КонецЕсли;
	
	Если ТребуетсяПолучениеОстатковПодбор Тогда
		
		ПолучитьДанныеОстатковПодбор();
		
	КонецЕсли;
	
	Если ТребуетсяПолучениеДанныхЗадачПланаЗанятости Тогда
		
		ПолучитьДанныеПодобранныхЗадачПоПлануЗанятости();
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьНеобходимостьПолученияДополнительныхДанных", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПодобранныхЗадачПоПлануЗанятости()
	
	Если Не ЗначениеЗаполнено(РодительскийВидПлана)
		Или РаботыРодительскогоПлана.ПолучитьЭлементы().Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеДляПолучения = ДанныеДляПолученияПодборПланЗанятости(); 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидыДеятельности", ДанныеДляПолучения.ПодобранныеВидыДеятельности);
	
	Если ДанныеДляПолучения.ПодобранныеЗадачи.Количество() = 0 Тогда
		
		ВывестиДанныеПодобранныхЗадачПодбора( Истина , ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ДанныеДляПолучения", ДанныеДляПолучения.ПодобранныеЗадачи);
	
	ДлительнаяОперация = ДанныеПодобранныхЗадачПланЗанятости(ПараметрыПолучения,
	                                                         УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Ложь;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПолучитьДанныеПодобранныхЗадачПланаЗанятостиЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДанныеПодобранныхЗадачПланаЗанятостиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПодобранныхЗадачПланаЗанятостиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДанныеПодобранныхЗадачПодбора(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли

КонецПроцедуры 

&НаКлиенте
Процедура ВывестиДанныеПодобранныхЗадачПодбора(АдресРезультата, ДополнительныеПараметры)

	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		ДанныеОстатокПодбор = ДанныеВременногоХранилища(АдресРезультата);
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из РаботыРодительскогоПлана.ПолучитьЭлементы() Цикл
		
		ОбработатьСтрокуПодбораПланаЗанятости(СтрокаДерева, ДанныеОстатокПодбор, ДополнительныеПараметры.ВидыДеятельности);
		
	КонецЦикла;
	
	Для Каждого СтрокаПодбора Из РаботыРодительскогоПлана.ПолучитьЭлементы() Цикл
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаПодбора, "ПлановыеТрудозатраты");
		ОпределитьВТекущемПланеМеньшеЧемВПланеЗанятости(СтрокаПодбора);
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаПодбора.ПолучитьЭлементы() Цикл
			ОпределитьВТекущемПланеМеньшеЧемВПланеЗанятости(ПодчиненнаяСтрока);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуПодбораПланаЗанятости(СтрокаДерева, ДанныеОстатокПодбор, ВидыДятельности) 
	
	Если ТипЗнч(СтрокаДерева.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		Если ДанныеОстатокПодбор = Неопределено Тогда
			ЗапланированоПоСтроке = 0;
		Иначе
			
			Если СтрокаДерева.Работа = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка") Тогда
				РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
				ЗапланированоПоСтроке = ДанныеОстатокПодбор.ДанныеЭтапов.Получить(РодительскаяСтрока.Работа);
			Иначе
				ЗапланированоПоСтроке = ДанныеОстатокПодбор.ДанныеЭтапов.Получить(СтрокаДерева.Работа);
			КонецЕсли;
			
			Если ЗапланированоПоСтроке = Неопределено Тогда 
				
				ДанныеРаботы = ДанныеОстатокПодбор.ДанныеРабот.Получить(СтрокаДерева.Работа);
				Если ДанныеРаботы = Неопределено Тогда
					ЗапланированоПоСтроке = 0;
				Иначе
					ЗапланированоПоСтроке = ДанныеРаботы.Запланировано;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
		СтрокаДерева.ПлановыеТрудозатраты = ЗапланированоПоСтроке;
	
	ИначеЕсли ТипЗнч(СтрокаДерева.Работа) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
		
		ЗапланированоПоСтроке = ВидыДятельности.Получить(СтрокаДерева.Работа);
		
		Если ЗапланированоПоСтроке = Неопределено Тогда 
			СтрокаДерева.ПлановыеТрудозатраты = 0;
		Иначе
			СтрокаДерева.ПлановыеТрудозатраты = ЗапланированоПоСтроке;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ОбработатьСтрокуПодбораПланаЗанятости(ПодчиненнаяСтрока, ДанныеОстатокПодбор, ВидыДятельности)
		
	КонецЦикла;
	
	Если ТипЗнч(СтрокаДерева.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаДерева, "ПлановыеТрудозатраты");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПодобранныхЗадачПланЗанятости(ДанныеДляПолучения, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолучения", ДанныеДляПолучения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных задач по плану занятости'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеЗадачПланЗанятости",
	                                                       ПараметрыПроцедуры,
	                                                       ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Функция ДанныеДляПолученияПодборПланЗанятости()
	
	ДанныеДляПолучения = Новый Структура;
	ДанныеДляПолучения.Вставить("ПодобранныеЗадачи",          Новый Массив);
	ДанныеДляПолучения.Вставить("ПодобранныеВидыДеятельности",Новый Соответствие);
	
	СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СоставлениеПланов,
	                                                                             "СотрудникРабота", 
	                                                                             ТекущийСотрудникСоставлениеПланов,
	                                                                             0);
	
	Если СтрокаСотрудник = Неопределено Тогда
		Возврат ДанныеДляПолучения;
	КонецЕсли;
	
	Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
		
		Если ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
			
			ДанныеДляПолучения.ПодобранныеВидыДеятельности.Вставить(СтрокаГруппировка.СотрудникРабота, СтрокаГруппировка.ПлановыеТрудозатраты);
			
		КонецЕсли;
		
		Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
			
			Если ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
				
				Данные = Новый Структура;
				Данные.Вставить("Задача",               СтрокаРабота.СотрудникРабота);
				Данные.Вставить("ПлановыеТрудозатраты", СтрокаРабота.ПлановыеТрудозатраты);
				
				ДанныеДляПолучения.ПодобранныеЗадачи.Добавить(Данные);
				
			ИначеЕсли ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
				
				ДанныеДляПолучения.ПодобранныеВидыДеятельности.Вставить(СтрокаРабота.СотрудникРабота, СтрокаРабота.ПлановыеТрудозатраты);
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеДляПолучения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеОстатковПодбор()
	
	ДанныеДляПолучения = ДанныеДляПолученияОстатковПодбор();
	
	Если ДанныеДляПолучения.РаботыПодбор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("РаботыПодбор",                        ДанныеДляПолучения.РаботыПодбор);
	ПараметрыПолучения.Вставить("ВидСогласуемогоРесурсаПлановыхРабот", ДанныеДляПолучения.ВидСогласуемогоРесурсаПлановыхРабот);
	
	ДлительнаяОперация = ДанныеОстатковПодборДлительнаяОперация(ПараметрыПолучения,
	                                                            УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПолучениеОстатковПодбор = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СоответствиеРаботИдентификаторовСтрокРодительскиеЗадачи", ДанныеДляПолучения.СоответствиеРаботИдентификаторовСтрокРодительскиеЗадачи);
	ДополнительныеПараметры.Вставить("СоответствиеРаботИдентификаторовСтрокТехПроектыЗадачи",   ДанныеДляПолучения.СоответствиеРаботИдентификаторовСтрокТехПроектыЗадачи);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПолучитьДанныеОстатковПодборЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДанныеОстатковПодборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДанныеДляПолученияОстатковПоСтрокеДерева(СтрокаДерева, РаботыПодбор, СоответствиеРаботИдентификаторовСтрок)

	Если ТипЗнч(СтрокаДерева.Работа) = Тип("СправочникСсылка.ТехническиеПроекты")
		Или ТипЗнч(СтрокаДерева.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса")
		Или ТипЗнч(СтрокаДерева.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
		
		РаботыПодбор.Добавить(СтрокаДерева.Работа);
		
		МассивСтрокДерева = СоответствиеРаботИдентификаторовСтрок.Получить(СтрокаДерева.Работа);
		
		Если МассивСтрокДерева = Неопределено Тогда
			
			МассивСтрокДерева = Новый Массив;
			МассивСтрокДерева.Добавить(СтрокаДерева.ПолучитьИдентификатор());
			СоответствиеРаботИдентификаторовСтрок.Вставить(СтрокаДерева.Работа, МассивСтрокДерева);
			
		Иначе
			
			МассивСтрокДерева.Добавить(СтрокаДерева.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ДобавитьДанныеДляПолученияОстатковПоСтрокеДерева(ПодчиненнаяСтрока, РаботыПодбор, СоответствиеРаботИдентификаторовСтрок)
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляПолученияОстатковПодбор()

	Данные = Новый Структура;
	Данные.Вставить("ВидСогласуемогоРесурсаПлановыхРабот", ВидСогласуемогоРесурсаПлановыхРабот);
	
	РаботыПодбор = Новый Массив;
	СоответствиеРаботИдентификаторовСтрок = Новый Соответствие;
	
	Для Каждого СтрокаДерева Из ТехПроектыЗадачи.ПолучитьЭлементы() Цикл
		
		ДобавитьДанныеДляПолученияОстатковПоСтрокеДерева(СтрокаДерева, РаботыПодбор, СоответствиеРаботИдентификаторовСтрок);
		
	КонецЦикла;
	
	Данные.Вставить("СоответствиеРаботИдентификаторовСтрокТехПроектыЗадачи", СоответствиеРаботИдентификаторовСтрок);
	
	СоответствиеРаботИдентификаторовСтрок = Новый Соответствие;
	
	Для Каждого СтрокаДерева Из РаботыРодительскогоПлана.ПолучитьЭлементы() Цикл
		
		ДобавитьДанныеДляПолученияОстатковПоСтрокеДерева(СтрокаДерева, РаботыПодбор, СоответствиеРаботИдентификаторовСтрок);
		
	КонецЦикла;
	
	Данные.Вставить("СоответствиеРаботИдентификаторовСтрокРодительскиеЗадачи", СоответствиеРаботИдентификаторовСтрок); 
	Данные.Вставить("РаботыПодбор", РаботыПодбор);
	
	Возврат Данные;

КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеОстатковПодборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДанныеОстатковПодбор(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеОстатковПодбор(АдресРезультата, ДополнительныеПараметры)
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОстатокПодбор = ДанныеВременногоХранилища(АдресРезультата);
	Если ДанныеОстатокПодбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеРаботы Из ДанныеОстатокПодбор Цикл
		
		Запланировано  = ДанныеРаботы.Запланировано;
		ПоУчетуВремени = ДанныеРаботы.ДанныеУчетВремени;
		Остаток        = Запланировано - ПоУчетуВремени;
		
		МассивСтрокДерева = ДополнительныеПараметры.СоответствиеРаботИдентификаторовСтрокТехПроектыЗадачи.Получить(ДанныеРаботы.Работа);
		
		Если МассивСтрокДерева <> Неопределено Тогда
			
			Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
			
			СтрокаДерева = ТехПроектыЗадачи.НайтиПоИдентификатору(ЭлементМассива);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ТекстДанныеЧасовПоЗадаче                 = СтрШаблон(НСтр("ru = '%1 из %2'"), Остаток, Запланировано);
				СтрокаДерева.ОстатокЧасовПоЗадачеМеньшеЧемПланируется = (Остаток < 0);
				СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен     = Ложь;
			КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли;
		
		МассивСтрокДерева = ДополнительныеПараметры.СоответствиеРаботИдентификаторовСтрокРодительскиеЗадачи.Получить(ДанныеРаботы.Работа);
		
		Если МассивСтрокДерева <> Неопределено Тогда
			
			Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
			
			СтрокаДерева = РаботыРодительскогоПлана.НайтиПоИдентификатору(ЭлементМассива);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ТекстДанныеЧасовПоЗадаче                 = СтрШаблон(НСтр("ru = '%1 из %2'"), Остаток, Запланировано);
				СтрокаДерева.ОстатокЧасовПоЗадачеМеньшеЧемПланируется = (Остаток < 0);
				СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен     = Ложь;
			КонецЕсли;
			
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из ДополнительныеПараметры.СоответствиеРаботИдентификаторовСтрокТехПроектыЗадачи Цикл
		
		Для Каждого ЭлементМассива Из ЭлементСоответствия.Значение Цикл
			
			СтрокаДерева = ТехПроектыЗадачи.НайтиПоИдентификатору(ЭлементМассива);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из ДополнительныеПараметры.СоответствиеРаботИдентификаторовСтрокРодительскиеЗадачи Цикл
		
		Для Каждого ЭлементМассива Из ЭлементСоответствия.Значение Цикл
			
			СтрокаДерева = РаботыРодительскогоПлана.НайтиПоИдентификатору(ЭлементМассива);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОстатковПодборДлительнаяОперация(ДанныеДляПолучения, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолучения", ДанныеДляПолучения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных остатков для подбора'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеОстатковПодбор",
	                                                       ПараметрыПроцедуры,
	                                                       ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеОстатковПланируемыхРабот()
	
	ДанныеДляПолучения = ДанныеДляПолученияОстатковПланируемыхРабот();
	
	Если ДанныеДляПолучения.ПланируемыеРаботы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ПланируемыеРаботы",                   ДанныеДляПолучения.ПланируемыеРаботы);
	ПараметрыПолучения.Вставить("ВидСогласуемогоРесурсаПлановыхРабот", ДанныеДляПолучения.ВидСогласуемогоРесурсаПлановыхРабот);
	
	ДлительнаяОперация = ДанныеОстатковПланируемыхРаботДлительнаяОперация(ПараметрыПолучения,
	                                                                      УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПолучениеОстатковПланируемыхРабот = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СоответствиеРаботИдентификаторовСтрок", ДанныеДляПолучения.СоответствиеРаботИдентификаторовСтрок);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПолучитьДанныеОстатковЗапланированныхРаботЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДанныеОстатковЗапланированныхРаботЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОстатковПланируемыхРаботДлительнаяОперация(ДанныеДляПолучения, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолучения", ДанныеДляПолучения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных остатков выполненных работ'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеОстатковПланируемыхРабот",
	                                                       ПараметрыПроцедуры,
	                                                       ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеОстатковЗапланированныхРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДанныеОстатковЗапланированныхРабот(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеОстатковЗапланированныхРабот(АдресРезультата, ДополнительныеПараметры)
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеОстатокПлановыеРаботы = ДанныеВременногоХранилища(АдресРезультата);
	Если ДанныеОстатокПлановыеРаботы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеРаботы Из ДанныеОстатокПлановыеРаботы Цикл
		
		Запланировано  = ДанныеРаботы.Запланировано;
		ПоУчетуВремени = ДанныеРаботы.ДанныеУчетВремени;
		Остаток        = Запланировано - ПоУчетуВремени;
		
		МассивСтрокДерева = ДополнительныеПараметры.СоответствиеРаботИдентификаторовСтрок.Получить(ДанныеРаботы.Работа);
		
		Если МассивСтрокДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
			
			СтрокаДерева = СоставлениеПланов.НайтиПоИдентификатору(ЭлементМассива);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ТекстДанныеЧасовПоЗадаче                 = СтрШаблон(НСтр("ru = '%1 из %2'"), Остаток, Запланировано);
				СтрокаДерева.ОстатокЧасовПоЗадачеМеньшеЧемПланируется = (Остаток < 0); 
				СтрокаДерева.Остаток                                  =  Остаток;
				СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен     = Ложь; 
				ОпределитьЗапланированоМеньшеЧемОстатокЧасовДляСтроки(СтрокаДерева);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из ДополнительныеПараметры.СоответствиеРаботИдентификаторовСтрок Цикл
		
		Для Каждого ЭлементМассива Из ЭлементСоответствия.Значение Цикл
			
			СтрокаДерева = СоставлениеПланов.НайтиПоИдентификатору(ЭлементМассива);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ОстатокЗапланированныхЧасовНеПолучен = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляПолученияОстатковПланируемыхРабот()

	Данные = Новый Структура;
	Данные.Вставить("ИдентификаторПлана",                  ИдентификаторСоставляемогоПлана);
	Данные.Вставить("ВидСогласуемогоРесурсаПлановыхРабот", ВидСогласуемогоРесурсаПлановыхРабот);
	
	ПланируемыеРаботы = Новый Массив;
	СоответствиеРаботИдентификаторовСтрок = Новый Соответствие;
	
	Для Каждого СтрокаСотрудник Из СоставлениеПланов.ПолучитьЭлементы() Цикл
		
		Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
			
			Если СтрокаГруппировка.ОстатокЗапланированныхЧасовНеПолучен Тогда
				ПланируемыеРаботы.Добавить(СтрокаГруппировка.СотрудникРабота);
			КонецЕсли;
			
			МассивСтрокДерева = СоответствиеРаботИдентификаторовСтрок.Получить(СтрокаГруппировка.СотрудникРабота);
			
			Если МассивСтрокДерева = Неопределено Тогда
				
				МассивСтрокДерева = Новый Массив;
				МассивСтрокДерева.Добавить(СтрокаГруппировка.ПолучитьИдентификатор());
				СоответствиеРаботИдентификаторовСтрок.Вставить(СтрокаГруппировка.СотрудникРабота, МассивСтрокДерева);
				
			Иначе
				
				МассивСтрокДерева.Добавить(СтрокаГруппировка.ПолучитьИдентификатор());
				
			КонецЕсли;
			
			Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
				
				Если СтрокаРабота.ОстатокЗапланированныхЧасовНеПолучен Тогда
					ПланируемыеРаботы.Добавить(СтрокаРабота.СотрудникРабота);
				КонецЕсли;
				
				МассивСтрокДерева = СоответствиеРаботИдентификаторовСтрок.Получить(СтрокаРабота.СотрудникРабота);
				
				Если МассивСтрокДерева = Неопределено Тогда
					
					МассивСтрокДерева = Новый Массив;
					МассивСтрокДерева.Добавить(СтрокаРабота.ПолучитьИдентификатор());
					СоответствиеРаботИдентификаторовСтрок.Вставить(СтрокаРабота.СотрудникРабота, МассивСтрокДерева);
					
				Иначе
					
					МассивСтрокДерева.Добавить(СтрокаРабота.ПолучитьИдентификатор());
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Данные.Вставить("ПланируемыеРаботы", ПланируемыеРаботы);
	Данные.Вставить("СоответствиеРаботИдентификаторовСтрок", СоответствиеРаботИдентификаторовСтрок);
	
	Возврат Данные;

КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеФактическиВыполненныхРабот()
	
	ТребуетсяПолучениеДанныхВыполненныхРабот = Ложь;
	
	ДанныеДляПолучения = ДанныеДляПолученияВыполненныхРабот();
	
	Если ДанныеДляПолучения.РаботыСотрудников.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПолучитьДанныеВыполненныхРаботДлительнаяОперация(ДанныеДляПолучения,
	                                                                      УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиЧьиДанныеПолучаются = Новый Массив;
	Для Каждого РаботыСотрудника Из ДанныеДляПолучения.РаботыСотрудников Цикл
		СотрудникиЧьиДанныеПолучаются.Добавить(РаботыСотрудника.Сотрудник);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сотрудники", СотрудникиЧьиДанныеПолучаются);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПолучитьДанныеФактическиВыполненныхРаботЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьДанныеФактическиВыполненныхРаботЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыполненныхРаботДлительнаяОперация(ДанныеДляПолученияВыполненныхРабот, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолученияВыполненныхРабот", ДанныеДляПолученияВыполненныхРабот);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных фактически выполненных работ'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеФактическиеВыполненныхРабот",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеФактическиВыполненныхРаботЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДанныеФактическиВыполненныхРабот(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСотрудникаРаботаСОшибками(СтрокаСотрудник)

	СтрокаРаботаСОшибками = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(
		СтрокаСотрудник,
		"СотрудникРабота", 
		ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками"),
		2);
		
	Если СтрокаРаботаСОшибками = Неопределено Тогда
		
		СтрокаРаботаСОшибками = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(
			СтрокаСотрудник,
			"СотрудникРабота", 
			ВидДеятельностиДляРаботыСОшибками,
			2)
		
	КонецЕсли;
	
	Возврат СтрокаРаботаСОшибками;

КонецФункции

&НаКлиенте
Процедура ВывестиДанныеФактическиВыполненныхРабот(АдресРезультата, ДополнительныеПараметры)
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФактическиВыполненныхРабот = ДанныеВременногоХранилищаВыполненныеРаботы(АдресРезультата, УникальныйИдентификатор);
	
	ДанныеПрочихРабот.Очистить();
	
	Если ДанныеФактическиВыполненныхРабот = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДанныеСотрудника Из ДанныеФактическиВыполненныхРабот Цикл
		
		СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ПодведениеИтогов, "СотрудникРабота", ДанныеСотрудника.Сотрудник, 0);
		
		Если СтрокаСотрудник = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ПлановаяРабота Из ДанныеСотрудника.ПлановыеРаботы Цикл
			
			СтрокаРабота = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник, "СотрудникРабота", ПлановаяРабота.Работа, 2);
			
			Если СтрокаРабота = Неопределено Тогда
				
				Если ПлановаяРабота.Работа = ВидДеятельностиДляРаботыСОшибками
					Или ТипЗнч(ПлановаяРабота.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
					
					СтрокаРаботаСОшибками = СтрокаСотрудникаРаботаСОшибками(СтрокаСотрудник);
					
					Если СтрокаРаботаСОшибками = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Если ПлановаяРабота.Работа = ВидДеятельностиДляРаботыСОшибками Тогда
						
						СтрокаРаботаСОшибками.ФактическиеТрудозатраты = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ПлановаяРабота.Длительность) 
						                                                + СтрокаРаботаСОшибками.ФактическиеТрудозатраты;
						
					Иначе
						
						НоваяСтрока = СтрокаРаботаСОшибками.ПолучитьЭлементы().Добавить();
						НоваяСтрока.СотрудникРабота         = ПлановаяРабота.Работа;
						НоваяСтрока.ЭтоВнеплановаяОшибка    = Истина;
						НоваяСтрока.ФактическиеТрудозатраты = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ПлановаяРабота.Длительность);
						СтрокаРаботаСОшибками.ФактическиеТрудозатраты = СтрокаРаботаСОшибками.ФактическиеТрудозатраты + НоваяСтрока.ФактическиеТрудозатраты;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаРабота.ФактическиеТрудозатраты = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(ПлановаяРабота.Длительность);
			
			СтрокаРодитель = СтрокаРабота.ПолучитьРодителя();
			Если СтрокаРодитель <> Неопределено Тогда
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаРодитель, "ФактическиеТрудозатраты");
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеСотрудника.КоличествоВнеплановыхРабот > 0 Тогда
			
			СтрокаПрочиеРаботы = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
			                                                                                "СотрудникРабота", 
			                                                                                ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПрочиеРаботы"),
			                                                                                0);
			
			Если СтрокаПрочиеРаботы = Неопределено Тогда
				
				СтрокаПрочиеРаботы = СтрокаСотрудник.ПолучитьЭлементы().Добавить();
				СтрокаПрочиеРаботы.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПрочиеРаботы");
				
			КонецЕсли;
			
			СтрокаПрочиеРаботы.ФактическиеТрудозатраты    = ДанныеСотрудника.ДлительностьВнеплановыхРабот;
			
			НоваяСтрока                           = ДанныеПрочихРабот.Добавить();
			НоваяСтрока.Сотрудник                 = ДанныеСотрудника.Сотрудник;
			НоваяСтрока.АдресВоВременномХранилище = ДанныеСотрудника.ОтчетВнеплановыеРаботы
			
		КонецЕсли;
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаСотрудник, "ФактическиеТрудозатраты");
		
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из ПодведениеИтогов.ПолучитьЭлементы() Цикл
		Если ДополнительныеПараметры.Сотрудники.Найти(СтрокаДерева.СотрудникРабота) <> Неопределено Тогда
			УстановитьЗначениеДереваВключаяПодчиненные(СтрокаДерева, "ФактическиеТрудозатратыНеПолучены", Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДляПолученияВыполненныхРабот()

	Данные = Новый Структура;
	Данные.Вставить("ИдентификаторПлана",                 ИдентификаторЗафиксированногоПлана);
	Данные.Вставить("НачалоПериода",                      НачалоПериодаЗафиксированногоПлана);
	Данные.Вставить("КонецПериода",                       КонецПериодаЗафиксированогоПлана);
	Данные.Вставить("НаименованиеВидаПлана",              НаименованиеВидаПлана);
	
	РаботыСотрудников = Новый Массив;
	
	Для Каждого СтрокаСотрудник Из ПодведениеИтогов.ПолучитьЭлементы() Цикл
		
		Если Не СтрокаСотрудник.ФактическиеТрудозатратыНеПолучены Тогда
			Продолжить;
		КонецЕсли;
		
		Работы = Новый Массив;
		
		Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
			
			Если ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
				
				Если СтрокаГруппировка.ПолучитьЭлементы().Количество() = 0 Тогда
					Работы.Добавить(СтрокаГруппировка.СотрудникРабота);
				КонецЕсли;
				
			ИначеЕсли СтрокаГруппировка.СотрудникРабота = ВидДеятельностиДляРаботыСОшибками
				Или СтрокаГруппировка.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.РаботаСОшибками") Тогда
				
				Если СтрокаГруппировка.ПолучитьЭлементы().Количество() = 0 Тогда
					Работы.Добавить(ВидДеятельностиДляРаботыСОшибками);
				КонецЕсли;
				
			ИначеЕсли СтрокаГруппировка.СотрудникРабота = ПредопределенноеЗначение("Перечисление.ТипыГруппировокСтрокПлана.ПрочиеРаботы") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
				
				Работы.Добавить(СтрокаРабота.СотрудникРабота);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДанныеСотрудника = Новый Структура;
		ДанныеСотрудника.Вставить("Сотрудник", СтрокаСотрудник.СотрудникРабота);
		ДанныеСотрудника.Вставить("Работы",    Работы);
		
		РаботыСотрудников.Добавить(ДанныеСотрудника);
		
	КонецЦикла;
	
	Данные.Вставить("РаботыСотрудников", РаботыСотрудников);
	
	Возврат Данные;

КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВременногоХранилищаВыполненныеРаботы(АдресВременногоХранилища, УникальныйИдентификатор)
	
	ДанныеВыполненныхРабот = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);

	Если ДанныеВыполненныхРабот = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Для Каждого ЭлементМассива Из ДанныеВыполненныхРабот Цикл
		
		Если ЭлементМассива.КоличествоВнеплановыхРабот > 0 Тогда
			
			ЭлементМассива.ОтчетВнеплановыеРаботы = ПоместитьВоВременноеХранилище(ЭлементМассива.ОтчетВнеплановыеРаботы, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеВыполненныхРабот;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВременногоХранилища(АдресВременногоХранилища)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецФункции

#КонецОбласти

#Область ПолучениеВидовДеятельностиПоСтатистике

&НаКлиенте
Процедура ВыполнитьПолучениеВидовДеятельностиПоСтатистике(ПараметрыПолучения)
	
	ДлительнаяОперация = ДанныеВидовДеятельностиПоСтатистикеДлительнаяОперация(ПараметрыПолучения,
	                                                                           УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипЗаполнения", ПараметрыПолучения.ТипЗаполнения);
	ДополнительныеПараметры.Вставить("РаботыСотрудники", ПараметрыПолучения.РаботыСотрудники);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ВыполнитьПолучениеВидовДеятельностиПоСтатистикеЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыполнитьПолучениеВидовДеятельностиПоСтатистикеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ДанныеВидовДеятельностиПоСтатистикеДлительнаяОперация(ДанныеДляПолучения, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ДанныеДляПолучения", ДанныеДляПолучения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение данных для заполнения видов деятельности по статистике'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеВидовДеятельностиПоСтатистике",
	                                                       ПараметрыПроцедуры,
	                                                       ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПолучениеВидовДеятельностиПоСтатистикеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиДанныеВидовДеятельностиПоСтатистике(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеВидовДеятельностиПоСтатистике(АдресРезультата, ДополнительныеПараметры)
	
	Если Не ЭтоАдресВременногоХранилища(АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПоСтатистике = ДанныеВременногоХранилища(АдресРезультата);
	Если ДанныеПоСтатистике = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗаполнения = ДополнительныеПараметры.ТипЗаполнения;
	
	Если ТипЗаполнения = "ЗаполнитьПоСотрудникамНеИзменятьОтсутствующие"
		Или ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат"
		Или ТипЗаполнения = "ЗаполнитьПоСотрудникамОчисткаОтсутствующихВидовДеятельности" Тогда
		
		ВывестиДанныеВидовДеятельностиПоСтатистикеПоСотрудникам(ДанныеПоСтатистике, ДополнительныеПараметры);
		
	Иначе
		
		ВывестиДанныеВыбранныхВидовДеятельностиПоСтатистике(ДанныеПоСтатистике, ДополнительныеПараметры);
		
	КонецЕсли;
	
	ОпределитьДоступностьРедактированияПлановыхТрудозатрат(СоставлениеПланов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеВыбранныхВидовДеятельностиПоСтатистике(ДанныеПоСтатистике, ДополнительныеПараметры)
	
	ИзмененоВидовДеятельности            = 0;
	МассивДанныхИзмененныхСтрок          = Новый Массив;
	МассивСотрудниковСИзмененнымиДанными = Новый Массив;
	
	Для Каждого ДанныеАктуализируемогоВидаДеятельности Из ДополнительныеПараметры.РаботыСотрудники Цикл
		
		ПлановыеТрудозатратыПоСтатистике = ПлановыеТрудозатратыИзДанныхСтатистики(ДанныеПоСтатистике, 
		                                                                          ДанныеАктуализируемогоВидаДеятельности.Сотрудник, 
		                                                                          ДанныеАктуализируемогоВидаДеятельности.ВидДеятельности);
		
		АктуализируемаяСтрока = СоставлениеПланов.НайтиПоИдентификатору(ДанныеАктуализируемогоВидаДеятельности.ИдентификаторСтроки);
		Если АктуализируемаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если АктуализируемаяСтрока.ПлановыеТрудозатраты = ПлановыеТрудозатратыПоСтатистике Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененоВидовДеятельности                  = ИзмененоВидовДеятельности + 1;
		АктуализируемаяСтрока.ПлановыеТрудозатраты = ПлановыеТрудозатратыПоСтатистике;
		ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
		
		МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, АктуализируемаяСтрока));
		
		Если МассивСотрудниковСИзмененнымиДанными.Найти(ДанныеАктуализируемогоВидаДеятельности.Сотрудник) = Неопределено Тогда
			МассивСотрудниковСИзмененнымиДанными.Добавить(ДанныеАктуализируемогоВидаДеятельности.Сотрудник);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СотрудникСИзмененнымиДанными Из МассивСотрудниковСИзмененнымиДанными Цикл
		
		СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СоставлениеПланов,
		                                                                             "СотрудникРабота",
		                                                                             СотрудникСИзмененнымиДанными,
		                                                                             0);
		
		Если СтрокаСотрудник <> Неопределено Тогда
			ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаСотрудник,
			                                                                                 "ПлановыеТрудозатраты", 
			                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику), 
			                                                                                 НормативПланируемогоВремени);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДанныхИзмененныхСтрок.Количество() > 0 Тогда
		ОтразитьИзменениеМассиваЗаписейПлана(МассивДанныхИзмененныхСтрок);
	КонецЕсли;
	
	Если ИзмененоВидовДеятельности = 0 Тогда
		
		ТекстОповещения = НСтр("ru = 'Ни один вид деятельности не изменен'");
		
	Иначе
		
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Изменено видов деятельности - %1.'"),
		                            ИзмененоВидовДеятельности);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение видов деятельности по статистике'"),,
	                               ТекстОповещения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Функция ПлановыеТрудозатратыИзДанныхСтатистики(ДанныеПоСтатистике, Сотрудник, ВидДеятельности)
	
	Для Каждого ЭлементДанныхПоСтатистике Из ДанныеПоСтатистике Цикл
			
			Если Сотрудник = ЭлементДанныхПоСтатистике.Сотрудник Тогда
				
				Для Каждого ДанныеВидаДеятельностиПоСтатистике Из ЭлементДанныхПоСтатистике.ВидыДеятельности Цикл
					
					Если ДанныеВидаДеятельностиПоСтатистике.ВидДеятельности = ВидДеятельности Тогда
						
						Возврат ДанныеВидаДеятельностиПоСтатистике.Часы;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ВывестиДанныеВидовДеятельностиПоСтатистикеПоСотрудникам(ДанныеПоСтатистике, ПараметрыЗаполнения)
	
	ТипЗаполнения = ПараметрыЗаполнения.ТипЗаполнения;
	
	МассивОбработанныхСотрудников    = Новый Массив;
	МассивДанныхИзмененныхСтрок      = Новый Массив;
	ИдентификаторыПересчитанныхСтрок = Новый Массив;
	ДобавленоВидовДеятельности       = 0;
	ИзмененоВидовДеятельности        = 0;
	УдаленоВидовДеятельности         = 0;
	
	Для Каждого ДанныеСотрудника Из ДанныеПоСтатистике Цикл
		
		МассивСтрокКУдалению          = Новый Массив;
		МассивОбработанныхСотрудников.Добавить(ДанныеСотрудника.Сотрудник);
		
		СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СоставлениеПланов,
		                                                                             "СотрудникРабота",
		                                                                              ДанныеСотрудника.Сотрудник,
		                                                                              0);
		
		Если СтрокаСотрудник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивВидовДеятельностиСотрудникаПоСтатистике = Новый Массив;
		
		Для Каждого ДанныеВидаДеятельности Из ДанныеСотрудника.ВидыДеятельности Цикл
			
			МассивВидовДеятельностиСотрудникаПоСтатистике.Добавить(ДанныеВидаДеятельности.ВидДеятельности);
			
			СтрокаРабота = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СтрокаСотрудник,
			                                                                          "СотрудникРабота",
			                                                                           ДанныеВидаДеятельности.ВидДеятельности,
			                                                                           2);
			
			ДанныеРаботы = Новый Структура;
			ДанныеРаботы.Вставить("Работа", ДанныеВидаДеятельности.ВидДеятельности);
			ДанныеРаботы.Вставить("ТипРаботы", Тип("СправочникСсылка.ВидыДеятельности"));
			
			Если СтрокаРабота = Неопределено Тогда
				
				Результат = РезультатОпределенияГруппировкиДобавляемойСтроки(ЭтотОбъект, СтрокаСотрудник, ДанныеРаботы);
				СтрокаГруппировка = Результат.Группировка;
				
				Если  ДанныеВидаДеятельности.ВидДеятельности = ВидДеятельностиДляРаботыСОшибками 
					И СтрокаГруппировка.ПолучитьЭлементы().Количество() = 0 Тогда
		
					СтрокаГруппировка.СотрудникРабота           = ВидДеятельностиДляРаботыСОшибками;
					СтрокаГруппировка.ПлановыеТрудозатраты      = ДанныеВидаДеятельности.Часы;
					ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
					МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаГруппировка));
					ПересчитатьЗначениеДляРодительскихСтрок(ЭтотОбъект, СтрокаГруппировка, "ПлановыеТрудозатраты", ИдентификаторыПересчитанныхСтрок);
					
				Иначе
					
					СтрокаРабота = СтрокаГруппировка.ПолучитьЭлементы().Добавить();
					СтрокаРабота.СотрудникРабота      = ДанныеВидаДеятельности.ВидДеятельности;
					СтрокаРабота.ПлановыеТрудозатраты = ДанныеВидаДеятельности.Часы;
					СтрокаРабота.ТипСтрокиПлана       = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Работа");
					СтрокаРабота.ТипРаботы            = Тип("СправочникСсылка.ВидыДеятельности");
					
					ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
					МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРабота));
					ПересчитатьЗначениеДляРодительскихСтрок(ЭтотОбъект, СтрокаРабота, "ПлановыеТрудозатраты", ИдентификаторыПересчитанныхСтрок);
					МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаГруппировка));
					
				КонецЕсли;
				
				ДобавленоВидовДеятельности = ДобавленоВидовДеятельности + 1;
				
				Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудникСоставлениеПланов Тогда
					НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, ДанныеВидаДеятельности.ВидДеятельности, Истина);
				КонецЕсли;
				
			Иначе
				
				Если СтрокаРабота.ПлановыеТрудозатраты = ДанныеВидаДеятельности.Часы Тогда
					Продолжить;
				КонецЕсли;
				
				ИзмененоВидовДеятельности = ИзмененоВидовДеятельности + 1;
				
				СтрокаРабота.ПлановыеТрудозатраты = ДанныеВидаДеятельности.Часы;
				
				ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
				МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРабота));
				ПересчитатьЗначениеДляРодительскихСтрок(ЭтотОбъект, СтрокаРабота, "ПлановыеТрудозатраты", ИдентификаторыПересчитанныхСтрок);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат"
		     Или ТипЗаполнения = "ЗаполнитьПоСотрудникамОчисткаОтсутствующихВидовДеятельности" Тогда
		
			Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
				
				Если ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
					
					ОбработатьОтсутствующийВДанныхСтатистикиВидДеятельности(МассивВидовДеятельностиСотрудникаПоСтатистике,
					                                                        СтрокаГруппировка,
					                                                        МассивДанныхИзмененныхСтрок,
					                                                        МассивСтрокКУдалению,
					                                                        ИзмененоВидовДеятельности,
					                                                        УдаленоВидовДеятельности,
					                                                        ИдентификаторыПересчитанныхСтрок,
					                                                        ТипЗаполнения,
					                                                        СтрокаСотрудник);
					
					Продолжить;
					
				КонецЕсли;
				
				Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
				
					Если ТипЗнч(СтрокаРабота.СотрудникРабота) <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
						Продолжить;
					КонецЕсли;
					
					ОбработатьОтсутствующийВДанныхСтатистикиВидДеятельности(МассивВидовДеятельностиСотрудникаПоСтатистике,
					                                                        СтрокаРабота,
					                                                        МассивДанныхИзмененныхСтрок,
					                                                        МассивСтрокКУдалению,
					                                                        ИзмененоВидовДеятельности,
					                                                        УдаленоВидовДеятельности,
					                                                        ИдентификаторыПересчитанныхСтрок,
					                                                        ТипЗаполнения,
					                                                        СтрокаСотрудник);
				
				КонецЦикла;
				
			КонецЦикла;
		
			ПланированиеКлиентСервер.ОбработатьУдалениеИзДереваМассиваСтрок(МассивСтрокКУдалению);
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат"
		 Или ТипЗаполнения = "ЗаполнитьПоСотрудникамОчисткаОтсутствующихВидовДеятельности" Тогда
	
		Для Каждого Сотрудник Из ПараметрыЗаполнения.РаботыСотрудники Цикл
			
			ДанныеСтрокиИзменены = Ложь;
			МассивСтрокКУдалению = Новый Массив;
			
			Если МассивОбработанныхСотрудников.Найти(Сотрудник) <> Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаСотрудник = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(СоставлениеПланов,
			                                                                             "СотрудникРабота",
			                                                                              Сотрудник,
			                                                                              0);
			
			Если СтрокаСотрудник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
				
				Если ТипЗнч(СтрокаГруппировка.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
					
					ОбработатьОтсутствующихВДанныхСтатистикиСотрудников(СтрокаГруппировка,
					                                                    МассивДанныхИзмененныхСтрок,
					                                                    МассивСтрокКУдалению,
					                                                    ИзмененоВидовДеятельности,
					                                                    УдаленоВидовДеятельности,
					                                                    ИдентификаторыПересчитанныхСтрок,
					                                                    ТипЗаполнения,
					                                                    СтрокаСотрудник);
					
					Продолжить;
					
				КонецЕсли;
				
				Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
				
					Если ТипЗнч(СтрокаРабота.СотрудникРабота) <> Тип("СправочникСсылка.ВидыДеятельности") Тогда
						Продолжить;
					КонецЕсли;
					
					ОбработатьОтсутствующихВДанныхСтатистикиСотрудников(СтрокаРабота,
					                                                    МассивДанныхИзмененныхСтрок,
					                                                    МассивСтрокКУдалению,
					                                                    ИзмененоВидовДеятельности,
					                                                    УдаленоВидовДеятельности,
					                                                    ИдентификаторыПересчитанныхСтрок,
					                                                    ТипЗаполнения,
					                                                    СтрокаСотрудник);
				
				КонецЦикла;
				
			КонецЦикла;
			
			ПланированиеКлиентСервер.ОбработатьУдалениеИзДереваМассиваСтрок(МассивСтрокКУдалению);
			
			Если МассивСтрокКУдалению.Количество() > 0 Тогда
				
				ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаСотрудник,
				                                                                                 "ПлановыеТрудозатраты",
				                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику),
				                                                                                 НормативПланируемогоВремени);
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	НормализоватьРодительскиеУзлыСоставлениеПланов(ЭтотОбъект, ИдентификаторыПересчитанныхСтрок, МассивДанныхИзмененныхСтрок);
	
	ОтразитьИзменениеМассиваЗаписейПлана(МассивДанныхИзмененныхСтрок);
	
	ПланированиеКлиент.ВывестиОповещенияОЗаполненииВидовДеятельностиПоСтатистике(ТипЗаполнения,
	                                                                             ДобавленоВидовДеятельности,
	                                                                             ИзмененоВидовДеятельности,
	                                                                             УдаленоВидовДеятельности);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтсутствующийВДанныхСтатистикиВидДеятельности(МассивВидовДеятельностиСотрудникаПоСтатистике,
	                                                              СтрокаРабота,
	                                                              МассивДанныхИзмененныхСтрок,
	                                                              МассивСтрокКУдалению,
	                                                              ИзмененоВидовДеятельности,
	                                                              УдаленоВидовДеятельности,
	                                                              ИдентификаторыПересчитанныхСтрок,
	                                                              ТипЗаполнения,
	                                                              СтрокаСотрудник)
	
	Если МассивВидовДеятельностиСотрудникаПоСтатистике.Найти(СтрокаРабота.СотрудникРабота) = Неопределено Тогда
	
		СтрокаРабота.ПлановыеТрудозатраты = 0;
		
		Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат" Тогда
			
			ДанныеИзменяемойЗаписи            = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРабота);
			ИзмененоВидовДеятельности         = ИзмененоВидовДеятельности + 1;
			МассивДанныхИзмененныхСтрок.Добавить(ДанныеИзменяемойЗаписи);
			
		Иначе
			
			ДанныеЗаписиКУдалению         = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРабота);
			ДанныеЗаписиКУдалению.Удалить = Истина;
			УдаленоВидовДеятельности      = УдаленоВидовДеятельности + 1;
			МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиКУдалению);
			МассивСтрокКУдалению.Добавить(СтрокаРабота);
			
			Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудникСоставлениеПланов Тогда
				НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаРабота.СотрудникРабота, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
		ПересчитатьЗначениеДляРодительскихСтрок(ЭтотОбъект, СтрокаРабота, "ПлановыеТрудозатраты", ИдентификаторыПересчитанныхСтрок);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтсутствующихВДанныхСтатистикиСотрудников(СтрокаРабота,
	                                                          МассивДанныхИзмененныхСтрок,
	                                                          МассивСтрокКУдалению,
	                                                          ИзмененоВидовДеятельности,
	                                                          УдаленоВидовДеятельности,
	                                                          ИдентификаторыПересчитанныхСтрок,
	                                                          ТипЗаполнения,
	                                                          СтрокаСотрудник)
	
	СтрокаРабота.ПлановыеТрудозатраты = 0;
	
	Если ТипЗаполнения = "ЗаполнитьПоСотрудникамОбнулениеПлановыхТрудозатрат" Тогда
		
		ДанныеИзменяемойЗаписи            = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРабота);
		ИзмененоВидовДеятельности         = ИзмененоВидовДеятельности + 1;
		МассивДанныхИзмененныхСтрок.Добавить(ДанныеИзменяемойЗаписи);
		
		ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
		
	Иначе
		
		ДанныеЗаписиКУдалению         = ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаРабота);
		ДанныеЗаписиКУдалению.Удалить = Истина;
		МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиКУдалению);
		МассивСтрокКУдалению.Добавить(СтрокаРабота);
	
		УдаленоВидовДеятельности = УдаленоВидовДеятельности + 1;
	
		Если СтрокаСотрудник.СотрудникРабота = ТекущийСотрудникСоставлениеПланов Тогда
			НайтиОтметитьРаботуВФормахПодбора(ЭтотОбъект, СтрокаРабота.СотрудникРабота, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьЗначениеДляРодительскихСтрок(ЭтотОбъект, СтрокаРабота, "ПлановыеТрудозатраты", ИдентификаторыПересчитанныхСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьЗначениеДляРодительскихСтрок(Форма, СтрокаДерева, ИмяКолонки, ИдентификаторыПересчитанныхСтрок)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если СтрокаРодитель = Неопределено Тогда
		
		Возврат;
		
	Иначе
		
		СтрокаВерхнегоУровня = СтрокаРодитель.ПолучитьРодителя();
		
		Если СтрокаВерхнегоУровня = Неопределено Тогда
			
			ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаРодитель,
			                                                                                 "ПлановыеТрудозатраты",
			                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(
		                                                                                        Форма.ЕстьНормативПланируемогоВремени, 
		                                                                                        Форма.ИнвертироватьОтображениеЗапланированоПоСотруднику),
			                                                                                 Форма.НормативПланируемогоВремени);
			ИдентификаторыПересчитанныхСтрок.Добавить(СтрокаРодитель.ПолучитьИдентификатор())
			
		Иначе
			
			ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаРодитель, ИмяКолонки);
			ИдентификаторыПересчитанныхСтрок.Добавить(СтрокаРодитель.ПолучитьИдентификатор());
			
			ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаВерхнегоУровня,
			                                                                                 "ПлановыеТрудозатраты",
			                                                                                 ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(
		                                                                                        Форма.ЕстьНормативПланируемогоВремени, 
		                                                                                        Форма.ИнвертироватьОтображениеЗапланированоПоСотруднику),
			                                                                                 Форма.НормативПланируемогоВремени);
			ИдентификаторыПересчитанныхСтрок.Добавить(СтрокаВерхнегоУровня.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудников()
	
	ОчиститьСообщения();
	
	ПараметрыПолучения = ПланированиеКлиентСервер.ПараметрыПолученияВидовДеятельностиПоСтатистике();
	ПараметрыПолучения.КонецПериода     = КонецПериодаСоставляемогоПлана;
	ПараметрыПолучения.НачалоПериода    = НачалоПериодаСоставляемогоПлана;
	ЕстьЗапланированныеВидыДеятельности = Ложь;
	ОпределитьВыбранныхСотрудниковПолучениеДанныхПоСтатистике(ПараметрыПолучения, ЕстьЗапланированныеВидыДеятельности);
	
	Если ПараметрыПолучения.РаботыСотрудники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбраны сотрудники, для которых требуется получить данные видов деятельности по статистике.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Не ЕстьЗапланированныеВидыДеятельности Тогда
		
		ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудниковПослеВопроса("ЗаполнитьПоСотрудникамНеИзменятьОтсутствующие", ПараметрыПолучения);
		
	Иначе
		
		ОписаниеОповещенияПослеВопроса = Новый ОписаниеОповещения("ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудниковПослеВопроса",
		                                                          ЭтотОбъект,
		                                                          ПараметрыПолучения);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ВопросПриЗаполненииПоСтатистике", 
		             Новый Структура("ВариантЗаполнения", "ЗаполнитьПоСотрудникамНеИзменятьОтсутствующие"), 
		             ЭтотОбъект,,,,
		             ОписаниеОповещенияПослеВопроса, 
		             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьВыбранныеВидыДеятельностиПоСтатистике()
	
	ОчиститьСообщения();
	
	ПараметрыПолучения = ПланированиеКлиентСервер.ПараметрыПолученияВидовДеятельностиПоСтатистике();
	ПараметрыПолучения.КонецПериода = КонецПериодаСоставляемогоПлана;
	ПараметрыПолучения.НачалоПериода = НачалоПериодаСоставляемогоПлана;
	ОпределитьВыбранныеВидыДеятельностиДляАктуализацииПоСтатистике(ПараметрыПолучения);
	
	Если ПараметрыПолучения.РаботыСотрудники.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбран ни один вид деятельности, по которому требуется актуализировать плановые трудозатраты по статистике.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ТекстОповещения = НСтр("ru = 'Выполняется получение данных'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Актуализация выделенных видов деятельности по статистике'"),,
	                               ТекстОповещения, БиблиотекаКартинок.Информация32);
	
	ПараметрыПолучения.ТипЗаполнения    = "АктуализироватьВыбранныеВидыДеятельности";
	
	ВыполнитьПолучениеВидовДеятельностиПоСтатистике(ПараметрыПолучения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьВыбранныеВидыДеятельностиДляАктуализацииПоСтатистике(ПараметрыПолучения)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.СоставлениеПланов.ВыделенныеСтроки Цикл
		
		ДанныеСтроки    = СоставлениеПланов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СотрудникРабота = ДанныеСтроки.СотрудникРабота;
		
		Если ТипЗнч(СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
			
			ДанныеКДобавлению  = НовыйСотрудникВидДеятельности();
			ДанныеКДобавлению.ВидДеятельности     = СотрудникРабота;
			ДанныеКДобавлению.ИдентификаторСтроки = ВыделеннаяСтрока;
			
			ДанныеРодительскойСтроки = ДанныеСтроки.ПолучитьРодителя();
			Если ДанныеРодительскойСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ДанныеРодительскойСтроки.СотрудникРабота <> Тип("СправочникСсылка.Пользователи") Тогда
				
				ДанныеРодительскойСтроки = ДанныеРодительскойСтроки.ПолучитьРодителя();
				Если ДанныеРодительскойСтроки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеКДобавлению.Сотрудник = ДанныеРодительскойСтроки.СотрудникРабота;
			
			ПараметрыПолучения.РаботыСотрудники.Добавить(ДанныеКДобавлению);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НовыйСотрудникВидДеятельности()
	
	Данные = Новый Структура;
	Данные.Вставить("Сотрудник",           ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	Данные.Вставить("ВидДеятельности",     ПредопределенноеЗначение("Справочник.ВидыДеятельности.ПустаяСсылка"));
	Данные.Вставить("ИдентификаторСтроки", -1);
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьВыбранныхСотрудниковПолучениеДанныхПоСтатистике(ПараметрыПолучения, ЕстьЗапланированныеВидыДеятельности)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.СоставлениеПланов.ВыделенныеСтроки Цикл
		
		ДанныеСтроки    = СоставлениеПланов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СотрудникРабота = ДанныеСтроки.СотрудникРабота;
		
		Если ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Сотрудник") Тогда
			
			СотрудникКДобавлению = ДанныеСтроки.СотрудникРабота;
			
		Иначе
			
			ДанныеСтроки = ДанныеСтроки.ПолучитьРодителя();
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Сотрудник") Тогда
			
				СотрудникКДобавлению = ДанныеСтроки.СотрудникРабота;
				
			Иначе
				
				ДанныеСтроки = ДанныеСтроки.ПолучитьРодителя();
				Если ДанныеСтроки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			
				СотрудникКДобавлению = ДанныеСтроки.СотрудникРабота;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЕстьЗапланированныеВидыДеятельности Тогда
			Для Каждого СтрокаГруппировка Из ДанныеСтроки.ПолучитьЭлементы() Цикл
				
				Если СтрокаГруппировка.СотрудникРабота = ВидДеятельностиДляРаботыСОшибками Тогда
					ЕстьЗапланированныеВидыДеятельности = Истина;
					Прервать;
				КонецЕсли;
				
				Для Каждого СтрокаРабота Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
				
					Если ТипЗнч(СтрокаРабота.СотрудникРабота) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
						ЕстьЗапланированныеВидыДеятельности = Истина;
						Прервать;
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПолучения.РаботыСотрудники.Найти(СотрудникКДобавлению) = Неопределено Тогда
			ПараметрыПолучения.РаботыСотрудники.Добавить(СотрудникКДобавлению);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыДеятельностиПоСтатистикеДляВыбранныхСотрудниковПослеВопроса(Результат, ПараметрыПолучения) Экспорт
	
	Если ТипЗнч(Результат) <> ТипЗнч("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОповещения = НСтр("ru = 'Выполняется получение данных'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Заполнение видов деятельности для выделенных сотрудников по статистике'"),,
	                               ТекстОповещения, БиблиотекаКартинок.Информация32);
	
	ПараметрыПолучения.ТипЗаполнения    = Результат;
	
	ВыполнитьПолучениеВидовДеятельностиПоСтатистике(ПараметрыПолучения);
	
КонецПроцедуры

&НаКлиенте
Функция КлючиРазвернутыхУзловДерева(ИмяДерева, ИмяКолонки)

	КлючиРазвернутыхУзловДерева = Новый Соответствие;
	
	Для Каждого СтрокаСотрудник Из ЭтотОбъект[ИмяДерева].ПолучитьЭлементы() Цикл
		
		Если Элементы[ИмяДерева].Развернут(СтрокаСотрудник.ПолучитьИдентификатор()) = Истина Тогда
			
			РазвернутыеГруппировки = Новый Массив;
			
			Для Каждого СтрокаГруппировка Из СтрокаСотрудник.ПолучитьЭлементы() Цикл
				
				Если Элементы[ИмяДерева].Развернут(СтрокаГруппировка.ПолучитьИдентификатор()) = Истина Тогда
					
					РазвернутыеГруппировки.Добавить(СтрокаГруппировка[ИмяКолонки]);
					
				КонецЕсли;
				
			КонецЦикла;
				
			КлючиРазвернутыхУзловДерева.Вставить(СтрокаСотрудник[ИмяКолонки], РазвернутыеГруппировки);
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КлючиРазвернутыхУзловДерева;
	
КонецФункции

&НаКлиенте
Функция КлючТекущейСтрокиДерева(ИмяДерева, ИмяКолонки)
	
	ТекущиеДанные = Элементы[ИмяДерева].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаРодитель = ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(ТекущиеДанные);
	
	КлючТекущейСтроки = Новый Структура;
	КлючТекущейСтроки.Вставить("Сотрудник", СтрокаРодитель[ИмяКолонки]);
	КлючТекущейСтроки.Вставить("Работа",    ТекущиеДанные[ИмяКолонки]);
	
	Возврат КлючТекущейСтроки;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьТекущуюСтрокуДереваПоКлючу(ИмяДерева, ИмяКолонки, КлючТекущейСтроки)

	Если КлючТекущейСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ЭтотОбъект[ИмяДерева],
	                                                                             ИмяКолонки,
	                                                                             КлючТекущейСтроки.Сотрудник,
	                                                                             0);
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НайденнаяСтрока[ИмяКолонки] = КлючТекущейСтроки.Работа Тогда
		Элементы[ИмяДерева].ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(НайденнаяСтрока,
	                                                                             ИмяКолонки,
	                                                                             КлючТекущейСтроки.Работа,
	                                                                             2);
	
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы[ИмяДерева].ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры 

&НаКлиенте
Процедура ВосстановитьРазвернутыеУзлыДерева(ИмяДерева, ИмяКолонки, КлючиРазвернутыхУзловДерева)

	Для Каждого КлючИЗначение Из КлючиРазвернутыхУзловДерева Цикл
		
		НайденнаяСтрокаВерхнийУровень = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(ЭтотОбъект[ИмяДерева],
		                                                                                           ИмяКолонки,
		                                                                                           КлючИЗначение.Ключ,
		                                                                                           0);
		
		Если НайденнаяСтрокаВерхнийУровень = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Элементы[ИмяДерева].Развернут(НайденнаяСтрокаВерхнийУровень.ПолучитьИдентификатор()) Тогда
			Элементы[ИмяДерева].Развернуть(НайденнаяСтрокаВерхнийУровень.ПолучитьИдентификатор());
		КонецЕсли;
		
		Для Каждого ЗначениеГруппировки Из КлючИЗначение.Значение Цикл
			
			НайденнаяСтрока = ПланированиеКлиентСервер.НайденнаяСтрокаВДанныхФормыДерево(НайденнаяСтрокаВерхнийУровень,
			                                                                             ИмяКолонки, 
			                                                                             ЗначениеГруппировки,
			                                                                             0);
			
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не Элементы[ИмяДерева].Развернут(НайденнаяСтрока.ПолучитьИдентификатор()) Тогда
				Элементы[ИмяДерева].Развернуть(НайденнаяСтрока.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РедактированиеЗаписейПлана

&НаКлиенте
Процедура ПослеРедактированияЗаписиСоставляемогоПлана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененнаяСтрока = СоставлениеПланов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененнаяСтрока.Цель                 = Результат.Цель;
	ИзмененнаяСтрока.Комментарий          = Результат.Комментарий;
	ИзмененнаяСтрока.ПлановыеТрудозатраты = Результат.ПланируемыеТрудозатраты;
	
	ПослеИзмененияПлановыхТрудозатрат(ИзмененнаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияЗаписиЗафиксированногоПлана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененнаяСтрока = ПодведениеИтогов.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененнаяСтрока.Цель                 = Результат.Цель;
	ИзмененнаяСтрока.Комментарий          = Результат.Комментарий;
	ИзмененнаяСтрока.Результат            = Результат.Результат;
	ИзмененнаяСтрока.Достигнуто           = Результат.Достигнуто;
	
	ОтразитьИзменениеЗаписиПлана(ДанныеЗаписиПланаПоСтрокеЗафиксированныеПланы(ЭтотОбъект, ИзмененнаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПлановыхЧасов(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.СоставлениеПланов.ВыделенныеСтроки;
	МассивДанныхИзмененныхСтрок = Новый Массив;
	МассивСотрудников           = Новый Массив;
	МассивГруппировок           = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = СоставлениеПланов.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Сотрудник")
			Или ДанныеСтроки.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Группировка") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ДанныеСтроки.ПлановыеТрудозатраты <> Результат Тогда
			
			ДанныеСтроки.ПлановыеТрудозатраты = Результат;
			МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, ДанныеСтроки));
			ТребуетсяПолучениеДанныхЗадачПланаЗанятости = Истина;
			ДобавитьСотрудникаВМассивЧьиСтрокиИзменяются(МассивСотрудников, ДанныеСтроки);
			ДобавитьГруппировкуВМассивЧьиСтрокиИзменяются(МассивГруппировок, ДанныеСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаГруппировка Из МассивГруппировок Цикл
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(СтрокаГруппировка, "ПлановыеТрудозатраты");
		МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаГруппировка));
		
	КонецЦикла;
	
	Для Каждого СтрокаСотрудник Из МассивСотрудников Цикл
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(
		              СтрокаСотрудник, 
		              "ПлановыеТрудозатраты",
		              ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику),
		              НормативПланируемогоВремени);
		МассивДанныхИзмененныхСтрок.Добавить(ДанныеЗаписиПланаПоСтрокеСоставляемыеПланы(ЭтотОбъект, СтрокаСотрудник));
		
	КонецЦикла;
	
	ОтразитьИзменениеМассиваЗаписейПлана(МассивДанныхИзмененныхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСотрудникаВМассивЧьиСтрокиИзменяются(МассивСотрудников, ИзменяемаяСтрока)
	
	СтрокаВерхнегоУровня = ПланированиеКлиентСервер.РодительскаяСтрокаВерхнегоУровня(ИзменяемаяСтрока);
	
	СтрокаУжеЕстьВМассиве = Ложь;
	
	Для Каждого СтрокаСотрудники Из МассивСотрудников Цикл
		
		Если СтрокаСотрудники.СотрудникРабота = СтрокаВерхнегоУровня.СотрудникРабота Тогда
			СтрокаУжеЕстьВМассиве = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаУжеЕстьВМассиве Тогда
		МассивСотрудников.Добавить(СтрокаВерхнегоУровня);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппировкуВМассивЧьиСтрокиИзменяются(МассивГруппировок, ИзменяемаяСтрока)
	
	ДочерниеСтроки = ИзменяемаяСтрока.ПолучитьЭлементы();
	Если ДочерниеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ИзменяемаяСтрока.ПолучитьРодителя();
	
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРодитель.ТипСтрокиПлана = ПредопределенноеЗначение("Перечисление.ТипыСтрокПлана.Сотрудник") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУжеЕстьВМассиве = Ложь;
	
	Для Каждого СтрокаГруппировка Из МассивГруппировок Цикл
		
		Если СтрокаГруппировка.ПолучитьИдентификатор() = СтрокаРодитель.ПолучитьИдентификатор() Тогда
			СтрокаУжеЕстьВМассиве = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СтрокаУжеЕстьВМассиве Тогда
		МассивГруппировок.Добавить(СтрокаРодитель);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеНастроек

&НаКлиенте
Процедура ПриИзмененииИнвертироватьОтображениеЗапланированоПоСотруднику()
	
	ПланированиеКлиентСервер.УстановитьЗначенияПараметровРасчетаПоНормативам(ЭтотОбъект,
	                                                                         НормативПланируемогоВремени, 
	                                                                         ПорогОтклоненияОтНормативаПланируемогоВремени, 
	                                                                         ИнвертироватьОтображениеЗапланированоПоСотруднику);
	
	Для Каждого СтрокаСотрудник Из СоставлениеПланов.ПолучитьЭлементы() Цикл
		
		ПланированиеКлиентСервер.РассчитатьЗначениеРодительскойСтрокиПоДаннымПодчиненных(
		          СтрокаСотрудник, 
		          "ПлановыеТрудозатраты",
		          ПланированиеКлиентСервер.РассчитыватьОстатокПоСтрокеДерева(ЕстьНормативПланируемогоВремени, ИнвертироватьОтображениеЗапланированоПоСотруднику),
		          НормативПланируемогоВремени);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

