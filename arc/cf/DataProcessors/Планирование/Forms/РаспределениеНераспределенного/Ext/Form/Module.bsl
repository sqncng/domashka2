#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	ОбработатьПереданныеПараметры(Отказ);
	ЗаполнитьТаблицуСортировки();
	ЗаполнитьПериодыПланирования();
	
	УстановитьУсловноеОформление();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодготовитьДанныеЭтаповКРаспределению(ПараметрыПолученияДанныхПоЭтапам());
	ПодготовитьВидыДеятельностиКИзменению(ПараметрыПолученияДанныхПоВидамДеятельности());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ДекорацияДляКогоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаВидыДеятельностиПриИзменении(Элемент)
	
	НормализоватьВыбранныеПериоды(ЭтотОбъект);
	ПодготовитьВидыДеятельностиКИзменению(ПараметрыПолученияДанныхПоВидамДеятельности());

КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаВидыДеятельностиПриИзменении(Элемент)
	
	ПодготовитьВидыДеятельностиКИзменению(ПараметрыПолученияДанныхПоВидамДеятельности());
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыВидыДеятельностиЭтапыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыВидыДеятельностиЭтапы.ТекущаяСтраница = Элементы.СтраницаВидыДеятельности Тогда
		
		Элементы.ИзменитьДанныеВидыДеятельности.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Элементы.Распределить.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиЧтоДелатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВидыДеятельности.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЧтоДелатьВидыДеятельности(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

#Область СтраницаЭтапы

&НаКлиенте
Процедура Распределить(Команда)
	
	РаспределитьЭтапы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИРаспределитьЭтапы(Команда)
	
	ИзменитьВариантРаспределения("ТаблицаКРаспределению", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ОчиститьИПерераспределить"));
	
КонецПроцедуры

&НаКлиенте
Процедура Изменять(Команда)
	
	ИзменитьВариантРаспределения("ТаблицаКРаспределению", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.Изменять"));
	
КонецПроцедуры

&НаКлиенте
Процедура НеИзменять(Команда)
	
	ИзменитьВариантРаспределения("ТаблицаКРаспределению", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.НеИзменять"));
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ИзменитьВариантРаспределения("ТаблицаКРаспределению", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.Очищать"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуРаспределенияЭтаповКоманда(Команда)
	
	ОбновитьТаблицуРаспределенияЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуРаспределенияЭтапов()
	
	ПараметрыПолучения =  ПараметрыПолученияДанныхПоЭтапам();
	ПараметрыПолучения.ПорядокЭтапов = ТекущийПорядокЭтапов();
	ПодготовитьДанныеЭтаповКРаспределению(ПараметрыПолучения);
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаВидыДеятельности

&НаКлиенте
Процедура ИзменитьСреднееВидыДеятельности(Команда)
	
	ИзменитьВариантРаспределения("ВидыДеятельности", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.УстановитьНовое"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВсегоВидыДеятельности(Команда)
	
	ИзменитьВариантРаспределения("ВидыДеятельности", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ПропорциональноИзменитьВсего"));
	
КонецПроцедуры

&НаКлиенте
Процедура НеИзменятьВидыДеятельности(Команда)
	
	ИзменитьВариантРаспределения("ВидыДеятельности", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.НеИзменять"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВидыДеятельности(Команда)
	
	ИзменитьВариантРаспределения("ВидыДеятельности", ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.Очищать"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьВидыДеятельности(Команда)
	
	ПодготовитьВидыДеятельностиКИзменению(ПараметрыПолученияДанныхПоВидамДеятельности());
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеВидыДеятельности(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыИзменения = ПараметрыИзмененияВидыДеятельности();
	
	Если ПараметрыИзменения.ВидыДеятельности.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Не указан ни один вид деятельности для изменения'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьИзменениеДанныеВидыДеятельности(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Этапы

&НаСервере
Процедура УстановитьУсловноеОформление()

#Область ОформлениеЭтапов
	
	ДатаНачалаНепланировавшихсяЭтапов      = Планирование.ДатаНачалаНепланировавшихсяЭтапов(ДатаНачалаПериода); 
	ДатаОкончанияНепланировавшихсяЭтапов   = Планирование.ДатаОкончанияНепланировавшихсяЭтапов(ДатаНачалаПериода);
	
	//Этап пустая задача, это этапы верхнего уровня по проекту
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЭтап.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Этап");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Справочники.ЗадачиПроцесса.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Задачи не по шаблону>'")); 
	
	//Этап не заполнен, это этапы верхнего уровня по проекту
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЭтап.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Этап");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ТипыГруппировокСтрокПлана.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Задачи по ошибкам>'")); 
	
	//Нераспределено больше 0
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюНераспределено.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Нераспределено");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный); 
	
	//Этап не планировался в планах с
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюВПланахС.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ВПланахС");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ДатаНачалаНепланировавшихсяЭтапов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не планировалось>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи); 
	
	//Статус для задач не по шаблону
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюСтатус.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Этап");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);
	
	//Версия не указана
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюВерсия.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Версия");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не указана>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);
	
	//Этап не планировался в планах с
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюВПланахПо.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ВПланахПо");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ДатаОкончанияНепланировавшихсяЭтапов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не планировалось>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);
	
	//Вариант распределения - Изменять
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Изменять;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЗеленый);
	
	//Вариант распределения - Очистить и Перераспределить
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ОчиститьИПерераспределить;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиЗадачи);
	
	//Вариант распределения - Не изменять
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	//Вариант распределения - Очищать
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
#КонецОбласти 

#Область ОформлениеВидыДеятельности

	ИзменениеЗначенияНеДоступно = Новый СписокЗначений;
	ИзменениеЗначенияНеДоступно.Добавить(Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять);
	ИзменениеЗначенияНеДоступно.Добавить(Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать);

	//Вариант изменения - Изменять
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.УстановитьНовое;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЗеленый);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ПропорциональноИзменитьВсего;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЗеленый);
	
	//Вариант изменения - Не изменять
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	//Вариант изменения - Очищать
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	//Новое значение виды деятельности не доступно
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиНовоеЗначение.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ИзменениеЗначенияНеДоступно;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",       ЦветаСтиля.ЗакрытыйДокумент); 
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          "-");  
	
	//Выделить среднее, когда устанавливается новое значение
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиСреднее.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.УстановитьНовое;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",  Новый Шрифт(,,Истина));
	
	//Выделить всего, когда пропорционально изменяется всего
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыДеятельностиВсего.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидыДеятельности.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ПропорциональноИзменитьВсего;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт",  Новый Шрифт(,,Истина));
	
#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСортировки()
	
	ДобавитьСтрокуТаблицыСортировки("ВПланахС",                  НСтр("ru = 'В планах с'"),              "Возр", Истина);
	ДобавитьСтрокуТаблицыСортировки("Версия",                    НСтр("ru = 'Версия'"),                  "Возр", Истина);
	ДобавитьСтрокуТаблицыСортировки("ВПланахПо",                 НСтр("ru = 'В планах по'"),             "Убыв", Ложь);
	ДобавитьСтрокуТаблицыСортировки("Запланировано",             НСтр("ru = 'Уже запланировано'"),       "Убыв", Ложь);
	ДобавитьСтрокуТаблицыСортировки("Нераспределено",            НСтр("ru = 'Нераспределено'") ,         "Убыв", Ложь);
	ДобавитьСтрокуТаблицыСортировки("ДатаНачала",                НСтр("ru = 'Плановая дата начала'"),    "Возр", Ложь);
	ДобавитьСтрокуТаблицыСортировки("ДатаОкончания",             НСтр("ru = 'Плановая дата окончания'"), "Возр", Ложь);
	
	ОтобразитьКартинкиСортировкиКолонкахТаблицы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуТаблицыСортировки(ПолеСортировки, ПредставлениеПоляСортировки, НаправлениеСортировки, Используется)
	
	НоваяСтрока = НастройкаСортировки.Добавить();
	НоваяСтрока.ПолеСортировки              = ПолеСортировки;
	НоваяСтрока.ПредставлениеПоляСортировки = ПредставлениеПоляСортировки;
	НоваяСтрока.НаправлениеСортировки       = НаправлениеСортировки;
	НоваяСтрока.ИспользуетсяПриСортировке   = Используется;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиСортировки(Команда)
	
	СтрокаСортировки = "";
	Для Каждого СтрокаТаблицыНастроек Из НастройкаСортировки Цикл
		
		Если СтрокаТаблицыНастроек.ИспользуетсяПриСортировке Тогда
			
			Если Не ПустаяСтрока(СтрокаСортировки) Тогда
				СтрокаСортировки = СтрокаСортировки + ",";
			КонецЕсли;
			
			СтрокаСортировки = СтрокаСортировки +СтрокаТаблицыНастроек.ПолеСортировки + " " + СтрокаТаблицыНастроек.НаправлениеСортировки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаСортировки) Тогда 
		ТаблицаКРаспределению.Сортировать(СтрокаСортировки);
	КонецЕсли; 
	
	ТекущийЭлемент = Элементы.ТаблицаКРаспределению;
	
	ОтобразитьКартинкиСортировкиКолонкахТаблицы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьКартинкиСортировкиКолонкахТаблицы(Форма)
	
	Для Каждого СтрокаТаблицыСортировки Из Форма.НастройкаСортировки Цикл
		
		Если СтрокаТаблицыСортировки.ИспользуетсяПриСортировке Тогда
			
			Если СтрокаТаблицыСортировки.НаправлениеСортировки = "Возр" Тогда
				КартинкаШапки = БиблиотекаКартинок.СтрелкаВверх;
			Иначе
				КартинкаШапки = БиблиотекаКартинок.СтрелкаВниз;
			КонецЕсли;
			
		Иначе
			
			КартинкаШапки = Новый Картинка(); 
			
		КонецЕсли;
		
		Форма.Элементы["ТаблицаКРаспределению" + СтрокаТаблицыСортировки.ПолеСортировки].КартинкаШапки = КартинкаШапки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантРаспределения(ИмяТаблицы, НовоеЗначение)

	Для Каждого ВыделеннаяСтрока Из Элементы[ИмяТаблицы].ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ЭтотОбъект[ИмяТаблицы].НайтиПоИдентификатору(ВыделеннаяСтрока); 
		
		Если ДанныеСтроки.ЧтоДелать <> НовоеЗначение Тогда
			ДанныеСтроки.ЧтоДелать = НовоеЗначение;
			Если ИмяТаблицы = "ВидыДеятельности" Тогда
				ПриИзмененииЧтоДелатьВидыДеятельности(ДанныеСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаспределениеЭтапов

&НаКлиенте
Процедура РаспределитьЭтапы()
	
	ОчиститьСообщения();
	
	НастройкиРаспределения = НастройкиРаспределения();
	
	Если Не РезультатПроверкиНастроекРаспределения(НастройкиРаспределения) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьРаспределениеПоУказаннымНастройкам(НастройкиРаспределения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРаспределениеПоУказаннымНастройкам(НастройкиРаспределения)
	
	ДлительнаяОперация = ВыполнитьРаспределениеПоНастройкамДлительнаяОперация(НастройкиРаспределения,
	                                                                          УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("Сотрудник", НастройкиРаспределения.Сотрудник);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		РаспределениеПоНастройкамЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("РаспределениеПоНастройкамЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРаспределениеПоНастройкамДлительнаяОперация(ПараметрыРаспределения, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Распределение в плане занятости по настройкам приоритетов для сотрудника'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.РаспределитьЭтапыПланаЗанятостиПоНастройкамПриоритетовДляСотрудника",
	                                                       ПараметрыРаспределения, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура РаспределениеПоНастройкамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда 
		ТребуетсяОбновлениеРабочегоМеста = Истина;
		ОбработатьЗавершениеРаспределенияПоНастройкам(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеРаспределенияПоНастройкам(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		РезультатРаспределения = ПолучитьИзВременногоХранилища(АдресРезультата)
	КонецЕсли;
	
	Если РезультатРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатРаспределения.Успешно Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатРаспределения.СообщениеПользователю);
		Возврат;
		
	Иначе
		
		ОбновитьТаблицуРаспределенияЭтапов();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция НастройкиРаспределения()
	
	Настройки = Новый Структура;
	Настройки.Вставить("Этапы",                       Новый Массив);
	Настройки.Вставить("ВидПлана",                    ВидПлана);
	Настройки.Вставить("ДатаНачалаПериода",           ДатаНачалаПериода);
	Настройки.Вставить("Сотрудник",                   Сотрудник);
	Настройки.Вставить("РаспределятьНачинаяС",        РаспределятьНачинаяС);
	Настройки.Вставить("НормативПланируемогоВремени", НормативПланируемогоВремени);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКРаспределению Цикл
		
		Этап = Неопределено;
		
		Если ТипЗнч(СтрокаТаблицы.Этап) = Тип("ПеречислениеСсылка.ТипыГруппировокСтрокПлана") Тогда
			
			Этап = СтрокаТаблицы.ТехническийПроект;
			
		ИначеЕсли ТипЗнч(СтрокаТаблицы.Этап) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Этап) Тогда
				
				Этап = СтрокаТаблицы.Этап;
				
			Иначе
				
				Этап = СтрокаТаблицы.ТехническийПроект;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеЭтапа = Новый Структура;
		
		ДанныеЭтапа.Вставить("Этап",         ?(ЗначениеЗаполнено(СтрокаТаблицы.Этап), СтрокаТаблицы.Этап, СтрокаТаблицы.ТехническийПроект));
		ДанныеЭтапа.Вставить("Нераспределено", СтрокаТаблицы.Нераспределено);
		ДанныеЭтапа.Вставить("ЧтоДелать",      СтрокаТаблицы.ЧтоДелать);
		
		Настройки.Этапы.Добавить(ДанныеЭтапа);
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Функция РезультатПроверкиНастроекРаспределения(НастройкиРаспределения)

	Если ТипЗнч(НастройкиРаспределения.Этапы) <> Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для распределения'")); 
		Возврат Ложь;
	КонецЕсли;
	
	Если НастройкиРаспределения.Этапы.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для распределения'")); 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаДанныхЭтаповКРаспределению

&НаКлиенте
Функция ПараметрыПолученияДанныхПоЭтапам()

	ПараметрыПодготовкиДанныхПоЭтапам = Новый Структура;
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ВидПлана",                                 ВидПлана);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ДатаНачалаПериода",                        ДатаНачалаПериода);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("Сотрудник",                                Сотрудник);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ПороговоеЗначениеДляЭтапаПоФакт",          ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ВидСогласуемогоРесурсаПлановыхРабот",      ВидСогласуемогоРесурсаПлановыхРабот);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ПорядокЭтапов",                            Неопределено);
	
	Возврат ПараметрыПодготовкиДанныхПоЭтапам;

КонецФункции 

&НаКлиенте
Процедура ПодготовитьДанныеЭтаповКРаспределению(ПараметрыПодготовки)
	
	ОчиститьСообщения();
	
	ТаблицаКРаспределению.Очистить();
	
	Элементы.СтраницыЭтапыОбновляется.ТекущаяСтраница = Элементы.СтраницаЭтапыИдетОбновление;
	
	ДлительнаяОперация = ВыполнитьПодготовкуДанныхПоЭтапамДлительнаяОперация(ПараметрыПодготовки,
	                                                                         УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПорядокЭтапов", ПараметрыПодготовки.ПорядокЭтапов);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПодготовкаДанныхЭтаповКРаспределениюЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовкаДанныхЭтаповКРаспределениюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПодготовкуДанныхПоЭтапамДлительнаяОперация(ПараметрыПодготовки, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка данных этапов сотрудника к распределению'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеЭтаповСотрудникаКРаспределению",
	                                                       ПараметрыПодготовки, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПодготовкаДанныхЭтаповКРаспределениюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьЗавершениеПодготовкиЭтапов(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеПодготовкиЭтапов(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ОбработатьЗавершениеПодготовкиЭтаповНаСервере(АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьЗавершениеПодготовкиЭтаповНаСервере(АдресРезультата, ДополнительныеПараметры)
	
	РезультатПодготовки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатПодготовки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПорядокЭтапов = Неопределено Тогда
		
		ТаблицаКРаспределению.Загрузить(РезультатПодготовки);
		
	Иначе
		
		ЗаполнитьТаблицуРаспределенияПоРезультатамСортировки(РезультатПодготовки, ДополнительныеПараметры.ПорядокЭтапов)
		
	КонецЕсли;
	
	Элементы.СтраницыЭтапыОбновляется.ТекущаяСтраница = Элементы.СтраницаЭтапыВыведено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРаспределенияПоРезультатамСортировки(РезультатПодготовки, ПорядокЭтапов)
	
	ОбработанныеИндексыСтрок = Новый Массив;
	
	Для Каждого ЭтапПоПорядку Из ПорядокЭтапов Цикл
		
		ПараметрыПоиска = Новый Структура;
		
		Если ТипЗнч(ЭтапПоПорядку) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			
			ПараметрыПоиска.Вставить("Этап", ЭтапПоПорядку);
			
		Иначе
			
			ПараметрыПоиска.Вставить("Этап", Справочники.ЗадачиПроцесса.ПустаяСсылка());
			ПараметрыПоиска.Вставить("ТехническийПроект", ЭтапПоПорядку);
			
		КонецЕсли;
		
		НайденныеСтроки = РезультатПодготовки.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаКДобавлению = НайденныеСтроки[0];
			НоваяСтрока = ТаблицаКРаспределению.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКДобавлению);
			ОбработанныеИндексыСтрок.Добавить(РезультатПодготовки.Индекс(СтрокаКДобавлению));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из РезультатПодготовки Цикл
		
		ИндексСтроки = РезультатПодготовки.Индекс(СтрокаТаблицы);
		Если ОбработанныеИндексыСтрок.Найти(ИндексСтроки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаКРаспределению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущийПорядокЭтапов() 
	
	ПорядокЭтапов = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКРаспределению Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Этап) Тогда
			
			ПорядокЭтапов.Добавить(СтрокаТаблицы.Этап);
			
		Иначе
			
			ПорядокЭтапов.Добавить(СтрокаТаблицы.ТехническийПроект);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПорядокЭтапов;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаВидовДеятельностиКИзменению

&НаКлиенте
Функция ПараметрыПолученияДанныхПоВидамДеятельности()

	ПараметрыПолученияДанныхПоВидамДеятельности = Новый Структура;
	ПараметрыПолученияДанныхПоВидамДеятельности.Вставить("ВидПлана",             ВидПлана);
	ПараметрыПолученияДанныхПоВидамДеятельности.Вставить("ДатаНачалаПериода",    НачалоПериодаВидыДеятельности);
	ПараметрыПолученияДанныхПоВидамДеятельности.Вставить("ДатаОкончанияПериода", КонецПериодаВидыДеятельности);
	ПараметрыПолученияДанныхПоВидамДеятельности.Вставить("Сотрудник",            Сотрудник); 
	ПараметрыПолученияДанныхПоВидамДеятельности.Вставить("КоличествоПериодов",   КоличествоВыбранныхПериодов());
	
	Возврат ПараметрыПолученияДанныхПоВидамДеятельности;

КонецФункции

&НаКлиенте
Функция СохраненныеЗначенияВидыДеятельности()
	
	ТекущиеЗначенияЧтоДелать = Новый Соответствие;
		
	Для Каждого СтрокаТаблицы Из ВидыДеятельности Цикл
		
		Сохранять = Ложь;
		
		Если СтрокаТаблицы.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.Очищать")
			И СтрокаТаблицы.Всего > 0 Тогда
			
			Сохранять = Истина;
			
		ИначеЕсли СтрокаТаблицы.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ПропорциональноИзменитьВсего")
			Или СтрокаТаблицы.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.УстановитьНовое") Тогда
			
			Сохранять = Истина;
			
		КонецЕсли;
		
		Если Сохранять Тогда
			
			ДанныеВидаДеятельности = Новый Структура;
			ДанныеВидаДеятельности.Вставить("ЧтоДелать",     СтрокаТаблицы.ЧтоДелать);
			ДанныеВидаДеятельности.Вставить("НовоеЗначение", СтрокаТаблицы.НовоеЗначение); 
			
			ТекущиеЗначенияЧтоДелать.Вставить(СтрокаТаблицы.ВидДеятельности, ДанныеВидаДеятельности);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТекущиеЗначенияЧтоДелать;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьВидыДеятельностиКИзменению(ПараметрыПолучения)

	ОчиститьСообщения();
	
	СохраненныеЗначенияВидыДеятельности = СохраненныеЗначенияВидыДеятельности();
	
	ВидыДеятельности.Очистить();
	
	Элементы.СтраницыВидыДеятельностиОбновляются.ТекущаяСтраница = Элементы.СтраницаВидыДеятельностиИдетОбновление;
	
	ДлительнаяОперация = ВыполнитьПодготовкуДанныхПоВидамДеятельностиДлительнаяОперация(ПараметрыПолучения,
	                                                                                    УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СохраненныеЗначенияВидыДеятельности", СохраненныеЗначенияВидыДеятельности);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПодготовкаДанныхВидовДеятельностиЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовкаДанныхВидовДеятельностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли

КонецПроцедуры

&НаСервере
Функция ВыполнитьПодготовкуДанныхПоВидамДеятельностиДлительнаяОперация(ПараметрыПодготовки, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка видов деятельности сотрудника к изменению'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеВидовДеятельностиСотрудникаКИзменению",
	                                                       ПараметрыПодготовки, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПодготовкаДанныхВидовДеятельностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьЗавершениеПодготовкиВидовДеятельности(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеПодготовкиВидовДеятельности(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ОбработатьЗавершениеПодготовкиВидовДеятельностиНаСервере(АдресРезультата, ДополнительныеПараметры);
		Элементы.СтраницыВидыДеятельностиОбновляются.ТекущаяСтраница = Элементы.СтраницаВидыДеятельностиОбновлено;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьЗавершениеПодготовкиВидовДеятельностиНаСервере(АдресРезультата, ДополнительныеПараметры)
	
	РезультатПодготовки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатПодготовки = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ВидыДеятельности.Загрузить(РезультатПодготовки); 
	
	Если ДополнительныеПараметры.Свойство("СохраненныеЗначенияВидыДеятельности")
		И ДополнительныеПараметры.СохраненныеЗначенияВидыДеятельности <> Неопределено
		И ДополнительныеПараметры.СохраненныеЗначенияВидыДеятельности.Количество() > 0 Тогда
		
		Для Каждого СтрокаТаблицы Из ВидыДеятельности Цикл
			
			СохраненныеДанные = ДополнительныеПараметры.СохраненныеЗначенияВидыДеятельности.Получить(СтрокаТаблицы.ВидДеятельности);
			Если СохраненныеДанные <> Неопределено Тогда
				СтрокаТаблицы.ЧтоДелать     = СохраненныеДанные.ЧтоДелать;
				СтрокаТаблицы.НовоеЗначение = СохраненныеДанные.НовоеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоВыбранныхПериодов()

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("НачалоПериода", НачалоПериодаВидыДеятельности);
	
	НайденныеСтроки = ТаблицаПериодовПланов.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() <> 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	ИндексСтрокиНачало = ТаблицаПериодовПланов.Индекс(НайденныеСтроки[0]);
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КонецПериода", КонецПериодаВидыДеятельности);
	
	НайденныеСтроки = ТаблицаПериодовПланов.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() <> 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	ИндексСтрокиКонец = ТаблицаПериодовПланов.Индекс(НайденныеСтроки[0]);
	
	Возврат ИндексСтрокиКонец - ИндексСтрокиНачало + 1;
	
КонецФункции

#КонецОбласти

#Область ИзменениеВидовДеятельности

&НаКлиенте
Процедура ВыполнитьИзменениеДанныеВидыДеятельности(ПараметрыИзменения)
	
	ВидыДеятельности.Очистить();
	
	ТребуетсяОбновлениеРабочегоМеста = Истина;
	Элементы.СтраницыВидыДеятельностиОбновляются.ТекущаяСтраница = Элементы.СтраницаВидыДеятельностиИдетОбновление;
	
	ДлительнаяОперация = ВыполнитьИзменениеВидыДеятельностиДлительнаяОперация(ПараметрыИзменения,
	                                                                                   УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПодготовкаДанныхВидовДеятельностиЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовкаДанныхВидовДеятельностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьИзменениеВидыДеятельностиДлительнаяОперация(ПараметрыПодготовки, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка видов деятельности сотрудника к изменению'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ИзменитьДанныеВидовДеятельностиСотрудника",
	                                                       ПараметрыПодготовки, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Функция ПараметрыИзмененияВидыДеятельности()
	
	ПараметрыИзменения = ПараметрыПолученияДанныхПоВидамДеятельности();
	
	ВидыДеятельностиКИзменению = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ВидыДеятельности Цикл
		
		Если СтрокаТаблицы.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.НеИзменять") Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеЗначение = ?(СтрокаТаблицы.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.Очищать"), 0, СтрокаТаблицы.НовоеЗначение);
		
		ДанныеВидаДеятельности = Новый Структура;
		ДанныеВидаДеятельности.Вставить("ЧтоДелать",       СтрокаТаблицы.ЧтоДелать);
		ДанныеВидаДеятельности.Вставить("НовоеЗначение",   НовоеЗначение);
		
		ВидыДеятельностиКИзменению.Вставить(СтрокаТаблицы.ВидДеятельности, ДанныеВидаДеятельности);
		
	КонецЦикла;
	
	ПараметрыИзменения.Вставить("ВидыДеятельности", ВидыДеятельностиКИзменению);
	
	Возврат ПараметрыИзменения;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииЧтоДелатьВидыДеятельности(ТекущиеДанные)
	
	Если ТекущиеДанные.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ПропорциональноИзменитьВсего") Тогда
		
		ТекущиеДанные.НовоеЗначение = ТекущиеДанные.Всего;
		
	ИначеЕсли ТекущиеДанные.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.УстановитьНовое") Тогда
		
		ТекущиеДанные.НовоеЗначение = ТекущиеДанные.Среднее;
		
	Иначе
		
		ТекущиеДанные.НовоеЗначение = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияФормы

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	ПланированиеКлиентСервер.УстановитьСостояниеОбновляется(Элементы.ИдетОбновлениеЭтапы, БиблиотекаКартинок.ДлительнаяОперация48);
	ПланированиеКлиентСервер.УстановитьСостояниеОбновляется(Элементы.ИдетОбновлениеВидыДеятельности, БиблиотекаКартинок.ДлительнаяОперация48);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Отказ)
	
	Если Не ЗначениеЗаполнено(Параметры.Сотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан пользователь для которого будет выполняться распределение.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаНачалаПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана дата начала периода планирования.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВидПлана) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид плана.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВидСогласуемогоРесурсаПлановыхРабот) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид планируемого ресурса.'"),,,, Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Параметры.ДатыНачинаяС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указаны возможные периоды начала распределения.'"),,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Сотрудник                                     = Параметры.Сотрудник;
	ДатаНачалаПериода                             = Параметры.ДатаНачалаПериода;
	ВидПлана                                      = Параметры.ВидПлана;
	ПороговоеЗначениеОтображениеЭтапПланЗанятости = Параметры.ПороговоеЗначениеОтображениеЭтапПланЗанятости;
	ВидСогласуемогоРесурсаПлановыхРабот           = Параметры.ВидСогласуемогоРесурсаПлановыхРабот;
	НормативПланируемогоВремени                   = Параметры.НормативПланируемогоВремени;
	
	Для Каждого ЭлементСписка Из Параметры.ДатыНачинаяС Цикл
		Элементы.РаспределятьНачинаяС.СписокВыбора.Добавить(ЭлементСписка.Значение, Формат(ЭлементСписка.Значение, "ДЛФ=D"));
	КонецЦикла;
	РаспределятьНачинаяС = Элементы.РаспределятьНачинаяС.СписокВыбора[0].Значение;
	
	СтрокаДляКого = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href=""%1"">%2</a>'"),
	                                                       ПолучитьНавигационнуюСсылку(Сотрудник),
	                                                       СтрШаблон(НСтр("ru = 'Для %1'"),Строка(Сотрудник)));
	
	Элементы.ДекорацияДляКого.Заголовок = СтрокаДляКого;
	
КонецПроцедуры

Процедура ЗаполнитьПериодыПланирования()
	
	Элементы.НачалоПериодаВидыДеятельности.СписокВыбора.Очистить();
	
	ДанныеВидаПлана     = Справочники.ВидыПланов.ДанныеВидаПлана(ВидПлана);
	ТаблицаПланов       = ТаблицаПланов(ДанныеВидаПлана); 
	
	Для Каждого СтрокаТаблицы Из ТаблицаПланов Цикл
		
		Элементы.НачалоПериодаВидыДеятельности.СписокВыбора.Добавить(СтрокаТаблицы.НачалоПериода, Формат(СтрокаТаблицы.НачалоПериода, "ДФ=dd.MM.yy"));
		
		НоваяСтрока = ТаблицаПериодовПланов.Добавить();
		НоваяСтрока.НачалоПериода      = СтрокаТаблицы.НачалоПериода;
		НоваяСтрока.КонецПериода       = СтрокаТаблицы.КонецПериода;
		НоваяСтрока.ИдентификаторПлана = СтрокаТаблицы.ИдентификаторПлана;
		
	КонецЦикла; 
	
	НачалоПериодаВидыДеятельности = Элементы.НачалоПериодаВидыДеятельности.СписокВыбора[0].Значение;
	
	НормализоватьВыбранныеПериоды(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ТаблицаПланов( ДанныеВидаПлана)
	
	ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
	ПараметрыПолученияПлановПоПериоду.ВидПлана              = ДанныеВидаПлана.ВидПлана;
	ПараметрыПолученияПлановПоПериоду.ДатаНачала            = НачалоДня(ТекущаяДатаСеанса());
	ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = ДанныеВидаПлана.ВсеНастройкиПланирования[0];
	ПараметрыПолученияПлановПоПериоду.ДатаОкончания         = Перечисления.ПериодичностьПланов.РезультатИзмененияДатыНаПериодичность(ПараметрыПолученияПлановПоПериоду.ДатаНачала, 
	                                                                                                                                 ДанныеВидаПлана.Периодичность,
	                                                                                                                                 15,
	                                                                                                                                 "Вперед");
	
	ТаблицаПланов =  Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
	
	Возврат ТаблицаПланов;
	
КонецФункции

#КонецОбласти

#Область ВыборПериодовПлановВидыДеятельности

&НаКлиентеНаСервереБезКонтекста
Процедура НормализоватьВыбранныеПериоды(Форма)
	
	ТекущееЗначениеКонецПериода = Форма.КонецПериодаВидыДеятельности;
	
	ЗаполнитьСписокКонецПериода(Форма.НачалоПериодаВидыДеятельности,
	                            Форма.ТаблицаПериодовПланов, 
	                            Форма.Элементы.КонецПериодаВидыДеятельности.СписокВыбора);
	
	Если Форма.Элементы.КонецПериодаВидыДеятельности.СписокВыбора.НайтиПоЗначению(ТекущееЗначениеКонецПериода) = Неопределено Тогда 
		Форма.КонецПериодаВидыДеятельности = Форма.Элементы.КонецПериодаВидыДеятельности.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокКонецПериода(ПериодПланаНачало, ТаблицаПериодовПланов, СписокВыбораПериодПланаКонец)
	
	СписокВыбораПериодПланаКонец.Очистить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаПериодовПланов Цикл
		
		Если ПериодПланаНачало > СтрокаТаблицы.НачалоПериода Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВыбораПериодПланаКонец.Добавить(СтрокаТаблицы.КонецПериода, Формат(СтрокаТаблицы.КонецПериода, "ДФ=dd.MM.yy"));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы 
		Или ВыполняетсяЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Истина;
	
	ВыполняетсяЗакрытие = Истина;
	
	Закрыть(ТребуетсяОбновлениеРабочегоМеста);
	
КонецПроцедуры

 #КонецОбласти

#КонецОбласти