

#Область ОбработчикиСобытийФормы

 &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	ОбработатьПереданныеПараметры(Отказ);
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодготовитьДанныеЭтапаКРаспределению(ПараметрыПолученияДанныхПоЭтапу());

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы 
		Или ВыполняетсяЗакрытие Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Истина;
	
	ВыполняетсяЗакрытие = Истина;
	
	Закрыть(ТребуетсяОбновлениеРабочегоМеста);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ДекорацияДляЭтапаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры 

#КонецОбласти 

#Область ОбработчикиТаблицыКРаспределению

&НаКлиенте
Процедура ТаблицаКРаспределениюЧтоДелатьОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 
	
	ТекущиеДанные = Элементы.ТаблицаКРаспределению.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЧтоДелать(ТекущиеДанные);
	
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаКРаспределениюЧтоДелатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаКРаспределению.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииЧтоДелать(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти 

#Область КомандыФормы

 &НаКлиенте
Процедура Распределить(Команда)
	
	ЗапланироватьСотрудниковПоЭтапу();
	
КонецПроцедуры 

&НаКлиенте
Процедура Обновить(Команда)
	
	ПодготовитьДанныеЭтапаКРаспределению(ПараметрыПолученияДанныхПоЭтапу());
	
КонецПроцедуры

&НаКлиенте
Процедура НеИзменять(Команда)
	
	ИзменитьВариантРаспределения( ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.НеИзменять"));
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ИзменитьВариантРаспределения( ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.Очищать"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьСУчетомНорматива(Команда)
	
	ИзменитьВариантРаспределения( ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСУчетомНорматива"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьСПревышениемНорматива(Команда)
	
	ИзменитьВариантРаспределения( ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСПревышениемНорматива"));
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ПриСозданииНаСервере

&НаСервере
Процедура ИнициализироватьДанныеФормы()

	ПланированиеКлиентСервер.УстановитьСостояниеОбновляется(Элементы.ИдетОбновление, БиблиотекаКартинок.ДлительнаяОперация48);

КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Отказ)

	Если Не ЗначениеЗаполнено(Параметры.Этап) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан этап для которого будет выполнено распределение.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ТехПроект) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан технический проект этапа, для которого будет выполнено распределение.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ДатаНачалаПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указана дата начала периода планирования.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВидПлана) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид плана.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВидСогласуемогоРесурсаПлановыхРабот) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид планируемого ресурса.'"),,,, Отказ);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(Параметры.ДатыНачинаяС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указаны возможные периоды начала распределения.'"),,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Этап                                          = Параметры.Этап;
	ТехПроект                                     = Параметры.ТехПроект;
	ДатаНачалаПериода                             = Параметры.ДатаНачалаПериода;
	ВидПлана                                      = Параметры.ВидПлана;
	ПороговоеЗначениеОтображениеЭтапПланЗанятости = Параметры.ПороговоеЗначениеОтображениеЭтапПланЗанятости;
	ВидСогласуемогоРесурсаПлановыхРабот           = Параметры.ВидСогласуемогоРесурсаПлановыхРабот;
	НормативПланируемогоВремени                   = Параметры.НормативПланируемогоВремени;
	
	Для Каждого ЭлементСписка Из Параметры.ДатыНачинаяС Цикл
		Элементы.РаспределятьНачинаяС.СписокВыбора.Добавить(ЭлементСписка.Значение, Формат(ЭлементСписка.Значение, "ДЛФ=D"));
	КонецЦикла;
	РаспределятьНачинаяС = Элементы.РаспределятьНачинаяС.СписокВыбора[0].Значение;
	
	СтрокаДляЭтапа = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href=""%1"">%2</a>'"),
	                                                       ПолучитьНавигационнуюСсылку(Этап),
	                                                       СтрШаблон(НСтр("ru = '%1 (""%2"")'"),Строка(Этап), Строка(ТехПроект)));
	
	Элементы.ДекорацияДляЭтапа.Заголовок = СтрокаДляЭтапа;
	
	Этап = Параметры.Этап;
	
	Элементы.ДекорацияЕдиницаИзмеренияНорматив.Заголовок = Параметры.ЕдиницаИзмеренияВидРесурса;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ИзменениеЗначенияНеДоступно = Новый СписокЗначений;
	ИзменениеЗначенияНеДоступно.Добавить(Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять);
	ИзменениеЗначенияНеДоступно.Добавить(Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать);
	
	УказаниеЗначенияОбязательно = Новый СписокЗначений;
	УказаниеЗначенияОбязательно.Добавить(Перечисления.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСПревышениемНорматива);
	УказаниеЗначенияОбязательно.Добавить(Перечисления.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСУчетомНорматива);
	
	ДатаНачалаНепланировавшихсяЭтапов      = Планирование.ДатаНачалаНепланировавшихсяЭтапов(ДатаНачалаПериода); 
	ДатаОкончанияНепланировавшихсяЭтапов   = Планирование.ДатаОкончанияНепланировавшихсяЭтапов(ДатаНачалаПериода);
	
	//Нераспределено больше 0
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюНераспределено.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Нераспределено");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный); 
	
	//Этап не планировался в планах с
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюВПланахС.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ВПланахС");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ДатаНачалаНепланировавшихсяЭтапов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не планировалось>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);
	
	//Этап не планировался в планах с
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюВПланахПо.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ВПланахПо");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ДатаОкончанияНепланировавшихсяЭтапов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не планировалось>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаВыполненнойЗадачи);

	//Вариант распределения - Изменять с учетом норматива
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСУчетомНорматива;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЗеленый);
	
	//Вариант распределения - Изменять с учетом норматива
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСУчетомНорматива;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиЗеленый);
	
	//Вариант распределения - Изменять с превышением норматива
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСПревышениемНорматива;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи);
	
	//Вариант распределения - Не изменять
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	
	//Вариант распределения - Очищать
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЧтоДелать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.ВариантыРаспределенияРаботПланЗанятости.Очищать;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
	//Новое значение плана не доступно
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЗапланировать.Имя);
	
	ЭлементОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = ИзменениеЗначенияНеДоступно;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",       ЦветаСтиля.ЗакрытыйДокумент); 
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",          "-");
	
	//Новое значение плана обязательно
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКРаспределениюЗапланировать.Имя);
	
	ГруппаЭлементовОтбора =  Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.ЧтоДелать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = УказаниеЗначенияОбязательно;
	
	ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаКРаспределению.Запланировать");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ПодготовкаКРаспределению

&НаКлиенте
Функция ПараметрыПолученияДанныхПоЭтапу()

	ПараметрыПодготовкиДанныхПоЭтапам = Новый Структура;
	
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ВидПлана",                                 ВидПлана);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ДатаНачалаПериода",                        ДатаНачалаПериода);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("Этап",                                     Этап);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ТехПроект",                                ТехПроект);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ПороговоеЗначениеДляЭтапаПоЗапланировано", ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ПороговоеЗначениеДляЭтапаПоФакт",          ПороговоеЗначениеОтображениеЭтапПланЗанятости);
	ПараметрыПодготовкиДанныхПоЭтапам.Вставить("ВидСогласуемогоРесурсаПлановыхРабот",      ВидСогласуемогоРесурсаПлановыхРабот);
	
	Возврат ПараметрыПодготовкиДанныхПоЭтапам;

КонецФункции

&НаКлиенте
Процедура ПодготовитьДанныеЭтапаКРаспределению(ПараметрыПодготовки)
	
	ОчиститьСообщения();
	
	ТаблицаКРаспределению.Очистить();
	
	Элементы.СтраницыОбновляетсяОбновлено.ТекущаяСтраница = Элементы.СтраницаОбновляется;
	
	ДлительнаяОперация = ВыполнитьПодготовкуДанныеЭтапаДлительнаяОперация(ПараметрыПодготовки,
	                                                                         УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПодготовкаДанныхЭтапаКРаспределениюЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодготовкаДанныхЭтапаКРаспределениюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПодготовкуДанныеЭтапаДлительнаяОперация(ПараметрыПодготовки, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка данных этапа технического проекта к распределению в плане занятости'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ПодготовитьДанныеЭтапаТехническогоПроектаКРаспределению",
	                                                       ПараметрыПодготовки, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПодготовкаДанныхЭтапаКРаспределениюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ОбработатьЗавершениеПодготовкиЭтапа(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеПодготовкиЭтапа(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ОбработатьЗавершениеПодготовкиЭтапаНаСервере(АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьЗавершениеПодготовкиЭтапаНаСервере(АдресРезультата, ДополнительныеПараметры)
	
	РезультатПодготовки = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если РезультатПодготовки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из РезультатПодготовки Цикл
		
		НоваяСтрока = ТаблицаКРаспределению.Добавить();
		НоваяСтрока.Сотрудник      = СтрокаТаблицы.Сотрудник;
		НоваяСтрока.Нераспределено = ПланированиеКлиентСервер.ЧасыПоДлительностиВСекундах(СтрокаТаблицы.Нераспределено);
		НоваяСтрока.Запланировано  = СтрокаТаблицы.ПланируемыеТрудозатраты ;
		НоваяСтрока.ВПланахС       = СтрокаТаблицы.ПерваяДатаПланаПоСотруднику ;
		НоваяСтрока.ВПланахПо      = СтрокаТаблицы.ПоследняяДатаПланаПоСотруднику ;
		НоваяСтрока.ЧтоДелать      = Перечисления.ВариантыРаспределенияРаботПланЗанятости.НеИзменять;
		
	КонецЦикла;
	
	Элементы.СтраницыОбновляетсяОбновлено.ТекущаяСтраница = Элементы.СтраницаОбновлено;
	
КонецПроцедуры

#КонецОбласти 

#Область ПриИзмененииЧтоДелать

&НаКлиенте
Процедура ИзменитьВариантРаспределения(НовоеЗначение)

	Для Каждого ВыделеннаяСтрока Из Элементы.ТаблицаКРаспределению.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаКРаспределению.НайтиПоИдентификатору(ВыделеннаяСтрока); 
		
		Если ДанныеСтроки.ЧтоДелать <> НовоеЗначение Тогда
			ДанныеСтроки.ЧтоДелать = НовоеЗначение;
			ПриИзмененииЧтоДелать(ДанныеСтроки);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЧтоДелать(ТекущиеДанные)
	
	Если ТекущиеДанные.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ПустаяСсылка") Тогда
		ТекущиеДанные.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.НеИзменять");
	КонецЕсли;
	
	Если ТекущиеДанные.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.НеИзменять")
		Или ТекущиеДанные.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.Очищать") Тогда
		ТекущиеДанные.Запланировать = 0;
	КонецЕсли 
	
КонецПроцедуры

#КонецОбласти

#Область ПриИзмененииЧтоДелать

&НаКлиенте
Процедура ЗапланироватьСотрудниковПоЭтапу()
	
	ОчиститьСообщения();
	
	НастройкиПланирования = НастройкиПланирования();
	
	Если Не РезультатПроверкиНастроекПланирования(НастройкиПланирования) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПланированиеПоУказаннымНастройкам(НастройкиПланирования);
	
КонецПроцедуры

&НаКлиенте
Функция РезультатПроверкиНастроекПланирования(НастройкиПланирования)
	
	Если ТипЗнч(НастройкиПланирования.Сотрудники) <> Тип("Соответствие") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для распределения'")); 
		Возврат Ложь;
	КонецЕсли;
	
	Если НастройкиПланирования.Сотрудники.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет данных для распределения'")); 
		Возврат Ложь;
	КонецЕсли; 
	
	Успешно = Истина;
	
	Для Каждого ДанныеПоСотруднику Из НастройкиПланирования.Сотрудники Цикл
		
		Если ДанныеПоСотруднику.Значение.НовоеЗначениеПлана = 0
			И (ДанныеПоСотруднику.Значение.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСПревышениемНорматива")
			Или ДанныеПоСотруднику.Значение.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.ЗапланироватьСУчетомНорматива")) Тогда
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Сотрудник", ДанныеПоСотруднику.Ключ);
			
			НайденныеСтроки = ТаблицаКРаспределению.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИндексСтроки = ТаблицаКРаспределению.Индекс(НайденныеСтроки[0]);
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не указано значение ""Запланировать"" для сотрудника %1.'"), ДанныеПоСотруднику.Ключ);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ТаблицаКРаспределению[" + Строка(ИндексСтроки)+ "].Запланировать");
			Успешно = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успешно;
	
КонецФункции

&НаКлиенте
Функция НастройкиПланирования()
	
	Настройки = Новый Структура;
	Настройки.Вставить("Сотрудники",                  Новый Соответствие);
	Настройки.Вставить("ВидПлана",                    ВидПлана);
	Настройки.Вставить("ДатаНачалаПериода",           ДатаНачалаПериода);
	Настройки.Вставить("Этап",                        Этап);
	Настройки.Вставить("РаспределятьНачинаяС",        РаспределятьНачинаяС);
	Настройки.Вставить("НормативПланируемогоВремени", НормативПланируемогоВремени);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКРаспределению Цикл
		
		Если СтрокаТаблицы.ЧтоДелать = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРаботПланЗанятости.НеИзменять") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЭтапа = Новый Структура;
		
		ДанныеЭтапа.Вставить("Нераспределено",      СтрокаТаблицы.Нераспределено);
		ДанныеЭтапа.Вставить("ЧтоДелать",           СтрокаТаблицы.ЧтоДелать);
		ДанныеЭтапа.Вставить("НовоеЗначениеПлана",  СтрокаТаблицы.Запланировать);
		
		Настройки.Сотрудники.Вставить(СтрокаТаблицы.Сотрудник, ДанныеЭтапа);
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьПланированиеПоУказаннымНастройкам(НастройкиПланирования)
	
	ДлительнаяОперация = ВыполнитьПланированиеПоНастройкамДлительнаяОперация(НастройкиПланирования,
	                                                                         УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура; 
	ДополнительныеПараметры.Вставить("Этап", НастройкиПланирования.Этап);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПланированиеПоНастройкамЗавершение(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПланированиеПоНастройкамЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПланированиеПоНастройкамДлительнаяОперация(ПараметрыРаспределения, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Планирование сотрудников в плане занятости по настройкам для этапа'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Планирование.ЗапланироватьСотрудниковПоЭтапуПоНастройкам",
	                                                       ПараметрыРаспределения, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПланированиеПоНастройкамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда 
		ТребуетсяОбновлениеРабочегоМеста = Истина;
		ОбработатьЗавершениеПланированияПоНастройкам(Результат.АдресРезультата, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеПланированияПоНастройкам(АдресРезультата, ДополнительныеПараметры)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		РезультатПланирования = ПолучитьИзВременногоХранилища(АдресРезультата)
	КонецЕсли;
	
	Если РезультатПланирования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатПланирования.Успешно Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПланирования.СообщениеПользователю);
		Возврат;
		
	Иначе
		
		ПодготовитьДанныеЭтапаКРаспределению(ПараметрыПолученияДанныхПоЭтапу());
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти