
&НаКлиенте
Перем ОбновитьИнтерфейс;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкиОбновленияСвязанныхРеквизитов();
	
	// Обновление состояния элементов
	УстановитьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеПроектов();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НаборКонстант.ИспользоватьИнтеграциюСВнешнимиСистемами Тогда
		Если Не ЗначениеЗаполнено(НаборКонстант.КаталогЗагрузкиОшибок) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Поле ""Каталог загрузки ошибок"" не заполнено.'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не Этаформа.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗагружатьОшибкиИзФайловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ОбновитьИспользованиеРегламентногоЗадания(НаборКонстант.ИспользоватьИнтеграциюСВнешнимиСистемами);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЗагрузкиОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = НаборКонстант.КаталогЗагрузкиОшибок;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога загрузки'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		НаборКонстант.КаталогЗагрузкиОшибок = ДиалогВыбораФайла.Каталог;
		Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогЗагрузкиОшибокПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьПроекты(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаПроектовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияИнтеграцияСВнешнимиСистемами.Форма.ФормаФильтр",,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПроектовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПредставлениеПроектов();
	
КонецПроцедуры


&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьНастройкиОбновленияСвязанныхРеквизитов(Результат);
	КонецЕсли;
	
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписание.РасширеннаяПодсказка.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеПроектов()
	
	Количество = КоличествоПроектовЗагрузки();
	Элементы.НастроитьПроекты.Заголовок = ?(Количество = 0,
	                                        НСтр("ru = 'Проекты'"),
	                                        СтрШаблон(НСтр("ru = 'Проекты (%1)'"), Количество));

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоПроектовЗагрузки()
	
	ПараметрыЗагрузки = Константы.ПараметрыЗагрузкиОшибокИзФайлов.Получить().Получить();
	
	Количество = 0;
	Если ТипЗнч(ПараметрыЗагрузки) = Тип("ТаблицаЗначений") Тогда
		Количество = ПараметрыЗагрузки.Количество();
	КонецЕсли; 
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьИнтеграциюСВнешнимиСистемами" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ИспользоватьИнтеграциюСВнешнимиСистемами;
		
		Элементы.КаталогЗагрузкиОшибок.Доступность = ЗначениеКонстанты;
		Элементы.НастроитьПроекты.Доступность      = ЗначениеКонстанты;
		Элементы.НастроитьРасписание.Доступность   = ЗначениеКонстанты;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОбновленияСвязанныхРеквизитов(Расписание = Неопределено)
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ЗагрузитьОшибкиИзФайлов);
	
	Если Расписание <> Неопределено Тогда
		Задание.Расписание = Расписание;
		Задание.Записать();
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = Задание.Расписание;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальностиОбъекта = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальностиОбъекта);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальностиОбъекта;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	Если КонстантаИмя = "ИспользоватьИнтеграциюС1СДокументооборот" Тогда
		ОбновитьНастройкиОбновленияСвязанныхРеквизитов();
	КонецЕсли;
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным, ПеречитыватьФорму = Истина)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	КонецЕсли;
	
	// Сохранение значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьИспользованиеРегламентногоЗадания(Использование)
	
	Задание = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.ЗагрузитьОшибкиИзФайлов);
	Задание.Использование = Использование;
	Задание.Записать();
	
КонецПроцедуры

#КонецОбласти



