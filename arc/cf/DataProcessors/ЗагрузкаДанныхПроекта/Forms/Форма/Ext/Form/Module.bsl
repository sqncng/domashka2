
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Шаг = "ВыборФайла";
	
	ЗагрузкаСуществующихДанных = (ВариантЗагрузки=1);
	Элементы.Проект.Доступность = ЗагрузкаСуществующихДанных;
	Элементы.ПомечатьНаУдалениеОбъекты.Доступность = ЗагрузкаСуществующихДанных;
	
	УстановитьСтраницыКоманды(Шаг, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ВариантЗагрузки = 0 Тогда
		НепроверяемыеРеквизиты = Новый Массив;
		НепроверяемыеРеквизиты.Добавить("Проект");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	КонецЕсли;
	
	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось установить монопольный режим. Загрузка невозможна'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Укажите файл для загрузки данных'");
	
	ДиалогВыбораФайла.Фильтр = "zip|*.zip";
	ДиалогВыбораФайла.Расширение = "zip";
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайлаЗагрузки;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗагрузкиПриИзменении(Элемент)
	
	ЗагрузкаСуществующихДанных = (ВариантЗагрузки=1);
	Элементы.Проект.Доступность = ЗагрузкаСуществующихДанных;
	Элементы.ПомечатьНаУдалениеОбъекты.Доступность = ЗагрузкаСуществующихДанных;
	
	Если Не ЗагрузкаСуществующихДанных И ПомечатьНаУдалениеОбъекты Тогда
		ПомечатьНаУдалениеОбъекты = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	Если Шаг = "Загрузка" Тогда
		Шаг = "ВыборФайла";
	КонецЕсли;
	
	УстановитьСтраницыКоманды(Шаг, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ОчиститьСообщения();
	ПроверитьЗаполнение();
	
	Попытка
		ТекстЗаголовка = НСтр("ru='Загрузка данных'");
		ТекстСостояния = НСтр("ru='Выполняется чтение данных файла'");
		Состояние(ТекстЗаголовка,, ТекстСостояния);
		
		АдресФайлаВоВременномХранилище = "";
		ОписаниеОповещения = Новый ОписаниеОповещения("ДалееПомещениеФайлаЗавершение", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресФайлаВоВременномХранилище, ИмяФайлаЗагрузки, Ложь);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДалееПомещениеФайлаЗавершение(Результат, АдресФайлаВоВременномХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		ПрочитатьДанныеАрхиваСервер(АдресФайлаВоВременномХранилище);
		
		Если Шаг = "ВыборФайла" Тогда
			Шаг = "Загрузка";
		КонецЕсли;
		
		УстановитьСтраницыКоманды(Шаг, Элементы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОчиститьСообщения();
	
	ТекстЗаголовка = НСтр("ru='Загрузка данных'");
	ТекстСостояния = НСтр("ru='Выполняется загрузка данных'");
	Состояние(ТекстЗаголовка,, ТекстСостояния);
		
	ЗагрузитьДанныеСервер();
	
	ТекстСообщения = НСтр("ru='Загрузка данных'");
	ТекстПояснения = НСтр("ru='Загрузка данных из файла завершена'");
	
	ПоказатьОповещениеПользователя(ТекстСообщения, , ТекстПояснения);
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьДанныеАрхиваСервер(АдресФайлаВоВременномХранилище)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	КаталогЗагрузки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогЗагрузки);
	
	ЧтениеZIPФайла = Новый ЧтениеZIPФайла(ИмяВременногоФайла);
	ЧтениеZIPФайла.Извлечь(ЧтениеZIPФайла.Элементы[0], КаталогЗагрузки);
	ЧтениеZIPФайла.Извлечь(ЧтениеZIPФайла.Элементы[1], КаталогЗагрузки);
	
	ИмяФайлаОбщихДанных = КаталогЗагрузки + "\" +  "model_refmap.xml";
	ИмяФайлаДанныхПроекта = КаталогЗагрузки + "\" +  "model_data.xml";
	
	// Чтение общих данных
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайлаОбщихДанных);
	
	ДеревоОбъектов = ПолучитьДеревоОбъектовНастройкиСоответствия(ЧтениеXML);
    ЗначениеВРеквизитФормы(ДеревоОбъектов, "ДеревоСоответствия");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеСервер()
	
	// Чтение данных проекта
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ИмяФайлаДанныхПроекта);
	
	Попытка
		
		НачатьТранзакцию();
		
		Если ПомечатьНаУдалениеОбъекты Тогда
			ПометитьНаУдалениеОбъекты();
		КонецЕсли;
		
		ЗагрузитьДанныеИзXML(ЧтениеXML);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьДанныеИзXML(ЧтениеXML)
	
	// проверка формата файла общих данных
	Если Не ЧтениеXML.Прочитать() Или
		ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или 
		ЧтениеXML.ЛокальноеИмя <> "_1CV8ModelData" Или 
		ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8ModelData/" Тогда
		
		ТекстСообщения = НСтр("ru = 'Неверный формат данных: некорректное начало файла'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ПроверитьВерсиюФормата(ЧтениеXML);
	
	ОткрытаСекцияОбязательныхДанных = Ложь;
	ОткрытаСекцияДанных = Ложь;
	
	СоответствиеОбязательныхДанных = Новый Соответствие;
	
	Если ЧтениеXML.Прочитать() Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "RequiredData" Тогда
				ОткрытаСекцияОбязательныхДанных = Истина;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Нарушена структура данных'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Нарушена структура данных'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Если НЕ ОткрытаСекцияОбязательныхДанных Тогда
		Если ЧтениеXML.Прочитать() Тогда
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если ЧтениеXML.Имя = "RequiredData" Тогда
					ОткрытаСекцияОбязательныхДанных = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОбязательныхДанных = ПолучитьОбязательныеДанные();
	
	Если ОткрытаСекцияОбязательныхДанных Тогда
		ПрочитатьОбязательныеДанные(ЧтениеXML, СоответствиеОбязательныхДанных, СтруктураОбязательныхДанных);
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Нарушена структура данных'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	СекцияОбязательныхДанныхЗавершена = Ложь;
	
	// Проверяется заключительный тег секции обязательных данных
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Если ЧтениеXML.Имя = "RequiredData" Тогда
			СекцияОбязательныхДанныхЗавершена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СекцияОбязательныхДанныхЗавершена Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Нарушена структура данных. Некорректное завершение секции обязательных данных'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Если ЧтениеXML.Прочитать() Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "ProjectData" Тогда
				ОткрытаСекцияДанных = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОткрытаСекцияДанных Тогда 
		ЗагрузитьДанныеПроекта(ЧтениеXML, СоответствиеОбязательныхДанных);
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Нарушена структура данных'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	СекцияДанныхЗавершена = Ложь;
	
	// Проверяется заключительный тег секции данных
	Если ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Если ЧтениеXML.Имя = "ProjectData" Тогда
			СекцияДанныхЗавершена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не СекцияДанныхЗавершена Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Нарушена структура данных. Некорректное завершение секции данных проекта'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПроекта(ЧтениеXML, СоответствиеОбязательныхДанных)
	
	Если Не ЧтениеXML.Прочитать() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоСоответствияОбъектов = РеквизитФормыВЗначение("ДеревоСоответствия");
	
	СоответствиеТиповОбщихДанных = СтрокиДереваСоответствияПоТипам(ДеревоСоответствияОбъектов);
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ОбъектЧтения = ПрочитатьXML(ЧтениеXML);
		
		Если ОбъектНеПодлежитЗагрузке(ОбъектЧтения) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если объект заменяется на установленное соответствие, то он не обрабатывается,
		// т.к. не будет записан в базу, а в других объектах вместо него будут подставлены
		// ссылки соответсвия
			
		Если НЕ ОбъектЗаменяется(ОбъектЧтения, ДеревоСоответствияОбъектов) Тогда
			
			ОбработатьПрочитанныйОбъект(ОбъектЧтения, ДеревоСоответствияОбъектов, 
										СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
			
			ОбъектЧтения.ОбменДанными.Загрузка = Истина;
			ОбъектЧтения.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПрочитанныйОбъект(ОбъектЧтения, ДеревоСоответствияОбъектов, СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных)
	
	КлассМетаданных = КлассМетаданных(ОбъектЧтения);
	
	Если КлассМетаданных = Метаданные.Справочники ИЛИ КлассМетаданных = Метаданные.ПланыВидовХарактеристик Тогда
		
		УстановитьНовыйКодПриНеобходимости(ОбъектЧтения);
		ОбработатьСправочникИлиПВХ(ОбъектЧтения, ДеревоСоответствияОбъектов,
									СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
		
	ИначеЕсли КлассМетаданных = Метаданные.РегистрыСведений Тогда
		
		ОбработатьНаборЗаписей(ОбъектЧтения, ДеревоСоответствияОбъектов, 
								СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСправочникИлиПВХ(Объект, ДеревоСоответствияОбъектов, СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных)
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Для Каждого Реквизит из МетаданныеОбъекта.Реквизиты Цикл
		ПроверитьЗаменитьЗначение(Объект[Реквизит.Имя], СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
	КонецЦикла;
								
	Для Каждого СтандартныйРеквизит из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если СтандартныйРеквизит.Имя = "Родитель" ИЛИ СтандартныйРеквизит.Имя = "Владелец" Тогда
			ПроверитьЗаменитьЗначение(Объект[СтандартныйРеквизит.Имя], СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
		КонецЕсли;
	КонецЦикла;							
	
	Для Каждого ТабличнаяЧасть из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		Для Каждого СтрокаТЧ из Объект[ТабличнаяЧасть.Имя] Цикл
			Для Каждого Реквизит из ТабличнаяЧасть.Реквизиты Цикл
				ПроверитьЗаменитьЗначение(СтрокаТЧ[Реквизит.Имя], СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьНаборЗаписей(НаборЗаписей, ДеревоСоответствияОбъектов, СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных)
	
	МетаданныеОбъекта = НаборЗаписей.Метаданные();
	
	// Отбор
	Для Каждого ЭлементОтбора из НаборЗаписей.Отбор Цикл
		ПроверитьЗаменитьЗначение(ЭлементОтбора.Значение, СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
	КонецЦикла;
	
	Для Каждого Запись из НаборЗаписей Цикл
		
		// Измерения
		Для Каждого Измерение из МетаданныеОбъекта.Измерения Цикл
			ПроверитьЗаменитьЗначение(Запись[Измерение.Имя], СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
		КонецЦикла;
		
		// Ресурсы
		Для Каждого Ресурс из МетаданныеОбъекта.Ресурсы Цикл
			ПроверитьЗаменитьЗначение(Запись[Ресурс.Имя], СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
		КонецЦикла;
		
		// Реквизиты
		Для Каждого Реквизит из МетаданныеОбъекта.Реквизиты Цикл
			ПроверитьЗаменитьЗначение(Запись[Реквизит.Имя], СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаменитьЗначение(Значение, СоответствиеТиповОбщихДанных, СоответствиеОбязательныхДанных)
	
	ТипЗначенияРеквизита = ТипЗнч(Значение);
	
	СтрокаДереваСоответствия = СоответствиеТиповОбщихДанных.Получить(ТипЗначенияРеквизита);
	
	// Анализируется наличие указанного соответствия в настройках загрузки
	Если СтрокаДереваСоответствия<>Неопределено Тогда
		
		Если ЗначениеЗаполнено(Значение) Тогда
			ЗаменитьЗначение(Значение, СтрокаДереваСоответствия);
		КонецЕсли;
		
	// При загрузке данных существующего проекта проект всегда заменяется	
	ИначеЕсли ТипЗначенияРеквизита = Тип("СправочникСсылка.Проекты") И ВариантЗагрузки = 1 Тогда
	
		Значение = Проект;
		
	// Анализируется необходимость замены обязательных данных	
	ИначеЕсли ТипЗначенияРеквизита = Тип("СправочникСсылка.ОбъектыМетаданных")
		ИЛИ ТипЗначенияРеквизита = Тип("СправочникСсылка.ВидыДоступа") Тогда
		
		ЗначениеСоответствия = СоответствиеОбязательныхДанных.Получить(Значение);
		
		Если ЗначениеСоответствия <> Неопределено Тогда
			Значение = ЗначениеСоответствия;
		КонецЕсли;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ЗаменитьЗначение(Значение, СтрокаДереваСоответствия)
	
	СтрокаЗначения = СтрокаДереваСоответствия.Строки.Найти(Значение, "Ссылка");
	
	Если СтрокаЗначения <> Неопределено Тогда
		// Если указано соответствие данных ИБ, значение будет заменено на указанное соответствие,
		// в противном случае остается исходное значение
		Если ЗначениеЗаполнено(СтрокаЗначения.ДанныеИБ) Тогда
			Значение = СтрокаЗначения.ДанныеИБ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовыйКодПриНеобходимости(Объект)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ТехническиеПроекты")
		ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.Идеи") Тогда
		
		Объект.УстановитьНовыйКод();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбъектНеПодлежитЗагрузке(ОбъектЧтения)
	
	Результат = Ложь;
	
	Если ВариантЗагрузки = 0 Тогда
		// Если загружаются данные нового проекта, все данные загружаются из пакета
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектЧтения) = Тип("СправочникОбъект.ОбъектыМетаданных") Тогда
		
		ИмяКласса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектЧтения.Родитель, "Имя");
		
		Если (ИмяКласса = "Роли" И ОбъектЧтения.Имя = "ПолныеПрава")
			ИЛИ (ИмяКласса = "Роли" И ОбъектЧтения.Имя = "БазовыеПрава") 
			ИЛИ (ИмяКласса = "Роли" И ОбъектЧтения.Имя = "РольНеНазначается") 
			ИЛИ ОбъектЧтения.ЭтоГруппа Тогда
		
		    Результат = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектЧтения) = Тип("СправочникОбъект.ВидыДоступа") Тогда
		
		Если ОбъектЧтения.Имя = "Пользователи"
			ИЛИ ОбъектЧтения.Имя = "ВнешниеПользователи"
			ИЛИ ОбъектЧтения.Имя = "ПоОбъектуДоступа"
			ИЛИ ОбъектЧтения.Имя = "ПоУсловию" Тогда
			
			Результат = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбъектЗаменяется(ОбъектЧтения, ДеревоСоответствияОбъектов)
	
	ОбъектЗаменяется = Ложь;
	
	ПолноеИмяОбъектаМетаданных = ОбъектЧтения.Метаданные().ПолноеИмя();
	
	СтрокаВидаОбъекта = ДеревоСоответствияОбъектов.Строки.Найти(ПолноеИмяОбъектаМетаданных, "ИмяОбъекта");
	Если СтрокаВидаОбъекта <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ОбъектЧтения.Ссылка) Тогда
			ИскомаяСсылка = ОбъектЧтения.Ссылка;
		Иначе
			ИскомаяСсылка = ОбъектЧтения.ПолучитьСсылкуНового();
		КонецЕсли;
			
		СтрокаСсылки = СтрокаВидаОбъекта.Строки.Найти(ИскомаяСсылка, "Ссылка");
		Если СтрокаСсылки <> Неопределено И ЗначениеЗаполнено(СтрокаСсылки.ДанныеИБ) Тогда
			ОбъектЗаменяется = Истина;
		КонецЕсли;
	ИначеЕсли ПолноеИмяОбъектаМетаданных = "Справочник.Проекты" И ВариантЗагрузки = 1 Тогда
		ОбъектЗаменяется = Истина;
	КонецЕсли;
	
	Возврат ОбъектЗаменяется;
	
КонецФункции

&НаСервере
Функция КлассМетаданных(ОбъектДанных)
	
	МетаданныеОбъекта = ОбъектДанных.Метаданные();
	
	Если Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
		Возврат Метаданные.Константы;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Возврат Метаданные.Справочники;
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		Возврат Метаданные.ПланыВидовХарактеристик;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		Возврат Метаданные.РегистрыСведений;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьОбязательныеДанные()
	
	Если ВариантЗагрузки = 1 Тогда
		// Если загружаются данные существующего проекта, выполняется поиск имеющихся обязательных данных
		СтруктураОбязательныхДанных = ВыгрузкаЗагрузкаДанныхПоПроектам.СтруктураОбязательныхДанных(Проект);
	Иначе
		СтруктураОбязательныхДанных = Новый Структура;
		СтруктураОбязательныхДанных.Вставить("РольПолныеПрава");
		СтруктураОбязательныхДанных.Вставить("РольБазовыеПрава");
		СтруктураОбязательныхДанных.Вставить("РольРольНеНазначается");
		СтруктураОбязательныхДанных.Вставить("ВидДоступаПользователи");
		СтруктураОбязательныхДанных.Вставить("ВидДоступаВнешниеПользователи");
		СтруктураОбязательныхДанных.Вставить("ВидДоступаПоУсловию");
		СтруктураОбязательныхДанных.Вставить("ВидДоступаПоОбъектуДоступа");
		
		СтруктураОбязательныхДанных.Вставить("ОбщиеОбъекты");
		СтруктураОбязательныхДанных.Вставить("ОбщиеМодули");
		СтруктураОбязательныхДанных.Вставить("ОбщиеРеквизиты");
		СтруктураОбязательныхДанных.Вставить("ПараметрыСеанса");
		СтруктураОбязательныхДанных.Вставить("Роли");
		СтруктураОбязательныхДанных.Вставить("ПланыОбмена");
		СтруктураОбязательныхДанных.Вставить("КритерииОтбора");
		СтруктураОбязательныхДанных.Вставить("ПодпискиНаСобытия");
		СтруктураОбязательныхДанных.Вставить("РегламентныеЗадания");
		СтруктураОбязательныхДанных.Вставить("ФункциональныеОпции");
		СтруктураОбязательныхДанных.Вставить("ПараметрыФункциональныхОпций");
		СтруктураОбязательныхДанных.Вставить("ОпределяемыеТипы");
		СтруктураОбязательныхДанных.Вставить("ХранилищаНастроек");
		СтруктураОбязательныхДанных.Вставить("ОбщиеФормы");
		СтруктураОбязательныхДанных.Вставить("ОбщиеКоманды");
		СтруктураОбязательныхДанных.Вставить("ОбщиеМакеты");
		СтруктураОбязательныхДанных.Вставить("ОбщиеКартинки");
		СтруктураОбязательныхДанных.Вставить("ГруппыКоманд");
		СтруктураОбязательныхДанных.Вставить("ПакетыXDTO");
		СтруктураОбязательныхДанных.Вставить("WebСервисы");
		СтруктураОбязательныхДанных.Вставить("HTTPСервисы");
		СтруктураОбязательныхДанных.Вставить("WSСсылки");
		СтруктураОбязательныхДанных.Вставить("ЭлементыСтиля");
		СтруктураОбязательныхДанных.Вставить("Стили");
		СтруктураОбязательныхДанных.Вставить("Языки");
		
		СтруктураОбязательныхДанных.Вставить("Константы");
		СтруктураОбязательныхДанных.Вставить("Справочники");
		СтруктураОбязательныхДанных.Вставить("Документы");
		СтруктураОбязательныхДанных.Вставить("Нумераторы");
		СтруктураОбязательныхДанных.Вставить("Последовательности");
		СтруктураОбязательныхДанных.Вставить("ЖурналыДокументов");
		СтруктураОбязательныхДанных.Вставить("Перечисления");
		СтруктураОбязательныхДанных.Вставить("Отчеты");
		СтруктураОбязательныхДанных.Вставить("Обработки");
		СтруктураОбязательныхДанных.Вставить("ПланыВидовХарактеристик");
		СтруктураОбязательныхДанных.Вставить("ПланыСчетов");
		СтруктураОбязательныхДанных.Вставить("ПланыВидовРасчета");
		СтруктураОбязательныхДанных.Вставить("РегистрыСведений");
		СтруктураОбязательныхДанных.Вставить("РегистрыНакопления");
		СтруктураОбязательныхДанных.Вставить("РегистрыБухгалтерии");
		СтруктураОбязательныхДанных.Вставить("РегистрыРасчета");
		СтруктураОбязательныхДанных.Вставить("БизнесПроцессы");
		СтруктураОбязательныхДанных.Вставить("Задачи");
		СтруктураОбязательныхДанных.Вставить("ВнешниеИсточникиДанных");
		
	КонецЕсли;
	
	Возврат СтруктураОбязательныхДанных;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОбязательныеДанные(ЧтениеXML, СоответствиеОбязательныхДанных, СтруктураОбязательныхДанных)
	
	Если Не ЧтениеXML.Прочитать() Тогда
		Возврат;
	КонецЕсли;
	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		ОбъектЧтения = ПрочитатьXML(ЧтениеXML);
		
		Если ЗначениеЗаполнено(ОбъектЧтения.Ссылка) Тогда
			СсылкаОбъекта = ОбъектЧтения.Ссылка;
		Иначе
			СсылкаОбъекта = ОбъектЧтения.ПолучитьСсылкуНового();
		КонецЕсли;
		
		Если ТипЗнч(ОбъектЧтения) = Тип("СправочникОбъект.ОбъектыМетаданных") Тогда
			
			Если ОбъектЧтения.Имя = "ПолныеПрава" Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных["РольПолныеПрава"]);
			ИначеЕсли ОбъектЧтения.Имя = "БазовыеПрава" Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных["РольБазовыеПрава"]);
			ИначеЕсли ОбъектЧтения.Имя = "РольНеНазначается" Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных["РольРольНеНазначается"]);
			ИначеЕсли ОбъектЧтения.ЭтоГруппа Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных[ОбъектЧтения.Имя]);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОбъектЧтения) = Тип("СправочникОбъект.ВидыДоступа") Тогда
			
			Если ОбъектЧтения.Имя = "Пользователи" Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных["ВидДоступаПользователи"]);
			ИначеЕсли ОбъектЧтения.Имя = "ВнешниеПользователи" Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных["ВидДоступаВнешниеПользователи"]);
			ИначеЕсли ОбъектЧтения.Имя = "ПоУсловию" Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных["ВидДоступаПоУсловию"]);
			ИначеЕсли ОбъектЧтения.Имя = "ПоОбъектуДоступа" Тогда
				СоответствиеОбязательныхДанных.Вставить(СсылкаОбъекта, СтруктураОбязательныхДанных["ВидДоступаПоОбъектуДоступа"]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтрокиДереваСоответствияПоТипам(ДеревоСоответствия)
	
	Соответствие = Новый Соответствие();
	
	Для Каждого СтрокаДерева из ДеревоСоответствия.Строки Цикл
		
		Если СтрокаДерева.ИмяОбъекта = "Справочник.ВидыСогласуемыхРесурсов" Тогда
			Соответствие.Вставить(Тип("СправочникСсылка.ВидыСогласуемыхРесурсов"), СтрокаДерева);
		ИначеЕсли СтрокаДерева.ИмяОбъекта = "Справочник.ИсточникиИдей" Тогда
			Соответствие.Вставить(Тип("СправочникСсылка.ИсточникиИдей"), СтрокаДерева);
		ИначеЕсли СтрокаДерева.ИмяОбъекта = "Справочник.Пользователи" Тогда
			Соответствие.Вставить(Тип("СправочникСсылка.Пользователи"), СтрокаДерева);
		ИначеЕсли СтрокаДерева.ИмяОбъекта = "Справочник.Проекты" Тогда
			Соответствие.Вставить(Тип("СправочникСсылка.Проекты"), СтрокаДерева);
		ИначеЕсли СтрокаДерева.ИмяОбъекта = "Справочник.РазделыОбщихЗадач" Тогда
			Соответствие.Вставить(Тип("СправочникСсылка.РазделыОбщихЗадач"), СтрокаДерева);
		ИначеЕсли СтрокаДерева.ИмяОбъекта = "Справочник.СтилиФорматирования" Тогда
			Соответствие.Вставить(Тип("СправочникСсылка.СтилиФорматирования"), СтрокаДерева);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Функция ПолучитьДеревоОбъектовНастройкиСоответствия(ЧтениеXML)
	
	КвалификаторыЧисла = Новый КвалификаторыЧисла(32,0,ДопустимыйЗнак.Неотрицательный);
	КвалификаторыСтроки = Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная);
	
	ОписаниеТиповКода = Новый ОписаниеТипов("Число, Строка", КвалификаторыЧисла, КвалификаторыСтроки);
	
	ОписаниеТиповДанныхИБ = Новый ОписаниеТипов("СправочникСсылка.ВидыСогласуемыхРесурсов,
	                                            |СправочникСсылка.ИсточникиИдей,
												|СправочникСсылка.Пользователи,
												|СправочникСсылка.РазделыОбщихЗадач,
												|СправочникСсылка.СтилиФорматирования,
												|СправочникСсылка.ВидыКонтактнойИнформации,
												|СправочникСсылка.НаборыДополнительныхРеквизитовИСведений,
												|СправочникСсылка.ЗначенияСвойствОбъектов,
												|СправочникСсылка.ЗначенияСвойствОбъектовИерархия,
												|ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения");
	
	ДеревоОбъектов = Новый ДеревоЗначений;
	ДеревоОбъектов.Колонки.Добавить("ИмяОбъекта", Новый ОписаниеТипов("Строка"));
	ДеревоОбъектов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ДеревоОбъектов.Колонки.Добавить("Код", ОписаниеТиповКода);
	ДеревоОбъектов.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ДеревоОбъектов.Колонки.Добавить("Предопределенный", Новый ОписаниеТипов("Булево"));
	ДеревоОбъектов.Колонки.Добавить("Ссылка", ОписаниеТиповДанныхИБ);
	ДеревоОбъектов.Колонки.Добавить("ДанныеИБ", ОписаниеТиповДанныхИБ);
	ДеревоОбъектов.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1)));
	
	// проверка формата файла общих данных
	Если Не ЧтениеXML.Прочитать() Или
		ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или 
		ЧтениеXML.ЛокальноеИмя <> "_1CV8ModelRefMap" Или 
		ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8ModelRefMap/" Тогда
		
		ТекстСообщения = НСтр("ru = 'Неверный формат общих данных: некорректное начало файла'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ПроверитьВерсиюФормата(ЧтениеXML);
	
	// Чтение секции данных
	ОткрытаСекцияДанных = Ложь;
	Если ЧтениеXML.Прочитать() Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "Data" Тогда
				ОткрытаСекцияДанных = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОткрытаСекцияДанных Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения общих данных из файла. Нарушена структура файла - не удалось прочитать секцию <Data>'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	ЗаполнитьДеревоОбъектовНастройкиПоДаннымФайла(ДеревоОбъектов, ЧтениеXML);
	УстановитьСоответствиеОбъектов(ДеревоОбъектов);
	
	Возврат ДеревоОбъектов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоОбъектовНастройкиПоДаннымФайла(ДеревоОбъектов, ЧтениеXML)
	
	ДанныеТекущегоОбъекта = Неопределено;
	ИмяТекущегоРеквизита = Неопределено;
	
	ПолученоОкончаниеСекцииДанных = Ложь;
	
	ВозможныеРеквизиты = МассивВозможныхРеквизитовОбщихДанных();
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			// Прочитано начало объекта или реквизита
			Если ЧтениеXML.ИмеетИмя Тогда
				
				Если Найти(ЧтениеXML.Имя, "CatalogObject.") <> 0 Тогда
					
					ДанныеТекущегоОбъекта = Новый Структура;
					ДанныеТекущегоОбъекта.Вставить("ИмяОбъекта", ИмяОбъектаПоИмениТега(ЧтениеXML.Имя));
					ДанныеТекущегоОбъекта.Вставить("МетаданныеОбъекта", Метаданные.НайтиПоПолномуИмени(ДанныеТекущегоОбъекта.ИмяОбъекта));
					ДанныеТекущегоОбъекта.Вставить("МенеджерКласса", Справочники);
					ДанныеТекущегоОбъекта.Вставить("ТипКодаЧисловой", ТипКодаЧисловой(ДанныеТекущегоОбъекта.МетаданныеОбъекта));
					
				ИначеЕсли Найти(ЧтениеXML.Имя, "ChartOfCharacteristicTypesObject.") <> 0 Тогда	
					
					ДанныеТекущегоОбъекта = Новый Структура;
					ДанныеТекущегоОбъекта.Вставить("ИмяОбъекта", ИмяОбъектаПоИмениТега(ЧтениеXML.Имя));
					ДанныеТекущегоОбъекта.Вставить("МетаданныеОбъекта", Метаданные.НайтиПоПолномуИмени(ДанныеТекущегоОбъекта.ИмяОбъекта));
					ДанныеТекущегоОбъекта.Вставить("МенеджерКласса", ПланыВидовХарактеристик);
					ДанныеТекущегоОбъекта.Вставить("ТипКодаЧисловой", Ложь);
					
				ИначеЕсли ВозможныеРеквизиты.Найти(ЧтениеXML.Имя) <> Неопределено Тогда
					
					ИмяТекущегоРеквизита = ЧтениеXML.Имя;
					
					Если ДанныеТекущегоОбъекта <> Неопределено Тогда
						ДанныеТекущегоОбъекта.Вставить(ЧтениеXML.Имя);
					Иначе
						ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Не удалось определить принадлежность реквизита %ИмяРеквизита% объекту данных'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРеквизита%", ЧтениеXML.Имя);
						ВызватьИсключение(ТекстСообщения);
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Неверное имя элемента - %ИмяОбъекта%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", ЧтениеXML.Имя);
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			// Прочитано завершение объекта, или реквизита, или секции данных
			Если ЧтениеXML.ИмеетИмя Тогда
				
				Если Найти(ЧтениеXML.Имя, "CatalogObject.") <> 0
					ИЛИ Найти(ЧтениеXML.Имя, "ChartOfCharacteristicTypesObject.") <> 0 Тогда
					ДобавитьОбъектВДерево(ДеревоОбъектов, ДанныеТекущегоОбъекта);
					ДанныеТекущегоОбъекта = Неопределено;
				ИначеЕсли ВозможныеРеквизиты.Найти(ЧтениеXML.Имя) <> Неопределено Тогда
					ИмяТекущегоРеквизита = Неопределено;
				ИначеЕсли ЧтениеXML.Имя = "Data" Тогда
					ДанныеТекущегоОбъекта = Неопределено;
					ИмяТекущегоРеквизита = Неопределено;
					ПолученоОкончаниеСекцииДанных = Истина;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// Чтение значений реквизитов объектов
			Если ЧтениеXML.ИмеетЗначение И ДанныеТекущегоОбъекта <> Неопределено И ИмяТекущегоРеквизита <> Неопределено Тогда
				ДанныеТекущегоОбъекта[ИмяТекущегоРеквизита] = ЗначениеXMLДанныхФайлаНастройки(ЧтениеXML.Значение, ИмяТекущегоРеквизита, ДанныеТекущегоОбъекта); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПолученоОкончаниеСекцииДанных Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Нарушена структура данных - не обнаружено корректное завершение секции данных'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеXMLДанныхФайлаНастройки(XMLЗначение, ИмяРеквизита, ДанныеТекущегоОбъекта)
	
	Значение = Неопределено;
	
	Если ИмяРеквизита = "ЭтоГруппа" ИЛИ ИмяРеквизита = "Предопределенный" Тогда
		Значение = XMLЗначение(Тип("Булево"), XMLЗначение);
	ИначеЕсли ИмяРеквизита = "Наименование" Тогда
		Значение = XMLЗначение(Тип("Строка"), XMLЗначение);
	ИначеЕсли ИмяРеквизита = "Код" Тогда
		Если ДанныеТекущегоОбъекта.ТипКодаЧисловой Тогда
			Значение = XMLЗначение(Тип("Число"), XMLЗначение);
		Иначе
			Значение = XMLЗначение(Тип("Строка"), XMLЗначение);
		КонецЕсли;
	ИначеЕсли ИмяРеквизита = "Ссылка" Тогда
		ИмяОбъекта = ДанныеТекущегоОбъекта.ИмяОбъекта;
		МенеджерКласса = ДанныеТекущегоОбъекта.МенеджерКласса;
		СсылкаНужногоТипа = МенеджерКласса[ДанныеТекущегоОбъекта.МетаданныеОбъекта.Имя].ПустаяСсылка();
		Значение = XMLЗначение(ТипЗнч(СсылкаНужногоТипа), XMLЗначение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаСервере
Процедура ДобавитьОбъектВДерево(ДеревоОбъектов, ДанныеТекущегоОбъекта)
	
	ИмяОбъекта = ДанныеТекущегоОбъекта.ИмяОбъекта;
	
	СтруктураОтбора = Новый Структура("ИмяОбъекта", ИмяОбъекта);
	МассивСтрок = ДеревоОбъектов.Строки.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаВидаОбъектов = ДеревоОбъектов.Строки.Добавить();
		СтрокаВидаОбъектов.ИмяОбъекта = ДанныеТекущегоОбъекта.ИмяОбъекта;
		СтрокаВидаОбъектов.ИндексКартинки = -1;
	Иначе
		СтрокаВидаОбъектов = МассивСтрок[0];
	КонецЕсли;
	
	СтрокаОбъекта = СтрокаВидаОбъектов.Строки.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаОбъекта, ДанныеТекущегоОбъекта,,"ИмяОбъекта");
	
	МетаданныеОбъекта = ДанныеТекущегоОбъекта.МетаданныеОбъекта;
	СтрокаОбъекта.ДанныеИБ = ДанныеТекущегоОбъекта.МенеджерКласса[МетаданныеОбъекта.Имя].ПустаяСсылка();
	
	Если СтрокаОбъекта.ЭтоГруппа Тогда
		СтрокаОбъекта.ИндексКартинки = 0;
	Иначе
		СтрокаОбъекта.ИндексКартинки = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСоответствиеОбъектов(ДеревоОбъектов)
	
	Для Каждого СтрокаВида из ДеревоОбъектов.Строки Цикл
		
		ИмяПоляСоответствия = ИмяПоляСоответствия(СтрокаВида.ИмяОбъекта);
		
		МассивЗначенийПоляСоответствия = Новый Массив;
		
		Для Каждого СтрокаОбъекта из СтрокаВида.Строки Цикл
			МассивЗначенийПоляСоответствия.Добавить(СтрокаОбъекта[ИмяПоляСоответствия]);
		КонецЦикла;
		
		ТаблицаСоответствия = ТаблицаСоответствияДляВидаОбъектов(СтрокаВида.ИмяОбъекта, ИмяПоляСоответствия, МассивЗначенийПоляСоответствия);
		
		Для Каждого СтрокаОбъекта из СтрокаВида.Строки Цикл
			
			СтруктураОтбора = Новый Структура(ИмяПоляСоответствия, СтрокаОбъекта[ИмяПоляСоответствия]);
			МассивОтобранныхСтрок = ТаблицаСоответствия.НайтиСтроки(СтруктураОтбора);
			
			Если МассивОтобранныхСтрок.Количество() = 1 Тогда
				СтрокаТаблицыСоответствий = МассивОтобранныхСтрок[0];
				СтрокаОбъекта.ДанныеИБ = СтрокаТаблицыСоответствий.ДанныеИБ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ИмяПоляСоответствия(ИмяОбъекта)
	
	Если ИмяОбъекта = "Справочник.ВидыСогласуемыхРесурсов"
		ИЛИ ИмяОбъекта = "Справочник.ИсточникиИдей"
		ИЛИ ИмяОбъекта = "Справочник.Пользователи" 
		ИЛИ ИмяОбъекта = "Справочник.РазделыОбщихЗадач" 
		ИЛИ ИмяОбъекта = "Справочник.СтилиФорматирования"
		ИЛИ ИмяОбъекта = "Справочник.ВидыКонтактнойИнформации" Тогда
		
		ИмяПоляСоответствия = "Наименование";
	
	Иначе
		ИмяПоляСоответствия = "Ссылка";
	КонецЕсли;
	
	Возврат ИмяПоляСоответствия;
	
КонецФункции

&НаСервере
Функция ТаблицаСоответствияДляВидаОбъектов(ИмяОбъекта, ИмяПоляСоответствия, МассивЗначенийПоляСоответствия)
	
	ТекстЗапроса = ТекстЗапросаДляВидаОбъектов(ИмяОбъекта, ИмяПоляСоответствия);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивЗначенийПоляСоответствия", МассивЗначенийПоляСоответствия);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ТекстЗапросаДляВидаОбъектов(ИмяОбъекта, ИмяПоляСоответствия)
	
	ТекстЗапроса =
	" ВЫБРАТЬ
	|	ИмяТаблицы.Ссылка КАК ДанныеИБ,
	|   ИмяТаблицы." + ИмяПоляСоответствия + " 
	| ИЗ
	|	" + ИмяОбъекта + " КАК ИмяТаблицы
	| ГДЕ
	|	ИмяТаблицы." + ИмяПоляСоответствия + " В (&МассивЗначенийПоляСоответствия)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ИмяОбъектаПоИмениТега(Знач ИмяТега)
	
	ИмяАналог = СтрЗаменить(ИмяТега, "CatalogObject.", "Справочник.");
	ИмяАналог = СтрЗаменить(ИмяАналог, "ChartOfCharacteristicTypesObject.", "ПланВидовХарактеристик.");
	
	Возврат ИмяАналог;
	
КонецФункции

&НаСервере
Функция ТипКодаЧисловой(МетаданныеОбъекта)
	
	Возврат (МетаданныеОбъекта.ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число);
	
КонецФункции

&НаСервере
Функция МассивВозможныхРеквизитовОбщихДанных()
	
	Массив = Новый Массив;
	Массив.Добавить("Ссылка");
	Массив.Добавить("Предопределенный");
	Массив.Добавить("Код");
	Массив.Добавить("Наименование");
	Массив.Добавить("ЭтоГруппа");
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ПометитьНаУдалениеОбъекты()
	
	Для Каждого Справочник из Метаданные.Справочники Цикл
	    ПометитьНаУдалениеОбъектыУказанногоТипа(Справочник);
	КонецЦикла;
	
	Для Каждого ПВХ из Метаданные.ПланыВидовХарактеристик Цикл
	    ПометитьНаУдалениеОбъектыУказанногоТипа(ПВХ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеОбъектыУказанногоТипа(МетаданныеОбъекта)
	
	ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
	
	Если ПолноеИмя = "Справочник.Проекты" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстУсловия = "";
	
	Если ПолноеИмя = "Справочник.WebСервисыСвойства"
		ИЛИ ПолноеИмя = "Справочник.WSСсылкиСвойства"
		ИЛИ ПолноеИмя = "Справочник.ГруппыКомандСвойства"
		ИЛИ ПолноеИмя = "Справочник.КомандыОбъектовМетаданных"
		ИЛИ ПолноеИмя = "Справочник.КритерииОтбораСвойства"
		ИЛИ ПолноеИмя = "Справочник.МакетыОбъектовМетаданных"
		ИЛИ ПолноеИмя = "Справочник.ОбщиеКомандыСвойства"
		ИЛИ ПолноеИмя = "Справочник.ОбщиеМакетыСвойства"
		ИЛИ ПолноеИмя = "Справочник.ОбщиеМодулиСвойства"
		ИЛИ ПолноеИмя = "Справочник.ОбщиеРеквизитыСвойства"
		ИЛИ ПолноеИмя = "Справочник.ПакетыXDTOСвойства"
		ИЛИ ПолноеИмя = "Справочник.ПодпискиНаСобытияСвойства"
		ИЛИ ПолноеИмя = "Справочник.ПредопределенныеДанные"
		ИЛИ ПолноеИмя = "Справочник.РегламентныеЗаданияСвойства"
		ИЛИ ПолноеИмя = "Справочник.РеквизитыОбъектовМетаданных"
		ИЛИ ПолноеИмя = "Справочник.СборкиВерсии"
		ИЛИ ПолноеИмя = "Справочник.ФормыОбъектовМетаданных"
		ИЛИ ПолноеИмя = "Справочник.ФункцииМеханизмов"
		ИЛИ ПолноеИмя = "Справочник.ФункциональныеОпцииСвойства"
		ИЛИ ПолноеИмя = "Справочник.ШагиПроцесса" Тогда
		
		ТекстУсловия = " И Таблица.Владелец.Владелец = &Проект";
		
	ИначеЕсли ПолноеИмя = "Справочник.ЗадачиПроцесса" Тогда
		
		ТекстУсловия = " И Таблица.Предмет.Владелец = &Проект";
		
	ИначеЕсли ПолноеИмя = "Справочник.ЗадачиШаблонаПроцесса" Тогда
		
		ТекстУсловия = " ГДЕ Таблица.Владелец.ВладелецШаблона = &Проект";
		
	ИначеЕсли ПолноеИмя = "Справочник.ШаблоныПроцесса" Тогда
		
		ТекстУсловия = " ГДЕ Таблица.ВладелецШаблона = &Проект";
		
	ИначеЕсли ПолноеИмя = "Справочник.ЭлементыСправки" Тогда
		
		ТекстУсловия = " ГДЕ Таблица.Владелец.Владелец = &Проект
						| ИЛИ Таблица.Владелец.Владелец.Владелец = &Проект";
	
	Иначе
		ТекстУсловия = " И Таблица.Владелец = &Проект";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	" + ПолноеИмя + " КАК Таблица
	| ГДЕ НЕ Таблица.ПометкаУдаления И НЕ Таблица.Предопределенный "
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		УдаляемыйОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдаляемыйОбъект.ПометкаУдаления = Истина;
		УдаляемыйОбъект.ОбменДанными.Загрузка = Истина;
		УдаляемыйОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВерсиюФормата(ЧтениеXML)
	
	// Получение и проверка версии формата
	ОшибкаОпределенияВерсииФормата = Истина;
	ВерсияФормата = "";
	
	Если ЧтениеXML.Прочитать() Тогда
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXML.Имя = "FormatVersion" Тогда
				Если ЧтениеXML.Прочитать() И ЧтениеXML.ИмеетЗначение Тогда
					ВерсияФормата = ЧтениеXML.Значение;
					Если ЧтениеXML.Прочитать() И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ВерсияФормата <> "" Тогда
						ОшибкаОпределенияВерсииФормата = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаОпределенияВерсииФормата Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения информации из файла. Не удалось определить версию формата'");
		ВызватьИсключение(ТекстСообщения);
	Иначе
		ПроверитьДопустимостьВерсииФормата(ВерсияФормата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДопустимостьВерсииФормата(ВерсияФормата)
	
	МассивДопустимыхВерсий = ВыгрузкаЗагрузкаДанныхПоПроектам.ПоддерживаемыеВерсииФормата();
	
	Если МассивДопустимыхВерсий.Найти(ВерсияФормата) = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при чтении информации из файла. Версия формата %ВерсияФормата% не поддерживается. Поддерживаемые версии формата:'");
		
		Для Каждого ПоддерживаемаяВерсия из МассивДопустимыхВерсий Цикл
			ТекстСообщения = ТекстСообщения + " " + ПоддерживаемаяВерсия;
		КонецЦикла;
			
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВерсияФормата%", ВерсияФормата);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницыКоманды(Шаг, Элементы)
	
	Если Шаг = "ВыборФайла" Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыборФайлаЗагрузки;
		Элементы.ГруппаКомандныеПанели.ТекущаяСТраница = Элементы.СтраницаКомандВыборФайла;
		
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли Шаг = "Загрузка" Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНастройкиСоответствияОбъектов;
		Элементы.ГруппаКомандныеПанели.ТекущаяСТраница = Элементы.СтраницаКомандЗагрузка;
		
		Элементы.Загрузить.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
