
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Проект = ПараметрыСеанса.ТекущийПроект;	
	
	//Инициализация оформления списка операций
	Элементы.Прогресс.МинимальноеЗначение = 0;
	Элементы.Прогресс.МаксимальноеЗначение = 100;
	
	УстановитьПараметрыПоПроекту();
	УстановитьВидимостьЭлементов();
	
	Если ЗначениеЗаполнено(Проект) Тогда
		ПриИзмененииПроектаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеФайловСправки_ОбновлениеСтатуса" Тогда
		Прогресс = Параметр.Прогресс;
		ТекущаяОперация = Параметр.ТекущаяОперация;
		ЭтаФорма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Проект) Тогда
		УстановитьПараметрыПоПроекту();
		ПриИзмененииПроектаСервер();
	Иначе
		ДеревоМетаданныхДляСправки.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = Каталог;
	ДиалогВыбораКаталога.Заголовок = НСтр("ru='Выбор каталога для выгрузки файлов справки'");
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		Каталог = ДиалогВыбораКаталога.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	КаталогНаДиске = Новый Файл(Каталог);
	
	Если НЕ КаталогНаДиске.Существует() Тогда
		ТекстСообщения = НСтр("ru = 'Каталог ""%ИмяКаталога%"" не существует'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = '%ИмяКаталога%'"), Каталог);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Каталог");
		Каталог = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	КаталогНаДиске = Новый Файл(КаталогИсполняемогоФайла);
	
	Если НЕ КаталогНаДиске.Существует() Тогда
		ТекстСообщения = НСтр("ru = 'Каталог ""%ИмяКаталога%"" не существует'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = '%ИмяКаталога%'"), КаталогИсполняемогоФайла);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КаталогИсполняемогоФайла");
		КаталогИсполняемогоФайла = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = КаталогИсполняемогоФайла;
	ДиалогВыбораКаталога.Заголовок = НСтр("ru='Выбор каталога с исполняемым файлом платформы'");
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		КаталогИсполняемогоФайла = ДиалогВыбораКаталога.Каталог;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхДляСправкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ДеревоМетаданныхДляСправкиОтметка Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.СтароеЗначениеОтметки = ТекущиеДанные.Отметка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМетаданныхДляСправкиОтметкаПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.ДеревоМетаданныхДляСправки.ТекущаяСтрока;
	
	СтрокаДерева = ДеревоМетаданныхДляСправки.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если СтрокаДерева.СтароеЗначениеОтметки> 0 Тогда
		СтрокаДерева.Отметка = 0;
	Иначе
		СтрокаДерева.Отметка = 1;
	КонецЕсли;
	
	УстановитьФлагиДочернихСтрок(СтрокаДерева, СтрокаДерева.Отметка);
	УстановитьФлагиРодительскихУзлов(СтрокаДерева);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьСправкуВФорматеHTMLПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьСправку(Команда)
	
	#Если Не ВебКлиент Тогда
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		ТекстСообщения = Нстр("ru = 'Не указан проект, для которого необходимо выгрузить справку'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Проект");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФорматВыгрузки) Тогда
		ТекстСообщения = Нстр("ru = 'Не указан формат для выгрузки справки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ФорматВыгрузки");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Каталог) Тогда
		ТекстСообщения = Нстр("ru = 'Не указан каталог выгрузки файлов справки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Каталог");
		Возврат;
	КонецЕсли;
	
	Если ФормироватьСправкуВФорматеHTML И НЕ ЗначениеЗаполнено(КаталогИсполняемогоФайла) Тогда
		ТекстСообщения = Нстр("ru = 'Не указан каталог исполняемого файла'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КаталогИсполняемогоФайла");
		Возврат;
	КонецЕсли;
	
	ИмяФайлаЛогов = ПолучитьИмяВременногоФайла("log");
	
	Если ФормироватьСправкуВФорматеHTML Тогда
		ИмяФайлаРезультатов = ПолучитьИмяВременногоФайла("log");
		ФайлПоставкиКонфигурации = ПолучитьИмяВременногоФайла("cf");
		
		КаталогВременныхФайловПользователя = КаталогВременныхФайлов();
		КаталогСправкиИзСППР = КаталогВременныхФайловПользователя + "Каталог справки СППР";
		КаталогСправкиБезОтбора = КаталогВременныхФайловПользователя + "Каталог справки без отбора";
		КаталогВыгрузкиФайловКонфигурации = КаталогВременныхФайловПользователя + "Каталог файлов конфигурации";
		КаталогБазыРазработки = КаталогВременныхФайловПользователя + "Временная ИБ";
		СоздатьКаталог(КаталогСправкиИзСППР);
		СоздатьКаталог(КаталогВыгрузкиФайловКонфигурации);
		СоздатьКаталог(КаталогБазыРазработки);
		
		ВыполнитьВыгрузкаФайловСправкиИзСППР(КаталогСправкиИзСППР);
		ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных();
		ВыполнитьСозданиеФайлаПоставкиКонфигурации();
		ВыполнитьЗагрузкаКонфигурацииИзФайлаПоставки();
		ВыполнитьВыгрузкуКонфигурацииВФайлы();
		ВыполнитьКопированиеФайлов();
		ВыполнитьЗагрузкаКонфигурацииИзФайлов();
		ВыполнитьВыгрузкаФайловСправки();
		СкопироватьОтобранныеФайлы();
		
		УдалитьФайлы(КаталогСправкиИзСППР);  
		УдалитьФайлы(КаталогСправкиБезОтбора);  
		УдалитьФайлы(КаталогВыгрузкиФайловКонфигурации);  
		УдалитьФайлы(КаталогБазыРазработки);
		УдалитьФайлы(ФайлПоставкиКонфигурации);
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("Прогресс", 100);
		ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Выгрузка завершена'"));
		Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	Иначе
		ВыполнитьВыгрузкаФайловСправкиИзСППР(Каталог);
	КонецЕсли;		
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСправку(Команда)
	
	ОчиститьСообщения();
	
	Если ДеревоМетаданныхДляСправки.ПолучитьЭлементы().Количество()=0 Тогда
		ТекстСообщения = НСтр("ru='Не заполнено дерево метаданных'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДеревоМетаданныхДляСправки");
	КонецЕсли;
	
	// Проверим, что последний символ не является слэшем
	Если Прав(Каталог, 1) = "\" Тогда
		Каталог = Лев(Каталог, СтрДлина(Каталог) - 1);
	КонецЕсли;
	
	ФайлыКаталога = НайтиФайлы(Каталог, "*.html");
	
	Если ФайлыКаталога.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Каталог ""%ИмяКаталога%"" не содержит файлов справки'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = '%ИмяКаталога%'"), Каталог);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив();
	Для Каждого СуществующийФайл Из ФайлыКаталога Цикл
		МассивИменФайлов.Добавить(СуществующийФайл.Имя);
	КонецЦикла;
	
	ТекстЗаголовка = НСтр("ru='Проверка справки'");
	ТекстСостояния = НСтр("ru='Выполняется проверка справки'");
	Состояние(ТекстЗаголовка,, ТекстСостояния);
	
	ПроверитьСправкуСервер(МассивИменФайлов);
	
	ТекстЗаголовка = НСтр("ru='Проверка справки'");
	ТекстПояснения = НСтр("ru='Проверка справки завершена'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеОтметки(Команда)
	
	ЭлементыДерева = ДеревоМетаданныхДляСправки.ПолучитьЭлементы();
	
	Для Каждого Элемент из ЭлементыДерева Цикл
		Элемент.Отметка = Истина;
		УстановитьФлагиДочернихСтрок(Элемент, Истина);
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	
	ЭлементыДерева = ДеревоМетаданныхДляСправки.ПолучитьЭлементы();
	
	Для Каждого Элемент из ЭлементыДерева Цикл
		Элемент.Отметка = Ложь;
		УстановитьФлагиДочернихСтрок(Элемент, Ложь);
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиДляВсехФорм(Команда)
	
	Если ДеревоМетаданныхДляСправки.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлагиОбщихФорм(1);
	РекурсивноеУправлениеФлагамиФорм(ДеревоМетаданныхДляСправки, 1);
	
	ТекстЗаголовка = НСтр("ru='Установка отметок'");
	ТекстСообщения = НСтр("ru='Отметки установлены для всех форм'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиДляВсехФорм(Команда)
	
	Если ДеревоМетаданныхДляСправки.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлагиОбщихФорм(0);
	РекурсивноеУправлениеФлагамиФорм(ДеревоМетаданныхДляСправки);
	
	ТекстЗаголовка = НСтр("ru='Снятие отметок'");
	ТекстСообщения = НСтр("ru='Отметки сняты для всех форм'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоМетаданных(Команда)
	
	ОбновитьДеревоМетаданныхСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииСозданияФайловСправки 

&НаКлиенте
Процедура ВыполнитьВыгрузкаФайловСправкиИзСППР(КаталогВыгрузки)
	
	ДобавитьЗаписьВЛог(НСтр("ru='Начало формирования справки в СППР.'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Прогресс", 0);
	ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Формирование справки в СППР...'"));
	Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	
	Попытка
		
		Ответ = СформироватьФайлыСправкиСервер();
		СоответствиеФайловСправки = Ответ.СоответствиеФайловСправки;
		АдресФайлаЗахвата         = Ответ.АдресФайлаЗахвата;
		АдресФайлаЗагрузки        = Ответ.АдресФайлаЗагрузки;
		
		МассивОписанийФайлов = Новый Массив;
		Для Каждого ЭлементСоответствия из СоответствиеФайловСправки Цикл
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
			МассивОписанийФайлов.Добавить(ОписаниеФайла);
		КонецЦикла;
		
		Если МассивОписанийФайлов.Количество() > 0 Тогда
			ПолучитьФайлы(МассивОписанийФайлов, , КаталогВыгрузки, Ложь);
		Иначе 
			ТекстСообщения = Нстр("ru = 'Файлы справки не сформированы. Возможно для выбранных объектов нет справки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 
	
	Исключение
		ВызватьИсключение(ОписаниеОшибки());
	КонецПопытки;
	
	ДобавитьЗаписьВЛог(НСтр("ru='Формирование справки в СППР завершено.'"));
	
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеБазыДляЗагрузкиМетаданных() 
	
	ДобавитьЗаписьВЛог(НСтр("ru='Начало обновления базы для загрузки метаданных.'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Прогресс", 5);
	ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Обновление метаданных из хранилища...'"));
	Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8  DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
				  + " /F ""%КаталогИБДляЗагрузкиМетаданных%"" /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%""" 
				  + " /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%""" 
				  + " /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%"""
				  + " /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""" 
				  + " /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%""" 
				  + " /ConfigurationRepositoryUpdateCfg /UpdateDBCfg /DumpResult ""%ИмяФайлаРезультатов%""";
				  
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИсполняемогоФайла%", КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаЛогов%", ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогИБДляЗагрузкиМетаданных%", КаталогИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяИБДляЗагрузкиМетаданных%", ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяИБДляЗагрузкиМетаданных%", ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%КаталогХранилищаДляЗагрузкиМетаданных%", КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяПользователяХранилищаДляЗагрузкиМетаданных%", ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды,"%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	ОтобразитьРезультат(ИмяФайлаРезультатов);
	
	ДобавитьЗаписьВЛог(НСтр("ru='Обновление метаданных из хранилища завершено.'"));
		
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСозданиеФайлаПоставкиКонфигурации()
	
	ДобавитьЗаписьВЛог(НСтр("ru='Начало создания файла поставки.'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Прогресс", 15);
	ПараметрыОповещения.Вставить("ТекущаяОперация", "Cоздание файла поставки...");
	Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
				  + " /F ""%КаталогИБДляЗагрузкиМетаданных%"" /N ""%ИмяПользователяИБДляЗагрузкиМетаданных%"""
				  + " /P ""%ПарольПользователяИБДляЗагрузкиМетаданных%"""
				  + " /ConfigurationRepositoryF ""%КаталогХранилищаДляЗагрузкиМетаданных%""" 
				  + " /ConfigurationRepositoryN ""%ИмяПользователяХранилищаДляЗагрузкиМетаданных%""" 
				  + " /ConfigurationRepositoryP ""%ПарольПользователяХранилищаДляЗагрузкиМетаданных%"""
				  + " /CreateDistributionFiles -cffile ""%ФайлПоставкиКонфигурации%"" /DumpResult ""%ИмяФайлаРезультатов%""";

	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИБДляЗагрузкиМетаданных%", КаталогИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяИБДляЗагрузкиМетаданных%", ИмяПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяИБДляЗагрузкиМетаданных%", ПарольПользователяИБДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогХранилищаДляЗагрузкиМетаданных%", КаталогХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяХранилищаДляЗагрузкиМетаданных%", ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяХранилищаДляЗагрузкиМетаданных%", ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПоставкиКонфигурации%", ФайлПоставкиКонфигурации);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	ОтобразитьРезультат(ИмяФайлаРезультатов);
	
	ДобавитьЗаписьВЛог(НСтр("ru='Cоздание файла поставки завершено.'"));
	
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкаКонфигурацииИзФайлаПоставки()
	
	ДобавитьЗаписьВЛог(НСтр("ru='Проверка существования базы разработки.'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Прогресс", 25);
	ПараметрыОповещения.Вставить("ТекущаяОперация", "Cоздание временной базы...");
	Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	
	Файл = Новый Файл(КаталогБазыРазработки);
	БазаДанныхСуществует = Ложь;
	Если Файл.Существует() Тогда
		ФайлыБазыДанных = НайтиФайлы(КаталогБазыРазработки,"1Cv8.1CD");
		Если ФайлыБазыДанных.Количество() > 0 Тогда
			БазаДанныхСуществует = Истина;
			ДобавитьЗаписьВЛог(НСтр("ru='База данных в выбранном каталоге существует.'"));
		КонецЕсли;
	КонецЕсли;
	
	Если Не БазаДанныхСуществует Тогда
		
		СозданиеБазыДанныхРезультат = 4;
		
		ДобавитьЗаписьВЛог(НСтр("ru='База данных не обнаружена. Начало создания базы данных разработки.'"));
		
		СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 CREATEINFOBASE File=""%КаталогБазыРазработки%"""
					  + " /DumpResult ""%ИмяФайлаРезультатов%""";
					  
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
		СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
		
		ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
		ОтобразитьРезультат(ИмяФайлаРезультатов);
		
		ДобавитьЗаписьВЛог(НСтр("ru='Создание базы данных разработки завершено.'"));
		
	КонецЕсли;
	
	ДобавитьЗаписьВЛог(НСтр("ru='Начало загрузки конфигурации из файла поставки.'"));
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
				  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%""" 
				  + " /LoadCfg ""%ФайлПоставкиКонфигурации%"" /UpdateDBCfg /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%", ИмяПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ФайлПоставкиКонфигурации%", ФайлПоставкиКонфигурации);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	ОтобразитьРезультат(ИмяФайлаРезультатов);
	
	ДобавитьЗаписьВЛог(НСтр("ru='Загрузка конфигурации из файла поставки завершена.'"));
		
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуКонфигурацииВФайлы()
	
	ДобавитьЗаписьВЛог(НСтр("ru='Начало выгрузки конфигурации в XML-файлы.'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Прогресс", 40);
	ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Выгрузка конфигурации в XML-файлы...'"));
	Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
				  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%""" 
				  + " /DumpConfigToFiles ""%КаталогВыгрузкиФайловКонфигурации%"" -format Plain /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%", ИмяПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогВыгрузкиФайловКонфигурации%", КаталогВыгрузкиФайловКонфигурации);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	ОтобразитьРезультат(ИмяФайлаРезультатов);
	
	ДобавитьЗаписьВЛог(НСтр("ru='Выгрузка конфигурации в XML-файлы завершена.'"));
	
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКопированиеФайлов()
	
	МассивФайлов = НайтиФайлы(КаталогСправкиИзСППР , "*.*");
	
	Для Каждого Файл Из МассивФайлов Цикл
		ИмяФайлаПриемника = КаталогВыгрузкиФайловКонфигурации + "\" + Файл.Имя;
		КопироватьФайл(Файл.ПолноеИмя, ИмяФайлаПриемника); 	
	КонецЦикла;
	
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкаКонфигурацииИзФайлов()
	
	ДобавитьЗаписьВЛог(НСтр("ru='Начало загрузки конфигурации из XML-файлов.'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Прогресс", 60);
	ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Загрузка справки во временную базу...'"));
	Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
				  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%""" 
				  + " /LoadConfigFromFiles ""%КаталогВыгрузкиФайловКонфигурации%"" -format Plain /UpdateDBCfg /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%", ИмяПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогВыгрузкиФайловКонфигурации%", КаталогВыгрузкиФайловКонфигурации);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	ОтобразитьРезультат(ИмяФайлаРезультатов);
	
	ДобавитьЗаписьВЛог(НСтр("ru='Загрузка конфигурации из XML-файлов завершена.'"));
	
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкаФайловСправки()
	
	ДобавитьЗаписьВЛог(НСтр("ru='Начало выгрузки справки.'"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Прогресс", 90);
	ПараметрыОповещения.Вставить("ТекущаяОперация", НСтр("ru='Выгрузка справки...'"));
	Оповестить("СозданиеФайловСправки_ОбновлениеСтатуса", ПараметрыОповещения);
	
	СтрокаКоманды = "%КаталогИсполняемогоФайла%\1cv8 DESIGNER /DisableStartupDialogs /Out ""%ИмяФайлаЛогов%"" -NoTruncate"
				  + " /F ""%КаталогБазыРазработки%"" /N ""%ИмяПользователяБазыРазработки%"" /P ""%ПарольПользователяБазыРазработки%""" 
				  + " /DumpConfigFiles ""%КаталогВыгрузкиСправки%"" -Help /DumpResult ""%ИмяФайлаРезультатов%""";
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогИсполняемогоФайла%",КаталогИсполняемогоФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаЛогов%", ИмяФайлаЛогов);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогБазыРазработки%", КаталогБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяПользователяБазыРазработки%", ИмяПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ПарольПользователяБазыРазработки%", ПарольПользователяБазыРазработки);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%КаталогВыгрузкиСправки%", КаталогСправкиБезОтбора);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%ИмяФайлаРезультатов%", ИмяФайлаРезультатов);
	
	ЗапуститьПриложение(СтрокаКоманды, КаталогИсполняемогоФайла, Истина);
	ОтобразитьРезультат(ИмяФайлаРезультатов);
	
	ДобавитьЗаписьВЛог(НСтр("ru='Выгрузка справки завершена.'"));
	
	ОбработкаПрерыванияПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОтобранныеФайлы()
	
	МассивИменКопируемыхФайлов = ПолучитьМассивИменНеобходимыхФайлов();
	Для Каждого ИмяФайла Из МассивИменКопируемыхФайлов Цикл
		НайденныеФайлы = НайтиФайлы(КаталогСправкиБезОтбора, ИмяФайла + "*.*");
		Для Каждого Файл Из НайденныеФайлы Цикл
			ИмяФайлаПриемника = Каталог + "\" + Файл.Имя;
			СкопироватьФайлИлиПапку(Файл.ПолноеИмя, ИмяФайлаПриемника);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьФайлИлиПапку(Источник, Приемник)
	
	Если СтрНайти(Источник, "_files") Тогда
		СоздатьКаталог(Приемник);
		ФайлыВКаталоге = НайтиФайлы(Источник, "*.*");
		Для Каждого Файл Из ФайлыВКаталоге Цикл
			ИмяФайлаПриемника = Приемник + "\" + Файл.Имя;
			КопироватьФайл(Файл.ПолноеИмя, ИмяФайлаПриемника);
		КонецЦикла;
	Иначе
		КопироватьФайл(Источник, Приемник);
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Функция ПолучитьМассивИменНеобходимыхФайлов()
	
	ДеревоМетаданных = РеквизитФормыВЗначение("ДеревоМетаданныхДляСправки");

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Отметка", 1);
	
	МассивОтмеченныхСтрок = ДеревоМетаданных.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	МассивИменНеобходимыхФайлов = Новый Массив;
	
	Для Каждого СтрокаМассива Из МассивОтмеченныхСтрок Цикл
		Если СтрокаМассива.ИмяОбъектаЗахвата <> "" Тогда
			ИмяФайла = Строка(СтрокаМассива.ИмяОбъектаЗахвата + ".Справка");
			МассивИменНеобходимыхФайлов.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИменНеобходимыхФайлов
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьФлагиОбщихФорм(ЗначениеОтметки)
	
	СтрокиДерева = ДеревоМетаданныхДляСправки.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если НЕ СтрокаДерева.Наименование = "Общие" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиУзлаОбщие = СтрокаДерева.ПолучитьЭлементы(); 
		
		Для Каждого СтрокаДерева из СтрокиУзлаОбщие Цикл
			
			Если НЕ СтрокаДерева.Наименование = "Общие формы" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиОбщихФорм = СтрокаДерева.ПолучитьЭлементы();
			
			Для Каждого СтрокаОбщейФормы из СтрокиОбщихФорм Цикл
				СтрокаОбщейФормы.Отметка = ЗначениеОтметки;
			КонецЦикла;
			
			СтрокаДерева.Отметка = ЗначениеОтметки;
			УстановитьФлагиРодительскихУзлов(СтрокаДерева);
			
			Возврат;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноеУправлениеФлагамиФорм(УзелДерева, Знач ЗначениеОтметки = 0)
	
	СтрокиУзла = УзелДерева.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиУзла Цикл
		
		Если СтрокаДерева.Представление = "Формы" И Не ЗначениеЗаполнено(СтрокаДерева.ОбъектСправки) Тогда
			СтрокаДерева.Отметка = ЗначениеОтметки;
			УстановитьФлагиДочернихСтрок(СтрокаДерева, ЗначениеОтметки);
		Иначе
			РекурсивноеУправлениеФлагамиФорм(СтрокаДерева, ЗначениеОтметки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиРодительскихУзлов(ТекущаяСтрока)
	
	УзелДерева = ТекущаяСтрока.ПолучитьРодителя();
	
	Если УзелДерева <> Неопределено Тогда
		
		ДочерниеУзлыРодителя = УзелДерева.ПолучитьЭлементы();
		
		ЕстьОтмеченные = Ложь;
		ЕстьНеотмеченные = Ложь;
		
		Для Каждого ДочернийУзел из ДочерниеУзлыРодителя Цикл
			Если ДочернийУзел.Отметка = 2 Тогда
				УзелДерева.Отметка = 2;
				Возврат;
			ИначеЕсли ДочернийУзел.Отметка = 1 Тогда
				ЕстьОтмеченные = Истина;
			Иначе
				ЕстьНеОтмеченные = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОтмеченные И ЕстьНеОтмеченные Тогда
			УзелДерева.Отметка = 2;
		ИначеЕсли Не ЕстьНеОтмеченные Тогда
			УзелДерева.Отметка = 1;
		Иначе
			УзелДерева.Отметка = 0;
		КонецЕсли;
		
		УстановитьФлагиРодительскихУзлов(УзелДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагиДочернихСтрок(РодительскийУзел, ЗначениеОтметки)
	
	СтрокиУзла = РодительскийУзел.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиУзла Цикл
		СтрокаДерева.Отметка = ЗначениеОтметки;
		УстановитьФлагиДочернихСтрок(СтрокаДерева, ЗначениеОтметки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроектаСервер()
	
	ЗначениеВРеквизитФормы(Обработки.РаботаСоСправкой.ДеревоМетаданныхДляСправки(Проект), "ДеревоМетаданныхДляСправки");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоМетаданныхСервер()
	
	ЗначениеВРеквизитФормы(Обработки.РаботаСоСправкой.ДеревоМетаданныхДляСправки(Проект), "ДеревоМетаданныхДляСправки");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкиРекурсивноСервер(КоллекцияСтрок, ЗначениеОтметки)

	Для Каждого Строка из КоллекцияСтрок Цикл
		Строка.Отметка = ЗначениеОтметки;
		УстановитьОтметкиРекурсивноСервер(Строка.Строки, ЗначениеОтметки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиДочернихСтрокСервер(РодительскийУзел, ЗначениеОтметки)
	
	СтрокиУзла = РодительскийУзел.Строки;
	
	Для Каждого СтрокаДерева Из СтрокиУзла Цикл
		СтрокаДерева.Отметка = ЗначениеОтметки;
		УстановитьФлагиДочернихСтрокСервер(СтрокаДерева, ЗначениеОтметки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиРодительскихУзловСервер(ТекущаяСтрока)
	
	УзелДерева = ТекущаяСтрока.Родитель;
	
	Если УзелДерева <> Неопределено Тогда
		
		ДочерниеУзлыРодителя = УзелДерева.Строки;
		
		ЕстьОтмеченные = Ложь;
		ЕстьНеотмеченные = Ложь;
		
		Для Каждого ДочернийУзел из ДочерниеУзлыРодителя Цикл
			Если ДочернийУзел.Отметка = 2 Тогда
				УзелДерева.Отметка = 2;
				Возврат;
			ИначеЕсли ДочернийУзел.Отметка = 1 Тогда
				ЕстьОтмеченные = Истина;
			Иначе
				ЕстьНеОтмеченные = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОтмеченные И ЕстьНеОтмеченные Тогда
			УзелДерева.Отметка = 2;
		ИначеЕсли Не ЕстьНеОтмеченные Тогда
			УзелДерева.Отметка = 1;
		Иначе
			УзелДерева.Отметка = 0;
		КонецЕсли;
		
		УстановитьФлагиРодительскихУзловСервер(УзелДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьФайлыСправкиСервер()
	
	ДеревоМетаданных = РеквизитФормыВЗначение("ДеревоМетаданныхДляСправки");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВключатьСсылкиНаСправкуПоискаВСписках",
	                                  ВключатьСсылкиНаСправкуПоискаВСписках);
	ДополнительныеПараметры.Вставить("ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку", 
	                                  ФормироватьФайлыСправкиПоОбъектамНеВключаемымВСправку);
	ДополнительныеПараметры.Вставить("КаталогВыгрузки", Каталог);
	
	ДополнительныеПараметры.Вставить("ФорматВыгрузки", ФорматВыгрузки);
	
	Возврат Обработки.РаботаСоСправкой.СформироватьФайлыСправки(ДеревоМетаданных, Проект, ДополнительныеПараметры);
	
КонецФункции

&НаСервере
Процедура ПроверитьСправкуСервер(МассивИменФайлов)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоМетаданныхДляСправки");
	
	МассивИменПодсистем = Новый Массив;
	МассивИменФормОбъектов = Новый Массив;
	МассивИменОбщихФорм = Новый Массив;
	МассивИменОбъектовМетаданных = Новый Массив;
	
	СоответствиеИменПодсистем = Новый Соответствие;
	СоответствиеИменОбщихФорм = Новый Соответствие;
	СоответствиеИменФормОбъектов = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных = Новый Соответствие;
	
	Для Каждого ИмяФайла из МассивИменФайлов Цикл
		
		ИмяОбъекта = СтрЗаменить(ИмяФайла, ".Help.ru.html", "");
		
		Если Лев(ИмяОбъекта,11) = "Подсистема." Тогда
			// Это подсистемы
			ИмяОбъекта = СтрЗаменить(ИмяОбъекта, ".Подсистема.", ".");
			ИмяОбъекта = Сред(ИмяОбъекта, 12); // Убирается префикс "Подсистема."
			
			МассивИменПодсистем.Добавить(ИмяОбъекта);
			
			СоответствиеИменПодсистем.Вставить(ИмяОбъекта, ИмяФайла);
			
		ИначеЕсли Найти(ИмяОбъекта, ".Форма.") > 0 Тогда
			// Это формы объектов метаданных
			МассивИменФормОбъектов.Добавить(ИмяОбъекта);
			СоответствиеИменФормОбъектов.Вставить(ИмяОбъекта, ИмяФайла);
			
		Иначе
			// Это объекты метаданных
			МассивИменОбъектовМетаданных.Добавить(ИмяОбъекта);
			СоответствиеИменОбъектовМетаданных.Вставить(ИмяОбъекта, ИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
	МассивУзловКлассовОбъектов = Новый Массив();
	МассивСтрокФормОбъектов = Новый Массив();
	
	СтруктураГруппОбъектовМетаданных = РаботаСОбъектамиМетаданных.СтруктураГруппОбъектовМетаданных(Проект);
	
	УзелОбщие = ДеревоОбъект.Строки.Найти("Общие" ,"Наименование");
	УзелПодсистем = УзелОбщие.Строки.Найти("Подсистемы" ,"Наименование");
	
	Для Каждого СтрокаДерева из ДеревоОбъект.Строки Цикл
		
		Если СтрокаДерева.Наименование<>"Общие" И СтрокаДерева.Наименование<>"Подсистемы" Тогда
			МассивУзловКлассовОбъектов.Добавить(СтрокаДерева);			
			ДобавитьСтрокиФормОбъектовВМассив(СтрокаДерева, МассивСтрокФормОбъектов);
		КонецЕсли;
		
	КонецЦикла;
		
	// Проверка соответствия файлов в каталоге отмеченным объектам в дереве
	ПроверитьСоответствиеПодсистем(МассивИменПодсистем, СоответствиеИменПодсистем, УзелПодсистем);
	ПроверитьСоответствиеФормОбъектов(МассивИменФормОбъектов, СоответствиеИменФормОбъектов, МассивСтрокФормОбъектов);
	ПроверитьСоответствиеОбъектовМетаданных(МассивИменОбъектовМетаданных, СоответствиеИменОбъектовМетаданных, МассивУзловКлассовОбъектов);
	
	// Проверка начилия флага "Включать в справку" для отмеченных объектов
	ПроверитьФлагиВключенияВСправку(УзелПодсистем, МассивСтрокФормОбъектов, МассивУзловКлассовОбъектов);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиФормОбъектовВМассив(УзелКласса, МассивСтрок)
	
	Для Каждого СтрокаОбъекта из УзелКласса.Строки Цикл
		
		УзелФормОбъекта = СтрокаОбъекта.Строки.Найти("Формы", "Представление");
		
		Если УзелФормОбъекта <> Неопределено Тогда
			Для Каждого СтрокаФормы из УзелФормОбъекта.Строки Цикл
				Если СтрокаФормы.Отметка = 1 Тогда 
					МассивСтрок.Добавить(СтрокаФормы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеПодсистем(МассивИменПодсистем, СоответствиеИменПодсистем, УзелПодсистем)
	
	Для Каждого ИмяПодсистемы из МассивИменПодсистем Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Наименование", ИмяПодсистемы);
		СтруктураОтбора.Вставить("Отметка", 1);
		
		НайденныеСтроки = УзелПодсистем.Строки.НайтиСтроки(СтруктураОтбора, Истина);
		Если НайденныеСтроки.Количество()=0 Тогда
			ИмяФайла = СоответствиеИменПодсистем.Получить(ИмяПодсистемы);
			ТекстСообщения = НСтр("ru='В каталоге обнаружен файл %ИмяФайла%, для которого не найдено соответствие среди отмеченных объектов в дереве'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеФормОбъектов(МассивИменФормОбъектов, СоответствиеИменФормОбъектов, МассивСтрокФормОбъектов)
	
	Для Каждого ИмяФормыОбъекта из МассивИменФормОбъектов Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Наименование", ИмяФормыОбъекта);
		СтруктураОтбора.Вставить("Отметка", 1);
		
		СтрокаНайдена = Ложь;
		
		Для Каждого СтрокаФормОбъекта из МассивСтрокФормОбъектов Цикл 
			НайденныеСтроки = СтрокаФормОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СтрокаНайдена Тогда
			ИмяФайла = СоответствиеИменФормОбъектов.Получить(ИмяФормыОбъекта);
			ТекстСообщения = НСтр("ru='В каталоге обнаружен файл %ИмяФайла%, для которого не найдено соответствие среди отмеченных объектов в дереве'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСоответствиеОбъектовМетаданных(МассивИменОбъектовМетаданных, СоответствиеИменОбъектовМетаданных, МассивУзловКлассовОбъектов)
	
	Для Каждого ИмяОбъекта из МассивИменОбъектовМетаданных Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Наименование", ИмяОбъекта);
		СтруктураОтбора.Вставить("Отметка", 1);
		
		СтрокаНайдена = Ложь;
		
		Для Каждого СтрокаКласса из МассивУзловКлассовОбъектов Цикл 
			НайденныеСтроки = СтрокаКласса.Строки.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество()>0 Тогда
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СтрокаНайдена Тогда
			ИмяФайла = СоответствиеИменОбъектовМетаданных.Получить(ИмяОбъекта);
			ТекстСообщения = НСтр("ru='В каталоге обнаружен файл %ИмяФайла%, для которого не найдено соответствие среди отмеченных объектов в дереве'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяФайла%", ИмяФайла);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФлагиВключенияВСправку(УзелПодсистем, МассивСтрокФормОбъектов, МассивУзловКлассовОбъектов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Ссылка КАК Проект,
	|	ПроектыВключаемыеПроекты.Проект КАК ПроектБиблиотека
	|ПОМЕСТИТЬ СвязиПроектовБиблиотек
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.СправкаВедетсяВБиблиотеке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Подсистемы.Ссылка КАК ОбъектСправки,
	|	ВЫБОР
	|		КОГДА СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) > 0
	|				ИЛИ НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправкиПоставщика.Ссылка) > 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключатьВСправку,
	|	Подсистемы.Наименование КАК Наименование,
	|	""подсистемы"" КАК ТипОбъекта,
	|	1 КАК Порядок,
	|	Подсистемы.Код КАК Код
	|ИЗ
	|	Справочник.Подсистемы КАК Подсистемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиПроектовБиблиотек КАК СвязиПроектовБиблиотек
	|		ПО Подсистемы.Владелец = СвязиПроектовБиблиотек.Проект
	|			И Подсистемы.Поставщик = СвязиПроектовБиблиотек.ПроектБиблиотека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Подсистемы КАК ПодсистемыПоставщика
	|		ПО 	Подсистемы.uuid = ПодсистемыПоставщика.uuid
	|				И НЕ ПодсистемыПоставщика.uuid = """"
	|				И Подсистемы.Поставщик = ПодсистемыПоставщика.Владелец 
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ЭлементыСправки
	|		ПО ЭлементыСправки.Владелец = Подсистемы.Ссылка
	|			И (ЭлементыСправки.ВключатьВСправку)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ЭлементыСправкиПоставщика
	|		ПО 	ЭлементыСправкиПоставщика.Владелец = ПодсистемыПоставщика.Ссылка
	|			И (ЭлементыСправкиПоставщика.ВключатьВСправку)
	|ГДЕ
	|	Подсистемы.Ссылка В(&МассивПодсистем)
	|
	|СГРУППИРОВАТЬ ПО
	|	Подсистемы.Ссылка,
	|	СвязиПроектовБиблиотек.ПроектБиблиотека
	|
	|ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) = 0 И СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL
	|		ИЛИ (КОЛИЧЕСТВО(ЭлементыСправкиПоставщика.Ссылка) = 0 И Не СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ВЫБОР
	|		КОГДА (НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И НЕ ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправкиПоставщика.Ссылка) > 0)
	|		  ИЛИ (НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) > 0)
	|		  ИЛИ (СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) > 0)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключатьВСправку,
	|	ФормыОбъектовМетаданных.Наименование,
	|	""формы"",
	|	3,
	|	ФормыОбъектовМетаданных.Код
	|ИЗ
	|	Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиПроектовБиблиотек КАК СвязиПроектовБиблиотек
	|		ПО ФормыОбъектовМетаданных.Владелец.Владелец = СвязиПроектовБиблиотек.Проект
	|			И ФормыОбъектовМетаданных.Владелец.Поставщик = СвязиПроектовБиблиотек.ПроектБиблиотека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданныхПоставщика
	|		ПО 	ФормыОбъектовМетаданных.uuid = ФормыОбъектовМетаданныхПоставщика.uuid
	|			И НЕ ФормыОбъектовМетаданныхПоставщика.uuid = """"
	|			И СвязиПроектовБиблиотек.ПроектБиблиотека = ФормыОбъектовМетаданныхПоставщика.Владелец.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ЭлементыСправки
	|		ПО ЭлементыСправки.Владелец = ФормыОбъектовМетаданных.Ссылка
	|			И (ЭлементыСправки.ВключатьВСправку)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ЭлементыСправкиПоставщика
	|		ПО 	ЭлементыСправкиПоставщика.Владелец = ФормыОбъектовМетаданныхПоставщика.Ссылка
	|			И (ЭлементыСправкиПоставщика.ВключатьВСправку)
	|ГДЕ
	|	ФормыОбъектовМетаданных.Ссылка В(&МассивФорм)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФормыОбъектовМетаданных.Ссылка,
	|	ФормыОбъектовМетаданныхПоставщика.Ссылка,
	|	СвязиПроектовБиблиотек.ПроектБиблиотека
	|	
	|ИМЕЮЩИЕ
	|(СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) = 0)
	|		ИЛИ (НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) = 0)
	|		ИЛИ (НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И НЕ ФормыОбъектовМетаданныхПоставщика.Ссылка ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправкиПоставщика.Ссылка) = 0)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка,
	|	ВЫБОР
	|		КОГДА СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) > 0
	|				ИЛИ НЕ СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL И КОЛИЧЕСТВО(ЭлементыСправкиПоставщика.Ссылка) > 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключатьВСправку,
	|	ОбъектыМетаданных.Наименование,
	|	""объекта метаданных"",
	|	2,
	|	ОбъектыМетаданных.Код
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвязиПроектовБиблиотек КАК СвязиПроектовБиблиотек
	|		ПО ОбъектыМетаданных.Владелец = СвязиПроектовБиблиотек.Проект
	|			И ОбъектыМетаданных.Поставщик = СвязиПроектовБиблиотек.ПроектБиблиотека
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданныхПоставщика
	|		ПО 	ОбъектыМетаданных.uuid = ОбъектыМетаданныхПоставщика.uuid
	|				И НЕ ОбъектыМетаданныхПоставщика.uuid = """"
	|				И ОбъектыМетаданных.Поставщик = ОбъектыМетаданныхПоставщика.Владелец 
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ЭлементыСправки
	|		ПО ЭлементыСправки.Владелец = ОбъектыМетаданных.Ссылка
	|			И (ЭлементыСправки.ВключатьВСправку)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлементыСправки КАК ЭлементыСправкиПоставщика
	|		ПО 	ЭлементыСправкиПоставщика.Владелец = ОбъектыМетаданныхПоставщика.Ссылка
	|			И (ЭлементыСправкиПоставщика.ВключатьВСправку)
	|ГДЕ
	|	ОбъектыМетаданных.Ссылка В(&МассивОбъектовМетаданных)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыМетаданных.Ссылка,
	|	СвязиПроектовБиблиотек.ПроектБиблиотека
	|
	|ИМЕЮЩИЕ
	|		(КОЛИЧЕСТВО(ЭлементыСправки.Ссылка) > 0 И СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL)
	|		ИЛИ (КОЛИЧЕСТВО(ЭлементыСправкиПоставщика.Ссылка) > 0 И Не СвязиПроектовБиблиотек.ПроектБиблиотека ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Код";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	СтруктураОтбора = Новый Структура("Отметка", 1);
	СтрокиПодсистем = УзелПодсистем.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	МассивПодсистем = Новый Массив;
	Для Каждого СтрокаДерева из СтрокиПодсистем Цикл
		МассивПодсистем.Добавить(СтрокаДерева.ОбъектСправки);
	КонецЦикла;
	
	МассивФорм = Новый Массив;
	
	Для Каждого СтрокаФормы из МассивСтрокФормОбъектов Цикл
		МассивФорм.Добавить(СтрокаФормы.ОбъектСправки);
	КонецЦикла;
		
	МассивОбъектов = Новый Массив;
	Для Каждого УзелКласса из МассивУзловКлассовОбъектов Цикл
		
		СтрокиОбъектов = УзелКласса.Строки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаОбъекта из СтрокиОбъектов Цикл
			МассивОбъектов.Добавить(СтрокаОбъекта.ОбъектСправки);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивПодсистем", МассивПодсистем);
	Запрос.УстановитьПараметр("МассивОбъектовМетаданных", МассивОбъектов);
	Запрос.УстановитьПараметр("МассивФорм", МассивФорм);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ИмяОбъекта = Выборка.Наименование;
			ТекстСообщения = НСтр("ru = 'Для %ТипОбъекта% ""%ИмяОбъекта%"" установлена отметка выгрузки, но не установлен признак включения в справку'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = '%ТипОбъекта%'"), Выборка.ТипОбъекта);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = '%ИмяОбъекта%'"), ИмяОбъекта);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если ФормироватьСправкуВФорматеHTML  Тогда
		Элементы.КаталогИсполняемогоФайла.Видимость = Истина;
		Элементы.ГруппаПрогресс.Видимость = Истина;
	Иначе
		Элементы.КаталогИсполняемогоФайла.Видимость = Ложь;
		Элементы.ГруппаПрогресс.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПоПроекту()
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		Данные = ДанныеПроекта(Проект);
		
		КаталогИБДляЗагрузкиМетаданных                   = Данные.КаталогИБДляЗагрузкиМетаданных;
		ИмяПользователяИБДляЗагрузкиМетаданных           = Данные.ИмяПользователяИБДляЗагрузкиМетаданных;
		ПарольПользователяИБДляЗагрузкиМетаданных        = Данные.ПарольПользователяИБДляЗагрузкиМетаданных;
		КаталогХранилищаДляЗагрузкиМетаданных            = Данные.КаталогХранилищаДляЗагрузкиМетаданных;
		ИмяПользователяХранилищаДляЗагрузкиМетаданных    = Данные.ИмяПользователяХранилищаДляЗагрузкиМетаданных;
		ПарольПользователяХранилищаДляЗагрузкиМетаданных = Данные.ПарольПользователяХранилищаДляЗагрузкиМетаданных;
		ВыгружатьСправкуПриЗагрузкеМетаданных            = Данные.ВыгружатьСправкуПриЗагрузкеМетаданных;
		
		Если Данные.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории Тогда
			ФорматВыгрузки = 1;
		ИначеЕсли Данные.РежимРазработки = Перечисления.РежимРазработки.ВХранилище Тогда
			ФорматВыгрузки = 2;
		Иначе
			ФорматВыгрузки = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРезультат(ИмяФайла)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		ТекстовыйДокумент.Прочитать(ИмяФайла);
		Ответ = Число(ТекстовыйДокумент.ПолучитьТекст());
	Иначе
		Ответ = 1;
	КонецЕсли;
	
	Если Ответ = 0 Тогда
		Результат = 2;
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Если Ответ <> 0 Тогда
		Лог = Новый ТекстовыйДокумент;
		Лог.Прочитать(ИмяФайлаЛогов);
		Лог.Показать("Результат выполнения операций");
		ВызватьИсключение "В процессе создания файлов справки возникли ошибки.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаписьВЛог(Запись)
	
	Лог = Новый ТекстовыйДокумент;
	Файл = Новый Файл(ИмяФайлаЛогов);
	Если Файл.Существует() Тогда
		Лог.Прочитать(ИмяФайлаЛогов);
	КонецЕсли;
	Лог.ДобавитьСтроку(Строка(ТекущаяДата()) + " " +  Запись);
	Лог.Записать(ИмяФайлаЛогов);
	Лог = Неопределено;
	
КонецПроцедуры

Функция ДанныеПроекта(Проект)
	
	Данные = Новый Структура;
	Данные.Вставить("КаталогИБДляЗагрузкиМетаданных", "");
	Данные.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных", "");
	Данные.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных", "");
	Данные.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", "");
	Данные.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", "");
	Данные.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", "");
	Данные.Вставить("ВыгружатьСправкуПриЗагрузкеМетаданных", Ложь);
	Данные.Вставить("РежимРазработки", Неопределено);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.КаталогИБДляЗагрузкиМетаданных КАК КаталогИБДляЗагрузкиМетаданных,
	|	Проекты.ИмяПользователяИБДляЗагрузкиМетаданных КАК ИмяПользователяИБДляЗагрузкиМетаданных,
	|	Проекты.ИмяПользователяХранилищаДляЗагрузкиМетаданных КАК ИмяПользователяХранилищаДляЗагрузкиМетаданных,
	|	Проекты.ПарольПользователяИБДляЗагрузкиМетаданных КАК ПарольПользователяИБДляЗагрузкиМетаданных,
	|	Проекты.ПарольПользователяХранилищаДляЗагрузкиМетаданных КАК ПарольПользователяХранилищаДляЗагрузкиМетаданных,
	|	Проекты.ВыгружатьСправкуПриЗагрузкеМетаданных КАК ВыгружатьСправкуПриЗагрузкеМетаданных,
	|	Проекты.РежимРазработки КАК РежимРазработки,
	|	Ветки.Имя КАК КаталогХранилищаДляЗагрузкиМетаданных
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	|		ПО Проекты.Ветка = Ветки.Ссылка
	|ГДЕ
	|	Проекты.Ссылка = &Проект"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти
