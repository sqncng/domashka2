# Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура СделатьСборкуСценариев() Экспорт
	
	Если ЗначениеЗаполнено(КаталогТестов) Тогда
		Объект.КаталогСценариев = КаталогТестов;
		Объект.КаталогПроцессов = КаталогТестов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(JunitФайл) И ЗначениеЗаполнено(Объект.КаталогФайловОшибок) Тогда
		JunitФайл = Объект.КаталогФайловОшибок + "junit_test_compile.xml"
	КонецЕсли;
	
	Объект.Ошибки.Очистить();
	Объект.РезультатКомпиляции.Очистить();
	Объект.ОтборПоНастройкамСценариев.Очистить();
	Объект.ОтборПоUIDНастроекСценариев.Очистить();
	Объект.ОтборПоСценариям.Очистить();
	Объект.ИсключенияПоСценариям.Очистить();
	Объект.ОтборПоНастройкамПроцессов.Очистить();
	Объект.ОтборПоПроцессам.Очистить();
	Объект.ИДБазыСборки.Очистить();
	
	Объект.ОтборПоНастройкамСценариев.ЗагрузитьЗначения(СтрРазделить(ОтборПоНастройкамСценариев, "; ", Ложь));
	Объект.ОтборПоUIDНастроекСценариев.ЗагрузитьЗначения(СтрРазделить(ОтборПоUIDНастроекСценариев, "; ", Ложь));
	Объект.ОтборПоСценариям.ЗагрузитьЗначения(СтрРазделить(ОтборПоСценариям, "; ", Ложь));
	Объект.ИсключенияПоСценариям.ЗагрузитьЗначения(СтрРазделить(ИсключенияПоСценариям, "; ", Ложь));
	Объект.ОтборПоНастройкамПроцессов.ЗагрузитьЗначения(СтрРазделить(ОтборПоНастройкамПроцессов, "; ", Ложь));
	Объект.ОтборПоПроцессам.ЗагрузитьЗначения(СтрРазделить(ОтборПоПроцессам, "; ", Ложь));
	
	Если Объект.КоличествоПотоков < 1 Тогда
		Объект.КоличествоПотоков = 1;
	КонецЕсли;
	Если Объект.НомерПотока < 1 Тогда
		Объект.НомерПотока = 1;
	КонецЕсли;
	Если Объект.НомерПотока > Объект.КоличествоПотоков Тогда
		Объект.НомерПотока = Объект.КоличествоПотоков;
	КонецЕсли;
	
	МассивБаз = СтрРазделить(ИДБазыСборки, "; ", Ложь);
	Для Ккк = 0 По МассивБаз.Количество()-1 Цикл
		МассивБаз[Ккк] =  НРег(МассивБаз[Ккк]);
	КонецЦикла;
	Объект.ИДБазыСборки.ЗагрузитьЗначения(МассивБаз);

	Объект.ЕстьОтборПоНастройкам = Объект.ОтборПоНастройкамПроцессов.Количество() > 0
									ИЛИ Объект.ОтборПоНастройкамСценариев.Количество() > 0 
									ИЛИ Объект.ОтборПоUIDНастроекСценариев.Количество() > 0;
	Объект.ЕстьОтборПоТестам = Объект.ОтборПоПроцессам.Количество() > 0 ИЛИ Объект.ОтборПоСценариям.Количество() > 0;
	
	Объект.ВыполнятьСборкуСценариев = ?(ПереключательПоТипамКомпиляции = "Все" ИЛИ ПереключательПоТипамКомпиляции = "Только сценарии", Истина, Ложь);
	Объект.ВыполнятьСборкуПроцессов = ?(ПереключательПоТипамКомпиляции = "Все" ИЛИ ПереключательПоТипамКомпиляции = "Только процессы", Истина, Ложь);
	
	Попытка
		СканироватьКаталогИСобратьСборку();
	Исключение
		НоваяОшибка = Объект.Ошибки.Добавить();
		НоваяОшибка.ОписаниеОшибки =  ОписаниеОшибки();
		НоваяОшибка.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Объект.ИмяФайлаРезультатовКомпиляции) Тогда
		СоздатьФайлРезультатовКомпиляции();
	КонецЕсли;
	
	Если Объект.Ошибки.Количество() > 0 Тогда
		ЛогВыполнения = "";
		Для Каждого СтрокаОшибки Из Объект.Ошибки Цикл  
			ЛогВыполнения = ЛогВыполнения + Символы.ПС + СтрокаОшибки.ПодробноеПредставлениеОшибки + Символы.ПС;
		КонецЦикла;
		
		ЛогВыполнения = СтрШаблон(НСтр("ru = 'При выполнении возникли ошибки: %1'"),
									ЛогВыполнения);
		Сообщить(ЛогВыполнения);
		ЗаписатьФайлЛога(ЛогВыполнения);
		ЗаписатьФайлРезультата(1);
	Иначе
		ЗаписатьФайлЛога("");
		ЗаписатьФайлРезультата(0);
	КонецЕсли;
	
	Если РезультатВФорматеСППР Тогда
		СоздатьОшибкиВФорматеСППР();
	КонецЕсли;
	Если РезультатВФорматеJunit Тогда
		СоздатьРезультатВФорматеJunit();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайлYaml(ПолноеИмя) Экспорт
	СчетчикСтрок = -1;
	ИмяФайла = ПолноеИмя;
	
	ДанныеФайлаYaml = Новый Соответствие;
	ДанныеФайлаYaml.Вставить("ПолноеИмяФайлаYaml",ИмяФайла);
	
	Результат = Новый Структура("ИмяФайла,ДанныеФайлаYaml",ИмяФайла,ДанныеФайлаYaml);
	
	Попытка
		ЧтениеДанныхYaml(ДанныеФайлаYaml, ИмяФайла, СчетчикСтрок);
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не получилось прочитать файл <%1>. Строка №%2.'"),ИмяФайла,СчетчикСтрок+1);
		
		НоваяСтрока = Объект.РезультатКомпиляции.Добавить();
		НоваяСтрока.УспешнаяСборка = Ложь;
		НоваяСтрока.ОписаниеОшибки =  ОписаниеОшибки() + Символы.ПС + ТекстСообщения;
		НоваяСтрока.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + ТекстСообщения;
		
		
		Файл = Новый Файл(ПолноеИмя);
		Каталог = Новый Файл(Файл.Путь);

		Если Файл.Имя = "scen.yaml" ИЛИ Файл.Имя = "meta.yaml" Тогда
			НоваяСтрока.КодСценария = Каталог.Имя;
		ИначеЕсли Файл.Имя = "proc.yaml" Тогда
			НоваяСтрока.КодПроцесса = Каталог.Имя;
		Иначе
			ФайлПроцесса = Новый Файл(Каталог.Путь + "proc.yaml");
			ФайлСценария = Новый Файл(Каталог.Путь + "scen.yaml");
			ФайлСценария2 = Новый Файл(Каталог.Путь + "meta.yaml");

			Если ФайлПроцесса.Существует() Тогда
				 НоваяСтрока.КодНастройкиПроцесса = Файл.ИмяБезРасширения;
			ИначеЕсли ФайлСценария.Существует() Тогда
				 НоваяСтрока.КодНастройкиСценария = Файл.ИмяБезРасширения;
			ИначеЕсли ФайлСценария2.Существует() Тогда
				 НоваяСтрока.КодНастройкиСценария = Файл.ИмяБезРасширения;
			КонецЕсли;
		КонецЕсли;
		
	КонецПопытки;
	
	Файл = Новый Файл(ПолноеИмя);
	Если НРег(Файл.Имя) = "meta.yaml" Тогда
		ПутьКФайлуТекстСценария = Файл.Путь + "scen.feature";
		ФайлТекстСценария = Новый Файл(ПутьКФайлуТекстСценария);
		Если ФайлТекстСценария.Существует() Тогда
			Текст = Новый ЧтениеТекста;
			Текст.Открыть(ПутьКФайлуТекстСценария,"UTF-8",,,Ложь);
			Результат.ДанныеФайлаYaml.Вставить("ТекстСценария", Текст.Прочитать());
			Текст.Закрыть();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура СоздатьОшибкиВФорматеСППР() Экспорт

	Для Каждого СтрокаОшибки Из Объект.Ошибки Цикл
		СоздатьОшибкуВФорматеСППР(СтрокаОшибки.ОписаниеОшибки, СтрокаОшибки.ПодробноеПредставлениеОшибки);
	КонецЦикла;
	
	Для Каждого Строка Из Объект.РезультатКомпиляции Цикл
		Если НЕ Строка.УспешнаяСборка Тогда
			СоздатьОшибкуВФорматеСППР(Строка.ОписаниеОшибки, Строка.ПодробноеПредставлениеОшибки, 
			Строка.КодСценария, Строка.КодНастройкиСценария, Строка.КодПроцесса, Строка.КодНастройкиПроцесса);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОшибкуВФорматеСППР(ОписаниеОшибки, ПодробноеПредставлениеОшибки,
									КодСценария=Неопределено, КодНастройкиСценария=Неопределено, 
									КодПроцесса=Неопределено, КодНастройкиПроцесса=Неопределено)

	Ошибка = СоздатьОписаниеОшибки();
	Ошибка.ТипОшибки              = НСтр("ru = 'Ошибка компиляции сценария'");
	
	Ошибка.УточнениеРасположения = ОбработатьТекстОшибки(ОписаниеОшибки);
	Ошибка.ИсходнаяИнформация = ОбработатьТекстОшибки(ПодробноеПредставлениеОшибки, Ложь);
	Ошибка.ПорядокВоспроизведения = ОбработатьТекстОшибки(ПодробноеПредставлениеОшибки);
	
	Ошибка.КодСценария = КодСценария;
	Ошибка.КодНастройкиСценария = КодНастройкиСценария;
	Ошибка.КодПроцесса = КодПроцесса;
	Ошибка.КодНастройкиПроцесса = КодНастройкиПроцесса;
	
	Ошибка.ДостоверностьОбнаружения = "Высокая";
	
	Если ЗначениеЗаполнено(Ответственный) Тогда
		Ошибка.Ответственный = Ответственный;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.АдресРепозитория) Тогда
		Ошибка.АдресРепозитория = Объект.АдресРепозитория;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИмяВетки) Тогда
		Ошибка.ИмяВетки = Объект.ИмяВетки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВерсияКонфигурации) Тогда
		Ошибка.ВерсияКонфигурации = Объект.ВерсияКонфигурации;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ИмяКонфигурации) Тогда
		Ошибка.ИмяКонфигурации = Объект.ИмяКонфигурации;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДатаОбнаруженияОшибки) Тогда
		Ошибка.ДатаОбнаружения = Объект.ДатаОбнаруженияОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДополнениеТекстаОшибки) Тогда
		Ошибка.ПорядокВоспроизведения = Ошибка.ПорядокВоспроизведения + Символы.ПС + Объект.ДополнениеТекстаОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДополнениеПорядкаВоспроизведения) Тогда
		Ошибка.ПорядокВоспроизведения = Объект.ДополнениеПорядкаВоспроизведения + Символы.ПС + Ошибка.ПорядокВоспроизведения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КаталогФайловОшибок) Тогда
	
		Файл = Новый Файл(Объект.КаталогФайловОшибок);
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(Объект.КаталогФайловОшибок);
		ИначеЕсли НЕ Файл.ЭтоКаталог() Тогда
			УдалитьФайлы(Объект.КаталогФайловОшибок);
			СоздатьКаталог(Объект.КаталогФайловОшибок);
		КонецЕсли; 
		
		ИмяXML = СтрШаблон("Compile_Error_%1_%2", 
				Формат(ТекущаяДата(), "ДФ=yyyyMMddHHmmss"),
				Строка(Новый УникальныйИдентификатор()));

		ИмяФайлаОшибки = ДобавитьКонечныйРазделительПути(Объект.КаталогФайловОшибок);
		ИмяФайлаОшибки = СтрШаблон("%1%2.xml", ИмяФайлаОшибки, ИмяXML);

		
		Результат = Новый ТекстовыйДокумент;
		Результат.УстановитьТекст(ТекстОшибкиXML(Ошибка));
		Результат.Записать(ИмяФайлаОшибки);

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРезультатВФорматеJunit() Экспорт
	
	НаборыТестов = Новый Массив;
	
	Для Каждого Строка Из Объект.РезультатКомпиляции Цикл
		ТипСценария = ?(ЗначениеЗаполнено(Строка.КодНастройкиПроцесса), 
				"Компиляция настройки процесса " + Строка.КодНастройкиПроцесса, 
				"Компиляция настройки сценария " + Строка.КодНастройкиСценария);
		
		Набор = НаборТестов(ТипСценария, Объект.ИмяКонфигурации, Объект.ВерсияКонфигурации);
		Набор.Вставить("scenario",              Строка.КодСценария);
		Набор.Вставить("scenario_setting",      Строка.КодНастройкиСценария);
		Набор.Вставить("uid_scenario",          Строка.UIDСценария);
		Набор.Вставить("uid_scenario_setting",  Строка.UIDНастройкиСценария);
		Набор.Вставить("scenario_setting_name", Строка.ИмяНастройкиСценария);
		Набор.Вставить("process",               Строка.КодПроцесса);
		Набор.Вставить("process_setting",       Строка.КодНастройкиПроцесса);
				
		ИмяКейса = ?(ЗначениеЗаполнено(Строка.КодНастройкиПроцесса), 
					"Настройка запуска процесса " + Строка.КодНастройкиПроцесса, 
					"Настройка запуска сценария " + Строка.КодНастройкиСценария);
		Кейс = ТестКейс(ИмяКейса, ТипСценария); 
		Если Не Строка.УспешнаяСборка Тогда
			ДополнитьНабор(Набор, Строка);
			ДобавитьОшибку(Кейс, ОбработатьТекстОшибки(Строка.ОписаниеОшибки), "",  ОбработатьТекстОшибки(Строка.ПодробноеПредставлениеОшибки));
		КонецЕсли;
		
		Набор.ТестКейсы.Добавить(Кейс);
		НаборыТестов.Добавить(Набор);
	КонецЦикла;
	Для Каждого Строка Из Объект.Ошибки Цикл
		Набор = НаборТестов("Компиляция сценариев", Объект.ИмяКонфигурации, Объект.ВерсияКонфигурации);

		Кейс = ТестКейс("Запуск компиляции", "Компиляция");
		ДополнитьНабор(Набор, Строка);
		ДобавитьОшибку(Кейс, ОбработатьТекстОшибки(Строка.ОписаниеОшибки), "", ОбработатьТекстОшибки(Строка.ПодробноеПредставлениеОшибки));
		
		Набор.ТестКейсы.Добавить(Кейс);
		НаборыТестов.Добавить(Набор);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(JunitФайл) Тогда
		ЗаписатьНабор(НаборыТестов, JunitФайл);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьНабор(Набор, Строка)
	Набор.Вставить("error_type", "Ошибка компиляции");
	Набор.Вставить("specification", ОбработатьТекстОшибки(Строка.ОписаниеОшибки));
	Набор.Вставить("description", ОбработатьТекстОшибки(Строка.ПодробноеПредставлениеОшибки, Ложь));
	Набор.Вставить("how_to", ОбработатьТекстОшибки(Строка.ПодробноеПредставлениеОшибки, Истина, Истина));
КонецПроцедуры

&НаКлиенте
Функция ОбработатьТекстОшибки(ТекстОшибки, УдалятьСтрокиМодуля=Истина, УдалятьСтрокиМодуляЦеликом=Ложь)
	Результат = ТекстОшибки;
	Результат = УдалитьПутьКаталога(Результат);
	Если УдалятьСтрокиМодуля Тогда
		Результат = УдалитьСтрокиМодуля(Результат, УдалятьСтрокиМодуляЦеликом);
	КонецЕсли;
	Возврат СокрЛП(Результат);
КонецФункции

&НаКлиенте
Процедура СоздатьФайлРезультатовКомпиляции(Команда=Неопределено)
	Сценарии = Новый Массив;
	Процессы = Новый Массив;
	
	Для Каждого Элемент Из Объект.РезультатКомпиляции Цикл
		Если ЗначениеЗаполнено(Элемент.КодНастройкиСценария) Тогда
			Сценарии.Добавить(Элемент.КодНастройкиСценария);
		ИначеЕсли ЗначениеЗаполнено(Элемент.КодНастройкиПроцесса) Тогда
			Процессы.Добавить(Элемент.КодНастройкиПроцесса);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJson.ОткрытьФайл(Объект.ИмяФайлаРезультатовКомпиляции);
	
	ЗаписьJson.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("scenario_tests");
	ЗаписьJson.ЗаписатьНачалоМассива();
	Для Каждого КодНастройкиСценария Из Сценарии Цикл
		ЗаписьJSON.ЗаписатьЗначение(КодНастройкиСценария);
	КонецЦикла;	
	ЗаписьJson.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("process_tests");
	ЗаписьJson.ЗаписатьНачалоМассива();
	Для Каждого КодНастройкиПроцесса Из Процессы Цикл
		ЗаписьJSON.ЗаписатьЗначение(КодНастройкиПроцесса);
	КонецЦикла;	
	ЗаписьJson.ЗаписатьКонецМассива();
	ЗаписьJson.ЗаписатьКонецОбъекта();
	
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция УдалитьПутьКаталога(УточнениеОшибки)
	
	ФайлКаталогСценариев   = Новый Файл(Объект.КаталогСценариев);
	УточнениеОшибки = СтрЗаменить(УточнениеОшибки, ФайлКаталогСценариев.ПолноеИмя, "");
	
	ФайлКаталогПроцессов   = Новый Файл(Объект.КаталогПроцессов);
	УточнениеОшибки = СтрЗаменить(УточнениеОшибки, ФайлКаталогПроцессов.ПолноеИмя, "");

	Возврат УточнениеОшибки;
	
КонецФункции

&НаКлиенте
// Считывает данные файла yaml в соответствие
// Параметры:
//  ДанныеФайлаYaml - Соответствие
//  ИмяФайла - Строка
//  СчетчикСтрок - Число
Процедура ЧтениеДанныхYaml(ДанныеФайлаYaml, ИмяФайла, СчетчикСтрок) Экспорт
	ТекОтступ = "";
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	МассивДанных = СтрРазделить(Текст.Прочитать(), Символы.ПС);
	Текст.Закрыть();
	
	ТекЭлементДляВставки = Неопределено;
	ИдетСчитываниеМногострочнойСтроки = Ложь;
	МассивСтрок = Новый Массив;
	
	УровеньОбъектов = Новый Массив;
	ЗаполнитьУровниОбъектов(УровеньОбъектов);
	
	ЗначениеСтандартногоОтступа = 4;
	
	УровеньОбъектов[0] = ДанныеФайлаYaml;
	ТекущееИмяПараметра = Неопределено;
	
	СчетчикСтрок = -1;
	КолСтрок = МассивДанных.Количество();
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок > КолСтрок-1 Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекСтр = МассивДанных[СчетчикСтрок];
		СтрЛ = СокрЛ(ТекСтр);
		Если ИдетСчитываниеМногострочнойСтроки Тогда
			Если Лев(СтрЛ,13) = "ТипПараметра:" Тогда
				ИдетСчитываниеМногострочнойСтроки = Ложь;
				ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
				ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
				УровеньОбъектов[ТекУровень].Вставить("Значение",СтрСоединить(ТекЭлементДляВставки,Символы.ПС));
			ИначеЕсли Лев(СтрЛ,21) = "ИмяПараметраПоСсылке:" Тогда
				ИдетСчитываниеМногострочнойСтроки = Ложь;
				ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
				ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
				УровеньОбъектов[ТекУровень].Вставить("ЗначениеПроизвольное",СтрСоединить(ТекЭлементДляВставки,Символы.ПС));
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИдетСчитываниеМногострочнойСтроки Тогда
			Если ТекСтр = "" И НРег(ТекущееИмяПараметра) <> "текстсценария" Тогда
				ИдетСчитываниеМногострочнойСтроки = Ложь;
				Продолжить;
			Иначе	
				//надо убрать отступ в начале строки
				ТекЭлементДляВставки.Добавить(Сред(ТекСтр,(ТекУровень+1)*ЗначениеСтандартногоОтступа+1));
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СокрЛП(ТекСтр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
		ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
		Если ТекУровень = 0 Тогда
			ТекЭлементДляВставки = ДанныеФайлаYaml;
		Иначе	
			ТекЭлементДляВставки = УровеньОбъектов[ТекУровень];
		КонецЕсли;	 
		
		Если ТекОтступ = 0 Тогда
			Имя      = Неопределено;
			Значение = Неопределено;
			ЗначениеИзСтрокиYaml(ТекСтр,Имя,Значение);
			ТекущееИмяПараметра = Имя;
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("СчетчикСтрок",СчетчикСтрок);
			ПараметрыОбработки.Вставить("УровеньОбъектов",УровеньОбъектов);
			ПараметрыОбработки.Вставить("ТекУровень",ТекУровень);
			ПараметрыОбработки.Вставить("ИдетСчитываниеМногострочнойСтроки",ИдетСчитываниеМногострочнойСтроки);
			
			ОбработатьСтрокуЗначенияYaml(Имя,Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки);
			
			ИдетСчитываниеМногострочнойСтроки = ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки;
		Иначе
			Если Лев(СтрЛ,1) = "-" Тогда
				ЭлементМассива = Новый Соответствие;
				ТекЭлементДляВставки = УровеньОбъектов[ТекУровень];
				ТекЭлементДляВставки.Добавить(ЭлементМассива);
				УровеньОбъектов[ТекУровень+1] = ЭлементМассива;
			Иначе	
				Имя      = Неопределено;
				Значение = Неопределено;
				ЗначениеИзСтрокиYaml(ТекСтр,Имя,Значение);
				
				
				ПараметрыОбработки = Новый Структура;
				ПараметрыОбработки.Вставить("СчетчикСтрок",СчетчикСтрок);
				ПараметрыОбработки.Вставить("УровеньОбъектов",УровеньОбъектов);
				ПараметрыОбработки.Вставить("ТекУровень",ТекУровень);
				ПараметрыОбработки.Вставить("ИдетСчитываниеМногострочнойСтроки",ИдетСчитываниеМногострочнойСтроки);
				
				ОбработатьСтрокуЗначенияYaml(Имя,Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки);
				
				ИдетСчитываниеМногострочнойСтроки = ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Параметры") Тогда
		ЗаполнитьПараметрыОбработки(Параметры.Параметры);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Объект.РаботаВРежимеВнешнейОбработки = Истина;
	ПереключательПоТипамКомпиляции = "Все";
	
	ЗапуститьСборку  = Ложь;
	ЗавершатьРаботу  = Ложь;
	
	СтруктураПараметров = ПолучитьПараметрыИзСтроки(ПараметрЗапуска);
	ЗаполнитьПараметрыОбработки(СтруктураПараметров);
	
	Если СтруктураПараметров.Свойство("JsonParams")Тогда
		Объект.ИмяФайлаПараметрыJson = СтруктураПараметров.JsonParams;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьФайл(Объект.ИмяФайлаПараметрыJson);
		
		#Если Не ВебКлиент Тогда
		СтруктураПараметров = ПрочитатьJSON(ЧтениеJSON);
		ЗаполнитьПараметрыОбработки(СтруктураПараметров);
		#КонецЕсли
	КонецЕсли;
	
	Если Найти(ПараметрЗапуска, "СобратьСценарии") <> 0 Тогда
		ЗапуститьСборку  = Истина;
		ЗавершатьРаботу  = Истина;
	ИначеЕсли НЕ Объект.ПереданыПараметры Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	Попытка
		
		Если ЗапуститьСборку Тогда
			СделатьСборкуСценариев();
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Лог = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьФайлЛога(Лог);
		ЗаписатьФайлРезультата(1);
	КонецПопытки; 
	
	Если ЗавершатьРаботу Тогда
		ПрекратитьРаботуСистемы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Объект.ПереданыПараметры Тогда
		Если Параметры.Свойство("Параметры") Тогда
			ЗаполнитьПараметрыОбработки(Параметры.Параметры);
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СборкаСценариев(Команда)
	
	СделатьСборкуСценариев();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьУровниОбъектов(УровеньОбъектов)
	Для Ккк = 1 По 10 Цикл
		УровеньОбъектов.Добавить(Неопределено);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуЗначенияYaml(Знач Имя,Знач Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки)
	Если Значение = "|" Тогда
		МассивСтрок = Новый Массив;
		ТекЭлементДляВставки.Вставить(Имя,МассивСтрок);
		ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки = Истина;
		ТекЭлементДляВставки        = МассивСтрок;
		ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень+1] = МассивСтрок; 
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		Значение = Сред(Значение,2);
		Значение = Лев(Значение,СтрДлина(Значение)-1);
		ТекЭлементДляВставки.Вставить(Имя,Значение);
		ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень] = ТекЭлементДляВставки; 
	ИначеЕсли Значение = "" Тогда
		Если ПараметрыОбработки.СчетчикСтрок <= МассивДанных.Количество()-2 Тогда
			СледущаяСтрока = СокрЛ(СледующаяЗначащаяСтрока(МассивДанных,ПараметрыОбработки.СчетчикСтрок+1));
			Если Лев(СледущаяСтрока,1) = "-" Тогда
				ЗначениеПараметра = Новый Массив;
			Иначе	
				ЗначениеПараметра = Новый Соответствие;
			КонецЕсли;	 
			ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень+1] = ЗначениеПараметра; 
			ТекЭлементДляВставки.Вставить(Имя,ЗначениеПараметра);
		КонецЕсли;	 
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка получения значения из строки: %1'"),
		                            МассивДанных[ПараметрыОбработки.СчетчикСтрок]);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Функция СледующаяЗначащаяСтрока(МассивДанных,Знач СчетчикСтрок)
	МаксКолСтрок = МассивДанных.Количество()-1;
	Пока МаксКолСтрок >= СчетчикСтрок Цикл
		Если ПустаяСтрока(МассивДанных[СчетчикСтрок]) Тогда
			СчетчикСтрок = СчетчикСтрок + 1;
			Продолжить;
		КонецЕсли;	 
		
		Возврат МассивДанных[СчетчикСтрок]; 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Функция ВернутьСпецСимволыYaml(Знач Стр)
	Стр = СтрЗаменить(Стр,"\""","""");
	Стр = СтрЗаменить(Стр,"\\","\");
	Возврат Стр; 
КонецФункции	 

&НаКлиенте
Процедура ЗначениеИзСтрокиYaml(Стр,Имя,Значение)
	Поз = Найти(Стр,":");
	Если Поз = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден символ "":"" в строке: %1'"), Стр);
	КонецЕсли;	 
	   
	Имя      = СтрЗаменить(СокрЛП(Лев(Стр,  Поз - 1)), Символ(65279), "");
	Значение = СтрЗаменить(СокрЛП(Сред(Стр, Поз + 1)), Символ(65279), "");
	ВернутьКавычки = Ложь;
	Если Лев(Значение,1) = """" и Прав(Значение,1) = """" Тогда
		Значение = Сред(Значение,2,СтрДлина(Значение)-2);
		ВернутьКавычки = Истина;
	КонецЕсли;	 
	Значение = ВернутьСпецСимволыYaml(Значение);
	Если ВернутьКавычки  Тогда
		Значение = """" + Значение + """";
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьJSONФайлНастроекЗапуска(Параметры,ИмяФайлаСценария,СценарийПоUID,ПроцессПоUID,ДанныеЭталонныхБД,КаталогПроекта)
	Объект.КаталогФреймворкаТестирования = ДополнитьРазделительПути(Объект.КаталогФреймворкаТестирования);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	ФайлСценария = Новый Файл(ИмяФайлаСценария);
	
	ЭтоСценарий = Истина;
	UIDСценария = Параметры.ДанныеФайлаYaml["ДанныеТеста"]["UIDСценария"];
	UIDПроцесса = Неопределено;
	Если UIDСценария = Неопределено Тогда
		UIDПроцесса = Параметры.ДанныеФайлаYaml["ДанныеТеста"]["UIDПроцесса"];
		ДанныеВыгружаемогоОбъекта = ПроцессПоUID[UIDПроцесса];
		ЭтоСценарий = Ложь;
	Иначе	
		ДанныеВыгружаемогоОбъекта = СценарийПоUID[UIDСценария];
	КонецЕсли;
	
	ИмяФайлаJSON = ФайлСценария.Путь + ФайлСценария.ИмяБезРасширения + ".json";
	ЗаписьJson.ОткрытьФайл(ИмяФайлаJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СценарийНаименование");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ДанныеФайлаYaml["ДанныеТеста"]["СценарийНаименование"]);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("НастройкиСценарияНаименование");
	ЗаписьJSON.ЗаписатьЗначение(УбратьЗапрещенныеСимволыИзИмениФайла(Параметры.ИмяНастройкиСценария));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяСборки");
	ЗаписьJSON.ЗаписатьЗначение(УбратьЗапрещенныеСимволыИзИмениФайла(Параметры.ИмяНастройкиСценария));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяТеста");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ИмяНастройкиСценария);
	
	Если ЭтоСценарий Тогда
		КодНастройкиСценария = Параметры.КодНастройкиСценария;
		ИмяНастройкиСценария = Параметры.ИмяНастройкиСценария;
		КодСценария = ДанныеВыгружаемогоОбъекта["ДанныеСценария"]["Код"];
		ИмяСценария = ДанныеВыгружаемогоОбъекта["ДанныеСценария"]["Имя"];
	Иначе
		КодНастройкиПроцесса = Параметры.КодНастройкиСценария;
		ИмяНастройкиПроцесса = Параметры.ИмяНастройкиСценария;
		КодПроцесса = ДанныеВыгружаемогоОбъекта["ДанныеПроцесса"]["ПолныйКод"];
		ИмяПроцесса = ДанныеВыгружаемогоОбъекта["ДанныеПроцесса"]["Имя"];
	КонецЕсли;
		
	ЗаписьJSON.ЗаписатьИмяСвойства("КодНастройкиСценария");
	ЗаписьJSON.ЗаписатьЗначение(КодНастройкиСценария);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяНастройкиСценария");
	ЗаписьJSON.ЗаписатьЗначение(ИмяНастройкиСценария);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КодНастройкиПроцесса");
	ЗаписьJSON.ЗаписатьЗначение(КодНастройкиПроцесса);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяНастройкиПроцесса");
	ЗаписьJSON.ЗаписатьЗначение(ИмяНастройкиПроцесса);

	ЗаписьJSON.ЗаписатьИмяСвойства("КодСценария");
	ЗаписьJSON.ЗаписатьЗначение(КодСценария);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяСценария");
	ЗаписьJSON.ЗаписатьЗначение(ИмяСценария);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КодПроцесса");
	ЗаписьJSON.ЗаписатьЗначение(КодПроцесса);

	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяПроцесса");
	ЗаписьJSON.ЗаписатьЗначение(ИмяПроцесса);
		
	ЗаписьJSON.ЗаписатьИмяСвойства("ЭтоСценарий");
	ЗаписьJSON.ЗаписатьЗначение(ЭтоСценарий);

	ПутьКФиче = ИмяФайлаСценария;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогФич");
	ЗаписьJSON.ЗаписатьЗначение(ПутьКФиче);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогПроекта");
	ЗаписьJSON.ЗаписатьЗначение(КаталогПроекта);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогиБиблиотек");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогФреймворкаТестирования + "features\Libraries");
	Если ЗначениеЗаполнено(Объект.КаталогиБиблиотек) Тогда
		МассивКаталогов = СтрРазделить(Объект.КаталогиБиблиотек,"|");
		Для Каждого КаталогБиблиотеки Из МассивКаталогов Цикл
			ЗаписьJSON.ЗаписатьЗначение(КаталогБиблиотеки);
		КонецЦикла;	
	КонецЕсли;	 
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("БазаID");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ИдентификаторБазы);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрофильПользователяНастройкаТеста");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"]);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПрофильПользователяСценарий");
	Если ЭтоСценарий Тогда
		ЗаписьJSON.ЗаписатьЗначение(ДанныеВыгружаемогоОбъекта["ДанныеСценария"]["ПрофильПользователя"]);
	Иначе	
		ЗаписьJSON.ЗаписатьЗначение("");
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Ответственный");
	ЗаписьJSON.ЗаписатьЗначение(Параметры.Ответственный);
	
	КоличествоСценариевВОдномФайле = 1;
	Если Параметры.Свойство("КоличествоСценариевВОдномФайле") Тогда
		КоличествоСценариевВОдномФайле = Параметры.КоличествоСценариевВОдномФайле;
	КонецЕсли;	
	ЗаписьJSON.ЗаписатьИмяСвойства("КоличествоСценариевВОдномФайле");
	ЗаписьJSON.ЗаписатьЗначение(КоличествоСценариевВОдномФайле);
	ЗаписьJSON.ЗаписатьИмяСвойства("НесколькоСценариевВОдномФайле");
	ЗаписьJSON.ЗаписатьЗначение(КоличествоСценариевВОдномФайле > 1);
	
	ОпределеноСвойствоОстановкаПриВозникновенииОшибки = Ложь;
	Если КоличествоСценариевВОдномФайле > 1 Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ОстановкаПриВозникновенииОшибки");
		ЗаписьJSON.ЗаписатьЗначение(Истина);
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗаписыватьСценарииВJunitЧерезTestSuite");
		ЗаписьJSON.ЗаписатьЗначение(Истина);
		ОпределеноСвойствоОстановкаПриВозникновенииОшибки = Истина;
	КонецЕсли;	
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ЗапускатьКлиентТестированияСМаксимизированнымОкном");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыполнитьСценарии");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	Если Объект.РежимОтладки Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗавершитьРаботуСистемы");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗакрытьTestClientПослеЗапускаСценариев");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
		Если НЕ ОпределеноСвойствоОстановкаПриВозникновенииОшибки Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("ОстановкаПриВозникновенииОшибки");
			ЗаписьJSON.ЗаписатьЗначение("Истина");
		КонецЕсли;	
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗавершитьРаботуСистемы");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
		ЗаписьJSON.ЗаписатьИмяСвойства("ЗакрытьTestClientПослеЗапускаСценариев");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
		Если НЕ ОпределеноСвойствоОстановкаПриВозникновенииОшибки Тогда
			ЗаписьJSON.ЗаписатьИмяСвойства("ОстановкаПриВозникновенииОшибки");
			ЗаписьJSON.ЗаписатьЗначение("Ложь");
		КонецЕсли;	
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПоказыватьНомерСтрокиДереваПриВозникновенииОшибки");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПриравниватьPendingКFailed");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СобиратьДанныеОСостоянииАктивнойФормыПриОшибке");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СобиратьДанныеОСостоянииВсехФормПриОшибке");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	Если Объект.ДелатьЛогВыполненияСценариевВЖР Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогВыполненияСценариевВЖР");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогВыполненияСценариевВЖР");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеАллюр Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеАллюр");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеАллюр");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеjUnit Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеjUnit");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеjUnit");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеCucumber Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеCucumberJson");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеCucumberJson");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	Если Объект.ДелатьОтчетВФорматеСППР Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеСППР");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе	
		ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьОтчетВФорматеСППР");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;	 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогВыполненияСценариевВТекстовыйФайл");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыводитьВЛогВыполнениеШагов");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьЛогОшибокВТекстовыйФайл");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	Если Объект.БезопасноеВыполнениеШагов Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("БезопасноеВыполнениеШагов");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе
		ЗаписьJSON.ЗаписатьИмяСвойства("БезопасноеВыполнениеШагов");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиAllureБазовый");
	Если ЗначениеЗаполнено(Объект.КаталогOutputAllureБазовый) Тогда
		КаталогOutputAllure = ДополнитьРазделительПути(Объект.КаталогOutputAllureБазовый) 
							+ Параметры.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
		ЗаписьJSON.ЗаписатьЗначение(КаталогOutputAllure);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/allurereport");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиjUnit");
	Если ЗначениеЗаполнено(Объект.КаталогOutputjUnit) Тогда
		КаталогOutputjUnit = ДополнитьРазделительПути(Объект.КаталогOutputjUnit) 
							+ Параметры.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
		ЗаписьJSON.ЗаписатьЗначение(КаталогOutputjUnit);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/junitreport");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиСППР");
	Если ЗначениеЗаполнено(Объект.КаталогОтчетаСППР) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогОтчетаСППР);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/spprreport");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиCucumberJson");
	Если ЗначениеЗаполнено(Объект.КаталогOutputCucumber) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогOutputCucumber);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./report/cucumber");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("СоздаватьПодкаталогВКаталогеAllureДляЭтойСборки");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДелатьСкриншотПриВозникновенииОшибки");
	Если Объект.ДелатьСкриншоты Тогда
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КомандаСделатьСкриншот) Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("КомандаСделатьСкриншот");
		ЗаписьJSON.ЗаписатьЗначение(Объект.КомандаСделатьСкриншот);
	КонецЕсли; 
	
	ИспользоватьКомпонентуVanessaExt = ИспользоватьКомпоненту1cWinCtrlДляСнятияСкриншотов ИЛИ ИспользоватьКомпоненту1cWinCtrl;
		
	ЗаписьJSON.ЗаписатьИмяСвойства("ИспользоватьКомпонентуVanessaExt");
	ЗаписьJSON.ЗаписатьЗначение(ИспользоватьКомпонентуVanessaExt);
			
	Если ИспользоватьКомпоненту1cWinCtrlДляСнятияСкриншотов Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("СниматьСкриншотКаждогоОкна1С");
		ЗаписьJSON.ЗаписатьЗначение("Истина");

		ЗаписьJSON.ЗаписатьИмяСвойства("ИспользоватьВнешнююКомпонентуДляСкриншотов");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	
		ЗаписьJSON.ЗаписатьИмяСвойства("СпособСнятияСкриншотовВнешнейКомпонентой");
		ЗаписьJSON.ЗаписатьЗначение("2");
		
		ЗаписьJSON.ЗаписатьИмяСвойства("СниматьСкриншотКаждогоОкна1С");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
		
	Иначе
		ЗаписьJSON.ЗаписатьИмяСвойства("СниматьСкриншотКаждогоОкна1С");
		ЗаписьJSON.ЗаписатьЗначение("Ложь");
	КонецЕсли;

	Если СобиратьДанныеОПроцессахОС Тогда
		ЗаписьJSON.ЗаписатьИмяСвойства("СобиратьДанныеОПроцессахОС");
		ЗаписьJSON.ЗаписатьЗначение("Истина");
	КонецЕсли;
	
	
	#Если НЕ ВебКлиент Тогда
	ЗаписьJSON.ЗаписатьИмяСвойства("КоличествоСекундПоискаОкна");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.КоличествоСекундПоискаОкна));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КоличествоПопытокВыполненияДействия");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.КоличествоПопытокВыполненияДействия));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ТаймаутЗапуска1С");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.ТаймаутЗапуска1С));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПаузаПриОткрытииОкна");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.ПаузаПриОткрытииОкна));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ТаймаутДляАсинхронныхШагов");
	ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(Объект.ТаймаутДляАсинхронныхШагов));
	#КонецЕсли
	
	ЗаписьJSON.ЗаписатьИмяСвойства("КаталогВыгрузкиСкриншотов");
	Если ЗначениеЗаполнено(Объект.КаталогOutputСкриншоты) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.КаталогOutputСкриншоты);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./ScreenShots");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяФайлаЛогВыполненияСценариев");
	Если ЗначениеЗаполнено(Объект.ИмяФайлаЛогВыполненияСценариев) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.ИмяФайлаЛогВыполненияСценариев);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./Лог.txt");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяКаталогаЛогОшибок");
	Если ЗначениеЗаполнено(Объект.ИмяКаталогаОшибок) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.ИмяКаталогаОшибок);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыгружатьСтатусВыполненияСценариевВФайл");
	ЗаписьJSON.ЗаписатьЗначение("Истина");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев");
	Если ЗначениеЗаполнено(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев) Тогда
		ЗаписьJSON.ЗаписатьЗначение(Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев);
	Иначе
		ЗаписьJSON.ЗаписатьЗначение("./BuildStatus.log");
	КонецЕсли; 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ВыполнятьШагиАссинхронно");
	ЗаписьJSON.ЗаписатьЗначение("Ложь");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПутьКИнфобазе");
	ЗаписьJSON.ЗаписатьЗначение(ПутьКИнфобазе());
	
	Если ДанныеЭталонныхБД.Количество() > 0 Тогда
		Для Каждого ЭталоннаяБД Из ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"] Цикл
			Если ЭталоннаяБД["ИдентификаторБазы"] = Параметры.ИдентификаторБазы Тогда
			Для Каждого ПрофильПользователя Из ЭталоннаяБД["ПрофилиПользователей"] Цикл
				Если ПрофильПользователя["ПрофильПользователя"] = "Администратор" Тогда
					ЗаписьJSON.ЗаписатьИмяСвойства("ЛогинПолныеПрава");
					ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя["Логин"]);
					ЗаписьJSON.ЗаписатьИмяСвойства("ПарольПолныеПрава");
					ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя["Пароль"]);
					Прервать;
				КонецЕсли;	 
				КонецЦикла;	
				Прервать;
			КонецЕсли;	 
		КонецЦикла;
	КонецЕсли;
	
	//КлиентыТестирования
	ЗаписьJSON.ЗаписатьИмяСвойства("КлиентыТестирования");
	КлиентыТестированияЗаданы = ?(ПустаяСтрока(Объект.ПутьКИнфобазе) И ПустаяСтрока(Объект.КаталогБазыДляЗапуска), Ложь, Истина); 
	
	Если ЭтоСценарий И КлиентыТестированияЗаданы Тогда
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		ИмяПрофиляПользователя = "";
		Если ЭтоСценарий Тогда
			ИмяПрофиляПользователя = ДанныеВыгружаемогоОбъекта["ДанныеСценария"]["ПрофильПользователя"];
			Если ЗначениеЗаполнено(Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"]) Тогда
				//если в настройке указан профиль пользователя то берём его
				ИмяПрофиляПользователя = Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"];
			КонецЕсли;	 
		КонецЕсли;	 
		
		ДанныеПрофилейПользователяИзТекстаСценария = Новый Массив;
		Если ЭтоСценарий И ПустаяСтрока(ИмяПрофиляПользователя) Тогда
			ДанныеПрофилейПользователяИзТекстаСценария = ДанныеПрофилейПользователяИзТекстаСценария(ДанныеВыгружаемогоОбъекта, СценарийПоUID);
		КонецЕсли;	 
		
		Если ЗначениеЗаполнено(ИмяПрофиляПользователя) ИЛИ ДанныеПрофилейПользователяИзТекстаСценария.Количество() = 0 Тогда
		
			ЗаписатьПрофильПользователяВJson(ЗаписьJSON, ИмяПрофиляПользователя, Параметры, ДанныеЭталонныхБД);
			
		ИначеЕсли ДанныеПрофилейПользователяИзТекстаСценария.Количество() Тогда	
			//Добавляются профили из подсценариев, т.к. это может быть сценарий, сконвертированный из процесса.
			Для Каждого ТекПрофиль Из ДанныеПрофилейПользователяИзТекстаСценария Цикл
				ЗаписатьПрофильПользователяВJson(ЗаписьJSON, ТекПрофиль, Параметры, ДанныеЭталонныхБД);
			КонецЦикла;	 
		КонецЕсли;	 
		
		ЗаписьJSON.ЗаписатьКонецМассива();
	ИначеЕсли КлиентыТестированияЗаданы Тогда
		ПрофилиПользователей = Новый Соответствие;
		ШагиПроцесса = ДанныеВыгружаемогоОбъекта["ШагиПроцесса"];
		Для Каждого ШагПроцесса Из ШагиПроцесса Цикл
			ИсполнительШага = ШагПроцесса["ИсполнительНаименование"];
			Если ПрофилиПользователей[ИсполнительШага] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Профиль = Новый Структура;
			Профиль.Вставить("Имя",ИсполнительШага);
			Профиль.Вставить("ПутьКИнфобазе",ПутьКИнфобазе());
			Профиль.Вставить("ТипКлиента",ТипКлиента());
			Профиль.Вставить("ИмяКомпьютера","localhost");
			Профиль.Вставить("ПортЗапускаТестКлиента",ПортЗапускаТестКлиента());
			
			Логин = Неопределено;
			Пароль = Неопределено;
			Для Каждого ЭталоннаяБД Из ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"] Цикл
				Если ЭталоннаяБД["ИдентификаторБазы"] = Параметры.ИдентификаторБазы Тогда
					Для Каждого ПрофильПользователя Из ЭталоннаяБД["ПрофилиПользователей"] Цикл
						Если ПрофильПользователя["ПрофильПользователя"] = ИсполнительШага Тогда
							Логин  = ПрофильПользователя["Логин"];
							Пароль = ПрофильПользователя["Пароль"];
						КонецЕсли;	 
					КонецЦикла;	
					
				КонецЕсли;	 
			КонецЦикла;
			ПараметрыЗапуска = "";
            Если Логин <> Неопределено Тогда
                ПараметрыЗапуска = ПараметрыЗапуска + "/N""" + Логин + """ ";
            КонецЕсли;
            Если Пароль <> Неопределено Тогда
                ПараметрыЗапуска = ПараметрыЗапуска + "/P""" + Пароль + """ ";
            КонецЕсли;
            ПараметрыЗапуска = ПараметрыЗапуска + Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПараметрыЗапуска"];

			Если Найти(НРег(ПараметрыЗапуска),НРег("AllowExecuteScheduledJobs")) = 0 Тогда
				ПараметрыЗапуска = ПараметрыЗапуска + " /AllowExecuteScheduledJobs -Off ";
			КонецЕсли;	 	  
			
			Если ЗначениеЗаполнено(Объект.ДопПараметрыКлиентаТестирования) Тогда
				ПараметрыЗапуска = ПараметрыЗапуска + " " + Объект.ДопПараметрыКлиентаТестирования;
			КонецЕсли;	 
			
			ПараметрыЗапуска = ПараметрыЗапуска + " /DisableStartupMessages ";
			
			
			Профиль.Вставить("ДопПараметры",ПараметрыЗапуска);
			
			
			ПрофилиПользователей.Вставить(ИсполнительШага,Профиль);
		КонецЦикла;	 
		
		ЗаписьJSON.ЗаписатьНачалоМассива();
		
		Для Каждого Элем Из ПрофилиПользователей Цикл
			ПрофильПользователя = Элем.Значение;
			
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			
			ЗаписьJSON.ЗаписатьИмяСвойства("Имя");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.Имя);
			ЗаписьJSON.ЗаписатьИмяСвойства("ПутьКИнфобазе");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ПутьКИнфобазе);
			ЗаписьJSON.ЗаписатьИмяСвойства("ТипКлиента");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ТипКлиента);
			ЗаписьJSON.ЗаписатьИмяСвойства("ИмяКомпьютера");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ИмяКомпьютера);
			ЗаписьJSON.ЗаписатьИмяСвойства("ПортЗапускаТестКлиента");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ПортЗапускаТестКлиента);
			ЗаписьJSON.ЗаписатьИмяСвойства("ДопПараметры");
			ЗаписьJSON.ЗаписатьЗначение(ПрофильПользователя.ДопПараметры);
			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			
		КонецЦикла;	 
		
		ЗаписьJSON.ЗаписатьКонецМассива();
	Иначе
		ЗаписьJSON.ЗаписатьНачалоМассива();
		ЗаписьJSON.ЗаписатьКонецМассива();
	КонецЕсли;	 
	
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПрофильПользователяВJson(ЗаписьJSON, ИмяПрофиляПользователя, Параметры, ДанныеЭталонныхБД)
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Имя");
	ЗаписьJSON.ЗаписатьЗначение(ИмяПрофиляПользователя);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПутьКИнфобазе");
	
	ПутьКИнфобазе = ПутьКИнфобазе();
	
	ЗаписьJSON.ЗаписатьЗначение(ПутьКИнфобазе);
	
	Логин = Неопределено;
	Пароль = Неопределено;
	ЗаписьJSON.ЗаписатьИмяСвойства("ДопПараметры");
	Для Каждого ЭталоннаяБД Из ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"] Цикл
		Если ЭталоннаяБД["ИдентификаторБазы"] = Параметры.ИдентификаторБазы Тогда
			Для Каждого ПрофильПользователя Из ЭталоннаяБД["ПрофилиПользователей"] Цикл
				Если ПрофильПользователя["ПрофильПользователя"] = ИмяПрофиляПользователя Тогда
					Логин  = ПрофильПользователя["Логин"];
					Пароль = ПрофильПользователя["Пароль"];
				КонецЕсли;	 
			КонецЦикла;	
			
		КонецЕсли;	 
	КонецЦикла;	
	ПараметрыЗапуска = "";
	Если Логин <> Неопределено Тогда
	    ПараметрыЗапуска = ПараметрыЗапуска + "/N""" + Логин + """ ";
	КонецЕсли;
	Если Пароль <> Неопределено Тогда
	    ПараметрыЗапуска = ПараметрыЗапуска + "/P""" + Пароль + """ ";
	КонецЕсли;
	ПараметрыЗапуска = ПараметрыЗапуска + Параметры.ДанныеФайлаYaml["ДанныеТеста"]["ПараметрыЗапуска"];
	
	Если Найти(НРег(ПараметрыЗапуска),НРег("AllowExecuteScheduledJobs")) = 0 Тогда
		ПараметрыЗапуска = ПараметрыЗапуска + " /AllowExecuteScheduledJobs -Off ";
	КонецЕсли;	 	  
	
	Если ЗначениеЗаполнено(Объект.ДопПараметрыКлиентаТестирования) Тогда
		ПараметрыЗапуска = ПараметрыЗапуска + " " + Объект.ДопПараметрыКлиентаТестирования;
	КонецЕсли;	 
	
	ПараметрыЗапуска = ПараметрыЗапуска + " /DisableStartupMessages ";
	
	ЗаписьJSON.ЗаписатьЗначение(ПараметрыЗапуска);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ТипКлиента");
	ЗаписьJSON.ЗаписатьЗначение(ТипКлиента());
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ИмяКомпьютера");
	ЗаписьJSON.ЗаписатьЗначение("localhost");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ПортЗапускаТестКлиента");
	ЗаписьJSON.ЗаписатьЗначение(ПортЗапускаТестКлиента());
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
КонецПроцедуры 

&НаКлиенте
Функция ДанныеПрофилейПользователяИзТекстаСценария(ДанныеВыгружаемогоОбъекта, СценарийПоUID)
	Результат = Новый Массив;
	
	РазныеПрофили = Новый Соответствие;
	
	ВложенныеСценарии = ДанныеВыгружаемогоОбъекта["ВложенныеСценарии"];
	Для Каждого ТекВложенныйСценарий Из ВложенныеСценарии Цикл
		UIDВложенныйСценарий = ТекВложенныйСценарий["UIDВложенныйСценарий"];
		ДанныеВложенногоСценария = СценарийПоUID[UIDВложенныйСценарий];
		РазныеПрофили.Вставить(ДанныеВложенногоСценария["ДанныеСценария"]["ПрофильПользователя"], Истина);
	КонецЦикла;	 
	
	ТекстСценария = ДанныеВыгружаемогоОбъекта["ТекстСценария"];
	МассивСтрок = СтрРазделить(ТекстСценария, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = СокрЛ(МассивСтрок[Сч]);
		
		СтрокаПоиска = НРег("Исполнитель =");
		Поз = Найти(НРег(Стр), СтрокаПоиска);
		Если Поз > 0 Тогда
			Стр = СокрЛП(Сред(Стр, Поз + СтрДлина(СтрокаПоиска)));
			РазныеПрофили.Вставить(Стр, Истина);
		КонецЕсли;	 
		
		СтрокаПоиска = НРег("Executor =");
		Поз = Найти(НРег(Стр), СтрокаПоиска);
		Если Поз > 0 Тогда
			Стр = СокрЛП(Сред(Стр, Поз + СтрДлина(СтрокаПоиска)));
			РазныеПрофили.Вставить(Стр, Истина);
		КонецЕсли;	 
	КонецЦикла;	
	
	Для Каждого Элем Из РазныеПрофили Цикл
		Результат.Добавить(Элем.Ключ);
	КонецЦикла;	 
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Функция ПортЗапускаТестКлиента()
	Если ПустаяСтрока(Объект.ПортЗапускаТестКлиента) Тогда
		Возврат "48000";
	Иначе 
		Возврат Объект.ПортЗапускаТестКлиента;
	КонецЕсли;
КонецФункции	 

&НаКлиенте
Функция ТипКлиента()
	Если ПустаяСтрока(Объект.ТипКлиента) Тогда
		Возврат "Тонкий";
	Иначе 
		Возврат Объект.ТипКлиента;
	КонецЕсли;
КонецФункции	 

&НаКлиенте
Функция ПутьКИнфобазе()
	Если ПустаяСтрока(Объект.ПутьКИнфобазе) Тогда 
		ПутьКИнфобазе = Объект.КаталогБазыДляЗапуска;
		Если Найти(НРег(ПутьКИнфобазе),"srvr=") = 0 и Найти(НРег(ПутьКИнфобазе),"file=") = 0 Тогда
			ПутьКИнфобазе = "File=""" + Объект.КаталогБазыДляЗапуска + """;";
		КонецЕсли;
	Иначе 
		ПутьКИнфобазе = Объект.ПутьКИнфобазе;
	КонецЕсли;
	
	Возврат ПутьКИнфобазе; 
КонецФункции	 

&НаКлиенте
Процедура ДобавитьКлючЗначениеВJson(ЗаписьJSON,Ключ,Значение)
	ЗаписьJSON.ЗаписатьИмяСвойства(Ключ);
	ЗаписьJSON.ЗаписатьЗначение(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлДанныеСтрок(Элем,ИмяФайлаДанныеСтрок)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJson.ОткрытьФайл(ИмяФайлаДанныеСтрок);
	
	ЗаписьJson.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("ДанныеСценария");
	ЗаписьJson.ЗаписатьНачалоМассива();
	Для Каждого ДанныеСтроки Из Элем.ДанныеНомеровСтрок Цикл
		ЗаписьJson.ЗаписатьНачалоОбъекта();
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"Имя",ДанныеСтроки.ИмяСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"Код",ДанныеСтроки.КодСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"Основной",ДанныеСтроки.Основной);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"ТекстШага",ДанныеСтроки.ТекстШага);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"СтрокаЛин",ДанныеСтроки.НомерСтрокиЛинейногоСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"СтрокаОриг",ДанныеСтроки.НомерСтрокиТекстаСценария);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"УровеньВложенности",ДанныеСтроки.УровеньВложенности);
		ДобавитьКлючЗначениеВJson(ЗаписьJSON,"UIDСценария",ДанныеСтроки.UIDСценария);
		ЗаписьJson.ЗаписатьКонецОбъекта();
	КонецЦикла;	
	ЗаписьJson.ЗаписатьКонецМассива();
	
	ЗаписьJson.ЗаписатьКонецОбъекта();
	ЗаписьJson.Закрыть();
КонецПроцедуры

&НаКлиенте
Функция УбратьЗапрещенныеСимволыИзИмениФайла(Знач Стр) 
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,"+","");
	
	Стр = СтрЗаменить(Стр,".","");
	
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура СгенерироватьУникальноеИмяФайлаСценария(ОсновноеИмяФайла,Расширение)
	ИмяФайла = ОсновноеИмяФайла + Расширение;
	Файл = Новый Файл(ИмяФайла);
	
	Счетчик = 0;
	Пока Файл.Существует() Цикл
		Счетчик       = Счетчик + 1;
		СчетчикСтрока = СтрЗаменить(Счетчик,Символы.НПП,"");
		
		ОсновноеИмяФайла = ОсновноеИмяФайла + "_" + СчетчикСтрока;
		
		ИмяФайла = ОсновноеИмяФайла + Расширение;
		Файл = Новый Файл(ИмяФайла);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СборкаСценариевИПроцессовНаКлиенте(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев, ДанныеЭталонныхБД)
	СборкаСценариевИПроцессовСервер(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев, ДанныеЭталонныхБД);
	
	СценарийПоUID = Новый Соответствие;
	Для Каждого Элем Из ДанныеКаталогаСценариев Цикл
		Если Элем.ДанныеФайлаYaml["ТипФайла"] = "Сценарий" Тогда
			СценарийПоUID.Вставить(Элем.ДанныеФайлаYaml["ДанныеСценария"]["UID"],Элем.ДанныеФайлаYaml);
		КонецЕсли;	 
	КонецЦикла;	
	ПроцессПоUID = Новый Соответствие;
	Для Каждого Элем Из ДанныеКаталогаПроцессов Цикл
		Если Элем.ДанныеФайлаYaml["ТипФайла"] = "Процесс" Тогда
			ПроцессПоUID.Вставить(Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["UID"],Элем.ДанныеФайлаYaml);
		КонецЕсли;	 
	КонецЦикла;	
	
	Для Каждого Элем Из ДанныеКаталогаПроцессов Цикл
		ДанныеКаталогаСценариев.Добавить(Элем);
	КонецЦикла;	 
	
	Объект.КаталогДляЛинейныхСценариев = ДополнитьРазделительПути(Объект.КаталогДляЛинейныхСценариев);
	Для Каждого Элем Из ДанныеКаталогаСценариев Цикл
		Если Элем.Свойство("ЛинейныйСценарий") Тогда
			
			Попытка
			
				КаталогЭталоннойБазы = Объект.КаталогДляЛинейныхСценариев 
				   + УбратьЗапрещенныеСимволыИзИмениФайла(Элем.ИдентификаторБазы);
				   
				КаталогЭталоннойБазы = ДополнитьРазделительПути(КаталогЭталоннойБазы);
				
				КаталогНастройкиЗапуска = ДополнитьРазделительПути(КаталогЭталоннойБазы + Элем.КодНастройкиСценария);
				ФайлКаталогНастройкиЗапуска = Новый Файл(КаталогНастройкиЗапуска);
				Если Не ФайлКаталогНастройкиЗапуска.Существует() Тогда
					СоздатьКаталог(КаталогНастройкиЗапуска);
				КонецЕсли;	 
				
				ФайлКаталогЭталоннойБазы = Новый Файл(КаталогЭталоннойБазы);
				Если Не ФайлКаталогЭталоннойБазы.Существует() Тогда
					СоздатьКаталог(КаталогЭталоннойБазы);
				КонецЕсли;	 
				
				ОсновноеИмяФайла = КаталогЭталоннойБазы + УбратьЗапрещенныеСимволыИзИмениФайла(Элем.КодНастройкиСценария); 
				
				СгенерироватьУникальноеИмяФайлаСценария(ОсновноеИмяФайла,".feature");
				
				ИмяФайлаСценария    = ОсновноеИмяФайла + ".feature";
				ИмяФайлаДанныеСтрок = ОсновноеИмяФайла + ".str";
				
				ЗТ = Новый ЗаписьТекста(ИмяФайлаСценария,"UTF-8",,Ложь); 
				ЗТ.ЗаписатьСтроку(Элем.ЛинейныйСценарий); 
				ЗТ.Закрыть();
				
				КаталогФайловНастройкиЗапуска = ДополнитьРазделительПути(КаталогНастройкиЗапуска + "Файлы");
				ФайлКаталогФайловНастройкиЗапуска = Новый Файл(КаталогФайловНастройкиЗапуска);
				Если Не ФайлКаталогФайловНастройкиЗапуска.Существует() Тогда
					СоздатьКаталог(КаталогФайловНастройкиЗапуска);
				КонецЕсли;	 
				
				ИмяФайлаНастройки = Элем.ИмяФайла;
				ФайлИмяФайлаНастройки = Новый Файл(ИмяФайлаНастройки);
				КаталогНастройки = ДополнитьРазделительПути(ФайлИмяФайлаНастройки.Путь);
				ФайлКаталогНастройки = Новый Файл(КаталогНастройки);
				
				Если Элем.ДанныеФайлаYaml["ТипФайла"] = "НастройкаТеста" Тогда
					КаталогСценария = ДополнитьРазделительПути(ФайлКаталогНастройки.Путь);
					КаталогФайловСценария = КаталогСценария + "files";
					UIDСценария    = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDСценария"];
					ДанныеСценария = СценарийПоUID[UIDСценария];
					Если ДанныеСценария = Неопределено Тогда
						ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось найти данные сценария по UID: %1. Тест %2'"),
							UIDСценария,Элем.ИмяНастройкиСценария);
					КонецЕсли;	 
					
					ВложенныеСценарии = ДанныеСценария["ВложенныеСценарии"]; 
					ОбработанныеСценарии = Новый Массив;
					ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,
						ВложенныеСценарии,СценарийПоUID,Элем,ОбработанныеСценарии,ДанныеСценария);
					
					СкопироватьФайлыКаталога(КаталогФайловСценария,КаталогФайловНастройкиЗапуска);
					
					Если Элем.Свойство("ДанныеСценариевКоторыеДобавляютсяКОсновному") Тогда
						Для Каждого ДанныеДополнительногоСценария Из Элем.ДанныеСценариевКоторыеДобавляютсяКОсновному Цикл
							ДанныеСценария = СценарийПоUID[ДанныеДополнительногоСценария.UIDСценария];
							Если ДанныеСценария = Неопределено Тогда
								ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось найти данные сценария по UID: %1. Тест %2'"),
									ДанныеДополнительногоСценария.UIDСценария,Элем.ИмяНастройкиСценария);
							КонецЕсли;	 
							
							ВложенныеСценарии = ДанныеСценария["ВложенныеСценарии"]; 
							ОбработанныеСценарии = Новый Массив;
							ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,
								ВложенныеСценарии,СценарийПоUID,Элем,ОбработанныеСценарии,ДанныеСценария);
								
							ИмяФайлаНастройки = ДанныеДополнительногоСценария.ИмяФайла;
							ТекФайлИмяФайлаНастройки = Новый Файл(ИмяФайлаНастройки);
							ТекКаталогНастройки = ДополнитьРазделительПути(ТекФайлИмяФайлаНастройки.Путь);
							ТекФайлКаталогНастройки = Новый Файл(ТекКаталогНастройки);
							ТекКаталогСценария = ДополнитьРазделительПути(ТекФайлКаталогНастройки.Путь);
							ТекКаталогФайловСценария = ТекКаталогСценария + "files";
							
							Попытка
								СкопироватьФайлыКаталога(ТекКаталогФайловСценария,КаталогФайловНастройкиЗапуска, Истина);
							Исключение
								ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка при компиляции нескольких сценариев в один файл (опция сценария: Необратимо меняет данные).
								|Не получилось скопировать файлы сценария UID: <%1>. Код <%2>. Имя <%3>.
								|Возможно используется неуникальное имя файла.'"),
									ДанныеДополнительногоСценария.UIDСценария,
									ДанныеСценария["ДанныеСценария"]["Код"],
									ДанныеСценария["ДанныеСценария"]["Имя"]) + Символы.ПС + ОписаниеОшибки();
							КонецПопытки;
						КонецЦикла;	
					КонецЕсли;	
					
				ИначеЕсли Элем.ДанныеФайлаYaml["ТипФайла"] = "НастройкаПроцесса" Тогда
					КаталогПроцесса = ДополнитьРазделительПути(ФайлКаталогНастройки.Путь);
					КаталогФайловПроцесса = КаталогПроцесса + "files";
					UIDПроцесса = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDПроцесса"];
					ДанныеПроцесса = ПроцессПоUID[UIDПроцесса];
					Если ДанныеПроцесса = Неопределено Тогда
						ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось найти данные сценария по UID: %1. Тест <%2>.'"),
							UIDСценария,Элем.ИмяНастройкиСценария);
					КонецЕсли;	 
					
					СкопироватьФайлыКаталога(КаталогФайловПроцесса,КаталогФайловНастройкиЗапуска);
					
					ОбработанныеСценарии = Новый Массив;
					ШагиПроцесса = ДанныеПроцесса["ШагиПроцесса"];
					Для Каждого ШагПроцесса Из ШагиПроцесса Цикл
						Если ПустаяСтрока(ШагПроцесса["СценарийНаименование"]) Тогда
							Продолжить;
						КонецЕсли;	 
						
						UIDСценария    = ШагПроцесса["СценарийUID"];
						ДанныеСценария = СценарийПоUID[UIDСценария];
						Если ДанныеСценария = Неопределено Тогда
							ВызватьИсключение СтрШаблон(НСтр("ru = 'Не получилось найти данные сценария по UID: %1. Тест <%2>.'"),
							UIDСценария,Элем.ИмяНастройкиСценария);
						КонецЕсли;	 
						
						ВложенныеСценарии = ДанныеСценария["ВложенныеСценарии"]; 
						ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,
						ВложенныеСценарии,СценарийПоUID,Элем,ОбработанныеСценарии,ДанныеСценария);
						
						ФайлСценария = Новый Файл(ДанныеСценария["ПолноеИмяФайлаYaml"]);
						КаталогСценария = ДополнитьРазделительПути(ФайлСценария.Путь);
						КаталогФайловСценария = КаталогСценария + "files";
						СкопироватьФайлыКаталога(КаталогФайловСценария,КаталогФайловНастройкиЗапуска);
					КонецЦикла;	 
					
					СкопироватьФайлыКаталога(КаталогФайловПроцесса,КаталогФайловНастройкиЗапуска);
					
				КонецЕсли;	 
				
				Если СоздаватьJsonФайл Тогда
					СоздатьJSONФайлНастроекЗапуска(Элем,ИмяФайлаСценария,СценарийПоUID,ПроцессПоUID,ДанныеЭталонныхБД,КаталогНастройкиЗапуска);
				КонецЕсли;
				ЗаписатьФайлДанныеСтрок(Элем,ИмяФайлаДанныеСтрок);
				
			Исключение
				
				НоваяСтрока = Объект.РезультатКомпиляции.Добавить();
				
				Если Элем.ДанныеФайлаYaml["ТипФайла"] = "НастройкаТеста" Тогда
					НоваяСтрока.КодНастройкиСценария = Элем.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
					UIDСценария    = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDСценария"];
					ДанныеСценария = СценарийПоUID[UIDСценария];
					Если ЗначениеЗаполнено(ДанныеСценария) Тогда
						НоваяСтрока.КодСценария = ДанныеСценария["Код"];
						НоваяСтрока.UIDСценария = UIDСценария;
					КонецЕсли;
				ИначеЕсли Элем.ДанныеФайлаYaml["ТипФайла"] = "НастройкаПроцесса" Тогда
					НоваяСтрока.КодНастройкиПроцесса = Элем.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
					UIDПроцесса = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDПроцесса"];
					ДанныеПроцесса = ПроцессПоUID[UIDПроцесса];
					Если ЗначениеЗаполнено(ДанныеПроцесса) Тогда
						НоваяСтрока.КодПроцесса = ДанныеСценария["ПолныйКод"];
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока.УспешнаяСборка = Ложь;
				НоваяСтрока.ОписаниеОшибки =  ОписаниеОшибки();
				НоваяСтрока.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				НоваяОшибка = Объект.Ошибки.Добавить();
				НоваяОшибка.ОписаниеОшибки =  ОписаниеОшибки();
				НоваяОшибка.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			КонецПопытки;
			
			
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,ВложенныеСценарии,СценарийПоUID,ДанныеНастройкиСценария,ОбработанныеСценарии, ДанныеВерхнеуровнегоСценария)
	Если ТипЗнч(ВложенныеСценарии) = Тип("Массив") Тогда
		Для Каждого ВложенныйСценарий Из ВложенныеСценарии Цикл
			UIDВложенныйСценарий = ВложенныйСценарий["UIDВложенныйСценарий"];
			Если ОбработанныеСценарии.Найти(UIDВложенныйСценарий) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			ОбработанныеСценарии.Добавить(UIDВложенныйСценарий);
			
			СвойстваВложенногоСценария = СценарийПоUID[UIDВложенныйСценарий];
			Если СвойстваВложенногоСценария = Неопределено Тогда
				ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не получилось найти данные вложенного сценария по UID: <%1>, Имя: <%2>. Тест: <%3>
				|Родительский сценарий <%4>. Код <%5>'"),
				UIDВложенныйСценарий,ВложенныйСценарий["ИмяСценария"],ДанныеНастройкиСценария.ИмяНастройкиСценария,
				ДанныеВерхнеуровнегоСценария["ДанныеСценария"]["Имя"], ДанныеВерхнеуровнегоСценария["ДанныеСценария"]["Код"]);
			КонецЕсли;	 
			
			ВложенныеСценарииСценария = СвойстваВложенногоСценария["ВложенныеСценарии"]; 
			ВыгрузитьФайлыВложенныхСценариев(КаталогФайловНастройкиЗапуска,
			      ВложенныеСценарииСценария,СценарийПоUID,ДанныеНастройкиСценария,ОбработанныеСценарии,СвойстваВложенногоСценария);
			

			
			ИмяФайлаВложенногоСценария = СвойстваВложенногоСценария["ПолноеИмяФайлаYaml"];
			ФайлВложенногоСценария = Новый Файл(ИмяФайлаВложенногоСценария);
			КаталогВложенногоСценария = ФайлВложенногоСценария.Путь;
			КаталогФайловВложенногоСценария = ДополнитьРазделительПути(КаталогВложенногоСценария) + "files";
			
			СкопироватьФайлыКаталога(КаталогФайловВложенногоСценария,КаталогФайловНастройкиЗапуска);
		КонецЦикла;	 
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура СкопироватьФайлыКаталога(КаталогИсходник,КаталогПриемник, ВызыватьИсключениеЕслиФайлУжеЕсть = Ложь)
	Файлы = НайтиФайлы(КаталогИсходник,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		НовоеИмяФайла = КаталогПриемник + Файл.Имя;
		Если ВызыватьИсключениеЕслиФайлУжеЕсть Тогда
			ФайлНовоеИмяФайла = Новый Файл(НовоеИмяФайла);
			Если ФайлНовоеИмяФайла.Существует() Тогда
				ВызватьИсключение СтрШаблон((НСтр("ru = 'Файл <%1> уже существует.'")), НовоеИмяФайла);
			КонецЕсли;	
		КонецЕсли;	
		КопироватьФайл(Файл.ПолноеИмя,НовоеИмяФайла);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗакэшироватьСценарии(ДанныеСценариев, UID, ИмяСценария, ИспользуемыеСценарии)
	
	// Проверяем кэш
	Значение = ИспользуемыеСценарии.Получить(UID);
	
	Если ЗначениеЗаполнено(Значение) Тогда
		// Уже есть в кэше
		Возврат;
	КонецЕсли;
	
	ИспользуемыеСценарии.Вставить(UID, Истина);
	
	Сценарий = ДанныеСценариев.Найти(UID, "UID");
	
	Если Сценарий = Неопределено Тогда
		// Тест которого не существует. В логах сборщика будет детальная информация
		Возврат;
	КонецЕсли;
		
	Для Каждого ПодчиненныйСценарий Из Сценарий.ВложенныеСценарии Цикл
		ЗакэшироватьСценарии(ДанныеСценариев, ПодчиненныйСценарий.UID, ИмяСценария, ИспользуемыеСценарии);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗакешироватьСценарииПроцесса(СтрокаПроцесса, ИспользуемыеСценарии, ДанныеСценариев, ДанныеПроцессов)
	Для Каждого ШагПроцесса Из СтрокаПроцесса.ШагиПроцесса Цикл
		Если ШагПроцесса.ТипШага = 0 Тогда
			ЗакэшироватьСценарии(ДанныеСценариев, ШагПроцесса.СценарийUID, ШагПроцесса.Сценарий, ИспользуемыеСценарии);
		Иначе	
			ТекСтрокаПроцесса = ДанныеПроцессов.Найти(ШагПроцесса.ВложенныйПроцессUID, "UID");
			Если ТекСтрокаПроцесса = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден процесс с UID: %1'"), ШагПроцесса.ВложенныйПроцессUID);
			КонецЕсли;	
			ЗакешироватьСценарииПроцесса(ТекСтрокаПроцесса, ИспользуемыеСценарии, ДанныеСценариев, ДанныеПроцессов)
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура СборкаСценариевИПроцессовСервер(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев,ДанныеЭталонныхБД)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	ДанныеСценариев = Новый ТаблицаЗначений;
	ДанныеПроцессов = Новый ТаблицаЗначений;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Ошибки", Новый Массив);
	
	НастройкиСценариев = ОбъектСервер.ДанныеНастроекСценариевИзТекстовыхДанных(ДанныеКаталогаСценариев,ДанныеЭталонныхБД,ДанныеСценариев, ДопПараметры);
	НастройкиСценариев.Сортировать("Код Возр");
	
	НастройкиПроцессов = ОбъектСервер.ДанныеНастроекПроцессовИзТекстовыхДанных(ДанныеКаталогаПроцессов,ДанныеЭталонныхБД,ДанныеСценариев,ДанныеПроцессов, ДопПараметры);
	НастройкиПроцессов.Сортировать("Код Возр");
	
	Если ДопПараметры.Ошибки.Количество() > 0 Тогда
		ТекстОшибки = СтрСоединить(ДопПараметры.Ошибки, Символы.ПС);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	
	//Удаление неиспользуемых данных
	ИспользуемыеСценарии = Новый Соответствие;
	
	Для Каждого НастройкаСценария Из НастройкиСценариев Цикл
		ЗакэшироватьСценарии(ДанныеСценариев, НастройкаСценария.UIDСценария, НастройкаСценария.ИмяСценария, ИспользуемыеСценарии);
	КонецЦикла;
	
	Для Каждого НастройкаПроцесса Из НастройкиПроцессов Цикл
		СтрокаПроцесса = ДанныеПроцессов.Найти(НастройкаПроцесса.UIDПроцесса, "UID");
		Если СтрокаПроцесса = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден процесс с UID: %1'"), НастройкаПроцесса.UIDПроцесса);
		КонецЕсли;	
		ЗакешироватьСценарииПроцесса(СтрокаПроцесса, ИспользуемыеСценарии, ДанныеСценариев, ДанныеПроцессов);
		//ЗакэшироватьСценарии(ДанныеСценариев, НастойкаСценария.UIDСценария, НастойкаСценария.ИмяСценария, ИспользуемыеСценарии);
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	Для Каждого Строка Из ДанныеСценариев Цикл
		Если ИспользуемыеСценарии.Получить(Строка.UID) = Неопределено Тогда
			СтрокиКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ДанныеСценариев.Удалить(Строка);
	КонецЦикла;
	
	КоличествоНастроек = НастройкиСценариев.Количество() + НастройкиПроцессов.Количество();
	
	// Определяем остаток от деления на количество потоков (лишние тесты, которые нужно распределить равномерно)
	ОстатокОтДеления = 0;
	Если КоличествоНастроек > Объект.КоличествоПотоков Тогда
		ОстатокОтДеления = КоличествоНастроек % Объект.КоличествоПотоков;
	КонецЕсли;

	// Определяем количество настроек в каждом потоке
	КоличествоНастроекВОтборе = Цел((КоличествоНастроек - ОстатокОтДеления) / Объект.КоличествоПотоков);
	КоличествоНастроекВОтборе = ?(КоличествоНастроекВОтборе>0, КоличествоНастроекВОтборе, 1);

	// Определяем количество тестов в текущем потоке - если это первый из N потоков, которые должны распределить по себе остаток, то колиечство увеличивается на 1.
	КоличествоНастроекВТекущемОтборе = КоличествоНастроекВОтборе;
	Если Объект.НомерПотока <= ОстатокОтДеления Тогда
		КоличествоНастроекВТекущемОтборе = КоличествоНастроекВТекущемОтборе + 1;
	КонецЕсли;
	
	// Определяется левая граница - это количество потоков * на количетсво настроек в отборе + остаток, который распределен на первые N потоков.
	ЛеваяГраница = (Объект.НомерПотока - 1) * КоличествоНастроекВОтборе;
	Если Объект.НомерПотока > ОстатокОтДеления Тогда
		ЛеваяГраница = ЛеваяГраница + ОстатокОтДеления;
	Иначе
		ЛеваяГраница = ЛеваяГраница + Объект.НомерПотока - 1;
	КонецЕсли;

	// Определяется правая граница (тест, расположенный по индексу правой границы, не включается в текущий поток)
	ПраваяГраница = ?(Объект.НомерПотока < Объект.КоличествоПотоков, ЛеваяГраница + КоличествоНастроекВТекущемОтборе, КоличествоНастроек);

	// Из полученных границ мы определяем какие сценарии и какие процессы нужно компилировать.
	КоличествоНастроекСценариев = НастройкиСценариев.Количество();
	
	ПраваяГраницаСценарии = ?(ПраваяГраница > КоличествоНастроекСценариев, КоличествоНастроекСценариев, ПраваяГраница);
	Счетчик = ПраваяГраницаСценарии - 1;

	Пока Счетчик >= ЛеваяГраница Цикл
		НастройкиСценариев[Счетчик].Компилировать = Истина;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	ЛеваяГраницаПроцессов = ?(ЛеваяГраница > КоличествоНастроекСценариев, ЛеваяГраница - КоличествоНастроекСценариев, 0);
	Счетчик = ПраваяГраница - КоличествоНастроекСценариев;
	Счетчик = ?(Счетчик > НастройкиПроцессов.Количество(), НастройкиПроцессов.Количество(), Счетчик) - 1;

	Пока Счетчик >= ЛеваяГраницаПроцессов Цикл
		НастройкиПроцессов[Счетчик].Компилировать = Истина;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	ОбъектСервер.ТекстыСценариевИзТекстовыхДанных(ДанныеКаталогаСценариев,ДанныеЭталонныхБД,ДанныеСценариев,НастройкиСценариев);
	Для Каждого Элем Из ДанныеКаталогаСценариев Цикл
		Если Элем.Свойство("ЛинейныйСценарий") Тогда
			ОбъектСервер.ВернутьУгловыеСкобки(Элем.ЛинейныйСценарий);
			ОбъектСервер.РазэкранироватьУгловыеСкобки(Элем.ЛинейныйСценарий);
		КонецЕсли; 
	КонецЦикла;
	
	ОбъектСервер.ТекстыПроцессовИзТекстовыхДанных(ДанныеКаталогаПроцессов,ДанныеЭталонныхБД,ДанныеСценариев,ДанныеПроцессов,НастройкиПроцессов);
	Для Каждого Элем Из ДанныеКаталогаПроцессов Цикл
		Если Элем.Свойство("ЛинейныйСценарий") Тогда
			ОбъектСервер.ВернутьУгловыеСкобки(Элем.ЛинейныйСценарий);
			ОбъектСервер.РазэкранироватьУгловыеСкобки(Элем.ЛинейныйСценарий);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ОбъектСервер, "Объект");

КонецПроцедуры

&НаКлиенте
Функция ДополнитьРазделительПути(Знач Путь)
	СимволСлеша = ПолучитьРазделительПути();
	Если Прав(Путь,1) <> СимволСлеша Тогда
		Путь = Путь + СимволСлеша;
	КонецЕсли;	 
	
	Возврат Путь;
КонецФункции

&НаКлиенте
Процедура ОчиститьКаталог(Каталог)
	Каталоги = Новый Массив;
	
	Файлы = НайтиФайлы(Каталог,"*",Истина);
	Для Каждого Файл Из Файлы Цикл
		Если Файл.ЭтоКаталог() Тогда
			Каталоги.Добавить(Файл.ПолноеИмя);
			Продолжить;
		КонецЕсли;	 
		
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
	
	Для Каждого ПолноеИмяКаталога Из Каталоги Цикл
		УдалитьФайлы(ПолноеИмяКаталога);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьКаталогИСобратьСборку()
	
	Если Объект.КаталогСценариевПрочитан Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КаталогСценариев) Тогда
		ВызватьИсключение (НСтр("ru = 'Не указан каталог сценариев.'"));
	КонецЕсли;	 

	Если Не ЗначениеЗаполнено(Объект.КаталогДляЛинейныхСценариев) Тогда
		ВызватьИсключение (НСтр("ru = 'Не указан каталог для результатов компиляции.'"));
	КонецЕсли;
	
	Файл = Новый Файл(Объект.ИмяФайлаЭталонныхБД);
	Если (Не ЗначениеЗаполнено(Объект.ИмяФайлаЭталонныхБД) ИЛИ НЕ Файл.Существует())
		И Объект.КомпиляцияСценариевСПроверкойАвторизации Тогда
		ВызватьИсключение (НСтр("ru = 'Не существует файл эталонных БД'"));
	КонецЕсли;
	
	ОчиститьКаталог(Объект.КаталогДляЛинейныхСценариев);
	
	КаталогиСовпадают = Объект.КаталогСценариев = Объект.КаталогПроцессов;
	ПроцессыВКаталогеСценариев = Лев(Объект.КаталогСценариев, СтрДлина(Объект.КаталогПроцессов)) = Объект.КаталогПроцессов;
	СценарииВКаталогеПроцессов = Лев(Объект.КаталогПроцессов, СтрДлина(Объект.КаталогСценариев)) = Объект.КаталогСценариев;
	
	ДанныеКаталогаСценариев = Новый Массив;
	ДанныеКаталогаПроцессов = Новый Массив;

	Если КаталогиСовпадают Тогда
		НайденныеФайлы = НайтиФайлы(Объект.КаталогСценариев, "*.yaml", Истина);
		Для Каждого Файл Из НайденныеФайлы Цикл
			Результат = ПрочитатьФайлYaml(Файл.ПолноеИмя);
			ДанныеКаталогаСценариев.Добавить(Результат);
			ДанныеКаталогаПроцессов.Добавить(Результат);
		КонецЦикла;
	ИначеЕсли ПроцессыВКаталогеСценариев Тогда
		НайденныеФайлы = НайтиФайлы(Объект.КаталогСценариев, "*.yaml", Истина);
		Для Каждого Файл Из НайденныеФайлы Цикл
			ИмяФайла = Файл.ПолноеИмя;
			Результат = ПрочитатьФайлYaml(Файл.ПолноеИмя);
			ДанныеКаталогаСценариев.Добавить(Результат);
			Если Лев(ИмяФайла, СтрДлина(Объект.КаталогПроцессов)) = Объект.КаталогПроцессов Тогда
				ДанныеКаталогаПроцессов.Добавить(Результат);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СценарииВКаталогеПроцессов Тогда
		НайденныеФайлы = НайтиФайлы(Объект.КаталогПроцессов, "*.yaml", Истина);
		Для Каждого Файл Из НайденныеФайлы Цикл
			ИмяФайла = Файл.ПолноеИмя;
			Результат = ПрочитатьФайлYaml(Файл.ПолноеИмя);
			ДанныеКаталогаПроцессов.Добавить(Результат);
			Если Лев(ИмяФайла, СтрДлина(Объект.КаталогСценариев)) = Объект.КаталогСценариев Тогда
				ДанныеКаталогаСценариев.Добавить(Результат);
			КонецЕсли;
		КонецЦикла;
	Иначе
		НайденныеФайлы = НайтиФайлы(Объект.КаталогСценариев, "*.yaml", Истина);
		Для Каждого Файл Из НайденныеФайлы Цикл
			ДанныеКаталогаСценариев.Добавить(ПрочитатьФайлYaml(Файл.ПолноеИмя));
		КонецЦикла;
		
		НайденныеФайлы = НайтиФайлы(Объект.КаталогПроцессов, "*.yaml", Истина);
		Для Каждого Файл Из НайденныеФайлы Цикл
			ДанныеКаталогаПроцессов.Добавить(ПрочитатьФайлYaml(Файл.ПолноеИмя));
		КонецЦикла;
	КонецЕсли;
	
	ДанныеЭталонныхБД = Новый Массив;

	Если ЗначениеЗаполнено(Объект.ИмяФайлаЭталонныхБД) Тогда
		Файл = Новый Файл(Объект.ИмяФайлаЭталонныхБД);
		Если Файл.Существует() Тогда
			ДанныеЭталонныхБД.Добавить(ПрочитатьФайлYaml(Файл.ПолноеИмя));
		КонецЕсли;
	КонецЕсли;
	Если ДанныеЭталонныхБД.Количество() = 0 Тогда
					//  ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"]
		СтруктураДанных = Новый Структура;
		СтруктураЭталонныеБД = Новый Структура;
		ПустойМассив = Новый Массив;
		СтруктураЭталонныеБД.Вставить("ЭталонныеБД", ПустойМассив);
		СтруктураДанных.Вставить("ДанныеФайлаYaml", СтруктураЭталонныеБД);
		ДанныеЭталонныхБД.Добавить(СтруктураДанных);
	КонецЕсли;
	
	СборкаСценариевИПроцессовНаКлиенте(ДанныеКаталогаПроцессов,ДанныеКаталогаСценариев, ДанныеЭталонныхБД);
КонецПроцедуры

// Получает значения параметров из строки.
//
// Параметры:
//  СтрокаПараметров - Строка - строка, содержащая параметры, каждый из которых представляет собой
//                              фрагмент вида <Имя параметра>=<Значение>, где:
//                                Имя параметра - имя параметра; 
//                                Значение - его значение. 
//                              Фрагменты отделяются друг от друга символами ';'.
//                              Если значение содержит пробельные символы, то оно должно быть заключено в двойные
//                              кавычки (").
//                              Например:
//                               "File=""c:\InfoBases\Trade""; Usr=""Director"";"
//  Разделитель - Строка - символ, которым фрагменты отделяются друг от друга.
//
// Возвращаемое значение:
//  Структура - структура параметров, где ключ - имя параметра, значение - значение параметра.
//
&НаКлиенте
Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";")
	Результат = Новый Структура;
	
	ОписаниеПараметра = "";
	НайденоНачалоСтроки = Ложь;
	НомерПоследнегоСимвола = СтрДлина(СтрокаПараметров);
	Для НомерСимвола = 1 По НомерПоследнегоСимвола Цикл
		Символ = Сред(СтрокаПараметров, НомерСимвола, 1);
		Если Символ = """" Тогда
			НайденоНачалоСтроки = Не НайденоНачалоСтроки;
		КонецЕсли;
		Если Символ <> Разделитель Или НайденоНачалоСтроки Тогда
			ОписаниеПараметра = ОписаниеПараметра + Символ;
		КонецЕсли;
		Если Символ = Разделитель И Не НайденоНачалоСтроки Или НомерСимвола = НомерПоследнегоСимвола Тогда
			Позиция = СтрНайти(ОписаниеПараметра, "=");
			Если Позиция > 0 Тогда
				ИмяПараметра = СокрЛП(Лев(ОписаниеПараметра, Позиция - 1));
				ЗначениеПараметра = СокрЛП(Сред(ОписаниеПараметра, Позиция + 1));
				Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
			ОписаниеПараметра = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлРезультата(Результат)

	Если ЗначениеЗаполнено(ФайлРезультата) Тогда
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Результат);
		Файл.Записать(ФайлРезультата);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлЛога(Лог)

	Если ЗначениеЗаполнено(ФайлЛога) Тогда
		Файл = Новый ТекстовыйДокумент;
		Файл.УстановитьТекст(Лог);
		Файл.Записать(ФайлЛога);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция СтрокуВБулево(Строка, ЗначениеПоУмолчанию=Неопределено)
	
	Если ТипЗнч(Строка) = Тип("Булево") Тогда
		Возврат Строка;
	КонецЕсли;
	
	ЗначениеПараметра = СокрЛП(НРег(Строка(Строка)));
	Если ЗначениеПараметра = "истина" Или ЗначениеПараметра = "true" Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеПараметра = "ложь" Или ЗначениеПараметра = "false" Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыОбработки(СтруктураПараметров)
	НоваяСтруктураПараметров = Новый Структура;
	Для Каждого Элем Из СтруктураПараметров Цикл
		НовыйКлюч = НРег(Элем.Ключ);
		НовыйКлюч = СтрЗаменить(НовыйКлюч, "_", "");
		НовыйКлюч = СтрЗаменить(НовыйКлюч, "-", "");
		НовыйКлюч = СтрЗаменить(НовыйКлюч, " ", "");
		НоваяСтруктураПараметров.Вставить(СокрЛП(НовыйКлюч),Элем.Значение);
	КонецЦикла;
	СтруктураПараметров = НоваяСтруктураПараметров;
	
	Объект.РаботаВРежимеВнешнейОбработки = Истина;
	Если СтруктураПараметров.Свойство("externalmode") Тогда
		Объект.РаботаВРежимеВнешнейОбработки = ?(СтруктураПараметров.externalmode 
												ИЛИ НРег(СтруктураПараметров.externalmode) = "true", 
												Истина, Ложь);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("errorfolder") Тогда
		Объект.КаталогФайловОшибок = СтруктураПараметров.errorfolder;
	КонецЕсли;
	
	РезультатВФорматеСППР = Ложь;
	Если СтруктураПараметров.Свойство("createmodellingxml") Тогда
		РезультатВФорматеСППР = ?(СтруктураПараметров.createmodellingxml 
							 ИЛИ НРег(СтруктураПараметров.createmodellingxml) = "true", 
							 Истина, Ложь);
	КонецЕсли;
	
	РезультатВФорматеJunit = Истина;
	Если СтруктураПараметров.Свойство("createjunit") Тогда
		РезультатВФорматеJunit = ?(СтруктураПараметров.createjunit 
							 ИЛИ НРег(СтруктураПараметров.createjunit) = "true", 
							 Истина, Ложь);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("junitpath") И ЗначениеЗаполнено(СтруктураПараметров.junitpath) Тогда
		JunitФайл = ДобавитьКонечныйРазделительПути(СтруктураПараметров.junitpath) + "junit_compile.xml";
		Объект.КаталогOutputjUnit = СтруктураПараметров.junitpath;
	КонецЕсли;	
	
	Если СтруктураПараметров.Свойство("junitfile") И ЗначениеЗаполнено(СтруктураПараметров.junitfile) Тогда
		JunitФайл = СтруктураПараметров.junitfile;
	КонецЕсли;
	
	СоздаватьJsonФайл = Истина;
	Если СтруктураПараметров.Свойство("createjson") Тогда
		СоздаватьJsonФайл = ?(СтруктураПараметров.createjson 
							 ИЛИ НРег(СтруктураПараметров.createjson) = "true", 
							 Истина, Ложь);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("переданыпараметры") и СтруктураПараметров.переданыпараметры Тогда
		Объект.ПереданыПараметры = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ОтборПоТегамСценариевИлиНастроек") Тогда
		Объект.ОтборПоТегамСценариевИлиНастроек = СтруктураПараметров.ОтборПоТегамСценариевИлиНастроек;
	ИначеЕсли СтруктураПараметров.Свойство("FilterTags") Тогда
		Объект.ОтборПоТегамСценариевИлиНастроек = СтруктураПараметров.FilterTags;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ИсключениеПоТегамСценариевИлиНастроек") Тогда
		Объект.ИсключениеПоТегамСценариевИлиНастроек = СтруктураПараметров.ИсключениеПоТегамСценариевИлиНастроек;
	ИначеЕсли СтруктураПараметров.Свойство("ExceptionTags") Тогда
		Объект.ИсключениеПоТегамСценариевИлиНастроек = СтруктураПараметров.ExceptionTags;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("testfolder") Тогда
		КаталогТестов = СтруктураПараметров.testfolder; 
	Иначе
		Если СтруктураПараметров.Свойство("scenariofolder") Тогда
			Объект.КаталогСценариев = СтруктураПараметров.scenariofolder;
		КонецЕсли;
		Если СтруктураПараметров.Свойство("processfolder") Тогда
			Объект.КаталогПроцессов = СтруктураПараметров.processfolder;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("featurefolder") Тогда
		Объект.КаталогДляЛинейныхСценариев = СтруктураПараметров.featurefolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("modeldbid") 
			И ЗначениеЗаполнено(СтруктураПараметров.modeldbid) Тогда
		ИдБазыСборки = СтруктураПараметров.modeldbid;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("modeldbsettings") Тогда
		Объект.ИмяФайлаЭталонныхБД = СтруктураПараметров.modeldbsettings;
	КонецЕсли;
	
	Объект.КомпиляцияСценариевСПроверкойАвторизации = Ложь;
	Если СтруктураПараметров.Свойство("authcompile") Тогда
		ЗначениеПараметра = СокрЛП(НРег(Строка(СтруктураПараметров.authcompile)));
		Если ЗначениеПараметра = "истина" Или ЗначениеПараметра = "true" Тогда
			Объект.КомпиляцияСценариевСПроверкойАвторизации = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("testclientdbpath") Тогда
		Объект.КаталогБазыДляЗапуска = СтруктураПараметров.testclientdbpath;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("launchdbfolder") Тогда
		Объект.КаталогБазыДляЗапуска = СтруктураПараметров.launchdbfolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("vanessadir") Тогда
		Объект.КаталогФреймворкаТестирования = СтруктураПараметров.vanessadir;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("vanessafolder") Тогда
		Объект.КаталогФреймворкаТестирования = СтруктураПараметров.vanessafolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("vanessapath") Тогда
		ФайлVanessa = Новый Файл(СтруктураПараметров.vanessapath);
		Если ФайлVanessa.ЭтоФайл() Тогда
			Объект.КаталогФреймворкаТестирования = ФайлVanessa.Путь;
		Иначе
			Объект.КаталогФреймворкаТестирования = ФайлVanessa.ПолноеИмя;
		КонецЕсли;
	КонецЕсли;


	Если СтруктураПараметров.Свойство("allurepath") Тогда
		Объект.КаталогOutputAllureБазовый = СтруктураПараметров.allurepath;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("allurefolder") 
			И ЗначениеЗаполнено(СтруктураПараметров.allurefolder) Тогда
		Объект.КаталогOutputAllureБазовый = СтруктураПараметров.allurefolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("junitfolder") Тогда
		Объект.КаталогOutputjUnit = СтруктураПараметров.junitfolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("spprreportfolder") Тогда
		Объект.КаталогОтчетаСППР = СтруктураПараметров.spprreportfolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("cucumberfolder") Тогда
		Объект.КаталогOutputCucumber = СтруктураПараметров.cucumberfolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("vanessalibraries") Тогда
		Если ТипЗнч(СтруктураПараметров.vanessalibraries) = Тип("Массив") Тогда
			СтруктураПараметров.vanessalibraries = СтрСоединить(СтруктураПараметров.vanessalibraries, "|");
		КонецЕсли;
		Объект.КаталогиБиблиотек = СтруктураПараметров.vanessalibraries;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("libraries") Тогда
		Если ТипЗнч(СтруктураПараметров.libraries) = Тип("Массив") Тогда
			СтруктураПараметров.libraries = СтрСоединить(СтруктураПараметров.libraries, "|");
		КонецЕсли;

		Объект.КаталогиБиблиотек = СтруктураПараметров.libraries;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("scenariologfile") Тогда
		Объект.ИмяФайлаЛогВыполненияСценариев = СтруктураПараметров.scenariologfile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("bddlogfolder") Тогда
		Объект.ИмяКаталогаОшибок = СтруктураПараметров.bddlogfolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("scenariooutfile") Тогда
		Объект.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = СтруктураПараметров.scenariooutfile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("capturescreen") Тогда
		Объект.ДелатьСкриншоты = СтрокуВБулево(СтруктураПараметров.capturescreen, Объект.ДелатьСкриншоты);
	КонецЕсли;

	Если СтруктураПараметров.Свойство("screenshotcapturecommand") Тогда
		Объект.КомандаСделатьСкриншот = СтруктураПараметров.screenshotcapturecommand;
		Объект.ДелатьСкриншоты = Истина;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("screenshotspath") Тогда
		Объект.КаталогOutputСкриншоты = СтруктураПараметров.screenshotspath;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("screenshotsfolder") Тогда
		Объект.КаталогOutputСкриншоты = СтруктураПараметров.screenshotsfolder;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("usescreenshotcomponent") И ЗначениеЗаполнено(СтруктураПараметров.usescreenshotcomponent) Тогда
		ИспользоватьКомпоненту1cWinCtrlДляСнятияСкриншотов = СтрокуВБулево(СтруктураПараметров.usescreenshotcomponent, ИспользоватьКомпоненту1cWinCtrlДляСнятияСкриншотов);
		Объект.ДелатьСкриншоты = Истина;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("useexternalcomponent") И ЗначениеЗаполнено(СтруктураПараметров.useexternalcomponent) Тогда
		ИспользоватьКомпоненту1cWinCtrl = СтрокуВБулево(СтруктураПараметров.useexternalcomponent, ИспользоватьКомпоненту1cWinCtrl);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("pidinformation") И ЗначениеЗаполнено(СтруктураПараметров.pidinformation) Тогда
		СобиратьДанныеОПроцессахОС = СтрокуВБулево(СтруктураПараметров.pidinformation, СобиратьДанныеОПроцессахОС);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("resultfile") Тогда
		ФайлРезультата = СтруктураПараметров.resultfile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("logfile") Тогда
		ФайлЛога = СтруктураПараметров.logfile;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("infobasepath") Тогда
		Объект.ПутьКИнфобазе = СтруктураПараметров.infobasepath;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("testclientdb") Тогда
		Объект.ПутьКИнфобазе = СтруктураПараметров.testclientdb;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("testclienttype") Тогда
		Объект.ТипКлиента = СтруктураПараметров.testclienttype;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("testclientport") Тогда
		Объект.ПортЗапускаТестКлиента = СтруктураПараметров.testclientport;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("debugmode") Тогда
		Объект.РежимОтладки = СтруктураПараметров.debugmode;
	КонецЕсли;
	
	Объект.ПаузаПриОткрытииОкна = 1;
	Если СтруктураПараметров.Свойство("pauseonwindowsopening")
			И ЗначениеЗаполнено(СтруктураПараметров.pauseonwindowsopening) Тогда
		Объект.ПаузаПриОткрытииОкна = СтруктураПараметров.pauseonwindowsopening;
	КонецЕсли;
	
	Объект.ДелатьОтчетВФорматеАллюр    = Истина;
	Объект.ДелатьОтчетВФорматеjUnit    = Истина;
	Объект.ДелатьОтчетВФорматеCucumber = Ложь;
	Объект.БезопасноеВыполнениеШагов = Ложь;
	
	Если СтруктураПараметров.Свойство("allurereport") Тогда
		Объект.ДелатьОтчетВФорматеАллюр = СтрокуВБулево(СтруктураПараметров.allurereport, Объект.ДелатьОтчетВФорматеАллюр);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("safestepsexecution") 
		И ЗначениеЗаполнено(СтруктураПараметров.safestepsexecution) Тогда
		Объект.БезопасноеВыполнениеШагов = СтрокуВБулево(СтруктураПараметров.safestepsexecution, Объект.БезопасноеВыполнениеШагов);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("junitreport") Тогда
		Объект.ДелатьОтчетВФорматеjUnit = СтрокуВБулево(СтруктураПараметров.junitreport, Объект.ДелатьОтчетВФорматеjUnit);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("cucumberreport") Тогда
		Объект.ДелатьОтчетВФорматеCucumber = СтрокуВБулево(СтруктураПараметров.cucumberreport, Объект.ДелатьОтчетВФорматеCucumber);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("spprreport") Тогда
		Объект.ДелатьОтчетВФорматеСППР = СтрокуВБулево(СтруктураПараметров.spprreport, Объект.ДелатьОтчетВФорматеСППР);
	КонецЕсли;	
	
	Объект.ДелатьЛогВыполненияСценариевВЖР = Истина;
	
	Если СтруктураПараметров.Свойство("extraparams") Тогда
		Объект.ДопПараметрыКлиентаТестирования = СтруктураПараметров.extraparams;
	КонецЕсли;
	
	Объект.КоличествоСекундПоискаОкна = "20";
	Если СтруктураПараметров.Свойство("waitwindowtime") И ЗначениеЗаполнено(СтруктураПараметров.waitwindowtime) Тогда
		Объект.КоличествоСекундПоискаОкна = СтруктураПараметров.waitwindowtime;
	КонецЕсли;
	
	Объект.КоличествоПопытокВыполненияДействия = "5";
	Если СтруктураПараметров.Свойство("numberofattempts") И ЗначениеЗаполнено(СтруктураПараметров.numberofattempts) Тогда
		Объект.КоличествоПопытокВыполненияДействия = СтруктураПараметров.numberofattempts;
	КонецЕсли;
	
	Объект.ТаймаутДляАсинхронныхШагов = "300";
	Если СтруктураПараметров.Свойство("timeoutforasyncsteps") 
		И ЗначениеЗаполнено(СтруктураПараметров.timeoutforasyncsteps) Тогда
		Объект.ТаймаутДляАсинхронныхШагов = СтруктураПараметров.timeoutforasyncsteps;
	КонецЕсли;
	
	Объект.ТаймаутЗапуска1С = "120";
	Если СтруктураПараметров.Свойство("timeouttestclientstart") 
		И ЗначениеЗаполнено(СтруктураПараметров.timeouttestclientstart) Тогда
		Объект.ТаймаутЗапуска1С = СтруктураПараметров.timeouttestclientstart;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("erroraddinfo") Тогда
		Объект.ДополнениеТекстаОшибки = СтруктураПараметров.erroraddinfo;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("addimportantinfo") И ЗначениеЗаполнено(СтруктураПараметров.addimportantinfo) Тогда
		Объект.ДополнениеПорядкаВоспроизведения = СтруктураПараметров.addimportantinfo;
	КонецЕсли;

	Если СтруктураПараметров.Свойство("detectiontime") И ЗначениеЗаполнено(СтруктураПараметров.detectiontime) Тогда
		Объект.ДатаОбнаруженияОшибки = XMLЗначение(Тип("Дата"), СтруктураПараметров.detectiontime);
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("repopath") Тогда
		Объект.АдресРепозитория = СтруктураПараметров.repopath;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("branch") Тогда
		Объект.ИмяВетки = СтруктураПараметров.branch;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("pipelineid") Тогда
		ИдентификаторЗапуска = СтруктураПараметров.pipelineid;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("configurationname") Тогда
		Объект.ИмяКонфигурации = СтруктураПараметров.configurationname;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("configurationversion") Тогда
		Объект.ВерсияКонфигурации = СтруктураПараметров.configurationversion;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("responsible") Тогда
		Ответственный = СтруктураПараметров.responsible;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("SeveralScenariosInOneFile") Тогда
		Объект.НесколькоСценариевВОдномФайле = СтруктураПараметров.SeveralScenariosInOneFile;
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("ultimateresponsible") И ЗначениеЗаполнено(СтруктураПараметров.ultimateresponsible) Тогда
		Ответственный = СтруктураПараметров.ultimateresponsible;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("scenariosettingsfilter") И ЗначениеЗаполнено(СтруктураПараметров.scenariosettingsfilter) Тогда
		ОтборПоНастройкамСценариев = СтруктураПараметров.scenariosettingsfilter;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("uidscenariosettingsfilter") И ЗначениеЗаполнено(СтруктураПараметров.uidscenariosettingsfilter) Тогда
		ОтборПоUIDНастроекСценариев = СтруктураПараметров.uidscenariosettingsfilter;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("scenariofilter") И ЗначениеЗаполнено(СтруктураПараметров.scenariofilter) Тогда
		ОтборПоСценариям = СтруктураПараметров.scenariofilter;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("exceptscenario") И ЗначениеЗаполнено(СтруктураПараметров.exceptscenario) Тогда
		ИсключенияПоСценариям = СтруктураПараметров.exceptscenario;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("processsettingsfilter") И ЗначениеЗаполнено(СтруктураПараметров.processsettingsfilter) Тогда
		ОтборПоНастройкамПроцессов = СтруктураПараметров.processsettingsfilter;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("processfilter") И ЗначениеЗаполнено(СтруктураПараметров.processfilter) Тогда
		ОтборПоПроцессам = СтруктураПараметров.processfilter;
	КонецЕсли;
		
	Если СтруктураПараметров.Свойство("compilefile") И ЗначениеЗаполнено(СтруктураПараметров.compilefile) Тогда
		Объект.ИмяФайлаРезультатовКомпиляции = СтруктураПараметров.compilefile;
	ИначеЕсли НЕ ПустаяСтрока(Объект.КаталогДляЛинейныхСценариев) Тогда
		Объект.ИмяФайлаРезультатовКомпиляции = ДобавитьКонечныйРазделительПути(Объект.КаталогДляЛинейныхСценариев) + "compile.txt"
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("threadscount") И ЗначениеЗаполнено(СтруктураПараметров.threadscount) Тогда
		Попытка
			Объект.КоличествоПотоков = Число(СтруктураПараметров.threadscount);
		Исключение
			Объект.КоличествоПотоков = 1;
		КонецПопытки;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("threadnumber") И ЗначениеЗаполнено(СтруктураПараметров.threadnumber) Тогда
		Попытка
			Объект.НомерПотока = Число(СтруктураПараметров.threadnumber) + 1;
			Если Объект.НомерПотока > Объект.КоличествоПотоков Тогда
				Объект.НомерПотока = Объект.КоличествоПотоков;
			КонецЕсли;
		Исключение
			Объект.НомерПотока = 1;
		КонецПопытки;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("threadtotal") И ЗначениеЗаполнено(СтруктураПараметров.threadtotal) Тогда
		Попытка
			Объект.КоличествоПотоков = Число(СтруктураПараметров.threadtotal);
		Исключение
			Объект.КоличествоПотоков = 1;
		КонецПопытки;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("threadindex") И ЗначениеЗаполнено(СтруктураПараметров.threadindex) Тогда
		Попытка
			Объект.НомерПотока = Число(СтруктураПараметров.threadindex);
			Если Объект.НомерПотока > Объект.КоличествоПотоков Тогда
				Объект.НомерПотока = Объект.КоличествоПотоков;
			КонецЕсли;
		Исключение
			Объект.НомерПотока = 1;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога, Знач Удалить_Платформа = Неопределено)
	Если ПустаяСтрока(ПутьКаталога) Тогда
		Возврат ПутьКаталога;
	КонецЕсли;
	
	ДобавляемыйСимвол = ПолучитьРазделительПути();
	
	Если Прав(ПутьКаталога, 1) = ДобавляемыйСимвол Тогда
		Возврат ПутьКаталога;
	Иначе 
		Возврат ПутьКаталога + ДобавляемыйСимвол;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция УдалитьПодстрокуСлева(СтрокаПоиска, Подстрока, УдалитьВключаяПодстроку=Истина, РезультатПоУмолчанию=Неопределено, УдалитьПоследнееВхождение=Ложь)
	Если Найти(СтрокаПоиска, Подстрока) > 0 Тогда
		Результат = СтрокаПоиска;
		Пока Найти(Результат, Подстрока) > 0 Цикл
			Индекс = СтрДлина(СтрокаПоиска) - Найти(СтрокаПоиска, Подстрока) + 1;
			Индекс = ? (УдалитьВключаяПодстроку, Индекс - СтрДлина(Подстрока), Индекс + 1);
			Результат = СокрЛП(Прав(СтрокаПоиска, Индекс));
			Если Не УдалитьПоследнееВхождение Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	 
	Иначе
		Результат = ? (ЗначениеЗаполнено(РезультатПоУмолчанию), РезультатПоУмолчанию, СтрокаПоиска); 
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция УдалитьСтрокиМодуля(ТекстОшибки, УдалитьЦеликом=Ложь)
	Результат = "";
	
	Для ИндексСтроки = 1 По СтрЧислоСтрок(ТекстОшибки) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(ТекстОшибки, ИндексСтроки);
		ДобавитьСтроку = Истина;
		Если Найти(ТекущаяСтрока, "{ВнешняяОбработка") > 0 Тогда 
			ТекущаяСтрока = УдалитьПодстрокуСлева(ТекущаяСтрока, ")}:");
			ДобавитьСтроку = НЕ УдалитьЦеликом;
		КонецЕсли;
		Если ДобавитьСтроку Тогда
			Результат = Результат + ТекущаяСтрока + Символы.ПС; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаКлиенте
Процедура ПереключательПоТипамКомпиляцииПриИзменении(Элемент)
    
    Элементы.ОтборСценариев.Видимость = ?(ПереключательПоТипамКомпиляции = "Все" ИЛИ ПереключательПоТипамКомпиляции = "Только сценарии", Истина, Ложь);
    Элементы.ОтборПроцессов.Видимость = ?(ПереключательПоТипамКомпиляции = "Все" ИЛИ ПереключательПоТипамКомпиляции = "Только процессы", Истина, Ложь);
    
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРегистрацииОшибок_Формат_1_7

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьОписаниеОшибки() Экспорт

	Ошибка = Новый Структура;

	Ошибка.Вставить("ВерсияФормата", "1.7");
	Ошибка.Вставить("УИ",                       Строка(Новый УникальныйИдентификатор));
	Ошибка.Вставить("ТипОшибки",                "");
	Ошибка.Вставить("ИсходнаяИнформация",       "");
	Ошибка.Вставить("ПорядокВоспроизведения",   "");
	Ошибка.Вставить("ОжидаемоеПоведение",       "");
	Ошибка.Вставить("Ответственный",            "");
	Ошибка.Вставить("КодСценария",              "");
	Ошибка.Вставить("КодНастройкиСценария",     "");
	Ошибка.Вставить("КодПроцесса",              "");
	Ошибка.Вставить("КодНастройкиПроцесса",     "");
	Ошибка.Вставить("ДостоверностьОбнаружения", "Высокая");  // "Высокая" либо "Низкая"
	Ошибка.Вставить("Срочность",                "Высокая"); // "Высокая", "Средняя" либо "Низкая"
	Ошибка.Вставить("АдресРепозитория",         "");
	Ошибка.Вставить("ИмяВетки",                 "");
	Ошибка.Вставить("ИдентификаторЗапуска",     "");

	#Если Клиент Или ТолстыйКлиентУправляемоеПриложение Или ТонкийКлиент Или ВебКлиент  Тогда

		СисИнфо = Новый СистемнаяИнформация;
		Ошибка.Вставить("ВерсияПлатформы",         СисИнфо.ВерсияПриложения);
		Ошибка.Вставить("КлиентОперативнаяПамять", СисИнфо.ОперативнаяПамять);
		Ошибка.Вставить("КлиентВерсияОС",          СисИнфо.ВерсияОС);
		Ошибка.Вставить("КлиентПроцессор",         СисИнфо.Процессор);
		Ошибка.Вставить("КлиентТипПлатформы",      Строка(СисИнфо.ТипПлатформы));
		Ошибка.Вставить("КлиентИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);
		Ошибка.Вставить("КлиентТекущаяДата",       ТекущаяДата());

	#КонецЕсли

    Ошибка.Вставить("ДатаОбнаружения",   Дата(1,1,1));

	Ошибка.Вставить("ОбъектыМетаданных", Новый Массив); // Возможность добавить массив объектов метаданных
	// Регистрация по одному объекту метаданных
	Ошибка.Вставить("ОбъектМетаданных",      "");
	Ошибка.Вставить("УточнениеРасположения", "");
	Ошибка.Вставить("ВерсияКонфигурации",    "");
	Ошибка.Вставить("ИмяКонфигурации",       "");

	Ошибка.Вставить("ИменаФайлов", Новый Массив);

	Возврат Ошибка;

КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьОписаниеОшибкиНаСервере(Ошибка) Экспорт

	СисИнфо = Новый СистемнаяИнформация;
    Ошибка.Вставить("ВерсияПлатформы",         СисИнфо.ВерсияПриложения);
	Ошибка.Вставить("СерверОперативнаяПамять", СисИнфо.ОперативнаяПамять);
	Ошибка.Вставить("СерверВерсияОС",          СисИнфо.ВерсияОС);
	Ошибка.Вставить("СерверПроцессор",         СисИнфо.Процессор);
	Ошибка.Вставить("СерверТипПлатформы",      Строка(СисИнфо.ТипПлатформы));
	Ошибка.Вставить("СерверИнформацияПрограммыПросмотра", СисИнфо.ИнформацияПрограммыПросмотра);

	Если Не ЗначениеЗаполнено(Ошибка.ВерсияКонфигурации) Тогда
		Ошибка.ВерсияКонфигурации = Метаданные.Версия;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ошибка.ИмяКонфигурации) Тогда
		Ошибка.ИмяКонфигурации = Метаданные.Имя;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Ошибка.ДатаОбнаружения) Тогда
		Ошибка.ДатаОбнаружения = ТекущаяДатаСеанса();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстОшибкиXML(Ошибка) Экспорт

	ДополнитьОписаниеОшибкиНаСервере(Ошибка);

	Если ЗначениеЗаполнено(Ошибка.ОбъектМетаданных) ИЛИ ЗначениеЗаполнено(Ошибка.УточнениеРасположения) Тогда

		Ошибка.ОбъектыМетаданных.Добавить(Новый Структура("ОбъектМетаданных, УточнениеРасположения", Ошибка.ОбъектМетаданных, Ошибка.УточнениеРасположения));

	КонецЕсли;

	Ошибка.Удалить("ОбъектМетаданных");
	Ошибка.Удалить("УточнениеРасположения");

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();

	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Ошибка);

	Возврат ЗаписьXML.Закрыть()

КонецФункции

#КонецОбласти

#Область JUnit

&НаКлиентеНаСервереБезКонтекста
Функция НаборТестов(Имя, ИмяКонфигурации=Неопределено, ВерсияКонфигурации=Неопределено)
	
	НаборТестов = Новый Структура;
	
	СисИнфо                = Новый СистемнаяИнформация;
	МетаданныеКонфигурации = МетаданныеКонфигурации();
	
	НаборТестов.Вставить("platform_version",      СисИнфо.ВерсияПриложения);
	НаборТестов.Вставить("configuration_name",    ?(ЗначениеЗаполнено(ИмяКонфигурации), ИмяКонфигурации, МетаданныеКонфигурации.Имя));
	НаборТестов.Вставить("configuration_version", ?(ЗначениеЗаполнено(ВерсияКонфигурации), ВерсияКонфигурации, МетаданныеКонфигурации.Версия));
	НаборТестов.Вставить("files",                 Новый Массив);
	
	// Служебные свойства
	НаборТестов.Вставить("Имя",                 Имя);
	НаборТестов.Вставить("ДатаНачала",          ТекущаяДата());
	НаборТестов.Вставить("ТестКейсы",           Новый Массив);
	НаборТестов.Вставить("ИдентификаторНабора", Строка(Новый УникальныйИдентификатор));
	
	Возврат НаборТестов;
	
КонецФункции

&НаСервереБезКонтекста
Функция МетаданныеКонфигурации()
	Возврат Новый Структура("Имя, Версия", Метаданные.Имя, Метаданные.Версия);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТестКейс(Имя, Тип="")
	
	ТестКейс = Новый Структура;
	ТестКейс.Вставить("Имя",                  Имя);
	ТестКейс.Вставить("Тип",                  Тип);
	ТестКейс.Вставить("Ошибки",               Новый Массив);
	ТестКейс.Вставить("Длительность",         0);
	ТестКейс.Вставить("Пропускается",         Ложь);
	ТестКейс.Вставить("ОшибкаИнфраструктуры", "");
	
	Возврат ТестКейс;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьОшибку(ТестКейс, Текст, Тип="", Сообщение="")
	
	Ошибка = Новый Структура;
	Ошибка.Вставить("Текст",     Текст);
	Ошибка.Вставить("Тип",       Тип);
	Ошибка.Вставить("Сообщение", Сообщение);
	
	ТестКейс.Ошибки.Добавить(Ошибка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНабор(НаборТестов, ПутьКОтчету)
	
	Если ТипЗнч(НаборТестов) <> Тип("Массив") Тогда
		НаборыТестов = Новый Массив;
		НаборыТестов.Добавить(НаборТестов);
	Иначе
		НаборыТестов = НаборТестов;
	КонецЕсли; 
	
	// Длительность
	ОбщаяДлительность = 0;
	ДлительностиНаборов = Новый Соответствие;
	// Количество
	ОбщееКоличествоТестов = 0;
	КоличествоТестовНаборов = Новый Соответствие;
	// Ошибки инфраструктуры
	ОбщееКоличествоОшибокИнфраструктуры = 0;
	КоличествоОшибокИнфраструктурыНаборов = Новый Соответствие;
	// Ошибки
	ОбщееКоличествоОшибок = 0;
	КоличествоОшибокНаборов = Новый Соответствие;
	// Пропущенные
	КоличествоПропущенныхНаборов = Новый Соответствие;
	
	Для Каждого Набор Из НаборыТестов Цикл
		
		ДлительностьНабора = 0;
		КоличествоНабора = 0;
		ОшибкиИнфраструктурыНабора = 0;
		ОшибкиНабора = 0;
		ПропущенныеНабора = 0;
		Для Каждого ТестКейс Из Набор.ТестКейсы Цикл
			ДлительностьНабора = ДлительностьНабора + ТестКейс.Длительность;
			КоличествоНабора = КоличествоНабора + 1;
			Если ЗначениеЗаполнено(ТестКейс.ОшибкаИнфраструктуры) Тогда
				ОшибкиИнфраструктурыНабора = ОшибкиИнфраструктурыНабора + 1;
			ИначеЕсли ТестКейс.Ошибки.Количество() > 0 Тогда
				ОшибкиНабора = ОшибкиНабора + ТестКейс.Ошибки.Количество();
			ИначеЕсли ТестКейс.Пропускается Тогда
				ПропущенныеНабора = ПропущенныеНабора + 1;
			КонецЕсли; 
		КонецЦикла;
		
		// Длительность
		ДлительностиНаборов.Вставить(Набор.Имя, ДлительностьНабора);
		ОбщаяДлительность = ОбщаяДлительность + ДлительностьНабора;
		// Количество
		КоличествоТестовНаборов.Вставить(Набор.Имя, КоличествоНабора);
		ОбщееКоличествоТестов = ОбщееКоличествоТестов + КоличествоНабора;
		// Ошибки инфраструктуры
		КоличествоОшибокИнфраструктурыНаборов.Вставить(Набор.Имя, ОшибкиИнфраструктурыНабора);
		ОбщееКоличествоОшибокИнфраструктуры = ОбщееКоличествоОшибокИнфраструктуры + ОшибкиИнфраструктурыНабора;
		// Ошибки
		КоличествоОшибокНаборов.Вставить(Набор.Имя, ОшибкиНабора);
		ОбщееКоличествоОшибок = ОбщееКоличествоОшибок + ОшибкиНабора;
		// Пропущенные
		КоличествоПропущенныхНаборов.Вставить(Набор.Имя, ПропущенныеНабора);
		
	КонецЦикла;
	
	НоваяЗаписьXML = Новый ЗаписьXML;
	НоваяЗаписьXML.ОткрытьФайл(ПутьКОтчету);
	НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
	
	НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuites");
	НоваяЗаписьXML.ЗаписатьАтрибут("time",     Формат(ОбщаяДлительность,                   "ЧРД=.; ЧН=0; ЧГ="));
	НоваяЗаписьXML.ЗаписатьАтрибут("tests",    Формат(ОбщееКоличествоТестов,               "ЧРД=.; ЧН=0; ЧГ="));
	НоваяЗаписьXML.ЗаписатьАтрибут("errors",   Формат(ОбщееКоличествоОшибокИнфраструктуры, "ЧРД=.; ЧН=0; ЧГ="));
	НоваяЗаписьXML.ЗаписатьАтрибут("failures", Формат(ОбщееКоличествоОшибок,               "ЧРД=.; ЧН=0; ЧГ="));
	
	Для Каждого Набор Из НаборыТестов Цикл
	
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testsuite");
		НоваяЗаписьXML.ЗаписатьАтрибут("name",      Набор.Имя);
		НоваяЗаписьXML.ЗаписатьАтрибут("timestamp", Формат(Набор.ДатаНачала, "ДФ=yyyy-MM-ddTHH:mm:ss"));
		НоваяЗаписьXML.ЗаписатьАтрибут("time",      Формат(ДлительностиНаборов[Набор.Имя],                   "ЧРД=.; ЧН=0; ЧГ="));
		НоваяЗаписьXML.ЗаписатьАтрибут("tests",     Формат(КоличествоТестовНаборов[Набор.Имя],               "ЧРД=.; ЧН=0; ЧГ="));
		НоваяЗаписьXML.ЗаписатьАтрибут("errors",    Формат(КоличествоОшибокИнфраструктурыНаборов[Набор.Имя], "ЧРД=.; ЧН=0; ЧГ="));
		НоваяЗаписьXML.ЗаписатьАтрибут("failures",  Формат(КоличествоОшибокНаборов[Набор.Имя],               "ЧРД=.; ЧН=0; ЧГ="));
		НоваяЗаписьXML.ЗаписатьАтрибут("skipped",   Формат(КоличествоПропущенныхНаборов[Набор.Имя],          "ЧРД=.; ЧН=0; ЧГ="));
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("properties");
		Для Каждого СвойствоНабора Из Набор Цикл
			
			ЭтоСлужебноеСвойство = (СвойствоНабора.Ключ = "Имя")
			                   ИЛИ (СвойствоНабора.Ключ = "ДатаНачала")
			                   ИЛИ (СвойствоНабора.Ключ = "ТестКейсы")
			                   ИЛИ (СвойствоНабора.Ключ = "ИдентификаторНабора");
			
			Если Не ЭтоСлужебноеСвойство Тогда
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("property");
				НоваяЗаписьXML.ЗаписатьАтрибут("name",  СвойствоНабора.Ключ);
				НоваяЗаписьXML.ЗаписатьАтрибут("value", ?(ЗначениеЗаполнено(СвойствоНабора.Значение),
														СвойствоНабора.Значение, ""));
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли; 
			
		КонецЦикла; 
		НоваяЗаписьXML.ЗаписатьКонецЭлемента(); // properties
		
		Для Каждого ТестКейс Из Набор.ТестКейсы Цикл
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("testcase");
			НоваяЗаписьXML.ЗаписатьАтрибут("classname", ТестКейс.Тип);
			НоваяЗаписьXML.ЗаписатьАтрибут("name",      ТестКейс.Имя);
			НоваяЗаписьXML.ЗаписатьАтрибут("time",      Формат(ТестКейс.Длительность, "ЧРД=.; ЧН=0; ЧГ="));
			
			Если ТестКейс.Пропускается Тогда
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("skipped");
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ТестКейс.Ошибки.Количество() > 0 Тогда
				Для Каждого Ошибка Из ТестКейс.Ошибки Цикл
					НоваяЗаписьXML.ЗаписатьНачалоЭлемента("failure");
					НоваяЗаписьXML.ЗаписатьАтрибут("type",    Ошибка.Тип);
					НоваяЗаписьXML.ЗаписатьАтрибут("message", Ошибка.Сообщение);
					НоваяЗаписьXML.ЗаписатьТекст(Ошибка.Текст);
					НоваяЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЦикла; 
			ИначеЕсли ЗначениеЗаполнено(ТестКейс.ОшибкаИнфраструктуры) Тогда
				НоваяЗаписьXML.ЗаписатьНачалоЭлемента("error");
				НоваяЗаписьXML.ЗаписатьТекст(ТестКейс.ОшибкаИнфраструктуры);
				НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли; 
			
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла; 
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
	
	КонецЦикла; 
	
	НоваяЗаписьXML.ЗаписатьКонецЭлемента();
	НоваяЗаписьXML.Закрыть();
	
КонецПроцедуры

#КонецОбласти
