#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

# Область ПрограммныйИнтерфейс

//Возвращает имя профиля для подключения TestClient
//
// Параметры:
//  Роль - СправочникСсылка.ПрофилиПользователей.
//  НастройкиБДДляЗапускаТестовИзСценария - Структура
//  ЭкранироватьСпецСимволы - Булево
//
// Возвращаемое значение:
//  Строка
//
Функция ИмяПрофиляTestClient(Роль,НастройкиБДДляЗапускаТестовИзСценария,ЭкранироватьСпецСимволы) Экспорт
	ИмяПрофиля = Роль.Наименование;
	Если Не ЗначениеЗаполнено(ИмяПрофиля) Тогда
		ИмяПрофиля = "РольНеУказана";
	КонецЕсли;	 
	Стр = СокрЛП(ИмяПрофиля) + ". База: " + СокрЛП(НастройкиБДДляЗапускаТестовИзСценария.СтрокаИБ);
	
	Если ЭкранироватьСпецСимволы Тогда
		ЭкранироватьОсновныеСпецСимволыGherkin(Стр);
	КонецЕсли;	 
	
	Возврат Стр;
КонецФункции	

//Возвращает соответствие по данным переданной базы
//
//
// Параметры:
//  ЭталоннаяБазаТестирования - Справочник.ЭталонныеБазыТестирования.
//
// Возвращаемое значение:
//  Структура - Набор настроек
//
Функция ДанныеПользователейЭталоннойБазы(ЭталоннаяБазаТестирования) Экспорт
	ДанныеЭталоннойБазы = ПользователиЭталоннойБазы(ЭталоннаяБазаТестирования);
	
	Результат = Новый Соответствие;
	Для Каждого Пользователь Из ДанныеЭталоннойБазы Цикл
		Результат.Вставить(Пользователь.ПрофильПользователя,
		    Новый Структура("Логин,Пароль,ИмяПрофиля",Пользователь.Логин, Пользователь.Пароль,
				Пользователь.ПрофильПользователяНаименование));
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

//Возвращает настройки БД для запуска тестов
//
// Возвращаемое значение:
//  Структура - Набор настроек
//
Функция НастройкиБДДляЗапускаТестовИзСценария() Экспорт
	СохраненныеНастройки = Неопределено;
	
	Если НЕ РаботаВРежимеВнешнейОбработки Тогда
		//сохраненные настройки используются только для режима, когда обработка находится внутри СППР
		СохраненныеНастройки = Вычислить(
		   "ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(""Тестирование"", ""НастройкиДляЗапускаТестовИзСценария"")");
	КонецЕсли;	 
	
	Если СохраненныеНастройки <> Неопределено Тогда
		Если СохраненныеНастройки.Свойство("ЭталоннаяБаза") Тогда
			ДанныеПользователейЭталоннойБазы = ДанныеПользователейЭталоннойБазы(СохраненныеНастройки.ЭталоннаяБаза);
		Иначе	
			ДанныеПользователейЭталоннойБазы = Новый Соответствие;
		КонецЕсли;
		
		СохраненныеНастройки.Вставить("ДанныеПользователейЭталоннойБазы",ДанныеПользователейЭталоннойБазы);
		
		Если НЕ СохраненныеНастройки.Свойство("КлючиЗапускаTestClient") Тогда
			СохраненныеНастройки.Вставить("КлючиЗапускаTestClient","");
		КонецЕсли;	 
		Если НЕ СохраненныеНастройки.Свойство("КлючиЗапускаTestManager") Тогда
			СохраненныеНастройки.Вставить("КлючиЗапускаTestManager","");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат СохраненныеНастройки;
КонецФункции	

// Заполняет таблицу параметров из дерева значений
//
// Параметры:
//  Дерево - ДеревоЗначений
//  ТаблицаПараметров - ТаблицаЗначений
//
Процедура ПараметрыВходящиеИзДерева(Дерево,ТаблицаПараметров) Экспорт
	ИДОбщий = 0;
	ЗаполнитьПараметрыВходящиеИзДереваРекурсивно(Дерево,ТаблицаПараметров,ИДОбщий);
КонецПроцедуры

//Возвращает данные для подключения TestClient
//
// Параметры:
//  ПрофильПользователя - СправочникСсылка.ПрофилиПользователей.
//  БазаДанных - СправочникСсылка.ЭталонныеБазы.
//
// Возвращаемое значение:
//  Структура или Неопределено.
//
Функция ДанныеДляПодключенияКБДTestClient(ПрофильПользователя,БазаДанных,НастройкаСценария) Экспорт
	Возврат Обработки.СборкаТекстовСценариев.ДанныеДляПодключенияКБДTestClient(ПрофильПользователя,БазаДанных,НастройкаСценария);
КонецФункции	

//Возвращает текст процесса по переданным параметрам
//
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстПроцесса(Параметры) Экспорт
	ТекстыСценариев                     = Параметры.ОбъектТекстыСценариев.ТекстыСценариев;
	ЗаголовокЗначенияПараметровСценария = Параметры.ОбъектТекстыСценариев.ЗаголовокЗначенияПараметровСценария;
	ФОИмеющиеОдноЗначение               = Параметры.ОбъектТекстыСценариев.ФОИмеющиеОдноЗначение;
	ФОИмеющиеНесколькоЗначений          = Параметры.ОбъектТекстыСценариев.ФОИмеющиеНесколькоЗначений;
	ШагиДоТеста                         = Параметры.ШагиДоТеста;
	ШагиПроверка                        = Параметры.ШагиПроверка;
	ШагиПослеТеста                      = Параметры.ШагиПослеТеста;
	ЭтоПроцесс                          = Параметры.ЭтоПроцесс;
	
	Если НЕ Параметры.ЧтениеИзТекста И НЕ Параметры.Свойство("ДанныеОбъекта") Тогда
		Параметры.Вставить("ДанныеОбъекта", ДанныеПроцесса(Параметры.Процесс));
	КонецЕсли;	 
	
	Если НЕ Параметры.ЧтениеИзТекста И НЕ Параметры.Свойство("НаборСвойствПроцесс") Тогда
		Параметры.Вставить("НаборСвойствПроцесс",
			НаборСвойствОбъекта(Параметры.ДанныеОбъекта.Проект, "НаборСвойствДляПроцессовВыгружаемый"));
	КонецЕсли;	 
	
	ВставитьВКаждыйСценарийПроверкуЧтоФОСНесколькимиЗначениямиИмеютНужноеЗначение(ТекстыСценариев,
	                                                                    ФОИмеющиеНесколькоЗначений);
	ТекстТеги = "";
	Если Параметры.ЧтениеИзТекста Тогда
		Для Каждого СтрокаТегиПроцесса Из Параметры.ТегиПроцесса Цикл
			ТекстТеги = ТекстТеги + "@" + СтрокаТегиПроцесса.Имя + Символы.ПС;
		КонецЦикла;	 
		Для Каждого СтрокаТегиТеста Из Параметры.ТегиТеста Цикл
			ТекстТеги = ТекстТеги + "@" + СтрокаТегиТеста.Имя + Символы.ПС;
		КонецЦикла;	 
	Иначе	
		ТегиПроцесса = ТегиПроцесса(Параметры.Процесс, Параметры.НаборСвойствПроцесс);
		Для Каждого СтрокаТегиПроцесса Из ТегиПроцесса Цикл
			ТекстТеги = ТекстТеги + "@" + СтрокаТегиПроцесса.Имя + Символы.ПС;
		КонецЦикла;	 
	КонецЕсли;	 
	
	ТекстТеги = СокрП(ТекстТеги);
		
	ТекстЗаголовок = ТекстЗаголовок(Параметры, ТекстыСценариев, ТекстТеги);
	
	Если ЭтоПроцесс Тогда
		Если ТипЗнч(Параметры.Процесс) = Тип("Строка") Тогда
			ТекстЗаголовок = ТекстЗаголовок + Символы.ПС + Символы.ПС + "@КодНастройкиПроцесса=" + СокрЛП(Параметры.КодНастройки);
			ТекстЗаголовок = ТекстЗаголовок + Символы.ПС + "@ПолныйКодПроцесса=" + СокрЛП(Параметры.ПолныйКодПроцесса);
			ТекстЗаголовок = ТекстЗаголовок + Символы.ПС + "Сценарий: " + СокрЛП(Параметры.Процесс);
		Иначе	
			ТекстЗаголовок = ТекстЗаголовок + Символы.ПС + Символы.ПС + "Сценарий: " + СокрЛП(Параметры.ДанныеОбъекта.Наименование);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не ЭтоПроцесс Тогда
		Для Каждого ЭлементТекстыСценариев Из ТекстыСценариев Цикл
			ТекстОбщийКонтекст = ТекстОбщийКонтекст(ФОИмеющиеОдноЗначение,ШагиДоТеста,
			            ДанныеДляПодключенияКБДTestClient(ЭлементТекстыСценариев.Сценарий.ПрофильПользователя,Параметры.БазаДанных,Неопределено), ТекстЗаголовок);
		КонецЦикла;	
	КонецЕсли;	 
	
	ВставитьТекстОкончаниеВСценарии(ШагиПроверка,ШагиПослеТеста,ТекстыСценариев);
	
	Если Параметры.Свойство("ДанныеНомеровСтрок") Тогда
		ДанныеНомеровСтрок = Параметры.ДанныеНомеровСтрок;
	Иначе	
		ДанныеНомеровСтрок = Новый Массив;
	КонецЕсли;	 
	Текст = ОсновнойТекст(ТекстЗаголовок,ТекстОбщийКонтекст,ТекстыСценариев,
	                       ЗаголовокЗначенияПараметровСценария,ДанныеНомеровСтрок);
	
	Возврат Текст;
КонецФункции

//Возвращает текст сценария по переданным параметрам
//
// Параметры:
//  Параметры - Структура
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстСценария(Параметры) Экспорт
	ТекстыСценариев                     = Параметры.ОбъектТекстыСценариев.ТекстыСценариев;
	ЗаголовокЗначенияПараметровСценария = Параметры.ОбъектТекстыСценариев.ЗаголовокЗначенияПараметровСценария;
	ФОИмеющиеОдноЗначение               = Параметры.ОбъектТекстыСценариев.ФОИмеющиеОдноЗначение;
	ФОИмеющиеНесколькоЗначений          = Параметры.ОбъектТекстыСценариев.ФОИмеющиеНесколькоЗначений;
	ШагиДоТеста                         = Параметры.ШагиДоТеста;
	ШагиПроверка                        = Параметры.ШагиПроверка;
	ШагиПослеТеста                      = Параметры.ШагиПослеТеста;
	НастройкаСценария                   = Неопределено;
	ФормироватьЗаголовок = Истина;
	Если Параметры.Свойство("ФормироватьЗаголовок") Тогда
		ФормироватьЗаголовок = Параметры.ФормироватьЗаголовок;
	КонецЕсли;	
	Если Параметры.ОбъектТекстыСценариев.Свойство("НастройкаСценария") Тогда
		НастройкаСценария = Параметры.ОбъектТекстыСценариев.НастройкаСценария;
	КонецЕсли;	 
	
	Если НЕ Параметры.ЧтениеИзТекста И НЕ Параметры.Свойство("ДанныеОбъекта") Тогда
		Параметры.Вставить("ДанныеОбъекта", ДанныеСценарияПользователя(Параметры.Процесс));
	КонецЕсли;	 
	
	ВставитьВКаждыйСценарийПроверкуЧтоФОСНесколькимиЗначениямиИмеютНужноеЗначение(ТекстыСценариев,
	                                                                   ФОИмеющиеНесколькоЗначений);
	Если ФормироватьЗаголовок Тогда
		ТекстЗаголовок = ТекстЗаголовок(Параметры,ТекстыСценариев, "");
	Иначе
		ТекстЗаголовок = "";
	КонецЕсли;																	   
	
	Если Параметры.Свойство("ЧтениеИзGit") И Параметры.ЧтениеИзGit Тогда
		ДанныеДляПодключенияКБДTestClient = ДанныеДляПодключенияКБДTestClient(Параметры.ПрофильПользователяGit
		    ,Параметры.БазаДанных,НастройкаСценария);
	ИначеЕсли Параметры.ЧтениеИзТекста Тогда
		ДанныеДляПодключенияКБДTestClient = ДанныеДляПодключенияКБДTestClientТекст(Параметры);
	Иначе	
		ДанныеДляПодключенияКБДTestClient = ДанныеДляПодключенияКБДTestClient(Параметры.Процесс.ПрофильПользователя
		    ,Параметры.БазаДанных,НастройкаСценария);
	КонецЕсли;	 
	
	Если ФормироватьЗаголовок Тогда
		ТекстОбщийКонтекст = ТекстОбщийКонтекст(ФОИмеющиеОдноЗначение,ШагиДоТеста,ДанныеДляПодключенияКБДTestClient, ТекстЗаголовок);
	Иначе	
		ТекстОбщийКонтекст = "";
	КонецЕсли;	
	
	ВставитьТекстОкончаниеВСценарии(ШагиПроверка,ШагиПослеТеста,ТекстыСценариев);
	
	ДанныеНомеровСтрок = Неопределено;
	Параметры.Свойство("ДанныеНомеровСтрок",ДанныеНомеровСтрок);
	
	Текст = ОсновнойТекст(ТекстЗаголовок,ТекстОбщийКонтекст,ТекстыСценариев,
	    ЗаголовокЗначенияПараметровСценария,ДанныеНомеровСтрок);
													 
	Если Параметры.ИсключитьСлужебныеСловаИзТекстаСценария Тогда
		ИсключитьСлужебныеСловаИзТекстаСценария(Текст);
	КонецЕсли;	 												 
	
	Если Параметры.ИсключитьСлужебныеСловаИзТекстаСценария Тогда
		МногоязыковаяПоддержка(Текст,Неопределено);
	КонецЕсли;	 
	
	Возврат Текст;
КонецФункции

// Обновляет из БД таблицу ВерсииШаблонов
//
// Параметры:
//  ПараметрыВерсийСценариев - Структура - со свойствами:
//  	* Дерево - ДеревоЗначений
//  	* ВерсииШаблонов - ТаблицаЗначений
//  	* Проект - Справочник.Проекты
//  	* Сценарий - Справочник.СценарииРаботыПользователей
//
Процедура ВерсииШаблонов(ПараметрыВерсийСценариев) Экспорт
	
	Дерево = ПараметрыВерсийСценариев.Дерево;
	ВерсииШаблонов = ПараметрыВерсийСценариев.ВерсииШаблонов;
	Проект = ПараметрыВерсийСценариев.Проект;
	Сценарий = ПараметрыВерсийСценариев.Сценарий;
	
	ДопПараметры = Неопределено;
	Если ПараметрыВерсийСценариев.Свойство("ЧтениеИзGit") Тогда
		ДопПараметры = ПараметрыВерсийСценариев;
	КонецЕсли;	 
	 
	ТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев(ПараметрыВерсийСценариев, ДопПараметры);
	МассивПервыхСловНРег     = МассивПервыхСловGherkinНРег();
	ВерсииШаблонов.Очистить();
	ЗаполнитьВерсииШаблоновРекурсивно(Дерево,ВерсииШаблонов,ТаблицаШаблоновСценариев,МассивПервыхСловНРег,1,ПараметрыВерсийСценариев);
КонецПроцедуры

// Преобразует текст перед установкой в поле форматированного документа
//
// Параметры:
//  ТекстДокумента - Строка
//
Процедура СделатьСтандартнуюПодготовкуТекстаHTML(ТекстДокумента) Экспорт
	ТекстДокумента = СтрЗаменить(ТекстДокумента,Символы.ПС,"<br>");
	ТекстДокумента = СтрЗаменить(ТекстДокумента,"&lt;","~~Экранированиеlt~~");
	ТекстДокумента = СтрЗаменить(ТекстДокумента,"&gt;","~~Экранированиеgt~~");
	ТекстДокумента = СтрЗаменить(ТекстДокумента,"&","&amp;");
	ТекстДокумента = СтрЗаменить(ТекстДокумента,"~~Экранированиеlt~~", "&lt;");
	ТекстДокумента = СтрЗаменить(ТекстДокумента,"~~Экранированиеgt~~", "&gt;");
КонецПроцедуры

// Преобразует схему во внутреннем формате в виде дерева значений в форматированный документ
//
// Параметры:
//  ДеревоСхемы - ДеревоЗначений
//  ФорматированныйДокумент - ФорматированныйДокумент
//  ШаблонHTML - ТекстовыйДокумент
//  ДополнительныеПараметры - Структура
//
Процедура ФорматированныйДокументПоДеревуСхемы(ДеревоСхемы,ФорматированныйДокумент,
	       ШаблонHTML,ДополнительныеПараметры) Экспорт
	ТекстHTML = ШаблонHTML.ПолучитьТекст();
	
	ТекстДокумента = СоздатьТекстФорматированногоДокументаПоДеревуСхемы(ДеревоСхемы,ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ДелатьРаскраску Тогда
		СделатьСтандартнуюПодготовкуТекстаHTML(ТекстДокумента);
		ТекстHTML      = СтрЗаменить(ТекстHTML,"<ПроизвольныйТекст>",ТекстДокумента);
		ФорматированныйДокумент.УстановитьHTML(ТекстHTML,Новый Структура);
	Иначе	
		ДополнительныеПараметры.Вставить("ТекстДокумента",ТекстДокумента);
	КонецЕсли;	 
КонецПроцедуры

// Преобразует обычный текст в форматированный текст сценария
//
// Параметры:
//  Текст - Строка
//  ФД - ФорматированныйДокумент
//  Проект - Справочники.Проекты
//  Сценарий - Справочники.Сценарии
//  ДополнительныеПараметры - Структура
// 
Процедура ТекстФорматированныйТекстСценарияИзОбычногоТекста(Текст,ФД,Проект,Сценарий,ДополнительныеПараметры) Экспорт
	ДеревоСхемы = СоздатьДеревоСхемы();
	
	ДеревоСценарияИзТекста(Текст,ДеревоСхемы,Проект,Сценарий,ДополнительныеПараметры);
	
	МногоязыковаяПоддержка(Текст,ДеревоСхемы);
	
	ШаблонHTML   = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML");
	ФорматированныйДокументПоДеревуСхемы(ДеревоСхемы,ФД,ШаблонHTML,ДополнительныеПараметры);
КонецПроцедуры

// Преобразует обычный текст во внутренний формат в виде дерева значений
//
// Параметры:
//  Текст - Строка
//  ДеревоСхемы - ДеревоЗначений
//  Проект - Справочники.Проекты
//  Сценарий - Справочники.Сценарии
// 
// Возвращаемое значение:
//  Структура
//
Процедура ДеревоСценарияИзТекста(Текст,ДеревоСхемы,Проект,Сценарий,ДополнительныеПараметры) Экспорт
	
	ПараметрыВерсийСценариев = Новый Структура;
	ПараметрыВерсийСценариев.Вставить("Проект",Проект);
	ПараметрыВерсийСценариев.Вставить("Сценарий",Сценарий);
	Если НЕ ДополнительныеПараметры.ЧтениеИзТекста Тогда
		Если Сценарий = Неопределено Тогда
			ПараметрыВерсийСценариев.Вставить("ФункцияСистемы",Неопределено);
		ИначеЕсли ДополнительныеПараметры.Свойство("ЧтениеИзGit") И	ДополнительныеПараметры.ЧтениеИзGit Тогда
			ПараметрыВерсийСценариев.Вставить("ФункцияСистемы",ДополнительныеПараметры.ФункцияСистемы);
		Иначе	
			ПараметрыВерсийСценариев.Вставить("ФункцияСистемы",Сценарий.ФункцияСистемы);
		КонецЕсли;	 
	Иначе	
		//значит это вариант сборки сценария из файла
		ПараметрыВерсийСценариев.Вставить("ФункцияСистемы",Неопределено);
	КонецЕсли;	 
		
	ТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев(ПараметрыВерсийСценариев,ДополнительныеПараметры);
	ДеревоСценарияИзТекстаСлужебный(Текст,ДеревоСхемы,ТаблицаШаблоновСценариев,Сценарий,ДополнительныеПараметры);
		
КонецПроцедуры

// Возвращает флаг получения из строки снипета
//
// Параметры:
//  Стр - Строка
//  МассивПервыхСловНРег - Массив
//  КешПараметровСтроки - ТаблицаЗначений
// 
// Возвращаемое значение:
//  Булево
//
Функция СнипетПоСтроке(Стр,МассивПервыхСловНРег = Неопределено,КешПараметровСтроки = Неопределено) Экспорт
	
	Если МассивПервыхСловНРег = Неопределено Тогда
		МассивПервыхСловНРег = МассивПервыхСловGherkinНРег();
	КонецЕсли;	 
	
	МассивСлов  = СтрРазделить(Стр," ",Истина);
	
	ПервоеСлово   = МассивСлов[0];
	
	Если ПервоеСлово = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	НРегСтр = НРег(Стр);
	Для Каждого КлючевоеСлово Из МассивПервыхСловНРег Цикл
		Позиция = Найти(НРегСтр, КлючевоеСлово);	
		Если Позиция = 1 и Сред(НРегСтр,СтрДлина(КлючевоеСлово)+1,1) = " " Тогда
			Стр = СнипетИзСтроки(СокрЛП(Сред(Стр,СтрДлина(КлючевоеСлово)+1)),КешПараметровСтроки,Стр);
			Возврат Истина; 
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

// Возвращает снипет по переданной строке
//
// Параметры:
//  Стр - Строка
//  КешПараметровСтроки - ТаблицаЗначений
// 
// Возвращаемое значение:
//  Булево
//
Функция СнипетИзСтроки(Знач Стр,КешПараметровСтроки = Неопределено,СтрокаВКеш = Неопределено) Экспорт
	Параметры = ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(Стр,,КешПараметровСтроки,СтрокаВКеш);
	УбратьПараметрыИзСтроки(Стр,Параметры);
	
	МассивСтрок = СтрРазделить(Стр," ",Ложь);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		МассивСтрок[Ккк] = СокрЛП(МассивСтрок[Ккк]);
		МассивСтрок[Ккк] = ВРег(Лев(МассивСтрок[Ккк],1)) + Сред(МассивСтрок[Ккк],2);
	КонецЦикла;	
	
	Стр = СтрСоединить(МассивСтрок,"");
	
	Возврат УбратьЗапрещенныеСимволыИзСнипет(Стр);
КонецФункции	

// Возвращает полное дерево сценария, считывая его из БД
//
// Параметры:
//  Сценарий - Справочник.СценарииРаботыПользователей
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево выполнения сценария
//
Функция ДеревоСценарияИзБазыДанных(Сценарий,СтруктураПараметров, СценарийUID = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Сценарий) Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДеревоСхемы = ПолучитьДеревоСценария(Сценарий,СтруктураПараметров, СценарийUID);
	
	Если ТипЗнч(ДеревоСхемы) = Тип("ДеревоЗначений") Тогда
		Если ДеревоСхемы.Колонки.Найти("ДополнительныеСвойства") = Неопределено Тогда
			ДеревоСхемы.Колонки.Добавить("ДополнительныеСвойства");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ДеревоСхемы;
КонецФункции	

// Возвращает ветки условия
//
// Параметры:
//  Дерево - ДеревоЗначений
// 
// Возвращаемое значение:
//  Массив = массив веток дерева
//
Функция ВеткиУсловия(Дерево) Экспорт
	Массив = Новый Массив;
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаКонецЕслиПрепроцессор()
  			 или СтрокаДерева.ТипЭлемента = ТипЭлементаКонецЕсли()
  			 или СтрокаДерева.ТипЭлемента = ТипЭлементаКонецЕслиEng()
  			 или СтрокаДерева.ТипЭлемента = ТипЭлементаКонецЦикла()
  			 или СтрокаДерева.ТипЭлемента = ТипЭлементаКонецЦиклаEng()
 			Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(СтрокаДерева);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

// Делает экранирование спецсимволов < и >
//
// Параметры:
//  Стр - Строка
// 
Процедура ЭкранироватьУгловыеСкобки(Стр) Экспорт
	Стр = СтрЗаменить(Стр,"<","&lt;");
	Стр = СтрЗаменить(Стр,">","&gt;");
КонецПроцедуры

// Делает разэкранирование спецсимволов < и >
//
// Параметры:
//  Стр - Строка
// 
Процедура ВернутьУгловыеСкобки(Стр) Экспорт
	Стр = СтрЗаменить(Стр,"&lt;","<");
	Стр = СтрЗаменить(Стр,"&gt;",">");
КонецПроцедуры

// Делает разэкранирование спецсимволов \[ и \]
//
// Параметры:
//  Стр - Строка
// 
Процедура РазэкранироватьУгловыеСкобки(Стр) Экспорт
	Стр = СтрЗаменить(Стр,"\[","[");
	Стр = СтрЗаменить(Стр,"\]","]");
КонецПроцедуры

// Делает экранирование спецсимволов |, ", '
//
// Параметры:
//  Стр - Строка
// 
Процедура ЭкранироватьСпецСимволы(Стр, Символ) Экспорт
	Стр = СтрЗаменить(Стр,"\""","""");
	Стр = СтрЗаменить(Стр,"\'","'");
	Стр = СтрЗаменить(Стр,"\\","~ПредставлениеЭкранированныйСлеш~");
	Стр = СтрЗаменить(Стр,"\[","~ПредставлениеЛевойКвадратнойСкобки~");
	Стр = СтрЗаменить(Стр,"\]","~ПредставлениеПравойКвадратнойСкобки~");
	Стр = СтрЗаменить(Стр,"\|","~ПредставлениеВертикальнойЧерты~");
	Если Символ <> "'" Тогда
		Стр = СтрЗаменить(Стр,"""","\""");
	КонецЕсли;	 
	Стр = СтрЗаменить(Стр,"'","\'");
	Стр = СтрЗаменить(Стр,"~ПредставлениеВертикальнойЧерты~","\|");
	Стр = СтрЗаменить(Стр,"~ПредставлениеЛевойКвадратнойСкобки~","\[");
	Стр = СтрЗаменить(Стр,"~ПредставлениеПравойКвадратнойСкобки~","\]");
	Стр = СтрЗаменить(Стр,"~ПредставлениеЭкранированныйСлеш~","\\");
	ЭкранироватьУгловыеСкобки(Стр);
КонецПроцедуры

// Обрабатывает текст сценария чтобы исключить из него служебные конструкции
//
// Параметры:
//  ТекстСценария - Строка
//
Процедура ИсключитьСлужебныеСловаИзТекстаСценария(ТекстСценария) Экспорт
	Если ТекстСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(ТекстСценария,Символы.ПС);
	
	//исключим лишние служебные слова
	НовыйМассив = Новый Массив;
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Ккк];
		Если СокрЛП(НРег(Стр)) = "конецесли" Тогда
			НовыйМассив.Добавить("");
			Продолжить;
		ИначеЕсли СокрЛП(НРег(Стр)) = "endif" Тогда
			НовыйМассив.Добавить("");
			Продолжить;
		ИначеЕсли СокрЛП(НРег(Стр)) = "конеццикла" Тогда
			НовыйМассив.Добавить("");
			Продолжить;
		ИначеЕсли СокрЛП(НРег(Стр)) = "enddo" Тогда
			НовыйМассив.Добавить("");
			Продолжить;
		ИначеЕсли СокрЛП(НРег(Стр)) = "конецпопытки" Тогда
			НовыйМассив.Добавить("");
			Продолжить;
		ИначеЕсли СокрЛП(НРег(Стр)) = "endtry" Тогда
			НовыйМассив.Добавить("");
			Продолжить;
		КонецЕсли;	 
		
		Если НРег(Лев(СокрЛП(Стр),4)) = "цикл" Тогда
			Позиция = Найти(НРег(Стр),"цикл");
			Стр = ПолучитьСтрокуЦикла(Стр,Позиция,СтрДлина("цикл"),"И");
		ИначеЕсли НРег(Лев(СокрЛП(Стр),2)) = "do" Тогда
			Позиция = Найти(НРег(Стр),"do");
			Стр = ПолучитьСтрокуЦикла(Стр,Позиция,СтрДлина("do"),"And");
		КонецЕсли;	 
		
		НовыйМассив.Добавить(Стр);
	КонецЦикла;	
	
	ТекстСценария = СтрСоединить(НовыйМассив,Символы.ПС);
КонецПроцедуры

// Делает экранирование спецсимволов \, ", '
//
// Параметры:
//  Стр - Строка
// 
Процедура ЭкранироватьОсновныеСпецСимволыGherkin(Стр) Экспорт
	Стр = СтрЗаменить(Стр,"\","\\");
	Стр = СтрЗаменить(Стр,"""","\""");
	Стр = СтрЗаменить(Стр,"'","\'");
КонецПроцедуры

// Возвращает данные для получения текста сценария процесса
//
// Параметры:
//  Процесс - Справочник.Процессы.
//  ПараметрыФормированияТекстаСценария - Структура
// 
// Возвращаемое значение:
//  Структура
//
Функция ДанныеДляТекстаСценарияПроцесса(Процесс,ПараметрыФормированияТекстаСценария) Экспорт
	
	Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста	Тогда
		ШагиПроцесса = ШагиПроцессаИзТекста(ПараметрыФормированияТекстаСценария,
			ПараметрыФормированияТекстаСценария.UIDПроцесса);
	Иначе	
		ШагиПроцесса = ШагиПроцесса(Процесс);
	КонецЕсли;	 
	
	ДанныеВложенныхСценариев = ДанныеВложенныхСценариев();
	
	Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста	Тогда
		ПараметрыПроцесса = Новый ТаблицаЗначений;
		ПараметрыПроцесса.Колонки.Добавить("Имя");
		ПараметрыПроцесса.Колонки.Добавить("Значение");
		ПараметрыПроцесса.Колонки.Добавить("ТипПараметра");
		Для Каждого СтрокаТаблицаПараметров Из ПараметрыФормированияТекстаСценария.ТаблицаПараметров Цикл
			СтрокаПараметрыПроцесса = ПараметрыПроцесса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметрыПроцесса,СтрокаТаблицаПараметров);
		КонецЦикла;	 
	Иначе	
		ПараметрыПроцесса = ПараметрыПроцесса(Процесс);
	КонецЕсли;	 
	ПараметрыПроцесса.Колонки.Добавить("ЗначенияПараметра");
	
	МассивСценариев = Новый Массив;
	Для Каждого СтрокаШагиПроцесса Из ШагиПроцесса Цикл
		Сценарий = Неопределено;
		ВложенныйПроцесс = Неопределено;
		
		Если СтрокаШагиПроцесса.ТипШага = 1 Тогда
			Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
				ВложенныйПроцесс = СтрокаШагиПроцесса.ВложенныйПроцессНаименование;
			Иначе	
				ВложенныйПроцесс = СтрокаШагиПроцесса.ВложенныйПроцесс;
			КонецЕсли;	 
			СхемаДерево = ПолучитьДеревоВложенногоПроцесса(СтрокаШагиПроцесса,ПараметрыФормированияТекстаСценария,
			ПараметрыПроцесса,ПараметрыФормированияТекстаСценария);
		Иначе	
			Сценарий = СтрокаШагиПроцесса.Сценарий;
			
			СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Найти(Сценарий,"Сценарий");
			
			Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
				Если ПустаяСтрока(СтрокаШагиПроцесса.СценарийНаименование) Тогда
					Продолжить;
				КонецЕсли;	 
				
				ПараметрыФормированияТекстаСценария.Вставить("UIDСценария",СтрокаШагиПроцесса.СценарийUID);
				ПараметрыФормированияТекстаСценария.Вставить("ИмяСценария",СтрокаШагиПроцесса.СценарийНаименование);
				ПараметрыФормированияТекстаСценария.Вставить("КодСценария",СтрокаШагиПроцесса.КодСценария);
				ДанныеСценариев = ПараметрыФормированияТекстаСценария.ДанныеСценариев;
				СтрокаДанныеСценариев = ДанныеСценариев.Найти(СтрокаШагиПроцесса.СценарийUID,"UID");
				Если СтрокаДанныеСценариев = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдены данные сценария: %1. Процесс: %2'"), Сценарий,Процесс);
				КонецЕсли;	 
				ПараметрыФормированияТекстаСценария.Вставить("UIDФункцияСистемы",СтрокаДанныеСценариев.UIDФункцияСистемы);
				ПараметрыФормированияТекстаСценария.Вставить("ПараметрыСценария",СтрокаДанныеСценариев.ПараметрыСценария);
			КонецЕсли;	 
			
			Если СтрокаДанныеВложенныхСценариев = Неопределено Тогда
				СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Добавить();
				СтрокаДанныеВложенныхСценариев.Сценарий = Сценарий;
				Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
					СтрокаДанныеВложенныхСценариев.ПараметрыВходящие = ПустаяТаблицаПараметров();
				Иначе	
					СтрокаДанныеВложенныхСценариев.ПараметрыВходящие = ПараметрыВходящиеСценария(Сценарий);
				КонецЕсли;	 
				
				СтрокаДанныеВложенныхСценариев.ДеревоСхемы 
				    = ПолучитьДеревоСценария(СтрокаДанныеВложенныхСценариев.Сценарий,ПараметрыФормированияТекстаСценария);
			КонецЕсли;
			
			СтрокаДанныеСценариев = Неопределено;
			Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
				ПараметрыФормированияТекстаСценария.Вставить("UIDСценария",СтрокаШагиПроцесса.СценарийUID);
				ПараметрыФормированияТекстаСценария.Вставить("ИмяСценария",СтрокаШагиПроцесса.СценарийНаименование);
				ПараметрыФормированияТекстаСценария.Вставить("КодСценария",СтрокаШагиПроцесса.КодСценария);
				ДанныеСценариев = ПараметрыФормированияТекстаСценария.ДанныеСценариев;
				СтрокаДанныеСценариев = ДанныеСценариев.Найти(СтрокаШагиПроцесса.СценарийUID,"UID");
				Если СтрокаДанныеСценариев = Неопределено Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдены данные сценария: %1. Процесс: %2'"), Сценарий,Процесс);
				КонецЕсли;	 
				ПараметрыФормированияТекстаСценария.Вставить("UIDФункцияСистемы",СтрокаДанныеСценариев.UIDФункцияСистемы);
				ПараметрыФормированияТекстаСценария.Вставить("ПараметрыСценария",СтрокаДанныеСценариев.ПараметрыСценария);
			КонецЕсли;	 
			ПараметрыФормированияТекстаСценария.Вставить("КомпилироватьСценарий",Истина);
			СхемаДерево = ПолучитьДеревоСценария(Сценарий,ПараметрыФормированияТекстаСценария);
		КонецЕсли;	 
		
		
		Если ТипЗнч(СхемаДерево) <> Тип("ДеревоЗначений") Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена схема сценария: %1'"), СтрокаШагиПроцесса.Наименование);
		КонецЕсли;	
		
		КоличествоВариантовСценария = 1;
		ОбработатьЗначенияПараметровСценария(ПараметрыПроцесса,КоличествоВариантовСценария);
		Если КоличествоВариантовСценария > 100 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Слишком много вариантов сценария: %1'"),
			                            КоличествоВариантовСценария);
		КонецЕсли;	 
		
		Если СтрокаШагиПроцесса.ТипШага = 0 Тогда
			Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
				ЗначенияВходящихПараметров = ПараметрыШагаПроцессаИзТекста(СтрокаШагиПроцесса,ПараметрыПроцесса,
				ПараметрыФормированияТекстаСценария, ПараметрыФормированияТекстаСценария.UIDПроцесса);
				ДополнитьПередаваемыеПараметрыПараметрамиПоУмолчанию(ЗначенияВходящихПараметров,
				СтрокаДанныеСценариев.ПараметрыСценария);
			Иначе	
				ЗначенияВходящихПараметров = ПараметрыШагаПроцесса(СтрокаШагиПроцесса.ШагПроцесса,ПараметрыПроцесса,
				СтрокаШагиПроцесса,ШагиПроцесса,ПараметрыФормированияТекстаСценария);
				ДополнитьПередаваемыеПараметрыПараметрамиПоУмолчанию(ЗначенияВходящихПараметров,
				СтрокаДанныеВложенныхСценариев.ПараметрыВходящие);
			КонецЕсли;
		КонецЕсли;
		
		ДоТеста       = Новый ТаблицаЗначений;
		ПроверкаТеста = Новый ТаблицаЗначений;
		ПослеТеста    = Новый ТаблицаЗначений;
		
		НаборПараметров = Новый Структура;
		НаборПараметров.Вставить("ПараметрыСНесколькимиЗначениями",Новый Массив);
		НаборПараметров.Вставить("ТаблицаПараметров",ЗначенияВходящихПараметров);
		
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЧтениеИзТекста",Ложь);
		Если ПараметрыФормированияТекстаСценария.Свойство("ЧтениеИзТекста") Тогда
			СтруктураПараметров.Вставить("ЧтениеИзТекста",ПараметрыФормированияТекстаСценария.ЧтениеИзТекста);
		КонецЕсли;	 
		
		ПараметрыДляПолученияТекстаСценария = Новый Структура;
		ПараметрыДляПолученияТекстаСценария.Вставить("Сценарий",Сценарий);
		ПараметрыДляПолученияТекстаСценария.Вставить("ВложенныйПроцесс",ВложенныйПроцесс);
		ПараметрыДляПолученияТекстаСценария.Вставить("Процесс",Процесс);
		ПараметрыДляПолученияТекстаСценария.Вставить("НаборПараметров",НаборПараметров);
		ПараметрыДляПолученияТекстаСценария.Вставить("СхемаДерево",СхемаДерево);
		ПараметрыДляПолученияТекстаСценария.Вставить("ДанныеВложенныхСценариев",ДанныеВложенныхСценариев);
		ПараметрыДляПолученияТекстаСценария.Вставить("ЧтениеИзТекста",СтруктураПараметров.ЧтениеИзТекста);
		ПараметрыДляПолученияТекстаСценария.Вставить("СтруктураПараметров",ПараметрыФормированияТекстаСценария);
		ПараметрыДляПолученияТекстаСценария.Вставить("ДоТеста",ДоТеста);
		ПараметрыДляПолученияТекстаСценария.Вставить("ПроверкаТеста",ПроверкаТеста);
		ПараметрыДляПолученияТекстаСценария.Вставить("ПослеТеста",ПослеТеста);
		ПараметрыДляПолученияТекстаСценария.Вставить("НомерНабора",-1);
		ПараметрыДляПолученияТекстаСценария.Вставить("РазмерНабора",0);
		ПараметрыДляПолученияТекстаСценария.Вставить("ЭтоПроцесс",Истина);
		ПараметрыДляПолученияТекстаСценария.Вставить("ПросмотрСценария",ПараметрыФормированияТекстаСценария.ПросмотрСценария);
		ПараметрыДляПолученияТекстаСценария.Вставить("УровеньВложенности",0);
		ПараметрыДляПолученияТекстаСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",
		        ПараметрыФормированияТекстаСценария.ИсключитьСлужебныеСловаИзТекстаСценария);
				
		ПараметрыДляПолученияТекстаСценария.Вставить("ФормироватьДанныеПоНомерамСтрок",Ложь);
						
		Если СтрокаДанныеСценариев <> Неопределено Тогда
			ПараметрыДляПолученияТекстаСценария.Вставить("ПараметрыСценария",СтрокаДанныеСценариев.ПараметрыСценария);
		КонецЕсли;	 
		
		ИспользоватьИмяСценария = Ложь;
		Если СтруктураПараметров.Свойство("ИспользоватьИмяСценария") Тогда
			ИспользоватьИмяСценария = СтруктураПараметров.ИспользоватьИмяСценария;
		КонецЕсли;	 
		ПараметрыДляПолученияТекстаСценария.Вставить("ИспользоватьИмяСценария",ИспользоватьИмяСценария);
		ПараметрыДляПолученияТекстаСценария.Вставить("ТипШага",СтрокаШагиПроцесса.ТипШага);
		
		
		ПараметрыДляПолученияТекстаСценария.Вставить("ФормироватьДанныеПоНомерамСтрок",Ложь);
		Если СтруктураПараметров.ЧтениеИзТекста Тогда
			ПараметрыДляПолученияТекстаСценария.Вставить("ФормироватьДанныеПоНомерамСтрок",Истина);
			ПараметрыДляПолученияТекстаСценария.Вставить("ИмяСценария",СтрокаШагиПроцесса.Наименование);
			ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.Вставить("UIDШагПроцесса",
				СтрокаШагиПроцесса.ШагПроцессаUID);
			ПараметрыДляПолученияТекстаСценария.Вставить("ДанныеПроцессов",ПараметрыФормированияТекстаСценария.ДанныеПроцессов);
			
			СтрокаДанныеПроцессов = ПараметрыФормированияТекстаСценария.ДанныеПроцессов.Найти(СтрокаШагиПроцесса.ВложенныйПроцессUID, "UID");
			Если СтрокаДанныеПроцессов <> Неопределено Тогда
				ПараметрыДляПолученияТекстаСценария.Вставить("ПолныйКод",СтрокаДанныеПроцессов.ПолныйКод);
			КонецЕсли;	 
		Иначе	
			ПараметрыДляПолученияТекстаСценария.Вставить("ИмяСценария",СтрокаШагиПроцесса.Наименование);
		КонецЕсли;	 
		
		ПараметрыДляПолученияТекстаСценария.Вставить("ИсполнительШагаПроцесса",СтрокаШагиПроцесса.Исполнитель);
		
		ОбъектСценария = ТекстСценарияПоНаборуПараметров(ПараметрыДляПолученияТекстаСценария);
		
		МассивСценариев.Добавить(ОбъектСценария);
	КонецЦикла;	
	
	ЗаголовокЗначенияПараметровСценария = ЗаголовокЗначенияПараметровСценария(ПараметрыПроцесса);
	                        
	ОбъектТекстыСценариев = Новый Структура;
	ОбъектТекстыСценариев.Вставить("ТекстыСценариев",МассивСценариев);
	ОбъектТекстыСценариев.Вставить("ЗаголовокЗначенияПараметровСценария",ЗаголовокЗначенияПараметровСценария);
	ОбъектТекстыСценариев.Вставить("ФОИмеющиеОдноЗначение",Новый Массив);
	ОбъектТекстыСценариев.Вставить("ФОИмеющиеНесколькоЗначений",Новый Массив);
	
	Возврат ОбъектТекстыСценариев;
КонецФункции	

// Делает сборку текстов сценариев по данным, прочитанным из текстовых файлов
//
// Параметры:
//  ДанныеКаталогаСценариев - Массив
//  ДанныеЭталонныхБД - Массив
//  ДанныеСценариев - ТаблицаЗначений
// 
Процедура ТекстыСценариевИзТекстовыхДанных(ДанныеКаталогаСценариев,ДанныеЭталонныхБД,ДанныеСценариев,ДанныеНастроек) Экспорт
			 
	Если НЕ ВыполнятьСборкуСценариев И РаботаВРежимеВнешнейОбработки Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСценариевВОдномФайле = 0;
	МассивОбщийТекстСценария = Новый Массив;
	ИдМассиваОбщегоСценария = Неопределено;
	ДанныеСценариевКоторыеДобавляютсяКОсновному = Новый Массив;
	
	Для Каждого СтрокаДанныеНастроек Из ДанныеНастроек Цикл
		Если НЕ СтрокаДанныеНастроек.Компилировать Тогда
			Продолжить;
		КонецЕсли;
		
		Если НРег(СтрокаДанныеНастроек.Выключена) = "да" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка

			//добавим данные сценария
			СтрокаДанныеСценариев = ДанныеСценариев.Найти(СтрокаДанныеНастроек.UIDСценария,"UID");
			
			Если СтрокаДанныеСценариев = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден сценарий с UID: %1 для настройки сценария: %2'"), 
											СтрокаДанныеНастроек.UIDСценария,
											СтрокаДанныеНастроек.Имя);
			КонецЕсли;
			
			НоваяСтрока = РезультатКомпиляции.Добавить();
			НоваяСтрока.КодНастройкиСценария = СтрокаДанныеНастроек.Код;
			НоваяСтрока.UIDНастройкиСценария = СтрокаДанныеНастроек.UID;
			НоваяСтрока.ИмяНастройкиСценария = СтрокаДанныеНастроек.Имя;
			НоваяСтрока.УспешнаяСборка = Ложь;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЧтениеИзТекста",Истина);
			СтруктураПараметров.Вставить("ИмяНастройки",СтрокаДанныеНастроек.Имя);
			СтруктураПараметров.Вставить("ТаблицаПараметров",
			     ПараметрыСценарияИзТекстовыхДанных(СтрокаДанныеНастроек.ПараметрыТеста));
			СтруктураПараметров.Вставить("ДоТеста",Новый ТаблицаЗначений);
			СтруктураПараметров.Вставить("ПроверкаТеста",Новый ТаблицаЗначений);
			СтруктураПараметров.Вставить("ПослеТеста",Новый ТаблицаЗначений);
			СтруктураПараметров.Вставить("UIDСценария",СтрокаДанныеНастроек.UIDСценария);
			СтруктураПараметров.Вставить("ДанныеСценариев",ДанныеСценариев);
			
			НоваяСтрока.КодСценария = СтрокаДанныеСценариев.Код;
			
			СтруктураПараметров.Вставить("Проект",СтрокаДанныеСценариев.Проект);
			СтруктураПараметров.Вставить("ПараметрыСценария",СтрокаДанныеСценариев.ПараметрыСценария);
			СтруктураПараметров.Вставить("ВложенныеСценарии",СтрокаДанныеСценариев.ВложенныеСценарии);
			
			СтруктураПараметров.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
			СтруктураПараметров.Вставить("ДелатьРаскраску",Ложь);
			СтруктураПараметров.Вставить("ФункцияСистемы",СтрокаДанныеСценариев.ФункцияСистемы);
			СтруктураПараметров.Вставить("UIDФункцияСистемы",СтрокаДанныеСценариев.UIDФункцияСистемы);
			СтруктураПараметров.Вставить("UIDРазделПроекта",СтрокаДанныеСценариев.UIDРазделПроекта);
			СтруктураПараметров.Вставить("ИмяСценария",СтрокаДанныеСценариев.Имя);
			СтруктураПараметров.Вставить("КодСценария",СтрокаДанныеСценариев.Код);
			СтруктураПараметров.Вставить("УровеньОтчета1",СтрокаДанныеСценариев.УровеньОтчета1);
			СтруктураПараметров.Вставить("УровеньОтчета2",СтрокаДанныеСценариев.УровеньОтчета2);
			СтруктураПараметров.Вставить("ДанныеНастройкиСценария",СтрокаДанныеНастроек);
			СтруктураПараметров.Вставить("ТегиТеста",СтрокаДанныеНастроек.ТегиТеста);
			СтруктураПараметров.Вставить("ТегиСценария",СтрокаДанныеСценариев.ТегиСценария);
			
			СтруктураПараметров.Вставить("ОшибкаСобрана",Ложь);
			ЭталонныеБД       = ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"];
			СтруктураПараметров.Вставить("ДанныеЭталонныхБД",ЭталонныеБД);
			
			ОбъектТекстыСценариев = ТекстыСценариев(СтрокаДанныеНастроек.ИмяСценария,СтруктураПараметров);
			
			ПараметрыСценария = Новый Структура;
			ПараметрыСценария.Вставить("ОбъектТекстыСценариев",ОбъектТекстыСценариев);
			ПараметрыСценария.Вставить("ИмяНастройки",СтрокаДанныеНастроек.Имя);
			ПараметрыСценария.Вставить("Процесс",СтрокаДанныеНастроек.ИмяСценария);
			ПараметрыСценария.Вставить("ШагиДоТеста",Новый ТаблицаЗначений);
			ПараметрыСценария.Вставить("ШагиПроверка",Новый ТаблицаЗначений);
			ПараметрыСценария.Вставить("ШагиПослеТеста",Новый ТаблицаЗначений);
			ПараметрыСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
			ПараметрыСценария.Вставить("ЧтениеИзТекста",Истина);
			ПараметрыСценария.Вставить("УровеньОтчета1",СтрокаДанныеСценариев.УровеньОтчета1);
			ПараметрыСценария.Вставить("УровеньОтчета2",СтрокаДанныеСценариев.УровеньОтчета2);
			ПараметрыСценария.Вставить("ТегиТеста",СтрокаДанныеНастроек.ТегиТеста);
			ПараметрыСценария.Вставить("ТегиСценария",СтрокаДанныеСценариев.ТегиСценария);
			
			ПараметрыСценария.Вставить("ИдентификаторБазы",СтрокаДанныеНастроек.ИдентификаторБазы);
			ПараметрыСценария.Вставить("ДанныеЭталонныхБД",ЭталонныеБД);
			ПараметрыСценария.Вставить("ФормироватьЗаголовок", Истина);
			
			ДанныеНомеровСтрок = Новый Массив;
			ПараметрыСценария.Вставить("ДанныеНомеровСтрок",ДанныеНомеровСтрок);
			
			НадоВызватьИсключение = Ложь;
			Если ЗначениеЗаполнено(СтрокаДанныеНастроек.ПрофильПользователя) Тогда
				//тогда берем профиль пользователя из настройки
				ПараметрыСценария.Вставить("ПрофильПользователя",СтрокаДанныеНастроек.ПрофильПользователя);
			ИначеЕсли ЗначениеЗаполнено(СтрокаДанныеСценариев.ПрофильПользователя) Тогда
				//тогда берем профиль пользователя из сценария
				ПараметрыСценария.Вставить("ПрофильПользователя",СтрокаДанныеСценариев.ПрофильПользователя);
			Иначе
				НадоВызватьИсключение = Истина;
			КонецЕсли;
			
			СценарийНадоДобавитьВОбщийФайл = Ложь;
			Если НРег(СтрокаДанныеСценариев.НеобратимоМеняетДанные) = "нет" И НесколькоСценариевВОдномФайле Тогда
				СценарийНадоДобавитьВОбщийФайл = Истина;
				КоличествоСценариевВОдномФайле = КоличествоСценариевВОдномФайле + 1;
				Если КоличествоСценариевВОдномФайле = 1 Тогда
					ИдМассиваОбщегоСценария = СтрокаДанныеНастроек.ИдМассива;
				ИначеЕсли КоличествоСценариевВОдномФайле > 1 Тогда
					ПараметрыСценария.Вставить("ФормироватьЗаголовок", Ложь);
					ДанныеДополнительногоСценария = Новый Структура;
					ДанныеДополнительногоСценария.Вставить("UIDСценария", СтрокаДанныеНастроек.UIDСценария);
					ДанныеДополнительногоСценария.Вставить("UID", СтрокаДанныеНастроек.UID);
					ДанныеДополнительногоСценария.Вставить("ИмяФайла", СтрокаДанныеНастроек.ИмяФайла);
					ДанныеСценариевКоторыеДобавляютсяКОсновному.Добавить(ДанныеДополнительногоСценария);
				КонецЕсли;	
			КонецЕсли;	
										
			ТекстСценария = ТекстСценария(ПараметрыСценария);
			
			Если СценарийНадоДобавитьВОбщийФайл Тогда
				МассивОбщийТекстСценария.Добавить(ТекстСценария);
				МассивОбщийТекстСценария.Добавить("	И я устанавливаю пометку удаления объектам, указанным к удалению (расширение)");
				МассивОбщийТекстСценария.Добавить(" ");
				МассивОбщийТекстСценария.Добавить(" ");
				МассивОбщийТекстСценария.Добавить(" ");
			КонецЕсли;	
			
			Если КомпиляцияСценариевСПроверкойАвторизации И НадоВызватьИсключение Тогда
				Если Найти(ТекстСценария, "я подключаю TestClient") > 0 Тогда
					//Значит есть подключение клиента тестирования в шагах сценария или шагах подсценариев
					НадоВызватьИсключение = Ложь;
				КонецЕсли;	 
				
				Если НадоВызватьИсключение Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден пользователь для запуска сценария: <%1>. КодСценария: <%2>'"), 
						СтрокаДанныеСценариев.Имя,
						СтрокаДанныеСценариев.Код);
				КонецЕсли;	 
			КонецЕсли;
			
			Если НЕ СценарийНадоДобавитьВОбщийФайл
				ИЛИ (СценарийНадоДобавитьВОбщийФайл И КоличествоСценариевВОдномФайле = 1) //Для общего сценария записываем его в первую настройку
				Тогда
				ДанныеКаталогаСценариев[СтрокаДанныеНастроек.ИдМассива].Вставить("ЛинейныйСценарий",ТекстСценария);
				ДанныеКаталогаСценариев[СтрокаДанныеНастроек.ИдМассива].Вставить("ДанныеНомеровСтрок",ДанныеНомеровСтрок);
				ДанныеКаталогаСценариев[СтрокаДанныеНастроек.ИдМассива].Вставить("КодНастройкиСценария",СтрокаДанныеНастроек.Код);
				ДанныеКаталогаСценариев[СтрокаДанныеНастроек.ИдМассива].Вставить("ИмяНастройкиСценария",СтрокаДанныеНастроек.Имя);
				ДанныеКаталогаСценариев[СтрокаДанныеНастроек.ИдМассива].Вставить("КоличествоСценариевВОдномФайле", 1);
				ДанныеКаталогаСценариев[СтрокаДанныеНастроек.ИдМассива].Вставить(
				               "Ответственный",СтрокаДанныеСценариев.Ответственный);
				ДанныеКаталогаСценариев[СтрокаДанныеНастроек.ИдМассива].Вставить(
				        "ИдентификаторБазы",СтрокаДанныеНастроек.ИдентификаторБазы);
			КонецЕсли;
			
			НоваяСтрока.УспешнаяСборка = Истина;
			
		Исключение
			
			НоваяСтрока.УспешнаяСборка = Ложь;
			
			ДополнительнаяИнформация = СтрШаблон(НСтр("ru = '%1 UIDСценария: %2;%1 Имя настройки: %3;%1 Код настройки: %4;%1 Имя сценария: %5;%1 Имя файла: %6;'"),
				Символы.ПС,
				СтрокаДанныеНастроек.UIDСценария,
				СтрокаДанныеНастроек.Имя,
				СтрокаДанныеНастроек.Код,
				СтрокаДанныеНастроек.ИмяСценария,
				СтрокаДанныеНастроек.ИмяФайла);
				
			НоваяСтрока.ОписаниеОшибки =  ОписаниеОшибки();
			НоваяСтрока.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + ДополнительнаяИнформация;
			
		КонецПопытки;
	
	КонецЦикла;
	
	Если МассивОбщийТекстСценария.Количество() > 0 Тогда
		//Перезаписываем общий текст сценария
		ДанныеКаталогаСценариев[ИдМассиваОбщегоСценария].Вставить("ЛинейныйСценарий",СтрСоединить(МассивОбщийТекстСценария, Символы.ПС));
		ДанныеКаталогаСценариев[ИдМассиваОбщегоСценария].Вставить("КоличествоСценариевВОдномФайле",КоличествоСценариевВОдномФайле);
		ДанныеКаталогаСценариев[ИдМассиваОбщегоСценария].Вставить("ДанныеСценариевКоторыеДобавляютсяКОсновному",ДанныеСценариевКоторыеДобавляютсяКОсновному);
	КонецЕсли;	
	
КонецПроцедуры

// Делает сборку текстов процессов по данным, прочитанным из текстовых файлов
//
// Параметры:
//  ДанныеКаталогаПроцессов - Массив
//  ДанныеСценариев - ТаблицаЗначений
//  ДанныеЭталонныхБД - Массив
// 
Процедура ТекстыПроцессовИзТекстовыхДанных(ДанныеКаталогаПроцессов,ДанныеЭталонныхБД,ДанныеСценариев,ДанныеПроцессов,ДанныеНастроек) Экспорт
	
	Если НЕ ВыполнятьСборкуПроцессов И РаботаВРежимеВнешнейОбработки Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанныеНастроек Из ДанныеНастроек Цикл
		
		Если НЕ СтрокаДанныеНастроек.Компилировать Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = РезультатКомпиляции.Добавить();
		НоваяСтрока.КодНастройкиПроцесса = СтрокаДанныеНастроек.Код;
		НоваяСтрока.УспешнаяСборка = Ложь;
			
		Попытка
				
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЧтениеИзТекста",Истина);
			СтруктураПараметров.Вставить("ИмяНастройки",СтрокаДанныеНастроек.Имя);
			СтруктураПараметров.Вставить("ТаблицаПараметров",
			     ПараметрыСценарияИзТекстовыхДанных(СтрокаДанныеНастроек.ПараметрыТеста));
			СтруктураПараметров.Вставить("ДоТеста",Новый ТаблицаЗначений);
			СтруктураПараметров.Вставить("ПроверкаТеста",Новый ТаблицаЗначений);
			СтруктураПараметров.Вставить("ПослеТеста",Новый ТаблицаЗначений);
			СтруктураПараметров.Вставить("UIDПроцесса",СтрокаДанныеНастроек.UIDПроцесса);
			СтруктураПараметров.Вставить("ДанныеПроцессов",ДанныеПроцессов);
			
			//добавим данные сценария
			СтрокаДанныеПроцессов = ДанныеПроцессов.Найти(СтрокаДанныеНастроек.UIDПроцесса,"UID");
			Если СтрокаДанныеПроцессов = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'В настройке <%1> указан несуществующий UID процесса <%2>.'"), СтрокаДанныеНастроек.Имя, СтрокаДанныеНастроек.UIDПроцесса);
			КонецЕсли;	 
			
			НоваяСтрока.КодПроцесса = СтрокаДанныеПроцессов.ПолныйКод;
			
			СтруктураПараметров.Вставить("Проект",СтрокаДанныеПроцессов.Проект);
			СтруктураПараметров.Вставить("ПараметрыСценария",СтрокаДанныеПроцессов.ПараметрыСценария);
			СтруктураПараметров.Вставить("ТегиПроцесса",СтрокаДанныеПроцессов.ТегиПроцесса);
			
			СтруктураПараметров.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
			СтруктураПараметров.Вставить("ДелатьРаскраску",Ложь);
			СтруктураПараметров.Вставить("УровеньОтчета1",СтрокаДанныеПроцессов.УровеньОтчета1);
			СтруктураПараметров.Вставить("УровеньОтчета2",СтрокаДанныеПроцессов.УровеньОтчета2);
			
			СтруктураПараметров.Вставить("ДанныеСценариев",ДанныеСценариев);
			СтруктураПараметров.Вставить("ПросмотрСценария",Ложь);
			СтруктураПараметров.Вставить("ДанныеЭталонныхБД",ДанныеЭталонныхБД);
			СтруктураПараметров.Вставить("ТекущаяНастройкаПроцесса",СтрокаДанныеНастроек);
			СтруктураПараметров.Вставить("ТегиТеста",СтрокаДанныеНастроек.ТегиТеста);
			
			ОбъектТекстыСценариев = ДанныеДляТекстаСценарияПроцесса(СтрокаДанныеНастроек.ИмяПроцесса,СтруктураПараметров);
			
			ЭталонныеБД       = ДанныеЭталонныхБД[0]["ДанныеФайлаYaml"]["ЭталонныеБД"];
			ПараметрыПроцесса = Новый Структура;
			ПараметрыПроцесса.Вставить("ОбъектТекстыСценариев",ОбъектТекстыСценариев);
			ПараметрыПроцесса.Вставить("ИмяНастройки",СтрокаДанныеНастроек.Имя);
			ПараметрыПроцесса.Вставить("КодНастройки",СтрокаДанныеНастроек.Код);
			ПараметрыПроцесса.Вставить("Процесс",СтрокаДанныеНастроек.ИмяПроцесса);
			ПараметрыПроцесса.Вставить("ПолныйКодПроцесса",СтрокаДанныеПроцессов.ПолныйКод);
			ПараметрыПроцесса.Вставить("ШагиДоТеста",Новый ТаблицаЗначений);
			ПараметрыПроцесса.Вставить("ШагиПроверка",Новый ТаблицаЗначений);
			ПараметрыПроцесса.Вставить("ШагиПослеТеста",Новый ТаблицаЗначений);
			ПараметрыПроцесса.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
			ПараметрыПроцесса.Вставить("ЧтениеИзТекста",Истина);
			ПараметрыПроцесса.Вставить("УровеньОтчета1",СтрокаДанныеПроцессов.УровеньОтчета1);
			ПараметрыПроцесса.Вставить("УровеньОтчета2",СтрокаДанныеПроцессов.УровеньОтчета2);
			ПараметрыПроцесса.Вставить("ТегиТеста",СтрокаДанныеНастроек.ТегиТеста);
			ПараметрыПроцесса.Вставить("ТегиПроцесса",СтрокаДанныеПроцессов.ТегиПроцесса);
			
			Если ЗначениеЗаполнено(СтрокаДанныеНастроек.ПрофильПользователя) Тогда
				//тогда берем профиль пользователя из настройки
				ПараметрыПроцесса.Вставить("ПрофильПользователя",СтрокаДанныеНастроек.ПрофильПользователя);
			Иначе	
				//тогда берем профиль пользователя из сценария
				ПараметрыПроцесса.Вставить("ПрофильПользователя",СтрокаДанныеПроцессов.ПрофильПользователя);
			КонецЕсли;	 
			ПараметрыПроцесса.Вставить("ИдентификаторБазы",СтрокаДанныеНастроек.ИдентификаторБазы);
			ПараметрыПроцесса.Вставить("ДанныеЭталонныхБД",ЭталонныеБД);
			
			ДанныеНомеровСтрок = Новый Массив;
			ПараметрыПроцесса.Вставить("ДанныеНомеровСтрок",ДанныеНомеровСтрок);
			ПараметрыПроцесса.Вставить("ЭтоПроцесс",Истина);
			
			
			ТекстСценария = ТекстПроцесса(ПараметрыПроцесса);
			
			
			ДанныеКаталогаПроцессов[СтрокаДанныеНастроек.ИдМассива].Вставить("ЛинейныйСценарий",ТекстСценария);
			ДанныеКаталогаПроцессов[СтрокаДанныеНастроек.ИдМассива].Вставить("ДанныеНомеровСтрок",ДанныеНомеровСтрок);
			ДанныеКаталогаПроцессов[СтрокаДанныеНастроек.ИдМассива].Вставить("КодНастройкиСценария",СтрокаДанныеНастроек.Код);
			ДанныеКаталогаПроцессов[СтрокаДанныеНастроек.ИдМассива].Вставить("ИмяНастройкиСценария",СтрокаДанныеНастроек.Имя);
			ДанныеКаталогаПроцессов[СтрокаДанныеНастроек.ИдМассива].Вставить(
			               "Ответственный",СтрокаДанныеПроцессов.Ответственный);
			ДанныеКаталогаПроцессов[СтрокаДанныеНастроек.ИдМассива].Вставить(
			        "ИдентификаторБазы",СтрокаДанныеНастроек.ИдентификаторБазы);
			
			НоваяСтрока.УспешнаяСборка = Истина;
		Исключение
			НоваяСтрока.УспешнаяСборка = Ложь;
			ДополнительнаяИнформация = СтрШаблон(НСтр("ru = '%1 UIDПроцесса: %2;%1 Имя настройки: %3;%1 Код настройки: %4;%1 Имя процесса: %5;%1 Имя файла: %6;'"),
											Символы.ПС,
											СтрокаДанныеНастроек.UIDПроцесса,
											СтрокаДанныеНастроек.Имя,
											СтрокаДанныеНастроек.Код,
											СтрокаДанныеНастроек.ИмяПроцесса,
											СтрокаДанныеНастроек.ИмяФайла);
			
			НоваяСтрока.ОписаниеОшибки = ОписаниеОшибки();
			НоваяСтрока.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + ДополнительнаяИнформация; 
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры 

// Формирует тексты сценариев по переданным параметрам
//
// Параметры:
//  ДанныеКаталогаСценариев - Справочник.СценарииРаботыПользователей
//  СтруктураПараметров - Структура
// 
Функция ТекстыСценариев(Сценарий,СтруктураПараметров) Экспорт
	ЧтениеИзТекста = СтруктураПараметров.ЧтениеИзТекста;
	ПараметрыТеста = СтруктураПараметров.ТаблицаПараметров;
	ДоТеста        = СтруктураПараметров.ДоТеста;
	ПроверкаТеста  = СтруктураПараметров.ПроверкаТеста;
	ПослеТеста     = СтруктураПараметров.ПослеТеста;
	
	ДанныеВложенныхСценариев = ДанныеВложенныхСценариев();
	
	Если СтруктураПараметров.ЧтениеИзТекста Тогда
		UIDСценария = СтруктураПараметров.UIDСценария;
		СтрокаДанныеСценариев = СтруктураПараметров.ДанныеСценариев.Найти(UIDСценария,"UID");
		СхемаДерево  = СтрокаДанныеСценариев.ДеревоСхемы;
	Иначе
		СхемаДерево  = СтруктураПараметров.ДеревоСхемы;
	КонецЕсли;	 
	
	Если СхемаДерево = Неопределено Тогда
		UIDСценария = Неопределено;
		Если СтруктураПараметров.Свойство("UIDСценария") Тогда
			UIDСценария = СтруктураПараметров.UIDСценария;
		КонецЕсли;	 
		СхемаДерево = ДеревоСценарияИзБазыДанных(Сценарий, СтруктураПараметров, UIDСценария);
	КонецЕсли;	 
	
	Если ТипЗнч(СхемаДерево) <> Тип("ДеревоЗначений") Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена схема сценария: %1'"), Сценарий);
	КонецЕсли;	 
	
	ПараметрыТеста.Колонки.Добавить("ЗначенияПараметра");
	Если ЧтениеИзТекста Тогда
		Для Каждого ПараметрСценария Из СтрокаДанныеСценариев.ПараметрыСценария Цикл
			ПараметрТеста = ПараметрыТеста.Найти(ПараметрСценария.Имя,"Имя");
			Если ПараметрТеста <> Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			ПараметрТеста = ПараметрыТеста.Добавить();
			ЗаполнитьЗначенияСвойств(ПараметрТеста,ПараметрСценария);
			
			МассивЗначений = СтрРазделить(ПараметрТеста.Значение,";");
			Если МассивЗначений.Количество() <= 1 Тогда
				ПараметрТеста.НесколькоЗначений = Ложь;
			Иначе	
				ПараметрТеста.НесколькоЗначений = Истина;
			КонецЕсли;	 
			
		КонецЦикла;	 
	КонецЕсли;	 
	
	КоличествоВариантовСценария = 1;
	ОбработатьЗначенияПараметровСценария(ПараметрыТеста,КоличествоВариантовСценария);
	Если КоличествоВариантовСценария > 100 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Слишком много вариантов сценария: %1'"),
																				  КоличествоВариантовСценария);
	КонецЕсли;	 
	
	НаборыПараметровСценария = НаборыПараметровСценария(ПараметрыТеста);
	
	МассивСценариев = Новый Массив;
	
	НомерНабора = 0;
	Для Каждого НаборПараметров Из НаборыПараметровСценария Цикл
		НомерНабора = НомерНабора + 1;
		
		ПараметрыДляПолученияТекстаСценария = Новый Структура;
		ПараметрыДляПолученияТекстаСценария.Вставить("Сценарий",Сценарий);
		ПараметрыДляПолученияТекстаСценария.Вставить("ДанныеВложенныхСценариев",ДанныеВложенныхСценариев);
		ПараметрыДляПолученияТекстаСценария.Вставить("ЧтениеИзТекста",ЧтениеИзТекста);
		ПараметрыДляПолученияТекстаСценария.Вставить("СтруктураПараметров",СтруктураПараметров);
		ПараметрыДляПолученияТекстаСценария.Вставить("НаборПараметров",НаборПараметров);
		ПараметрыДляПолученияТекстаСценария.Вставить("СхемаДерево",СхемаДерево);
		ПараметрыДляПолученияТекстаСценария.Вставить("ДоТеста",ДоТеста);
		ПараметрыДляПолученияТекстаСценария.Вставить("ПроверкаТеста",ПроверкаТеста);
		ПараметрыДляПолученияТекстаСценария.Вставить("ПослеТеста",ПослеТеста);
		ПараметрыДляПолученияТекстаСценария.Вставить("НомерНабора",НомерНабора);
		ПараметрыДляПолученияТекстаСценария.Вставить("РазмерНабора",НаборыПараметровСценария.Количество());
		ПараметрыДляПолученияТекстаСценария.Вставить("ЭтоПроцесс",Ложь);
		ПараметрыДляПолученияТекстаСценария.Вставить("УровеньВложенности",0);
		ПараметрыДляПолученияТекстаСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",
		        СтруктураПараметров.ИсключитьСлужебныеСловаИзТекстаСценария);
				
		Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
			ПараметрыДляПолученияТекстаСценария.Вставить("КодСценарияGit", СтруктураПараметров.КодСценарияGit);
			ПараметрыДляПолученияТекстаСценария.Вставить("ТаблицаТегов", СтруктураПараметров.ТаблицаТегов);
			ПараметрыДляПолученияТекстаСценария.Вставить("ТаблицаПараметровGit", СтруктураПараметров.ТаблицаПараметров);
			ПараметрыДляПолученияТекстаСценария.Вставить("ЧтениеИзGit", СтруктураПараметров.ЧтениеИзGit);
			ПараметрыДляПолученияТекстаСценария.Вставить("Ветка", СтруктураПараметров.Ветка);
			ПараметрыДляПолученияТекстаСценария.Вставить("ИдентификаторКоммита", СтруктураПараметров.ИдентификаторКоммита);
			ПараметрыДляПолученияТекстаСценария.Вставить("Проект", СтруктураПараметров.Проект);
			ПараметрыДляПолученияТекстаСценария.Вставить("ФункцияСистемы", СтруктураПараметров.ФункцияСистемы);
			ПараметрыДляПолученияТекстаСценария.Вставить("ТокенПользователя", СтруктураПараметров.ТокенПользователя);
			ПараметрыДляПолученияТекстаСценария.Вставить("АдресСлужебныеДанныеСценариев",
				СтруктураПараметров.АдресСлужебныеДанныеСценариев);
				
			Если СтруктураПараметров.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
				ПараметрыДляПолученияТекстаСценария.Вставить(
					"ДанныеРанееИзмененныхСценариев", СтруктураПараметров.ДанныеРанееИзмененныхСценариев);
			КонецЕсли;	 	
			Если СтруктураПараметров.Свойство("UIDСценариевКомпиляции") Тогда
				ПараметрыДляПолученияТекстаСценария.Вставить(
					"UIDСценариевКомпиляции", СтруктураПараметров.UIDСценариевКомпиляции);
			КонецЕсли;	 	
		КонецЕсли;	 		
				
		Если СтруктураПараметров.Свойство("СТекущегоШага") Тогда
			ПараметрыДляПолученияТекстаСценария.Вставить("СТекущегоШага",СтруктураПараметров.СТекущегоШага);
			ПараметрыДляПолученияТекстаСценария.Вставить("ТекущийНомерСтрокиСценария",СтруктураПараметров.ТекущийНомерСтрокиСценария);
		КонецЕсли;	 
		
		Если СтруктураПараметров.Свойство("ПараметрыСценария") Тогда
			ПараметрыДляПолученияТекстаСценария.Вставить("ПараметрыСценария",СтруктураПараметров.ПараметрыСценария);
		КонецЕсли;	 
		
		ИспользоватьИмяСценария = Ложь;
		Если СтруктураПараметров.Свойство("ИспользоватьИмяСценария") Тогда
			ИспользоватьИмяСценария = СтруктураПараметров.ИспользоватьИмяСценария;
		КонецЕсли;	 
		ПараметрыДляПолученияТекстаСценария.Вставить("ИспользоватьИмяСценария",ИспользоватьИмяСценария);
		ПараметрыДляПолученияТекстаСценария.Вставить("ВложенныйПроцесс","");
		
		ПараметрыДляПолученияТекстаСценария.Вставить("ФормироватьДанныеПоНомерамСтрок",Ложь);
		Если ЧтениеИзТекста Тогда
			ПараметрыДляПолученияТекстаСценария.Вставить("ФормироватьДанныеПоНомерамСтрок",Истина);
		КонецЕсли;	 
		
		ОбъектСценария = ТекстСценарияПоНаборуПараметров(ПараметрыДляПолученияТекстаСценария);
		МассивСценариев.Добавить(ОбъектСценария);
	КонецЦикла;	
	
	ЗаголовокЗначенияПараметровСценария = ЗаголовокЗначенияПараметровСценария(ПараметрыТеста);
	ФОИмеющиеОдноЗначение               = ФОИмеющиеОдноЗначение(ПараметрыТеста);
	ФОИмеющиеНесколькоЗначений          = ФОИмеющиеНесколькоЗначений(ПараметрыТеста);
	
	ОбъектТекстыСценариев = Новый Структура;
	ОбъектТекстыСценариев.Вставить("ТекстыСценариев",МассивСценариев);
	ОбъектТекстыСценариев.Вставить("ЗаголовокЗначенияПараметровСценария",ЗаголовокЗначенияПараметровСценария);
	ОбъектТекстыСценариев.Вставить("ФОИмеющиеОдноЗначение",ФОИмеющиеОдноЗначение);
	ОбъектТекстыСценариев.Вставить("ФОИмеющиеНесколькоЗначений",ФОИмеющиеНесколькоЗначений);
	
	Возврат ОбъектТекстыСценариев;
КонецФункции	 

// Возвращает массив слов Gherkin, преобразованных к нижнему регистру
//
Функция МассивПервыхСловGherkinНРег() Экспорт
	МассивПервыхСлов     = МассивПервыхСловGherkin();
	МассивПервыхСловНРег = Новый Массив;
	Для Каждого Стр Из МассивПервыхСлов Цикл
		МассивПервыхСловНРег.Добавить(НРег(Стр));
	КонецЦикла;	
	
	Возврат МассивПервыхСловНРег;
КонецФункции	

// Делает рекурсивный обход дерева значений, чтобы заполнить нужную колонку
//
// Параметры:
//  Дерево - ДеревоЗначений
//  ИдСтрокиДерева - Число
// 
Процедура ПроставитьИдСтрокиИЗависимыеПараметрыДереваРекурсивно(Дерево,ИдСтрокиДерева) Экспорт
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		ИдСтрокиДерева              = ИдСтрокиДерева + 1;
		СтрокаДерева.ИдСтрокиДерева = ИдСтрокиДерева;
		
		СтрокаДерева.ИмяЭлемента = ИмяЭлемента(СтрокаДерева.ТипЭлемента,ИдСтрокиДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ПроставитьИдСтрокиИЗависимыеПараметрыДереваРекурсивно(СтрокаДерева,ИдСтрокиДерева);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

//Возвращает тип элемента, соответствующий шаблону сценария
//
// Возвращаемое значение:
//  Строка
//
Функция ТипЭлементаШаблонСценария() Экспорт
	Возврат "ШаблонСценария";
КонецФункции	 

//Возвращает дерево сценария 
//
// Возвращаемое значение:
//  ДеревоЗначений
//
Функция СоздатьДеревоСхемы() Экспорт
	ДеревоСхемы = Новый ДеревоЗначений;
	ДеревоСхемы.Колонки.Добавить("ИмяЭлемента");
	ДеревоСхемы.Колонки.Добавить("ТипЭлемента");
	ДеревоСхемы.Колонки.Добавить("ЗначениеУсловия");
	ДеревоСхемы.Колонки.Добавить("ИмяМетки");
	ДеревоСхемы.Колонки.Добавить("ИдСтрокиТаблицаСтрок");
	ДеревоСхемы.Колонки.Добавить("Параметры");
	ДеревоСхемы.Колонки.Добавить("ОбработаннаяСтрокаПараметров");
	ДеревоСхемы.Колонки.Добавить("ПодчиненнаяСхема");
	ДеревоСхемы.Колонки.Добавить("ОписаниеЭлемента");
	ДеревоСхемы.Колонки.Добавить("ИдСтрокиДерева");
	ДеревоСхемы.Колонки.Добавить("ПерейтиКМетке");
	ДеревоСхемы.Колонки.Добавить("Комментарии");
	ДеревоСхемы.Колонки.Добавить("Теги");
	ДеревоСхемы.Колонки.Добавить("НомерСтрокиТекстаСценария");
	ДеревоСхемы.Колонки.Добавить("ДополнительныеСвойства");
	ДеревоСхемы.Колонки.Добавить("ЭтаСтрокаВложенногоСценария",Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоСхемы;
КонецФункции	

// Получает информацию о всех сценариях в каталоге
//
// Параметры:
//  ДанныеКаталогаСценариев - Тип - Массив.
//  ДанныеЭталонныхБД - Тип - Массив.
//  ДанныеСценариев - Тип - ТаблицаЗначений.
// 
Функция ДанныеНастроекСценариевИзТекстовыхДанных(ДанныеКаталогаСценариев, ДанныеЭталонныхБД, ДанныеСценариев, ДопПараметры) Экспорт
	
	ДанныеСценариев.Колонки.Добавить("ИмяФайла");
	ДанныеСценариев.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка"));
	ДанныеСценариев.Колонки.Добавить("ВерсияСценария",Новый ОписаниеТипов("Строка"));
	ДанныеСценариев.Колонки.Добавить("ТекстСценария");
	ДанныеСценариев.Колонки.Добавить("Проект");
	ДанныеСценариев.Колонки.Добавить("ПараметрыСценария");
	ДанныеСценариев.Колонки.Добавить("ПрофильПользователя");
	ДанныеСценариев.Колонки.Добавить("UID",Новый ОписаниеТипов("Строка"));
	ДанныеСценариев.Колонки.Добавить("ФункцияСистемы");
	ДанныеСценариев.Колонки.Добавить("UIDФункцияСистемы");
	ДанныеСценариев.Колонки.Добавить("UIDРазделПроекта");
	ДанныеСценариев.Колонки.Добавить("Код");
	ДанныеСценариев.Колонки.Добавить("ВложенныеСценарии");
	ДанныеСценариев.Колонки.Добавить("РазрешеноИспользоватьВДругихФункциях");
	ДанныеСценариев.Колонки.Добавить("НеобратимоМеняетДанные");
	ДанныеСценариев.Колонки.Добавить("ДеревоСхемы");
	ДанныеСценариев.Колонки.Добавить("ДанныеВложенныхСценариев");
	ДанныеСценариев.Колонки.Добавить("Ответственный");
	ДанныеСценариев.Колонки.Добавить("УровеньОтчета1");
	ДанныеСценариев.Колонки.Добавить("УровеньОтчета2");
	ДанныеСценариев.Колонки.Добавить("UIDОтветственный");
	ДанныеСценариев.Индексы.Добавить("ИмяФайла");
	ДанныеСценариев.Колонки.Добавить("ТегиСценария");
	ДанныеСценариев.Индексы.Добавить("UID");
	
	ДанныеНастроек = Новый ТаблицаЗначений;
	ДанныеНастроек.Колонки.Добавить("ИмяФайла");
	ДанныеНастроек.Колонки.Добавить("Имя");
	ДанныеНастроек.Колонки.Добавить("Код");
	ДанныеНастроек.Колонки.Добавить("UID");
	ДанныеНастроек.Колонки.Добавить("ИмяСценария");
	ДанныеНастроек.Колонки.Добавить("UIDСценария");
	ДанныеНастроек.Колонки.Добавить("ПараметрыТеста");
	ДанныеНастроек.Колонки.Добавить("ИдМассива");
	ДанныеНастроек.Колонки.Добавить("ИдентификаторБазы");
	ДанныеНастроек.Колонки.Добавить("ПрофильПользователя");
	ДанныеНастроек.Колонки.Добавить("ПараметрыЗапуска");
	ДанныеНастроек.Колонки.Добавить("ТегиТеста");
	ДанныеНастроек.Колонки.Добавить("Компилировать");
	ДанныеНастроек.Колонки.Добавить("Выключена");
	ДанныеНастроек.Индексы.Добавить("UID");
	
	ДанныеНастроекДляКомпиляции = Новый ТаблицаЗначений;
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИмяФайла");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("Имя");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("Код");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("UID");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИмяСценария");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("UIDСценария");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ПараметрыТеста");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИдМассива");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИдентификаторБазы");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ПрофильПользователя");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ПараметрыЗапуска");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ТегиТеста");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("Компилировать");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("Выключена");
	ДанныеНастроекДляКомпиляции.Индексы.Добавить("UID");
	
	Ном = -1;
	Для Каждого Элем Из ДанныеКаталогаСценариев Цикл
		Ном = Ном + 1;
		Если НРег(Элем.ДанныеФайлаYaml["ТипФайла"]) = "настройкатеста" Тогда
			
			UID = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UID"];
			СтрокаДанныеНастроек = ДанныеНастроек.Найти(UID, "UID");
			Если СтрокаДанныеНастроек <> Неопределено Тогда
				ДопПараметры.Ошибки.Добавить(СтрШаблон(НСтр("ru = 'Найдено несколько настроек сценариев с UID <%1>.'"),UID));
			КонецЕсли;	
			
			СтрокаДанныеНастроек                     = ДанныеНастроек.Добавить();
			СтрокаДанныеНастроек.ИмяФайла            = Элем.ИмяФайла;
			СтрокаДанныеНастроек.Имя                 = Элем.ДанныеФайлаYaml["ДанныеТеста"]["Имя"];
			СтрокаДанныеНастроек.Код                 = Элем.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
			СтрокаДанныеНастроек.UID                 = UID;
			СтрокаДанныеНастроек.ИмяСценария         = Элем.ДанныеФайлаYaml["ДанныеТеста"]["СценарийНаименование"];
			СтрокаДанныеНастроек.UIDСценария         = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDСценария"];
			СтрокаДанныеНастроек.ИдентификаторБазы   = Элем.ДанныеФайлаYaml["ДанныеТеста"]["ИдентификаторБазы"];
			СтрокаДанныеНастроек.ПараметрыТеста      = Элем.ДанныеФайлаYaml["ПараметрыТеста"];
			СтрокаДанныеНастроек.ПрофильПользователя = Элем.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"];
			СтрокаДанныеНастроек.ПараметрыЗапуска    = Элем.ДанныеФайлаYaml["ДанныеТеста"]["ПараметрыЗапуска"];
			СтрокаДанныеНастроек.Выключена           = Элем.ДанныеФайлаYaml["ДанныеТеста"]["Выключена"];
			СтрокаДанныеНастроек.ИдМассива           = Ном;
			СтрокаДанныеНастроек.ТегиТеста           = ТегиСценарияИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ТегиТеста"]);
			СтрокаДанныеНастроек.Компилировать       = Ложь;
			Продолжить;
		КонецЕсли;	 
		
		Если Элем.ДанныеФайлаYaml["ДанныеСценария"] = Неопределено Тогда
			//значит этот yaml файл не содержит данных о сценариях
			Продолжить;
		КонецЕсли;	 
		
		UID = Элем.ДанныеФайлаYaml["ДанныеСценария"]["UID"];
		СтрокаДанныеСценариев = ДанныеСценариев.Найти(UID, "UID");
		Если СтрокаДанныеСценариев <> Неопределено Тогда
			ДопПараметры.Ошибки.Добавить(СтрШаблон(НСтр("ru = 'Найдено несколько сценариев с UID <%1>.'"),UID));
		КонецЕсли;	
		
		СтрокаДанныеСценариев                     = ДанныеСценариев.Добавить();
		СтрокаДанныеСценариев.ИмяФайла            = Элем.ИмяФайла;
		СтрокаДанныеСценариев.Имя                 = Элем.ДанныеФайлаYaml["ДанныеСценария"]["Имя"];
		СтрокаДанныеСценариев.ВерсияСценария      = Элем.ДанныеФайлаYaml["ДанныеСценария"]["ВерсияСценария"];
		СтрокаДанныеСценариев.UID                 = UID;
		СтрокаДанныеСценариев.ФункцияСистемы      = Элем.ДанныеФайлаYaml["ДанныеСценария"]["ФункцияСистемы"];
		СтрокаДанныеСценариев.UIDФункцияСистемы   = Элем.ДанныеФайлаYaml["ДанныеСценария"]["UIDФункцияСистемы"];
		СтрокаДанныеСценариев.UIDРазделПроекта    = Элем.ДанныеФайлаYaml["ДанныеСценария"]["UIDРазделПроекта"];
		СтрокаДанныеСценариев.UIDОтветственный    = Элем.ДанныеФайлаYaml["ДанныеСценария"]["UIDОтветственный"];
		СтрокаДанныеСценариев.Код                 = Элем.ДанныеФайлаYaml["ДанныеСценария"]["Код"];
		СтрокаДанныеСценариев.Проект              = Элем.ДанныеФайлаYaml["ДанныеСценария"]["Проект"];
		СтрокаДанныеСценариев.ПрофильПользователя = Элем.ДанныеФайлаYaml["ДанныеСценария"]["ПрофильПользователя"];
		СтрокаДанныеСценариев.Ответственный       = Элем.ДанныеФайлаYaml["ДанныеСценария"]["Ответственный"];
		СтрокаДанныеСценариев.УровеньОтчета1      = Элем.ДанныеФайлаYaml["ДанныеСценария"]["УровеньОтчета1"];
		СтрокаДанныеСценариев.УровеньОтчета2      = Элем.ДанныеФайлаYaml["ДанныеСценария"]["УровеньОтчета2"];
		СтрокаДанныеСценариев.ТекстСценария       = Элем.ДанныеФайлаYaml["ТекстСценария"];
		СтрокаДанныеСценариев.ПараметрыСценария   = 
		   ПараметрыСценарияИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ПараметрыСценария"]);
		СтрокаДанныеСценариев.ВложенныеСценарии   = 
		   ВложенныеСценарииИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ВложенныеСценарии"]);
		   
		СтрокаДанныеСценариев.РазрешеноИспользоватьВДругихФункциях =
		      Элем.ДанныеФайлаYaml["ДанныеСценария"]["РазрешеноИспользоватьВДругихФункциях"];
	
		СтрокаДанныеСценариев.НеобратимоМеняетДанные =
		      Элем.ДанныеФайлаYaml["ДанныеСценария"]["НеобратимоМеняетДанные"];
	
		СтрокаДанныеСценариев.ТегиСценария   = 
		   ТегиСценарияИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ТегиСценария"]);
	КонецЦикла;
	
	ЕстьОтборПоТегам = Ложь;
	КешОтборПоТегам = Новый Соответствие;
	Если НЕ ПустаяСтрока(ОтборПоТегамСценариевИлиНастроек) Тогда
		МассивТегов = СтрРазделить(ОтборПоТегамСценариевИлиНастроек, ";");
		ЕстьОтборПоТегам = Истина;
		
		Для Каждого Элем Из МассивТегов Цикл
			КешОтборПоТегам.Вставить(НРег(Элем), Истина);
		КонецЦикла;	 
		
	КонецЕсли;	 
	
	ЕстьИсключениеПоТегам = Ложь;
	КешИсключениеПоТегам = Новый Соответствие;
	Если НЕ ПустаяСтрока(ИсключениеПоТегамСценариевИлиНастроек) Тогда
		МассивТегов = СтрРазделить(ИсключениеПоТегамСценариевИлиНастроек, ";");
		ЕстьИсключениеПоТегам = Истина;
		
		Для Каждого Элем Из МассивТегов Цикл
			КешИсключениеПоТегам.Вставить(НРег(Элем), Истина);
		КонецЦикла;	 
		
	КонецЕсли;	 
	
	Для Каждого СтрокаДанныеНастроек Из ДанныеНастроек Цикл
		
		Если ИдБазыСборки.Количество() > 0 Тогда
			//значит идет компиляция процессов по определенным базам
			Если ИдБазыСборки.НайтиПоЗначению(НРег(СтрокаДанныеНастроек.ИдентификаторБазы)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОтборПоНастройкам Тогда
			// значит установлен отбор по настройкам запуска
			ПропуститьНастройку = ОтборПоНастройкамСценариев.НайтиПоЗначению(СтрокаДанныеНастроек.Код) = Неопределено 
								И ОтборПоUIDНастроекСценариев.НайтиПоЗначению(СтрокаДанныеНастроек.UID) = Неопределено;
		КонецЕсли;
		
		Если ЕстьОтборПоТестам Тогда
			// значит установлен отбор по сценариям
			
			ПропуститьСценарий = Истина;
			СписокПодсценариев = Новый Массив;
			Подсценарии(СтрокаДанныеНастроек.UIDСценария, ДанныеСценариев, СписокПодсценариев);
			
			Для Каждого Сценарий Из ОтборПоСценариям Цикл
				Если СписокПодсценариев.Найти(Сценарий.Значение) <> Неопределено Тогда
					// из-за сценария Сценарий.Значение запускается настройка СтрокаДанныеНастроек
					Сообщить(СтрШаблон(НСтр("ru = 'Настройка сценария с кодом <%1> запускается т.к. установлен отбор по сценарию с кодом <%2>'"), СтрокаДанныеНастроек.Код, Сценарий.Значение));
					ПропуститьСценарий = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьОтборПоТегам Тогда
			НадоПродолжить = Истина;
			Для Каждого СтрокаТегиТеста Из СтрокаДанныеНастроек.ТегиТеста Цикл
				Если КешОтборПоТегам[НРег(СтрокаТегиТеста.Имя)] <> Неопределено Тогда
					НадоПродолжить = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
			
			Если НадоПродолжить Тогда
				ДанныеСценария = ДанныеСценариев.Найти(СтрокаДанныеНастроек.UIDСценария, "UID");
				Если ДанныеСценария = Неопределено Тогда
					ВызватьИсключение СтрШаблон("Настройка сценария <%1>. Не найден сценарий с UID <%2>.",СтрокаДанныеНастроек.ИмяФайла,СтрокаДанныеНастроек.UIDСценария);
				КонецЕсли;	
				Для Каждого СтрокаТегиТеста Из ДанныеСценария.ТегиСценария Цикл
					Если КешОтборПоТегам[НРег(СтрокаТегиТеста.Имя)] <> Неопределено Тогда
						НадоПродолжить = Ложь;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
			Если НадоПродолжить Тогда
				Продолжить;
			КонецЕсли;	 
			
		КонецЕсли;
		
		Если ЕстьИсключениеПоТегам Тогда
			НадоПродолжить = Ложь;
			Для Каждого СтрокаТегиТеста Из СтрокаДанныеНастроек.ТегиТеста Цикл
				Если КешИсключениеПоТегам[НРег(СтрокаТегиТеста.Имя)] <> Неопределено Тогда
					НадоПродолжить = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
			
			Если НЕ НадоПродолжить Тогда
				ДанныеСценария = ДанныеСценариев.Найти(СтрокаДанныеНастроек.UIDСценария, "UID");
				Если ДанныеСценария = Неопределено Тогда
					ВызватьИсключение СтрШаблон("Настройка сценария <%1>. Не найден сценарий с UID <%2>.",СтрокаДанныеНастроек.ИмяФайла,СтрокаДанныеНастроек.UIDСценария);
				КонецЕсли;	
				Для Каждого СтрокаТегиТеста Из ДанныеСценария.ТегиСценария Цикл
					Если КешИсключениеПоТегам[НРег(СтрокаТегиТеста.Имя)] <> Неопределено Тогда
						НадоПродолжить = Истина;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
			Если НадоПродолжить Тогда
				Продолжить;
			КонецЕсли;	 
			
		КонецЕсли;	 

		Если ЕстьОтборПоНастройкам И ЕстьОтборПоТестам Тогда
			// отбор по сценариям и настройкам
			Если ПропуститьСценарий И ПропуститьНастройку Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЕстьОтборПоНастройкам Тогда
			// отбор только по настройкам
			Если ПропуститьНастройку Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЕстьОтборПоТестам Тогда
			// отбор только по сценариям или процессам
			Если ПропуститьСценарий Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ИсключенияПоСценариям.Количество() > 0 Тогда
			КодСценария = ДанныеСценариев.Найти(СтрокаДанныеНастроек.UIDСценария, "UID").Код;
			Если ИсключенияПоСценариям.НайтиПоЗначению(КодСценария) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ДанныеНастроекДляКомпиляции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеНастроек);
		
	КонецЦикла;
	Возврат ДанныеНастроекДляКомпиляции;
	
КонецФункции

// Получает информацию о всех сценариях в каталоге
//
// Параметры:
//  ДанныеКаталогаСценариев - Тип - Массив.
//  ДанныеЭталонныхБД - Тип - Массив.
//  ДанныеСценариев - Тип - ТаблицаЗначений.
// 
Функция ДанныеНастроекПроцессовИзТекстовыхДанных(ДанныеКаталогаПроцессов, ДанныеЭталонныхБД, ДанныеСценариев, ДанныеПроцессов, ДопПараметры) Экспорт
	
	ДанныеПроцессов.Колонки.Добавить("ИмяФайла");
	ДанныеПроцессов.Колонки.Добавить("Имя",Новый ОписаниеТипов("Строка"));
	ДанныеПроцессов.Колонки.Добавить("ВерсияСценария",Новый ОписаниеТипов("Строка"));
	ДанныеПроцессов.Колонки.Добавить("Проект");
	ДанныеПроцессов.Колонки.Добавить("ПараметрыСценария");
	ДанныеПроцессов.Колонки.Добавить("ПрофильПользователя");
	ДанныеПроцессов.Колонки.Добавить("UID",Новый ОписаниеТипов("Строка"));
	ДанныеПроцессов.Колонки.Добавить("Код");
	ДанныеПроцессов.Колонки.Добавить("ПолныйКод");
	ДанныеПроцессов.Колонки.Добавить("Ответственный");
	ДанныеПроцессов.Колонки.Добавить("УровеньОтчета1");
	ДанныеПроцессов.Колонки.Добавить("УровеньОтчета2");
	ДанныеПроцессов.Колонки.Добавить("ШагиПроцесса");
	ДанныеПроцессов.Колонки.Добавить("ТегиПроцесса");
	ДанныеПроцессов.Индексы.Добавить("ИмяФайла");
	ДанныеПроцессов.Индексы.Добавить("UID");
	
	ДанныеНастроек = Новый ТаблицаЗначений;
	ДанныеНастроек.Колонки.Добавить("ИмяФайла");
	ДанныеНастроек.Колонки.Добавить("Имя");
	ДанныеНастроек.Колонки.Добавить("Код");
	ДанныеНастроек.Колонки.Добавить("ИмяПроцесса");
	ДанныеНастроек.Колонки.Добавить("UIDПроцесса");
	ДанныеНастроек.Колонки.Добавить("ПараметрыТеста");
	ДанныеНастроек.Колонки.Добавить("ИдМассива");
	ДанныеНастроек.Колонки.Добавить("ИдентификаторБазы");
	ДанныеНастроек.Колонки.Добавить("ПрофильПользователя");
	ДанныеНастроек.Колонки.Добавить("ПараметрыЗапуска");
	ДанныеНастроек.Колонки.Добавить("ТегиТеста");
	ДанныеНастроек.Колонки.Добавить("Компилировать");
	
	ДанныеНастроекДляКомпиляции = Новый ТаблицаЗначений;
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИмяФайла");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("Имя");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("Код");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИмяПроцесса");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("UIDПроцесса");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ПараметрыТеста");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИдМассива");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ИдентификаторБазы");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ПрофильПользователя");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ПараметрыЗапуска");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("ТегиТеста");
	ДанныеНастроекДляКомпиляции.Колонки.Добавить("Компилировать");
	
	Ном = -1;
	Для Каждого Элем Из ДанныеКаталогаПроцессов Цикл
		Ном = Ном + 1;
		Если НРег(Элем.ДанныеФайлаYaml["ТипФайла"]) = "настройкапроцесса" Тогда
			СтрокаДанныеНастроек                     = ДанныеНастроек.Добавить();
			СтрокаДанныеНастроек.ИмяФайла            = Элем.ИмяФайла;
			СтрокаДанныеНастроек.Имя                 = Элем.ДанныеФайлаYaml["ДанныеТеста"]["Имя"];
			СтрокаДанныеНастроек.Код                 = Элем.ДанныеФайлаYaml["ДанныеТеста"]["Код"];
			СтрокаДанныеНастроек.ИмяПроцесса         = Элем.ДанныеФайлаYaml["ДанныеТеста"]["ПроцессНаименование"];
			СтрокаДанныеНастроек.UIDПроцесса         = Элем.ДанныеФайлаYaml["ДанныеТеста"]["UIDПроцесса"];
			СтрокаДанныеНастроек.ИдентификаторБазы   = Элем.ДанныеФайлаYaml["ДанныеТеста"]["ИдентификаторБазы"];
			СтрокаДанныеНастроек.ПараметрыТеста      = Элем.ДанныеФайлаYaml["ПараметрыТеста"];
			СтрокаДанныеНастроек.ПрофильПользователя = Элем.ДанныеФайлаYaml["ДанныеТеста"]["ПрофильПользователя"];
			СтрокаДанныеНастроек.ПараметрыЗапуска    = Элем.ДанныеФайлаYaml["ДанныеТеста"]["ПараметрыЗапуска"];
			СтрокаДанныеНастроек.ИдМассива           = Ном;
			СтрокаДанныеНастроек.ТегиТеста           = ТегиСценарияИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ТегиТеста"]);
			СтрокаДанныеНастроек.Компилировать       = Ложь;
			Продолжить;
		КонецЕсли;	 
		
		Если Элем.ДанныеФайлаYaml["ДанныеПроцесса"] = Неопределено Тогда
			//значит этот yaml файл не содержит данных о сценариях
			Продолжить;
		КонецЕсли;	 
		
		СтрокаДанныеПроцессов                     = ДанныеПроцессов.Добавить();
		СтрокаДанныеПроцессов.ИмяФайла            = Элем.ИмяФайла;
		СтрокаДанныеПроцессов.Имя                 = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["Имя"];
		СтрокаДанныеПроцессов.ВерсияСценария      = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["ВерсияСценария"];
		СтрокаДанныеПроцессов.UID                 = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["UID"];
		СтрокаДанныеПроцессов.Код                 = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["Код"];
		СтрокаДанныеПроцессов.ПолныйКод           = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["ПолныйКод"];
		СтрокаДанныеПроцессов.Проект              = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["Проект"];
		СтрокаДанныеПроцессов.ПрофильПользователя = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["ПрофильПользователя"];
		СтрокаДанныеПроцессов.Ответственный       = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["Ответственный"];
		СтрокаДанныеПроцессов.УровеньОтчета1      = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["УровеньОтчета1"];
		СтрокаДанныеПроцессов.УровеньОтчета2      = Элем.ДанныеФайлаYaml["ДанныеПроцесса"]["УровеньОтчета2"];
		СтрокаДанныеПроцессов.ШагиПроцесса   = 
		   ШагиПроцессаИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ШагиПроцесса"]);
		СтрокаДанныеПроцессов.ТегиПроцесса   = 
		   ТегиСценарияИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ТегиПроцесса"]);
		СтрокаДанныеПроцессов.ПараметрыСценария = 
		   ПараметрыСценарияИзТекстовыхДанных(Элем.ДанныеФайлаYaml["ПараметрыСценария"]);
		
	КонецЦикла;

	ЕстьОтборПоТегам = Ложь;
	КешОтборПоТегам = Новый Соответствие;
	Если НЕ ПустаяСтрока(ОтборПоТегамСценариевИлиНастроек) Тогда
		МассивТегов = СтрРазделить(ОтборПоТегамСценариевИлиНастроек, ";");
		ЕстьОтборПоТегам = Истина;
		
		Для Каждого Элем Из МассивТегов Цикл
			КешОтборПоТегам.Вставить(НРег(Элем), Истина);
		КонецЦикла;	 
		
	КонецЕсли;	 
	
	Для Каждого СтрокаДанныеНастроек Из ДанныеНастроек Цикл
		
		
		Если ИдБазыСборки.Количество() > 0 Тогда
			//значит идет компиляция сценариев по определенным базам
			Если ИдБазыСборки.НайтиПоЗначению(НРег(СтрокаДанныеНастроек.ИдентификаторБазы)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОтборПоНастройкам Тогда
			// установлен отбор по настройкам
			ПропуститьНастройку = ОтборПоНастройкамПроцессов.НайтиПоЗначению(СтрокаДанныеНастроек.Код) = Неопределено;
		КонецЕсли;
		
		Если ЕстьОтборПоТестам  Тогда
			// значит установлен отбор по процессам или сценариям
			
			ПропуститьПроцесс = Истина;
			СписокПодпроцессов = Новый Массив;
			СписокПодсценариев = Новый Массив;
			Подпроцессы(СтрокаДанныеНастроек.UIDПроцесса, ДанныеПроцессов, ДанныеСценариев, 
								СписокПодпроцессов, СписокПодсценариев);
			
			Для Каждого Сценарий Из ОтборПоСценариям Цикл
				Если СписокПодсценариев.Найти(Сценарий.Значение) <> Неопределено Тогда
					Сообщить(СтрШаблон(НСтр("ru = 'Настройка процесса с кодом <%1> запускается т.к. установлен отбор по сценарию с кодом <%2>'"), СтрокаДанныеНастроек.Код, Сценарий.Значение));
					ПропуститьПроцесс = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Процесс Из ОтборПоПроцессам Цикл
				Если СписокПодпроцессов.Найти(Процесс.Значение) <> Неопределено Тогда
					Сообщить(СтрШаблон(НСтр("ru = 'Настройка процесса с кодом <%1> запускается т.к. установлен отбор по процессу с кодом <%2>'"), СтрокаДанныеНастроек.Код, Процесс.Значение));
					ПропуститьПроцесс = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьОтборПоТегам Тогда
			НадоПродолжить = Истина;
			Для Каждого СтрокаТегиТеста Из СтрокаДанныеНастроек.ТегиТеста Цикл
				Если КешОтборПоТегам[НРег(СтрокаТегиТеста.Имя)] <> Неопределено Тогда
					НадоПродолжить = Ложь;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	 
			
			Если НадоПродолжить Тогда
				ДанныеПроцесса= ДанныеПроцессов.Найти(СтрокаДанныеНастроек.UIDПроцесса, "UID");
				Для Каждого СтрокаТегиТеста Из ДанныеПроцесса.ТегиПроцесса Цикл
					Если КешОтборПоТегам[НРег(СтрокаТегиТеста.Имя)] <> Неопределено Тогда
						НадоПродолжить = Ложь;
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
			Если НадоПродолжить Тогда
				Продолжить;
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		
		Если ЕстьОтборПоНастройкам И ЕстьОтборПоТестам Тогда
			// отбор по процессам или сценариям и по настройкам
			Если ПропуститьПроцесс И ПропуститьНастройку Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЕстьОтборПоНастройкам Тогда
			// отбор только по настройкам
			Если ПропуститьНастройку Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЕстьОтборПоТестам Тогда
			// отбор только по процессам или сценариям
			Если ПропуститьПроцесс Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока = ДанныеНастроекДляКомпиляции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныеНастроек);
		
	КонецЦикла;
	
	Возврат ДанныеНастроекДляКомпиляции;
	
КонецФункции

// Возвращает таблицу параметров сценария по данным, прочитанным из yaml файла
//
// Возвращаемое значение:
//  Массив
//
Функция ПараметрыСценарияИзТекстовыхДанных(МассивДанных) Экспорт
	Тзн = ПустаяТаблицаПараметров();
	Если МассивДанных = Неопределено Тогда
		Возврат Тзн;
	КонецЕсли;	 
	
	Для Каждого Элем Из МассивДанных Цикл
		СтрТзн                   = Тзн.Добавить();
		СтрТзн.Значение          = Элем["Значение"];
		СтрТзн.Имя               = Элем["Имя"];
		
		Если  НРег(Элем["ИсходящийПараметр"]) = "да" Тогда
			СтрТзн.ИсходящийПараметр = Истина;
		Иначе	
			СтрТзн.ИсходящийПараметр = Ложь;
		КонецЕсли;	 
		
		СтрТзн.ТипПараметра      = Элем["ТипПараметра"];
		
		Если  НРег(Элем["НесколькоЗначений"]) = "да" Тогда
			СтрТзн.НесколькоЗначений = Истина;
		Иначе	
			СтрТзн.НесколькоЗначений = Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Тзн;
КонецФункции	

// Возвращает таблицу тегов сценария по данным, прочитанным из yaml файла
//
// Возвращаемое значение:
//  Массив
//
Функция ТегиСценарияИзТекстовыхДанных(МассивДанных) Экспорт
	Тзн = ПустаяТаблицаТегов();
	Если МассивДанных = Неопределено Тогда
		Возврат Тзн;
	КонецЕсли;	 
	
	Для Каждого Элем Из МассивДанных Цикл
		СтрТзн                   = Тзн.Добавить();
		СтрТзн.НомерСтроки       = Элем["НомерСтроки"];
		СтрТзн.Имя               = Элем["Имя"];
	КонецЦикла;	
	
	Возврат Тзн;
КонецФункции

//  Возвращает таблицу вызывающих сценариев по данным, прочитанным из yaml файла
//
// Возвращаемое значение:
//  Массив
//
Функция ВызывающиеСценарииТекстовыхДанных(МассивДанных) Экспорт
	Тзн = ПустаяТаблицаВызывающихСценариев();
	Если МассивДанных = Неопределено Тогда
		Возврат Тзн;
	КонецЕсли;	 
	
	Для Каждого Элем Из МассивДанных Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.UID = Элем["UIDВызывающийСценарий"];
		СтрТзн.ИмяСценария = Элем["ИмяСценария"];
	КонецЦикла;	
	
	Возврат Тзн;
КонецФункции

//  Возвращает таблицу вложенных сценариев по данным, прочитанным из yaml файла
//
// Возвращаемое значение:
//  Массив
//
Функция ВложенныеСценарииТекстовыхДанных(МассивДанных) Экспорт
	Тзн = ПустаяТаблицаВызывающихСценариев();
	Если МассивДанных = Неопределено Тогда
		Возврат Тзн;
	КонецЕсли;	 
	
	Для Каждого Элем Из МассивДанных Цикл
		СтрТзн = Тзн.Добавить();
		СтрТзн.UID = Элем["UIDВложенныйСценарий"];
		СтрТзн.ИмяСценария = Элем["ИмяСценария"];
	КонецЦикла;	
	
	Возврат Тзн;
КонецФункции

// Возвращает тип параметра в зависимости от режима работы обработки
//
// Возвращаемое значение:
//  Строка или Пеерчисление.ТипПараметраСценарияИлиПроцесса
//
Функция ТипПараметра(Тип) Экспорт
	Если РаботаВРежимеВнешнейОбработки Тогда
		Возврат Тип;
	КонецЕсли;	
	
	Возврат Обработки.СборкаТекстовСценариев.ТипПараметра(Тип); 
КонецФункции	 

// Читает даные файла yaml в соответствие
//
// Параметры:
//  ДанныеФайлаYaml - Соответствие
//  ИмяФайла - ИмяФайла или поток
//  СчетчикСтрок - Число

Процедура ЧтениеДанныхYaml(ДанныеФайлаYaml, ИмяФайла, СчетчикСтрок) Экспорт
	ТекОтступ = "";
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	МассивДанных = СтрРазделить(Текст.Прочитать(), Символы.ПС);
	Текст.Закрыть();
	
	ТекЭлементДляВставки = Неопределено;
	ИдетСчитываниеМногострочнойСтроки = Ложь;
	МассивСтрок = Новый Массив;
	
	УровеньОбъектов = Новый Массив;
	ЗаполнитьУровниОбъектов(УровеньОбъектов);
	
	ЗначениеСтандартногоОтступа = 4;
	
	УровеньОбъектов[0] = ДанныеФайлаYaml;
	ТекущееИмяПараметра = Неопределено;
	
	СчетчикСтрок = -1;
	КолСтрок = МассивДанных.Количество();
	Пока Истина Цикл
		СчетчикСтрок = СчетчикСтрок + 1;
		Если СчетчикСтрок > КолСтрок-1 Тогда
			Прервать;
		КонецЕсли;	 
		
		ТекСтр = МассивДанных[СчетчикСтрок];
		СтрЛ = СокрЛ(ТекСтр);
		Если ИдетСчитываниеМногострочнойСтроки Тогда
			Если Лев(СтрЛ,13) = "ТипПараметра:" Тогда
				ИдетСчитываниеМногострочнойСтроки = Ложь;
				ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
				ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
				УровеньОбъектов[ТекУровень].Вставить("Значение",СтрСоединить(ТекЭлементДляВставки,Символы.ПС));
			ИначеЕсли Лев(СтрЛ,21) = "ИмяПараметраПоСсылке:" Тогда
				ИдетСчитываниеМногострочнойСтроки = Ложь;
				ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
				ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
				УровеньОбъектов[ТекУровень].Вставить("ЗначениеПроизвольное",СтрСоединить(ТекЭлементДляВставки,Символы.ПС));
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ИдетСчитываниеМногострочнойСтроки Тогда
			Если ТекСтр = "" И НРег(ТекущееИмяПараметра) <> "текстсценария" Тогда
				ИдетСчитываниеМногострочнойСтроки = Ложь;
				Продолжить;
			Иначе	
				//надо убрать отступ в начале строки
				ТекЭлементДляВставки.Добавить(Сред(ТекСтр,5));
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СокрЛП(ТекСтр) = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ТекОтступ = Найти(ТекСтр,СтрЛ)-1;
		ТекУровень = ТекОтступ/ЗначениеСтандартногоОтступа;
		Если ТекУровень = 0 Тогда
			ТекЭлементДляВставки = ДанныеФайлаYaml;
		Иначе	
			ТекЭлементДляВставки = УровеньОбъектов[ТекУровень];
		КонецЕсли;	 
		
		Если ТекОтступ = 0 Тогда
			Имя      = Неопределено;
			Значение = Неопределено;
			ЗначениеИзСтрокиYaml(ТекСтр,Имя,Значение);
			ТекущееИмяПараметра = Имя;
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("СчетчикСтрок",СчетчикСтрок);
			ПараметрыОбработки.Вставить("УровеньОбъектов",УровеньОбъектов);
			ПараметрыОбработки.Вставить("ТекУровень",ТекУровень);
			ПараметрыОбработки.Вставить("ИдетСчитываниеМногострочнойСтроки",ИдетСчитываниеМногострочнойСтроки);
			
			ОбработатьСтрокуЗначенияYaml(Имя,Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки);
			
			ИдетСчитываниеМногострочнойСтроки = ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки;
		Иначе
			Если Лев(СтрЛ,1) = "-" Тогда
				ЭлементМассива = Новый Соответствие;
				ТекЭлементДляВставки = УровеньОбъектов[ТекУровень];
				ТекЭлементДляВставки.Добавить(ЭлементМассива);
				УровеньОбъектов[ТекУровень+1] = ЭлементМассива;
			Иначе	
				Имя      = Неопределено;
				Значение = Неопределено;
				ЗначениеИзСтрокиYaml(ТекСтр,Имя,Значение);
				
				
				ПараметрыОбработки = Новый Структура;
				ПараметрыОбработки.Вставить("СчетчикСтрок",СчетчикСтрок);
				ПараметрыОбработки.Вставить("УровеньОбъектов",УровеньОбъектов);
				ПараметрыОбработки.Вставить("ТекУровень",ТекУровень);
				ПараметрыОбработки.Вставить("ИдетСчитываниеМногострочнойСтроки",ИдетСчитываниеМногострочнойСтроки);
				
				ОбработатьСтрокуЗначенияYaml(Имя,Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки);
				
				ИдетСчитываниеМногострочнойСтроки = ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры 

#КонецОбласти

# Область СлужебныеПроцедурыИФункции

Функция ШагиПроцессаИзТекста(ПараметрыФормированияТекстаСценария, UIDПроцесса)
	СтрокаДанныеПроцессы = ПараметрыФормированияТекстаСценария.ДанныеПроцессов.Найти(UIDПроцесса,"UID");
	
	ШагиПроцесса = Новый ТаблицаЗначений;
	ШагиПроцесса.Колонки.Добавить("Сценарий");
	ШагиПроцесса.Колонки.Добавить("ШагПроцесса");
	ШагиПроцесса.Колонки.Добавить("ШагПроцессаUID");
	ШагиПроцесса.Колонки.Добавить("Наименование");
	ШагиПроцесса.Колонки.Добавить("СценарийUID");
	ШагиПроцесса.Колонки.Добавить("СценарийНаименование");
	ШагиПроцесса.Колонки.Добавить("КодСценария");
	ШагиПроцесса.Колонки.Добавить("Исполнитель");
	ШагиПроцесса.Колонки.Добавить("ТипШага");
	ШагиПроцесса.Колонки.Добавить("ВложенныйПроцессНаименование");
	ШагиПроцесса.Колонки.Добавить("ВложенныйПроцессUID");
	ШагиПроцесса.Колонки.Добавить("ПараметрыСценария");
	
	Для Каждого СтрокаШагиПроцесса Из СтрокаДанныеПроцессы.ШагиПроцесса Цикл
		СтрокаСценарииПроцесса = ШагиПроцесса.Добавить();
		СтрокаСценарииПроцесса.Сценарий = СтрокаШагиПроцесса.Сценарий;
		СтрокаСценарииПроцесса.ШагПроцесса = СтрокаШагиПроцесса.ШагПроцесса;
		СтрокаСценарииПроцесса.ШагПроцессаUID = СтрокаШагиПроцесса.UID;
		СтрокаСценарииПроцесса.Наименование = СтрокаШагиПроцесса.Наименование;
		СтрокаСценарииПроцесса.СценарийUID = СтрокаШагиПроцесса.СценарийUID;
		СтрокаСценарииПроцесса.СценарийНаименование = СтрокаШагиПроцесса.СценарийНаименование;
		СтрокаСценарииПроцесса.КодСценария = СтрокаШагиПроцесса.СценарийКод;
		СтрокаСценарииПроцесса.Исполнитель = СтрокаШагиПроцесса.ИсполнительНаименование;
		СтрокаСценарииПроцесса.ТипШага = СтрокаШагиПроцесса.ТипШага;
		СтрокаСценарииПроцесса.ВложенныйПроцессНаименование = СтрокаШагиПроцесса.ВложенныйПроцессНаименование;
		СтрокаСценарииПроцесса.ВложенныйПроцессUID = СтрокаШагиПроцесса.ВложенныйПроцессUID;
		СтрокаСценарииПроцесса.ПараметрыСценария = СтрокаШагиПроцесса.ПараметрыШага;
	КонецЦикла;	 
	
	Возврат ШагиПроцесса;
КонецФункции	 

Функция ДанныеНастройкиСценария(НастройкаСценария)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗапускаСценариев.Владелец.Владелец КАК Проект,
		|	НастройкиЗапускаСценариев.Сценарий КАК Сценарий,
		|	НастройкиЗапускаСценариев.Наименование КАК Наименование,
		|	НастройкиЗапускаСценариев.Владелец КАК ЭталоннаяБаза
		|ИЗ
		|	Справочник.НастройкиЗапускаСценариев КАК НастройкиЗапускаСценариев
		|ГДЕ
		|	НастройкиЗапускаСценариев.Ссылка = &НастройкаСценария";
	
	Запрос.УстановитьПараметр("НастройкаСценария", НастройкаСценария);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Данные = Новый Структура;
	Данные.Вставить("Проект", Неопределено);
	Данные.Вставить("Сценарий", Неопределено);
	Данные.Вставить("Наименование", Неопределено);
	Данные.Вставить("ЭталоннаяБаза", Неопределено);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Данные.Вставить("Проект", ВыборкаДетальныеЗаписи.Проект);
		Данные.Вставить("Сценарий", ВыборкаДетальныеЗаписи.Сценарий);
		Данные.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Данные.Вставить("ЭталоннаяБаза", ВыборкаДетальныеЗаписи.ЭталоннаяБаза);
	КонецЦикла;
	
	Возврат Данные;
КонецФункции	 

Функция ТегиНастройкиСценария(НастройкаСценария)
	ДанныеНастройкиСценария = ДанныеНастройкиСценария(НастройкаСценария);
	НаборСвойств = НаборСвойствОбъекта(ДанныеНастройкиСценария.Проект,
		"НаборСвойствДляНастроекЗапускаСценариевВыгружаемый");
	
	ЗначенияСвойств = ЗначенияСвойств(НастройкаСценария, Истина, Ложь, НаборСвойств.ВыгрузитьКолонку("Свойство"));
	
	Возврат ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств);
КонецФункции	 

Функция ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств)
	ЗначенияСвойств.Колонки.Добавить("Имя");
	Для Каждого СтрокаЗначенияСвойств Из ЗначенияСвойств Цикл
		СтрокаНаборСвойств = НаборСвойств.Найти(СтрокаЗначенияСвойств.Свойство, "Свойство");
		Если СтрокаНаборСвойств <> Неопределено Тогда
			СтрокаЗначенияСвойств.Имя = СтрокаНаборСвойств.Наименование;
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат ЗначенияСвойств;
КонецФункции	 

Функция ДанныеСценарияРаботыПользователя(Сценарий)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователей.Наименование КАК Наименование,
		|	СценарииРаботыПользователей.Владелец КАК Проект
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
		|ГДЕ
		|	СценарииРаботыПользователей.Ссылка = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Данные = Новый Структура;
	Данные.Вставить("Проект", Неопределено);
	Данные.Вставить("Наименование", Неопределено);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Данные.Вставить("Проект", ВыборкаДетальныеЗаписи.Проект);
		Данные.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат Данные;
КонецФункции	 

Функция ТегиСценария(Сценарий)
	ДанныеСценарияРаботыПользователя = ДанныеСценарияРаботыПользователя(Сценарий);
	НаборСвойств = НаборСвойствОбъекта(ДанныеСценарияРаботыПользователя.Проект,
		"НаборСвойствДляСценариевРаботыПользователейВыгружаемый");
	
	ЗначенияСвойств = ЗначенияСвойств(Сценарий, Истина, Ложь, НаборСвойств.ВыгрузитьКолонку("Свойство"));
	Возврат ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств);
КонецФункции	 

Функция ТегиПроцесса(Процесс, НаборСвойств)
	ЗначенияСвойств = ЗначенияСвойств(Процесс, Истина, Ложь, НаборСвойств.ВыгрузитьКолонку("Свойство"));
	Возврат ДополнитьТаблицуЗначенийСвойств(ЗначенияСвойств, НаборСвойств);
КонецФункции	 

Функция ДанныеСценарияДляПолученияСхемыСценария(Сценарий)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователей.Ссылка КАК Ссылка,
		|	СценарииРаботыПользователей.Владелец КАК Владелец,
		|	СценарииРаботыПользователей.ОбычныйТекст КАК ОбычныйТекст,
		|	СценарииРаботыПользователей.ПараметрыВходящие.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Имя КАК Имя,
		|		Значение КАК Значение,
		|		ФО КАК ФО,
		|		ТипПараметра КАК ТипПараметра,
		|		ИсходящийПараметр КАК ИсходящийПараметр
		|	) КАК ПараметрыВходящие
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
		|ГДЕ
		|	СценарииРаботыПользователей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура;
	Результат.Вставить("Проект",Неопределено);
	Результат.Вставить("Текст",Неопределено);
	Результат.Вставить("ПараметрыВходящие",Неопределено);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить("Проект",ВыборкаДетальныеЗаписи.Владелец);
		Результат.Вставить("Текст",ВыборкаДетальныеЗаписи.ОбычныйТекст);
		Результат.Вставить("ПараметрыВходящие",ВыборкаДетальныеЗаписи.ПараметрыВходящие.Выгрузить());
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция Подсценарии(UIDСценария, ДанныеСценариев, МассивПодсценариев)
	
	СтрокаДанныеСценариев = ДанныеСценариев.Найти(UIDСценария, "UID");
	Если СтрокаДанныеСценариев <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаДанныеСценариев) Тогда
			МассивПодсценариев.Добавить(СтрокаДанныеСценариев.Код);
			Для Каждого ВложенныйСценарий Из СтрокаДанныеСценариев.ВложенныеСценарии Цикл
				 Подсценарии(ВложенныйСценарий.UID, ДанныеСценариев, МассивПодсценариев);
			 КонецЦикла;
		КонецЕсли;  
	КонецЕсли;

КонецФункции

Функция Подпроцессы(UIDПроцесса, ДанныеПроцесса, ДанныеСценариев, МассивПодпроцессов, МассивПодсценариев)
	
	СтрокаДанныеПроцесса = ДанныеПроцесса.Найти(UIDПроцесса, "UID");
	Если СтрокаДанныеПроцесса <> Неопределено Тогда
	
		МассивПодпроцессов.Добавить(СтрокаДанныеПроцесса.ПолныйКод);
		
		Для Каждого ШагПроцесса Из СтрокаДанныеПроцесса.ШагиПроцесса Цикл
			РезультатШага = Новый Массив;
			Если ШагПроцесса.ТипШага = 0 Тогда
				Подсценарии(ШагПроцесса.СценарийUID, ДанныеСценариев, МассивПодсценариев);

			ИначеЕсли ШагПроцесса.ТипШага = 1 Тогда
				Подпроцессы(ШагПроцесса.ПроцессUID, ДанныеПроцесса, ДанныеСценариев, МассивПодпроцессов, МассивПодсценариев);
				
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип шага %1 в процессе %1'"), 
											ШагПроцесса.UID, UIDПроцесса);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ПустаяТаблицаВложенныхСценариев()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Версия");
	Тзн.Колонки.Добавить("UID");
	Тзн.Колонки.Добавить("ИмяСценария");
	
	Возврат Тзн;
КонецФункции	

Функция ПустаяТаблицаШаговПроцесса()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("ШагПроцесса");
	Тзн.Колонки.Добавить("UID");
	Тзн.Колонки.Добавить("Процесс");
	Тзн.Колонки.Добавить("Наименование");
	Тзн.Колонки.Добавить("Сценарий");
	Тзн.Колонки.Добавить("СценарийНаименование");
	Тзн.Колонки.Добавить("СценарийКод");
	Тзн.Колонки.Добавить("СценарийUID");
	Тзн.Колонки.Добавить("ПолныйКод");
	Тзн.Колонки.Добавить("ИсполнительНаименование");
	Тзн.Колонки.Добавить("ПараметрыШага");
	Тзн.Колонки.Добавить("ТипШага");
	Тзн.Колонки.Добавить("ВложенныйПроцессНаименование");
	Тзн.Колонки.Добавить("ВложенныйПроцессUID");
	
	Возврат Тзн;
КонецФункции	

Функция ВложенныеСценарииИзТекстовыхДанных(МассивДанных)
	Тзн = ПустаяТаблицаВложенныхСценариев();
	Если МассивДанных = Неопределено Тогда
		Возврат Тзн;
	КонецЕсли;	 
	
	Для Каждого Элем Из МассивДанных Цикл
		СтрТзн                   = Тзн.Добавить();
		СтрТзн.Версия            = Элем["Версия"];
		СтрТзн.UID               = Элем["UIDВложенныйСценарий"];
		СтрТзн.ИмяСценария       = Элем["ИмяСценария"];
	КонецЦикла;	
	
	Возврат Тзн;
КонецФункции	

Функция ПараметрыШагаПроцессаИзТекстовыхДанных(Массив)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Имя");
	Тзн.Колонки.Добавить("ТипПараметра");
	Тзн.Колонки.Добавить("ШагПроцессаЗначениеПоСсылке");
	Тзн.Колонки.Добавить("ШагПроцессаЗначениеПоСсылкеUID");
	Тзн.Колонки.Добавить("ИсходящийПараметр");
	Тзн.Колонки.Добавить("ЗначениеПоСсылке");
	Тзн.Колонки.Добавить("ЗначениеПроизвольное");
	Тзн.Колонки.Добавить("ИмяПараметраПоСсылке");
	
	Для Каждого Элем Из Массив Цикл
		СтрокаТзн = Тзн.Добавить();
		СтрокаТзн.Имя = Элем["Имя"];
		СтрокаТзн.ТипПараметра = Элем["ТипПараметра"];
		СтрокаТзн.ШагПроцессаЗначениеПоСсылке = Элем["ШагПроцессаЗначениеПоСсылке"];
		СтрокаТзн.ШагПроцессаЗначениеПоСсылкеUID = Элем["ШагПроцессаЗначениеПоСсылкеUID"];
		СтрокаТзн.ИсходящийПараметр = Элем["ИсходящийПараметр"];
		СтрокаТзн.ЗначениеПоСсылке = Элем["ЗначениеПоСсылке"];
		СтрокаТзн.ЗначениеПроизвольное = Элем["ЗначениеПроизвольное"];
		СтрокаТзн.ИмяПараметраПоСсылке = Элем["ИмяПараметраПоСсылке"];
	КонецЦикла;	 
	
	Возврат Тзн;
КонецФункции	 

Функция ШагиПроцессаИзТекстовыхДанных(МассивДанных)
	Тзн = ПустаяТаблицаШаговПроцесса();
	Если МассивДанных = Неопределено Тогда
		Возврат Тзн;
	КонецЕсли;	 
	
	Для Каждого Элем Из МассивДанных Цикл
		СтрТзн                   = Тзн.Добавить();
		СтрТзн.ШагПроцесса       = Элем["ШагПроцесса"];
		СтрТзн.UID               = Элем["UID"];
		СтрТзн.Процесс           = Элем["Процесс"];
		СтрТзн.Наименование      = Элем["Наименование"];
		СтрТзн.Сценарий          = Элем["Сценарий"];
		СтрТзн.СценарийНаименование = Элем["СценарийНаименование"];
		СтрТзн.СценарийКод       = Элем["СценарийКод"];
		СтрТзн.СценарийUID       = Элем["СценарийUID"];
		СтрТзн.ПолныйКод         = Элем["ПолныйКод"];
		СтрТзн.ИсполнительНаименование = Элем["ИсполнительНаименование"];
		СтрТзн.ПараметрыШага    = ПараметрыШагаПроцессаИзТекстовыхДанных(Элем["ПараметрыШага"]);
		СтрТзн.ТипШага          = Число(Элем["ТипШага"]);
		СтрТзн.ВложенныйПроцессНаименование = Элем["ВложенныйПроцессНаименование"];
		СтрТзн.ВложенныйПроцессUID = Элем["ВложенныйПроцессUID"];
	КонецЦикла;	
	
	Возврат Тзн;
КонецФункции	

Функция ПустаяТаблицаТегов()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомерСтроки");
	Тзн.Колонки.Добавить("Имя");
	
	Возврат Тзн;
КонецФункции	 

Функция ПустаяТаблицаВызывающихСценариев()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("UID");
	Тзн.Колонки.Добавить("ИмяСценария");
	
	Возврат Тзн;
КонецФункции	 

Функция ПустаяТаблицаПараметров()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Имя");
	Тзн.Колонки.Добавить("Значение");
	Тзн.Колонки.Добавить("ФО");
	Тзн.Колонки.Добавить("ТипПараметра");
	Тзн.Колонки.Добавить("ИсходящийПараметр");
	Тзн.Колонки.Добавить("НесколькоЗначений");
	
	Возврат Тзн;
КонецФункции	

Функция ДанныеДляПодключенияКБДTestClientТекст(Параметры)
	Для Каждого СтрокаДанныеЭталонныхБД Из Параметры.ДанныеЭталонныхБД Цикл
		Если СтрокаДанныеЭталонныхБД["ИдентификаторБазы"] <> Параметры.ИдентификаторБазы Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПрофилиПользователей = СтрокаДанныеЭталонныхБД["ПрофилиПользователей"];
		
		Для Каждого Профиль Из ПрофилиПользователей Цикл
			Если НЕ Параметры.Свойство("ПрофильПользователя") 
				ИЛИ (Параметры.Свойство("ПрофильПользователя") И 
					Профиль["ПрофильПользователя"] <> Параметры.ПрофильПользователя) Тогда
				Продолжить;
			КонецЕсли;	 
			
			Возврат Новый Структура("Логин,Пароль,ИмяПрофиля",
			       Профиль["Логин"],Профиль["Пароль"],Профиль["ПрофильПользователя"]);
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	

Процедура ОбработатьЗначенияПараметровСценария(ПараметрыТеста,КоличествоВариантовСценария)
	Для Каждого ПараметрТеста Из ПараметрыТеста Цикл
		Если ПараметрТеста.ТипПараметра = ТипПараметра("Таблица") Тогда
			Массив = Новый Массив;
			Массив.Добавить(ПараметрТеста.Значение);
			ПараметрТеста.ЗначенияПараметра = Массив;
			Продолжить;
		КонецЕсли;	 

		ЗначенияПараметра = ПараметрТеста.Значение;
		
		ПараметрТеста.ЗначенияПараметра = МассивЗначенийПараметра(ЗначенияПараметра);
		
		КоличествоВариантовСценария = КоличествоВариантовСценария * ПараметрТеста.ЗначенияПараметра.Количество();
	КонецЦикла;	
КонецПроцедуры

Функция НаборыПараметровСценария(ПараметрыТеста)
	НаборыПараметров = Новый Массив;
	ТекущийНабор     = ПустойНаборПараметров();
	НаборыПараметров.Добавить(ТекущийНабор);
	
	РассчитатьНаборыПараметровРекурсивно(НаборыПараметров,ТекущийНабор,ПараметрыТеста,-1);
	
	Возврат НаборыПараметров;
КонецФункции	

Функция ТекстСценарияПоНаборуПараметров(ПараметрыДляПолученияТекстаСценария)
	ВложенныйПроцесс = ПараметрыДляПолученияТекстаСценария.ВложенныйПроцесс;
	Сценарий         = ПараметрыДляПолученияТекстаСценария.Сценарий;
	НаборПараметров  = ПараметрыДляПолученияТекстаСценария.НаборПараметров;
	СхемаДерево      = ПараметрыДляПолученияТекстаСценария.СхемаДерево;
	ДоТеста          = ПараметрыДляПолученияТекстаСценария.ДоТеста;
	ПроверкаТеста    = ПараметрыДляПолученияТекстаСценария.ПроверкаТеста;
	ПослеТеста       = ПараметрыДляПолученияТекстаСценария.ПослеТеста;
	НомерНабора      = ПараметрыДляПолученияТекстаСценария.НомерНабора;
	РазмерНабора     = ПараметрыДляПолученияТекстаСценария.РазмерНабора;
	ЭтоПроцесс = ПараметрыДляПолученияТекстаСценария.ЭтоПроцесс;
	
	МассивСтрок = Новый Массив;
	
	Если ПараметрыДляПолученияТекстаСценария.Свойство("ПараметрыСценария") Тогда
		ПараметрыВходящие = ПараметрыДляПолученияТекстаСценария.ПараметрыСценария;
	Иначе	
		Если ПараметрыДляПолученияТекстаСценария.Свойство("ЧтениеИзGit") И ПараметрыДляПолученияТекстаСценария.ЧтениеИзGit Тогда
			ПараметрыВходящие = ПараметрыДляПолученияТекстаСценария.ТаблицаПараметровGit;
		ИначеЕсли Сценарий <> Неопределено Тогда
			ПараметрыВходящие = Сценарий.ПараметрыВходящие.Выгрузить();
		Иначе	
			Если ПараметрыДляПолученияТекстаСценария.ЧтениеИзТекста Тогда
			Иначе	
				ПараметрыВходящие = ВложенныйПроцесс.ПараметрыПроцесса.Выгрузить();
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	СтрокаПараметровСНесколькимиЗначениями = "";
	Для Каждого ПараметрСНесколькимиЗначениями Из НаборПараметров.ПараметрыСНесколькимиЗначениями Цикл
		СтрокаПараметровСНесколькимиЗначениями = СтрокаПараметровСНесколькимиЗначениями + ПараметрСНесколькимиЗначениями.ИмяПараметра
		                                         + "=" + ПараметрСНесколькимиЗначениями.ЗначениеПараметра + ";";
	КонецЦикла;	
	
	Если ЭтоПроцесс Тогда
		
		Если ПараметрыДляПолученияТекстаСценария.ЧтениеИзТекста Тогда
			ТипШага = 0;
			Если ПараметрыДляПолученияТекстаСценария.Свойство("ТипШага") Тогда
				ТипШага = ПараметрыДляПолученияТекстаСценария.ТипШага;
			КонецЕсли;	 
			Если ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.Свойство("КодСценария") И ТипШага = 0 Тогда
				МассивСтрок.Добавить("@КодСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.КодСценария);
				МассивСтрок.Добавить("@UIDСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDСценария);
				Если ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.Свойство("UIDРазделПроекта") Тогда
					МассивСтрок.Добавить("@UIDРазделПроекта=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDРазделПроекта);
				Иначе	
					МассивСтрок.Добавить("@UIDРазделПроекта=");
				КонецЕсли;	 
			Иначе
				МассивСтрок.Добавить("@КодПроцесса=" + ПараметрыДляПолученияТекстаСценария.ПолныйКод);
			КонецЕсли;	 
		Иначе	
			Если ПараметрыДляПолученияТекстаСценария.Сценарий <> Неопределено Тогда
				МассивСтрок.Добавить("@КодСценария=" + ПараметрыДляПолученияТекстаСценария.Сценарий.Код);
				МассивСтрок.Добавить("@UIDСценария=" + Строка(ПараметрыДляПолученияТекстаСценария.Сценарий.УникальныйИдентификатор()));
				МассивСтрок.Добавить("@UIDРазделПроекта=" + Строка(ПараметрыДляПолученияТекстаСценария.Сценарий.РазделПроекта.УникальныйИдентификатор()));
			Иначе
				МассивСтрок.Добавить("@КодПроцесса=" + ПараметрыДляПолученияТекстаСценария.ВложенныйПроцесс.ПолныйКод);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ПараметрыДляПолученияТекстаСценария.Сценарий = Неопределено Тогда
			МассивСтрок.Добавить("* Подпроцесс: " + ПараметрыДляПолученияТекстаСценария.ВложенныйПроцесс);
		Иначе	
			МассивСтрок.Добавить("* Сценарий: " + ПараметрыДляПолученияТекстаСценария.ИмяСценария);
		КонецЕсли;	 
		
		Если ПараметрыДляПолученияТекстаСценария.ЧтениеИзТекста Тогда
			ДанныеСценариев = ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеСценариев;
			СтрокаДанныеСценариев = ДанныеСценариев.Найти(ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDСценария
			    ,"UID");
			ДанныеПроцессов = ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеПроцессов;
			СтрокаДанныеПроцессов = ДанныеПроцессов.Найти(ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDПроцесса,"UID");
			ШагиПроцесса = СтрокаДанныеПроцессов.ШагиПроцесса;
			СтрокаШагиПроцесса = ШагиПроцесса.Найти(ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDШагПроцесса,
			  "UID");
			
			ТекущаяНастройкаПроцесса = ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ТекущаяНастройкаПроцесса;
			ДанныеЭталонныхБД = ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеЭталонныхБД;
			Если ДанныеЭталонныхБД.Количество() > 0 Тогда
				ЭталонныеБД = ДанныеЭталонныхБД[0].ДанныеФайлаYaml["ЭталонныеБД"];
				ИдентификаторБазыИзнастройки = ТекущаяНастройкаПроцесса.ИдентификаторБазы;
				Для Каждого ДанныеЭталоннойБД Из ЭталонныеБД Цикл
					Если НРег(ДанныеЭталоннойБД["ИдентификаторБазы"]) = НРег(ИдентификаторБазыИзнастройки) Тогда
						ПрофилиПользователей = ДанныеЭталоннойБД["ПрофилиПользователей"];
						Для Каждого ПрофильПользователяЭталоннойБД Из ПрофилиПользователей Цикл
							Если ПрофильПользователяЭталоннойБД["ПрофильПользователя"] = СтрокаШагиПроцесса.ИсполнительНаименование Тогда
								МассивСтрок.Добавить("	И я подключаю TestClient """ + ПрофильПользователяЭталоннойБД["ПрофильПользователя"]
									+ """ логин """ +  ПрофильПользователяЭталоннойБД["Логин"]
									+ """ пароль """ + ПрофильПользователяЭталоннойБД["Пароль"] + """");
								МассивСтрок.Добавить("	И я закрыл все окна клиентского приложения");
								Прервать;
							КонецЕсли;	 
						КонецЦикла;	 
						
						Прервать;
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
		Иначе	
			НастройкиБДДляЗапускаТестовИзСценария = НастройкиБДДляЗапускаТестовИзСценария();
			Если ПараметрыДляПолученияТекстаСценария.Свойство("ИсполнительШагаПроцесса")
				и ЗначениеЗаполнено(ПараметрыДляПолученияТекстаСценария.ИсполнительШагаПроцесса) Тогда
				ПараметрыПодключения = ДанныеДляПодключенияКБДTestClient(
					ПараметрыДляПолученияТекстаСценария.ИсполнительШагаПроцесса,
					НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза,Неопределено);
				Иначе	
					
				Если Сценарий <> Неопределено Тогда
					ПараметрыПодключения = ДанныеДляПодключенияКБДTestClient(
						Сценарий.ПрофильПользователя,
						НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза,Неопределено);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если ПараметрыПодключения <> Неопределено Тогда
				
				Если ПараметрыДляПолученияТекстаСценария.ПросмотрСценария Тогда
					ИмяПрофиля = ПараметрыПодключения.ИмяПрофиля;
				Иначе
					ИмяПрофиля = Неопределено;
					Если ЭтоПроцесс Тогда
						ИмяПрофиля = ИмяПрофиляTestClient(ПараметрыДляПолученияТекстаСценария.ИсполнительШагаПроцесса,
							    НастройкиБДДляЗапускаТестовИзСценария, Истина);
					КонецЕсли;
					
					Если ИмяПрофиля = Неопределено Тогда
						ИмяПрофиля = ИмяПрофиляTestClient(Сценарий.ПрофильПользователя, НастройкиБДДляЗапускаТестовИзСценария, Истина);
					КонецЕсли;	 
				КонецЕсли;	 
				
				МассивСтрок.Добавить("	И я подключаю TestClient """ + ИмяПрофиля
				+ """ логин """ +  ПараметрыПодключения.Логин 
				+ """ пароль """ + ПараметрыПодключения.Пароль + """");
				МассивСтрок.Добавить("	И я закрыл все окна клиентского приложения");
			КонецЕсли;	 
		КонецЕсли;	 
		
	Иначе	
		Если ПараметрыДляПолученияТекстаСценария.Свойство("ЧтениеИзGit") И ПараметрыДляПолученияТекстаСценария.ЧтениеИзGit Тогда
			ТегиСценария = ПараметрыДляПолученияТекстаСценария.ТаблицаТегов;
		ИначеЕсли ПараметрыДляПолученияТекстаСценария.ЧтениеИзТекста Тогда
			ТегиСценария = ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ТегиСценария;
		Иначе	
			ТегиСценария = ТегиСценария(Сценарий.Ссылка);
		КонецЕсли;	 
		
		ТегиНастройкиСценария = Неопределено;
		Если ПараметрыДляПолученияТекстаСценария.ЧтениеИзТекста Тогда
			ТегиНастройкиСценария = ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ТегиТеста;
		Иначе
			Если ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.Свойство("НастройкаСценария") Тогда
				ТегиНастройкиСценария =
					ТегиНастройкиСценария(ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценария);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Для Каждого СтрокаТегиСценария Из ТегиСценария Цикл
			МассивСтрок.Добавить("@" + СтрокаТегиСценария.Имя);
		КонецЦикла;	 
		
		Если ТегиНастройкиСценария <> Неопределено Тогда
			Для Каждого СтрокаТегиНастройкиСценария Из ТегиНастройкиСценария Цикл
				МассивСтрок.Добавить("@" + СтрокаТегиНастройкиСценария.Имя);
			КонецЦикла;	 
		КонецЕсли;	 
		
		Если ПараметрыДляПолученияТекстаСценария.Свойство("ЧтениеИзGit") И ПараметрыДляПолученияТекстаСценария.ЧтениеИзGit Тогда
			МассивСтрок.Добавить("@КодСценария=" + ПараметрыДляПолученияТекстаСценария.КодСценарияGit);
			МассивСтрок.Добавить("@UIDСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDСценария);
			Если ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.Свойство("НастройкаСценарияGit") Тогда
				МассивСтрок.Добавить("@КодНастройкиСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценарияGit.Код);
				МассивСтрок.Добавить("@UIDНастройкиСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценарияGit.UID);
				МассивСтрок.Добавить("@ИмяНастройкиСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценарияGit.Наименование);
				Если ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценарияGit.Свойство("ЭталоннаяБД") Тогда
					ДанныеЭталоннойБазы = Обработки.СборкаТекстовСценариев.ДанныеЭталоннойБазы(
						ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценарияGit.ЭталоннаяБД);
					МассивСтрок.Добавить("@ИдентификаторБазы=" + ДанныеЭталоннойБазы.ИдентификаторБазы);
				КонецЕсли;	
			КонецЕсли;	 
			МассивСтрок.Добавить("@UIDРазделПроекта=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDРазделПроекта);
		ИначеЕсли ПараметрыДляПолученияТекстаСценария.ЧтениеИзТекста Тогда
			МассивСтрок.Добавить("@КодСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.КодСценария);
			МассивСтрок.Добавить("@UIDСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDСценария);
			МассивСтрок.Добавить("@КодНастройкиСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеНастройкиСценария.Код);
			МассивСтрок.Добавить("@UIDНастройкиСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеНастройкиСценария.UID);
			МассивСтрок.Добавить("@UIDРазделПроекта=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDРазделПроекта);
			МассивСтрок.Добавить("@ИмяНастройкиСценария=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеНастройкиСценария.Имя);
			МассивСтрок.Добавить("@ИдентификаторБазы=" + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеНастройкиСценария.ИдентификаторБазы);
			ДанныеСценария = ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ДанныеСценариев.Найти(
				ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.UIDСценария, "UID");
			МассивСтрок.Добавить("@UIDОтветственный=" + ДанныеСценария.UIDОтветственный);
		Иначе	
			МассивСтрок.Добавить("@КодСценария=" + ПараметрыДляПолученияТекстаСценария.Сценарий.Код);
			МассивСтрок.Добавить("@UIDСценария="
				+ Строка(ПараметрыДляПолученияТекстаСценария.Сценарий.Ссылка.УникальныйИдентификатор()));
			Если ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.Свойство("НастройкаСценария") Тогда
				МассивСтрок.Добавить("@КодНастройкиСценария="
					+ ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценария.Код);
				МассивСтрок.Добавить("@UIDНастройкиСценария="
					+ Строка(ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.НастройкаСценария.Ссылка.УникальныйИдентификатор()));
			КонецЕсли;	 
			МассивСтрок.Добавить("@UIDРазделПроекта="
				+ Строка(ПараметрыДляПолученияТекстаСценария.Сценарий.Ссылка.РазделПроекта.УникальныйИдентификатор()));
		КонецЕсли;	 
		
		Если ПараметрыДляПолученияТекстаСценария.ИспользоватьИмяСценария Тогда
			МассивСтрок.Добавить("Сценарий: " + Сценарий
		                 + ?(СтрокаПараметровСНесколькимиЗначениями = "",""," " + СтрокаПараметровСНесколькимиЗначениями));
		Иначе				 
			Если ПараметрыДляПолученияТекстаСценария.ЧтениеИзТекста Тогда
				МассивСтрок.Добавить("Сценарий: " + ПараметрыДляПолученияТекстаСценария.СтруктураПараметров.ИмяНастройки
		                 + ?(СтрокаПараметровСНесколькимиЗначениями = "",""," " + СтрокаПараметровСНесколькимиЗначениями));
			Иначе	
				Если РазмерНабора = 1 Тогда
					МассивСтрок.Добавить("Сценарий: " + СокрЛП(ПараметрыДляПолученияТекстаСценария.Сценарий)
		                 + ?(СтрокаПараметровСНесколькимиЗначениями = "",""," " + СтрокаПараметровСНесколькимиЗначениями));
				Иначе	
					МассивСтрок.Добавить("Сценарий: " + СокрЛП(ПараметрыДляПолученияТекстаСценария.Сценарий) + " " + XMLСтрока(НомерНабора)
		                 + ?(СтрокаПараметровСНесколькимиЗначениями = "",""," " + СтрокаПараметровСНесколькимиЗначениями));
				КонецЕсли;	 
			КонецЕсли;	 				 
		КонецЕсли;	 
		
	КонецЕсли;	 
	
	ПараметрыДляПолученияТекстаСценария.Вставить("ПараметрыВходящие",ПараметрыВходящие);
	ПараметрыДляПолученияТекстаСценария.Вставить("МассивСтрок",МассивСтрок);
	ПараметрыДляПолученияТекстаСценария.Вставить("НаборПараметров",НаборПараметров);
	ПараметрыДляПолученияТекстаСценария.Вставить("СхемаДерево",СхемаДерево);
	
	ДанныеНомеровСтрок = Новый Массив;
	ПараметрыДляПолученияТекстаСценария.Вставить("ДанныеНомеровСтрок",ДанныеНомеровСтрок);
	ПараметрыДляПолученияТекстаСценария.Вставить("ДанныеВложенногоСценария",Неопределено);
	
	МассивИерархииСценариев = Новый Массив;
	ПараметрыДляПолученияТекстаСценария.Вставить("МассивИерархииСценариев",МассивИерархииСценариев);
	
	ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыДляПолученияТекстаСценария,0);
	
	ОбъектСценария = Новый Структура;
	ОбъектСценария.Вставить("ТекстСценария",СтрСоединить(МассивСтрок,Символы.ПС));
	ОбъектСценария.Вставить("ПараметрыСНесколькимиЗначениями",НаборПараметров.ПараметрыСНесколькимиЗначениями);
	ОбъектСценария.Вставить("Сценарий",Сценарий);
	ОбъектСценария.Вставить("ДанныеНомеровСтрок",ДанныеНомеровСтрок);
	
	Если ПараметрыДляПолученияТекстаСценария.ИсключитьСлужебныеСловаИзТекстаСценария Тогда
		ИсключитьСлужебныеСловаИзТекстаСценария(ОбъектСценария.ТекстСценария);
	КонецЕсли;	 
	
	Возврат ОбъектСценария;
КонецФункции	

// Получает часть заголовка сценария, в котором содержатся значения параметров
Функция ЗаголовокЗначенияПараметровСценария(ПараметрыТеста)
	КопияПараметрыТеста = ПараметрыТеста.Скопировать();
	КопияПараметрыТеста.Сортировать("Имя");
	
	Массив = Новый Массив;
	Для Каждого ПараметрТеста Из КопияПараметрыТеста Цикл
		Массив.Добавить("#" + ПараметрТеста.Имя + "=" + ПерваяСтрока(ПараметрТеста.Значение));
	КонецЦикла;	
	
	Возврат СтрСоединить(Массив,Символы.ПС);
КонецФункции	

// Возвращает массив ФО, которые имеют только одно значение
Функция ФОИмеющиеОдноЗначение(ПараметрыТеста)
	КопияПараметрыТеста = ПараметрыТеста.Скопировать();
	КопияПараметрыТеста.Сортировать("Имя");
	
	Массив = Новый Массив;
	Для Каждого ПараметрТеста Из КопияПараметрыТеста Цикл
		Если ПараметрТеста.НесколькоЗначений Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(ПараметрТеста.ФО) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Новый Структура("Имя,Значение",ПараметрТеста.Имя,ПараметрТеста.Значение));
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

// Возвращает массив ФО, которые имеют только несколько значений
Функция ФОИмеющиеНесколькоЗначений(ПараметрыТеста)
	КопияПараметрыТеста = ПараметрыТеста.Скопировать();
	КопияПараметрыТеста.Сортировать("Имя");
	
	Массив = Новый Массив;
	Для Каждого ПараметрТеста Из КопияПараметрыТеста Цикл
		Если НЕ ПараметрТеста.НесколькоЗначений Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(ПараметрТеста.ФО) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(Новый Структура("Имя,Значение",ПараметрТеста.Имя,ПараметрТеста.Значение));
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

Функция МассивЗначенийПараметра(Знач Стр)
	Стр = СтрЗаменить(Стр,"\;","~ПредставлениеТочкиСЗапятой~");
	
	Массив = СтрРазделить(Стр,";");
	
	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Массив[Ккк] = СтрЗаменить(Массив[Ккк],"~ПредставлениеТочкиСЗапятой~",";");
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

Функция ПустойНаборПараметров()
	СтруктураНабора = Новый Структура;
	СтруктураНабора.Вставить("ПараметрыСНесколькимиЗначениями",Новый Массив);
	
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Имя");
	Тзн.Колонки.Добавить("Значение");
	Тзн.Колонки.Добавить("ТипПараметра");
	
	СтруктураНабора.Вставить("ТаблицаПараметров",Тзн);
	
	Возврат СтруктураНабора;
КонецФункции	 

Процедура РассчитатьНаборыПараметровРекурсивно(НаборыПараметров,ТекущийНабор,ПараметрыТеста,Знач ИдПараметра)
	ИдПараметра = ИдПараметра + 1;
	
	Если ИдПараметра > (ПараметрыТеста.Количество()-1) Тогда
		Возврат;
	КонецЕсли;	 
	
	ЗначенияПараметра = ПараметрыТеста[ИдПараметра].ЗначенияПараметра;
	
	Если ЗначенияПараметра.Количество() = 1 Тогда
		СтрТекущийНабор              = ТекущийНабор.ТаблицаПараметров.Добавить();
		СтрТекущийНабор.Значение     = ЗначенияПараметра[0];
		СтрТекущийНабор.Имя          = ПараметрыТеста[ИдПараметра].Имя;
		СтрТекущийНабор.ТипПараметра = ПараметрыТеста[ИдПараметра].ТипПараметра;
		
		РассчитатьНаборыПараметровРекурсивно(НаборыПараметров,ТекущийНабор,ПараметрыТеста,ИдПараметра);
		Возврат;
	КонецЕсли;	 
	
	КопияТекущегоНабора = СкопироватьНаборПараметров(ТекущийНабор);
	
	НомерПараметра = 0;
	Для Каждого ЗначениеПараметра Из ЗначенияПараметра Цикл
		НомерПараметра = НомерПараметра + 1;
		
		
		Если НомерПараметра > 1 Тогда
			КопияНабора = СкопироватьНаборПараметров(КопияТекущегоНабора);
			НаборыПараметров.Добавить(КопияНабора);
		Иначе
			КопияНабора = ТекущийНабор;
		КонецЕсли;	 
		
		КопияНабора.ПараметрыСНесколькимиЗначениями.Добавить(Новый Структура("ИмяПараметра,ЗначениеПараметра",
																		  	 ПараметрыТеста[ИдПараметра].Имя,ЗначениеПараметра));
		
		СтрКопияНабора              = КопияНабора.ТаблицаПараметров.Добавить();
		СтрКопияНабора.Значение     = ЗначениеПараметра;
		СтрКопияНабора.Имя          = ПараметрыТеста[ИдПараметра].Имя;
		СтрКопияНабора.ТипПараметра = ПараметрыТеста[ИдПараметра].ТипПараметра;
		
		РассчитатьНаборыПараметровРекурсивно(НаборыПараметров,КопияНабора,ПараметрыТеста,ИдПараметра)
	КонецЦикла;	
	
КонецПроцедуры

Функция СтрокаСтекаВызоваСценариев(ПараметрыПолученияТекстаСценария)
	СтрокаИерархии = "";
	Оступ = "";
	Для Каждого ДанныеСценария Из ПараметрыПолученияТекстаСценария.МассивИерархииСценариев Цикл
		СтрокаИерархии = СтрокаИерархии + Оступ 
		  + СтрШаблон(Нстр("ru = 'Строка №%1. '"),ДанныеСценария.СхемаДерево.НомерСтрокиТекстаСценария) 
		  +  ДанныеСценария.СхемаДерево.ОписаниеЭлемента + Символы.ПС;
		Оступ = Оступ + "    ";
	КонецЦикла;	
	
	Если ПараметрыПолученияТекстаСценария.Свойство("ДанныеВложенногоСценария") Тогда
		Если ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария <> Неопределено Тогда
			ОписаниеЭлементаОшибки = ПараметрыПолученияТекстаСценария.СтрокаДерева.ОписаниеЭлемента;
			
			Если ПараметрыПолученияТекстаСценария.Свойство("ОписаниеЭлементаОшибки") Тогда
				ОписаниеЭлементаОшибки = ПараметрыПолученияТекстаСценария.ОписаниеЭлементаОшибки;
			КонецЕсли;	 
			
			СтрокаИерархии = СтрокаИерархии + Оступ 
			  + СтрШаблон(Нстр("ru = 'Строка №%1. <%2>'"),ПараметрыПолученияТекстаСценария.СтрокаДерева.НомерСтрокиТекстаСценария,
			  ОписаниеЭлементаОшибки) + Символы.ПС;
			Оступ = Оступ + "    ";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат СтрокаИерархии; 
КонецФункции	 

Процедура ТекстЛинейногоСценарияПоСхемеРекурсивноПоУсловиюПрепроцессор(ПараметрыПолученияТекстаСценария,Отступ)
	ВеткиУсловия = ВеткиУсловия(ПараметрыПолученияТекстаСценария.СтрокаДерева);
	
	НужнаяВетка = Неопределено;
	
	ПараметрыВходящие = ПараметрыПолученияТекстаСценария.ПараметрыВходящие;
	НаборПараметров   = ПараметрыПолученияТекстаСценария.НаборПараметров;
	
	Для Каждого ВеткаУсловия Из ВеткиУсловия Цикл
		
		Если ВеткаУсловия.ОписаниеЭлемента = ОписаниеЭлементаИначеПрепроцессор() Тогда
			НужнаяВетка = ВеткаУсловия;
			Прервать;
		КонецЕсли;	 
		
		ЗначениеУсловия = ВеткаУсловия.ОбработаннаяСтрокаПараметров;
		УстановитьВШагеЗначениеПараметра(ПараметрыВходящие,ЗначениеУсловия,ВеткаУсловия,ПараметрыПолученияТекстаСценария);
			 
		ВернутьУгловыеСкобки(ЗначениеУсловия);
		ЗаменитьСлужебныеСимволыВСтроке(ЗначениеУсловия);
		
		Попытка
			ВыражениеУсловия = "?(" + ЗначениеУсловия + ",Истина,Ложь)";
			РезультатУсловия = Вычислить(ВыражениеУсловия);
		Исключение
			ПараметрыПолученияТекстаСценария.Вставить("ОписаниеЭлементаОшибки",ВеткаУсловия.ОписаниеЭлемента);
			СтрокаСтекаВызова = СтрокаСтекаВызоваСценариев(ПараметрыПолученияТекстаСценария);
			ПараметрыПолученияТекстаСценария.Удалить("ОписаниеЭлементаОшибки");
			ВызватьИсключение СтрокаСтекаВызова + СтрШаблон(НСтр("ru = 'Не смог вычислить условие для ветки: %1'"),
			                            ВеткаУсловия.ЗначениеУсловия) + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;
		
		Если РезультатУсловия = Истина Тогда
			НужнаяВетка = ВеткаУсловия;
			Прервать;
		ИначеЕсли РезультатУсловия = Ложь Тогда
		Иначе	
			СтрокаСтекаВызова = СтрокаСтекаВызоваСценариев(ПараметрыПолученияТекстаСценария);
			ВызватьИсключение СтрокаСтекаВызова + СтрШаблон(НСтр("ru = 'Не смог вычислить условие для ветки: %1'"),
			                            ВеткаУсловия.ЗначениеУсловия) + Символы.ПС + ОписаниеОшибки();
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НужнаяВетка = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",НужнаяВетка);
	
	ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ-2);
	//уменьшаем отступ, т.к. в дереве Условие создаёт ветку, а в неё ещё вложена данная ветка шагов
КонецПроцедуры

Процедура ТекстЛинейногоСценарияПоСхемеРекурсивноПоУсловию(ПараметрыПолученияТекстаСценария,Отступ)
	ВеткиУсловия = ВеткиУсловия(ПараметрыПолученияТекстаСценария.СтрокаДерева);
	
	Для Каждого НужнаяВетка Из ВеткиУсловия Цикл
		Если НужнаяВетка.ТипЭлемента = ТипЭлементаНачалоУсловия() Тогда
			Стр = "Если " + НужнаяВетка.ОбработаннаяСтрокаПараметров + " Тогда";
			КлючевоеСловоОкончаниеУсловия = КлючевоеСловоКонецЕсли();
		ИначеЕсли НужнаяВетка.ТипЭлемента = ТипЭлементаНачалоУсловияEng() Тогда	
			Стр = "If " + НужнаяВетка.ОбработаннаяСтрокаПараметров + " Then";
			КлючевоеСловоОкончаниеУсловия = КлючевоеСловоКонецЕслиEng();
		ИначеЕсли НужнаяВетка.ТипЭлемента = ТипЭлементаИначеЕсли() Тогда
			Стр = "ИначеЕсли " + НужнаяВетка.ОбработаннаяСтрокаПараметров + " Тогда";
			КлючевоеСловоОкончаниеУсловия = КлючевоеСловоКонецЕсли();
		ИначеЕсли НужнаяВетка.ТипЭлемента = ТипЭлементаИначеЕслиEng() Тогда	
			Стр = "ElseIf " + НужнаяВетка.ОбработаннаяСтрокаПараметров + " Then";
			КлючевоеСловоОкончаниеУсловия = КлючевоеСловоКонецЕслиEng();
		ИначеЕсли НужнаяВетка.ТипЭлемента = ТипЭлементаИначе() Тогда
			Стр = "Иначе";
			КлючевоеСловоОкончаниеУсловия = КлючевоеСловоКонецЕсли();
		ИначеЕсли НужнаяВетка.ТипЭлемента = ТипЭлементаИначеEng() Тогда	
			Стр = "Else";
			КлючевоеСловоОкончаниеУсловия = КлючевоеСловоКонецЕслиEng();
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не известный тип условия в схеме: %1. Строка %2'"),
			НужнаяВетка.ТипЭлемента,НужнаяВетка.ОписаниеЭлемента);
		КонецЕсли;	 
		
		Если НужнаяВетка.Параметры <> Неопределено Тогда
			УстановитьВШагеЗначениеПараметра(ПараметрыПолученияТекстаСценария.ПараметрыВходящие,
			Стр,НужнаяВетка,ПараметрыПолученияТекстаСценария);
		КонецЕсли;	
		
		Если ПараметрыПолученияТекстаСценария.НадоДобавитьОтметкуОЗапускеСЭтойСтроки Тогда
			Стр = Стр + НСтр("ru = '//~ОтметкаЗапускСценарияСЭтойСтроки~'");
		КонецЕсли;	 	
		
		ПараметрыПолученияТекстаСценария.МассивСтрок.Добавить(
		ПолучитьСтрокуОтступПоЧислуПробелов((НужнаяВетка.Уровень() + Отступ),Истина) + Стр);
		ЗаполнитьДанныеНомеровСтрок(ПараметрыПолученияТекстаСценария.МассивСтрок,
		ПараметрыПолученияТекстаСценария,НужнаяВетка);														  
		
		ВставкаПараметраСТипомТаблицы(НужнаяВетка,ПараметрыПолученияТекстаСценария,
		    ПараметрыПолученияТекстаСценария.ПараметрыВходящие,ПараметрыПолученияТекстаСценария.МассивСтрок,Отступ);
		
		
		ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",НужнаяВетка);
		
		ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
	КонецЦикла;	 
	ПараметрыПолученияТекстаСценария.МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов(
	(НужнаяВетка.Уровень() + Отступ),Истина) + КлючевоеСловоОкончаниеУсловия);
	
КонецПроцедуры

Процедура ТекстЛинейногоСценарияПоСхемеРекурсивноПоЦиклу(ПараметрыПолученияТекстаСценария,Отступ)
	ВеткиУсловия = ВеткиУсловия(ПараметрыПолученияТекстаСценария.СтрокаДерева);
	
	НужнаяВетка = ВеткиУсловия[0];
	
	
	Если НужнаяВетка.ТипЭлемента = ТипЭлементаНачалоЦикла() Тогда
		Стр = "Цикл " + НужнаяВетка.ОбработаннаяСтрокаПараметров;
		КлючевоеСловоОкончаниеЦикла = КлючевоеСловоКонецЦикла();
	ИначеЕсли НужнаяВетка.ТипЭлемента = ТипЭлементаНачалоЦиклаEng() Тогда
		Стр = "Do " + НужнаяВетка.ОбработаннаяСтрокаПараметров;
		КлючевоеСловоОкончаниеЦикла = КлючевоеСловоКонецЦиклаEng();
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не известный тип цикла в схеме: %1. Строка %2'"),
							НужнаяВетка.ТипЭлемента,НужнаяВетка.ОписаниеЭлемента);
	КонецЕсли;	 
	
	Если ПараметрыПолученияТекстаСценария.НадоДобавитьОтметкуОЗапускеСЭтойСтроки Тогда
		Стр = Стр + НСтр("ru = '//~ОтметкаЗапускСценарияСЭтойСтроки~'");
	КонецЕсли;	 	
	
	Если НужнаяВетка.Параметры <> Неопределено Тогда
		УстановитьВШагеЗначениеПараметра(ПараметрыПолученияТекстаСценария.ПараметрыВходящие,
		    Стр,НужнаяВетка,ПараметрыПолученияТекстаСценария);
	КонецЕсли;	 
	ПараметрыПолученияТекстаСценария.МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((НужнаяВетка.Уровень() + Отступ),Истина) + Стр);
	ЗаполнитьДанныеНомеровСтрок(ПараметрыПолученияТекстаСценария.МассивСтрок,ПараметрыПолученияТекстаСценария,НужнаяВетка);														  
	
	ВставкаПараметраСТипомТаблицы(НужнаяВетка,ПараметрыПолученияТекстаСценария,
		    ПараметрыПолученияТекстаСценария.ПараметрыВходящие,ПараметрыПолученияТекстаСценария.МассивСтрок,Отступ);

	
	ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",НужнаяВетка);
	
	ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
	ПараметрыПолученияТекстаСценария.МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((НужнаяВетка.Уровень() + Отступ),Истина) + КлючевоеСловоОкончаниеЦикла);
КонецПроцедуры

Процедура ТекстЛинейногоСценарияПоСхемеРекурсивноПоПопытке(ПараметрыПолученияТекстаСценария,Отступ)
	Ветки = ВеткиУсловия(ПараметрыПолученияТекстаСценария.СтрокаДерева);
	
	Если Ветки.Количество() <> 3 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'В попытке/исключении ожидалось две ветки кода, а обнаружено <%1>.'"),
							Ветки.Количество() - 1);
	КонецЕсли;	 
	
	ВеткаПопытка = Ветки[0];
	ВеткаИсключение = Ветки[1];
	ВеткаКонецПопытки = Ветки[2];
	
	Стр = ВеткаПопытка.ОписаниеЭлемента;
	ПараметрыПолученияТекстаСценария.МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((ВеткаПопытка.Уровень() + Отступ),Истина) + Стр);
	ЗаполнитьДанныеНомеровСтрок(ПараметрыПолученияТекстаСценария.МассивСтрок,ПараметрыПолученияТекстаСценария,ВеткаПопытка);														  
	ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",ВеткаПопытка);
	ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
	
	Стр = ВеткаИсключение.ОписаниеЭлемента;
	ПараметрыПолученияТекстаСценария.МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((ВеткаИсключение.Уровень() + Отступ),Истина) + Стр);
	ЗаполнитьДанныеНомеровСтрок(ПараметрыПолученияТекстаСценария.МассивСтрок,ПараметрыПолученияТекстаСценария,ВеткаИсключение);														  
	ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",ВеткаИсключение);
	ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
	
	Стр = ВеткаКонецПопытки.ОписаниеЭлемента;
	ПараметрыПолученияТекстаСценария.МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((ВеткаКонецПопытки.Уровень() + Отступ),Истина) + Стр);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева)
	Если Не ПараметрыПолученияТекстаСценария.ФормироватьДанныеПоНомерамСтрок Тогда
		Возврат;
	КонецЕсли;	
	
	UIDСценария = "";
	ИмяСценария = "";
	КодСценария = "";
	Если ПараметрыПолученияТекстаСценария.УровеньВложенности > 0 Тогда
		UIDСценария = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID;
		ИмяСценария = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон;
		КодСценария = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Код;
		Основной    = Ложь;
	Иначе
		UIDСценария = ПараметрыПолученияТекстаСценария.СтруктураПараметров.UIDСценария;
		Если ПараметрыПолученияТекстаСценария.СтруктураПараметров.Свойство("ИмяСценария") Тогда
			ИмяСценария = ПараметрыПолученияТекстаСценария.СтруктураПараметров.ИмяСценария;
		КонецЕсли;	 
		Если ПараметрыПолученияТекстаСценария.СтруктураПараметров.Свойство("КодСценария") Тогда
			КодСценария = ПараметрыПолученияТекстаСценария.СтруктураПараметров.КодСценария;
		КонецЕсли;	 
		Основной    = Истина;
	КонецЕсли;	 
	
	ДанныеСтрокиЛинейногоСценария = Новый Структура;
	ДанныеСтрокиЛинейногоСценария.Вставить("UIDСценария",UIDСценария);
	ДанныеСтрокиЛинейногоСценария.Вставить("ИмяСценария",ИмяСценария);
	ДанныеСтрокиЛинейногоСценария.Вставить("КодСценария",КодСценария);
	ДанныеСтрокиЛинейногоСценария.Вставить("НомерСтрокиТекстаСценария",СтрокаДерева.НомерСтрокиТекстаСценария);
	ДанныеСтрокиЛинейногоСценария.Вставить("НомерСтрокиЛинейногоСценария",МассивСтрок.Количество());
	ДанныеСтрокиЛинейногоСценария.Вставить("ТекстШага",СтрокаДерева.ОписаниеЭлемента);
	ДанныеСтрокиЛинейногоСценария.Вставить("УровеньВложенности",ПараметрыПолученияТекстаСценария.УровеньВложенности);
	ДанныеСтрокиЛинейногоСценария.Вставить("Основной",Основной);
	
	ПараметрыПолученияТекстаСценария.ДанныеНомеровСтрок.Добавить(ДанныеСтрокиЛинейногоСценария);
КонецПроцедуры

Функция ПараметрыВходящиеСценария(Сценарий)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка КАК Ссылка,
		|	СценарииРаботыПользователейПараметрыВходящие.НомерСтроки КАК НомерСтроки,
		|	СценарииРаботыПользователейПараметрыВходящие.Имя КАК Имя,
		|	СценарииРаботыПользователейПараметрыВходящие.Значение КАК Значение,
		|	СценарииРаботыПользователейПараметрыВходящие.ФО КАК ФО,
		|	СценарииРаботыПользователейПараметрыВходящие.ТипПараметра КАК ТипПараметра,
		|	СценарииРаботыПользователейПараметрыВходящие.ИсходящийПараметр КАК ИсходящийПараметр
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ПараметрыВходящие КАК СценарииРаботыПользователейПараметрыВходящие
		|ГДЕ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Сценарий);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	 

Функция ПолучитьПараметрыВходящиеИзФайла(Сценарий,СтруктураПараметров)
	UIDСценария     = СтруктураПараметров.UIDСценария;
	ДанныеСценариев = СтруктураПараметров.ДанныеСценариев;
	СтрокаДанныеСценариев = ДанныеСценариев.Найти(UIDСценария,"UID");
	Если СтрокаДанныеСценариев = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
		    НСтр("ru = 'Не найден сценарий: %1  по настройке %2'"),СтруктураПараметров.ИмяСценария,СтруктураПараметров.Имя);
	КонецЕсли;
	
	Возврат СтрокаДанныеСценариев.ПараметрыСценария;
КонецФункции	 

Процедура ТекстЛинейногоСценарияИзВложенногоСценария(ПараметрыПолученияТекстаСценария,Отступ)
	ДанныеВложенныхСценариев = ПараметрыПолученияТекстаСценария.ДанныеВложенныхСценариев;
	
	Если ПараметрыПолученияТекстаСценария.Свойство("ЧтениеИзGit") И ПараметрыПолученияТекстаСценария.ЧтениеИзGit Тогда
		ПолучитьДанныеСценариевGit(ПараметрыПолученияТекстаСценария);
		
		СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Найти(
		   ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID,"UID");
		
		Если СтрокаДанныеВложенныхСценариев = Неопределено Тогда
			СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Добавить();
			СтрокаДанныеВложенныхСценариев.UID 
			    = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID;
				
			СтрокаДанныеВложенныхСценариев.ДеревоСхемы = ПолучитьДеревоСценария(
			  ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон,
			  ПараметрыПолученияТекстаСценария,
			  СтрокаДанныеВложенныхСценариев.UID);
			  
			ДанныеСценария = ПараметрыПолученияТекстаСценария.ДанныеСценариевGit.UIDCценариев[СтрокаДанныеВложенныхСценариев.UID];
			  
			СтрокаДанныеВложенныхСценариев.ПараметрыВходящие = ДанныеСценария.ПараметрыСценария;
		КонецЕсли;	    
			
		ДеревоСхемы = СтрокаДанныеВложенныхСценариев.ДеревоСхемы;
	ИначеЕсли НЕ ПараметрыПолученияТекстаСценария.ЧтениеИзТекста Тогда
		СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Найти(
		   ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон,"Сценарий");
		   
		Если СтрокаДанныеВложенныхСценариев = Неопределено Тогда
			СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Добавить();
			СтрокаДанныеВложенныхСценариев.Сценарий = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон;
			СтрокаДанныеВложенныхСценариев.ДеревоСхемы 
			    = ПолучитьДеревоСценария(СтрокаДанныеВложенныхСценариев.Сценарий,ПараметрыПолученияТекстаСценария);
			СтрокаДанныеВложенныхСценариев.ПараметрыВходящие = ПараметрыВходящиеСценария(СтрокаДанныеВложенныхСценариев.Сценарий);
		КонецЕсли;	    
			
		ДеревоСхемы = СтрокаДанныеВложенныхСценариев.ДеревоСхемы;
	Иначе
		
		СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Найти(
		   ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID,"UID");
		   
		Если СтрокаДанныеВложенныхСценариев = Неопределено Тогда
			СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Добавить();
			СтрокаДанныеВложенныхСценариев.UID 
			    = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID;
				
				
			СтруктураПараметровДляПолученияВложенногоСценария = 
				СтруктураПараметровДляПолученияВложенногоСценария(ПараметрыПолученияТекстаСценария,
			    	СтрокаДанныеВложенныхСценариев.UID,ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон);
				
			СтрокаДанныеВложенныхСценариев.ДеревоСхемы = ПолучитьДеревоСценария(
			  ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон,СтруктураПараметровДляПолученияВложенногоСценария);
			 
			  
			СтрокаДанныеВложенныхСценариев.ПараметрыВходящие = ПолучитьПараметрыВходящиеИзФайла(
			  ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон,СтруктураПараметровДляПолученияВложенногоСценария);
		КонецЕсли;	    
			
		ДеревоСхемы = СтрокаДанныеВложенныхСценариев.ДеревоСхемы;
	КонецЕсли;	 
	
	
	ДанныеРодительскогоСценария = Новый Структура;
	ДанныеРодительскогоСценария.Вставить("СхемаДерево",ПараметрыПолученияТекстаСценария.СхемаДерево);
	ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Добавить(ДанныеРодительскогоСценария);
	
	ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",ДеревоСхемы);
	ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
	
	ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Удалить(
	     ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Количество()-1);
КонецПроцедуры

Процедура ВыровнятьМассивСтрокПоПервомуВхождениюСимвола(МассивСтрок,Символ)
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Ккк];
		Поз = Найти(Стр,Символ);
		
		МассивСтрок[Ккк] = СокрП(Лев(Стр,Поз-1)) + " " + Символ + " " + СокрЛП(Сред(Стр,Поз+1));
	КонецЦикла;	
	
	МаксПоз = 0;
	Для Каждого Стр Из МассивСтрок Цикл
		Поз = Найти(Стр,Символ);
		Если МаксПоз < Поз Тогда
			МаксПоз = Поз;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если МаксПоз = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Ккк];
		
		Поз = Найти(Стр,Символ);
		Если Поз > 0 Тогда
			Разница = МаксПоз - Поз; 
			СтрокаПробелов = "";
			Для Сч = 1 По Разница Цикл
				СтрокаПробелов = СтрокаПробелов + " ";
			КонецЦикла;	
			
			МассивСтрок[Ккк] = Лев(Стр,Поз-1) + СтрокаПробелов + Сред(Стр,Поз);
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВставкаПараметраСТипомТаблицы(СтрокаДерева,ПараметрыПолученияТекстаСценария,ПараметрыВходящие,МассивСтрок,Отступ)
	Если ТипЗнч(СтрокаДерева.ДополнительныеСвойства) = Тип("Структура") Тогда
		Если СтрокаДерева.ДополнительныеСвойства.Свойство("ПараметрыСТипомТаблицы") Тогда
			ПараметрыСТипомТаблицы = СтрокаДерева.ДополнительныеСвойства.ПараметрыСТипомТаблицы;
			Для Каждого Элем Из ПараметрыСТипомТаблицы Цикл
				Параметр = Новый Структура;
				Параметр.Вставить("Имя",Элем);
				Параметр.Вставить("НовоеИмяПараметра",Элем);
				Параметр.Вставить("Значение",Неопределено);
				Параметр.Вставить("НомерПараметраВСценарии",-1);
				Параметр.Вставить("Тип",ТипПараметра("Таблица"));
				
				УстановкаОдногоПараметра(Параметр,ПараметрыПолученияТекстаСценария,СтрокаДерева,
				ПараметрыВходящие,ПараметрыПолученияТекстаСценария.НаборПараметров);
				
				Если ТипЗнч(Параметр.ТекущееЗначениеПараметра) = Тип("Массив")  Тогда
					Для Каждого Стр Из Параметр.ТекущееЗначениеПараметра Цикл
						МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+2 + Отступ),Истина)
						+ Стр);
					КонецЦикла;	 
				Иначе
					
					МассивСтрокПараметра = СтрРазделить(Параметр.ТекущееЗначениеПараметра,Символы.ПС);
					Для Каждого Стр Из МассивСтрокПараметра Цикл
						МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+2 + Отступ),Истина)
						+ Стр);
					КонецЦикла;	 
					
				КонецЕсли;	 	
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

Процедура ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ)
			   
	СхемаДерево       = ПараметрыПолученияТекстаСценария.СхемаДерево;
	ПараметрыВходящие = ПараметрыПолученияТекстаСценария.ПараметрыВходящие;
	НаборПараметров   = ПараметрыПолученияТекстаСценария.НаборПараметров;
	МассивСтрок       = ПараметрыПолученияТекстаСценария.МассивСтрок;
	
	Для Каждого СтрокаДерева Из СхемаДерево.Строки Цикл
		
		Если СтрокаДерева.Теги <> Неопределено Тогда
			Для Каждого Тег Из СтрокаДерева.Теги Цикл
				МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Тег);
			КонецЦикла;	 
		КонецЕсли;	 
		
		НадоДобавитьОтметкуОЗапускеСЭтойСтроки = Ложь;
		Если ПараметрыПолученияТекстаСценария <> Неопределено Тогда
			Если ПараметрыПолученияТекстаСценария.Свойство("СТекущегоШага") Тогда
				Если ПараметрыПолученияТекстаСценария.СТекущегоШага Тогда
					Если СтрокаДерева.НомерСтрокиТекстаСценария = ПараметрыПолученияТекстаСценария.ТекущийНомерСтрокиСценария Тогда
						НадоДобавитьОтметкуОЗапускеСЭтойСтроки = Истина;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаДействие() Тогда
			Стр = СтрокаДерева.ОбработаннаяСтрокаПараметров;
			Если СтрокаДерева.Параметры <> Неопределено Тогда
				УстановитьВШагеЗначениеПараметра(ПараметрыВходящие,Стр,СтрокаДерева,ПараметрыПолученияТекстаСценария);
			КонецЕсли;	 
			
			Если НадоДобавитьОтметкуОЗапускеСЭтойСтроки Тогда
				Стр = Стр + НСтр("ru = '//~ОтметкаЗапускСценарияСЭтойСтроки~'");
			КонецЕсли;	 
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
			
			ВставкаПараметраСТипомТаблицы(СтрокаДерева,ПараметрыПолученияТекстаСценария,ПараметрыВходящие,МассивСтрок,Отступ);
			
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			
			ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаВложенныйПроцесс() Тогда
			Стр = "*" + СтрокаДерева.ИмяЭлемента;
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
			
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			
			ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаШагВложенногоПроцесса() Тогда
			
			Если ПараметрыПолученияТекстаСценария.ЧтениеИзТекста Тогда
				Если НЕ ПустаяСтрока(СтрокаДерева.ДополнительныеСвойства.Сценарий) Тогда
					Стр = "@КодСценария=" + СтрокаДерева.ДополнительныеСвойства.КодСценария;
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
					Стр = "@UIDСценария=" + СтрокаДерева.ДополнительныеСвойства.UIDСценария;
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
					
					ДанныеСценариев = ПараметрыПолученияТекстаСценария.СтруктураПараметров.ДанныеСценариев;
					СтрокаДанныеВложенныхСценариев = ДанныеСценариев.Найти(СтрокаДерева.ДополнительныеСвойства.UIDСценария, "UID");
					Стр = "@UIDРазделПроекта=" + Строка(СтрокаДанныеВложенныхСценариев.UIDРазделПроекта);
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
				Иначе	
					Стр = "@КодПроцесса=" + СтрокаДерева.ДополнительныеСвойства.ПолныйКод;
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
				КонецЕсли;	 
			Иначе	
				Если СтрокаДерева.ДополнительныеСвойства.Сценарий <> Неопределено
					И СтрокаДерева.ДополнительныеСвойства.Сценарий <> Справочники.СценарииРаботыПользователей.ПустаяСсылка() Тогда
					
					Стр = "@КодСценария=" + СтрокаДерева.ДополнительныеСвойства.Сценарий.Код;
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
					Стр = "@UIDСценария=" + Строка(СтрокаДерева.ДополнительныеСвойства.Сценарий.УникальныйИдентификатор());
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
					Стр = "@UIDРазделПроекта=" + Строка(СтрокаДерева.ДополнительныеСвойства.Сценарий.РазделПроекта.УникальныйИдентификатор());
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
				Иначе
					Стр = "@КодПроцесса=" + СтрокаДерева.ДополнительныеСвойства.ВложенныйПроцесс.ПолныйКод;
					МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтрокаПодключенияПрофиля1 = Неопределено;
			СтрокаПодключенияПрофиля2 = Неопределено;
			
			Если ПараметрыПолученияТекстаСценария.ЧтениеИзТекста Тогда
				ИсполнительШагаПроцесса = Неопределено;
				Если НЕ ПустаяСтрока(СтрокаДерева.ДополнительныеСвойства.ИсполнительШагаПроцесса) Тогда
					ИсполнительШагаПроцесса = СтрокаДерева.ДополнительныеСвойства.ИсполнительШагаПроцесса;
				КонецЕсли;	 
				
				Если ИсполнительШагаПроцесса <> Неопределено Тогда
					ТекущаяНастройкаПроцесса = ПараметрыПолученияТекстаСценария.СтруктураПараметров.ТекущаяНастройкаПроцесса;
					ДанныеЭталонныхБД = ПараметрыПолученияТекстаСценария.СтруктураПараметров.ДанныеЭталонныхБД;
					
					Если ДанныеЭталонныхБД.Количество() > 0 Тогда
						ЭталонныеБД = ДанныеЭталонныхБД[0].ДанныеФайлаYaml["ЭталонныеБД"];
						ИдентификаторБазыИзнастройки = ТекущаяНастройкаПроцесса.ИдентификаторБазы;
						Для Каждого ДанныеЭталоннойБД Из ЭталонныеБД Цикл
							Если НРег(ДанныеЭталоннойБД["ИдентификаторБазы"]) = НРег(ИдентификаторБазыИзнастройки) Тогда
								ПрофилиПользователей = ДанныеЭталоннойБД["ПрофилиПользователей"];
								Для Каждого ПрофильПользователяЭталоннойБД Из ПрофилиПользователей Цикл
									Если ПрофильПользователяЭталоннойБД["ПрофильПользователя"] = ИсполнительШагаПроцесса Тогда
										СтрокаПодключенияПрофиля1 = "	И я подключаю TestClient """ + ПрофильПользователяЭталоннойБД["ПрофильПользователя"]
											+ """ логин """ +  ПрофильПользователяЭталоннойБД["Логин"]
											+ """ пароль """ + ПрофильПользователяЭталоннойБД["Пароль"] + """";
										СтрокаПодключенияПрофиля2 = "	И я закрыл все окна клиентского приложения";
										Прервать;
									КонецЕсли;	 
								КонецЦикла;	 
								
								Прервать;
							КонецЕсли;	 
						КонецЦикла;	 
					КонецЕсли;	 
				КонецЕсли;	 
			Иначе	
				
				ИсполнительШагаПроцесса = Неопределено;
				Если НЕ ПустаяСтрока(СтрокаДерева.ДополнительныеСвойства.ИсполнительНаименование) Тогда
					ИсполнительШагаПроцесса = СтрокаДерева.ДополнительныеСвойства.ИсполнительШагаПроцесса;
				ИначеЕсли НЕ ПустаяСтрока(СтрокаДерева.ДополнительныеСвойства.ПрофильПользователяНаименование) Тогда
					ИсполнительШагаПроцесса = СтрокаДерева.ДополнительныеСвойства.ПрофильПользователя;
				КонецЕсли;	 
				
				Если ИсполнительШагаПроцесса <> Неопределено Тогда
					НастройкиБДДляЗапускаТестовИзСценария = НастройкиБДДляЗапускаТестовИзСценария();
					ПараметрыПодключения = ДанныеДляПодключенияКБДTestClient(
					ИсполнительШагаПроцесса,
					НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза,Неопределено);
					
					Если ПараметрыПодключения <> Неопределено Тогда
						
						ИмяПрофиля = ПараметрыПодключения.ИмяПрофиля;
						
						СтрокаПодключенияПрофиля1 = "	И я подключаю TestClient """ + ИмяПрофиля
						+ """ логин """ +  ПараметрыПодключения.Логин 
						+ """ пароль """ + ПараметрыПодключения.Пароль + """";
						
						СтрокаПодключенияПрофиля2 = "	И я закрыл все окна клиентского приложения";
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Стр = "*" + СтрокаДерева.ИмяЭлемента;
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			
			Если СтрокаПодключенияПрофиля1 <> Неопределено Тогда
				МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина)
					+ СтрокаПодключенияПрофиля1);
			КонецЕсли;	 
			Если СтрокаПодключенияПрофиля2 <> Неопределено Тогда
				МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина)
					+ СтрокаПодключенияПрофиля2);
			КонецЕсли;	 
			
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
			
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			
			ПараметрыВходящиеКопия = ПараметрыПолученияТекстаСценария.ПараметрыВходящие;
			ТаблицаПараметровКопия = ПараметрыПолученияТекстаСценария.НаборПараметров.ТаблицаПараметров;
			
			ПараметрыПолученияТекстаСценария.ПараметрыВходящие = СтрокаДерева.ДополнительныеСвойства.ПараметрыШагаВложенногоПроцесса;
			ПараметрыПолученияТекстаСценария.НаборПараметров.ТаблицаПараметров = СтрокаДерева.ДополнительныеСвойства.ПараметрыШагаВложенногоПроцесса;
			ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
			
			ПараметрыПолученияТекстаСценария.ПараметрыВходящие = ПараметрыВходящиеКопия;
			ПараметрыПолученияТекстаСценария.НаборПараметров.ТаблицаПараметров = ТаблицаПараметровКопия;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаУсловие() или СтрокаДерева.ТипЭлемента = ТипЭлементаУсловиеEng() Тогда
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			ПараметрыПолученияТекстаСценария.Вставить("СтрокаДерева",СтрокаДерева);
			ПараметрыПолученияТекстаСценария.Вставить("НадоДобавитьОтметкуОЗапускеСЭтойСтроки",
			НадоДобавитьОтметкуОЗапускеСЭтойСтроки);
			
			ТекстЛинейногоСценарияПоСхемеРекурсивноПоУсловию(ПараметрыПолученияТекстаСценария,Отступ);                                            
			Продолжить;
		ИначеЕсли (СтрокаДерева.ТипЭлемента = ТипЭлементаГруппаШагов()) Тогда
			Если ВГруппеЕстьИсполняемыеШаги(СтрокаДерева) Тогда
				МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) 
				+ СтрокаДерева.ОписаниеЭлемента);
				
				ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);																	  
				ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
				
				ТекстЛинейногоСценарияПоСхемеРекурсивно(ПараметрыПолученияТекстаСценария,Отступ);
			КонецЕсли;	 
		ИначеЕсли (СтрокаДерева.ТипЭлемента = ТипЭлементаШаблонСценария()) Тогда
			
			Если ПараметрыПолученияТекстаСценария.Свойство("UIDСценариевКомпиляции") Тогда
				ПараметрыПолученияТекстаСценария.UIDСценариевКомпиляции.Вставить(СтрокаДерева.ДополнительныеСвойства.UID, Истина);
			КонецЕсли;	 
			
			СтрокаСценария = "*" + СтрокаДерева.ОписаниеЭлемента;
			Если НадоДобавитьОтметкуОЗапускеСЭтойСтроки Тогда
				СтрокаСценария = СтрокаСценария + НСтр("ru = '//~ОтметкаЗапускСценарияСЭтойСтроки~'");
			КонецЕсли;	 
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина)
			+ СтрокаСценария);
			
			КоличествоСтрокДоПолученияВложенногоСценария = МассивСтрок.Количество();
			
			ПараметрыПереданыСнизу = Ложь;
			Если СтрокаДерева.Параметры.Количество() > 0 Тогда
				Если СтрокаДерева.Параметры[0].Свойство("ПереданСнизу") и СтрокаДерева.Параметры[0].ПереданСнизу Тогда
					ПараметрыПереданыСнизу = Истина;
				КонецЕсли;	 
			КонецЕсли;	 																	  
			
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);														  
			
			Если ПараметрыПереданыСнизу Тогда
				МассивСтрокПараметров = Новый Массив;
				Для Каждого ПараметрСценария Из СтрокаДерева.Параметры Цикл
					Если ТипЗнч(ПараметрСценария.ЗначениеПараметра) = Тип("Массив") Тогда
						ЗначениеПараметра = "";
						Если ПараметрСценария.ЗначениеПараметра.Количество() > 0 Тогда
							ЗначениеПараметра = ПараметрСценария.ЗначениеПараметра[0];
						КонецЕсли;
					Иначе	
						ЗначениеПараметра = ПараметрСценария.ЗначениеПараметра;
					КонецЕсли;	 
					МассивСтрокПараметров.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+3 + Отступ),Истина)
					+ "#" + ПараметрСценария.ИмяПараметра + " = " + ЗначениеПараметра);
				КонецЦикла;	 
				
				ВыровнятьМассивСтрокПоПервомуВхождениюСимвола(МассивСтрокПараметров,"=");
				
				Для Каждого Стр Из МассивСтрокПараметров Цикл
					МассивСтрок.Добавить(Стр);
				КонецЦикла;	  
			КонецЕсли;	 
			
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			
			//запомним текущие данные вложенного сценария
			ТекДанныеВложенногоСценария = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария;
			ПараметрыПолученияТекстаСценария.Вставить("ДанныеВложенногоСценария",СтрокаДерева.ДополнительныеСвойства);
			ПараметрыПолученияТекстаСценария.УровеньВложенности = ПараметрыПолученияТекстаСценария.УровеньВложенности + 1;
			
			//проверим корректность передачи параметров
			Если ПараметрыПереданыСнизу Тогда
				Если ПараметрыПолученияТекстаСценария.ЧтениеИзТекста Тогда
					ШаблонUID = ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID;
					СтрокаДанныеВложенныхСценариев = ПараметрыПолученияТекстаСценария.СтруктураПараметров.ДанныеСценариев.Найти(
					ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID,"UID");
					
					Если СтрокаДанныеВложенныхСценариев = Неопределено Тогда
						ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдены данные вложенного с ценария <%1>, <%2>'"),
						ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон
						,ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Код);
					КонецЕсли;	 	
					
					ПараметрыВложенногоСценария = СтрокаДанныеВложенныхСценариев.ПараметрыСценария;
					
					ИменаПараметров = Новый Массив;
					Для Каждого Параметр Из ПараметрыВложенногоСценария Цикл
						ИменаПараметров.Добавить(НРег(Параметр.Имя));
					КонецЦикла;	
				ИначеЕсли ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Свойство("ЧтениеИзGit")
					И ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.ЧтениеИзGit Тогда	
					
					ИменаПараметров = Новый Массив;
					Для Каждого Параметр Из ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.ПараметрыВходящие Цикл
						ИменаПараметров.Добавить(НРег(Параметр));
					КонецЦикла;	
				Иначе	
					ИменаПараметров = Новый Массив;
					Для Каждого Параметр Из ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон.ПараметрыВходящие Цикл
						ИменаПараметров.Добавить(НРег(Параметр.Имя));
					КонецЦикла;	
				КонецЕсли;	 
				
				
				Для Каждого ПараметрСценария Из СтрокаДерева.Параметры Цикл
					ИмяПараметраНРег = НРег(ПараметрСценария.ИмяПараметра);
					СтрокаИменаПараметров = ИменаПараметров.Найти(ИмяПараметраНРег);
					Если СтрокаИменаПараметров = Неопределено Тогда
						Если ИмяПараметраНРег <> "исполнитель" И ИмяПараметраНРег <> "executor" Тогда
							Если ПараметрыПолученияТекстаСценария.ЧтениеИзТекста Тогда
								ВызватьИсключение СтрШаблон(НСтр("ru = 'В сценарии <%1> <%2> нет параметра <%3>'"),
								ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Код,
								ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон,ПараметрСценария.ИмяПараметра);
							ИначеЕсли ПараметрыПолученияТекстаСценария.Свойство("ЧтениеИзGit") И ПараметрыПолученияТекстаСценария.ЧтениеИзGit Тогда	
								Код = ПараметрыПолученияТекстаСценария.ДанныеСценариевGit.UIDCценариев[
									ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.UID].Код;
								ВызватьИсключение СтрШаблон(НСтр("ru = 'В сценарии <%1> <%2> нет параметра <%3>'"), Код,
								ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон,ПараметрСценария.ИмяПараметра);
							Иначе	
								ВызватьИсключение СтрШаблон(НСтр("ru = 'В сценарии <%1> <%2> нет параметра <%3>'"),
								ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон.Код,
								ПараметрыПолученияТекстаСценария.ДанныеВложенногоСценария.Шаблон.Наименование,ПараметрСценария.ИмяПараметра);
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	 
			КонецЕсли;	 
			
			Если СтрокаДерева.Параметры <> Неопределено Тогда
				Стр = СтрокаДерева.ОбработаннаяСтрокаПараметров;
				УстановитьВШагеЗначениеПараметра(ПараметрыВходящие,Стр,СтрокаДерева,ПараметрыПолученияТекстаСценария);
			КонецЕсли;	 
			
			Для Каждого ДанныеПараметра Из СтрокаДерева.Параметры Цикл
				Если НРег(ДанныеПараметра.ИмяПараметра) = "исполнитель" ИЛИ НРег(ДанныеПараметра.ИмяПараметра) = "executor" Тогда
					Если ПараметрыПолученияТекстаСценария.ЧтениеИзТекста Тогда
						Если НЕ ПараметрыПолученияТекстаСценария.ЭтоПроцесс Тогда
							ИдентификаторБазы = ПараметрыПолученияТекстаСценария.СтруктураПараметров.ДанныеНастройкиСценария.ИдентификаторБазы;
							ДанныеЭталонныхБД = ПараметрыПолученияТекстаСценария.СтруктураПараметров.ДанныеЭталонныхБД;
							Если ДанныеЭталонныхБД.Количество() > 0 Тогда
								Для Каждого ДанныеЭталоннойБД Из ДанныеЭталонныхБД Цикл
									Если НРег(ДанныеЭталоннойБД["ИдентификаторБазы"]) = НРег(ИдентификаторБазы) Тогда
										ПрофилиПользователей = ДанныеЭталоннойБД["ПрофилиПользователей"];
										Для Каждого ПрофильПользователяЭталоннойБД Из ПрофилиПользователей Цикл
											Если ПрофильПользователяЭталоннойБД["ПрофильПользователя"] = ДанныеПараметра.ЗначениеПараметра Тогда
												МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+2 + Отступ),Истина)
													+ "И я подключаю TestClient """ + ПрофильПользователяЭталоннойБД["ПрофильПользователя"]
													+ """ логин """ +  ПрофильПользователяЭталоннойБД["Логин"]
													+ """ пароль """ + ПрофильПользователяЭталоннойБД["Пароль"] + """");
												МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+2 + Отступ),Истина)
													+ "И я закрыл все окна клиентского приложения");
												Прервать;
											КонецЕсли;	 
										КонецЦикла;	 
										
										Прервать;
									КонецЕсли;	 
								КонецЦикла;	 
							КонецЕсли;	 
						КонецЕсли;	 
						
					Иначе	
						НастройкиБДДляЗапускаТестовИзСценария = НастройкиБДДляЗапускаТестовИзСценария();
						ПараметрыПодключения = ДанныеДляПодключенияКБДTestClient(
						ДанныеПараметра.ЗначениеПараметра,
						НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза,Неопределено);
						
						Если ПараметрыПодключения <> Неопределено Тогда
							
							МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+2 + Отступ),Истина)
								+ "И я подключаю TestClient """ + ПараметрыПодключения.ИмяПрофиля
								+ """ логин """ +  ПараметрыПодключения.Логин 
								+ """ пароль """ + ПараметрыПодключения.Пароль + """");
							МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+2 + Отступ),Истина)
								+ "И я закрыл все окна клиентского приложения");
						КонецЕсли;	 
					КонецЕсли;	 
					
					Прервать;
					
				КонецЕсли;	 
			КонецЦикла;	 
			
			ТекстЛинейногоСценарияИзВложенногоСценария(ПараметрыПолученияТекстаСценария,Отступ + СтрокаДерева.Уровень()+1);
			
			//вернем текущие данные вложенного сценария
			ПараметрыПолученияТекстаСценария.УровеньВложенности = ПараметрыПолученияТекстаСценария.УровеньВложенности - 1;
			ПараметрыПолученияТекстаСценария.Вставить("ДанныеВложенногоСценария",ТекДанныеВложенногоСценария);
			
			Если НЕ ВШагахПодсценарияЕстьИсполняемыеШаги(МассивСтрок,КоличествоСтрокДоПолученияВложенногоСценария) Тогда
				КолСтрокДляУдаления = МассивСтрок.Количество() - КоличествоСтрокДоПолученияВложенногоСценария;
				Для Счетчик = 1 По КолСтрокДляУдаления Цикл
					МассивСтрок.Удалить(МассивСтрок.Количество()-1);
				КонецЦикла;	
				//комментируем строку подсценария
				СтрокаСценария = МассивСтрок[МассивСтрок.Количество()-1];
				СтрокаСценария = "#" + СтрокаСценария;
				МассивСтрок[МассивСтрок.Количество()-1] = СтрокаСценария;
			КонецЕсли;	 
			
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаУсловиеПрепроцессор() Тогда
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			ПараметрыПолученияТекстаСценария.Вставить("СтрокаДерева",СтрокаДерева);
			
			ТекстЛинейногоСценарияПоСхемеРекурсивноПоУсловиюПрепроцессор(ПараметрыПолученияТекстаСценария,Отступ);
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаЦикл() или СтрокаДерева.ТипЭлемента = ТипЭлементаЦиклEng() Тогда
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			ПараметрыПолученияТекстаСценария.Вставить("СтрокаДерева",СтрокаДерева);
			ПараметрыПолученияТекстаСценария.Вставить("НадоДобавитьОтметкуОЗапускеСЭтойСтроки",
			      НадоДобавитьОтметкуОЗапускеСЭтойСтроки);
			ТекстЛинейногоСценарияПоСхемеРекурсивноПоЦиклу(ПараметрыПолученияТекстаСценария,Отступ);
			Продолжить
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаПопытка()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаПопыткаEng()
			Тогда
			ПараметрыПолученияТекстаСценария.Вставить("СхемаДерево",СтрокаДерева);
			ПараметрыПолученияТекстаСценария.Вставить("СтрокаДерева",СтрокаДерева);
			ТекстЛинейногоСценарияПоСхемеРекурсивноПоПопытке(ПараметрыПолученияТекстаСценария,Отступ);
			Продолжить
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаКонецПопытки()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаКонецПопыткиEng()
			Тогда
			Стр = СтрокаДерева.ОписаниеЭлемента;
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаНачалоСхемы() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаСтоп() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаОкончаниеСхемы() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаПустаяСтрока() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаБлочныйКомментарийНачало() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаБлочныйКомментарийОкончание() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаТаблица() Тогда
			Стр = СтрокаДерева.ОбработаннаяСтрокаПараметров;
			Если СтрокаДерева.Параметры <> Неопределено Тогда
				УстановитьВШагеЗначениеПараметра(ПараметрыВходящие,Стр,СтрокаДерева,ПараметрыПолученияТекстаСценария);
			КонецЕсли;	 
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаКомментарий() Тогда
			Стр = СтрокаДерева.ОписаниеЭлемента;
			Если Лев(СокрЛ(Стр),1) <> "#" и Лев(СокрЛ(Стр),2) <> "//" Тогда
				Стр = "#" + Стр;
			КонецЕсли;	 
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
			
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаБлочныйКомментарий() Тогда
			Стр = СтрокаДерева.ОписаниеЭлемента;
			Стр = "//" + Стр;
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаМногострочнаяСтрока() Тогда
			Стр = СтрокаДерева.ОписаниеЭлемента;
			
			МассивСтрок.Добавить(ПолучитьСтрокуОтступПоЧислуПробелов((СтрокаДерева.Уровень()+1 + Отступ),Истина) + Стр);
			ЗаполнитьДанныеНомеровСтрок(МассивСтрок,ПараметрыПолученияТекстаСценария,СтрокаДерева);
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не известный тип элемента в схеме: %1'"),
																					  СтрокаДерева.ТипЭлемента);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

Функция ВШагахПодсценарияЕстьИсполняемыеШаги(МассивСтрок,НомерСтроки)
	Для СчетчикСтрок = НомерСтроки+1 По МассивСтрок.Количество() Цикл
		Стр = СокрЛП(МассивСтрок[СчетчикСтрок-1]);
		Если НЕ ЗначениеЗаполнено(Стр) Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "*" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "#" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,2) = "//" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "@" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Возврат Истина;
	КонецЦикла;	 
	
	Возврат Ложь;
КонецФункции	 

Функция СкопироватьНаборПараметров(Набор)
	КопияНабора = ПустойНаборПараметров();
	КопияНабора.Вставить("ТаблицаПараметров",Набор.ТаблицаПараметров.Скопировать());
	
	ПараметрыСНесколькимиЗначениями = Новый Массив;
	Для Каждого Элем Из Набор.ПараметрыСНесколькимиЗначениями Цикл
		ПараметрыСНесколькимиЗначениями.Добавить(Элем);
	КонецЦикла;	
	КопияНабора.Вставить("ПараметрыСНесколькимиЗначениями",ПараметрыСНесколькимиЗначениями);
	
	Возврат КопияНабора;
КонецФункции	

Процедура УстановкаОдногоПараметра(Параметр,ПараметрыПолученияТекстаСценария,СтрокаДерева,
	   ПараметрыВходящие,НаборПараметров)
	   
	Если ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Количество() > 0 Тогда
		//это вложенный сценарий
		ТекущееЗначениеПараметра = Неопределено;
		НужныйТип                = Неопределено;
		СтрокаДереваСПараметрами = НайтиСтрокуДереваСПараметрамиДляТекущейСтроки(СтрокаДерева,ПараметрыПолученияТекстаСценария);
		
		ЗначениеИТипПараметраИзВеткиРодителя(СтрокаДерева,ТекущееЗначениеПараметра,НужныйТип,Параметр,
		  ПараметрыВходящие,НаборПараметров,СтрокаДереваСПараметрами,ПараметрыПолученияТекстаСценария);
		
		Если ТекущееЗначениеПараметра = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найдено значение для подстановки в шаблон сценария: %1'"),
			   СтрокаДерева.ОписаниеЭлемента);
		КонецЕсли;	 
		
		Параметр.Вставить("ТекущееЗначениеПараметра",ТекущееЗначениеПараметра);
		Параметр.Вставить("НужныйТип",НужныйТип);
	Иначе	
		СтрокаНаборПараметров = НайтиСтрокуНабора(ПараметрыВходящие,НаборПараметров,Параметр);
		Если СтрокаНаборПараметров = Неопределено Тогда
			Если ПараметрыПолученияТекстаСценария.СтруктураПараметров.Свойство("ДанныеНастройкиСценария") Тогда
				ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не найдено значение для параметра с именем: <%1>. Сценарий <%2>. Настройка <%3>.'"),
				Параметр.НовоеИмяПараметра,ПараметрыПолученияТекстаСценария.Сценарий,
				ПараметрыПолученияТекстаСценария.СтруктураПараметров.ДанныеНастройкиСценария.Код);
			Иначе	
				ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не найдено значение для параметра с именем: <%1>. Сценарий <%2>.'"),
				Параметр.НовоеИмяПараметра,ПараметрыПолученияТекстаСценария.Сценарий);
			КонецЕсли;	 
		Иначе	
			Параметр.Вставить("ТекущееЗначениеПараметра",СтрокаНаборПараметров.Значение);
			Параметр.Вставить("НужныйТип",СтрокаНаборПараметров.ТипПараметра);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

Процедура УстановитьВШагеЗначениеПараметра(ПараметрыВходящие,Стр,СтрокаДерева,ПараметрыПолученияТекстаСценария, Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры       = СтрокаДерева.Параметры;
	КонецЕсли;	 
	НаборПараметров = ПараметрыПолученияТекстаСценария.НаборПараметров;
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.ИзменяемыйПараметр Тогда
			УстановкаОдногоПараметра(Параметр,ПараметрыПолученияТекстаСценария,СтрокаДерева,ПараметрыВходящие,НаборПараметров);
		ИначеЕсли Параметр.Свойство("ВложенныеПараметры") и Параметр.ВложенныеПараметры <> Неопределено Тогда
			Для Каждого ВложенныйПараметр Из Параметр.ВложенныеПараметры Цикл
				УстановкаОдногоПараметра(ВложенныйПараметр,ПараметрыПолученияТекстаСценария,СтрокаДерева,ПараметрыВходящие,НаборПараметров);
			КонецЦикла;	
			Параметр.Вставить("НужныйТип",Параметр.Тип);
		Иначе	
			Параметр.Вставить("ТекущееЗначениеПараметра",Параметр.ЗначениеПараметра);
			Параметр.Вставить("НужныйТип",Параметр.Тип);
			Если Параметр.Тип = ТипПараметра("Таблица") Тогда
				Параметр.Вставить("ТекущееЗначениеПараметра",
				ЗначениеПараметраТаблицаИзПараметров(Параметр,ПараметрыВходящие,ПараметрыПолученияТекстаСценария,СтрокаДерева));
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	
	
	УстановитьПараметрыВСтроку(Стр,Параметры);
КонецПроцедуры

Процедура УстановитьПараметрыВСтроку(Стр,Параметры)
	ПодстановкаЗначенийПараметровВСтрокуИзменяемыеПараметры(Стр,Параметры);
	ПодстановкаЗначенийПараметровВСтроку(Стр,Параметры,ТипПараметра("Строка"),"Кавычки");
	ПодстановкаЗначенийПараметровВСтроку(Стр,Параметры,ТипПараметра("Строка"),"Апострофы");
	ПодстановкаЗначенийПараметровВСтроку(Стр,Параметры,ТипПараметра("Дата"));
	ПодстановкаЗначенийПараметровВСтроку(Стр,Параметры,ТипПараметра("Число"));
КонецПроцедуры 

Процедура ЗаменитьСлужебныеСимволыВСтроке(Стр)
	Стр = СтрЗаменить(Стр,"\|","~ПредставлениеЭкранированнойВертикальнойЧерты~");
	Стр = СтрЗаменить(Стр,"\\","~ПредставлениеДвойнойСлеш~");
	Стр = СтрЗаменить(Стр,"\""","~ПредставлениеКавычки~");
	Стр = СтрЗаменить(Стр,"\'","~ПредставлениеАпострофа~");
	Стр = СтрЗаменить(Стр,"\<","~ПредставлениеЛеваяУгловаяСкобка~");
	Стр = СтрЗаменить(Стр,"\>","~ПредставлениеПраваяУгловаяСкобка~");
	Стр = СтрЗаменить(Стр,"\[","~ПредставлениеЛеваяКвадратнаяСкобка~");
	Стр = СтрЗаменить(Стр,"\]","~ПредставлениеПраваяКвадратнаяСкобка~");
КонецПроцедуры

Функция УбратьСлужебныеСимволы(Знач Стр)
	Стр = СтрЗаменить(Стр,"~ПредставлениеЭкранированнойВертикальнойЧерты~","\|");
	Стр = СтрЗаменить(Стр,"~ПредставлениеДвойнойСлеш~","\\");
	Стр = СтрЗаменить(Стр,"~ПредставлениеКавычки~","""");
	Стр = СтрЗаменить(Стр,"~ПредставлениеАпострофа~","'");
	Стр = СтрЗаменить(Стр,"~ПредставлениеЛеваяУгловаяСкобка~","<");
	Стр = СтрЗаменить(Стр,"~ПредставлениеПраваяУгловаяСкобка~",">");
	Стр = СтрЗаменить(Стр,"~ПредставлениеЛеваяКвадратнаяСкобка~","\[");
	Стр = СтрЗаменить(Стр,"~ПредставлениеПраваяКвадратнаяСкобка~","\]");
	Возврат Стр;
КонецФункции	

Функция ПолучитьСтрокуОтступПоЧислуПробелов(Количество,СимволТаб = Ложь)
	Отступ = БыстрыйРасчетСтрокиОтступа(Количество,СимволТаб);
	Если Отступ <> Неопределено Тогда
		Возврат Отступ;
	КонецЕсли;	 
	
	Стр = "";
	Для Ккк = 1 По Количество Цикл
		Если СимволТаб Тогда
			Стр = Стр + Символы.Таб;
		Иначе	
			Стр = Стр + " ";
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Стр;
КонецФункции	

Процедура ВГруппеЕстьИсполняемыеШагиРекурсивно(Дерево,ЕстьИсполняемыеШаги)
	Если ЕстьИсполняемыеШаги Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если  СтрокаДерева.ТипЭлемента <> ТипЭлементаГруппаШагов()
			И СтрокаДерева.ТипЭлемента <> ТипЭлементаНачалоСхемы()
			И СтрокаДерева.ТипЭлемента <> ТипЭлементаОкончаниеСхемы()
			И СтрокаДерева.ТипЭлемента <> ТипЭлементаПустаяСтрока()
			И СтрокаДерева.ТипЭлемента <> ТипЭлементаКомментарий()
			И СтрокаДерева.ТипЭлемента <> ТипЭлементаБлочныйКомментарийНачало()
			И СтрокаДерева.ТипЭлемента <> ТипЭлементаБлочныйКомментарийОкончание()
			И СтрокаДерева.ТипЭлемента <> ТипЭлементаБлочныйКомментарий()
			Тогда
			ЕстьИсполняемыеШаги = Истина;
			Прервать;
		КонецЕсли;	 
		
		ВГруппеЕстьИсполняемыеШагиРекурсивно(СтрокаДерева,ЕстьИсполняемыеШаги);
	КонецЦикла;	
КонецПроцедуры

Функция ВГруппеЕстьИсполняемыеШаги(Дерево)
	ЕстьИсполняемыеШаги = Ложь;
	
	ВГруппеЕстьИсполняемыеШагиРекурсивно(Дерево,ЕстьИсполняемыеШаги);
	
	Возврат ЕстьИсполняемыеШаги;
КонецФункции	

Функция НайтиСтрокуДереваСПараметрамиДляТекущейСтроки(СтрокаДерева,ПараметрыПолученияТекстаСценария)
	Родитель = СтрокаДерева.Родитель;
	
	Если Родитель <> Неопределено Тогда
		Пока Родитель.ТипЭлемента <> ТипЭлементаШаблонСценария() Цикл
			Родитель = Родитель.Родитель;
			Если Родитель = Неопределено Тогда
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
	
	Если Родитель = Неопределено Тогда
		//Значит вышли из вложенного сценария
		ИД = ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Количество()-1;
		Возврат ПараметрыПолученияТекстаСценария.МассивИерархииСценариев[ИД].СхемаДерево;
	КонецЕсли;	 
	
	Возврат Родитель;
КонецФункции	

Процедура ЗначениеИТипПараметраИзВеткиРодителя(СтрокаДерева,ТекущееЗначениеПараметра,НужныйТип,Параметр,
	               ПараметрыВходящие,НаборПараметров,СтрокаДереваСПараметрами,ПараметрыПолученияТекстаСценария)
	Родитель = СтрокаДереваСПараметрами;
	
	Если Родитель.Параметры = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не переданы параметры в строке : %1'"),
																				  Родитель.ОписаниеЭлемента);
	КонецЕсли;	 
	
	//если хотя бы один параметр переда снизу, значит так переданы все,
	//т.к. смешанная передача параметров не поддерживается
	ПараметрыПереданыСнизу = Ложь;
	Если Родитель.Параметры.Количество() > 0 Тогда
		Если Родитель.Параметры[0].Свойство("ПереданСнизу") Тогда
			ПараметрыПереданыСнизу = Родитель.Параметры[0].ПереданСнизу;
		КонецЕсли;	 
	Иначе	
		ПараметрыПереданыСнизу = Истина;
		//значит все параметры будут заданы по умолчанию
	КонецЕсли;	 
	
	ИдПараметраВСтроке = Параметр.НомерПараметраВСценарии;
	
	Если НЕ ПараметрыПереданыСнизу И Родитель.Параметры.Количество() < (ИдПараметраВСтроке+1) Тогда
		Если ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Количество() > 0 Тогда
			//это вложенный сценарий
			ОписаниеОшибки = ОписаниеОшибкиВыполненияВложенныйСценарияНеПереданПараметр(СтрокаДерева,Параметр,ПараметрыПолученияТекстаСценария);
		Иначе	
			ОписаниеОшибки = ОписаниеОшибкиВыполненияСценарияНеПереданПараметр(СтрокаДерева,Параметр);
		КонецЕсли;	 
		
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru = 'Сценарий:'") + ПараметрыПолученияТекстаСценария.Сценарий;
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка передачи параметра: %1'"),ОписаниеОшибки);
	КонецЕсли;	 
	
	Если ПараметрыПереданыСнизу Тогда
		НашлиПередачуПараметра = Ложь;
		Для Каждого ПараметрРодителя Из Родитель.Параметры Цикл
			Если Нрег(ПараметрРодителя.ИмяПараметра) = Нрег(Параметр.НовоеИмяПараметра) Тогда
				НашлиПередачуПараметра = Истина;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если Не НашлиПередачуПараметра Тогда
			//значит значение параметра не было передано и берём значение по умолчанию
			
			Шаблон = Родитель.ДополнительныеСвойства.Шаблон;
			ДанныеВложенныхСценариев = ПараметрыПолученияТекстаСценария.ДанныеВложенныхСценариев;
			Если ПараметрыПолученияТекстаСценария.Свойство("ЧтениеИзGit") И ПараметрыПолученияТекстаСценария.ЧтениеИзGit Тогда
				СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Найти(Родитель.ДополнительныеСвойства.UID,"UID");
			ИначеЕсли НЕ ПараметрыПолученияТекстаСценария.ЧтениеИзТекста Тогда
				СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Найти(Шаблон,"Сценарий");
			Иначе	
				СтрокаДанныеВложенныхСценариев = ДанныеВложенныхСценариев.Найти(
					Родитель.ДополнительныеСвойства.UID,"UID");
			КонецЕсли;	  
			
			Если СтрокаДанныеВложенныхСценариев = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдены данные вложенного сценария: %1. Основной сценарий: %2'"),
					Шаблон,ПараметрыПолученияТекстаСценария.Сценарий);
			КонецЕсли;	 
			
			ПараметрыВходящие = СтрокаДанныеВложенныхСценариев.ПараметрыВходящие;
			СтрокаПараметрыВходящие = ПараметрыВходящие.Найти(Параметр.НовоеИмяПараметра,"Имя");
			Если СтрокаПараметрыВходящие = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'У вложенного сценария: %1 не найден параметр %2'"),
					Шаблон,Параметр.НовоеИмяПараметра);
			КонецЕсли;	 
			
			ТекущееЗначениеПараметра = СтрокаПараметрыВходящие.Значение;
			НужныйТип                = Параметр.Тип;
			Возврат;
		КонецЕсли;	 
	Иначе	
		ПараметрРодителя = Родитель.Параметры[ИдПараметраВСтроке];
	КонецЕсли;	 
	
	Если ПараметрРодителя.ИзменяемыйПараметр Тогда
		Если ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Количество() > 1 Тогда
			//тут именно > 1, т.к. это означает, что надо выйти на один уровень вложенности вверх
			
			//это вложенный сценарий
			ИД = ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Количество()-1;
			ПоследнееЗначениеМассивИерархииСценариев = ПараметрыПолученияТекстаСценария.МассивИерархииСценариев[ИД];
			ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Удалить(ИД);
			
			СтрокаДереваСПараметрами = НайтиСтрокуДереваСПараметрамиДляТекущейСтроки(Родитель,ПараметрыПолученияТекстаСценария);
			ЗначениеИТипПараметраИзВеткиРодителя(Родитель,ТекущееЗначениеПараметра,НужныйТип,ПараметрРодителя,
			ПараметрыВходящие,НаборПараметров,СтрокаДереваСПараметрами,ПараметрыПолученияТекстаСценария);
			
			ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Добавить(ПоследнееЗначениеМассивИерархииСценариев);
		Иначе
			СтрокаНаборПараметров = НайтиСтрокуНабора(ПараметрыВходящие,НаборПараметров,ПараметрРодителя);
			Если СтрокаНаборПараметров = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдено значение для параметра с именем: %1.
				|Сценарий: %2'"),
				   ПараметрРодителя.НовоеИмяПараметра,ПараметрыПолученияТекстаСценария.Сценарий);
			Иначе	
				ТекущееЗначениеПараметра = СтрокаНаборПараметров.Значение;
				НужныйТип                = СтрокаНаборПараметров.ТипПараметра;
			КонецЕсли;	 
		КонецЕсли;
	ИначеЕсли ПараметрРодителя.Свойство("ВозвратЗначенияПараметра") И ПараметрРодителя.ВозвратЗначенияПараметра Тогда
		ТекущееЗначениеПараметра = ПараметрРодителя.ИмяПараметра;
		НужныйТип                = ТипПараметра("Строка");
	ИначеЕсли ПараметрРодителя.Свойство("ВозвратЗначенияПараметраССинонимом") И ПараметрРодителя.ВозвратЗначенияПараметраССинонимом Тогда
		ТекущееЗначениеПараметра = ПараметрРодителя.СинонимВозвращаемогоЗначения;
		НужныйТип                = ТипПараметра("Строка");
	ИначеЕсли ПараметрРодителя.Свойство("ПрисвоениеВозвращаемогоПараметра") И ПараметрРодителя.ПрисвоениеВозвращаемогоПараметра Тогда
		ТекущееЗначениеПараметра = ПараметрРодителя.ЗначениеПараметра;
		НужныйТип                = ТипПараметра("Строка");
	Иначе
		ТекущееЗначениеПараметра = ПараметрРодителя.ЗначениеПараметра;
		НужныйТип                = ПараметрРодителя.Тип;
		Если ПараметрРодителя.Тип = ТипПараметра("Таблица") Тогда
			ТекущееЗначениеПараметра = ПараметрРодителя.ТекущееЗначениеПараметра;
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

Функция ЗначениеПараметраТаблицаИзПараметров(Параметр,ПараметрыВходящие,ПараметрыПолученияТекстаСценария,СтрокаДерева)
	Массив = Новый Массив;
	Для Каждого ЗначениеПараметраПодстановкаЗначений Из Параметр.ЗначениеПараметраПодстановкаЗначений Цикл
		ОбработаннаяСтрокаПараметров = ЗначениеПараметраПодстановкаЗначений.ОбработаннаяСтрокаПараметров;
		УстановитьВШагеЗначениеПараметра(ПараметрыВходящие,ОбработаннаяСтрокаПараметров,СтрокаДерева,
		  ПараметрыПолученияТекстаСценария,ЗначениеПараметраПодстановкаЗначений.Параметры);
		Массив.Добавить(ОбработаннаяСтрокаПараметров);  
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

Функция НайтиСтрокуНабора(ПараметрыВходящие,НаборПараметров,Параметр)
	СтрокаНаборПараметров = НаборПараметров.ТаблицаПараметров.Найти(Параметр.НовоеИмяПараметра,"Имя");
	
	Если СтрокаНаборПараметров = Неопределено Тогда
		СтрПараметрыВходящие = ПараметрыВходящие.Найти(Параметр.ЗначениеПараметра,"Значение");
		Если СтрПараметрыВходящие <> Неопределено Тогда
			СтрокаНаборПараметров = НаборПараметров.ТаблицаПараметров.Найти(СтрПараметрыВходящие.Имя,"Имя");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат СтрокаНаборПараметров;
КонецФункции	

Процедура ПодстановкаЗначенийПараметровВСтрокуИзменяемыеПараметры(Стр,Параметры,ДобавлятьСимвол = Истина)
	Вид           = "КвадратныеСкобки";
	Тип           = ТипПараметра("Строка");
	КолПараметров = 0;
	
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Символ <> "[" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗначениеПараметра = Параметр.ТекущееЗначениеПараметра;
		
		Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
			ЗначениеПараметра = СтрСоединить(ЗначениеПараметра,Символы.ПС);
		КонецЕсли;	 
		
		КолПараметров = КолПараметров + 1;
		ЭкранироватьСпецСимволы(ЗначениеПараметра, Параметр.Символ);
		
		Если Параметр.НужныйТип = ТипПараметра("Строка") ИЛИ Параметр.НужныйТип = ТипПараметра("Таблица") Тогда
			Если ДобавлятьСимвол Тогда
				СтрокаЗаментыПараметра = """" + ЗначениеПараметра + """";
			Иначе	
				СтрокаЗаментыПараметра = ЗначениеПараметра;
			КонецЕсли;	 
			Стр = СтрЗаменить(Стр,"~ПараметрСтрока" + Вид + XMLСтрока(КолПараметров) + "~",СтрокаЗаментыПараметра);
			
		Иначе	
			Стр = СтрЗаменить(Стр,"~ПараметрСтрока" + Вид + XMLСтрока(КолПараметров) + "~",ЗначениеПараметра);
		КонецЕсли;	 
		
		Если Параметр.Свойство("СвязанСФО") Тогда
			Если Параметр.СвязанСФО Тогда
				Стр = Сред(Стр,3); //т.к. первые символы равны ФО
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
КонецПроцедуры

Процедура ПодстановкаЗначенийПараметровВСтрокуОдногоПараметра(Стр,Параметр,Тип,Вид,ЗначениеПараметра,КолПараметров)
	ЭкранироватьСпецСимволы(ЗначениеПараметра, Параметр.Символ);
	
	Если Тип = ТипПараметра("Строка") Тогда
		Если Параметр.НужныйТип = ТипПараметра("Строка") Тогда
			СтрокаЗаментыПараметра = Параметр.Символ + ЗначениеПараметра + Параметр.Символ;
		Иначе	
			СтрокаЗаментыПараметра = ЗначениеПараметра;
		КонецЕсли;	 
		Стр = СтрЗаменить(Стр,"~Параметр" + Тип + Вид + XMLСтрока(КолПараметров) + "~",СтрокаЗаментыПараметра);
		
		Если Параметр.Свойство("СвязанСФО") Тогда
			Если Параметр.СвязанСФО Тогда
				Стр = Сред(Стр,3); //т.к. первые символы равны ФО
				Стр = СокрЛП(СтрЗаменить(Стр, Параметр.Символ,""));
			КонецЕсли;	 
		КонецЕсли;	 
		
	Иначе	
		Стр = СтрЗаменить(Стр,"~Параметр" + Тип + Вид + XMLСтрока(КолПараметров) + "~",ЗначениеПараметра);
	КонецЕсли;	 
КонецПроцедуры

Процедура ПодстановкаЗначенийПараметровВСтроку(Стр,Параметры,Тип,Вид = "")
	КолПараметров = 0;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Вид <> "" Тогда
			Если Параметр.Вид <> Вид Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		КолПараметров = КолПараметров + 1;
		
		Если НЕ Параметр.Свойство("ВложенныеПараметры") Или Параметр.ВложенныеПараметры = Неопределено Тогда
			ЗначениеПараметра = Параметр.ТекущееЗначениеПараметра;
		Иначе
					 
			СтрокаДляУстановкиЗначения = Параметр.ЗначениеПараметраВложенное;
			ПодстановкаЗначенийПараметровВСтрокуИзменяемыеПараметры(СтрокаДляУстановкиЗначения,Параметр.ВложенныеПараметры,Ложь);
			ЗначениеПараметра = СтрокаДляУстановкиЗначения;
			Параметр.Вставить("ЗначениеПараметра",ЗначениеПараметра);
		КонецЕсли;	 
		
		ПодстановкаЗначенийПараметровВСтрокуОдногоПараметра(Стр,
				     Параметр,Тип,Вид,ЗначениеПараметра,КолПараметров);
	КонецЦикла;	
КонецПроцедуры

Функция БыстрыйРасчетСтрокиОтступа(Количество,СимволТаб)
	Если Не СимволТаб Тогда
		Если Количество = 0 Тогда
			Возврат "";
		ИначеЕсли Количество = 8 Тогда
			Возврат "        ";
		ИначеЕсли Количество = 16 Тогда
			Возврат "                ";
		ИначеЕсли Количество = 24 Тогда
			Возврат "                        ";
		ИначеЕсли Количество = 32 Тогда
			Возврат "                                ";
		ИначеЕсли Количество = 40 Тогда
			Возврат "                                        ";
		ИначеЕсли Количество = 48 Тогда
			Возврат "                                                ";
		ИначеЕсли Количество = 56 Тогда
			Возврат "                                                        ";
		ИначеЕсли Количество = 64 Тогда
			Возврат "                                                                ";
		ИначеЕсли Количество = 72 Тогда
			Возврат "                                                                        ";
		ИначеЕсли Количество = 80 Тогда
			Возврат "                                                                                ";
		ИначеЕсли Количество = 88 Тогда
			Возврат "                                                                                        ";
		ИначеЕсли Количество = 96 Тогда
			Возврат "                                                                                                ";
		ИначеЕсли Количество = 104 Тогда
			Возврат "                                                                                                        ";
		ИначеЕсли Количество = 112 Тогда
			Возврат "                                                                                                                ";
		ИначеЕсли Количество = 120 Тогда
			Возврат "                                                                                                                        ";
		ИначеЕсли Количество = 128 Тогда
			Возврат "                                                                                                                                ";
		ИначеЕсли Количество = 136 Тогда
			Возврат "                                                                                                                                        ";
		ИначеЕсли Количество = 144 Тогда
			Возврат "                                                                                                                                                ";
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	

Функция ОписаниеОшибкиВыполненияВложенныйСценарияНеПереданПараметр(СтрокаДерева,Параметр,
	                                                    ПараметрыПолученияТекстаСценария)
														
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ИДМассивИерархииСценариев = ПараметрыПолученияТекстаСценария.МассивИерархииСценариев.Количество()-1;
	
	МассивВызовов = Новый Массив;
	ТекСтрокаДерева = СтрокаДерева;
	Пока Истина Цикл
		МассивВызовов.Добавить(ТекСтрокаДерева);
		
		ТекСтрокаДерева = ТекСтрокаДерева.Родитель;
		Если ТекСтрокаДерева = Неопределено Тогда
			Если ИДМассивИерархииСценариев >= 0 Тогда
				ТекСтрокаДерева = ПараметрыПолученияТекстаСценария.МассивИерархииСценариев[ИДМассивИерархииСценариев].СхемаДерево;
				ИДМассивИерархииСценариев = ИДМассивИерархииСценариев - 1;
				Продолжить;
			КонецЕсли;	 
			
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Стр = Символы.ПС;
	Для Ккк = 0 По МассивВызовов.Количество()-1 Цикл
		Отступ = "";
		Для Сч = 1 По Ккк Цикл
			Отступ = Отступ + "---";
		КонецЦикла;	
		
		ТекИД = МассивВызовов.Количество()-1 - Ккк;
		Стр   = Стр + Отступ + НСтр("ru = 'Строка№'") + МассивВызовов[ТекИД].НомерСтрокиТекстаСценария
		                           + ". " + МассивВызовов[ТекИД].ОписаниеЭлемента;
		Стр = Стр + Символы.ПС;
	КонецЦикла;	
	
	
	Стр = Стр + НСтр("ru = 'параметр: '") + Параметр.НовоеИмяПараметра;
	
	Возврат Стр;
КонецФункции	

Функция ОписаниеОшибкиВыполненияСценарияНеПереданПараметр(СтрокаДерева,Параметр)
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если СтрокаДерева.ДополнительныеСвойства = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если Не СтрокаДерева.ДополнительныеСвойства.Свойство("Шаблон") Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат СтрШаблон(НСтр("ru = '%1, строка №%2, параметр: %3'"),
		             СтрокаДерева.ДополнительныеСвойства.Шаблон.Наименование,
					 СтрокаДерева.НомерСтрокиТекстаСценария,
					 Параметр.НовоеИмяПараметра);
КонецФункции	

Функция ЗначениеПараметраПроцесса(ЗначениеПараметра,ПараметрыПроцесса,СтрокаПараметра,
	  СтрокаСценария, ШагиПроцесса, ПараметрыФормированияТекстаСценария)
	  
	Если Лев(НРег(ЗначениеПараметра),15) = "общий параметр." Тогда
		ИмяПараметра = Сред(ЗначениеПараметра,16);
		
		СтрокаПараметрыПроцесса = ПараметрыПроцесса.Найти(ИмяПараметра,"Имя");
		
		Если СтрокаПараметрыПроцесса = Неопределено Тогда
			Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
				UIDПроцесса = ПараметрыФормированияТекстаСценария.UIDПроцесса;
				СтрокаДанныеПроцессов = ПараметрыФормированияТекстаСценария.ДанныеПроцессов.Найти(UIDПроцесса,"UID");
				СтрокаШагаПроцесса = СтрокаДанныеПроцессов.ШагиПроцесса.Найти(СтрокаСценария.ШагПроцессаUID, "UID");
				Если СтрокаШагаПроцесса <> Неопределено Тогда
					НомерШага = СтрокаДанныеПроцессов.ШагиПроцесса.Индекс(СтрокаШагаПроцесса) + 1;
				Иначе	
					НомерШага = Неопределено;
				КонецЕсли;	 
				
			Иначе	
				НомерШага = ШагиПроцесса.Индекс(СтрокаСценария) + 1;
			КонецЕсли;	 
			
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка в передаче параметров в шаг процесса <№%1>.
			|Сценарий <%2>.
			|Параметр <%3>.
			|Не найден общий параметр процесса: <%4>'"),
			  НомерШага,СтрокаСценария.Наименование,СтрокаПараметра.Имя,ЗначениеПараметра);
		КонецЕсли;	 
		
		Возврат СтрокаПараметрыПроцесса.Значение;
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ЗначениеПараметра) И ЗначениеЗаполнено(СтрокаПараметра.ШагПроцессаЗначениеПоСсылке) Тогда
		Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
			UIDПроцесса = ПараметрыФормированияТекстаСценария.UIDПроцесса;
			СтрокаДанныеПроцессов = ПараметрыФормированияТекстаСценария.ДанныеПроцессов.Найти(UIDПроцесса,"UID");
			СтрокаШагиПроцесса = СтрокаДанныеПроцессов.ШагиПроцесса.Найти(СтрокаПараметра.ШагПроцессаЗначениеПоСсылкеUID,"UID");
		Иначе	
			СтрокаШагиПроцесса = ШагиПроцесса.Найти(СтрокаПараметра.ШагПроцессаЗначениеПоСсылке,"ШагПроцесса");
		КонецЕсли;	 
		Возврат "$" + СтрокаШагиПроцесса.Наименование + "." + СтрокаПараметра.ИмяПараметраПоСсылке + "$";
	ИначеЕсли ЗначениеЗаполнено(СтрокаПараметра.ЗначениеПроизвольное) Тогда
		Возврат СтрокаПараметра.ЗначениеПроизвольное; 
	КонецЕсли;	 
	
	Если СтрокаПараметра.ИсходящийПараметр Тогда
		Возврат "$" + СтрокаСценария.Наименование + "." + СтрокаПараметра.Имя + "$";
	КонецЕсли;	 
	
	Возврат ЗначениеПараметра;
КонецФункции	

Функция ИмяЭлемента(ТипЭлемента,ИдСтрокиДерева)
	Если ТипЭлемента = ТипЭлементаКомментарий() Тогда
		Возврат "";
	ИначеЕсли ТипЭлемента = ТипЭлементаДействие() Тогда
		Возврат ИмяЭлементаДействие() + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаТаблица() Тогда
		Возврат "";
	ИначеЕсли ТипЭлемента = ТипЭлементаОкончаниеСхемы() Тогда
		Возврат ИмяЭлементаСтоп() + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаНачалоСхемы() Тогда
		Возврат ИмяЭлементаСтарт() + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаСтоп() Тогда
		Возврат ИмяЭлементаСтоп() + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаГруппаШагов() Тогда
		Возврат ИмяЭлементаВложенныйПроцесс() + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаШаблонСценария() Тогда
		Возврат ИмяЭлементаШаблонСценария() + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаУсловиеПрепроцессор() Тогда
		Возврат "УсловиеПрепроцессор" + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаУсловие() Тогда
		Возврат "Условие" + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаУсловиеEng() Тогда
		Возврат "Condition" + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаМетка() Тогда
		Возврат ИмяЭлементаМетка() + XMLСтрока(ИдСтрокиДерева);
	ИначеЕсли ТипЭлемента = ТипЭлементаЦикл() Тогда
		Возврат "Цикл";
	ИначеЕсли ТипЭлемента = ТипЭлементаЦиклEng() Тогда
		Возврат "Do";
	ИначеЕсли ТипЭлемента = ТипЭлементаПередачаПараметров() Тогда
		Возврат "ПередачаПараметра";
	ИначеЕсли ТипЭлемента = ТипЭлементаПопытка() Тогда
		Возврат "Попытка";
	ИначеЕсли ТипЭлемента = ТипЭлементаИсключение() Тогда
		Возврат "Исключение";
	Иначе
		Возврат ""; 
	КонецЕсли;	 
КонецФункции	

Функция ПолучитьДеревоСценарияИзФайла(Сценарий,СтруктураПараметров,UIDСценария = Неопределено)
	Если UIDСценария = Неопределено Тогда
		UIDСценария = СтруктураПараметров.UIDСценария;
	КонецЕсли;	 
	Если НЕ СтруктураПараметров.Свойство("UIDСценария") Тогда
		СтруктураПараметров.Вставить("UIDСценария", UIDСценария);
	КонецЕсли;	 
	ДанныеСценариев = СтруктураПараметров.ДанныеСценариев;
	СтрокаДанныеСценариев = ДанныеСценариев.Найти(UIDСценария,"UID");
	Если СтрокаДанныеСценариев = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
		    НСтр("ru = 'Не найден сценарий: %1  по настройке %2'"),СтруктураПараметров.ИмяСценария,СтруктураПараметров.Имя);
	КонецЕсли;
	
	Если СтрокаДанныеСценариев.ДеревоСхемы <> Неопределено Тогда
		Возврат СтрокаДанныеСценариев.ДеревоСхемы;
	КонецЕсли;	 
		
	ДанныеСценария = СтрокаДанныеСценариев;
	
	ТекстСценария = ДанныеСценария.ТекстСценария;
	
	Если ТипЗнч(ТекстСценария) = Тип("Массив") Тогда
		ТекстСценария = СтрСоединить(ТекстСценария,Символы.ПС);
	КонецЕсли;	 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",Ложь);
	ДополнительныеПараметры.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
	ДополнительныеПараметры.Вставить("ЧтениеИзТекста",Истина);
	ДополнительныеПараметры.Вставить("СтруктураПараметров",СтруктураПараметров);
	ДополнительныеПараметры.Вставить("Сценарий",Сценарий);
	ДополнительныеПараметры.Вставить("КодСценария",СтрокаДанныеСценариев.Код);
	
	ОбъектСервер       = Сценарий;
	ДеревоСхемы = СоздатьДеревоСхемы();
	
	ПроектСценария = СтруктураПараметров.Проект;
	
	ДеревоСценарияИзТекста(ТекстСценария,
	                         ДеревоСхемы,ПроектСценария,ОбъектСервер,ДополнительныеПараметры);
	
	ПараметрыВходящие = СтруктураПараметров.ПараметрыСценария;
	
	ПараметрыВходящиеИзДерева(ДеревоСхемы,ПараметрыВходящие);
							 
	СтрокаДанныеСценариев.ДеревоСхемы = ДеревоСхемы;
	Возврат ДеревоСхемы;							 
КонецФункции	

Функция ПустаяТаблицаШаблонов()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Ссылка");
	Тзн.Колонки.Добавить("UID");
	Тзн.Колонки.Добавить("ПараметрыВходящие");
	Тзн.Колонки.Добавить("ВерсияСценария");
	Тзн.Колонки.Добавить("Наименование");
	Тзн.Колонки.Добавить("Код");
	Тзн.Колонки.Добавить("ДанныеШаблона");
	Тзн.Колонки.Добавить("Снипет");
	Тзн.Колонки.Добавить("СнипетНРег");
	Тзн.Колонки.Добавить("ЧтениеИзТекста");
	
	Возврат Тзн;
КонецФункции	

Функция ТаблицаШаблоновИзТекста(ПараметрыВерсийСценариев,ДополнительныеПараметры)
	ТаблицаШаблонов = ПустаяТаблицаШаблонов();
	
	КешПараметровСтроки = СоздатьТаблицуКешПараметровСтроки();
	
	UIDФункцияСистемы = Неопределено;
	Если ДополнительныеПараметры.СтруктураПараметров.Свойство("UIDФункцияСистемы") Тогда
		UIDФункцияСистемы = ДополнительныеПараметры.СтруктураПараметров.UIDФункцияСистемы;
	КонецЕсли;	 
	
	ДанныеСценариев = ДополнительныеПараметры.СтруктураПараметров.ДанныеСценариев;
	Для Каждого ДанныеОдногоСценария Из ДанныеСценариев Цикл
		Если UIDФункцияСистемы = Неопределено ИЛИ ДанныеОдногоСценария.UIDФункцияСистемы = UIDФункцияСистемы
		ИЛИ  НРег(ДанныеОдногоСценария.РазрешеноИспользоватьВДругихФункциях) = "да"	
		Тогда
			СтрокаТаблицаШаблонов                   = ТаблицаШаблонов.Добавить();
			СтрокаТаблицаШаблонов.Наименование      = ДанныеОдногоСценария.Имя;
			СтрокаТаблицаШаблонов.Код               = ДанныеОдногоСценария.Код;
			СтрокаТаблицаШаблонов.UID               = ДанныеОдногоСценария.UID;
			СтрокаТаблицаШаблонов.ПараметрыВходящие = ДанныеОдногоСценария.ПараметрыСценария.Скопировать();
			СтрокаТаблицаШаблонов.ВерсияСценария    = ДанныеОдногоСценария.ВерсияСценария;
			СтрокаТаблицаШаблонов.Снипет            = ПолучитьСнипетИзИмениСценария(ДанныеОдногоСценария.Имя,КешПараметровСтроки);
			СтрокаТаблицаШаблонов.СнипетНРег        = НРег(СтрокаТаблицаШаблонов.Снипет);
			СтрокаТаблицаШаблонов.ЧтениеИзТекста    = Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат ТаблицаШаблонов;
КонецФункции	

Функция ПолучитьСнипетИзИмениСценария(Знач Стр,КешПараметровСтроки)
	Если Стр = "" Тогда
		Возврат Стр;
	КонецЕсли;	 
	
	МассивСлов  = СтрРазделить(Стр," ",Истина);
	
	ПервоеСлово   = МассивСлов[0];
	
	Если ПервоеСлово = Неопределено Тогда
		Возврат Стр;
	КонецЕсли;	 
	
	Возврат УбратьЗапрещенныеСимволыИзСнипет(СнипетИзСтроки(Стр,КешПараметровСтроки));
КонецФункции	

Функция ТаблицаШаблоновСценариев(ПараметрыВерсийСценариев,ДополнительныеПараметры = Неопределено)
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ЧтениеИзТекста") Тогда
			Если ДополнительныеПараметры.ЧтениеИзТекста Тогда
				Возврат ТаблицаШаблоновИзТекста(ПараметрыВерсийСценариев,ДополнительныеПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ЧтениеИзGit") Тогда
			Если ДополнительныеПараметры.Свойство("ЧтениеИзGit") Тогда
				Возврат ТаблицаШаблоновИзЧтениеИзGit(ПараметрыВерсийСценариев,ДополнительныеПараметры);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не ЗначениеЗаполнено(ПараметрыВерсийСценариев.Проект) Тогда
		Возврат ПустаяТаблицаШаблонов();
	КонецЕсли;	 
	
	КешПараметровСтроки = СоздатьТаблицуКешПараметровСтроки();
	
	ТаблицаСценариев = Обработки.СборкаТекстовСценариев.ТаблицаШаблоновСценариев(ПараметрыВерсийСценариев);
			
	ТаблицаСценариев.Колонки.Добавить("ДанныеШаблона");
	ТаблицаСценариев.Колонки.Добавить("Снипет");
	ТаблицаСценариев.Колонки.Добавить("СнипетНРег");
	ТаблицаСценариев.Колонки.Добавить("ЧтениеИзТекста");
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСценариев Цикл
		СтрТаблицаСтрок.Снипет = ПолучитьСнипетИзИмениСценария(СтрТаблицаСтрок.Наименование,КешПараметровСтроки);
		СтрТаблицаСтрок.СнипетНРег = НРег(СтрТаблицаСтрок.Снипет);
		СтрТаблицаСтрок.ЧтениеИзТекста = Ложь;
	КонецЦикла;	
	
	Возврат ТаблицаСценариев;
КонецФункции	

Процедура ДеревоСценарияИзТекстаСлужебный(Текст,ДеревоСхемы,ТаблицаШаблоновСценариев,Сценарий,ДополнительныеПараметры)
	ДеревоСхемы.Строки.Очистить();
	ТаблицаСтрок = ПреобразоватьТекстВТаблицуСтрок(Текст);
	
	МассивОшибок = Новый Массив;
	КешПараметровСтроки = СоздатьТаблицуКешПараметровСтроки();
	СнипетыШагов(ТаблицаСтрок,МассивОшибок,КешПараметровСтроки);
	Если МассивОшибок.Количество() > 0 Тогда
		КодСценария = "";
		Если ДополнительныеПараметры.ЧтениеИзТекста Тогда
			КодСценария = ДополнительныеПараметры.КодСценария;
		Иначе	
			СтрокаТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев.Найти(Сценарий,"Ссылка");
			Если СтрокаТаблицаШаблоновСценариев <> Неопределено Тогда
				КодСценария = СтрокаТаблицаШаблоновСценариев.Код;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Стр = СтрШаблон(НСтр("ru = 'Сценарий <%1>. Код: <%2>'"),Сценарий,КодСценария);
		Для Каждого СтруктураОшибки Из МассивОшибок Цикл
			Стр = Стр + Символы.ПС + СтруктураОшибки.ТекстОшибки;
		КонецЦикла;	
		
		ВызватьИсключение Стр;
	КонецЕсли;	 
	
	ТаблицаСтрокВДеревоСхемы(ТаблицаСтрок,ДеревоСхемы,ТаблицаШаблоновСценариев,Сценарий
	    ,ДополнительныеПараметры,КешПараметровСтроки);
КонецПроцедуры

Функция СоздатьТаблицуКешПараметровСтроки()
	КешПараметровСтроки = Новый ТаблицаЗначений;
	КешПараметровСтроки.Колонки.Добавить("Строка");
	КешПараметровСтроки.Колонки.Добавить("Параметры");
	КешПараметровСтроки.Колонки.Добавить("ПреобразованнаяСтрока");
	
	КешПараметровСтроки.Индексы.Добавить("Строка");
	
	Возврат КешПараметровСтроки;
КонецФункции	

Функция УбратьЗапрещенныеСимволыИзСнипет(Снипет) 
	Снипет = СтрЗаменить(Снипет," ","");
	Снипет = СтрЗаменить(Снипет,"""","");
	Снипет = СтрЗаменить(Снипет,".","");
	Снипет = СтрЗаменить(Снипет,",","");
	Снипет = СтрЗаменить(Снипет,":","");
	Снипет = СтрЗаменить(Снипет,";","");
	Снипет = СтрЗаменить(Снипет,"-","_");
	Снипет = СтрЗаменить(Снипет,"+","");
	Снипет = СтрЗаменить(Снипет,"/","");
	Снипет = СтрЗаменить(Снипет,"\","");
	Снипет = СтрЗаменить(Снипет,"=","");
	Снипет = СтрЗаменить(Снипет,"!","");
	Снипет = СтрЗаменить(Снипет,"@","");
	Снипет = СтрЗаменить(Снипет,"#","");
	Снипет = СтрЗаменить(Снипет,"$","");
	Снипет = СтрЗаменить(Снипет,"%","");
	Снипет = СтрЗаменить(Снипет,"^","");
	Снипет = СтрЗаменить(Снипет,"&","");
	Снипет = СтрЗаменить(Снипет,"(","");
	Снипет = СтрЗаменить(Снипет,")","");
	Снипет = СтрЗаменить(Снипет,"№","");
	Снипет = СтрЗаменить(Снипет,"?","");
	Снипет = СтрЗаменить(Снипет,"`","");
	Снипет = СтрЗаменить(Снипет,"'","");
	Снипет = СтрЗаменить(Снипет,"~","");
	Снипет = СтрЗаменить(Снипет,Символы.НПП," ");
	Снипет = СтрЗаменить(Снипет,"*","");
	Снипет = СтрЗаменить(Снипет,"<","");
	Снипет = СтрЗаменить(Снипет,">","");
	
	Возврат Снипет;
КонецФункции

Функция СкопироватьПараметрыШага(Параметры)
	Копия = Новый Массив;
	
	Для Каждого ПараметрШага Из Параметры Цикл
		СтруктураПараметра = СтруктураПараметра();
		ЗаполнитьЗначенияСвойств(СтруктураПараметра,ПараметрШага);
		
		Если ПараметрШага.ВложенныеПараметры <> Неопределено Тогда
			СтруктураПараметра.ВложенныеПараметры = СкопироватьПараметрыШага(ПараметрШага.ВложенныеПараметры);
		КонецЕсли;	 
		
		Копия.Добавить(СтруктураПараметра);
	КонецЦикла;	
	
	Возврат Копия; 
КонецФункции	 

Функция ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(Стр,
	                                         ИзменяемыеПараметрыСценария = Неопределено,
											 КешПараметровСтроки = Неопределено,
											 СтрокаКеш = Неопределено,
											 ДопПараметры = Неопределено) Экспорт
											 
											 
	ИспользоватьКеш = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") и ДопПараметры.Свойство("ИспользоватьКеш") Тогда
		ИспользоватьКеш = ДопПараметры.ИспользоватьКеш;
	КонецЕсли;	 
	
	Если КешПараметровСтроки <> Неопределено и ИспользоватьКеш Тогда
		
		Если СтрокаКеш = Неопределено Тогда
			СтрокаКешПараметровСтроки = КешПараметровСтроки.Найти(Стр,"Строка");
		Иначе	
			СтрокаКешПараметровСтроки = КешПараметровСтроки.Найти(СтрокаКеш,"Строка");
		КонецЕсли;	 
		
		Если СтрокаКешПараметровСтроки <> Неопределено Тогда
			Стр = СтрокаКешПараметровСтроки.ПреобразованнаяСтрока;
			Возврат СкопироватьПараметрыШага(СтрокаКешПараметровСтроки.Параметры);
		КонецЕсли;	 
	КонецЕсли;	 											 
	
	ОригинальнаяСтрока = Стр;
	Параметры          = Новый Массив;
	
	ЗаменитьСлужебныеСимволыВСтроке(Стр);
	
	НайтиСтроковыеПараметрыПоСимволу(Стр,Параметры,"'","Апострофы");
	НайтиСтроковыеПараметрыПоСимволу(Стр,Параметры,"""","Кавычки");
	НайтиИзменяемыеПараметры(Стр,Параметры,ИзменяемыеПараметрыСценария);
	НайтиПараметрыДаты(Стр,Параметры);
	НайтиЧисловыеПараметры(Стр,Параметры, Новый ОписаниеТипов("Число"));
	
	НайтиИзменяемыеПараметрыВПараметрах(Стр,Параметры,ИзменяемыеПараметрыСценария);
	
	УпорядочитьМассивПараметров(Стр,Параметры);
	
	ЭкранироватьУгловыеСкобки(Стр);
	
	Если КешПараметровСтроки <> Неопределено Тогда
		СтрокаКешПараметровСтроки                       = КешПараметровСтроки.Добавить();
		СтрокаКешПараметровСтроки.Строка                = ОригинальнаяСтрока;
		Если СтрокаКеш = Неопределено Тогда
			СтрокаКешПараметровСтроки.ПреобразованнаяСтрока = Стр;
		Иначе	
			СтрокаКешПараметровСтроки.ПреобразованнаяСтрока = СтрокаКеш;
		КонецЕсли;	 
		СтрокаКешПараметровСтроки.Параметры = Параметры;
	КонецЕсли;
	
	Возврат Параметры;
КонецФункции	

Процедура УбратьПараметрыИзСтроки(Стр,Параметры)
	Для Каждого Параметр Из Параметры Цикл
		Стр = СтрЗаменить(Стр,"~Параметр" + Параметр.Тип + Параметр.Вид + XMLСтрока(Параметр.НомерПараметра) + "~","");
	КонецЦикла;	
КонецПроцедуры

Функция ПреобразоватьТекстВТаблицуСтрок(Текст)
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("СтрокаОригинал");
	ТаблицаСтрок.Колонки.Добавить("СтрокаСокр");
	ТаблицаСтрок.Колонки.Добавить("Отступ");
	ТаблицаСтрок.Колонки.Добавить("СтрокаРезультат");
	ТаблицаСтрок.Колонки.Добавить("ГруппаШаговНачалась");
	ТаблицаСтрок.Колонки.Добавить("ГруппаШаговЗакончилась");
	ТаблицаСтрок.Колонки.Добавить("НачатьГруппыСначала");
	ТаблицаСтрок.Колонки.Добавить("Оператор");
	ТаблицаСтрок.Колонки.Добавить("ПараметрыОператора");
	ТаблицаСтрок.Колонки.Добавить("Снипет");
	ТаблицаСтрок.Колонки.Добавить("СнипетНРег");
	ТаблицаСтрок.Колонки.Добавить("ИдРодительскойГруппы");
	ТаблицаСтрок.Колонки.Добавить("НомерСтрокиТекстаСценария");
	
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	НомерСтроки = 0;
	Для Каждого Стр Из МассивСтрок Цикл
		НомерСтроки = НомерСтроки + 1;
		
		СтрТаблицаСтрок = ТаблицаСтрок.Добавить();
		СтрТаблицаСтрок.СтрокаОригинал            = Стр;
		СтрТаблицаСтрок.СтрокаСокр                = СокрЛП(Стр);
		СтрТаблицаСтрок.Отступ                    = СтрДлина(Стр) - СтрДлина(СокрЛ(Стр));
		СтрТаблицаСтрок.СтрокаРезультат           = СтрТаблицаСтрок.СтрокаСокр;
		СтрТаблицаСтрок.ГруппаШаговНачалась       = Ложь;
		СтрТаблицаСтрок.ГруппаШаговЗакончилась    = Ложь;
		СтрТаблицаСтрок.НачатьГруппыСначала       = Ложь;
		СтрТаблицаСтрок.Оператор                  = Неопределено;
		СтрТаблицаСтрок.ПараметрыОператора        = Неопределено;
		СтрТаблицаСтрок.НомерСтрокиТекстаСценария = НомерСтроки;
	КонецЦикла;	
	
	
	НомерСтроки          = 0;
	ТекОтступ            = 0;
	ПредыдущийОтступ     = 0;
	НашлиГруппу          = Ложь;
	ОтступГруппы         = 0;
	ИдРодительскойГруппы = -1;
	
	КешОператорКонтекст    = ОператорКонтекст();
	КешОператорСценарий    = ОператорСценарий();
	КешОператорКомментарий = ОператорКомментарий();
	КешОператорПараметрТаблица= ОператорПараметрТаблица();
	
	НайденоНачалоБлочногоКомментария = Ложь;
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		НомерСтроки = НомерСтроки + 1;
		
		СтрТаблицаСтрок.ИдРодительскойГруппы = ИдРодительскойГруппы;
		
		
		Если СтрТаблицаСтрок.СтрокаСокр = "" Тогда
			Если НайденоНачалоБлочногоКомментария Тогда
				СтрТаблицаСтрок.Оператор = ОператорКомментарий();
			КонецЕсли;	 
			
			ПредыдущийОтступ = 0;
			Продолжить;
		КонецЕсли;	 
		
		ОператорыВСтроке(СтрТаблицаСтрок,НайденоНачалоБлочногоКомментария,НомерСтроки);
		Если СтрТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийНачало() Тогда
			НайденоНачалоБлочногоКомментария = Истина;
			СтрТаблицаСтрок.ИдРодительскойГруппы = -1;
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийОкончание() Тогда
			НайденоНачалоБлочногоКомментария = Ложь;
			СтрТаблицаСтрок.ИдРодительскойГруппы = -1;
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКомментарий() Тогда
			СтрТаблицаСтрок.ИдРодительскойГруппы = -1;
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(СтрТаблицаСтрок.Оператор) Тогда
			Если НомерСтроки > 1 Тогда
				Если ТаблицаСтрок[НомерСтроки-1-1].Оператор = ОператорЗаголовок() Тогда
					СтрТаблицаСтрок.Оператор = ОператорЧастьЗаголовока();
				ИначеЕсли ТаблицаСтрок[НомерСтроки-1-1].Оператор = ОператорЧастьЗаголовока() Тогда
					СтрТаблицаСтрок.Оператор = ОператорЧастьЗаголовока();
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если (СтрТаблицаСтрок.Оператор = КешОператорКонтекст) или (СтрТаблицаСтрок.Оператор = КешОператорСценарий) Тогда
			ИдРодительскойГруппы = НомерСтроки-1;
			Продолжить;
		КонецЕсли;	 
		
		Если НомерСтроки = 1 Тогда
			ПредыдущийОтступ = СтрТаблицаСтрок.Отступ;
		КонецЕсли;	 
		
		Если Лев(СтрТаблицаСтрок.СтрокаСокр,1) = "#" И СтрТаблицаСтрок.Оператор = КешОператорКомментарий Тогда
			СтрТаблицаСтрок.Отступ = ПредыдущийОтступ;
			Продолжить;
		ИначеЕсли Лев(СтрТаблицаСтрок.СтрокаСокр,1) = "@" Тогда
			СтрТаблицаСтрок.Отступ = ПредыдущийОтступ;
			Продолжить;
		КонецЕсли;	 
		
		ТекОтступ = СтрТаблицаСтрок.Отступ;
		
		Если (Лев(СтрТаблицаСтрок.СтрокаСокр,1) = "*")
			И (СтрТаблицаСтрок.Оператор <> ОператорБлочныйКомменатрийОкончание())
			И (СтрТаблицаСтрок.Оператор <> ОператорБлочныйКомментарий())
			Тогда
			СтрТаблицаСтрок.ГруппаШаговНачалась = Истина;
			ИдРодительскойГруппы(ТаблицаСтрок,СтрТаблицаСтрок,НомерСтроки-1-1,ТекОтступ);
			ОтступГруппы = ТекОтступ;
			ИдРодительскойГруппы = НомерСтроки-1;
		ИначеЕсли ОтступГруппы >= ТекОтступ И НЕ НайденоНачалоБлочногоКомментария
			И (СтрТаблицаСтрок.Оператор <> ОператорБлочныйКомменатрийОкончание())
			И (СтрТаблицаСтрок.Оператор <> ОператорКомментарий()) Тогда
			
			ИдРодительскойГруппы(ТаблицаСтрок,СтрТаблицаСтрок,НомерСтроки-1-1,ТекОтступ);
			ИдРодительскойГруппы = СтрТаблицаСтрок.ИдРодительскойГруппы;
			СтрТаблицаСтрок.ГруппаШаговЗакончилась = Истина;
		ИначеЕсли НайденоНачалоБлочногоКомментария  Тогда
			СтрТаблицаСтрок.ИдРодительскойГруппы = -1;
		КонецЕсли;	 
		
		ПредыдущийОтступ = СтрТаблицаСтрок.Отступ;
	КонецЦикла;	
	
	ОтформатироватьТаблицы(ТаблицаСтрок);
	
	Возврат ТаблицаСтрок;
КонецФункции	

Процедура СнипетыШагов(ТаблицаСтрок,МассивОшибок,КешПараметровСтроки)
	МассивПервыхСловНРег     = МассивПервыхСловGherkinНРег();
	ТаблицаКешСнипетов       = Новый ТаблицаЗначений;
	ТаблицаКешСнипетов.Колонки.Добавить("Строка");
	ТаблицаКешСнипетов.Колонки.Добавить("Снипет");
	
	ТаблицаКешСнипетов.Индексы.Добавить("Строка");
	
	ЭтоМногострочаяСтрока = Ложь;
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если ЗначениеЗаполнено(СтрТаблицаСтрок.Оператор) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "*" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "|" Тогда
			Продолжить;
		ИначеЕсли Лев(Стр, 3) = """""""" Тогда
			//Обозначение многострочной строки
			ЭтоМногострочаяСтрока = НЕ ЭтоМногострочаяСтрока;
			СтрТаблицаСтрок.Оператор = ОператорМногострочнаяСтрока();
			Продолжить;
		КонецЕсли;
		
		Если ЭтоМногострочаяСтрока Тогда
			СтрТаблицаСтрок.Оператор = ОператорМногострочнаяСтрока();
			Продолжить;
		КонецЕсли;	
		
		СтрокаТаблицаКешСнипетов = ТаблицаКешСнипетов.Найти(Стр,"Строка");
		Если СтрокаТаблицаКешСнипетов <> Неопределено Тогда
			СтрТаблицаСтрок.Снипет     = СтрокаТаблицаКешСнипетов.Снипет;
			СтрТаблицаСтрок.СнипетНРег = НРег(СтрТаблицаСтрок.Снипет);
			Продолжить;
		КонецЕсли;	 
		
		Если СнипетПоСтроке(Стр,МассивПервыхСловНРег,КешПараметровСтроки) Тогда
			СтрТаблицаСтрок.Снипет     = Стр;
			СтрТаблицаСтрок.СнипетНРег = НРег(Стр);
			
			СтрокаТаблицаКешСнипетов        = ТаблицаКешСнипетов.Добавить();
			СтрокаТаблицаКешСнипетов.Строка = СтрТаблицаСтрок.СтрокаСокр;
			СтрокаТаблицаКешСнипетов.Снипет = СтрТаблицаСтрок.Снипет;
		Иначе
			КопияСтроки = Стр;
			ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(КопияСтроки);
			
			НрегКопияСтроки = НРег(КопияСтроки);
			
			Если Найти(НрегКопияСтроки,"=") > 0 Тогда
				//значит это передача параметров во вложенный сценарий
				Если Найти(СтрТаблицаСтрок.СтрокаСокр, """") = 0
					И Найти(СтрТаблицаСтрок.СтрокаСокр, "'") = 0
					И Найти(СтрТаблицаСтрок.СтрокаСокр, "[") = 0 Тогда
					
					СтрТаблицаСтрок.Оператор = ОператорПрисвоениеВозвращаемогоПараметра();
				Иначе	
					СтрТаблицаСтрок.Оператор = ОператорПередачаПараметров();
				КонецЕсли;	 
				
				Продолжить;
			ИначеЕсли Лев(НрегКопияСтроки, 8) = "возврат " Тогда
				//значит это передача параметров во вложенный сценарий
				Если Найти(НрегКопияСтроки, " как ") Тогда
					СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраССинонимом();
				Иначе	
					СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметра();
				КонецЕсли;	 
				
				Продолжить;
			ИначеЕсли Лев(НрегКопияСтроки, 7) = "return " Тогда
				//значит это передача параметров во вложенный сценарий
				Если Найти(НрегКопияСтроки, " as ") Тогда
					СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраССинонимомEng();
				Иначе	
					СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраEng();
				КонецЕсли;	 
				
				Продолжить;
			КонецЕсли;	 
			
			СтруктураОшибки = Новый Структура;
			СтруктураОшибки.Вставить("НомерСтрокиТекстаСценария",СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
			СтруктураОшибки.Вставить("СтрокаОригинал",СтрТаблицаСтрок.СтрокаОригинал);
			
			ТекстОшибки = СтрШаблон(НСтр(
			   "ru = 'Строка №%1. Не найдено ключевое слово в начале строки. <%2>'"),
			   СтрТаблицаСтрок.НомерСтрокиТекстаСценария,
			   СтрТаблицаСтрок.СтрокаОригинал);
																							  
			СтруктураОшибки.Вставить("ТекстОшибки",ТекстОшибки);
			
			МассивОшибок.Добавить(СтруктураОшибки);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

Функция ВызватьИсключениеОшибкаСтекВызова(ТекЭлемент,Сценарий,НомерСтрокиТекстаСценария);
	Если ТекЭлемент.ТипЭлемента = ТипЭлементаНачалоУсловия() Тогда
		ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Сценарий: <%1>.
					|Не найден оператор закрывающий условие.
					|Строка №%2.'"),
					Сценарий, НомерСтрокиТекстаСценария);
	ИначеЕсли ТекЭлемент.ТипЭлемента = ТипЭлементаНачалоУсловияПрепроцессор() Тогда
		ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Сценарий: <%1>.
					|Не найден оператор закрывающий условие препроцессора.
					|Строка №%2.'"),
					Сценарий, НомерСтрокиТекстаСценария);
	ИначеЕсли ТекЭлемент.ТипЭлемента = ТипЭлементаНачалоЦикла() Тогда
		ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Сценарий: <%1>.
					|Не найден оператор закрывающий цикл.
					|Строка №%2.'"),
					Сценарий, НомерСтрокиТекстаСценария);
	Иначе				
		ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Сценарий: <%1>.
					|Не найден оператор закрывающий %2.
					|Строка №%3.'"),
					Сценарий, ТекЭлемент.ТипЭлемента, НомерСтрокиТекстаСценария);
	КонецЕсли;	 
КонецФункции	 

Процедура РассчетСнипетовДляИзмененныхСценариев(СтруктураПараметров, ТаблицаШаблоновСценариев)

	Для Каждого ТекДанныеСценария Из СтруктураПараметров.ДанныеРанееИзмененныхСценариев.ИзмененныеUID Цикл
		Снипет = "И " + ТекДанныеСценария.Имя;
		СнипетПоСтроке(Снипет);
		СнипетНРег = НРег(Снипет);
		СтруктураПараметров.ДанныеСценариевGit.Снипеты.Вставить(СнипетНРег, ТекДанныеСценария.UID);
		
		СтрокаТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев.Найти(ТекДанныеСценария.UID,"UID");
		Если СтрокаТаблицаШаблоновСценариев <> Неопределено Тогда
			ТаблицаШаблоновСценариев.Удалить(СтрокаТаблицаШаблоновСценариев);
		КонецЕсли;	
		
		СтрокаТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев.Найти(СнипетНРег,"СнипетНРег");
		Если СтрокаТаблицаШаблоновСценариев = Неопределено Тогда
			СтрокаТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев.Добавить();
			СтрокаТаблицаШаблоновСценариев.Снипет = Снипет;
			СтрокаТаблицаШаблоновСценариев.СнипетНРег = СнипетНРег;
			СтрокаТаблицаШаблоновСценариев.UID = ТекДанныеСценария.UID;
			СтрокаТаблицаШаблоновСценариев.Наименование = ТекДанныеСценария.Имя;
			СтрокаТаблицаШаблоновСценариев.ЧтениеИзТекста = Ложь;
		КонецЕсли;	
		
	КонецЦикла;	  
	
	СтруктураПараметров.ДанныеРанееИзмененныхСценариев.Вставить("БылиРассчитаныСнипетыИзмененныхСценариев", Истина);
	
КонецПроцедуры


Функция ТаблицаСтрокВДеревоСхемы(ТаблицаСтрок,ДеревоСхемы,ТаблицаШаблоновСценариев,Сценарий,
	    СтруктураПараметров,КешПараметровСтроки)
	ТекРодитель = ДеревоСхемы;
	
	Если СтруктураПараметров.Свойство("ДанныеРанееИзмененныхСценариев")
		И ТипЗнч(СтруктураПараметров.ДанныеРанееИзмененныхСценариев) = Тип("Структура")
		И НЕ СтруктураПараметров.ДанныеРанееИзмененныхСценариев.Свойство("БылиРассчитаныСнипетыИзмененныхСценариев")
		И СтруктураПараметров.ДанныеРанееИзмененныхСценариев.ЕстьИзменения
		Тогда
			РассчетСнипетовДляИзмененныхСценариев(СтруктураПараметров, ТаблицаШаблоновСценариев);
	КонецЕсли;		                	
	
	ТекЭлемент                      = ТекРодитель.Строки.Добавить();
	ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаСтарт();
	ТекЭлемент.ТипЭлемента          = ТипЭлементаНачалоСхемы();
	ТекЭлемент.ИдСтрокиТаблицаСтрок = -10;
	
	МассивУсловий = Новый Массив;
	МассивПопытка = Новый Массив;
	
	Комментарии   = Новый Массив;
	Теги          = Новый Массив;
	ИдетЗаполнениеЗаголовка = Ложь;
	
	ИдСтрокиТаблицаСтрок = -1;
	
	Если СтруктураПараметров.ЧтениеИзТекста  Тогда
		ДанныеСценариев = СтруктураПараметров.СтруктураПараметров.ДанныеСценариев;
		СтрокаДанныеСценариев = ДанныеСценариев.Найти(СтруктураПараметров.СтруктураПараметров.UIDСценария,"UID");
		ИзменяемыеПараметрыСценария = СтрокаДанныеСценариев.ПараметрыСценария.ВыгрузитьКолонку("Имя");
	ИначеЕсли Сценарий = Неопределено Тогда
		ИзменяемыеПараметрыСценария = Новый Массив;
	ИначеЕсли СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
		ИзменяемыеПараметрыСценария = Новый Массив;
		Если НЕ СтруктураПараметров.Свойство("ПрочитанныеДанныеСценария") Тогда
			ДанныеСценарияИзВременныхДанных = ДанныеСценарияИзВременныхДанных(СтруктураПараметров, СтруктураПараметров.UIDСценария);
			Если ДанныеСценарияИзВременныхДанных <> Неопределено Тогда
				Для Каждого Элем Из ДанныеСценарияИзВременныхДанных["ПараметрыСценария"] Цикл
					ИзменяемыеПараметрыСценария.Добавить(Элем["Имя"]);
				КонецЦикла;	 
			Иначе	
				Для Каждого Элем Из СтруктураПараметров.ТекущиеПараметрыВходящие Цикл
					ИзменяемыеПараметрыСценария.Добавить(Элем.Имя);
				КонецЦикла;	 
			КонецЕсли;	 
		Иначе	
			ИзменяемыеПараметрыСценария =
				СтруктураПараметров.ПрочитанныеДанныеСценария.ПараметрыСценария.ВыгрузитьКолонку("Имя");
		КонецЕсли;	 
		
	Иначе	
		ИзменяемыеПараметрыСценария = Сценарий.ПараметрыВходящие.ВыгрузитьКолонку("Имя");
	КонецЕсли;	 
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ТаблицаСтрок",ТаблицаСтрок);
	ПараметрыОбработки.Вставить("Комментарии",Комментарии);
	ПараметрыОбработки.Вставить("Теги",Теги);
	ПараметрыОбработки.Вставить("МассивУсловий",МассивУсловий);
	ПараметрыОбработки.Вставить("МассивПопытка",МассивПопытка);
	
	ТекущаяСтрокаВложенногоСценария = Неопределено;
	ОбрабатываласьЯвнаяПередачаПараметров = Ложь;
	ПередчаПараметраВПодсценарийТаблица = Ложь;
	СтруктураПараметраПередчаПараметраВПодсценарийТаблица = Неопределено;
	
	ОператорНачалоУсловияПрепроцессор = Новый Массив;
	ОператорОкончанияУсловияПрепроцессор = Новый Массив;
	ОператорНачалоУсловия = Новый Массив;
	ОператорОкончанияУсловия = Новый Массив;
	ОператорНачалоЦикла = Новый Массив;
	ОператорОкончанияЦикла = Новый Массив;
	ОператорНачалоПопытка = Новый Массив;
	ОператорОкончаниеПопытка = Новый Массив;
	СтекВызоваОператоров = Новый Массив;
	
	Если НЕ СтруктураПараметров.Свойство("УровеньВложенностиПодсценариев") Тогда
		СтруктураПараметров.Вставить("УровеньВложенностиПодсценариев", 0);
	КонецЕсли;	 
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		ИдСтрокиТаблицаСтрок = ИдСтрокиТаблицаСтрок + 1;
		
		Если СтрТаблицаСтрок.СтрокаСокр = "" И НЕ ЗначениеЗаполнено(СтрТаблицаСтрок.Оператор) Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки,Истина);
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаПустаяСтрока();
		ИначеЕсли СтрТаблицаСтрок.НачатьГруппыСначала Тогда
			ТекРодитель = ДеревоСхемы;
		ИначеЕсли СтрТаблицаСтрок.ГруппаШаговНачалась и (СокрЛП(СтрТаблицаСтрок.Оператор) = "") Тогда
			ТекРодитель = РодительПоИдРодительскойГруппы(ТекРодитель,ДеревоСхемы,СтрТаблицаСтрок,МассивУсловий);
			
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки,Истина);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаГруппаШагов();
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКомментарий() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаОригинал;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаКомментарий();
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорТаблица() Тогда
			Если ПередчаПараметраВПодсценарийТаблица Тогда
				ЗначениеПараметра = СтруктураПараметраПередчаПараметраВПодсценарийТаблица.ЗначениеПараметра;
				ЗначениеПараметра.Добавить(СтрТаблицаСтрок.СтрокаСокр);
				
				ЗаполнитьПараметрыДляДанногоЭлемента(СтрТаблицаСтрок.СтрокаСокр,ТекЭлемент,ИзменяемыеПараметрыСценария,Ложь,
			                                     КешПараметровСтроки);
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("ОбработаннаяСтрокаПараметров",ТекЭлемент.ОбработаннаяСтрокаПараметров);
				ДанныеСтроки.Вставить("Параметры",ТекЭлемент.Параметры);
				СтруктураПараметраПередчаПараметраВПодсценарийТаблица.ЗначениеПараметраПодстановкаЗначений.Добавить(ДанныеСтроки);
				
			Иначе	
				ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
				СтрТаблицаСтрок,ПараметрыОбработки);
				
				ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
				ТекЭлемент.ТипЭлемента          = ТипЭлементаТаблица();
			
				ЗаполнитьПараметрыДляДанногоЭлемента(СтрТаблицаСтрок.СтрокаСокр,ТекЭлемент,ИзменяемыеПараметрыСценария,Ложь,
			                                     КешПараметровСтроки);
			КонецЕсли;	 
												 
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорЗаголовок() Тогда
			ИдетЗаполнениеЗаголовка = Истина;
			ТекРодитель = ДеревоСхемы;
			
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаЗаголовок();
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонтекст() Тогда
			ТекРодитель = ДеревоСхемы;
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаКонтекст();
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
			ИдетЗаполнениеЗаголовка = Ложь;
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорСценарий() Тогда
			МассивУсловий.Очистить();
			МассивПопытка.Очистить();
			
			ТекРодитель = ДеревоСхемы;
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаСценарий();
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
			ИдетЗаполнениеЗаголовка = Ложь;
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорИсключение()
			или СтрТаблицаСтрок.Оператор = ОператорИсключениеEng()
			Тогда
			
			Если МассивУсловий.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверно используется Попытка/Исключение: %1'"),
																						  СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
																					  
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			ТекРодитель = МассивУсловий[МассивУсловий.Количество()-1];
			
			ТекЭлемент = ТекРодитель.Строки.Добавить();
				
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			Если СтрТаблицаСтрок.Оператор = ОператорИсключение() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаИсключение();
				ТекЭлемент.ОписаниеЭлемента = ОписаниеЭлементаИсключение();
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорИсключениеEng() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаИсключениеEng();
				ТекЭлемент.ОписаниеЭлемента = ОписаниеЭлементаИсключениеEng();
			КонецЕсли;	  
			
			ТекЭлемент.НомерСтрокиТекстаСценария = СтрТаблицаСтрок.НомерСтрокиТекстаСценария;
			
			ТекЭлемент.ИдСтрокиТаблицаСтрок = -1;
			
			ТекРодитель = ТекЭлемент; //создаём ещё один уровень дерева
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорУсловиеПрепроцессор() 
			     или  СтрТаблицаСтрок.Оператор = ОператорУсловие() 
			     или  СтрТаблицаСтрок.Оператор = ОператорУсловиеEng() 
			     или  СтрТаблицаСтрок.Оператор = ОператорЦикл() 
			     или  СтрТаблицаСтрок.Оператор = ОператорЦиклEng() 
			     или  СтрТаблицаСтрок.Оператор = ОператорПопытка() 
			     или  СтрТаблицаСтрок.Оператор = ОператорПопыткаEng() 
				 Тогда
				 
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			Если МассивУсловий.Количество() = 0 Тогда
				ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																			СтрТаблицаСтрок,ПараметрыОбработки);
			Иначе
				ТекУсловие                      = МассивУсловий[МассивУсловий.Количество()-1];
				НижняяСекцияУсловия             = ТекУсловие.Строки[ТекУсловие.Строки.Количество()-1];
				ТекущийРодительЭлемента         = РодительЭлемента(ТекЭлемент,ДеревоСхемы,СтрТаблицаСтрок,ТаблицаСтрок,МассивУсловий);
				
				Если ПервыйЭлементДереваПодчиненВторому(ТекущийРодительЭлемента,НижняяСекцияУсловия) Тогда
					ТекЭлемент                  = НовыйЭлементДерева(ТекущийРодительЭлемента,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																			СтрТаблицаСтрок,ПараметрыОбработки,Истина);
				Иначе	
					ТекЭлемент                  = НовыйЭлементДерева(НижняяСекцияУсловия,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																			СтрТаблицаСтрок,ПараметрыОбработки,Истина);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СтрТаблицаСтрок.Оператор = ОператорУсловиеПрепроцессор() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаУсловиеПрепроцессор();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаУсловиеПрепроцессор();
				ОператорНачалоУсловияПрепроцессор.Добавить(ТекЭлемент);
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорУсловие() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаУсловие();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаУсловие();
				ОператорНачалоУсловия.Добавить(ТекЭлемент);
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорУсловиеEng() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаУсловиеEng();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаУсловиеEng();
				ОператорНачалоУсловия.Добавить(ТекЭлемент);
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорЦикл() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаЦикл();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаЦикл();
				ОператорНачалоЦикла.Добавить(ТекЭлемент);
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорЦиклEng() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаЦиклEng();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаЦиклEng();
				ОператорНачалоЦикла.Добавить(ТекЭлемент);
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПопытка() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаПопытка();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаПопытка();
				ОператорНачалоПопытка.Добавить(ТекЭлемент);
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПопыткаEng() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаПопыткаEng();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаПопыткаEng();
				ОператорНачалоПопытка.Добавить(ТекЭлемент);
			КонецЕсли;	 
			
			СтекВызоваОператоров.Добавить(ТекЭлемент);
			
			ТекРодитель = ТекЭлемент; //создаём ещё один уровень дерева
			
			МассивУсловий.Добавить(ТекЭлемент);
			
			//добавляем специальный элемент, чтобы дерево выглядело логично и ветки условия были на одном уровне
			ТекЭлемент                      = ТекРодитель.Строки.Добавить(); 
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			
			ТекЭлемент.НомерСтрокиТекстаСценария = СтрТаблицаСтрок.НомерСтрокиТекстаСценария;
			
			Если СтрТаблицаСтрок.Оператор = ОператорУсловиеПрепроцессор() Тогда
				ТекЭлемент.ТипЭлемента         = ТипЭлементаНачалоУсловияПрепроцессор();
				ТекЭлемент.ЗначениеУсловия      = СтрТаблицаСтрок.ПараметрыОператора.ЗначениеУсловия;
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорУсловие() Тогда
				ТекЭлемент.ТипЭлемента         = ТипЭлементаНачалоУсловия();
				ТекЭлемент.ЗначениеУсловия      = СтрТаблицаСтрок.ПараметрыОператора.ЗначениеУсловия;
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорУсловиеEng() Тогда
				ТекЭлемент.ТипЭлемента         = ТипЭлементаНачалоУсловияEng();
				ТекЭлемент.ЗначениеУсловия      = СтрТаблицаСтрок.ПараметрыОператора.ЗначениеУсловия;
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорЦикл() Тогда
				ТекЭлемент.ТипЭлемента         = ТипЭлементаНачалоЦикла();
				ТекЭлемент.ЗначениеУсловия      = СтрТаблицаСтрок.ПараметрыОператора.Шаг;
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорЦиклEng() Тогда
				ТекЭлемент.ТипЭлемента         = ТипЭлементаНачалоЦиклаEng();
				ТекЭлемент.ЗначениеУсловия      = СтрТаблицаСтрок.ПараметрыОператора.Шаг;
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПопытка() Тогда
				ТекЭлемент.ТипЭлемента         = ТипЭлементаНачалоПопытка();
				ТекЭлемент.ЗначениеУсловия      = "";
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПопыткаEng() Тогда
				ТекЭлемент.ТипЭлемента         = ТипЭлементаНачалоПопыткаEng();
				ТекЭлемент.ЗначениеУсловия      = "";
			КонецЕсли;	 
			
			ТекЭлемент.ИдСтрокиТаблицаСтрок = -1;
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
			ЗаполнитьПараметрыДляДанногоЭлемента(ТекЭлемент.ЗначениеУсловия,ТекЭлемент,ИзменяемыеПараметрыСценария,Истина,
			                            КешПараметровСтроки);
			
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорИначеЕслиПрепроцессор() Тогда
			Если МассивУсловий.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверно используется ИначеЕсли: %1'"),
																						  СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
																					  
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			ТекРодитель                     = МассивУсловий[МассивУсловий.Количество()-1];
			
			ТекЭлемент                      = ТекРодитель.Строки.Добавить(); //считается, что перед этим ранее была строка Если...Тогда
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаИначеЕслиПрепроцессор();
			ТекЭлемент.ЗначениеУсловия      = СтрТаблицаСтрок.ПараметрыОператора.ЗначениеУсловия;
			ТекЭлемент.ИдСтрокиТаблицаСтрок = -1;
			ТекЭлемент.НомерСтрокиТекстаСценария = СтрТаблицаСтрок.НомерСтрокиТекстаСценария;
			
			ЗаполнитьПараметрыДляДанногоЭлемента(ТекЭлемент.ЗначениеУсловия,ТекЭлемент,ИзменяемыеПараметрыСценария,Истина,
			                             КешПараметровСтроки);
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорИначеПрепроцессор() Тогда
			Если МассивУсловий.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверно используется Иначе: %1'"),
																						  СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
			
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			ТекРодитель                     = МассивУсловий[МассивУсловий.Количество()-1];
			
			ТекЭлемент                      = ТекРодитель.Строки.Добавить(); //считается, что перед этим ранее была строка Если...Тогда
			ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаИначеПрепроцессор();
			ТекЭлемент.ТипЭлемента          = ТипЭлементаИначеПрепроцессор();
			ТекЭлемент.ИдСтрокиТаблицаСтрок = -1;
			ТекЭлемент.НомерСтрокиТекстаСценария = СтрТаблицаСтрок.НомерСтрокиТекстаСценария;
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорИначеЕсли() или СтрТаблицаСтрок.Оператор = ОператорИначеЕслиEng() Тогда
			Если МассивУсловий.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверно используется ИначеЕсли: %1'"),
																						  СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
			
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			ТекРодитель                     = МассивУсловий[МассивУсловий.Количество()-1];
			
			ТекЭлемент                      = ТекРодитель.Строки.Добавить(); //считается, что перед этим ранее была строка Если...Тогда
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			Если СтрТаблицаСтрок.Оператор = ОператорИначеЕсли() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаИначеЕсли();
			Иначе	
				ТекЭлемент.ТипЭлемента          = ТипЭлементаИначеЕслиEng();
			КонецЕсли;	 
			ТекЭлемент.ЗначениеУсловия      = СтрТаблицаСтрок.ПараметрыОператора.ЗначениеУсловия;
			ТекЭлемент.ИдСтрокиТаблицаСтрок = -1;
			ТекЭлемент.НомерСтрокиТекстаСценария = СтрТаблицаСтрок.НомерСтрокиТекстаСценария;
			
			ЗаполнитьПараметрыДляДанногоЭлемента(ТекЭлемент.ЗначениеУсловия,ТекЭлемент,ИзменяемыеПараметрыСценария,Истина,
			                             КешПараметровСтроки);
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорИначе() или СтрТаблицаСтрок.Оператор = ОператорИначеEng() Тогда
			Если МассивУсловий.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверно используется Иначе: %1'"),
																						  СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
			
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			ТекРодитель                     = МассивУсловий[МассивУсловий.Количество()-1];
			
			ТекЭлемент                      = ТекРодитель.Строки.Добавить(); //считается, что перед этим ранее была строка Если...Тогда
			Если СтрТаблицаСтрок.Оператор = ОператорИначе() Тогда
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаИначе();
				ТекЭлемент.ТипЭлемента          = ТипЭлементаИначе();
			Иначе	
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаИначеEng();
				ТекЭлемент.ТипЭлемента          = ТипЭлементаИначеEng();
			КонецЕсли;	 
			ТекЭлемент.ИдСтрокиТаблицаСтрок = -1;
			ТекЭлемент.НомерСтрокиТекстаСценария = СтрТаблицаСтрок.НомерСтрокиТекстаСценария;
			
			ТекРодитель                     = ТекЭлемент; //создаём ещё один уровень дерева
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонецЕслиПрепроцессор()
			      или СтрТаблицаСтрок.Оператор = ОператорКонецЕсли()
			      или СтрТаблицаСтрок.Оператор = ОператорКонецЕслиEng()
			      или СтрТаблицаСтрок.Оператор = ОператорКонецЦикла()
			      или СтрТаблицаСтрок.Оператор = ОператорКонецЦиклаEng()
			      или СтрТаблицаСтрок.Оператор = ОператорКонецПопытки()
			      или СтрТаблицаСтрок.Оператор = ОператорКонецПопыткиEng()
				  Тогда
			Если МассивУсловий.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(НСтр
				("ru = 'Ошибка в шаге: %1. Строка №%2. Не найдено условие.'"),
				 СтрТаблицаСтрок.СтрокаСокр,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
			КонецЕсли;	
			
			Если СтекВызоваОператоров.Количество() = 0 Тогда
					ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Сценарий: <%1>.
					|Не найден закрывающий оператор.
					|Строка №%2.'"),
					Сценарий, СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
			КонецЕсли;	 
				
			ВерхнийЭлементСтека = СтекВызоваОператоров[СтекВызоваОператоров.Количество()-1];	
			
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			ТекРодитель                     = МассивУсловий[МассивУсловий.Количество()-1];
			
			ТекЭлемент                      = ТекРодитель.Строки.Добавить(); //считается, что перед этим ранее были операторные скобки
			Если СтрТаблицаСтрок.Оператор = ОператорКонецЕслиПрепроцессор() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаКонецЕслиПрепроцессор();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаКонецЕслиПрепроцессор();
				ОператорОкончанияУсловияПрепроцессор.Добавить(ТекЭлемент);
				
				Если ВерхнийЭлементСтека.ТипЭлемента <> ТипЭлементаУсловиеПрепроцессор() Тогда
					ВызватьИсключениеОшибкаСтекВызова(ВерхнийЭлементСтека,Сценарий,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
				КонецЕсли;	 
				
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонецЕсли() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаКонецЕсли();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаКонецЕсли();
				ОператорОкончанияУсловия.Добавить(ТекЭлемент);
				
				Если ВерхнийЭлементСтека.ТипЭлемента <> ТипЭлементаУсловие() Тогда
					ВызватьИсключениеОшибкаСтекВызова(ВерхнийЭлементСтека,Сценарий,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонецЕслиEng() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаКонецЕслиEng();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаКонецЕслиEng();
				ОператорОкончанияУсловия.Добавить(ТекЭлемент);
				
				Если ВерхнийЭлементСтека.ТипЭлемента <> ТипЭлементаУсловиеEng() Тогда
					ВызватьИсключениеОшибкаСтекВызова(ВерхнийЭлементСтека,Сценарий,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонецЦикла() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаКонецЦикла();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаКонецЦикла();
				ОператорОкончанияЦикла.Добавить(ТекЭлемент);
				
				Если ВерхнийЭлементСтека.ТипЭлемента <> ТипЭлементаЦикл() Тогда
					ВызватьИсключениеОшибкаСтекВызова(ВерхнийЭлементСтека,Сценарий,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонецЦиклаEng() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаКонецЦиклаEng();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаКонецЦиклаEng();
				ОператорОкончанияЦикла.Добавить(ТекЭлемент);
				
				Если ВерхнийЭлементСтека.ТипЭлемента <> ТипЭлементаЦиклEng() Тогда
					ВызватьИсключениеОшибкаСтекВызова(ВерхнийЭлементСтека,Сценарий,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонецПопытки() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаКонецПопытки();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаКонецПопытки();
				ОператорОкончаниеПопытка.Добавить(ТекЭлемент);
				
				Если ВерхнийЭлементСтека.ТипЭлемента <> ТипЭлементаПопытка() Тогда
					ВызватьИсключениеОшибкаСтекВызова(ВерхнийЭлементСтека,Сценарий,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорКонецПопыткиEng() Тогда
				ТекЭлемент.ТипЭлемента          = ТипЭлементаКонецПопыткиEng();
				ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаКонецПопыткиEng();
				ОператорОкончаниеПопытка.Добавить(ТекЭлемент);
				
				Если ВерхнийЭлементСтека.ТипЭлемента <> ТипЭлементаПопыткаEng() Тогда
					ВызватьИсключениеОшибкаСтекВызова(ВерхнийЭлементСтека,Сценарий,СтрТаблицаСтрок.НомерСтрокиТекстаСценария);
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтекВызоваОператоров.Удалить(СтекВызоваОператоров.Количество()-1);
			
			ТекЭлемент.ИдСтрокиТаблицаСтрок = -1;
			
			МассивУсловий.Удалить(МассивУсловий.Количество()-1); //удаляем условие из списка
			
			СтрокаУсловия = ТаблицаСтрок[ТекРодитель.ИдСтрокиТаблицаСтрок];
			ТекРодитель   = РодительЭлемента(ТекРодитель,ДеревоСхемы,СтрокаУсловия,ТаблицаСтрок,МассивУсловий); //возвращаемся на один уровень назад
			
			Если МассивУсловий.Количество() > 0 Тогда
				ТекУсловие  = МассивУсловий[МассивУсловий.Количество()-1];
				Если ТекУсловие.НомерСтрокиТекстаСценария >= ТекРодитель.НомерСтрокиТекстаСценария Тогда
					Если ТекУсловие.Строки.Количество() > 0 Тогда
						ТекРодитель = ТекУсловие.Строки[ТекУсловие.Строки.Количество()-1];
					Иначе	
						ТекРодитель = ТекУсловие;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорБлочныйКомментарий() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаОригинал;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаБлочныйКомментарий();
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийНачало() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаБлочныйКомментарийНачало();
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийОкончание() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаБлочныйКомментарийОкончание();
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПараметрТаблица() Тогда
			ИмяПараметра = Сред(СтрТаблицаСтрок.СтрокаСокр,2);
			ИмяПараметра = СокрЛП(Лев(ИмяПараметра,СтрДлина(ИмяПараметра)-1));
			Если ТекЭлемент <> Неопределено Тогда
				
				Если ТекЭлемент.ТипЭлемента = ТипЭлементаШаблонСценария() Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Неверно происходит передача таблицы в подсценарий: %1.'"),
					    ТекЭлемент.ОписаниеЭлемента);
				КонецЕсли;	 
				
				Если ТекЭлемент.ДополнительныеСвойства = Неопределено Тогда
					ТекЭлемент.ДополнительныеСвойства = Новый Структура;
				КонецЕсли;	 
				
				Если НЕ ТекЭлемент.ДополнительныеСвойства.Свойство("ПараметрыСТипомТаблицы") Тогда
					ТекЭлемент.ДополнительныеСвойства.Вставить("ПараметрыСТипомТаблицы",Новый Массив);
				КонецЕсли;	 
				
				ТекЭлемент.ДополнительныеСвойства.ПараметрыСТипомТаблицы.Добавить(ИмяПараметра);
			КонецЕсли;	 
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПередачаПараметров()
			ИЛИ СтрТаблицаСтрок.Оператор = ОператорПрисвоениеВозвращаемогоПараметра()
			ИЛИ СтрТаблицаСтрок.Оператор = ОператорПрисвоениеВозвращаемогоПараметраEng() Тогда
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			Если СтруктураПараметров.Свойство("ФорматироватьТолькоПервыйУровеньПодсценариев")
				И СтруктураПараметров.ФорматироватьТолькоПервыйУровеньПодсценариев
				И СтруктураПараметров.УровеньВложенностиПодсценариев = 1 Тогда
					Продолжить;
			КонецЕсли;	 
			
			Если ТекущаяСтрокаВложенногоСценария = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Сценарий <%1>.
				|Строка №%2
				|Неверно происходит передача параметра : %3.
				|Не найден вложенный сценарий, в который происходит передача параметра.'"),
				  Сценарий, СтрТаблицаСтрок.НомерСтрокиТекстаСценария,
				  СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
			
			СтрокаПараметра = СтрТаблицаСтрок.СтрокаСокр;
			
			Поз = Найти(СтрокаПараметра,"=");
			Если Поз = 0 Тогда
				ВызватьИсключение СтрШаблон(
			       НСтр("ru = 'Неверно происходит передача параметра : %1'"),СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
			
			ИмяПараметра            = СокрЛП(Лев(СтрокаПараметра,Поз-1));
			СтрокаЗначениеПараметра = СокрЛП(Сред(СтрокаПараметра,Поз+1));
			Если СтрокаЗначениеПараметра = "" Тогда
				//Значит идёт передача таблицы. Таблица идёт в следующих строках.
				СтруктураПараметра = СтруктураПараметра();
				СтруктураПараметра.Вставить("ЗначениеПараметра",Новый Массив);
				СтруктураПараметра.Вставить("ЗначениеПараметраПодстановкаЗначений",Новый Массив);
				СтруктураПараметра.Вставить("Символ",Неопределено);
				СтруктураПараметра.Вставить("Тип",ТипПараметра("Таблица"));
				СтруктураПараметра.Вставить("Вид","");
				СтруктураПараметра.Вставить("ПереданСнизу",Истина);
				СтруктураПараметра.Вставить("ИмяПараметра",ИмяПараметра);
				СтруктураПараметра.Вставить("ИзменяемыйПараметр",Ложь);
				СтруктураПараметра.Вставить("НомерПараметра",ТекущаяСтрокаВложенногоСценария.Параметры.Количество()+1);
				СтруктураПараметра.Вставить("НомерПараметраВСценарии",-1);
				
				ТекущаяСтрокаВложенногоСценария.Параметры.Добавить(СтруктураПараметра);
				
				ПередчаПараметраВПодсценарийТаблица = Истина;
				СтруктураПараметраПередчаПараметраВПодсценарийТаблица = СтруктураПараметра;
				
				ТекЭлемент                      = ТекущаяСтрокаВложенногоСценария.Строки.Добавить();
				ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
				ТекЭлемент.ТипЭлемента          = ТипЭлементаПередачаПараметров();
				
				ПараметрыДаннойСтроки = Новый Массив;
				ПараметрыДаннойСтроки.Добавить(СтруктураПараметра);
				ТекЭлемент.Параметры = ПараметрыДаннойСтроки;
				ТекЭлемент.ОбработаннаяСтрокаПараметров = ИмяПараметра + " = " + СтрокаЗначениеПараметра;
				Если ТекЭлемент.ДополнительныеСвойства = Неопределено Тогда
					ТекЭлемент.ДополнительныеСвойства = Новый Структура;
				КонецЕсли;	 
				
				ТекЭлемент.ДополнительныеСвойства.Вставить("ПередачаТаблицы",Истина);
				ТекЭлемент.ДополнительныеСвойства.Вставить("ИмяПараметра",ИмяПараметра);
				
				ОбрабатываласьЯвнаяПередачаПараметров = Истина;
				
				Продолжить;
			КонецЕсли;
			
			ПараметрыПодсценария = ТекущаяСтрокаВложенногоСценария.ДополнительныеСвойства.ПараметрыВходящие;
			ИмяПараметраНРег = НРег(ИмяПараметра);
			Если ПараметрыПодсценария.Найти(ИмяПараметраНРег) = Неопределено Тогда
				Если ИмяПараметраНРег = "исполнитель" Тогда
					ПараметрыПодсценария.Добавить("Исполнитель");
				ИначеЕсли ИмяПараметраНРег = "executor" Тогда
					ПараметрыПодсценария.Добавить("Executor");
				Иначе	
					ВызватьИсключение СтрШаблон(НСтр("ru = 'В подсценарии <%1> нет параметра с именем <%2>.'"),
					      ТекущаяСтрокаВложенногоСценария.ОписаниеЭлемента,ИмяПараметра);
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если Не ОбрабатываласьЯвнаяПередачаПараметров Тогда
				ОбрабатываласьЯвнаяПередачаПараметров = Истина;
				//т.к. могли быть загружены данные из кеш, а при явной передаче параметров это не надо
				ТекущаяСтрокаВложенногоСценария.Параметры.Очистить();
				
				//т.к. идёт явная передача параметров не нужно делать подстановку значений в строку вызова подсценария
				ТекЭлемент.ОбработаннаяСтрокаПараметров = ТекЭлемент.ОписаниеЭлемента;
			КонецЕсли;	 
			
			ТекЭлемент                      = ТекущаяСтрокаВложенногоСценария.Строки.Добавить();
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			СтруктураПараметра = СтруктураПараметра();
			
			Если СтрТаблицаСтрок.Оператор = ОператорПередачаПараметров() Тогда
				ПараметрыВСтроке = ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(СтрокаЗначениеПараметра);
				
				Если ПараметрыВСтроке.Количество() <> 1 Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'В строке %1 ожидался 1 параметр, а найдено %2.'"),
					СтрТаблицаСтрок.СтрокаСокр,ПараметрыВСтроке.Количество());
				КонецЕсли;	 
				
				ДанныеПараметра = ПараметрыВСтроке[0];
				
				СтруктураПараметра.Вставить("ЗначениеПараметра",ДанныеПараметра.ЗначениеПараметра);
				СтруктураПараметра.Вставить("Символ",ДанныеПараметра.Символ);
				СтруктураПараметра.Вставить("Тип",ДанныеПараметра.Тип);
				СтруктураПараметра.Вставить("Вид",ДанныеПараметра.Вид);
				Если ДанныеПараметра.Вид = "КвадратныеСкобки" Тогда
					СтруктураПараметра.Вставить("НомерПараметраВСценарии",
					   НомерПараметраВСценарии(ИзменяемыеПараметрыСценария,ДанныеПараметра.ЗначениеПараметра));
				Иначе	   
					СтруктураПараметра.Вставить("НомерПараметраВСценарии", -1);
				КонецЕсли;	 
				СтруктураПараметра.Вставить("ИзменяемыйПараметр",ДанныеПараметра.ИзменяемыйПараметр);
				ТекЭлемент.ТипЭлемента = ТипЭлементаПередачаПараметров();
				   
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПрисвоениеВозвращаемогоПараметра() Тогда
				СтруктураПараметра.Вставить("ЗначениеПараметра", СтрокаЗначениеПараметра);
				СтруктураПараметра.Вставить("Символ", "'");
				СтруктураПараметра.Вставить("Тип", ТипПараметра("Строка"));
				СтруктураПараметра.Вставить("Вид", "Апострофы");
				СтруктураПараметра.Вставить("НомерПараметраВСценарии", -1);
				СтруктураПараметра.Вставить("ИзменяемыйПараметр", Ложь);
				СтруктураПараметра.Вставить("ПрисвоениеВозвращаемогоПараметра", Истина);
				ТекЭлемент.ТипЭлемента = ТипЭлементаПрисвоениеВозвращаемогоПараметра();
				
				Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
					СтруктураПараметра.Вставить("ИмяСценария", Сценарий);
				ИначеЕсли НЕ СтруктураПараметров.ЧтениеИзТекста Тогда
					СтруктураПараметра.Вставить("ИмяСценария", ИмяСценарияИзКеш(Сценарий, СтруктураПараметров));
				Иначе	
					СтруктураПараметра.Вставить("ИмяСценария", Сценарий);
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПрисвоениеВозвращаемогоПараметраEng() Тогда
				СтруктураПараметра.Вставить("ЗначениеПараметра", СтрокаЗначениеПараметра);
				СтруктураПараметра.Вставить("Символ", "'");
				СтруктураПараметра.Вставить("Тип", ТипПараметра("Строка"));
				СтруктураПараметра.Вставить("Вид", "Апострофы");
				СтруктураПараметра.Вставить("НомерПараметраВСценарии", -1);
				СтруктураПараметра.Вставить("ИзменяемыйПараметр", Ложь);
				СтруктураПараметра.Вставить("ПрисвоениеВозвращаемогоПараметра", Истина);
				ТекЭлемент.ТипЭлемента = ТипЭлементаПрисвоениеВозвращаемогоПараметраEng();
				
				Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
					СтруктураПараметра.Вставить("ИмяСценария", Сценарий);
				ИначеЕсли НЕ СтруктураПараметров.ЧтениеИзТекста Тогда
					СтруктураПараметра.Вставить("ИмяСценария", ИмяСценарияИзКеш(Сценарий, СтруктураПараметров));
				Иначе	
					СтруктураПараметра.Вставить("ИмяСценария", Сценарий);
				КонецЕсли;	 
			КонецЕсли;	 
			
			СтруктураПараметра.Вставить("ПереданСнизу",Истина);
			СтруктураПараметра.Вставить("ИмяПараметра",ИмяПараметра);
			СтруктураПараметра.Вставить("НомерПараметра",ТекущаяСтрокаВложенногоСценария.Параметры.Количество()+1);
			   
			ТекущаяСтрокаВложенногоСценария.Параметры.Добавить(СтруктураПараметра);
			
			
			ПараметрыДаннойСтроки = Новый Массив;
			ПараметрыДаннойСтроки.Добавить(СтруктураПараметра);
			ТекЭлемент.Параметры = ПараметрыДаннойСтроки;
			ТекЭлемент.ОбработаннаяСтрокаПараметров = ИмяПараметра + " = " + СтрокаЗначениеПараметра;
			
			Если ТекущаяСтрокаВложенногоСценария <> Неопределено Тогда
				ВыровнятьТекстПриПередачеВПодсценарий(ТекущаяСтрокаВложенногоСценария);
			КонецЕсли;	 																			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметра()
			ИЛИ СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраEng()
			ИЛИ СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраССинонимом()
			ИЛИ СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраССинонимомEng()
			Тогда
			
			Если СтруктураПараметров.Свойство("ФорматироватьТолькоПервыйУровеньПодсценариев")
				И СтруктураПараметров.ФорматироватьТолькоПервыйУровеньПодсценариев
				И СтруктураПараметров.УровеньВложенностиПодсценариев = 1 Тогда
					Продолжить;
			КонецЕсли;	 
				
			Если ТекущаяСтрокаВложенногоСценария = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Сценарий <%1>.
				|Строка №%2
				|Неверно происходит передача параметра : %3.
				|Не найден вложенный сценарий, в который происходит передача параметра.'"),
				  Сценарий, СтрТаблицаСтрок.НомерСтрокиТекстаСценария,
				  СтрТаблицаСтрок.СтрокаСокр);
			КонецЕсли;	 
			  
			ПараметрыПодсценария = ТекущаяСтрокаВложенногоСценария.ДополнительныеСвойства.ПараметрыВходящие;
			
			СтруктураПараметра = СтруктураПараметра();
			
			ТекЭлемент                      = ТекущаяСтрокаВложенногоСценария.Строки.Добавить();
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			
			Если СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметра() Тогда
				ИмяПараметра = СокрЛП(Сред(СтрТаблицаСтрок.СтрокаСокр, 8));	  
				СтруктураПараметра.Вставить("ВозвратЗначенияПараметра", Истина);
				СтруктураПараметра.Вставить("ИмяСценария", Истина);
				ТекЭлемент.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметра();
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраEng() Тогда
				ИмяПараметра = СокрЛП(Сред(СтрТаблицаСтрок.СтрокаСокр, 7));	  
				СтруктураПараметра.Вставить("ВозвратЗначенияПараметра", Истина);
				СтруктураПараметра.Вставить("ИмяСценария", Истина);
				ТекЭлемент.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметраEng();
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраССинонимом() Тогда
				Поз = Найти(СтрТаблицаСтрок.СтрокаСокр, " как ");
				Стр = Лев(СтрТаблицаСтрок.СтрокаСокр, Поз - 1);
				СтруктураПараметра.Вставить("СинонимВозвращаемогоЗначения", СокрЛП(Сред(СтрТаблицаСтрок.СтрокаСокр, Поз + 5)));
				ИмяПараметра = СокрЛП(Сред(Стр, 8));	  
				СтруктураПараметра.Вставить("ВозвратЗначенияПараметраССинонимом", Истина);
				ТекЭлемент.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметра();
			ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорВозвратЗначенияПараметраССинонимомEng() Тогда
				Поз = Найти(СтрТаблицаСтрок.СтрокаСокр, " as ");
				Стр = Лев(СтрТаблицаСтрок.СтрокаСокр, Поз - 1);
				СтруктураПараметра.Вставить("СинонимВозвращаемогоЗначения", СокрЛП(Сред(СтрТаблицаСтрок.СтрокаСокр, Поз + 4)));
				ИмяПараметра = СокрЛП(Сред(Стр, 8));	  
				СтруктураПараметра.Вставить("ВозвратЗначенияПараметраССинонимом", Истина);
				ТекЭлемент.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметраEng();
			КонецЕсли;	 
			
			Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
				СтруктураПараметра.Вставить("ИмяСценария", Сценарий);
			ИначеЕсли НЕ СтруктураПараметров.ЧтениеИзТекста Тогда
				СтруктураПараметра.Вставить("ИмяСценария", ИмяСценарияИзКеш(Сценарий, СтруктураПараметров));
			Иначе	
				СтруктураПараметра.Вставить("ИмяСценария", Сценарий);
			КонецЕсли;	 
			
			Если ПараметрыПодсценария.Найти(НРег(ИмяПараметра)) = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'В подсценарии %1 нет параметра с именем ""%2"".'"),
				      ТекущаяСтрокаВложенногоСценария.ОписаниеЭлемента,ИмяПараметра);
			КонецЕсли;	 
			
			СтруктураПараметра.Вставить("ЗначениеПараметра", Неопределено);
			СтруктураПараметра.Вставить("Символ", "'");
			СтруктураПараметра.Вставить("Тип", ТипПараметра("Строка"));
			СтруктураПараметра.Вставить("Вид", "Апострофы");
			СтруктураПараметра.Вставить("ПереданСнизу",Истина);
			СтруктураПараметра.Вставить("ИмяПараметра",ИмяПараметра);
			СтруктураПараметра.Вставить("ИзменяемыйПараметр", Ложь);
			СтруктураПараметра.Вставить("НомерПараметра",ТекущаяСтрокаВложенногоСценария.Параметры.Количество()+1);
			
			ТекущаяСтрокаВложенногоСценария.Параметры.Добавить(СтруктураПараметра);
			ОбрабатываласьЯвнаяПередачаПараметров = Истина;
			
			ПараметрыДаннойСтроки = Новый Массив;
			ПараметрыДаннойСтроки.Добавить(СтруктураПараметра);
			ТекЭлемент.Параметры = ПараметрыДаннойСтроки;
			ТекЭлемент.ОбработаннаяСтрокаПараметров = "Возврат " + ИмяПараметра;
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорТег() Тогда
			Теги.Добавить(СтрТаблицаСтрок.СтрокаСокр);
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорСтоп() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаСтоп();
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорМетка() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаМетка();
			ТекЭлемент.ИмяМетки             = СтрТаблицаСтрок.ПараметрыОператора.ИмяМетки;
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорПерейти() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипЭлементаПерейти();
			ТекЭлемент.ИмяМетки             = СтрТаблицаСтрок.ПараметрыОператора.ИмяМетки;
			
		ИначеЕсли СтрТаблицаСтрок.Оператор = ОператорМногострочнаяСтрока() Тогда
			ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																		СтрТаблицаСтрок,ПараметрыОбработки);
			ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
			ТекЭлемент.ТипЭлемента          = ТипМногострочнаяСтрока();
		Иначе
			СтрокаШаблона = Неопределено;
			ПередчаПараметраВПодсценарийТаблица = Ложь;
			
			Если НЕ ИдетЗаполнениеЗаголовка
				И ЭтоВложенныйСценарийШаблон(СтрТаблицаСтрок, ТаблицаШаблоновСценариев, СтрокаШаблона, СтруктураПараметров) Тогда
				
				НадоЗагружатьПодсценарий = Истина;
				Если СтруктураПараметров.УровеньВложенностиПодсценариев = 1 
					И СтруктураПараметров.Свойство("ФорматироватьТолькоПервыйУровеньПодсценариев")
					И СтруктураПараметров.ФорматироватьТолькоПервыйУровеньПодсценариев Тогда
						НадоЗагружатьПодсценарий = Ложь;
				КонецЕсли;	 
				
				Если НадоЗагружатьПодсценарий Тогда
					//надо загрузить данные из шаблона
					ТекЭлемент = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
					СтрТаблицаСтрок,ПараметрыОбработки);
					
					Если ТекущаяСтрокаВложенногоСценария <> Неопределено Тогда
						ВыровнятьТекстПриПередачеВПодсценарий(ТекущаяСтрокаВложенногоСценария);
					КонецЕсли;	 																			
					ТекущаяСтрокаВложенногоСценария = ТекЭлемент;
					
					ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
					ТекЭлемент.ТипЭлемента          = ТипЭлементаШаблонСценария();
					
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("ИспользоватьКеш",Ложь);
					ЗаполнитьПараметрыДляДанногоЭлемента(СтрТаблицаСтрок.СтрокаСокр,ТекЭлемент,ИзменяемыеПараметрыСценария,Ложь,
					КешПараметровСтроки,ДопПараметры);
					
					ОбрабатываласьЯвнаяПередачаПараметров = Ложь;
					
					Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
						СценарийДляЗагрузкиШаблона = Сценарий;
						Если НЕ СтруктураПараметров.Свойство("ЗащитаОтБесконечногоВызоваСценариев") Тогда
							СтруктураПараметров.Вставить("ЗащитаОтБесконечногоВызоваСценариев", Новый Соответствие);
						КонецЕсли;	 
						
						Если СтруктураПараметров.ЗащитаОтБесконечногоВызоваСценариев[СтрокаШаблона.UID] = Истина Тогда
							ВызватьИсключение СтрШаблон(
							       НСтр("ru = 'Зацикливание при вызове сценария: %1'"), Сценарий);
						КонецЕсли;	 
						
						СтруктураПараметров.ЗащитаОтБесконечногоВызоваСценариев.Вставить(СтрокаШаблона.UID, Истина);
					ИначеЕсли НЕ СтруктураПараметров.ЧтениеИзТекста Тогда
						СценарийДляЗагрузкиШаблона = Сценарий.Ссылка;
					Иначе	
						СценарийДляЗагрузкиШаблона = Сценарий;
					КонецЕсли;	 												
					
					СтруктураПараметров.УровеньВложенностиПодсценариев = СтруктураПараметров.УровеньВложенностиПодсценариев + 1;
					ЗагрузитьСценарийИзШаблона(СтрокаШаблона,ТекЭлемент,ТаблицаШаблоновСценариев,СценарийДляЗагрузкиШаблона,СтруктураПараметров);
					СтруктураПараметров.УровеньВложенностиПодсценариев = СтруктураПараметров.УровеньВложенностиПодсценариев - 1;
					
					Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
						СтруктураПараметров.ЗащитаОтБесконечногоВызоваСценариев.Вставить(СтрокаШаблона.UID, Ложь);
						ДанныеШаблона = СтруктураПараметров.ДанныеСценариевGit.UIDCценариев[СтрокаШаблона.UID];
						ДанныеСценария = СтруктураПараметров.ДанныеСценариевGit.UIDCценариев[СтруктураПараметров.UIDСценария];
						Если ДанныеШаблона <> Неопределено Тогда
							UIDФункцияСистемыШаблон = Неопределено;
							Если ДанныеШаблона.Свойство("UIDФункцияСистемы") Тогда
								UIDФункцияСистемыШаблон = ДанныеШаблона.UIDФункцияСистемы;
							КонецЕсли;	 
							РазрешеноИспользоватьВДругихФункциях = Истина;
							Если ДанныеШаблона.Свойство("РазрешеноИспользоватьВДругихФункциях") Тогда
								Если НРег(ДанныеШаблона.РазрешеноИспользоватьВДругихФункциях) = "нет" Тогда
									РазрешеноИспользоватьВДругихФункциях = Ложь;
								КонецЕсли;	 
							КонецЕсли;	 
							
							Если СтруктураПараметров.Свойство("ФункцияСистемы") Тогда
								Если ДанныеСценария <> Неопределено И ДанныеСценария.Свойство("UIDФункцияСистемы") Тогда
									UIDФункцияСистемы = ДанныеСценария.UIDФункцияСистемы;
								Иначе	
									UIDФункцияСистемы = Строка(СтруктураПараметров.ФункцияСистемы.УникальныйИдентификатор());
								КонецЕсли;	 
								
								КодСценария = "";
								Если СтруктураПараметров.Свойство("КодСценария") Тогда
									КодСценария = СтруктураПараметров.КодСценария;
								ИначеЕсли СтруктураПараметров.Свойство("КодСценарияGit") Тогда
									КодСценария = СтруктураПараметров.КодСценарияGit;
								КонецЕсли;	 
								
								Если НЕ (РазрешеноИспользоватьВДругихФункциях ИЛИ UIDФункцияСистемы = UIDФункцияСистемыШаблон) Тогда
									ВызватьИсключение СтрШаблон(НСтр("ru = 'Сценарий
										|<%1>, код <%2>
										|нельзя вызывать из сценария
										|<%3>, код <%4>.'"), ДанныеШаблона.ИмяСценария, ДанныеШаблона.Код, Сценарий, КодСценария);
								КонецЕсли;	 
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЕсли;	 
					
				КонецЕсли;	 
			Иначе	
				ТекущаяСтрокаВложенногоСценария = Неопределено;
				ТекЭлемент                      = НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,
																			СтрТаблицаСтрок,ПараметрыОбработки);
				ТекЭлемент.ОписаниеЭлемента     = СтрТаблицаСтрок.СтрокаСокр;
				
				Если ИдетЗаполнениеЗаголовка Тогда
					ТекЭлемент.ТипЭлемента                  = ТипЭлементаЭлементЗаголовка();
				Иначе	
					
					ТекЭлемент.ТипЭлемента                  = ТипЭлементаДействие();
					ЗаполнитьПараметрыДляДанногоЭлемента(СтрТаблицаСтрок.СтрокаСокр,ТекЭлемент,ИзменяемыеПараметрыСценария,Ложь,
					                                     КешПараметровСтроки);
														 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Если ОператорНачалоУсловия.Количество() <> ОператорОкончанияУсловия.Количество() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Сценарий <%1>.
				|Количество операторов открывающих условие <%2>
				|не совпадает с количеством операторов закрывающих условие <%3>.'"),
				  Сценарий, ОператорНачалоУсловия.Количество(), ОператорОкончанияУсловия.Количество());
	КонецЕсли;	 
	
	Если ОператорНачалоУсловияПрепроцессор.Количество() <> ОператорОкончанияУсловияПрепроцессор.Количество() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Сценарий <%1>.
				|Количество операторов открывающих условие препроцессора <%2>
				|не совпадает с количеством операторов закрывающих условие препроцессора <%3>.'"),
				  Сценарий, ОператорНачалоУсловияПрепроцессор.Количество(), ОператорОкончанияУсловияПрепроцессор.Количество());
	КонецЕсли;	 
	
	Если ОператорНачалоЦикла.Количество() <> ОператорОкончанияЦикла.Количество() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Сценарий <%1>.
				|Количество операторов открывающих цикл <%2>
				|не совпадает с количеством операторов закрывающих цикл <%3>.'"),
				  Сценарий, ОператорНачалоЦикла.Количество(), ОператорОкончанияЦикла.Количество());
	КонецЕсли;	 
	
	
	ТекЭлемент                      = ДеревоСхемы.Строки.Добавить();
	ТекЭлемент.ОписаниеЭлемента     = ОписаниеЭлементаСтоп();
	ТекЭлемент.ТипЭлемента          = ТипЭлементаОкончаниеСхемы();
	ИдСтрокиТаблицаСтрок            = ИдСтрокиТаблицаСтрок + 1;
	ТекЭлемент.ИдСтрокиТаблицаСтрок = ИдСтрокиТаблицаСтрок;
	Если Комментарии.Количество() > 0 Тогда
		ТекЭлемент.Комментарии = Комментарии;
	КонецЕсли;	 
	Если Теги.Количество() > 0 Тогда
		ТекЭлемент.Теги = Теги;
	КонецЕсли;	 
	
	ИдСтрокиДерева = 0;
	ДобавитьСлужебныеЭлементыДляГруппШагов(ДеревоСхемы);
	ПроставитьИдСтрокиИЗависимыеПараметрыДереваРекурсивно(ДеревоСхемы,ИдСтрокиДерева);
	
	Возврат ДеревоСхемы;
КонецФункции	

Функция ИмяСценарияИзКеш(Сценарий, СтруктураПараметров)
	Если НЕ СтруктураПараметров.Свойство("ИменаСценариев") Тогда
		СтруктураПараметров.Вставить("ИменаСценариев", Новый Соответствие);
	КонецЕсли;	 
	
	Значение = СтруктураПараметров.ИменаСценариев[Сценарий.Ссылка];
	Если Значение <> Неопределено Тогда
		Возврат Значение; 
	КонецЕсли;	 
	
	Значение = Сценарий.Наименование;
	СтруктураПараметров.ИменаСценариев.Вставить(Сценарий.Ссылка, Значение);
	Возврат Значение; 
	
КонецФункции	 

Процедура ВыровнятьТекстПриПередачеВПодсценарий(СтрокаШага)
	Если СтрокаШага.Параметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыПереданыСнизу = Ложь;
	Если СтрокаШага.Параметры[0].Свойство("ПереданСнизу") Тогда
		Если СтрокаШага.Параметры[0].ПереданСнизу Тогда
			ПараметрыПереданыСнизу = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Не ПараметрыПереданыСнизу  Тогда
		Возврат;
	КонецЕсли;	
	
	МассивСтрокОписаниеЭлемента = Новый Массив;
	МассивСтрокСтрокаПараметров = Новый Массив;
	Для Каждого ПодчиненнаяСтрока Из СтрокаШага.Строки Цикл
		Если ПодчиненнаяСтрока.ТипЭлемента <> ТипЭлементаПередачаПараметров() Тогда
			Продолжить;
		КонецЕсли;	 
		
		МассивСтрокОписаниеЭлемента.Добавить(ПодчиненнаяСтрока.ОписаниеЭлемента);
		МассивСтрокСтрокаПараметров.Добавить(ПодчиненнаяСтрока.ОбработаннаяСтрокаПараметров);
	КонецЦикла;	
	
	ВыровнятьМассивСтрокПоПервомуВхождениюСимвола(МассивСтрокОписаниеЭлемента,"=");
	ВыровнятьМассивСтрокПоПервомуВхождениюСимвола(МассивСтрокСтрокаПараметров,"=");
	
	Сч = -1;
	Для Каждого ПодчиненнаяСтрока Из СтрокаШага.Строки Цикл
		Если ПодчиненнаяСтрока.ТипЭлемента <> ТипЭлементаПередачаПараметров() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Сч = Сч + 1;
		ПодчиненнаяСтрока.ОписаниеЭлемента = МассивСтрокОписаниеЭлемента[Сч];
		ПодчиненнаяСтрока.ОбработаннаяСтрокаПараметров = МассивСтрокСтрокаПараметров[Сч];
	КонецЦикла;	
	
КонецПроцедуры

Процедура НайтиИзменяемыеПараметры(Стр,Параметры,ИзменяемыеПараметрыСценария)
	Символ        = "[";
	Если Найти(Стр,Символ) = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ЭкранироватьКвадратнрыеСкобки(Стр);
	
	Вид           = "КвадратныеСкобки";
	МассивСлов    = СтрРазделить(Стр,Символ,Истина);
	КолПараметров = 0;
	
	Ном = -1;
	Для Каждого Слово Из МассивСлов Цикл
		Ном = Ном + 1;
		
		Если Ном = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ПозицияЗакрывающейСкобки = Найти(Слово,"]");
		Если ПозицияЗакрывающейСкобки = 0 Тогда
			ВызватьИсключение СтрШаблон(
			    НСтр("ru = 'Неверно используется квадратная скобка в строке: %1'"),УбратьСлужебныеСимволы(Стр));
		КонецЕсли;	 
		
		ЗначениеПараметра = Лев(Слово,ПозицияЗакрывающейСкобки-1);
		Если ЗначениеПараметра = "" Тогда
			ВызватьИсключение СтрШаблон(
			    НСтр("ru = 'Не указано значение параметра в квадратных скобках в строке : %1'"),УбратьСлужебныеСимволы(Стр));
		КонецЕсли;	 
		
		ВтораяЧастьСлова = Сред(Слово,ПозицияЗакрывающейСкобки+1);
		
		ЗначениеПараметра = УбратьСлужебныеСимволы(ЗначениеПараметра);
		
		КолПараметров   = КолПараметров + 1;
		
		СтруктураПараметра = СтруктураПараметра();
		СтруктураПараметра.Вставить("ЗначениеПараметра",ЗначениеПараметра);
		СтруктураПараметра.Вставить("Символ",Символ);
		СтруктураПараметра.Вставить("Тип",ТипПараметра("Строка"));
		СтруктураПараметра.Вставить("Вид",Вид);
		СтруктураПараметра.Вставить("ИзменяемыйПараметр",Истина);
		СтруктураПараметра.Вставить("НомерПараметра",КолПараметров);
		СтруктураПараметра.Вставить("НомерПараметраВСценарии",
		           НомерПараметраВСценарии(ИзменяемыеПараметрыСценария,ЗначениеПараметра));
		
		МассивСлов[Ном] = "~ПараметрСтрока" + Вид + XMLСтрока(КолПараметров) + "~" + ВтораяЧастьСлова;
		
		Параметры.Добавить(СтруктураПараметра);
	КонецЦикла;	
	
	Стр = СтрСоединить(МассивСлов,"");
	ВернутьКвадратнрыеСкобки(Стр);
КонецПроцедуры

Процедура ЭкранироватьКвадратнрыеСкобки(Стр)
	Стр = СтрЗаменить(Стр,"\[","~ПредставлениеЛеваяКвадратнаяСкобка~");
	Стр = СтрЗаменить(Стр,"\]","~ПредставлениеПраваяКвадратнаяСкобка~");
КонецПроцедуры

Процедура ВернутьКвадратнрыеСкобки(Стр)
	Стр = СтрЗаменить(Стр,"~ПредставлениеЛеваяКвадратнаяСкобка~","\[");
	Стр = СтрЗаменить(Стр,"~ПредставлениеПраваяКвадратнаяСкобка~","\]");
КонецПроцедуры 

Процедура НайтиИзменяемыеПараметрыВПараметрах(Стр,Параметры,ИзменяемыеПараметрыСценария)
	
	Для Каждого ПараметрСценария Из Параметры Цикл
		ЗначениеПараметра = ПараметрСценария.ЗначениеПараметра;
		ЭкранироватьКвадратнрыеСкобки(ЗначениеПараметра);
		
		Если Найти(ЗначениеПараметра,"[") = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Нашли = Истина;
		
		Если ПараметрСценария.ВложенныеПараметры = Неопределено Тогда
			ПараметрСценария.ВложенныеПараметры = Новый Массив;
		КонецЕсли;	 
		
		ПараметрСценария.ЗначениеПараметраВложенное = ПараметрСценария.ЗначениеПараметра;
		
		ВложенныеПараметры = ПараметрСценария.ВложенныеПараметры;
		
		НайтиИзменяемыеПараметры(ПараметрСценария.ЗначениеПараметраВложенное,ВложенныеПараметры,ИзменяемыеПараметрыСценария);
		
	КонецЦикла;	
КонецПроцедуры

Процедура НайтиСтроковыеПараметрыПоСимволу(Стр,Параметры,Символ,Вид)
	МассивСлов    = СтрРазделить(Стр,Символ,Истина);
	КолПараметров = 0;
	
	ЭтоПараметр = Ложь;
	Ном = -1;
	Для Каждого Слово Из МассивСлов Цикл
		Ном = Ном + 1;
		Если ЭтоПараметр Тогда
			
			ЗначениеПараметра = УбратьСлужебныеСимволы(Слово);
			Если НЕ ЭтотПараметрЯвляетсяТолькоЗначением(ЗначениеПараметра) Тогда
				КолПараметров   = КолПараметров + 1;
				
				СтруктураПараметра = СтруктураПараметра();
				СтруктураПараметра.Вставить("ЗначениеПараметра",ЗначениеПараметра);
				СтруктураПараметра.Вставить("Символ",Символ);
				СтруктураПараметра.Вставить("Тип",ТипПараметра("Строка"));
				СтруктураПараметра.Вставить("Вид",Вид);
				СтруктураПараметра.Вставить("НомерПараметра",КолПараметров);
				
				МассивСлов[Ном] = "~Параметр" + "Строка" + Вид + XMLСтрока(КолПараметров) + "~";
				
				Параметры.Добавить(СтруктураПараметра);
			КонецЕсли;	 
		КонецЕсли;	 
		
		ЭтоПараметр = Не ЭтоПараметр;
	КонецЦикла;	
	
	Стр = СтрСоединить(МассивСлов,"");
КонецПроцедуры

Процедура НайтиПараметрыДаты(Стр,Параметры,КолПараметров = Неопределено)
	Массив = СтрРазделить(Стр,".");
	
	Если КолПараметров = Неопределено Тогда
		КолПараметров = 0;
	КонецЕсли;	 
	
	Для Ккк = 0 По Массив.Количество()-1-2 Цикл
		Элем1 = Прав(Массив[Ккк],2);
		Элем2 = Массив[Ккк+1];
		Элем3 = Лев(Массив[Ккк+2],4);
		Если СтрДлина(Элем3) < 4 Тогда
			Элем3 = Лев(Массив[Ккк+2],2);
		КонецЕсли;	 
		Если СтрДлина(Элем3) = 4 Тогда
			Если НЕ ТолькоЦифрыВСтроке(Элем3) Тогда
				Элем3 = Лев(Массив[Ккк+2],2);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если СтрДлина(Элем1) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если СтрДлина(Элем2) <>  2 Тогда
			Продолжить;
		КонецЕсли;	 
		Если (СтрДлина(Элем3) = 2) или (СтрДлина(Элем3) = 4) Тогда
		Иначе
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ ТолькоЦифрыВСтроке(Элем1) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ТолькоЦифрыВСтроке(Элем2) Тогда
			Продолжить;
		КонецЕсли;	 
		Если НЕ ТолькоЦифрыВСтроке(Элем3) Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрДат = "" + Элем1 + "." + Элем2 + "." +Элем3;
		
		Поз = Найти(Стр,СтрДат);
		Если Поз > 0 Тогда
			КолПараметров   = КолПараметров + 1;
			
			СтруктураПараметра = СтруктураПараметра();
			СтруктураПараметра.Вставить("ЗначениеПараметра",СтрДат);
			СтруктураПараметра.Вставить("Тип",ТипПараметра("Дата"));
			СтруктураПараметра.Вставить("НомерПараметра",КолПараметров);			
			
			Стр = Лев(Стр,Поз-1) + "~Параметр" + "Дата" + XMLСтрока(КолПараметров) + "~" + Сред(Стр,Поз+СтрДлина(СтрДат));
			
			Параметры.Добавить(СтруктураПараметра);
			
			НайтиПараметрыДаты(Стр,Параметры,КолПараметров);
			
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоКорректноеЧисло(Стр, ТипЧисло)
	Если ПустаяСтрока(Стр) или (Стр = "-") или (Стр = "+") Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если Стр = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = ТипЧисло.ПривестиЗначение(Стр);
	Если Результат = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	

Процедура НайтиЧисловыеПараметры(Стр,Параметры, ТипЧисло)
	КолПараметров = 0;
	
	МассивСлов = СтрРазделить(Стр," ");
	Для Ккк = 0 По МассивСлов.Количество()-1 Цикл
		Слово = МассивСлов[Ккк];
		
		Если ЭтоКорректноеЧисло(Слово, ТипЧисло) Тогда
			КолПараметров   = КолПараметров + 1;
			
			СтруктураПараметра = СтруктураПараметра();
			СтруктураПараметра.Вставить("ЗначениеПараметра",Слово);
			СтруктураПараметра.Вставить("Тип",ТипПараметра("Число"));
			СтруктураПараметра.Вставить("НомерПараметра",КолПараметров);
			Параметры.Добавить(СтруктураПараметра);
			
			МассивСлов[Ккк] = "~Параметр" + "Число" + XMLСтрока(КолПараметров) + "~";
		КонецЕсли;	 
	КонецЦикла;	
	
	Стр = СтрСоединить(МассивСлов," ");
КонецПроцедуры

Процедура УпорядочитьМассивПараметров(Стр,Параметры)
	ТаблицаДляУпорядочивания = Новый ТаблицаЗначений;
	ТаблицаДляУпорядочивания.Колонки.Добавить("Параметр");
	ТаблицаДляУпорядочивания.Колонки.Добавить("ПозицияВСтроке",Новый ОписаниеТипов("Число"));
	
	Для Каждого Параметр Из Параметры Цикл
		СтрокаПоиска = Неопределено;
		
		Если Параметр.Тип = ТипПараметра("Число") Тогда
			СтрокаПоиска = "~Параметр" + "Число" + XMLСтрока(Параметр.НомерПараметра) + "~";
		ИначеЕсли Параметр.Тип = ТипПараметра("Строка") Тогда
			СтрокаПоиска = "~Параметр" + Параметр.Тип + Параметр.Вид + XMLСтрока(Параметр.НомерПараметра) + "~";
		ИначеЕсли Параметр.Тип = ТипПараметра("Дата") Тогда
			СтрокаПоиска = "~ПараметрДата" + XMLСтрока(Параметр.НомерПараметра) + "~";
		Иначе
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не известный тип параметра: %1'"),Параметр.Тип);
		КонецЕсли;
		
		ПозицияВСтроке = Найти(Стр,СтрокаПоиска);
		Если ПозицияВСтроке = 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден параметр в строке: %1'"), Параметр.ЗначениеПараметра);
		КонецЕсли;	 
		
		СтрокаТаблицаДляУпорядочивания                = ТаблицаДляУпорядочивания.Добавить();
		СтрокаТаблицаДляУпорядочивания.Параметр       = Параметр;
		СтрокаТаблицаДляУпорядочивания.ПозицияВСтроке = ПозицияВСтроке;
	КонецЦикла;	
	
	ТаблицаДляУпорядочивания.Сортировать("ПозицияВСтроке");
	
	Массив = Новый Массив;
	Для Каждого СтрокаТаблицаДляУпорядочивания Из ТаблицаДляУпорядочивания Цикл
		Массив.Добавить(СтрокаТаблицаДляУпорядочивания.Параметр);
	КонецЦикла;	
	
	Параметры = Неопределено;
	Параметры = Массив;
КонецПроцедуры

Процедура ОператорыВСтроке(СтрТаблицаСтрок,НайденоНачалоБлочногоКомментария,НомерСтроки)
	МассивСловНРег = СтрРазделить(НРег(СтрТаблицаСтрок.СтрокаСокр)," ",Истина);
	Если МассивСловНРег.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	 
	
	ПервоеСлово    = МассивСловНРег[0];
	ПоследнееСлово = МассивСловНРег[МассивСловНРег.Количество()-1];
	
	Если (Лев(ПервоеСлово,2) = "/*") и (Прав(СокрЛП(ПоследнееСлово),2) = "*/") Тогда
		СтрТаблицаСтрок.Оператор = ОператорКомментарий();
		
	ИначеЕсли Лев(ПервоеСлово,2) = "*/" Тогда
		СтрТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийОкончание();
		
	ИначеЕсли Лев(ПервоеСлово,2) = "/*" Тогда
		СтрТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийНачало();
		
	ИначеЕсли Прав(СокрЛП(ПоследнееСлово),2) = "*/" Тогда
		СтрТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийОкончание();
		
	ИначеЕсли Лев(ПервоеСлово,2) = "//" Тогда
		СтрТаблицаСтрок.Оператор = ОператорКомментарий();
		
	ИначеЕсли НайденоНачалоБлочногоКомментария Тогда
		СтрТаблицаСтрок.Оператор = ОператорБлочныйКомментарий();
	ИначеЕсли ПервоеСлово = КлючевоеСловоЦикл() Тогда
		СтрТаблицаСтрок.Оператор = ОператорЦикл();
		
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		
		МассивСлов = МассивСловШага(СтрТаблицаСтрок.СтрокаСокр);
		МассивСлов.Удалить(0);
		
		Шаг = СтрСоединить(МассивСлов," ");
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("Шаг",Шаг);
	ИначеЕсли ПервоеСлово = КлючевоеСловоЦиклEng() Тогда
		СтрТаблицаСтрок.Оператор = ОператорЦиклEng();
		
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		
		МассивСлов = МассивСловШага(СтрТаблицаСтрок.СтрокаСокр);
		МассивСлов.Удалить(0);
		
		Шаг = СтрСоединить(МассивСлов," ");
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("Шаг",Шаг);
	ИначеЕсли ПервоеСлово = КлючевоеСловоКонецЦикла() Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонецЦикла();
	ИначеЕсли ПервоеСлово = КлючевоеСловоКонецЦиклаEng() Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонецЦиклаEng();
	ИначеЕсли (ПервоеСлово = КлючевоеСловоЕслиПрепроцессор()) и (ПоследнееСлово = КлючевоеСловоТогдаПрепроцессор()) Тогда
		// В Gherkin разрешено использовать ключевое слово "Если" в начале шага
		// поэтому если найдена конструкция "Если" без ключевого слова Тогда - это не ошибка
		СтрТаблицаСтрок.Оператор = ОператорУсловиеПрепроцессор();
		
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		
		МассивСлов = МассивСловШага(СтрТаблицаСтрок.СтрокаСокр);
		МассивСлов.Удалить(МассивСлов.Количество()-1);
		МассивСлов.Удалить(0);
		
		ЗначениеУсловия = СтрСоединить(МассивСлов," ");
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("ЗначениеУсловия",ЗначениеУсловия);
		
	ИначеЕсли ((ПервоеСлово = КлючевоеСловоЕсли()) и (ПоследнееСлово = КлючевоеСловоТогда()) )
		или ((ПервоеСлово = КлючевоеСловоЕслиEng()) и (ПоследнееСлово = КлючевоеСловоТогдаEng()) )
		Тогда
		// Это условие, которое будет выполняться в реальном времени
		
		Если ПервоеСлово = КлючевоеСловоЕсли() Тогда
			СтрТаблицаСтрок.Оператор = ОператорУсловие();
		ИначеЕсли ПервоеСлово = КлючевоеСловоЕслиEng() Тогда
			СтрТаблицаСтрок.Оператор = ОператорУсловиеEng();
		КонецЕсли;	 
		
		
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		
		МассивСлов = МассивСловШага(СтрТаблицаСтрок.СтрокаСокр);
		МассивСлов.Удалить(МассивСлов.Количество()-1);
		МассивСлов.Удалить(0);
		
		ЗначениеУсловия = СтрСоединить(МассивСлов," ");
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("ЗначениеУсловия",ЗначениеУсловия);
		
	ИначеЕсли ((ПервоеСлово = КлючевоеСловоИначеЕсли()) и (ПоследнееСлово = КлючевоеСловоТогда()) )
		или ((ПервоеСлово = КлючевоеСловоИначеЕслиEng()) и (ПоследнееСлово = КлючевоеСловоТогдаEng()) )
		Тогда
		// Это условие ИначеЕсли, которое будет выполняться в реальном времени
		
		Если ПервоеСлово = КлючевоеСловоИначеЕсли() Тогда
			СтрТаблицаСтрок.Оператор = ОператорИначеЕсли();
		ИначеЕсли ПервоеСлово = КлючевоеСловоИначеЕслиEng() Тогда
			СтрТаблицаСтрок.Оператор = ОператорИначеЕслиEng();
		КонецЕсли;	 
		
		
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		
		МассивСлов = МассивСловШага(СтрТаблицаСтрок.СтрокаСокр);
		МассивСлов.Удалить(МассивСлов.Количество()-1);
		МассивСлов.Удалить(0);
		
		ЗначениеУсловия = СтрСоединить(МассивСлов," ");
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("ЗначениеУсловия",ЗначениеУсловия);
		
	ИначеЕсли (ПервоеСлово = КлючевоеСловоИначеЕслиПрепроцессор()) и (ПоследнееСлово = КлючевоеСловоТогдаПрепроцессор()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорИначеЕслиПрепроцессор();
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		
		МассивСлов = МассивСловШага(СтрТаблицаСтрок.СтрокаСокр);
		МассивСлов.Удалить(МассивСлов.Количество()-1);
		МассивСлов.Удалить(0);
		
		ЗначениеУсловия = СтрСоединить(МассивСлов," ");
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("ЗначениеУсловия",ЗначениеУсловия);
	ИначеЕсли (ПервоеСлово = КлючевоеСловоИначеЕслиПрепроцессор()) и (ПоследнееСлово <> КлючевоеСловоТогдаПрепроцессор()) Тогда
		ВызватьИсключение НСтр("ru = '<ИначеЕсли> нельзя использовать без ключевого слова <Тогда>'");
	ИначеЕсли (ПервоеСлово = КлючевоеСловоИначе()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорИначе();
	ИначеЕсли (ПервоеСлово = КлючевоеСловоИначеEng()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорИначеEng();
	ИначеЕсли (ПервоеСлово = КлючевоеСловоИначеПрепроцессор()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорИначеПрепроцессор();
	ИначеЕсли (ПервоеСлово = КлючевоеСловоКонецЕслиПрепроцессор()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонецЕслиПрепроцессор();
	ИначеЕсли (ПервоеСлово = КлючевоеСловоКонецЕсли()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонецЕсли();
	ИначеЕсли (ПервоеСлово = КлючевоеСловоКонецЕслиEng()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонецЕслиEng();
	ИначеЕсли (ПервоеСлово = КлючевоеСловоСтоп()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорСтоп();
	ИначеЕсли Лев(ПервоеСлово,1) = "#" Тогда
		СтрТаблицаСтрок.Оператор = ОператорКомментарий();
	ИначеЕсли Лев(ПервоеСлово,1) = "~" Тогда
		СтрТаблицаСтрок.Оператор = ОператорМетка();
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("ИмяМетки",Сред(СтрТаблицаСтрок.СтрокаСокр,2));
	ИначеЕсли (ПервоеСлово = КлючевоеСловоПерейти()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорПерейти();
		
		МассивСлов = МассивСловШага(СтрТаблицаСтрок.СтрокаСокр);
		МассивСлов.Удалить(0);
		ИмяМетки   = СтрЗаменить(СтрСоединить(МассивСлов," "),"~","");
		
		СтрТаблицаСтрок.ПараметрыОператора = Новый Структура;
		СтрТаблицаСтрок.ПараметрыОператора.Вставить("ИмяМетки",ИмяМетки);
	ИначеЕсли (ПервоеСлово = КлючевоеФункционал()) или (ПервоеСлово = КлючевоеФункциональность()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорЗаголовок();
	ИначеЕсли (ПервоеСлово = КлючевоеКонтекст()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонтекст();
	ИначеЕсли (ПервоеСлово = КлючевоеСценарий()) Тогда
		СтрТаблицаСтрок.Оператор = ОператорСценарий();
	ИначеЕсли Лев(ПервоеСлово,1) = "@" Тогда
		СтрТаблицаСтрок.Оператор = ОператорТег();
	ИначеЕсли Лев(СтрТаблицаСтрок.СтрокаСокр,1) = "[" И Прав(СтрТаблицаСтрок.СтрокаСокр,1) = "]" Тогда
		СтрТаблицаСтрок.Оператор = ОператорПараметрТаблица();
	ИначеЕсли Лев(ПервоеСлово,1) = "|" Тогда
		СтрТаблицаСтрок.Оператор = ОператорТаблица();
		Если Прав(СтрТаблицаСтрок.СтрокаСокр,1) <> "|" Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Строка №%1. <%2> Не найден символ | в завершении строки.'"),НомерСтроки,СтрТаблицаСтрок.СтрокаСокр);
		КонецЕсли;	 
	ИначеЕсли ПервоеСлово = КлючевоеСловоПопытка() Тогда
		СтрТаблицаСтрок.Оператор = ОператорПопытка();
	ИначеЕсли ПервоеСлово = КлючевоеСловоПопыткаEng() Тогда
		СтрТаблицаСтрок.Оператор = ОператорПопыткаEng();
	ИначеЕсли ПервоеСлово = КлючевоеСловоИсключение() Тогда
		СтрТаблицаСтрок.Оператор = ОператорИсключение();
	ИначеЕсли ПервоеСлово = КлючевоеСловоИсключениеEng() Тогда
		СтрТаблицаСтрок.Оператор = ОператорИсключениеEng();
	ИначеЕсли ПервоеСлово = КлючевоеСловоКонецПопытки() Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонецПопытки();
	ИначеЕсли ПервоеСлово = КлючевоеСловоКонецПопыткиEng() Тогда
		СтрТаблицаСтрок.Оператор = ОператорКонецПопыткиEng();
	КонецЕсли;	 
КонецПроцедуры

Процедура ИдРодительскойГруппы(ТаблицаСтрок,СтрТаблицаСтрок,НомерСтроки,Отступ)
	Ид                     = НомерСтроки;
	Нашли                  = Ложь;
	НадоПропуститьУсловие  = Ложь;
	КешОператорСценарий    = ОператорСценарий();
	КешОператорКонтекст    = ОператорКонтекст();
	КешОператорКомментарий = ОператорКомментарий();
	КешОператорБлочныйКомменатрий = ОператорБлочныйКомментарий();
	КешОператорБлочныйКомменатрийНачало = ОператорБлочныйКомменатрийНачало();
	КешОператорБлочныйКомменатрийОкончание = ОператорБлочныйКомменатрийОкончание();
	
	Пока Истина Цикл
		Если ИД < 0 Тогда
			Прервать;
		КонецЕсли;	 
		
		ПервыйСимвол = Лев(ТаблицаСтрок[ИД].СтрокаСокр,1);
		Оператор     = ТаблицаСтрок[ИД].Оператор;
		
		Если ПервыйСимвол = "#" Тогда // это строка комментария
			Ид = Ид - 1;
			Продолжить;
		ИначеЕсли ПервыйСимвол = "@" Тогда // это строка тега
			Ид = Ид - 1;
			Продолжить;
		ИначеЕсли Оператор  = КешОператорКомментарий Тогда
			Ид = Ид - 1;
			Продолжить;
		ИначеЕсли Оператор  = КешОператорБлочныйКомменатрий Тогда
			Ид = Ид - 1;
			Продолжить;
		ИначеЕсли Оператор  = КешОператорСценарий Тогда
			СтрТаблицаСтрок.ИдРодительскойГруппы = ИД;
			Нашли = Истина;
			Прервать;
		ИначеЕсли Оператор  = КешОператорКонтекст Тогда
			СтрТаблицаСтрок.ИдРодительскойГруппы = ИД;
			Нашли = Истина;
			Прервать;
		ИначеЕсли (ПервыйСимвол <> "*") и (ТаблицаСтрок[ИД].СтрокаСокр <> "") 
			И (Отступ >= ТаблицаСтрок[ИД].Отступ)
			И Оператор <> КешОператорКомментарий 
			И Оператор <> КешОператорБлочныйКомменатрийНачало Тогда
			СтрТаблицаСтрок.ИдРодительскойГруппы = ТаблицаСтрок[ИД].ИдРодительскойГруппы;
			Нашли = Истина;
			Прервать;
		ИначеЕсли (ПервыйСимвол = "*") и (Отступ > ТаблицаСтрок[ИД].Отступ) 
			 и (Оператор <> КешОператорБлочныйКомменатрийОкончание) Тогда
			СтрТаблицаСтрок.ИдРодительскойГруппы = ИД;
			Нашли = Истина;
			Прервать;
		ИначеЕсли Отступ <= ТаблицаСтрок[ИД].Отступ Тогда
			Ид = Ид - 1;
			Продолжить;
		ИначеЕсли Не ТаблицаСтрок[ИД].ГруппаШаговНачалась Тогда
			Ид = Ид - 1;
			Продолжить;
		КонецЕсли;	 
		
		Нашли = Истина;
		СтрТаблицаСтрок.ИдРодительскойГруппы = ИД;
		Прервать;
	КонецЦикла;	
	
	Если Не Нашли Тогда
		СтрТаблицаСтрок.ИдРодительскойГруппы = -1;
	КонецЕсли;	 
КонецПроцедуры

Процедура ОтформатироватьТаблицы(ТаблицаСтрок)
	НайденныеТаблицы = Новый Массив;
	НашлиТаблицу = Ложь;
	Для Ккк = 0 По ТаблицаСтрок.Количество()-1 Цикл
		СтрокаТаблицаСтрок = ТаблицаСтрок[Ккк];
		
		
		Если СтрокаТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийНачало() 
		Или  СтрокаТаблицаСтрок.Оператор = ОператорБлочныйКомменатрийОкончание() 
		Или  СтрокаТаблицаСтрок.Оператор = ОператорКомментарий() 
		Или  СокрЛП(СтрокаТаблицаСтрок.СтрокаСокр) = ""
		Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаТаблицаСтрок.Оператор = ОператорТаблица() Тогда
			Если Не НашлиТаблицу Тогда
				НомераСтрок = Новый Массив;
				НайденныеТаблицы.Добавить(НомераСтрок);
			КонецЕсли;	 
			
			НашлиТаблицу = Истина;
		Иначе	
			НашлиТаблицу = Ложь;
			Продолжить;
		КонецЕсли;	 
		
		НомераСтрок.Добавить(Новый Структура("НомерСтроки,СтрокаСокр",Ккк,СтрокаТаблицаСтрок.СтрокаСокр));
	КонецЦикла;	
	
	Для Каждого ТаблицаGherkin Из НайденныеТаблицы Цикл
		ВыровнятьТаблицуGherkin(ТаблицаGherkin,ТаблицаСтрок);
	КонецЦикла;	
	
КонецПроцедуры

Функция МассивСловШага(Знач Стр)
	Стр = СтрЗаменить(Стр,Символы.Таб," ");
	Возврат СтрРазделить(Стр," ",Истина);
КонецФункции	

Функция СтруктураПараметра()
	Структура = Новый Структура;
	Структура.Вставить("ЗначениеПараметра",Неопределено);
	Структура.Вставить("ЗначениеПараметраВложенное",Неопределено);//если в значение параметра есть параметры
	Структура.Вставить("Символ",Неопределено);
	Структура.Вставить("Тип",Неопределено);
	Структура.Вставить("Вид",Неопределено);
	Структура.Вставить("ПереданСнизу",Ложь);
	Структура.Вставить("ИмяПараметра",Неопределено);
	Структура.Вставить("ИзменяемыйПараметр",Ложь);
	Структура.Вставить("НомерПараметра",-1);//Номер параметра среди своего типа
	Структура.Вставить("ИдПараметраВСтроке",-1); //начинается с нуля
	Структура.Вставить("НомерПараметраВСценарии",-1); //начинается с нуля
	Структура.Вставить("ВложенныеПараметры",Неопределено);// массив вложенных параметров
	
	Возврат Структура;
КонецФункции	

Функция НовыйЭлементДерева(ТекРодитель,ДеревоСхемы,ИдСтрокиТаблицаСтрок,СтрТаблицаСтрок,ПараметрыОбработки,СоздатьУЭтогоРодителя = Ложь)
	Если СоздатьУЭтогоРодителя Тогда
		ТекЭлемент                      = ТекРодитель.Строки.Добавить();
		ТекЭлемент.ИдСтрокиТаблицаСтрок = ИдСтрокиТаблицаСтрок;
	ИначеЕсли ТипЗнч(ТекРодитель) = Тип("ДеревоЗначений") Тогда
		ТекЭлемент                      = ТекРодитель.Строки.Добавить();
		ТекЭлемент.ИдСтрокиТаблицаСтрок = ИдСтрокиТаблицаСтрок;
	ИначеЕсли СтрТаблицаСтрок.ГруппаШаговЗакончилась Тогда
		Если    (ТекРодитель.ТипЭлемента = ТипЭлементаИначеПрепроцессор())
			или (ТекРодитель.ТипЭлемента = ТипЭлементаИначеЕслиПрепроцессор()) 
			или (ТекРодитель.ТипЭлемента = ТипЭлементаНачалоУсловияПрепроцессор())
			или (ТекРодитель.ТипЭлемента = ТипЭлементаИначе())
			или (ТекРодитель.ТипЭлемента = ТипЭлементаИначеЕсли()) 
			или (ТекРодитель.ТипЭлемента = ТипЭлементаИначеEng())
			или (ТекРодитель.ТипЭлемента = ТипЭлементаИначеЕслиEng()) 
			или (ТекРодитель.ТипЭлемента = ТипЭлементаНачалоУсловия()) 
			или (ТекРодитель.ТипЭлемента = ТипЭлементаНачалоУсловияEng()) 
			или (ТекРодитель.ТипЭлемента = ТипЭлементаНачалоЦикла())
			или (ТекРодитель.ТипЭлемента = ТипЭлементаНачалоЦиклаEng())
			Тогда
			//оставляем того же родителя, т.к. нельзя просто так выйти за рамки условия
		Иначе	
			ТекРодитель = РодительЭлемента(ТекРодитель,ДеревоСхемы,СтрТаблицаСтрок,
			    ПараметрыОбработки.ТаблицаСтрок,ПараметрыОбработки.МассивУсловий);
		КонецЕсли;	 
		ТекЭлемент  = ТекРодитель.Строки.Добавить();
		ТекЭлемент.ИдСтрокиТаблицаСтрок = ИдСтрокиТаблицаСтрок;
	Иначе	
		ТекЭлемент                      = ТекРодитель.Строки.Добавить();
		ТекЭлемент.ИдСтрокиТаблицаСтрок = ИдСтрокиТаблицаСтрок;
	КонецЕсли;
	
	Если ПараметрыОбработки.Комментарии.Количество() > 0 Тогда
		ТекЭлемент.Комментарии = СкопироватьПростойМассив(ПараметрыОбработки.Комментарии);
		ПараметрыОбработки.Комментарии.Очистить();
	КонецЕсли;	 
	
	Если ПараметрыОбработки.Теги.Количество() > 0 Тогда
		ТекЭлемент.Теги = СкопироватьПростойМассив(ПараметрыОбработки.Теги);
		ПараметрыОбработки.Теги.Очистить();
	КонецЕсли;	 
	
	ТекЭлемент.НомерСтрокиТекстаСценария = СтрТаблицаСтрок.НомерСтрокиТекстаСценария;
	
	Возврат ТекЭлемент;
КонецФункции	

Функция РодительПоИдРодительскойГруппы(ТекРодитель,ДеревоСхемы,СтрТаблицаСтрок,МассивУсловий)
	ИдРодительскойГруппы = СтрТаблицаСтрок.ИдРодительскойГруппы;
	
	Если ИдРодительскойГруппы = -1 Тогда
		Если МассивУсловий.Количество() > 0 Тогда
			РодительУсловие = МассивУсловий[МассивУсловий.Количество()-1];
			Возврат РодительУсловие.Строки[РодительУсловие.Строки.Количество()-1];
		КонецЕсли;	 
		
		Возврат ДеревоСхемы;
	КонецЕсли;	 
	
	СтрокаДерева = ДеревоСхемы.Строки.Найти(ИдРодительскойГруппы,"ИдСтрокиТаблицаСтрок",Истина);
	Если СтрокаДерева = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдена группа сценария по ИД: %1 для строки сценария %2'"),
		                            ИдРодительскойГруппы,СтрТаблицаСтрок.СтрокаСокр);
	КонецЕсли;	 
	
	Если МассивУсловий.Количество() > 0 Тогда
		РодительУсловие = МассивУсловий[МассивУсловий.Количество()-1];
		Если РодительУсловие.ИдСтрокиТаблицаСтрок > СтрокаДерева.ИдСтрокиТаблицаСтрок Тогда
			Возврат РодительУсловие.Строки[РодительУсловие.Строки.Количество()-1];
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТипЗнч(ТекРодитель) <> Тип("ДеревоЗначений") Тогда
		Если ТекРодитель.ТипЭлемента = ТипЭлементаИначеЕсли()
		ИЛИ  ТекРодитель.ТипЭлемента = ТипЭлементаИначеЕслиПрепроцессор()
		ИЛИ  ТекРодитель.ТипЭлемента = ТипЭлементаИначе()
		ИЛИ  ТекРодитель.ТипЭлемента = ТипЭлементаИначеПрепроцессор()
		ИЛИ  ТекРодитель.ТипЭлемента = ТипЭлементаИначеЕслиEng()
		ИЛИ  ТекРодитель.ТипЭлемента = ТипЭлементаИначеEng()
		Тогда
			Если ТекРодитель.НомерСтрокиТекстаСценария > СтрокаДерева.НомерСтрокиТекстаСценария Тогда
				Возврат ТекРодитель;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	
	
	Возврат СтрокаДерева;
КонецФункции	

Процедура ЗаполнитьПараметрыДляДанногоЭлемента(Строка,ТекЭлемент,ИзменяемыеПараметрыСценария,ЭтоУсловие,
	   КешПараметровСтроки,ДопПараметры = Неопределено)
	ОбработаннаяСтрокаПараметров = Строка;
	Если ЭтоУсловие Тогда
		ТекЭлемент.Параметры = ПараметрыУсловия(ОбработаннаяСтрокаПараметров,ТекЭлемент,ИзменяемыеПараметрыСценария);
	Иначе	
		ТекЭлемент.Параметры = ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(
		                                  ОбработаннаяСтрокаПараметров,ИзменяемыеПараметрыСценария,КешПараметровСтроки,,ДопПараметры);
	КонецЕсли;	 
	ТекЭлемент.ОбработаннаяСтрокаПараметров = ОбработаннаяСтрокаПараметров;
КонецПроцедуры

Функция РодительЭлемента(ТекЭлемент,ДеревоСхемы,СтрТаблицаСтрок,ТаблицаСтрок,МассивУсловий)
	
	Если ТипЗнч(ТекЭлемент) = Тип("ДеревоЗначений") Тогда
		Возврат ТекЭлемент;
	КонецЕсли;	 
	
	Если СтрТаблицаСтрок.ИдРодительскойГруппы <> -1 Тогда
		СтрокаДерева = ДеревоСхемы.Строки.Найти(СтрТаблицаСтрок.ИдРодительскойГруппы,"ИдСтрокиТаблицаСтрок",Истина);
		Если СтрокаДерева <> Неопределено Тогда
			Если МассивУсловий.Количество() > 0 Тогда
				ТекУсловие = МассивУсловий[МассивУсловий.Количество()-1];
				НижняяСекцияУсловия = ТекУсловие.Строки[ТекУсловие.Строки.Количество()-1];
				Если НижняяСекцияУсловия.НомерСтрокиТекстаСценария > СтрокаДерева.НомерСтрокиТекстаСценария Тогда
					СтрокаДерева = НижняяСекцияУсловия;
				КонецЕсли;	 
			КонецЕсли;	 
			
			Возврат СтрокаДерева;
		КонецЕсли;	 
	ИначеЕсли МассивУсловий.Количество() > 0 Тогда
		ТекУсловие = МассивУсловий[МассивУсловий.Количество()-1];
		НижняяСекцияУсловия = ТекУсловие.Строки[ТекУсловие.Строки.Количество()-1];
		Возврат НижняяСекцияУсловия;
	Иначе
		Возврат ДеревоСхемы;
	КонецЕсли;	 
	
КонецФункции	

Функция ПервыйЭлементДереваПодчиненВторому(Элемент1,Элемент2)
	Если ТипЗнч(Элемент1) = Тип("ДеревоЗначений") Тогда
		ТекРодитель = Элемент1;
	Иначе	
		ТекРодитель = Элемент1.Родитель;
	КонецЕсли;	 
	
	Пока ТекРодитель <> Неопределено Цикл
		Если ТекРодитель = Элемент2 Тогда
			Возврат Истина;
		КонецЕсли;	 
		
		Если ТипЗнч(ТекРодитель) = Тип("ДеревоЗначений") Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	                             

Функция ЭтоВложенныйСценарийШаблон(СтрТаблицаСтрок, ТаблицаШаблоновСценариев, СтрокаШаблона, СтруктураПараметров)
	Если Не ЗначениеЗаполнено(СтрТаблицаСтрок.СнипетНРег) Тогда
		Возврат Ложь;
	КонецЕсли;	  
	
	Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
		Если НЕ СтруктураПараметров.Свойство("ДанныеСценариевGit") Тогда
			СтруктураПараметров.Вставить("ДанныеСценариевGit",
				ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресСлужебныеДанныеСценариев));
		КонецЕсли;
		
		UIDСЦенария = СтруктураПараметров.ДанныеСценариевGit.Снипеты[СтрТаблицаСтрок.СнипетНРег];
		
		Если UIDСЦенария = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		СтрокиТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев.НайтиСтроки(
		    Новый Структура("UID", UIDСЦенария));
		
		Если СтрокиТаблицаШаблоновСценариев.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		Если СтрокиТаблицаШаблоновСценариев.Количество() > 1 Тогда
			СтрокаСценариев = Символы.ПС;
			Для Каждого Элем Из СтрокиТаблицаШаблоновСценариев Цикл
				СтрокаСценариев = СтрокаСценариев + СтрШаблон(НСтр("ru = '%1, код %2'"), Элем.Наименование, Элем.Код) + Символы.ПС;
			КонецЦикла;	
			
			ВызватьИсключение СтрШаблон(
			   НСтр("ru = 'Найдено несколько сценариев подходящих для вызова: %1. %2'"),СтрокаСценариев, Символы.ПС + "Общая ошибка.");
		КонецЕсли;	 
		
		СтрокаШаблона = СтрокиТаблицаШаблоновСценариев[0];
			
		Возврат Истина;
	КонецЕсли;	 
	
	СтрокиТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев.НайтиСтроки(
	    Новый Структура("СнипетНРег",СтрТаблицаСтрок.СнипетНРег));
		
	Если СтрокиТаблицаШаблоновСценариев.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Если СтрокиТаблицаШаблоновСценариев.Количество() > 1 Тогда
		СтрокаСценариев = Символы.ПС;
		Для Каждого Элем Из СтрокиТаблицаШаблоновСценариев Цикл
			СтрокаСценариев = СтрокаСценариев + СтрШаблон(НСтр("ru = '%1, код %2'"), Элем.Наименование, Элем.Код) + Символы.ПС;
		КонецЦикла;	
		
		ВызватьИсключение СтрШаблон(
		   НСтр("ru = 'Найдено несколько сценариев подходящих для вызова: %1. %2'"),СтрокаСценариев, Символы.ПС + "Общая ошибка.");
	КонецЕсли;	 
	
	СтрокаШаблона = СтрокиТаблицаШаблоновСценариев[0];
	
	Возврат Истина;
КонецФункции	

Функция СтруктураПараметровДляПолученияВложенногоСценария(ИсходнаяСтруктураПараметров,UID,ИмяСценария)
	СтруктураПараметров = Новый Структура;
	
	Если ИсходнаяСтруктураПараметров.Свойство("ДанныеСценариев") Тогда
		ДанныеСценариев = ИсходнаяСтруктураПараметров.ДанныеСценариев;
	Иначе	
		ДанныеСценариев = ИсходнаяСтруктураПараметров.СтруктураПараметров.ДанныеСценариев;
	КонецЕсли;	 
	
	
	СтрокаДанныеСценариев = ДанныеСценариев.Найти(UID,"UID");
	Если СтрокаДанныеСценариев = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
		   НСтр("ru = 'Не найдены данные сценария UID: %1. Имя %2'"),UID,ИмяСценария);
	КонецЕсли;
	   
	СтруктураПараметров.Вставить("ЧтениеИзТекста",ИсходнаяСтруктураПараметров.ЧтениеИзТекста);   
	СтруктураПараметров.Вставить("UIDСценария",СтрокаДанныеСценариев.UID);   
	СтруктураПараметров.Вставить("ДанныеСценариев",ДанныеСценариев);
	СтруктураПараметров.Вставить("Проект",СтрокаДанныеСценариев.Проект);   
	СтруктураПараметров.Вставить("UIDФункцияСистемы",СтрокаДанныеСценариев.UIDФункцияСистемы);   
	СтруктураПараметров.Вставить("ПараметрыСценария",СтрокаДанныеСценариев.ПараметрыСценария);   
	СтруктураПараметров.Вставить("ВложенныеСценарии",СтрокаДанныеСценариев.ВложенныеСценарии);   
	
	Возврат СтруктураПараметров;
КонецФункции	

Процедура ЗагрузитьСценарийИзШаблона(СтрокаШаблона,ДеревоСхемы,ТаблицаШаблоновСценариев,ИсходныйСценарий,СтруктураПараметров)
	Если СтрокаШаблона.ДанныеШаблона = Неопределено Тогда
		СтрокаШаблона.ДанныеШаблона = Новый Структура;
		СтрокаШаблона.ДанныеШаблона.Вставить("ДеревоШаблона",Неопределено);
		СтрокаШаблона.ДанныеШаблона.Вставить("ПараметрыВходящие",Неопределено);
	КонецЕсли;	 
	
	ДанныеШаблона = СтрокаШаблона.ДанныеШаблона;
	КодСценария = "";
	Если СтруктураПараметров.Свойство("КодСценария") Тогда
		КодСценария = СтруктураПараметров.КодСценария;
	КонецЕсли;
	
	Если ДанныеШаблона.ДеревоШаблона = Неопределено Тогда
		Если СтруктураПараметров.ЧтениеИзТекста Тогда
			СтруктураПараметровДляПолученияВложенногоСценария = 
			     СтруктураПараметровДляПолученияВложенногоСценария(СтруктураПараметров,
				     СтрокаШаблона.UID,СтрокаШаблона.Наименование);
					 
					 
			Попытка
				ДанныеШаблона.ДеревоШаблона = ДеревоСценарияИзБазыДанных(СтрокаШаблона.Наименование,
				      СтруктураПараметровДляПолученияВложенногоСценария);
			Исключение
				ИнфоОбОшибке = ИнформацияОбОшибке();
				КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнфоОбОшибке);
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не получилось скомпилировать сценарий <%1>, код <%2>. Строка №%3. Подробная информация об ошибке: %4'"),
					ИсходныйСценарий,КодСценария,
					ДеревоСхемы.НомерСтрокиТекстаСценария,Символы.ПС + КраткоеПредставлениеОшибки);
			КонецПопытки;
			
			ДанныеСценариев = СтруктураПараметровДляПолученияВложенногоСценария.ДанныеСценариев;	  
			СтрокаДанныеСценариев = ДанныеСценариев.Найти(СтрокаШаблона.UID,"UID");
			ДанныеШаблона.ПараметрыВходящие = СтрокаДанныеСценариев.ПараметрыСценария;
		ИначеЕсли СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда	
			ДанныеШаблона.ДеревоШаблона = ДеревоСценарияИзБазыДанных(СтрокаШаблона.Наименование, СтруктураПараметров, СтрокаШаблона.UID);
			СтрокаДанныеСценариев = СтруктураПараметров.ДанныеСценариевGit.UIDCценариев[СтрокаШаблона.UID];
			ДанныеШаблона.ПараметрыВходящие = СтрокаДанныеСценариев.ПараметрыСценария;
		Иначе
			ДанныеШаблона.ДеревоШаблона     = ДеревоСценарияИзБазыДанных(СтрокаШаблона.Ссылка,СтруктураПараметров);
			ДанныеШаблона.ПараметрыВходящие = ПараметрыВходящиеСценария(СтрокаШаблона.Ссылка);
		КонецЕсли;	 
		
	КонецЕсли;
	
	Если СтрокаШаблона.ДанныеШаблона.ДеревоШаблона = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не получилось скомпилировать сценарий <%1>, код <%2>. Подсценарий <%3> <%4> не скомпилирован. Отформатируйте и скомилируйте его.'"),
					ИсходныйСценарий,КодСценария, СтрокаШаблона.Код, СтрокаШаблона.Наименование);
	КонецЕсли;
	
	СкопироватьДеревоШаблонаВДеревоСценария(СтрокаШаблона,СтрокаШаблона.ДанныеШаблона.ДеревоШаблона,
	                                        ДеревоСхемы,ИсходныйСценарий,Ложь, СтруктураПараметров);
	
КонецПроцедуры

Процедура ДобавитьСлужебныеЭлементыДляГруппШагов(Дерево)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаШаблонСценария()  Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаГруппаШагов() Тогда
			СтрокаСтарт                      = СтрокаДерева.Строки.Вставить(0);
			СтрокаСтарт.ОписаниеЭлемента     = ОписаниеЭлементаСтарт();
			СтрокаСтарт.ТипЭлемента          = ТипЭлементаНачалоСхемы();
			
			СтрокаСтоп                       = СтрокаДерева.Строки.Вставить(СтрокаДерева.Строки.Количество());
			СтрокаСтоп.ОписаниеЭлемента      = ОписаниеЭлементаСтоп();
			СтрокаСтоп.ТипЭлемента           = ТипЭлементаОкончаниеСхемы();
		КонецЕсли;	 
		
		ДобавитьСлужебныеЭлементыДляГруппШагов(СтрокаДерева);
	КонецЦикла;	
КонецПроцедуры

Функция НомерПараметраВСценарии(ВсеПараметрыСценария,ПроверяемоеЗначениеПараметра)
	НомерПараметра = -1;
	Если ВсеПараметрыСценария = Неопределено Тогда
		Возврат НомерПараметра;
	КонецЕсли;	 
	
	
	Для Каждого ЗначениеПараметраСценария Из ВсеПараметрыСценария Цикл
		НомерПараметра = НомерПараметра + 1;
		
		Если НРег(ЗначениеПараметраСценария) = НРег(ПроверяемоеЗначениеПараметра) Тогда
			Возврат НомерПараметра;
		КонецЕсли;	 
	КонецЦикла;	
	
	ВсеПараметрыСценария.Добавить(ПроверяемоеЗначениеПараметра);
	
	Возврат НомерПараметра + 1;
КонецФункции	

Функция  ЭтотПараметрЯвляетсяТолькоЗначением(ЗначениеПараметра)
	Возврат Ложь;
КонецФункции

Процедура ВыровнятьТаблицуGherkin(ТаблицаGherkin,ТаблицаСтрок)
	Если ТаблицаGherkin.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	КолЗначенийВТаблице = 0;
	ЗначенияТаблицы     = Новый Массив;
	Для Каждого СтрокаТаблицаGherkin Из ТаблицаGherkin Цикл
		ТекМассивДлин = Новый Массив;
		
		Стр = СтрокаТаблицаGherkin.СтрокаСокр;
		Стр = Сред(Стр,2);
		Стр = Лев(Стр,СтрДлина(Стр)-1);
		Стр = СокрЛП(Стр);
		
		
		Стр = СтрЗаменить(Стр,"\|","~ПредставлениеВертикальнойЧерты~");
		МассивЗначенийСтроки = СтрРазделить(Стр,"|");

		КолЗначенийВДаннойСтроке = МассивЗначенийСтроки.Количество();
		
		Если КолЗначенийВТаблице < КолЗначенийВДаннойСтроке Тогда
			КолЗначенийВТаблице = КолЗначенийВДаннойСтроке;
		КонецЕсли;	 
		
		
		Для Каждого ЗначениеТаблицы Из МассивЗначенийСтроки Цикл
			ТекЗначение = СокрЛП(ЗначениеТаблицы);
			ТекЗначение = СтрЗаменить(ТекЗначение,"~ПредставлениеВертикальнойЧерты~","\|");
			Если Лев(ТекЗначение,1) = "'" Тогда
				Если Прав(ТекЗначение,1) <> "'" Тогда
					ТекЗначение = ТекЗначение + "'";
				КонецЕсли;	 
			ИначеЕсли Лев(ТекЗначение,1) = """" Тогда
				Если Прав(ТекЗначение,1) <> """" Тогда
					ТекЗначение = ТекЗначение + """";
				КонецЕсли;	 
			КонецЕсли;	 
			
			
			ТекМассивДлин.Добавить(Новый Структура("Стр,Длина",ТекЗначение,СтрДлина(ТекЗначение)));
		КонецЦикла;
		
		ЗначенияТаблицы.Добавить(ТекМассивДлин);
	КонецЦикла;	
	
	//добавим пустые значения, если в строках таблицы разное количество строк
	Для Каждого СтрокаЗначенияТаблицы Из ЗначенияТаблицы Цикл
		Пока СтрокаЗначенияТаблицы.Количество() < КолЗначенийВТаблице Цикл
			СтрокаЗначенияТаблицы.Добавить(Новый Структура("Стр,Длина","",0));
		КонецЦикла;	
	КонецЦикла;	
	
	МаксДлинаКолонок = Новый Массив;
	Для Ккк = 1 По КолЗначенийВТаблице Цикл
		МаксДлина = 0;
		Для Каждого СтрокаЗначенияТаблицы Из ЗначенияТаблицы Цикл
			Если МаксДлина < СтрокаЗначенияТаблицы[Ккк-1].Длина Тогда
				МаксДлина = СтрокаЗначенияТаблицы[Ккк-1].Длина;
			КонецЕсли;	 
		КонецЦикла;	
		
		МаксДлинаКолонок.Добавить(МаксДлина);
	КонецЦикла;	
	
	
	//собираем таблицу
	Ид = -1;
	Для Каждого СтрокаЗначенияТаблицы Из ЗначенияТаблицы Цикл
		Ид = Ид + 1;
		
		Стр = "|";
		Для Ккк = 1 По КолЗначенийВТаблице Цикл
			НужнаяДлина = МаксДлинаКолонок[Ккк-1];
			
			ТекЗначение = СтрокаЗначенияТаблицы[Ккк-1].Стр;
			
			Пока СтрДлина(ТекЗначение) < НужнаяДлина Цикл
				ТекЗначение = ТекЗначение + " ";
			КонецЦикла;	
			
			Стр = Стр + " " + ТекЗначение + " |";
		КонецЦикла;
		
		ТаблицаGherkin[Ид].СтрокаСокр = Стр;
		НомерСтрокиТаблицаСтрок = ТаблицаGherkin[Ид].НомерСтроки;
		ТаблицаСтрок[НомерСтрокиТаблицаСтрок].СтрокаСокр = Стр;
	КонецЦикла;	
КонецПроцедуры

Функция МассивПервыхСловGherkin()
	Массив = Новый Массив;
	
	//русский язык
	Массив.Добавить("И");
	Массив.Добавить("Когда");
	Массив.Добавить("Тогда");
	Массив.Добавить("Затем");
	Массив.Добавить("Дано");
	Массив.Добавить("Допустим");
	Массив.Добавить("Если");
	Массив.Добавить("ИначеЕсли");
	Массив.Добавить("Иначе");
	Массив.Добавить("Пусть");
	Массив.Добавить("То");
	Массив.Добавить("К тому же");
	Массив.Добавить("Также");
	Массив.Добавить("Но");
	Массив.Добавить("А");
	
	//английский язык
	Массив.Добавить("Given");
	Массив.Добавить("When");
	Массив.Добавить("Then");
	Массив.Добавить("And");
	Массив.Добавить("But");
	Массив.Добавить("If");
	Массив.Добавить("ElseIf");
	Массив.Добавить("Else");
	
	Возврат Массив;
КонецФункции	

Функция СкопироватьПростойМассив(Оригинал)
	Массив = Новый Массив;
	Для Каждого Элем Из Оригинал Цикл
		Массив.Добавить(Элем);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	

Функция ПараметрыУсловия(Стр,ТекЭлемент,ИзменяемыеПараметрыСценария = Неопределено)
	
	ЗначениеУсловия = Стр;
	ЭтоПрепроцессор = Ложь;
	Если ТекЭлемент.ТипЭлемента = ТипЭлементаНачалоУсловияПрепроцессор() Тогда
		ЭтоПрепроцессор = Истина;
	ИначеЕсли ТекЭлемент.ТипЭлемента = ТипЭлементаИначеЕслиПрепроцессор() Тогда
		ЭтоПрепроцессор = Истина;
	КонецЕсли;	 
	
	МассивСлов = СтрРазделить(ЗначениеУсловия," ",Ложь);
	Если ЭтоПрепроцессор И МассивСлов.Количество() = 1 Тогда
		МассивПараметров = ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(Стр,ИзменяемыеПараметрыСценария);
		Если МассивПараметров.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неверно были получены параметры из строки ""%1"". Должен был быть получен 1 параметр, а получили %2'"),
				ЗначениеУсловия,МассивПараметров.Количество());
		ИначеЕсли МассивПараметров.Количество() <> 1 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неверно были получены параметры из строки ""%1"". Должен был быть получен 1 параметр, а получили %2'"),
				ЗначениеУсловия,МассивПараметров.Количество());
		КонецЕсли;	 
		
		СтруктураПараметра = МассивПараметров[0];
		СтруктураПараметра.Вставить("СвязанСФО",Ложь);
		СтруктураПараметра.Вставить("ИмяПараметра",СтруктураПараметра.ЗначениеПараметра);
	ИначеЕсли ЭтоПрепроцессор И МассивСлов.Количество() = 2 Тогда
		Если НРег(МассивСлов[0]) = "фо" Тогда
			Стр              = МассивСлов[1];
			МассивПараметров = ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(Стр,ИзменяемыеПараметрыСценария);
			Если МассивПараметров.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неверно были получены параметры из строки ""%1"". Должен был быть получен 1 параметр, а получили %2'"),
					ЗначениеУсловия,МассивПараметров.Количество());
			ИначеЕсли МассивПараметров.Количество() <> 1 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неверно были получены параметры из строки ""%1"". Должен был быть получен 1 параметр, а получили %2'"),
					ЗначениеУсловия,МассивПараметров.Количество());
			КонецЕсли;
			
			СтруктураПараметра = МассивПараметров[0];
			СтруктураПараметра.Вставить("СвязанСФО",Истина);
			
			Стр = "ФО " + Стр;
		Иначе
			МассивПараметров = ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(Стр,ИзменяемыеПараметрыСценария);
		КонецЕсли;	 
	Иначе
		МассивПараметров = ПараметрыGherkinИзСтрокиИПреобразоватьСтрокуДляРаботыСПараметрами(Стр,ИзменяемыеПараметрыСценария);
	КонецЕсли;	 
	
	Для Каждого Элем Из МассивПараметров Цикл
		Элем.Вставить("ИмяПараметра",Элем.ЗначениеПараметра);
		Если Не Элем.Свойство("СвязанСФО") Тогда
			Элем.Вставить("СвязанСФО",Ложь);
		КонецЕсли;	 
	КонецЦикла;
	
	УпорядочитьМассивПараметров(Стр,МассивПараметров);
	
	ЭкранироватьУгловыеСкобки(Стр);
	
	Возврат МассивПараметров;
КонецФункции	

Функция ИменаВходящихПараметров(ТаблицаПараметров)
	Массив = Новый Массив;
	
	Для Каждого СтрокаТаблицаПараметров Из ТаблицаПараметров Цикл
		Массив.Добавить(НРег(СтрокаТаблицаПараметров.Имя));
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	 

Процедура СкопироватьДеревоШаблонаВДеревоСценария(СтрокаШаблона,ДеревоОткуда,ДеревоКуда,ИсходныйСценарий,КопироватьСтроки,СтруктураПараметров)
	Если ДеревоКуда.ДополнительныеСвойства = Неопределено Тогда
		ДеревоКуда.ДополнительныеСвойства = Новый Структура;
	КонецЕсли;	 
	
	Если Не ДеревоКуда.ДополнительныеСвойства.Свойство("Шаблон") Тогда
		Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
			ДеревоКуда.ДополнительныеСвойства.Вставить("ЧтениеИзGit", Истина);
			ДеревоКуда.ДополнительныеСвойства.Вставить("UID",СтрокаШаблона.UID);
			ДеревоКуда.ДополнительныеСвойства.Вставить("Шаблон",СтрокаШаблона.Наименование);
		ИначеЕсли СтрокаШаблона.ЧтениеИзТекста Тогда
			ДеревоКуда.ДополнительныеСвойства.Вставить("Шаблон",СтрокаШаблона.Наименование);
			ДеревоКуда.ДополнительныеСвойства.Вставить("Код",СтрокаШаблона.Код);
			ДеревоКуда.ДополнительныеСвойства.Вставить("UID",СтрокаШаблона.UID);
		Иначе	
			ДеревоКуда.ДополнительныеСвойства.Вставить("Шаблон",СтрокаШаблона.Ссылка);
			ДеревоКуда.ДополнительныеСвойства.Вставить("ИмяПодсценария",СтрокаШаблона.Наименование);
		КонецЕсли;	 
		ДеревоКуда.ДополнительныеСвойства.Вставить("ПараметрыВходящие",
		ИменаВходящихПараметров(СтрокаШаблона.ДанныеШаблона.ПараметрыВходящие));
		ДеревоКуда.ДополнительныеСвойства.Вставить("ЧтениеИзТекста",СтрокаШаблона.ЧтениеИзТекста);
	КонецЕсли;	 
	
	Для Каждого СтрокаОткуда Из ДеревоОткуда.Строки Цикл
		Если СтрокаОткуда.ТипЭлемента = ТипЭлементаКомментарий() Тогда
			Продолжить;
		ИначеЕсли СтрокаОткуда.ТипЭлемента = ТипЭлементаБлочныйКомментарий() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаОткуда.ТипЭлемента = ТипЭлементаШаблонСценария() Тогда
			Если СтрокаОткуда.ДополнительныеСвойства.Шаблон = ИсходныйСценарий Тогда
					ВызватьИсключение СтрШаблон(
					       НСтр("ru = 'Зацикливание при вызове сценария: %1'"),ИсходныйСценарий);
			КонецЕсли;	 

		КонецЕсли;	 
	КонецЦикла;	
	
	Если НЕ КопироватьСтроки Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого СтрокаОткуда Из ДеревоОткуда.Строки Цикл
		Если СтрокаОткуда.ТипЭлемента = ТипЭлементаКомментарий() Тогда
			Продолжить;
		ИначеЕсли СтрокаОткуда.ТипЭлемента = ТипЭлементаБлочныйКомментарий() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаОткуда.ТипЭлемента = ТипЭлементаШаблонСценария() Тогда
			Если СтрокаОткуда.ДополнительныеСвойства.Шаблон = ИсходныйСценарий Тогда
					ВызватьИсключение СтрШаблон(
					       НСтр("ru = 'Зацикливание при вызове сценария: %1'"),ИсходныйСценарий);
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если ДеревоКуда.ДополнительныеСвойства = Неопределено Тогда
			ДеревоКуда.ДополнительныеСвойства = Новый Структура;
		КонецЕсли;	 
		
		Если Не ДеревоКуда.ДополнительныеСвойства.Свойство("Шаблон") Тогда
			Если СтрокаШаблона.ЧтениеИзТекста Тогда
				ДеревоКуда.ДополнительныеСвойства.Вставить("Шаблон",СтрокаШаблона.Наименование);
				ДеревоКуда.ДополнительныеСвойства.Вставить("Код",СтрокаШаблона.Код);
				ДеревоКуда.ДополнительныеСвойства.Вставить("UID",СтрокаШаблона.UID);
			Иначе	
				ДеревоКуда.ДополнительныеСвойства.Вставить("Шаблон",СтрокаШаблона.Ссылка);
				ДеревоКуда.ДополнительныеСвойства.Вставить("ИмяПодсценария",СтрокаШаблона.Наименование);
			КонецЕсли;	 
			ДеревоКуда.ДополнительныеСвойства.Вставить("ПараметрыВходящие",
				   ИменаВходящихПараметров(СтрокаШаблона.ДанныеШаблона.ПараметрыВходящие));
			ДеревоКуда.ДополнительныеСвойства.Вставить("ЧтениеИзТекста",СтрокаШаблона.ЧтениеИзТекста);
		КонецЕсли;	 
		
		СтрокаКуда = ДеревоКуда.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаКуда,СтрокаОткуда);
		Если СтрокаКуда.Комментарии <> Неопределено Тогда
			СтрокаКуда.Комментарии.Очистить();
		КонецЕсли;	 
		
		СтрокаКуда.ЭтаСтрокаВложенногоСценария = Истина;
		
		Если СтрокаКуда.ДополнительныеСвойства = Неопределено Тогда
			СтрокаКуда.ДополнительныеСвойства = Новый Структура;
		КонецЕсли;	 
		
		Если Не СтрокаКуда.ДополнительныеСвойства.Свойство("Шаблон") Тогда
			СтрокаКуда.ДополнительныеСвойства.Вставить("Шаблон",СтрокаШаблона.Ссылка);
			СтрокаКуда.ДополнительныеСвойства.Вставить("ИмяПодсценария",СтрокаШаблона.Наименование);
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

Функция СоздатьТекстФорматированногоДокументаПоДеревуСхемы(ДеревоСхемы,ДополнительныеПараметры)
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Строка");
	ТаблицаСтрок.Колонки.Добавить("СтрокаСокр");
	ТаблицаСтрок.Колонки.Добавить("ТипЭлемента");
	ТаблицаСтрок.Колонки.Добавить("Отступ");
	ТаблицаСтрок.Колонки.Добавить("ОбработаннаяСтрокаПараметров");
	ТаблицаСтрок.Колонки.Добавить("Параметры");
	ТаблицаСтрок.Колонки.Добавить("Комментарии");
	ТаблицаСтрок.Колонки.Добавить("Теги");
	
	ДелатьРаскраску = ДополнительныеПараметры.ДелатьРаскраску;
	
	Уровень = -1;
	РекурсивныйОбходДереваСхемыДляПолученияТекста(ДеревоСхемы,ТаблицаСтрок,Уровень);
	
	Если ДелатьРаскраску Тогда
		ОбработатьВыделениеЦветомУсловияЕслиИЦиклыПопытки(ТаблицаСтрок);
		ОбработатьВыделениеЦветомМеток(ТаблицаСтрок);
		ОтформатироватьГруппыШагов(ТаблицаСтрок);
		ОтформатироватьТекстGherkin(ТаблицаСтрок);
		ОбработатьВыделениеЦветомШаблонСценария(ТаблицаСтрок);
	КонецЕсли;	 
	
	ОтступУСтрокИСпецСимволы(ТаблицаСтрок,ДополнительныеПараметры);
	
	МассивСтрок = ТаблицаСтрок.ВыгрузитьКолонку("Строка");
	
	Возврат СтрСоединить(МассивСтрок,Символы.ПС);
КонецФункции	

Процедура РекурсивныйОбходДереваСхемыДляПолученияТекста(Дерево,ТаблицаСтрок,Уровень)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если СтрокаДерева.Теги <> Неопределено Тогда
			Отступ = (Уровень+1)*8;
			ВставитьТегиВТаблицуСтрок(ТаблицаСтрок,СтрокаДерева.Теги,СтрокаДерева,Отступ);
		КонецЕсли;	 
		
		Если СтрокаДерева.Комментарии <> Неопределено Тогда
			ВставитьКомментарииВТаблицуСтрок(ТаблицаСтрок,СтрокаДерева.Комментарии,СтрокаДерева);
		КонецЕсли;	 
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаНачалоСхемы() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаОкончаниеСхемы() Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.Родитель <> Неопределено И СтрокаДерева.Родитель.ТипЭлемента = ТипЭлементаШаблонСценария() Тогда
			Если СтрокаДерева.ТипЭлемента = ТипЭлементаПередачаПараметров() Тогда
				СтрТаблицаСтрок                              = ТаблицаСтрок.Добавить();
				Отступ                                       = (Уровень+1)*8;
				СтрТаблицаСтрок.Отступ                       = Отступ;
				СтрТаблицаСтрок.ТипЭлемента                  = СтрокаДерева.ТипЭлемента;
				
				СтрТаблицаСтрок.СтрокаСокр = СтрокаДерева.ОписаниеЭлемента;
				СтрТаблицаСтрок.Строка     = СтрокаДерева.ОписаниеЭлемента;
				СтрТаблицаСтрок.Параметры  = СтрокаДерева.Параметры;
				Поз1 = Найти(СтрокаДерева.ОписаниеЭлемента,"=");
				Поз2 = Найти(СтрокаДерева.ОбработаннаяСтрокаПараметров,"=");
				
				СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров = Лев(СтрокаДерева.ОписаниеЭлемента,Поз1-1) + Сред(СтрокаДерева.ОбработаннаяСтрокаПараметров,Поз2);
				
				ПередачаТаблицы = Ложь;
				Если ТипЗнч(СтрокаДерева.ДополнительныеСвойства) = Тип("Структура") Тогда
					Если СтрокаДерева.ДополнительныеСвойства.Свойство("ПередачаТаблицы") Тогда
						ПередачаТаблицы = СтрокаДерева.ДополнительныеСвойства.ПередачаТаблицы;
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если ПередачаТаблицы Тогда
					СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров = СтрокаДерева.ОписаниеЭлемента;
					Для Каждого СтрокаПараметры Из СтрокаДерева.Родитель.Параметры Цикл
						Если СтрокаПараметры.Тип = ТипПараметра("Таблица") Тогда
							Если СтрокаПараметры.ИмяПараметра = СтрокаДерева.ДополнительныеСвойства.ИмяПараметра Тогда
								Ид = -1;
								Для Каждого Стр Из СтрокаПараметры.ЗначениеПараметра Цикл
									Ид = Ид + 1;
									
									СтрТаблицаСтрок                              = ТаблицаСтрок.Добавить();
									Отступ                                       = (Уровень+2)*8;
									СтрТаблицаСтрок.Отступ                       = Отступ;
									СтрТаблицаСтрок.ТипЭлемента                  = ТипЭлементаТаблица();
									
									ЗначениеПараметраПодстановкаЗначений = СтрокаПараметры.ЗначениеПараметраПодстановкаЗначений[Ид];
									
									СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров = ЗначениеПараметраПодстановкаЗначений.ОбработаннаяСтрокаПараметров;
									СтрТаблицаСтрок.Параметры = ЗначениеПараметраПодстановкаЗначений.Параметры;
									
									СтрТаблицаСтрок.СтрокаСокр = Стр;
									СтрТаблицаСтрок.Строка     = Стр;
								КонецЦикла;	 
							КонецЕсли;	 
						КонецЕсли;	 
					КонецЦикла;	 
				КонецЕсли;	 
				
			ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметра()
				ИЛИ СтрокаДерева.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметраEng() Тогда
				СтрТаблицаСтрок                              = ТаблицаСтрок.Добавить();
				Отступ                                       = (Уровень+1)*8;
				СтрТаблицаСтрок.Отступ                       = Отступ;
				СтрТаблицаСтрок.ТипЭлемента                  = СтрокаДерева.ТипЭлемента;
				
				СтрТаблицаСтрок.СтрокаСокр = СтрокаДерева.ОписаниеЭлемента;
				СтрТаблицаСтрок.Строка     = СтрокаДерева.ОписаниеЭлемента;
				СтрТаблицаСтрок.Параметры  = СтрокаДерева.Параметры;
				СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров = СтрТаблицаСтрок.СтрокаСокр;
				
			ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаПрисвоениеВозвращаемогоПараметра()
				ИЛИ СтрокаДерева.ТипЭлемента = ТипЭлементаПрисвоениеВозвращаемогоПараметраEng() Тогда
				СтрТаблицаСтрок                              = ТаблицаСтрок.Добавить();
				Отступ                                       = (Уровень+1)*8;
				СтрТаблицаСтрок.Отступ                       = Отступ;
				СтрТаблицаСтрок.ТипЭлемента                  = СтрокаДерева.ТипЭлемента;
				
				СтрТаблицаСтрок.СтрокаСокр = СтрокаДерева.ОписаниеЭлемента;
				СтрТаблицаСтрок.Строка     = СтрокаДерева.ОписаниеЭлемента;
				СтрТаблицаСтрок.Параметры  = СтрокаДерева.Параметры;
				СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров = СтрТаблицаСтрок.СтрокаСокр;
			КонецЕсли;	 

			Продолжить;
		КонецЕсли;	 
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаУсловиеПрепроцессор()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаУсловие()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаУсловиеEng()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаЦикл()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаЦиклEng()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаПопытка()
			или СтрокаДерева.ТипЭлемента = ТипЭлементаПопыткаEng()
			Тогда
			
		Иначе	
			Уровень = Уровень + 1;
			
			СтрТаблицаСтрок                              = ТаблицаСтрок.Добавить();
			Отступ                                       = Уровень*8;
			Если СтрокаДерева.ТипЭлемента = ТипЭлементаТаблица() Тогда
				Отступ = (Уровень+1)*8;
			КонецЕсли;	 
			
			СтрТаблицаСтрок.Отступ                       = Отступ;
			
			Если (СтрокаДерева.ТипЭлемента = ТипЭлементаКомментарий())
				или (СтрокаДерева.ТипЭлемента = ТипЭлементаБлочныйКомментарий())
				или (СтрокаДерева.ТипЭлемента = ТипЭлементаБлочныйКомментарийНачало())
				или (СтрокаДерева.ТипЭлемента = ТипЭлементаБлочныйКомментарийОкончание()) Тогда
				
				Если Найти(СтрокаДерева.ОписаниеЭлемента,"=") = 0 или Уровень = 0 Тогда
					СтрТаблицаСтрок.Строка = СтрокаДерева.ОписаниеЭлемента; //комментарии не трогаем
					СтрТаблицаСтрок.Отступ = 0;
				Иначе	
					//значит это передача параметра снизу вызова подсценария
					Родитель = СтрокаДерева.Родитель;
					Если Родитель <> Неопределено И Родитель.ТипЭлемента <> ТипЭлементаГруппаШагов() Тогда
						СтрТаблицаСтрок.Строка = СтрокаДерева.ОписаниеЭлемента; //комментарии не трогаем
						СтрТаблицаСтрок.Отступ = 0;
					Иначе	
						Отступ = (Уровень+1)*8;
						СтрТаблицаСтрок.Строка = ПолучитьСтрокуОтступПоЧислуПробелов(Отступ) + СокрЛП(СтрокаДерева.ОписаниеЭлемента);
						СтрТаблицаСтрок.Отступ = Отступ;
					КонецЕсли;	 
				КонецЕсли;	 
				
			Иначе	
				СтрТаблицаСтрок.Строка = ПолучитьСтрокуОтступПоЧислуПробелов(Отступ) + СокрЛП(СтрокаДерева.ОписаниеЭлемента);
			КонецЕсли;	 
			
			СтрТаблицаСтрок.СтрокаСокр                   = СтрокаДерева.ОписаниеЭлемента;
			СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров = СтрокаДерева.ОбработаннаяСтрокаПараметров;
			СтрТаблицаСтрок.Параметры                    = СтрокаДерева.Параметры;
			СтрТаблицаСтрок.ТипЭлемента                  = СтрокаДерева.ТипЭлемента;
			
			Если ТипЗнч(СтрокаДерева.ДополнительныеСвойства) = Тип("Структура") Тогда
				Если СтрокаДерева.ДополнительныеСвойства.Свойство("ПараметрыСТипомТаблицы") Тогда
					Для Каждого Элем Из СтрокаДерева.ДополнительныеСвойства.ПараметрыСТипомТаблицы Цикл
						СтрТаблицаСтрок = ТаблицаСтрок.Добавить();
						ПредставлениеПараметра = "[" + Элем + "]";
						СтрТаблицаСтрок.СтрокаСокр = ПредставлениеПараметра;
						СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаПараметрТаблица();
						СтрТаблицаСтрок.Отступ = Отступ+8;
					КонецЦикла;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
		КонецЕсли;	 
		
		РекурсивныйОбходДереваСхемыДляПолученияТекста(СтрокаДерева,ТаблицаСтрок,Уровень);
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаУсловиеПрепроцессор()
			 или СтрокаДерева.ТипЭлемента = ТипЭлементаУсловие()
			 или СтрокаДерева.ТипЭлемента = ТипЭлементаУсловиеEng()
			 или СтрокаДерева.ТипЭлемента = ТипЭлементаЦикл()
			 или СтрокаДерева.ТипЭлемента = ТипЭлементаЦиклEng()
			 или СтрокаДерева.ТипЭлемента = ТипЭлементаПопытка()
			 или СтрокаДерева.ТипЭлемента = ТипЭлементаПопыткаEng()
			 Тогда
			 
		Иначе	
			Уровень = Уровень - 1;
		КонецЕсли;	 
		
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьВыделениеЦветомУсловияЕслиИЦиклыПопытки(ТаблицаСтрок)
	
	КодHTMLДляПодсветки             = "<span style=""color: #ff0000;"">";
	КодHTMLДляПодсветкиПрепроцессор = "<span style=""color: #ff0000;font-weight: bold;"">";
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаКомментарий() Тогда
			Продолжить;
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаБлочныйКомментарий() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		МассивСлов = СтрРазделить(Стр," ",Истина);
		
		ИДПервоеСлово = 0;
		ПервоеСлово   = МассивСлов[0];
		
		Если ПервоеСлово = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НРег_ПервоеСлово = НРег(ПервоеСлово);
		
		ПоследнееСлово = МассивСлов[МассивСлов.Количество()-1];
		
		Если (НРег_ПервоеСлово = КлючевоеСловоЕслиПрепроцессор()) и (НРег(ПоследнееСлово) = КлючевоеСловоТогдаПрепроцессор()) Тогда
			МассивСлов = Новый Массив(3);
			МассивСлов[0] = КодHTMLДляПодсветкиПрепроцессор + "#Если</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
			МассивСлов[2] = КодHTMLДляПодсветкиПрепроцессор + "Тогда</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоЕсли() Тогда
			МассивСлов = Новый Массив(3);
			МассивСлов[0] = КодHTMLДляПодсветки + "Если</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
			МассивСлов[2] = КодHTMLДляПодсветки + "Тогда</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоЕслиEng() Тогда
			МассивСлов = Новый Массив(3);
			МассивСлов[0] = КодHTMLДляПодсветки + "If</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
			МассивСлов[2] = КодHTMLДляПодсветки + "Then</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИначеЕсли() Тогда
			МассивСлов = Новый Массив(3);
			МассивСлов[0] = КодHTMLДляПодсветки + "ИначеЕсли</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
			МассивСлов[2] = КодHTMLДляПодсветки + "Тогда</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИначеЕслиEng() Тогда
			МассивСлов = Новый Массив(3);
			МассивСлов[0] = КодHTMLДляПодсветки + "ElseIf</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
			МассивСлов[2] = КодHTMLДляПодсветки + "Then</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИначеПрепроцессор() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветкиПрепроцессор + "#Иначе</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИначе() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "Иначе</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИначеEng() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "Else</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИначеЕслиПрепроцессор() Тогда
			МассивСлов = Новый Массив(3);
			МассивСлов[0] = КодHTMLДляПодсветкиПрепроцессор + "#ИначеЕсли</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
			МассивСлов[2] = КодHTMLДляПодсветкиПрепроцессор + "Тогда</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоКонецЕслиПрепроцессор() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветкиПрепроцессор + "#КонецЕсли</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоКонецЕсли() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "КонецЕсли</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоКонецЕслиEng() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "EndIf</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоЦикл() Тогда
			МассивСлов = Новый Массив(2);
			МассивСлов[0] = КодHTMLДляПодсветки + "Цикл</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоЦиклEng() Тогда
			МассивСлов = Новый Массив(2);
			МассивСлов[0] = КодHTMLДляПодсветки + "Do</span>";
			МассивСлов[1] = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоКонецЦикла() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "КонецЦикла</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоКонецЦиклаEng() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "EndDo</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоПопытка() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "Попытка</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоПопыткаEng() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "Try</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИсключение() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "Исключение</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоИсключениеEng() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "Except</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоКонецПопытки() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "КонецПопытки</span>";
		ИначеЕсли НРег_ПервоеСлово = КлючевоеСловоКонецПопыткиEng() Тогда
			МассивСлов[ИДПервоеСлово] = КодHTMLДляПодсветки + "EndTry</span>";
		Иначе 
			Продолжить;
		КонецЕсли;	 
		
		СтрТаблицаСтрок.СтрокаСокр = СтрСоединить(МассивСлов," ");
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьВыделениеЦветомМеток(ТаблицаСтрок)
	КодHTMLДляПодсветки = "<span style=""font-style: italic;"">";
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаКомментарий() Тогда
			Продолжить;
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаБлочныйКомментарий() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если (СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаМетка()) или (СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаПерейти()) Тогда
			СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветки + СтрТаблицаСтрок.СтрокаСокр + "</span>";
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтформатироватьГруппыШагов(ТаблицаСтрок)
	КодHTMLДляПодсветки = "<span style=""font-style: normal;font-weight: bold;"">";
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаКомментарий() Тогда
			Продолжить;
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаБлочныйКомментарий() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если (СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаГруппаШагов()) Тогда
			ЭкранироватьУгловыеСкобки(СтрТаблицаСтрок.СтрокаСокр);
			СтрТаблицаСтрок.СтрокаСокр          = КодHTMLДляПодсветки + СтрТаблицаСтрок.СтрокаСокр  + "</span>";
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

Функция ЭтотТипЭлементаСхемыНеНадоФорматироватьПоСтандартуGherkin(ТипЭлемента)
	Если ТипЭлемента = ТипЭлементаГруппаШагов() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаНачалоУсловияПрепроцессор() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначеЕслиПрепроцессор() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначеПрепроцессор() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЕслиПрепроцессор() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаНачалоУсловия() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаНачалоУсловияEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначеЕсли() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначеЕслиEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначе() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначеEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЕсли() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЕслиEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаНачалоЦикла() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаНачалоЦиклаEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЦикла() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЦиклаEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаМетка() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаПерейти() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаПустаяСтрока() Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

Функция УЭтогоЭлементаСхемыНеНадоФорматироватьПараметры(ТипЭлемента)
	Если ТипЭлемента = ТипЭлементаГруппаШагов() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначеПрепроцессор() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЕслиПрепроцессор() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначе() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаИначеEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЕсли() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЕслиEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЦикла() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаКонецЦиклаEng() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаМетка() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаПерейти() Тогда
		Возврат Истина;
	ИначеЕсли ТипЭлемента = ТипЭлементаПустаяСтрока() Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

Процедура ОтформатироватьПервыеСловаGherkin(ТаблицаСтрок)
	МассивПервыхСлов     = МассивПервыхСловGherkin();
	МассивПервыхСловНРег = Новый Массив;
	Для Каждого Стр Из МассивПервыхСлов Цикл
		МассивПервыхСловНРег.Добавить(НРег(Стр));
	КонецЦикла;	
	
	КодHTMLДляПодсветки = "<span style=""color: #0000ff;"">";
	КешТипЭлементаКомментарий = ТипЭлементаКомментарий();
	КешТипЭлементаБлочныйКомментарий = ТипЭлементаБлочныйКомментарий();
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаКомментарий Тогда
			Продолжить;
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаБлочныйКомментарий Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ЭтотТипЭлементаСхемыНеНадоФорматироватьПоСтандартуGherkin(СтрТаблицаСтрок.ТипЭлемента) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		МассивСлов  = СтрРазделить(Стр," ",Истина);
		
		ПервоеСлово   = МассивСлов[0];
		
		Если ПервоеСлово = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		НРегСтр = НРег(Стр);
		НомКлючевоеСлово = -1;
		Для Каждого КлючевоеСлово Из МассивПервыхСловНРег Цикл
			НомКлючевоеСлово = НомКлючевоеСлово + 1;
			Позиция = Найти(НРегСтр, КлючевоеСлово);	
			Если (Позиция = 1) и Сред(НРегСтр,СтрДлина(КлючевоеСлово)+1,1) = " " Тогда 
				СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветки + МассивПервыхСлов[НомКлючевоеСлово]  + "</span>"
				                             + Сред(Стр,СтрДлина(КлючевоеСлово)+1);
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтформатироватьТекстGherkin(ТаблицаСтрок)
	ОтформатироватьПередачуПараметраТипаТаблица(ТаблицаСтрок);
	ОтформатироватьЗаголовокGherkin(ТаблицаСтрок);
	ОтформатироватьСценарийGherkin(ТаблицаСтрок);
	ОтформатироватьКомментарииGherkin(ТаблицаСтрок);
	ОтформатироватьТегиGherkin(ТаблицаСтрок);
	ОтформатироватьПараметрыGherkin(ТаблицаСтрок);
	ОтформатироватьПервыеСловаGherkin(ТаблицаСтрок);
КонецПроцедуры

Процедура ОбработатьВыделениеЦветомШаблонСценария(ТаблицаСтрок)
	КодHTMLДляПодсветки = "<span style=""text-decoration: underline;"">";
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаКомментарий() Тогда
			Продолжить;
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаБлочныйКомментарий() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если (СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаШаблонСценария()) Тогда
			СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветки + СокрЛ(Стр) + "</span>";
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтступУСтрокИСпецСимволы(ТаблицаСтрок,ДополнительныеПараметры)
	КодHTMLДляПодсветкиБезВыделенияТекста = "<span style=""text-decoration: none;"">";
	
	ОбрабатыватьЭкранированныеСпецсимволы = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбрабатыватьЭкранированныеСпецсимволы") Тогда
		Если ДополнительныеПараметры.ОбрабатыватьЭкранированныеСпецсимволы Тогда
			ОбрабатыватьЭкранированныеСпецсимволы = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если ОбрабатыватьЭкранированныеСпецсимволы Тогда
			СтрТаблицаСтрок.СтрокаСокр = СтрЗаменить(СтрТаблицаСтрок.СтрокаСокр,"\[","[");
			СтрТаблицаСтрок.СтрокаСокр = СтрЗаменить(СтрТаблицаСтрок.СтрокаСокр,"\]","]");
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтступ = ПолучитьСтрокуОтступПоЧислуПробелов(СтрТаблицаСтрок.Отступ);
		Если ДополнительныеПараметры.ДелатьРаскраску Тогда
			СтрТаблицаСтрок.Строка = КодHTMLДляПодсветкиБезВыделенияТекста + СтрокаОтступ + "</span>" + СтрТаблицаСтрок.СтрокаСокр;
		Иначе	
			СтрТаблицаСтрок.Строка = СтрокаОтступ + СтрТаблицаСтрок.СтрокаСокр;
		КонецЕсли;	 
	КонецЦикла;	
КонецПроцедуры

Процедура ВставитьТегиВТаблицуСтрок(ТаблицаСтрок,МассивТеги,СтрокаДерева,Отступ)
	Для Каждого ТекстТега Из МассивТеги Цикл
		СтрТаблицаСтрок                              = ТаблицаСтрок.Добавить();
		СтрТаблицаСтрок.Строка                       = ТекстТега;
		СтрТаблицаСтрок.СтрокаСокр                   = ТекстТега;
		СтрТаблицаСтрок.ТипЭлемента                  = ТипЭлементаТег();
		СтрТаблицаСтрок.Отступ                       = Отступ;
	КонецЦикла;	
КонецПроцедуры

Процедура ВставитьКомментарииВТаблицуСтрок(ТаблицаСтрок,МассивКомментарии,СтрокаДерева)
	Для Каждого ТекстКомментария Из МассивКомментарии Цикл
		СтрТаблицаСтрок                              = ТаблицаСтрок.Добавить();
		СтрТаблицаСтрок.Строка                       = ТекстКомментария;
		СтрТаблицаСтрок.СтрокаСокр                   = ТекстКомментария;
		СтрТаблицаСтрок.ТипЭлемента                  = ТипЭлементаКомментарий();
		СтрТаблицаСтрок.Отступ                       = 0;
	КонецЦикла;	
КонецПроцедуры

Процедура ОтформатироватьПараметрыGherkin(ТаблицаСтрок)
	МассивПервыхСловНРег = МассивПервыхСловGherkinНРег();
	
	КодHTMLДляПодсветки = "<span style=""color: #0000ff;"">";
	КодHTMLДляПодсветкиКрасный = "<span style=""color: #ff0000;"">";
	КодHTMLДляПодсветкиЗначениеВозвращаемогоПараметра = "<span style=""color: #0000ff;"">";
	
	КешТипЭлементаКомментарий = ТипЭлементаКомментарий();
	КешТипЭлементаБлочныйКомментарий = ТипЭлементаБлочныйКомментарий();
	
	КешТипЭлементаНачалоУсловияПрепроцессор = ТипЭлементаНачалоУсловияПрепроцессор();
	КешТипЭлементаНачалоУсловия = ТипЭлементаНачалоУсловия();
	КешТипЭлементаНачалоУсловияEng = ТипЭлементаНачалоУсловияEng();
	КешТипЭлементаНачалоЦикла = ТипЭлементаНачалоЦикла();
	КешТипЭлементаНачалоЦиклаEng = ТипЭлементаНачалоЦиклаEng();
	
	КешТипЭлементаИначеЕслиПрепроцессор = ТипЭлементаИначеЕслиПрепроцессор();
	КешТипЭлементаИначеЕсли = ТипЭлементаИначеЕсли();
	КешТипЭлементаИначеЕслиEng = ТипЭлементаИначеЕслиEng();
	
	КешТипЭлементаПередачаПараметров = ТипЭлементаПередачаПараметров();
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаКомментарий Тогда
			Продолжить;
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаБлочныйКомментарий Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если УЭтогоЭлементаСхемыНеНадоФорматироватьПараметры(СтрТаблицаСтрок.ТипЭлемента) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаПараметрТаблица() Тогда
			КодHTMLДляПодсветки = "<span style=""color: #008000;"">";
			СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветки + СтрТаблицаСтрок.СтрокаСокр + "</span>";
			Продолжить;
		КонецЕсли;	 
		
		Если СтрТаблицаСтрок.Параметры = Неопределено Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если СтрТаблицаСтрок.Параметры.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ТипВыделенияПараметра = Неопределено;
		
		Если СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаНачалоУсловияПрепроцессор
			 или СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаНачалоУсловия
			 или СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаНачалоУсловияEng
			 или СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаНачалоЦикла
			 или СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаНачалоЦиклаEng
			 Тогда
			Стр = СтрТаблицаСтрок.СтрокаСокр;
			ТипВыделенияПараметра = ТипВыделенияПараметраУсловие();
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаИначеЕслиПрепроцессор
			 или СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаИначеЕсли 
			 или СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаИначеЕслиEng 
			 Тогда
			Стр = СтрТаблицаСтрок.СтрокаСокр;
			ТипВыделенияПараметра = ТипВыделенияПараметраУсловие();
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаПередачаПараметров Тогда
			Стр = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
			ТипВыделенияПараметра = ТипВыделенияПередачаПараметров();
		Иначе	
			Стр = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
		КонецЕсли;	 
		
		ПодсветкаСтрокиПоПараметрам(Стр,СтрТаблицаСтрок.Параметры,ТипВыделенияПараметра);
		
		Если СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаНачалоУсловияПрепроцессор Тогда
			СтрТаблицаСтрок.СтрокаСокр = Стр;
		ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = КешТипЭлементаИначеЕслиПрепроцессор Тогда
			СтрТаблицаСтрок.СтрокаСокр = Стр;
		Иначе	
			СтрТаблицаСтрок.СтрокаСокр = Стр;
		КонецЕсли;	 
		
		Если СтрТаблицаСтрок.Параметры.Количество() = 1 Тогда
			ПараметрСценария = СтрТаблицаСтрок.Параметры[0];
			Если СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметра() Тогда
				Если ПараметрСценария.Свойство("ВозвратЗначенияПараметра")
					И ПараметрСценария.ВозвратЗначенияПараметра Тогда
					СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветкиКрасный + "Возврат " + "</span>"
					+ КодHTMLДляПодсветкиЗначениеВозвращаемогоПараметра + ПараметрСценария.ИмяПараметра + "</span>";
				ИначеЕсли ПараметрСценария.Свойство("ВозвратЗначенияПараметраССинонимом")
					И ПараметрСценария.ВозвратЗначенияПараметраССинонимом Тогда
					СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветкиКрасный + "Возврат " + "</span>"
					+ ПараметрСценария.ИмяПараметра
					+ " как " + КодHTMLДляПодсветкиЗначениеВозвращаемогоПараметра
					+ ПараметрСценария.СинонимВозвращаемогоЗначения + "</span>";
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаВозвратЗначенияПараметраEng() Тогда
				Если ПараметрСценария.Свойство("ВозвратЗначенияПараметра")
					И ПараметрСценария.ВозвратЗначенияПараметра Тогда
					СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветкиКрасный + "Return " + "</span>"
					+ КодHTMLДляПодсветкиЗначениеВозвращаемогоПараметра + ПараметрСценария.ИмяПараметра + "</span>";
				ИначеЕсли ПараметрСценария.Свойство("ВозвратЗначенияПараметраССинонимом")
					И ПараметрСценария.ВозвратЗначенияПараметраССинонимом Тогда
					СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветкиКрасный + "Return " + "</span>"
					+ ПараметрСценария.ИмяПараметра
					+ " as " + КодHTMLДляПодсветкиЗначениеВозвращаемогоПараметра
					+ ПараметрСценария.СинонимВозвращаемогоЗначения + "</span>";
				КонецЕсли;	 
			ИначеЕсли СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаПрисвоениеВозвращаемогоПараметра()
				ИЛИ СтрТаблицаСтрок.ТипЭлемента = ТипЭлементаПрисвоениеВозвращаемогоПараметраEng() Тогда
				Если ПараметрСценария.Свойство("ПрисвоениеВозвращаемогоПараметра")
					И ПараметрСценария.ПрисвоениеВозвращаемогоПараметра Тогда
					СтрТаблицаСтрок.СтрокаСокр =  ПараметрСценария.ИмяПараметра + " = "
					+ КодHTMLДляПодсветкиЗначениеВозвращаемогоПараметра
					+ ПараметрСценария.ЗначениеПараметра + "</span>";
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		
	КонецЦикла;	
КонецПроцедуры

Процедура ОтформатироватьКомментарииGherkin(ТаблицаСтрок)
	МассивПервыхСловНРег     = МассивПервыхСловGherkinНРег();
	
	КодHTMLДляПодсветки = "<span style=""color: #009646;"">";
	
	КешТипЭлементаКомментарий = ТипЭлементаКомментарий();
	КешТипЭлементаБлочныйКомментарий = ТипЭлементаБлочныйКомментарий();
	КешТипЭлементаБлочныйКомментарийНачало = ТипЭлементаБлочныйКомментарийНачало();
	КешТипЭлементаБлочныйКомментарийОкончание = ТипЭлементаБлочныйКомментарийОкончание();
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаКомментарий
			И СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаБлочныйКомментарий
			И СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаБлочныйКомментарийНачало
		    И СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаБлочныйКомментарийОкончание Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЭкранироватьУгловыеСкобки(Стр);
		СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветки + Стр  + "</span>";
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтформатироватьТегиGherkin(ТаблицаСтрок)
	МассивПервыхСловНРег     = МассивПервыхСловGherkinНРег();
	
	КодHTMLДляПодсветки = "<span style=""color: #0000ff;"">";
	
	КешТипЭлементаТег = ТипЭлементаТег();
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаТег Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		СтрТаблицаСтрок.СтрокаСокр = КодHTMLДляПодсветки + Стр  + "</span>";
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтформатироватьЗаголовокGherkin(ТаблицаСтрок)
	МассивПервыхСловНРег     = МассивПервыхСловGherkinНРег();
	
	КодHTMLПервоеСлово   = "<span style=""color: #2C75B3;"">";
	КодHTMLОсновнойТекст = "<span style=""color: #CE743A;"">";
	
	КешТипЭлементаЗаголовок = ТипЭлементаЗаголовок();
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если (СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаЗаголовок) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЭкранироватьУгловыеСкобки(Стр);
		
		МассивСлов  = СтрРазделить(Стр," ",Истина);
		ПервоеСлово = МассивСлов[0];
		ПервоеСлово = КодHTMLПервоеСлово + ПервоеСлово  + "</span>";
		
		МассивСлов.Удалить(0);
		ВтораяЧастьСтроки = СтрСоединить(МассивСлов," ");
		ВтораяЧастьСтроки = КодHTMLОсновнойТекст + ВтораяЧастьСтроки  + "</span>";
		
		СтрТаблицаСтрок.СтрокаСокр = ПервоеСлово + " " + ВтораяЧастьСтроки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтформатироватьСценарийGherkin(ТаблицаСтрок)
	МассивПервыхСловНРег     = МассивПервыхСловGherkinНРег();
	
	КодHTMLПервоеСлово   = "<span style=""color: #2C75B3;"">";
	КодHTMLОсновнойТекст = "<span style=""color: #CE743A;"">";
	
	КешТипЭлементаСценарий = ТипЭлементаСценарий();
	КешТипЭлементаКонтекст = ТипЭлементаКонтекст();
	
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если (СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаСценарий)
			и (СтрТаблицаСтрок.ТипЭлемента <> КешТипЭлементаКонтекст) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.СтрокаСокр;
		
		Если Стр = "" Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЭкранироватьУгловыеСкобки(Стр);
		
		МассивСлов  = СтрРазделить(Стр," ",Истина);
		ПервоеСлово = МассивСлов[0];
		ПервоеСлово = КодHTMLПервоеСлово + ПервоеСлово  + "</span>";
		
		МассивСлов.Удалить(0);
		ВтораяЧастьСтроки = СтрСоединить(МассивСлов," ");
		ВтораяЧастьСтроки = КодHTMLОсновнойТекст + ВтораяЧастьСтроки  + "</span>";
		
		СтрТаблицаСтрок.СтрокаСокр = ПервоеСлово + " " + ВтораяЧастьСтроки;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПодсветкаСтрокиПоПараметрам(Стр,Параметры,ТипВыделенияПараметра)
	ПодсветкаСтрокиПараметровИзменяемыеПараметры(Стр,Параметры,"КвадратныеСкобки",ТипВыделенияПараметра);
	ПодсветкаСтрокиПараметровСтрока(Стр,Параметры,"Кавычки",ТипВыделенияПараметра);
	ПодсветкаСтрокиПараметровСтрока(Стр,Параметры,"Апострофы",ТипВыделенияПараметра);
	ПодсветкаСтрокиПараметровДата(Стр,Параметры,ТипВыделенияПараметра);
	ПодсветкаСтрокиПараметровЧисло(Стр,Параметры,ТипВыделенияПараметра);
КонецПроцедуры

Процедура ПодсветкаСтрокиПараметровСтрока(Стр,Параметры,Вид,ТипВыделенияПараметра)
	КодHTMLДляПодсветкиИзменяемыйПараметр = "<span style=""color: #008000;"">";
	КодHTMLДляПодсветки = "<span style=""color: #b8860b;"">";
	
	Если ТипВыделенияПараметра = ТипВыделенияПередачаПараметров() Тогда
		КодHTMLДляПодсветкиИзменяемыйПараметр = "<span style=""color: #008000;font-style: italic;"">";
		КодHTMLДляПодсветки = "<span style=""color: #b8860b;font-style: italic;"">";
	КонецЕсли;	 
	
	
	Тип = ТипПараметра("Строка");
	КолПараметров = 0;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;	 
		Если Параметр.Вид <> Вид Тогда
			Продолжить;
		КонецЕсли;	 
		
		КолПараметров = КолПараметров + 1;
		
		ЗначениеПараметра = Параметр.ЗначениеПараметра;
		
		Если ТипЗнч(Параметр.ВложенныеПараметры) = Тип("Массив") Тогда
			КолПараметровВложенные = 0;
			ЗначениеПараметра = Параметр.ЗначениеПараметраВложенное;
			ЭкранироватьСпецСимволы(ЗначениеПараметра, Параметр.Символ);
			Для Каждого ВложенныйПараметр Из Параметр.ВложенныеПараметры Цикл
				КолПараметровВложенные = КолПараметровВложенные + 1;
				Если ВложенныйПараметр.Свойство("НовоеИмяПараметра") Тогда
					НовоеИмяПараметра = ВложенныйПараметр.НовоеИмяПараметра;
				Иначе	
					НовоеИмяПараметра = ВложенныйПараметр.ЗначениеПараметра;
				КонецЕсли;	 
				
				ЗначениеВложенногоПараметра = КодHTMLДляПодсветкиИзменяемыйПараметр 
				     + "[" + НовоеИмяПараметра + "]" + "</span>";
					 
				ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра,"~ПараметрСтрока" + ВложенныйПараметр.Вид 
				   + XMLСтрока(КолПараметровВложенные) + "~",ЗначениеВложенногоПараметра);
					 
			КонецЦикла;	
			
			ЗначениеПараметра = КодHTMLДляПодсветки + ЗначениеПараметра + "</span>";
			
			Стр = СтрЗаменить(Стр,"~Параметр" + Тип + Вид + XMLСтрока(КолПараметров) + "~",
										Параметр.Символ + ЗначениеПараметра + Параметр.Символ);
			
			Продолжить;
		КонецЕсли;	 
		
		ЭтотПараметрЯвляетсяТолькоЗначением = ЭтотПараметрЯвляетсяТолькоЗначением(ЗначениеПараметра);
		
		ЭкранироватьСпецСимволы(ЗначениеПараметра, Параметр.Символ);
		
		Если НЕ ЭтотПараметрЯвляетсяТолькоЗначением Тогда
			ЗначениеПараметра = КодHTMLДляПодсветки + ЗначениеПараметра + "</span>";
		КонецЕсли;	 
		
		Стр               = СтрЗаменить(Стр,"~Параметр" + Тип + Вид + XMLСтрока(КолПараметров) + "~",
										Параметр.Символ + ЗначениеПараметра + Параметр.Символ);
	КонецЦикла;	
КонецПроцедуры

Процедура ПодсветкаСтрокиПараметровИзменяемыеПараметры(Стр,Параметры,Вид,ТипВыделенияПараметра)
	КодHTMLДляПодсветки = "<span style=""color: #008000;"">";
	Если ТипВыделенияПараметра = ТипВыделенияПередачаПараметров() Тогда
		КодHTMLДляПодсветки = "<span style=""color: #008000;font-style: italic;"">";
	КонецЕсли;	 
	
	Тип = ТипПараметра("Строка");
	КолПараметров = 0;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;	 
		Если Параметр.Вид <> Вид Тогда
			Продолжить;
		КонецЕсли;	 
		
		КолПараметров = КолПараметров + 1;
		
		ЗначениеПараметра = Параметр.ЗначениеПараметра;
		
		ЭкранироватьСпецСимволы(ЗначениеПараметра, Параметр.Символ);
		
		ЗначениеПараметра = КодHTMLДляПодсветки + ЗначениеПараметра + "</span>";
		
		Стр               = СтрЗаменить(Стр,"~ПараметрСтрока" + Вид + XMLСтрока(КолПараметров) + "~",
										"[" + ЗначениеПараметра + "]");
	КонецЦикла;	
КонецПроцедуры

Процедура ПодсветкаСтрокиПараметровДата(Стр,Параметры,ТипВыделенияПараметра)
	КодHTMLДляПодсветки = "<span style=""color: #CE9164;"">";
	Если ТипВыделенияПараметра = ТипВыделенияПередачаПараметров() Тогда
		КодHTMLДляПодсветки = "<span style=""color: #CE9164;font-style: italic;"">";
	КонецЕсли;	 
	
	Тип = ТипПараметра("Дата");
	КолПараметров = 0;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;	 
		КолПараметров = КолПараметров + 1;
		
		ЗначениеПараметра = Параметр.ЗначениеПараметра;
		
		ЭкранироватьСпецСимволы(ЗначениеПараметра, Параметр.Символ);
		
		ЗначениеПараметра = КодHTMLДляПодсветки + ЗначениеПараметра + "</span>";
		Стр               = СтрЗаменить(Стр,"~Параметр" + Тип + XMLСтрока(КолПараметров) + "~",ЗначениеПараметра);
	КонецЦикла;	
КонецПроцедуры

Процедура ПодсветкаСтрокиПараметровЧисло(Стр,Параметры,ТипВыделенияПараметра)
	КодHTMLДляПодсветки = "<span style=""color: #CE9164;"">";
	Если ТипВыделенияПараметра = ТипВыделенияПередачаПараметров() Тогда
		КодHTMLДляПодсветки = "<span style=""color: #CE9164;font-style: italic;"">";
	КонецЕсли;	 
	
	Тип = ТипПараметра("Число");
	КолПараметров = 0;
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Тип <> Тип Тогда
			Продолжить;
		КонецЕсли;	 
		КолПараметров = КолПараметров + 1;
		
		ЗначениеПараметра = Параметр.ЗначениеПараметра;
		
		ЭкранироватьСпецСимволы(ЗначениеПараметра, Параметр.Символ);
		
		ЗначениеПараметра = КодHTMLДляПодсветки + ЗначениеПараметра + "</span>";
		Стр               = СтрЗаменить(Стр,"~Параметр" + Тип + XMLСтрока(КолПараметров) + "~",ЗначениеПараметра);
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьВерсииШаблоновРекурсивно(Дерево,ВерсииШаблонов,ТаблицаШаблоновСценариев,МассивПервыхСловНРег,Уровень, ПараметрыВерсийСценариев)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаШаблонСценария() Тогда
			Снипет = СтрокаДерева.ОписаниеЭлемента;
			СнипетПоСтроке(Снипет,МассивПервыхСловНРег);
			СнипетНРег = НРег(Снипет);
			
			СтрокаТаблицаШаблоновСценариев = ТаблицаШаблоновСценариев.Найти(СнипетНРег,"СнипетНРег");
			Если СтрокаТаблицаШаблоновСценариев = Неопределено Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден подсценарий, соответствующий строке: %1'"),
																				  СнипетНРег);
			КонецЕсли;	 
			
			Если ПараметрыВерсийСценариев.Свойство("ЧтениеИзGit") И ПараметрыВерсийСценариев.ЧтениеИзGit Тогда
				СтрокаВерсииШаблонов = ВерсииШаблонов.Найти(СтрокаТаблицаШаблоновСценариев.UID,"UID");
			Иначе	
				СтрокаВерсииШаблонов = ВерсииШаблонов.Найти(СтрокаТаблицаШаблоновСценариев.Ссылка,"Шаблон");
			КонецЕсли;	 
			
			Если СтрокаВерсииШаблонов = Неопределено Тогда
				СтрокаВерсииШаблонов = ВерсииШаблонов.Добавить();
				Если ПараметрыВерсийСценариев.Свойство("ЧтениеИзGit") И ПараметрыВерсийСценариев.ЧтениеИзGit Тогда
					СтрокаВерсииШаблонов.UID = СтрокаТаблицаШаблоновСценариев.UID;
					СтрокаВерсииШаблонов.Шаблон = СтрокаТаблицаШаблоновСценариев.Наименование;
				Иначе	
					СтрокаВерсииШаблонов.Шаблон = СтрокаТаблицаШаблоновСценариев.Ссылка;
				КонецЕсли;	  
			КонецЕсли;	 
			СтрокаВерсииШаблонов.Версия = СтрокаТаблицаШаблоновСценариев.ВерсияСценария;
			
			Если Уровень = 1 Тогда
				СтрокаВерсииШаблонов.ВЭтомСценарии = Истина;
			Иначе	
				СтрокаВерсииШаблонов.ВЭтомСценарии = Ложь;
			КонецЕсли;	 
			
			Уровень = Уровень + 1;
			ЗаполнитьВерсииШаблоновРекурсивно(СтрокаДерева,ВерсииШаблонов,ТаблицаШаблоновСценариев,
				МассивПервыхСловНРег,Уровень,ПараметрыВерсийСценариев);
			Уровень = Уровень - 1;
			
		Иначе	
			ЗаполнитьВерсииШаблоновРекурсивно(СтрокаДерева,ВерсииШаблонов,ТаблицаШаблоновСценариев,
				МассивПервыхСловНРег,Уровень,ПараметрыВерсийСценариев);
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВставитьВКаждыйСценарийПроверкуЧтоФОСНесколькимиЗначениямиИмеютНужноеЗначение(ТекстыСценариев,
	                                                                         ФОИмеющиеНесколькоЗначений)
	ИменаФО = Новый Массив;
	Для Каждого ФО Из ФОИмеющиеНесколькоЗначений Цикл
		ИменаФО.Добавить(ФО.Имя);
	КонецЦикла;	
	
	Для Каждого ОбъектСценария Из ТекстыСценариев Цикл
		ПараметрыСНесколькимиЗначениями = ОбъектСценария.ПараметрыСНесколькимиЗначениями;
		Если ПараметрыСНесколькимиЗначениями.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		ТекстСценария = СтрРазделить(ОбъектСценария.ТекстСценария,Символы.ПС);
		
		Ид = 0;
		Для Каждого ДанныеПараметра Из ПараметрыСНесколькимиЗначениями Цикл
			
			Если ИменаФО.Найти(ДанныеПараметра.ИмяПараметра) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	 
			
			Ид = Ид + 1 + 1;
			ТекстСценария.Вставить(Ид,Символы.Таб + "И я проверяю что ФО """ + ДанныеПараметра.ИмяПараметра 
			                                + """ имеет значение """ + ДанныеПараметра.ЗначениеПараметра + """");
		КонецЦикла;	
		
		ОбъектСценария.ТекстСценария = СтрСоединить(ТекстСценария,Символы.ПС);
		
	КонецЦикла;	
КонецПроцедуры

Функция ОсновнойТекст(ТекстЗаголовок,ТекстОбщийКонтекст,ТекстыСценариев,
	             ЗаголовокЗначенияПараметровСценария,ДанныеНомеровСтрок)
				 
	КоличествоПереводовСтроки = 3;
	
	Если ЗначениеЗаполнено(ЗаголовокЗначенияПараметровСценария) Тогда
		ПерваяЧасть = СокрЛ(ТекстЗаголовок + Символы.ПС + Символы.ПС)
						+ ЗаголовокЗначенияПараметровСценария + Символы.ПС + Символы.ПС + ТекстОбщийКонтекст;
	Иначе	
		ПерваяЧасть = СокрЛ(ТекстЗаголовок + Символы.ПС + Символы.ПС) + ТекстОбщийКонтекст;
	КонецЕсли;	
							   
	Если НЕ ПустаяСтрока(ТекстОбщийКонтекст) Тогда
		ПерваяЧасть = ПерваяЧасть + Символы.ПС + Символы.ПС;
	КонецЕсли;	 							   
							   
	МассивСтрок = СтрРазделить(ПерваяЧасть,Символы.ПС);
	ВысотаЗаголовка = МассивСтрок.Количество()-1;
	
	Смещение = ВысотаЗаголовка;
	МассивТекстов = Новый Массив;
	Для Каждого ОбъектСценария Из ТекстыСценариев Цикл
		МассивТекстов.Добавить(ОбъектСценария.ТекстСценария);
		
		Если ДанныеНомеровСтрок <> Неопределено Тогда
			Для Каждого ТекДанные Из ОбъектСценария.ДанныеНомеровСтрок Цикл
				НомерСтрокиЛинейногоСценария = ТекДанные.НомерСтрокиЛинейногоСценария;
				ТекДанные.Вставить("НомерСтрокиЛинейногоСценария",
				   НомерСтрокиЛинейногоСценария + Смещение);
				ДанныеНомеровСтрок.Добавить(ТекДанные);
			КонецЦикла;	
			
			МассивСтрок = СтрРазделить(ОбъектСценария.ТекстСценария,Символы.ПС);
			
			Смещение = Смещение + МассивСтрок. Количество() - 1 + КоличествоПереводовСтроки;
		КонецЕсли;	 
	КонецЦикла;	
	
	ТекстыСценариев = ТекстСценарияИзМассива(МассивТекстов,КоличествоПереводовСтроки);
	
	Возврат ПерваяЧасть + ТекстыСценариев;
КонецФункции	

Функция ТекстОбщийКонтекст(ФОИмеющиеОдноЗначение,ШагиДоТеста,ПараметрыПодключения, ТекстЗаголовок)
	Массив = Новый Массив;
	
	Если ПараметрыПодключения <> Неопределено Тогда
		Если Найти(ТекстЗаголовок, "#language: en") = 0 Тогда
			Стр = СтрШаблон(
			   "	И я подключаю TestClient ""%1"" логин ""%2"" пароль ""%3""",
			  ПараметрыПодключения.ИмяПрофиля, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль);
		Иначе	
			Стр = СтрШаблон(
			   "	And I connect ""%1"" TestClient using ""%2"" login and ""%3"" password",
			  ПараметрыПодключения.ИмяПрофиля, ПараметрыПодключения.Логин, ПараметрыПодключения.Пароль);
		КонецЕсли;	 
		  
		Массив.Добавить(Стр);  
	КонецЕсли;	 
	
	Если Найти(ТекстЗаголовок, "#language: en") = 0 Тогда
		Массив.Добавить("	И Я закрыл все окна клиентского приложения");
	Иначе	
		Массив.Добавить("	And I close all client application windows");
	КонецЕсли;	 
	
	Для Каждого ФО Из ФОИмеющиеОдноЗначение Цикл
		Стр = СтрШаблон(НСтр(
		"ru = '	И я проверяю что ФО ""%1"" имеет значение ""%2""'"),
     	  ФО.Имя, ФО.Значение);

		Массив.Добавить(Стр);  
	КонецЦикла;	
	
	Для Каждого Шаг Из ШагиДоТеста Цикл
		Массив.Добавить(" " + Шаг);
	КонецЦикла;	
	
	Если Массив.Количество() > 0 Тогда
		Массив.Вставить(0,"Контекст:");
	КонецЕсли;	 
	
	Возврат СтрСоединить(Массив,Символы.ПС);
КонецФункции	

Функция ТекстЗаголовок(Параметры, ТекстыСценариев, ТекстТеги)
	Процесс = Параметры.Процесс;
	СтрокаУровеньОтчета = "";
	Если Параметры.ЧтениеИзТекста Тогда
		СтрокаУровеньОтчета = "#report.feature=" + Параметры.УровеньОтчета1 
		+ Символы.ПС + "#report.story=" + Параметры.УровеньОтчета2 + Символы.ПС;
	КонецЕсли;	 
	Часть1 = "#language: ru" + Символы.ПС + "@tree" + Символы.ПС;
	Если НЕ ПустаяСтрока(ТекстТеги) Тогда
		Часть1 = Часть1 + ТекстТеги + Символы.ПС;
	КонецЕсли;	 
	Часть1 = Часть1 + СтрокаУровеньОтчета + "Функциональность: ";
	Если ТекстыСценариев.Количество() > 0 Тогда
		Если Найти(ТекстыСценариев[0].ТекстСценария, "#language: en") > 0 Тогда
			Часть1 = СтрЗаменить(Часть1, "#language: ru", "#language: en");
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.ЧтениеИзТекста Тогда
		Возврат Часть1 + Параметры.ИмяНастройки; 
	Иначе	
		Если ТипЗнч(Процесс) = Тип("Строка") Тогда
			Возврат Часть1 + Процесс; 
		Иначе	
			Возврат Часть1 + СокрЛП(Параметры.ДанныеОбъекта.Наименование);
		КонецЕсли;	 
	КонецЕсли;	 
КонецФункции	

Функция ВставитьТекстОкончаниеВСценарии(ШагиПроверка,ШагиПослеТеста,ТекстыСценариев)
	
	Для Каждого ОбъектСценарий Из ТекстыСценариев Цикл
		Массив = СтрРазделить(ОбъектСценарий.ТекстСценария,Символы.ПС);
		
		Если ШагиПроверка.Количество() > 0 Тогда
			Массив.Добавить("# секция проверки");
		КонецЕсли;	 
		Для Каждого Шаг Из ШагиПроверка Цикл
			Массив.Добавить(Шаг);
		КонецЦикла;	
		
		Если ШагиПослеТеста.Количество() > 0 Тогда
			Массив.Добавить("# секция после теста");
		КонецЕсли;	 
		Для Каждого Шаг Из ШагиПослеТеста Цикл
			Массив.Добавить(Шаг);
		КонецЦикла;	
		
		ОбъектСценарий.ТекстСценария = СтрСоединить(Массив,Символы.ПС); 
	КонецЦикла;	
	
КонецФункции	

Функция ТекстСценарияИзМассива(МассивТекстов,КоличествоПереводовСтроки)
	ПереводовСтроки = "";
	Для Ккк = 1 По КоличествоПереводовСтроки Цикл
		ПереводовСтроки = ПереводовСтроки + Символы.ПС;
	КонецЦикла;	
	
	Возврат СтрСоединить(МассивТекстов,ПереводовСтроки);
КонецФункции	

Процедура ЗаполнитьПараметрТипаТаблица(СтрокаДерева,ТаблицаПараметров)
	Если СтрокаДерева.ДополнительныеСвойства <> Неопределено Тогда
		Если СтрокаДерева.ДополнительныеСвойства.Свойство("ПараметрыСТипомТаблицы") Тогда
			Для Каждого Элем Из СтрокаДерева.ДополнительныеСвойства.ПараметрыСТипомТаблицы Цикл
				СтрокаПараметрыВходящие = ТаблицаПараметров.Найти(Элем,"Имя");
				Если СтрокаПараметрыВходящие = Неопределено Тогда
					СтрПараметрыВходящие              = ТаблицаПараметров.Добавить();
					СтрПараметрыВходящие.Имя          = Элем;
					СтрПараметрыВходящие.Значение     = "";
					СтрПараметрыВходящие.ТипПараметра = ТипПараметра("Таблица");
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры 

// Рекурсивно обходит дерево значений и заполняет таблицу параметров
Процедура ЗаполнитьПараметрыВходящиеИзДереваРекурсивно(Дерево,ТаблицаПараметров,ИДОбщий)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.Параметры <> Неопределено и СтрокаДерева.Параметры.Количество() > 0 Тогда
			Если (СтрокаДерева.ТипЭлемента = ТипЭлементаНачалоУсловияПрепроцессор())
				или (СтрокаДерева.ТипЭлемента = ТипЭлементаИначеЕслиПрепроцессор()) Тогда
				
				НомерПараметра = 0;
				Для Каждого ПараметрУсловия Из СтрокаДерева.Параметры Цикл
					
					НомерПараметра         = НомерПараметра + 1;
					ЭтоСтандартныйПараметр = Истина;
					ИДОбщий                = ИДОбщий + 1;
					НовоеИмяПараметра      = ПараметрУсловия.ЗначениеПараметра;
					ПараметрУсловия.Вставить("НовоеИмяПараметра",ПараметрУсловия.ИмяПараметра);
					
					СтрокаПараметрыВходящие = ТаблицаПараметров.Найти(ПараметрУсловия.ИмяПараметра,"Имя");
					
					Если ПараметрУсловия.ИзменяемыйПараметр И СтрокаПараметрыВходящие = Неопределено Тогда
						СтрПараметрыВходящие          = ТаблицаПараметров.Добавить();
						СтрПараметрыВходящие.Имя      = ПараметрУсловия.ИмяПараметра;
						Если ПараметрУсловия.СвязанСФО Тогда
							СтрПараметрыВходящие.ФО       = ПараметрУсловия.ИмяПараметра
						КонецЕсли;	 
						
						СтрПараметрыВходящие.Значение     = "";
						СтрПараметрыВходящие.ТипПараметра = ПараметрУсловия.Тип;
					ИначеЕсли ПараметрУсловия.ВложенныеПараметры <> Неопределено	Тогда
						Для Каждого ВложенныйПараметр Из ПараметрУсловия.ВложенныеПараметры Цикл
							НовоеИмяПараметра      = ВложенныйПараметр.ЗначениеПараметра;
							ВложенныйПараметр.Вставить("НовоеИмяПараметра",НовоеИмяПараметра);
							
							СтрокаПараметрыВходящие = ТаблицаПараметров.Найти(НовоеИмяПараметра,"Имя");
							Если ВложенныйПараметр.ИзменяемыйПараметр И СтрокаПараметрыВходящие = Неопределено Тогда
								СтрПараметрыВходящие              = ТаблицаПараметров.Добавить();
								СтрПараметрыВходящие.Имя          = НовоеИмяПараметра;
								СтрПараметрыВходящие.Значение     = ВложенныйПараметр.ЗначениеПараметра;
								СтрПараметрыВходящие.ТипПараметра = ВложенныйПараметр.Тип;
							КонецЕсли;	 
						КонецЦикла;	
					КонецЕсли;	 
					
				КонецЦикла;	
				
			Иначе	
				НомерПараметра = 0;
				Для Каждого ПараметрСтроки Из СтрокаДерева.Параметры Цикл
					ОбработатьПараметрСценария(ПараметрСтроки, НомерПараметра, ТаблицаПараметров, ИДОбщий);
					
					Если ПараметрСтроки.Свойство("ЗначениеПараметраПодстановкаЗначений") Тогда
						Для Каждого ЗначениеПараметраПодстановкаЗначений Из ПараметрСтроки.ЗначениеПараметраПодстановкаЗначений Цикл
							Для Каждого ПараметрСтрокиПодстановка Из ЗначениеПараметраПодстановкаЗначений.Параметры Цикл
								ОбработатьПараметрСценария(ПараметрСтрокиПодстановка, НомерПараметра, ТаблицаПараметров, ИДОбщий);
							КонецЦикла;	 
						КонецЦикла;	 
					КонецЕсли;	 
					
				КонецЦикла;	
				
				ЗаполнитьПараметрТипаТаблица(СтрокаДерева,ТаблицаПараметров);
				
			КонецЕсли;	 
		Иначе
			ЗаполнитьПараметрТипаТаблица(СтрокаДерева,ТаблицаПараметров);
		КонецЕсли;
		
		Если СтрокаДерева.ТипЭлемента = ТипЭлементаШаблонСценария() Тогда
			Продолжить;
		КонецЕсли;	 
		
		ЗаполнитьПараметрыВходящиеИзДереваРекурсивно(СтрокаДерева,ТаблицаПараметров,ИДОбщий);
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьПараметрСценария(ПараметрСтроки, НомерПараметра, ТаблицаПараметров, ИДОбщий)
	НомерПараметра         = НомерПараметра + 1;
	ЭтоСтандартныйПараметр = Истина;
	ИДОбщий                = ИДОбщий + 1;
	НовоеИмяПараметра      = ПараметрСтроки.ЗначениеПараметра;
	ПараметрСтроки.Вставить("НовоеИмяПараметра",НовоеИмяПараметра);
	
	СтрокаПараметрыВходящие = ТаблицаПараметров.Найти(НовоеИмяПараметра,"Имя");
	
	Если ПараметрСтроки.ИзменяемыйПараметр И СтрокаПараметрыВходящие = Неопределено Тогда
		СтрПараметрыВходящие              = ТаблицаПараметров.Добавить();
		СтрПараметрыВходящие.Имя          = НовоеИмяПараметра;
		СтрПараметрыВходящие.Значение     = "";
		СтрПараметрыВходящие.ТипПараметра = ПараметрСтроки.Тип;
	ИначеЕсли ПараметрСтроки.Свойство("ВложенныеПараметры") и ПараметрСтроки.ВложенныеПараметры <> Неопределено	Тогда
		Для Каждого ВложенныйПараметр Из ПараметрСтроки.ВложенныеПараметры Цикл
			НовоеИмяПараметра      = ВложенныйПараметр.ЗначениеПараметра;
			ВложенныйПараметр.Вставить("НовоеИмяПараметра",НовоеИмяПараметра);
			
			СтрокаПараметрыВходящие = ТаблицаПараметров.Найти(НовоеИмяПараметра,"Имя");
			Если ВложенныйПараметр.ИзменяемыйПараметр И СтрокаПараметрыВходящие = Неопределено Тогда
				СтрПараметрыВходящие              = ТаблицаПараметров.Добавить();
				СтрПараметрыВходящие.Имя          = НовоеИмяПараметра;
				СтрПараметрыВходящие.Значение     = "";
				СтрПараметрыВходящие.ТипПараметра = ВложенныйПараметр.Тип;
			КонецЕсли;	 
		КонецЦикла;	
	КонецЕсли;	 
КонецПроцедуры 

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение                - Строка - проверяемая строка.
//  УчитыватьЛидирующиеНули - Булево - флаг учета лидирующих нулей, если Истина, то ведущие нули пропускаются.
//  УчитыватьПробелы        - Булево - флаг учета пробелов, если Истина, то пробелы при проверке игнорируются.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач УчитыватьЛидирующиеНули = Истина, Знач УчитыватьПробелы = Истина)
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчитыватьПробелы Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не УчитыватьЛидирующиеНули Тогда
		Позиция = 1;
		// Взятие символа за границей строки возвращает пустую строку.
		Пока Сред(Значение, Позиция, 1) = "0" Цикл
			Позиция = Позиция + 1;
		КонецЦикла;
		Значение = Сред(Значение, Позиция);
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

Функция ПолучитьДеревоСценария(Сценарий,СтруктураПараметров, СценарийUID = Неопределено)
	Если СтруктураПараметров.Свойство("ЧтениеИзGit") И СтруктураПараметров.ЧтениеИзGit Тогда
 		Возврат ПолучитьДеревоСценарияИзGit(Сценарий,СтруктураПараметров,СценарийUID);
	ИначеЕсли СтруктураПараметров.ЧтениеИзТекста Тогда
 		Возврат ПолучитьДеревоСценарияИзФайла(Сценарий,СтруктураПараметров,СценарийUID);
	Иначе
		
		КомпилироватьСценарий = Ложь;
		Если СтруктураПараметров.Свойство("КомпилироватьСценарий") Тогда
			КомпилироватьСценарий = СтруктураПараметров.КомпилироватьСценарий;
		КонецЕсли;	 
		
		Если КомпилироватьСценарий Тогда
			ДеревоСхемы = СоздатьДеревоСхемы();
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДелатьРаскраску",Ложь);
			ДополнительныеПараметры.Вставить("ЧтениеИзТекста",Ложь);
			ДополнительныеПараметры.Вставить("СтруктураПараметров",СтруктураПараметров);
			
			ДанныеСенария = ДанныеСценарияДляПолученияСхемыСценария(Сценарий);
			ДеревоСценарияИзТекста(ДанныеСенария.Текст,ДеревоСхемы,ДанныеСенария.Проект,Сценарий,ДополнительныеПараметры);
			
			ПараметрыВходящие = ДанныеСенария.ПараметрыВходящие;
			ПараметрыВходящиеИзДерева(ДеревоСхемы,ПараметрыВходящие);
			
			Возврат ДеревоСхемы; 
		Иначе	
			Возврат Сценарий.ХранилищеСтруктурыСхемы.Получить();
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецФункции	

Функция ДанныеВложенныхСценариев()
	ДанныеВложенныхСценариев = Новый ТаблицаЗначений;
	ДанныеВложенныхСценариев.Колонки.Добавить("Сценарий");
	ДанныеВложенныхСценариев.Колонки.Добавить("UID");
	ДанныеВложенныхСценариев.Колонки.Добавить("ДеревоСхемы");
	ДанныеВложенныхСценариев.Колонки.Добавить("ПараметрыВходящие");
	
	Возврат ДанныеВложенныхСценариев;
КонецФункции	 

Процедура ОбновитьОписаниеЭлементаСУчетомЯзыка(СтрокаДерева, ЗаменятьСтрокуАнглийскогоЯызка = Ложь)
	Если ЗаменятьСтрокуАнглийскогоЯызка Тогда
		СтрокаДерева.ОписаниеЭлемента = СтрЗаменить(СтрокаДерева.ОписаниеЭлемента,"#language: en","");
	КонецЕсли;	 
	СтрокаДерева.ОписаниеЭлемента = СтрЗаменить(СтрокаДерева.ОписаниеЭлемента,"#language: ru","#language: en");
КонецПроцедуры

Процедура МногоязыковаяПоддержка(Текст,ДеревоСхемы)
	Если Найти(Текст,"#language: en") > 0 Тогда
		МассивСтрок = СтрРазделить(Текст,Символы.ПС);
		ПерваяСтрока = "";
		Если МассивСтрок.Количество() > 0 Тогда
			ПерваяСтрока = МассивСтрок[0];
			МассивСтрок.Удалить(0);
			ПерваяСтрока = СтрЗаменить(ПерваяСтрока,"#language: ru","#language: en");
			Текст = СтрСоединить(МассивСтрок, Символы.ПС);
		КонецЕсли;	 
		
		Текст = СтрЗаменить(Текст,"#language: en","");
		Текст = СтрЗаменить(Текст,"#language: ru","#language: en");
		Текст = СтрЗаменить(Текст,"Сценарий:","Scenario:");
		Текст = СтрЗаменить(Текст,"Контекст:","Background:");
		Текст = СтрЗаменить(Текст,"Функциональность:","Feature:");
		Текст = СтрЗаменить(Текст,"И Я закрыл все окна клиентского приложения"
		     ,"And I close all client application windows");
			 
		Текст = ПерваяСтрока + Символы.ПС + Текст;	 
			 
		Если ДеревоСхемы <> Неопределено Тогда
			Для Каждого СтрокаДерева Из ДеревоСхемы.Строки Цикл
				Если СтрокаДерева.ТипЭлемента = ТипЭлементаКонтекст() Тогда
					СтрокаДерева.ОписаниеЭлемента = СтрЗаменить(СтрокаДерева.ОписаниеЭлемента,"Контекст:","Background:");
					Для Каждого СтрокаДействий Из СтрокаДерева.Строки Цикл
						Если СтрокаДействий.ТипЭлемента = ТипЭлементаДействие() Тогда
							СтрокаДействий.ОписаниеЭлемента = СтрЗаменить(СтрокаДействий.ОписаниеЭлемента
							,"И Я закрыл все окна клиентского приложения"
							,"And I close all client application windows");
						КонецЕсли;	 
					КонецЦикла;	
				ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаСценарий() Тогда
					СтрокаДерева.ОписаниеЭлемента = СтрЗаменить(СтрокаДерева.ОписаниеЭлемента,"Сценарий:","Scenario:");
					СтрокаДерева.ОписаниеЭлемента = СтрЗаменить(СтрокаДерева.ОписаниеЭлемента,"Сценарий ","Scenario ");
					Для Каждого СтрокаСценария Из СтрокаДерева.Строки Цикл
						ОбновитьОписаниеЭлементаСУчетомЯзыка(СтрокаСценария, Истина);
					КонецЦикла;	
				ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаЗаголовок() Тогда
					СтрокаДерева.ОписаниеЭлемента = СтрЗаменить(СтрокаДерева.ОписаниеЭлемента,"Функциональность:","Feature:");
				ИначеЕсли СтрокаДерева.ТипЭлемента = ТипЭлементаКомментарий() Тогда
					ОбновитьОписаниеЭлементаСУчетомЯзыка(СтрокаДерева);
				КонецЕсли;	 
			КонецЦикла;	
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

Функция ПолучитьСтрокуЦикла(Знач Стр,Позиция,Отступ,КлючевоеСлово)
	ВтораяЧасть = СокрЛ(Сред(Стр,Позиция+Отступ+1));
	
	МассивСтрокВтораяЧасть = СтрРазделить(ВтораяЧасть," ");
	
	МассивПервыхСловНРег = МассивПервыхСловGherkinНРег();
	ПервоеСловоВторойЧасти = МассивСтрокВтораяЧасть[0];
	Если МассивПервыхСловНРег.Найти(НРег(ПервоеСловоВторойЧасти)) = Неопределено Тогда
		ВтораяЧасть = КлючевоеСлово + " " + ВтораяЧасть;
	КонецЕсли;	 
	
	Стр = Лев(Стр,Позиция-1) + ВтораяЧасть;
	
	Возврат Стр;
КонецФункции	 

Функция ПользователиЭталоннойБазы(ЭталоннаяБазаТестирования)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭталонныеБазыТестированияПользователи.Ссылка КАК Ссылка,
		|	ЭталонныеБазыТестированияПользователи.НомерСтроки КАК НомерСтроки,
		|	ЭталонныеБазыТестированияПользователи.ПрофильПользователя КАК ПрофильПользователя,
		|	ЭталонныеБазыТестированияПользователи.Логин КАК Логин,
		|	ЭталонныеБазыТестированияПользователи.Пароль КАК Пароль,
		|	ЭталонныеБазыТестированияПользователи.ПрофильПользователя.Наименование КАК ПрофильПользователяНаименование
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования.Пользователи КАК ЭталонныеБазыТестированияПользователи
		|ГДЕ
		|	ЭталонныеБазыТестированияПользователи.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭталоннаяБазаТестирования);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции	 

Функция ШагиПроцесса(Процесс)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцесса.СценарийРаботыПользователя КАК Сценарий,
		|	ШагиПроцесса.Ссылка КАК ШагПроцесса,
		|	ШагиПроцесса.Наименование КАК Наименование,
		|	ШагиПроцесса.Исполнитель КАК Исполнитель,
		|	ШагиПроцесса.ТипШага КАК ТипШага,
		|	ШагиПроцесса.ВложенныйПроцесс КАК ВложенныйПроцесс,
		|	ШагиПроцесса.ПараметрыСценария.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Имя КАК Имя,
		|		ЗначениеПоСсылке КАК ЗначениеПоСсылке,
		|		ТипПараметра КАК ТипПараметра,
		|		ИсходящийПараметр КАК ИсходящийПараметр,
		|		ШагПроцессаЗначениеПоСсылке КАК ШагПроцессаЗначениеПоСсылке,
		|		ИмяПараметраПоСсылке КАК ИмяПараметраПоСсылке,
		|		ЗначениеПроизвольное КАК ЗначениеПроизвольное,
		|		"""" КАК Значение
		|	) КАК ПараметрыСценария,
		|	ШагиПроцесса.Исполнитель.Наименование КАК ИсполнительНаименование,
		|	ШагиПроцесса.СценарийРаботыПользователя.ПрофильПользователя КАК ПрофильПользователя,
		|	ШагиПроцесса.СценарийРаботыПользователя.ПрофильПользователя.Наименование КАК ПрофильПользователяНаименование
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	НЕ ШагиПроцесса.ПометкаУдаления
		|	И ШагиПроцесса.Владелец = &Процесс
		|	И НЕ ШагиПроцесса.ЭтоГруппа
		|	И (ШагиПроцесса.СценарийРаботыПользователя <> ЗНАЧЕНИЕ(Справочник.СценарииРаботыПользователей.ПустаяСсылка)
		|			ИЛИ ШагиПроцесса.ТипШага = 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШагиПроцесса.ПолныйКод";
	
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	ШагиПроцесса = Запрос.Выполнить().Выгрузить();
	
	Возврат ШагиПроцесса; 
КонецФункции	 

Функция ПараметрыПроцесса(Процесс)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцессыПараметрыПроцесса.Ссылка КАК Ссылка,
		|	ПроцессыПараметрыПроцесса.НомерСтроки КАК НомерСтроки,
		|	ПроцессыПараметрыПроцесса.Имя КАК Имя,
		|	ПроцессыПараметрыПроцесса.Значение КАК Значение,
		|	ПроцессыПараметрыПроцесса.ТипПараметра КАК ТипПараметра,
		|	ПроцессыПараметрыПроцесса.ИсходящийПараметр КАК ИсходящийПараметр
		|ИЗ
		|	Справочник.Процессы.ПараметрыПроцесса КАК ПроцессыПараметрыПроцесса
		|ГДЕ
		|	ПроцессыПараметрыПроцесса.Ссылка = &Процесс
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	Возврат Запрос.Выполнить().Выгрузить(); 
КонецФункции	 

Функция ПараметрыШагаПроцессаИзТекста(СтрокаСценария,ПараметрыПроцесса,ПараметрыФормированияТекстаСценария, UIDПроцесса)
	ДанныеПроцессов = ПараметрыФормированияТекстаСценария.ДанныеПроцессов;
	ШагПроцессаUID = СтрокаСценария.ШагПроцессаUID;
	
	СтрокаДанныеПроцессов = ДанныеПроцессов.Найти(UIDПроцесса,"UID");
	
	ШагиПроцесса = СтрокаДанныеПроцессов.ШагиПроцесса;
	СтрокаШагиПроцесса = ШагиПроцесса.Найти(ШагПроцессаUID,"UID");
	
	Тзн = СтрокаШагиПроцесса.ПараметрыШага;
	Если Тзн.Колонки.Найти("Значение") = Неопределено Тогда
		Тзн.Колонки.Добавить("Значение");
	КонецЕсли;	 
	ОбработкаТаблицыПараметровШагаПроцесса(Тзн);
	
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя");
	ТаблицаПараметров.Колонки.Добавить("ТипПараметра");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	
	Для Каждого СтрокаПараметра Из Тзн Цикл
		СтрокаТаблицаПараметров                   = ТаблицаПараметров.Добавить();
		СтрокаТаблицаПараметров.ТипПараметра      = СтрокаПараметра.ТипПараметра;
		СтрокаТаблицаПараметров.Значение          = ЗначениеПараметраПроцесса(СтрокаПараметра.Значение,
			ПараметрыПроцесса,СтрокаПараметра,СтрокаСценария,СтрокаСценария.Сценарий,ПараметрыФормированияТекстаСценария);
			
		СтрокаТаблицаПараметров.Имя               = СтрокаПараметра.Имя;
	КонецЦикла;	
	
	Возврат ТаблицаПараметров;
КонецФункции	 

Функция ПараметрыШагаПроцесса(ШагПроцесса,ПараметрыПроцесса,СтрокаСценария,СценарииПроцесса,ПараметрыФормированияТекстаСценария)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцессаПараметрыСценария.Ссылка КАК Ссылка,
		|	ШагиПроцессаПараметрыСценария.НомерСтроки КАК НомерСтроки,
		|	ШагиПроцессаПараметрыСценария.Имя КАК Имя,
		|	ШагиПроцессаПараметрыСценария.ЗначениеПоСсылке КАК ЗначениеПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ТипПараметра КАК ТипПараметра,
		|	ШагиПроцессаПараметрыСценария.ИсходящийПараметр КАК ИсходящийПараметр,
		|	ШагиПроцессаПараметрыСценария.ШагПроцессаЗначениеПоСсылке КАК ШагПроцессаЗначениеПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ИмяПараметраПоСсылке КАК ИмяПараметраПоСсылке,
		|	ШагиПроцессаПараметрыСценария.ЗначениеПроизвольное КАК ЗначениеПроизвольное
		|ИЗ
		|	Справочник.ШагиПроцесса.ПараметрыСценария КАК ШагиПроцессаПараметрыСценария
		|ГДЕ
		|	ШагиПроцессаПараметрыСценария.Ссылка = &ШагПроцесса
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ШагПроцесса", ШагПроцесса);
	
	Тзн = Запрос.Выполнить().Выгрузить(); 
	
	Тзн.Колонки.Добавить("Значение");
	ОбработкаТаблицыПараметровШагаПроцесса(Тзн);
	
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя");
	ТаблицаПараметров.Колонки.Добавить("ТипПараметра");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	
	Для Каждого СтрокаПараметра Из Тзн Цикл
		СтрокаТаблицаПараметров                   = ТаблицаПараметров.Добавить();
		СтрокаТаблицаПараметров.ТипПараметра      = СтрокаПараметра.ТипПараметра;
		СтрокаТаблицаПараметров.Значение          = ЗначениеПараметраПроцесса(СтрокаПараметра.Значение,
			ПараметрыПроцесса,СтрокаПараметра,СтрокаСценария,СценарииПроцесса,ПараметрыФормированияТекстаСценария);
			
		СтрокаТаблицаПараметров.Имя               = СтрокаПараметра.Имя;
	КонецЦикла;	
	
	Возврат ТаблицаПараметров;
КонецФункции	 

Процедура ОбработкаТаблицыПараметровШагаПроцесса(Тзн)
	Для Каждого СтрокаТзн Из Тзн Цикл
		Если ЗначениеЗаполнено(СтрокаТзн.ЗначениеПоСсылке) Тогда
			СтрокаТзн.Значение = СтрокаТзн.ЗначениеПоСсылке;
		Иначе	
			СтрокаТзн.Значение = СтрокаТзн.ЗначениеПроизвольное;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

Процедура ДополнитьПередаваемыеПараметрыПараметрамиПоУмолчанию(ЗначенияВходящихПараметров,ПараметрыСценария)
	Для Каждого СтрокаПараметрыСценария Из ПараметрыСценария Цикл
		СтрокаЗначенияВходящихПараметров = ЗначенияВходящихПараметров.Найти(СтрокаПараметрыСценария.Имя,"Имя");
		Если СтрокаЗначенияВходящихПараметров = Неопределено Тогда
			СтрокаЗначенияВходящихПараметров = ЗначенияВходящихПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначенияВходящихПараметров,СтрокаПараметрыСценария);
		КонецЕсли;	 
	КонецЦикла;	 
	
КонецПроцедуры 

Процедура СкопироватьДеревоСхемы(ДеревоКуда,ДеревоОткуда)
	Для Каждого СтрокаДеревоОткуда Из ДеревоОткуда.Строки Цикл
		СтрокаДеревоКуда = ДеревоКуда.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДеревоКуда,СтрокаДеревоОткуда);
		Если СтрокаДеревоОткуда.Строки.Количество() > 0 Тогда
			СкопироватьДеревоСхемы(СтрокаДеревоКуда,СтрокаДеревоОткуда);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

Функция ПолучитьДеревоВложенногоПроцесса(ДанныеПроцесса,СтруктураПараметров,ПараметрыРодительскогоПроцесса,ПараметрыФормированияТекстаСценария)
	Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста	Тогда
		ШагиПроцесса = ШагиПроцессаИзТекста(ПараметрыФормированияТекстаСценария,
			ДанныеПроцесса.ВложенныйПроцессUID);
	Иначе	
		ШагиПроцесса = ШагиПроцесса(ДанныеПроцесса.ВложенныйПроцесс);
	КонецЕсли;	 
	СхемаДерево = СоздатьДеревоСхемы();
	
	СтрокаВложенногоПроцесса = СхемаДерево.Строки.Добавить();
	СтрокаВложенногоПроцесса.ТипЭлемента = ТипЭлементаВложенныйПроцесс();
	СтрокаВложенногоПроцесса.ИмяЭлемента = ДанныеПроцесса.Наименование;
	
	Для Каждого СтрокаШагиПроцесса Из ШагиПроцесса Цикл
		СтрокаСхемаДерево = СтрокаВложенногоПроцесса.Строки.Добавить();
		СтрокаСхемаДерево.ТипЭлемента = ТипЭлементаШагВложенногоПроцесса();
		СтрокаСхемаДерево.ИмяЭлемента = СтрокаШагиПроцесса.Наименование;
		Если СтрокаСхемаДерево.ДополнительныеСвойства = Неопределено Тогда
			СтрокаСхемаДерево.ДополнительныеСвойства = Новый Структура;
		КонецЕсли;	 
		
		СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ТипШага", СтрокаШагиПроцесса.ТипШага);
		СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("Сценарий", СтрокаШагиПроцесса.Сценарий);
		Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ВложенныйПроцесс",
				СтрокаШагиПроцесса.ВложенныйПроцессНаименование);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("КодСценария", СтрокаШагиПроцесса.КодСценария);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("UIDСценария", СтрокаШагиПроцесса.СценарийUID);
			
			ПолныйКод = "";
			Если СтрокаШагиПроцесса.ТипШага = 1 Тогда
				ДанныеПодпроцесса = СтруктураПараметров.ДанныеПроцессов.Найти(СтрокаШагиПроцесса.ВложенныйПроцессUID, "UID");
				ПолныйКод = ДанныеПодпроцесса.ПолныйКод;
			КонецЕсли;	 
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ПолныйКод",ПолныйКод);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ИсполнительШагаПроцесса", СтрокаШагиПроцесса.Исполнитель);
		Иначе	
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ВложенныйПроцесс", СтрокаШагиПроцесса.ВложенныйПроцесс);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ИсполнительШагаПроцесса", СтрокаШагиПроцесса.Исполнитель);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ИсполнительНаименование",
				СтрокаШагиПроцесса.ИсполнительНаименование);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("Сценарий", СтрокаШагиПроцесса.Сценарий);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ПрофильПользователя", СтрокаШагиПроцесса.ПрофильПользователя);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ПрофильПользователяНаименование",
				СтрокаШагиПроцесса.ПрофильПользователяНаименование);
			СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ПросмотрСценария",
				ПараметрыФормированияТекстаСценария.ПросмотрСценария);
		КонецЕсли;	 
		
		Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста	Тогда
			СтрокаДанныеПроцессы =
				ПараметрыФормированияТекстаСценария.ДанныеПроцессов.Найти(ДанныеПроцесса.ВложенныйПроцессUID,"UID");
			
			ПараметрыПроцесса = Новый ТаблицаЗначений;
			ПараметрыПроцесса.Колонки.Добавить("Имя");
			ПараметрыПроцесса.Колонки.Добавить("Значение");
			ПараметрыПроцесса.Колонки.Добавить("ТипПараметра");
			Для Каждого СтрокаТаблицаПараметров Из СтрокаДанныеПроцессы.ПараметрыСценария Цикл
				СтрокаПараметрыПроцесса = ПараметрыПроцесса.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПараметрыПроцесса,СтрокаТаблицаПараметров);
			КонецЦикла;	 
		Иначе	
			ПараметрыПроцесса = ПараметрыПроцесса(ДанныеПроцесса.ВложенныйПроцесс);
		КонецЕсли;	 
		
		Для Каждого СтрокаПараметрыШага Из ДанныеПроцесса.ПараметрыСценария Цикл
			СтрокаПараметра = ПараметрыПроцесса.Найти(СтрокаПараметрыШага.Имя,"Имя");
			Если СтрокаПараметра <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаПараметрыШага.ЗначениеПроизвольное) Тогда
					СтрокаПараметра.Значение = СтрокаПараметрыШага.ЗначениеПроизвольное;
				ИначеЕсли ЗначениеЗаполнено(СтрокаПараметрыШага.ЗначениеПоСсылке) Тогда
					ИмяПараметраПоСсылке = СтрокаПараметрыШага.ИмяПараметраПоСсылке;
					СтрокаПараметрыРодительскогоПроцесса = ПараметрыРодительскогоПроцесса.Найти(ИмяПараметраПоСсылке,"Имя");
					Если СтрокаПараметрыРодительскогоПроцесса <> Неопределено Тогда
						СтрокаПараметра.Значение = СтрокаПараметрыРодительскогоПроцесса.Значение;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЦикла;	 
		
		Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
			ЗначенияВходящихПараметров = ПараметрыШагаПроцессаИзТекста(СтрокаШагиПроцесса,ПараметрыПроцесса,
			   ПараметрыФормированияТекстаСценария, ДанныеПроцесса.ВложенныйПроцессUID);
			   
			ДанныеСценарияДляПолученияИТекста = Новый Структура;
			ДанныеСценарияДляПолученияИТекста.Вставить("UIDСценария", СтрокаШагиПроцесса.СценарийUID);
			ДанныеСценарияДляПолученияИТекста.Вставить("ДанныеСценариев", ПараметрыФормированияТекстаСценария.ДанныеСценариев);
			Если СтрокаШагиПроцесса.ТипШага = 0 Тогда
				ПараметрыВходящиеСценария = ПолучитьПараметрыВходящиеИзФайла(
					СтрокаШагиПроцесса.Сценарий, ДанныеСценарияДляПолученияИТекста);
				ДополнитьПередаваемыеПараметрыПараметрамиПоУмолчанию(ЗначенияВходящихПараметров,ПараметрыВходящиеСценария);
			КонецЕсли;	 
		Иначе	
			ЗначенияВходящихПараметров = ПараметрыШагаПроцесса(СтрокаШагиПроцесса.ШагПроцесса,ПараметрыПроцесса,
			   СтрокаШагиПроцесса,ШагиПроцесса, ПараметрыФормированияТекстаСценария);
			ПараметрыВходящиеСценария = ПараметрыВходящиеСценария(СтрокаШагиПроцесса.Сценарий);
			ДополнитьПередаваемыеПараметрыПараметрамиПоУмолчанию(ЗначенияВходящихПараметров,ПараметрыВходящиеСценария);
		КонецЕсли;	 		
		   
		СтрокаСхемаДерево.ДополнительныеСвойства.Вставить("ПараметрыШагаВложенногоПроцесса",ЗначенияВходящихПараметров);
		
		Если СтрокаШагиПроцесса.ТипШага = 0 Тогда //обычный сценарий
			СценарийUID = Неопределено;
			Если ПараметрыФормированияТекстаСценария.ЧтениеИзТекста Тогда
				СценарийUID = СтрокаШагиПроцесса.СценарийUID;
			КонецЕсли;	 
			
			ВложенноеДеревоСхемы
				= ПолучитьДеревоСценария(СтрокаШагиПроцесса.Сценарий,ПараметрыФормированияТекстаСценария, СценарийUID);
		Иначе	
			ВложенноеДеревоСхемы = ПолучитьДеревоВложенногоПроцесса(СтрокаШагиПроцесса,СтруктураПараметров,
				ПараметрыПроцесса,ПараметрыФормированияТекстаСценария);
		КонецЕсли;	 
		СкопироватьДеревоСхемы(СтрокаСхемаДерево,ВложенноеДеревоСхемы);
	КонецЦикла;	 
	
	Возврат СхемаДерево;
КонецФункции	 

Функция ПерваяСтрока(Стр)
	Если Найти(Стр,Символы.ПС) = 0 Тогда
		Возврат Стр;
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Стр,Символы.ПС);
	Возврат МассивСтрок[0];
КонецФункции	 

Процедура ОтформатироватьПередачуПараметраТипаТаблица(ТаблицаСтрок)
	Для Каждого СтрТаблицаСтрок Из ТаблицаСтрок Цикл
		Если СтрТаблицаСтрок.ТипЭлемента <> ТипЭлементаТаблица() Тогда
			Продолжить;
		КонецЕсли;	 
		
		Стр = СтрТаблицаСтрок.ОбработаннаяСтрокаПараметров;
		ПодсветкаСтрокиПоПараметрам(Стр,СтрТаблицаСтрок.Параметры,Неопределено);
		СтрТаблицаСтрок.СтрокаСокр = Стр;
		
	КонецЦикла;	
КонецПроцедуры 

Функция ДанныеСценарияПользователя(Сценарий)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователей.Наименование КАК Наименование,
		|	СценарииРаботыПользователей.Код КАК Код
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
		|ГДЕ
		|	СценарииРаботыПользователей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("Код", Неопределено);
	ДанныеСценария.Вставить("Наименование", Неопределено);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеСценария.Вставить("Код", ВыборкаДетальныеЗаписи.Код);
		ДанныеСценария.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
	КонецЦикла;
	
	Возврат ДанныеСценария;
КонецФункции	 

Функция ЗначенияСвойств(ОбъектыСоСвойствами,
                        ПолучатьДопРеквизиты = Истина,
                        ПолучатьДопСведения = Истина,
                        Свойства = Неопределено)
						
	Возврат Обработки.СборкаТекстовСценариев.ЗначенияСвойств(ОбъектыСоСвойствами,
                        ПолучатьДопРеквизиты,
                        ПолучатьДопСведения,
                        Свойства);
КонецФункции	 

Функция НаборСвойствОбъекта(Проект, Набор)
	Возврат Обработки.СборкаТекстовСценариев.НаборСвойствОбъекта(Проект, Набор);
КонецФункции	 

Функция ДанныеПроцесса(Процесс)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Процессы.Наименование КАК Наименование,
		|	Процессы.Код КАК Код,
		|	Процессы.Владелец КАК Проект
		|ИЗ
		|	Справочник.Процессы КАК Процессы
		|ГДЕ
		|	Процессы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Процесс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ДанныеПроцесса = Новый Структура;
	ДанныеПроцесса.Вставить("Код", Неопределено);
	ДанныеПроцесса.Вставить("Наименование", Неопределено);
	ДанныеПроцесса.Вставить("Проект", Неопределено);
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеПроцесса.Вставить("Код", ВыборкаДетальныеЗаписи.Код);
		ДанныеПроцесса.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		ДанныеПроцесса.Вставить("Проект", ВыборкаДетальныеЗаписи.Проект);
	КонецЦикла;
	
	Возврат ДанныеПроцесса;
КонецФункции	 

Процедура ЗаполнитьУровниОбъектов(УровеньОбъектов)
	Для Ккк = 1 По 10 Цикл
		УровеньОбъектов.Добавить(Неопределено);
	КонецЦикла;	
КонецПроцедуры

Функция ВернутьСпецСимволыYaml(Знач Стр)
	Стр = СтрЗаменить(Стр,"\""","""");
	Стр = СтрЗаменить(Стр,"\\","\");
	Возврат Стр; 
КонецФункции	 

Процедура ЗначениеИзСтрокиYaml(Стр,Имя,Значение)
	Поз = Найти(Стр,":");
	Если Поз = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найден символ : в строке: %1'"), Стр);
	КонецЕсли;	 
	   
	Имя      = СтрЗаменить(СокрЛП(Лев(Стр,  Поз - 1)), Символ(65279), "");
	Значение = СтрЗаменить(СокрЛП(Сред(Стр, Поз + 1)), Символ(65279), "");
	ВернутьКавычки = Ложь;
	Если Лев(Значение,1) = """" и Прав(Значение,1) = """" Тогда
		Значение = Сред(Значение,2,СтрДлина(Значение)-2);
		ВернутьКавычки = Истина;
	КонецЕсли;	 
	Значение = ВернутьСпецСимволыYaml(Значение);
	Если ВернутьКавычки  Тогда
		Значение = """" + Значение + """";
	КонецЕсли;	 
КонецПроцедуры

Функция СледующаяЗначащаяСтрока(МассивДанных,Знач СчетчикСтрок)
	МаксКолСтрок = МассивДанных.Количество()-1;
	Пока МаксКолСтрок >= СчетчикСтрок Цикл
		Если ПустаяСтрока(МассивДанных[СчетчикСтрок]) Тогда
			СчетчикСтрок = СчетчикСтрок + 1;
			Продолжить;
		КонецЕсли;	 
		
		Возврат МассивДанных[СчетчикСтрок]; 
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции	 

Процедура ОбработатьСтрокуЗначенияYaml(Знач Имя,Знач Значение,ТекЭлементДляВставки,МассивДанных,ПараметрыОбработки)
	Если Значение = "|" Тогда
		МассивСтрок = Новый Массив;
		ТекЭлементДляВставки.Вставить(Имя,МассивСтрок);
		ПараметрыОбработки.ИдетСчитываниеМногострочнойСтроки = Истина;
		ТекЭлементДляВставки        = МассивСтрок;
		ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень+1] = МассивСтрок; 
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда
		Значение = Сред(Значение,2);
		Значение = Лев(Значение,СтрДлина(Значение)-1);
		ТекЭлементДляВставки.Вставить(Имя,Значение);
		ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень] = ТекЭлементДляВставки; 
	ИначеЕсли Значение = "" Тогда
		Если ПараметрыОбработки.СчетчикСтрок <= МассивДанных.Количество()-2 Тогда
			СледущаяСтрока = СокрЛ(СледующаяЗначащаяСтрока(МассивДанных,ПараметрыОбработки.СчетчикСтрок+1));
			Если Лев(СледущаяСтрока,1) = "-" Тогда
				ЗначениеПараметра = Новый Массив;
			Иначе	
				ЗначениеПараметра = Новый Соответствие;
			КонецЕсли;	 
			ПараметрыОбработки.УровеньОбъектов[ПараметрыОбработки.ТекУровень+1] = ЗначениеПараметра; 
			ТекЭлементДляВставки.Вставить(Имя,ЗначениеПараметра);
		КонецЕсли;	 
	Иначе
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Ошибка получения значения из строки: %1'"),
		                            МассивДанных[ПараметрыОбработки.СчетчикСтрок]);
	КонецЕсли;	 
КонецПроцедуры

Функция ДанныеСценарияИзYaml(ИсточникМетаданные, ИсточникТекстСценария, ДанныеСценария)
	Результат = Новый Соответствие;
	СчетчикСтрок = -1;
	
	Попытка
		ЧтениеДанныхYaml(Результат, ИсточникМетаданные.ОткрытьПотокДляЧтения(), СчетчикСтрок); 
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не получилось прочитать файл <%1>. Строка №%2.'"),
			ДанныеСценария.ПолноеИмяФайла, СчетчикСтрок+1);
	КонецПопытки;
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИсточникТекстСценария.ОткрытьПотокДляЧтения(),"UTF-8");
	ТекстСценария = Текст.Прочитать();
	Текст.Закрыть();
	
	Результат.Вставить("ТекстСценария", ТекстСценария);
	
	Возврат Результат; 	
	
КонецФункции	 

Функция ДанныеСценарияИзВременныхДанных(СтруктураПараметров, UIDСценария)
	Если СтруктураПараметров.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
		Для Каждого СтрокаДанныеРанееИзмененныхСценариев Из СтруктураПараметров.ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
			Если СтрокаДанныеРанееИзмененныхСценариев["ДанныеСценария"]["UID"] = UIDСценария Тогда
				Возврат СтрокаДанныеРанееИзмененныхСценариев;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Возврат Неопределено;
КонецФункции	 

Процедура ОбновитьДанныеСценарияПоПрочитаннымДанным(ДанныеСценария, ПрочитанныеДанныеСценария)
	ДанныеСценария.Вставить("ТекстСценария", ПрочитанныеДанныеСценария["ТекстСценария"]);
	ДанныеСценария.Вставить("Код", ПрочитанныеДанныеСценария["ДанныеСценария"]["Код"]);
	ДанныеСценария.Вставить("UIDФункцияСистемы", ПрочитанныеДанныеСценария["ДанныеСценария"]["UIDФункцияСистемы"]);
	ДанныеСценария.Вставить("РазрешеноИспользоватьВДругихФункциях",
		ПрочитанныеДанныеСценария["ДанныеСценария"]["РазрешеноИспользоватьВДругихФункциях"]);
	ДанныеСценария.Вставить("НеобратимоМеняетДанные",
		ПрочитанныеДанныеСценария["ДанныеСценария"]["НеобратимоМеняетДанные"]);
	ДанныеСценария.Вставить("ПараметрыСценария", 
	   ПараметрыСценарияИзТекстовыхДанных(ПрочитанныеДанныеСценария["ПараметрыСценария"]));
	ДанныеСценария.Вставить("ВложенныеСценарии",  
	   ВложенныеСценарииИзТекстовыхДанных(ПрочитанныеДанныеСценария["ВложенныеСценарии"]));
	ДанныеСценария.Вставить("ВложенныеСценарии",     
	   ТегиСценарияИзТекстовыхДанных(ПрочитанныеДанныеСценария["ТегиСценария"]));
КонецПроцедуры 

Функция ПолучитьДеревоСценарияИзGit(Сценарий,СтруктураПараметров,UIDСценария)
	Если НЕ СтруктураПараметров.Свойство("ДанныеСценариевGit") Тогда
		ПолучитьДанныеСценариевGit(СтруктураПараметров);
	КонецЕсли;	 
	
	СтрокаДанныеСценариев = СтруктураПараметров.ДанныеСценариевGit.UIDCценариев[UIDСценария];
	Если СтрокаДанныеСценариев = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
		    НСтр("ru = 'Не найден сценарий: %1  по настройке %2'"),СтруктураПараметров.ИмяСценария,СтруктураПараметров.Имя);
	КонецЕсли;
	
	Если НЕ СтрокаДанныеСценариев.Свойство("ДеревоСхемы") Тогда
		СтрокаДанныеСценариев.Вставить("ДеревоСхемы", Неопределено);
	КонецЕсли;	 
	
	ДанныеСценарияИзВременныхДанных = ДанныеСценарияИзВременныхДанных(СтруктураПараметров, UIDСценария);
	Если СтрокаДанныеСценариев.ДеревоСхемы <> Неопределено И ДанныеСценарияИзВременныхДанных = Неопределено Тогда
		Возврат СтрокаДанныеСценариев.ДеревоСхемы;
	КонецЕсли;	 
		
	ДанныеСценария = СтрокаДанныеСценариев;
	
	Если НЕ ДанныеСценария.Свойство("ТекстСценария") ИЛИ ДанныеСценарияИзВременныхДанных <> Неопределено Тогда
		Если ДанныеСценарияИзВременныхДанных = Неопределено Тогда
			ДанныеСценарияИзРепозитория = Обработки.СборкаТекстовСценариев.ДанныеСценарияИзРепозитория(
				СтруктураПараметров.Проект, ДанныеСценария, СтруктураПараметров.ТокенПользователя,
				СтруктураПараметров.Ветка, СтруктураПараметров.ИдентификаторКоммита);
				
			ПрочитанныеДанныеСценария = ДанныеСценарияИзYaml(
				ДанныеСценарияИзРепозитория.ДвоичныеДанныеФайла,
				ДанныеСценарияИзРепозитория.ДвоичныеДанныеТекстСценария, ДанныеСценария);
		Иначе
			ПрочитанныеДанныеСценария = ДанныеСценарияИзВременныхДанных;
		КонецЕсли;	 	
		
		ОбновитьДанныеСценарияПоПрочитаннымДанным(ДанныеСценария, ПрочитанныеДанныеСценария);
		
	КонецЕсли;	 
	
	ТекстСценария = ДанныеСценария.ТекстСценария;
	
	Если ТипЗнч(ТекстСценария) = Тип("Массив") Тогда
		ТекстСценария = СтрСоединить(ТекстСценария,Символы.ПС);
	КонецЕсли;	 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",Ложь);
	ДополнительныеПараметры.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
	ДополнительныеПараметры.Вставить("ЧтениеИзТекста",Ложь);
	ДополнительныеПараметры.Вставить("СтруктураПараметров",СтруктураПараметров);
	ДополнительныеПараметры.Вставить("Сценарий",Сценарий);
	ДополнительныеПараметры.Вставить("КодСценария",СтрокаДанныеСценариев.Код);
	ДополнительныеПараметры.Вставить("ЧтениеИзGit",СтруктураПараметров.ЧтениеИзGit);
	ДополнительныеПараметры.Вставить("ДанныеСценариевGit",СтруктураПараметров.ДанныеСценариевGit);
	ДополнительныеПараметры.Вставить("ФункцияСистемы",СтруктураПараметров.ФункцияСистемы);
	ДополнительныеПараметры.Вставить("Проект",СтруктураПараметров.Проект);
	ДополнительныеПараметры.Вставить("ТокенПользователя",СтруктураПараметров.ТокенПользователя);
	ДополнительныеПараметры.Вставить("Ветка",СтруктураПараметров.Ветка);
	ДополнительныеПараметры.Вставить("ИдентификаторКоммита",СтруктураПараметров.ИдентификаторКоммита);
	ДополнительныеПараметры.Вставить("UIDСценария", UIDСценария);
	ДополнительныеПараметры.Вставить("ПрочитанныеДанныеСценария", ДанныеСценария);
	
	Если СтруктураПараметров.Свойство("УровеньВложенностиПодсценариев") Тогда
		ДополнительныеПараметры.Вставить("УровеньВложенностиПодсценариев",
			СтруктураПараметров.УровеньВложенностиПодсценариев);
	Иначе		
		ДополнительныеПараметры.Вставить("УровеньВложенностиПодсценариев", 0);
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство("ФорматироватьТолькоПервыйУровеньПодсценариев") Тогда
		ДополнительныеПараметры.Вставить("ФорматироватьТолькоПервыйУровеньПодсценариев",
			СтруктураПараметров.ФорматироватьТолькоПервыйУровеньПодсценариев);
	Иначе		
		ДополнительныеПараметры.Вставить("ФорматироватьТолькоПервыйУровеньПодсценариев", Ложь);
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство("ЗащитаОтБесконечногоВызоваСценариев") Тогда
		ДополнительныеПараметры.Вставить("ЗащитаОтБесконечногоВызоваСценариев", СтруктураПараметров.ЗащитаОтБесконечногоВызоваСценариев);
	КонецЕсли;	 
	
	Если СтруктураПараметров.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
		ДополнительныеПараметры.Вставить("ДанныеРанееИзмененныхСценариев", СтруктураПараметров.ДанныеРанееИзмененныхСценариев);
	КонецЕсли;	 
	
	ОбъектСервер       = Сценарий;
	ДеревоСхемы = СоздатьДеревоСхемы();
	
	ПроектСценария = СтруктураПараметров.Проект;
	
	ДеревоСценарияИзТекста(ТекстСценария,
	                         ДеревоСхемы,ПроектСценария,ОбъектСервер,ДополнительныеПараметры);
	
	ПараметрыВходящие = ДанныеСценария.ПараметрыСценария;
	
	ПараметрыВходящиеИзДерева(ДеревоСхемы,ПараметрыВходящие);
							 
	СтрокаДанныеСценариев.ДеревоСхемы = ДеревоСхемы;
	
	Если СтруктураПараметров.Свойство("ФорматироватьТолькоПервыйУровеньПодсценариев")
		И СтруктураПараметров.ФорматироватьТолькоПервыйУровеньПодсценариев Тогда
		СтрокаДанныеСценариев.ДеревоСхемы = Неопределено;
	КонецЕсли;	 
	
	Возврат ДеревоСхемы;							 
КонецФункции	

Процедура ПолучитьДанныеСценариевGit(СтруктураПараметров)
	Если НЕ СтруктураПараметров.Свойство("ДанныеСценариевGit") Тогда
		СтруктураПараметров.Вставить("ДанныеСценариевGit",
			ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресСлужебныеДанныеСценариев));
	КонецЕсли;
КонецПроцедуры 

Функция ТаблицаШаблоновИзЧтениеИзGit(ПараметрыВерсийСценариев,ДополнительныеПараметры)
	
	ПолучитьДанныеСценариевGit(ДополнительныеПараметры);
	ТаблицаШаблонов = ПустаяТаблицаШаблонов();
	Для Каждого ДанныеОдногоСценария Из ДополнительныеПараметры.ДанныеСценариевGit.UIDCценариев Цикл
		Значение = ДанныеОдногоСценария.Значение;
		СтрокаТаблицаШаблонов                   = ТаблицаШаблонов.Добавить();
		СтрокаТаблицаШаблонов.Наименование      = Значение.ИмяСценария;
		СтрокаТаблицаШаблонов.Код               = "";
		СтрокаТаблицаШаблонов.UID               = Значение.UID;
		СтрокаТаблицаШаблонов.ПараметрыВходящие = Неопределено;
		СтрокаТаблицаШаблонов.ВерсияСценария    = Неопределено;
		СтрокаТаблицаШаблонов.Снипет            = Значение.Снипет;
		СтрокаТаблицаШаблонов.СнипетНРег        = Значение.СнипетНРег;
		СтрокаТаблицаШаблонов.ЧтениеИзТекста    = Ложь;
	КонецЦикла;	 	
	
	Если ДополнительныеПараметры.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
		Для Каждого ДанныеОдногоСценария Из ДополнительныеПараметры.ДанныеРанееИзмененныхСценариев.ИзмененныеUID Цикл
			
			СтрокаТаблицаШаблонов = ТаблицаШаблонов.Найти(ДанныеОдногоСценария.UID, "UID");
			Если СтрокаТаблицаШаблонов <> Неопределено Тогда
				ТаблицаШаблонов.Удалить(СтрокаТаблицаШаблонов);
			КонецЕсли;	
			
			Снипет = "И " + ДанныеОдногоСценария.Имя;
			СнипетПоСтроке(Снипет);
			СнипетНРег = НРег(Снипет);
			
			СтрокаТаблицаШаблонов                   = ТаблицаШаблонов.Добавить();
			СтрокаТаблицаШаблонов.Наименование      = ДанныеОдногоСценария.Имя;
			СтрокаТаблицаШаблонов.Код               = "";
			СтрокаТаблицаШаблонов.UID               = ДанныеОдногоСценария.UID;
			СтрокаТаблицаШаблонов.ПараметрыВходящие = Неопределено;
			СтрокаТаблицаШаблонов.ВерсияСценария    = Неопределено;
			СтрокаТаблицаШаблонов.Снипет            = Снипет;
			СтрокаТаблицаШаблонов.СнипетНРег        = СнипетНРег;
			СтрокаТаблицаШаблонов.ЧтениеИзТекста    = Ложь;
		КонецЦикла;	
	КонецЕсли;	
	
	ТаблицаШаблонов.Индексы.Добавить("UID");
	ТаблицаШаблонов.Индексы.Добавить("СнипетНРег");
	
	Возврат ТаблицаШаблонов; 
	
КонецФункции	 

#КонецОбласти

# Область ОпределениеОператора

Функция ОператорПерейти()
	Возврат "Перейти";
КонецФункции	 

Функция ОператорЗаголовок()
	Возврат "заголовок";
КонецФункции	 

Функция ОператорЧастьЗаголовока()
	Возврат "частьзаголовка";
КонецФункции	 

Функция ОператорКонтекст()
	Возврат "контекст";
КонецФункции	 

Функция ОператорСценарий()
	Возврат "сценарий";
КонецФункции	 

Функция ОператорУсловиеПрепроцессор()
	Возврат "УсловиеПрепроцессор";
КонецФункции	 

Функция ОператорУсловие()
	Возврат "Условие";
КонецФункции	 

Функция ОператорУсловиеEng()
	Возврат "Condition";
КонецФункции	 

Функция ОператорИначеЕслиПрепроцессор()
	Возврат "ИначеЕслиПрепроцессор";
КонецФункции	 

Функция ОператорИначеПрепроцессор()
	Возврат "ИначеПрепроцессор";
КонецФункции	 

Функция ОператорКонецЕслиПрепроцессор()
	Возврат "КонецЕслиПрепроцессор";
КонецФункции	 

Функция ОператорКонецЕсли()
	Возврат "КонецЕсли";
КонецФункции	 

Функция ОператорКонецЕслиEng()
	Возврат "EndIf";
КонецФункции	 

Функция ОператорКомментарий()
	Возврат "Комментарий";
КонецФункции	 

Функция ОператорПараметрТаблица()
	Возврат "ПараметрТаблица";
КонецФункции	 

Функция ОператорБлочныйКомментарий()
	Возврат "БлочныйКомментарий";
КонецФункции	 

Функция ОператорТег()
	Возврат "Тег";
КонецФункции	 

Функция ОператорСтоп()
	Возврат "Стоп";
КонецФункции	 

Функция ОператорМетка()
	Возврат "Метка";
КонецФункции	 

Функция ОператорТаблица()
	Возврат "Таблица";
КонецФункции	 

Функция ОператорБлочныйКомменатрийНачало()
	Возврат "БлочныйКомменатрийНачало";
КонецФункции	 

Функция ОператорБлочныйКомменатрийОкончание()
	Возврат "БлочныйКомменатрийОкончание";
КонецФункции	 

Функция ОператорЦикл()
	Возврат "Цикл";
КонецФункции	 

Функция ОператорЦиклEng()
	Возврат "Do";
КонецФункции	 

Функция ОператорКонецЦикла()
	Возврат "КонецЦикла";
КонецФункции	 

Функция ОператорКонецЦиклаEng()
	Возврат "EndDo";
КонецФункции	 

Функция ОператорПередачаПараметров()
	Возврат "ПередачаПараметров";
КонецФункции

Функция ОператорПрисвоениеВозвращаемогоПараметра()
	Возврат "ПрисвоениеВозвращаемогоПараметра";
КонецФункции	 

Функция ОператорПрисвоениеВозвращаемогоПараметраEng()
	Возврат "ПрисвоениеВозвращаемогоПараметраEng";
КонецФункции	 

Функция ОператорВозвратЗначенияПараметра()
	Возврат "ВозвратЗначенияПараметра";
КонецФункции

Функция ОператорВозвратЗначенияПараметраССинонимом()
	Возврат "ВозвратЗначенияПараметраССинонимом";
КонецФункции

Функция ОператорВозвратЗначенияПараметраEng()
	Возврат "ВозвратЗначенияПараметраEng";
КонецФункции

Функция ОператорВозвратЗначенияПараметраССинонимомEng()
	Возврат "ВозвратЗначенияПараметраССинонимомEng";
КонецФункции

Функция ОператорИначеЕсли()
	Возврат "ИначеЕсли";
КонецФункции	 

Функция ОператорИначеЕслиEng()
	Возврат "ElseIf";
КонецФункции	 

Функция ОператорИначе()
	Возврат "Иначе";
КонецФункции	 

Функция ОператорИначеEng()
	Возврат "Else";
КонецФункции	 

Функция ОператорПопытка()
	Возврат "Попытка";
КонецФункции	 

Функция ОператорПопыткаEng()
	Возврат "Try";
КонецФункции	 

Функция ОператорИсключение()
	Возврат "Исключение";
КонецФункции	 

Функция ОператорИсключениеEng()
	Возврат "Except";
КонецФункции	 

Функция ОператорКонецПопытки()
	Возврат "КонецПопытки";
КонецФункции	 

Функция ОператорКонецПопыткиEng()
	Возврат "EndTry";
КонецФункции	 

Функция ОператорМногострочнаяСтрока()
	Возврат "МногострочнаяСтрока";
КонецФункции

#КонецОбласти

# Область ОпределениеИмяЭлемента

Функция ИмяЭлементаСтарт()
	Возврат "Старт";
КонецФункции	 

Функция ИмяЭлементаСтоп()
	Возврат "Стоп";
КонецФункции	 

Функция ИмяЭлементаВложенныйПроцесс()
	Возврат "ВложенныйПроцесс";
КонецФункции	 

Функция ИмяЭлементаШаблонСценария()
	Возврат "ШаблонСценария";
КонецФункции	 

Функция ИмяЭлементаМетка()
	Возврат "Метка";
КонецФункции	 

Функция ИмяЭлементаДействие()
	Возврат "Действие";
КонецФункции	 

#КонецОбласти

# Область ОпределениеОписанияЭлемента

Функция ОписаниеЭлементаСтоп()
	Возврат "Стоп";
КонецФункции	 

Функция ОписаниеЭлементаКонецЕслиПрепроцессор()
	Возврат "#КонецЕсли";
КонецФункции	 

Функция ОписаниеЭлементаКонецЕсли()
	Возврат "КонецЕсли";
КонецФункции	 

Функция ОписаниеЭлементаКонецЕслиEng()
	Возврат "EndIf";
КонецФункции	 

Функция ОписаниеЭлементаКонецЦикла()
	Возврат "КонецЦикла";
КонецФункции	 

Функция ОписаниеЭлементаКонецЦиклаEng()
	Возврат "EndDo";
КонецФункции	 

Функция ОписаниеЭлементаИначеПрепроцессор()
	Возврат "#Иначе";
КонецФункции	 

Функция ОписаниеЭлементаУсловиеПрепроцессор()
	Возврат "#Если";
КонецФункции	

Функция ОписаниеЭлементаЦикл()
	Возврат "Цикл";
КонецФункции	

Функция ОписаниеЭлементаЦиклEng()
	Возврат "Do";
КонецФункции	

Функция ОписаниеЭлементаУсловие()
	Возврат "Если";
КонецФункции	

Функция ОписаниеЭлементаУсловиеEng()
	Возврат "If";
КонецФункции	

Функция ОписаниеЭлементаСтарт()
	Возврат "Старт";
КонецФункции	 

Функция ОписаниеЭлементаИначе()
	Возврат "Иначе";
КонецФункции	

Функция ОписаниеЭлементаИначеEng()
	Возврат "Else";
КонецФункции	

Функция ОписаниеЭлементаПопытка()
	Возврат "Попытка";
КонецФункции	 

Функция ОписаниеЭлементаПопыткаEng()
	Возврат "Try";
КонецФункции	 

Функция ОписаниеЭлементаИсключение()
	Возврат "Исключение";
КонецФункции	 

Функция ОписаниеЭлементаИсключениеEng()
	Возврат "Except";
КонецФункции	 

Функция ОписаниеЭлементаКонецПопытки()
	Возврат "КонецПопытки";
КонецФункции	 

Функция ОписаниеЭлементаКонецПопыткиEng()
	Возврат "EndTry";
КонецФункции	 

#КонецОбласти

# Область ОпределениеТипаЭлемента

Функция ТипЭлементаТег()
	Возврат "Тег";
КонецФункции	 

Функция ТипЭлементаКомментарий()
	Возврат "Комментарий";
КонецФункции	 

Функция ТипЭлементаБлочныйКомментарий()
	Возврат "БлочныйКомментарий";
КонецФункции	 

Функция ТипЭлементаБлочныйКомментарийНачало()
	Возврат "БлочныйКомментарийНачало";
КонецФункции	 

Функция ТипЭлементаБлочныйКомментарийОкончание()
	Возврат "БлочныйКомментарийОкончание";
КонецФункции	 

Функция ТипЭлементаДействие()
	Возврат "Действие";
КонецФункции	 

Функция ТипЭлементаГруппаШагов()
	Возврат "ГруппаШагов";
КонецФункции	 

Функция ТипЭлементаНачалоСхемы()
	Возврат "НачалоСхемы";
КонецФункции	 

Функция ТипЭлементаСтоп()
	Возврат "Стоп";
КонецФункции	 

Функция ТипЭлементаОкончаниеСхемы()
	Возврат "ОкончаниеСхемы";
КонецФункции	 

Функция ТипЭлементаПередачаПараметров()
	Возврат "ПередачаПараметров";
КонецФункции	 

Функция ТипЭлементаПрисвоениеВозвращаемогоПараметра()
	Возврат "ПрисвоениеВозвращаемогоПараметра";
КонецФункции	 

Функция ТипЭлементаПрисвоениеВозвращаемогоПараметраEng()
	Возврат "ПрисвоениеВозвращаемогоПараметраEng";
КонецФункции	 

Функция ТипЭлементаВозвратЗначенияПараметра()
	Возврат "ВозвратЗначенияПараметра";
КонецФункции	 

Функция ТипЭлементаВозвратЗначенияПараметраEng()
	Возврат "ВозвратЗначенияПараметраEng";
КонецФункции	 

//условия
Функция ТипЭлементаУсловиеПрепроцессор()
	Возврат "УсловиеПрепроцессор";
КонецФункции	 

Функция ТипЭлементаЦикл()
	Возврат "Цикл";
КонецФункции	 

Функция ТипЭлементаЦиклEng()
	Возврат "Do";
КонецФункции	 

Функция ТипЭлементаУсловие()
	Возврат "Условие";
КонецФункции	 

Функция ТипЭлементаУсловиеEng()
	Возврат "Condition";
КонецФункции	 

Функция ТипЭлементаИначеПрепроцессор()
	Возврат "ИначеПрепроцессор";
КонецФункции	 

Функция ТипЭлементаИначе()
	Возврат "Иначе";
КонецФункции	 

Функция ТипЭлементаИначеEng()
	Возврат "Else";
КонецФункции	 

Функция ТипЭлементаИначеЕслиПрепроцессор()
	Возврат "ИначеЕслиПрепроцессор";
КонецФункции	 

Функция ТипЭлементаИначеЕсли()
	Возврат "ИначеЕсли";
КонецФункции	 

Функция ТипЭлементаИначеЕслиEng()
	Возврат "ElseIf";
КонецФункции	 

Функция ТипЭлементаНачалоУсловияПрепроцессор()
	Возврат "НачалоУсловияПрепроцессор";
КонецФункции	 

Функция ТипЭлементаНачалоУсловия()
	Возврат "НачалоУсловия";
КонецФункции	 

Функция ТипЭлементаНачалоУсловияEng()
	Возврат "BeginCondition";
КонецФункции	 

Функция ТипЭлементаНачалоЦикла()
	Возврат "НачалоЦикла";
КонецФункции	 

Функция ТипЭлементаНачалоЦиклаEng()
	Возврат "BeginDo";
КонецФункции	 

Функция ТипЭлементаКонецЕслиПрепроцессор()
	Возврат "КонецЕслиПрепроцессор";
КонецФункции	 

Функция ТипЭлементаКонецЕсли()
	Возврат "КонецЕсли";
КонецФункции	 

Функция ТипЭлементаКонецЕслиEng()
	Возврат "EndIf";
КонецФункции	 

Функция ТипЭлементаКонецЦикла()
	Возврат "КонецЦикла";
КонецФункции	 

Функция ТипЭлементаКонецЦиклаEng()
	Возврат "EndDo";
КонецФункции	 

Функция ТипЭлементаЗаголовок()
	Возврат "Заголовок";
КонецФункции	 

Функция ТипЭлементаПустаяСтрока()
	Возврат "ПустаяСтрока";
КонецФункции	 

Функция ТипЭлементаСценарий()
	Возврат "Сценарий";
КонецФункции	 

Функция ТипЭлементаЭлементЗаголовка()
	Возврат "ЭлементЗаголовка";
КонецФункции	 

Функция ТипЭлементаКонтекст()
	Возврат "Контекст";
КонецФункции	 

Функция ТипЭлементаМетка()
	Возврат "Метка";
КонецФункции	 

Функция ТипЭлементаПерейти()
	Возврат "Перейти";
КонецФункции	 

Функция ТипМногострочнаяСтрока()
	Возврат "МногострочнаяСтрока";
КонецФункции	 

Функция ТипЭлементаТаблица()
	Возврат "Таблица";
КонецФункции	 

Функция ТипЭлементаПараметрТаблица()
	Возврат "ПараметрТаблица";
КонецФункции	 

Функция ТипЭлементаВложенныйПроцесс()
	Возврат "ВложенныйПроцесс";
КонецФункции	 

Функция ТипЭлементаШагВложенногоПроцесса()
	Возврат "ШагВложенногоПроцесса";
КонецФункции	 

Функция ТипЭлементаПопытка()
	Возврат "Попытка";
КонецФункции	 

Функция ТипЭлементаНачалоПопытка()
	Возврат "НачалоПопытка";
КонецФункции	 

Функция ТипЭлементаПопыткаEng()
	Возврат "Try";
КонецФункции	 

Функция ТипЭлементаНачалоПопыткаEng()
	Возврат "BeginTry";
КонецФункции	 

Функция ТипЭлементаИсключение()
	Возврат "Исключение";
КонецФункции	 

Функция ТипЭлементаИсключениеEng()
	Возврат "Except";
КонецФункции	 

Функция ТипЭлементаКонецПопытки()
	Возврат "КонецПопытки";
КонецФункции	 

Функция ТипЭлементаКонецПопыткиEng()
	Возврат "EndTry";
КонецФункции	 

Функция ТипЭлементаМногострочнаяСтрока()
	Возврат "МногострочнаяСтрока";
КонецФункции	 

#КонецОбласти

# Область ОпределениеКлючевыхСловТекста

Функция КлючевоеСловоЕсли()
	Возврат "если";
КонецФункции	 

Функция КлючевоеСловоТогда()
	Возврат "тогда";
КонецФункции	 

Функция КлючевоеСловоКонецЕсли()
	Возврат "конецесли"; 
КонецФункции	 

Функция КлючевоеСловоЕслиEng()
	Возврат "if";
КонецФункции	 

Функция КлючевоеСловоТогдаEng()
	Возврат "then";
КонецФункции	 

Функция КлючевоеСловоКонецЕслиEng()
	Возврат "endif"; 
КонецФункции	 

Функция КлючевоеСловоЕслиПрепроцессор()
	Возврат "#если";
КонецФункции	 

Функция КлючевоеСловоЦикл()
	Возврат "цикл";
КонецФункции	 

Функция КлючевоеСловоЦиклEng()
	Возврат "do";
КонецФункции	 

Функция КлючевоеСловоКонецЦикла()
	Возврат "конеццикла";
КонецФункции	 

Функция КлючевоеСловоКонецЦиклаEng()
	Возврат "enddo";
КонецФункции	 

Функция КлючевоеСловоИначеПрепроцессор()
	Возврат "#иначе";
КонецФункции	 

Функция КлючевоеСловоТогдаПрепроцессор()
	Возврат "тогда";
КонецФункции	 

Функция КлючевоеСловоИначеЕслиПрепроцессор()
	Возврат "#иначеесли";
КонецФункции	 

Функция КлючевоеСловоКонецЕслиПрепроцессор()
	Возврат "#конецесли"; 
КонецФункции	 

Функция КлючевоеСловоСтоп()
	Возврат "стоп"; 
КонецФункции	 

Функция КлючевоеСловоПерейти()
	Возврат "перейти";
КонецФункции	 

Функция КлючевоеФункционал()
	Возврат "функционал:";
КонецФункции	 

Функция КлючевоеФункциональность()
	Возврат "функциональность:";
КонецФункции	 

Функция КлючевоеКонтекст()
	Возврат "контекст:";
КонецФункции	 

Функция КлючевоеСценарий()
	Возврат "сценарий:";
КонецФункции	 

Функция КлючевоеСловоИначеЕсли()
	Возврат "иначеесли";
КонецФункции	 

Функция КлючевоеСловоИначе()
	Возврат "иначе";
КонецФункции	 

Функция КлючевоеСловоИначеЕслиEng()
	Возврат "elseif";
КонецФункции	 

Функция КлючевоеСловоИначеEng()
	Возврат "else";
КонецФункции	 

Функция КлючевоеСловоПопытка()
	Возврат "попытка";
КонецФункции	 

Функция КлючевоеСловоПопыткаEng()
	Возврат "try";
КонецФункции	 

Функция КлючевоеСловоИсключение()
	Возврат "исключение";
КонецФункции	 

Функция КлючевоеСловоИсключениеEng()
	Возврат "except";
КонецФункции	 

Функция КлючевоеСловоКонецПопытки()
	Возврат "конецпопытки";
КонецФункции	 

Функция КлючевоеСловоКонецПопыткиEng()
	Возврат "endtry";
КонецФункции	 

#КонецОбласти

# Область ОпределениеТипВыделенияПараметраВТексте

Функция ТипВыделенияПараметраУсловие()
	Возврат "Условие";
КонецФункции	 

Функция ТипВыделенияПередачаПараметров()
	Возврат "ПередачаПараметров";
КонецФункции	 

#КонецОбласти

#КонецЕсли
