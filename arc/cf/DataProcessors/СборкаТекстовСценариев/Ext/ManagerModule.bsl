#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции	
	
//Возвращает данные для подключения TestClient
//
// Параметры:
//  ПрофильПользователя - СправочникСсылка.ПрофилиПользователей
//  БазаДанных - СправочникСсылка.ЭталонныеБазы
//
// Возвращаемое значение:
//  - Структура
//  - Неопределено
//
Функция ДанныеДляПодключенияКБДTestClient(Знач ПрофильПользователя,БазаДанных,НастройкаСценария) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БазыДанныхПользователи.Логин КАК Логин,
		|	БазыДанныхПользователи.Пароль КАК Пароль,
		|	БазыДанныхПользователи.ПрофильПользователя.Наименование КАК ИмяПрофиля
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования.Пользователи КАК БазыДанныхПользователи
		|ГДЕ
		|	БазыДанныхПользователи.Ссылка = &Ссылка
		|	И (БазыДанныхПользователи.ПрофильПользователя = &ПрофильПользователя
		|			ИЛИ БазыДанныхПользователи.ПрофильПользователя.Наименование = &ПрофильПользователя)";
	
	Если ЗначениеЗаполнено(НастройкаСценария) Тогда
		ПрофильПользователя = НастройкаСценария.ПрофильПользователя;
	КонецЕсли;	 
	
	Запрос.УстановитьПараметр("ПрофильПользователя", ПрофильПользователя);
	Запрос.УстановитьПараметр("Ссылка", БазаДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Новый Структура("Логин,Пароль,ИмяПрофиля",ВыборкаДетальныеЗаписи.Логин,ВыборкаДетальныеЗаписи.Пароль,
		                                                                          ВыборкаДетальныеЗаписи.ИмяПрофиля);
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

//Возвращает данные для подключения TestClient
//
// Параметры:
//  Сценарий - СправочникСсылка.СценарииРаботыПользователей
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ДанныеВложенныхСценариевИзБД(Сценарий) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииВерсииШаблонов.Шаблон КАК Шаблон
		|ПОМЕСТИТЬ ВложенныеСценарии
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ВерсииШаблонов КАК СценарииВерсииШаблонов
		|ГДЕ
		|	СценарииВерсииШаблонов.Ссылка = &Ссылка
		|	И НЕ СценарииВерсииШаблонов.Ссылка.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныеСценарии.Шаблон.Ссылка КАК ВложенныйСценарий,
		|	ВложенныеСценарии.Шаблон.ХранилищеСтруктурыСхемы КАК ХранилищеСтруктурыСхемы
		|ИЗ
		|	ВложенныеСценарии КАК ВложенныеСценарии";
	
	Запрос.УстановитьПараметр("Ссылка", Сценарий);
	
	Тзн = Запрос.Выполнить().Выгрузить();
	Тзн.Колонки.Добавить("ДеревоВложенногоСценария");
	
	Для Каждого СтрТзн Из Тзн Цикл
		СтрТзн.ДеревоВложенногоСценария = СтрТзн.ХранилищеСтруктурыСхемы.Получить();
	КонецЦикла;	
	
	Возврат Тзн;
КонецФункции	

//Возвращает данные для подключения TestClient
//
// Параметры:
//  ПараметрыВерсийСценариев - Структура
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ТаблицаШаблоновСценариев(ПараметрыВерсийСценариев) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сценарии.Ссылка КАК Ссылка,
		|	Сценарии.Наименование КАК Наименование,
		|	Сценарии.ВерсияСценария КАК ВерсияСценария,
		|	Сценарии.ФункцияСистемы.Владелец КАК Проект,
		|	Сценарии.СнипетСценария КАК СнипетСценария,
		|	Сценарии.Код КАК Код
		|ПОМЕСТИТЬ Шаблоны
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК Сценарии
		|ГДЕ
		|	НЕ Сценарии.ПометкаУдаления
		|	И (Сценарии.РазрешеноИспользоватьВДругихФункциях
		|			ИЛИ Сценарии.ФункцияСистемы = &ФункцияСистемы)
		|	И НЕ Сценарии.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шаблоны.Ссылка КАК Ссылка,
		|	Шаблоны.ВерсияСценария КАК ВерсияСценария,
		|	Шаблоны.Наименование КАК Наименование,
		|	Шаблоны.СнипетСценария КАК СнипетСценария,
		|	Шаблоны.Код КАК Код
		|ИЗ
		|	Шаблоны КАК Шаблоны
		|ГДЕ
		|	Шаблоны.Проект В(&Проект)";
	
	Запрос.УстановитьПараметр("Проект", ПараметрыВерсийСценариев.Проект);
	Запрос.УстановитьПараметр("ФункцияСистемы", ПараметрыВерсийСценариев.ФункцияСистемы);
	
	Тзн = Запрос.Выполнить().Выгрузить();
	
	Возврат Тзн;
КонецФункции	

//Возвращает нужный тип параметра
//
// Параметры:
//  ТипПараметра - Строка
//
// Возвращаемое значение:
//  Перечисление.ТипПараметраСценария
//
Функция ТипПараметра(ТипПараметра) Экспорт
	Если ТипПараметра = "Строка" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Строка;
	ИначеЕсли ТипПараметра = "Число" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Число;
	ИначеЕсли ТипПараметра = "Дата" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Дата;
	ИначеЕсли ТипПараметра = "Макет" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Макет;
	ИначеЕсли ТипПараметра = "Таблица" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Таблица;
	Иначе
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Строка;
	КонецЕсли;	 
КонецФункции	

//Возвращает набор свойств объекта.
//
// Параметры:
//  Проект - СправочникСсылка.Проекты
//  ИмяНабора - Строка
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция НаборСвойствОбъекта(Проект, ИмяНабора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.НаборСвойствДляПроцессовВыгружаемый КАК Набор
		|ПОМЕСТИТЬ НаборСвойств
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.Ссылка = &Проект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка КАК Ссылка,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.НомерСтроки КАК НомерСтроки,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Наименование КАК Наименование
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		|ГДЕ
		|	НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка В
		|			(ВЫБРАТЬ
		|				НаборСвойств.Набор
		|			ИЗ
		|				НаборСвойств)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"НаборСвойствДляПроцессовВыгружаемый", ИмяНабора);
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Тзн = Запрос.Выполнить().Выгрузить();
	Тзн.Индексы.Добавить("Свойство");
	Возврат Тзн;
	
КонецФункции	 

// Возвращает значения дополнительных свойств объектов с помощью вызова УправлениеСвойствами.ЗначенияСвойств
//
// Параметры:
//  ОбъектыСоСвойствами  - Массив      - объекты, для которых нужно получить значения дополнительных свойств.
//                       - ЛюбаяСсылка - ссылка на объект, например, СправочникСсылка.Номенклатура,
//                                       ДокументСсылка.ЗаказПокупателя, ...
//  ПолучатьДопРеквизиты - Булево - в результат включать дополнительные реквизиты. По умолчанию Истина.
//  ПолучатьДопСведения  - Булево - в результат включать дополнительные сведения. По умолчанию Истина.
//  Свойства             - Массив - свойства:
//                          * ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - значения
//                            которых следует получить.
//                          * Строка - уникальное имя дополнительного свойства.
//                       - Неопределено - по умолчанию, получить значения всех свойств владельца.
//
// Возвращаемое значение:
//  ТаблицаЗначений - колонки:
//    * Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство владельца.
//    * Значение - Произвольный - значения любого типа из описания типов свойства объекта метаданных:
//                  "Метаданные.ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Тип".
//    * ВладелецСвойств - ЛюбаяСсылка - ссылка на объект.
//
Функция ЗначенияСвойств(ОбъектыСоСвойствами,
                        ПолучатьДопРеквизиты = Истина,
                        ПолучатьДопСведения = Истина,
                        Свойства = Неопределено) Экспорт
						
	Возврат УправлениеСвойствами.ЗначенияСвойств(ОбъектыСоСвойствами,
                        ПолучатьДопРеквизиты,
                        ПолучатьДопСведения,
                        Свойства); 
КонецФункции

// Возвращает данные сценария пользователя из репозитория
// Параметры:
//  Проект - Справочники.Проекты
//  ДанныеСценария - Структура
//  ТокенПользователя - Строка
//  Ветка - Справочник.Ветки
//  ИдентификаторКоммита - Строка
//
// Возвращаемое значение:
//  Структура
//
Функция ДанныеСценарияИзРепозитория(Проект, ДанныеСценария, ТокенПользователя, Ветка, ИдентификаторКоммита) Экспорт
	Возврат Тестирование.ДанныеСценарияИзРепозитория(
		Проект, ДанныеСценария, ТокенПользователя, Ветка, ИдентификаторКоммита);
КонецФункции	 

// Возвращает данные сценария пользователя из репозитория
// Параметры:
//  ЭталоннаяБаза - Справочники.ЭталонныеБазыТестирования

// Возвращаемое значение:
//  Структура
//
Функция ДанныеЭталоннойБазы(ЭталоннаяБаза) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", ЭталоннаяБаза);
	Результат.Вставить("Наименование", Неопределено);
	Результат.Вставить("ИдентификаторБазы", Неопределено);
	Результат.Вставить("Код", Неопределено);
	Результат.Вставить("Проект", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭталонныеБазыТестирования.Ссылка КАК Ссылка,
		|	ЭталонныеБазыТестирования.Наименование КАК Наименование,
		|	ЭталонныеБазыТестирования.ИдентификаторБазы КАК ИдентификаторБазы,
		|	ЭталонныеБазыТестирования.Код КАК Код,
		|	ЭталонныеБазыТестирования.Владелец КАК Проект
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования КАК ЭталонныеБазыТестирования
		|ГДЕ
		|	ЭталонныеБазыТестирования.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЭталоннаяБаза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Результат.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
		Результат.Вставить("ИдентификаторБазы", ВыборкаДетальныеЗаписи.ИдентификаторБазы);
		Результат.Вставить("Код", ВыборкаДетальныеЗаписи.Код);
		Результат.Вставить("Проект", ВыборкаДетальныеЗаписи.Проект);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции	 

#КонецОбласти

#КонецЕсли