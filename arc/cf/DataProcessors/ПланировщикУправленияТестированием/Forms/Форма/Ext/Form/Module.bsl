#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтображаемаяДата = ТекущаяДата();
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Объект.Проект = Проекты.ПроектПоУмолчанию();
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ЗаполнитьТабличныеЧастиФормы();
	КонецЕсли;
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	Если ЕстьИзменения Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, Параметры);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		ЗаполнитьТабличныеЧастиФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриИзменении(Элемент)
	Если ЕстьИзменения Тогда
		Оповещение = Новый ОписаниеОповещения("ОтображаемаяДатаПриИзмененииЗавершение", ЭтотОбъект, Параметры);
		ТекстВопроса = НСтр("ru = 'Расписание на дату было изменено. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,
			КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	УстановитьДоступностьЭлементов();
	ЗаполнитьТаблицуРасписаниеПоДате();
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЕстьИзменения И РасписаниеЗаполненоСОшибками() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыРасписание

&НаКлиенте
Процедура РасписаниеПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элементы.РасписаниеКонтекстноеМенюСтатусЗапуска.Видимость = ЗначениеЗаполнено(Элемент.ТекущиеДанные.ЗапускТестирования);
		Элементы.РасписаниеКонтекстноеМенюГруппаСтандартныеКоманды.Доступность = Элемент.ТекущиеДанные.ДоступноРедактирование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ИмяПоля = СтрЗаменить(Поле.Имя, Элемент.Имя, "");

		Если ИмяПоля = "НастройкаЗапуска"
			И Элемент.ТекущиеДанные["ДоступноРедактирование"]
			И ЗначениеЗаполнено(Элемент.ТекущиеДанные["Ветка"]) Тогда
			// Можно редактировать настройку у запуска, который ещё не запустился
			УстановитьПризнакЕстьИзменения(Истина);
			Возврат;
		КонецЕсли;
				
		Если ИмяПоля = "ЗапускТестированияПроведен" ИЛИ ИмяПоля = "ДатаВремяЗапуска" Тогда
			ИмяПоля = "ЗапускТестирования";
		КонецЕсли;

		Если Элемент.ТекущиеДанные.Свойство(ИмяПоля) Тогда
			СтандартнаяОбработка = Ложь;

			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные[ИмяПоля])
				И ЗначениеСсылочногоТипа(Элемент.ТекущиеДанные[ИмяПоля]) Тогда  
				ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные[ИмяПоля]);
				Возврат;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	ОчисткаВыполнена = Ложь;
	Для Каждого Индекс Из Элемент.ВыделенныеСтроки Цикл
		Если Элемент.ДанныеСтроки(Индекс).ДоступноРедактирование Тогда
			ОчисткаВыполнена = Истина;
			
			Строки = ВеткиНаТестировании.НайтиСтроки(Новый Структура("Ветка", Элемент.ДанныеСтроки(Индекс).Ветка));
			ВеткиВРасписании = Расписание.НайтиСтроки(Новый Структура("Ветка", Элемент.ДанныеСтроки(Индекс).Ветка));
			Для Каждого Строка Из Строки Цикл
				Строка.ПоставленВРасписание = ВеткиВРасписании.Количество() - 1 > 0;
			КонецЦикла;
			
			Элемент.ДанныеСтроки(Индекс).Ветка = Неопределено;
			Элемент.ДанныеСтроки(Индекс).НастройкаЗапуска = Неопределено;
			Элемент.ДанныеСтроки(Индекс).ЗапускТестирования = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	Если ОчисткаВыполнена Тогда
		УстановитьПризнакЕстьИзменения(Истина);
		ОбновитьРасписание();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОчиститьСообщения();
	
	Если (Строка <> Неопределено И 
		НЕ Элемент.ДанныеСтроки(Строка).ДоступноРедактирование)
		ИЛИ Расписание.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		// Нельзя изменять запущенные запуски тестирования.
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Строка = Неопределено Тогда
		ЗаменяемаяСтрока = Расписание[Расписание.Количество()-1];
	Иначе
		ЗаменяемаяСтрока = Элемент.ДанныеСтроки(Строка);
	КонецЕсли;
	
	ДоступнаяМощность = 0;
	ИндексСтроки = Расписание.Индекс(Элемент.ДанныеСтроки(Строка));
	ИндексСтроки = Макс(ИндексСтроки, 0);
	ПеретаскиваемыеСтроки = Новый Массив;
	Для Каждого ЭлементПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
		Если ТипЗнч(ЭлементПеретаскивания) = Тип("Число") Тогда
			ПеретаскиваемыеСтроки.Добавить(Расписание.Индекс(Элемент.ДанныеСтроки(ЭлементПеретаскивания)));
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Пока ИндексСтроки < Расписание.Количество() Цикл
		Если НЕ ЗначениеЗаполнено(Расписание[ИндексСтроки].Ветка) 
			ИЛИ ПеретаскиваемыеСтроки.Найти(ИндексСтроки) <> Неопределено Тогда 
			ДоступнаяМощность = ДоступнаяМощность + Расписание[ИндексСтроки].ДоступнаяМощность;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		СтандартнаяОбработка = Ложь;

		ТекущийИндекс = 0;
		ВеткиСтоятВРасписании = Новый Массив;
		Для Каждого СтрокаПеретаскивания Из ПараметрыПеретаскивания.Значение Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаПеретаскивания.Ветка) Тогда
				Продолжить;
			КонецЕсли;

			Если СтрокаПеретаскивания.ПоставленВРасписание Тогда
				ВеткиСтоятВРасписании.Добавить(СтрокаПеретаскивания.Ветка);
			ИначеЕсли СтрокаПеретаскивания.ЗанимаемаяМощностьНастройки > ДоступнаяМощность Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Для тестирования ветки ""%1"" в %2 не хватает %3 мощности. 
									|Выберите время где доступна необходимая мощность.'"),
								СтрокаПеретаскивания.Ветка,
								ЗаменяемаяСтрока.ДатаВремяЗапуска,
								Строка(СтрокаПеретаскивания.ЗанимаемаяМощностьНастройки - ДоступнаяМощность) + " %");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе
				СтрокаРасписания = Расписание.Добавить();
				СтрокаРасписания.ДатаВремяЗапуска = ЗаменяемаяСтрока.ДатаВремяЗапуска;
				СтрокаРасписания.Ветка = СтрокаПеретаскивания.Ветка;
				СтрокаРасписания.НастройкаЗапуска = СтрокаПеретаскивания.НастройкаЗапускаТестирования;
				СтрокаРасписания.ЗанимаемаяМощность = СтрокаПеретаскивания.ЗанимаемаяМощностьНастройки;
				СтрокаРасписания.ДоступнаяМощность = ДоступнаяМощность - СтрокаПеретаскивания.ЗанимаемаяМощностьНастройки;
				СтрокаРасписания.ДоступноРедактирование = Истина;
				СтрокаПеретаскивания.ПоставленВРасписание = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ВеткиСтоятВРасписании.Количество() > 0 Тогда
			ШабонСообщения = ?(ВеткиСтоятВРасписании.Количество() > 1, 
							НСтр("ru = 'Ветки %1 уже стоят в расписании.'"), 
							НСтр("ru = 'Ветка ""%1"" уже стоит в расписании.'"));
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШабонСообщения,
							СтрСоединить(ВеткиСтоятВРасписании, ", "));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ОбновитьРасписание();
	Иначе
		МассивИндексовСтрокПоменявшихМесто = Новый Массив;
		Для Каждого Индекс Из ПараметрыПеретаскивания.Значение Цикл 
			Если НЕ Элемент.ДанныеСтроки(Индекс).ДоступноРедактирование
				ИЛИ НЕ ЗначениеЗаполнено(Элемент.ДанныеСтроки(Индекс).Ветка) Тогда
				СтандартнаяОбработка = Ложь;
				// Нельзя изменять запущенные запуски тестирования.
				Возврат;
			ИначеЕсли Элемент.ДанныеСтроки(Индекс).ЗанимаемаяМощность > ДоступнаяМощность Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Для тестирования ветки ""%1"" в %2 не хватает %3 мощности. 
									|Выберите время где доступна необходимая мощность.'"),
								Элемент.ДанныеСтроки(Индекс).Ветка,
								ЗаменяемаяСтрока.ДатаВремяЗапуска,
								Строка(Элемент.ДанныеСтроки(Индекс).ЗанимаемаяМощность - ДоступнаяМощность) + " %");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СтандартнаяОбработка = Ложь;
				Возврат;
			Иначе
				Элемент.ДанныеСтроки(Индекс).ДатаВремяЗапуска = ЗаменяемаяСтрока.ДатаВремяЗапуска;
				Если ЗначениеЗаполнено(ЗаменяемаяСтрока.Ветка) Тогда
					
					ИндексСтрокиПриемник = Макс(Расписание.Индекс(ЗаменяемаяСтрока), 0);
					ИндексСтрокиИсточник = Макс(Расписание.Индекс(Элемент.ДанныеСтроки(Индекс)), 0);
					Если ИндексСтрокиИсточник > ИндексСтрокиПриемник Тогда
						Начало = ИндексСтрокиПриемник; 
						Конец = ИндексСтрокиИсточник - 1;
					Иначе
						Начало = ИндексСтрокиИсточник + 1; 
						Конец = ИндексСтрокиПриемник;
					КонецЕсли;

					Для ИндексСтроки = Начало ПО Конец Цикл
						МассивИндексовСтрокПоменявшихМесто.Добавить(ИндексСтроки);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Для Каждого Индекс Из МассивИндексовСтрокПоменявшихМесто Цикл
				Если Индекс < Расписание.Количество() 
					И Расписание[Индекс].ДоступноРедактирование 
					И ЗначениеЗаполнено(Расписание[Индекс].Ветка) Тогда
					Расписание[Индекс].ДатаВремяЗапуска = Дата(1,1,1,0,0,0);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	УстановитьПризнакЕстьИзменения(Истина);

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ЕстьИзменения Тогда
		ОбновитьРасписание();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеНастройкаЗапускаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДоступнаяМощность = 0;
	Для Каждого Строка Из ДоступноеВремяИМощность Цикл
		ДоступнаяМощность = ДоступнаяМощность + Строка.СвободнаяМощность;
	КонецЦикла;
	Остаток = ОстатокМощностиПриИзмененииНастройкиЗапуска(ВыбранноеЗначение, 
															Элемент.Родитель.ТекущиеДанные.НастройкаЗапуска,
															ДоступнаяМощность);
	Если Остаток < 0 Тогда
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Для выбора настройки ""%1"" не хватает %2 мощности.'"),
								ВыбранноеЗначение,
								Строка(-Остаток) + " %");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеНастройкаЗапускаПриИзменении(Элемент)
	ОбновитьРасписание();
	УстановитьПризнакЕстьИзменения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеНастройкаЗапускаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВеткиНаТестировании

&НаКлиенте
Процедура ВеткиНаТестированииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ИмяПоля = СтрЗаменить(Поле.Имя, Элемент.Имя, "");;
		Если ИмяПоля = "КоличествоНеотработанныхОшибок" Тогда
			ИмяПоля = "Ветка";
		ИначеЕсли ИмяПоля = "ПоследнийЗапускТестированияДата" Тогда
			ИмяПоля = "ПоследнийЗапускТестирования";
		ИначеЕсли ИмяПоля = "ПервыйЗапускТестированияДата" Тогда
			ИмяПоля = "ПервыйЗапускТестирования";
		КонецЕсли;

		Если Элемент.ТекущиеДанные.Свойство(ИмяПоля) Тогда
			СтандартнаяОбработка = Ложь;
			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные[ИмяПоля]) 
				И ЗначениеСсылочногоТипа(Элемент.ТекущиеДанные[ИмяПоля]) Тогда  
				ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные[ИмяПоля]);
				Возврат;
			Иначе
				ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные["Ветка"]);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВеткиНаТестированииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	УстановитьПризнакЕстьИзменения(Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСлотыТестирования(Команда)
	ПараметрыФормы = Новый Структура("Проект", Объект.Проект);
	ОповещениеУстановка = Новый ОписаниеОповещения("ОбновлениеСлотовТестирования", ЭтаФорма);
	ОткрытьФорму("Обработка.ПланировщикУправленияТестированием.Форма.ФормаСлотыТестирования", ПараметрыФормы, ЭтаФорма,,,,ОповещениеУстановка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасписаниеПоДате(Команда)
	Если ЕстьИзменения Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРасписаниеПоДатеЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;

	ЗаполнитьРасписаниеПоДатеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗапуска(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.Расписание.ТекущиеДанные.ЗапускТестирования) Тогда
		Возврат;
	КонецЕсли;

	Ветки = Новый Массив;
	Ветки.Добавить(Элементы.Расписание.ТекущиеДанные.Ветка);
	
	ЗапускТестирования = Элементы.Расписание.ТекущиеДанные.ЗапускТестирования;
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка, ЗапускТестирования", 
		"СтатусПрохожденияТестовВВетке",
		Истина, 
		Истина, 
		Ветки,
		ЗапускТестирования);
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);
	

КонецПроцедуры

&НаКлиенте
Процедура СтатусТестов(Команда)

	Ветки = Новый Массив;
	Ветки.Добавить(Элементы.ВеткиНаТестировании.ТекущиеДанные.Ветка);
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка", 
		"СтатусПрохожденияТестовВВетке",
		Истина, 
		Истина, 
		Ветки);
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоместитьВетку(Команда)
	
	ОчиститьСообщения();
	ПомещенныеВетки = Новый Массив;
	Если Элементы.ВеткиНаТестировании.ВыделенныеСтроки.Количество() > 0 Тогда
		ВеткиДляПомещения = Новый Массив;
		Для Каждого Строка из Элементы.ВеткиНаТестировании.ВыделенныеСтроки Цикл
			ВеткиДляПомещения.Добавить(ВеткиНаТестировании[Строка].Ветка);
		КонецЦикла;
		ПоместитьВеткиНаСервере(ВеткиДляПомещения, ПомещенныеВетки);
	КонецЕсли;
	
	Индекс = ВеткиНаТестировании.Количество();
	Пока Индекс > 0 Цикл
		Индекс = Индекс-1;
		Строка = ВеткиНаТестировании[Индекс];
		Если ПомещенныеВетки.Найти(Строка.Ветка) <> Неопределено Тогда
			ВеткиНаТестировании.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Помещено %1 веток'"), 
			ПомещенныеВетки.Количество());
	
	ПоказатьОповещениеПользователя(НСтр("ru='Ветки помещены'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестирование(Команда)
	
	ОткрытьФорму(
		"Документ.ЗапускТестирования.Форма.ФормаДокумента",
		Новый Структура("Ветка", Элементы.ВеткиНаТестировании.ТекущиеДанные.Ветка),
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестыВыполненныеСОшибкой(Команда)
	
	ОткрытьФорму(
		"Документ.ЗапускТестирования.Форма.ФормаДокумента",
		Новый Структура("Ветка, ЗапуститьТестыВыполненныеСОшибкой", Элементы.ВеткиНаТестировании.ТекущиеДанные.Ветка, Истина),
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	СохранитьРасписание();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	Отказ = Ложь;
	СохранитьРасписание(Отказ);
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		Если НЕ ЕстьИзменения Тогда
			ЗаполнитьТаблицуРасписаниеПоДате();
		КонецЕсли;
		ЗаполнитьВеткиНаТестировании(); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьРасписание(Команда)
	
	ДатаСтроки = Дата(1,1,1,0,0,0);
	Для Каждого СуществующаяСтрока Из Расписание Цикл
		Если НЕ СуществующаяСтрока.ДоступноРедактирование Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СуществующаяСтрока.ДатаВремяЗапуска) Тогда
			Если ЗначениеЗаполнено(СуществующаяСтрока.Ветка) И НЕ ЗначениеЗаполнено(ДатаСтроки) Тогда
				ДатаСтроки = СуществующаяСтрока.ДатаВремяЗапуска;
				Продолжить;
			ИначеЕсли НЕ ЗначениеЗаполнено(СуществующаяСтрока.Ветка) Тогда
				ДатаСтроки = Дата(1,1,1,0,0,0);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаСтроки) И ЗначениеЗаполнено(СуществующаяСтрока.Ветка) Тогда
			УстановитьПризнакЕстьИзменения(Истина);
			СуществующаяСтрока.ДатаВремяЗапуска = Дата(1,1,1,0,0,0);
		КонецЕсли;
	КонецЦикла;

	ОбновитьРасписание();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	Элементы.ГруппаРасписание.Доступность = ЗначениеЗаполнено(Объект.Проект);
	Элементы.ГруппаКнопкиКоманднойПанели.Доступность = ЗначениеЗаполнено(Объект.Проект);
	Элементы.ЗаполнитьРасписание.Доступность = ОтображаемаяДата >= НачалоДня(ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеСлотовТестирования(РезультатДействия, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(РезультатДействия)=Тип("Структура") И РезультатДействия.Свойство("БылиИзменения") И РезультатДействия.БылиИзменения Тогда
		ОбновитьРасписание();
		Для Каждого Строка Из Расписание Цикл
			Если Строка.ЗанимаемаяМощность > Строка.ДоступнаяМощность Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'После изменений, для ветки ""%1"" не хватает %2 мощности.'"),
									Строка.Ветка,
									Строка(Строка.ЗанимаемаяМощность - Строка.ДоступнаяМощность)) + " %";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныеЧастиФормы()
	Элементы.ОткрытьСлотыТестирования.Видимость = ЗначениеЗаполнено(Объект.Проект); 
	ЗаполнитьТаблицуРасписаниеПоДате();
	ЗаполнитьВеткиНаТестировании();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВеткиНаТестировании()

	МассивРезультатов = ЗаполнитьВеткиНаТестированииНаСервере();
	Для Каждого ЭлементРезультата Из МассивРезультатов Цикл
		Результат = ЭлементРезультата.Результат;
		
		Если Результат.Статус = "Выполнено" Тогда
			ЗаполнитьВеткиНаТестированииЗавершение(Результат, ЭлементРезультата.Ветка);
		Иначе
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьВеткиНаТестированииЗавершение", ЭтотОбъект, ЭлементРезультата.Ветка);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
			ПараметрыОжидания.ВыводитьСообщения = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВеткиНаТестированииНаСервере()
	
	ВеткиНаТестировании.Очистить();
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Ветки.Ссылка КАК Ссылка,
	               |	Ветки.Тип КАК Тип
	               |ПОМЕСТИТЬ Ветки
	               |ИЗ
	               |	Справочник.Ветки КАК Ветки
	               |ГДЕ
	               |	Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Тестируется)
	               |	И НЕ Ветки.ПометкаУдаления
	               |	И Ветки.Владелец = &Проект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Ветки.Ссылка КАК Ссылка,
	               |	Ветки.Тип КАК Тип,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ошибки.Ссылка) КАК КоличествоОшибок
	               |ПОМЕСТИТЬ ВеткиСОшибками
	               |ИЗ
	               |	Ветки КАК Ветки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки КАК Ошибки
	               |		ПО (Ветки.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта), ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаДляИсправленияОшибок)))
	               |			И (Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана)))
	               |			И (Ошибки.ВеткаОбнаружения = Ветки.Ссылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Ветки.Ссылка,
	               |	Ветки.Тип
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Ветки.Ссылка КАК Ссылка,
	               |	Ветки.Тип КАК Тип,
	               |	Ветки.КоличествоОшибок КАК КоличествоОшибок,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗапускТестирования.Ссылка) КАК КоличествоЗапусковТестирования,
	               |	МИНИМУМ(ЗапускТестирования.Ссылка) КАК ПервыйЗапускТестирования,
	               |	ВЫБОР
	               |		КОГДА НЕ ПоследнийЗапускТестирования.Ссылка ЕСТЬ NULL
	               |			ТОГДА ПоследнийЗапускТестирования.Ссылка
	               |		ИНАЧЕ МАКСИМУМ(ЗапускТестирования.Ссылка)
	               |	КОНЕЦ КАК ПоследнийЗапускТестирования
	               |ПОМЕСТИТЬ ВеткиСЗапусками
	               |ИЗ
	               |	ВеткиСОшибками КАК Ветки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапускТестирования КАК ЗапускТестирования
	               |		ПО (Ветки.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта), ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаДляИсправленияОшибок)))
	               |			И (ЗапускТестирования.Ветка = Ветки.Ссылка)
	               |			И (ЗапускТестирования.Проведен)
	               |			И (НЕ ЗапускТестирования.ПометкаУдаления)
	               |			И (ЗапускТестирования.Настройка <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапускТестирования КАК ПоследнийЗапускТестирования
	               |		ПО (НЕ Ветки.Тип В (ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта), ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаДляИсправленияОшибок)))
	               |			И (ПоследнийЗапускТестирования.Ссылка В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ЗапускТестированияВыборка.Ссылка
	               |				ИЗ
	               |					Документ.ЗапускТестирования КАК ЗапускТестированияВыборка
	               |				ГДЕ
	               |					ЗапускТестированияВыборка.Ветка = Ветки.Ссылка
	               |					И ЗапускТестированияВыборка.Проведен
	               |					И НЕ ЗапускТестированияВыборка.ПометкаУдаления
	               |					И ЗапускТестированияВыборка.Настройка <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
	               |				УПОРЯДОЧИТЬ ПО
	               |					ЗапускТестированияВыборка.Дата УБЫВ))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Ветки.Ссылка,
	               |	Ветки.КоличествоОшибок,
	               |	Ветки.Тип,
	               |	ПоследнийЗапускТестирования.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Ветки.Ссылка КАК Ветка,
	               |	Ветки.Ссылка.Имя КАК ВеткаИмя,
				   |	Ветки.Ссылка.Приемник.Имя КАК ВеткаПриемникИмя,
	               |	Ветки.Ссылка.НастройкаЗапускаТестирования КАК НастройкаЗапускаТестирования,
	               |	Ветки.Ссылка.НастройкаЗапускаТестирования.ЗанимаемаяМощность КАК ЗанимаемаяМощностьНастройки,
	               |	Ветки.КоличествоОшибок КАК КоличествоНеотработанныхОшибок,
	               |	Ветки.КоличествоЗапусковТестирования КАК КоличествоЗапусков,
	               |	ВЫБОР
	               |		КОГДА Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	               |			ТОГДА 0
	               |		КОГДА Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаВЕрсии)
	               |			ТОГДА 1
	               |		КОГДА Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта)
	               |			ТОГДА 2
	               |		КОГДА Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаДляИсправленияОшибок)
	               |			ТОГДА 3
	               |		ИНАЧЕ 4
	               |	КОНЕЦ КАК ПорядокПоТипу,
	               |	Ветки.ПоследнийЗапускТестирования КАК ПоследнийЗапускТестирования,
	               |	Ветки.ПоследнийЗапускТестирования.Дата КАК ПоследнийЗапускТестированияДата,
	               |	Ветки.ПоследнийЗапускТестирования.Pipeline_ID КАК ИдентификаторПоследнегоЗапуска,
	               |	Ветки.ПервыйЗапускТестирования КАК ПервыйЗапускТестирования,
	               |	Ветки.ПервыйЗапускТестирования.Дата КАК ПервыйЗапускТестированияДата,
	               |	СостояниеТестированияВетокСрезПоследних.СостояниеТестирования КАК СостояниеТестирования
	               |ИЗ
	               |	ВеткиСЗапусками КАК Ветки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеТестированияВеток.СрезПоследних КАК СостояниеТестированияВетокСрезПоследних
	               |		ПО Ветки.Ссылка = СостояниеТестированияВетокСрезПоследних.Ветка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПорядокПоТипу,
	               |	ВеткаИмя";
	
	Запрос.УстановитьПараметр("Проект", Объект.Проект);

	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивРезультатов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Если НЕ ЭтуВеткуНадоДобавлятьВПланировщик(Выборка) Тогда
			Продолжить;
		КонецЕсли;	
		НоваяСтрока = ВеткиНаТестировании.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПоставленВРасписание = Расписание.НайтиСтроки(Новый Структура("Ветка", Выборка.Ветка)).Количество() > 0;
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновая проверка изменений в ветке'");
		
		Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
														"ТестированиеЗапускТестирования.ЕстьИзмененияВВетке", 
														Объект.Проект, 
														Выборка.ВеткаИмя, 
														Выборка.ВеткаПриемникИмя, 
														Выборка.ИдентификаторПоследнегоЗапуска);
		МассивРезультатов.Добавить(Новый Структура("Ветка, Результат", Выборка.Ветка, Результат));
	КонецЦикла;
	
	Возврат МассивРезультатов;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьВеткиНаТестированииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	// задание было отменено.
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РезультатВыполнения = Неопределено;
	Строки = ВеткиНаТестировании.НайтиСтроки(Новый Структура("Ветка", ДополнительныеПараметры));
	Если Результат.Статус = "Выполнено" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		Для Каждого Строка Из Строки Цикл
			Строка.ЕстьИзмененияСПоследнегоЗапуска = РезультатВыполнения;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРасписаниеПоДате()
	
	Расписание.Очистить();
	ЗапланированныеЗапускиТестирования.Очистить();
	ДоступноеВремяИМощность.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноеВремя = ТестированиеЗапускТестирования.ДоступноеВремяИМощностьДляТестирования(Объект.Проект, ОтображаемаяДата);
	Если ДоступноеВремя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапускиДляТестирования = ТестированиеЗапускТестирования.ЗапланированныеЗапускиТестирования(Объект.Проект, ДоступноеВремя);

	Для Каждого Запуск Из ЗапускиДляТестирования Цикл
		НоваяСтрокаРасписания = Расписание.Добавить();
		ЗаполнитьСтрокуРасписания(НоваяСтрокаРасписания, Запуск);
		Строка = ЗапланированныеЗапускиТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Запуск); 
	КонецЦикла;
	
	ДоступноеВремяИМощность.Загрузить(ДоступноеВремя);
	ЗаполнитьПустыеСтрокиРасписания();
	
	Для Каждого Строка Из ВеткиНаТестировании Цикл
		Строки = Расписание.НайтиСтроки(Новый Структура("Ветка", Строка.Ветка));
		Строка.ПоставленВРасписание = Строки.Количество() > 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтрокиРасписания()
	ТекущаяДата = ТекущаяДата();
	ДатаНачалаРедактирования = НачалоДня(ТекущаяДата) + Час(ТекущаяДата) * 60 * 60;
	
	ДоступнаяМощность = 0;
	Время = Неопределено;
	Индекс = 0;
	ДоступноеВремя = ДоступноеВремяИМощность.Выгрузить();
	Строка = Неопределено;
	Пока Индекс < ДоступноеВремя.Количество() Цикл
		ЭлементДоступногоВремени = ДоступноеВремя[Индекс];
		
		Если ЭлементДоступногоВремени.СвободнаяМощность > 0 Тогда
			ДоступнаяМощность = ДоступнаяМощность + ЭлементДоступногоВремени.СвободнаяМощность;
			ЭлементДоступногоВремени.СвободнаяМощность = 0;
			Если Время = Неопределено Тогда 
				Время = ЭлементДоступногоВремени.ДатаВремяЗапуска;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоступнаяМощность >= 100 ИЛИ (ЭлементДоступногоВремени.СвободнаяМощность = 0 И ДоступнаяМощность > 0) Тогда
			Строка = Расписание.Добавить();
			Строка.ДатаВремяЗапуска = Время;
			Строка.ДоступнаяМощность = ДоступнаяМощность;
			Строка.ДоступноРедактирование = Строка.ДатаВремяЗапуска >= ДатаНачалаРедактирования;
			ДоступнаяМощность = ДоступнаяМощность-Строка.ДоступнаяМощность;
			ЭлементДоступногоВремени.СвободнаяМощность = ДоступнаяМощность; 
			Время = Неопределено;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Если ДоступнаяМощность > 0 Тогда 
		Строка = Расписание.Добавить();
		Строка.ДатаВремяЗапуска = ?(Время <> Неопределено, Время, ДоступноеВремя[ДоступноеВремя.Количество()-1].ДатаВремяЗапуска);
		Строка.ДоступнаяМощность = ДоступнаяМощность;
		Строка.ДоступноРедактирование = Строка.ДатаВремяЗапуска >= ДатаНачалаРедактирования;
	КонецЕсли;
	Расписание.Сортировать("ДатаВремяЗапуска");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеСсылочногоТипа(Значение)
	Возврат ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение);
КонецФункции

&НаСервере
Процедура ПоместитьВеткиНаСервере(Ветки, ПомещенныеВетки)
	РеквизитыВеток = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Ветки, "Приемник, Статус, Тип");
	Для Каждого Ссылка Из Ветки Цикл
		РеквизитыВетки = РеквизитыВеток[Ссылка];
		Если РеквизитыВетки.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена") Тогда
			
			Ветка = Ссылка.ПолучитьОбъект();
			Ветка.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не удалось поместить ветку ""%1"".'"), Ссылка);
			Если НЕ Ветка.ПроверитьЗаполнение() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе
				Попытка
					Ветка.Записать();
					ПомещенныеВетки.Добавить(Ссылка);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено
		Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		СохранитьРасписание(Отказ);
		Если НЕ Отказ Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		УстановитьПризнакЕстьИзменения(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемаяДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьРасписание(Отказ);
	КонецЕсли;
	Если НЕ Отказ Тогда
		УстановитьПризнакЕстьИзменения(Ложь);
		УстановитьДоступностьЭлементов();
		ЗаполнитьТаблицуРасписаниеПоДате();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасписание()
	
	СтрокиРасписания = Расписание.Выгрузить();
	Расписание.Очистить();

	ДоступноеВремяИМощность.Очистить();
	ДоступноеВремяИМощность.Загрузить(ТестированиеЗапускТестирования.ДоступноеВремяИМощностьДляТестирования(Объект.Проект, ОтображаемаяДата));
	
	ТекущаяДата = ТекущаяДата();
	ДатаНачалаРедактирования = НачалоДня(ТекущаяДата) + Час(ТекущаяДата) * 60 * 60;
	Для ИндексНачалаРедактирования=0 По ДоступноеВремяИМощность.Количество() -1 Цикл
		Если ДоступноеВремяИМощность[ИндексНачалаРедактирования].ДатаВремяЗапуска >= ДатаНачалаРедактирования Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из ДоступноеВремяИМощность Цикл
		Строка.СвободнаяМощность = Строка.ДоступнаяМощность;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиРасписания Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ветка) Тогда
			Продолжить;
		КонецЕсли;
		
		МощностьДляЗапуска = Строка.НастройкаЗапуска.ЗанимаемаяМощность;
		
		НоваяСтрока = Расписание.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,,"ДоступнаяМощность, ЗанимаемаяМощность");
		НоваяСтрока.ЗанимаемаяМощность = МощностьДляЗапуска;
		
		Если ЗначениеЗаполнено(Строка.ДатаВремяЗапуска) Тогда
			
			ИндексТекущейСтроки = 0;
			ДатаЧас = НачалоДня(Строка.ДатаВремяЗапуска) + Час(Строка.ДатаВремяЗапуска)*60*60;
			Пока ИндексТекущейСтроки < ДоступноеВремяИМощность.Количество() 
				И (ДоступноеВремяИМощность[ИндексТекущейСтроки].ДатаВремяЗапуска < ДатаЧас) Цикл
				ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
			КонецЦикла;
			Если ИндексТекущейСтроки >= ДоступноеВремяИМощность.Количество() Тогда
				Прервать;
			КонецЕсли;
			Если ДоступноеВремяИМощность[ИндексТекущейСтроки].ДатаВремяЗапуска > ДатаЧас + 60*60 Тогда
				Продолжить;
			КонецЕсли;
		
			Пока МощностьДляЗапуска > 0 И ИндексТекущейСтроки < ДоступноеВремяИМощность.Количество() Цикл
				Если МощностьДляЗапуска <= ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность Тогда
					ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность = ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность - МощностьДляЗапуска;
					МощностьДляЗапуска = 0;
				Иначе
					МощностьДляЗапуска = МощностьДляЗапуска - ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность;
					ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность = 0;
				КонецЕсли;
				Если ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность = 0 Тогда
					ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ИндексТекущейСтроки = ИндексНачалаРедактирования;
			ДатаЗапуска = Неопределено;
			
			Пока МощностьДляЗапуска > 0 И ИндексТекущейСтроки < ДоступноеВремяИМощность.Количество() Цикл
				Если ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность <> 0 Тогда 
					Если ДатаЗапуска = Неопределено Тогда
						ДатаЗапуска = ДоступноеВремяИМощность[ИндексТекущейСтроки].ДатаВремяЗапуска;
					КонецЕсли;
					Если МощностьДляЗапуска <= ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность Тогда
						ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность = 
							ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность - МощностьДляЗапуска;
						МощностьДляЗапуска = 0;
					Иначе
						МощностьДляЗапуска = МощностьДляЗапуска - ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность;
						ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность = 0;
					КонецЕсли;
				КонецЕсли;
				Если ДоступноеВремяИМощность[ИндексТекущейСтроки].СвободнаяМощность = 0 Тогда
					ИндексТекущейСтроки = ИндексТекущейСтроки + 1;
				КонецЕсли;
			КонецЦикла;

			Если ДатаЗапуска = Неопределено Тогда
				ДатаЗапуска = ДоступноеВремяИМощность[ДоступноеВремяИМощность.Количество()-1].ДатаВремяЗапуска;
			КонецЕсли;
			НоваяСтрока.ДатаВремяЗапуска = ДатаЗапуска;

		КонецЕсли;
		
		НоваяСтрока.ДоступнаяМощность = НоваяСтрока.ЗанимаемаяМощность - МощностьДляЗапуска;

	КонецЦикла;
	
	ЗаполнитьПустыеСтрокиРасписания();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстатокМощностиПриИзмененииНастройкиЗапуска(НоваяНастройкаЗапуска, СтараяНастройкаЗапуска, ДоступнаяМощность)
	ПредыдущаяЗанимаемаяМощность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтараяНастройкаЗапуска,  "ЗанимаемаяМощность");
	Если НЕ ЗначениеЗаполнено(ПредыдущаяЗанимаемаяМощность) Тогда
		ПредыдущаяЗанимаемаяМощность = 0;
	КонецЕсли;
	ДоступнаяМощность = ДоступнаяМощность + ПредыдущаяЗанимаемаяМощность; 
	МощностьНастройки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяНастройкаЗапуска,  "ЗанимаемаяМощность"); 
	Если НЕ ЗначениеЗаполнено(МощностьНастройки) Тогда
		МощностьНастройки = 0;
	КонецЕсли;
	Возврат ДоступнаяМощность - МощностьНастройки;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРасписаниеНаСервере(Проект, Дата)
	ТестированиеЗапускТестирования.ЗаполнитьРасписание(Проект, Дата);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакЕстьИзменения(Изменено=Истина)
	Если ЕстьИзменения = Изменено Тогда
		Возврат;
	КонецЕсли;
	ЕстьИзменения = Изменено;
	ЭтаФорма.Заголовок = НСтр("ru = 'Планировщик управления тестированием'");
	Если ЕстьИзменения Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " *";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасписаниеПоДатеНаСервере()
	
	КонецДня = Дата(1,1,1) + (ОтображаемаяДата - Дата(1,1,1)) + (Дата(1,1,1,23,59,59) - Дата(1,1,1));
	ЗаполнитьРасписаниеНаСервере(Объект.Проект, КонецДня);
	ЗаполнитьТаблицуРасписаниеПоДате();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасписаниеПоДатеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = Неопределено
		Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УстановитьПризнакЕстьИзменения(Отказ);
	КонецЕсли;
	Если НЕ Отказ Тогда
		ЗаполнитьРасписаниеПоДатеНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьРасписание(Отказ=Ложь)
	Если НЕ ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРасписаниеНаСервере();
	
	Отказ = РасписаниеЗаполненоСОшибками();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаСервере();
	УстановитьПризнакЕстьИзменения(Ложь);
КонецПроцедуры

&НаСервере
Процедура СохранитьНаСервере()
	Если НЕ ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	СистемаВзаимодействияДоступна = СистемаВзаимодействия.ИспользованиеДоступно();
	ЗаголовокОбсуждения = НСтр("ru='Тестирование ветки'");
	АвторСообщения = Пользователи.ТекущийПользователь();
	
	ОтмененныеЗапускиТестирования = ТестированиеЗапускТестирования.ОтмененныеЗапускиТестирования(Объект.Проект, ДоступноеВремяИМощность);
	
	Для Каждого Строка Из Расписание Цикл
		Если ЗначениеЗаполнено(Строка.Ветка) И Строка.ДоступноРедактирование Тогда
			ЗапланированныеЗапуски = ЗапланированныеЗапускиТестирования.НайтиСтроки(Новый Структура("Ветка, Запущен", Строка.Ветка, Ложь));
			СуществующийЗапускТестирования = Неопределено;
			Если ЗапланированныеЗапуски.Количество() > 0 Тогда
				ЗапланированныеЗапускиТестирования.Удалить(ЗапланированныеЗапуски[0]);
				Если ЗапланированныеЗапуски[0].ДатаВремяЗапуска = Строка.ДатаВремяЗапуска 
					И ЗапланированныеЗапуски[0].НастройкаЗапуска = Строка.НастройкаЗапуска Тогда
					// Изменений не было
					Продолжить;
				КонецЕсли;
				СуществующийЗапускТестирования = ЗапланированныеЗапуски[0].ЗапускТестирования.ПолучитьОбъект();
			Иначе
				ОтмененныеЗапуски = ОтмененныеЗапускиТестирования.НайтиСтроки(Новый Структура("Ветка", Строка.Ветка));
				Если ОтмененныеЗапуски.Количество() > 0 Тогда
					СуществующийЗапускТестирования = ОтмененныеЗапуски[0].ЗапускТестирования.ПолучитьОбъект();
					ОтмененныеЗапускиТестирования.Удалить(ОтмененныеЗапуски[0]);
				Иначе
					Строка.ЗапускТестирования = ТестированиеЗапускТестирования.ЗапланироватьЗапускТестирования(Объект.Проект, 
											 Строка.Ветка,
											 Строка.НастройкаЗапуска,
											 Строка.ДатаВремяЗапуска);
				КонецЕсли;
				Если СистемаВзаимодействияДоступна И АвторСообщения <> Строка.Ветка.Ответственный Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru='Ветка %1 поставлена на тестирование в %2.'"), Строка.Ветка.Имя, Строка.ДатаВремяЗапуска);
					РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(Строка.Ветка, 
												 Строка.Ветка.Ответственный,
												 АвторСообщения,
												 ЗаголовокОбсуждения,
												 ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
			Если СуществующийЗапускТестирования <> Неопределено Тогда		
				СуществующийЗапускТестирования.Проект = Объект.Проект;
				СуществующийЗапускТестирования.Ветка = Строка.Ветка;
				СуществующийЗапускТестирования.Дата = Строка.ДатаВремяЗапуска;
				СуществующийЗапускТестирования.Настройка = Строка.НастройкаЗапуска;
				СуществующийЗапускТестирования.Записать(); 
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из ЗапланированныеЗапускиТестирования Цикл
		Если Строка.Запущен Тогда
			Продолжить;
		КонецЕсли;
		Если СистемаВзаимодействияДоступна И АвторСообщения <> Строка.Ветка.Ответственный Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Ветка %1 удалена из расписания. Отменен запуск на %2.'"),
										Строка.Ветка.Имя, 
										Строка.ЗапускТестирования.Дата);
			РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(Строка.Ветка, 
												 Строка.Ветка.Ответственный,
												 АвторСообщения,
												 ЗаголовокОбсуждения,
												 ТекстСообщения);
		КонецЕсли;
		ЗапускТестирования = Строка.ЗапускТестирования.ПолучитьОбъект();
		ЗапускТестирования.Настройка = Неопределено;
		ЗапускТестирования.Записать();
	КонецЦикла;
	
	ОтмененныеЗапускиТестирования.Очистить();
	
	ЗапланированныеЗапускиТестирования.Очистить();
	Запуски = ТестированиеЗапускТестирования.ЗапланированныеЗапускиТестирования(Объект.Проект, ДоступноеВремяИМощность);
	Для Каждого СтрокаЗапуска Из Запуски Цикл
		НоваяСтрока = ЗапланированныеЗапускиТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапуска);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция РасписаниеЗаполненоСОшибками()
	
	ОчиститьСообщения();
	Отказ = Ложь;
	УказанныеВетки = Новый Массив;
	Для Каждого Строка Из Расписание Цикл
		Если ЗначениеЗаполнено(Строка.Ветка) Тогда
			Если Строка.ДоступноРедактирование Тогда
				Если УказанныеВетки.Найти(Строка.Ветка) <> Неопределено Тогда
					// Если пользователь добавил новую ветку, у которой уже есть запуск - то проверка не выполняется.
					// Если кто-то другой уже создал несколько запусков и сохранил - это не считается ошибкой,
					//  чтобы чужие запуски не мешали пользователю.
					Отказ = Истина;
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Ветка %1 дважды указана в расписании.'"),
									Строка.Ветка);
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				УказанныеВетки.Добавить(Строка.Ветка);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Строка.НастройкаЗапуска) Тогда
				Отказ = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Необходимо заполнить настройку тестирования для ветки %1.'"), 
								Строка.Ветка);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	УказанныеВетки = Неопределено;
	Возврат Отказ;
	
КонецФункции

&НаСервере
Процедура ОбновитьРасписаниеНаСервере()

	ЗапускиДляТестирования = ТестированиеЗапускТестирования.ЗапланированныеЗапускиТестирования(Объект.Проект, ДоступноеВремяИМощность);
	ЗапланированныеЗапускиИдентичны = ОбщегоНазначения.КоллекцииИдентичны(ЗапускиДляТестирования, ЗапланированныеЗапускиТестирования, "Ветка, НастройкаЗапуска, ДатаВремяЗапуска");
	
	Если ЗапланированныеЗапускиИдентичны Тогда
		// Если с момента начала редактирования не было создано ещё запусков тестирования, не нужно их загружать.
		Возврат;
	КонецЕсли;
	
	Для Каждого НовыйЗапуск Из ЗапускиДляТестирования Цикл
		СуществующиеЗапуски = ЗапланированныеЗапускиТестирования.НайтиСтроки(Новый Структура("ЗапускТестирования", НовыйЗапуск.ЗапускТестирования));
		СтрокиВРасписании = Расписание.НайтиСтроки(Новый Структура("ЗапускТестирования", НовыйЗапуск.ЗапускТестирования));
		
		ЕстьИзмененияВСтроке = Ложь;
		Если СуществующиеЗапуски.Количество() > 0 Тогда
			// Запланированный запуск уже был при начале редактирования.
			Если СтрокиВРасписании.Количество() > 0 Тогда
				Запуск = СуществующиеЗапуски[0];
				Строка = СтрокиВРасписании[0];
				Если (Запуск.Ветка = Строка.Ветка
					И Запуск.НастройкаЗапуска = Строка.НастройкаЗапуска
					И Запуск.ДатаВремяЗапуска = Строка.ДатаВремяЗапуска) Тогда 
					// Пользователь не редактировал этот запуск тестирования, поэтому его можно обновить.
					ЗаполнитьСтрокуРасписания(Строка, НовыйЗапуск)
				ИначеЕсли НовыйЗапуск.Запущен Тогда
					
					// Пока пользователь редактировал запуск тестирования, он был проведен.
					// Необходимо отменить изменения пользователя и сообщить ему об этом.
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Нельзя отредактировать настройки ветки ""%1"", т.к. он уже был запущен. 
									|Чтобы отредактировать запуск, сначала отменить существующий запуск номер %2.'"),
									НовыйЗапуск.Ветка,
									НовыйЗапуск.Номер);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					ЗаполнитьСтрокуРасписания(Строка, НовыйЗапуск);
				КонецЕсли;
			ИначеЕсли НовыйЗапуск.Запущен Тогда
				// Запуск был удален пользователем, но после этого запущен другим пользователем или по расписанию.
				// В таком случае он должен отражаться в таблице.
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Нельзя удалить запуск ветки ""%1"", т.к. он уже был запущен. 
									|Чтобы удалить ветку из расписани нужно отменить запуск номер %2.'"),
									НовыйЗапуск.Ветка,
									НовыйЗапуск.Номер);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				НоваяСтрока = Расписание.Добавить();
				ЗаполнитьСтрокуРасписания(НоваяСтрока, НовыйЗапуск);
			КонецЕсли;
		ИначеЕсли СуществующиеЗапуски.Количество() = 0 Тогда
			// Новый запуск, созданный параллельно, должен отображаться в таблице.
			НоваяСтрока = Расписание.Добавить();
			ЗаполнитьСтрокуРасписания(НоваяСтрока, НовыйЗапуск);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьРасписание();
	
	ЗапланированныеЗапускиТестирования.Очистить();
	Для Каждого Запуск Из ЗапускиДляТестирования Цикл
		Строка = ЗапланированныеЗапускиТестирования.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Запуск); 
	КонецЦикла;
	
	Для Каждого Строка Из ВеткиНаТестировании Цикл
		Строки = Расписание.НайтиСтроки(Новый Структура("Ветка", Строка.Ветка));
		Строка.ПоставленВРасписание = Строки.Количество() > 0;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуРасписания(СтрокаРасписания, ЗапускТестирования)
	ЧасНазад = НачалоДня(ТекущаяДата()) + (Час(ТекущаяДата()) - 1) * 60 * 60;
	
	ЗаполнитьЗначенияСвойств(СтрокаРасписания, ЗапускТестирования);
	СтрокаРасписания.ДоступноРедактирование = НЕ ЗапускТестирования.Запущен;
	СтрокаРасписания.ЕстьОшибкаПриЗапуске = НЕ ЗапускТестирования.Запущен И ЗапускТестирования.ДатаВремяЗапуска < ЧасНазад;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтуВеткуНадоДобавлятьВПланировщик(ДанныеВетки)
	Возврат Истина;
КонецФункции	

#КонецОбласти
