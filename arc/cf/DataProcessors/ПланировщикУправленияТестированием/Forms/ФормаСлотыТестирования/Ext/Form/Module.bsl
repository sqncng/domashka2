#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Параметры.Свойство("Проект", Объект.Проект);
	ЭтаФорма.Доступность = УправлениеДоступом.ИзменениеРазрешено(Объект.Проект) ИЛИ 
						УправлениеДоступомСППР.РольДоступнаПоПроекту("УправлениеАвтотестированием", Объект.Проект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		ВызватьИсключение НСтр("ru='Форма не предназначена для непосредственного использования.'");
	КонецЕсли;
	ЗаполнитьСлотыТестированияПроекта();
	Элементы.ТестированиеВерсийДеньНедели.СписокВыбора.Очистить();
	Элементы.ТестированиеВерсийДеньНедели.СписокВыбора.ЗагрузитьЗначения(СписокВыбораДнейНедели());
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СлотыДоступныПоРасписаниюПриИзменении(Элемент)
	ЕстьИзменения = Истина;
	УстановитьДоступностьЭлементов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСлотыТестирования

&НаКлиенте
Процедура СлотыТестированияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И Не Копирование Тогда 
		Элемент.ТекущиеДанные.ДеньНедели = Элементы.ТестированиеВерсийДеньНедели.СписокВыбора[0];
		Если СлотыТестирования.Количество() > 1 Тогда
			Элемент.ТекущиеДанные.ДеньНедели = СлотыТестирования[СлотыТестирования.Количество() -2].ДеньНедели;
		КонецЕсли;
		Элемент.ТекущиеДанные.ВремяНачала = Дата(1,1,1,0,0,0);
		Элемент.ТекущиеДанные.ВремяОкончания = Дата(1,1,1,0,0,0);
		Элемент.ТекущиеДанные.ДоступнаяМощность = 100;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	Результат = ОбновитьСлотыТестированияПроекта();
	УстановитьПризнакЕстьИзменения(Ложь);
	Закрыть(Результат);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	Элементы.СлотыТестирования.Доступность = СлотыДоступныПоРасписанию;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокВыбораДнейНедели()
	
	СписокДнейНедели = Новый Массив;
	СписокДнейНедели.Добавить(НСтр("ru = 'Понедельник'"));
	СписокДнейНедели.Добавить(НСтр("ru = 'Вторник'"));
	СписокДнейНедели.Добавить(НСтр("ru = 'Среда'"));
	СписокДнейНедели.Добавить(НСтр("ru = 'Четверг'"));
	СписокДнейНедели.Добавить(НСтр("ru = 'Пятница'"));
	СписокДнейНедели.Добавить(НСтр("ru = 'Суббота'"));
	СписокДнейНедели.Добавить(НСтр("ru = 'Воскресенье'"));
	
	Возврат СписокДнейНедели;
	
КонецФункции

&НаСервере
Функция ОбновитьСлотыТестированияПроекта()
	

	СлотыБылиЗаполнены = СлотыТестирования.Количество() > 0 
						ИЛИ Объект.Проект.СлотыТестирования.Количество() > 0;
	Если НЕ СлотыБылиЗаполнены Тогда
		ЕстьИзменения = Истина
	КонецЕсли;
	Результат = Новый Структура("БылиИзменения", ЕстьИзменения);

	Если Не ЕстьИзменения Тогда
		Возврат Результат;
	КонецЕсли;
	МощностьПоУмолчанию = ?(СлотыДоступныПоРасписанию, 0, 100);
	НовыеСлотыТестирования = Новый Массив;
	Для НомерДняНедели = 1 По 7 Цикл
		ЧасыВДнеНедели = Новый Массив;
		НовыеСлотыТестирования.Добавить(ЧасыВДнеНедели);
		Для НомерЧаса = 0 По 23 Цикл
			ЧасыВДнеНедели.Добавить(МощностьПоУмолчанию);
		КонецЦикла; 
	КонецЦикла;
	
	СписокДнейНедели = СписокВыбораДнейНедели();
	Для Каждого Строка Из СлотыТестирования Цикл
		ИндексДня = СписокДнейНедели.Найти(Строка.ДеньНедели);
		Если ИндексДня = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЧасОкончания = Час(Строка.ВремяОкончания);
		Если ЧасОкончания <= Час(Строка.ВремяНачала) Тогда
			ЧасОкончания = 24;
			ИндексСледующегоДня = (ИндексДня + 1)%НовыеСлотыТестирования.Количество();
			Для НомерЧаса = 0 По Час(Строка.ВремяОкончания) - 1 Цикл
				НовыеСлотыТестирования[ИндексСледующегоДня][НомерЧаса] = Макс(НовыеСлотыТестирования[ИндексДня][НомерЧаса], 
																	Строка.ДоступнаяМощность);
			КонецЦикла;
		КонецЕсли;

		Для НомерЧаса = Час(Строка.ВремяНачала) По ЧасОкончания - 1 Цикл
			НовыеСлотыТестирования[ИндексДня][НомерЧаса] = Макс(НовыеСлотыТестирования[ИндексДня][НомерЧаса], 
																Строка.ДоступнаяМощность);
		КонецЦикла;
	КонецЦикла;
	
	СуществующиеСлотыТестирования = Объект.Проект.СлотыТестирования.Выгрузить();
	НовыеСлоты = СуществующиеСлотыТестирования.СкопироватьКолонки();
	
	Для ИндексДня=0 По НовыеСлотыТестирования.Количество()-1 Цикл
		Для НомерЧаса=0 По НовыеСлотыТестирования[ИндексДня].Количество()-1 Цикл
			НоваяСтрока = НовыеСлоты.Добавить();
			НоваяСтрока.НомерДня = ИндексДня+1;
			НоваяСтрока.НомерЧаса = НомерЧаса;
			НоваяСтрока.ДоступнаяМощность = НовыеСлотыТестирования[ИндексДня][НомерЧаса];
		КонецЦикла;
	КонецЦикла;
	НовыеСлоты.Сортировать("НомерДня, НомерЧаса");
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(СуществующиеСлотыТестирования, НовыеСлоты) Тогда
		УстановитьПривилегированныйРежим(Истина);
		ОбъектПроект = Объект.Проект.ПолучитьОбъект();
		ОбъектПроект.СлотыТестирования.Очистить();
		ОбъектПроект.СлотыТестирования.Загрузить(НовыеСлоты);
		ОбъектПроект.Записать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСлотыТестированияПроекта()
	
	СуществующиеСлотыТестирования = Объект.Проект.СлотыТестирования.Выгрузить();
	
	ТекущаяСтрокаТаблицы = Неопределено;
	ДниНедели = СписокВыбораДнейНедели();
	
	Для Каждого Строка Из СуществующиеСлотыТестирования Цикл
		
		Если Строка.ДоступнаяМощность <> 0 И ТекущаяСтрокаТаблицы = Неопределено Тогда
			ТекущаяСтрокаТаблицы = СлотыТестирования.Добавить();
			ТекущаяСтрокаТаблицы.ДеньНедели = ДниНедели[Строка.НомерДня-1];
			ТекущаяСтрокаТаблицы.ВремяНачала = Дата(1,1,1,Строка.НомерЧаса,0,0);
			ТекущаяСтрокаТаблицы.ВремяОкончания = ТекущаяСтрокаТаблицы.ВремяНачала + 60*60;
			ТекущаяСтрокаТаблицы.ДоступнаяМощность = Строка.ДоступнаяМощность;
			Продолжить;
		КонецЕсли;
		Если ТекущаяСтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НомерТекущегоДня = ДниНедели.Найти(ТекущаяСтрокаТаблицы.ДеньНедели) + 1;

		Если Строка.НомерДня = НомерТекущегоДня 
			И Строка.ДоступнаяМощность = ТекущаяСтрокаТаблицы.ДоступнаяМощность Тогда
			ТекущаяСтрокаТаблицы.ВремяОкончания = Дата(1,1,1,(Строка.НомерЧаса),0,0) + 60*60;
		ИначеЕсли Строка.ДоступнаяМощность = 0 Тогда
			ТекущаяСтрокаТаблицы = Неопределено;
		Иначе
			// Сменился день или время
			ТекущаяСтрокаТаблицы = СлотыТестирования.Добавить();
			ТекущаяСтрокаТаблицы.ДеньНедели = ДниНедели[Строка.НомерДня-1];
			ТекущаяСтрокаТаблицы.ВремяНачала = Дата(1,1,1,Строка.НомерЧаса,0,0);
			ТекущаяСтрокаТаблицы.ВремяОкончания = ТекущаяСтрокаТаблицы.ВремяНачала + 60*60;
			ТекущаяСтрокаТаблицы.ДоступнаяМощность = Строка.ДоступнаяМощность;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура СлотыТестированияПриИзменении(Элемент)
	УстановитьПризнакЕстьИзменения(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено
		Или РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Результат = ОбновитьСлотыТестированияПроекта();
		УстановитьПризнакЕстьИзменения(Ложь);
		Закрыть(Результат);
	Иначе
		УстановитьПризнакЕстьИзменения(Ложь);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакЕстьИзменения(Изменено=Истина)
	Если ЕстьИзменения = Изменено Тогда
		Возврат;
	КонецЕсли;
	ЕстьИзменения = Изменено;
	ЭтаФорма.Заголовок = НСтр("ru = 'Слоты тестирования'");
	Если ЕстьИзменения Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " *";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
