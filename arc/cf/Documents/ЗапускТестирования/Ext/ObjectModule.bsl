#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;	
	
	Автор = Пользователи.ТекущийПользователь();  
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Ветка") Тогда
			
			Ветка = ДанныеЗаполнения.Ветка;     
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Ветка, "Владелец,НастройкаЗапускаТестирования");
			Проект = ЗначенияРеквизитов.Владелец;
			Настройка = ЗначенияРеквизитов.НастройкаЗапускаТестирования;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Настройка") Тогда
			
			Настройка = ДанныеЗаполнения.Настройка;
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Настройка,"Владелец");
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Pipeline_ID = "";
	Автор = Пользователи.ТекущийПользователь();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ЗапускатьАвтоматическоеТестирование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект,"ЗапускатьАвтоматическоеТестирование");
	Если ДополнительныеСвойства.Свойство("НеЗапускатьАвтоматическоеТестирование") Тогда
		ЗапускатьАвтоматическоеТестирование = Ложь;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ЗапускатьАвтоматическоеТестирование Тогда
		Если НЕ ЗначениеЗаполнено(Номер) Тогда
			УстановитьНовыйНомер();
		КонецЕсли;
		ИмяВетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя");
		Результат = ТестированиеЗапускТестирования.ЗапуститьТестирование(Проект, ИмяВетки, ПараметрыДляЗапускаТестирования());
		
		Если Результат.ЗапросВыполненУспешно Тогда
			Pipeline_ID = Результат.Ответ;
		Иначе
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Ответ, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	ЗапускатьАвтоматическоеТестирование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект,"ЗапускатьАвтоматическоеТестирование");
	
	Если ЗапускатьАвтоматическоеТестирование
		И ЗначениеЗаполнено(Pipeline_ID) Тогда
		Результат = ТестированиеЗапускТестирования.ОтменитьТестирование(Проект, Pipeline_ID);
		Если НЕ Результат.ЗапросВыполненУспешно Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Ответ, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыДляЗапускаТестирования()
	
	Параметры = Новый Соответствие;
	Параметры.Вставить("TRIGGER_ID", СокрЛП(Номер));
   
	Параметры.Вставить("branch_type", Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Тип")));
	Параметры.Вставить("run_failed_tests", Строка(ЗапуститьТестыВыполненныеСОшибкой));
	
	Если ЗапуститьТестыВыполненныеСОшибкой Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	РезультатыВыполненияТестовСрезПоследних.Тест КАК Ссылка,
		               |	РезультатыВыполненияТестовСрезПоследних.Проект.Наименование КАК Проект,
		               |	РезультатыВыполненияТестовСрезПоследних.Проект.ИдентификаторПрограммы КАК ИдентификаторПроекта,
		               |	РезультатыВыполненияТестовСрезПоследних.Тест.Код КАК Код,
		               |	РезультатыВыполненияТестовСрезПоследних.Тест.Наименование КАК Наименование,
		               |	РезультатыВыполненияТестовСрезПоследних.Тест.ИмяВСистемеСборки КАК ИмяВСистемеСборки,
		               |	РезультатыВыполненияТестовСрезПоследних.Тест.UIDНастройкиСценария КАК UIDНастройкиСценария,
		               |	РезультатыВыполненияТестовСрезПоследних.Тест.НастройкаЗапускаСценария.Код КАК НастройкаЗапускаСценарияКод,
		               |	РезультатыВыполненияТестовСрезПоследних.Тест.НастройкаЗапускаПроцесса.Код КАК НастройкаЗапускаПроцессаКод,
		               |	ВЫБОР
		               |		КОГДА РезультатыВыполненияТестовСрезПоследних.Тест.НастройкаЗапускаСценария <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаСценариев.ПустаяСсылка)
		               |			ТОГДА РезультатыВыполненияТестовСрезПоследних.Тест.НастройкаЗапускаСценария.Владелец.ИдентификаторБазы
		               |		ИНАЧЕ РезультатыВыполненияТестовСрезПоследних.Тест.НастройкаЗапускаПроцесса.ЭталоннаяБаза.ИдентификаторБазы
		               |	КОНЕЦ КАК ИдентификаторБазы
		               |ИЗ
		               |	РегистрСведений.РезультатыВыполненияТестов.СрезПоследних(
		               |			,
		               |			Ветка = &Ветка
		               |				И ЭлементТеста = НЕОПРЕДЕЛЕНО) КАК РезультатыВыполненияТестовСрезПоследних
		               |ГДЕ
		               |	РезультатыВыполненияТестовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненУспешно)";
		Запрос.УстановитьПараметр("Ветка", Ветка);
		ЗаполнитьПараметрыДляЗапускаПоТестам(Запрос.Выполнить().Выбрать(), Параметры, "failed");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Тесты.Ссылка КАК Ссылка,
		               |	"""" КАК Проект,
		               |	"""" КАК ИдентификаторПроекта,
		               |	Тесты.Ссылка.Код КАК Код,
		               |	Тесты.Наименование КАК Наименование,
		               |	Тесты.ИмяВСистемеСборки КАК ИмяВСистемеСборки,
		               |	Тесты.UIDНастройкиСценария КАК UIDНастройкиСценария,
		               |	Тесты.НастройкаЗапускаСценария.Код КАК НастройкаЗапускаСценарияКод,
		               |	Тесты.НастройкаЗапускаПроцесса.Код КАК НастройкаЗапускаПроцессаКод,
		               |	ВЫБОР
		               |		КОГДА Тесты.НастройкаЗапускаСценария <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаСценариев.ПустаяСсылка)
		               |			ТОГДА Тесты.НастройкаЗапускаСценария.Владелец.ИдентификаторБазы
		               |		ИНАЧЕ Тесты.НастройкаЗапускаПроцесса.ЭталоннаяБаза.ИдентификаторБазы
		               |	КОНЕЦ КАК ИдентификаторБазы
		               |ИЗ
		               |	Справочник.Тесты КАК Тесты
		               |ГДЕ
		               |	(Тесты.Родитель В (&Тесты)
		               |			ИЛИ Тесты.Ссылка В (&Тесты))";
		Запрос.УстановитьПараметр("Тесты", Настройка.Тесты.ВыгрузитьКолонку("Тест"));
		ЗаполнитьПараметрыДляЗапускаПоТестам(Запрос.Выполнить().Выбрать(), Параметры, "test");
		
		Для Каждого Строка Из Настройка.ПараметрыЗапуска Цикл
			НовоеЗначение = Строка.Значение;
			Если Параметры.Получить(Строка.Ключ) <> Неопределено Тогда
				НовоеЗначение = Параметры[Строка.Ключ] + " " + НовоеЗначение;
			КонецЕсли;
			Параметры.Вставить(Строка.Ключ, НовоеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	ТипВетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка,"Тип");
	Если ЗначениеЗаполнено(Настройка)
		И (ТипВетки = Перечисления.ТипыВеток.ВеткаТехническогоПроекта
			ИЛИ ТипВетки = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок)
		Тогда
		   НадоПередватьСписокИзмененныхОМ = ВНастройкеЕстьТестыПринимающиеСписокИзмененныхОМ(Настройка);
		   
		   Если НадоПередватьСписокИзмененныхОМ Тогда
			   ДобавитьВПараметрыДляЗапускаТестированияИзменнныеОМ(Параметры, Ветка);
		   КонецЕсли;	
		   
	КонецЕсли;

	Возврат Параметры;
	
КонецФункции
 
Процедура ЗаполнитьПараметрыДляЗапускаПоТестам(ВыборкаТестов, Параметры, ИмяПараметра="test")
	ЗаписьJSON = Новый ЗаписьJSON;
	ЕстьТесты = Ложь;
	
	Пока ВыборкаТестов.Следующий() Цикл
		ЕстьТесты = Истина;
			
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("Тест");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.Наименование));   
		ЗаписьJSON.ЗаписатьИмяСвойства("Проект");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.Проект));
		ЗаписьJSON.ЗаписатьИмяСвойства("ИдентификаторПроекта");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.ИдентификаторПроекта));
		ЗаписьJSON.ЗаписатьИмяСвойства("ИмяВСистемеСборки");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.ИмяВСистемеСборки));
		ЗаписьJSON.ЗаписатьИмяСвойства("UIDНастройкиСценария");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.UIDНастройкиСценария));
		ЗаписьJSON.ЗаписатьИмяСвойства("НастройкаЗапускаСценария");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.НастройкаЗапускаСценарияКод));
		ЗаписьJSON.ЗаписатьИмяСвойства("НастройкаЗапускаПроцесса");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.НастройкаЗапускаПроцессаКод));
		ЗаписьJSON.ЗаписатьИмяСвойства("ИдентификаторБазы");
		ЗаписьJSON.ЗаписатьЗначение(XMLСтрока(ВыборкаТестов.ИдентификаторБазы));
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
		JsonТесты = ЗаписьJSON.Закрыть();    
		КлючПараметра = ИмяПараметра + СокрЛП(ВыборкаТестов.Код) 
						+ "_" + СтрЗаменить(ВыборкаТестов.ИдентификаторПроекта, "-", "_");
		Параметры.Вставить(КлючПараметра, JsonТесты);
			
	КонецЦикла;
	Если ЕстьТесты Тогда 
		Параметры.Вставить("TEST_FILTER", "TRUE");
	КонецЕсли;
	
	ЗаписьJSON = Неопределено;
КонецПроцедуры

Функция ВНастройкеЕстьТестыПринимающиеСписокИзмененныхОМ(ТекНастройка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗапускаТестированияТесты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиЗапускаТестирования.Тесты КАК НастройкиЗапускаТестированияТесты
		|ГДЕ
		|	НастройкиЗапускаТестированияТесты.Тест.ПередаватьСписокИзмененныхОбъектовМетаданных
		|	И НастройкиЗапускаТестированияТесты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ТекНастройка);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;

КонецФункции

Процедура ДобавитьВПараметрыДляЗапускаТестированияИзменнныеОМ(Параметры, ТекВетка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИзмененияВВетках.ОбъектМетаданных КАК ОбъектМетаданных,
		|	ИзмененияВВетках.ОбъектМетаданных.Наименование КАК ОбъектМетаданныхНаименование
		|ИЗ
		|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|ГДЕ
		|	ИзмененияВВетках.Ветка = &Ветка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмененияВВетках.ОбъектМетаданных.Наименование";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Массив = Новый Массив;
	МаксСчетчик = 30;
	СчетчикПеременных = 0;
	
	Сч = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сч = Сч + 1;
		Массив.Добавить(ВыборкаДетальныеЗаписи.ОбъектМетаданныхНаименование);
		
		Если Сч >= МаксСчетчик Тогда
			Сч = 0;
			СчетчикПеременных = СчетчикПеременных + 1;
			Параметры.Вставить("metadataobjects" + XMLСтрока(СчетчикПеременных), СтрСоединить(Массив, ";"));
			Массив = Новый Массив;
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Массив.Количество() > 0 Тогда
		СчетчикПеременных = СчетчикПеременных + 1;
		Параметры.Вставить("metadataobjects" + XMLСтрока(СчетчикПеременных), СтрСоединить(Массив, ";"));
	Иначе	
		Параметры.Вставить("metadataobjects" + XMLСтрока(СчетчикПеременных), "НетОбъектовДляПроверки");
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли