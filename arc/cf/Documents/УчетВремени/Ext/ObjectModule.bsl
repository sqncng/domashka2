#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Пользователь = Пользователи.ТекущийПользователь();
		ЗаполнитьПоДаннымКалендаря();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	СписокВидовДеятельности = ЭтотОбъект.ЗатратыВремени.ВыгрузитьКолонку("ВидДеятельности");
	
	РеквизитыВидовДеятельности = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокВидовДеятельности, "ВидВремени, ТребуемаяДетализация");
	
	ТекущаяСтрока = Неопределено;
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВидДеятельности) Тогда
			ДанныеВидаДеятельности = РеквизитыВидовДеятельности.Получить(СтрокаТЧ.ВидДеятельности);
		Иначе
			ДанныеВидаДеятельности  = Новый Структура;
			ДанныеВидаДеятельности.Вставить("ТребуемаяДетализация", Перечисления.ДетализацияВПланированииИУчетеВремени.ПустаяСсылка());
			ДанныеВидаДеятельности.Вставить("ВидВремени", Перечисления.ВидыВремени.ПустаяСсылка());
		КонецЕсли;
		
		ТребуемаяДетализация = ДанныеВидаДеятельности.ТребуемаяДетализация;
		
		Если ТребуемаяДетализация = Перечисления.ДетализацияВПланированииИУчетеВремени.РаботаИлиОписание
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.ОписаниеРаботы) И НЕ ЗначениеЗаполнено(СтрокаТЧ.Работа)
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.ТехническийПроект)Тогда
			
			ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указано описание работы, или сама работа (задача, ошибка, технический проект).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "ОписаниеРаботы");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ТребуемаяДетализация = Перечисления.ДетализацияВПланированииИУчетеВремени.Работа
			И НЕ ЗначениеЗаполнено(СтрокаТЧ.Работа) И НЕ ЗначениеЗаполнено(СтрокаТЧ.ТехническийПроект) Тогда
			
			ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указана работа (задача, ошибка, технический проект).'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "РаботаДляУчета");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Проект) Тогда
			
			ВидВремени = ДанныеВидаДеятельности.ВидВремени;
			
			Если ВидВремени <> Перечисления.ВидыВремени.Нерабочее Тогда
				
				ТекстСообщения = НСтр("ru='В строке %НомерСтроки% не указан проект.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "Проект");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Окончание < СтрокаТЧ.Начало Тогда
			
			ТекстСообщения = НСтр("ru='В строке %НомерСтроки% начало работы указано позже окончания.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", СтрокаТЧ.НомерСтроки, "Начало");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ = Истина;
			
		КонецЕсли;
		
		Если ТекущаяСтрока <> Неопределено Тогда
			Если УчетВремениКлиентСервер.ВременныеИнтервалыПересекаются(ТекущаяСтрока.Начало, ТекущаяСтрока.Окончание,
				                                                           СтрокаТЧ.Начало, СтрокаТЧ.Окончание) Тогда
				
				ТекстСообщения = НСтр("ru='В строках %НомерСтроки1% и %НомерСтроки2% указаны пересекающиеся интервалы времени.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки1%", ТекущаяСтрока.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки2%", СтрокаТЧ.НомерСтроки);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗатратыВремени", ТекущаяСтрока.НомерСтроки, "Окончание");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяСтрока = СтрокаТЧ;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗатратыВремени.Сортировать("Начало,Окончание");
	
	Если НЕ ПометкаУдаления Тогда
		ПроверитьОтчетыНаДату(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	РассчитатьДлительность();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Движения.УчетВремени.Загрузить(ДанныеДляЗаписиУчетаВремени());
	Движения.УчетВремени.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоДаннымКалендаря(ДополнитьИмеющиесяДанные=Ложь) Экспорт
	
	Если ЗатратыВремени.Количество()>0 И НЕ ДополнитьИмеющиесяДанные Тогда
		ЗатратыВремени.Очистить();
	КонецЕсли;
	
	ВидДеятельностиДляОшибок = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	ВидДеятельностиДляОшибокАвтотестирования = Константы.ВидДеятельностиДляРаботыСОшибкамиАвтотестирования.Получить();
	ВидДеятельностиДляОшибокАудита = Константы.ВидДеятельностиДляРаботыСОшибкамиАудита.Получить();
	
	ДанныеПоВидамДеятельности = Новый Структура;
	ДанныеПоВидамДеятельности.Вставить("ВидДеятельностиДляОшибок", ВидДеятельностиДляОшибок);
	ДанныеПоВидамДеятельности.Вставить("ВидДеятельностиДляОшибокАвтотестирования", ВидДеятельностиДляОшибокАвтотестирования);
	ДанныеПоВидамДеятельности.Вставить("ВидДеятельностиДляОшибокАудита", ВидДеятельностиДляОшибокАудита);
	
	ПроектПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УчетВремени", "ПроектПоУмолчанию");
	
	Если ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
		Если НЕ УправлениеДоступом.ЧтениеРазрешено(ПроектПоУмолчанию) Тогда
			ПроектПоУмолчанию = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьПроектПоУмолчаниюДляВсехРабот = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "ИспользоватьПроектПоУмолчаниюДляВсехРабот",
	                                                        Ложь);

	ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
	ДанныеКалендаря = РегистрыСведений.КалендариПользователей.ДанныеКалендаряДляУчетаВремени(Пользователь, ДатаДокумента);
	
	ВидыДеятельности = Новый Массив;
	
	Для Каждого СтрокаДанных из ДанныеКалендаря Цикл
		
		Если ДополнитьИмеющиесяДанные Тогда
			
			ДоступныеИнтервалы = СвободныеИнтервалы(СтрокаДанных.Начало, СтрокаДанных.Окончание);
			
			Для Каждого ДоступныйИнтервал из ДоступныеИнтервалы Цикл
				ДобавитьСтрокуПоДаннымКалендаря(СтрокаДанных, ДоступныйИнтервал.Начало, ДоступныйИнтервал.Окончание,
				                                ИспользоватьПроектПоУмолчаниюДляВсехРабот,
			                                    ПроектПоУмолчанию, ВидыДеятельности, ДанныеПоВидамДеятельности);
			КонецЦикла;
			
		Иначе
			
			ДобавитьСтрокуПоДаннымКалендаря(СтрокаДанных,СтрокаДанных.Начало, СтрокаДанных.Окончание,
			                                ИспользоватьПроектПоУмолчаниюДляВсехРабот,
			                                ПроектПоУмолчанию, ВидыДеятельности, ДанныеПоВидамДеятельности);
	
		КонецЕсли;
		
	КонецЦикла;
	
	ЗатратыВремени.Сортировать("Начало,Окончание");
	Длительность = ЗатратыВремени.Итог("Длительность");
	
	// Заполняется проект при необходимости
	Если ВидыДеятельности.Количество()>0 Тогда
		
		ВидыВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыДеятельности, "ВидВремени");
		
		Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
			
			ВидВремени = ВидыВремени.Получить(СтрокаТЧ.ВидДеятельности);
			Если ВидВремени <> Перечисления.ВидыВремени.Нерабочее
				И НЕ ЗначениеЗаполнено(СтрокаТЧ.Проект) И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
				СтрокаТЧ.Проект = ПроектПоУмолчанию;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// При необходимости пустые интервалы между работами в пределах допустимых
	// настроек удаляются
	СократитьПустыеИнтервалы();
	
КонецПроцедуры

Процедура РассчитатьДлительность()
	
	ВидыДеятельности = ЗатратыВремени.ВыгрузитьКолонку("ВидДеятельности");
	
	ВидыВремени = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВидыДеятельности, "ВидВремени");
	
	ОбщаяДлительность  = 0;
	РабочаяДлительность = 0;
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		ВидВремени = ВидыВремени.Получить(СтрокаТЧ.ВидДеятельности);
		
		Если СтрокаТЧ.Окончание > СтрокаТЧ.Начало Тогда
			
			СтрокаТЧ.Длительность = НачалоМинуты(СтрокаТЧ.Окончание) - НачалоМинуты(СтрокаТЧ.Начало);
			
			Если ВидВремени = Перечисления.ВидыВремени.Рабочее Тогда
				РабочаяДлительность = РабочаяДлительность + СтрокаТЧ.Длительность;
			КонецЕсли;
			
		Иначе
			СтрокаТЧ.Длительность = 0;
		КонецЕсли;
		
		ОбщаяДлительность = ОбщаяДлительность + СтрокаТЧ.Длительность;
		
	КонецЦикла;
	
	Длительность = ОбщаяДлительность;
	ДлительностьРабочая = РабочаяДлительность;
	
КонецПроцедуры

Процедура ПроверитьОтчетыНаДату(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументыУчетВремени.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УчетВремени КАК ДокументыУчетВремени
	|ГДЕ
	|	НЕ ДокументыУчетВремени.ПометкаУдаления
	|	И ДокументыУчетВремени.Ссылка <> &Ссылка
	|	И ДокументыУчетВремени.Пользователь = &Пользователь
	|	И НАЧАЛОПЕРИОДА(ДокументыУчетВремени.Дата, ДЕНЬ) = &ДатаДокумента"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Дата));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстСообщения = НСтр("ru='На данную дату уже существует документ для данного пользователя'");
		ВызватьИсключение(ТекстСообщения);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаДляДвижений()
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.УчетВремени"));
	Таблица.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	Таблица.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	Таблица.Колонки.Добавить("ВидДеятельности", Новый ОписаниеТипов("СправочникСсылка.ВидыДеятельности"));
	Таблица.Колонки.Добавить("Проект", Новый ОписаниеТипов("СправочникСсылка.Проекты"));
	Таблица.Колонки.Добавить("ТехническийПроект", Новый ОписаниеТипов("СправочникСсылка.ТехническиеПроекты"));
	Таблица.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("СправочникСсылка.Ошибки"));
	Таблица.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроцесса"));
	Таблица.Колонки.Добавить("ОписаниеРаботы", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;
	
КонецФункции

Функция ДанныеДляЗаписиУчетаВремени()
	
	Таблица = ТаблицаДляДвижений();
	
	ЗадачиСсылки = Новый Массив;
	
	СписокПолей = "ВидДеятельности,Проект,ТехническийПроект,ОписаниеРаботы,Длительность";
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, СписокПолей);
		
		НоваяСтрока.Регистратор = Ссылка;
		НоваяСтрока.Период = Дата;
		НоваяСтрока.Пользователь = Пользователь;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Работа) Тогда
			
			Если ТипЗнч(СтрокаТЧ.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
				НоваяСтрока.Задача = СтрокаТЧ.Работа;
				ЗадачиСсылки.Добавить(СтрокаТЧ.Работа);
			ИначеЕсли ТипЗнч(СтрокаТЧ.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
				НоваяСтрока.Ошибка = СтрокаТЧ.Работа;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ДополнительныеДанные = ДанныеЗадач(ЗадачиСсылки);
	
	Если ДополнительныеДанные.Количество()>0 Тогда
		
		Для Каждого СтрокаТаблицы из Таблица Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Задача) Тогда
				
				СтрокаДопДанных = ДополнительныеДанные.Найти(СтрокаТаблицы.Задача, "Ссылка");
				Если СтрокаДопДанных <> Неопределено Тогда
					
					Если ТипЗнч(СтрокаДопДанных.Предмет) = Тип("СправочникСсылка.Ошибки") Тогда
						СтрокаТаблицы.Ошибка= СтрокаДопДанных.Предмет;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Таблица.Свернуть("Регистратор,Период,Пользователь,ВидДеятельности,Проект,ТехническийПроект,Ошибка,Задача,ОписаниеРаботы", "Длительность");
	
	Возврат Таблица;
	
КонецФункции

Функция ДанныеЗадач(ЗадачиСсылки)
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка КАК Ссылка,
	|	ЗадачиПроцесса.Предмет КАК Предмет
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&Задачи)
	|	И (ЗадачиПроцесса.Предмет ССЫЛКА Справочник.Ошибки)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Задачи", ЗадачиСсылки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СократитьПустыеИнтервалы()
	
	СокращатьПустыеИнтервалыМеждуРаботами = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "СокращатьПустыеИнтервалыМеждуРаботами",
	                                                        Ложь);
															
	ДопустимыйИнтервал = Константы.ДопустимыйИнтервалОкругленияВУчетеВремени.Получить()*60;
	
	Если НЕ СокращатьПустыеИнтервалыМеждуРаботами ИЛИ ДопустимыйИнтервал = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопустимыйИнтервал > 0  И СокращатьПустыеИнтервалыМеждуРаботами Тогда
		
		КоличествоСтрок = ЗатратыВремени.Количество();
		
		Если КоличествоСтрок>1 Тогда
			
			ИндексСтроки = КоличествоСтрок-1;
			
			НачалоОбработаннойРаботы = '00010101';
			
			Пока ИндексСтроки >=0 Цикл
				
				Если ИндексСтроки < КоличествоСтрок-1 Тогда
					
					ТекущаяСтрока = ЗатратыВремени[ИндексСтроки];
					
					Если ТекущаяСтрока.Окончание < НачалоОбработаннойРаботы
						И (НачалоОбработаннойРаботы - ТекущаяСтрока.Окончание) <= ДопустимыйИнтервал Тогда
						
						ТекущаяСтрока.Окончание = НачалоОбработаннойРаботы;
						ТекущаяСтрока.Длительность = ТекущаяСтрока.Окончание - ТекущаяСтрока.Начало;
					КонецЕсли;
					
				КонецЕсли;
				
				НачалоОбработаннойРаботы = ЗатратыВремени[ИндексСтроки].Начало;
				ИндексСтроки = ИндексСтроки-1;
				
			КонецЦикла;
			
			Длительность = ЗатратыВремени.Итог("Длительность");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвободныеИнтервалы(Начало, Окончание)
	
	КвалификаторыВремя = Новый КвалификаторыДаты(ЧастиДаты.Время);
	ОписаниеТипаВремя = Новый ОписаниеТипов("Дата",,,,, КвалификаторыВремя);
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("Начало", ОписаниеТипаВремя);
	ТаблицаИнтервалов.Колонки.Добавить("Окончание", ОписаниеТипаВремя);
	
	ОкончаниеПредыдущегоИнтервала = '00010101';
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		Если СтрокаТЧ.Начало > ОкончаниеПредыдущегоИнтервала Тогда
			
			Если Начало >= ОкончаниеПредыдущегоИнтервала И Начало <= СтрокаТЧ.Начало
				ИЛИ Окончание >= ОкончаниеПредыдущегоИнтервала И Окончание <= СтрокаТЧ.Начало
				ИЛИ Начало <= ОкончаниеПредыдущегоИнтервала И Окончание >= СтрокаТЧ.Начало Тогда
			
				НоваяСтрока = ТаблицаИнтервалов.Добавить();
				
				НоваяСтрока.Начало = Макс(Начало, ОкончаниеПредыдущегоИнтервала);
				НоваяСтрока.Окончание = Мин(СтрокаТч.Начало, Окончание);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОкончаниеПредыдущегоИнтервала = СтрокаТЧ.Окончание;
		
	КонецЦикла;
	
	Если Начало >= ОкончаниеПредыдущегоИнтервала
		ИЛИ Окончание > ОкончаниеПредыдущегоИнтервала
		ИЛИ Начало <= ОкончаниеПредыдущегоИнтервала И Окончание >= ОкончаниеПредыдущегоИнтервала Тогда
		
		НоваяСтрока = ТаблицаИнтервалов.Добавить();
		
		НоваяСтрока.Начало = Макс(Начало, ОкончаниеПредыдущегоИнтервала);
		НоваяСтрока.Окончание = Окончание;
		
	КонецЕсли;
			
	Возврат ТаблицаИнтервалов;
	
КонецФункции

Процедура ДобавитьСтрокуПоДаннымКалендаря(СтрокаДанных, Начало, Окончание, ИспользоватьПроектПоУмолчаниюДляВсехРабот, ПроектПоУмолчанию, ВидыДеятельности, ДанныеПоВидамДеятельности)
	
	ВидДеятельностиДляОшибок = ДанныеПоВидамДеятельности.ВидДеятельностиДляОшибок;
	ВидДеятельностиДляОшибокАвтотестирования = ДанныеПоВидамДеятельности.ВидДеятельностиДляОшибокАвтотестирования;
	ВидДеятельностиДляОшибокАудита = ДанныеПоВидамДеятельности.ВидДеятельностиДляОшибокАудита;
	
	НоваяСтрока = ЗатратыВремени.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных,,"Начало,Окончание");
	
	НоваяСтрока.Начало = Начало;
	НоваяСтрока.Окончание = Окончание;
	
	Если ЗначениеЗаполнено(СтрокаДанных.Задача) Тогда
		
		НоваяСтрока.Работа = СтрокаДанных.Задача;
		
		Если Не ЗначениеЗаполнено(СтрокаДанных.ВидДеятельности)
			И ЗначениеЗаполнено(СтрокаДанных.ВидДеятельностиПоЗадаче) Тогда
			НоваяСтрока.ВидДеятельности = СтрокаДанных.ВидДеятельностиПоЗадаче;
		КонецЕсли;
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
		Иначе
			НоваяСтрока.Проект = СтрокаДанных.Проект;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.Ошибка) Тогда
		
		НоваяСтрока.Работа = СтрокаДанных.Ошибка;
		
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.ВидДеятельности) Тогда
			
			Если СтрокаДанных.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты
				И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАвтоТестирования) Тогда
				НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибокАвтотестирования;
			ИначеЕсли СтрокаДанных.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.АудитКода
				И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАудита) Тогда
				НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибокАудита;
			ИначеЕсли ЗначениеЗаполнено(ВидДеятельностиДляОшибок) Тогда
				НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибок;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
		Иначе
			НоваяСтрока.Проект = СтрокаДанных.Проект;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ТехническийПроект) Тогда
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
		Иначе
			НоваяСтрока.Проект = СтрокаДанных.Проект;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтрока.Окончание > НоваяСтрока.Начало Тогда
		НоваяСтрока.Длительность = НоваяСтрока.Окончание - НоваяСтрока.Начало;
	Иначе
		НоваяСтрока.Длительность = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НоваяСтрока.ВидДеятельности)
		И ВидыДеятельности.Найти(НоваяСтрока.ВидДеятельности) = Неопределено Тогда
		ВидыДеятельности.Добавить(НоваяСтрока.ВидДеятельности);
	КонецЕсли;
		
КОнецПроцедуры

#КонецОбласти

#КонецЕсли