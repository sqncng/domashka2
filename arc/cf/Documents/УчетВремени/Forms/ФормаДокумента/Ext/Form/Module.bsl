#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	СформироватьЗаголовокФормы(Заголовок, Объект.Ссылка, Объект.Дата);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ВидДеятельностиДляОшибок = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	ВидДеятельностиДляОшибокАвтотестирования = Константы.ВидДеятельностиДляРаботыСОшибкамиАвтотестирования.Получить();
	ВидДеятельностиДляОшибокАудита = Константы.ВидДеятельностиДляРаботыСОшибкамиАудита.Получить();
	
	ПроектПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("УчетВремени", "ПроектПоУмолчанию");
	
	Если ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
		Если НЕ УправлениеДоступом.ЧтениеРазрешено(ПроектПоУмолчанию) Тогда
			ПроектПоУмолчанию = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
	СокращатьПустыеИнтервалыМеждуРаботами = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "СокращатьПустыеИнтервалыМеждуРаботами",
	                                                        Ложь);
															
	ИспользоватьПроектПоУмолчаниюДляВсехРабот = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "ИспользоватьПроектПоУмолчаниюДляВсехРабот",
	                                                        Ложь);
															
	ПредлагатьКорректировкуПересекающихсяИнтервалов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "ПредлагатьКорректировкуПересекающихсяИнтервалов",
	                                                        Ложь);
															
	ВыделятьРазрывыПересеченияВременныхИнтервалов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Документ.УчетВремени",
	                                                        "ВыделятьРазрывыПересеченияВременныхИнтервалов",
	                                                        Ложь);
															
	Элементы.ФормаСокращатьПустыеИнтервалыМеждуРаботами.Пометка = СокращатьПустыеИнтервалыМеждуРаботами;
	Элементы.ФормаИспользоватьПроектПоУмолчаниюДляВсехРабот.Пометка = ИспользоватьПроектПоУмолчаниюДляВсехРабот;
	Элементы.ФормаПредлагатьКорректировкуПересекающихсяИнтервалов.Пометка = ПредлагатьКорректировкуПересекающихсяИнтервалов;
	Элементы.ФормаВыделятьРазрывыПересеченияВременныхИнтервалов.Пометка = ВыделятьРазрывыПересеченияВременныхИнтервалов;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда 
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СформироватьЗаголовокФормы(Заголовок, Объект.Ссылка, Объект.Дата);
	ЗаполнитьКэшируемыеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОповещения.Вставить("Дата", Объект.Дата);
	
	Оповестить("ИзмененДокументУчетВремени", ПараметрыОповещения, ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СформироватьЗаголовокФормы(Заголовок, Объект.Ссылка, Объект.Дата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыЗатратыВремени

&НаКлиенте
Процедура ЗатратыВремениОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоследняяСтрока = ПоследняяСтрокаЗатрат();
		НоваяСтрока = Объект.ЗатратыВремени.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение,,"Работа");
		
		Если ТипЗнч(ВыбранноеЗначение.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса")
			ИЛИ ТипЗнч(ВыбранноеЗначение.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
			НоваяСтрока.Работа = ВыбранноеЗначение.Работа;
		ИначеЕсли ТипЗнч(ВыбранноеЗначение.Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			НоваяСтрока.ТехническийПроект = ВыбранноеЗначение.Работа;
		КонецЕсли;
		
		ЗаполнитьРаботуДляУчетаПоДаннымСтроки(НоваяСтрока);
		
		УстановитьВремяПоПоследнейСтроке(НоваяСтрока, ПоследняяСтрока);
		
		Если НоваяСтрока.Окончание > НоваяСтрока.Начало Тогда
			НоваяСтрока.Длительность = НачалоМинуты(НоваяСтрока.Окончание) - НачалоМинуты(НоваяСтрока.Начало);
		Иначе
			НоваяСтрока.Длительность = 0;
		КонецЕсли;
		
		НоваяСтрока.ДлительностьРаботы = '00010101' + НоваяСтрока.Длительность;
		
		ОбработатьПодборРаботыНаСервере(НоваяСтрока.Работа, НоваяСтрока.ВидДеятельности, НоваяСтрока.ВидВремени,
		                                НоваяСтрока.ТребуемаяДетализация, НоваяСтрока.ТехническийПроект, Истина);
		
		ПересчитатьОбщуюДлительность();
		УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
		                                              НачалоИнтервалаРабочегоВремени,
													  ОкончаниеИнтервалаРабочегоВремени);
		
		Элементы.ЗатратыВремени.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениНачалоПриИзменении(Элемент)
	
	ПересчитатьДлительностьВСтроке();
	ПересчитатьОбщуюДлительность();
	УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
	                                              НачалоИнтервалаРабочегоВремени,
												  ОкончаниеИнтервалаРабочегоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениОкончаниеПриИзменении(Элемент)
	
	ПересчитатьДлительностьВСтроке();
	ПересчитатьОбщуюДлительность();
	УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
	                                              НачалоИнтервалаРабочегоВремени,
												  ОкончаниеИнтервалаРабочегоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениНачалоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		ТекущаяДата = НачалоМинуты(ТекущаяДата());
		
		ТекущиеДанные = Элементы.ЗатратыВремени.ТекущиеДанные;
		ТекущиеДанные.Начало = ТекущаяДата;
		
		ПересчитатьДлительностьВСтроке();
		ПересчитатьОбщуюДлительность();
		УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
		                                              НачалоИнтервалаРабочегоВремени,
													  ОкончаниеИнтервалаРабочегоВремени);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениОкончаниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда 
		ТекущаяДата = НачалоМинуты(ТекущаяДата());
		
		ТекущиеДанные = Элементы.ЗатратыВремени.ТекущиеДанные;
		ТекущиеДанные.Окончание = ТекущаяДата;
		
		ПересчитатьДлительностьВСтроке();
		ПересчитатьОбщуюДлительность();
		УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
		                                              НачалоИнтервалаРабочегоВремени,
													  ОкончаниеИнтервалаРабочегоВремени);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Отказ = Истина;
		
		ДобавленнаяСтрока = Элемент.ТекущиеДанные;
		
		УстановитьВремяНовойСтроки(ДобавленнаяСтрока);
		
		ПересчитатьОбщуюДлительность();
		УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
		                                              НачалоИнтервалаРабочегоВремени,
													  ОкончаниеИнтервалаРабочегоВремени);
		
		Если Не ЗначениеЗаполнено(ДобавленнаяСтрока.Проект) И ЗначениеЗаполнено(ПроектПоУмолчанию)
			И ДобавленнаяСтрока.ВидВремени <> ПредопределенноеЗначение("Перечисление.ВидыВремени.Нерабочее") Тогда
			ДобавленнаяСтрока.Проект = ПроектПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ЗатратыВремени.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Окончание < ТекущиеДанные.Начало Тогда
			ТекстСообщения = НСтр("ru='Начало работы указано позже окончания.'");
			ПоказатьПредупреждение(,ТекстСообщения);
			
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ПересчитатьДлительностьВСтроке();
		Объект.ЗатратыВремени.Сортировать("Начало,Окончание");
		
		Если ПредлагатьКорректировкуПересекающихсяИнтервалов Тогда
			
			ТекущаяСтрока = Элементы.ЗатратыВремени.ТекущаяСтрока;
			Если ТекущаяСтрока <> Неопределено Тогда
				ИзмененнаяСтрока = Объект.ЗатратыВремени.НайтиПоИдентификатору(Элементы.ЗатратыВремени.ТекущаяСтрока);
				ПроверитьОбработатьПересечениеИнтервалов(ИзмененнаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьОбщуюДлительность();
	УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
	                                              НачалоИнтервалаРабочегоВремени,
												  ОкончаниеИнтервалаРабочегоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениПослеУдаления(Элемент)
	
	ПересчитатьОбщуюДлительность();
	УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
	                                              НачалоИнтервалаРабочегоВремени,
												  ОкончаниеИнтервалаРабочегоВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениРаботаДляУчетаПриИзменении(Элемент)
	
	НомерСтроки = Элементы.ЗатратыВремени.ТекущиеДанные.НомерСтроки;
	СтрокаЗатрат = Объект.ЗатратыВремени[НомерСтроки-1];
	
	Если ЗначениеЗаполнено(Элементы.ЗатратыВремени.ТекущиеДанные.РаботаДляУчета) Тогда
		
		Если ТипЗнч(СтрокаЗатрат.РаботаДляУчета) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			СтрокаЗатрат.ТехническийПроект = СтрокаЗатрат.РаботаДляУчета;
			СтрокаЗатрат.Работа = Неопределено;
		Иначе
			СтрокаЗатрат.Работа = СтрокаЗатрат.РаботаДляУчета;
			СтрокаЗатрат.ТехническийПроект = ПредопределенноеЗначение("Справочник.ТехническиеПроекты.ПустаяСсылка");
		КонецЕсли;
		
		ПриИзмененииРаботыНаСервере(НомерСтроки);
		
	Иначе
		СтрокаЗатрат.Работа = Неопределено;
		СтрокаЗатрат.ТехническийПроект = ПредопределенноеЗначение("Справочник.ТехническиеПроекты.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениВидДеятельностиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗатратыВремени.ТекущиеДанные;
	ЗатратыВремениВидДеятельностиПриИзмененииНаСервере(ТекущиеДанные.ВидДеятельности,
	                                                   ТекущиеДанные.ВидВремени,
	                                                   ТекущиеДанные.ТребуемаяДетализация,
													   ТекущиеДанные.Работа,
													   ТекущиеДанные.Проект,
													   ИспользоватьПроектПоУмолчаниюДляВсехРабот,
													   ПроектПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениОписаниеРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОткрытьФорму("Документ.УчетВремени.Форма.РанееВыполнявшиесяРаботы", ПараметрыПодбора,Элементы.ЗатратыВремениОписаниеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениОписаниеРаботыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = ДанныеВыбораРаботы(Текст, Объект.Пользователь);
		Если ДанныеВыбора.Количество() > 0 Тогда 
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗатратыВремениОписаниеРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТЧ = Элементы.ЗатратыВремени.ТекущиеДанные;
		ОбработкаВыбораРаботы(ВыбранноеЗначение, СтрокаТЧ);
		
		ЗаполнитьРаботуДляУчетаПоДаннымСтроки(СтрокаТЧ);
		
		ВыбранноеЗначение = ВыбранноеЗначение.ОписаниеРаботы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Записать() Тогда 
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ПолучитьНавигационнуюСсылку(Объект.Ссылка),
			Строка(Объект.Ссылка),
			БиблиотекаКартинок.Информация32);
		
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоКалендарю(Команда)
	
	Если Объект.ЗатратыВремени.Количество()>0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ОчиститьИЗаполнить", НСтр("ru='Очистить данные и заполнить'"));
		СписокКнопок.Добавить("ДополнитьПустыеИнтервалы", НСтр("ru='Дополнить пустые интервалы'"));
		СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоКалендарюЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Документ содержит данные. Выберите вариант заполнения.'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,,"ОчиститьИЗаполнить"); 
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьЗаполнениеПоКалендарю(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Документ.УчетВремени.Форма.РанееВыполнявшиесяРаботы", ПараметрыПодбора,Элементы.ЗатратыВремени);
	
КонецПроцедуры

&НаКлиенте
Процедура СокращатьПустыеИнтервалыМеждуРаботами(Команда)
	
	СокращатьПустыеИнтервалыМеждуРаботами = НЕ СокращатьПустыеИнтервалыМеждуРаботами;
	Элементы.ФормаСокращатьПустыеИнтервалыМеждуРаботами.Пометка = СокращатьПустыеИнтервалыМеждуРаботами;
	СокращатьПустыеИнтервалыМеждуРаботамиНаСервере(СокращатьПустыеИнтервалыМеждуРаботами);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроектПоУмолчаниюДляВсехРабот(Команда)
	
	ИспользоватьПроектПоУмолчаниюДляВсехРабот = НЕ ИспользоватьПроектПоУмолчаниюДляВсехРабот;
	Элементы.ФормаИспользоватьПроектПоУмолчаниюДляВсехРабот.Пометка = ИспользоватьПроектПоУмолчаниюДляВсехРабот;
	ИспользоватьПроектПоУмолчаниюДляВсехРаботНаСервере(ИспользоватьПроектПоУмолчаниюДляВсехРабот);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредлагатьКорректировкуПересекающихсяИнтервалов(Команда)
	
	ПредлагатьКорректировкуПересекающихсяИнтервалов = НЕ ПредлагатьКорректировкуПересекающихсяИнтервалов;
	Элементы.ФормаПредлагатьКорректировкуПересекающихсяИнтервалов.Пометка = ПредлагатьКорректировкуПересекающихсяИнтервалов;
	ПредлагатьКорректировкуПересекающихсяИнтерваловНаСервере(ПредлагатьКорректировкуПересекающихсяИнтервалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьРазрывыПересеченияВременныхИнтервалов(Команда)
	
	ВыделятьРазрывыПересеченияВременныхИнтервалов = НЕ ВыделятьРазрывыПересеченияВременныхИнтервалов;
	Элементы.ФормаВыделятьРазрывыПересеченияВременныхИнтервалов.Пометка = ВыделятьРазрывыПересеченияВременныхИнтервалов;
	ВыделятьРазрывыПересеченияВременныхИнтерваловНаСервере(ВыделятьРазрывыПересеченияВременныхИнтервалов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуПоКоду(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьЗадачуПоКодуЗавершение", ЭтотОбъект);
	ТекстЗаголовка = НСтр("ru='Укажите код задачи'");
	
	КвалификаторыСтрокиКода = Новый КвалификаторыСтроки(11);
	ОписаниеТипаКода = Новый ОписаниеТипов("Строка",,,,КвалификаторыСтрокиКода);
	
	ПоказатьВводЗначения(ОписаниеОповещения, "", ТекстЗаголовка, ОписаниеТипаКода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибкуПоКоду(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьОшибкуПоКодуЗавершение", ЭтотОбъект);
	ТекстЗаголовка = НСтр("ru='Укажите код ошибки'");
	
	КвалификаторыСтрокиКода = Новый КвалификаторыСтроки(11);
	ОписаниеТипаКода = Новый ОписаниеТипов("Строка",,,,КвалификаторыСтрокиКода);
	
	ПоказатьВводЗначения(ОписаниеОповещения, "", ТекстЗаголовка, ОписаниеТипаКода);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехническийПроектПоКоду(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьТехническийПроектПоКодуЗавершение", ЭтотОбъект);
	ТекстЗаголовка = НСтр("ru='Укажите код технического проекта'");
	
	КвалификаторыСтрокиКода = Новый КвалификаторыСтроки(11);
	ОписаниеТипаКода = Новый ОписаниеТипов("Строка",,,,КвалификаторыСтрокиКода);
	
	ПоказатьВводЗначения(ОписаниеОповещения, "", ТекстЗаголовка, ОписаниеТипаКода);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьПоКалендарюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ОчиститьИЗаполнить" Тогда
		Объект.ЗатратыВремени.Очистить();
		ВыполнитьЗаполнениеПоКалендарю(Ложь);
	ИначеЕсли Результат = "ДополнитьПустыеИнтервалы" Тогда
		ВыполнитьЗаполнениеПоКалендарю(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаполнениеПоКалендарю(ДозаполнятьДанные=Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьПоДаннымКалендаря(ДозаполнятьДанные);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	ЗаполнитьКэшируемыеДанные();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокФормы(Заголовок, Ссылка, Дата)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ТекстЗаголовка = НСтр("ru = 'Учет времени за %Дата%'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Дата%", Формат(Дата, "ДЛФ=D"));
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Учет времени (создание)'");
	КонецЕсли;
	
	Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДлительностьВСтроке()
	
	ТекущаяСтрока = Элементы.ЗатратыВремени.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Объект.ЗатратыВремени.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если СтрокаТЧ <> Неопределено Тогда
		
		Если СтрокаТЧ.Окончание > СтрокаТЧ.Начало Тогда
			СтрокаТЧ.Длительность = НачалоМинуты(СтрокаТЧ.Окончание) - НачалоМинуты(СтрокаТЧ.Начало);
		Иначе
			СтрокаТЧ.Длительность = 0;
		КонецЕсли;
		
		СтрокаТЧ.ДлительностьРаботы = '00010101' + СтрокаТЧ.Длительность;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшируемыеДанные()
	
	СписокВидовДеятельности = Новый Массив;
	
	Для Каждого СтрокаТЧ из Объект.ЗатратыВремени Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВидДеятельности)
			И СписокВидовДеятельности.Найти(СтрокаТЧ.ВидДеятельности) = Неопределено Тогда
			
			СписокВидовДеятельности.Добавить(СтрокаТЧ.ВидДеятельности);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Работа) Тогда
			СтрокаТЧ.РаботаДляУчета = СтрокаТЧ.Работа;
		ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ТехническийПроект) Тогда
			СтрокаТЧ.РаботаДляУчета = СтрокаТЧ.ТехническийПроект;
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыВидовДеятельности = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокВидовДеятельности, "ВидВремени,ТребуемаяДетализация");
	
	ДлительностьВсего = 0;
	РабочаяДлительностьВсего = 0;
	НерабочаяДлительностьВсего = 0;
	
	Для Каждого СтрокаТЧ из Объект.ЗатратыВремени Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВидДеятельности) Тогда
			ДанныеВидаДеятельности = РеквизитыВидовДеятельности.Получить(СтрокаТЧ.ВидДеятельности);
			
			СтрокаТЧ.ВидВремени = ДанныеВидаДеятельности.ВидВремени;
			СтрокаТЧ.ТребуемаяДетализация = ДанныеВидаДеятельности.ТребуемаяДетализация;
		КонецЕсли;
		
		СтрокаТЧ.ДлительностьРаботы = '00010101' + СтрокаТЧ.Длительность;
		ДлительностьВсего = ДлительностьВсего + СтрокаТЧ.Длительность;
		
		Если СтрокаТЧ.ВидВремени = Перечисления.ВидыВремени.Рабочее Тогда
			РабочаяДлительностьВсего = РабочаяДлительностьВсего + СтрокаТЧ.Длительность;
		КонецЕсли;
		
	КонецЦикла;
	
	НерабочаяДлительностьВсего = ДлительностьВсего - РабочаяДлительностьВсего;
	
	ОбщаяДлительность = '00010101' + ДлительностьВсего;
	РабочаяДлительность = '00010101' + РабочаяДлительностьВсего;
	НерабочаяДлительность = '00010101' + НерабочаяДлительностьВсего;
	
	УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
	                                              НачалоИнтервалаРабочегоВремени,
												  ОкончаниеИнтервалаРабочегоВремени);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗатратыВремениВидДеятельностиПриИзмененииНаСервере(ВидДеятельности, ВидВремени, ТребуемаяДетализация, Работа, Проект, ИспользоватьПроектПоУмолчаниюДляВсехРабот, ПроектПоУмолчанию)
	
	ЗаполнитьДанныеПоВидуДеятельности(ВидДеятельности, ВидВремени, ТребуемаяДетализация);
	
	Если ВидВремени = Перечисления.ВидыВремени.Рабочее И НЕ ЗначениеЗаполнено(Проект) Тогда
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			Проект = ПроектПоУмолчанию;
		Иначе
			Если ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
				РеквизитыЗадачи = РеквизитыЗадачи(Работа);
				Проект = РеквизитыЗадачи.Проект;
			ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.Ошибки") Тогда
				Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Работа, "Владелец");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидВремени = Перечисления.ВидыВремени.Нерабочее И ЗначениеЗаполнено(Проект) Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
КОнецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьПодборРаботыНаСервере(Работа, ВидДеятельности, ВидВремени, ТребуемаяДетализация, ТехническийПроект, ЗаполнятьВидВремени)
	
	Если ЗначениеЗаполнено(Работа) Тогда
		
		Если ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
			ДанныеРаботы = РеквизитыЗадачи(Работа);
			ТехническийПроект = ДанныеРаботы.ТехническийПроект;
		ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.Ошибки") Тогда
			ДанныеРаботы = РеквизитыОшибки(Работа, Ложь);
			ТехническийПроект = ДанныеРаботы.ТехническийПроект;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаполнятьВидВремени Тогда
		ЗаполнитьДанныеПоВидуДеятельности(ВидДеятельности, ВидВремени, ТребуемаяДетализация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоВидуДеятельности(ВидДеятельности, ВидВремени, ТребуемаяДетализация)
	
	Если ЗначениеЗаполнено(ВидДеятельности) Тогда
		РеквизитыВидаДеятельности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДеятельности, "ВидВремени,ТребуемаяДетализация");
		ВидВремени = РеквизитыВидаДеятельности.ВидВремени;
		ТребуемаяДетализация = РеквизитыВидаДеятельности.ТребуемаяДетализация;
	Иначе
		ВидВремени = Перечисления.ВидыВремени.ПустаяСсылка();
		ТребуемаяДетализация = Перечисления.ДетализацияВПланированииИУчетеВремени.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОбщуюДлительность()
	
	ДлительностьВсего = 0;
	РабочаяДлительностьВсего = 0;
	НерабочаяДлительностьВсего = 0;
	
	Для Каждого СтрокаТЧ из Объект.ЗатратыВремени Цикл
		
		ДлительностьВсего = ДлительностьВсего + СтрокаТЧ.Длительность;
		
		Если СтрокаТЧ.ВидВремени = ПредопределенноеЗначение("Перечисление.ВидыВремени.Рабочее") Тогда
			РабочаяДлительностьВсего = РабочаяДлительностьВсего + СтрокаТЧ.Длительность;
		КонецЕсли;
		
	КонецЦикла;
	
	НерабочаяДлительностьВсего = ДлительностьВсего - РабочаяДлительностьВсего;
	
	ОбщаяДлительность = '00010101' + ДлительностьВсего;
	РабочаяДлительность = '00010101' + РабочаяДлительностьВсего;
	НерабочаяДлительность = '00010101' + НерабочаяДлительностьВсего;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбработатьПересечениеИнтервалов(ИзмененнаяСтрока)
	
	Если ВременныеИнтервалыПересекаются(ИзмененнаяСтрока) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИзмененнаяСтрока", ИзмененнаяСтрока);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПересеченияИнтерваловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстВопроса = НСтр("ru='Временные интервалы пересекаются. Скорректировать автоматически?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПересеченияИнтерваловЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОкончаниеИнтервала = Неопределено;
	
	Если Результат  = КодВозвратаДиалога.Да Тогда
		
		СкорректироватьИнтервалыСтрок(ДополнительныеПараметры.ИзмененнаяСтрока);
		ПересчитатьОбщуюДлительность();
		Объект.ЗатратыВремени.Сортировать("Начало,Окончание");
		
		УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
		                                              НачалоИнтервалаРабочегоВремени,
													  ОкончаниеИнтервалаРабочегоВремени);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	НачалоИнтервалаРабочегоВремени = Константы.НачалоИнтервалаРабочегоВремени.Получить();
	ОкончаниеИнтервалаРабочегоВремени = Константы.ОкончаниеИнтервалаРабочегоВремени.Получить();
	ЗаполнитьКэшируемыеДанные();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.Пользователь.Видимость = (Объект.Пользователь <> ТекущийПользователь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВремяПоПоследнейСтроке(ТекущаяСтрока, ПоследняяСтрока)
	
	ТекущаяДата = НачалоМинуты(ТекущаяДата());
	Длительность = ТекущаяДата -НачалоДня(ТекущаяДата) ;
	ТекущееВремя = '00010101' + Длительность;
	
	Если ПоследняяСтрока = Неопределено Тогда
		ТекущаяСтрока.Начало = ТекущееВремя;
		ТекущаяСтрока.Окончание = ТекущееВремя;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Начало = ПоследняяСтрока.Окончание;
	
	Если ТекущаяСтрока.Начало <= ТекущееВремя Тогда
		ТекущаяСтрока.Окончание = ТекущееВремя;
	Иначе
		ТекущаяСтрока.Окончание = ТекущаяСтрока.Начало;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Функция ПоследняяСтрокаЗатрат()
	
	Результат = Неопределено;
	
	КоличествоСтрок = Объект.ЗатратыВремени.Количество();
	
	Если КоличествоСтрок>0 Тогда
		Результат = Объект.ЗатратыВремени[КоличествоСтрок-1];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииРаботыНаСервере(НомерСтроки)
	
	СтрокаЗатрат = Объект.ЗатратыВремени[НомерСтроки-1];
	
	Если ТипЗнч(СтрокаЗатрат.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		
		РеквизитыЗадачи = РеквизитыЗадачи(СтрокаЗатрат.Работа);
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			СтрокаЗатрат.Проект = ПроектПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.Проект) Тогда
			СтрокаЗатрат.Проект = РеквизитыЗадачи.Проект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.ВидДеятельности) Тогда
			СтрокаЗатрат.ВидДеятельности = РеквизитыЗадачи.ВидДеятельности;
			ЗаполнитьДанныеПоВидуДеятельности(СтрокаЗатрат.ВидДеятельности, СтрокаЗатрат.ВидВремени, СтрокаЗатрат.ТребуемаяДетализация);
		КонецЕсли;
		
		СтрокаЗатрат.ТехническийПроект = РеквизитыЗадачи.ТехническийПроект;
		
	ИначеЕсли ТипЗнч(СтрокаЗатрат.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
		
		РеквизитыОшибки = РеквизитыОшибки(СтрокаЗатрат.Работа, Ложь);
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			СтрокаЗатрат.Проект = ПроектПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(РеквизитыОшибки.Проект) Тогда
			СтрокаЗатрат.Проект = РеквизитыОшибки.Проект;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗатрат.Работа) Тогда
			
			Если РеквизитыОшибки.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты
				И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАвтотестирования) Тогда
				СтрокаЗатрат.ВидДеятельности = ВидДеятельностиДляОшибокАвтотестирования;
			ИначеЕсли РеквизитыОшибки.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.АудитКода
				И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАудита) Тогда
				СтрокаЗатрат.ВидДеятельности = ВидДеятельностиДляОшибокАудита;
			ИначеЕсли ЗначениеЗаполнено(ВидДеятельностиДляОшибок) Тогда
				СтрокаЗатрат.ВидДеятельности = ВидДеятельностиДляОшибок;
			КонецЕсли;
			
			ЗаполнитьДанныеПоВидуДеятельности(СтрокаЗатрат.ВидДеятельности, СтрокаЗатрат.ВидВремени, СтрокаЗатрат.ТребуемаяДетализация);
			
		КонецЕсли;
		
		СтрокаЗатрат.ТехническийПроект = РеквизитыОшибки.ТехническийПроект;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыЗадачи(Задача)
	
	Результат = Новый Структура;
	Результат.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	Результат.Вставить("ВидДеятельности", Справочники.ВидыДеятельности.ПустаяСсылка());
	Результат.Вставить("ТехническийПроект", Справочники.ТехническиеПроекты.ПустаяСсылка());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец
	|		ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец
	|	КОНЕЦ КАК Проект,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|			ТОГДА ЗадачиПроцесса.Предмет
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)
	|	КОНЕЦ КАК ТехническийПроект,
	|	ЗадачиПроцесса.ВидДеятельности КАК ВидДеятельности
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Задача);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Проект) Тогда
			Результат.Вставить("Проект", Выборка.Проект);
		КонецЕсли;
		
		Результат.Вставить("ВидДеятельности", Выборка.ВидДеятельности);
		Результат.Вставить("ТехническийПроект", Выборка.ТехническийПроект);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыОшибки(Ошибка, ПоискПоКоду, Код="")
	
	Результат = Новый Структура;
	Результат.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	Результат.Вставить("Ссылка", Справочники.Ошибки.ПустаяСсылка());
	Результат.Вставить("МетодВыявленияОшибки", Перечисления.МетодыВыявленияОшибок.ПустаяСсылка());
	Результат.Вставить("ТехническийПроект", Справочники.ТехническиеПроекты.ПустаяСсылка());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ошибки.Владелец КАК Проект,
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.МетодВыявленияОшибки КАК МетодВыявленияОшибки,
	|	Ошибки.ВеткаОбнаружения КАК ВеткаОбнаружения
	|ПОМЕСТИТЬ ВТДанныеОшибки
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	(НЕ &ПоискПоКоду
	|				И Ошибки.Ссылка = &Ссылка
	|			ИЛИ &ПоискПоКоду
	|				И Ошибки.Код ПОДОБНО &Код)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ТехническиеПроекты.Ссылка КАК ТехническийПроект
	|ПОМЕСТИТЬ ВТТехническиеПроекты
	|ИЗ
	|	ВТДанныеОшибки КАК ВТДанныеОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО (ВТДанныеОшибки.ВеткаОбнаружения <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка))
	|			И ВТДанныеОшибки.ВеткаОбнаружения = ТехническиеПроекты.Ветка
	|			И ВТДанныеОшибки.ВеткаОбнаружения.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта)
	|			И (НЕ ТехническиеПроекты.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ТехническиеПроекты.Ссылка КАК ТехническийПроект
	|ПОМЕСТИТЬ ВТАктивныеТехническиеПроекты
	|ИЗ
	|	ВТДанныеОшибки КАК ВТДанныеОшибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО (ВТДанныеОшибки.ВеткаОбнаружения <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка))
	|			И ВТДанныеОшибки.ВеткаОбнаружения = ТехническиеПроекты.Ветка
	|			И ВТДанныеОшибки.ВеткаОбнаружения.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта)
	|			И (ТехническиеПроекты.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен))
	|			И (НЕ ТехническиеПроекты.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТДанныеОшибки.Проект КАК Проект,
	|	ВТДанныеОшибки.Ссылка КАК Ссылка,
	|	ВТДанныеОшибки.МетодВыявленияОшибки КАК МетодВыявленияОшибки
	|ИЗ
	|	ВТДанныеОшибки КАК ВТДанныеОшибки"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ошибка);
	Запрос.УстановитьПараметр("ПоискПоКоду", ПоискПоКоду);
	Запрос.УстановитьПараметр("Код", Код);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВТТехническиеПроекты = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТТехническиеПроекты"].ПолучитьДанные().Выгрузить();
	ВТАктивныеТехническиеПроекты = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТАктивныеТехническиеПроекты"].ПолучитьДанные().Выгрузить();
	
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.Проект) Тогда
			Результат.Вставить("Проект", Выборка.Проект);
		КонецЕсли;
		
		Результат.Вставить("Ссылка", Выборка.Ссылка);
		Результат.Вставить("МетодВыявленияОшибки", Выборка.МетодВыявленияОшибки);
		
		Если ВТТехническиеПроекты.Количество()=1 Тогда
			Результат.Вставить("ТехническийПроект", ВТТехническиеПроекты[0].ТехническийПроект);
		ИначеЕсли ВТАктивныеТехническиеПроекты.Количество()=1 Тогда
			Результат.Вставить("ТехническийПроект", ВТАктивныеТехническиеПроекты[0].ТехническийПроект);
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеВыбораРаботы(Текст, Пользователь)
	
	Возврат УчетВремени.ДанныеАвтоподбораРабот(Текст, Пользователь);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораРаботы(РезультатВыбора, Строка)

	Строка.ОписаниеРаботы = РезультатВыбора.ОписаниеРаботы;
	Строка.Проект = РезультатВыбора.Проект;
	Строка.ВидДеятельности = РезультатВыбора.ВидДеятельности;
	
	Если ТипЗнч(РезультатВыбора.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса")
		ИЛИ ТипЗнч(РезультатВыбора.Работа) = Тип("СправочникСсылка.Ошибки") Тогда
		Строка.Работа = РезультатВыбора.Работа;
	ИначеЕсли ТипЗнч(РезультатВыбора.Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Строка.ТехническийПроект = РезультатВыбора.Работа;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Строка.Начало) Тогда
		ТекущаяДата = НачалоМинуты(ТекущаяДата());
		Строка.Начало = ТекущаяДата;
		Строка.Окончание = ТекущаяДата;
	КонецЕсли;

	ПересчитатьДлительностьВСтроке();
	ПересчитатьОбщуюДлительность();
	Объект.ЗатратыВремени.Сортировать("Начало,Окончание");
	
	УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
	                                              НачалоИнтервалаРабочегоВремени,
												  ОкончаниеИнтервалаРабочегоВремени);
	
	ЗаполнятьВидВремени = НЕ РезультатВыбора.Свойство("ВидВремени");
	ОбработатьПодборРаботыНаСервере(Строка.Работа, Строка.ВидДеятельности, Строка.ВидВремени, Строка.ТребуемаяДетализация,
	                                Строка.ТехническийПроект, ЗаполнятьВидВремени);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СокращатьПустыеИнтервалыМеждуРаботамиНаСервере(СокращатьПустыеИнтервалыМеждуРаботами)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Документ.УчетВремени",
	                                                 "СокращатьПустыеИнтервалыМеждуРаботами",
	                                                 СокращатьПустыеИнтервалыМеждуРаботами);
															
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИспользоватьПроектПоУмолчаниюДляВсехРаботНаСервере(ИспользоватьПроектПоУмолчаниюДляВсехРабот)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Документ.УчетВремени",
	                                                 "ИспользоватьПроектПоУмолчаниюДляВсехРабот",
	                                                 ИспользоватьПроектПоУмолчаниюДляВсехРабот);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПредлагатьКорректировкуПересекающихсяИнтерваловНаСервере(ПредлагатьКорректировкуПересекающихсяИнтервалов)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Документ.УчетВремени",
	                                                 "ПредлагатьКорректировкуПересекающихсяИнтервалов",
	                                                 ПредлагатьКорректировкуПересекающихсяИнтервалов);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыделятьРазрывыПересеченияВременныхИнтерваловНаСервере(ВыделятьРазрывыПересеченияВременныхИнтервалов)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Документ.УчетВремени",
	                                                 "ВыделятьРазрывыПересеченияВременныхИнтервалов",
	                                                 ВыделятьРазрывыПересеченияВременныхИнтервалов);
													 
КОнецПроцедуры

&НаКлиенте
Функция ВременныеИнтервалыПересекаются(ИзмененнаяСтрока)
	
	Если НЕ ЗначениеЗаполнено(ИзмененнаяСтрока.Начало) 
		ИЛИ НЕ ЗначениеЗаполнено(ИзмененнаяСтрока.Окончание) Тогда 
		Возврат Ложь; 
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ЗатратыВремени Цикл
		
		ИндексСтроки1 = Объект.ЗатратыВремени.Индекс(Строка);
		ИндексСтроки2 = Объект.ЗатратыВремени.Индекс(ИзмененнаяСтрока);
		
		Если Строка.Начало > Строка.Окончание Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если ИндексСтроки1 = ИндексСтроки2 Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если (ИзмененнаяСтрока.Начало >= Строка.Начало И ИзмененнаяСтрока.Начало < Строка.Окончание)
			ИЛИ (ИзмененнаяСтрока.Окончание > Строка.Начало И ИзмененнаяСтрока.Окончание <= Строка.Окончание
		 		И НЕ (ИзмененнаяСтрока.Начало = ИзмененнаяСтрока.Окончание И ИзмененнаяСтрока.Окончание = Строка.Окончание))
		 	ИЛИ (ИзмененнаяСтрока.Начало <= Строка.Начало И ИзмененнаяСтрока.Окончание >= Строка.Окончание 
		 		И НЕ (Строка.Начало = Строка.Окончание
				И (Строка.Начало = ИзмененнаяСтрока.Начало ИЛИ Строка.Окончание = ИзмененнаяСтрока.Окончание))) Тогда
			
			Возврат Истина;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СкорректироватьИнтервалыСтрок(ИзмененнаяСтрока)
	
	Для Каждого Строка Из Объект.ЗатратыВремени Цикл
		
		ИндексСтроки = Объект.ЗатратыВремени.Индекс(Строка);
		Если ИндексСтроки = Объект.ЗатратыВремени.Индекс(ИзмененнаяСтрока) Тогда 
			Продолжить;
		КонецЕсли;	
		
		Если ИзмененнаяСтрока.Начало > Строка.Начало 
			И ИзмененнаяСтрока.Начало < Строка.Окончание
			И ИзмененнаяСтрока.Окончание > Строка.Начало
			И ИзмененнаяСтрока.Окончание < Строка.Окончание Тогда // лежит внутри интервала
			
			НоваяСтрока = Объект.ЗатратыВремени.Вставить(ИндексСтроки+1);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);

			Строка.Окончание = ИзмененнаяСтрока.Начало;
			НоваяСтрока.Начало = ИзмененнаяСтрока.Окончание;
			
			Если Строка.Окончание > Строка.Начало Тогда
				Строка.Длительность = НачалоМинуты(Строка.Окончание) - НачалоМинуты(Строка.Начало);
			Иначе
				Строка.Длительность = 0;
			КонецЕсли;
			
			Если НоваяСтрока.Окончание > НоваяСтрока.Начало Тогда
				НоваяСтрока.Длительность = НачалоМинуты(НоваяСтрока.Окончание) - НачалоМинуты(НоваяСтрока.Начало);
			Иначе
				НоваяСтрока.Длительность = 0;
			КонецЕсли;
			
			Строка.ДлительностьРаботы = '00010101' + Строка.Длительность;
			НоваяСтрока.ДлительностьРаботы = '00010101' + НоваяСтрока.Длительность;
			
			Прервать;
			
		КонецЕсли;	
		
		Если ИзмененнаяСтрока.Начало >= Строка.Начало 
			И ИзмененнаяСтрока.Начало <= Строка.Окончание
			И ИзмененнаяСтрока.Окончание >= Строка.Начало
			И ИзмененнаяСтрока.Окончание >= Строка.Окончание Тогда 
			
			Строка.Окончание = ИзмененнаяСтрока.Начало;
		КонецЕсли;	
			
		Если ИзмененнаяСтрока.Начало <= Строка.Начало 
			И ИзмененнаяСтрока.Начало <= Строка.Окончание
			И ИзмененнаяСтрока.Окончание >= Строка.Начало
			И ИзмененнаяСтрока.Окончание <= Строка.Окончание Тогда 
			
			Строка.Начало = ИзмененнаяСтрока.Окончание;
		КонецЕсли;	
			
		Если ИзмененнаяСтрока.Начало <= Строка.Начало 
			И ИзмененнаяСтрока.Начало <= Строка.Окончание
			И ИзмененнаяСтрока.Окончание >= Строка.Начало
			И ИзмененнаяСтрока.Окончание >= Строка.Окончание Тогда 
			
			Если Объект.ЗатратыВремени.Индекс(Строка) < Объект.ЗатратыВремени.Индекс(ИзмененнаяСтрока) Тогда
				Строка.Начало = ИзмененнаяСтрока.Начало;
				Строка.Окончание = ИзмененнаяСтрока.Начало;
			Иначе
				Строка.Начало = ИзмененнаяСтрока.Окончание;
				Строка.Окончание = ИзмененнаяСтрока.Окончание;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Строка.Окончание > Строка.Начало Тогда
			Строка.Длительность = НачалоМинуты(Строка.Окончание) - НачалоМинуты(Строка.Начало);
		Иначе
			Строка.Длительность = 0;
		КонецЕсли;
			
		Строка.ДлительностьРаботы = '00010101' + Строка.Длительность;
		
	КонецЦикла;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуПоКодуЗавершение(Результат, дополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДобавленнаяСтрока = ДобавитьЗадачуПоКодуНаСервере(Результат);
		
		Если ЗначениеЗаполнено(ДобавленнаяСтрока) Тогда
			
			Элементы.ЗатратыВремени.ТекущаяСтрока = ДобавленнаяСтрока;
			УстановитьВремяНовойСтроки(Элементы.ЗатратыВремени.ТекущиеДанные);
			
			ПересчитатьОбщуюДлительность();
			УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
			                                              НачалоИнтервалаРабочегоВремени,
														  ОкончаниеИнтервалаРабочегоВремени);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехническийПроектПоКодуЗавершение(Результат, дополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДобавленнаяСтрока = ДобавитьТехническийПроектПоКодуНаСервере(Результат);
		
		Если ЗначениеЗаполнено(ДобавленнаяСтрока) Тогда
			
			Элементы.ЗатратыВремени.ТекущаяСтрока = ДобавленнаяСтрока;
			УстановитьВремяНовойСтроки(Элементы.ЗатратыВремени.ТекущиеДанные);
			
			ПересчитатьОбщуюДлительность();
			УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
			                                              НачалоИнтервалаРабочегоВремени,
														  ОкончаниеИнтервалаРабочегоВремени);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибкуПоКодуЗавершение(Результат, дополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ДобавленнаяСтрока = ДобавитьОшибкуПоКодуНаСервере(Результат);
		
		Если ЗначениеЗаполнено(ДобавленнаяСтрока) Тогда
			
			Элементы.ЗатратыВремени.ТекущаяСтрока = ДобавленнаяСтрока;
			УстановитьВремяНовойСтроки(Элементы.ЗатратыВремени.ТекущиеДанные);
			
			ПересчитатьОбщуюДлительность();
			УстановитьПризнакРазрываПересеченияИнтервалов(Объект.ЗатратыВремени,
			                                              НачалоИнтервалаРабочегоВремени,
														  ОкончаниеИнтервалаРабочегоВремени);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЗадачуПоКодуНаСервере(Код)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗадачиПроцесса.Ссылка КАК Работа,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец
	|		ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец
	|	КОНЕЦ КАК ПроектЗадачи,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|			ТОГДА ЗадачиПроцесса.Предмет
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)
	|	КОНЕЦ КАК ТехническийПроект,
	|	ЗадачиПроцесса.ВидДеятельности КАК ВидДеятельности,
	|	ЗадачиПроцесса.ВидДеятельности.ВидВремени КАК ВидВремени
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Код ПОДОБНО &Код"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код", СокрЛП(Код) + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		
		НоваяСтрока = Объект.ЗатратыВремени.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ЗаполнитьРаботуДляУчетаПоДаннымСтроки(НоваяСтрока);
		
		Если Выборка.ВидВремени = Перечисления.ВидыВремени.Рабочее Тогда
			
			Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
				НоваяСтрока.Проект = ПроектПоУмолчанию;
			Иначе
				НоваяСтрока.Проект = Выборка.ПроектЗадачи;
			КонецЕсли;
		
		КонецЕсли;
		
		Результат = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьОшибкуПоКодуНаСервере(Код)
	
	РеквизитыОшибки = РеквизитыОшибки(Неопределено, Истина, Код);
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(РеквизитыОшибки.Ссылка) Тогда
		
		НоваяСтрока = Объект.ЗатратыВремени.Добавить();
		
		НоваяСтрока.Работа = РеквизитыОшибки.Ссылка;
		
		ЗаполнитьРаботуДляУчетаПоДаннымСтроки(НоваяСтрока);
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
		ИначеЕсли ЗначениеЗаполнено(РеквизитыОшибки.Проект) Тогда
			НоваяСтрока.Проект = РеквизитыОшибки.Проект;
		КонецЕсли;
		
		Если РеквизитыОшибки.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты
			И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАвтотестирования) Тогда
			НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибокАвтотестирования;
		ИначеЕсли РеквизитыОшибки.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.АудитКода
			И ЗначениеЗаполнено(ВидДеятельностиДляОшибокАудита) Тогда
			НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибокАудита;
		ИначеЕсли ЗначениеЗаполнено(ВидДеятельностиДляОшибок) Тогда
			НоваяСтрока.ВидДеятельности = ВидДеятельностиДляОшибок;
		КонецЕсли;
		
		ЗаполнитьДанныеПоВидуДеятельности(НоваяСтрока.ВидДеятельности, НоваяСтрока.ВидВремени, НоваяСтрока.ТребуемаяДетализация);
		
		НоваяСтрока.ТехническийПроект = РеквизитыОшибки.ТехническийПроект;
		
		Результат = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьТехническийПроектПоКодуНаСервере(Код)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТехническиеПроекты.Ссылка КАК ТехническийПроект,
	|	ТехническиеПроекты.Владелец КАК ПроектВладелец
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Код ПОДОБНО &Код"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код", СокрЛП(Код) + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	
	Если Выборка.Следующий() Тогда
		
		НоваяСтрока = Объект.ЗатратыВремени.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ЗаполнитьРаботуДляУчетаПоДаннымСтроки(НоваяСтрока);
		
		Если ИспользоватьПроектПоУмолчаниюДляВсехРабот И ЗначениеЗаполнено(ПроектПоУмолчанию) Тогда
			НоваяСтрока.Проект = ПроектПоУмолчанию;
		Иначе
			НоваяСтрока.Проект = Выборка.ПроектВладелец;
		КонецЕсли;
		
		Результат = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВремяНовойСтроки(ДобавленнаяСтрока)
	
	Если ДобавленнаяСтрока.НомерСтроки>1 Тогда
		ПоследняяСтрока = Объект.ЗатратыВремени[ДобавленнаяСтрока.НомерСтроки-2];
	Иначе
		ПоследняяСтрока = Неопределено;
	КонецЕсли;
	
	УстановитьВремяПоПоследнейСтроке(ДобавленнаяСтрока, ПоследняяСтрока);
	
	Если ДобавленнаяСтрока.Окончание > ДобавленнаяСтрока.Начало Тогда
		ДобавленнаяСтрока.Длительность = НачалоМинуты(ДобавленнаяСтрока.Окончание) - НачалоМинуты(ДобавленнаяСтрока.Начало);
	Иначе
		ДобавленнаяСтрока.Длительность = 0;
	КонецЕсли;
	
	ДобавленнаяСтрока.ДлительностьРаботы = '00010101' + ДобавленнаяСтрока.Длительность;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПризнакРазрываПересеченияИнтервалов(ЗатратыВремени, НачалоИнтервалаРабочегоВремени, ОкончаниеИнтервалаРабочегоВремени)
	
	ПредыдущаяСтрока = Неопределено;
	
	Для Каждого СтрокаТЧ из ЗатратыВремени Цикл
		
		Если ПредыдущаяСтрока <> Неопределено Тогда
			
			Если ПредыдущаяСтрока.Окончание < СтрокаТЧ.Начало Тогда
				Если ПредыдущаяСтрока.Окончание < ОкончаниеИнтервалаРабочегоВремени
					ИЛИ НЕ ЗначениеЗаполнено(ОкончаниеИнтервалаРабочегоВремени) Тогда
					// Разрыв
					ПредыдущаяСтрока.ЕстьРазрывПересечениеИнтервалаОкончание = Истина;
					СтрокаТЧ.ЕстьРазрывПересечениеИнтервалаНачало = Истина;
				Иначе
					ПредыдущаяСтрока.ЕстьРазрывПересечениеИнтервалаОкончание = Ложь;
					СтрокаТЧ.ЕстьРазрывПересечениеИнтервалаНачало = Ложь;
				КонецЕсли;
			ИначеЕсли ПредыдущаяСтрока.Окончание > СтрокаТЧ.Начало Тогда
				// Пересечение
				ПредыдущаяСтрока.ЕстьРазрывПересечениеИнтервалаОкончание = Истина;
				СтрокаТЧ.ЕстьРазрывПересечениеИнтервалаНачало = Истина;
			Иначе
				ПредыдущаяСтрока.ЕстьРазрывПересечениеИнтервалаОкончание = Ложь;
				СтрокаТЧ.ЕстьРазрывПересечениеИнтервалаНачало = Ложь;
			КонецЕсли;
			
		Иначе
			// Для первой строки анализируется начало с учетом начала рабочего дня
			Если ЗначениеЗаполнено(НачалоИнтервалаРабочегоВремени) И СтрокаТЧ.Начало > НачалоИнтервалаРабочегоВремени Тогда
				СтрокаТЧ.ЕстьРазрывПересечениеИнтервалаНачало = Истина;
			Иначе
				СтрокаТЧ.ЕстьРазрывПересечениеИнтервалаНачало = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущаяСтрока = СтрокаТЧ;
		
	КонецЦикла;
	
	// Для последней строки анализируется окончание с учетом окончания рабочего дня
	
	Если ПредыдущаяСтрока <> Неопределено И ЗначениеЗаполнено(ОкончаниеИнтервалаРабочегоВремени) Тогда
		Если ПредыдущаяСтрока.Окончание < ОкончаниеИнтервалаРабочегоВремени Тогда
			ПредыдущаяСтрока.ЕстьРазрывПересечениеИнтервалаОкончание = Истина;
		Иначе
			ПредыдущаяСтрока.ЕстьРазрывПересечениеИнтервалаОкончание = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРаботуДляУчетаПоДаннымСтроки(СтрокаТЧ)
	
	Если ЗначениеЗаполнено(СтрокаТЧ.Работа) Тогда
		СтрокаТЧ.РаботаДляУчета = СтрокаТЧ.Работа;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.ТехническийПроект) Тогда
		СтрокаТЧ.РаботаДляУчета = СтрокаТЧ.ТехническийПроект;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти