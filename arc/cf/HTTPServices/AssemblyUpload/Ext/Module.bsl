#Область ОбработкаHTTPВызовов

// Создает новую сборку версии, если она не существует.
//
// Параметры:
//   JSON строка с типом Структура - содержит:
//     * НомерСборки               - Строка - номер создаваемой сборки, например 1.1.1.101;
//     * ИмяКонфигурации           - Строка - имя конфигурации проекта, в котором создается сборка;
//     * ДатаСборки                - Строка - дата и время создания сборки (опционально). 
//                                            Если значение не определено, то используется текущая дата;
//     * РасположениеДистрибутива  - Строка - расположение дистрибутива сборки (опционально);
//     * Статус                    - Строка - статус сборки (опционально). Если не определено, 
//                                            то используется "Финальная" для библиотечных проектов 
//                                            и "Тестовая" для не библиотечных проектов;
//     * СоздаватьВстроенныеСборки - Булево - создавать ли встроенные сборки, если их нет (опционально). 
//                                            Если значение не определено, то задается Истина;
//     * СборкиВстроенныхБиблиотек - Структура - содержит (опционально):
//        ** НомерСборки              - Строка - номер сборки встраиваемого проекта.
//        ** ИмяКонфигурации          - Строка - имя конфигурации встраиваемого проекта.
//
//
// Возвращаемое значение:
//   JSON строка с типом Структура - содержит:
//   В случае успешного выполнения:
//     * assembly                 - Строка           - навигационная ссылка на созданную или уже существующую сборку;
//     * assembly_was_created     - Булево           - истина, если сборка была создана и Ложь, 
//                                                     если сборка уже существовала;
//     * created_library_assembly - Массив из Строка - навигационные ссылки на созданные сборки библиотек;
//   
//   В случае ошибки во время выполнения:
//     * error                    - Строка           - подробная информация об ошибке;

Функция CreateAssemblyPOST(Запрос)
	СтрJson = Запрос.ПолучитьТелоКакСтроку();
		
	КодСостояния = 500;
	ДанныеОтвета = Новый Структура;

	Попытка
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Запрос на создание сборки:%1'"), Символы.ПС + СтрJson);
		ЗаписьЖурналаРегистрации("CreateAssemblyPOST",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
										
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрJson);
		Параметры = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
		
		НомерСборки = "";
		Параметры.Свойство("НомерСборки", НомерСборки);
		Если НЕ ЗначениеЗаполнено(НомерСборки) Тогда
			ВызватьИсключение НСтр("ru = 'Не передан номер сборки.'"); 
		КонецЕсли;
		
		ИмяКонфигурации = "";
		Параметры.Свойство("ИмяКонфигурации", ИмяКонфигурации);
		Если НЕ ЗначениеЗаполнено(ИмяКонфигурации) Тогда
			ВызватьИсключение НСтр("ru = 'Не передано имя конфигурации.'"); 
		КонецЕсли;
		
		НомерВерсии = НомерВерсииИзНомераСборки(НомерСборки);
		Если НомерВерсии = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Передан некорректный номер сборки.'"); 
		КонецЕсли;
		
		Сборка = НайтиСборку(ИмяКонфигурации, НомерСборки);
		Если Сборка = Неопределено Тогда
			
			Версия = НайтиВерсию(ИмяКонфигурации, НомерВерсии);
			Если Версия = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не найдена версия проекта.'");
			КонецЕсли;
			РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Ветка, ВерсияПлатформы, Владелец.Библиотека, Владелец");
			
			НоваяСборка = Справочники.СборкиВерсии.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НоваяСборка, Параметры);

			НоваяСборка.ПубликуемыйНомерСборки = НомерСборки;
			НоваяСборка.Код = НомерСборки;
			НоваяСборка.Владелец = Версия;
			НоваяСборка.Ветка = РеквизитыВерсии.Ветка;
			
			НоваяСборка.ДатаСборки = ?(Параметры.Свойство("ДатаСборки"), 
									  Дата(Параметры.ДатаСборки), 
									  ТекущаяДата());
			
			НоваяСборка.РасположениеДистрибутива = ?(Параметры.Свойство("РасположениеДистрибутива"), 
													 Параметры.РасположениеДистрибутива, 
													 "");
			
			НоваяСборка.РекомендуемаяВерсияПлатформы = ?(Параметры.Свойство("ВерсияПлатформы"), 
														 Параметры.ВерсияПлатформы, 
														 РеквизитыВерсии.ВерсияПлатформы);
														 
			Если Параметры.Свойство("Статус") 
				И Метаданные.Перечисления.СтатусыСборокВерсииПроекта.ЗначенияПеречисления.Найти(Параметры.Статус)
					<> Неопределено Тогда
				НоваяСборка.Статус = Перечисления.СтатусыСборокВерсииПроекта[Параметры.Статус];
			Иначе
				НоваяСборка.Статус = ?(РеквизитыВерсии.ВладелецБиблиотека,
									   Перечисления.СтатусыСборокВерсииПроекта.Финальная, 
									   Перечисления.СтатусыСборокВерсииПроекта.Тестовая);
			КонецЕсли;
			
			НоваяСборка.Записать();
			
			СозданныеБиблиотечныеСборки = Новый Массив;
			
			СоздаватьВстроенныеСборки = ?(Параметры.Свойство("СоздаватьВстроенныеСборки") 
										  И (НРег(Строка(Параметры.СоздаватьВстроенныеСборки)) = "true" 
										  ИЛИ НРег(Строка(Параметры.СоздаватьВстроенныеСборки)) = "истина"),
										  Истина, 
										  Ложь);
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Создавать встроенные сборки: %1'"), СоздаватьВстроенныеСборки);
			ЗаписьЖурналаРегистрации("CreateAssemblyPOST",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
										
			Если Параметры.Свойство("СборкиВстроенныхБиблиотек") 
				И Параметры.СборкиВстроенныхБиблиотек <> Неопределено Тогда
				
				ВстраиваемыеПроекты = ВстраиваемыеСборки(Параметры.СборкиВстроенныхБиблиотек, РеквизитыВерсии.Владелец); 
				Для Каждого Элемент Из ВстраиваемыеПроекты Цикл
					БиблиотекаИмяКонфигурации = Элемент.ИмяКонфигурации;
					БиблиотекаНомерСборки = Элемент.НомерСборки;
					
					Если НЕ ЗначениеЗаполнено(Элемент.Сборка) Тогда
						Если НЕ СоздаватьВстроенныеСборки ИЛИ НЕ Элемент.Библиотека Тогда
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Встроенная сборка создаваться не будет.
								|ИмяКонфигурации:%1
								|БиблиотекаНомерСборки:%2
								|СоздаватьВстроенныеСборки:%3
								|ЭтоБиблиотека:%4'"),
								БиблиотекаИмяКонфигурации, БиблиотекаНомерСборки, СоздаватьВстроенныеСборки, Элемент.Библиотека);
							ЗаписьЖурналаРегистрации("CreateAssemblyPOST",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
							Продолжить;
						КонецЕсли;
						
						ВерсияБиблиотеки = НайтиВерсию(БиблиотекаИмяКонфигурации, 
													   НомерВерсииИзНомераСборки(БиблиотекаНомерСборки));
						Если ВерсияБиблиотеки = Неопределено Тогда
							ТекстСообщения = СтрШаблон(НСтр("ru = 'Не найдена версия библиотеки: %1, %2'"), БиблиотекаИмяКонфигурации, БиблиотекаНомерСборки);
							ЗаписьЖурналаРегистрации("CreateAssemblyPOST",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
							Продолжить;
						КонецЕсли;
						РеквизитыВерсииБиблиотеки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияБиблиотеки, "Ветка");
						
						НоваяВстрСборка 						= Справочники.СборкиВерсии.СоздатьЭлемент();
						НоваяВстрСборка.ПубликуемыйНомерСборки 	= БиблиотекаНомерСборки;
						НоваяВстрСборка.Код						= БиблиотекаНомерСборки;
						НоваяВстрСборка.Владелец				= ВерсияБиблиотеки;
						НоваяВстрСборка.Ветка                   = РеквизитыВерсииБиблиотеки.Ветка;
						НоваяВстрСборка.ДатаСборки				= ТекущаяДата();
						НоваяВстрСборка.Статус					= ?(Элемент.Библиотека, 
																	Перечисления.СтатусыСборокВерсииПроекта.НеДляВстраивания, 
																	Перечисления.СтатусыСборокВерсииПроекта.Тестовая);						
						НоваяВстрСборка.Записать();

						ТекстСообщения = СтрШаблон(НСтр("ru = 'Создана новая сборка версии: %1, %2'"), БиблиотекаИмяКонфигурации, БиблиотекаНомерСборки);
						ЗаписьЖурналаРегистрации("CreateAssemblyPOST",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
													
						Элемент.Сборка = НоваяВстрСборка.Ссылка;
						СозданныеБиблиотечныеСборки.Добавить(ПолучитьНавигационнуюСсылку(Элемент.Сборка));
					КонецЕсли;
					
					НоваяСтрока = НоваяСборка.СборкиВключаемыхПроектов.Добавить();
					НоваяСтрока.Сборка = Элемент.Сборка;
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Добавлена встроенная сборка: %1, %2'"), БиблиотекаИмяКонфигурации, БиблиотекаНомерСборки);
					ЗаписьЖурналаРегистрации("CreateAssemblyPOST",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
					
				КонецЦикла;
				НоваяСборка.Записать();
			КонецЕсли;
			Сборка = НоваяСборка.Ссылка;
			СборкаСоздана = Истина;
		Иначе 
			СборкаСоздана = Ложь;
		КонецЕсли;
		
		КодСостояния = 200;
		ДанныеОтвета.Вставить("assembly", ПолучитьНавигационнуюСсылку(Сборка));
		ДанныеОтвета.Вставить("assembly_was_created", СборкаСоздана);
		ДанныеОтвета.Вставить("created_library_assembly", СозданныеБиблиотечныеСборки);
		
	Исключение
		
		КодСостояния = 404;
		ДанныеОтвета.Вставить("error", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		
	КонецПопытки;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеОтвета);
	
	Ответ = Новый HTTPСервисОтвет(КодСостояния);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=UTF-8");
	СтрокаОтвет = ЗаписьJSON.Закрыть();
	Ответ.УстановитьТелоИзСтроки(СтрокаОтвет);
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Ответ на запрос создания сборки:%1'"), Символы.ПС + СтрокаОтвет);
	ЗаписьЖурналаРегистрации("CreateAssemblyPOST",УровеньЖурналаРегистрации.Информация,,,ТекстСообщения);
	
	Возврат Ответ;

КонецФункции

#КонецОбласти

#Область СлужебыеПроцедурыИФункции

Функция НомерВерсииИзНомераСборки(НомерСборки)
	Версия = Неопределено;
	КомпонентыСборки = СтрРазделить(НомерСборки, ".");
	Если КомпонентыСборки.Количество() >= 3 Тогда
		Версия = СтрШаблон("%1.%2.%3", КомпонентыСборки[0], КомпонентыСборки[1], КомпонентыСборки[2]);
	КонецЕсли;
	Возврат Версия;
КонецФункции

Функция НайтиВерсию(ИмяКонфигурации, НомерВерсии)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВерсииПроекта.Ссылка КАК Ссылка,
		|	ВерсииПроекта.Код КАК Код
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|ГДЕ
		|	ПОДСТРОКА(ВерсииПроекта.Владелец.ИмяКонфигурации, 1, 1000) = &ИмяКонфигурации
		|	И (ВерсииПроекта.Код = &НомерВерсии
		|			ИЛИ ВерсииПроекта.ПубликуемыйНомерВерсии = &НомерВерсии)";
		
	Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
	Запрос.УстановитьПараметр("НомерВерсии", НомерВерсии);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция НайтиСборку(ИмяКонфигурации, НомерСборки)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СборкиВерсии.Ссылка КАК Ссылка,
	|	СборкиВерсии.Код КАК Код
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	ПОДСТРОКА(СборкиВерсии.Владелец.Владелец.ИмяКонфигурации, 1, 1000) = &ИмяКонфигурации
	|	И СборкиВерсии.Код = &НомерСборки";
	
	Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
	Запрос.УстановитьПараметр("НомерСборки", НомерСборки);
	Сборки = Запрос.Выполнить().Выгрузить();
	Если Сборки.Количество() > 0 Тогда
		Возврат Сборки[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВстраиваемыеСборки(СборкиВстроенныхБиблиотек, Проект)
	ВстроенныеСборки = Новый ТаблицаЗначений;
	
	КвалификаторыСтроки = Новый КвалификаторыСтроки(255);
	ВстроенныеСборки.Колонки.Добавить("НомерСборки", Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки));
	ВстроенныеСборки.Колонки.Добавить("ИмяКонфигурации", Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки));

	Для Каждого Элем Из СборкиВстроенныхБиблиотек Цикл
		НоваяСтрока = ВстроенныеСборки.Добавить();
		НоваяСтрока.НомерСборки = Элем.НомерСборки;
		НоваяСтрока.ИмяКонфигурации = Элем.ИмяКонфигурации;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВстроенныеСборки.НомерСборки КАК НомерСборки,
	|	ПОДСТРОКА(ВстроенныеСборки.ИмяКонфигурации, 1, 1000) КАК ИмяКонфигурации
	|ПОМЕСТИТЬ ВстроенныеСборки
	|ИЗ
	|	&ВстроенныеСборки КАК ВстроенныеСборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВключаемыеПроекты.Проект КАК Проект,
	|	ВключаемыеПроекты.Проект.Библиотека КАК Библиотека,
	|	ПОДСТРОКА(ВключаемыеПроекты.Проект.ИмяКонфигурации, 1, 1000) КАК ИмяКонфигурации
	|ПОМЕСТИТЬ ВключаемыеПроекты
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ВключаемыеПроекты
	|ГДЕ
	|	ВключаемыеПроекты.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВключаемыеПроекты.Проект КАК Проект,
	|	ВстроенныеСборки.ИмяКонфигурации КАК ИмяКонфигурации,
	|	ВключаемыеПроекты.Библиотека КАК Библиотека,
	|	МАКСИМУМ(ВстроенныеСборки.НомерСборки) КАК НомерСборки,
	|	МАКСИМУМ(СборкиВерсии.Ссылка) КАК Сборка
	|ИЗ
	|	ВстроенныеСборки КАК ВстроенныеСборки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВключаемыеПроекты КАК ВключаемыеПроекты
	|		ПО (ВключаемыеПроекты.ИмяКонфигурации = ВстроенныеСборки.ИмяКонфигурации)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО (ВключаемыеПроекты.Проект = СборкиВерсии.Ссылка.Владелец.Владелец)
	|			И ВстроенныеСборки.НомерСборки = СборкиВерсии.Ссылка.Код
	|
	|СГРУППИРОВАТЬ ПО
	|	ВключаемыеПроекты.Проект,
	|	ВключаемыеПроекты.Библиотека,
	|	ВстроенныеСборки.ИмяКонфигурации";

	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ВстроенныеСборки", ВстроенныеСборки);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

#КонецОбласти

