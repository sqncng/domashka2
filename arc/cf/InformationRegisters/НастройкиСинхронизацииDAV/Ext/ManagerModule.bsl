#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает структру с ключами, соответствующими ресурсам регистра сведений НастройкиСинхронизацииDAV.
//
// Возвращаемое значение:
//  Структура - Ключи соответствуют ресурсам регистра НастройкиСинхронизацииDAV.
//   * Сервер            - Строка - Сервер.
//   * ИмяПользователя   - Строка - Имя пользователя.
//   * Пароль            - Строка - Пароль.
//   * КаталогКалендарей - Строка - Каталог календарей.
//
Функция НовыеДанныеАвторизации() Экспорт
	
	ДанныеАвторизации = Новый Структура;
	ДанныеАвторизации.Вставить("Сервер", 			"");
	ДанныеАвторизации.Вставить("ИмяПользователя", 	"");
	ДанныеАвторизации.Вставить("Пароль", 			"");
	ДанныеАвторизации.Вставить("КаталогКалендарей", "");
	
	Возврат ДанныеАвторизации;
	
КонецФункции

// Возвращает данные, записанные в регистре сведений НастройкиСинхронизацииDAV.
//
// Параметры:
//  Узел - ПланОбменаСсылка.СинхронизацияКалендарей - Узел пользователя, для которого требуется доступ.
//
// Возвращаемое значение:
//  Структура - Ключи соответствуют ресурсам регистра НастройкиСинхронизацииDAV.
//   * Сервер            - Строка - Сервер.
//   * ИмяПользователя   - Строка - Имя пользователя.
//   * Пароль            - Строка - Пароль.
//   * КаталогКалендарей - Строка - Каталог календарей.
//
Функция ДанныеАвторизации(Узел) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСинхронизацииDAV.Узел.Пользователь КАК Пользователь,
	|	НастройкиСинхронизацииDAV.Сервер КАК Сервер,
	|	НастройкиСинхронизацииDAV.ИмяПользователя КАК ИмяПользователя,
	|	НастройкиСинхронизацииDAV.КаталогКалендарей КАК КаталогКалендарей
	|ИЗ
	|	РегистрСведений.НастройкиСинхронизацииDAV КАК НастройкиСинхронизацииDAV
	|ГДЕ
	|	НастройкиСинхронизацииDAV.Узел = &Узел");
	Запрос.УстановитьПараметр("Узел", Узел);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Для Каждого Поле Из РезультатЗапроса.Колонки Цикл
			Результат.Вставить(Поле.Имя, Выборка[Поле.Имя]);
		КонецЦикла;
		Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Узел, "Пароль");
		Результат.Вставить("Пароль", Пароль);
	КонецЕсли;
	Возврат Результат;

КонецФункции

// Записывает данные авторизации в регистр сведений НастройкиСинхронизацииDAV.
//
// Параметры:
//  Узел   - ПланОбменаСсылка.СинхронизацияКалендарей - Узел пользователя, для которого записываются данные.
//  Данные - Структура                                - Данные авторизации.
//   * Сервер            - Строка - Сервер.
//   * ИмяПользователя   - Строка - Имя пользователя.
//   * Пароль            - Строка - Пароль.
//   * КаталогКалендарей - Строка - Каталог календарей.
//
Процедура ЗаписатьДанныеАвторизации(Узел, Данные) Экспорт

	Если НЕ ЗначениеЗаполнено(Данные.ИмяПользователя) Тогда
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Данные);
	МенеджерЗаписи.Узел = Узел;
	МенеджерЗаписи.Записать();
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Узел, Данные.Пароль, "Пароль");

КонецПроцедуры

// Удаляет данные авторизации в регистре сведений НастройкиСинхронизацииDAV.
//
// Параметры:
//  Узел   - ПланОбменаСсылка.СинхронизацияКалендарей - Узел пользователя, для которого удаляются данные.
//
Процедура УдалитьДанныеАвторизации(Узел) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Узел = Узел;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Узел, "Пароль");

КонецПроцедуры

#КонецОбласти

#КонецЕсли