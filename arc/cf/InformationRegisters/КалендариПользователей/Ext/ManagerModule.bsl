#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс	

Функция ЗамещающиеЗаписиЭлемента(ИдентификаторЗаписи) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторПовторения,
	|	КалендариПользователей.Название КАК Название,
	|	КалендариПользователей.Описание КАК Описание,
	|	КалендариПользователей.Задача КАК Задача,
	|	КалендариПользователей.Ошибка КАК Ошибка,
	|	КалендариПользователей.ТехническийПроект КАК ТехническийПроект,
	|	КалендариПользователей.Начало КАК Начало,
	|	КалендариПользователей.Окончание КАК Окончание,
	|	КалендариПользователей.ВидДеятельности КАК ВидДеятельности,
	|	КалендариПользователей.Расписание КАК Расписание,
	|	КалендариПользователей.ДатаЗамещения КАК ДатаЗамещения,
	|	КалендариПользователей.Повторяется КАК Повторяется,
	|	КалендариПользователей.ОкончаниеПовторения КАК ОкончаниеПовторения,
	|	КалендариПользователей.Удаленный КАК Удаленный
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	КалендариПользователей.ИдентификаторПовторения = &ИдентификаторЗаписи"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УдалитьЗаписиПоИдентификаторам(Пользователь, ИдентификаторыЗаписей) Экспорт
	
	Для Каждого ИдентификаторЗаписи из ИдентификаторыЗаписей Цикл
		НаборЗаписей = РегистрыСведений.КалендариПользователей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина);
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(ИдентификаторЗаписи, Истина);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьОтметкуОбУдалении(ДанныеУдаленныхЗамещающихЭлементов) ЭКспорт
	
	Для Каждого ДанныеЗаписи из ДанныеУдаленныхЗамещающихЭлементов Цикл
		
		МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.Пользователь = ДанныеЗаписи.Пользователь;
		МенеджерЗаписи.ИдентификаторЗаписи = Данныезаписи.ИдентификаторЗаписи;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удаленный = Истина;
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтвязатьЗамещающиеУдалитьПовторяемые(Пользователь, ОбрабатываемыеДанные) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторПовторения,
	|	КалендариПользователей.Название КАК Название,
	|	КалендариПользователей.Описание КАК Описание,
	|	КалендариПользователей.Задача КАК Задача,
	|	КалендариПользователей.Ошибка КАК Ошибка,
	|	КалендариПользователей.ТехническийПроект КАК ТехническийПроект,
	|	КалендариПользователей.Начало КАК Начало,
	|	КалендариПользователей.Окончание КАК Окончание,
	|	КалендариПользователей.ВидДеятельности КАК ВидДеятельности,
	|	КалендариПользователей.Расписание КАК Расписание,
	|	КалендариПользователей.ДатаЗамещения КАК ДатаЗамещения,
	|	КалендариПользователей.Повторяется КАК Повторяется,
	|	КалендариПользователей.ОкончаниеПовторения КАК ОкончаниеПовторения,
	|	КалендариПользователей.Удаленный КАК Удаленный
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|   КалендариПользователей.Пользователь = &Пользователь
	|	И КалендариПользователей.ИдентификаторПовторения В(&ИдентификаторыЗаписей)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторыЗаписей", ОбрабатываемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеЗамещающихЭлементов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Удаленный Тогда
			// Удаленные замещающие элементы нужно удалить вместе с оригинальной записью
			Если ОбрабатываемыеДанные.Найти(Выборка.ИдентификаторЗаписи) = Неопределено Тогда
				ОбрабатываемыеДанные.Добавить(Выборка.ИдентификаторЗаписи);
			КонецЕсли;
		Иначе
			ДанныеЗамещающегоЭлемента = Новый Структура;
			
			ДанныеЗамещающегоЭлемента.Вставить("Пользователь",Выборка.Пользователь);
			ДанныеЗамещающегоЭлемента.Вставить("ИдентификаторЗаписи",Выборка.ИдентификаторЗаписи);
			ДанныеЗамещающегоЭлемента.Вставить("Название",Выборка.Название);
			ДанныеЗамещающегоЭлемента.Вставить("Описание",Выборка.Описание);
			ДанныеЗамещающегоЭлемента.Вставить("Задача",Выборка.Задача);
			ДанныеЗамещающегоЭлемента.Вставить("Ошибка",Выборка.Ошибка);
			ДанныеЗамещающегоЭлемента.Вставить("ТехническийПроект",Выборка.ТехническийПроект);
			ДанныеЗамещающегоЭлемента.Вставить("Начало",Выборка.Начало);
			ДанныеЗамещающегоЭлемента.Вставить("Окончание",Выборка.Окончание);
			ДанныеЗамещающегоЭлемента.Вставить("ВидДеятельности",Выборка.ВидДеятельности);
			
			ДанныеЗамещающихЭлементов.Добавить(ДанныеЗамещающегоЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
	// Все исходные данные удаляются
	УдалитьЗаписиПоИдентификаторам(Пользователь, ОбрабатываемыеДанные);
	
	// Замещающие элементы без признака "Удаленный" теряют связь с исходной записью
	// и остаются в виде независимых элементов
	Для Каждого ДанныеЗамещающегоЭлемента из ДанныеЗамещающихЭлементов Цикл
																  
		МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗамещающегоЭлемента);
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаписиЗамещающихЭлементов(ОбрабатываемыеДанные, ПометкаУдаления) Экспорт
	
	Для Каждого ЭлементДанных из ОбрабатываемыеДанные Цикл
		
		ДанныеЗаписей = ЭлементДанных.Значение;
		
		Для Каждого ДанныеЗаписи из ДанныеЗаписей Цикл
			
			МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи,,"Расписание,Повторяется,ОкончаниеПовторения");
			
			МенеджерЗаписи.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
			МенеджерЗаписи.ИдентификаторПовторения = ДанныеЗаписи.ИдентификаторЗаписи;
			МенеджерЗаписи.Удаленный = ПометкаУдаления;
			
			МенеджерЗаписи.Записать();
			
			// Регистрируются изменения исходной записи для отражения замещений
			СинхронизацияКалендарей.ЗарегистрироватьИзмененияЗаписи(ДанныеЗаписи.Пользователь,
			                                                        ДанныеЗаписи.ИдентификаторЗаписи);
																		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьИсходнуюЗаписьИДатыЗамещающих(ДанныеДляОбновленияИсходнойИЗамещающихЗаписей) Экспорт
	
	ИдентификаторыЗаписей = Новый Массив;
	
	Для Каждого ЭлементДанных из ДанныеДляОбновленияИсходнойИЗамещающихЗаписей Цикл
		ИдентификаторыЗаписей.Добавить(ЭлементДанных.Ключ);
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторПовторения,
	|	КалендариПользователей.Название КАК Название,
	|	КалендариПользователей.Описание КАК Описание,
	|	КалендариПользователей.Задача КАК Задача,
	|	КалендариПользователей.Ошибка КАК Ошибка,
	|	КалендариПользователей.ТехническийПроект КАК ТехническийПроект,
	|	КалендариПользователей.Начало КАК Начало,
	|	КалендариПользователей.Окончание КАК Окончание,
	|	КалендариПользователей.ВидДеятельности КАК ВидДеятельности,
	|	КалендариПользователей.Расписание КАК Расписание,
	|	КалендариПользователей.ДатаЗамещения КАК ДатаЗамещения,
	|	КалендариПользователей.Повторяется КАК Повторяется,
	|	КалендариПользователей.ОкончаниеПовторения КАК ОкончаниеПовторения,
	|	КалендариПользователей.Удаленный КАК Удаленный
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	(КалендариПользователей.ИдентификаторЗаписи В (&ИдентификаторыЗаписей)
	|			ИЛИ КалендариПользователей.ИдентификаторПовторения В (&ИдентификаторыЗаписей))"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторыЗаписей", ИдентификаторыЗаписей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ИдентификаторПовторения) Тогда
			ДанныеЗаписи = ДанныеДляОбновленияИсходнойИЗамещающихЗаписей.Получить(Выборка.ИдентификаторПовторения);
		Иначе
			ДанныеЗаписи = ДанныеДляОбновленияИсходнойИЗамещающихЗаписей.Получить(Выборка.ИдентификаторЗаписи);
		КОнецЕсли;
		
		Если ДанныеЗаписи <> Неопределено Тогда
			
			МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, "Пользователь,ИдентификаторЗаписи");
			
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				
				ДлительностьОтНачалаДня = ДанныеЗаписи.Начало - НачалоДня(ДанныеЗаписи.Начало);
				Длительность = ДанныеЗаписи.Окончание - ДанныеЗаписи.Начало;
					
				Если ЗначениеЗаполнено(Выборка.ИдентификаторПовторения) Тогда
					// Для замещающих записей корректируется дата замещения с учетом изменения времени
					МенеджерЗаписи.ДатаЗамещения = НачалоДня(МенеджерЗаписи.ДатаЗамещения) + ДлительностьОтНачалаДня;
				Иначе
					// Для оригинальной записи корректируется начало и окончание с учетом изменений
					МенеджерЗаписи.Начало = НачалоДня(МенеджерЗаписи.Начало) + ДлительностьОтНачалаДня;
					МенеджерЗаписи.Окончание = МенеджерЗаписи.Начало + Длительность;
				КонецЕсли;
				
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеКалендаряДляУчетаВремени(Пользователь, Дата) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторПовторения,
	|	КалендариПользователей.Название КАК Название,
	|	КалендариПользователей.Задача КАК Задача,
	|	КалендариПользователей.Ошибка КАК Ошибка,
	|	КалендариПользователей.Ошибка.ВеткаОбнаружения КАК ВеткаОбнаруженияОшибки,
	|	КалендариПользователей.Ошибка.МетодВыявленияОшибки КАК МетодВыявленияОшибки,
	|	КалендариПользователей.Ошибка.Владелец КАК Проект,
	|	КалендариПользователей.ТехническийПроект КАК ТехническийПроект,
	|	КалендариПользователей.ТехническийПроект.Владелец КАК ПроектТехническогоПроекта,
	|	КалендариПользователей.Начало КАК Начало,
	|	КалендариПользователей.Окончание КАК Окончание,
	|	КалендариПользователей.ВидДеятельности КАК ВидДеятельности,
	|	КалендариПользователей.Расписание КАК Расписание,
	|	КалендариПользователей.ДатаЗамещения КАК ДатаЗамещения,
	|	КалендариПользователей.Повторяется КАК Повторяется,
	|	КалендариПользователей.ОкончаниеПовторения КАК ОкончаниеПовторения,
	|	КалендариПользователей.Удаленный КАК Удаленный,
	|	ВЫБОР
	|		КОГДА КалендариПользователей.ИдентификаторПовторения <> &ПустойИдентификатор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Замещает
	|ПОМЕСТИТЬ ВТДанныеКалендаря
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	КалендариПользователей.Пользователь = &Пользователь
	|	И (КалендариПользователей.ИдентификаторПовторения = &ПустойИдентификатор
	|			ИЛИ НАЧАЛОПЕРИОДА(КалендариПользователей.ДатаЗамещения, ДЕНЬ) = &НачалоПериода)
	|	И (КалендариПользователей.Начало >= &НачалоПериода
	|				И КалендариПользователей.Начало <= &ОкончаниеПериода
	|			ИЛИ КалендариПользователей.Окончание >= &НачалоПериода
	|				И КалендариПользователей.Окончание <= &ОкончаниеПериода
	|			ИЛИ КалендариПользователей.Начало <= &ОкончаниеПериода
	|				И КалендариПользователей.Повторяется
	|				И (КалендариПользователей.ОкончаниеПовторения >= &НачалоПериода
	|					ИЛИ КалендариПользователей.ОкончаниеПовторения = ДАТАВРЕМЯ(1, 1, 1)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Ссылка КАК ТехническийПроект,
	|	ТехническиеПроекты.Статус КАК Статус,
	|	ДанныеКалендаря.Ошибка КАК Ошибка
	|ПОМЕСТИТЬ ВТТехническиеПроекты
	|ИЗ
	|	ВТДанныеКалендаря КАК ДанныеКалендаря
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО (ДанныеКалендаря.Ошибка <> ЗНАЧЕНИЕ(Справочник.Ошибки.ПустаяСсылка))
	|			И (ДанныеКалендаря.ВеткаОбнаруженияОшибки <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка))
	|			И ДанныеКалендаря.ВеткаОбнаруженияОшибки = ТехническиеПроекты.Ветка
	|			И (ТехническиеПроекты.Ветка.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта))
	|			И (НЕ ТехническиеПроекты.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТДанныеКалендаря.Пользователь КАК Пользователь,
	|	ВТДанныеКалендаря.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ВТДанныеКалендаря.ИдентификаторПовторения КАК ИдентификаторПовторения,
	|	ВТДанныеКалендаря.Название КАК ОписаниеРаботы,
	|	ВТДанныеКалендаря.Задача КАК Задача,
	|	ВТДанныеКалендаря.Ошибка КАК Ошибка,
	|	ВТДанныеКалендаря.ТехническийПроект КАК ТехническийПроект,
	|	ВТДанныеКалендаря.Проект КАК Проект,
	|	ВТДанныеКалендаря.ПроектТехническогоПроекта КАК ПроектТехническогоПроекта,
	|	ВТДанныеКалендаря.МетодВыявленияОшибки КАК МетодВыявленияОшибки,
	|	ВТДанныеКалендаря.Начало КАК Начало,
	|	ВТДанныеКалендаря.Окончание КАК Окончание,
	|	ВТДанныеКалендаря.ВидДеятельности КАК ВидДеятельности,
	|	ВТДанныеКалендаря.Расписание КАК Расписание,
	|	ВТДанныеКалендаря.ДатаЗамещения КАК ДатаЗамещения,
	|	ВТДанныеКалендаря.Повторяется КАК Повторяется,
	|	ВТДанныеКалендаря.ОкончаниеПовторения КАК ОкончаниеПовторения,
	|	ВТДанныеКалендаря.Удаленный КАК Удаленный,
	|	ВТДанныеКалендаря.Замещает КАК Замещает,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|			ТОГДА ЗадачиПроцесса.Предмет
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)
	|	КОНЕЦ КАК ТехническийПроектПредметЗадачи,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ОбъектыМетаданных
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.Ошибки
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ПрофилиПользователей
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.Процессы
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииСистемы
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец
	|	КОНЕЦ КАК ПроектЗадачи,
	|	ЗадачиПроцесса.ВидДеятельности КАК ВидДеятельностиПоЗадаче
	|ИЗ
	|	ВТДанныеКалендаря КАК ВТДанныеКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ВТДанныеКалендаря.Задача <> ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка))
	|			И ВТДанныеКалендаря.Задача = ЗадачиПроцесса.Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(Дата));
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Запрос.УстановитьПараметр("ПустойИдентификатор", ПустойИдентификатор);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеКалендаря = Запрос.Выполнить().Выгрузить();
	
	ВТТехническиеПроекты = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТТехническиеПроекты"].ПолучитьДанные().Выгрузить();
	
	ИсключитьИгнорируемыеСтроки(ДанныеКалендаря, Дата);
	
	Для Каждого СтрокаТаблицы из ДанныеКалендаря Цикл
		
		НачалоДняСобытия = НачалоДня(СтрокаТаблицы.Начало);
		Длительность = НачалоМинуты(СтрокаТаблицы.Начало) - НачалоДняСобытия;
		СтрокаТаблицы.Начало = '00010101' + Длительность;
		
		ОкончаниеДняСобытия = НачалоДня(СтрокаТаблицы.Окончание);
		Длительность = НачалоМинуты(СтрокаТаблицы.Окончание) - ОкончаниеДняСобытия;
		СтрокаТаблицы.Окончание = '00010101' + Длительность;
		
		// Определение технического проекта для задач
		Если ЗначениеЗаполнено(СтрокаТаблицы.ТехническийПроектПредметЗадачи)
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ТехническийПроект) Тогда
			СтрокаТаблицы.ТехническийПроект = СтрокаТаблицы.ТехническийПроектПредметЗадачи;
		КонецЕсли;
			
		// Определение технического проекта для ошибок
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Ошибка) И Не ЗначениеЗаполнено(СтрокаТаблицы.ТехническийПроект) Тогда
			
			СтруктураОтбора = Новый Структура("Ошибка", СтрокаТаблицы.Ошибка);
			
			СтрокиТехническихПроектов = ВТТехническиеПроекты.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиТехническихПроектов.Количество()=1  Тогда
				СтрокаТаблицы.ТехническийПроект = СтрокиТехническихПроектов[0].ТехническийПроект;
				Продолжить;
			КонецЕсли;
			
			ТехническийПроект = Справочники.ТехническиеПроекты.ПустаяСсылка();
			КоличествоАктивныхТехническихПроектов = 0;
			
			Для Каждого СтрокаТехническогоПроекта из СтрокиТехническихПроектов Цикл
				Если СтрокаТехническогоПроекта.Статус = Перечисления.СтатусыТехническихПроектов.Активен Тогда
					ТехническийПроект = СтрокаТехническогоПроекта.ТехническийПроект;
					КоличествоАктивныхТехническихПроектов = КоличествоАктивныхТехническихПроектов + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоАктивныхТехническихПроектов = 1 Тогда
				СтрокаТаблицы.ТехническийПроект = ТехническийПроект;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Проект) И ЗначениеЗаполнено(СтрокаТаблицы.ПроектЗадачи) Тогда
			СтрокаТаблицы.Проект = СтрокаТаблицы.ПроектЗадачи;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Проект) И ЗначениеЗаполнено(СтрокаТаблицы.ПроектТехническогоПроекта) Тогда
			СтрокаТаблицы.Проект = СтрокаТаблицы.ПроектТехническогоПроекта;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеКалендаря.Сортировать("Начало,Окончание");
	
	Возврат ДанныеКалендаря;
	
КонецФункции

Функция СобытиеПовторяетсяНаДату(РасписаниеСобытия, НачалоСобытия, ОкончаниеСобытия, Дата) Экспорт
	
	Результат = Ложь;
	
	НачалоДня = НачалоДня(Дата);
		
	Если НачалоДня = НачалоДня(НачалоСобытия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Дата > '20500101' Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(РасписаниеСобытия) <> Тип("РасписаниеЭлементаПланировщика") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасписаниеСобытия.ДатаКонца) И РасписаниеСобытия.ДатаКонца < Дата
		ИЛИ Дата < НачалоСобытия Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекДата = НачалоСобытия;
	СчетчикНедель = 0;
	СчетчикМесяцев = 0;
	СчетчикЛет = 0;
	
	ВыполненоПовторов = 1;
	
	Пока ТекДата < Дата Цикл
		
		ДатаДоПриращения = ТекДата;
		
		Если РасписаниеСобытия.ПериодПовтораДней>0 Тогда
			// Если задан повтор дней
			ТекДата = ТекДата + РасписаниеСобытия.ПериодПовтораДней*86400;
		ИначеЕсли РасписаниеСобытия.ПериодНедель>0 Тогда
			// Если задан повтор недель, но нет повтора дней, выполняется приращение недель
			ТекДата = ТекДата + РасписаниеСобытия.ПериодНедель*604800;
		ИначеЕсли РасписаниеСобытия.ПериодМесяцев>0 Тогда
			// Если задан повтор месяцев, но нет повтора дней и недель, выполняется приращение месяцев
			ТекДата = ДобавитьМесяц(ТекДата,РасписаниеСобытия.ПериодМесяцев);
		ИначеЕсли РасписаниеСобытия.ПериодЛет>0 Тогда
			// Если задан повтор лет, но нет повтора дней, недель и месяцев, выполняется приращение лет
			ТекДата = ДобавитьМесяц(ТекДата,РасписаниеСобытия.ПериодЛет*12);
		Иначе
			// Если повтора нет.
			Возврат Ложь;
		КонецЕсли;
		
		Приращение = ТекДата - ДатаДоПриращения;
		СчетчикНедель = СчетчикНедель + (НачалоНедели(ТекДата) - НачалоНедели(ДатаДоПриращения))/604800;
		СчетчикМесяцев = СчетчикМесяцев + КоличествоМесяцев(ДатаДоПриращения, ТекДата);
		СчетчикЛет = СчетчикЛет + Год(ТекДата) - Год(ДатаДоПриращения);
		
		ДатаПодходитДляПовтора = ПриращениеПокрываетИнтервалПовторения(Приращение, СчетчикНедель, СчетчикМесяцев, СчетчикЛет, ДатаДоПриращения, РасписаниеСобытия)
		                         И ДатаСоответствуетРасписаниюПоДнямНедели(ТекДата, РасписаниеСобытия)
								 И ДатаСоответствуетРасписаниюПоМесяцамГода(ТекДата, РасписаниеСобытия)
								 И ДатаСоответствуетРасписаниюПоДнямМесяца(ТекДата, РасписаниеСобытия)
								 И ДатаСоответствуетРасписаниюПоДнюНеделиВМесяце(ТекДата, РасписаниеСобытия);
								 
		Если ДатаПодходитДляПовтора Тогда
			ВыполненоПовторов = ВыполненоПовторов + 1;
			СчетчикНедель = 0;
			СчетчикМесяцев = 0;
			СчетчикЛет = 0;
		КонецЕсли;
		
		Если НачалоДня(ТекДата) = НачалоДня И ДатаПодходитДляПовтора Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если РасписаниеСобытия.КоличествоПовторов>0 И ВыполненоПовторов >= РасписаниеСобытия.КоличествоПовторов Тогда
			// Если в расписании задано количество повторов и они уже перебраны, перебор прекращается
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаОкончанияСобытия(РасписаниеСобытия, НачалоСобытия, ОкончаниеСобытия) Экспорт
	
	Если ТипЗнч(РасписаниеСобытия) <> Тип("РасписаниеЭлементаПланировщика") Тогда
		Возврат '00010101';
	КонецЕсли;
	
	ТекДата = НачалоСобытия;
	СчетчикНедель = 0;
	СчетчикМесяцев = 0;
	СчетчикЛет = 0;
	
	ТекДатаОкончания = ТекДата;
	
	ВыполненоПовторов = 1;
	
	Пока ТекДата < '20500101'
		И (ТекДата < РасписаниеСобытия.ДатаКонца ИЛИ РасписаниеСобытия.ДатаКонца = '00010101') 
		И (ВыполненоПовторов < РасписаниеСобытия.КоличествоПовторов ИЛИ РасписаниеСобытия.КоличествоПовторов = 0) Цикл
		
		ДатаДоПриращения = ТекДата;
		
		Если РасписаниеСобытия.ПериодПовтораДней>0 Тогда
			// Если задан повтор дней
			ТекДата = ТекДата + РасписаниеСобытия.ПериодПовтораДней*86400;
		ИначеЕсли РасписаниеСобытия.ПериодНедель>0 Тогда
			// Если задан повтор недель, но нет повтора дней, выполняется приращение недель
			ТекДата = ТекДата + РасписаниеСобытия.ПериодНедель*604800;
		ИначеЕсли РасписаниеСобытия.ПериодМесяцев>0 Тогда
			// Если задан повтор месяцев, но нет повтора дней и недель, выполняется приращение месяцев
			ТекДата = ДобавитьМесяц(ТекДата,РасписаниеСобытия.ПериодМесяцев);
		ИначеЕсли РасписаниеСобытия.ПериодЛет>0 Тогда
			// Если задан повтор лет, но нет повтора дней, недель и месяцев, выполняется приращение лет
			ТекДата = ДобавитьМесяц(ТекДата,РасписаниеСобытия.ПериодЛет*12);
		Иначе
			// Если повтора нет.
			Прервать;
		КонецЕсли;
		
		Приращение = ТекДата - ДатаДоПриращения;
		СчетчикНедель = СчетчикНедель + (НачалоНедели(ТекДата) - НачалоНедели(ДатаДоПриращения))/604800;
		СчетчикМесяцев = СчетчикМесяцев + КоличествоМесяцев(ДатаДоПриращения, ТекДата);
		СчетчикЛет = СчетчикЛет + Год(ТекДата) - Год(ДатаДоПриращения);
		
		ДатаПодходитДляПовтора = ПриращениеПокрываетИнтервалПовторения(Приращение, СчетчикНедель, СчетчикМесяцев, СчетчикЛет, ДатаДоПриращения, РасписаниеСобытия)
		                         И ДатаСоответствуетРасписаниюПоДнямНедели(ТекДата, РасписаниеСобытия)
								 И ДатаСоответствуетРасписаниюПоМесяцамГода(ТекДата, РасписаниеСобытия)
								 И ДатаСоответствуетРасписаниюПоДнямМесяца(ТекДата, РасписаниеСобытия)
								 И ДатаСоответствуетРасписаниюПоДнюНеделиВМесяце(ТекДата, РасписаниеСобытия);
								 
		Если ДатаПодходитДляПовтора Тогда
									 
			ВыполненоПовторов = ВыполненоПовторов + 1;
			СчетчикНедель = 0;
			СчетчикМесяцев = 0;
			СчетчикЛет = 0;
			
			Если ТекДата <= РасписаниеСобытия.ДатаКонца ИЛИ РасписаниеСобытия.ДатаКонца = '00010101' Тогда
				ТекДатаОкончания = ТекДата;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполненоПовторов < РасписаниеСобытия.КоличествоПовторов
		ИЛИ РасписаниеСобытия.КоличествоПовторов = 0 Тогда
		Возврат РасписаниеСобытия.ДатаКонца;
	КонецЕсли;
	
	ДлительностьСобытия = ОкончаниеСобытия - НачалоСобытия;
	ТекДатаОкончания = ТекДатаОкончания + ДлительностьСобытия;
	
	Если РасписаниеСобытия.ДатаКонца <> '00010101' И ТекДатаОкончания > РасписаниеСобытия.ДатаКонца Тогда
		ТекДатаОкончания = РасписаниеСобытия.ДатаКонца;
	КонецЕсли;
	
	Возврат ТекДатаОкончания;
	
КонецФункции

Процедура ЗанестиРаботуВКалендарь(Пользователь, Работа, Начало, Окончание, ОписаниеРаботы="", СокращатьПустыеИнтервалы=Ложь) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.ИдентификаторЗаписи = Новый УникальныйИдентификатор();
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		МенеджерЗаписи.Задача = Работа;
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.Ошибки") Тогда
		МенеджерЗаписи.Ошибка = Работа;
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		МенеджерЗаписи.ТехническийПроект = Работа;
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
		МенеджерЗаписи.ВидДеятельности = Работа;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеРаботы) Тогда
		МенеджерЗаписи.Название = ОписаниеРаботы;
	КонецЕсли;
	
	МенеджерЗаписи.Начало = Начало;
	МенеджерЗаписи.Окончание = Окончание;
	
	МенеджерЗаписи.Записать();
	
	// При необходимости удаляются пустые интервалы между записями
	Если СокращатьПустыеИнтервалы Тогда
		СократитьИнтервалМеждуСобытиями(Пользователь, Начало);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоАвторизованныйПользователь(Пользователь)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныйПроцедурыИФункции	

Функция ПриращениеПокрываетИнтервалПовторения(Приращение, СчетчикНедель, СчетчикМесяцев, СчетчикЛет, ДатаДоПриращения, РасписаниеСобытия)
	
	Результат = Ложь;
	
	ПриращениеПокрываетИнтервалПоДням = (Приращение >= РасписаниеСобытия.ПериодПовтораДней*86400);
	
	ПриращениеПокрываетИнтервалПоНеделям = 
		РасписаниеСобытия.ПериодПовтораДней>0 И СчетчикНедель >= РасписаниеСобытия.ПериодНедель
		ИЛИ РасписаниеСобытия.ПериодПовтораДней=0 И Приращение >= РасписаниеСобытия.ПериодНедель*604800
		ИЛИ РасписаниеСобытия.ПериодНедель=1;
		
	ПриращениеПокрываетИнтервалПоМесяцам = 
	    (РасписаниеСобытия.ПериодПовтораДней>0 ИЛИ РасписаниеСобытия.ПериодНедель>0)
			И СчетчикМесяцев >= РасписаниеСобытия.ПериодМесяцев
	    ИЛИ РасписаниеСобытия.ПериодПовтораДней=0 И РасписаниеСобытия.ПериодНедель=0
		   И Приращение >= ДобавитьМесяц(ДатаДоПриращения, РасписаниеСобытия.ПериодМесяцев)- ДатаДоПриращения
		ИЛИ РасписаниеСобытия.ПериодМесяцев=1;
		
	ПриращениеПокрываетИнтервалПоГодам =
	    (РасписаниеСобытия.ПериодПовтораДней>0 ИЛИ РасписаниеСобытия.ПериодНедель>0 ИЛИ РасписаниеСобытия.ПериодМесяцев>0)
			И СчетчикЛет >= РасписаниеСобытия.ПериодЛет
		ИЛИ РасписаниеСобытия.ПериодПовтораДней=0 И РасписаниеСобытия.ПериодНедель=0 И РасписаниеСобытия.ПериодМесяцев=0
			И Приращение >= ДобавитьМесяц(ДатаДоПриращения, РасписаниеСобытия.ПериодЛет*12)- ДатаДоПриращения
		ИЛИ РасписаниеСобытия.ПериодЛет=1;
		
	Если ПриращениеПокрываетИнтервалПоДням И ПриращениеПокрываетИнтервалПоНеделям
		И ПриращениеПокрываетИнтервалПоМесяцам И ПриращениеПокрываетИнтервалПоГодам Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КоличествоМесяцев(НачальнаяДата, КонечнаяДата)
	
	ГодНачала = Год(НачальнаяДата);
	ГодОкончания = Год(КонечнаяДата);
	
	Лет = ГодОкончания - ГодНачала;
	
	МесяцНачала = Месяц(НачальнаяДата);
	МесяцОкончания = Месяц(КонечнаяДата);
	
	Если ГодНачала = ГодОкончания Тогда
		Результат = МесяцОкончания - МесяцНачала;
	Иначе
		МесяцевГодНачала = 12- МесяцНачала;
		
		Результат = МесяцевГодНачала + МесяцОкончания;
		
		Если Лет > 1 Тогда
			Результат = Результат + (Лет-1)*12;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаСоответствуетРасписаниюПоДнямНедели(Дата, РасписаниеСобытия)
	
	Результат = Ложь;
	 
	Если РасписаниеСобытия.ДниНедели.Найти(ДеньНедели(Дата)) <> Неопределено
		ИЛИ РасписаниеСобытия.ДниНедели.Количество()=0 Тогда
		 Результат = Истина;
	КонецЕсли;
	 
	Возврат Результат;
	
КонецФункции

Функция ДатаСоответствуетРасписаниюПоМесяцамГода(Дата, РасписаниеСобытия)
	
	Результат = Ложь;
	 
	Если РасписаниеСобытия.Месяцы.Найти(Месяц(Дата)) <> Неопределено
		ИЛИ РасписаниеСобытия.Месяцы.Количество()=0 Тогда
		 Результат = Истина;
	КонецЕсли;
	 
	Возврат Результат;
	
КонецФункции

Функция ДатаСоответствуетРасписаниюПоДнямМесяца(Дата, РасписаниеСобытия)
	
	Результат = Ложь;
	
	НомерДня = РасписаниеСобытия.ДеньВМесяце;
	
	Если НомерДня=0 Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если НомерДня<0 Тогда
		// Если задан отрицательный номер- вычитается от последнего дня месяца
		НомерДня = День(КонецМесяца(Дата)) + НомерДня + 1;
	КонецЕсли;
	
	Если День(Дата) = НомерДня Тогда
		Результат = Истина;
	КонецЕсли;
	 
	Возврат Результат;
	
КонецФункции

Функция ДатаСоответствуетРасписаниюПоДнюНеделиВМесяце(Дата, РасписаниеСобытия)
	
	Результат = Ложь;
	
	НомерДня = РасписаниеСобытия.ДеньНеделиВМесяце;
	
	Если НомерДня=0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	НомерДняВНеделеОтНачалаМесяца = Цел((НачалоДня(Дата) - НачалоМесяца(Дата))/604800) + 1;
	НомерДняВНеделеСКонцаМесяца = Цел((КонецМесяца(Дата) - КонецДня(Дата))/604800) + 1;
	
	Если НомерДня > 0 Тогда
		Результат = (НомерДня = НомерДняВНеделеОтНачалаМесяца); 
	Иначе
		Результат = (-НомерДня = НомерДняВНеделеСКонцаМесяца);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИсключитьИгнорируемыеСтроки(ДанныеКалендаря, Дата)
	
	ИсключемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаТаблицы из ДанныеКалендаря Цикл
		
		Если СтрокаТаблицы.Повторяется Тогда
			
			// Для повторяемых событий анализируется, есть ли замещающее событие на нужную дату.
			// Если оно есть - оригинальное событие игнорируется, вместо него используется замещающее
			// Если событие не повторяется на требуемую дату - оно также игнорируется.
			ОтборЗамещающих = Новый Структура;
			ОтборЗамещающих.Вставить("ИдентификаторПовторения", СтрокаТаблицы.ИдентификаторЗаписи);
			ОтборЗамещающих.Вставить("Замещает", Истина);
			ЗамещающиеЗаписи = ДанныеКалендаря.НайтиСтроки(ОтборЗамещающих);
			
			РасписаниеСобытия = СтрокаТаблицы.Расписание.Получить();
			
			Если НЕ СобытиеПовторяетсяНаДату(РасписаниеСобытия, СтрокаТаблицы.Начало, СтрокаТаблицы.Окончание, Дата)
				ИЛИ ЗамещающиеЗаписи.Количество()>0 Тогда
				
				ИсключемыеСтроки.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.Удаленный Тогда
			ИсключемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИсключаемаяСтрока из ИсключемыеСтроки Цикл
		ДанныеКалендаря.Удалить(ИсключаемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура СократитьИнтервалМеждуСобытиями(Пользователь, НачалоСобытия)
	
	ДопустимыйИнтервал = Константы.ДопустимыйИнтервалОкругленияВУчетеВремени.Получить();
	
	СокращатьПустыеИнтервалыМеждуРаботами = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряПользователя",
	                                        "СокращатьПустыеИнтервалыМеждуРаботами",
	                                        Ложь);
											
	Если ДопустимыйИнтервал = 0 ИЛИ НЕ СокращатьПустыеИнтервалыМеждуРаботами Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	КалендариПользователей.Пользователь = &Пользователь
	|	И КалендариПользователей.Окончание >= &НачалоИнтервала
	|	И КалендариПользователей.Окончание < &КонецИнтервала
	|	И НЕ КалендариПользователей.Повторяется
	|	И НЕ КалендариПользователей.Удаленный"
	;
	
	НачалоИнтервала = НачалоСобытия - ДопустимыйИнтервал*60;
	КонецИнтервала = НачалоСобытия;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала", КонецИнтервала);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если записей в интервале более одной, автоматической корректировки не производится
	Если Выборка.Количество()=1 Тогда
		
		Если Выборка.Следующий() Тогда
			
			МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Пользователь = Пользователь;
			МенеджерЗаписи.ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
			
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Окончание = НачалоСобытия;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли