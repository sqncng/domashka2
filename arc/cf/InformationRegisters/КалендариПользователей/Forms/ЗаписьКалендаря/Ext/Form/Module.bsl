#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ВидДеятельностиДляРаботыСОшибками = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	
	ДоступноИзменениеКалендарей = УправлениеДоступом.ЕстьРоль("ИзменениеКалендарейПользователей");
	
	НачалоТекущегоЭлемента = Параметры.НачалоТекущегоЭлемента;
	ОкончаниеТекущегоЭлемента = Параметры.ОкончаниеТекущегоЭлемента;
	
	ДатаЗамещения = Параметры.ДатаЗамещения;
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		Запись.Начало = Параметры.Начало;
		Запись.Окончание = Параметры.Окончание;
		Запись.Пользователь = ТекущийПользователь;
		Запись.ИдентификаторЗаписи = Новый УникальныйИдентификатор();
		Запись.Название = Параметры.Название;
		Запись.Описание = Параметры.Описание;
		Запись.Задача = Параметры.Задача;
		Запись.Ошибка = Параметры.Ошибка;
		Запись.ТехническийПроект = Параметры.ТехническийПроект;
		Запись.ВидДеятельности = Параметры.ВидДеятельности;
	Иначе
		Если Не ЗначениеЗаполнено(ДатаЗамещения) И ЗначениеЗаполнено(Запись.ДатаЗамещения) Тогда
			ДатаЗамещения = Запись.ДатаЗамещения;
			НачалоТекущегоЭлемента = Запись.Начало;
			ОкончаниеТекущегоЭлемента = Запись.Окончание;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Задача) Тогда
		ТипРаботы = 1;
	ИначеЕсли ЗначениеЗаполнено(Запись.Ошибка) Тогда
		ТипРаботы = 2;
	ИначеЕсли ЗначениеЗаполнено(Запись.ТехническийПроект) Тогда
		ТипРаботы = 3;	
	ИначеЕсли ЗначениеЗаполнено(Запись.ВидДеятельности) Тогда
		ТипРаботы = 4;
	Иначе
		ТипРаботы = 0;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДатаЗамещения) И НЕ ЗначениеЗаполнено(Запись.ИдентификаторПовторения) Тогда
		НачалоДляСписка = НачалоТекущегоЭлемента;
		КонецДляСписка = ОкончаниеТекущегоЭлемента
	Иначе
		НачалоДляСписка = Запись.Начало;
		КонецДляСписка = Запись.Окончание;
	КонецЕсли;
	
	СписокВремениНачало =
		ОбщегоНазначенияСППРКлиентСервер.СписокВремени(,НачалоДня(НачалоДляСписка), КонецДня(НачалоДляСписка));
		
	СписокВремениОкончание =
		ОбщегоНазначенияСППРКлиентСервер.СписокВремени(, НачалоДня(КонецДляСписка)+ 3600, КонецДня(КонецДляСписка));
	
	ЗаполнитьСписокВремени(Элементы.НачалоВремя, СписокВремениНачало);
	ЗаполнитьСписокВремени(Элементы.ОкончаниеВремя, СписокВремениОкончание);
	
	ЗаполнитьСписокВремени(Элементы.НачалоТекущегоЭлементаВремя, СписокВремениНачало);
	ЗаполнитьСписокВремени(Элементы.ОкончаниеТекущегоЭлементаВремя, СписокВремениОкончание);
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ПриЧтенииСозданииНаСервере();
	Иначе
		Если ТипЗнч(ДанныеСохраненнойЗаписи) <> Тип("Структура") Тогда
			ДанныеСохраненнойЗаписи = Новый Структура;
		КонецЕсли;
		ДанныеСохраненнойЗаписи.Вставить("НачалоТекущегоЭлемента", НачалоТекущегоЭлемента);
		ДанныеСохраненнойЗаписи.Вставить("ОкончаниеТекущегоЭлемента", ОкончаниеТекущегоЭлемента);
	КонецЕсли;
	
	УстановитьДоступностьРаботы();
	УстановитьВидимостьПолейВремени();
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ЭтоЗамещающийЭлемент = Ложь;
	
	Если ТипЗнч(ДанныеСохраненнойЗаписи) = Тип("Структура") Тогда
		ЭтоЗамещающийЭлемент = ЗначениеЗаполнено(ДанныеСохраненнойЗаписи.ИдентификаторПовторения);
	КонецЕсли;
	
	Если РасписаниеЗаполнено(СохраненноеРасписание) И РасписаниеЗаполнено(Расписание) И НЕ ЭтоЗамещающийЭлемент Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПередЗаписьюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru='Необходимо уточнить, для каких элементов нужно применить изменения'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ДляВсехЭлементов", НСтр("ru='Для всех повторяющихся элементов'"));
		СписокКнопок.Добавить("ДляТекущегоЭлемента", НСтр("ru='Для текущего элемента'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, СписокКнопок);
	Иначе
		
		Если РасписаниеЗаполнено(СохраненноеРасписание) И НЕ РасписаниеЗаполнено(Расписание) И НЕ ЭтоЗамещающийЭлемент Тогда
			// При очистке расписания замещающие элементы теряют связь с исходным элементом
			ПараметрыЗаписи.Вставить("УдалитьЗамещениеЗамещающихЭлементов", Истина);
		КонецЕсли;
		
		Отказ = Ложь;
		ОбработатьЗаписьВФорме(ПараметрыЗаписи, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПередЗаписьюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ДляТекущегоЭлемента" Тогда
		// Элемент становится замещающим, необходимо скорректировать запись элемента,
		// сделав ее замещающей, а также сохранить оригинальную запись.
		Запись.ИдентификаторПовторения = Запись.ИдентификаторЗаписи;
		Запись.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		
		Если ЗначениеЗаполнено(ДатаЗамещения) Тогда
			Запись.Начало = НачалоТекущегоЭлемента;
			Запись.Окончание = ОкончаниеТекущегоЭлемента;
			
			ДлительностьОтНачалаДня = ДатаЗамещения - НачалоДня(ДатаЗамещения);
			Запись.ДатаЗамещения = НачалоДня(Запись.Начало) + ДлительностьОтНачалаДня;
		КонецЕсли;
		
		Запись.Повторяется = Ложь;
		Запись.ОкончаниеПовторения = '00010101';
		Расписание = Неопределено;
		
		ДополнительныеПараметры.ПараметрыЗаписи.Вставить("СохранитьИсходнуюЗапись", Истина);
		
	Иначе
		// Если изменения применяются ко всем элементам, переписывается оригинальная запись,
		// а в существующих замещающих элементах корректируется дата замещения
		
		Если ЗначениеЗаполнено(ДатаЗамещения) Тогда
			
			ДлительностьОтНачалаДня = НачалоТекущегоЭлемента - НачалоДня(НачалоТекущегоЭлемента);
			Длительность = ОкончаниеТекущегоЭлемента - НачалоТекущегоЭлемента;
			
			Запись.Начало = НачалоДня(Запись.Начало) + ДлительностьОтНачалаДня;
			Запись.Окончание = Запись.Начало + Длительность;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСохраненнойЗаписи) = Тип("Структура") Тогда
			Если ДанныеСохраненнойЗаписи.Начало <> Запись.Начало Тогда
				ДополнительныеПараметры.ПараметрыЗаписи.Вставить("ИзменитьДатуЗамещенияЗамещающихЗаписей", Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	ОбработатьЗаписьВФорме(ДополнительныеПараметры.ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТипЗнч(Расписание) = Тип("РасписаниеЭлементаПланировщика") Тогда
		
		ТекущийОбъект.Расписание = Новый ХранилищеЗначения(Расписание);
		
		Если Расписание.ПериодПовтораДней <> 0 ИЛИ Расписание.ПериодНедель <> 0
			ИЛИ Расписание.ПериодМесяцев <> 0 ИЛИ Расписание.ПериодЛет <> 0 Тогда
			ТекущийОбъект.Повторяется = Истина;
		КонецЕсли;
		
		ТекущийОбъект.ОкончаниеПовторения =
			РегистрыСведений.КалендариПользователей.ДатаОкончанияСобытия(Расписание, ТекущийОбъект.Начало,ТекущийОбъект.Окончание);
	Иначе
		ТекущийОбъект.Расписание = Новый ХранилищеЗначения(Неопределено);
		ТекущийОбъект.Повторяется = Ложь;
		ТекущийОбъект.ОкончаниеПовторения = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Запись.Окончание <= Запись.Начало Тогда
		ТекстСообщения = НСтр("ru='Необходимо указать окончание позже начала'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСОобщения,,,"Запись.Окончание", Отказ);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ДанныеОповещения = Новый Структура;
	ДанныеОповещения.Вставить("Начало", Запись.Начало);
	ДанныеОповещения.Вставить("Окончание", Запись.Окончание);
	
	Оповестить("ЗаписаныДанныеКалендаря", ДанныеОповещения, ЭтотОбъект);
	
	ВыполнитьДействияПослеЗаписи(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СохраненноеРасписание = Расписание;
	
	СохранитьИсходнуюЗапись = Неопределено;
	ИзменитьДатуЗамещенияЗамещающихЗаписей = Неопределено;
	УдалитьЗамещениеЗамещающихЭлементов = Неопределено;
	
	Если ПараметрыЗаписи.Свойство("СохранитьИсходнуюЗапись", СохранитьИсходнуюЗапись) Тогда
		
		ПараметрыЗаписи.Удалить("СохранитьИсходнуюЗапись");
		
		Если ТипЗнч(СохранитьИсходнуюЗапись) = Тип("Булево") И СохранитьИсходнуюЗапись Тогда
			СохранитьОригинальнуюЗапись();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИзменитьДатуЗамещенияЗамещающихЗаписей", ИзменитьДатуЗамещенияЗамещающихЗаписей) Тогда
		
		ПараметрыЗаписи.Удалить("ИзменитьДатуЗамещенияЗамещающихЗаписей");
		
		Если ТипЗнч(ИзменитьДатуЗамещенияЗамещающихЗаписей) = Тип("Булево") И ИзменитьДатуЗамещенияЗамещающихЗаписей Тогда
			ИзменитьДатуЗамещенияВЗамещающихЗаписях();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("УдалитьЗамещениеЗамещающихЭлементов", УдалитьЗамещениеЗамещающихЭлементов) Тогда
		
		ПараметрыЗаписи.Удалить("УдалитьЗамещениеЗамещающихЭлементов");
		
		Если ТипЗнч(УдалитьЗамещениеЗамещающихЭлементов) = Тип("Булево") И УдалитьЗамещениеЗамещающихЭлементов Тогда
			УдалитьЗамещениеДляЗаписи();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДанныеСохраненнойЗаписи();
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ДатаЗамещения) Тогда
		ДатаЗамещения = ТекущийОбъект.ДатаЗамещения;
	КонецЕсли;
	
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("Пользователь", ТекущийОбъект.Пользователь);
	ДанныеЗаписи.Вставить("Начало", ТекущийОбъект.Начало);
	ДанныеЗаписи.Вставить("Окончание", ТекущийОбъект.Окончание);
	
	СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(ДанныеЗаписи);
	
	УстановитьВидимостьЭлементовРасписания();
	УстановитьДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ТипЗадачаПриИзменении(Элемент)
	
	УстановитьДоступностьРаботы();
	
	Если ЗначениеЗаполнено(Запись.Ошибка) Тогда
		Запись.Ошибка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ТехническийПроект) Тогда
		Запись.ТехническийПроект = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ВидДеятельности) Тогда
		Запись.ВидДеятельности = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОшибкаПриИзменении(Элемент)
	
	УстановитьДоступностьРаботы();
	
	Если ЗначениеЗаполнено(Запись.Задача) Тогда
		Запись.Задача = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ТехническийПроект) Тогда
		Запись.ТехническийПроект = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ВидДеятельности) Тогда
		Запись.ВидДЕятельности = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипТехническийПроектПриИзменении(Элемент)
	
	УстановитьДоступностьРаботы();
	
	Если ЗначениеЗаполнено(Запись.Задача) Тогда
		Запись.Задача = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Ошибка) Тогда
		Запись.Ошибка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ВидДеятельности) Тогда
		Запись.ВидДеятельности = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВидДеятельностиПриИзменении(Элемент)
	
	УстановитьДоступностьРаботы();
	
	Если ЗначениеЗаполнено(Запись.Задача) Тогда
		Запись.Задача = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.Ошибка) Тогда
		Запись.Ошибка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запись.ТехническийПроект) Тогда
		Запись.ТехническийПроект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПриИзменении(Элемент)
	
	ПриИзмененииРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриИзменении(Элемент)
	
	ПриИзмененииРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническийПроектПриИзменении(Элемент)
	
	ПриИзмененииРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	ПриИзмененииРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОРасписанииЭлементаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расписание) = Тип("РасписаниеЭлементаПланировщика") Тогда
		РасписаниеДляРедактирования = Расписание;
	Иначе
		РасписаниеДляРедактирования = Новый РасписаниеЭлементаПланировщика;
	КонецЕсли;

	ДиалогРасписания = Новый ДиалогРасписанияЭлементаПланировщика(РасписаниеДляРедактирования);
	
	ДополнительныеПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытиеРасписанияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеРасписанияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("РасписаниеЭлементаПланировщика") Тогда
		
		Если РасписаниеЗаполнено(Результат) Тогда
			Расписание = Результат;
		КонецЕсли;
		
		СформироватьИнформациюОРасписанииЭлемента(Результат, ИнформацияОРасписанииЭлемента, Элементы);
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьРасписание(Команда)
	
	Расписание = Неопределено;
	СформироватьИнформациюОРасписанииЭлемента(Расписание, ИнформацияОРасписанииЭлемента, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	ПринудительноЗакрытьФорму = Истина;
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Истина);
	ПараметрыЗаписи.Вставить("НоваяЗапись", Запись.ИсходныйКлючЗаписи.Пустой());
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Истина;
	
	ЭтоЗамещающийЭлемент = Ложь;
	
	Если ТипЗнч(ДанныеСохраненнойЗаписи) = Тип("Структура") Тогда
		ЭтоЗамещающийЭлемент = ЗначениеЗаполнено(ДанныеСохраненнойЗаписи.ИдентификаторПовторения);
	КонецЕсли;
	
	Если РасписаниеЗаполнено(СохраненноеРасписание) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДействияПриУдаленииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru='Необходимо уточнить, какие элементы следует удалить'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("ДляВсехЭлементов", НСтр("ru='Все повторяющиеся элементы'"));
		СписокКнопок.Добавить("ДляТекущегоЭлемента", НСтр("ru='Текущий элемент'"));
		СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, СписокКнопок,, "Отмена");
	Иначе
		
		ДействияПриУдалении = Новый Структура;
		
		Если ЭтоЗамещающийЭлемент Тогда
			ДействияПриУдалении.Вставить("ПометитьЗамещающийЭлементУдаленным", Истина);
		Иначе
			ДействияПриУдалении.Вставить("УдалитьЗапись", Истина);
		КонецЕсли;
		
		ОбработатьУдалениеЗаписи(ДействияПриУдалении);
		
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("Начало", Запись.Начало);
		ДанныеОповещения.Вставить("Окончание", Запись.Окончание);
		
		Оповестить("ЗаписаныДанныеКалендаря", ДанныеОповещения, ЭтотОбъект);
	    Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриУдаленииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДействияПриУдалении = Новый Структура;
	
	Если Результат = "Отмена" Тогда
		Возврат;
	ИначеЕсли Результат = "ДляТекущегоЭлемента" Тогда
		ДействияПриУдалении.Вставить("СоздатьЗамещающийУдаленныйЭлемент", Истина);
		
		НачалоДляОповещения = НачалоТекущегоЭлемента;
		ОкончаниеДляОповещения = ОкончаниеТекущегоЭлемента;
		
	Иначе
		ДействияПриУдалении.Вставить("ОтвязатьЗамещающиеЭлементыУдалитьЗапись", Истина);
		
		НачалоДляОповещения = Запись.Начало;
		
		Если ЗначениеЗаполнено(Запись.ОкончаниеПовторения) Тогда
			ОкончаниеДляОповещения = Запись.ОкончаниеПовторения;
		Иначе
			ОкончаниеДляОповещения = '00010101';
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьУдалениеЗаписи(ДействияПриУдалении);
	
	ДанныеОповещения = Новый Структура;
	ДанныеОповещения.Вставить("Начало", НачалоДляОповещения);
	ДанныеОповещения.Вставить("Окончание", ОкончаниеДляОповещения);
	
	Оповестить("ЗаписаныДанныеКалендаря", ДанныеОповещения, ЭтотОбъект);
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьДоступностьРаботы()
	
	Элементы.Задача.Доступность = (ТипРаботы = 1);
	Элементы.Ошибка.Доступность = (ТипРаботы = 2);
	Элементы.ТехническийПроект.Доступность = (ТипРаботы = 3);
	Элементы.ВидДеятельности.Доступность = (ТипРаботы = 4);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРаботы()
	
	Если Не ЗначениеЗаполнено(Запись.Задача)
		И Не ЗначениеЗаполнено(Запись.Ошибка)
		И Не ЗначениеЗаполнено(Запись.ТехническийПроект)
		И Не ЗначениеЗаполнено(Запись.ВидДеятельности)
		И ТипРаботы <> 0 Тогда
		
		ТипРаботы = 0;
		УстановитьДоступностьРаботы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВремени(Элемент, СписокВремени)
	
	Для Каждого ЭлементСписка Из СписокВремени Цикл
		Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьИнформациюОРасписанииЭлемента(Расписание, ИнформацияОРасписанииЭлемента, Элементы)
	
	Если ТипЗнч(Расписание) = Тип("РасписаниеЭлементаПланировщика")	И РасписаниеЗаполнено(Расписание) Тогда
		ИнформацияОРасписанииЭлемента = НСтр("ru='Повторяется: '") + Строка(Расписание);
		РасписаниеЗаполнено = Истина;
	Иначе
		ИнформацияОРасписанииЭлемента = НСтр("ru='Не повторяется. Заполнить расписание для повторения'");
		РасписаниеЗаполнено = Ложь;
	КонецЕсли;
	
	Если Элементы.Найти("ОчиститьРасписание") <> Неопределено Тогда
		Элементы.ОчиститьРасписание.Видимость = РасписаниеЗаполнено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ОбъектЗапись = РеквизитФормыВЗначение("Запись");
	ДанныеРасписания = ОбъектЗапись.Расписание.Получить();
	
	Если ТипЗнч(ДанныеРасписания) = Тип("РасписаниеЭлементаПланировщика") Тогда
		Расписание = ДанныеРасписания;
		СохраненноеРасписание = ДанныеРасписания;
	Иначе
		Расписание = Неопределено;
		СохраненноеРасписание = Неопределено;
	КонецЕсли;
	
	ЗаполнитьДанныеСохраненнойЗаписи();
	
	СформироватьИнформациюОРасписанииЭлемента(Расписание, ИнформацияОРасписанииЭлемента, Элементы);
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РасписаниеЗаполнено(ПроверяемоеРасписание)
	
	РасписаниеЗаполнено = Ложь;
	
	Если ТипЗнч(ПроверяемоеРасписание) = Тип("РасписаниеЭлементаПланировщика") Тогда
		Если НЕ (ПроверяемоеРасписание.ПериодЛет = 0 И ПроверяемоеРасписание.ПериодМесяцев = 0
			И ПроверяемоеРасписание.ПериодНедель = 0 И ПроверяемоеРасписание.ПериодПовтораДней = 0) Тогда
			
			РасписаниеЗаполнено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасписаниеЗаполнено;
	
КонецФункции

&НаКлиенте
Функция ОбработатьЗаписьВФорме(ПараметрыЗаписи, Отказ = Ложь)
	
	ДействиеПослеЗаписи = Неопределено;
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	НеВыполнятьПроверкуПередЗаписью = Истина;
	
	Отказ = Истина;
	
	ПараметрыЗаписи.Вставить(
		"ПринудительноЗакрытьФорму", ПринудительноЗакрытьФорму);
	ПараметрыЗаписи.Вставить("НоваяЗапись", Запись.ИсходныйКлючЗаписи.Пустой());
	
	Результат = Записать(ПараметрыЗаписи);
	
	ПринудительноЗакрытьФорму = Ложь;
	НеВыполнятьПроверкуПередЗаписью = Ложь;
	
	Если Результат И ДействиеПослеЗаписи <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействияПослеЗаписи(ПараметрыЗаписи)
	
	Если ПринудительноЗакрытьФорму Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовРасписания()
	
	ЭтоЗамещающийЭлемент = Ложь;
	
	Если ТипЗнч(ДанныеСохраненнойЗаписи) = Тип("Структура") Тогда
		ЭтоЗамещающийЭлемент = ЗначениеЗаполнено(ДанныеСохраненнойЗаписи.ИдентификаторПовторения);
	КонецЕсли;
	
	Элементы.ИнформацияОРасписанииЭлемента.Видимость = НЕ ЭтоЗамещающийЭлемент;
	
	Если Элементы.Найти("ОчиститьРасписание") <> Неопределено Тогда
		Элементы.ОчиститьРасписание.Видимость = НЕ ЭтоЗамещающийЭлемент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСохраненнойЗаписи()
	
	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ДанныеСохраненнойЗаписи = Неопределено;
	Иначе
		ДанныеСохраненнойЗаписи = Новый Структура;
		ДанныеСохраненнойЗаписи.Вставить("Пользователь", Запись.Пользователь);
		ДанныеСохраненнойЗаписи.Вставить("ИдентификаторЗаписи", Запись.ИдентификаторЗаписи);
		ДанныеСохраненнойЗаписи.Вставить("ИдентификаторПовторения", Запись.ИдентификаторПовторения);
		ДанныеСохраненнойЗаписи.Вставить("ДатаЗамещения", Запись.ДатаЗамещения);
		ДанныеСохраненнойЗаписи.Вставить("Название", Запись.Название);
		ДанныеСохраненнойЗаписи.Вставить("Описание", Запись.Описание);
		ДанныеСохраненнойЗаписи.Вставить("Задача", Запись.Задача);
		ДанныеСохраненнойЗаписи.Вставить("Ошибка", Запись.Ошибка);
		ДанныеСохраненнойЗаписи.Вставить("ТехническийПроект", Запись.ТехническийПроект);
		ДанныеСохраненнойЗаписи.Вставить("Начало", Запись.Начало);
		ДанныеСохраненнойЗаписи.Вставить("Окончание", Запись.Окончание);
		ДанныеСохраненнойЗаписи.Вставить("НачалоТекущегоЭлемента", НачалоТекущегоЭлемента);
		ДанныеСохраненнойЗаписи.Вставить("ОкончаниеТекущегоЭлемента", ОкончаниеТекущегоЭлемента);
		ДанныеСохраненнойЗаписи.Вставить("ВидДеятельности", Запись.ВидДеятельности);
		ДанныеСохраненнойЗаписи.Вставить("Расписание", СохраненноеРасписание);
		ДанныеСохраненнойЗаписи.Вставить("Повторяется", Запись.Повторяется);
		ДанныеСохраненнойЗаписи.Вставить("ОкончаниеПовторения", Запись.ОкончаниеПовторения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьОригинальнуюЗапись()
	
	Если ТипЗнч(ДанныеСохраненнойЗаписи) = Тип("Структура") Тогда
		
		МенеджерЗаписи  = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеСохраненнойЗаписи,,"Расписание");
		
		МенеджерЗаписи.Расписание = Новый ХранилищеЗначения(ДанныеСохраненнойЗаписи.Расписание);
		
		МенеджерЗаписи.Записать(Истина);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуЗамещенияВЗамещающихЗаписях()
	
	ЗамещающиеЗаписи = РегистрыСведений.КалендариПользователей.ЗамещающиеЗаписиЭлемента(Запись.ИдентификаторЗаписи);
	
	Для Каждого СтрокаЗаписи из ЗамещающиеЗаписи Цикл
		
		МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаЗаписи);
		
		ДлительностьОтНачалаДня = Запись.Начало - НачалоДня(Запись.Начало);
		
		МенеджерЗаписи.ДатаЗамещения = НачалоДня(МенеджерЗаписи.ДатаЗамещения) + ДлительностьОтНачалаДня;
		
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗамещениеДляЗаписи()
	
	ЗамещающиеЗаписи = РегистрыСведений.КалендариПользователей.ЗамещающиеЗаписиЭлемента(Запись.ИдентификаторЗаписи);
	
	Для Каждого СтрокаЗаписи из ЗамещающиеЗаписи Цикл
		
		МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаЗаписи);
		
		Если СтрокаЗаписи.Удаленный Тогда
			// Записи об удаленных элементах удаляются
			МенеджерЗаписи.Удалить();
		Иначе
			// Записи заиещающих элементов становятся записями обычных элементов
			
			МенеджерЗаписи.ДатаЗамещения = '00010101';
			
			ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			
			МенеджерЗаписи.ИдентификаторПовторения = ПустойИдентификатор;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервере
Процедура УстановитьВидимостьПолейВремени()
	
	Если ЗначениеЗаполнено(ДатаЗамещения) И НЕ ЗначениеЗаполнено(Запись.ИдентификаторПовторения) Тогда
		// Для редактирумеого повторяемого элемента (еще не замещенного) требуется оперировать
		// временем текущего элемента, а не исходной записи.
		Элементы.СтраницыНачалоОкончание.ТекущаяСтраница = Элементы.СтраницаДатаВремяТекущегоЭлемента;
	Иначе
		Элементы.СтраницыНачалоОкончание.ТекущаяСтраница = Элементы.СтраницаДатаВремя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУдалениеЗаписи(ДействияПриУдалении)
	
	Попытка
		НачатьТранзакцию();
			
		Если ДействияПриУдалении.Свойство("ПометитьЗамещающийЭлементУдаленным") Тогда
			Если ДействияПриУдалении.ПометитьЗамещающийЭлементУдаленным Тогда
				// Если текущая запись является замещающим элементом
				МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись, "Пользователь, ИдентификаторЗаписи");
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удаленный = Истина;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ДействияПриУдалении.Свойство("СоздатьЗамещающийУдаленныйЭлемент") Тогда
			Если ДействияПриУдалении.СоздатьЗамещающийУдаленныйЭлемент Тогда
				МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.Пользователь = ДанныеСохраненнойЗаписи.Пользователь;
				МенеджерЗаписи.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
				МенеджерЗаписи.ИдентификаторПовторения = ДанныеСохраненнойЗаписи.ИдентификаторЗаписи;
				
				МенеджерЗаписи.Начало = ДанныеСохраненнойЗаписи.НачалоТекущегоЭлемента;
				МенеджерЗаписи.Окончание = ДанныеСохраненнойЗаписи.ОкончаниеТекущегоЭлемента;
				
				ДлительностьОтНачалаДня = МенеджерЗаписи.Начало - НачалоДня(МенеджерЗаписи.Начало);
				МенеджерЗаписи.ДатаЗамещения = НачалоДня(МенеджерЗаписи.Начало) + ДлительностьОтНачалаДня;
			
				МенеджерЗаписи.Удаленный = Истина;
				
				МенеджерЗаписи.Записать();
				
				// Регистрируются изменения исходной записи для отражения замещений
				
				СинхронизацияКалендарей.ЗарегистрироватьИзмененияЗаписи(МенеджерЗаписи.Пользователь,
				                                                        МенеджерЗаписи.ИдентификаторПовторения);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ДействияПриУдалении.Свойство("ОтвязатьЗамещающиеЭлементыУдалитьЗапись") Тогда
			Если ДействияПриУдалении.ОтвязатьЗамещающиеЭлементыУдалитьЗапись Тогда
				
				ОбрабатываемыеДанные = Новый Массив;
				ОбрабатываемыеДанные.Добавить(ДанныеСохраненнойЗаписи.ИдентификаторЗаписи);
				
				РегистрыСведений.КалендариПользователей.ОтвязатьЗамещающиеУдалитьПовторяемые(ДанныеСохраненнойЗаписи.Пользователь,
				                                                                             ОбрабатываемыеДанные);
			КонецЕсли;
		КонецЕсли;
		
		Если ДействияПриУдалении.Свойство("УдалитьЗапись") Тогда
			Если ДействияПриУдалении.УдалитьЗапись Тогда
				
				УдаляемыеДанные = Новый Массив;
				УдаляемыеДанные.Добавить(ДанныеСохраненнойЗаписи.ИдентификаторЗаписи);
				
				РегистрыСведений.КалендариПользователей.УдалитьЗаписиПоИдентификаторам(ДанныеСохраненнойЗаписи.Пользователь,
				                                                                       УдаляемыеДанные);
			КонецЕсли;
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
			
		ТекстСообщения = НСтр("ru = 'При удалении записи возникла ошибка %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОписаниеОшИбки());
			
		ВызватьИсключение(ТекстСообщения);
			
	КонецПопытки;
	
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("Пользователь", Запись.Пользователь);
	ДанныеЗаписи.Вставить("Начало", Запись.Начало);
	ДанныеЗаписи.Вставить("Окончание", Запись.Окончание);
	
	СинхронизацияКалендарей.ПослеЗаписиСобытияКалендаря(ДанныеЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКоманд()
	
	Элементы.ФормаУдалить.Доступность = ДоступноИзменениеКалендарей И НЕ Запись.ИсходныйКлючЗаписи.Пустой();
	
КонецПроцедуры

#КонецОбласти