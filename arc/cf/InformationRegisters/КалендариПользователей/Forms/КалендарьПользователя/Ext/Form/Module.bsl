#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ДоступноИзменениеКалендарей = УправлениеДоступом.ЕстьРоль("ИзменениеКалендарейПользователей");
	
	ИспользуетсяУчетВремени = ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени");
	ИспользоватьОчередиЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьОчередиЗадач");
	
	ВидДеятельностиДляРаботыСОшибками = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	
	Задачи.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	Ошибки.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ТехническиеПроекты.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	ВидыДеятельности.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	Ошибки.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	
	ТекущаяДата = ТекущаяДата();
	ОтображаемаяДата = ТекущаяДата;
	
	НачалоИнтервалаРабочегоВремени = Константы.НачалоИнтервалаРабочегоВремени.Получить();
	ОкончаниеИнтервалаРабочегоВремени = Константы.ОкончаниеИнтервалаРабочегоВремени.Получить();
	
	ПрочитатьНастройкиКалендаря();
	
	Если Не ЗначениеЗаполнено(НачалоОтображенияВремени) И Не ЗначениеЗаполнено(ОкончаниеОтображенияВремени) Тогда
		НачалоОтображенияВремени = НачалоИнтервалаРабочегоВремени;
		ОкончаниеОтображенияВремени = ОкончаниеИнтервалаРабочегоВремени;
	КонецЕсли;
	
	Элементы.ФормаОтображатьПанельЗадачОшибок.Пометка = ОтображатьПанельЗадачОшибок;
	
	Элементы.ОтобратьОшибкиОбработанныеСегодня.Пометка = ОтбиратьОшибкиОбработанныеСегодня;
	
	УстановитьВремяОтображенияПланировщика(Планировщик, ПериодПланировщика,
		НачалоОтображенияВремени, ОкончаниеОтображенияВремени);
		
	НастроитьОтображениеПланировщика(Планировщик, ПериодПланировщика, ТочностьШкалыВремени);
	ОбработатьИзменениеИнтервалаДат();
	
	УстановитьПанельПодбораЗадачПриСозданииНаСервере();
	УстановитьОтборСостояниеЗадач();
	УстановитьОтборОшибокКомуНаправлена();
	УстановитьОтборОшибокПоСтатусу();
	УстановитьОтборОшибкиОбработанныеСегодня();
	УстановитьОтборТехническихПроектовПоСтатусу();
	
	УстановитьВидимостьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныДанныеКалендаря" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Свойство("Начало") И Параметр.Свойство("Окончание") Тогда
				Если Параметр.Начало >= Начало И (Параметр.Окончание <= Окончание)
					ИЛИ Параметр.Начало <=Окончание И (Параметр.Окончание >= Начало  ИЛИ Параметр.Окончание = '00010101') Тогда
					ЗаполнитьПланировщикПоДаннымКалендаря();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбработаноНапоминаниеОСобытииКалендаря" Тогда
		ОтображаемаяДата = ТекущаяДата();
		ОбработатьИзменениеИнтервалаДат();
	ИначеЕсли ИмяСобытия = "СинхронизированыДанныеКалендаря" Тогда
		ЗаполнитьПланировщикПоДаннымКалендаря();
	ИначеЕсли ИмяСобытия = "ПереключенХронометраж" Тогда
		ОбновитьСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("УстановкаДатыВСпискеОшибок", 3600);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПланировщикаПриИзменении(Элемент)
	
	ПриИзмененииПериодаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗадачОтборПриИзменении(Элемент)
	
	ПриИзмененииОтбораСостояниеЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЗадачОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           СостояниеЗадачОтбор,
	                                                           Тип("ПеречислениеСсылка.СостоянияЗадачПроцессов"),
	                                                           НСтр("ru = 'Выбранные состояния'"));
															   
КонецПроцедуры

&НаКлиенте
Процедура ФормаМножественногоОтбораПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Элемент") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.СостояниеЗадачОтбор Тогда
		СостояниеЗадачОтбор = Результат;
		ПриИзмененииОтбораСостояниеЗадач();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиКомуНаправленаПриИзменении(Элемент)
	
	ПриИзмененииОшибкиКомуНаправлена();
																			
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовОшибокПриИзменении(Элемент)
	
	ПриИзмененииСтатусовОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовОшибокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокСтатусовОшибок);
	
	ОткрытьФорму("Перечисление.СтатусыОшибок.Форма.ВыборСпискаСтатусов", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовОшибокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокСтатусовОшибок = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовТехническихПроектовПриИзменении(Элемент)
	
	ПриИзмененииСтатусовТехническихПроектов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовТехническихПроектовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокСтатусовТехническихПроектов);
	
	ОткрытьФорму("Перечисление.СтатусыТехническихПроектов.Форма.ВыборСпискаСтатусов", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовТехническихПроектовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокСтатусовТехническихПроектов = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗадачиСпискомПодборНажатие(Элемент)
	
	ОтображатьВПодбореЗадач = "ЗадачиСписком";
	ПриИзмененииРежимаОтображенияЗадач();
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.Задачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОчередьЗадачиНажатие(Элемент)
	
	ОтображатьВПодбореЗадач = "ОчередиРабот";
	ПриИзмененииРежимаОтображенияЗадач();
	
	ЭтотОбъект.ТекущийЭлемент = Элементы.ОчередьЗадач;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПланировщика

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьСобытие(Начало, Конец, Значения, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ВыделенныеЭлементы.Количество()=1 Тогда
		
		ДанныеЭлемента = Элемент.ВыделенныеЭлементы[0];
		ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ДанныеЭлемента);
		
		ОткрытьФормуЗаписи(ДанныеЗаписи, ДанныеЭлемента.Начало, ДанныеЭлемента.Конец, ДанныеЭлемента.ДатаЗамещения, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ВыделенныеЭлементы.Количество()=1 Тогда
		ДанныеЭлемента = Элемент.ВыделенныеЭлементы[0];
		ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ДанныеЭлемента);
		ОткрытьФормуЗаписи(ДанныеЗаписи, ДанныеЭлемента.Начало, ДанныеЭлемента.Конец, ДанныеЭлемента.ДатаЗамещения, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ВыделенныеЭлементы.Количество()=1 Тогда
		
		ДанныеЭлемента = Элемент.ВыделенныеЭлементы[0];
		ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ДанныеЭлемента);
		
		ОткрытьФормуЗаписи(ДанныеЗаписи, ДанныеЭлемента.Начало, ДанныеЭлемента.Конец, ДанныеЭлемента.ДатаЗамещения, НовыйЭлемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	Если Элемент.ВыделенныеЭлементы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделеныПовторяемыеЭлементы = ВыделеныПовторяемыеЭлементы();
	
	Если ВыделеныПовторяемыеЭлементы И ПериодПланировщика = "Месяц" Тогда
		ТекстСообщения = НСтр("ru='Перенос недоступен для повторяемых элементов в режиме отображения ""Месяц""'");
		ОтменаРедактирования = Истина;
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
		                        
	Если Элемент.ВыделенныеЭлементы.Количество() = 1 И НЕ ВыделеныПовторяемыеЭлементы 
		И ПериодПланировщика <> "Месяц" Тогда
		
		ЭлементПланировщика = Элемент.ВыделенныеЭлементы[0];
		ПроверитьОбработатьПересечениеЭлементовПланировщика(ЭлементПланировщика);
	КонецЕсли;
	
	Если ВыделеныПовторяемыеЭлементы Тогда
		СвойстваВыделенныхЭлементов = СвойстваЭлементовПланировщика(Элемент.ВыделенныеЭлементы);
		ОтменаРедактирования = Истина;
		ОпределитьДействиеДляОбработкиЭлементовПриОкончанииРедактирования(СвойстваВыделенныхЭлементов);
		Возврат;
	КонецЕсли;
		
	ДанныеЗаписей = Новый Массив;
		
	Для Каждого ЭлементПланировщика из Элемент.ВыделенныеЭлементы Цикл
		ОбновитьЗначениеЭлементаПланировщика(ЭлементПланировщика);
		ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ЭлементПланировщика);
		ДанныеЗаписей.Добавить(ДанныеЗаписи);
	КонецЦикла;
	
	ОбновитьЗаписи(ДанныеЗаписей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПересеченияЭлементовПланировщика(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеЗаписейДляОбновления = Новый Массив;
	
	ТекущийЭлементПланировщика = ДополнительныеПараметры.ТекущийЭлементПланировщика;
	
	СдвигНачало = ДополнительныеПараметры.СдвигНачало;
	СдвигОкончание = ДополнительныеПараметры.СдвигОкончание;
	
	Если Результат = "СократитьВремяПересекающихсяЭлементов" Тогда
		
		Для Каждого ПересекающийсяЭлемент из ДополнительныеПараметры.ПересекающиесяЭлементы Цикл
			
			Если ДополнительныеПараметры.СдвинутоНачало Тогда
				
				Если ПересекающийсяЭлемент.Начало < ТекущийЭлементПланировщика.Начало Тогда
					// Сокращается "нижняя" часть пересекающегося элемента -
					// оставшийся элемент располагается перед текущим
					
					ПересекающийсяЭлемент.Конец = ТекущийЭлементПланировщика.Начало;
					ПересекающийсяЭлемент.Значение.Конец = ПересекающийсяЭлемент.Конец;
					
					ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ПересекающийсяЭлемент);
					ДанныеЗаписейДляОбновления.Добавить(ДанныеЗаписи);
					
					Продолжить; // Если уже сократили "нижнюю" часть, сдвиг окончания не обрабатываем
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДополнительныеПараметры.СдвинутоОкончание Тогда
				
				Если ПересекающийсяЭлемент.Конец > ТекущийЭлементПланировщика.Конец Тогда
					// Сокращается "верхняя" часть пересекающегося элемента
					// оставшийся элемент располагается после текущего
					
					ПересекающийсяЭлемент.Начало = ТекущийЭлементПланировщика.Конец;
					ПересекающийсяЭлемент.Значение.Начало = ПересекающийсяЭлемент.Начало;
					
					ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ПересекающийсяЭлемент);
					ДанныеЗаписейДляОбновления.Добавить(ДанныеЗаписи);
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Результат = "СдвинутьПоследующиеЭлементы" Тогда
		
		ВеличинаСдвига = ТекущийЭлементПланировщика.Конец - ДополнительныеПараметры.НачалоПересекающихсяЭлементов;
		
		Для Каждого ПересекающийсяЭлемент из ДополнительныеПараметры.ПересекающиесяЭлементы Цикл
				
			Если ПересекающийсяЭлемент.Начало > ТекущийЭлементПланировщика.Начало Тогда
				
				ПересекающийсяЭлемент.Начало = ПересекающийсяЭлемент.Начало + ВеличинаСдвига;
				ПересекающийсяЭлемент.Значение.Начало = ПересекающийсяЭлемент.Начало;
				
				ПересекающийсяЭлемент.Конец = ПересекающийсяЭлемент.Конец + ВеличинаСдвига;
				ПересекающийсяЭлемент.Значение.Конец = ПересекающийсяЭлемент.Конец;
					
				ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ПересекающийсяЭлемент);
				ДанныеЗаписейДляОбновления.Добавить(ДанныеЗаписи);
					
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Результат = "РазместитьТекущийМеждуДругими" Тогда
		
		НижняяГраница  = '00010101';
		ВерхняяГраница = '00010101';
		
		Для Каждого ПересекающийсяЭлемент из ДополнительныеПараметры.ПересекающиесяЭлементы Цикл
			
			Если ПересекающийсяЭлемент.Начало > НижняяГраница Тогда
				НижняяГраница = ПересекающийсяЭлемент.Начало;
			КонецЕсли;
			
			Если ПересекающийсяЭлемент.Конец < ВерхняяГраница ИЛИ ВерхняяГраница = '00010101' Тогда
				ВерхняяГраница = ПересекающийсяЭлемент.Конец;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НижняяГраница  <>  '00010101' И ВерхняяГраница <> '00010101' Тогда
			
			ТекущийЭлементПланировщика.Начало = ВерхняяГраница;
			ТекущийЭлементПланировщика.Конец = НижняяГраница;
			
			ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ТекущийЭлементПланировщика);
			ДанныеЗаписейДляОбновления.Добавить(ДанныеЗаписи);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат = "СократитьВремяПересекающихсяЭлементов"
		ИЛИ Результат = "СдвинутьПоследующиеЭлементы"
		ИЛИ Результат = "РазместитьТекущийМеждуДругими" Тогда
		
		ОбновитьЗаписи(ДанныеЗаписейДляОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	
	Если ТипЗнч(ЗначениеПеретаскивания)  <> Тип("СправочникСсылка.ЗадачиПроцесса")
		И ТипЗнч(ЗначениеПеретаскивания) <> Тип("СправочникСсылка.Ошибки")
		И ТипЗнч(ЗначениеПеретаскивания) <> Тип("СправочникСсылка.ТехническиеПроекты")
		И ТипЗнч(ЗначениеПеретаскивания) <> Тип("СправочникСсылка.ВидыДеятельности")
		ИЛИ ЗначениеПеретаскивания = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка")
		ИЛИ ЗначениеПеретаскивания = ПредопределенноеЗначение("Справочник.Ошибки.ПустаяСсылка")
		ИЛИ ЗначениеПеретаскивания = ПредопределенноеЗначение("Справочник.ТехническиеПроекты.ПустаяСсылка")
		ИЛИ ЗначениеПеретаскивания = ПредопределенноеЗначение("Справочник.ВидыДеятельности.ПустаяСсылка") Тогда
		
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	
	СтандартнаяОбработка = Ложь;
	ЗаписатьСобытие(ПараметрыПеретаскивания.Значение, Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеЭлементы.Количество()>0 Тогда
		
		Если ВыделеныПовторяемыеЭлементы() Тогда
			Отказ = Истина;
			ОпределитьДействиеДляОбработкиЭлементовПередУдалением();
		Иначе
			
			ДанныеУдаляемыхЗаписей = Новый Массив;
			ДанныеУдаленныхЗамещающихЭлементов = Новый Массив;
			
			Для Каждого ЭлементПланировщика из Элемент.ВыделенныеЭлементы Цикл
				
				ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ЭлементПланировщика);
				
				Если ЭтоЗамещающийЭлемент(ЭлементПланировщика) Тогда
					// В запись регистра заносится информация об удалении, В самом элементе проставляется отметка
					ЭлементПланировщика.Удаленный = Истина;
					ЭлементПланировщика.Значение.Удаленный = Истина;
					
					ДанныеУдаленныхЗамещающихЭлементов.Добавить(ДанныеЗаписи);
					
				Иначе
					// Записи регистра удаляются
					ДанныеУдаляемыхЗаписей.Добавить(Данныезаписи.ИдентификаторЗаписи);
				КонецЕсли;
				
			КонецЦикла;
			
			ОбработатьУдалениеБезПовторяемыхЭлементов(ДанныеУдаленныхЗамещающихЭлементов, ДанныеУдаляемыхЗаписей);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	Для Каждого ЭлементПериода из ТекущиеПериодыОтображения Цикл
		
		Если ПериодПланировщика = "День" Тогда
			ТекущееНачало = НачалоДня(ЭлементПериода.Начало);
			ТекущееОкончание = КонецДня(ЭлементПериода.Начало);
		ИначеЕсли ПериодПланировщика = "Месяц" Тогда
			ТекущееНачало = НачалоМесяца(ЭлементПериода.Начало);
			ТекущееОкончание = КонецМесяца(ЭлементПериода.Начало);
		Иначе
			ТекущееНачало = НачалоНедели(ЭлементПериода.Начало);
			ТекущееОкончание = КонецНедели(ЭлементПериода.Начало);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Начало = ТекущееНачало И Окончание = ТекущееОкончание Тогда
		Возврат;
	КонецЕсли;
	
	Начало = ТекущееНачало;
	Окончание = ТекущееОкончание;
	
	ПодключитьОбработчикОжидания("ОбработатьСменуТекущегоПериодаОтображенияПланировщика",0.1,Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыЗадачи

&НаКлиенте                                                                  
Процедура ЗадачиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("СправочникСсылка.ЗадачиПроцесса")
		ИЛИ ПараметрыПеретаскивания.Значение = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка")
		ИЛИ Не ДоступноИзменениеКалендарей Тогда
		
		Выполнение = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗадачиВедениеХронометража" Тогда
		ОбработатьПереключениеХронометража("Задачи", ВыбраннаяСтрока, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОчередьЗадачи

&НаКлиенте
Процедура ОчередьЗадачПередРазворачиванием(Элемент, Строка, Отказ)
	
	ДанныеСтроки = ОчередьЗадач.НайтиПоИдентификатору(Строка);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодчиненныеСтрокиДеревоОчередьЗадач(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ОчередьЗадач.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если ТипЗнч(ДанныеСтроки.Работа) = Тип("СправочникСсылка.ПриоритетыРабот") Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ОчередьЗадачВедениеХронометража" Тогда
		ОбработатьПереключениеХронометража("ОчередьЗадач", ВыбраннаяСтрока, СтандартнаяОбработка);
	Иначе
		ПоказатьЗначение(, ДанныеСтроки.Работа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗадачНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеСтроки = ОчередьЗадач.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Если ТипЗнч(ДанныеСтроки.Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		ПараметрыПеретаскивания.Значение = ДанныеСтроки.Работа;
	Иначе
		Выполнение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьЗадачПередСворачиванием(Элемент, Строка, Отказ)
	
	ДанныеСтроки = ОчередьЗадач.НайтиПоИдентификатору(Строка);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ПолучитьЭлементы().Очистить();
	ДанныеСтроки.ПолучитьЭлементы().Добавить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОшибки

&НаКлиенте
Процедура ОшибкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("СправочникСсылка.Ошибки")
		ИЛИ ПараметрыПеретаскивания.Значение = ПредопределенноеЗначение("Справочник.Ошибки.ПустаяСсылка")
		ИЛИ Не ДоступноИзменениеКалендарей Тогда
		
		Выполнение = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОшибкиВедениеХронометража" Тогда
		ОбработатьПереключениеХронометража("Ошибки", ВыбраннаяСтрока, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыТехническиеПроекты

&НаКлиенте
Процедура ТехническиеПроектыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("СправочникСсылка.ТехническиеПроекты")
		ИЛИ ПараметрыПеретаскивания.Значение = ПредопределенноеЗначение("Справочник.ТехническиеПроекты.ПустаяСсылка")
		ИЛИ Не ДоступноИзменениеКалендарей Тогда
		
		Выполнение = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническиеПроектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТехническиеПроектыВедениеХронометража" Тогда
		ОбработатьПереключениеХронометража("ТехническиеПроекты", ВыбраннаяСтрока, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВидыДеятельности

&НаКлиенте
Процедура ВидыДеятельностиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("СправочникСсылка.ВидыДеятельности")
		ИЛИ ПараметрыПеретаскивания.Значение = ПредопределенноеЗначение("Справочник.ВидыДеятельности.ПустаяСсылка")
		ИЛИ Не ДоступноИзменениеКалендарей Тогда
		
		Выполнение = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДеятельностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ВидыДеятельностиВедениеХронометража" Тогда
		ОбработатьПереключениеХронометража("ВидыДеятельности", ВыбраннаяСтрока, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтображатьПанельЗадачОшибок(Команда)
	
	ПриИзмененииНастройкиОтображатьПанельЗадачОшибок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДатуВКалендаре(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОтображаемаяДата", ОтображаемаяДата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДатыВКалендареЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.КалендариПользователей.Форма.ВыборДаты", ПараметрыОткрытия, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатыВКалендареЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Дата") И ЗначениеЗаполнено(Результат) Тогда
		ОтображаемаяДата = Результат;
		ОбработатьИзменениеИнтервалаДат();
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКалендаря(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкиКалендаряЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.КалендариПользователей.Форма.НастройкиКалендаря",,ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКалендаряЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат)  = Тип("Структура") Тогда
		
		Если Результат.ОтображатьВремя = 0 Тогда
			НастройкаНачалоОтображения = НачалоИнтервалаРабочегоВремени;
			НастройкаОкончаниеОтображения = ОкончаниеИнтервалаРабочегоВремени;
		Иначе
			НастройкаНачалоОтображения = Результат.ОтображатьВремяС;
			НастройкаОкончаниеОтображения = Результат.ОтображатьВремяПо;
		КонецЕсли;
		
		Если НастройкаНачалоОтображения <> НачалоОтображенияВремени
			ИЛИ НастройкаОкончаниеОтображения <> ОкончаниеОтображенияВремени Тогда
			
			НачалоОтображенияВремени = НастройкаНачалоОтображения;
			ОкончаниеОтображенияВремени = НастройкаОкончаниеОтображения;
			
			УстановитьВремяОтображенияПланировщика(Планировщик, ПериодПланировщика,
			    НачалоОтображенияВремени, ОкончаниеОтображенияВремени);
			
		КонецЕсли;
			
		Если ТочностьШкалыВремени <> Результат.ТочностьШкалыВремени Тогда
			ТочностьШкалыВремени = Результат.ТочностьШкалыВремени;
			УстановитьТочностьШкалыВремени(Планировщик, ПериодПланировщика, ТочностьШкалыВремени);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить10Минут(Команда)
	
	ДобавитьВремя(10);
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить15Минут(Команда)
	
	ДобавитьВремя(15);
	
КонецПроцедуры

&НаКлиенте
Процедура Добавить30Минут(Команда)
	
	ДобавитьВремя(30);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиСинхронизацииКалендаря(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкаСинхронизацииКалендарей");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобратьОшибкиОбработанныеСегодня(Команда)
	
	ОтбиратьОшибкиОбработанныеСегодня = Не ОтбиратьОшибкиОбработанныеСегодня;
	Элементы.ОтобратьОшибкиОбработанныеСегодня.Пометка = ОтбиратьОшибкиОбработанныеСегодня;
	
	ПриИзмененииОтбораОшибокОбработанныхСегодня();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчередьРаботОбновить(Команда)
	ОчередьРаботОбновитьНаСервере();
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
&НаСервере
Процедура ЗаполнитьПланировщикПоДаннымКалендаря()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендариПользователей.Пользователь КАК Пользователь,
	|	КалендариПользователей.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	КалендариПользователей.Название КАК Название,
	|	КалендариПользователей.Описание КАК Описание,
	|	КалендариПользователей.Задача КАК Задача,
	|	КалендариПользователей.Ошибка КАК Ошибка,
	|	КалендариПользователей.ТехническийПроект КАК ТехническийПроект,
	|	КалендариПользователей.ВидДеятельности КАК ВидДеятельности,
	|	КалендариПользователей.Начало КАК Начало,
	|	КалендариПользователей.Окончание КАК Окончание,
	|	КалендариПользователей.Расписание КАК Расписание,
	|	КалендариПользователей.Повторяется КАК Повторяется,
	|	КалендариПользователей.ОкончаниеПовторения КАК ОкончаниеПовторения,
	|	КалендариПользователей.ИдентификаторПовторения КАК ИдентификаторПовторения,
	|	КалендариПользователей.ДатаЗамещения КАК ДатаЗамещения,
	|	КалендариПользователей.Удаленный КАК Удаленный,
	|	ВЫБОР
	|		КОГДА КалендариПользователей.ИдентификаторПовторения = &ПустойИдентификатор
	|			ТОГДА КалендариПользователей.ИдентификаторЗаписи
	|		ИНАЧЕ КалендариПользователей.ИдентификаторПовторения
	|	КОНЕЦ КАК ИдентификаторУпорядочивания
	|ИЗ
	|	РегистрСведений.КалендариПользователей КАК КалендариПользователей
	|ГДЕ
	|	КалендариПользователей.Пользователь = &Пользователь
	|	И (КалендариПользователей.ИдентификаторПовторения = &ПустойИдентификатор
	|				И (КалендариПользователей.Начало >= &Начало
	|						И (КалендариПользователей.Начало <= &Окончание
	|							ИЛИ &Окончание = ДАТАВРЕМЯ(1, 1, 1))
	|					ИЛИ (КалендариПользователей.Окончание <= &Окончание
	|						ИЛИ &Окончание = ДАТАВРЕМЯ(1, 1, 1))
	|						И КалендариПользователей.Окончание >= &Начало
	|					ИЛИ КалендариПользователей.Повторяется
	|						И (КалендариПользователей.Начало <= &Окончание
	|							ИЛИ &Окончание = ДАТАВРЕМЯ(1, 1, 1))
	|						И (КалендариПользователей.ОкончаниеПовторения >= &Начало
	|							ИЛИ КалендариПользователей.ОкончаниеПовторения = ДАТАВРЕМЯ(1, 1, 1)))
	|			ИЛИ КалендариПользователей.ИдентификаторПовторения <> &ПустойИдентификатор
	|				И (КалендариПользователей.ДатаЗамещения >= &Начало
	|					И (КалендариПользователей.ДатаЗамещения <= &Окончание
	|						ИЛИ &Окончание = ДАТАВРЕМЯ(1, 1, 1))))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователь,
	|	ИдентификаторУпорядочивания,
	|	ДатаЗамещения"
	;
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Начало", Начало);
	Запрос.УстановитьПараметр("Окончание", Окончание);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПустойИдентификатор", ПустойИдентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Планировщик.Элементы.Очистить();
	
	ЭлементПланировщика = Неопределено;
	ТекущийИдентификаторУпорядочивания = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИдентификаторПовторения = ПустойИдентификатор
			И ТекущийИдентификаторУпорядочивания <> Выборка.ИдентификаторУпорядочивания Тогда
			
			ТекущийИдентификаторУпорядочивания = Выборка.ИдентификаторУпорядочивания;
			ЭлементПланировщика = Планировщик.Элементы.Добавить(Выборка.Начало, Выборка.Окончание);
			
			Если ЗначениеЗаполнено(Выборка.Название) Тогда
				ЭлементПланировщика.Текст = Выборка.Название;
			ИначеЕсли ЗначениеЗаполнено(Выборка.Задача) Тогда
				ЭлементПланировщика.Текст = Выборка.Задача;
			ИначеЕсли ЗначениеЗаполнено(Выборка.Ошибка) Тогда
				ЭлементПланировщика.Текст = Выборка.Ошибка;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ТехническийПроект) Тогда
				ЭлементПланировщика.Текст = Выборка.ТехническийПроект;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ВидДеятельности) Тогда
				ЭлементПланировщика.Текст = Выборка.ВидДеятельности;
			КонецЕсли;
			
			ДанныеРасписания = Выборка.Расписание.Получить();
			Если ТипЗнч(ДанныеРасписания) = Тип("РасписаниеЭлементаПланировщика") Тогда
				Расписание = ДанныеРасписания;
				ЭлементПланировщика.Расписание = Расписание;
				ЭлементПланировщика.Картинка = БиблиотекаКартинок.РегламентноеЗадание;
			Иначе
				Расписание = Неопределено;
			КонецЕсли;
			
			ЗначениеЭлемента = Новый Структура;
			
			ЗначениеЭлемента.Вставить("Пользователь", Выборка.Пользователь);
			ЗначениеЭлемента.Вставить("ИдентификаторЗаписи", Выборка.ИдентификаторЗаписи);
			ЗначениеЭлемента.Вставить("Задача", Выборка.Задача);
			ЗначениеЭлемента.Вставить("Ошибка", Выборка.Ошибка);
			ЗначениеЭлемента.Вставить("ТехническийПроект", Выборка.ТехническийПроект);
			ЗначениеЭлемента.Вставить("ВидДеятельности", Выборка.ВидДеятельности);
			ЗначениеЭлемента.Вставить("Название", Выборка.Название);
			ЗначениеЭлемента.Вставить("Описание", Выборка.Описание);
			ЗначениеЭлемента.Вставить("Начало", Выборка.Начало);
			ЗначениеЭлемента.Вставить("Конец", Выборка.Окончание);
			ЗначениеЭлемента.Вставить("Расписание", Расписание);
			ЗначениеЭлемента.Вставить("ИдентификаторПовторения", ПустойИдентификатор);
			ЗначениеЭлемента.Вставить("ДатаЗамещения", '00010101');
			ЗначениеЭлемента.Вставить("Повторяется", Выборка.Повторяется);
			ЗначениеЭлемента.Вставить("ОкончаниеПовторения", Выборка.ОкончаниеПовторения);
			ЗначениеЭлемента.Вставить("Удаленный", Неопределено);
			
			ЭлементПланировщика.Значение = ЗначениеЭлемента;
			
		КонецЕсли;
		
		Если Выборка.ИдентификаторПовторения <> ПустойИдентификатор
			И Выборка.ИдентификаторУпорядочивания = ТекущийИдентификаторУпорядочивания
			И ЭлементПланировщика <> Неопределено Тогда
			
			// Добавляется замещающий элемент
			
			ЗамещающийЭлемент = ЭлементПланировщика.ЗамещающиеЭлементы.Добавить(Выборка.ДатаЗамещения);
			
			ЗамещающийЭлемент.Начало = Выборка.Начало;
			ЗамещающийЭлемент.Конец = Выборка.Окончание;
			
			Если ЗначениеЗаполнено(Выборка.Название) Тогда
				ЗамещающийЭлемент.Текст = Выборка.Название;
			ИначеЕсли ЗначениеЗаполнено(Выборка.Задача) Тогда
				ЗамещающийЭлемент.Текст = Выборка.Задача;
			ИначеЕсли ЗначениеЗаполнено(Выборка.Ошибка) Тогда
				ЗамещающийЭлемент.Текст = Выборка.Ошибка;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ТехническийПроект) Тогда
				ЗамещающийЭлемент.Текст = Выборка.ТехническийПроект;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ВидДеятельности) Тогда
				ЗамещающийЭлемент.Текст = Выборка.ВидДеятельности;
			КонецЕсли;
			
			ЗамещающийЭлемент.Удаленный = Выборка.Удаленный;
			
			ЗамещающийЭлемент.Картинка = Новый Картинка;
			
			ЗначениеЭлемента = Новый Структура;
			
			ЗначениеЭлемента.Вставить("Пользователь", Выборка.Пользователь);
			ЗначениеЭлемента.Вставить("ИдентификаторЗаписи", Выборка.ИдентификаторЗаписи);
			ЗначениеЭлемента.Вставить("Задача", Выборка.Задача);
			ЗначениеЭлемента.Вставить("Ошибка", Выборка.Ошибка);
			ЗначениеЭлемента.Вставить("ТехническийПроект", Выборка.ТехническийПроект);
			ЗначениеЭлемента.Вставить("ВидДеятельности", Выборка.ВидДеятельности);
			ЗначениеЭлемента.Вставить("Название", Выборка.Название);
			ЗначениеЭлемента.Вставить("Описание", Выборка.Описание);
			ЗначениеЭлемента.Вставить("Начало", Выборка.Начало);
			ЗначениеЭлемента.Вставить("Конец", Выборка.Окончание);
			ЗначениеЭлемента.Вставить("Расписание", Неопределено);
			ЗначениеЭлемента.Вставить("ИдентификаторПовторения", Выборка.ИдентификаторПовторения);
			ЗначениеЭлемента.Вставить("ДатаЗамещения", Выборка.ДатаЗамещения);
			ЗначениеЭлемента.Вставить("Повторяется", Ложь);
			ЗначениеЭлемента.Вставить("ОкончаниеПовторения", '00010101');
			ЗначениеЭлемента.Вставить("Удаленный", Выборка.Удаленный);
			
			ЗамещающийЭлемент.Значение = ЗначениеЭлемента;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеПланировщика(Планировщик, ПериодПланировщика, ТочностьШкалыВремени)
	
	Если ПериодПланировщика = "День" ИЛИ ПериодПланировщика = "Неделя" Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		Планировщик.ОтображатьТекущуюДату = Истина;
		
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		
	ИначеЕсли ПериодПланировщика = "Месяц" Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		
	КонецЕсли;
	
	УстановитьШкалуВремени(Планировщик, ПериодПланировщика, ТочностьШкалыВремени);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИнтервалОтображения()
	
	Планировщик.НачалоПериодаОтображения = Начало;
	Планировщик.КонецПериодаОтображения = Окончание;
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(Начало, Окончание);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытие(Начало, Окончание, Значения, Текст)
	
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("Начало", Начало);
	ДанныеЗаписи.Вставить("Окончание", Окончание);
	
	ОткрытьФормуЗаписи(ДанныеЗаписи, Начало, Окончание, Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаписи(ДанныеЗаписи, НачалоТекущегоЭлемента, ОкончаниеТекущегоЭлемента, ДатаЗамещения, НоваяЗапись)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Начало", ДанныеЗаписи.Начало);
	ПараметрыЗаписи.Вставить("Окончание", ДанныеЗаписи.Окончание);
	
	ПараметрыЗаписи.Вставить("НачалоТекущегоЭлемента", НачалоТекущегоЭлемента);
	ПараметрыЗаписи.Вставить("ОкончаниеТекущегоЭлемента", ОкончаниеТекущегоЭлемента);
	
	ПараметрыЗаписи.Вставить("ДатаЗамещения", ДатаЗамещения);
	
	Если ДанныеЗаписи.Свойство("Название") Тогда
		ПараметрыЗаписи.Вставить("Название", ДанныеЗаписи.Название);
	КонецЕсли;
	
	Если ДанныеЗаписи.Свойство("Описание") Тогда
		ПараметрыЗаписи.Вставить("Описание", ДанныеЗаписи.Описание);
	КонецЕсли;
	
	Если ДанныеЗаписи.Свойство("Задача") Тогда
		ПараметрыЗаписи.Вставить("Задача", ДанныеЗаписи.Задача);
	КонецЕсли;
	
	Если ДанныеЗаписи.Свойство("Ошибка") Тогда
		ПараметрыЗаписи.Вставить("Ошибка", ДанныеЗаписи.Ошибка);
	КонецЕсли;
	
	Если ДанныеЗаписи.Свойство("ТехническийПроект") Тогда
		ПараметрыЗаписи.Вставить("ТехническийПроект", ДанныеЗаписи.ТехническийПроект);
	КонецЕсли;
	
	Если ДанныеЗаписи.Свойство("ВидДеятельности") Тогда
		ПараметрыЗаписи.Вставить("ВидДеятельности", ДанныеЗаписи.ВидДеятельности);
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("НоваяЗапись", НоваяЗапись);
	
	Если НоваяЗапись Тогда
		ИдентификаторЗаписи = Новый УникальныйИдентификатор();
		ПараметрыЗаписи.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи);
	Иначе
		ДанныеКлюча = Новый Структура;
		ДанныеКлюча.Вставить("Пользователь", ТекущийПользователь);
		ДанныеКлюча.Вставить("ИдентификаторЗаписи", ДанныеЗаписи.ИдентификаторЗаписи);
		
		ПараметрыСозданияКлюча = Новый Массив;
		ПараметрыСозданияКлюча.Добавить(ДанныеКлюча);
		
		КлючЗаписи = Новый ("РегистрСведенийКлючЗаписи.КалендариПользователей", ПараметрыСозданияКлюча);
		
		ПараметрыЗаписи.Вставить("Ключ", КлючЗаписи);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.КалендариПользователей.Форма.ЗаписьКалендаря", ПараметрыЗаписи, ЭтотОбъект);
				 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаписиИзЭлементаПланировщика(ДанныеЭлемента)
	
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("Начало", ДанныеЭлемента.Начало);
	ДанныеЗаписи.Вставить("Окончание", ДанныеЭлемента.Конец);
	
	ЗначенияЗаписи = ДанныеЭлемента.Значение;
	
	Если ТипЗнч(ЗначенияЗаписи) = Тип("Структура") Тогда
		ДанныеЗаписи.Вставить("Задача", ЗначенияЗаписи.Задача);
		ДанныеЗаписи.Вставить("Ошибка", ЗначенияЗаписи.Ошибка);
		ДанныеЗаписи.Вставить("ТехническийПроект", ЗначенияЗаписи.ТехническийПроект);
		ДанныеЗаписи.Вставить("ВидДеятельности", ЗначенияЗаписи.ВидДеятельности);
		ДанныеЗаписи.Вставить("ИдентификаторЗаписи", ЗначенияЗаписи.ИдентификаторЗаписи);
		ДанныеЗаписи.Вставить("Пользователь", ЗначенияЗаписи.Пользователь);
		ДанныеЗаписи.Вставить("Название", ЗначенияЗаписи.Название);
		ДанныеЗаписи.Вставить("Описание", ЗначенияЗаписи.Описание);
		ДанныеЗаписи.Вставить("Расписание", ЗначенияЗаписи.Расписание);
		ДанныеЗаписи.Вставить("ИдентификаторПовторения", ЗначенияЗаписи.ИдентификаторПовторения);
		ДанныеЗаписи.Вставить("ДатаЗамещения", ЗначенияЗаписи.ДатаЗамещения);
		ДанныеЗаписи.Вставить("Повторяется", ЗначенияЗаписи.Повторяется);
		ДанныеЗаписи.Вставить("ОкончаниеПовторения", ЗначенияЗаписи.ОкончаниеПовторения);
	КонецЕсли;
	
	Возврат ДанныеЗаписи;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеИнтервалаДат()
	
	Если ПериодПланировщика = "День" Тогда
		Начало = НачалоДня(ОтображаемаяДата);
		Окончание = КонецДня(ОтображаемаяДата);
	ИначеЕсли ПериодПланировщика = "Месяц" Тогда
		Начало = НачалоМесяца(ОтображаемаяДата);
		Окончание = КонецМесяца(ОтображаемаяДата);
	Иначе
		Начало = НачалоНедели(ОтображаемаяДата);
		Окончание = КонецНедели(ОтображаемаяДата);
	КонецЕсли;
	
	УстановитьИнтервалОтображения();
	ЗаполнитьПланировщикПоДаннымКалендаря();
	
	ОтображаемаяДата = Начало;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписи(ДанныеЗаписей)
	
	Для Каждого ДанныеЗаписи из ДанныеЗаписей Цикл
		ОбновитьЗапись(ДанныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗапись(ДанныеЗаписи)
	
	МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи,,"Расписание");
	
	Если ТипЗнч(Данныезаписи.Расписание) = Тип("РасписаниеЭлементаПланировщика") Тогда
		МенеджерЗаписи.Расписание = Новый ХранилищеЗначения(Данныезаписи.Расписание);
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСобытие(Работа, Дата)
	
	НачалоЧасаСобытия = НачалоЧаса(Дата);
	
	Если (Дата - НачалоЧасаСобытия) >= 1800 Тогда
		НачалоСобытия = НачалоЧасаСобытия + 1800;
	Иначе
		НачалоСобытия = НачалоЧасаСобытия;
	КонецЕсли;
	
	ОкончаниеСобытия = НачалоСобытия + 1800;
	
	МенеджерЗаписи = РегистрыСведений.КалендариПользователей.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = ТекущийПользователь;
	МенеджерЗаписи.ИдентификаторЗаписи = Новый УникальныйИдентификатор();
	МенеджерЗаписи.Начало = НачалоСобытия;
	МенеджерЗаписи.Окончание = ОкончаниеСобытия;
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		МенеджерЗаписи.Задача = Работа;
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.Ошибки") Тогда
		МенеджерЗаписи.Ошибка = Работа;
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		МенеджерЗаписи.ТехническийПроект = Работа;	
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.ВидыДеятельности") Тогда
		МенеджерЗаписи.ВидДеятельности = Работа;
	Иначе
		МенеджерЗаписи.Название = Строка(Работа);
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
	ЭлементПланировщика = Планировщик.Элементы.Добавить(МенеджерЗаписи.Начало, МенеджерЗаписи.Окончание);
	ЭлементПланировщика.Текст = Работа;
		
	ЗначениеЭлемента = Новый Структура;
		
	ЗначениеЭлемента.Вставить("Пользователь", МенеджерЗаписи.Пользователь);
	ЗначениеЭлемента.Вставить("ИдентификаторЗаписи", МенеджерЗаписи.ИдентификаторЗаписи);
	ЗначениеЭлемента.Вставить("Задача", МенеджерЗаписи.Задача);
	ЗначениеЭлемента.Вставить("Ошибка", МенеджерЗаписи.Ошибка);
	ЗначениеЭлемента.Вставить("ТехническийПроект", МенеджерЗаписи.ТехническийПроект);
	ЗначениеЭлемента.Вставить("ВидДеятельности", МенеджерЗаписи.ВидДеятельности);
	ЗначениеЭлемента.Вставить("Название", МенеджерЗаписи.Название);
	ЗначениеЭлемента.Вставить("Описание", МенеджерЗаписи.Описание);
	ЗначениеЭлемента.Вставить("Начало", МенеджерЗаписи.Начало);
	ЗначениеЭлемента.Вставить("Конец", МенеджерЗаписи.Окончание);
	ЗначениеЭлемента.Вставить("Расписание", МенеджерЗаписи.Расписание.Получить());
	ЗначениеЭлемента.Вставить("ИдентификаторПовторения", МенеджерЗаписи.ИдентификаторПовторения);
	ЗначениеЭлемента.Вставить("ДатаЗамещения", МенеджерЗаписи.ДатаЗамещения);
	ЗначениеЭлемента.Вставить("Повторяется", МенеджерЗаписи.Повторяется);
	ЗначениеЭлемента.Вставить("ОкончаниеПовторения", МенеджерЗаписи.ОкончаниеПовторения);
	
	ЭлементПланировщика.Значение = ЗначениеЭлемента;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСменуТекущегоПериодаОтображенияПланировщика()
	
	УстановитьИнтервалОтображения();
	ЗаполнитьПланировщикПоДаннымКалендаря();
	
	ОтображаемаяДата = Начало;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьШкалуВремени(Планировщик, ПериодПланировщика, ТочностьШкалыВремени)
	
	КоличествоЭлементов = Планировщик.ШкалаВремени.Элементы.Количество();
	Если КоличествоЭлементов >= 2 Тогда
		Для Индекс = 1 По КоличествоЭлементов - 1 Цикл
			ЭтотЭлемент = Планировщик.ШкалаВремени.Элементы[КоличествоЭлементов - Индекс];
			Планировщик.ШкалаВремени.Элементы.Удалить(ЭтотЭлемент);
		КонецЦикла;
	КонецЕсли;
	
	Если ПериодПланировщика = "День"
		Или ПериодПланировщика = "Неделя" Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		
		ШкалаВремениЧас = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремениЧас.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремениЧас.Единица = ТипЕдиницыШкалыВремени.Час;
		ШкалаВремениЧас.Кратность = 1;
		ШкалаВремениЧас.Формат = "DF='HH:mm'";
		
		ШкалаВремениМинута = Планировщик.ШкалаВремени.Элементы.Добавить();
		ШкалаВремениМинута.ОтображатьПериодическиеМетки = Ложь;
		ШкалаВремениМинута.Единица = ТипЕдиницыШкалыВремени.Минута;
		ШкалаВремениМинута.Кратность = ТочностьШкалыВремени;
		ШкалаВремениМинута.Формат = "";
		
	ИначеЕсли ПериодПланировщика = "Месяц" Тогда
		
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		
		ШкалаВремени = Планировщик.ШкалаВремени.Элементы[0];
		ШкалаВремени.ОтображатьПериодическиеМетки = Истина;
		ШкалаВремени.Единица = ТипЕдиницыШкалыВремени.День;
		ШкалаВремени.Кратность = 1;
		ШкалаВремени.Формат = "ДФ='ddd, d MMM yyyy'";
		ШкалаВремени.ЦветФона = Новый Цвет();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиКалендаря()
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	НастройкаПериодПланировщика = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ПериодПланировщика");
	
	Если НастройкаПериодПланировщика = Неопределено Тогда
		ПериодПланировщика = "Неделя";
	Иначе
		ПериодПланировщика = НастройкаПериодПланировщика;
	КонецЕсли;
	
	НастройкаОтображатьПанельЗадачОшибок =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ОтображатьПанельЗадачОшибок");
	
	Если НастройкаОтображатьПанельЗадачОшибок = Неопределено Тогда
		ОтображатьПанельЗадачОшибок = Истина;
	Иначе
		ОтображатьПанельЗадачОшибок = НастройкаОтображатьПанельЗадачОшибок;
	КонецЕсли;
	
	НастройкаОтображатьВремя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ОтображатьВремя");
	
	Если НастройкаОтображатьВремя = Неопределено Тогда
		ОтображатьВремя = 0;
	Иначе
		ОтображатьВремя = НастройкаОтображатьВремя;
	КонецЕсли;
	
	НастройкаОтображатьВремяС = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ОтображатьВремяС");
	
	Если НастройкаОтображатьВремяС <> Неопределено Тогда
		НачалоОтображенияВремени = НастройкаОтображатьВремяС;
	КонецЕсли;
	
	НастройкаОтображатьВремяПо = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ОтображатьВремяПо");
	
	Если НастройкаОтображатьВремяПо <> Неопределено Тогда
		ОкончаниеОтображенияВремени = НастройкаОтображатьВремяПо;
	КонецЕсли;
	
	НастройкаТочностьШкалыВремени = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ТочностьШкалыВремени");
	
	Если НастройкаТочностьШкалыВремени = Неопределено Тогда
		ТочностьШкалыВремени = 30;
	Иначе
		ТочностьШкалыВремени = НастройкаТочностьШкалыВремени;
	КонецЕсли;
	
	НастройкаСостояниеЗадачОтбор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "СостояниеЗадачОтбор");
	
	Если ТипЗнч(НастройкаСостояниеЗадачОтбор) = Тип("СписокЗначений") Тогда
		СостояниеЗадачОтбор = НастройкаСостояниеЗадачОтбор;
	КонецЕсли;
	
	ОшибкиКомуНаправлена =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ОшибкиКомуНаправлена",
		                                                 Справочники.Пользователи.ПустаяСсылка());
		
	СписокСтатусовОшибок =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "СписокСтатусовОшибок",
		                                                 Новый СписокЗначений);
		
	ОтбиратьОшибкиОбработанныеСегодня =
	    ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ОтбиратьОшибкиОбработанныеСегодня", Ложь);
		
	СписокСтатусовТехническихПроектов =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "СписокСтатусовТехническихПроектов",
		                                                 Новый СписокЗначений);
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНастройкиОтображатьПанельЗадачОшибок()
	
	Элементы.ФормаОтображатьПанельЗадачОшибок.Пометка = НЕ Элементы.ФормаОтображатьПанельЗадачОшибок.Пометка;
	ОтображатьПанельЗадачОшибок = Элементы.ФормаОтображатьПанельЗадачОшибок.Пометка;
	Элементы.ГруппаРаботы.Видимость = ОтображатьПанельЗадачОшибок;
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъекта, "ОтображатьПанельЗадачОшибок", ОтображатьПанельЗадачОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаПланировщика()
	
	ОбработатьИзменениеИнтервалаДат();
	
	УстановитьВремяОтображенияПланировщика(Планировщик, ПериодПланировщика,
		НачалоОтображенияВремени, ОкончаниеОтображенияВремени);
		
	НастроитьОтображениеПланировщика(Планировщик, ПериодПланировщика, ТочностьШкалыВремени);
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъекта, "ПериодПланировщика", ПериодПланировщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементов()
	
	Элементы.ГруппаРаботы.Видимость = ОтображатьПанельЗадачОшибок;
	
	Если Не ДоступноИзменениеКалендарей Тогда
		Элементы.Планировщик.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Элементы.ЗадачиВедениеХронометража.Видимость = ИспользуетсяУчетВремени;
	Элементы.ОшибкиВедениеХронометража.Видимость = ИспользуетсяУчетВремени;
	Элементы.ВидыДеятельностиВедениеХронометража.Видимость = ИспользуетсяУчетВремени;
	
	Элементы.ГруппаЧтоОтображаетсяПодборЗадачи.Видимость = ИспользоватьОчередиЗадач;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВремяОтображенияПланировщика(Планировщик, ПериодПланировщика, НачалоОтображенияВремени, ОкончаниеОтображенияВремени)
	
	Если ПериодПланировщика = "День" ИЛИ ПериодПланировщика ="Неделя" Тогда
		ОтступНачало = (НачалоОтображенияВремени - НачалоДня(НачалоОтображенияВремени))/3600;
		
		Если ЗначениеЗаполнено(ОкончаниеОтображенияВремени) Тогда
			ОтступКонец = (КонецДня(НачалоОтображенияВремени) - ОкончаниеОтображенияВремени)/3600;
		Иначе
			ОтступКонец = 0;
		КонецЕсли;
		
		Планировщик.ОтступСНачалаПереносаШкалыВремени = ОтступНачало;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ОтступКонец;
	Иначе
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТочностьШкалыВремени(Планировщик, ПериодПланировщика,ТочностьШкалыВремени)
	
	Если ПериодПланировщика = "День" ИЛИ ПериодПланировщика = "Неделя" Тогда
		
		Для Каждого Шкала из Планировщик.ШкалаВремени.Элементы Цикл
			Если Шкала.Единица = ТипЕдиницыШкалыВремени.Минута Тогда
				Шкала.Кратность = ТочностьШкалыВремени;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПересекающиесяЭлементыПланировщикаДляОбработки(ТекущийЭлементПланировщика, ЕстьПредыдущие, ЕстьПоследующие, ЕстьВнутренние, ЕстьПовторяемые, НачалоПересекающихсяЭлементов, КонецПересекающихсяЭлементов)
	
	ПересекающиесяЭлементы = Новый Массив;
	
	Для Каждого ЭлементПланировщика из Планировщик.Элементы Цикл
		Если ЭлементПланировщика <> ТекущийЭлементПланировщика Тогда
			
			Если ТекущийЭлементПланировщика.Начало >= ЭлементПланировщика.Начало
				И ТекущийЭлементПланировщика.Начало <= ЭлементПланировщика.Конец
				ИЛИ ТекущийЭлементПланировщика.Конец <= ЭлементПланировщика.Конец
				И ТекущийЭлементПланировщика.Конец >= ЭлементПланировщика.Начало
				ИЛИ ТекущийЭлементПланировщика.Начало <= ЭлементПланировщика.Начало
				И ТекущийЭлементПланировщика.Конец >= ЭлементПланировщика.Конец Тогда
				
				ПересекающиесяЭлементы.Добавить(ЭлементПланировщика);
				
				Если ЭлементПланировщика.Начало < ТекущийЭлементПланировщика.Начало Тогда
					ЕстьПредыдущие = Истина;
				КонецЕсли;
				
				Если ЭлементПланировщика.Конец > ТекущийЭлементПланировщика.Конец Тогда
					ЕстьПоследующие = Истина;
				КонецЕсли;
				
				Если ЭлементПланировщика.Начало >= ТекущийЭлементПланировщика.Начало
					И ЭлементПланировщика.Конец <= ТекущийЭлементПланировщика.Конец Тогда
					ЕстьВнутренние = Истина;
				КонецЕсли;
				
				Если ЭлементПланировщика.Начало < НачалоПересекающихсяЭлементов
					ИЛИ НачалоПересекающихсяЭлементов = '00010101' Тогда
					НачалоПересекающихсяЭлементов = ЭлементПланировщика.Начало;
				КонецЕсли;
					
				Если ЭлементПланировщика.Конец > КонецПересекающихсяЭлементов Тогда
					КонецПересекающихсяЭлементов = ЭлементПланировщика.Конец;
				КонецЕсли;	
				
			КонецЕсли;
			
			Если ЭтоПовторяемыйЭлемент(ЭлементПланировщика) Тогда
				ЕстьПовторяемые = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПересекающиесяЭлементы;
			
КонецФункции

&НаКлиенте
Процедура ОпределитьСдвигЭлементаПланировщика(ЭлементПланировщика, СдвинутоНачало, СдвинутоОкончание, СдвигНачало, СдвигОкончание)
	
	ЗначениеЗаписи = ЭлементПланировщика.Значение;
	
	Если ТипЗнч(ЗначениеЗаписи) = Тип("Структура") Тогда
		
		Если НачалоДня(ЭлементПланировщика.Конец) <> НачалоДня(ЗначениеЗаписи.Конец)
			И НачалоДня(ЭлементПланировщика.Начало) <> НачалоДня(ЗначениеЗаписи.Начало) Тогда
			
			СдвинутоНачало = Истина;
			СдвинутоОкончание = Истина;
			СдвигНачало = 0;
			СдвигОкончание = 0;
		Иначе
			Если ЭлементПланировщика.Конец > ЗначениеЗаписи.Конец Тогда
				СдвинутоОкончание = Истина;
				СдвигОкончание = ЭлементПланировщика.Конец - ЗначениеЗаписи.Конец;
			КонецЕсли;
			
			Если ЭлементПланировщика.Начало < ЗначениеЗаписи.Начало Тогда
				СдвинутоНачало = Истина;
				СдвигНачало = ЗначениеЗаписи.Начало - ЭлементПланировщика.Начало;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СдвинутоНачало = Ложь;
		СдвинутоОкончание = Истина;
		СдвигНачало = 0;
		СдвигОкончание = ЭлементПланировщика.Конец - ЭлементПланировщика.Начало;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗначениеЭлементаПланировщика(ЭлементПланировщика)
	
	ЗаполнитьЗначенияСвойств(ЭлементПланировщика.Значение, ЭлементПланировщика,"Начало,Конец");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбработатьПересечениеЭлементовПланировщика(ТекущийЭлементПланировщика)
	
	СдвинутоНачало = Ложь;
	СдвинутоОкончание = Ложь;
	СдвигНачало = 0;
	СдвигОкончание = 0;
	
	ОпределитьСдвигЭлементаПланировщика(ТекущийЭлементПланировщика, СдвинутоНачало, СдвинутоОкончание,
	                                    СдвигНачало, СдвигОкончание);
	
	Если СдвинутоОкончание ИЛИ СдвинутоНачало Тогда
		
		ЕстьПредыдущие  = Ложь;
		ЕстьПоследующие = Ложь;
		ЕстьВнутренние  = Ложь;
		ЕстьПовторяемые = Ложь;
		НачалоПересекающихсяЭлементов = '00010101';
		КонецПересекающихсяЭлементов = '00010101';
		
		ПересекающиесяЭлементы = ПересекающиесяЭлементыПланировщикаДляОбработки(ТекущийЭлементПланировщика,
		                                                                        ЕстьПредыдущие,
		                                                                        ЕстьПоследующие,
		                                                                        ЕстьВнутренние,
																				ЕстьПовторяемые,
																				НачалоПересекающихсяЭлементов,
																				КонецПересекающихсяЭлементов);
																				
		Если ЕстьПовторяемые Тогда
			// Если есть пересечение с повторяемыми элементами, обработка не производится.
			Возврат;
		КонецЕсли;
		
		Если ПересекающиесяЭлементы.Количество()>0
			И ((СдвинутоНачало И (ЕстьПредыдущие ИЛИ ЕстьВнутренние))
			ИЛИ (СдвинутоОкончание И (ЕстьПоследующие ИЛИ ЕстьВнутренние))) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущийЭлементПланировщика", ТекущийЭлементПланировщика);
			ДополнительныеПараметры.Вставить("ПересекающиесяЭлементы", ПересекающиесяЭлементы);
			ДополнительныеПараметры.Вставить("СдвинутоНачало", СдвинутоНачало);
			ДополнительныеПараметры.Вставить("СдвинутоОкончание", СдвинутоОкончание);
			ДополнительныеПараметры.Вставить("СдвигНачало", СдвигНачало);
			ДополнительныеПараметры.Вставить("СдвигОкончание", СдвигОкончание);
			ДополнительныеПараметры.Вставить("НачалоПересекающихсяЭлементов", НачалоПересекающихсяЭлементов);
			ДополнительныеПараметры.Вставить("КонецПересекающихсяЭлементов", КонецПересекающихсяЭлементов);
			
			ТекстВопроса = НСтр("ru='Имеются элементы, пересекающиеся по времени с редактируемым. Что следует сделать?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаПересеченияЭлементовПланировщика",
			                                               ЭтотОбъект, ДополнительныеПараметры);
			
			СписокДействий = Новый СписокЗначений;
			СписокДействий.Добавить("ОставитьБезИзменений");
			
			Если (СдвинутоНачало И ЕстьПредыдущие ИЛИ СдвинутоОкончание И ЕстьПоследующие) И НЕ ЕстьВнутренние Тогда
				СписокДействий.Добавить("СократитьВремяПересекающихсяЭлементов");
			КонецЕсли;
			
			Если ((СдвинутоНачало ИЛИ СдвинутоОкончание) И ЕстьВнутренние) ИЛИ (СдвинутоОкончание И ЕстьПоследующие) Тогда
				СписокДействий.Добавить("СдвинутьПоследующиеЭлементы");
			КонецЕсли;
			
			Если ПересекающиесяЭлементы.Количество()=2 И (ЕстьПредыдущие И ЕстьПоследующие ИЛИ ЕстьВнутренние)
				И НЕ ИмеютсяПовторяемыеЭлементы(ПересекающиесяЭлементы)
				И МеждуЭлементамиИмеетсяПромежуток(ПересекающиесяЭлементы) Тогда
				
				СписокДействий.Добавить("РазместитьТекущийМеждуДругими");
			КонецЕсли;
			
			Если СписокДействий.Количество()<2 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыВыбораДействия = Новый Структура;
			ПараметрыВыбораДействия.Вставить("СписокДействий", СписокДействий);
			
			ОткрытьФорму("РегистрСведений.КалендариПользователей.Форма.ВыборДействияПриПересеченииЭлементовПланировщика",
			             ПараметрыВыбораДействия,ЭтаФорма,,,,ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВремя(ДобавляемоеВремя)
	
	ОчиститьСообщения();
	
	Элемент = Элементы.Планировщик;
	
	Если Элемент.ВыделенныеЭлементы.Количество()=0 Тогда
		ТекстСообщения = НСтр("ru='Для добавления времени необходимо выбрать элемент'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
		                        
	Если Элемент.ВыделенныеЭлементы.Количество() = 1 И НЕ ВыделеныПовторяемыеЭлементы() Тогда
		
		ЭлементПланировщика = Элемент.ВыделенныеЭлементы[0];
		ЭлементПланировщика.Конец = ЭлементПланировщика.Конец + 600;
		ПроверитьОбработатьПересечениеЭлементовПланировщика(ЭлементПланировщика);
		
	Иначе
		ТекстСообщения = НСтр("ru='Для добавления времени необходимо выбрать один элемент, не являющийся повторяемым.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;	
		
	ДанныеЗаписей = Новый Массив;
		
	Для Каждого ЭлементПланировщика из Элемент.ВыделенныеЭлементы Цикл
			
		ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ЭлементПланировщика);
		ДанныеЗаписей.Добавить(Данныезаписи);
		
		ОбновитьЗначениеЭлементаПланировщика(ЭлементПланировщика);
		
	КонецЦикла;
	
	ОбновитьЗаписи(ДанныеЗаписей);
	
КонецПроцедуры

&НаКлиенте
Функция ВыделеныПовторяемыеЭлементы()
	
	Результат = Ложь;
	
	Для Каждого ЭлементПланировщика из Элементы.Планировщик.ВыделенныеЭлементы Цикл
		
		Если ТипЗнч(ЭлементПланировщика.Значение.Расписание) = Тип("РасписаниеЭлементаПланировщика")
			ИЛИ ЗначениеЗаполнено(ЭлементПланировщика.ДатаЗамещения) И НЕ ЭтоЗамещающийЭлемент(ЭлементПланировщика) Тогда
			Результат = Истина;
			Прервать
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьДействиеДляОбработкиЭлементовПередУдалением()
	
	ТекстСообщения = НСтр("ru='Среди выделенных элементов имеются повторяемые. Необходимо определить дальнейшие действия.'");
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("УдалитьВыделенные", НСтр("ru='Удалить только выделенные'"));
	СписокКнопок.Добавить("УдалитьВсе", НСтр("ru='Удалить все повторяемые'"));
	СписокКнопок.Добавить("Отмена", НСтр("ru='Не удалять'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередУдалениемЭлементаПланировщикаЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, СписокКнопок,, "УдалитьВыделенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередУдалениемЭлементаПланировщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УдаляемыеДанные = Новый Массив;
	ОбрабатываемыеДанные = Новый Массив;
	ЗамещающиеДанныеДляОтметкиУдаления = Новый Массив;
	ДанныеДляДобавленияЗамещающих = Новый Соответствие;
	
	Если Результат = "УдалитьВыделенные" Тогда
		
		Для Каждого ЭлементПланировщика из Элементы.Планировщик.ВыделенныеЭлементы Цикл
			
			ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ЭлементПланировщика);
			
			Если ЭтоПовторяемыйЭлемент(ЭлементПланировщика) Тогда
				// Если это повторяемый элемент
				ЗаполнитьДанныеДляДобавленияЗамещающейЗаписи(ДанныеЗаписи, ЭлементПланировщика, ДанныеДляДобавленияЗамещающих);
			Иначе
				// Если это не повторяемый элемент
				Если ЭтоЗамещающийЭлемент(ЭлементПланировщика) Тогда
					ЗамещающиеДанныеДляОтметкиУдаления.Добавить(ДанныеЗаписи);
				Иначе
					// Обычные элементы (не повторяемые и не замещающие) просто удаляются
					УдаляемыеДанные.Добавить(ДанныеЗаписи.ИдентификаторЗаписи);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
			
	ИначеЕсли Результат = "УдалитьВсе" Тогда
		
		Для Каждого ЭлементПланировщика из Элементы.Планировщик.ВыделенныеЭлементы Цикл
			
			ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ЭлементПланировщика);
			
			Если ЭтоПовторяемыйЭлемент(ЭлементПланировщика) Тогда
				// Если это повторяемый элемент
				Если ОригинальныйЭлементИмеетЗамещающие(ЭлементПланировщика) Тогда
					
					Если ОбрабатываемыеДанные.Найти(ДанныеЗаписи.ИдентификаторЗаписи) = Неопределено Тогда
						ОбрабатываемыеДанные.Добавить(ДанныеЗаписи.ИдентификаторЗаписи);
					КонецЕсли;
				Иначе
					// Если замещающих нет, достаточно удалить запись оригинального элемента из регистра
					Если УдаляемыеДанные.Найти(ДанныеЗаписи.ИдентификаторЗаписи) = Неопределено Тогда
						УдаляемыеДанные.Добавить(ДанныеЗаписи.ИдентификаторЗаписи);
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Если это не повторяемый элемент
				Если ЭтоЗамещающийЭлемент(ЭлементПланировщика) Тогда
					ЗамещающиеДанныеДляОтметкиУдаления.Добавить(ДанныеЗаписи);
				Иначе
					// Обычные элементы (не повторяемые и не замещающие) просто удаляются
					УдаляемыеДанные.Добавить(ДанныеЗаписи.ИдентификаторЗаписи);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат = "УдалитьВыделенные" ИЛИ Результат = "УдалитьВсе" Тогда
		ОбработатьУдалениеЭлементовПланировщика(УдаляемыеДанные, ОбрабатываемыеДанные, ЗамещающиеДанныеДляОтметкиУдаления,
		                                        ДанныеДляДобавленияЗамещающих);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЗамещающийЭлемент(ЭлементПланировщика)
	
	Результат = Ложь;
	
	Если ТипЗнч(ЭлементПланировщика.Родитель) = Тип("ЭлементПланировщика") Тогда
		Если ЭлементПланировщика.Родитель.ЗамещающиеЭлементы <> Неопределено Тогда
			
			Если ЭлементПланировщика.Родитель.ЗамещающиеЭлементы.Найти(ЭлементПланировщика.ДатаЗамещения) <> Неопределено Тогда
				Результат = Истина;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОригинальныйЭлементИмеетЗамещающие(ЭлементПланировщика)
	
	Результат = Ложь;
	
	Если ТипЗнч(ЭлементПланировщика.Родитель) = Тип("ЭлементПланировщика") Тогда
		Если ЭлементПланировщика.Родитель.ЗамещающиеЭлементы <> Неопределено
			И ЭлементПланировщика.Родитель.ЗамещающиеЭлементы.Количество()>0 Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Процедура ОбработатьУдалениеЭлементовПланировщика(УдаляемыеДанные, ОбрабатываемыеДанные, ЗамещающиеДанныеДляОтметкиУдаления, ДанныеДляДобавленияЗамещающих)
	
	РегистрыСведений.КалендариПользователей.ДобавитьЗаписиЗамещающихЭлементов(ДанныеДляДобавленияЗамещающих, Истина);
	
	РегистрыСведений.КалендариПользователей.ДобавитьОтметкуОбУдалении(ЗамещающиеДанныеДляОтметкиУдаления);
	
	РегистрыСведений.КалендариПользователей.УдалитьЗаписиПоИдентификаторам(ТекущийПользователь, УдаляемыеДанные);
	
	РегистрыСведений.КалендариПользователей.ОтвязатьЗамещающиеУдалитьПовторяемые(ТекущийПользователь, ОбрабатываемыеДанные);
	
	ЗаполнитьПланировщикПоДаннымКалендаря();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУдалениеБезПовторяемыхЭлементов(ДанныеУдаленныхЗамещающихЭлементов, ДанныеУдаляемыхЗаписей)
	
	РегистрыСведений.КалендариПользователей.ДобавитьОтметкуОбУдалении(ДанныеУдаленныхЗамещающихЭлементов);
	РегистрыСведений.КалендариПользователей.УдалитьЗаписиПоИдентификаторам(ТекущийПользователь, ДанныеУдаляемыхЗаписей);
	
	ЗаполнитьПланировщикПоДаннымКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДействиеДляОбработкиЭлементовПриОкончанииРедактирования(СвойстваВыделенныхЭлементов)
	
	ТекстСообщения = НСтр("ru='Среди выделенных элементов имеются повторяемые. Необходимо определить дальнейшие действия.'");
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить("ИзменитьВыделенные", НСтр("ru='Изменить только выделенные'"));
	СписокКнопок.Добавить("ИзменитьВсе", НСтр("ru='Изменить все повторяемые'"));
	СписокКнопок.Добавить("Отмена", НСтр("ru='Не изменять'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СвойстваВыделенныхЭлементов", СвойстваВыделенныхЭлементов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияПланировщикаЗавершение",
	                                              ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, СписокКнопок,, "ИзменитьВыделенные");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияПланировщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляОбновления = Новый Массив;
	ДанныеДляДобавленияЗамещающих = Новый Соответствие;
	ДанныеДляОбновленияИсходнойИЗамещающихЗаписей = Новый Соответствие;
	
	СвойстваВыделенныхЭлементов = ДополнительныеПараметры.СвойстваВыделенныхЭлементов;
	
	Если Результат = "ИзменитьВыделенные" Тогда
		
		Для Каждого ДанныеЭлементаПланировщика из СвойстваВыделенныхЭлементов Цикл
			
			ЭлементПланировщика = ДанныеЭлементаПланировщика.Ключ;
			СвойстваЭлемента = ДанныеЭлементаПланировщика.Значение;
			
			ОбновитьСвойстваЭлементаПланировщика(ЭлементПланировщика, СвойстваЭлемента);
			ОбновитьЗначениеЭлементаПланировщика(ЭлементПланировщика);
			
			ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ЭлементПланировщика);
			
			Если ЭтоПовторяемыйЭлемент(ЭлементПланировщика) Тогда
				// Если это повторяемый элемент
				ЗаполнитьДанныеДляДобавленияЗамещающейЗаписи(ДанныеЗаписи, ЭлементПланировщика, ДанныеДляДобавленияЗамещающих);
			Иначе
				ДанныеДляОбновления.Добавить(ДанныеЗаписи);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Результат ="ИзменитьВсе" Тогда
		
		Для Каждого ДанныеЭлементаПланировщика из СвойстваВыделенныхЭлементов Цикл
			
			ЭлементПланировщика = ДанныеЭлементаПланировщика.Ключ;
			СвойстваЭлемента = ДанныеЭлементаПланировщика.Значение;
			
			ОбновитьСвойстваЭлементаПланировщика(ЭлементПланировщика, СвойстваЭлемента);
			ОбновитьЗначениеЭлементаПланировщика(ЭлементПланировщика);
			
			ДанныеЗаписи = ДанныеЗаписиИзЭлементаПланировщика(ЭлементПланировщика);
			
			Если ЭтоПовторяемыйЭлемент(ЭлементПланировщика) Тогда
				// Если это повторяемый элемент
				ЗначениеДляОбновления = ДанныеДляОбновленияИсходнойИЗамещающихЗаписей.Получить(ДанныеЗаписи.ИдентификаторЗаписи);
				
				Если ЗначениеДляОбновления = Неопределено Тогда
					ДанныеДляОбновленияИсходнойИЗамещающихЗаписей.Вставить(ДанныеЗаписи.ИдентификаторЗаписи, ДанныеЗаписи);
				КонецЕсли;
			Иначе
				ДанныеДляОбновления.Добавить(ДанныеЗаписи);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат = "ИзменитьВыделенные" ИЛИ Результат = "ИзменитьВсе" Тогда
		ОбработатьОкончаниеРедактированияПланировщика(ДанныеДляОбновления, ДанныеДляДобавленияЗамещающих,
	                                                  ДанныеДляОбновленияИсходнойИЗамещающихЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОкончаниеРедактированияПланировщика(ДанныеДляОбновления, ДанныеДляДобавленияЗамещающих, ДанныеДляОбновленияИсходнойИЗамещающихЗаписей)
	
	ОбновитьЗаписи(ДанныеДляОбновления);
	РегистрыСведений.КалендариПользователей.ДобавитьЗаписиЗамещающихЭлементов(ДанныеДляДобавленияЗамещающих, Ложь);
	РегистрыСведений.КалендариПользователей.ОбновитьИсходнуюЗаписьИДатыЗамещающих(ДанныеДляОбновленияИсходнойИЗамещающихЗаписей);
	
	ЗаполнитьПланировщикПоДаннымКалендаря();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеДляДобавленияЗамещающейЗаписи(ДанныеЗаписи, ЭлементПланировщика, ДанныеДляДобавленияЗамещающих)
	
	ДанныеЗаписи.Вставить("ДатаЗамещения", ЭлементПланировщика.ДатаЗамещения);
	
	ДанныеДляДобавления = ДанныеДляДобавленияЗамещающих.Получить(ДанныеЗаписи.ИдентификаторЗаписи);
	
	Если ДанныеДляДобавления = Неопределено Тогда
		ДанныеДляДобавления = Новый Массив;
		ДанныеДляДобавления.Добавить(ДанныеЗаписи);
		ДанныеДляДобавленияЗамещающих.Вставить(ДанныеЗаписи.ИдентификаторЗаписи, ДанныеДляДобавления);
	Иначе
		ДанныеДляДобавления.Добавить(ДанныеЗаписи);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваЭлементаПланировщика(ЭлементПланировщика)
	
	СвойстваЭлемента = Новый Структура;
	
	СвойстваЭлемента.Вставить("Начало", ЭлементПланировщика.Начало);
	СвойстваЭлемента.Вставить("Конец", ЭлементПланировщика.Конец);
	СвойстваЭлемента.Вставить("ДатаЗамещения", ЭлементПланировщика.ДатаЗамещения);
	
	Возврат СвойстваЭлемента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваЭлементовПланировщика(ЭлементыПланировщика)
	
	СвойстваЭлементов = Новый Соответствие;
	
	Для Каждого ЭлементПланировщика из ЭлементыПланировщика Цикл
		СвойстваЭлементов.Вставить(ЭлементПланировщика, СвойстваЭлементаПланировщика(ЭлементПланировщика));
	КонецЦикла;
	
	Возврат СвойстваЭлементов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСвойстваЭлементаПланировщика(ЭлементПланировщика, СвойстваЭлемента)
	
	ЗаполнитьЗначенияСвойств(ЭлементПланировщика, СвойстваЭлемента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмеютсяПовторяемыеЭлементы(КоллекцияЭлементовПланировщика)
	
	Результат = Ложь;
	
	Для Каждого ЭлементПланировщика из КоллекцияЭлементовПланировщика Цикл
		Если ЭтоПовторяемыйЭлемент(ЭлементПланировщика) Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МеждуЭлементамиИмеетсяПромежуток(КоллекцияЭлементовПланировщика)
	
	Результат = Ложь;
	
	ПредыдущийЭлемент = Неопределено;
	
	Для Каждого ЭлементПланировщика из КоллекцияЭлементовПланировщика Цикл
		
		Если ПредыдущийЭлемент  <> Неопределено Тогда
			Если ЭлементПланировщика.Начало > ПредыдущийЭлемент.Конец
				ИЛИ ПредыдущийЭлемент.Начало > ЭлементПланировщика.Конец Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущийЭлемент = ЭлементПланировщика;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПовторяемыйЭлемент(ЭлементПланировщика)
	
	Результат = Ложь;
	
	Если ТипЗнч(ЭлементПланировщика.Значение.Расписание) = Тип("РасписаниеЭлементаПланировщика")
		И ЗначениеЗаполнено(ЭлементПланировщика.ДатаЗамещения) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

&НаСервере
Функция РезультатПереключенияХронометражаНаСервере(ИмяСписка, ВыбраннаяСтрока, ВыполнитьБезусловно)
	
	Результат = Новый Структура;
	Результат.Вставить("ПереключениеВозможно", Истина);
	Результат.Вставить("ДанныеХронометража",   Неопределено);
	
	СписокЯвляетсяДеревом = ТипЗнч(ЭтотОбъект[ИмяСписка]) = Тип("ДанныеФормыДерево");
	
	Если СписокЯвляетсяДеревом Тогда
		ДанныеСтрокиДерева = ЭтотОбъект[ИмяСписка].НайтиПоИдентификатору(ВыбраннаяСтрока);
		Работа = ДанныеСтрокиДерева.Работа;
	Иначе
		Работа = ВыбраннаяСтрока;
	КонецЕсли;
	
	Если Не ВыполнитьБезусловно
		И Не УчетВремени.ХронометражВключен(ТекущийПользователь, Работа)
		И ИспользоватьОчередиЗадач Тогда
		
		Результат.ПереключениеВозможно = РегистрыСведений.ОчередиРаботСотрудников.РаботаПерваяВОчереди(ТекущийПользователь, Работа);
		
	КонецЕсли;
	
	Если Результат.ПереключениеВозможно Тогда
		Результат.ДанныеХронометража = УчетВремени.ПереключитьХронометраж(Работа);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПереключениеХронометража(ИмяСписка, ВыбраннаяСтрока, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИмяСписка = "Задачи" 
		Или ИмяСписка = "ОчередьЗадач" Тогда
		
		Результат = РезультатПереключенияХронометражаНаСервере(ИмяСписка, ВыбраннаяСтрока, Ложь);
		
		Если Не Результат.ПереключениеВозможно Тогда
		
			ВопросПользователю = НСтр("ru = 'Работа для которой начинается хронометраж не является первой задачей очереди. Все равно продолжить?'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ИмяСписка",       ИмяСписка);
			ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
			
			
			ПодборНеПоОчередиПослеОтвета = Новый ОписаниеОповещения("ПодборНеПоОчередиПослеОтвета", ЭтотОбъект, ДополнительныеПараметры);
			
			КнопкаПоУмолчанию = КодВозвратаДиалога.Отмена;
			
			КнопкиВопроса = Новый СписокЗначений;
			
			Если Элементы.ГруппаЗадачиОшибки.ТекущаяСтраница <> Элементы.СтраницаЗадачи 
				Или Элементы.СтраницыЗадачиОчередьЗадач.ТекущаяСтраница <> Элементы.СтраницаОчередьЗадач Тогда
				КнопкиВопроса.Добавить("ВОчередьРабот", НСтр("ru = 'В очередь работ'"));
				КнопкаПоУмолчанию = "ВОчередьРабот";
			КонецЕсли;
			
			КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК);
			КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(ПодборНеПоОчередиПослеОтвета, 
			               ВопросПользователю,
			               КнопкиВопроса,,
			               КнопкаПоУмолчанию);
			
		Иначе
			
			ПослеПереключенияХронометража(Результат.ДанныеХронометража);
			
		КонецЕсли;
		
	Иначе
		
		Результат = РезультатПереключенияХронометражаНаСервере(ИмяСписка, ВыбраннаяСтрока, Истина);
		ПослеПереключенияХронометража(Результат.ДанныеХронометража);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНеПоОчередиПослеОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Результат = РезультатПереключенияХронометражаНаСервере(ДополнительныеПараметры.ИмяСписка, ДополнительныеПараметры.ВыбраннаяСтрока, Истина);
		ПослеПереключенияХронометража(Результат.ДанныеХронометража);
		
	ИначеЕсли Результат = "ВОчередьРабот" Тогда
		
		Элементы.СтраницыЗадачиОчередьЗадач.ТекущаяСтраница = Элементы.СтраницаОчередьЗадач;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПереключенияХронометража(ДанныеХронометража)

	Оповестить("ПереключенХронометраж", ДанныеХронометража, ЭтотОбъект);
	
	Если ДанныеХронометража.ХронометражЗавершен Тогда
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("Начало", ДанныеХронометража.НачалоЗавершеннойРаботы);
		ДанныеОповещения.Вставить("Окончание", ДанныеХронометража.ОкончаниеЗавершеннойРаботы);
		
		Оповестить("ЗаписаныДанныеКалендаря", ДанныеОповещения, ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСостояниеЗадач()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задачи,
	                                                                        "Состояние",
	                                                                        СостояниеЗадачОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        СостояниеЗадачОтбор.Количество() > 0);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораСостояниеЗадач()
	
	УстановитьОтборСостояниеЗадач();
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъекта, "СостояниеЗадачОтбор", СостояниеЗадачОтбор);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОшибкиКомуНаправлена()
	
	УстановитьОтборОшибокКомуНаправлена();
																			
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъекта, "ОшибкиКомуНаправлена", ОшибкиКомуНаправлена);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОшибокКомуНаправлена()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ошибки,
																			"КомуНаправлена",
																			ОшибкиКомуНаправлена,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(ОшибкиКомуНаправлена));
																			
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатусовОшибок()
	
	УстановитьОтборОшибокПоСтатусу();
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъекта, "СписокСтатусовОшибок", СписокСтатусовОшибок);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОшибокПоСтатусу();
	
	ИспользоватьОтборСтатусыОшибок = СписокСтатусовОшибок.Количество()>0;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ошибки,
																			"Статус",
																			СписокСтатусовОшибок,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ИспользоватьОтборСтатусыОшибок);
																			
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораОшибокОбработанныхСегодня()
	
	УстановитьОтборОшибкиОбработанныеСегодня();
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъекта, "ОтбиратьОшибкиОбработанныеСегодня", ОтбиратьОшибкиОбработанныеСегодня);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОшибкиОбработанныеСегодня()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ошибки,
																			"ОбработанаСегодня",
																			Истина,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ОтбиратьОшибкиОбработанныеСегодня);
																			
КонецПРоцедуры

&НаКлиенте
Процедура УстановкаДатыВСпискеОшибок()
	
	Ошибки.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатусовТехническихПроектов()
	
	УстановитьОтборТехническихПроектовПоСтатусу();
	
	ИмяОбъекта = "НастройкиКалендаряПользователя";
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъекта, "СписокСтатусовТехническихПроектов",
	                                                 СписокСтатусовТехническихПроектов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТехническихПроектовПоСтатусу();
	
	ИспользоватьОтборСтатусыТехническихПроектов = СписокСтатусовТехническихПроектов.Количество()>0;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ТехническиеПроекты,
																			"Статус",
																			СписокСтатусовТехническихПроектов,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ИспользоватьОтборСтатусыТехническихПроектов);
																			
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписки()
	
	Элементы.Ошибки.Обновить();
	Элементы.ТехническиеПроекты.Обновить();
	Элементы.ВидыДеятельности.Обновить();
	
	Если ОтображатьВПодбореЗадач = "ОчередиРабот" Тогда
		ОбновитьДеревоОчередиЗадач(Истина);
	Иначе
		Элементы.Задачи.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыРаботыСДеревомОчередиЗадач

&НаСервере
Процедура ОбновитьДеревоОчередиЗадач(ТолькоФлагХронометража)
	
	Если ТолькоФлагХронометража Тогда
		ОбновитьФлагХронометражаОчередьЗадач();
	Иначе
		ЗаполнитьДеревоОчередьЗадач();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагХронометражаОчередьЗадач()
	
	Если ОчередьЗадач.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДереваОчереди = ДанныеДереваОчереди();
	
	ДанныеХронометража = УчетВремени.ДанныеХронометража(ТекущийПользователь);
	
	Если ДанныеХронометража.Работа <> ДанныеДереваОчереди.ЗадачаСХронометражом Тогда
		
		Если ЗначениеЗаполнено(ДанныеХронометража.Работа) Тогда
			
			ИдентификаторСтроки = ДанныеДереваОчереди.ИдентификаторыСтрок.Получить(ДанныеХронометража.Работа);
			Если ИдентификаторСтроки <> Неопределено Тогда
				ДанныеСтроки =  ОчередьЗадач.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если ДанныеСтроки <> Неопределено Тогда
					ДанныеСтроки.ИндексКартинкиХронометража = 0; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДереваОчереди.ЗадачаСХронометражом) Тогда
			
			ИдентификаторСтроки = ДанныеДереваОчереди.ИдентификаторыСтрок.Получить(ДанныеДереваОчереди.ЗадачаСХронометражом);
			Если ИдентификаторСтроки <> Неопределено Тогда
				ДанныеСтроки =  ОчередьЗадач.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если ДанныеСтроки <> Неопределено Тогда
					ДанныеСтроки.ИндексКартинкиХронометража = 1; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДереваОчереди()

	ДанныеДереваОчереди = Новый Структура;
	ДанныеДереваОчереди.Вставить("ОтображаемыеЗадачи",   Новый Массив);
	ДанныеДереваОчереди.Вставить("ИдентификаторыСтрок",  Новый Соответствие);
	ДанныеДереваОчереди.Вставить("ЗадачаСХронометражом", Неопределено);
	
	ЗаполнитьДанныеДереваОчередиПоСтрокамОчереди(ОчередьЗадач.ПолучитьЭлементы() ,ДанныеДереваОчереди);
	
	Возврат ДанныеДереваОчереди;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеДереваОчередиПоСтрокамОчереди(СтрокиДерева ,ДанныеДереваОчереди)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.Работа) Тогда
			Возврат;
		КонецЕсли;
		
		ДанныеДереваОчереди.ОтображаемыеЗадачи.Добавить(СтрокаДерева.Работа);
		ДанныеДереваОчереди.ИдентификаторыСтрок.Вставить(СтрокаДерева.Работа, СтрокаДерева.ПолучитьИдентификатор());
		Если СтрокаДерева.ИндексКартинкиХронометража = 0 Тогда
			ДанныеДереваОчереди.ЗадачаСХронометражом = СтрокаДерева.Работа;
		КонецЕсли;
		
		ЗаполнитьДанныеДереваОчередиПоСтрокамОчереди(СтрокаДерева.ПолучитьЭлементы() ,ДанныеДереваОчереди)
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОчередьЗадач()
	
	РегистрыСведений.ОчередиРаботСотрудников.УстановитьФорматПорядокНомерОчереди(ТекущийПользователь,
	                                                                             Элементы.ОчередьЗадачПорядокНомерОчереди);
	
	ОчередьЗадач.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                        КАК Задача,
	|	ЗадачиПроцесса.Статус                        КАК СтатусЗадачи,
	|	ЗадачиПроцесса.Предмет                       КАК Предмет,
	|	ЗадачиПроцесса.КрайняяДатаОкончания          КАК СрокВыполненияЗадачи,
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди КАК ПорядокНомерВОчереди,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ КАК ДатаИзмененияСтатусаЗадачи,
	|	ВЫБОР
	|		КОГДА ХронометражРабочегоВремени.Начало ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ                                        КАК ИндексКартинкиХронометража,
	|	ОчередиРаботСотрудников.Приоритет            КАК Приоритет
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ОчередиРаботСотрудников.Работа = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХронометражРабочегоВремени КАК ХронометражРабочегоВремени
	|			ПО (ХронометражРабочегоВремени.Пользователь = &ТекущийСотрудник)
	|			И ОчередиРаботСотрудников.Работа = ХронометражРабочегоВремени.Работа
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &ТекущийСотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди";
	
	Запрос.УстановитьПараметр("ТекущийСотрудник", ТекущийПользователь);
	
	ВыборкаЗадачи = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		СтрокаЗадача = ОчередьЗадач.ПолучитьЭлементы().Добавить();
		СтрокаЗадача.Работа                      = ВыборкаЗадачи.Задача;
		СтрокаЗадача.Предмет                     = ВыборкаЗадачи.Предмет;
		СтрокаЗадача.СрокВыполнения              = ВыборкаЗадачи.СрокВыполненияЗадачи;
		СтрокаЗадача.Статус                      = ВыборкаЗадачи.СтатусЗадачи;
		СтрокаЗадача.ДатаСтатуса                 = ВыборкаЗадачи.ДатаИзмененияСтатусаЗадачи;
		СтрокаЗадача.ПорядокНомерОчереди         = ВыборкаЗадачи.ПорядокНомерВОчереди;
		СтрокаЗадача.ИндексКартинкиХронометража  = ВыборкаЗадачи.ИндексКартинкиХронометража;
		
		ПустаяСтрока = СтрокаЗадача.ПолучитьЭлементы().Добавить();
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаОтображенияЗадач()

	Если ОтображатьВПодбореЗадач = "ОчередиРабот" Тогда
		
		ЗаголовокГруппы = НСтр("ru = 'Моя очередь задач'");
		Элементы.СтраницыЗадачиОчередьЗадач.ТекущаяСтраница = Элементы.СтраницаОчередьЗадач;
		ОбновитьДеревоОчередиЗадач(Ложь);
		
	Иначе
		
		ЗаголовокГруппы = НСтр("ru = 'Все мои задачи'");
		Элементы.СтраницыЗадачиОчередьЗадач.ТекущаяСтраница = Элементы.СтраницаЗадачиСписок;
		
	КонецЕсли;
	
	Элементы.ГруппаЧтоОтображаетсяПодборЗадачи.Заголовок = ЗаголовокГруппы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УровеньСтрокиДерева(СтрокаДерева) Экспорт

	Уровень = 0;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Уровень = Уровень + 1;
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Уровень;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПодчиненныеСтрокиДеревоОчередьЗадач(ДанныеСтроки) Экспорт
	
	ПодчиненныеСтроки = ДанныеСтроки.ПолучитьЭлементы();
	ДанныеСтроки.ПолучитьЭлементы().Очистить();
	
	ДанныеПодчиненныхЗадач = ДанныеПодчиненныхЗадач(ДанныеСтроки.Работа, ТекущийПользователь);
	
	Для Каждого ДанныеЗадачи Из ДанныеПодчиненныхЗадач Цикл
		
		СтрокаЗадача = ПодчиненныеСтроки.Добавить();
		СтрокаЗадача.Работа                      = ДанныеЗадачи.Задача;
		СтрокаЗадача.Предмет                     = ДанныеСтроки.Предмет;
		СтрокаЗадача.СрокВыполнения              = ДанныеЗадачи.СрокВыполнения;
		СтрокаЗадача.Статус                      = ДанныеЗадачи.Статус;
		СтрокаЗадача.ДатаСтатуса                 = ДанныеЗадачи.ДатаИзмененияСтатуса;
		СтрокаЗадача.ИндексКартинкиХронометража  = ДанныеЗадачи.ИндексКартинкиХронометража;
		
		ПустаяСтрока = СтрокаЗадача.ПолучитьЭлементы().Добавить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПодчиненныхЗадач(ЗадачаРодитель, ТекущийПользователь)
	
	ДанныеПодчиненныхЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка               КАК Ссылка,
	|	ЗадачиПроцесса.Статус               КАК Статус,
	|	ЗадачиПроцесса.КрайняяДатаОкончания КАК СрокВыполнения,
	|	ЗадачиПроцесса.Исполнитель          КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаНачала
	|		КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ЗадачиПроцесса.ФактическаяДатаОкончания
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1)
	|	КОНЕЦ                               КАК ДатаИзмененияСтатуса,
	|	ВЫБОР
	|		КОГДА ХронометражРабочегоВремени.Начало ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиХронометража
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХронометражРабочегоВремени КАК ХронометражРабочегоВремени
	|			ПО (ХронометражРабочегоВремени.Пользователь = &ТекущийПользователь)
	|			И ЗадачиПроцесса.Ссылка = ХронометражРабочегоВремени.Работа
	|ГДЕ
	|	ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|	И ЗадачиПроцесса.Родитель = &ЗадачаРодитель
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияЗадачПроцессов.ЗначениеУпорядочивания";
	
	Запрос.УстановитьПараметр("ЗадачаРодитель",      ЗадачаРодитель);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеЗадачи = Новый Структура;
		ДанныеЗадачи.Вставить("Задача",                     Выборка.Ссылка);
		ДанныеЗадачи.Вставить("Статус",                     Выборка.Статус);
		ДанныеЗадачи.Вставить("СрокВыполнения",             Выборка.СрокВыполнения);
		ДанныеЗадачи.Вставить("ДатаИзмененияСтатуса",       Выборка.ДатаИзмененияСтатуса);
		ДанныеЗадачи.Вставить("Исполнитель",                Выборка.Исполнитель);
		ДанныеЗадачи.Вставить("ИндексКартинкиХронометража", Выборка.ИндексКартинкиХронометража);
		
		ДанныеПодчиненныхЗадач.Добавить(ДанныеЗадачи);
		
	КонецЦикла;
	
	Возврат ДанныеПодчиненныхЗадач;
	
КонецФункции

&НаСервере
Процедура УстановитьПанельПодбораЗадачПриСозданииНаСервере()
	
	Если ПустаяСтрока(ОтображатьВПодбореЗадач) Тогда
		
		Если ИспользоватьОчередиЗадач Тогда
			ОтображатьВПодбореЗадач = "ОчередиРабот";
			ПриИзмененииРежимаОтображенияЗадач();
		Иначе
			ОтображатьВПодбореЗадач = "ЗадачиСписком";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчередьРаботОбновитьНаСервере()
	
	ЗаполнитьДеревоОчередьЗадач();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти