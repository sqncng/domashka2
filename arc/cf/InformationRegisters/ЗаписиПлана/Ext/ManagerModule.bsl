#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет запись в регистр
//
// Параметры:
//  ДанныеЗаписи  - Структура - - содержит:
//   * ИдентификаторПлана - Число
//   * Сотрудник          - СправочникСсылка.Пользователи
//   * Работа             - СправочникСсылка.ЗадачиПроцессов, СправочникСсылка.ТехническиеПроекты, СправочникСсылка.Ошибки, СправочникСсылка.ВидыДеятельности
//   * Цель               - Строка
//   * Комментарий        - Строка
//
Процедура ЗаписатьДанные(ДанныеЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПлана.Установить(ДанныеЗаписи.ИдентификаторПлана);
	НаборЗаписей.Отбор.Сотрудник.Установить(ДанныеЗаписи.Сотрудник);
	НаборЗаписей.Отбор.Работа.Установить(ДанныеЗаписи.Работа);
	НаборЗаписей.Отбор.ТипСтрокиПлана.Установить(ДанныеЗаписи.ТипСтрокиПлана);
	НаборЗаписей.Отбор.Группировка.Установить(ДанныеЗаписи.Группировка);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		
	Иначе
		
		ЗаписьНабора = НаборЗаписей[0];
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеЗаписи);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет запись плана
//
// Параметры:
//  ДанныеЗаписи  - Структура - - содержит:
//   * ИдентификаторПлана - Число
//   * Сотрудник          - СправочникСсылка.Пользователи
//   * Работа             - СправочникСсылка.ЗадачиПроцессов, СправочникСсылка.ТехническиеПроекты, СправочникСсылка.Ошибки, СправочникСсылка.ВидыДеятельности
//   * Цель               - Строка
//   * Комментарий        - Строка
//
Процедура УдалитьЗаписьПлана(ДанныеЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПлана.Установить(ДанныеЗаписи.ИдентификаторПлана);
	НаборЗаписей.Отбор.Сотрудник.Установить(ДанныеЗаписи.Сотрудник);
	НаборЗаписей.Отбор.Работа.Установить(ДанныеЗаписи.Работа);
	НаборЗаписей.Отбор.ТипСтрокиПлана.Установить(ДанныеЗаписи.ТипСтрокиПлана);
	НаборЗаписей.Отбор.Группировка.Установить(ДанныеЗаписи.Группировка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получает записи плана по сотруднику и работе начиная с указанной даты
//
// Параметры:
//  ВидПлана      - СправочникСсылка.ВидыПланов - вид плана, по которому получаются виды записи.
//  НачалоПериода - Дата - дата, с которой требуется получить записи.
//  Сотрудник     - СправочникСсылка.Пользователи - сотрудник, для которого получаются записи.
//  Работа        - Произвольный - дата, с которой требуется получить записи.
//
// Возвращаемое значение:
//   ТаблицаЗначений  - содержит колонки:
//     * ИдентификаторПлана      - Число - 
//     * Сотрудник               - СправочникСсылка.Пользователи - 
//     * Работа                  - Призвольный - 
//     * ПланируемыеТрудозатраты - Число - Планируемые трудозатраты по работе
//
Функция ЗаписиПланаПоСотрудникуИРаботеНачинаяС(ВидПлана, НачалоПериода, Сотрудник, Работа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаписиПлана.ИдентификаторПлана      КАК ИдентификаторПлана,
	|	ЗаписиПлана.Сотрудник               КАК Сотрудник,
	|	ЗаписиПлана.Работа                  КАК Работа,
	|	ЗаписиПлана.ПланируемыеТрудозатраты КАК ПланируемыеТрудозатраты
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И Планы.НачалоПериода >= &НачалоПериода
	|	И ЗаписиПлана.Сотрудник = &Сотрудник
	|	И ЗаписиПлана.Работа = &Работа";
	
	Запрос.УстановитьПараметр("ВидПлана",      ВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("Сотрудник",     Сотрудник);
	Запрос.УстановитьПараметр("Работа",        Работа);
	
	Возврат  Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецЕсли