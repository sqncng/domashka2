
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Патч.Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрименимостьПатчаВФоне(Параметры, ДляПубликации = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Применимость = ПатчиСлужебный.ПрименимостьПатча(Параметры, ДляПубликации);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Применимость;
	
КонецФункции

Процедура АктуализироватьСоставПатчейБазовыхВерсийВФоне(Параметры, ДополнительныеПараметры) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
	ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Параметры.Патч);
	ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Параметры.Версия);
	ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Параметры.ИдентификаторПатча);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = ПроверкаПатчейБазовыхВерсий(Параметры, ДополнительныеПараметры); 
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ПатчиБазовыхВерсий = ДополнительныеПараметры.ПатчиБазовыхВерсий;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
	ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Параметры.Патч);
	ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Параметры.Версия);
	ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Параметры.ИдентификаторПатча);
	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		Для Каждого Удаляемый Из Результат.Удаляемые Цикл
			НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Патч.Установить(Параметры.Патч);
			НаборЗаписей.Отбор.Версия.Установить(Параметры.Версия);
			НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(Удаляемый);
			УстановитьПривилегированныйРежим(Истина);
			НаборЗаписей.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЦикла;
		
		Для Каждого ДобавляемыйПатч Из Результат.Добавляемые Цикл
			ИдентификаторНовогоПатча = ДобавляемыйПатч.Идентификатор;
			ДанныеПодписанногоПатча  = ДобавляемыйПатч.Данные;
			
			СвойстваПатча = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(Параметры.ИдентификаторПатча, "*");
			
			НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Патч.Установить(Параметры.Патч);
			НаборЗаписей.Отбор.Версия.Установить(Параметры.Версия);
			НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(ИдентификаторНовогоПатча);
			ВерсияПатча = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ВерсияПатча, СвойстваПатча, , "УникальныйИдентификатор");
			ВерсияПатча.УникальныйИдентификатор = ИдентификаторНовогоПатча;
			ВерсияПатча.ВладелецПатча = Параметры.ИдентификаторПатча;
			Если ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.Опубликован Тогда
				ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.ОжидаетПубликации;
			КонецЕсли;
			СтарыеПараметры = ПатчиСлужебный.ПараметрыПатча(ВерсияПатча.Параметры.Получить());
			ЗаполнитьЗначенияСвойств(СтарыеПараметры, ДополнительныеПараметры, , "ПатчиБазовыхВерсий");
			СтарыеПараметры.ПатчиБазовыхВерсий.Очистить();
			
			ВерсияПатча.Параметры = Новый ХранилищеЗначения(СтарыеПараметры, Новый СжатиеДанных(9));
			ВерсияПатча.ДанныеПатча = Новый ХранилищеЗначения(ДанныеПодписанногоПатча, Новый СжатиеДанных(9));
			ВерсияПатча.УникальныйИдентификатор = ИдентификаторНовогоПатча;
			ВерсияПатча.ПодписанДляКонфигурации = ДобавляемыйПатч.Проект;
			НаборЗаписей.Записать();
			
			ПатчиБазовыхВерсий.Добавить(ИдентификаторНовогоПатча);
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Патч.Установить(Параметры.Патч);
		НаборЗаписей.Отбор.Версия.Установить(Параметры.Версия);
		НаборЗаписей.Отбор.УникальныйИдентификатор.Установить(Параметры.ИдентификаторПатча);
		НаборЗаписей.Прочитать();
		
		Запись = НаборЗаписей[0];
		ДополнительныеПараметры.Вставить("ПатчиБазовыхВерсий", ПатчиБазовыхВерсий);
		Запись.Параметры = Новый ХранилищеЗначения(ДополнительныеПараметры, Новый СжатиеДанных(9));
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверкаПатчейБазовыхВерсий(Параметры, ДополнительныеПараметры)
	ДобавленныеПатчиБазовых = Неопределено;
	Если Не ДополнительныеПараметры.Свойство("ПатчиБазовыхВерсий", ДобавленныеПатчиБазовых) Тогда
		ДобавленныеПатчиБазовых = Новый Массив;
	КонецЕсли;
	
	ИдентификаторыБазовых = Новый Массив;
	Для Каждого БазоваяВерсия Из Параметры.БазовыеВерсии Цикл
		БазоваяВерсияЧастями = СтрРазделить(БазоваяВерсия.Ключ, ",");
		ИдентификаторыБазовых.Добавить(БазоваяВерсияЧастями[1]);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПрограммы", ИдентификаторыБазовых);
	Запрос.УстановитьПараметр("Патч", Параметры.Патч);
	Запрос.УстановитьПараметр("Версия", Параметры.Версия);
	Запрос.УстановитьПараметр("ПатчиБазовыхВерсий", ДобавленныеПатчиБазовых);
	Запрос.УстановитьПараметр("Отозван", Перечисления.СтатусыПатчей.Отозван);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Версия КАК Версия,
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПатчей.ПодписанДляКонфигурации = Проекты.Ссылка
		|ГДЕ
		|	Проекты.ИдентификаторПрограммы В(&ИдентификаторПрограммы)
		|	И ВерсииПатчей.Патч = &Патч
		|	И ВерсииПатчей.Состояние <> &Отозван
		|	И ВерсииПатчей.Версия = &Версия
		|	И ВерсииПатчей.УникальныйИдентификатор В (&ПатчиБазовыхВерсий)";
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	УдаляемыеПатчи = Новый Массив;
	Для Каждого ПатчБазовой Из Результат Цикл
		КлючПоиска = ПатчБазовой.ИмяКонфигурации + "," + ПатчБазовой.ИдентификаторПрограммы;
		Если Параметры.БазовыеВерсии[КлючПоиска] = Ложь Тогда
			СвойстваПатча = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(ПатчБазовой.УникальныйИдентификатор, "Состояние");
			Если СвойстваПатча.Состояние = Перечисления.СтатусыПатчей.Опубликован
				Или СвойстваПатча.Состояние = Перечисления.СтатусыПатчей.Отозван Тогда
				ВызватьИсключение НСтр("ru = 'Нельзя снять применимость патча с базовой версии конфигурации, т.к. он уже опубликован'");
			КонецЕсли;
			
			УдаляемыеПатчи.Добавить(ПатчБазовой.УникальныйИдентификатор);
			
			ИндексПатча = ДобавленныеПатчиБазовых.Найти(ПатчБазовой.УникальныйИдентификатор);
			Если ИндексПатча <> Неопределено Тогда
				ДобавленныеПатчиБазовых.Удалить(ИндексПатча);
			КонецЕсли;
		КонецЕсли;
		Параметры.БазовыеВерсии.Удалить(КлючПоиска);
	КонецЦикла;
	
	НовыеПодписанныеПатчи = Новый Массив;
	Для Каждого БазоваяВерсия Из Параметры.БазовыеВерсии Цикл
		Если Не БазоваяВерсия.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		ПодписанныйПатч = ДобавленныйПатчБазовойВерсии(Параметры, БазоваяВерсия.Ключ, ДополнительныеПараметры);
		УстановитьПривилегированныйРежим(Ложь);
		Если ПодписанныйПатч <> Неопределено Тогда
			НовыеПодписанныеПатчи.Добавить(ПодписанныйПатч);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("ПатчиБазовыхВерсий", ДобавленныеПатчиБазовых);
	
	Результат = Новый Структура;
	Результат.Вставить("Удаляемые", УдаляемыеПатчи);
	Результат.Вставить("Добавляемые", НовыеПодписанныеПатчи);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавленныйПатчБазовойВерсии(Параметры, ИдентификаторБазовой, ДополнительныеПараметры)
	
	ИдентификаторБазовойЧастями = СтрРазделить(ИдентификаторБазовой, ",");
	Строка = ПатчиСлужебный.ЗакрытыйКлючПрограммы(ИдентификаторБазовойЧастями[1], ИдентификаторБазовойЧастями[0]);
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваПатча = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(Параметры.ИдентификаторПатча, "ДанныеПатча");
	
	ПутьКПатчу = ПолучитьИмяВременногоФайла("cfe");
	ДанныеПатча = СвойстваПатча.ДанныеПатча.Получить();
	ДанныеПатча.Записать(ПутьКПатчу);
	
	Проект       = Строка.Ссылка;
	ЗакрытыйКлюч = Строка.КлючЭлектроннойПодписи;
	
	ИдентификаторНовогоПатча = Новый УникальныйИдентификатор;
	ПараметрыПодписи = Новый Структура;
	ПараметрыПодписи.Вставить("ПутьКПатчу", ПутьКПатчу);
	ПараметрыПодписи.Вставить("ИмяПатча", ПатчиСлужебный.ИмяПатча(Параметры.Патч, ПатчиСлужебный.НомерПатча(Параметры.ИдентификаторПатча), Ложь));
	ПараметрыПодписи.Вставить("Версия", Параметры.Версия);
	ПараметрыПодписи.Вставить("КаталогВременнойБазы", ПолучитьИмяВременногоФайла());
	ПараметрыПодписи.Вставить("УникальныйИдентификатор", ИдентификаторНовогоПатча);
	ПараметрыПодписи.Вставить("РежимСовместимости", Параметры.РежимСовместимости);
	СоздатьКаталог(ПараметрыПодписи.КаталогВременнойБазы);
	ПодписанныйПатч = ПатчиСлужебный.ПодписанныйПатч(ПараметрыПодписи, Ложь, ЗакрытыйКлюч);
	Если ПодписанныйПатч = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПодписанногоПатча = Новый ДвоичныеДанные(ПодписанныйПатч);
	
	Попытка
		УдалитьФайлы(ПодписанныйПатч);
		УдалитьФайлы(ПутьКПатчу);
		УдалитьФайлы(ПараметрыПодписи.КаталогВременнойБазы);
	Исключение
		// Удаление будет выполнено средствами платформы.
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор", ИдентификаторНовогоПатча);
	Результат.Вставить("Данные", ДанныеПодписанногоПатча);
	Результат.Вставить("Проект", Проект);
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьИзмененияПатча(Параметры) Экспорт
	
	ДлительныеОперации.СообщитьПрогресс(5);
	// Проверка патча.
	Если Параметры.Свойство("ИзменениеОписания") Тогда
		Параметры.ДанныеПатча = ПатчиСлужебный.ОбновлениеОписанияПатча(Параметры);
	Иначе
		РезультатПроверки = Неопределено;
		Если Параметры.ИзмененияНеТребуются Тогда
			ИнформацияОПатче = ИнформацияОПатче(Параметры);
			Параметры.ДанныеПатча = ИнформацияОПатче.ДанныеПатча;
			РезультатПроверки = ПроверкаПатча(Параметры);
		Иначе
			РезультатПроверки = ПроверкаПатча(Параметры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатПроверки) Тогда
			ВызватьИсключение РезультатПроверки;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПатча = Параметры.ДанныеПатча;
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Патч, "Владелец");
	ЭтоКонфигурацияБазовая = ПатчиСлужебный.ЭтоКонфигурацияБазовая(Проект);
	
	ДлительныеОперации.СообщитьПрогресс(40);
	// Если конфигурация базовая - подписываем патч.
	Если ЭтоКонфигурацияБазовая Тогда
		ВременныйКаталог  = ПолучитьИмяВременногоФайла("SignPatch");
		ПатчДляПодписания = ПолучитьИмяВременногоФайла("cfe");
		СоздатьКаталог(ВременныйКаталог);
		
		ДанныеПатча.Записать(ПатчДляПодписания);
		
		УстановитьПривилегированныйРежим(Истина);
		ЗакрытыйКлюч = ПатчиСлужебный.ЗакрытыйКлючПроекта(Проект);
		УстановитьПривилегированныйРежим(Ложь);
		
		ПараметрыПодписи = Новый Структура;
		ПараметрыПодписи.Вставить("ПутьКПатчу", ПатчДляПодписания);
		ПараметрыПодписи.Вставить("ИмяПатча", ПатчиСлужебный.ИмяПатча(Параметры.Патч, ПатчиСлужебный.НомерПатча(Параметры.ИдентификаторПатча), Ложь));
		ПараметрыПодписи.Вставить("Версия", Параметры.Версия);
		ПараметрыПодписи.Вставить("КаталогВременнойБазы", ВременныйКаталог);
		ПараметрыПодписи.Вставить("ПропуститьЗаменуИдентификатора");
		ПараметрыПодписи.Вставить("РежимСовместимости", Параметры.РежимСовместимости);
		ПодписанныйПатч = ПатчиСлужебный.ПодписанныйПатч(ПараметрыПодписи, Ложь, ЗакрытыйКлюч);
		ДанныеПатча     = Новый ДвоичныеДанные(ПодписанныйПатч);
		
		Попытка
			УдалитьФайлы(ВременныйКаталог);
			УдалитьФайлы(ПатчДляПодписания);
		Исключение
			// Обработка исключения не требуется, каталог будет удален средствами платформы.
		КонецПопытки;
	КонецЕсли;
	
	// Сохранение патча.
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Параметры.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Параметры.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Параметры.ИдентификаторПатча);
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
		Набор.Отбор.Патч.Установить(Параметры.Патч);
		Набор.Отбор.Версия.Установить(Параметры.Версия);
		Набор.Отбор.УникальныйИдентификатор.Установить(Параметры.ИдентификаторПатча);
		Набор.Прочитать();
		
		ВерсияПатча = Набор[0];
		Если Не Параметры.Свойство("ИзменениеОписания") Тогда
			СохранятьХэшиМетодов = Истина;
			Если ВерсияПатча.НачальнаяСборка <> Параметры.НачальнаяСборка Тогда
				ДатаСборкиДо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияПатча.НачальнаяСборка, "ДатаСборки");
				ДатаСборкиПосле = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НачальнаяСборка, "ДатаСборки");
				Если ДатаСборкиДо = Неопределено Или ДатаСборкиПосле < ДатаСборкиДо Тогда
					СохранятьХэшиМетодов = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ВерсияПатча.НачальнаяСборка = Параметры.НачальнаяСборка;
			ВерсияПатча.КонечнаяСборка  = Параметры.КонечнаяСборка;
			Если Не Параметры.ИзмененияНеТребуются Или ВерсияПатча.Состояние <> Перечисления.СтатусыПатчей.СозданПроверен Тогда
				ВерсияПатча.Состояние = Перечисления.СтатусыПатчей.СозданНеПроверен;
			КонецЕсли;
			ВерсияПатча.ДатаИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Патч, "ДатаСоздания");
			
			Если Не Параметры.ПатчСоздан Тогда
				ВерсияПатча.РежимСовместимости = Параметры.РежимСовместимости;
			ИначеЕсли Параметры.КонечнаяСборкаИзменялась И ЗначениеЗаполнено(ВерсияПатча.КонечнаяСборкаПоХранилищу) Тогда
				НоваяКонечнаяСборка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.КонечнаяСборка, "Код");
				ВерсияПатча.КонечнаяСборкаПоХранилищу = НоваяКонечнаяСборка;
			КонецЕсли;
			Если ЗначениеЗаполнено(Параметры.НовыйРежимСовместимости) Тогда
				ВерсияПатча.РежимСовместимости = Параметры.НовыйРежимСовместимости;
			КонецЕсли;
			Если Не СохранятьХэшиМетодов Тогда
				УдалитьХэшиМетодов(Параметры, ВерсияПатча);
			КонецЕсли;
			Если Не Параметры.ИзмененияНеТребуются Тогда
				ДополнитьИзменяемыеМетаданные(Параметры, ВерсияПатча);
			КонецЕсли;
			
			Шаблон = НСтр("ru = '%1 - Патч изменен вручную пользователем %2'");
		Иначе
			Шаблон = НСтр("ru = '%1 - Изменено описание патча пользователем %2'");
		КонецЕсли;
		
		ВерсияПатча.ДанныеПатча = Новый ХранилищеЗначения(ДанныеПатча, Новый СжатиеДанных(9));
		
		Если Параметры.Свойство("ОписаниеПатча") Тогда
			ОписаниеПатча = Параметры.ОписаниеПатча;
		Иначе
			СвойстваПатча = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Патч, "Ошибка, Описание");
			Если ТипЗнч(СвойстваПатча.Ошибка) = Тип("Строка") Тогда
				ОписаниеПатча = СвойстваПатча.Описание;
			Иначе
				ОписаниеПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваПатча.Ошибка, "ПубликуемоеОписание");
			КонецЕсли;
		КонецЕсли;
		ВерсияПатча.Описание = ОписаниеПатча;
		
		ЗаписьЛога = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
			ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь());
		
		ДополнительныеПараметры = ПатчиСлужебный.ПараметрыПатча(ВерсияПатча.Параметры.Получить());
		ДополнительныеПараметры.Лог.Добавить(ЗаписьЛога);
		
		ВерсияПатча.Параметры = Новый ХранилищеЗначения(ДополнительныеПараметры);
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки; 
	
	ДлительныеОперации.СообщитьПрогресс(60);
	
	// Сброс статуса проверки патча и обновление описания.
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = Блокировка.Добавить("Справочник.Патчи");
		ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", Параметры.Патч);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Если Параметры.Свойство("ИзменениеОписания") Тогда
			Если Параметры.Свойство("ОписаниеПатча") Тогда
				ОписаниеПатча = Параметры.ОписаниеПатча;
			Иначе
				СвойстваПатча = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Патч, "Ошибка, Описание");
				Если ТипЗнч(СвойстваПатча.Ошибка) = Тип("Строка") Тогда
					ОписаниеПатча = СвойстваПатча.Описание;
				Иначе
					ОписаниеПатча = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваПатча.Ошибка, "ПубликуемоеОписание");
					ПереопределитьОписаниеПатчаВРасширении(Параметры.Патч, ОписаниеПатча);
				КонецЕсли;
			КонецЕсли;
			ПатчОбъект = Параметры.Патч.ПолучитьОбъект();
			ПатчОбъект.Описание = ОписаниеПатча;
			ПатчОбъект.Записать();
		ИначеЕсли Не Параметры.ИзмененияНеТребуются Тогда
			ПатчОбъект = Параметры.Патч.ПолучитьОбъект();
			ОтборСтрок = Новый Структура;
			ОтборСтрок.Вставить("ВерсияПатча", Параметры.Версия);
			НайденныеСтроки = ПатчОбъект.СостоянияПроверкиПатча.НайтиСтроки(ОтборСтрок);
			Для Каждого Строка Из НайденныеСтроки Цикл
				ПатчОбъект.СостоянияПроверкиПатча.Удалить(Строка);
			КонецЦикла;
			Если ПатчОбъект.СостоянияПроверкиПатча.Количество() = 0 Тогда
				ПатчОбъект.Проверяющий = Неопределено;
				ПатчОбъект.Аудитор     = Неопределено;
			КонецЕсли;
			ПатчОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Если патч не для базовой версии - создаем дополнительные базовые патчи, если они есть в применимости.
	Если Не ЭтоКонфигурацияБазовая Тогда 
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Параметры.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Параметры.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Параметры.ИдентификаторПатча);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ПатчиСлужебный.ПодписатьПатчиДляБазовыхВерсий(ВерсияПатча, Параметры.Версия, Параметры.Патч, ДанныеПатча);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = Блокировка.Добавить("РегистрСведений.ВерсииПатчей");
		ЭлементБлокировкиДанных.УстановитьЗначение("Патч", Параметры.Патч);
		ЭлементБлокировкиДанных.УстановитьЗначение("Версия", Параметры.Версия);
		ЭлементБлокировкиДанных.УстановитьЗначение("УникальныйИдентификатор", Параметры.ИдентификаторПатча);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			
			Набор = РегистрыСведений.ВерсииПатчей.СоздатьНаборЗаписей();
			Набор.Отбор.Патч.Установить(ВерсияПатча.Патч);
			Набор.Отбор.Версия.Установить(ВерсияПатча.Версия);
			Набор.Отбор.УникальныйИдентификатор.Установить(ВерсияПатча.УникальныйИдентификатор);
			Набор.Прочитать(); 
			
			Запись = Набор[0];
			Запись.Параметры = ВерсияПатча.Параметры;
			
			Набор.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(100);
	
КонецПроцедуры

Функция ПроверкаПатча(Параметры)
	ДвоичныеДанные = Параметры.ДанныеПатча;
	НомерПатча = ПатчиСлужебный.НомерПатча(Параметры.ИдентификаторПатча);
	ИмяПатча = ПатчиСлужебный.ИмяПатча(Параметры.Патч, НомерПатча, Ложь);
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Версия, "Владелец");
	СвойстваПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Библиотека,ИмяКонфигурации");
	ЭтоБиблиотека   = СвойстваПроекта.Библиотека;
	ИмяКонфигурации = ПатчиСлужебный.ИмяКонфигурации(СвойстваПроекта.ИмяКонфигурации);
	
	СвойстваВерсииПатча = ПатчиСлужебный.ЗначенияСвойствВерсииПатча(Параметры.ИдентификаторПатча, "РазделПроекта,КонечнаяСборкаПоХранилищу,ДатаИсправления");
	
	РазделПроекта = СвойстваВерсииПатча.РазделПроекта;
	НачальнаяДата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.НачальнаяСборка, "ДатаСборки");
	Если ЗначениеЗаполнено(СвойстваВерсииПатча.КонечнаяСборкаПоХранилищу) Тогда
		КонечнаяДата = СвойстваВерсииПатча.ДатаИсправления;
	Иначе
		КонечнаяДата  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.КонечнаяСборка, "ДатаСборки");
	КонецЕсли;
	
	ПараметрыРасчета = ПатчиСлужебный.ПараметрыДляРасчетаРоднойПрименимости();
	ПараметрыРасчета.НачальнаяДата = НачальнаяДата;
	ПараметрыРасчета.КонечнаяДата  = КонечнаяДата;
	ПараметрыРасчета.Версия        = Параметры.Версия;
	ПараметрыРасчета.РазделПроекта = РазделПроекта;
	ПараметрыРасчета.ЭтоБиблиотека = ЭтоБиблиотека;
	ПараметрыРасчета.КонечнаяСборкаПоХранилищу = СвойстваВерсииПатча.КонечнаяСборкаПоХранилищу;
	Если ЗначениеЗаполнено(ПараметрыРасчета.КонечнаяСборкаПоХранилищу) Тогда
		НомерКонечнойСборки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.КонечнаяСборка, "Код");
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(НомерКонечнойСборки, ПараметрыРасчета.КонечнаяСборкаПоХранилищу) > 0 Тогда
			ПараметрыРасчета.КонечнаяСборкаПоХранилищу = НомерКонечнойСборки;
		КонецЕсли;
	КонецЕсли;
	
	ИнформацияОПрименимости = ПатчиСлужебный.ПрименимостьДляРоднойКонфигурации(ПараметрыРасчета);
	
	ДлительныеОперации.СообщитьПрогресс(20);
	
	ПараметрыДобавления = Новый Структура;
	ПараметрыДобавления.Вставить("ДвоичныеДанные",       ДвоичныеДанные);
	ПараметрыДобавления.Вставить("ИмяПатча",             ИмяПатча);
	ПараметрыДобавления.Вставить("ИмяКонфигурации",      ИмяКонфигурации);
	ПараметрыДобавления.Вставить("ПрименимДляСборок",    ИнформацияОПрименимости.Сборки);
	ПараметрыДобавления.Вставить("СвязанныеКонфигурации",ИнформацияОПрименимости.СвязанныеКонфигурации);
	ПараметрыДобавления.Вставить("КонечныеСборкиСвязанныхКонфигураций", ИнформацияОПрименимости.КонечныеСборкиСвязанныхКонфигураций);
	ПараметрыДобавления.Вставить("Версия",               Параметры.Версия);
	ПараметрыДобавления.Вставить("ИдентификаторПатча",   Параметры.ИдентификаторПатча);
	ПараметрыДобавления.Вставить("ДобавленВручную",      Не Параметры.ИзмененияНеТребуются);
	ПараметрыДобавления.Вставить("РежимСовместимости",   Параметры.РежимСовместимости);
	ПараметрыДобавления.Вставить("КонечнаяСборкаПоХранилищу", СвойстваВерсииПатча.КонечнаяСборкаПоХранилищу);
	ПараметрыДобавления.Вставить("Патч", Параметры.Патч);
	Если Не Параметры.ИзмененияНеТребуются Тогда
		ПараметрыДобавления.Вставить("ДвоичныеДанныеИсходные", ПатчиСлужебный.ДвоичныеДанныеПатча(Параметры.ИдентификаторПатча));
		ПараметрыДобавления.Вставить("ПатчНеСоздан", Не Параметры.ПатчСоздан);
	КонецЕсли;
	
	// Проверка.
	УстановитьПривилегированныйРежим(Истина);
	Результат = ПатчиСлужебный.ПроверкаИДобавлениеПатча(ПараметрыДобавления);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыДобавления.Свойство("НовыйРежимСовместимости") Тогда
		Если СтрРазделить(ПараметрыДобавления.НовыйРежимСовместимости, ".", Ложь).Количество() = 3 Тогда
			Параметры.НовыйРежимСовместимости = ПараметрыДобавления.НовыйРежимСовместимости;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибок) Тогда
		Возврат Результат.ТекстОшибок;
	КонецЕсли;
	
	Параметры.ИзменяемыеМетодыВычисленное = СтрСоединить(Результат.ИзменяемыеМетоды, Символы.ПС);
	Параметры.ДанныеПатча = Результат.ДанныеПатча;
	
	Возврат "";
КонецФункции

Функция ИнформацияОПатче(Параметры)
	ДанныеПатча = ПатчиСлужебный.ДвоичныеДанныеПатча(Параметры.ИдентификаторПатча);
	ИмяПатча = ПатчиСлужебный.ИмяПатча(Параметры.Патч);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеПатча", ДанныеПатча);
	Результат.Вставить("ИмяПатча", ИмяПатча);
	Возврат Результат;
КонецФункции

Процедура УдалитьХэшиМетодов(Параметры, ВерсияПатча)
	ИзменяемыеМетаданные = СтрРазделить(Параметры.ИзменяемыеМетаданные, Символы.ПС, Ложь);
	Результат = Новый Массив;
	Для Каждого ИзменяемыйМетод Из ИзменяемыеМетаданные Цикл
		ИзменяемыйМетодЧастями = СтрРазделить(ИзменяемыйМетод, " ");
		ПолноеИмяМетода = ИзменяемыйМетодЧастями[0];
		
		Результат.Добавить(ПолноеИмяМетода);
	КонецЦикла;
	
	НовыеИзменяемыеМетаданные = СтрСоединить(Результат, Символы.ПС);
	Параметры.ИзменяемыеМетаданные = НовыеИзменяемыеМетаданные;
	ВерсияПатча.ИзменяемыеМетаданные = СтрСоединить(Результат, Символы.ПС);
КонецПроцедуры

Процедура ДополнитьИзменяемыеМетаданные(Параметры, ВерсияПатча)
	Исходное = СтрРазделить(Параметры.ИзменяемыеМетаданные, Символы.ПС, Ложь);
	Вычисленное = СтрРазделить(Параметры.ИзменяемыеМетодыВычисленное, Символы.ПС, Ложь);
	Результат = Новый Массив;
	Для Каждого ВычисленныйМетод Из Вычисленное Цикл
		Если СтрНайти(Параметры.ИзменяемыеМетаданные, ВычисленныйМетод) > 0 Тогда
			// Данный метод уже описан.
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ВычисленныйМетод);
	КонецЦикла;
	
	// Поиск удаленных методов.
	Для Каждого ИсходныйМетод Из Исходное Цикл
		ИсходныйМетодЧастями = СтрРазделить(ИсходныйМетод, " ");
		ПолноеИмяМетода = ИсходныйМетодЧастями[0];
		Если СтрНайти(Параметры.ИзменяемыеМетодыВычисленное, ПолноеИмяМетода) = 0 Тогда
			// Метод удален при ручном редактировании.
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ИсходныйМетод);
	КонецЦикла;
	
	ВерсияПатча.ИзменяемыеМетаданные = СтрСоединить(Результат, Символы.ПС);
КонецПроцедуры

Процедура ИзменитьОписаниеПатчей(ПараметрыПатчей) Экспорт
	
	Для Каждого ПараметрыПатча Из ПараметрыПатчей Цикл
		СохранитьИзмененияПатча(ПараметрыПатча);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереопределитьОписаниеПатчаВРасширении(Патч, ОписаниеПатча)
	
	
	
КонецПроцедуры

Функция ПересчетПрименимостиПатчаВручную(УникальныйИдентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Версия КАК Версия,
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.НачальнаяСборка КАК НачальнаяСборка,
		|	ВерсииПатчей.КонечнаяСборка КАК КонечнаяСборка,
		|	ВерсииПатчей.ДанныеПатча КАК ДанныеПатча,
		|	ВерсииПатчей.ДатаИсправления КАК ДатаИсправления,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ВерсииПатчей.Описание КАК Описание,
		|	ВерсииПатчей.ИзменяемыеМетаданные КАК ИзменяемыеМетаданные,
		|	ВерсииПатчей.Состояние КАК Состояние,
		|	ВерсииПатчей.Параметры КАК Параметры,
		|	ВерсииПатчей.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	Проекты.Библиотека КАК ЭтоБиблиотека,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации,
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	ВерсииПатчей.РежимСовместимости КАК РежимСовместимости,
		|	ВерсииПатчей.КонечнаяСборкаПоХранилищу КАК КонечнаяСборкаПоХранилищу
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|		ПО ВерсииПатчей.Версия = ВерсииПроекта.Ссылка
		|ГДЕ
		|	ВерсииПатчей.УникальныйИдентификатор = &УникальныйИдентификатор";
	УстановитьПривилегированныйРежим(Истина);
	ВерсияПатча = Запрос.Выполнить().Выгрузить()[0];
	Результат = ПатчиСлужебный.ОбновлениеПрименимостиПатчаВСервисе(ВерсияПатча, Ложь, ВерсияПатча.ИдентификаторПрограммы);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Обновление применимости базовых патчей.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецПатча", УникальныйИдентификатор);
	Запрос.УстановитьПараметр("Опубликован", Перечисления.СтатусыПатчей.Опубликован);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииПатчей.Версия КАК Версия,
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.НачальнаяСборка КАК НачальнаяСборка,
		|	ВерсииПатчей.КонечнаяСборка КАК КонечнаяСборка,
		|	ВерсииПатчей.ДанныеПатча КАК ДанныеПатча,
		|	ВерсииПатчей.ДатаИсправления КАК ДатаИсправления,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ВерсииПатчей.Описание КАК Описание,
		|	ВерсииПатчей.ИзменяемыеМетаданные КАК ИзменяемыеМетаданные,
		|	ВерсииПатчей.Состояние КАК Состояние,
		|	ВерсииПатчей.Параметры КАК Параметры,
		|	ВерсииПатчей.ИдентификаторПубликации КАК ИдентификаторПубликации,
		|	Проекты.Библиотека КАК ЭтоБиблиотека,
		|	Проекты.ИмяКонфигурации КАК ИмяКонфигурации,
		|	Проекты.ИдентификаторПрограммы КАК ИдентификаторПрограммы,
		|	ВерсииПатчей.РежимСовместимости КАК РежимСовместимости,
		|	ВерсииПатчей.КонечнаяСборкаПоХранилищу КАК КонечнаяСборкаПоХранилищу
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО ВерсииПатчей.ПодписанДляКонфигурации = Проекты.Ссылка
		|ГДЕ
		|	ВерсииПатчей.ВладелецПатча = &ВладелецПатча
		|	И ВерсииПатчей.Состояние = &Опубликован";
	Результаты = Новый Массив;
	Результаты.Добавить(Результат);
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого БазовыйПатч Из Запрос.Выполнить().Выгрузить() Цикл
		Результат = ПатчиСлужебный.ОбновлениеПрименимостиПатчаВСервисе(БазовыйПатч, Истина, БазовыйПатч.ИдентификаторПрограммы);
		Результаты.Добавить(Результат);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результаты;
КонецФункции

#КонецОбласти

#КонецЕсли
