#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьЗаписьВРегистр(ПараметрыЗаписи) Экспорт
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период             = ПараметрыЗаписи.Период;
	МенеджерЗаписи.Задача             = ПараметрыЗаписи.Задача;
	МенеджерЗаписи.Пользователь       = ПараметрыЗаписи.Пользователь;
	МенеджерЗаписи.ВидРесурса         = ПараметрыЗаписи.ВидРесурса;
	МенеджерЗаписи.СтатусСогласования = ПараметрыЗаписи.СтатусСогласования;
	МенеджерЗаписи.Количество         = ПараметрыЗаписи.Количество;
	МенеджерЗаписи.Автор              = ПараметрыЗаписи.Автор;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура СогласоватьРесурсВЗадаче(ПараметрыСогласования) Экспорт
	
	ПараметрыЗаписи = ПараметрыЗаписи();
	
	ПараметрыЗаписи.Период             = ПараметрыСогласования.ТекущаяДата;
	ПараметрыЗаписи.Задача             = ПараметрыСогласования.Задача; 
	ПараметрыЗаписи.Пользователь       = ПараметрыСогласования.Исполнитель;
	ПараметрыЗаписи.ВидРесурса         = ПараметрыСогласования.СогласуемыйРесурс;
	ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.Согласовано;
	ПараметрыЗаписи.Количество         = ПараметрыСогласования.Количество;
	ПараметрыЗаписи.Автор              = ПараметрыСогласования.Согласующий;
	
	ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура НеСогласоватьРесурсВЗадаче(ПараметрыСогласования) Экспорт
	
	ПараметрыЗаписи = ПараметрыЗаписи();
	
	ПараметрыЗаписи.Период             = ПараметрыСогласования.ТекущаяДата;
	ПараметрыЗаписи.Задача             = ПараметрыСогласования.Задача;
	ПараметрыЗаписи.Пользователь       = ПараметрыСогласования.Исполнитель;
	ПараметрыЗаписи.ВидРесурса         = ПараметрыСогласования.СогласуемыйРесурс;
	ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.КСогласованию;
	ПараметрыЗаписи.Количество         = - ПараметрыСогласования.Количество;
	ПараметрыЗаписи.Автор              = ПараметрыСогласования.Согласующий;
	
	ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ЧастичноСогласоватьРесурс(ПараметрыСогласования) Экспорт
	
	Если ПараметрыСогласования.Согласуется <> 0 Тогда
		
		ПараметрыЗаписи = ПараметрыЗаписи();
		
		ПараметрыЗаписи.Период             = ПараметрыСогласования.ТекущаяДата;
		ПараметрыЗаписи.Задача             = ПараметрыСогласования.Задача;
		ПараметрыЗаписи.Пользователь       = ПараметрыСогласования.Пользователь;
		ПараметрыЗаписи.ВидРесурса         = ПараметрыСогласования.СогласуемыйРесурс;
		ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.Согласовано;
		ПараметрыЗаписи.Количество         = ПараметрыСогласования.Согласуется;
		ПараметрыЗаписи.Автор              = ПараметрыСогласования.Согласующий;
		
		ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
		
	КонецЕсли;
	
	Если ПараметрыСогласования.НеСогласуется <> 0 Тогда
		
		ПараметрыЗаписи = ПараметрыЗаписи();
		
		ПараметрыЗаписи.Период             = ПараметрыСогласования.ТекущаяДата;
		ПараметрыЗаписи.Задача             = ПараметрыСогласования.Задача;
		ПараметрыЗаписи.Пользователь       = ПараметрыСогласования.Исполнитель;
		ПараметрыЗаписи.ВидРесурса         = ПараметрыСогласования.СогласуемыйРесурс;
		ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.КСогласованию;
		ПараметрыЗаписи.Количество         =  - ПараметрыСогласования.НеСогласуется;
		ПараметрыЗаписи.Автор              = ПараметрыСогласования.Согласующий;
		
		ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапланироватьРесурсВЗадаче(ПараметрыСогласования) Экспорт
	
	ПараметрыЗаписи = ПараметрыЗаписи();
	
	ПараметрыЗаписи.Период             = ПараметрыСогласования.ТекущаяДата;
	ПараметрыЗаписи.Задача             = ПараметрыСогласования.Задача;
	ПараметрыЗаписи.Пользователь       = ПараметрыСогласования.Исполнитель;
	ПараметрыЗаписи.ВидРесурса         = ПараметрыСогласования.СогласуемыйРесурс;
	ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.КСогласованию;
	ПараметрыЗаписи.Количество         = ПараметрыСогласования.Количество;
	ПараметрыЗаписи.Автор              = ПараметрыСогласования.ТекущийПользователь;
	
	ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ВыделитьРесурсИзЗадачи(ПараметрыСогласования) Экспорт
	
	ПараметрыЗаписи = ПараметрыЗаписи();
	
	ПараметрыЗаписи.Период             = ПараметрыСогласования.ТекущаяДата;
	ПараметрыЗаписи.Задача             = ПараметрыСогласования.Задача;
	ПараметрыЗаписи.Пользователь       = ПараметрыСогласования.Исполнитель;
	ПараметрыЗаписи.ВидРесурса         = ПараметрыСогласования.СогласуемыйРесурс;
	ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.КСогласованию;
	ПараметрыЗаписи.Количество         = - ПараметрыСогласования.Количество;
	ПараметрыЗаписи.Автор              = ПараметрыСогласования.Согласующий;
	
	ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
	
	ПараметрыЗаписи = ПараметрыЗаписи();
	
	ПараметрыЗаписи.Период             = ПараметрыСогласования.ТекущаяДата;
	ПараметрыЗаписи.Задача             = ПараметрыСогласования.Задача;
	ПараметрыЗаписи.Пользователь       = ПараметрыСогласования.Исполнитель;
	ПараметрыЗаписи.ВидРесурса         = ПараметрыСогласования.СогласуемыйРесурс;
	ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.Согласовано;
	ПараметрыЗаписи.Количество         = - ПараметрыСогласования.Количество;
	ПараметрыЗаписи.Автор              = ПараметрыСогласования.Согласующий;
	
	ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ЗапланироватьИСогласоватьРесурсВЗадаче(ПараметрыСогласования) Экспорт
	
	ЗапланироватьРесурсВЗадаче(ПараметрыСогласования);
	
	СогласоватьРесурсВЗадаче(ПараметрыСогласования);
	
КонецПроцедуры

Процедура ЗапланироватьИНеСогласоватьРесурсВЗадаче(ПараметрыСогласования) Экспорт
	
	ЗапланироватьРесурсВЗадаче(ПараметрыСогласования);
	
	ПараметрыСогласования.ТекущаяДата = ПараметрыСогласования.ТекущаяДата + 1;
	
	НеСогласоватьРесурсВЗадаче(ПараметрыСогласования);
	
КонецПроцедуры

#Область ВыполнитьОперациюИНаправитьИсполнителю

Процедура ЧастичноСогласоватьРесурсВЗадачеИНаправитьРезультатыИсполнителю(ПараметрыСогласования, ТекстПоручения, ПересчитыватьИтоги) Экспорт
	
	ЗадачаОбъект = Неопределено;
	
	Попытка
		
		НачатьТранзакцию();
		
		ЧастичноСогласоватьРесурс(ПараметрыСогласования);
		
		Если ПараметрыСогласования.ТекущийПользователь <> ПараметрыСогласования.Исполнитель Тогда
			
			ЗадачаОбъект = ПараметрыСогласования.Задача.ПолучитьОбъект();
			
			НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
			
			НоваяСтрокаПротокола.Дата                 = ПараметрыСогласования.ТекущаяДата;
			НоваяСтрокаПротокола.Автор                = ПараметрыСогласования.ТекущийПользователь;
			НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
			НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
			НоваяСтрокаПротокола.ИсполнительПоручения = ПараметрыСогласования.Исполнитель;
			
			ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ПараметрыСогласования.Исполнитель;
			ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
			ЗадачаОбъект.ДатаПорученияПоЗадаче        = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
			                                                                                              ПараметрыСогласования.ТекущийПользователь,
			                                                                                              ПараметрыСогласования.ТекущаяДата);
			
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчет", Истина);
			ЗадачаОбъект.Записать();
			
		КонецЕсли;
		
		Если ПересчитыватьИтоги Тогда
			
			РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиДляЗадачи(ПараметрыСогласования.Задача, 
			                                                                            ПараметрыСогласования.СогласуемыйРесурс);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ВывестиСообщениеОшибкаЗаписи(ЗадачаОбъект, ПараметрыСогласования.Задача);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СогласоватьРесурсВЗадачеИНаправитьРезультатыИсполнителю(ПараметрыСогласования, ПересчитыватьИтоги, Успешно) Экспорт
	
	ЗадачаОбъект = Неопределено;
	
	Попытка
		
		НачатьТранзакцию();
		
		СогласоватьРесурсВЗадаче(ПараметрыСогласования);
	
		Если ПараметрыСогласования.ТекущийПользователь <> ПараметрыСогласования.Исполнитель Тогда
			
			ЗадачаОбъект = ПараметрыСогласования.Задача.ПолучитьОбъект();
			ТекстПоручения = ЗадачиПроцессовКлиентСервер.ТекстРезультатыСогласования(ПараметрыСогласования.ПредставлениеВидаРесурса, 
			                                                                         ПараметрыСогласования.Количество,
			                                                                         0);
			
			НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
			
			НоваяСтрокаПротокола.Дата                 = ПараметрыСогласования.ТекущаяДата;
			НоваяСтрокаПротокола.Автор                = ПараметрыСогласования.ТекущийПользователь;
			НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
			НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
			НоваяСтрокаПротокола.ИсполнительПоручения = ПараметрыСогласования.Исполнитель;
			
			ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ПараметрыСогласования.Исполнитель;
			ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
			ЗадачаОбъект.ДатаПорученияПоЗадаче        = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
			                                                                                              ПараметрыСогласования.ТекущийПользователь,
			                                                                                              ПараметрыСогласования.ТекущаяДата);
			
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчет", Истина);
			ЗадачаОбъект.Записать();
			
		КонецЕсли;
		
		Если ПересчитыватьИтоги Тогда
			
			РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиДляЗадачи(ПараметрыСогласования.Задача, 
			                                                                            ПараметрыСогласования.СогласуемыйРесурс);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		Успешно = Истина;
		
	Исключение
		
		ВывестиСообщениеОшибкаЗаписи(ЗадачаОбъект, ПараметрыСогласования.Задача);
		
		Успешно = Ложь;
		
		ОтменитьТранзакцию();
	
	КонецПопытки;
	
КонецПроцедуры

Процедура НеСогласоватьРесурсВЗадачеИНаправитьИсполнителю(ПараметрыСогласования) Экспорт
	
	ЗадачаОбъект = Неопределено;
	
	Попытка
		
		НачатьТранзакцию();
	
		НеСогласоватьРесурсВЗадаче(ПараметрыСогласования);
		
		Если ПараметрыСогласования.ТекущийПользователь <> ПараметрыСогласования.Исполнитель
			Или Не ПустаяСтрока(ПараметрыСогласования.ТекстПоручения) Тогда
			
			ЗадачаОбъект = ПараметрыСогласования.Задача.ПолучитьОбъект();
			
			Если ПустаяСтрока(ПараметрыСогласования.ТекстПоручения) Тогда 
				ТекстПоручения = ЗадачиПроцессовКлиентСервер.ТекстРезультатыСогласования(ПараметрыСогласования.ПредставлениеВидаРесурса, 
				                                                                         ПараметрыСогласования.Количество,
				                                                                         0);
			Иначе
				ТекстПоручения = ПараметрыСогласования.ТекстПоручения;
			КонецЕсли;
			
			НоваяСтрокаПротокола = ЗадачаОбъект.ПротоколВзаимодействия.Добавить();
			
			НоваяСтрокаПротокола.Дата                 = ПараметрыСогласования.ТекущаяДата;
			НоваяСтрокаПротокола.Автор                = ПараметрыСогласования.ТекущийПользователь;
			НоваяСтрокаПротокола.ТекстПоручения       = ТекстПоручения;
			НоваяСтрокаПротокола.Статус               = ЗадачаОбъект.Статус;
			НоваяСтрокаПротокола.ИсполнительПоручения = ПараметрыСогласования.Исполнитель;
			
			ЗадачаОбъект.ИсполнительПорученияПоЗадаче = ПараметрыСогласования.Исполнитель;
			ЗадачаОбъект.ТекстПоследнегоПоручения     = ТекстПоручения;
			ЗадачаОбъект.ДатаПорученияПоЗадаче        = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ЗадачаОбъект,
			                                                                                              ПараметрыСогласования.ТекущийПользователь,
			                                                                                              ПараметрыСогласования.ТекущаяДата);
			
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("НеВыполнятьРасчет", Истина);
			ЗадачаОбъект.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ВывестиСообщениеОшибкаЗаписи(ЗадачаОбъект, ПараметрыСогласования.Задача);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

Функция ПараметрыСогласованияРесурса() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Задача",                   Справочники.ЗадачиПроцесса.ПустаяСсылка());
	Параметры.Вставить("Исполнитель",              Справочники.Пользователи.ПустаяСсылка());
	Параметры.Вставить("СогласуемыйРесурс",        Справочники.ВидыСогласуемыхРесурсов.ПустаяСсылка());
	Параметры.Вставить("ПредставлениеВидаРесурса", "");
	Параметры.Вставить("Количество",               0);
	Параметры.Вставить("ТекущийПользователь",      Справочники.Пользователи.ПустаяСсылка());
	Параметры.Вставить("ТекущаяДата",              Дата(1, 1, 1));
	Параметры.Вставить("ТекстПоручения",           "");
	Параметры.Вставить("Согласующий",              Справочники.Пользователи.ПустаяСсылка());
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыЧастичногоСогласованияРесурса() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Задача",                   Справочники.ЗадачиПроцесса.ПустаяСсылка());
	Параметры.Вставить("Исполнитель",              Справочники.Пользователи.ПустаяСсылка());
	Параметры.Вставить("СогласуемыйРесурс",        Справочники.ВидыСогласуемыхРесурсов.ПустаяСсылка());
	Параметры.Вставить("ПредставлениеВидаРесурса", "");
	Параметры.Вставить("Согласуется",              0);
	Параметры.Вставить("НеСогласуется",            0);
	Параметры.Вставить("ТекущийПользователь",      Справочники.Пользователи.ПустаяСсылка());
	Параметры.Вставить("ТекущаяДата",              Дата(1, 1, 1));
	Параметры.Вставить("ТекстПоручения",           "");
	Параметры.Вставить("Согласующий",              Справочники.Пользователи.ПустаяСсылка());
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыЗаписи() Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Период",             Дата(1,1,1));
	ПараметрыЗаписи.Вставить("Задача",             Справочники.ЗадачиПроцесса.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("Пользователь",       Справочники.Пользователи.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("ВидРесурса",         Справочники.ВидыСогласуемыхРесурсов.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("СтатусСогласования", Перечисления.СтатусыСогласованияРесурса.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("Количество",         0);
	ПараметрыЗаписи.Вставить("Автор",              Справочники.Пользователи.ПустаяСсылка());
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОтразитьИзмененияПриЗаписиЗадачи(Задача, ТаблицаПланированияРесурса, Предмет, ВидРесурса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыеПоложительныеЗаписиПланирования = Новый ТаблицаЗначений;
	НовыеПоложительныеЗаписиПланирования.Колонки.Добавить("Пользователь",  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	НовыеПоложительныеЗаписиПланирования.Колонки.Добавить("ВидРесурса",    Новый ОписаниеТипов("СправочникСсылка.ВидыСогласуемыхРесурсов"));
	НовыеПоложительныеЗаписиПланирования.Колонки.Добавить("Запланировано", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаЗапланировано.ВидРесурса    КАК ВидРесурса,
	|	ТаблицаЗапланировано.Пользователь  КАК Пользователь, 
	|	ТаблицаЗапланировано.Количество    КАК Запланировано
	|ПОМЕСТИТЬ ТаблицаЗапланированоТекущая
	|ИЗ
	|	&ТаблицаЗапланировано КАК ТаблицаЗапланировано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПротоколСогласованияРесурсов.ВидРесурса   КАК ВидРесурса,
	|	ПротоколСогласованияРесурсов.Пользователь КАК Пользователь,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколСогласованияРесурсов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияРесурса.КСогласованию)
	|				ТОГДА ПротоколСогласованияРесурсов.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ)                             КАК Запланировано
	|ПОМЕСТИТЬ ТаблицаЗапланированоПредыдущая
	|ИЗ
	|	РегистрСведений.ПротоколСогласованияРесурсов КАК ПротоколСогласованияРесурсов
	|ГДЕ
	|	ПротоколСогласованияРесурсов.Задача = &Задача
	|	И ВЫБОР КОГДА &ВидРесурса = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА ИНАЧЕ ПротоколСогласованияРесурсов.ВидРесурса = &ВидРесурса КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколСогласованияРесурсов.ВидРесурса,
	|	ПротоколСогласованияРесурсов.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапланированоТекущая.ВидРесурса                                                                КАК ВидРесурса,
	|	ТаблицаЗапланированоТекущая.Пользователь                                                              КАК Пользователь,
	|	ТаблицаЗапланированоТекущая.Запланировано - ЕСТЬNULL(ТаблицаЗапланированоПредыдущая.Запланировано, 0) КАК Запланировано
	|ИЗ
	|	ТаблицаЗапланированоТекущая КАК ТаблицаЗапланированоТекущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗапланированоПредыдущая КАК ТаблицаЗапланированоПредыдущая
	|		ПО ТаблицаЗапланированоТекущая.ВидРесурса = ТаблицаЗапланированоПредыдущая.ВидРесурса
	|		И ТаблицаЗапланированоТекущая.Пользователь = ТаблицаЗапланированоПредыдущая.Пользователь
	|ГДЕ
	|	ТаблицаЗапланированоТекущая.Запланировано - ЕСТЬNULL(ТаблицаЗапланированоПредыдущая.Запланировано, 0) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаЗапланированоПредыдущая.ВидРесурса                                                             КАК ВидРесурса,
	|	ТаблицаЗапланированоПредыдущая.Пользователь                                                           КАК Пользователь,
	|	- ТаблицаЗапланированоПредыдущая.Запланировано                                                        КАК Запланировано
	|ИЗ
	|	ТаблицаЗапланированоПредыдущая КАК ТаблицаЗапланированоПредыдущая
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗапланированоТекущая КАК ТаблицаЗапланированоТекущая
	|		ПО ТаблицаЗапланированоПредыдущая.ВидРесурса = ТаблицаЗапланированоТекущая.ВидРесурса
	|		И ТаблицаЗапланированоПредыдущая.Пользователь = ТаблицаЗапланированоТекущая.Пользователь
	|ГДЕ
	|	ТаблицаЗапланированоТекущая.Запланировано ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаЗапланировано", ТаблицаПланированияРесурса);
	Запрос.УстановитьПараметр("Задача",               Задача);
	Запрос.УстановитьПараметр("ВидРесурса",           ВидРесурса);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(Задача);
	Если ВидРесурса <> Неопределено Тогда
		НаборЗаписей.Отбор.ВидРесурса.Установить(ВидРесурса);
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущаяДата         = ТекущаяДатаСеанса();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Запланировано <> 0 Тогда
		
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период             = ТекущаяДата;
			НоваяЗапись.Задача             = Задача;
			НоваяЗапись.ВидРесурса         = Выборка.ВидРесурса;
			НоваяЗапись.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.КСогласованию;
			НоваяЗапись.Количество         = Выборка.Запланировано;
			НоваяЗапись.Пользователь       = Выборка.Пользователь;
			НоваяЗапись.Автор              = ТекущийПользователь;
			
			Если Выборка.Запланировано > 0 Тогда
				
				НоваяСтрокаТаблицыПоложительныхЗаписей = НовыеПоложительныеЗаписиПланирования.Добавить();
				НоваяСтрокаТаблицыПоложительныхЗаписей.Пользователь  = Выборка.Пользователь;
				НоваяСтрокаТаблицыПоложительныхЗаписей.Запланировано = Выборка.Запланировано;
				НоваяСтрокаТаблицыПоложительныхЗаписей.ВидРесурса    = Выборка.ВидРесурса;
				
			КонецЕсли;
	
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Ложь);
	
	Если НовыеПоложительныеЗаписиПланирования.Количество() > 0 Тогда
		
		ЗаимствоватьПлановыеРесурсыИзРодительскойЕслиВозможно(Задача, НовыеПоложительныеЗаписиПланирования, Предмет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаимствоватьПлановыеРесурсыИзРодительскойЕслиВозможно(Задача, НовыеПоложительныеЗаписиПланирования, Предмет)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	МассивРассчитываемыхЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПоложительныеЗаписиПротокола.Пользователь  КАК Пользователь,
	|	ПоложительныеЗаписиПротокола.ВидРесурса    КАК ВидРесурса,
	|	ПоложительныеЗаписиПротокола.Запланировано КАК Количество
	|ПОМЕСТИТЬ ПоложительныеЗаписиПротокола
	|ИЗ
	|	&ПоложительныеЗаписиПротокола КАК ПоложительныеЗаписиПротокола
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.Родитель КАК Родитель,
	|	ИерархияЗадачПроцесса.Уровень  КАК Уровень
	|ПОМЕСТИТЬ РодительскиеЗадачи
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса = &Задача
	|	И ИерархияЗадачПроцесса.ЗадачаПроцесса <> ИерархияЗадачПроцесса.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиЗапланированоПоСотрудникам.Задача       КАК Задача,
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь КАК Пользователь,
	|	ЗадачиЗапланированоПоСотрудникам.ВидРесурса   КАК ВидРесурса,
	|	ЗадачиЗапланированоПоСотрудникам.Количество   КАК Количество,
	|	РодительскиеЗадачи.Уровень КАК Уровень
	|ПОМЕСТИТЬ ЗапланированоВРодительскихЗадачах
	|ИЗ
	|	РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РодительскиеЗадачи КАК РодительскиеЗадачи
	|		ПО ЗадачиЗапланированоПоСотрудникам.Задача = РодительскиеЗадачи.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоложительныеЗаписиПротокола.Пользователь    КАК Пользователь,
	|	ЗапланированоВРодительскихЗадачах.Задача     КАК Задача,
	|	ПоложительныеЗаписиПротокола.ВидРесурса      КАК ВидРесурса,
	|	ПоложительныеЗаписиПротокола.Количество      КАК ИзменениеЗапланированоВТекущейЗадаче,
	|	ЗапланированоВРодительскихЗадачах.Количество КАК ЗапланированоВРодительской,
	|	ЗапланированоВРодительскихЗадачах.Уровень    КАК Уровень
	|ИЗ
	|	ПоложительныеЗаписиПротокола КАК ПоложительныеЗаписиПротокола
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗапланированоВРодительскихЗадачах КАК ЗапланированоВРодительскихЗадачах
	|		ПО ПоложительныеЗаписиПротокола.Пользователь = ЗапланированоВРодительскихЗадачах.Пользователь
	|			И ПоложительныеЗаписиПротокола.ВидРесурса = ЗапланированоВРодительскихЗадачах.ВидРесурса
	|			И ЗапланированоВРодительскихЗадачах.Количество > 0 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень УБЫВ
	|ИТОГИ ПО
	|	Пользователь,
	|	ВидРесурса";

	Запрос.УстановитьПараметр("ПоложительныеЗаписиПротокола", НовыеПоложительныеЗаписиПланирования);
	Запрос.УстановитьПараметр("Задача", Задача);

	Результат = Запрос.Выполнить();

	ВыборкаПользователи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаПользователи.Следующий() Цикл
		
		ВыборкаВидРесурса = ВыборкаПользователи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВидРесурса.Следующий() Цикл
			
			ОсталосьРаспределить = Неопределено;
			
			ВыборкаДетали = ВыборкаВидРесурса.Выбрать();
			
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если ОсталосьРаспределить = Неопределено Тогда
					ОсталосьРаспределить = ВыборкаДетали.ИзменениеЗапланированоВТекущейЗадаче;
				КонецЕсли;
				
				Если ОсталосьРаспределить >= ВыборкаДетали.ЗапланированоВРодительской Тогда
					
					КРаспределению =  ВыборкаДетали.ЗапланированоВРодительской;
					
				Иначе
					
					КРаспределению =  ОсталосьРаспределить;
					
				КонецЕсли;
				
				ПараметрыЗаписи = ПараметрыЗаписи();
				
				ПараметрыЗаписи.Период             = ТекущаяДатаСеанса();
				ПараметрыЗаписи.Задача             = ВыборкаДетали.Задача;
				ПараметрыЗаписи.Пользователь       = ВыборкаПользователи.Пользователь;
				ПараметрыЗаписи.ВидРесурса         = ВыборкаВидРесурса.ВидРесурса;
				ПараметрыЗаписи.СтатусСогласования = Перечисления.СтатусыСогласованияРесурса.КСогласованию;
				ПараметрыЗаписи.Количество         = - КРаспределению;
				ПараметрыЗаписи.Автор              = ТекущийПользователь;
				
				ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
				
				НаборЗаписей = РегистрыСведений.ЗадачиЗапланированоПоСотрудникам.СоздатьНаборЗаписей(); 
				НаборЗаписей.Отбор.Задача.Установить(ВыборкаДетали.Задача);
				НаборЗаписей.Отбор.Пользователь.Установить(ВыборкаПользователи.Пользователь);
				НаборЗаписей.Отбор.ВидРесурса.Установить(ВыборкаВидРесурса.ВидРесурса);
				
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 1  Тогда
					
					НаборЗаписей[0].Количество =  НаборЗаписей[0].Количество - КРаспределению;
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
				МассивРассчитываемыхЗадач.Добавить(ВыборкаДетали.Задача);
				
				ОсталосьРаспределить = ОсталосьРаспределить - КРаспределению;
				
				Если ОсталосьРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьСогласованиеРесурсовМассиваЗадачПроцессов(МассивРассчитываемыхЗадач, Предмет);
	
	
КонецПроцедуры

Процедура ВывестиСообщениеОшибкаЗаписи(ЗадачаОбъект, ЗадачаСсылка) 
		
		ДанныеЗадачи = ДанныеЗадачиДляВыводаОшибки(ЗадачаОбъект, ЗадачаСсылка);
		ТекстОшибки  = СтрШаблон(НСтр("ru='Не удалось записать %1. %2'"), ДанныеЗадачи.Наименование, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеЗадачи.Ссылка);
		
КонецПроцедуры

Функция ДанныеЗадачиДляВыводаОшибки(ЗадачаОбъект, ЗадачаСсылка)
	
	ДанныеЗадачи = Новый Структура;
	ДанныеЗадачи.Вставить("Наименование", "");
	ДанныеЗадачи.Вставить("Ссылка",       ЗадачаСсылка);
	
	Если ЗадачаОбъект = Неопределено Тогда
		ДанныеЗадачи.Наименование = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "Наименование", Истина);
	Иначе
		ДанныеЗадачи.Наименование = ЗадачаОбъект.Наименование;
	КонецЕсли;

	Возврат ДанныеЗадачи;
	
КонецФункции

#КонецОбласти

#КонецЕсли