#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Добавляет условное оформление поля СтатусВстраивания табличного поля формы.
//
// Параметры:
// 	УсловноеОформление - УсловноеОформление - Условное оформление табличного поля формы.
// 	ИмяТаблицыФормы - Строка - Имя элемента табличного поля формы.
Процедура УстановитьУсловноеОформлениеСтатусовВстраивания(УсловноеОформление, ИмяТаблицыФормы = "") Экспорт
	
	ИмяПоляОтбора = ?(ЗначениеЗаполнено(ИмяТаблицыФормы), ИмяТаблицыФормы + ".", "") + "СтатусВстраивания";
	ПолеОтбораСтатусВстраивания = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
	ИмяПоляОформления = ?(ЗначениеЗаполнено(ИмяТаблицыФормы), ИмяТаблицыФормы, "") + "СтатусВстраивания";
	ПолеОформленияСтатусВстраивания = Новый ПолеКомпоновкиДанных(ИмяПоляОформления);
	
	ЦветаСтатусов = Перечисления.СтатусыВстраиванияФункцийМеханизмов.ЦветаСтатусов();
	
	// Встроена 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеОтбораСтатусВстраивания;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыВстраиванияФункцийМеханизмов.Встроена;
	ЭлементОтбора.Использование = Истина;
	
	Оформление = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение = ЦветаСтатусов[Перечисления.СтатусыВстраиванияФункцийМеханизмов.Встроена];
	Оформление.Использование = Истина;
	
	ЭлементОбласти = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементОбласти.Поле = ПолеОформленияСтатусВстраивания;
	ЭлементОбласти.Использование = Истина;
	
	// НеВстраивается 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеОтбораСтатусВстраивания;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеВстраивается;
	ЭлементОтбора.Использование = Истина;

	Оформление = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение = ЦветаСтатусов[Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеВстраивается];
	Оформление.Использование = Истина;

	ЭлементОбласти = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементОбласти.Поле = ПолеОформленияСтатусВстраивания;
	ЭлементОбласти.Использование = Истина;
	
	// Необходимо встроить
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеОтбораСтатусВстраивания;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеобходимоВстроить;
	ЭлементОтбора.Использование = Истина;

	Оформление = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение = ЦветаСтатусов[Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеобходимоВстроить];
	Оформление.Использование = Истина;
	
	ЭлементОбласти = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементОбласти.Поле = ПолеОформленияСтатусВстраивания;
	ЭлементОбласти.Использование = Истина;
	
	// ТребуетсяАнализ 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = ПолеОтбораСтатусВстраивания;
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыВстраиванияФункцийМеханизмов.ТребуетсяАнализ;
	ЭлементОтбора.Использование = Истина;

	Оформление = ЭлементОформления.Оформление.Элементы.Найти("ЦветТекста");
	Оформление.Значение = ЦветаСтатусов[Перечисления.СтатусыВстраиванияФункцийМеханизмов.ТребуетсяАнализ];
	Оформление.Использование = Истина;
	
	ЭлементОбласти = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементОбласти.Поле = ПолеОформленияСтатусВстраивания;
	ЭлементОбласти.Использование = Истина;
	
КонецПроцедуры

// Устанавливает статус встраивания для функции(механизма)
//
// Параметры:
// 	НовыйСтатус - Строка - Устанавливаемый статус встраивания функции.
// 	Механизм - СправочникСсылка.РазделыПроекта - Встраиваемый механизм - владелец функции.
// 	ОбъектМетаданных - Массив, СправочникСсылка.ОбъектыМетаданных - Объект метаданных в который встраивается механизм.
// 	ФункцияМеханизма - Массив, СправочникСсылка.ФункцииМеханизмов - Встраиваемая функция. Если не задана, то статус устанавливается для всего механизма в целом.
// 	Комментарий - Строка - Комментарий к устанавливаемому статусу.
//
Процедура УстановитьСтатусВстраивания(Знач НовыйСтатус, Механизм, Знач ОбъектМетаданных, Знач ФункцияМеханизма = Неопределено, Комментарий = "") Экспорт
	
	Если ТипЗнч(НовыйСтатус) = Тип("Строка") И НовыйСтатус <> "НеВстраиваетсяМеханизм" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВстраиванияФункцийМеханизмов."+НовыйСтатус);
	КонецЕсли;
	
	ПустаяФункция = Справочники.ФункцииМеханизмов.ПустаяСсылка();
	Если функцияМеханизма = Неопределено ИЛИ НовыйСтатус = "НеВстраиваетсяМеханизм" ИЛИ НовыйСтатус = Неопределено Тогда
		ФункцияМеханизма = ПустаяФункция;
		НовыйСтатус = Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеВстраивается;
	КонецЕсли;
	
	ОбъектыМетаданных = ОбъектМетаданных;
	Если ТипЗнч(ОбъектМетаданных) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		ОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектМетаданных);
	КонецЕсли;
	
	ФункцииМеханизма = ФункцияМеханизма;
	Если ТипЗнч(ФункцияМеханизма) = Тип("СправочникСсылка.ФункцииМеханизмов") Тогда
		ФункцииМеханизма = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФункцияМеханизма);
	КонецЕсли;
	
	РеквизитыФункцийЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ФункцииМеханизма,"ЭтоГруппа");
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Если ФункцииМеханизма[0].Пустая() Тогда
			УстановитьСтатус(Механизм, ОбъектМетаданных, ФункцияМеханизма, НовыйСтатус, Комментарий);
		Иначе
			Для Каждого ФункцияЭтоГруппа Из РеквизитыФункцийЭтоГруппа Цикл
				Если НЕ ФункцияЭтоГруппа.Значение Тогда
					УстановитьСтатус(Механизм, ОбъектМетаданных, ФункцияЭтоГруппа.Ключ, НовыйСтатус, Комментарий);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает комментарий статуса для функции(механизма)
//
// Параметры:
// 	Комментарий - Строка - Устанавливаемый комментарий статуса.
// 	Механизм - СправочникСсылка.РазделыПроекта - Встраиваемый механизм - владелец функции.
// 	ОбъектМетаданных - Массив, СправочникСсылка.ОбъектыМетаданных - Объект метаданных в который встраивается механизм.
// 	ФункцияМеханизма - Массив, СправочникСсылка.ФункцииМеханизмов - Встраиваемая функция. Если не задана, то статус устанавливается для всего механизма в целом.
//
Процедура УстановитьКомментарийВстраивания(Знач Комментарий, Механизм, Знач ОбъектМетаданных, Знач ФункцияМеханизма = Неопределено) Экспорт
	
	ПустаяФункция = Справочники.ФункцииМеханизмов.ПустаяСсылка();
	Если функцияМеханизма = Неопределено Тогда
		ФункцияМеханизма = ПустаяФункция;
	КонецЕсли;
	
	ОбъектыМетаданных = ОбъектМетаданных;
	Если ТипЗнч(ОбъектМетаданных) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
		ОбъектыМетаданных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектМетаданных);
	КонецЕсли;
	
	ФункцииМеханизма = ФункцияМеханизма;
	Если ТипЗнч(ФункцияМеханизма) = Тип("СправочникСсылка.ФункцииМеханизмов") Тогда
		ФункцииМеханизма = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФункцияМеханизма);
	КонецЕсли;
	
	РеквизитыФункцийЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ФункцииМеханизма,"ЭтоГруппа");
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		Для Каждого ФункцияЭтоГруппа Из РеквизитыФункцийЭтоГруппа Цикл
			Если НЕ ФункцияЭтоГруппа.Значение Тогда
				УстановитьКомментарий(Механизм, ОбъектМетаданных, ФункцияЭтоГруппа.Ключ, Комментарий);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает отбор динамического списка по статусу
//
// Параметры:
// 	Список - ДинамическийСписок - Динамический список отображающий статусы встраивания 
//													для которого необходимо сформировать строку гиперссылок отборов
// 	НовыйОтбор - Строка - отбор который необходимо установить. Список возможных значений см. имена значений Перечисления.СтатусыВстраиванияФункцийМеханизмов
// 	ОтборПоСтатусам - ФорматированнаяСтрока - Форматированная строка отображающая на форме гиперссылки отборов
//
Процедура УстановитьОтборСпискаПоСтатусу(Список, НовыйОтбор, ОтборыПоСтатусам) Экспорт
	
	Если НовыйОтбор = СтрЗаменить(ТРег(НСтр("ru = 'Все'")), " ","") Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			Список,
			"СтатусВстраивания");
	Иначе
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыВстраиванияФункцийМеханизмов." + НовыйОтбор);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			"СтатусВстраивания",
			Статус);
	КонецЕсли;
	
	ОтборыПоСтатусам = СтрокаОтборовПоСтатусам(Список);
	
КонецПроцедуры

// Возвращает форматированную строку гиперссыллок отборов по статусам
//
// Параметры:
// 	Список - ДинамическийСписок - Динамический список отображающий статусы встраивания 
//													для которого необходимо сформировать строку гиперссылок отборов
//
Функция СтрокаОтборовПоСтатусам(Список) Экспорт

	СтрокиЗапроса = СтрРазделить(Список.ТекстЗапроса, Символы.ПС);
	НовыеСтрокиЗапроса = Новый Массив;
	Первый = Истина;
	Для Каждого СтрокаЗапроса Из СтрокиЗапроса Цикл
		НовыеСтрокиЗапроса.Добавить(СтрокаЗапроса);
		Если Первый И СтрНачинаетсяС(СокрЛП(СтрокаЗапроса), "ВЫБРАТЬ") Тогда
			Первый = Ложь;
			НовыеСтрокиЗапроса.Добавить("	1 КАК Всего,");
		КонецЕсли;
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(НовыеСтрокиЗапроса, Символы.ПС);
	
	СхемаСписка = ОбщегоНазначенияСППР.СхемаКомпоновкиДанныхПоЗапросу(ТекстЗапроса);
	НовыйРесурс = СхемаСписка.ПоляИтога.Добавить();
	НовыйРесурс.Выражение = "СУММА(Всего)";
	НовыйРесурс.ПутьКДанным = "Всего";
	
	НастройкиСтатусов = ОбщегоНазначенияСППР.СкомпоноватьНастройки(СхемаСписка);
	Группировка = НастройкиСтатусов.Структура[0];
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("СтатусВстраивания");
	
	ДетальныеЗаписи = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	РасположениеИтогов = НастройкиСтатусов.ПараметрыВывода.Элементы.Найти("ВертикальноеРасположениеОбщихИтогов");
	РасположениеИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	РасположениеИтогов.Использование = Истина;
	
	НастройкиСписка = Список.КомпоновщикНастроек.ПолучитьНастройки();
	Для Каждого ПараметрИсточника Из НастройкиСписка.ПараметрыДанных.Элементы Цикл
		НовыйПараметр = НастройкиСтатусов.ПараметрыДанных.Элементы.Найти(Строка(ПараметрИсточника.Параметр));
		ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточника);
		Если Строка(ПараметрИсточника.Параметр) = "ИндексКартикиПереопределяемый" Тогда
			НовыйПараметр.Значение = 1;
			НовыйПараметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	ОбщегоНазначенияСППР.СкопироватьОтбор(НастройкиСписка.Отбор, НастройкиСтатусов.Отбор,Истина,"СтатусВстраивания");
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаСписка, НастройкиСтатусов,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	
	// Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	СтатусыВстраивания = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(СтатусыВстраивания);
	СтатусыВстраивания = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ОтборыПоСтатусу = Новый Массив;
	ОтборыПоСтатусу.Добавить(Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеобходимоВстроить);
	ОтборыПоСтатусу.Добавить(Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеВстраивается);
	ОтборыПоСтатусу.Добавить(Перечисления.СтатусыВстраиванияФункцийМеханизмов.ТребуетсяАнализ);
	ОтборыПоСтатусу.Добавить(Перечисления.СтатусыВстраиванияФункцийМеханизмов.Встроена);
	Если Список.ОсновнаяТаблица = "Справочник.РазделыПроекта" Тогда
		ОтборыПоСтатусу.Очистить();
		ОтборыПоСтатусу.Добавить(Перечисления.СтатусыВстраиванияФункцийМеханизмов.НеВстраивается);
		ОтборыПоСтатусу.Добавить(Перечисления.СтатусыВстраиванияФункцийМеханизмов.Встраивается);
	КонецЕсли;
	
	ЦветаСтатусов = Перечисления.СтатусыВстраиванияФункцийМеханизмов.ЦветаСтатусов();
	МассивСтрок = Новый Массив;
	Для Каждого ОтборСтатуса Из ОтборыПоСтатусу Цикл
	
		ТекстСтатуса = СтрШаблон("%1 (0)", Строка(ОтборСтатуса));
		Статус = СтатусыВстраивания.Строки.Найти(ОтборСтатуса,"СтатусВстраивания");
		Если Статус <> Неопределено Тогда
			ТекстСтатуса = СтрШаблон("%1 (%2)", Строка(ОтборСтатуса), Статус.Всего);
		КонецЕсли;
		СтрокаГиперссылки = Новый ФорматированнаяСтрока(
			ТекстСтатуса, , 
			ЦветаСтатусов[ОтборСтатуса], ,
			СтрЗаменить(ТРег(Строка(ОтборСтатуса))," ",""));
			
		МассивСтрок.Добавить(СтрокаГиперссылки);
		МассивСтрок.Добавить(" ");
		
	КонецЦикла;
	
	ТекстСтатуса = НСтр("ru = 'Все'");
	СтрокаГиперссылки = Новый ФорматированнаяСтрока(
		ТекстСтатуса, , 
		ЦветаСтиля.ЦветТекстаКнопки, ,
		СтрЗаменить("Все"," ",""));
		
	МассивСтрок.Добавить(СтрокаГиперссылки);
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ОбъектМетаданных.Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатус(Механизм, ОбъектМетаданных, ФункцияМеханизма, НовыйСтатус, Комментарий = "")
	
	Набор = РегистрыСведений.СтатусыВстраиванияМеханизмов.СоздатьНаборЗаписей();
	Набор.Отбор.Механизм.Установить(Механизм);
	Набор.Отбор.ОбъектМетаданных.Установить(ОбъектМетаданных);
	Набор.Отбор.ФункцияМеханизма.Установить(ФункцияМеханизма);
	
	Запись = Набор.Добавить();
	Запись.Механизм = Механизм;
	Запись.ФункцияМеханизма = ФункцияМеханизма;
	Запись.ОбъектМетаданных = ОбъектМетаданных;
	Запись.СтатусВстраивания = НовыйСтатус;
	Запись.Комментарий = Комментарий;
	Набор.Записать();
	
КонецПроцедуры

Процедура УстановитьКомментарий(Механизм, ОбъектМетаданных, ФункцияМеханизма, Комментарий = "")
	
	Набор = РегистрыСведений.СтатусыВстраиванияМеханизмов.СоздатьНаборЗаписей();
	Набор.Отбор.Механизм.Установить(Механизм);
	Набор.Отбор.ОбъектМетаданных.Установить(ОбъектМетаданных);
	Набор.Отбор.ФункцияМеханизма.Установить(ФункцияМеханизма);
	
	Набор.Прочитать();
	Если Набор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Набор[0];
	Запись.Комментарий = Комментарий;
	Набор.ОбменДанными.Загрузка = Истина;
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли