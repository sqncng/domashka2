#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Выполняет регистрацию ошибок для переданных записей результатов проверки
//
// Параметры:
//  ЗаписиДляРегистрации - ВыделенныеСтроки - коллекция записей результатов проверки.
//
Процедура ЗарегистрироватьОшибки(ЗаписиДляРегистрации) Экспорт
	
	ПараметрыОшибки = ПараметрыОшибки();
	ОшибкиДляРегистрации = ТаблицаДляРегистрируемыхОшибок();
	
	Для каждого КлючЗаписи из ЗаписиДляРегистрации Цикл
		
		Если ТипЗнч(КлючЗаписи.ОбъектПроверки) <> Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОшибкиДляРегистрации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);
		
	КонецЦикла;
	
	Если ОшибкиДляРегистрации.Количество() > 0 Тогда
		ВыполнитьРегистрациюОшибок(ОшибкиДляРегистрации, ПараметрыОшибки);
	КонецЕсли;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ОбъектПроверки.Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыОшибки()
	
	ПараметрыОшибки = Новый Структура();
	ПараметрыОшибки.Вставить("Проект");
	ПараметрыОшибки.Вставить("Наименование");
	ПараметрыОшибки.Вставить("ИсходнаяИнформация");
	ПараметрыОшибки.Вставить("ПорядокВоспроизведения");
	ПараметрыОшибки.Вставить("ДатаОбнаружения");
	ПараметрыОшибки.Вставить("КомуНаправлена");
	
	Возврат ПараметрыОшибки;
	
КонецФункции

Функция ВеткаОбнаруженияДляОшибки(Проект)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Ветка");
	
КонецФункции

Функция СоздатьОшибку(ПараметрыОшибки)

	Ошибка = Справочники.Ошибки.СоздатьЭлемент();
	Ошибка.Заполнить(Неопределено);
	
	Ошибка.Владелец                   = ПараметрыОшибки.Проект;
	Ошибка.Наименование               = ПараметрыОшибки.Наименование;
	Ошибка.Обнаружена                 = Перечисления.МестаОбнаруженияОшибок.ВВетке;
	Ошибка.ДатаОбнаружения            = ПараметрыОшибки.ДатаОбнаружения;
	Ошибка.ПорядокВоспроизведения     = ПараметрыОшибки.ПорядокВоспроизведения;
	Ошибка.ИсходнаяИнформацияОбОшибке = ПараметрыОшибки.ИсходнаяИнформация;
	Ошибка.СрочностьИсправления       = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке;
	Ошибка.Статус                     = Перечисления.СтатусыОшибок.Зарегистрирована;
	Ошибка.Зарегистрирована           = Истина;
	Ошибка.КомуНаправлена             = ПараметрыОшибки.КомуНаправлена;
	Ошибка.Зарегистрировал            = Пользователи.ТекущийПользователь();
	Ошибка.Автор                      = Пользователи.ТекущийПользователь();
	Ошибка.Обнаружена                 = Перечисления.МестаОбнаруженияОшибок.ВВетке;
	Ошибка.Исправляется               = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения;
	Ошибка.ВеткаОбнаружения           = ВеткаОбнаруженияДляОшибки(Ошибка.Владелец);
	Ошибка.ВеткаИсправления           = Ошибка.ВеткаОбнаружения;
	
	ДанныеОбнаружения = Новый Структура;
	ДанныеОбнаружения.Вставить("Обнаружена", Ошибка.Обнаружена);
	ДанныеОбнаружения.Вставить("ВеткаОбнаружения", Ошибка.ВеткаОбнаружения);
	ДанныеОбнаружения.Вставить("СборкаОбнаружения", Ошибка.СборкаОбнаружения);
	ДанныеОбнаружения.Вставить("ДатаОбнаружения", Ошибка.ДатаОбнаружения);
	
	Ошибка.ВерсияИсправления          = Справочники.Ошибки.ВерсияИсправления(Ошибка.Владелец,
												ДанныеОбнаружения,
												Ошибка.СрочностьИсправления,
												Ошибка.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
												Ошибка.Исправляется);
												
	// Если для пользователя настроено замещение, то в поле Кому направлена подставляется замещающий
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Ошибка.КомуНаправлена, Ошибка.Владелец, "", Ложь);
	
	Попытка
		Ошибка.Записать();
		Возврат Ошибка.Ссылка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ТаблицаДляРегистрируемыхОшибок()
	
	Измерения = Метаданные.РегистрыСведений.РезультатыПроверкиОбъектов.Измерения;
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ПравилоПроверкиОбъектов", Новый ОписаниеТипов(Измерения.ПравилоПроверкиОбъектов.Тип));
	Таблица.Колонки.Добавить("ОбъектПроверки", Новый ОписаниеТипов(Измерения.ОбъектПроверки.Тип));
	Таблица.Колонки.Добавить("ЭлементОбъекта", Новый ОписаниеТипов(Измерения.ЭлементОбъекта.Тип));
	Таблица.Колонки.Добавить("Номер", Новый ОписаниеТипов(Измерения.Номер.Тип));
	
	Возврат Таблица;
	
КонецФункции

Процедура ВыполнитьРегистрациюОшибок(ОшибкиДляРегистрации, ПараметрыОШибки)
	
	МенеджерЗаписи = РегистрыСведений.РезультатыПроверкиОбъектов.СоздатьМенеджерЗаписи();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОшибок.ПравилоПроверкиОбъектов,
	|	ТаблицаОшибок.ЭлементОбъекта,
	|	ТаблицаОшибок.Номер,
	|	ТаблицаОшибок.ОбъектПроверки
	|ПОМЕСТИТЬ ВТТаблицаОшибок
	|ИЗ
	|	&ТаблицаОшибок КАК ТаблицаОшибок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Ссылка,
	|	ОбъектыМетаданных.Владелец КАК Проект,
	|	ОбъектыМетаданных.Ответственный КАК КомуНаправлена,
	|	РезультатыПроверкиОбъектов.Информация КАК ИсходнаяИнформация,
	|	РезультатыПроверкиОбъектов.Исключение,
	|	РезультатыПроверкиОбъектов.Ошибка,
	|	РезультатыПроверкиОбъектов.ПравилоПроверкиОбъектов.Описание КАК ПорядокВоспроизведения,
	|	РезультатыПроверкиОбъектов.ПравилоПроверкиОбъектов.Важность КАК Важность,
	|	РезультатыПроверкиОбъектов.ПравилоПроверкиОбъектов КАК Наименование,
	|	&ДатаОбнаружения КАК ДатаОбнаружения,
	|	РезультатыПроверкиОбъектов.ПравилоПроверкиОбъектов,
	|	РезультатыПроверкиОбъектов.ОбъектПроверки,
	|	РезультатыПроверкиОбъектов.ЭлементОбъекта,
	|	РезультатыПроверкиОбъектов.Номер
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиОбъектов КАК РезультатыПроверкиОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|		ПО РезультатыПроверкиОбъектов.ОбъектПроверки = ОбъектыМетаданных.Ссылка
	|ГДЕ
	|	РезультатыПроверкиОбъектов.Ошибка = &ПустаяСсылкаОшибка
	|	И (РезультатыПроверкиОбъектов.ПравилоПроверкиОбъектов, РезультатыПроверкиОбъектов.ОбъектПроверки, РезультатыПроверкиОбъектов.ЭлементОбъекта, РезультатыПроверкиОбъектов.Номер) В
	|			(ВЫБРАТЬ
	|				ВТТаблицаОшибок.ПравилоПроверкиОбъектов,
	|				ВТТаблицаОшибок.ОбъектПроверки,
	|				ВТТаблицаОшибок.ЭлементОбъекта,
	|				ВТТаблицаОшибок.Номер
	|			ИЗ
	|				ВТТаблицаОшибок КАК ВТТаблицаОшибок)
	|	И НЕ РезультатыПроверкиОбъектов.Исключение";
	
	Запрос.УстановитьПараметр("ТаблицаОшибок",      ОшибкиДляРегистрации);
	Запрос.УстановитьПараметр("ПустаяСсылкаОшибка", Справочники.Ошибки.ПустаяСсылка());
	Запрос.УстановитьПараметр("ДатаОбнаружения",    ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОшибки, Выборка);
		
		Попытка
			Ошибка = СоздатьОшибку(ПараметрыОшибки);
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Регистрация ошибок'",
			                         ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
									 УровеньЖурналаРегистрации.Ошибка,
									 ,
									 ,
									 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, "ПравилоПроверкиОбъектов,ОбъектПроверки,ЭлементОбъекта,Номер,");
			
			МенеджерЗаписи.Прочитать();
			
			МенеджерЗаписи.Ошибка = Ошибка;
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись ошибки в реквизит регистра'",
				                         ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
										 УровеньЖурналаРегистрации.Ошибка,
										 ,
										 ,
										 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли