#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура РасчитатьЭтапыПроцессаПоПредмету(Предмет) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗадачиПроцесса.Родитель КАК Родитель
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.ЗадачаШаблона <> ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|	И ЗадачиПроцесса.Предмет = &Предмет";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	МассивРассчитываемыхЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Родитель");
	МассивРассчитываемыхЗадач.Добавить(Справочники.ЗадачиПроцесса.ПустаяСсылка());
	РассчитатьЭтапыПроцессаПоМассивуРодителей(МассивРассчитываемыхЗадач, Предмет);
	
КонецПроцедуры

Процедура РассчитатьЭтапыПроцессаПоМассивуРодителей(МассивРассчитываемыхЗадач, Предмет) Экспорт
	
	Если МассивРассчитываемыхЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонПроцесса = ЗадачиПроцессов.ШаблонПроцессаПоПредмету(Предмет);
	Если ШаблонПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МаксимальнаяДатаОкончанияЭтапов = Неопределено;
	
	Если МассивРассчитываемыхЗадач.Найти(Справочники.ЗадачиПроцесса.ПустаяСсылка()) <> Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗадачиПроцесса.КрайняяДатаОкончания) КАК МаксимальнаяДатаОкончанияЭтапов
		|ИЗ
		|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|ГДЕ
		|	ЗадачиПроцесса.Предмет В(&Предмет)
		|	И ЗадачиПроцесса.ЗадачаШаблона <> ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
		|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
		|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))";
		
		Запрос.УстановитьПараметр("Предмет", Предмет);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Выборка.Следующий();
			
			Если Выборка.МаксимальнаяДатаОкончанияЭтапов = Null Тогда
				
				МаксимальнаяДатаОкончанияЭтапов = Дата(1,1,1);
				
			Иначе
				
				МаксимальнаяДатаОкончанияЭтапов = Выборка.МаксимальнаяДатаОкончанияЭтапов;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка        КАК Ссылка,
	|	ЗадачиПроцесса.ЗадачаШаблона КАК ЗадачаШаблона
	|ПОМЕСТИТЬ ЗадачиРодители
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В(&МассивРодителей)
	|	И ЗадачиПроцесса.ЗадачаШаблона <> ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
	|ГДЕ
	|	ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка) В (&МассивРодителей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПроцессаРодители.Ссылка                                                                   КАК Родитель,
	|	ЗадачиПроцессаРодители.ЗадачаШаблона                                                            КАК ЗадачаШаблона,
	|	ЕСТЬNULL(ЗадачиПроцесса.ПлановаяДлительность, 0)                                                КАК ПлановаяДлительность,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.ЗначениеУпорядочивания, 0)                                     КАК ЗначениеУпорядочивания,
	|	ЕСТЬNULL(ЗадачиПроцесса.КрайняяДатаОкончания, ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1))                      КАК КрайняяДатаОкончания,
	|	ЕСТЬNULL(ЗадачиПроцесса.ЗадачаШаблона, ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)) КАК ЭтапПроцесса,
	|ВЫБОР
	|	КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|		ТОГДА 0
	|	КОГДА ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована)
	|		ТОГДА 1
	|	ИНАЧЕ 2
	|КОНЕЦ КАК ПорядокПоСтатусу
	|ИЗ
	|	ЗадачиРодители КАК ЗадачиПроцессаРодители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО ЗадачиПроцесса.Ссылка = СостоянияЗадачПроцессов.ЗадачаПроцесса
	|		ПО (ЗадачиПроцесса.Родитель = ЗадачиПроцессаРодители.Ссылка)
	|			И (НЕ ЗадачиПроцесса.ПометкаУдаления)
	|			И (ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)))
	|			И (ЗадачиПроцесса.ЗадачаШаблона <> ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка))
	|			И (ЗадачиПроцесса.Предмет = &Предмет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания,
	|	ПорядокПоСтатусу,
	|	ПлановаяДлительность
	|ИТОГИ ПО
	|	Родитель";
	
	Запрос.УстановитьПараметр("МассивРодителей", МассивРассчитываемыхЗадач);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	ВыборкаРодители = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРодители.Следующий() Цикл
	
		ТекущийЭтапПроцесса  = Справочники.ЗадачиШаблонаПроцесса.ПустаяСсылка();
		КрайняяДатаОкончания = Дата(1, 1, 1);
		
		ВыборкаДетали = ВыборкаРодители.Выбрать();
		Если ВыборкаДетали.Следующий() Тогда
			
			ЗадачаПроцесса       = ВыборкаДетали.ЗадачаШаблона;
			ТекущийЭтапПроцесса  = ВыборкаДетали.ЭтапПроцесса;
			КрайняяДатаОкончания = ВыборкаДетали.КрайняяДатаОкончания;
			
		КонецЕсли;
		
		ДанныеЗаписи = СтруктураЗаписи();
		ДанныеЗаписи.Предмет              = Предмет;
		ДанныеЗаписи.ШаблонПроцесса       = ШаблонПроцесса;
		ДанныеЗаписи.ЗадачаПроцесса       = ЗадачаПроцесса;
		ДанныеЗаписи.ТекущийЭтапПроцесса  = ТекущийЭтапПроцесса;
		ДанныеЗаписи.КрайняяДатаОкончания = КрайняяДатаОкончания;

		Если ЗадачаПроцесса = Справочники.ЗадачиШаблонаПроцесса.ПустаяСсылка()
			И МаксимальнаяДатаОкончанияЭтапов <> Неопределено Тогда
				
			ДанныеЗаписи.МаксимальнаяДатаОкончанияЭтапов = МаксимальнаяДатаОкончанияЭтапов;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекущийЭтапПроцесса)
			И ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
			
			УдалитьЗапись(ДанныеЗаписи);
			
		Иначе
			
			ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистр(Данные) Экспорт

	НаборЗаписей = СоздатьНаборЗаписей();
	УстановитьОтборНаборЗаписей(НаборЗаписей, Данные);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, Данные);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьЗапись(Данные) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	УстановитьОтборНаборЗаписей(НаборЗаписей, Данные);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьЗаписиПоПредмету(Предмет, УдалятьСвязьСШаблоном = Ложь) Экспорт
	
	Если УдалятьСвязьСШаблоном Тогда
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Предмет.Установить(Предмет);
		НаборЗаписей.Записать();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ЭтапыПроцесса.Предмет        КАК Предмет,
		|	ЭтапыПроцесса.ШаблонПроцесса КАК ШаблонПроцесса,
		|	ЭтапыПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса
		|ИЗ
		|	РегистрСведений.ЭтапыПроцесса КАК ЭтапыПроцесса
		|ГДЕ
		|	ЭтапыПроцесса.Предмет = &Предмет
		|	И ЭтапыПроцесса.ЗадачаПроцесса <> ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("Предмет", Предмет);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			ДанныеЗаписи = СтруктураЗаписи();
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Выборка);
			УдалитьЗапись(ДанныеЗаписи);
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураЗаписи() Экспорт
	
	ДанныеЗаписи = Новый Структура;
	
	ДанныеЗаписи.Вставить("Предмет",                         Неопределено);
	ДанныеЗаписи.Вставить("ШаблонПроцесса",                  Справочники.ШаблоныПроцесса.ПустаяСсылка());
	ДанныеЗаписи.Вставить("ЗадачаПроцесса",                  Справочники.ЗадачиШаблонаПроцесса.ПустаяСсылка());
	ДанныеЗаписи.Вставить("ТекущийЭтапПроцесса",             Справочники.ЗадачиШаблонаПроцесса.ПустаяСсылка());
	ДанныеЗаписи.Вставить("КрайняяДатаОкончания",            Дата(1,1,1));
	ДанныеЗаписи.Вставить("МаксимальнаяДатаОкончанияЭтапов", Дата(1,1,1));
	
	Возврат ДанныеЗаписи;
	
КонецФункции

Процедура СвязатьПроцессИШаблон(Предмет, Шаблон) Экспорт
	
	Данные = СтруктураЗаписи();
	Данные.Предмет        = Предмет;
	Данные.ШаблонПроцесса = Шаблон;
	Данные.ЗадачаПроцесса = Справочники.ЗадачиПроцесса.ПустаяСсылка();
	
	НаборЗаписей = СоздатьНаборЗаписей();
	УстановитьОтборНаборЗаписей(НаборЗаписей, Данные);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, Данные);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Предмет.Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОтборНаборЗаписей(НаборЗаписей, Данные)
	
	НаборЗаписей.Отбор.Предмет.Установить(Данные.Предмет);
	НаборЗаписей.Отбор.ШаблонПроцесса.Установить(Данные.ШаблонПроцесса);
	НаборЗаписей.Отбор.ЗадачаПроцесса.Установить(Данные.ЗадачаПроцесса);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли