#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет перенос задачи в очереди
//
// Параметры:
//  ПараметрыПереноса  - Структура - см. ПараметрыПереносаЗадачиВОчереди
//
Функция ПеренестиЗадачуВОчереди(ПараметрыПереноса) Экспорт
	
	Если ПараметрыПереноса.ВариантПереноса = ВариантыПереносаЗадачВОчереди().ПередЗадачей Тогда
		
		ПеренестиЗадачуПередДругойЗадачей(ПараметрыПереноса);
		
	ИначеЕсли ПараметрыПереноса.ВариантПереноса = ВариантыПереносаЗадачВОчереди().ПослеЗадачи Тогда
		
		ПеренестиЗадачуПослеДругойЗадачей(ПараметрыПереноса);
		
	ИначеЕсли ПараметрыПереноса.ВариантПереноса = ВариантыПереносаЗадачВОчереди().ВНачалоОчередиПриоритета Тогда
		
		ПеренестиЗадачуВНачалоОчередиПриоритета(ПараметрыПереноса);
		
	ИначеЕсли ПараметрыПереноса.ВариантПереноса = ВариантыПереносаЗадачВОчереди().ВКонецОчередиПриоритета Тогда
		
		ПеренестиЗадачуВКонецОчередиПриоритета(ПараметрыПереноса);
		
	КонецЕсли;
	
КонецФункции

// Конструктор параметров переноса задач в очереди
//
// Возвращаемое значение:
//   Структура   - содержит:
//    * Задача                   - СправочникСсылка.ЗадачиПроцесса - переносимая задача.
//    * Сотрудник                - СправочникСсылка.Пользователи - сотрудник, чья очередь изменяется.
//    * КудаПереносим            - СправочникСсылка.ЗадачиПроцесса - задача, относительно которой выполняется перенос.
//    * ВариантПереноса          - Строка - см.ВариантыПереносаЗадачВОчереди.
//    * СтарыйПриоритет          - СправочникСсылка.ПриоритетыРабот - старый приоритет задачи.
//    * НовыйПриоритет           - СправочникСсылка.ПриоритетыРабот - новый приоритет задачи.
//    * ПорядокСтарогоПриоритета - Число - порядок старого приоритета.
//    * ПорядокНовогоПриоритета  - Число - порядок нового приоритета.
//
Функция ПараметрыПереносаЗадачиВОчереди() Экспорт
	
	ПараметрыПереноса = Новый Структура;
	ПараметрыПереноса.Вставить("Задача",                   Справочники.ЗадачиПроцесса.ПустаяСсылка());
	ПараметрыПереноса.Вставить("Сотрудник",                Справочники.Пользователи.ПустаяСсылка());
	ПараметрыПереноса.Вставить("КудаПереносим",            Неопределено);
	ПараметрыПереноса.Вставить("ВариантПереноса",          Неопределено);
	ПараметрыПереноса.Вставить("СтарыйПриоритет",          Справочники.ПриоритетыРабот.ПустаяСсылка());
	ПараметрыПереноса.Вставить("НовыйПриоритет",           Справочники.ПриоритетыРабот.ПустаяСсылка());
	ПараметрыПереноса.Вставить("ПорядокСтарогоПриоритета", 0);
	ПараметрыПереноса.Вставить("ПорядокНовогоПриоритета",  0);
	
	Возврат ПараметрыПереноса;
	
КонецФункции

// Определяет соседние работы того же самого порядка приоритета в очереди для работы
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи - сотрудник очереди.
//  Задача    - СправочникСсылка.ЗадачиПроцесса - работа, для которой определяются соседние.
//
// Возвращаемое значение:
//   Структура   - содержит:
//    * Предыдущая - СправочникСсылка.ЗадачиПроцесса - задача, предшествующая в очереди относительно текущей.
//    * Следующая  - СправочникСсылка.ЗадачиПроцесса - задача, следующая за текущей в очереди.
//
Функция СоседниеРаботыВОчереди(Сотрудник, Работа) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Предыдущая", Неопределено);
	Результат.Вставить("Следующая", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.НомерВОчереди     КАК НомерВОчереди,
	|	ОчередиРаботСотрудников.ПорядокПриоритета КАК ПорядокПриоритета
	|ПОМЕСТИТЬ НомерВОчередиТекущейЗадачи
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник
	|	И ОчередиРаботСотрудников.Работа = &Работа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.Работа        КАК Работа,
	|	ОчередиРаботСотрудников.НомерВОчереди КАК НомерВОчереди,
	|	""Предыдущая"" КАК ВидСоседства
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомерВОчередиТекущейЗадачи КАК НомерВОчередиТекущейЗадачи
	|		ПО (НомерВОчередиТекущейЗадачи.НомерВОчереди - 1 = ОчередиРаботСотрудников.НомерВОчереди
	|			И НомерВОчередиТекущейЗадачи.ПорядокПриоритета = ОчередиРаботСотрудников.ПорядокПриоритета)
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.Работа,
	|	ОчередиРаботСотрудников.НомерВОчереди,
	|	""Следующая""
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомерВОчередиТекущейЗадачи КАК НомерВОчередиТекущейЗадачи
	|		ПО (НомерВОчередиТекущейЗадачи.НомерВОчереди + 1 = ОчередиРаботСотрудников.НомерВОчереди
	|			И НомерВОчередиТекущейЗадачи.ПорядокПриоритета = ОчередиРаботСотрудников.ПорядокПриоритета)
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("Работа",    Работа);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ВидСоседства = "Предыдущая" Тогда
			Результат.Предыдущая = Выборка.Работа;
		ИначеЕсли Выборка.ВидСоседства = "Следующая" Тогда
			Результат.Следующая = Выборка.Работа;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Словарь вариантов переноса задач в очереди
//
// Возвращаемое значение:
//   Структура
//
Функция ВариантыПереносаЗадачВОчереди() Экспорт
	
	ВариантыПереноса = Новый Структура;
	ВариантыПереноса.Вставить("ПередЗадачей",             "ПередЗадачей");
	ВариантыПереноса.Вставить("ПослеЗадачи",              "ПослеЗадачи");
	ВариантыПереноса.Вставить("ВНачалоОчередиПриоритета", "ВНачалоОчередиПриоритета");
	ВариантыПереноса.Вставить("ВКонецОчередиПриоритета",  "ВКонецОчередиПриоритета");
	
	Возврат ВариантыПереноса;
	
КонецФункции

// Определяет вариант переноса задачи в очереди при изменении приоритета задача
//
// Параметры:
//  Исполнитель      - СправочникСсылка.Пользователи - исполнитель задачи.
//  Задача           - СправочникСсылка.ЗадачиПроцесса - задача, у которой изменяется приоритет.
//  НовыйПриоритет   - СправочникСсылка.ПриоритетыРабот - новый приоритет задачи.
//
// Возвращаемое значение:
//   Строка - см. ВариантыПереносаЗадачВОчереди
//
Функция ВариантПереносаПриИзмененииПриоритетаЗадачи(Исполнитель, Задача, НовыйПриоритет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыРабот.ЗначениеУпорядочивания КАК ЗначениеУпорядочивания
	|ПОМЕСТИТЬ НовыйПриоритет
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	НЕ ПриоритетыРабот.ПометкаУдаления
	|	И ПриоритетыРабот.Ссылка = &НовыйПриоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыРаботСправочник.ЗначениеУпорядочивания КАК ЗначениеУпорядочивания
	|ПОМЕСТИТЬ СтарыйПриоритет
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПриоритетыРабот КАК ПриоритетыРаботСправочник
	|		ПО ОчередиРаботСотрудников.Приоритет = ПриоритетыРаботСправочник.Ссылка
	|ГДЕ
	|	ОчередиРаботСотрудников.Работа = &Задача
	|	И ОчередиРаботСотрудников.Сотрудник = &Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НовыйПриоритет.ЗначениеУпорядочивания > СтарыйПриоритет.ЗначениеУпорядочивания
	|			ТОГДА &ВНачалоОчередиПриоритета
	|		ИНАЧЕ &ВКонецОчередиПриоритета
	|	КОНЕЦ КАК ВариантПереноса
	|ИЗ
	|	НовыйПриоритет КАК НовыйПриоритет,
	|	СтарыйПриоритет КАК СтарыйПриоритет";
	
	Запрос.УстановитьПараметр("НовыйПриоритет",           НовыйПриоритет);
	Запрос.УстановитьПараметр("Исполнитель",              Исполнитель);
	Запрос.УстановитьПараметр("Задача",                   Задача);
	Запрос.УстановитьПараметр("ВНачалоОчередиПриоритета", ВариантыПереносаЗадачВОчереди().ВНачалоОчередиПриоритета);
	Запрос.УстановитьПараметр("ВКонецОчередиПриоритета",  ВариантыПереносаЗадачВОчереди().ВКонецОчередиПриоритета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.ВариантПереноса;
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет запись из регистра
//
// Параметры:
//  ДанныеЗаписи  - Структура - см. ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеЗаписиОчередьРаботя
//
Процедура УдалитьЗапись(ДанныеЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(ДанныеЗаписи.Сотрудник);
	НаборЗаписей.Отбор.Приоритет.Установить(ДанныеЗаписи.Приоритет);
	НаборЗаписей.Отбор.НомерВОчереди.Установить(ДанныеЗаписи.НомерВОчереди);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет запись данных в регистр
//
// Параметры:
//  ДанныеЗаписи  - Структура - см. ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеЗаписиОчередьРабот
//
Процедура ЗаписатьДанные(ДанныеЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(ДанныеЗаписи.Сотрудник);
	НаборЗаписей.Отбор.Приоритет.Установить(ДанныеЗаписи.Приоритет);
	НаборЗаписей.Отбор.НомерВОчереди.Установить(ДанныеЗаписи.НомерВОчереди);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		
	Иначе
		
		ЗаписьНабора = НаборЗаписей[0];
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеЗаписи);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Формирует очередь работ.
//
// Параметры:
//  ПараметрыФормирования - Структура - см. НовыйПараметрыФормированияОчередиСотрудников
//
Процедура СформироватьОчередьРаботСотрудников(ПараметрыФормирования) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОчередиЗадач") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                      КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗадачиПроцесса.Исполнитель = ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ)                                                  КАК ЯвляетсяИсполнителемОднойИзРодительских,
	|	МАКСИМУМ(СостоянияЗадачПроцессов.ДатаГотовностиКВыполнению) КАК ДатаГотовностиКВыполнению,
	|	ЗадачиПроцесса.Исполнитель                                  КАК Исполнитель
	|ПОМЕСТИТЬ ЗадачиКоторыеДолжныБытьВОчереди
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|			ПО ИерархияЗадачПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка
	|		ПО ЗадачиПроцесса.Ссылка = ИерархияЗадачПроцесса.ЗадачаПроцесса
	|			И ЗадачиПроцесса.Ссылка <> ИерархияЗадачПроцесса.Родитель
	|ГДЕ
	|	СостоянияЗадачПроцессов.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачПроцессов.ВыполняетсяОжидаетДочерних), ЗНАЧЕНИЕ(Перечисление.СостоянияЗадачПроцессов.Выполняется))
	|	И ВЫБОР
	|			КОГДА &ИспользоватьОтборПоРаботам
	|				ТОГДА ЗадачиПроцесса.Ссылка В (&ОтборПоРаботам)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И ЗадачиПроцесса.Исполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗадачиПроцесса.Ссылка,
	|	ЗадачиПроцесса.Исполнитель
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(ВЫБОР
	|				КОГДА ЗадачиПроцесса.Исполнитель = ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Исполнитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКоторыеДолжныБытьВОчереди.Ссылка                                                      КАК Ссылка,
	|	ЕСТЬNULL(ОчередиРаботСотрудников.ПорядокПриоритета, -1)                                     КАК ПорядокОчереди,
	|	ЕСТЬNULL(ПриоритетыРаботСправочник.Порядок, -1)                                             КАК ПорядокПриоритета,
	|	ЕСТЬNULL(ОчередиРаботСотрудников.НомерВОчереди, -1)                                         КАК НомерВОчереди,
	|	ЕСТЬNULL(ОчередиРаботСотрудников.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК ИсполнительВОчереди,
	|	ЗадачиКоторыеДолжныБытьВОчереди.Исполнитель                                                 КАК Исполнитель,
	|	ЗадачиКоторыеДолжныБытьВОчереди.ДатаГотовностиКВыполнению                                   КАК ДатаГотовностиКВыполнению,
	|	ЕСТЬNULL(ПриоритетыРабот.Приоритет, ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка))      КАК Приоритет
	|ПОМЕСТИТЬ РаботыПриоритетыОчереди
	|ИЗ
	|	ЗадачиКоторыеДолжныБытьВОчереди КАК ЗадачиКоторыеДолжныБытьВОчереди
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ПО ЗадачиКоторыеДолжныБытьВОчереди.Ссылка = ОчередиРаботСотрудников.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО ЗадачиКоторыеДолжныБытьВОчереди.Ссылка = ПриоритетыРабот.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПриоритетыРабот КАК ПриоритетыРаботСправочник
	|		ПО (ПриоритетыРабот.Приоритет = ПриоритетыРаботСправочник.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиКоторыеДолжныБытьВОчереди.Ссылка КАК Работа,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец
	|		ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец
	|	КОНЕЦ КАК Проект
	|ПОМЕСТИТЬ РаботыПроекты
	|ИЗ
	|	ЗадачиКоторыеДолжныБытьВОчереди КАК ЗадачиКоторыеДолжныБытьВОчереди
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиКоторыеДолжныБытьВОчереди.Ссылка = ЗадачиПроцесса.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Владелец КАК Владелец,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
	|				ТОГДА ПриоритетыРабот.Порядок
	|			ИНАЧЕ -1
	|		КОНЕЦ)               КАК ПорядокПриоритетаПоУмолчанию,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриоритетыРабот.Ссылка) КАК КоличествоПриоритетов
	|ПОМЕСТИТЬ ПроектыПорядокПриоритетаПоУмолчанию
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	ПриоритетыРабот.Владелец В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РаботыПроекты.Проект КАК Проект
	|			ИЗ
	|				РаботыПроекты КАК РаботыПроекты)
	|	И НЕ ПриоритетыРабот.ПометкаУдаления
	|	И ПриоритетыРабот.Владелец.ИспользоватьПриоритеты
	|	И НЕ ПриоритетыРабот.Владелец.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриоритетыРабот.Владелец
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
	|				ТОГДА ПриоритетыРабот.Порядок
	|			ИНАЧЕ -1
	|		КОНЕЦ) > 1 И
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриоритетыРабот.Ссылка) > 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Ссылка   КАК Приоритет,
	|	ПриоритетыРабот.Владелец КАК Владелец
	|ПОМЕСТИТЬ ПроектыПриоритетыПоУмолчанию
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроектыПорядокПриоритетаПоУмолчанию КАК ПроектыПорядокПриоритетаПоУмолчанию
	|		ПО ПриоритетыРабот.Владелец = ПроектыПорядокПриоритетаПоУмолчанию.Владелец
	|			И ПриоритетыРабот.Порядок = ПроектыПорядокПриоритетаПоУмолчанию.ПорядокПриоритетаПоУмолчанию
	|ГДЕ
	|	НЕ ПриоритетыРабот.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботыПриоритетыОчереди.Исполнитель               КАК Исполнитель,
	|	РаботыПриоритетыОчереди.Ссылка                    КАК Ссылка,
	|	ВЫБОР
	|		КОГДА РаботыПриоритетыОчереди.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПроектыПорядокПриоритетаПоУмолчанию.ПорядокПриоритетаПоУмолчанию, &ПорядокПриоритетыНеВедутся)
	|		ИНАЧЕ РаботыПриоритетыОчереди.ПорядокПриоритета
	|	КОНЕЦ                                             КАК ПорядокПриоритета,
	|	ВЫБОР
	|		КОГДА РаботыПриоритетыОчереди.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ПроектыПриоритетыПоУмолчанию.Приоритет, ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка))
	|		ИНАЧЕ РаботыПриоритетыОчереди.Приоритет
	|	КОНЕЦ                                             КАК Приоритет,
	|	РаботыПриоритетыОчереди.ДатаГотовностиКВыполнению КАК ДатаГотовностиКВыполнению,
	|	РаботыПриоритетыОчереди.НомерВОчереди             КАК НомерВОчереди,
	|	РаботыПриоритетыОчереди.ПорядокОчереди            КАК ПорядокОчереди,
	|	РаботыПриоритетыОчереди.ИсполнительВОчереди       КАК ИсполнительОчереди
	|ИЗ
	|	РаботыПриоритетыОчереди КАК РаботыПриоритетыОчереди
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаботыПроекты КАК РаботыПроекты
	|		ПО РаботыПриоритетыОчереди.Ссылка = РаботыПроекты.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроектыПорядокПриоритетаПоУмолчанию КАК ПроектыПорядокПриоритетаПоУмолчанию
	|		ПО (РаботыПроекты.Проект = ПроектыПорядокПриоритетаПоУмолчанию.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроектыПриоритетыПоУмолчанию КАК ПроектыПриоритетыПоУмолчанию
	|		ПО (РаботыПроекты.Проект = ПроектыПриоритетыПоУмолчанию.Владелец)
	|ГДЕ
	|	РаботыПриоритетыОчереди.ПорядокОчереди <> ВЫБОР
	|			КОГДА РаботыПриоритетыОчереди.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(ПроектыПорядокПриоритетаПоУмолчанию.ПорядокПриоритетаПоУмолчанию, &ПорядокПриоритетыНеВедутся)
	|			ИНАЧЕ РаботыПриоритетыОчереди.ПорядокПриоритета
	|		КОНЕЦ
	|	ИЛИ РаботыПриоритетыОчереди.ИсполнительВОчереди <> РаботыПриоритетыОчереди.Исполнитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.Сотрудник,
	|	ОчередиРаботСотрудников.Работа,
	|	-1,
	|	ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка),
	|	ДАТАВРЕМЯ(1, 1, 1, 1, 1, 1),
	|	ОчередиРаботСотрудников.НомерВОчереди,
	|	ОчередиРаботСотрудников.ПорядокПриоритета,
	|	ОчередиРаботСотрудников.Сотрудник
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗадачиКоторыеДолжныБытьВОчереди КАК ЗадачиКоторыеДолжныБытьВОчереди
	|		ПО ОчередиРаботСотрудников.Работа = ЗадачиКоторыеДолжныБытьВОчереди.Ссылка
	|ГДЕ
	|	ЗадачиКоторыеДолжныБытьВОчереди.Ссылка ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА &ИспользоватьОтборПоРаботам
	|				ТОГДА ОчередиРаботСотрудников.Работа В (&ОтборПоРаботам)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПриоритета,
	|	ДатаГотовностиКВыполнению
	|ИТОГИ ПО
	|	Исполнитель";
	
	Запрос.УстановитьПараметр("ПорядокПриоритетыНеВедутся", Константы.МаксимальныйПорядокПриоритетаРаботы.Получить() + 1);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоРаботам", ПараметрыФормирования.ИспользоватьОтборПоРаботам);
	Запрос.УстановитьПараметр("ОтборПоРаботам",             ОтборПоРаботамДляФормированияОчереди(ПараметрыФормирования));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РаботыКУдалениюДругихИсполнителей = Новый Соответствие;
	
	ВыборкаИсполнитель = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИсполнитель.Следующий() Цикл
		
		ПорядкиКИзменению = Новый Соответствие;
		
		ВыборкаДетали = ВыборкаИсполнитель.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл 
			
			Если ВыборкаДетали.ПорядокОчереди <> - 1 Тогда
				
				ДанныеПорядка = ДанныеПорядкаПриоритетаПриИзмененииОчереди(ПорядкиКИзменению, ВыборкаДетали.ПорядокОчереди);
				ДанныеПорядка.РаботыКУдалению.Добавить(ВыборкаДетали.Ссылка);
				
			КонецЕсли;
			
			Если ВыборкаДетали.ПорядокПриоритета <> -1 Тогда
				
				ДанныеПорядка = ДанныеПорядкаПриоритетаПриИзмененииОчереди(ПорядкиКИзменению, ВыборкаДетали.ПорядокПриоритета);
				НоваяСтрока = ДанныеПорядка.РаботыКДобавлению.Добавить();
				НоваяСтрока.Сотрудник         = ВыборкаИсполнитель.Исполнитель;
				НоваяСтрока.Работа            = ВыборкаДетали.Ссылка;
				НоваяСтрока.Приоритет         = ВыборкаДетали.Приоритет;
				НоваяСтрока.ПорядокПриоритета = ВыборкаДетали.ПорядокПриоритета;
				
			КонецЕсли;
			
			Если ВыборкаДетали.ИсполнительОчереди <> ВыборкаИсполнитель.Исполнитель
				И ЗначениеЗаполнено(ВыборкаДетали.ИсполнительОчереди) Тогда
				
				ДанныеПорядка = ДанныеПорядкаПриоритетаПриИзмененииОчереди(ПорядкиКИзменению, ВыборкаДетали.ПорядокОчереди);
				НоваяСтрока = ДанныеПорядка.РаботыКУдалениюДругихСотрудников.Добавить();
				НоваяСтрока.Сотрудник         = ВыборкаДетали.ИсполнительОчереди;
				НоваяСтрока.Работа            = ВыборкаДетали.Ссылка;
				НоваяСтрока.ПорядокПриоритета = ВыборкаДетали.ПорядокПриоритета;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ИзменяемыйПорядок Из ПорядкиКИзменению Цикл
			
			ИзменитьОчередьСотрудникаПоДаннымПорядка(ВыборкаИсполнитель.Исполнитель, ИзменяемыйПорядок.Ключ, ИзменяемыйПорядок.Значение); 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет изменение очереди при измении приоритетов работ.
//
// Параметры:
//  РаботыСИзменяемымиПриоритетами - ТаблицаЗначений - содержит колонки:
//    * Работа          - СправочникСсылка.ЗадачиПроцесса  - задача, у которой изменяется приоритет.
//    * Приоритет       - СправочникСсылка.ПриоритетыРабот - текущий приоритет работы.
//    * СтарыйПриоритет - СправочникСсылка.ПриоритетыРабот - новый приоритет работы.
//    * Проект          - СправочникСсылка.Проекты - проект работы.
//
Процедура ОтразитьИзменениеПриоритетовВОчереди(РаботыСИзменяемымиПриоритетами) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботыСИзменяемымиПриоритетами.Работа КАК Работа,
	|	РаботыСИзменяемымиПриоритетами.Приоритет КАК Приоритет,
	|	РаботыСИзменяемымиПриоритетами.СтарыйПриоритет КАК СтарыйПриоритет,
	|	РаботыСИзменяемымиПриоритетами.Проект КАК Проект
	|ПОМЕСТИТЬ РаботыСИзменяемымПриоритетом
	|ИЗ
	|	&РаботыСИзменяемымиПриоритетами КАК РаботыСИзменяемымиПриоритетами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботыСИзменяемымПриоритетом.Работа КАК Работа,
	|	РаботыСИзменяемымПриоритетом.Приоритет КАК Приоритет,
	|	РаботыСИзменяемымПриоритетом.СтарыйПриоритет КАК СтарыйПриоритет,
	|	РаботыСИзменяемымПриоритетом.Проект КАК Проект,
	|	ЕСТЬNULL(ПриоритетыРаботНовый.Порядок, -1) КАК ПорядокПриоритет,
	|	ЕСТЬNULL(ПриоритетыРаботСтарый.Порядок, -1) КАК ПорядокСтарыйПриоритет,
	|	ЕСТЬNULL(ОчередиРаботСотрудников.Сотрудник, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Сотрудник,
	|	ЕСТЬNULL(ОчередиРаботСотрудников.НомерВОчереди, -1) КАК НомерОчереди
	|ИЗ
	|	РаботыСИзменяемымПриоритетом КАК РаботыСИзменяемымПриоритетом
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПриоритетыРабот КАК ПриоритетыРаботСтарый
	|		ПО РаботыСИзменяемымПриоритетом.СтарыйПриоритет = ПриоритетыРаботСтарый.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПриоритетыРабот КАК ПриоритетыРаботНовый
	|		ПО РаботыСИзменяемымПриоритетом.Приоритет = ПриоритетыРаботНовый.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ПО РаботыСИзменяемымПриоритетом.Работа = ОчередиРаботСотрудников.Работа
	|ГДЕ
	|	НЕ ОчередиРаботСотрудников.НомерВОчереди ЕСТЬ NULL
	|	И ЕСТЬNULL(ПриоритетыРаботСтарый.Порядок, -1) <> ЕСТЬNULL(ПриоритетыРаботНовый.Порядок, -1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСтарыйПриоритет УБЫВ,
	|	НомерОчереди УБЫВ
	|ИТОГИ ПО
	|	Сотрудник";
	
	Запрос.УстановитьПараметр("РаботыСИзменяемымиПриоритетами", РаботыСИзменяемымиПриоритетами);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИсполнитель = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИсполнитель.Следующий() Цикл
		
		ПорядкиКИзменению = Новый Соответствие;
		
		ВыборкаДетали = ВыборкаИсполнитель.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			
			ДанныеПорядка = ДанныеПорядкаПриоритетаПриИзмененииОчереди(ПорядкиКИзменению, ВыборкаДетали.ПорядокСтарыйПриоритет);
			ДанныеПорядка.РаботыКУдалению.Добавить(ВыборкаДетали.Работа);
			
			ДанныеПорядка = ДанныеПорядкаПриоритетаПриИзмененииОчереди(ПорядкиКИзменению, ВыборкаДетали.ПорядокПриоритет);
			НоваяСтрока = ДанныеПорядка.РаботыКДобавлению.Добавить();
			НоваяСтрока.Сотрудник                = ВыборкаИсполнитель.Сотрудник;
			НоваяСтрока.Работа                   = ВыборкаДетали.Работа;
			НоваяСтрока.Приоритет                = ВыборкаДетали.Приоритет;
			НоваяСтрока.ПорядокПриоритета        = ВыборкаДетали.ПорядокПриоритет;
			НоваяСтрока.ВариантПомещенияВОчередь = ?(ВыборкаДетали.ПорядокПриоритет > ВыборкаДетали.ПорядокСтарыйПриоритет,
			                                         ВариантыПереносаЗадачВОчереди().ВНачалоОчередиПриоритета,
			                                         ВариантыПереносаЗадачВОчереди().ВКонецОчередиПриоритета);
			
		КонецЦикла;
		
		Для Каждого ИзменяемыйПорядок Из ПорядкиКИзменению Цикл
		
			ИзменитьОчередьСотрудникаПоДаннымПорядка(ВыборкаИсполнитель.Сотрудник, ИзменяемыйПорядок.Ключ, ИзменяемыйПорядок.Значение); 
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет формирование очереди сотрудников в фоне
//
// Параметры:
//
// Параметры:
//  ПараметрыФормирования - Структура - см. НовыйПараметрыФормированияОчередиСотрудников
//
Процедура СформироватьОчередьРаботСотрудниковВФоне(ПараметрыФормирования) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.Вставить("ЗапуститьВФоне", Истина);
	ПараметрыВыполнения.Вставить("ОжидатьЗавершение", 0);
	
	ИмяПроцедуры = "РегистрыСведений.ОчередиРаботСотрудников.СформироватьОчередьРаботСотрудников";
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, ПараметрыФормирования);

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Конструктор параметров формирования очереди сотрудников
//
// Возвращаемое значение:
//   Структура   - содержит:
//    * ИспользоватьОтборПоРаботам      - Булево - признак того, что используется отбор по работам.
//    * ОтборПоРаботам                  - Массив - отбор по измененным работам.
//    * ИспользоватьОтборПоСотрудникам  - Булево - признак того, что используется отбор по сотрудникам.
//    * ОтборПоСотрудникам              - Массив - отбор по сотрудникам, для которых надо перестроить очередь.
//
Функция НовыйПараметрыФормированияОчередиСотрудников() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИспользоватьОтборПоРаботам",     Ложь);
	Параметры.Вставить("ОтборПоРаботам",                 Новый Массив);
	Параметры.Вставить("ИспользоватьОтборПоСотрудникам", Ложь);
	Параметры.Вставить("ОтборПоСотрудникам",             Новый Массив);
	
	Возврат Параметры;
	
КонецФункции

// Определяет и выполняет необходимые изменения очереди для одной работы
//
// Параметры:
//  Работа - СправочникСсылка.ЗадачиПроцесса - задача, для которой надо определить место в очереди.
//
Процедура ОтразитьИзменениеОчередиПоРаботе(Работа) Экспорт
	
	Работы = Новый Массив;
	Работы.Добавить(Работа);
	
	ПараметрыФормирования = НовыйПараметрыФормированияОчередиСотрудников();
	ПараметрыФормирования.ИспользоватьОтборПоРаботам = Истина;
	ПараметрыФормирования.ОтборПоРаботам             = Работы;
	
	СформироватьОчередьРаботСотрудников(ПараметрыФормирования);
	
КонецПроцедуры

// Устанавливает формат для поля, в котором выводится порядок, номер в очереди
//
// Параметры:
//  Исполнитель - СправочникСсылка.Пользователи - сотрудник, для которого отображается очередь.
//  Элемент     - ПолеФормы - элемент, для которого устанавливается формат.
//
Процедура УстановитьФорматПорядокНомерОчереди(Сотрудник, Элемент) Экспорт
	
	МаксимальныйНомерОчереди = МаксимальныйПорядокНомерОчередиСотрудника(Сотрудник);
	ТочностьПорядокНомерВОчереди = ТочностьПорядокНомерВОчереди(МаксимальныйНомерОчереди);
	
	Элемент.Формат = СтрШаблон("ЧДЦ=%1; ЧРД=.", Строка(ТочностьПорядокНомерВОчереди));
	
КонецПроцедуры

// Устанавливает формат для условного оформления поля, в котором выводится порядок, номер в очереди
//
// Параметры:
//  УсловноеОформление - УсловноеОформление - для которого будет создан элемент, задающий формат.
//  ИмяПоля            - Строка                        - элемент, для которого устанавливается формат.
//  Сотрудник          - СправочникСсылка.Пользователи - сотрудник, для которого отображается очередь.
//
Процедура УстановитьФорматУсловногоОформленияПорядокНомерОчереди(УсловноеОформление, ИмяПоля, Сотрудник) Экспорт
	
	МаксимальныйНомерОчереди = МаксимальныйПорядокНомерОчередиСотрудника(Сотрудник);
	ТочностьПорядокНомерВОчереди = ТочностьПорядокНомерВОчереди(МаксимальныйНомерОчереди);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru='Точность отображения порякда и номера в очереди'");
		
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", СтрШаблон("ЧДЦ=%1; ЧРД=.", Строка(ТочностьПорядокНомерВОчереди)));
	
КонецПроцедуры

// Определяет, является ли работа сотрудника первой в его очереди
//
// Параметры:
//  Сотрудник - СправочникСсылка.Пользователи - сотрудник, чья очередь проверяется.
//  Работа    - СправочникСсылка.ЗадачиПроцесса - задача, чье место в очереди проверяется.
//
// Возвращаемое значение:
//   Строка - см. ВариантыПереносаЗадачВОчереди
//
Функция РаботаПерваяВОчереди(Сотрудник, Работа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НЕ ИерархияЗадачПроцесса.ЗадачаПроцесса IS NULL КАК ПерваяВОчереди
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ПО ОчередиРаботСотрудников.Работа = ИерархияЗадачПроцесса.Родитель
	|			И (ИерархияЗадачПроцесса.ЗадачаПроцесса = &Работа)
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди";
	
	Запрос.УстановитьПараметр("Работа",    Работа);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ПерваяВОчереди;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтборПоРаботамДляФормированияОчереди(ПараметрыФормирования) 
	
	Если Не ПараметрыФормирования.ИспользоватьОтборПоРаботам Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИерархияЗадачПроцесса.Родитель КАК Работа
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса В(&МассивЗадач)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|ГДЕ
	|	ИерархияЗадачПроцесса.Родитель В(&МассивЗадач)
	|	И ИерархияЗадачПроцесса.ЗадачаПроцесса <> ИерархияЗадачПроцесса.Родитель";
	
	Запрос.УстановитьПараметр("МассивЗадач", ПараметрыФормирования.ОтборПоРаботам);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Работа");
	
КонецФункции

Функция МаксимальныйПорядокНомерОчередиСотрудника(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОчередиРаботСотрудников.НомерВОчереди) КАК НомерВОчереди
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат ?(Выборка.НомерВОчереди = Null, 0, Выборка.НомерВОчереди);
	
КонецФункции

Процедура ИзменитьОчередьСотрудникаПоДаннымПорядка(Сотрудник, ПорядокПриоритета, ДанныеПорядка) 
	
	Если ДанныеПорядка.РаботыКУдалению.Количество() <> 0 
		Или ДанныеПорядка.РаботыКДобавлению.Количество() <> 0 Тогда
	
		НаборЗаписей = РегистрыСведений.ОчередиРаботСотрудников.СоздатьНаборЗаписей();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
		НаборЗаписей.Отбор.ПорядокПриоритета.Установить(ПорядокПриоритета);
		
		НаборЗаписей.Прочитать();
		
		ТаблицаПриоритета = НаборЗаписей.Выгрузить();
		
		Для Каждого РаботаКУдалению Из ДанныеПорядка.РаботыКУдалению Цикл
			УдалитьРаботуИзТаблицыПриоритетов(ТаблицаПриоритета, РаботаКУдалению);
		КонецЦикла;
		
		Для Каждого ДанныеРаботыКДобавлению Из ДанныеПорядка.РаботыКДобавлению Цикл
			
			Если ДанныеРаботыКДобавлению.ВариантПомещенияВОчередь = ВариантыПереносаЗадачВОчереди().ВНачалоОчередиПриоритета Тогда
				НоваяСтрока = ТаблицаПриоритета.Вставить(0);
			Иначе
				НоваяСтрока = ТаблицаПриоритета.Добавить();
			КонецЕсли;
			НоваяСтрока.Сотрудник         = Сотрудник;
			НоваяСтрока.ПорядокПриоритета = ДанныеРаботыКДобавлению.ПорядокПриоритета;
			НоваяСтрока.Работа            = ДанныеРаботыКДобавлению.Работа;
			НоваяСтрока.Приоритет         = ДанныеРаботыКДобавлению.Приоритет;
			
		КонецЦикла;
		
		ПеренумероватьТаблицуПриоритетов(ТаблицаПриоритета);
		ВыполнитьЗаписьНабораПоТаблице(ТаблицаПриоритета, Сотрудник, ПорядокПриоритета);
	
	КонецЕсли;
	
	ОтразитьУдалениеРаботИзОчередиПриСменеИсполнителя(ДанныеПорядка.РаботыКУдалениюДругихСотрудников);
	
КонецПроцедуры

Процедура ОтразитьУдалениеРаботИзОчередиПриСменеИсполнителя(РаботыСотрудниковКУдалению)
	
	Если РаботыСотрудниковКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаботыСотрудниковКУдалению.Сортировать("Сотрудник, ПорядокПриоритета");
	
	ТекущийСотрудник = Неопределено;
	ТекущийПорядок = Неопределено;
	РаботыКУдалению  = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из РаботыСотрудниковКУдалению Цикл
		
		Если ТекущийСотрудник = Неопределено Тогда
			
			ТекущийСотрудник = СтрокаТаблицы.Сотрудник;
			ТекущийПорядок   = СтрокаТаблицы.ПорядокПриоритета;
			
		ИначеЕсли ТекущийСотрудник <> СтрокаТаблицы.Сотрудник 
			Или ТекущийПорядок  = СтрокаТаблицы.ПорядокПриоритета Тогда
			
			УдалитьЗаписиОРаботахСотрудника(ТекущийСотрудник, ТекущийПорядок, РаботыКУдалению);
			
			ТекущийСотрудник = СтрокаТаблицы.Сотрудник;
			ТекущийПорядок   = СтрокаТаблицы.ПорядокПриоритета;
			
			УдалитьЗаписиОРаботахСотрудника(ТекущийСотрудник, ТекущийПорядок, РаботыКУдалению);
			
			РаботыКУдалению.Очистить();
			
		КонецЕсли;
		
		РаботыКУдалению.Добавить(СтрокаТаблицы.Работа);
		
	КонецЦикла;
	
	УдалитьЗаписиОРаботахСотрудника(ТекущийСотрудник, ТекущийПорядок, РаботыКУдалению);
	
КонецПроцедуры

Процедура УдалитьЗаписиОРаботахСотрудника(Сотрудник, ПорядокПриоритета, РаботыКУдалению)
	
	НаборЗаписей = РегистрыСведений.ОчередиРаботСотрудников.СоздатьНаборЗаписей();
		
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.ПорядокПриоритета.Установить(ПорядокПриоритета);
	
	НаборЗаписей.Прочитать();
	
	ТаблицаПриоритета = НаборЗаписей.Выгрузить();
	
	Для Каждого РаботаКУдалению Из РаботыКУдалению Цикл
		УдалитьРаботуИзТаблицыПриоритетов(ТаблицаПриоритета, РаботаКУдалению);
	КонецЦикла;
	
	ПеренумероватьТаблицуПриоритетов(ТаблицаПриоритета);
	ВыполнитьЗаписьНабораПоТаблице(ТаблицаПриоритета, Сотрудник, ПорядокПриоритета);
	
КонецПроцедуры

Функция ДанныеПорядкаПриоритетаПриИзмененииОчереди(ПорядкиКИзменению, ПорядокПриоритета)
	
	ДанныеПорядка = ПорядкиКИзменению.Получить(ПорядокПриоритета);
	
	Если ДанныеПорядка = Неопределено Тогда
		ДанныеПорядка = НовыйПараметрыИзмененияОчередиПорядкаПриоритета();
		ПорядкиКИзменению.Вставить(ПорядокПриоритета, ДанныеПорядка);
	КонецЕсли;
	
	Возврат ДанныеПорядка;
	
КонецФункции

Процедура ПеренестиЗадачуВКонецОчередиПриоритета(ПараметрыПереноса)
	
	ТаблицыОчередей = ТаблицыОчередейСтарогоИНовогоПриоритета(ПараметрыПереноса);
	
	ТаблицаСтарогоПриоритета = ТаблицыОчередей.ТаблицаСтарогоПриоритета;
	ТаблицаНовогоПриоритета  = ТаблицыОчередей.ТаблицаНовогоПриоритета;
	
	НоваяСтрокаТаблицаНовогоПриоритета = ТаблицаНовогоПриоритета.Добавить();
	НоваяСтрокаТаблицаНовогоПриоритета.Сотрудник     = ПараметрыПереноса.Сотрудник;
	НоваяСтрокаТаблицаНовогоПриоритета.Приоритет     = ПараметрыПереноса.КудаПереносим;
	НоваяСтрокаТаблицаНовогоПриоритета.НомерВОчереди = ТаблицаНовогоПриоритета.Количество();
	НоваяСтрокаТаблицаНовогоПриоритета.Работа        = ПараметрыПереноса.Задача;
	
	ВыполнитьЗаписьНабораПоТаблице(ТаблицаНовогоПриоритета, ПараметрыПереноса.Сотрудник, ПараметрыПереноса.ПорядокНовогоПриоритета);
	
	КоличествоЗаписейТаблицыСтарыйПриоритет = ТаблицаСтарогоПриоритета.Количество();
	Если ТаблицаСтарогоПриоритета[КоличествоЗаписейТаблицыСтарыйПриоритет - 1].Работа = ПараметрыПереноса.Задача Тогда
		
		ПараметрыЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеЗаписиОчередьРабот();
		ПараметрыЗаписи.Сотрудник = ПараметрыПереноса.Сотрудник;
		ПараметрыЗаписи.Приоритет = ТаблицаСтарогоПриоритета[КоличествоЗаписейТаблицыСтарыйПриоритет - 1].Приоритет;
		ПараметрыЗаписи.НомерВОчереди = ТаблицаСтарогоПриоритета[КоличествоЗаписейТаблицыСтарыйПриоритет - 1].НомерВОчереди;
		
		УдалитьЗапись(ПараметрыЗаписи);
		
	Иначе
		
		УдалитьРаботуИзТаблицыПриоритетов(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Задача);
		ПеренумероватьТаблицуПриоритетов(ТаблицаСтарогоПриоритета);
		ВыполнитьЗаписьНабораПоТаблице(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Сотрудник, ПараметрыПереноса.ПорядокСтарогоПриоритета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗадачуВНачалоОчередиПриоритета(ПараметрыПереноса)
	
	ТаблицыОчередей = ТаблицыОчередейСтарогоИНовогоПриоритета(ПараметрыПереноса);
	
	ТаблицаСтарогоПриоритета = ТаблицыОчередей.ТаблицаСтарогоПриоритета;
	ТаблицаНовогоПриоритета  = ТаблицыОчередей.ТаблицаНовогоПриоритета;
	
	НоваяСтрокаТаблицаНовогоПриоритета = ТаблицаНовогоПриоритета.Вставить(0);
	НоваяСтрокаТаблицаНовогоПриоритета.Сотрудник     = ПараметрыПереноса.Сотрудник;
	НоваяСтрокаТаблицаНовогоПриоритета.Приоритет     = ПараметрыПереноса.КудаПереносим;
	НоваяСтрокаТаблицаНовогоПриоритета.Работа        = ПараметрыПереноса.Задача;
	
	ПеренумероватьТаблицуПриоритетов(ТаблицаНовогоПриоритета);
	ВыполнитьЗаписьНабораПоТаблице(ТаблицаНовогоПриоритета, ПараметрыПереноса.Сотрудник, ПараметрыПереноса.ПорядокНовогоПриоритета);
	
	КоличествоЗаписейТаблицыСтарыйПриоритет = ТаблицаСтарогоПриоритета.Количество();
	Если ТаблицаСтарогоПриоритета[КоличествоЗаписейТаблицыСтарыйПриоритет - 1].Работа = ПараметрыПереноса.Задача Тогда
		
		ПараметрыЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеЗаписиОчередьРабот();
		ПараметрыЗаписи.Сотрудник = ПараметрыПереноса.Сотрудник;
		ПараметрыЗаписи.Приоритет = ТаблицаСтарогоПриоритета[КоличествоЗаписейТаблицыСтарыйПриоритет - 1].Приоритет;
		ПараметрыЗаписи.НомерВОчереди = ТаблицаСтарогоПриоритета[КоличествоЗаписейТаблицыСтарыйПриоритет - 1].НомерВОчереди;
		
		УдалитьЗапись(ПараметрыЗаписи);
		
	Иначе
		
		УдалитьРаботуИзТаблицыПриоритетов(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Задача);
		ПеренумероватьТаблицуПриоритетов(ТаблицаСтарогоПриоритета);
		ВыполнитьЗаписьНабораПоТаблице(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Сотрудник, ПараметрыПереноса.ПорядокСтарогоПриоритета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗадачуПередДругойЗадачей(ПараметрыПереноса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицыОчередей = ТаблицыОчередейСтарогоИНовогоПриоритета(ПараметрыПереноса);
	
	ТаблицаСтарогоПриоритета = ТаблицыОчередей.ТаблицаСтарогоПриоритета;
	ТаблицаНовогоПриоритета  = ТаблицыОчередей.ТаблицаНовогоПриоритета;
	
	Если ПараметрыПереноса.ПорядокНовогоПриоритета <> ПараметрыПереноса.ПорядокСтарогоПриоритета Тогда
		
		УдалитьРаботуИзТаблицыПриоритетов(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Задача);
		ПеренумероватьТаблицуПриоритетов(ТаблицаСтарогоПриоритета);
		ВыполнитьЗаписьНабораПоТаблице(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Сотрудник, ПараметрыПереноса.ПорядокНовогоПриоритета);
		
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Работа", ПараметрыПереноса.КудаПереносим);
	
	НайденныеСтроки = ТаблицаНовогоПриоритета.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		УдалитьРаботуИзТаблицыПриоритетов(ТаблицаНовогоПриоритета, ПараметрыПереноса.Задача);;
		
		ИндексСтроки = ТаблицаНовогоПриоритета.Индекс(НайденныеСтроки[0]);
		НоваяСтрокаТаблицаНовогоПриоритета = ТаблицаНовогоПриоритета.Вставить(ИндексСтроки);
		НоваяСтрокаТаблицаНовогоПриоритета.Сотрудник         = ПараметрыПереноса.Сотрудник;
		НоваяСтрокаТаблицаНовогоПриоритета.Приоритет         = ПараметрыПереноса.НовыйПриоритет;
		НоваяСтрокаТаблицаНовогоПриоритета.Работа            = ПараметрыПереноса.Задача;
		НоваяСтрокаТаблицаНовогоПриоритета.ПорядокПриоритета = НайденныеСтроки[0].ПорядокПриоритета;
		
		ПеренумероватьТаблицуПриоритетов(ТаблицаНовогоПриоритета);
		ВыполнитьЗаписьНабораПоТаблице(ТаблицаНовогоПриоритета, ПараметрыПереноса.Сотрудник, НайденныеСтроки[0].ПорядокПриоритета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиЗадачуПослеДругойЗадачей(ПараметрыПереноса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицыОчередей = ТаблицыОчередейСтарогоИНовогоПриоритета(ПараметрыПереноса);
	
	ТаблицаСтарогоПриоритета = ТаблицыОчередей.ТаблицаСтарогоПриоритета;
	ТаблицаНовогоПриоритета  = ТаблицыОчередей.ТаблицаНовогоПриоритета;
	
	Если ПараметрыПереноса.НовыйПриоритет <> ПараметрыПереноса.СтарыйПриоритет Тогда
		
		УдалитьРаботуИзТаблицыПриоритетов(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Задача);
		ПеренумероватьТаблицуПриоритетов(ТаблицаСтарогоПриоритета);
		ВыполнитьЗаписьНабораПоТаблице(ТаблицаСтарогоПриоритета, ПараметрыПереноса.Сотрудник, ПараметрыПереноса.ПорядокСтарогоПриоритета);
		
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Работа", ПараметрыПереноса.КудаПереносим);
	
	НайденныеСтроки = ТаблицаНовогоПриоритета.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		УдалитьРаботуИзТаблицыПриоритетов(ТаблицаНовогоПриоритета, ПараметрыПереноса.Задача);;
		
		ИндексСтроки = ТаблицаНовогоПриоритета.Индекс(НайденныеСтроки[0]) + 1;
		НоваяСтрокаТаблицаНовогоПриоритета = ТаблицаНовогоПриоритета.Вставить(ИндексСтроки);
		НоваяСтрокаТаблицаНовогоПриоритета.Сотрудник         = ПараметрыПереноса.Сотрудник;
		НоваяСтрокаТаблицаНовогоПриоритета.Приоритет         = ПараметрыПереноса.НовыйПриоритет;
		НоваяСтрокаТаблицаНовогоПриоритета.Работа            = ПараметрыПереноса.Задача;
		НоваяСтрокаТаблицаНовогоПриоритета.ПорядокПриоритета = ПараметрыПереноса.ПорядокНовогоПриоритета;
		
		ПеренумероватьТаблицуПриоритетов(ТаблицаНовогоПриоритета);
		ВыполнитьЗаписьНабораПоТаблице(ТаблицаНовогоПриоритета, ПараметрыПереноса.Сотрудник, ПараметрыПереноса.ПорядокНовогоПриоритета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьРаботуИзТаблицыПриоритетов(ТаблицаПриоритета, Задача)

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Работа", Задача);
	
	НайденныеСтроки = ТаблицаПриоритета.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 1 Тогда
		
		ТаблицаПриоритета.Удалить(ТаблицаПриоритета.Индекс(НайденныеСтроки[0]));
		
	КонецЕсли;

КонецПроцедуры

Процедура ПеренумероватьТаблицуПриоритетов(ТаблицаПриоритета)
	
	НомерСтроки = 1;
	КоличествоСтрок = ТаблицаПриоритета.Количество();
	ТочностьПорядокНомерВОчереди = ТочностьПорядокНомерВОчереди(КоличествоСтрок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаПриоритета Цикл
		
		СтрокаТаблицы.НомерВОчереди        = НомерСтроки;
		СтрокаТаблицы.ПорядокНомерВОчереди = ПорядокНомерВОчереди(СтрокаТаблицы.ПорядокПриоритета,
		                                                          СтрокаТаблицы.НомерВОчереди,
		                                                          ТочностьПорядокНомерВОчереди);
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТочностьПорядокНомерВОчереди(МаксимальныйНомерОчереди)
	
	Если МаксимальныйНомерОчереди = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Для Инд = 1 По 11 Цикл
		Если МаксимальныйНомерОчереди < POW(10, Инд) Тогда
			Возврат Инд;
		КонецЕсли
	КонецЦикла;
	
	Возврат 12;
	
КонецФункции

Процедура ВыполнитьЗаписьНабораПоТаблице(ТаблицаПриоритета, Сотрудник, ПорядокПриоритета)
	
	НаборЗаписей = РегистрыСведений.ОчередиРаботСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписей.Отбор.ПорядокПриоритета.Установить(ПорядокПриоритета);
	
	Если ТаблицаПриоритета.Количество() <> 0 Тогда
		НаборЗаписей.Загрузить(ТаблицаПриоритета);
	КонецЕсли;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ТаблицыОчередейСтарогоИНовогоПриоритета(ПараметрыПереноса)
	
	ТаблицыОчередей = Новый Структура;
	ТаблицыОчередей.Вставить("ТаблицаНовогоПриоритета", Неопределено);
	ТаблицыОчередей.Вставить("ТаблицаСтарогоПриоритета", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.Сотрудник            КАК Сотрудник,
	|	ОчередиРаботСотрудников.Приоритет            КАК Приоритет,
	|	ОчередиРаботСотрудников.НомерВОчереди        КАК НомерВОчереди,
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди КАК ПорядокНомерВОчереди,
	|	ОчередиРаботСотрудников.Работа               КАК Работа,
	|	ОчередиРаботСотрудников.ПорядокПриоритета    КАК ПорядокПриоритета
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник
	|	И ОчередиРаботСотрудников.ПорядокПриоритета = &ПорядокНовогоПриоритета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВОчереди
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.ПорядокПриоритета КАК ПорядокПриоритета
	|ПОМЕСТИТЬ СтарыйПриоритет
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник
	|	И ОчередиРаботСотрудников.Работа = &Задача
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередиРаботСотрудников.Сотрудник            КАК Сотрудник,
	|	ОчередиРаботСотрудников.Приоритет            КАК Приоритет,
	|	ОчередиРаботСотрудников.Работа               КАК Работа,
	|	ОчередиРаботСотрудников.НомерВОчереди        КАК НомерВОчереди,
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди КАК ПорядокНомерВОчереди,
	|	ОчередиРаботСотрудников.ПорядокПриоритета    КАК ПорядокПриоритета
	|ИЗ
	|	РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|ГДЕ
	|	ОчередиРаботСотрудников.Сотрудник = &Сотрудник
	|	И ОчередиРаботСотрудников.ПорядокПриоритета В
	|			(ВЫБРАТЬ
	|				СтарыйПриоритет.ПорядокПриоритета КАК ПорядокПриоритета
	|			ИЗ
	|				СтарыйПриоритет КАК СтарыйПриоритет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВОчереди";
	
	Запрос.УстановитьПараметр("Сотрудник",               ПараметрыПереноса.Сотрудник);
	Запрос.УстановитьПараметр("ПорядокНовогоПриоритета", ПараметрыПереноса.ПорядокНовогоПриоритета);
	Запрос.УстановитьПараметр("Задача",                  ПараметрыПереноса.Задача);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыОчередей.ТаблицаНовогоПриоритета  = Результат[0].Выгрузить();
	ТаблицыОчередей.ТаблицаСтарогоПриоритета = Результат[2].Выгрузить();
	
	Возврат ТаблицыОчередей;
	
КонецФункции

Функция ПорядокНомерВОчереди(ПорядокПриоритета, НомерВОчереди, Точность)
	
	СтрокаНомерВОчереди = Строка(НомерВОчереди);
	ДобавитьНулей = Точность - СтрДлина(СтрокаНомерВОчереди);
	Для Инд = 1 По ДобавитьНулей Цикл
		СтрокаНомерВОчереди = "0" + СтрокаНомерВОчереди;
	КонецЦикла;
	
	Возврат Число(Строка(ПорядокПриоритета) + "." + СтрокаНомерВОчереди);
	
КонецФункции

Функция НовыйПараметрыИзмененияОчередиПорядкаПриоритета() 
	
	РаботыКУдалению = Новый Массив;
	РаботыКДобавлению = Новый ТаблицаЗначений;
	РаботыКДобавлению.Колонки.Добавить("Сотрудник",                Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	РаботыКДобавлению.Колонки.Добавить("Работа",                   Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроцесса"));
	РаботыКДобавлению.Колонки.Добавить("Приоритет",                Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	РаботыКДобавлению.Колонки.Добавить("ПорядокПриоритета",        Новый ОписаниеТипов("Число"));
	РаботыКДобавлению.Колонки.Добавить("ВариантПомещенияВОчередь", Новый ОписаниеТипов("Строка"));
	
	РаботыКУдалениюДругихСотрудников = Новый ТаблицаЗначений;
	РаботыКУдалениюДругихСотрудников.Колонки.Добавить("Сотрудник",                Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	РаботыКУдалениюДругихСотрудников.Колонки.Добавить("Работа",                   Новый ОписаниеТипов("СправочникСсылка.ЗадачиПроцесса"));
	РаботыКУдалениюДругихСотрудников.Колонки.Добавить("ПорядокПриоритета",        Новый ОписаниеТипов("Число"));
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("РаботыКУдалению",                  РаботыКУдалению);
	ПараметрыИзменения.Вставить("РаботыКДобавлению",                РаботыКДобавлению);
	ПараметрыИзменения.Вставить("РаботыКУдалениюДругихСотрудников", РаботыКУдалениюДругихСотрудников);

	Возврат ПараметрыИзменения;
	
КонецФункции

#КонецОбласти

#КонецЕсли