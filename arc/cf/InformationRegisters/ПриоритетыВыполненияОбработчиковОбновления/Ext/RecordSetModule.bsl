#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЗаписьСвязанногоНабора") Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отбор.Обработчик1.Использование Тогда
		Отказ = Истина;
		ТекстИсключения = НСтр("ru = 'Запись без установленного отбора по измерению """"Обработчик1"""" запрещена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
	КонецЕсли;
	
	// Получение предыдущих данных набора для сравнения изменений
	
	ПредыдущиеДанныеНабора = РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.СоздатьНаборЗаписей();
	
	ПредыдущиеДанныеНабора.Отбор.Обработчик1.Использование = Отбор.Обработчик1.Использование;
	ПредыдущиеДанныеНабора.Отбор.Обработчик1.Значение = Отбор.Обработчик1.Значение;
	
	ПредыдущиеДанныеНабора.Отбор.Обработчик2.Использование = Отбор.Обработчик2.Использование;
	ПредыдущиеДанныеНабора.Отбор.Обработчик2.Значение = Отбор.Обработчик2.Значение;
	
	ПредыдущиеДанныеНабора.Прочитать();
	ДополнительныеСвойства.Вставить("ПредыдущиеДанныеНабора", ПредыдущиеДанныеНабора.Выгрузить());
	
	СвязанныеОбработчикиНаправлениеСначалаОбработчик1 = Новый Массив;
	СвязанныеОбработчикиНаправлениеСначалаОбработчик2 = Новый Массив;
		
	Для Каждого СтрТабл из ЭтотОбъект Цикл
		
		Если СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1 Тогда
			
			СвязанныеОбработчикиНаправлениеСначалаОбработчик1.Добавить(СтрТабл.Обработчик2);
			
		ИначеЕсли СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2 Тогда
			
			СвязанныеОбработчикиНаправлениеСначалаОбработчик2.Добавить(СтрТабл.Обработчик2);
			
		КонецЕсли;
				
		Если Не ДополнительныеСвойства.Свойство("УстановкаПорядкаПоУмолчанию")
			И Не СтрТабл.ЗаписываетсяВФорме Тогда
			РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.РасчитатьПорядокОтличаетсяОтДефолтного(СтрТабл);
		КонецЕсли;
		
		СтрТабл.ЗаписываетсяВФорме = Ложь;
	КонецЦикла;
	
	Если СвязанныеОбработчикиНаправлениеСначалаОбработчик1.Количество() = 0
		И СвязанныеОбработчикиНаправлениеСначалаОбработчик2.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления");
	Блокировка.Заблокировать();
	
	ЕстьЦикл = Ложь;
	
	
	Если СвязанныеОбработчикиНаправлениеСначалаОбработчик1.Количество() > 0 Тогда 
		Путь = Новый Массив;
		Если РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.ЕстьЦиклВПорядкеОбработчиковОбойтиРекурсивно(Отбор.Обработчик1.Значение,
										СвязанныеОбработчикиНаправлениеСначалаОбработчик1,
										Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1,
										Путь) Тогда
			ЕстьЦикл = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьЦикл
	    И СвязанныеОбработчикиНаправлениеСначалаОбработчик2.Количество() > 0 Тогда
		Путь = Новый Массив;
		Если РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.ЕстьЦиклВПорядкеОбработчиковОбойтиРекурсивно(Отбор.Обработчик1.Значение,
										СвязанныеОбработчикиНаправлениеСначалаОбработчик2,
										Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2,
										Путь) Тогда
			ЕстьЦикл = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьЦикл Тогда
		Путь.Добавить(Отбор.Обработчик1.Значение);
		
		ТекстПути = "";
		
		Для Каждого СтрМас из Путь Цикл
			ТекстПути = ТекстПути + Строка(СтрМас) + "->";
		КонецЦикла;
		
		ТекстПути = Лев(ТекстПути, СтрДлина(ТекстПути) - 2);
		
		Отказ = Истина;
		ТекстИсключения = НСтр("ru = 'При записи приоритета обнаружен цикл: %Путь%'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Путь%", ТекстПути);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИсключения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("ЗаписьСвязанногоНабора") Тогда
		Возврат;
	КонецЕсли;
	Если Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущиеДанныеНабора = Неопределено;
	Если ДополнительныеСвойства.Свойство("ПредыдущиеДанныеНабора") Тогда
		ПредыдущиеДанныеНабора = ДополнительныеСвойства.ПредыдущиеДанныеНабора;
	КонецЕсли;
	
	ЗаписатьДанныеВерсионирования(Выгрузить(),ПредыдущиеДанныеНабора);
	
	//Записать набор по обработчику 2
	
	НаборПоОбработчику2 = РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.СоздатьНаборЗаписей();
	НаборПоОбработчику2.Отбор.Обработчик2.Установить(Отбор.Обработчик1.Значение);
	Если Отбор.Обработчик2.Использование Тогда
		НаборПоОбработчику2.Отбор.Обработчик1.Установить(Отбор.Обработчик2.Значение);
	КонецЕсли;
	НаборПоОбработчику2.ДополнительныеСвойства.Вставить("ЗаписьСвязанногоНабора");
	
	ПредыдущиеДанныеНабора = РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.СоздатьНаборЗаписей();
	
	ПредыдущиеДанныеНабора.Отбор.Обработчик1.Использование = НаборПоОбработчику2.Отбор.Обработчик1.Использование;
	ПредыдущиеДанныеНабора.Отбор.Обработчик1.Значение = НаборПоОбработчику2.Отбор.Обработчик1.Значение;
	
	ПредыдущиеДанныеНабора.Отбор.Обработчик2.Использование = НаборПоОбработчику2.Отбор.Обработчик2.Использование;
	ПредыдущиеДанныеНабора.Отбор.Обработчик2.Значение = НаборПоОбработчику2.Отбор.Обработчик2.Значение;
	
	ПредыдущиеДанныеНабора.Прочитать();
	ТаблицаПредыдущихДанныхНабора = ПредыдущиеДанныеНабора.Выгрузить();
	
	Для Каждого СтрТабл из ЭтотОбъект Цикл
		
		НоваяСтрока = НаборПоОбработчику2.Добавить();
		НоваяСтрока.Обработчик1 = СтрТабл.Обработчик2;
		НоваяСтрока.Обработчик2 = СтрТабл.Обработчик1;
		НоваяСтрока.Комментарий            = СтрТабл.Комментарий;
		НоваяСтрока.ПричинаПовторнойЗаписи = СтрТабл.ПричинаПовторнойЗаписи;
		НоваяСтрока.ПовторнаяЗаписьОбъекта = СтрТабл.ПовторнаяЗаписьОбъекта;
		НоваяСтрока.ПорядокОтличаетсяОтДефолтного = СтрТабл.ПорядокОтличаетсяОтДефолтного;
		
		Если СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.ВсеРавноВКакойПоследовательности
			Или СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики
			Или СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ
			Или СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы Тогда
			
			НоваяСтрока.ПорядокПомещенияВОчередь = СтрТабл.ПорядокПомещенияВОчередь;
			
		ИначеЕсли СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1 Тогда
			
			НоваяСтрока.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2;
			
		ИначеЕсли СтрТабл.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2 Тогда
			
			НоваяСтрока.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1;
			
		КонецЕсли;
				
	КонецЦикла;
	
	НаборПоОбработчику2.Записать();
	
	ЗаписатьДанныеВерсионирования(НаборПоОбработчику2.Выгрузить(), ТаблицаПредыдущихДанныхНабора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьДанныеВерсионирования(ТаблицаНабора, ПредыдущиеДанныеНабора)
	
	ТаблицаНабора = Выгрузить();
	ТаблицаНабора.Колонки.Добавить("БезИзменений", Новый ОписаниеТипов("Булево"));
	
	ОбработчикиДляВерсионирования = Новый Массив;
	
	Если ПредыдущиеДанныеНабора <> Неопределено Тогда
		
		Для Каждого СтрокаТаблицы из ПредыдущиеДанныеНабора Цикл
			
			СтруктураОтбора = Новый Структура;
			
			Для Каждого Колонка из ПредыдущиеДанныеНабора.Колонки Цикл
				СтруктураОтбора.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
			КонецЦикла;
			
			МассивСтрок = ТаблицаНабора.НайтиСтроки(СтруктураОтбора);
			
			Если МассивСтрок.Количество() = 0 Тогда
				
				Если ОбработчикиДляВерсионирования.Найти(СтрокаТаблицы.Обработчик1) = Неопределено Тогда
					ОбработчикиДляВерсионирования.Добавить(СтрокаТаблицы.Обработчик1);
				КонецЕсли;
				
				Если ОбработчикиДляВерсионирования.Найти(СтрокаТаблицы.Обработчик2) = Неопределено Тогда
					ОбработчикиДляВерсионирования.Добавить(СтрокаТаблицы.Обработчик2);
				КонецЕсли;
		
			Иначе
				Для Каждого СтрокаНабора из МассивСтрок Цикл
					СтрокаНабора.БезИзменений = Истина;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("БезИзменений", Ложь);
	МассивСтрокСИзменениями = ТаблицаНабора.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаНабора из МассивСтрокСИзменениями Цикл
		
		Если ОбработчикиДляВерсионирования.Найти(СтрокаНабора.Обработчик1) = Неопределено Тогда
			ОбработчикиДляВерсионирования.Добавить(СтрокаНабора.Обработчик1);
		КонецЕсли;
		
		Если ОбработчикиДляВерсионирования.Найти(СтрокаНабора.Обработчик2) = Неопределено Тогда
			ОбработчикиДляВерсионирования.Добавить(СтрокаНабора.Обработчик2);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Обработчик из ОбработчикиДляВерсионирования Цикл
		
		ОбработчикОбъект = Обработчик.ПолучитьОбъект();
		
		ОбработчикОбъект.ДополнительныеСвойства.Вставить("КоллекцияИзмененныхОбъектов", Новый Массив);
		Версионирование.ЗарегистрироватьИзмененияОбъекта(ОбработчикОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли