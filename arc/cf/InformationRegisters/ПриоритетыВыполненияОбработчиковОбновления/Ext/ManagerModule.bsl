
#Область ПрограммныйИнтерфейс

// Проверяет пересечения обработчика по данным с другими обработчиками
//
// Параметры:
//  Обработчик	 - СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы 
// 
// Возвращаемое значение:
//  Структура - 
// * ЕстьПересеченияСЧитателями - Булево
// * ЕстьПересеченияСПисателями - Булево
// * СтатусКонфликтов           - ПеречислениеСсылка.СтатусыКонфликтовОбработчиковОбновленияИнформационнойБазы
//
Функция ПересеченияПоДаннымСДругимиОбработчиками(Обработчик) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Проблемы.ОбработчикПисатель
	|ИЗ
	|	РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК Проблемы
	|ГДЕ
	|	Проблемы.ОбработчикПисатель = &Обработчик
	|	И Проблемы.КонфликтЧтенияЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Проблемы.ОбработчикПисатель
	|ИЗ
	|	РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК Проблемы
	|ГДЕ
	|	Проблемы.ОбработчикЧитательИлиПисатель = &Обработчик
	|	И Проблемы.КонфликтЧтенияЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Проблемы.ОбработчикПисатель
	|ИЗ
	|	РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК Проблемы
	|ГДЕ
	|	(Проблемы.ОбработчикЧитательИлиПисатель = &Обработчик
	|			ИЛИ Проблемы.ОбработчикПисатель = &Обработчик)
	|	И Проблемы.ПовторнаяЗаписьОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.СтатусПроблемы ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА Обработчики.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ)
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныйЗапрос.СтатусПроблемы
	|	КОНЕЦ КАК СтатусКонфликтов
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК Обработчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВложенныйЗапрос.Обработчик КАК Обработчик,
	|			ВЫБОР
	|				КОГДА ПорядокПомещенияОбработчиковВОчередь.Ссылка В (ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ), ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики))
	|					ТОГДА ПорядокПомещенияОбработчиковВОчередь.Ссылка
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)
	|			КОНЕЦ КАК СтатусПроблемы
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Конфликты.Обработчик1 КАК Обработчик,
	|				МИНИМУМ(Конфликты.ПорядокПомещенияВОчередь.Порядок) КАК СтатусПорядок
	|			ИЗ
	|				РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК Конфликты
	|			ГДЕ
	|				Конфликты.Обработчик1 = &Обработчик
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Конфликты.Обработчик1) КАК ВложенныйЗапрос
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ПорядокПомещенияОбработчиковВОчередь КАК ПорядокПомещенияОбработчиковВОчередь
	|				ПО ВложенныйЗапрос.СтатусПорядок = ПорядокПомещенияОбработчиковВОчередь.Порядок) КАК ВложенныйЗапрос
	|		ПО Обработчики.Ссылка = ВложенныйЗапрос.Обработчик
	|ГДЕ
	|	Обработчики.Ссылка = &Обработчик";
	
	Запрос.УстановитьПараметр("Обработчик", Обработчик);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЕстьПересеченияСЧитателями", Не РезультатЗапроса[0].Пустой());	
	РезультатФункции.Вставить("ЕстьПересеченияСПисателями", Не РезультатЗапроса[1].Пустой());	
	РезультатФункции.Вставить("ЕстьПовторнаяЗапись", Не РезультатЗапроса[2].Пустой());	
	
	Выборка = РезультатЗапроса[3].Выбрать();
	Выборка.Следующий();
	
	РезультатФункции.Вставить("СтатусКонфликтов",Выборка.СтатусКонфликтов);	
	
	Возврат РезультатФункции;
КонецФункции

Функция ЕстьЦиклВПорядкеОбработчиковОбойтиРекурсивно(Обработчик, СвязанныеОбработчики, НаправлениеОбхода, Путь) Экспорт
	
	Для каждого СвязанныйОбработчик из СвязанныеОбработчики Цикл
		
		Если СвязанныйОбработчик = Обработчик Тогда
			Путь.Добавить(СвязанныйОбработчик);
			Возврат Истина;
		КонецЕсли;
		
		СвязанныеОбработчикиТекущего = СвязанныеОбработчики(СвязанныйОбработчик, НаправлениеОбхода);
		
		Если ЕстьЦиклВПорядкеОбработчиковОбойтиРекурсивно(Обработчик, СвязанныеОбработчикиТекущего, НаправлениеОбхода, Путь) Тогда
			Путь.Добавить(СвязанныйОбработчик);
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция РасчитатьПорядокВыполненияОбработчиковПоДефолту(Запись) Экспорт
	
	ЕстьИзменения = Ложь;
	
	Если Запись.ПорядокПомещенияВОчередь <> Перечисления.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ
		Или Запись.ПорядокОтличаетсяОтДефолтного Тогда
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	Выборка = РезультатЗапросаПоПриоритетам(Запись.Обработчик1, Запись.Обработчик2, "Установка");
	
	Если Выборка.Следующий() Тогда
		ПорядокПоДефолту = Выборка.ПорядокПомещенияВОчередь;
	Иначе
		ПорядокПоДефолту = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ;
	КонецЕсли;
	
	Если ПорядокПоДефолту = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ Тогда 
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	Запись.ПорядокПомещенияВОчередь = ПорядокПоДефолту;
	ЕстьИзменения = Истина;
	
	Возврат ЕстьИзменения;
КонецФункции

Процедура РасчитатьПорядокОтличаетсяОтДефолтного(Запись) Экспорт
	
	Если Запись.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ
		Или Запись.ПорядокПомещенияВОчередь = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапросаПоПриоритетам(Запись.Обработчик1, Запись.Обработчик2, "Расчет");
	
	Если Выборка.Следующий() Тогда
		ПорядокПоДефолту = Выборка.ПорядокПомещенияВОчередь;
	Иначе
		ПорядокПоДефолту = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ;
	КонецЕсли;
	
	Запись.ПорядокОтличаетсяОтДефолтного = ПорядокПоДефолту <> Запись.ПорядокПомещенияВОчередь;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Обработчик1.Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СвязанныеОбработчики(Обработчик, НаправлениеОбхода)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 КАК СвязанныйОбработчик
	|ИЗ
	|	РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполненияОбработчиковОбновления
	|ГДЕ
	|	ПриоритетыВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь = &НаправлениеОбхода
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 = &Обработчик";	
	
	Запрос.УстановитьПараметр("Обработчик", Обработчик);
	Запрос.УстановитьПараметр("НаправлениеОбхода", НаправлениеОбхода);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СвязанныйОбработчик");
	
КонецФункции

Функция РезультатЗапросаПоПриоритетам(Обработчик1, Обработчик2, Режим)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 КАК Обработчик1,
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 КАК Обработчик2,
	|	МАКСИМУМ(СначалаОбработчик1.КонфликтЧтенияЗаписи) КАК КонфликтЧтенияЗаписи,
	|	МАКСИМУМ(СначалаОбработчик1.ПовторнаяЗаписьОбъекта) КАК ПовторнаяЗаписьОбъекта,
	|	ВЫБОР
	|		КОГДА ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.МонопольныйРежимОправдан
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ СначалаОбработчик1.ОбработчикПисатель ЕСТЬ NULL 
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1)
	|				КОГДА НЕ СначалаОбработчик2.ОбработчикПисатель ЕСТЬ NULL 
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ)
	|			КОНЕЦ
	|	КОНЕЦ КАК ПорядокПомещенияВОчередь
	|ИЗ
	|	РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетыВыполненияОбработчиковОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК СначалаОбработчик1
	|		ПО ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 = СначалаОбработчик1.ОбработчикПисатель
	|			И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 = СначалаОбработчик1.ОбработчикЧитательИлиПисатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК СначалаОбработчик2
	|		ПО ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 = СначалаОбработчик2.ОбработчикЧитательИлиПисатель
	|			И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 = СначалаОбработчик2.ОбработчикПисатель
	|ГДЕ
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик1 = &Обработчик1
	|	И ПриоритетыВыполненияОбработчиковОбновления.Обработчик2 = &Обработчик2
	|	И (НЕ ПриоритетыВыполненияОбработчиковОбновления.ПорядокОтличаетсяОтДефолтного
	|			ИЛИ &Режим = ""Расчет"")
	|	И (ПриоритетыВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь = ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ)
	|			ИЛИ &Режим = ""Расчет"")
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик1,
	|	ПриоритетыВыполненияОбработчиковОбновления.Обработчик2,
	|	ВЫБОР
	|		КОГДА ПриоритетыВыполненияОбработчиковОбновления.Обработчик1.МонопольныйРежимОправдан
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ СначалаОбработчик1.ОбработчикПисатель ЕСТЬ NULL 
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик1)
	|				КОГДА НЕ СначалаОбработчик2.ОбработчикПисатель ЕСТЬ NULL 
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.СначалаОбработчик2)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ)
	|			КОНЕЦ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(ЕСТЬNULL(СначалаОбработчик1.КонфликтЧтенияЗаписи, ЛОЖЬ)) = ИСТИНА
	|			И МАКСИМУМ(ЕСТЬNULL(СначалаОбработчик1.ПовторнаяЗаписьОбъекта, ЛОЖЬ)) = ЛОЖЬ
	|		ИЛИ МАКСИМУМ(ЕСТЬNULL(СначалаОбработчик2.КонфликтЧтенияЗаписи, ЛОЖЬ)) = ИСТИНА
	|			И МАКСИМУМ(ЕСТЬNULL(СначалаОбработчик2.ПовторнаяЗаписьОбъекта, ЛОЖЬ)) = ЛОЖЬ)";	
	
	Запрос.УстановитьПараметр("Обработчик1", Обработчик1);
	Запрос.УстановитьПараметр("Обработчик2", Обработчик2);
	Запрос.УстановитьПараметр("Режим", Режим);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти
