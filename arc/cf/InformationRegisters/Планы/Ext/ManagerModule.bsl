#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет запись в регистр
//
// Параметры:
//  ПараметрыЗаписиПлана  - см. ПараметрыЗаписиПлана
//
Процедура ВыполнитьЗаписьПлана(ПараметрыЗаписиПлана) Экспорт
	
	Если ПустаяСтрока(ПараметрыЗаписиПлана.ИдентификаторПлана) Тогда
		
		ПараметрыЗаписиПлана.ИдентификаторПлана = ПланированиеПовтИсп.ХэшВидаПланаИПериода(ПараметрыЗаписиПлана.ВидПлана,
		                                                                                   ПараметрыЗаписиПлана.НачалоПериода, 
		                                                                                   ПараметрыЗаписиПлана.КонецПериода);
	
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.Планы.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ИдентификаторПлана = ПараметрыЗаписиПлана.ИдентификаторПлана;
	МенеджерЗаписи.ЕстьЗаписи         = ПараметрыЗаписиПлана.ЕстьЗаписи;
	МенеджерЗаписи.ВидПлана           = ПараметрыЗаписиПлана.ВидПлана;
	МенеджерЗаписи.НачалоПериода      = ПараметрыЗаписиПлана.НачалоПериода;
	МенеджерЗаписи.КонецПериода       = ПараметрыЗаписиПлана.КонецПериода;
	МенеджерЗаписи.Зафиксирован       = ПараметрыЗаписиПлана.Зафиксирован;
	МенеджерЗаписи.Активность         = ПараметрыЗаписиПлана.Активность;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Конструктор структуры информации, предназначенный для записи плана
//
// Возвращаемое значение:
//  Структура - - содержит:
//   * ИдентификаторПлана - Число
//   * ЕстьЗаписи         - Булево
//   * ВидПлана           - СправочникСсылка.ВидыПланов
//   * НачалоПериода      - Дата
//   * КонецПериода       - Дата
//   * Зафиксирован       - Булево
//   * Активность         - Булево
//
Функция ПараметрыЗаписиПлана() Экспорт
	
	ПараметрыЗаписиПлана = Новый Структура;
	ПараметрыЗаписиПлана.Вставить("ИдентификаторПлана", "");
	ПараметрыЗаписиПлана.Вставить("ЕстьЗаписи",         Ложь);
	ПараметрыЗаписиПлана.Вставить("ВидПлана",           Неопределено);
	ПараметрыЗаписиПлана.Вставить("НачалоПериода",      Дата(1, 1, 1));
	ПараметрыЗаписиПлана.Вставить("КонецПериода",       Дата(1, 1, 1));
	ПараметрыЗаписиПлана.Вставить("Зафиксирован",       Ложь);
	ПараметрыЗаписиПлана.Вставить("Активность",         Ложь);
	
	Возврат ПараметрыЗаписиПлана;
	
КонецФункции

// Конструктор структуры информации данных плана
//
// Возвращаемое значение:
//  Структура - - содержит:
//   * ИдентификаторПлана - Число
//   * ЕстьЗаписи         - Булево
//   * ВидПлана           - СправочникСсылка.ВидыПланов
//   * НачалоПериода      - Дата
//   * КонецПериода       - Дата
//   * Зафиксирован       - Булево
//
Функция НовыйДанныеПлана() Экспорт
	
	ДанныеПлана = Новый Структура;
	ДанныеПлана.Вставить("ИдентификаторПлана", "");
	ДанныеПлана.Вставить("ЕстьЗаписи",         Ложь);
	ДанныеПлана.Вставить("ВидПлана",           Неопределено);
	ДанныеПлана.Вставить("НачалоПериода",      Дата(1, 1, 1));
	ДанныеПлана.Вставить("КонецПериода",       Дата(1, 1, 1));
	ДанныеПлана.Вставить("Зафиксирован",       Ложь);
	
	Возврат ДанныеПлана;
	
КонецФункции

// Определяет если ли план, у которого есть записи позднее чем переданная дата
//
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПлана
//  Дата     - Дата
//
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьПлан           - Булево
//     * НачалоПериодаПлана - Дата
//     * КонецПериодаПлана  - Дата
//
Функция ЕстьЗначимыйПланНачинаяСДаты(ВидПлана, Дата) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьПлан",           Ложь);
	СтруктураВозврата.Вставить("НачалоПериодаПлана", Дата(1,1,1));
	СтруктураВозврата.Вставить("КонецПериодаПлана",  Дата(1,1,1));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.НачалоПериода КАК НачалоПериода,
	|	Планы.КонецПериода  КАК КонецПериода
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.НачалоПериода >= &ДатаПлана
	|	И Планы.ВидПлана = &ВидПлана
	|	И Планы.ЕстьЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Запрос.УстановитьПараметр("ВидПлана",   ВидПлана);
	Запрос.УстановитьПараметр("ДатаПлана",  Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.ЕстьПлан           = Истина;
		СтруктураВозврата.НачалоПериодаПлана = Выборка.НачалоПериода;
		СтруктураВозврата.КонецПериодаПлана  = Выборка.КонецПериода;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет последний значимый план в заданный период
//
// Параметры:
//  ВидПлана      - СправочникСсылка.ВидыПлана
//  НачалоПериода - Дата
//  КонецПериода  - Дата
//
// Возвращаемое значение:
//   Структура - содержит:
//     * ЕстьПлан           - Булево
//     * НачалоПериодаПлана - Дата
//     * КонецПериодаПлана  - Дата
//
Функция ПоследнийЗначимыйПланВПериод(ВидПлана, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьПлан",           Ложь);
	СтруктураВозврата.Вставить("КонецПериодаПлана",  Дата(1,1,1));
	СтруктураВозврата.Вставить("НачалоПериодаПлана", Дата(1,1,1));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.КонецПериода  КАК КонецПериода,
	|   Планы.НачалоПериода КАК НачалоПериода
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.КонецПериода >= &НачалоПериода
	|	И ВЫБОР
	|		КОГДА &ЕстьОтборПоКонцуПериода
	|			ТОГДА Планы.КонецПериода <= &КонецПериода
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И Планы.ВидПлана = &ВидПлана
	|	И Планы.ЕстьЗаписи
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонецПериода УБЫВ";
	
	Запрос.УстановитьПараметр("ВидПлана",                 ВидПлана);
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",             КонецПериода);
	Запрос.УстановитьПараметр("ЕстьОтборПоКонцуПериода",  КонецПериода <> Неопределено);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.ЕстьПлан           = Истина;
		СтруктураВозврата.КонецПериодаПлана  = Выборка.КонецПериода;
		СтруктураВозврата.НачалоПериодаПлана = Выборка.НачалоПериода;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Удаляет план по заданному идентификатору
//
// Параметры:
//  ИдентификаторПлана  - Число
//
Процедура УдалитьПланПоИдентификатору(ИдентификаторПлана) Экспорт
	
	НаборЗаписей = РегистрыСведений.Планы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПлана.Установить(ИдентификаторПлана);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получает невыполненные работы предыдущего плана по сотруднику
//
// Параметры:
//  ДанныеПлана - Структура - содержит:
//     * ВидПлана                            - СправочникСсылка.ВидыПланов
//     * ВладелецПлана                       - СправочникСсылка.Пользователи
//     * ВидСогласуемогоРесурсаПлановыхРабот - СправочникСсылка.ВидыСогласуемыхРесурсов
//     * Статус                              - ПеречислениеСсылка.СтатусыПланов
//     * Наименование                        - Строка
//     * Периодичность                       - ПеречислениеСсылка.ПериодичностьПланов
//     * КоличествоПериодов                  - Число
//     * НачалоДействия                      - Дата
//     * КонецДействия                       - Дата
//     * Участники                           - Массив
//     * ВсеНастройкиПланирования            - ТаблицаЗначений - история настроек периодичности планирования
//  Сотрудник - СправочникСсылка.Пользователи
//
// Возвращаемое значение:
// Массив из Структура:
//     * Работа           - Строка
//     * Цель             - Строка
//     * Комментарий      - Строка
//     * ВыбранаКПереносу - Булево
//
Функция НевыполненныеРаботыПредыдущегоПлана(ДанныеПлана, Сотрудник) Экспорт
	
	НевыполненныеРаботы = Новый Массив;
	
	Если ДанныеПлана = Неопределено Тогда
		
		Возврат НевыполненныеРаботы;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Работа КАК Работа,
	|	ВложенныйЗапрос.ВыбранаКПереносу КАК ВыбранаКПереносу,
	|	МАКСИМУМ(ВложенныйЗапрос.Цель) КАК Цель,
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий) КАК Комментарий
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВЫБОР
	|			КОГДА ЗаписиПлана.ТипСтрокиПлана = ЗНАЧЕНИЕ(Перечисление.ТипыСтрокПлана.Группировка)
	|				ТОГДА ЗаписиПлана.Группировка
	|			ИНАЧЕ ЗаписиПлана.Работа
	|		КОНЕЦ КАК Работа,
	|		ЗаписиПлана.ПеренестиВСледующийПлан КАК ВыбранаКПереносу,
	|		ЗаписиПлана.Цель КАК Цель,
	|		ЗаписиПлана.Комментарий КАК Комментарий
	|	ИЗ
	|		РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|	ГДЕ
	|		ЗаписиПлана.ИдентификаторПлана = &ИдентификаторПлана
	|		И ЗаписиПлана.Сотрудник = &Сотрудник
	|		И ЗаписиПлана.Результат В (ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияПланируемыхРабот.ЧастичноВыполнена), ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияПланируемыхРабот.НеВыполнялась))) КАК ВложенныйЗапрос
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВложенныйЗапрос.Работа) В (&ТребуемыеТипыРабот) 
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Работа,
	|	ВложенныйЗапрос.ВыбранаКПереносу";
	
	Запрос.УстановитьПараметр("ИдентификаторПлана", ДанныеПлана.ИдентификаторПлана);
	Запрос.УстановитьПараметр("Сотрудник",          Сотрудник);
	Запрос.УстановитьПараметр("ТребуемыеТипыРабот", ПланированиеКлиентСервер.ТипыРаботСоСтатусамиДатами());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РаботаКПереносу = Новый Структура;
		РаботаКПереносу.Вставить("Работа",           Выборка.Работа);
		РаботаКПереносу.Вставить("Цель",             Выборка.Цель);
		РаботаКПереносу.Вставить("Комментарий",      Выборка.Комментарий);
		РаботаКПереносу.Вставить("ВыбранаКПереносу", Выборка.ВыбранаКПереносу);
		
		НевыполненныеРаботы.Добавить(РаботаКПереносу);
		
	КонецЦикла;
	
	Возврат НевыполненныеРаботы;
	
КонецФункции

// Определяет признак "Есть записи" для плана по идентификатору
//
// Параметры:
//  ИдентификаторПлана  - Число
//
Процедура ОбновитьПризнакЕстьЗаписи(ИдентификаторПлана) Экспорт
	
	ЕстьЗаписиТекущее     = Ложь;
	ЕстьЗаписиФактическое = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	Планы.ЕстьЗаписи КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.ИдентификаторПлана = &ИдентификаторПлана
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаписиПлана.ИдентификаторПлана КАК ИдентификаторПлана
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|ГДЕ
	|	ЗаписиПлана.ИдентификаторПлана = &ИдентификаторПлана";
	
	Запрос.УстановитьПараметр("ИдентификаторПлана", ИдентификаторПлана);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПлан       = Результат[0].Выбрать();
	ВыборкаЕстьЗаписи = Результат[1].Выбрать();
	
	Если ВыборкаПлан.Следующий() Тогда
		ЕстьЗаписиТекущее = ВыборкаПлан.ЕстьЗаписи;
	КонецЕсли;
	
	Если ВыборкаЕстьЗаписи.Следующий() Тогда
		ЕстьЗаписиФактическое = Истина;
	КонецЕсли;
	
	Если ЕстьЗаписиТекущее <> ЕстьЗаписиФактическое Тогда
		
		ИзменитьЗначениеРеквизитаПлана(ИдентификаторПлана, "ЕстьЗаписи", ЕстьЗаписиФактическое);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет фиксацию плана по заданному идентификатору
//
// Параметры:
//  ИдентификаторПлана - Число
//
Процедура ЗафиксироватьПлан(ИдентификаторПлана) Экспорт
	
	ИзменитьЗначениеРеквизитаПлана(ИдентификаторПлана, "Зафиксирован", Истина);
	
КонецПроцедуры

// Выполняет отмену фиксации плана по заданному идентификатору
//
// Параметры:
//  ИдентификаторПлана - Число
//
Процедура ОтменитьФиксациюПлана(ИдентификаторПлана) Экспорт
	
	ИзменитьЗначениеРеквизитаПлана(ИдентификаторПлана, "Зафиксирован", Ложь);
	
КонецПроцедуры

// Созадает отсутвующие планы по периоду
//
// Параметры:
//  ТаблицаПланов - ТаблицаЗначений   - содержит колонки:
//     * ИдентификаторПлана - Число - 
//     * НачалоПериода      - Дата -
//     * КонецПериода       - Дата - 
//     * Зафиксирован       - Булево -
//  ДатыПланированияПоПериоду    - Структура - См.Перечисления.ПериодичностьПланов.ДатаНачалаИОкончанияПлановПопадающихВПериод
//  ПараметрыПериодаПланирования - Структура - см. Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду
//
Процедура СоздатьОтсутствующиеПланыВПериоде(ТаблицаПланов, ДатыПланированияПоПериоду, ПараметрыПериодаПланирования) Экспорт
	
	БылиСозданыПланы = Ложь;
	НачалоПериодаТекущегоПлана = ДатыПланированияПоПериоду.НачалоПериодаПланов;
	
	Пока НачалоПериодаТекущегоПлана <= ДатыПланированияПоПериоду.КонецПериодаПланов Цикл
		
		НачалоСледующегоПериода = Перечисления.ПериодичностьПланов.РезультатИзмененияДатыНаПериодичность(НачалоПериодаТекущегоПлана,
		                                                                                                ПараметрыПериодаПланирования.НастройкиПланирования.Периодичность, 
		                                                                                                ПараметрыПериодаПланирования.НастройкиПланирования.КоличествоПериодов, 
		                                                                                                "Вперед");
		ОкончаниеПериодаТекущегоПлана = НачалоСледующегоПериода - 86400;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("НачалоПериода", НачалоПериодаТекущегоПлана);
		ПараметрыПоиска.Вставить("КонецПериода",  ОкончаниеПериодаТекущегоПлана);
		
		НайденныеСтроки = ТаблицаПланов.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			БылиСозданыПланы = Истина;
			ДанныеПланаПериода = Справочники.ВидыПланов.ПланПериода(ПараметрыПериодаПланирования.ВидПлана, НачалоПериодаТекущегоПлана);
			НоваяСтрока = ТаблицаПланов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПланаПериода);
			
		КонецЕсли;
		
		НачалоПериодаТекущегоПлана = НачалоСледующегоПериода;
		
	КонецЦикла; 
	
	Если БылиСозданыПланы Тогда
		ТаблицаПланов.Сортировать("НачалоПериода Возр");
	КонецЕсли;
	
КонецПроцедуры

// Получает период последнего плана, в котором есть записи по сотрудникам
//
// Параметры:
//  ВидПлана      - СправочникСсылка.ВидыПлана  - вид плана, по которому получаются данные.
//  Сотрудники    - Массив                      - участники планирования, по которым получаются данные.
//  НачалоПериода - Дата                         - дата, после которой необходимо анализировать записи.
//
// Возвращаемое значение:
// Массив из Структура:
//     * Работа           - Строка
//     * Цель             - Строка
//     * Комментарий      - Строка
//     * ВыбранаКПереносу - Булево
//
Функция ПериодПоследнегоПланаСЗаписьюПоСотруднику( ВидПлана, Сотрудники, НачалоПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(Планы.КонецПериода) КАК КонецПериода
	|ИЗ
	|	РегистрСведений.ЗаписиПлана КАК ЗаписиПлана
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|		ПО ЗаписиПлана.ИдентификаторПлана = Планы.ИдентификаторПлана
	|ГДЕ
	|	ЗаписиПлана.Сотрудник В (&Сотрудники)
	|	И Планы.НачалоПериода >= &НачалоПериода
	|	И Планы.ВидПлана >= &ВидПлана";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.КонецПериода = Null Тогда
			Возврат КонецДня(НачалоПериода);
		Иначе
			Возврат КонецДня(Выборка.КонецПериода);
		КонецЕсли;
	
	КонецЕсли;
	
	
КонецФункции

// Получает данные плана по идентификатору плана
//  
// Параметры:
//  ИдентификаторПлана     - Число     - идентификатор плана, по которому получаются данные.
//
// Возвращаемое значение:
//  Структура - - содержит:
//   * ИдентификаторПлана - Число
//   * ЕстьЗаписи         - Булево
//   * ВидПлана           - СправочникСсылка.ВидыПланов
//   * НачалоПериода      - Дата
//   * КонецПериода       - Дата
//   * Зафиксирован       - Булево
//
Функция ДанныеПланаПоИдентификатору(ИдентификаторПлана) Экспорт
	
	ДанныеПлана = НовыйДанныеПлана(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.ВидПлана           КАК ВидПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.ИдентификаторПлана = &ИдентификаторПлана";
	
	Запрос.УстановитьПараметр("ИдентификаторПлана", ИдентификаторПлана);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеПлана, Выборка);
	
	Возврат ДанныеПлана;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьЗначениеРеквизитаПлана(ИдентификаторПлана, ИмяРеквизита, ЗначениеРеквизита)
	
	НаборЗаписей = РегистрыСведений.Планы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПлана.Установить(ИдентификаторПлана);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 1 Тогда
		НаборЗаписей[0][ИмяРеквизита] = ЗначениеРеквизита;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли