#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет запись данных в регистр
//
// Параметры:
//  ДанныеЗаписи  - Структура - см. ОбъектыНаКонтролеКлиентСервер.НовыйДанныеЗаписиКонтроля
//
Процедура ЗаписатьДанные(ДанныеЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Работа.Установить(ДанныеЗаписи.Работа);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		
	Иначе
		
		ЗаписьНабора = НаборЗаписей[0];
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеЗаписи);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет запись из регистра
//
// Параметры:
//  ДанныеЗаписи  - Структура - см. ОбъектыНаКонтролеКлиентСервер.НовыйДанныеЗаписиКонтроля
//
Процедура УдалитьЗапись(ДанныеЗаписи) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Работа.Установить(ДанныеЗаписи.Работа);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Определяет приоритеты работы
//
// Параметры:
//  Работа  - СправочникСсылка.ТехническиеПроекты,
//            СправочникСсылка.ЗадачиПроцесса - работа.
//
// Возвращаемое значение:
//  СправочникСсылка.ПриоритетыРабот - приоритет работы
//
Функция ПриоритетРаботы(Работа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриоритетыРабот.Приоритет КАК Приоритет
	|ИЗ
	|	РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	ПриоритетыРабот.Работа = &Работа";
	
	Запрос.УстановитьПараметр("Работа", Работа);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Приоритет;
		
	КонецЕсли;
	
КонецФункции

// Конструктор параметров для обработки изменения статуса задачи
//
// Возвращаемое значение:
//   Структура - содержит:
//    * Задача                  - СправочникСсылка.ЗадачиПроцесса - работа.
//    * Проект                  - СправочникСсылка.Проекты - проект работы.
//    * НовыйСтатус             - ПеречислениеСсылка.СтатусыЗадачПроцесса - новый статус.
//    * СтарыйСтатус            - ПеречислениеСсылка.СтатусыЗадачПроцесса - старый статус.
//    * СтарыйРодитель          - СправочникСсылка.ЗадачиПроцесса - старый родитель.
//    * НовыйРодитель           - СправочникСсылка.ЗадачиПроцесса - новый родитель.
//    * НовыйИсполнитель        - СправочникСсылка.Пользователи - новый исполнитель.
//    * СтарыйИсполнитель       - СправочникСсылка.Пользователи - старый исполнитель.
//    * СтарыйПредмет           - ОпределяемыйТип.ПредметПроцесса - старый предмет.
//    * НовыйПредмет            - ОпределяемыйТип.ПредметПроцесса - новый предмет.
//    * НовыйПометкаУдаления    - Булево - старый предмет.
//    * СтарыйПометкаУдаления   - Булево - новый предмет.
//
Функция НовыйДанныеДляОбработкиИзмененияСтатусаЗадачиПроцесса() Экспорт
	
	ДанныеДляОбработки = Новый Структура;
	ДанныеДляОбработки.Вставить("Задача",                Справочники.ЗадачиПроцесса.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("Проект",                Справочники.Проекты.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("НовыйСтатус",           Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("СтарыйСтатус",          Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("СтарыйРодитель",        Справочники.ЗадачиПроцесса.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("НовыйРодитель",         Справочники.ЗадачиПроцесса.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("СтарыйИсполнитель",     Справочники.Пользователи.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("НовыйИсполнитель",      Справочники.Пользователи.ПустаяСсылка());
	ДанныеДляОбработки.Вставить("СтарыйПредмет",         Неопределено);
	ДанныеДляОбработки.Вставить("НовыйПредмет",          Неопределено);
	ДанныеДляОбработки.Вставить("НовыйПометкаУдаления",  Ложь);
	ДанныеДляОбработки.Вставить("СтарыйПометкаУдаления", Ложь);
	
	Возврат ДанныеДляОбработки;
	
КонецФункции

// Выполняет необходимые действия по изменению приоритета при изменении задачи
//
// Параметры:
//  ДанныеДляОбработки  - Структура - см.НовыйДанныеДляОбработкиИзмененияСтатусаЗадачиПроцесса
//
Процедура ПриИзмененииЗадачиПроцесса(ДанныеДляОбработки) Экспорт
	
	ТребуетсяОбработка = Ложь;
	
	СтатусыЗадачНеТребуетВнимания = Новый Массив;
	СтатусыЗадачНеТребуетВнимания.Добавить(Перечисления.СтатусыЗадачПроцессов.Выполнена);
	СтатусыЗадачНеТребуетВнимания.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
	СтатусыЗадачНеТребуетВнимания.Добавить(Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка());
	
	Если Не ДанныеДляОбработки.НовыйПометкаУдаления 
		И ДанныеДляОбработки.СтарыйПометкаУдаления Тогда
		
		ТребуетсяОбработка = Истина;
		
	ИначеЕсли ДанныеДляОбработки.НовыйПометкаУдаления Тогда
		
		Если Не ДанныеДляОбработки.СтарыйПометкаУдаления Тогда
			РегистрыСведений.ОчередиРаботСотрудников.ОтразитьИзменениеОчередиПоРаботе(ДанныеДляОбработки.Задача);
		КонецЕсли;
		
		ТребуетсяОбработка = Ложь;
		
	ИначеЕсли ДанныеДляОбработки.СтарыйРодитель <> ДанныеДляОбработки.НовыйРодитель Тогда
		
		ТребуетсяОбработка = Истина;
		
	ИначеЕсли СтатусыЗадачНеТребуетВнимания.Найти(ДанныеДляОбработки.НовыйСтатус) = Неопределено
			И СтатусыЗадачНеТребуетВнимания.Найти(ДанныеДляОбработки.СтарыйСтатус)<> Неопределено  Тогда
			
		ТребуетсяОбработка = Истина;
		
	ИначеЕсли ДанныеДляОбработки.СтарыйПредмет <> ДанныеДляОбработки.НовыйПредмет Тогда
		
		ТребуетсяОбработка = Истина;
		
	КонецЕсли;
	
	Если Не ТребуетсяОбработка Тогда
		Если ДанныеДляОбработки.СтарыйИсполнитель <> ДанныеДляОбработки.НовыйИсполнитель Тогда
			РегистрыСведений.ОчередиРаботСотрудников.ОтразитьИзменениеОчередиПоРаботе(ДанныеДляОбработки.Задача);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПриоритетРодительскойРаботыЗадачи = ПриоритетРодительскойРаботыЗадачи(ДанныеДляОбработки.Задача);
	ПриоритетЗадачи                   = ПриоритетРаботы(ДанныеДляОбработки.Задача);
	
	Если ЗначениеЗаполнено(ПриоритетЗадачи)
		И ПриоритетЗадачи = ПриоритетРодительскойРаботыЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПриоритетРодительскойРаботыЗадачи) Тогда
	
		ДанныеЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписи.Работа    = ДанныеДляОбработки.Задача;
		ДанныеЗаписи.Приоритет = ПриоритетРодительскойРаботыЗадачи;
		ЗаписатьДанные(ДанныеЗаписи);
		
	Иначе
		
		ПриоритетПоУмолчанию = Справочники.ПриоритетыРабот.ПриоритетПоУмолчанию(ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(ДанныеДляОбработки.НовыйПредмет));
		
		ДанныеЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписи.Работа    = ДанныеДляОбработки.Задача;
		ДанныеЗаписи.Приоритет = ПриоритетПоУмолчанию;

		Если Не ЗначениеЗаполнено(ПриоритетПоУмолчанию) Тогда
			УдалитьЗапись(ДанныеЗаписи);
		Иначе
			ЗаписатьДанные(ДанныеЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.ОчередиРаботСотрудников.ОтразитьИзменениеОчередиПоРаботе(ДанныеДляОбработки.Задача);
	
КонецПроцедуры

// Выполняет изменение приоритетов для массива работ
//
// Параметры:
//  ИзменяемыеПриоритеты  - ТаблицаЗначений - см.ПриоритетыОчередиРабот.НовыйТаблицаИзменийПриоритета.
//
Процедура ОтработатьИзменениеПриоритетаМассиваРабот(ИзменяемыеПриоритеты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИзменяемыеПриоритеты.Работа          КАК Работа,
	|	ИзменяемыеПриоритеты.Приоритет       КАК Приоритет,
	|	ИзменяемыеПриоритеты.СтарыйПриоритет КАК СтарыйПриоритет,
	|	ИзменяемыеПриоритеты.Проект          КАК Проект
	|ПОМЕСТИТЬ ИзменяемыеПриоритеты
	|ИЗ
	|	&ИзменяемыеПриоритеты КАК ИзменяемыеПриоритеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Ссылка   КАК Приоритет,
	|	ПриоритетыРабот.Владелец КАК Проект,
	|	ПриоритетыРабот.Порядок  КАК Порядок
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	НЕ ПриоритетыРабот.ПометкаУдаления
	|	И ПриоритетыРабот.Владелец В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ИзменяемыеПриоритеты.Проект КАК Владелец
	|			ИЗ
	|				ИзменяемыеПриоритеты КАК ИзменяемыеПриоритеты)
	|УПОРЯДОЧИТЬ ПО
	|	Проект,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка                                                                  КАК Работа,
	|	ИзменяемыеПриоритеты.Проект                                                            КАК Проект,
	|	ИзменяемыеПриоритеты.Приоритет                                                         КАК НовыйПриоритетРодителя,
	|	ИзменяемыеПриоритеты.СтарыйПриоритет                                                   КАК СтарыйПриоритетРодителя,
	|	ЕстьNull(ПриоритетыРабот.Приоритет, ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)) КАК ТекущийПриоритетРаботы
	|ИЗ
	|	ИзменяемыеПриоритеты КАК ИзменяемыеПриоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИзменяемыеПриоритеты.Работа = ЗадачиПроцесса.Предмет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО ЗадачиПроцесса.Ссылка = ПриоритетыРабот.Работа
	|ГДЕ
	|	ЗадачиПроцесса.Статус Не В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИерархияЗадачПроцесса.ЗадачаПроцесса                                                   КАК Работа,
	|	ИзменяемыеПриоритеты.Проект                                                            КАК Проект,
	|	ИзменяемыеПриоритеты.Приоритет                                                         КАК НовыйПриоритетРодителя,
	|	ИзменяемыеПриоритеты.СтарыйПриоритет                                                   КАК СтарыйПриоритетРодителя,
	|	ЕстьNull(ПриоритетыРабот.Приоритет, ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)) КАК ТекущийПриоритетРаботы
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзменяемыеПриоритеты КАК ИзменяемыеПриоритеты
	|		ПО ИерархияЗадачПроцесса.Родитель = ИзменяемыеПриоритеты.Работа
	|			И (ИерархияЗадачПроцесса.ЗадачаПроцесса <> ИерархияЗадачПроцесса.Родитель)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ПриоритетыРабот.Работа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И ЗадачиПроцесса.Статус Не В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена))
	|			И НЕ ЗадачиПроцесса.ПометкаУдаления";

	Запрос.УстановитьПараметр("ИзменяемыеПриоритеты", ИзменяемыеПриоритеты);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицыПриоритетов = ТаблицыПриоритетовПоРезультатуЗапросу(РезультатЗапроса[1]);
	ТаблицаОпределенныхИзмененийПриоритетов = НовыйТаблицаОпределенныхИзмененийПриоритетов();
	
	Выборка = РезультатЗапроса[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыйПриоритетРаботы = ОпределенныйПриоритетРаботы(Выборка, ТаблицыПриоритетов, ТаблицаОпределенныхИзмененийПриоритетов);
		
		ДанныеЗаписи           = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписи.Работа    = Выборка.Работа;
		ДанныеЗаписи.Приоритет = НовыйПриоритетРаботы;
		
		Если НовыйПриоритетРаботы = Выборка.ТекущийПриоритетРаботы Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(НовыйПриоритетРаботы) Тогда
			УдалитьЗапись(ДанныеЗаписи);
		Иначе
			НоваяСтрока = ИзменяемыеПриоритеты.Добавить();
			НоваяСтрока.Приоритет       = НовыйПриоритетРаботы;
			НоваяСтрока.Работа          = Выборка.Работа;
			НоваяСтрока.СтарыйПриоритет = Выборка.ТекущийПриоритетРаботы;
			НоваяСтрока.Проект          = Выборка.Проект;
			ЗаписатьДанные(ДанныеЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ОчередиРаботСотрудников.ОтразитьИзменениеПриоритетовВОчереди(ИзменяемыеПриоритеты);
	
КонецПроцедуры

// Выполняет изменение приоритетов для задач по предмету. 
//
// Параметры:
//  Предмет    - ОпределяемыйТип.ПредметПроцесса  - предмет.
//  Приоритет  - СправочникСсылка.ПриоритетыРабот - устанавливаемый приоритет.
//
Процедура УстановитьПриоритетЗадачПредмета(Предмет, Приоритет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка КАК Задача
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Предмет = &Предмет
	|	И НЕ ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления";
	
	Если ТипЗнч("Предмет") = Тип("СправочникСсылка.ВерсииПроекта")
		Или ТипЗнч("Предмет") = Тип("СправочникСсылка.РазделыПроекта") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗадачиПроцесса.Предмет", "ЗадачиПроцесса.Предмет.Владелец")
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписи.Работа    = Выборка.Задача;
		ДанныеЗаписи.Приоритет = Приоритет;

		ЗаписатьДанные(ДанныеЗаписи);
	
	КонецЦикла;
	
КонецПроцедуры

// Удаляет записи приоритета для задач по предмету. 
//
// Параметры:
//  Предмет    - ОпределяемыйТип.ПредметПроцесса  - предмет.
//
Процедура УдалитьПриоритетыЗадачПредмета(Предмет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка КАК Задача
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО ПриоритетыРабот.Работа = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Предмет = &Предмет";
	
	Если ТипЗнч("Предмет") = Тип("СправочникСсылка.ВерсииПроекта")
		Или ТипЗнч("Предмет") = Тип("СправочникСсылка.РазделыПроекта") Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗадачиПроцесса.Предмет", "ЗадачиПроцесса.Предмет.Владелец")
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписи.Работа    = Выборка.Задача;

		УдалитьЗапись(ДанныеЗаписи);
	
	КонецЦикла;
	
КонецПроцедуры

// Определяет приоритет родительской задачи 
//
// Параметры:
//  ЗадачаПроцесса  - СправочникСсылка.ЗадачиПроцесса - проект работы
//
// Возвращаемое значение:
//  
//  Приоритет  - СправочникСсылка.ПриоритетыРабот - приоритет родительской задачи.
//
Функция ПриоритетРодительскойРаботыЗадачи(ЗадачаПроцесса) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Родитель                                   КАК Родитель,
	|	ЗадачиПроцесса.Предмет                                    КАК Предмет,
	|	ЕСТЬNULL(ПриоритетыРаботПредмет.Приоритет,  Неопределено) КАК ПриоритетПредмета,
	|	ЕСТЬNULL(ПриоритетыРаботРодитель.Приоритет, Неопределено) КАК ПриоритетРодителя
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРаботРодитель
	|		ПО ЗадачиПроцесса.Родитель = ПриоритетыРаботРодитель.Работа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРаботПредмет
	|		ПО ЗадачиПроцесса.Предмет = ПриоритетыРаботПредмет.Работа
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &ЗадачаПроцесса";
	
	Запрос.УстановитьПараметр("ЗадачаПроцесса",       ЗадачаПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
		Возврат Выборка.ПриоритетРодителя;
	ИначеЕсли ТипЗнч(Выборка.Предмет) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		
		Возврат Выборка.ПриоритетПредмета;
		
	Иначе 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицыПриоритетовПоРезультатуЗапросу(РезультатЗапроса)
	
	ТаблицыПриоритетов = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаПриоритетовПроекта = ТаблицыПриоритетов.Получить(Выборка.Проект);
		
		Если ТаблицаПриоритетовПроекта = Неопределено Тогда
			
			ТаблицаПриоритета = Новый ТаблицаЗначений;
			ТаблицаПриоритета.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
			ТаблицаПриоритета.Колонки.Добавить("Порядок",   Новый ОписаниеТипов("Число"));
			
			ТаблицыПриоритетов.Вставить(Выборка.Проект, ТаблицаПриоритета);
			
			
			
		КонецЕсли;
		
		НоваяСтрока = ТаблицаПриоритета.Добавить();
		НоваяСтрока.Приоритет = Выборка.Приоритет;
		НоваяСтрока.Порядок   = Выборка.Порядок;
		
	КонецЦикла;
	
	Возврат ТаблицыПриоритетов;
	
КонецФункции

Функция  ОпределенныйПриоритетРаботы(Выборка, ТаблицыПриоритетов, ТаблицаОпределенныхИзмененийПриоритетов)
	
	НайденнаяСтрока = Неопределено;
	
	Если Выборка.ТекущийПриоритетРаботы = Выборка.СтарыйПриоритетРодителя Тогда
		
		Возврат Выборка.НовыйПриоритетРодителя;
		
	ИначеЕсли Выборка.ТекущийПриоритетРаботы = Справочники.ПриоритетыРабот.ПустаяСсылка() Тогда
		
		Возврат Выборка.НовыйПриоритетРодителя;
		
	КонецЕсли;
	
	Если ТаблицаОпределенныхИзмененийПриоритетов.Количество() > 0 Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("СтарыйПриоритетРодителя", Выборка.СтарыйПриоритетРодителя);
		ПараметрыПоиска.Вставить("НовыйПриоритетРодителя",  Выборка.НовыйПриоритетРодителя);
		ПараметрыПоиска.Вставить("СтарыйПриоритет",         Выборка.ТекущийПриоритетРаботы);
		
		НайденныеСтроки = ТаблицаОпределенныхИзмененийПриоритетов.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		ТаблицаПриоритетов = ТаблицыПриоритетов.Получить(Выборка.Проект);
		
		НайденнаяСтрока = ТаблицаОпределенныхИзмененийПриоритетов.Добавить();
		НайденнаяСтрока.СтарыйПриоритетРодителя = Выборка.СтарыйПриоритетРодителя;
		НайденнаяСтрока.НовыйПриоритетРодителя  = Выборка.НовыйПриоритетРодителя;
		НайденнаяСтрока.СтарыйПриоритет         = Выборка.ТекущийПриоритетРаботы;
		
		Если ТаблицаПриоритетов = Неопределено Тогда
			
			НайденнаяСтрока.НовыйПриоритет = Неопределено;
			
		Иначе
			
			ПозицияСтарогоПриоритетаРодителя = - 1;
			ПозицияНовогоПриоритетаРодителя  = - 1;
			ПозицияТекущегоПриоритетаРаботы  = - 1;
			
			Индекс = 0;
			Для Каждого СтрокаПриоритета Из ТаблицаПриоритетов Цикл
				
				Если СтрокаПриоритета.Приоритет = Выборка.СтарыйПриоритетРодителя Тогда
					ПозицияСтарогоПриоритетаРодителя = Индекс;
				КонецЕсли;
				
				Если СтрокаПриоритета.Приоритет = Выборка.НовыйПриоритетРодителя Тогда
					ПозицияНовогоПриоритетаРодителя  = Индекс;
				КонецЕсли;
				
				Если СтрокаПриоритета.Приоритет = Выборка.ТекущийПриоритетРаботы Тогда
					ПозицияТекущегоПриоритетаРаботы = Индекс;
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
			
			СдвигПриоритета        = ПозицияНовогоПриоритетаРодителя - ПозицияСтарогоПриоритетаРодителя;
			ИндексНовогоПриоритета = ПозицияТекущегоПриоритетаРаботы + СдвигПриоритета;
			КоличествоПриоритетов  = ТаблицаПриоритетов.Количество();
			
			Если ИндексНовогоПриоритета < 0 Тогда
				НайденнаяСтрока.НовыйПриоритет = ТаблицаПриоритетов[0].Приоритет;
			ИначеЕсли ИндексНовогоПриоритета > КоличествоПриоритетов - 1 Тогда
				НайденнаяСтрока.НовыйПриоритет = ТаблицаПриоритетов[КоличествоПриоритетов - 1].Приоритет;
			Иначе
				НайденнаяСтрока.НовыйПриоритет = ТаблицаПриоритетов[ИндексНовогоПриоритета].Приоритет;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденнаяСтрока.НовыйПриоритет;
	
КонецФункции

Функция НовыйТаблицаОпределенныхИзмененийПриоритетов()
	
	ТаблицаОпределенныхИзмененийПриоритетов = Новый ТаблицаЗначений;
	ТаблицаОпределенныхИзмененийПриоритетов.Колонки.Добавить("СтарыйПриоритетРодителя", Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	ТаблицаОпределенныхИзмененийПриоритетов.Колонки.Добавить("НовыйПриоритетРодителя",  Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	ТаблицаОпределенныхИзмененийПриоритетов.Колонки.Добавить("СтарыйПриоритет",         Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	ТаблицаОпределенныхИзмененийПриоритетов.Колонки.Добавить("НовыйПриоритет",          Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	
	Возврат ТаблицаОпределенныхИзмененийПриоритетов;
	
КонецФункции

#КонецОбласти

#КонецЕсли