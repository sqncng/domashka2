
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьДанныеПроекта(Объект.Владелец);
		
		Если Объект.СборкиВключаемыхПроектов.Количество() = 0 Тогда
			ЗаполнитьТаблицуСборокПроектамиИСборками();
		Иначе
			ЗаполнитьСборкиПоОбъекту(Объект.СборкиВключаемыхПроектов.Выгрузить());
		КонецЕсли;
		
		ПриЧтенииСозданииНаСервере();
		
		УстановитьДоступностьДатыПубликации(Объект.Опубликована, Элементы);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПрочитатьСборки();
	УстановитьДоступностьДатыПубликации(Объект.Опубликована, Элементы);
	ЗаполнитьДанныеПроекта(Объект.Владелец);
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы из СборкиБиблиотек Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сборка) Тогда
			ТекстСообщения = НСтр("ru='В строке %Индекс% таблицы включаемых сборок не указана сборка'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Индекс%", Индекс+1);
			Поле = "СборкиБиблиотек[%Индекс%].Сборка";
			Поле = СтрЗаменить(Поле, "%Индекс%", Индекс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле);
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.СборкиВключаемыхПроектов.Очистить();
	Для Каждого СтрокаТаблицы из СборкиБиблиотек Цикл
		НоваяСтрока = Объект.СборкиВключаемыхПроектов.Добавить();
		НоваяСтрока.Сборка = СтрокаТаблицы.Сборка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ЗаписатьДанныеСогласующихРесурсыПредмета(ЭтотОбъект, Объект.Ссылка);
	// Конец ЗадачиПроцессов

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПриИзмененииВладельцаСервер();
	Иначе
		СборкиБиблиотек.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДанныеВыбораСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ДанныеВыбораСтатуса(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликованаПриИзменении(Элемент)
	
	ПриИзмененииПризнакаПубликацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеДистрибутиваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = Объект.РасположениеДистрибутива;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога дистрибутива сборки'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.РасположениеДистрибутива = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	Версия1 = СтрРазделить(Объект.Код, ".");
	
	Если Версия1.Количество() = 4 Тогда
		
		Объект.РасположениеДистрибутива = СтрЗаменить(Объект.РасположениеДистрибутива, Объект.ПубликуемыйНомерСборки, Объект.Код);
		Объект.РасположениеПубликации = СтрЗаменить(Объект.РасположениеПубликации, Объект.ПубликуемыйНомерСборки, Объект.Код);
		Объект.ПубликуемыйНомерСборки = Объект.Код;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СборкиБиблиотекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Интерактивное добавление строк не поддерживается
	Отказ = Истина;
	
КонецПроцедуры

// ЗадачиПроцессов

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиСогласующиеРесурс(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗадачиПроцессовКлиент.ОбработкаНавигационнойСсылкиСогласующиеРесурс(ЭтотОбъект,
	                                                                    Элемент,
	                                                                    НавигационнаяСсылкаФорматированнойСтроки,
	                                                                    СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработатьИзменениеСогласующихРесурсыПоПредмету()
	
	ЗадачиПроцессов.ОбработатьИзменениеСогласующихРесурсыПоПредмету(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СогласующийРесурсПриИзменении()

	ЗадачиПроцессовКлиент.ОтразитьИзменениеЕдинственногоСогласующегоРесурса(ЭтотОбъект);

КонецПроцедуры

// Конец ЗадачиПроцессов

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписокПроектов(Команда)
	
	ОбновитьСписокПроектовСервер();
	
	ТекстЗаголовка = НСтр("ru='Обновление списка включаемых проектов'");
	ТекстПояснения = НСтр("ru='Список включаемых проектов обновлен'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,ТекстПояснения);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СтатусТестов(Команда)
	
	Ветка = ВеткаВерсии();
	Если Не ЗначениеЗаполнено(Ветка) Тогда
		ТекстИслючения = 
		    СтрШаблон(НСтр("ru = 'Не указана ветка в версии: %1'"), Объект.Владелец);
		ВызватьИсключение ТекстИслючения;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка, Сборка", 
		"СтатусПрохожденияТестовВВетке",
		Истина,
		Истина,
		Ветка,
		Объект.Ссылка);
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьСписокПроектовСервер()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗаполнитьТаблицуСборокПроектамиИСборками();
		
	Иначе 
		
		ПрочитатьСборки();
		МассивПроектов = МассивВключаемыхПроектов();
		УдаляемыеСтроки = Новый Массив;
		
		Для Каждого СтрокаТаблицы Из СборкиБиблиотек Цикл
			Если МассивПроектов.Найти(СтрокаТаблицы.Проект) = Неопределено Тогда
				УдаляемыеСтроки.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
			СборкиБиблиотек.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		Для Каждого СтрокаПроект Из МассивПроектов Цикл
			
			СтруктураОтбора = Новый Структура("Проект", СтрокаПроект);
			МассивСтрок = СборкиБиблиотек.НайтиСтроки(СтруктураОтбора);
			
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = СборкиБиблиотек.Добавить();
				НоваяСтрока.Проект = СтрокаПроект;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВладельцаСервер()
	
	ЗаполнитьДанныеПроекта(Объект.Владелец);
	Объект.РекомендуемаяВерсияПлатформы = Справочники.ВерсииПроекта.ВерсияПлатформы(Объект.Владелец);
	ЗаполнитьТаблицуСборокПроектамиИСборками();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Владелец) Тогда
		ВеткаВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Ветка");
		Объект.Ветка = ВеткаВерсии;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСборокПроектамиИСборками()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Возврат;
	КонецЕсли; 
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец, "Владелец,Ветка.Тип");
	Проект          = РеквизитыВерсии.Владелец;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Версия", Объект.Владелец);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроектыВключаемыеПроекты.Проект КАК Проект,
	|	МАКСИМУМ(СборкиВерсии.Ссылка) КАК СборкаПроекта
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО ПроектыВключаемыеПроекты.Проект = СборкиВерсии.Владелец.Владелец
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Проект
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроектыВключаемыеПроекты.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия.Владелец КАК Проект,
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия КАК Версия,
	|	МАКСИМУМ(СборкиВерсии.Ссылка) КАК СборкаВерсии,
	|	МАКСИМУМ(СборкиВерсииПоПроекту.Ссылка) КАК СборкаВерсииПоПроекту
	|ИЗ
	|	Справочник.ВерсииПроекта.ВерсииВключаемыхПроектов КАК ВерсииПроектаВерсииВключаемыхПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО ВерсииПроектаВерсииВключаемыхПроектов.Версия = СборкиВерсии.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсииПоПроекту
	|		ПО ВерсииПроектаВерсииВключаемыхПроектов.Версия.Владелец = СборкиВерсииПоПроекту.Владелец.Владелец
	|ГДЕ
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка = &Версия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия.Владелец,
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия";
	
	Результат = Запрос.ВыполнитьПакет();
	
	СборкиПроекта = Результат[0].Выгрузить();
	СборкиВерсии  = Результат[1].Выгрузить();
	
	СборкиБиблиотек.Очистить();
	
	МассивПроектов = СборкиПроекта.ВыгрузитьКолонку("Проект");
	
	Для Каждого СтрокаПроект Из МассивПроектов Цикл
		
		НоваяСтрока = СборкиБиблиотек.Добавить();
		НоваяСтрока.Проект = СтрокаПроект;
		
		СтрокаСборокВерсии = СборкиВерсии.Найти(СтрокаПроект, "Проект");
		
		Если РеквизитыВерсии.ВеткаТип = Перечисления.ТипыВеток.ВеткаВерсии Тогда
			
			Если СтрокаСборокВерсии <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(СтрокаСборокВерсии.СборкаВерсии) Тогда
					НоваяСтрока.Версия = СтрокаСборокВерсии.СборкаВерсии.Владелец;
					НоваяСтрока.Сборка = СтрокаСборокВерсии.СборкаВерсии
				ИначеЕсли ЗначениеЗаполнено(СтрокаСборокВерсии.СборкаВерсииПоПроекту) Тогда
					НоваяСтрока.Версия = СтрокаСборокВерсии.СборкаВерсииПоПроекту.Владелец;
					НоваяСтрока.Сборка = СтрокаСборокВерсии.СборкаВерсииПоПроекту
				ИначеЕсли ЗначениеЗаполнено(СтрокаСборокВерсии.Версия) Тогда
					НоваяСтрока.Версия = СтрокаСборокВерсии.Версия;
				КонецЕсли; 
				
			КонецЕсли; 
			
		Иначе 
			
			СтрокаСборокПроекта = СборкиПроекта.Найти(СтрокаПроект, "Проект");
			Если СтрокаСборокПроекта <> Неопределено И ЗначениеЗаполнено(СтрокаСборокПроекта.СборкаПроекта) Тогда
				НоваяСтрока.Версия = СтрокаСборокПроекта.СборкаПроекта.Владелец;
				НоваяСтрока.Сборка = СтрокаСборокПроекта.СборкаПроекта
			ИначеЕсли СтрокаСборокВерсии <> Неопределено И ЗначениеЗаполнено(СтрокаСборокВерсии.Версия) Тогда
				НоваяСтрока.Версия = СтрокаСборокВерсии.Версия;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МассивВключаемыхПроектов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Проект КАК Проект
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Проект"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Владелец");
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	
КонецФункции

&НаСервере
Процедура ПрочитатьСборки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка.Владелец.Владелец КАК Проект,
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка.Владелец КАК Версия,
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка КАК Сборка
	|ИЗ
	|	Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВерсииСборкиВключаемыхПроектов
	|ГДЕ
	|	СборкиВерсииСборкиВключаемыхПроектов.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	ТаблицаСборок = Запрос.Выполнить().Выгрузить();
	СборкиБиблиотек.Загрузить(ТаблицаСборок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСборкиПоОбъекту(ТаблицаСборок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСборок = ТаблицаСборок.ВыгрузитьКолонку("Сборка");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СборкиВерсии.Ссылка КАК Сборка,
	|	СборкиВерсии.Владелец КАК Версия,
	|	СборкиВерсии.Владелец.Владелец КАК Проект
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Ссылка В(&МассивСборок)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивСборок", МассивСборок);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы из ТаблицаСборок Цикл
		
		СтруктураОтбора = Новый Структура("Сборка", Строкатаблицы.Сборка);
		МассивСтрок = ТаблицаРезультата.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаРезультата из МассивСтрок Цикл
			НоваяСтрока = СборкиБиблиотек.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДатыПубликации(Опубликована, Элементы)
	
	Элементы.ДатаПубликации.Доступность = Опубликована;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПроекта(Версия)
	
	Если НЕ ЗначениеЗаполнено(Версия) Тогда
		Проект = Справочники.Проекты.ПустаяСсылка();
		Библиотека = Ложь;
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВерсииПроекта.Владелец КАК Проект,
	|	ВерсииПроекта.Владелец.Библиотека КАК Библиотека
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Версия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Проект = Выборка.Проект;
		Библиотека = Выборка.Библиотека;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
		Библиотека = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоясненияКСтатусуСборки()
	
	Элементы.ПояснениеКСтатусуСборкиБиблиотеки.Видимость = Библиотека;
	Элементы.ПояснениеКСтатусуСборкиПроекта.Видимость = НЕ Библиотека;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьВидимостьПоясненияКСтатусуСборки();
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ОтобразитьИнформациюПоСогласующимВФорме(ЭтотОбъект, Объект.Ссылка, "ГруппаОсновное");
	// Конец ЗадачиПроцессов
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПризнакаПубликацииСервер()
	
	УстановитьДоступностьДатыПубликации(Объект.Опубликована, Элементы);
	
	Если Объект.Опубликована Тогда
		Объект.ДатаПубликации = ТекущаяДата();
	ИначеЕсли НЕ Объект.Опубликована И ЗначениеЗаполнено(Объект.ДатаПубликации) Тогда
		Объект.ДатаПубликации = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеВыбораСтатуса(Текст=Неопределено)
	
	ПараметрыВыбораСтатуса = Новый Структура;
	ПараметрыВыбораСтатуса.Вставить("Библиотека", Библиотека);
	
	Если Текст <> Неопределено Тогда
		ПараметрыВыбораСтатуса.Вставить("СтрокаПоиска", Текст);
	КонецЕсли;
	
	Возврат Перечисления.СтатусыСборокВерсииПроекта.ПолучитьДанныеВыбора(ПараметрыВыбораСтатуса);
	
КонецФункции

&НаКлиенте
Процедура СборкиБиблиотекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СборкиБиблиотекПроект" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Ключ", Элементы.СборкиБиблиотек.ТекущиеДанные.Проект);
		ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВеткаВерсии()
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Ветка");
	
КонецФункции

#КонецОбласти