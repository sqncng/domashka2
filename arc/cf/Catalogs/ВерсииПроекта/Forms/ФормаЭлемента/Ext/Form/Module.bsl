#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусКонтроля = "Добавлено";
		ПриЧтенииСозданииНаСервере();
		// Таблица версий заполняется проектами
		ЗаполнитьТаблицуВерсийПроектами();
		
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Элементы.ВерсияПлатформыХранилища.ПодсказкаВвода = СисИнфо.ВерсияПриложения;
	
	Элементы.ВерсияПлатформыХранилища.СписокВыбора.Добавить("", НСтр("ru = '<версия по умолчанию>'"));
	
	Для каждого ДоступнаяВерсия Из ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы() Цикл
	
		Элементы.ВерсияПлатформыХранилища.СписокВыбора.Добавить(ДоступнаяВерсия);
	
	КонецЦикла; 
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьЭлементовХранилищаИВетокПоЗначениямРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеХранилищаВерсииЗавершено" И Параметр.ВерсияПроекта = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("РасположениеХранилища") И РасположениеХранилища <> Параметр.РасположениеХранилища Тогда
			Если ЗначениеЗаполнено(Объект.Ветка) И ТипВетки = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии") Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбновленияИмениВетки", 
													  ЭтаФорма, 
													  Новый Структура("Имя", Параметр.РасположениеХранилища));
				ПоказатьВопрос(Оповещение, НСтр("ru='Обновить адрес хранилища в ветке?'"), РежимДиалогаВопрос.ДаНет);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСозданияВетки",
													  ЭтаФорма, 
													  Новый Структура("Имя", Параметр.РасположениеХранилища));

				ПоказатьВопрос(Оповещение, НСтр("ru='Создать ветку для версии проекта?'"), РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		Модифицированность = Истина;
	
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	
	ПриЧтенииСозданииНаСервере();
	ЗаполнитьВерсииПоОбъекту();
	ЗаполнитьПоследнююСборку();
	ЗаполнитьКэшируемыеРеквизиты();
	УстановитьЗаголовокДекорацииСОписаниемПроблем();
	УстановитьДоступностьЭлементовХранилищаИВетокПоЗначениямРеквизитов();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.ВерсииВключаемыхПроектов.Очистить();
	
	Для Каждого СтрокаТаблицы из ВерсииВключаемыхПроектов Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Версия) Тогда
			
			НоваяСтрока = Объект.ВерсииВключаемыхПроектов.Добавить();
			НоваяСтрока.Версия = СтрокаТаблицы.Версия;
			НоваяСтрока.Комментарий = СтрокаТаблицы.Комментарий;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВыполнитьДействияПослеЗаписиСервер();
	Оповестить("Запись_ВерсииПроекта", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ПриИзмененииВладельцаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПрекращенияПоддержкиПриИзменении(Элемент)
	
	СформироватьТекстИнформацииОбОкончанииПоддержки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыПриИзменении(Элемент)
	
	Если ВерсииВключаемыхПроектов.Количество()>0 Тогда
		ЗаполнитьКэшируемыеРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВключенияБиблиотекПриИзменении(Элемент)
	
	Если ВерсииВключаемыхПроектов.Количество()>0 Тогда
		ЗаполнитьКэшируемыеРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРасположенияХранилища(Элементы, РежимРазработки, ТипВетки);
	
	РазработкаВедетсяВОтдельномХранилище = ТипВетки = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии")
								           И РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВХранилище");
	
	Элементы.ВерсияПлатформыХранилища.Доступность = РазработкаВедетсяВОтдельномХранилище;
	Элементы.ПодключитьсяКХранилищу.Доступность   = РазработкаВедетсяВОтдельномХранилище;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИБДляЗагрузкиМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = Объект.КаталогИБДляЗагрузкиМетаданных;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога информационной базы'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.КаталогИБДляЗагрузкиМетаданных = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсииВключаемыхПроектовВерсияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВерсииВключаемыхПроектов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные.ПоследняяСборка = ПолучитьПоследнююСборкуВерсии(ТекущиеДанные.Версия);

КонецПроцедуры

&НаКлиенте
Процедура НомерРедакцииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьНаименованиеПоНомерам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПодредакцииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьНаименованиеПоНомерам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВерсииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СформироватьНаименованиеПоНомерам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Составляющие = ОбщегоНазначенияСППРКлиентСервер.СоставляющиеНомераВерсииПоКоду(Объект.Код);
		
		Если Составляющие.НомерРедакции <> 0 ИЛИ Составляющие.НомерПодредакции <> 0 ИЛИ Составляющие.НомерВерсии <> 0 Тогда
			Объект.НомерРедакции = Составляющие.НомерРедакции;
			Объект.НомерПодредакции = Составляющие.НомерПодредакции;
			Объект.НомерВерсии = Составляющие.НомерВерсии;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеткаПриИзменении(Элемент)
	УстановитьДоступностьЭлементовХранилищаИВетокПоЗначениямРеквизитов();
	Если РежимРазработкиВетки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВХранилище")
		И ТипВетки = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии") Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Создать хранилище для версии?", РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВеткаСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьИВыбратьВетку();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписокПроектов(Команда)
	
	ОбновитьСписокПроектовСервер();
	
	ТекстЗаголовка = НСтр("ru='Обновление списка включаемых проектов'");
	ТекстПояснения = НСтр("ru='Список включаемых проектов обновлен'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,ТекстПояснения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВерсииБиблиотек(Команда)
	
	ОбновитьВерсииБиблиотекСервер();
	
	ТекстЗаголовка = НСтр("ru='Обновление версий включаемых проектов'");
	ТекстПояснения = НСтр("ru='Версии включаемых проектов обновлены'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,ТекстПояснения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОкончанияПоддержки(Команда)
	
	ЗаполнитьДатуОкончанияПоддержкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование(Команда)
	
	СформироватьНаименованиеПоНомерам();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗагрузитьМетаданныеИОбработчикиОбновления(Команда)
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Проект", Объект.Владелец);
	ПараметрыЗагрузки.Вставить("Версия", Объект.Ссылка);
	ПараметрыЗагрузки.Вставить("Режим", "МетаданныеИОбработчики");
	
	ОткрытьФорму("Обработка.ЗагрузкаМетаданных.Форма.ЗагрузкаМетаданных", ПараметрыЗагрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОбработчкиОбновления(Команда)
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Проект", Объект.Владелец);
	ПараметрыЗагрузки.Вставить("Версия", Объект.Ссылка);
	ПараметрыЗагрузки.Вставить("Режим", "ТолькоОбработчики");
	
	ОткрытьФорму("Обработка.ЗагрузкаМетаданных.Форма.ЗагрузкаМетаданных", ПараметрыЗагрузки, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьХранилище(Команда)
	
	НомерВерсии = ?(ЗначениеЗаполнено(Объект.ПубликуемыйНомерВерсии), Объект.ПубликуемыйНомерВерсии, Объект.Код);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Объект.Владелец);
	ПараметрыФормы.Вставить("Версия", Объект.Ссылка);
	ПараметрыФормы.Вставить("РасположениеХранилища",       РасположениеХранилища);
	ПараметрыФормы.Вставить("ИмяПользователяХранилища",    Объект.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	ПараметрыФормы.Вставить("ПарольПользователяХранилища", Объект.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	ПараметрыФормы.Вставить("НомерВерсии",                 НомерВерсии);
	ПараметрыФормы.Вставить("КаталогИБ",                   Объект.КаталогИБДляЗагрузкиМетаданных);
	ПараметрыФормы.Вставить("ИмяПользователяИБ",           Объект.ИмяПользователяИБДляЗагрузкиМетаданных);
	ПараметрыФормы.Вставить("ПарольПользователяИБ",        Объект.ПарольПользователяИБДляЗагрузкиМетаданных);

	ОткрытьФорму("Обработка.СозданиеХранилища.Форма.ВерсииПроекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКХранилищу(Команда)
	
	ПараметрыФормы = Новый Структура("Хранилище", Объект.Ссылка);
	ОткрытьФорму("Обработка.ПодключениеБазыКХранилищу.Форма.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура СтатусТестов(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ветка) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана ветка разработки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
			"Ветка",
			"Объект");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка", 
		"СтатусПрохожденияТестовВВетке",
		Истина, 
		Истина, 
		Объект.Ветка); 
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВетку(Команда)
	СоздатьИВыбратьВетку();
КонецПроцедуры

&НаКлиенте
Процедура ЗаморозитьВетку(Команда)
	ЗаморозитьВеткуНаСервере();
	ОповеститьОбИзменении(Объект.Ветка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВерсииВключаемыхПроектов

&НаКлиенте
Процедура ВерсииВключаемыхПроектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ВерсииВключаемыхПроектовПроект" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("Ключ", Элементы.ВерсииВключаемыхПроектов.ТекущиеДанные.Проект);
		ОткрытьФорму("Справочник.Проекты.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли Поле.Имя = "ВерсииВключаемыхПроектовПоследняяСборка" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоследняяСборка = Элементы.ВерсииВключаемыхПроектов.ТекущиеДанные.ПоследняяСборка;
		Если Не ЗначениеЗаполнено(ПоследняяСборка) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", ПоследняяСборка);
		ОткрытьФорму("Справочник.СборкиВерсии.ФормаОбъекта", ПараметрыФормы);
		
	ИначеЕсли Поле.Имя = "ВерсииВключаемыхПроектовВстроеннаяСборка" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВстроеннаяСборка = Элементы.ВерсииВключаемыхПроектов.ТекущиеДанные.ВстроеннаяСборка;
		
		Если Не ЗначениеЗаполнено(ВстроеннаяСборка) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", ВстроеннаяСборка);
		ОткрытьФорму("Справочник.СборкиВерсии.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВерсииВключаемыхПроектовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбработатьИзменениеТаблицыВерсийСервер();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебыеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		Библиотека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Библиотека");
	Иначе
		Библиотека = Ложь;
	КонецЕсли;
	
	ЗаполнитьРеквизитыВетки();
	УстановитьДоступностьРасположенияХранилища(Элементы, Объект.Ветка.РежимРазработки, Объект.Ветка.Тип);
	
	СформироватьТекстИнформацииОбОкончанииПоддержки();
	УстановитьЗаголовокПоляВыпуск();
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Проект",Объект.Владелец));
	УстановитьВидимостьРеквизитовДляПроектовИБиблиотек();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВерсийПроектами()
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		ВерсииВключаемыхПроектов.Очистить();
		Возврат;
	КонецЕсли;
	
	ВключаемыеПроекты = ВключаемыеПроекты(Объект.Владелец);
	
	Для Каждого ВключаемыйПроект Из ВключаемыеПроекты Цикл
		
		НоваяСтрока = ВерсииВключаемыхПроектов.Добавить();
		НоваяСтрока.Проект = ВключаемыйПроект.Проект;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВерсииПоОбъекту()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия КАК Версия,
	|	МАКСИМУМ(СборкиВерсии.ДатаСборки) КАК ДатаСборки
	|ПОМЕСТИТЬ ВерсииДатыСборок
	|ИЗ
	|	Справочник.ВерсииПроекта.ВерсииВключаемыхПроектов КАК ВерсииПроектаВерсииВключаемыхПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО ВерсииПроектаВерсииВключаемыхПроектов.Версия = СборкиВерсии.Владелец
	|ГДЕ
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка = &Версия
	|	И НЕ СборкиВерсии.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииДатыСборок.Версия КАК Версия,
	|	МАКСИМУМ(СборкиВерсии.Ссылка) КАК ПоследняяСборка
	|ПОМЕСТИТЬ ПоследниеСборкиВстроенныхВерсий
	|ИЗ
	|	ВерсииДатыСборок КАК ВерсииДатыСборок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО ВерсииДатыСборок.ДатаСборки = СборкиВерсии.ДатаСборки
	|			И ВерсииДатыСборок.Версия = СборкиВерсии.Владелец
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииДатыСборок.Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия КАК Версия,
	|	ВерсииПроектаВерсииВключаемыхПроектов.Комментарий КАК Комментарий,
	|	ПоследниеСборкиВстроенныхВерсий.ПоследняяСборка КАК ПоследняяСборка
	|ПОМЕСТИТЬ ВерсииПоследниеСборки
	|ИЗ
	|	Справочник.ВерсииПроекта.ВерсииВключаемыхПроектов КАК ВерсииПроектаВерсииВключаемыхПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСборкиВстроенныхВерсий КАК ПоследниеСборкиВстроенныхВерсий
	|		ПО (ПоследниеСборкиВстроенныхВерсий.Версия = ВерсииПроектаВерсииВключаемыхПроектов.Версия)
	|ГДЕ
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка = &Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиВерсии.Владелец.Ссылка КАК ВладелецСсылка,
	|	МАКСИМУМ(СборкиВерсии.ДатаСборки) КАК ДатаСборки
	|ПОМЕСТИТЬ ПоследняяСборкаПоДате
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Владелец.Ссылка = &Версия
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкиВерсии.Владелец.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СборкиВерсии.Владелец.Ссылка КАК ВладелецСсылка,
	|	СборкиВерсии.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПоследняяСборкаВерсии
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследняяСборкаПоДате КАК ПоследняяСборкаПоДате
	|		ПО СборкиВерсии.ДатаСборки = ПоследняяСборкаПоДате.ДатаСборки
	|ГДЕ
	|	СборкиВерсии.Владелец = &Версия
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкиВерсии.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка.Владелец.Владелец.Ссылка КАК Проект,
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка КАК Сборка
	|ПОМЕСТИТЬ СборкиВерсииСборкиВключаемыхПроектов
	|ИЗ
	|	Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВерсииСборкиВключаемыхПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследняяСборкаВерсии КАК ПоследняяСборкаВерсии
	|		ПО СборкиВерсииСборкиВключаемыхПроектов.Ссылка = ПоследняяСборкаВерсии.Ссылка
	|ГДЕ
	|	СборкиВерсииСборкиВключаемыхПроектов.Ссылка.Владелец.Ссылка = &Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Проект КАК Проект,
	|	ВерсииПоследниеСборки.Версия КАК Версия,
	|	ВерсииПоследниеСборки.Комментарий КАК Комментарий,
	|	ВерсииПоследниеСборки.Версия.Владелец.Наименование КАК НаименованиеПроекта,
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка КАК ВстроеннаяСборка,
	|	ВерсииПоследниеСборки.ПоследняяСборка КАК ПоследняяСборка
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВерсииПоследниеСборки КАК ВерсииПоследниеСборки
	|		ПО ПроектыВключаемыеПроекты.Проект = ВерсииПоследниеСборки.Версия.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ СборкиВерсииСборкиВключаемыхПроектов КАК СборкиВерсииСборкиВключаемыхПроектов
	|		ПО ПроектыВключаемыеПроекты.Проект = СборкиВерсииСборкиВключаемыхПроектов.Проект
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Проект
	|	И (НЕ ПроектыВключаемыеПроекты.Проект.ПометкаУдаления
	|			ИЛИ НЕ ВерсииПоследниеСборки.Версия ЕСТЬ NULL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектыВключаемыеПроекты.Проект.Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект",      Объект.Владелец);
	Запрос.УстановитьПараметр("Версия",      Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ТаблицаВерсий = Запрос.Выполнить().Выгрузить();
	ВерсииВключаемыхПроектов.Загрузить(ТаблицаВерсий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследнююСборку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкиВерсии.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Ссылка.Владелец.Ссылка = &Версия
	|	И НЕ СборкиВерсии.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкиВерсии.ДатаСборки УБЫВ,
	|	СборкиВерсии.Ссылка УБЫВ";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Версия", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаНаПоследнююСборку = Выборка.Ссылка;
	КонецЕсли

КонецПроцедуры

&НаСервере
Функция ВключаемыеПроекты(ВключающийПроект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Проект КАК Проект,
	|	ПроектыВключаемыеПроекты.Проект.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Проект
	|	И НЕ ПроектыВключаемыеПроекты.Проект.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", ВключающийПроект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокПроектовСервер()
	
	МассивПроектов = МассивВключаемыхПроектов();
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаТаблицы из ВерсииВключаемыхПроектов Цикл
		Если МассивПроектов.Найти(СтрокаТаблицы.Проект) = Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
		ВерсииВключаемыхПроектов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого Проект Из МассивПроектов Цикл
		
		СтруктураОтбора = Новый Структура("Проект", Проект);
		МассивСтрок = ВерсииВключаемыхПроектов.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = ВерсииВключаемыхПроектов.Добавить();
			НоваяСтрока.Проект = Проект;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьКэшируемыеРеквизиты();
	УстановитьЗаголовокДекорацииСОписаниемПроблем();
	
КонецПроцедуры

&НаСервере
Функция МассивВключаемыхПроектов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Проект КАК Проект
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Проект"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Объект.Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	
КонецФункции

&НаСервере
Функция ДанныеОПроблемахБиблиотек(МассивВерсий)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВерсииПроекта.Владелец КАК ПроектБиблиотеки,
	|	ВерсииПроекта.Ссылка КАК ВерсияБиблиотеки,
	|	ВерсииПроекта.ПлановаяДатаВыпуска КАК ПлановаяДатаВыпускаВерсииБиблиотеки,
	|	ВерсииПроекта.ДатаПрекращенияПоддержки КАК ДатаПрекращенияПоддержкиВерсииБиблиотеки,
	|	ВерсииПроекта.ВерсияПлатформы КАК ВерсияПлатформыДляВерсииБиблиотеки
	|ПОМЕСТИТЬ ВТВерсииБиблиотек
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ссылка В(&МассивВерсий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииБиблиотек.ВерсияБиблиотеки КАК ВерсияБиблиотеки,
	|	ВерсииБиблиотек.ПроектБиблиотеки КАК ПроектБиблиотеки,
	|	ВерсииВключаемыеВВерсиюБиблиотеки.Ссылка КАК ВключающаяВерсия,
	|	ВерсииВключаемыеВВерсиюБиблиотеки.Ссылка.Владелец КАК ВключающийПроект,
	|	ВерсииВключаемыеВВерсиюБиблиотеки.Версия КАК ВерсияВключаемаяВБиблиотеку
	|ПОМЕСТИТЬ ВТКонфликтующиеБиблиотеки
	|ИЗ
	|	ВТВерсииБиблиотек КАК ВерсииБиблиотек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта.ВерсииВключаемыхПроектов КАК ВерсииВключаемыеВВерсиюБиблиотеки
	|		ПО ВерсииБиблиотек.ПроектБиблиотеки = ВерсииВключаемыеВВерсиюБиблиотеки.Версия.Владелец
	|			И (НЕ(ВерсииБиблиотек.ВерсияБиблиотеки.НомерРедакции = ВерсииВключаемыеВВерсиюБиблиотеки.Версия.НомерРедакции
	|					И ВерсииБиблиотек.ВерсияБиблиотеки.НомерПодредакции = ВерсииВключаемыеВВерсиюБиблиотеки.Версия.НомерПодредакции
	|					И ВерсииБиблиотек.ВерсияБиблиотеки.НомерВерсии >= ВерсииВключаемыеВВерсиюБиблиотеки.Версия.НомерВерсии))
	|          И ВерсииВключаемыеВВерсиюБиблиотеки.Ссылка В (&МассивВерсий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонфликтующиеБиблиотеки.ВключающаяВерсия КАК ВерсияБиблиотеки,
	|	КонфликтующиеБиблиотеки.ВключающийПроект КАК ПроектБиблиотеки,
	|	СУММА (1) КАК Конфликты
	|ПОМЕСТИТЬ ВТНаличиеКонфликтовБиблиотек
	|ИЗ
	|	ВТКонфликтующиеБиблиотеки КАК КонфликтующиеБиблиотеки
	|
	|СГРУППИРОВАТЬ ПО
	|	КонфликтующиеБиблиотеки.ВключающаяВерсия,
	|	КонфликтующиеБиблиотеки.ВключающийПроект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииБиблиотек.ВерсияБиблиотеки КАК ВерсияБиблиотеки,
	|	ВерсииБиблиотек.ВерсияПлатформыДляВерсииБиблиотеки КАК ВерсияПлатформыДляВерсииБиблиотеки,
	|	ВерсииБиблиотек.ПроектБиблиотеки КАК ПроектБиблиотеки,
	|	МАКСИМУМ(ВерсииПроекта.ПлановаяДатаВыпуска) КАК ПлановаяДатаВыпуска
	|ПОМЕСТИТЬ ВТДатыПоследнихВерсийБиблиотек
	|ИЗ
	|	ВТВерсииБиблиотек КАК ВерсииБиблиотек
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ПО ВерсииБиблиотек.ПроектБиблиотеки = ВерсииПроекта.Владелец
	|			И (ВерсииПроекта.ПлановаяДатаВыпуска <= &ДатаВключенияБиблиотек)
	|			И (ВерсииПроекта.ВерсияПлатформы = ВерсииБиблиотек.ВерсияПлатформыДляВерсииБиблиотеки)
	|			И (НЕ ВерсииПроекта.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииБиблиотек.ВерсияБиблиотеки,
	|	ВерсииБиблиотек.ВерсияПлатформыДляВерсииБиблиотеки,
	|	ВерсииБиблиотек.ПроектБиблиотеки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихВерсийБиблиотек.ВерсияБиблиотеки КАК ВерсияБиблиотеки,
	|	ДатыПоследнихВерсийБиблиотек.ПлановаяДатаВыпуска КАК ПлановаяДатаВыпуска,
	|	МАКСИМУМ(ВерсииПроекта.Ссылка) КАК ПоследняяВерсияБиблиотеки
	|ПОМЕСТИТЬ ВТПоследниеВерсииБиблиотек
	|ИЗ
	|	ВТДатыПоследнихВерсийБиблиотек КАК ДатыПоследнихВерсийБиблиотек
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ПО ДатыПоследнихВерсийБиблиотек.ПроектБиблиотеки = ВерсииПроекта.Владелец
	|			И ДатыПоследнихВерсийБиблиотек.ПлановаяДатаВыпуска = ВерсииПроекта.ПлановаяДатаВыпуска
	|			И ДатыПоследнихВерсийБиблиотек.ВерсияПлатформыДляВерсииБиблиотеки = ВерсииПроекта.ВерсияПлатформы
	|			И (НЕ ВерсииПроекта.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихВерсийБиблиотек.ВерсияБиблиотеки,
	|	ДатыПоследнихВерсийБиблиотек.ПлановаяДатаВыпуска
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииБиблиотек.ВерсияБиблиотеки КАК ВерсияБиблиотеки,
	|	ВерсииБиблиотек.ПроектБиблиотеки КАК ПроектБиблиотеки,
	|	ВерсииБиблиотек.ПлановаяДатаВыпускаВерсииБиблиотеки КАК ПлановаяДатаВыпускаВерсииБиблиотеки,
	|	ВерсииБиблиотек.ДатаПрекращенияПоддержкиВерсииБиблиотеки КАК ДатаПрекращенияПоддержкиВерсииБиблиотеки,
	|	ВерсииБиблиотек.ВерсияПлатформыДляВерсииБиблиотеки КАК ВерсияПлатформыДляВерсииБиблиотеки,
	|	ВЫБОР
	|		КОГДА НаличиеКонфликтовБиблиотек.Конфликты > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьКонфликтыБиблиотек,
	|	ПоследниеВерсииБиблиотек.ПлановаяДатаВыпуска КАК ПлановаяДатаВыпускаПоследнейВерсииБиблиотеки,
	|	ПоследниеВерсииБиблиотек.ПоследняяВерсияБиблиотеки КАК ПоследняяВерсияБиблиотеки
	|ИЗ
	|	ВТВерсииБиблиотек КАК ВерсииБиблиотек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоследниеВерсииБиблиотек КАК ПоследниеВерсииБиблиотек
	|		ПО ВерсииБиблиотек.ВерсияБиблиотеки = ПоследниеВерсииБиблиотек.ВерсияБиблиотеки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНаличиеКонфликтовБиблиотек КАК НаличиеКонфликтовБиблиотек
	|		ПО ВерсииБиблиотек.ВерсияБиблиотеки = НаличиеКонфликтовБиблиотек.ВерсияБиблиотеки"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивВерсий", МассивВерсий);
	Запрос.УстановитьПараметр("ДатаВключенияБиблиотек", Объект.ДатаВключенияБиблиотек);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоответствиеДляБиблиотек = Новый Соответствие;
	
	ТекущаяДата = ТекущаяДата();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонфликтующиеБиблиотеки = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТКонфликтующиеБиблиотеки"].ПолучитьДанные().Выгрузить();
	
	Пока Выборка.Следующий() Цикл
		
		НеЗаполненаДатаВыпускаБиблиотеки = Ложь;
		ВключенаНеПоследняяВерсияБиблиотеки = Ложь;
		ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек = Ложь;
		ДатаПрекращенияПоддержкиБиблиотекиРанее = Ложь;
		РазныеВерсииПлатформы = Ложь;
		КонфликтуютВерсииБиблиотеки = Ложь;
		
		СтруктураИнформацииПоБиблиотеке = Новый Структура;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ПлановаяДатаВыпускаВерсииБиблиотеки) Тогда
			НеЗаполненаДатаВыпускаБиблиотеки = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ПлановаяДатаВыпускаВерсииБиблиотеки)
			И ЗначениеЗаполнено(Выборка.ПлановаяДатаВыпускаПоследнейВерсииБиблиотеки)
			И ЗначениеЗаполнено(Объект.ДатаВключенияБиблиотек)
			И Выборка.ПлановаяДатаВыпускаВерсииБиблиотеки <> Выборка.ПлановаяДатаВыпускаПоследнейВерсииБиблиотеки Тогда
			ВключенаНеПоследняяВерсияБиблиотеки = Истина;
		КонецЕсли;
		
		Если Выборка.ПлановаяДатаВыпускаВерсииБиблиотеки > Объект.ДатаВключенияБиблиотек
			И Объект.ДатаВключенияБиблиотек >= НачалоДня(ТекущаяДата) Тогда
			ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек = Истина;
		КонецЕсли;
		
		Если Выборка.ДатаПрекращенияПоддержкиВерсииБиблиотеки < Объект.ДатаПрекращенияПоддержки
			И ЗначениеЗаполнено(Выборка.ДатаПрекращенияПоддержкиВерсииБиблиотеки) ТОГДА
			ДатаПрекращенияПоддержкиБиблиотекиРанее = Истина;
		КонецЕсли;
		
		Если Выборка.ВерсияПлатформыДляВерсииБиблиотеки <> Объект.ВерсияПлатформы Тогда
			РазныеВерсииПлатформы = Истина;
		КонецЕсли;
		
		Если Выборка.ЕстьКонфликтыБиблиотек Тогда
			КонфликтуютВерсииБиблиотеки = Истина;
		КонецЕсли;
		
		ОписаниеПроблем = "";
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НеЗаполненаДатаВыпускаБиблиотеки", НеЗаполненаДатаВыпускаБиблиотеки);
		ДополнительныеПараметры.Вставить("ВключенаНеПоследняяВерсияБиблиотеки", ВключенаНеПоследняяВерсияБиблиотеки);
		ДополнительныеПараметры.Вставить("ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек", ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек);
		ДополнительныеПараметры.Вставить("РазныеВерсииПлатформы", РазныеВерсииПлатформы);
		ДополнительныеПараметры.Вставить("ДатаПрекращенияПоддержкиБиблиотекиРанее", ДатаПрекращенияПоддержкиБиблиотекиРанее);
		ДополнительныеПараметры.Вставить("КонфликтуютВерсииБиблиотеки", КонфликтуютВерсииБиблиотеки);
		
		ИмеютсяПроблемы = ИмеютсяПроблемыПоБиблиотеке(ОписаниеПроблем, Выборка, КонфликтующиеБиблиотеки, ДополнительныеПараметры);
											
		СтруктураИнформацииПоБиблиотеке.Вставить("НаличиеПроблем", ИмеютсяПроблемы);
		СтруктураИнформацииПоБиблиотеке.Вставить("ОписаниеПроблем", ОписаниеПроблем);
		
		СоответствиеДляБиблиотек.Вставить(Выборка.ВерсияБиблиотеки, СтруктураИнформацииПоБиблиотеке);
		
	КонецЦикла;
	
	Возврат СоответствиеДляБиблиотек;
	
КонецФункции

&НаСервере
Функция ИмеютсяПроблемыПоБиблиотеке(ОписаниеПроблем, СтрокаВыборки, КонфликтующиеБиблиотеки, ДополнительныеПараметры)
	
	ИмеютсяПроблемы = Ложь;
	
	ТекстВключаемыйПроект = СОКРЛП(Строка(СтрокаВыборки.ПроектБиблиотеки));
	ТекстВключаемаяВерсия = СОКРЛП(Строка(СтрокаВыборки.ВерсияБиблиотеки));
	
	Если ДополнительныеПараметры.НеЗаполненаДатаВыпускаБиблиотеки Тогда
		ТекстПроблемы = НСтр("ru='Не указана дата выпуска используемой библиотеки %ВключаемыйПроект% %ВключаемаяВерсия%'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		ИмеютсяПроблемы = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВключенаНеПоследняяВерсияБиблиотеки
		И НЕ ДополнительныеПараметры.ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек Тогда
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, НСтр("ru='В версию конфигурации включена не последняя версия библиотеки'"));
		
		Если ЗначениеЗаполнено(СтрокаВыборки.ПоследняяВерсияБиблиотеки) Тогда
			
			НомерВерсии = Строка(СтрокаВыборки.ПоследняяВерсияБиблиотеки);
			
			ОписаниеПроблем = ОписаниеПроблем + " (" + НомерВерсии + НСтр("ru=' выпуск '")
							  + Формат(СтрокаВыборки.ПлановаяДатаВыпускаПоследнейВерсииБиблиотеки, "ДФ=дд.ММ.гг") + ")";
			
		КонецЕсли;
						  
		ИмеютсяПроблемы = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек Тогда
		
		ТекстПроблемы = НСтр("ru='Дата выпуска %ВключаемыйПроект% %ВключаемаяВерсия% %ДатаВыпуска% позже срока включения библиотек в версию конфигурации%СрокВключенияБиблиотек%'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		
		Если ЗначениеЗаполнено(Объект.ДатаВключенияБиблиотек) Тогда
			ТекстСрокВключенияБиблиотек = "(" + Формат(Объект.ДатаВключенияБиблиотек, "ДФ=дд.ММ.гг") + ")";
		Иначе
			ТекстСрокВключенияБиблиотек = "";
		КонецЕсли;
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ДатаВыпуска%", "(" + Формат(СтрокаВыборки.ПлановаяДатаВыпускаВерсииБиблиотеки, "ДФ=дд.ММ.гг") + ")");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%СрокВключенияБиблиотек%", ТекстСрокВключенияБиблиотек);
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		ИмеютсяПроблемы = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ДатаПрекращенияПоддержкиБиблиотекиРанее Тогда
		
		ТекстПроблемы = НСтр("ru='Дата окончания поддержки %ВключаемыйПроект% %ВключаемаяВерсия% %ДатаОкончанияПоддержкиВерсииБиблиотеки% ранее даты окончания поддержки версии конфигурации %ДатаОкончанияПоддержкиВерсииКонфигурации%'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		
		Если ЗначениеЗаполнено(СтрокаВыборки.ДатаПрекращенияПоддержкиВерсииБиблиотеки) Тогда
			ТекстДатаОкончанияПоддержкиВерсииБиблиотеки = "(" + Формат(СтрокаВыборки.ДатаПрекращенияПоддержкиВерсииБиблиотеки, "ДФ=дд.ММ.гг") + ")";
		Иначе
			ТекстДатаОкончанияПоддержкиВерсииБиблиотеки = "";
		КонецЕсли;
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ДатаОкончанияПоддержкиВерсииБиблиотеки%", ТекстДатаОкончанияПоддержкиВерсииБиблиотеки);
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ДатаОкончанияПоддержкиВерсииКонфигурации%", "(" + Формат(Объект.ДатаПрекращенияПоддержки, "ДФ=дд.ММ.гг") + ")");
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		ИмеютсяПроблемы = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.РазныеВерсииПлатформы Тогда
		
		ТекстПроблемы = НСтр("ru='Для версии конфигурации и %ВключаемыйПроект% %ВключаемаяВерсия% указаны разные версии платформы (%ВерсияПлатформыДляКонфигурации%, %ВерсияПлатформыДляБиблиотеки%)'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияПлатформыДляКонфигурации%", СОКРЛП(Строка(Объект.ВерсияПлатформы)));
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияПлатформыДляБиблиотеки%",   СОКРЛП(Строка(СтрокаВыборки.ВерсияПлатформыДляВерсииБиблиотеки)));
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		ИмеютсяПроблемы = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.КонфликтуютВерсииБиблиотеки Тогда
		
		СтрокаУточнения = "";
		СтруктураОтбора = Новый Структура("ВключающаяВерсия", СтрокаВыборки.ВерсияБиблиотеки);
		МассивСтрок = КонфликтующиеБиблиотеки.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаТаблицы из МассивСтрок Цикл
			
			Если ЗначениеЗаполнено(СтрокаУточнения) Тогда
				СтрокаУточнения = СтрокаУточнения + Символы.ПС;
			КонецЕсли;
			
			ИнформацияОКонфликте = СОКРЛП(Строка(СтрокаТаблицы.ПроектБиблиотеки))
			    + " (" + СОКРЛП(Строка(СтрокаТаблицы.ВерсияБиблиотеки))
				+ ", " + СОКРЛП(Строка(СтрокаТаблицы.ВерсияВключаемаяВБиблиотеку)) + ")";
				
			СтрокаУточнения = СтрокаУточнения + ИнформацияоКонфликте;
		КонецЦикла;
		
		СтрокаОписания = НСтр("ru='Несовместимы версии библиотек, включаемых в конфигурацию и %ПроектБиблиотеки% %ВерсияБиблиотеки%'");
		СтрокаОписания = СтрЗаменить(Строкаописания, "%ПроектБиблиотеки%", СокрЛП(Строка(СтрокаТаблицы.ВключающийПроект)));
		СтрокаОписания = СтрЗаменить(Строкаописания, "%ВерсияБиблиотеки%", СокрЛП(Строка(СтрокаТаблицы.ВключающаяВерсия)));
		
		Если ЗначениеЗаполнено(СтрокаУточнения) Тогда
			СтрокаОписания = СтрокаОписания + ":" + Символы.ПС + СтрокаУточнения;
		КонецЕсли;
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, СтрокаОписания);
		ИмеютсяПроблемы = Истина;
	КонецЕсли;
	
	Возврат ИмеютсяПроблемы;
	
КонецФункции

&НаСервере
Процедура СформироватьОписаниеПроблем(ПолноеОписаниеПроблем, ОписаниеПроблемы)
	
	Если ЗначениеЗаполнено(ПолноеОписаниеПроблем) Тогда
		ПолноеОписаниеПроблем = ПолноеОписаниеПроблем + Символы.ПС;
	КонецЕсли;
	
	ПолноеОписаниеПроблем = ПолноеОписаниеПроблем + ОписаниеПроблемы;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшируемыеРеквизиты()
	
	МассивВерсий = ВерсииВключаемыхПроектов.Выгрузить().ВыгрузитьКолонку("Версия");
	
	СоответствиеДанных = ДанныеОПроблемахБиблиотек(МассивВерсий);
	
	Для Каждого СтрокаТаблицы из ВерсииВключаемыхПроектов Цикл
		
		СтруктураИнформации = СоответствиеДанных.Получить(СтрокаТаблицы.Версия);
		
		Если СтруктураИнформации <> Неопределено Тогда
			СтрокаТаблицы.ОписаниеПроблем = СтруктураИнформации.ОписаниеПроблем;
		Иначе
			СтрокаТаблицы.ОписаниеПроблем = "";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВладельцаСервер()
	
	Библиотека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Библиотека");
	
	ЗаполнитьВерсииПоОбъекту();
	ЗаполнитьКэшируемыеРеквизиты();
	УстановитьЗаголовокДекорацииСОписаниемПроблем();
	СформироватьТекстИнформацииОбОкончанииПоддержки();
	УстановитьДоступностьЭлементовХранилищаИВетокПоЗначениямРеквизитов();
	УстановитьЗаголовокПоляВыпуск();
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьРеквизитовДляПроектовИБиблиотек();
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Проект",Объект.Владелец));
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПослеЗаписиСервер()
	
	ЗаполнитьКэшируемыеРеквизиты();
	УстановитьЗаголовокДекорацииСОписаниемПроблем();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТаблицыВерсийСервер()
	
	ЗаполнитьКэшируемыеРеквизиты();
	УстановитьЗаголовокДекорацииСОписаниемПроблем();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДекорацииСОписаниемПроблем()
	
	ИмеютсяНесоответствия = Ложь;
	
	МассивПроектов = СписокВключаемыхПроектов();
	
	Для Каждого СтрокаТаблицы из ВерсииВключаемыхПроектов Цикл
		
		ИндексЭлемента = МассивПроектов.Найти(СтрокаТаблицы.Проект);
		
		Если ИндексЭлемента = Неопределено Тогда
			ИмеютсяНесоответствия = Истина;
			Прервать;
		Иначе
			МассивПроектов.Удалить(ИндексЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПроектов.Количество()<>0 Тогда
		ИмеютсяНесоответствия = Истина;
	КонецЕсли;
	
	Если ИмеютсяНесоответствия Тогда
		ТекстОписания = НСтр("ru='Список указанных для версии используемых библиотек не соответствует настройкам проекта.
							  |Следует обновить список библиотек и указать соответствующие версии.'");
		Элементы.ДекорацияОписаниеПроблем.Заголовок = ТекстОписания;
		Элементы.ДекорацияОписаниеПроблем.Видимость = Истина;
		
	Иначе
		Элементы.ДекорацияОписаниеПроблем.Заголовок = "";
		Элементы.ДекорацияОписаниеПроблем.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокВключаемыхПроектов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Владелец) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыВключаемыеПроекты.Проект КАК Проект
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Владелец);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
	
КонецФункции

&НаСервере
Функция ПоследниеВерсииВключаемыхБиблиотек()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВерсииПроекта.ПлановаяДатаВыпуска) КАК ПлановаяДатаВыпуска,
	|	ВерсииПроекта.Владелец КАК Проект
	|ПОМЕСТИТЬ ВТДатыПоследнихВерсий
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	НЕ ВерсииПроекта.ПометкаУдаления
	|	И ВерсииПроекта.Владелец В(&СписокБиблиотек)
	|	И ВерсииПроекта.ПлановаяДатаВыпуска <= &ДатаВключенияБиблиотек
	|	И ВерсииПроекта.ПлановаяДатаВыпуска <> ДАТАВРЕМЯ(1, 1, 1)
	|   И ВерсииПроекта.ВерсияПлатформы = &ВерсияПлатформы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииПроекта.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыПоследнихВерсий.Проект КАК Проект,
	|	МАКСИМУМ(ВерсииПроекта.Ссылка) КАК Версия
	|ИЗ
	|	ВТДатыПоследнихВерсий КАК ДатыПоследнихВерсий
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ПО ДатыПоследнихВерсий.Проект = ВерсииПроекта.Владелец
	|       И ВерсииПроекта.ПлановаяДатаВыпуска = ДатыПоследнихВерсий.ПлановаяДатаВыпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихВерсий.Проект"
	;
	
	СписокВключаемыхБиблиотек = ВерсииВключаемыхПроектов.Выгрузить().ВыгрузитьКолонку("Проект");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокБиблиотек", СписокВключаемыхБиблиотек);
	Запрос.УстановитьПараметр("ДатаВключенияБиблиотек", Объект.ДатаВключенияБиблиотек);
	Запрос.УстановитьПараметр("ВерсияПлатформы", Объект.ВерсияПлатформы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ОбновитьВерсииБиблиотекСервер()
	
	ТаблицаВерсий = ПоследниеВерсииВключаемыхБиблиотек();
	
	ЕстьИзменения = Ложь;
	
	Для Каждого СтрокаТаблицы из ВерсииВключаемыхПроектов Цикл
		
		СтруктураОтбора = Новый Структура("Проект", СтрокаТаблицы.Проект);
		МассивСтрок = ТаблицаВерсий.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество()>0 Тогда
			
			НайденнаяСтрока = МассивСтрок[0];
			
			Если НайденнаяСтрока.Версия <> СтрокаТаблицы.Версия Тогда
				СтрокаТаблицы.Версия = НайденнаяСтрока.Версия;
				ЕстьИзменения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ЗаполнитьКэшируемыеРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДатаВыпускаСледущейВерсии()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииПроекта.ПлановаяДатаВыпуска КАК ПлановаяДатаВыпуска
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	НЕ ВерсииПроекта.ПометкаУдаления
	|	И ВерсииПроекта.Владелец = &Владелец
	|	И ВерсииПроекта.ПорядковыйНомер > &ПорядковыйНомерВерсии
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ПорядковыйНомер"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	Запрос.УстановитьПараметр("ПорядковыйНомерВерсии", Объект.ПорядковыйНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Датавыпуска = Выборка.ПлановаяДатаВыпуска;
	Иначе
		ДатаВыпуска = '00010101';
	КонецЕсли;
	
	Возврат ДатаВыпуска;
	
КонецФункции

&НаСервере
функция ИнформацияОПоследнейВерсииИспользующейБиблиотеку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка.ДатаПрекращенияПоддержки КАК ДатаПрекращенияПоддержки,
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка КАК Версия,
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка.Владелец КАК Проект,
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка.Код КАК НомерВерсии,
	|	ВерсииПроектаВерсииВключаемыхПроектов.Ссылка.ПубликуемыйНомерВерсии КАК ПубликуемыйНомерВерсии
	|ИЗ
	|	Справочник.ВерсииПроекта.ВерсииВключаемыхПроектов КАК ВерсииПроектаВерсииВключаемыхПроектов
	|ГДЕ
	|	ВерсииПроектаВерсииВключаемыхПроектов.Версия = &Ссылка
	|	И НЕ ВерсииПроектаВерсииВключаемыхПроектов.Ссылка.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПрекращенияПоддержки УБЫВ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураИнформации = Новый Структура;
	
	СтруктураИнформации.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	СтруктураИнформации.Вставить("Версия", Справочники.ВерсииПроекта.ПустаяСсылка());
	СтруктураИнформации.Вставить("НомерВерсии", "");
	СтруктураИнформации.Вставить("ДатаПрекращенияПоддержки", '00010101');

	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ПубликуемыйНомерВерсии) Тогда
			НомерВернсии = Выборка.ПубликуемыйНомерВерсии;
		Иначе
			НомерВернсии = Выборка.НомерВерсии;
		КонецЕсли;
		
		СтруктураИнформации.Вставить("Проект",Выборка.Проект);
		СтруктураИнформации.Вставить("Версия", Выборка.Версия);
		СтруктураИнформации.Вставить("НомерВерсии", Выборка.НомерВерсии);
		СтруктураИнформации.Вставить("ДатаПрекращенияПоддержки", Выборка.ДатаПрекращенияПоддержки);
		
	КонецЕсли;
	
	Возврат СтруктураИнформации;
	
КонецФункции

&НаСервере
Процедура СформироватьТекстИнформацииОбОкончанииПоддержки()
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПрекращенияПоддержки) Тогда
		Элементы.ДекорацияИнформацияОбОкончанииПоддержки.Заголовок = "";
		Возврат;
	КонецЕсли;
	
	ДатаВыпускаСледующейВерсии = ДатаВыпускаСледущейВерсии();
	
	Если Объект.ДатаПрекращенияПоддержки < ДатаВыпускаСледующейВерсии Тогда
		
		ТекстДекорации = НСтр("ru='Дата прекращения поддержки ранее даты выпуска следующей версии (%Дата%)'");
						
		ТекстДекорации = СтрЗаменить(ТекстДекорации, "%Дата%", Формат(ДатаВыпускаСледующейВерсии, "ДФ=дд.ММ.гг"));
		
	ИначеЕсли Библиотека Тогда
		
	    СтруктураИнформации = ИнформацияОПоследнейВерсииИспользующейБиблиотеку();
		
		Если Объект.ДатаПрекращенияПоддержки < СтруктураИнформации.ДатаПрекращенияПоддержки Тогда
			
			ТекстДекорации = НСтр("ru='Дата прекращения поддержки ранее даты прекращения поддержки
							|версии, включающей библиотеку: %Проект% %Версия% %Дата%'");
							
			ТекстДекорации = СтрЗаменить(ТекстДекорации, "%Проект%", СтруктураИнформации.Проект);
			ТекстДекорации = СтрЗаменить(ТекстДекорации, "%Версия%", СтруктураИнформации.НомерВерсии);
			ТекстДекорации = СтрЗаменить(ТекстДекорации, "%Дата%", Формат(СтруктураИнформации.ДатаПрекращенияПоддержки, "ДФ=дд.ММ.гг"));
			
		Иначе
			ТекстДекорации = "";
		КонецЕсли;
		
	Иначе
		ТекстДекорации = "";
	КонецЕсли;
	
	Элементы.ДекорацияИнформацияОбОкончанииПоддержки.Заголовок = ТекстДекорации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОкончанияПоддержкиСервер()
	
	ДатаВыпускаСледующейВерсии = ДатаВыпускаСледущейВерсии();
	
	Если Библиотека Тогда
		СтруктураИнформации = ИнформацияОПоследнейВерсииИспользующейБиблиотеку();
		
		Если СтруктураИнформации.ДатаПрекращенияПоддержки > ДатаВыпускаСледующейВерсии Тогда
			Объект.ДатаПрекращенияПоддержки = СтруктураИнформации.ДатаПрекращенияПоддержки;
		Иначе
			Объект.ДатаПрекращенияПоддержки = ДатаВыпускаСледующейВерсии;
		КонецЕсли;
	Иначе
		Объект.ДатаПрекращенияПоддержки = ДатаВыпускаСледующейВерсии;
	КонецЕсли;
	
	СформироватьТекстИнформацииОбОкончанииПоддержки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовХранилищаИВетокПоЗначениямРеквизитов()
	
	ВестиОбработчики = ПолучитьФункциональнуюОпцию("ВестиОписанияОбработчиковОбновленияИнформационнойБазы", Новый Структура("Проект", Объект.Владелец));
	
	ЕстьВерсииВключаемыхПроектов  = Объект.ВерсииВключаемыхПроектов.Количество() > 0;
	ДоступностьЭлементовОтдельногоХранилища = Объект.Ветка.РежимРазработки = Перечисления.РежимРазработки.ВХранилище
											И Объект.Ветка.Тип = Перечисления.ТипыВеток.ВеткаВерсии;
	
	ПравоРедактированияВерсий     = ПравоДоступа("Редактирование", Метаданные.Справочники.ВерсииПроекта);
	Элементы.ГруппаОтдельноеХранилище.Видимость = ДоступностьЭлементовОтдельногоХранилища;
	Элементы.СоздатьХранилище.Доступность                                      = ДоступностьЭлементовОтдельногоХранилища И ПравоРедактированияВерсий;
	
	Элементы.ИмяПользователяХранилищаДляЗагрузкиМетаданных.Видимость         = ВестиОбработчики ИЛИ ЕстьВерсииВключаемыхПроектов;
	Элементы.ПарольПользователяХранилищаДляЗагрузкиМетаданных.Видимость      = ВестиОбработчики ИЛИ ЕстьВерсииВключаемыхПроектов;
	Элементы.КаталогИБДляЗагрузкиМетаданных.Видимость                        = ВестиОбработчики ИЛИ ЕстьВерсииВключаемыхПроектов;
	Элементы.ИмяПользователяИБДляЗагрузкиМетаданных.Видимость                = ВестиОбработчики ИЛИ ЕстьВерсииВключаемыхПроектов;
	Элементы.ПарольПользователяИБДляЗагрузкиМетаданных.Видимость             = ВестиОбработчики ИЛИ ЕстьВерсииВключаемыхПроектов;
	Элементы.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных.Видимость = ВестиОбработчики ИЛИ ЕстьВерсииВключаемыхПроектов;
	
	Элементы.ФормаЗагрузитьМетаданныеИОбработчикиОбновления.Видимость = Объект.Ветка.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта;
	
	Если ВестиОбработчики Тогда
		Элементы.ФормаЗагрузитьМетаданныеИОбработчикиОбновления.Заголовок = НСтр("ru = 'Загрузить метаданные и обработчики обновления'");
	Иначе
		Элементы.ФормаЗагрузитьМетаданныеИОбработчикиОбновления.Заголовок = НСтр("ru = 'Загрузить метаданные'");
	КонецЕсли;
	
	Если ЕстьВерсииВключаемыхПроектов И ВестиОбработчики Тогда
		Элементы.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных.Заголовок = НСтр("ru = 'Обновлять конфигурацию из хранилища при загрузке информации по встроенным сборкам и обработчика обновления'")
	ИначеЕсли ЕстьВерсииВключаемыхПроектов И НЕ ВестиОбработчики Тогда
		Элементы.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных.Заголовок = НСтр("ru = 'Обновлять конфигурацию из хранилища при загрузке информации по встроенным сборкам'")
	ИначеЕсли НЕ ЕстьВерсииВключаемыхПроектов И ВестиОбработчики Тогда
		Элементы.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных.Заголовок = НСтр("ru = 'Обновлять конфигурацию из хранилища при загрузке информации по обработчика обновления'")
	КонецЕсли;
	
	Элементы.ФормаЗагрузитьОбработчкиОбновления.Видимость = ДоступностьЭлементовОтдельногоХранилища И ВестиОбработчики;
	
	Элементы.ГруппаОтличияВМетаданных.Видимость = ДоступностьЭлементовОтдельногоХранилища И ВестиОбработчики;

	ЗаполнитьРеквизитыВетки();
	
	СтатусВетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ветка, "Статус");
	Если НЕ ЗначениеЗаполнено(Объект.Ветка) ИЛИ ТипВетки = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
		Элементы.ГруппаДействияСВетками.ТекущаяСтраница = Элементы.ГруппаСоздатьВетку;
		Элементы.СоздатьВетку.Доступность = ПравоРедактированияВерсий;
	Иначе
		Элементы.ГруппаДействияСВетками.ТекущаяСтраница = Элементы.ГруппаЗаморозитьВетку;
		Элементы.ЗаморозитьВетку.Видимость = СтатусВетки <> Перечисления.СтатусыВеток.Заморожена; 
		Элементы.ЗаморозитьВетку.Доступность = ПравоРедактированияВерсий;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПоследнююСборкуВерсии(Версия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Версия",      Версия);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СборкиВерсии.Ссылка
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Владелец = &Версия
	|	И СборкиВерсии.ДатаСборки <= &ТекущаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкиВерсии.ДатаСборки УБЫВ,
	|	Ссылка УБЫВ";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьХранилище(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСозданияВетки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьИВыбратьВетку(Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбновленияИмениВетки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьИмяВетки(Объект.Ветка, Параметры.Имя);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИмяВетки(Ветка, Имя)
	
	ВеткаОбъект = Ветка.ПолучитьОбъект();
	ВеткаОбъект.Имя = Имя; 
	ВеткаОбъект.Записать();
	ЗаполнитьРеквизитыВетки();

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокПоляВыпуск()
	
	Если Библиотека Тогда
		Элементы.ПлановаяДатаВыпуска.Заголовок = НСтр("ru='Выпуск (готовность к встраиванию в конфигурации)'");
	Иначе
		Элементы.ПлановаяДатаВыпуска.Заголовок = НСтр("ru='Выпуск'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовДляПроектовИБиблиотек()
	
	Элементы.ДатаГотовностиКПредварительномуВстраиванию.Видимость = Библиотека;
	Элементы.ДатаНачалаВнешнегоТестирования.Видимость = Не Библиотека;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименованиеПоНомерам()
	
	Объект.Код = Строка(Объект.НомерРедакции) + "." + Строка(Объект.НомерПодредакции) + "." + Строка(Объект.НомерВерсии);
	
КОнецПроцедуры

&НаСервере
Процедура ЗаморозитьВеткуНаСервере()
	ВеткаОбъект = Объект.Ветка.ПолучитьОбъект();
	ВеткаОбъект.Статус = Перечисления.СтатусыВеток.Заморожена; 
	ВеткаОбъект.Записать();
	УстановитьДоступностьЭлементовХранилищаИВетокПоЗначениямРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИВыбратьВетку(Параметры=Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	Параметры.Вставить("РазрабатываемыйОбъект", Объект);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, РежимВыбора", Параметры, Истина);

	ОткрытьФорму(
		"Справочник.Ветки.ФормаОбъекта",
		ПараметрыФормы, 
		Элементы.Ветка,
		Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыВетки()
	
	РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ветка, "РежимРазработки, Тип, Имя");
	РежимРазработкиВетки = РеквизитыВетки.РежимРазработки;
	ТипВетки = РеквизитыВетки.Тип;
	РасположениеХранилища = ?(РеквизитыВетки.РежимРазработки = Перечисления.РежимРазработки.ВХранилище, РеквизитыВетки.Имя, "");
	
КонецПроцедуры

#КонецОбласти