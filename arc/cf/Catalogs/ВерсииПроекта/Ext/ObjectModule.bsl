#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		Владелец = Проекты.ПроектПоУмолчанию();
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		КонецЕсли;
		
		ПорядковыйНомер = Справочники.ВерсииПроекта.ОчереднойПорядковыйНомерВерсии(Владелец);
		
		СоставляющиеНомера = СоставляющиеНомераПоследнейВерсии();
		НомерРедакции    = СоставляющиеНомера.НомерРедакции;
		НомерПодредакции = СоставляющиеНомера.НомерПодредакции;
		НомерВерсии      = СоставляющиеНомера.НомерВерсии + 1;
		Ветка            = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "Ветка");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если ЗначениеЗаполнено(ДатаОкончанияРазработки) И ДатаНачалаРазработки > ДатаОкончанияРазработки Тогда
		ТекстСообщения = НСтр("ru='Неверно указаны даты начала и окончания разработки'");
		Сообщить(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончанияРазработки) И ЗначениеЗаполнено(ПлановаяДатаВыпуска)
		И ДатаОкончанияРазработки > ПлановаяДатаВыпуска Тогда
		ТекстСообщения = НСтр("ru='Неверно указаны даты окончания разработки и выпуска'");
		Сообщить(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	ПроверитьНаличиеДублейНомераВерсии(Отказ);
	
	Если НЕ ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных 
		ИЛИ Ветка.РежимРазработки <> Перечисления.РежимРазработки.ВХранилище Тогда
		НепроверяемыеРеквизиты.Добавить("ИмяПользователяХранилищаДляЗагрузкиМетаданных");
	КонецЕсли;
	
	Если НепроверяемыеРеквизиты.Количество()>0 Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ПорядковыйНомер = Справочники.ВерсииПроекта.ОчереднойПорядковыйНомерВерсии(Владелец);
	
	ДополнительныеРеквизиты.Очистить();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		СтрокаРеквизитов = "ДатаНачалаРазработки";
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтрокаРеквизитов);
		ДатаНачалаРазработкиДоЗаписи = РеквизитыСсылки.ДатаНачалаРазработки;
		ДополнительныеСвойства.Вставить("ДатаНачалаРазработкиДоЗаписи", ДатаНачалаРазработкиДоЗаписи);
	КонецЕсли;
	
	Если Ветка.Тип = Перечисления.ТипыВеток.ВеткаВерсии Тогда
		ОтличияВИменахМетаданных.Очистить();
		ОтличияВСоставеПодсистем.Очистить();
	КонецЕсли;
	
	КоллекцияИзмененныхОбъектов = Новый Массив;
	ДополнительныеСвойства.Вставить("КоллекцияИзмененныхОбъектов", КоллекцияИзмененныхОбъектов);
	Версионирование.ЗарегистрироватьИзмененияОбъекта(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// При изменении даты начала разработки в ошибках может потребоваться
	// пересчет срока отработки
	
	Если (ДатаНачалаРазработки > ТекущаяДата() ИЛИ ДатаНачалаРазработки = '00010101') Тогда
		Если ДополнительныеСвойства.Свойство("ДатаНачалаРазработкиДоЗаписи") Тогда
			
			ДатаНачалаРазработкиДоЗаписи = ДополнительныеСвойства.ДатаНачалаРазработкиДоЗаписи;
			
			Если ДатаНачалаРазработкиДоЗаписи <> ДатаНачалаРазработки Тогда
				
				ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
				ПараметрыВыполнения.Вставить("ЗапуститьВФоне", Истина);
				ПараметрыВыполнения.Вставить("ОжидатьЗавершение", 0);
				
				ИмяПроцедуры = "Справочники.Ошибки.ЗаписатьОшибкиСоСменойСрокаОтработки";
				ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьНаличиеДублейНомераВерсии(Отказ)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Проект
	|	И ВерсииПроекта.Ссылка <> &Ссылка
	|	И ВерсииПроекта.ПорядковыйНомер = &ПорядковыйНомер"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Проект", Владелец);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ПорядковыйНомер", ПорядковыйНомер);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru='Версия с указанным порядковым номером уже существует'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,"ПорядковыйНомер");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция СоставляющиеНомераПоследнейВерсии()
	
	Результат = Новый Структура;
	Результат.Вставить("НомерРедакции", 0);
	Результат.Вставить("НомерПодредакции", 0);
	Результат.Вставить("НомерВерсии", 0);
	
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииПроекта.НомерРедакции КАК НомерРедакции,
	|	ВерсииПроекта.НомерПодредакции КАК НомерПодредакции,
	|	ВерсииПроекта.НомерВерсии КАК НомерВерсии
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ПорядковыйНомер УБЫВ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли