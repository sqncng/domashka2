#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("Владелец");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

Функция ОчереднойПорядковыйНомерВерсии(Проект) Экспорт
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		Возврат 0;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииПроекта.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Проект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ПорядковыйНомер УБЫВ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПорядковыйНомер + 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Определяет ближайшую сборку указанной версии после указанной даты
//
// Параметры:
//  Версия - СправочникСсылка.ВерсииПроекта - Версия, сборку которой нужно определеить.
//  Дата - Дата - дата, после которой требуется найти сборку
//
// Возвращаемое значение:
//  ИнформацияОСборке - Структура - структура, содержащая поля:
//   * Сборка - СправочникСсылка.СборкиВерсии - найденная сборка.
//   * ДатаСборки - Дата - дата найденной сборки.
//
Функция ИнформацияОБлижайшейСборке(Версия, Дата, Публикуемая=Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СборкиВерсии.Ссылка КАК Сборка,
	|	СборкиВерсии.ДатаСборки КАК ДатаСборки,
	|	СборкиВерсии.ДатаПубликации КАК ДатаПубликации
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Владелец = &Версия
	|	И СборкиВерсии.ДатаСборки >= &Дата
	|	И НЕ СборкиВерсии.ПометкаУдаления
	|   И (СборкиВерсии.Опубликована ИЛИ НЕ &ОтбиратьПубликуемые)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСборки"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ОтбиратьПубликуемые", Публикуемая);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Структура = Новый Структура;
	
	Если Выборка.Следующий() Тогда
		Структура.Вставить("Сборка", Выборка.Сборка);
		Структура.Вставить("ДатаСборки", Выборка.ДатаСборки);
		Структура.Вставить("ДатаПубликации", Выборка.ДатаПубликации);
	Иначе
		Структура.Вставить("Сборка", Справочники.СборкиВерсии.ПустаяСсылка());
		Структура.Вставить("ДатаСборки", '00010101');
		Структура.Вставить("ДатаПубликации", '00010101');
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// Функция возвращает признак поддержки расширенного описания обработчиков обновления.
//
// Параметры:
//	ВерсияМеханизмаОбновленияИБ - Строка - номер версии БСП, на основе которой разрабатывается конфигурация.
//
// Возвращаемое значение:
//	Булево. Истина - поддерживается расширенное описание обработчиков обновления.
//
Функция ПоддерживаетсяРасширенноеОписаниеОбработчиков(Версия) Экспорт
	
	ВерсияМеханизмаОбновленияИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Версия, "ВерсияМеханизмаОбновленияИБ");
	
	ВерсияПоддержкиМеханизмаОбновленияИБ = ВерсияЧислом("2.3.3.0");
	ВерсияМеханизмаОбновленияИБЧислом    = ВерсияЧислом(ВерсияМеханизмаОбновленияИБ);
	
	Если ВерсияМеханизмаОбновленияИБЧислом < ВерсияПоддержкиМеханизмаОбновленияИБ Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает версию платформы хранилища
Функция ВерсияПлатформы(Версия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Версия", Версия);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииПроекта.Владелец КАК Проект,
	|	ВерсииПроекта.ВерсияПлатформыХранилища,
	|	ВерсииПроекта.Ветка.РежимРазработки КАК РежимРазработки
	|ПОМЕСТИТЬ ВерсииПроекта
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ссылка = &Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииПроекта.Проект,
	|	ВерсииПроекта.ВерсияПлатформыХранилища,
	|	ВерсииПроекта.РежимРазработки
	|ИЗ
	|	ВерсииПроекта КАК ВерсииПроекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проекты.ВерсияПлатформы
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииПроекта КАК ВерсииПроекта
	|		ПО (ВерсииПроекта.Проект = Проекты.Ссылка)";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаВерсия = Результат[1].Выбрать();
	
	ВерсияПлатформы = Неопределено;
	Если ВыборкаВерсия.Следующий() Тогда
		
		Если ВыборкаВерсия.РежимРазработки = Перечисления.РежимРазработки.ВХранилище Тогда
			ВерсияПлатформы = ВыборкаВерсия.ВерсияПлатформыХранилища;
		Иначе
			
			ВыборкаПроект = Результат[2].Выбрать();
			Если ВыборкаПроект.Следующий() Тогда
				ВерсияПлатформы = ВыборкаПроект.ВерсияПлатформы;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВерсияПлатформы;
	
КонецФункции

// Возвращает массив версий проекта находящихся на поддержке
Функция ВерсииНаПоддержке(Проект) Экспорт
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Новый Структура("Владелец", Проект));
	ПараметрыВыбора.Вставить("СтрокаПоиска", "");
	
	ПоддерживаемыеВерсии = ПоддерживаемыеВерсии(ПараметрыВыбора).ВыгрузитьЗначения();
	ВерсииИсправления    = ВерсииИсправления(ПараметрыВыбора).ВыгрузитьЗначения();
	
	Ответ = Новый Массив;
	Для Каждого Строка Из ПоддерживаемыеВерсии Цикл
		Если ВерсииИсправления.Найти(Строка) <> Неопределено Тогда
			Ответ.Добавить(Строка);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция СформироватьПечатныеФормы(МассивОбъектов, СУчетомПриемника=Ложь, ДанныеСоответствия=Неопределено) Экспорт
	
	ПечатныеФормы = Новый Соответствие;
	
	ТекстЗапроса = ТекстЗапросаДляФормированияОписания();
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл

		Документ = Новый ТабличныйДокумент;
		
		ОписаниеОбъектов.НастроитьОписаниеОбъекта(Документ);
		Документ.НачатьАвтогруппировкуСтрок();
		
		СформироватьОписаниеОбъекта(Выборка, Документ);
		
	    Документ.ЗакончитьАвтогруппировкуСтрок();
		
		СтруктураПечатныхФорм = Новый Структура;
		СтруктураПечатныхФорм.Вставить("Описание", Документ);
		
		ПечатныеФормы.Вставить(Выборка.Ссылка, СтруктураПечатныхФорм);
		
	КонецЦикла;
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Выполняет печать описаний и схем переданных функций
//
// Параметры:
//  МассивОбъектов - массив функций, подлежащих печати
//
Процедура Печать(МассивОбъектов, ПечатныеФормы) Экспорт
	
	СоответствиеПечатныхФорм = СформироватьПечатныеФормы(МассивОбъектов);
	
	ПечатныеФормы = Новый Массив;
	
	Для Каждого ЭлементСоответствия из СоответствиеПечатныхФорм Цикл
		ПечатныеФормы.Добавить(ЭлементСоответствия.Значение.Описание);
	КонецЦикла;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОтборПоВерсиямВоспроизведенияПроекта") Тогда
		ДанныеВыбора = ВерсииВоспроизведенияДляПроекта(Параметры);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Параметры.Свойство("ТолькоПоддерживаемые") И Параметры.ТолькоПоддерживаемые Тогда
		ДанныеВыбора = ПоддерживаемыеВерсии(Параметры);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВерсииИсправления(ПараметрыВыбора)
	
	Если ПараметрыВыбора.Отбор.Свойство("Владелец") Тогда
		Проект = ПараметрыВыбора.Отбор.Владелец;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияИсправленияНемедленно КАК ВерсияИсправления
	|ИЗ
	|	Справочник.Проекты.ПорядокВоспроизведенияИИсправленияОшибок КАК ПроектыПорядокВоспроизведенияИИсправленияОшибок
	|ГДЕ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.Ссылка = &Проект
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияИсправленияЖелательноБыстрее
	|ИЗ
	|	Справочник.Проекты.ПорядокВоспроизведенияИИсправленияОшибок КАК ПроектыПорядокВоспроизведенияИИсправленияОшибок
	|ГДЕ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.Ссылка = &Проект
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияИсправленияВПлановомПорядке
	|ИЗ
	|	Справочник.Проекты.ПорядокВоспроизведенияИИсправленияОшибок КАК ПроектыПорядокВоспроизведенияИИсправленияОшибок
	|ГДЕ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.Ссылка = &Проект"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	СписокВыбора = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.ВерсияИсправления);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ВерсииВоспроизведенияДляПроекта(ПараметрыВыбора)
	
	Если ПараметрыВыбора.Отбор.Свойство("Владелец") Тогда
		Проект = ПараметрыВыбора.Отбор.Владелец;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияВоспроизведения КАК ВерсияВоспроизведения
	|ИЗ
	|	Справочник.Проекты.ПорядокВоспроизведенияИИсправленияОшибок КАК ПроектыПорядокВоспроизведенияИИсправленияОшибок
	|ГДЕ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.Ссылка = &Проект
	|	И (НЕ &ОтбиратьПоКоду
	|			ИЛИ ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияВоспроизведения.Код ПОДОБНО &СтрокаПоиска)
	|	И НЕ ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияВоспроизведения.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияВоспроизведения.ПорядковыйНомер УБЫВ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	СтрокаПоиска = ПараметрыВыбора.СтрокаПоиска;
		
	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ОтбиратьПоКоду", Истина);
	Иначе
		Запрос.УстановитьПараметр("СтрокаПоиска", "");
		Запрос.УстановитьПараметр("ОтбиратьПоКоду", Ложь);
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.ВерсияВоспроизведения);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ПоддерживаемыеВерсии(ПараметрыВыбора)
	
	Если ПараметрыВыбора.Отбор.Свойство("Владелец") Тогда
		Проект = ПараметрыВыбора.Отбор.Владелец;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Версия
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Проект
	|	И (ВерсииПроекта.ДатаПрекращенияПоддержки >= &ТекущаяДата
	|			ИЛИ ВерсииПроекта.ДатаПрекращенияПоддержки = ДАТАВРЕМЯ(1, 1, 1))
	|	И (НЕ &ОтбиратьПоКоду
	|			ИЛИ ВерсииПроекта.Код ПОДОБНО &СтрокаПоиска)
	|	И НЕ ВерсииПроекта.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ПорядковыйНомер УБЫВ"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	
	СтрокаПоиска = ПараметрыВыбора.СтрокаПоиска;
		
	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ОтбиратьПоКоду", Истина);
	Иначе
		Запрос.УстановитьПараметр("СтрокаПоиска", "");
		Запрос.УстановитьПараметр("ОтбиратьПоКоду", Ложь);
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Версия);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ВерсияЧислом(ВерсияСтрока)
	
	МассивВерсий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВерсияСтрока, ".");
	
	Если МассивВерсий.Количество() = 4 Тогда
		ВерсияЧислом = Число(МассивВерсий[0]) * 10000000 + Число(МассивВерсий[1]) * 1000000 +
			Число(МассивВерсий[2]) * 10000 + Число(МассивВерсий[3]);
	Иначе
		ВерсияЧислом = 0;
	КонецЕсли;
	
	Возврат ВерсияЧислом;
	
КонецФункции

Функция ТекстЗапросаДляФормированияОписания()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиВерсии.Владелец.Ссылка КАК ВладелецСсылка,
	|	МАКСИМУМ(СборкиВерсии.ДатаСборки) КАК ДатаСборки
	|ПОМЕСТИТЬ ПоследниеСборкиПоДате
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Владелец.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкиВерсии.Владелец.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиВерсии.Владелец.Ссылка КАК ВладелецСсылка,
	|	СборкиВерсии.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПоследниеСборки
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеСборкиПоДате КАК ПоследниеСборкиПоДате
	|		ПО СборкиВерсии.ДатаСборки = ПоследниеСборкиПоДате.ДатаСборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Ссылка,
	|	ВерсииПроекта.ПометкаУдаления КАК ПометкаУдаления,
	|	ВерсииПроекта.Код КАК Код,
	|	ВерсииПроекта.ДатаНачалаРазработки КАК ДатаНачалаРазработки,
	|	ВерсииПроекта.ДатаОкончанияРазработки КАК ДатаОкончанияРазработки,
	|	ВерсииПроекта.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ВерсииПроекта.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	ВерсииПроекта.ПлановаяДатаВыпуска КАК ПлановаяДатаВыпуска,
	|	ВерсииПроекта.Ветка КАК Ветка,
	|	ВерсииПроекта.ПубликуемыйНомерВерсии КАК ПубликуемыйНомерВерсии,
	|	ВерсииПроекта.ДатаПрекращенияПоддержки КАК ДатаПрекращенияПоддержки,
	|	ВерсииПроекта.ДатаНачалаВнешнегоТестирования КАК ДатаНачалаВнешнегоТестирования,
	|	ВерсииПроекта.ДатаВключенияБиблиотек КАК ДатаВключенияБиблиотек,
	|	ВерсииПроекта.ВерсияПлатформы КАК ВерсияПлатформы,
	|	ВерсииПроекта.ВерсияПлатформыХранилища КАК ВерсияПлатформыХранилища,
	|	ВерсииПроекта.КаталогИБДляЗагрузкиМетаданных КАК КаталогИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ИмяПользователяИБДляЗагрузкиМетаданных КАК ИмяПользователяИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ИмяПользователяХранилищаДляЗагрузкиМетаданных КАК ИмяПользователяХранилищаДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ПарольПользователяИБДляЗагрузкиМетаданных КАК ПарольПользователяИБДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ПарольПользователяХранилищаДляЗагрузкиМетаданных КАК ПарольПользователяХранилищаДляЗагрузкиМетаданных,
	|	ВерсииПроекта.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных КАК ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных,
	|	ВерсииПроекта.ВерсияМеханизмаОбновленияИБ КАК ВерсияМеханизмаОбновленияИБ,
	|	ВерсииПроекта.ДатаГотовностиКПредварительномуВстраиванию КАК ДатаГотовностиКПредварительномуВстраиванию,
	|	ВерсииПроекта.СоздаватьПатчи КАК СоздаватьПатчи,
	|	ВерсииПроекта.НомерРедакции КАК НомерРедакции,
	|	ВерсииПроекта.НомерПодредакции КАК НомерПодредакции,
	|	ВерсииПроекта.НомерВерсии КАК НомерВерсии,
	|	ВерсииПроекта.ВерсииВключаемыхПроектов.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Версия КАК Версия,
	|		Версия.Код КАК ПредставлениеВерсии,
	|		Версия.Владелец.Наименование КАК ПредставлениеПроекта,
	|		Комментарий КАК Комментарий
	|	) КАК ВерсииВключаемыхПроектов,
	|	ПоследниеСборки.Ссылка.СборкиВключаемыхПроектов.(
	|		Сборка.Владелец КАК ВстроеннаяВерсия,
	|		Сборка.Владелец.Владелец.Наименование КАК ПредставлениеПроекта,
	|		Сборка.Код КАК НомерСборки
	|	) КАК СборкиВключаемыхПроектов,
	|	ВерсииПроекта.ОтличияВИменахМетаданных.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ОбъектМетаданных КАК ОбъектМетаданных,
	|		ПолноеИмя КАК ПолноеИмя
	|	) КАК ОтличияВИменахМетаданных,
	|	ВерсииПроекта.ОтличияВСоставеПодсистем.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Подсистема КАК Подсистема,
	|		ОбъектМетаданных КАК ОбъектМетаданных,
	|		ОбъектНужноДобавитьВПодсистему КАК ОбъектНужноДобавитьВПодсистему
	|	) КАК ОтличияВСоставеПодсистем,
	|	ВерсииПроекта.Владелец.Библиотека КАК Библиотека
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСборки КАК ПоследниеСборки
	|		ПО ВерсииПроекта.Ссылка = ПоследниеСборки.ВладелецСсылка
	|ГДЕ
	|	ВерсииПроекта.Ссылка В(&МассивОбъектов)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьОписаниеОбъекта(Выборка, Документ)
	
	// Заголовок документа
	ОписаниеОбъектов.ВывестиЗаголовокОбъекта(НСтр("ru='Версия проекта'"), Выборка.Ссылка, , Документ);
	
	// Нумерация
	ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Нумерация'"), Документ);
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Номер версии: '") + Выборка.Код, 1, Документ);	
	
	Если ЗначениеЗаполнено(Выборка.ПубликуемыйНомерВерсии) Тогда
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Публикуемый номер версии: '")
			+ Выборка.ПубликуемыйНомерВерсии, 1, Документ);
	КонецЕсли;
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Номер редакции: '") + Выборка.НомерРедакции, 1, Документ);
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Номер подредакции: '") + Выборка.НомерПодредакции, 1, Документ);
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Номер версии: '") + Выборка.НомерВерсии, 1, Документ);
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Порядковый номер: '") + Выборка.ПорядковыйНомер, 1, Документ);
	
	// Разработка, поддержка
	ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Разработка, поддержка'"), Документ);
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Начало разработки: '")
	    + Формат(Выборка.ДатаНачалаРазработки, "ДЛФ=D"), 1, Документ);
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Окончание разработки: '")
		+ Формат(Выборка.ДатаОкончанияРазработки, "ДЛФ=D"), 1, Документ);
		
	Если Выборка.Библиотека Тогда
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Включение библиотек до: '")
	        + Формат(Выборка.ДатаВключенияБиблиотек, "ДЛФ=D"), 1, Документ);	
	Иначе
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Готовность к предварительному встраиванию: '")
	        + Формат(Выборка.ДатаГотовностиКПредварительномуВстраиванию, "ДЛФ=D"), 1, Документ);
	КонецЕсли;
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Начало внешнего тестирования: '")
		+ Формат(Выборка.ДатаНачалаВнешнегоТестирования, "ДЛФ=D"), 1, Документ);
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Плановая дата выпуска: '")
		+ Формат(Выборка.ПлановаяДатаВыпуска, "ДЛФ=D"), 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Дата предстоящей сборки: '")
		+ Формат(Выборка.ДатаПредстоящейСборки, "ДЛФ=D"), 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Прекращение поддержки: '")
		+ Формат(Выборка.ДатаПрекращенияПоддержки, "ДЛФ=D"), 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Версия платформы: '") + Выборка.ВерсияПлатформы, 1, Документ);
	
	// Организация разработки
	ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Организация разработки'"), Документ);
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Ветка: '") + Выборка.Ветка, 1, Документ);
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Версия платформы хранилища: '")
	    + Выборка.ВерсияПлатформыХранилища, 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Имя пользователя хранилища: '")
	    + Выборка.ИмяПользователяХранилищаДляЗагрузкиМетаданных, 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Пароль пользователя хранилища: '")
	    + Выборка.ПарольПользователяХранилищаДляЗагрузкиМетаданных, 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Расположение ИБ для загрузки метаданных: '")
	    + Выборка.КаталогИБДляЗагрузкиМетаданных, 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Имя пользователя ИБ: '")
	    + Выборка.ИмяПользователяИБДляЗагрузкиМетаданных, 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Пароль пользователя ИБ: '")
	    + Выборка.ПарольПользователяИБДляЗагрузкиМетаданных, 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Обновлять конфигурацию при загрузке метаданных: '")
	    + Выборка.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных, 1, Документ);
		
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Версия механизма обновления ИБ: '")
	    + Выборка.ВерсияМеханизмаОбновленияИБ, 1, Документ);
	
	// Работа с ошибками
	ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Работа с ошибками'"), Документ);
	
	ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Создавать патчи: '") + Выборка.СоздаватьПатчи, 1, Документ);	
	
	// Версии включаемых проектов
	ВерсииВключаемыхПроектов = Выборка.ВерсииВключаемыхПроектов.Выгрузить();
	СборкиВключаемыхПроектов = Выборка.СборкиВключаемыхПроектов.Выгрузить();
	
	Если ВерсииВключаемыхПроектов.Количество() > 0 Тогда
		
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Версии включаемых проектов'"), Документ);
		
		Для Каждого СтрокаТаблицы из ВерсииВключаемыхПроектов Цикл
			
			ИнформацияПоВерсии = СтрокаТаблицы.ПредставлениеВерсии;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПредставлениеПроекта) Тогда
				ИнформацияПоВерсии = СтрокаТаблицы.ПредставлениеПроекта + " " + ИнформацияПоВерсии;
			КонецЕсли;
			
			ОписаниеОбъектов.ВывестиЗаголовокПодраздела(ИнформацияПоВерсии, СтрокаТаблицы.Версия,,Документ);
			
			ВстроеннаяСборка = СборкиВключаемыхПроектов.Найти(СтрокаТаблицы.ПредставлениеПроекта, "ПредставлениеПроекта");
			НомерСборки = ?(ВстроеннаяСборка <> Неопределено, ВстроеннаяСборка.НомерСборки, "");
			ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Номер сборки: '") + НомерСборки, 1, Документ);
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Комментарий) Тогда
				ОписаниеОбъектов.ВывестиТекстПоАбзацам(СтрокаТаблицы.Комментарий, 1, Документ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отличия в именах объектов метаданных
	ОтличияВИменахМетаданных = Выборка.ОтличияВИменахМетаданных.Выгрузить();
	
	Если ОтличияВИменахМетаданных.Количество() > 0 Тогда
		
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Отличия в именах объектов метаданных'"), Документ);
		
		Для Каждого СтрокаТаблицы из ОтличияВИменахМетаданных Цикл
		    ОписаниеОбъектов.ВывестиТекстПоАбзацам(СтрокаТаблицы.ПолноеИмя, 1, Документ, СтрокаТаблицы.ОбъектМетаданных);
		КонецЦикла;
		
	КонецЕсли;
	
	// Отличия в составе подсистем
	ОтличияВСоставеПодсистем = Выборка.ОтличияВСоставеПодсистем.Выгрузить();
	
	Если ОтличияВСоставеПодсистем.Количество() > 0 Тогда
		
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Отличия в составе подсистем'"), Документ);
		
		Для Каждого СтрокаТаблицы из ОтличияВСоставеПодсистем Цикл
			
			ОписаниеОбъектов.ВывестиЗаголовокПодраздела(СтрокаТаблицы.Подсистема, СтрокаТаблицы.Подсистема,,Документ);
		    ОписаниеОбъектов.ВывестиТекстПоАбзацам(СтрокаТаблицы.ОбъектМетаданных, 1, Документ, СтрокаТаблицы.ОбъектМетаданных);
			
			Если СтрокаТаблицы.ОбъектНужноДобавитьВПодсистему Тогда
				ТребуетсяВключить = НСтр("ru='Объект метаданных нужно добавить в подсистему'");
				ОписаниеОбъектов.ВывестиТекстПоАбзацам(ТребуетсяВключить, 1, Документ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли