#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("ТекущийПроект") Тогда
		ТекущийПроект = Параметры.ТекущийПроект;
	Иначе	
		Если ЗначениеЗаполнено(ПараметрыСеанса.ТекущийПроект) Тогда
			ТекущийПроект = ПараметрыСеанса.ТекущийПроект;
		КонецЕсли;	 
	КонецЕсли; 
	ПутьКФайлуТокена = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "ФайлСодержащийТокен");
	Если Параметры.Свойство("НайтиСценарийВСписке") И Параметры.НайтиСценарийВСписке Тогда
		НайтиСценарийВСписке = Параметры.UID;
		ВеткаДляПоискаВСписке = Параметры.ВеткаДляПоискаВСписке;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(ВеткаДляПоискаВСписке) Тогда
		Ветка = ВеткаДляПоискаВСписке;
		ВеткаДляПоискаВСписке = Неопределено;
	КонецЕсли;	 
	Элементы.ПоказатьСписокИзмененныхСценариев.Видимость = Ложь;
	ТокенПользователя = ТестированиеКлиент.ТокенПользователя(ПутьКФайлуТокена);
	ПодключитьОбработчикОжидания("ОбновитьДеревоСценариевПоДаннымGit", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзменениеВременныхФайловСценариевРаботыПользователя" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Если Параметр.Свойство("ПроисходилоИзменениеГруппы") И Параметр.ПроисходилоИзменениеГруппы Тогда
				ОбновитьДеревоСценариевПоДаннымGit();
				Возврат;
			КонецЕсли;
			
			СтрокаДерева = Неопределено;
			Если Параметр.Свойство("UIDСценария") Тогда
				СтрокаДерева = СтрокаДереваПоUID(Параметр.UIDСценария);
			ИначеЕсли Параметр.Свойство("UID") Тогда
				СтрокаДерева = СтрокаДереваПоUID(Параметр.UID);
			КонецЕсли;
			
			Если СтрокаДерева <> Неопределено Тогда
				Если Параметр.Свойство("ТипЭлементаВыгрузки") И Параметр.ТипЭлементаВыгрузки = "Сценарий" Тогда
					Если Параметр.Свойство("Наименование") Тогда
						СтрокаДерева.Наименование = Параметр.Наименование;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СтрокаДерева <> Неопределено Тогда
				Если Параметр.Свойство("ЭтоНовыйЭлемент") И Параметр.ЭтоНовыйЭлемент Тогда
					Если НЕ (Параметр.Свойство("ЭтоНастройкаСценария") И Параметр.ЭтоНастройкаСценария) Тогда
						СтрокаДерева.ЭтоНовыйЭлемент = Истина;
					Иначе	
						СтрокаДерева.ЭтоИзмененныйЭлемент = Истина;
					КонецЕсли;	 
				Иначе	
					СтрокаДерева.ЭтоИзмененныйЭлемент = Истина;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
		УстановитьОформление();
	ИначеЕсли ИмяСобытия = "ФиксацияИзмененийСценариевПользователей" Тогда
		ОбновитьДеревоСценариевПоДаннымGit();
		УстановитьОформление();
	ИначеЕсли ИмяСобытия = "ОтменаИзмененийСценариевРаботыПользователя" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ИсточникОповещения")
			И Параметр.ИсточникОповещения = "ФормаСпискаGit" Тогда
		Иначе	
			ОбновитьДеревоСценариевПоДаннымGit();
		КонецЕсли;	 
		
		УстановитьОформление();
	ИначеЕсли ИмяСобытия = "ЗаписьНовогоСценарияGit" Тогда
		ОбработкаДобавленияНовогоСценария(Параметр);
	ИначеЕсли ИмяСобытия = "НайтиСценарийВСпискеGit" Тогда
		СделатьСтрокуДереваАктивнойПоUID(Параметр.UID);
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ПроектВетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Владелец");
	Если ПроектВетки <> ТекущийПроект Тогда
		Ветка = Неопределено;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("СозданиеГруппы") И ВыбранноеЗначение.СозданиеГруппы Тогда
			ГруппаВерхнегоУровня = ВыбранноеЗначение.ГруппаВерхнегоУровня;
			
			ТекущаяСтрока = Элементы.ДеревоСценариев.ТекущаяСтрока;
			Если ТекущаяСтрока = Неопределено Тогда
				ГруппаВерхнегоУровня = Истина;
			Иначе	
				СтрокаДерева = ДеревоСценариев.НайтиПоИдентификатору(ТекущаяСтрока);
				ДанныеИерархии = ДанныеИерархииПоСтрокеДерева(СтрокаДерева);
			КонецЕсли;	 
			
			Если ГруппаВерхнегоУровня Тогда
				Строка = СокрЛП(УбратьЗапрещенныеСимволыИзИмениФайла(ВыбранноеЗначение.Наименование));
			Иначе	
				Строка = ДанныеИерархии + "/" + СокрЛП(УбратьЗапрещенныеСимволыИзИмениФайла(ВыбранноеЗначение.Наименование));
			КонецЕсли;	 
			
			ТестированиеКлиент.ЗаписатьДанныеНовойГруппы(Строка, Ветка, ТекущийПроект);
			ПерейтиКСтрокеНовойГруппы = Строка;
			ОбновитьДеревоСценариевПоДаннымGit();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Фиксировать(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ветка", Ветка);
	ПараметрыФормы.Вставить("Проект", ТекущийПроект);
	ПараметрыФормы.Вставить("ТокенПользователя", ТокенПользователя);
	ПараметрыФормы.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ПараметрыФормы.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаФиксироватьИзменения", ПараметрыФормы, , Ветка); 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокИзмененныхСценариев(Команда)
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, ТекущийПроект);
	
	Если НЕ ДанныеРанееИзмененныхСценариев.ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;	 
	
	Спс = СписокИзмененныхСценариев(ДанныеРанееИзмененныхСценариев, АдресСлужебныеДанныеСценариев);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеПоказатьСписокИзмененныхСценариев", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, Спс);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоСценариевПоДаннымРепозитория(Команда)
	ОбновитьДеревоСценариевПоДаннымGit();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите отменить все изменения сценариев пользователей в данной ветке?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОбОтменеСценариев", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСценарий(Команда)
	ОбработчикСоздатьСценарий();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаВыбораИмениНовойГруппы",,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСценарий()
	ТекущиеДанные = Элементы.ДеревоСценариев.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ТипСтроки = 1 Тогда
		ДанныеСценария = ДанныеСценарияПоСтрокеДерева(ТекущиеДанные);
		ДанныеСценария.Вставить("КопированиеСценария", Истина);
		ДанныеСценария.Вставить("ЭтоНовыйЭлемент", Истина);
		ДанныеСценария.Вставить("UIDСценария", Неопределено);
		ДанныеСценария.Вставить("UIDСценарияКопирования", ТекущиеДанные.UIDСценария);
		ДанныеСценария.Вставить("Код", Неопределено);
		ДанныеСценария.Вставить("КопируетсяСценарийКоторогоНетВРепозитории", ТекущиеДанные.ЭтоНовыйЭлемент);
		ОткрытьСценарийДляРедактирование(ДанныеСценария);
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВеткаПриИзменении(Элемент)
	ОбновитьДеревоСценариевПоДаннымGit();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПроектПриИзменении(Элемент)
	ДеревоСценариев.ПолучитьЭлементы().Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	ОбновитьДеревоСценариевПоДаннымGit();
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаименованиеПриИзменении(Элемент)
	ОбновитьДеревоСценариевПоДаннымGit();
КонецПроцедуры

&НаКлиенте
Процедура ОтборКодПриИзменении(Элемент)
	ОбновитьДеревоСценариевПоДаннымGit();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДеревоСценариев

&НаКлиенте
Процедура ДеревоСценариевВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикИзмененияСценария(ВыбраннаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценариевПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоСценариев.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	УстановкаПометки = Истина;
	Если Элементы.ДеревоСценариев.ВыделенныеСтроки.Количество() > 1 Тогда
		Если ТекущиеДанные.ПометкаУдаления Тогда
			УстановкаПометки = Ложь;
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'"), ТекущиеДанные.Наименование);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить выделенные элементы на удаление?'"), ТекущиеДанные.Наименование);
		КонецЕсли;	 
	Иначе	
		Если ТекущиеДанные.ПометкаУдаления Тогда
			УстановкаПометки = Ложь;
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"), ТекущиеДанные.Наименование);
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"), ТекущиеДанные.Наименование);
		КонецЕсли;	 
	КонецЕсли;	 
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("УстановкаПометки", УстановкаПометки);
	ДопПараметры.Вставить("ВыделенныеСтроки", Элементы.ДеревоСценариев.ВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОПометкеНаУдаление", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да); 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценариевПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если Элементы.ДеревоСценариев.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОбработчикИзмененияСценария(Элементы.ДеревоСценариев.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценариевПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	Если Копирование Тогда
		СкопироватьСценарий();
		Возврат;
	КонецЕсли;	 
	ОбработчикСоздатьСценарий();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДеревоСценариевПоДаннымGit()
	Если НЕ ЗначениеЗаполнено(ТекущийПроект) Тогда
		ВызватьИсключение НСтр("ru = 'Не установлен отбор по проекту.'");
	КонецЕсли;	 
	
	Если НЕ ЗначениеЗаполнено(Ветка) Тогда
		Возврат;
	КонецЕсли;	 
	
	UIDТекущейСтроки = Неопределено;
	ДанныеИерархииПоСтрокеДерева = Неопределено;
	Если ПустаяСтрока(ПерейтиКСтрокеНовойГруппы) Тогда
		Если Элементы.ДеревоСценариев.ТекущиеДанные <> Неопределено Тогда
			Если Элементы.ДеревоСценариев.ТекущиеДанные.ТипСтроки = 1 Тогда
				UIDТекущейСтроки = Элементы.ДеревоСценариев.ТекущиеДанные.UIDСценария;
			Иначе	
				ДанныеИерархииПоСтрокеДерева = Элементы.ДеревоСценариев.ТекущиеДанные.ИдКаталога;
			КонецЕсли;	 
		КонецЕсли;	 
	Иначе	
		ДанныеИерархииПоСтрокеДерева = ПерейтиКСтрокеНовойГруппы;
		ПерейтиКСтрокеНовойГруппы = "";
	КонецЕсли;	 
	
	ПараметрыСписка = Новый Структура("Ветка, Проект, УникальныйИдентификатор", Ветка, ТекущийПроект, Новый УникальныйИдентификатор);
	ПараметрыСписка.Вставить("АдресКешДанныеКоммита", АдресКешДанныеКоммита);
	ПараметрыСписка.Вставить("АдресКешСнипетовИменСценариевИменСценариев", АдресКешСнипетовИменСценариевИменСценариев);
	ПараметрыСписка.Вставить("ПредыдущийИдентификаторКоммита", ИдентификаторКоммита);
	ТестированиеКлиент.ДополнитьПараметрыОткрытияСценария(ПараметрыСписка);
	
	АвторКоммита = ПараметрыСписка.АвторКоммита;
	ДатаКоммита = ПараметрыСписка.ДатаКоммита;
	ПредыдущийИдентификаторКоммита = ИдентификаторКоммита;
	ИдентификаторКоммита = ПараметрыСписка.ИдентификаторКоммита;
	СсылкаНаКоммит = ПараметрыСписка.СсылкаНаКоммит;
	АдресСлужебныеДанныеСценариев = ПараметрыСписка.АдресСлужебныеДанныеСценариев;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Ветка", Ветка);
	ПараметрыОповещения.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	Оповестить("ИзмененияАдресаСлужебныхДанныхGit", ПараметрыОповещения);
	
	АдресКешСнипетовИменСценариевИменСценариев = ПараметрыСписка.АдресКешСнипетовИменСценариевИменСценариев;
	АдресКешДанныеКоммита = ПараметрыСписка.АдресКешДанныеКоммита;

	ОбновитьДанныеПоследнегоКоммита(АвторКоммита, ДатаКоммита, СсылкаНаКоммит);
	ОбновитьДерево(АдресСлужебныеДанныеСценариев, ПараметрыСписка.ДанныеРанееИзмененныхСценариев);
	
	УстановитьОформление();
	
	Если ЗначениеЗаполнено(ОтборОтветственный) ИЛИ ЗначениеЗаполнено(ОтборНаименование) ИЛИ ЗначениеЗаполнено(ОтборКод) Тогда
		РазвернутьВсеСтрокиДерева();
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(НайтиСценарийВСписке) Тогда
		СделатьСтрокуДереваАктивнойПоUID(НайтиСценарийВСписке);
		НайтиСценарийВСписке = Неопределено;
	ИначеЕсли UIDТекущейСтроки <> Неопределено Тогда
		СделатьСтрокуДереваАктивнойПоUID(UIDТекущейСтроки);
	ИначеЕсли ДанныеИерархииПоСтрокеДерева <> Неопределено Тогда
		СделатьСтрокуДереваАктивнойПоДаннымИерархии(ДанныеИерархииПоСтрокеДерева);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДерево(АдресСлужебныеДанныеСценариев, ДанныеРанееИзмененныхСценариев)
	КешИзмененныеUID = Новый Соответствие;
	Для Каждого ИзмененныйUID Из ДанныеРанееИзмененныхСценариев.ИзмененныеUID Цикл
		КешИзмененныеUID.Вставить(ИзмененныйUID.UID, ИзмененныйUID);
	КонецЦикла;	 
	ДанныеРанееИзмененныхСценариев.Вставить("КешИзмененныеUID", КешИзмененныеUID);
	
	КешУдаленныеUID = Новый Соответствие;
	Для Каждого УдаленныйUID Из ДанныеРанееИзмененныхСценариев.СценарииСПометкойНаУдаление Цикл
		КешУдаленныеUID.Вставить(УдаленныйUID.UID, ИзмененныйUID);
	КонецЦикла;	 
	ДанныеРанееИзмененныхСценариев.Вставить("КешУдаленныеUID", КешУдаленныеUID);
	
	ДанныеСценариев = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев); 
	Данные = ДанныеСценариев.UIDCценариев;
	КодыСценариев = ДанныеСценариев.КодыСценариев;

	Дерево = РеквизитФормыВЗначение("ДеревоСценариев");

	Дерево.Строки.Очистить();
	
	УровниКаталогов = Новый Соответствие;
	СценарииВКорне = Новый Массив;
	UIDОтборОтветственный = Строка(ОтборОтветственный.УникальныйИдентификатор());
	
	ЕстьОтбор = ЗначениеЗаполнено(ОтборОтветственный)
		ИЛИ ЗначениеЗаполнено(ОтборНаименование)
		ИЛИ ЗначениеЗаполнено(ОтборКод);
	
	// Создание каталогов
	СписокСтрокКаталогов = Новый СписокЗначений;
	Для Каждого Элемент Из Данные Цикл
		ДанныеФайла = Элемент.Значение;
		
		Если ЕстьОтбор И НЕ ЭлементСоответствуетОтборуПользователя(ДанныеФайла, UIDОтборОтветственный) Тогда
			Продолжить;
		КонецЕсли;	 
		
		НовыйПутьВДереве = "";
		Если КешИзмененныеUID[Элемент.Значение.UID] <> Неопределено Тогда
			Для Каждого ДанныеИзмененногоСценария Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
				Если ДанныеИзмененногоСценария["ДанныеСценария"]["UID"] = Элемент.Значение.UID Тогда
					Если ДанныеИзмененногоСценария["НовыйПутьВДереве"] <> Неопределено Тогда
						НовыйПутьВДереве = СтрЗаменить(ДанныеИзмененногоСценария["НовыйПутьВДереве"], "\", "/");
						Прервать;
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЦикла;	 
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыйПутьВДереве) Тогда
			СписокСтрокКаталогов.Добавить(НовыйПутьВДереве);
			Элемент.Значение.Вставить("НовыйПутьВДереве", НовыйПутьВДереве);
		Иначе	
			СписокСтрокКаталогов.Добавить(Элемент.Значение.ПолноеИмяФайла);
		КонецЕсли;	 
		
	КонецЦикла;	
	Для Каждого Стр Из ДанныеРанееИзмененныхСценариев.НовыеКаталоги Цикл
		СписокСтрокКаталогов.Добавить(Стр);
	КонецЦикла;	 
	СписокСтрокКаталогов.СортироватьПоЗначению();
	Для Каждого Элем Из СписокСтрокКаталогов Цикл
		РассчитатьКаталогиДерева(Дерево, Элем.Значение, УровниКаталогов);
	КонецЦикла;	
	СписокСтрокКаталогов.Очистить();
	
	// Создание сценариев
	СписокСценариев = Новый СписокЗначений;
	Для Каждого Элемент Из Данные Цикл
		ДанныеФайла = Элемент.Значение;
		Если ДанныеРанееИзмененныхСценариев.КешИзмененныеUID[ДанныеФайла.UID] <> Неопределено Тогда
			ДанныеФайла.Вставить("НовоеИмяСценария", ДанныеРанееИзмененныхСценариев.КешИзмененныеUID[ДанныеФайла.UID].Имя);
		КонецЕсли;	
		СписокСценариев.Добавить(ДанныеФайла, ДанныеФайла.ИмяСценария);
	КонецЦикла;
	
	КешОтветственных = Новый Соответствие;
	СписокСценариев.СортироватьПоПредставлению();
	Для Каждого Элем Из СписокСценариев Цикл
		Если ЕстьОтбор И НЕ ЭлементСоответствуетОтборуПользователя(Элем.Значение, UIDОтборОтветственный) Тогда
			Продолжить;
		КонецЕсли;	 
		
		СоздатьСценарийВДереве(Дерево, Элем.Значение, УровниКаталогов, СценарииВКорне, КодыСценариев, ДанныеРанееИзмененныхСценариев, ДанныеСценариев, КешОтветственных);
	КонецЦикла;	 
	СписокСценариев.Очистить();
	
	Для Каждого ДанныеФайла Из СценарииВКорне Цикл
		СтрокаДереваСценарий = Дерево.Строки.Добавить();
		ДанныеИерархииФайла = СтрРазделить(ДанныеФайла.ПолноеИмяФайла, "/");
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДанныеФайла", ДанныеФайла);
		ДанныеЗаполнения.Вставить("ДанныеИерархииФайла", ДанныеИерархииФайла);
		ДанныеЗаполнения.Вставить("КодыСценариев", КодыСценариев);
		ДанныеЗаполнения.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
		ДанныеЗаполнения.Вставить("КешОтветственных", КешОтветственных);
		ЗаполнитьДанныеСценарияВДереве(СтрокаДереваСценарий, ДанныеЗаполнения);
	КонецЦикла;	 
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоСценариев");
	
КонецПроцедуры 

&НаСервере
Функция ЭлементСоответствуетОтборуПользователя(Элемент, UIDОтборОтветственный)
	Если ЗначениеЗаполнено(ОтборОтветственный) Тогда
		Если UIDОтборОтветственный <> Элемент.UIDОтветственный Тогда
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		Если Элемент.Свойство("НовоеИмяСценария") Тогда
			Если Найти(НРег(Элемент.НовоеИмяСценария), НРег(ОтборНаименование)) = 0 Тогда
				Возврат Ложь;
			КонецЕсли;	 
		Иначе	
			Если Найти(НРег(Элемент.ИмяСценария), НРег(ОтборНаименование)) = 0 Тогда
				Возврат Ложь;
			КонецЕсли;	 
		КонецЕсли;	
		
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(ОтборКод) Тогда
		Файл = Новый Файл(Элемент.ПолноеИмяФайла); 
		ФайлПуть = Новый Файл(Файл.Путь);
		ТекКод = ФайлПуть.Имя;
		Если Найти(НРег(ТекКод), НРег(СокрЛП(ОтборКод))) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат Истина;
КонецФункции	 

&НаСервере
Процедура ЗаполнитьДанныеСценарияВДереве(СтрокаДереваСценарий, ДанныеЗаполнения)
	ДанныеФайла = ДанныеЗаполнения.ДанныеФайла;
	ДанныеИерархииФайла = ДанныеЗаполнения.ДанныеИерархииФайла;
	КодыСценариев = ДанныеЗаполнения.КодыСценариев;
	ДанныеРанееИзмененныхСценариев = ДанныеЗаполнения.ДанныеРанееИзмененныхСценариев;
	
	СтрокаДереваСценарий.Наименование = ДанныеФайла.ИмяСценария;
	СтрокаДереваСценарий.UIDСценария  = ДанныеФайла.UID;
	Если ДанныеФайла.Свойство("UIDОтветственный") Тогда
		Ответственный = ОтветственныйСистемыПоДаннымСценария(ДанныеФайла.UIDОтветственный, ДанныеЗаполнения.КешОтветственных);
		СтрокаДереваСценарий.Ответственный = Ответственный;
	Иначе	
		СтрокаДереваСценарий.Ответственный = Неопределено;
	КонецЕсли;	 
	
	Если ДанныеФайла.Свойство("Код") Тогда
		СтрокаДереваСценарий.Код = ДанныеФайла.Код;
		КодыСценариев.Вставить(СтрокаДереваСценарий.Код, Истина);
	Иначе	
		ИдКаталогаКод = ДанныеИерархииФайла.Количество() - 2;
		Если ИдКаталогаКод >= 0 Тогда
			СтрокаДереваСценарий.Код = ДанныеИерархииФайла[ИдКаталогаКод];
			КодыСценариев.Вставить(СтрокаДереваСценарий.Код, Истина);
		КонецЕсли;	 
	КонецЕсли;	 
	СтрокаДереваСценарий.ПолноеИмяФайла = ДанныеФайла.ПолноеИмяФайла;
	СтрокаДереваСценарий.ТипСтроки = 1;
	Если ДанныеФайла.ЕстьПрисоединенныеФайлы Тогда
		СтрокаДереваСценарий.КартинкаЕстьФайлы = 0;
	Иначе	
		СтрокаДереваСценарий.КартинкаЕстьФайлы = -1;
	КонецЕсли;	 
	
	Если ДанныеФайла.Свойство("ЭтоНовыйЭлемент") И ДанныеФайла.ЭтоНовыйЭлемент Тогда
		СтрокаДереваСценарий.ЭтоНовыйЭлемент = Истина;
	КонецЕсли;	 
	
	Если ДанныеФайла.Свойство("НастройкиСценария") И ДанныеФайла.НастройкиСценария.Количество() > 0 Тогда
		СтрокаДереваСценарий.КартинкаЕстьНастройки = 0;
	Иначе	
		СтрокаДереваСценарий.КартинкаЕстьНастройки = -1;
	КонецЕсли;	 
	
	Если ДанныеРанееИзмененныхСценариев.КешУдаленныеUID[ДанныеФайла.UID] <> Неопределено Тогда
		СтрокаДереваСценарий.ПометкаУдаления = Истина;
	КонецЕсли;	 
	Если ДанныеРанееИзмененныхСценариев.КешИзмененныеUID[ДанныеФайла.UID] <> Неопределено Тогда
		Если НЕ СтрокаДереваСценарий.ЭтоНовыйЭлемент Тогда
			СтрокаДереваСценарий.ЭтоИзмененныйЭлемент = Истина;
		КонецЕсли;	 
		СтрокаДереваСценарий.Наименование = ДанныеРанееИзмененныхСценариев.КешИзмененныеUID[ДанныеФайла.UID].Имя;
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьСценарийДляРедактирование(ДанныеДляПолученияСценария)
	ДанныеДляПолученияСценария.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеДляПолученияСценария.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеДляПолученияСценария.Вставить("Ветка", Ветка);
	ДанныеДляПолученияСценария.Вставить("Проект", ТекущийПроект);
	ДанныеДляПолученияСценария.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ДанныеДляПолученияСценария);
	
КонецПроцедуры 

&НаКлиенте
Функция ДанныеРодителяСценария(СтрокаДерева)
	Данные = Новый Структура;
	Данные.Вставить("Уровень1", "");
	Данные.Вставить("Уровень2", "");
	
	Массив = Новый Массив;
	
	ТекРодитель = СтрокаДерева.ПолучитьРодителя();
	Пока ТекРодитель <> Неопределено Цикл
		Массив.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;	
	
	Если Массив.Количество() = 1 Тогда
		Данные.Вставить("Уровень1", Массив[0].Наименование);
		Данные.Вставить("Уровень2", Массив[0].Наименование);
	ИначеЕсли Массив.Количество() >= 2 Тогда
		Данные.Вставить("Уровень1", Массив[Массив.Количество()-1].Наименование);
		Данные.Вставить("Уровень2", Массив[Массив.Количество()-2].Наименование);
	КонецЕсли;	
	
	Возврат Данные; 
	
КонецФункции	 

&НаСервереБезКонтекста
Функция ИмяПроектаСтрокой(Проект)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"); 
КонецФункции	 

&НаКлиенте
Процедура УстановитьОформление()
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, ТекущийПроект);
	Если ДанныеРанееИзмененныхСценариев <> Неопределено Тогда
		Если НЕ ДанныеРанееИзмененныхСценариев.ЕстьИзменения Тогда
			Элементы.ФормаФиксировать.Доступность = Ложь;
			Элементы.ПоказатьСписокИзмененныхСценариев.Видимость = Истина;
			Элементы.ПоказатьСписокИзмененныхСценариев.Заголовок =
				НСтр("ru = 'Нет измененных объектов'");
		Иначе	
			Элементы.ФормаФиксировать.Доступность = Истина;
			Элементы.ПоказатьСписокИзмененныхСценариев.Видимость = Истина;
			Элементы.ПоказатьСписокИзмененныхСценариев.Заголовок =
				СтрШаблон(НСтр("ru = 'Есть изменения, не помещенные в git (%1)'"), ДанныеРанееИзмененныхСценариев.ИзмененныеUID.Количество());
		КонецЕсли;	 
		
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура ПослеПоказатьСписокИзмененныхСценариев(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	UIDСценария = ВыбранныйЭлемент.Значение;
	СтрокаДерева = СтрокаДереваПоUID(UIDСценария);
	Если СтрокаДерева <> Неопределено Тогда
		ДанныеСценария = ДанныеСценарияПоСтрокеДерева(СтрокаДерева);
		ОткрытьСценарийДляРедактирование(ДанныеСценария);
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Функция ДанныеСценарияПоСтрокеДерева(СтрокаДерева)
	
	ДанныеСценария = Новый Структура;
	ДанныеСценария.Вставить("UIDСценария", СтрокаДерева.UIDСценария);
	ДанныеСценария.Вставить("Код", СтрокаДерева.Код);
	ДанныеСценария.Вставить("Наименование", СтрокаДерева.Наименование);
	ДанныеСценария.Вставить("Ответственный", СтрокаДерева.Ответственный);
	ДанныеСценария.Вставить("ПолноеИмяФайла", СтрокаДерева.ПолноеИмяФайла);
	
	ДанныеРодителяСценария = ДанныеРодителяСценария(СтрокаДерева);
	
	ДанныеСценария.Вставить("УровеньОтчета1", ДанныеРодителяСценария.Уровень1);
	ДанныеСценария.Вставить("УровеньОтчета2", ДанныеРодителяСценария.Уровень2);
	ДанныеСценария.Вставить("ЭтоНовыйЭлемент", СтрокаДерева.ЭтоНовыйЭлемент);
	ДанныеСценария.Вставить("ДанныеИерархии", ДанныеИерархииПоСтрокеДерева(СтрокаДерева));
	
	Возврат ДанныеСценария; 
КонецФункции	 

&НаКлиенте
Процедура СтрокаДереваПоUIDРекурсивно(ЭлементыДерева, UIDСценария, Результат)
	Если Результат <> Неопределено Тогда
		Возврат;
	КонецЕсли;	 
		
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если Результат <> Неопределено Тогда
			Возврат;
		КонецЕсли;	 
		
		Если СтрокаДерева.UIDСценария = UIDСценария Тогда
			Результат = СтрокаДерева;
			Прервать;
		КонецЕсли;	 
		
		СтрокаДереваПоUIDРекурсивно(СтрокаДерева.ПолучитьЭлементы(), UIDСценария, Результат);
		
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция СтрокаДереваПоUID(UIDСценария)
	Результат = Неопределено;
	
	СтрокаДереваПоUIDРекурсивно(ДеревоСценариев.ПолучитьЭлементы(), UIDСценария, Результат);
	
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Процедура ОбновитьДанныеПоследнегоКоммита(АвторКоммита, ДатаКоммита, СсылкаНаКоммит)
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Состояние на коммит: '")));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(АвторКоммита, Новый Шрифт(,, Истина)));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(НСтр("ru = 'в'"));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ДатаКоммита),,,,СсылкаНаКоммит));
	ДанныеПоследнегоКоммита = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СписокИзмененныхСценариев(ДанныеРанееИзмененныхСценариев, АдресСлужебныеДанныеСценариев)
	Спс = Новый СписокЗначений;
	
	ДанныеКешСценариев = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	
	Для Каждого ИзмененныйUID Из ДанныеРанееИзмененныхСценариев.ИзмененныеUID Цикл
		Спс.Добавить(ИзмененныйUID.UID, ИзмененныйUID.Имя);
	КонецЦикла;	 
	
	Возврат Спс; 
КонецФункции	 

&НаКлиенте
Процедура ОбработкаВопросаОбОтменеСценариев(Результат, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ТестированиеКлиент.УдалитьВременныеФайлыСценариевРаботыПользователей(Ветка, ИмяПроектаСтрокой(ТекущийПроект));
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ИсточникОповещения", "ФормаСпискаGit");
		Оповестить("ОтменаИзмененийСценариевРаботыПользователя", ПараметрыОповещения);
		ОбновитьДеревоСценариевПоДаннымGit();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОПометкеНаУдаление(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого ИдСтроки Из ДополнительныеПараметры.ВыделенныеСтроки Цикл
			СтрокаДерева = ДеревоСценариев.НайтиПоИдентификатору(ИдСтроки);
			
			Если СтрокаДерева.ТипСтроки = 1 Тогда
				ИзменитьПометкуУдаленияУСценария(СтрокаДерева.UIDСценария, ДополнительныеПараметры.УстановкаПометки);
			Иначе
				СтрокаДерева.ПометкаУдаления = ДополнительныеПараметры.УстановкаПометки;
				СтрокиСценариевПодчиненныеДанной = СтрокиСценариевПодчиненныеДанной(СтрокаДерева);
				Для Каждого ТекСтр Из СтрокиСценариевПодчиненныеДанной Цикл
					ИзменитьПометкуУдаленияУСценария(ТекСтр.UIDСценария, ДополнительныеПараметры.УстановкаПометки);
				КонецЦикла;	 
			КонецЕсли;	 
		КонецЦикла;
		
		СценарииСПометкойНаУдаление = СценарииСПометкойНаУдаление();
		
		ТестированиеКлиент.ЗаписатьДанныеОбУдаленныхСценариях(СценарииСПометкойНаУдаление, Ветка, ТекущийПроект);
		УстановитьОформление();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьКаталогиДерева(Дерево, СтрокаИерархии, УровниКаталогов)
	ДанныеИерархииФайла = СтрРазделить(СтрокаИерархии, "/");
	ТекКаталог = Неопределено;
	
	Если ДанныеИерархииФайла.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеИерархииФайла[ДанныеИерархииФайла.Количество()-1] = "meta.yaml"
		И ДанныеИерархииФайла.Количество() >= 2 Тогда
		ДанныеИерархииФайла.Удалить(ДанныеИерархииФайла.Количество() - 1);
		ДанныеИерархииФайла.Удалить(ДанныеИерархииФайла.Количество() - 1);
	КонецЕсли;	 
	
	ИдКаталога = "";
	Для Сч = 0 По ДанныеИерархииФайла.Количество() - 1 Цикл
		Если ПустаяСтрока(ИдКаталога) Тогда
			ИдКаталога = ДанныеИерархииФайла[Сч];
		Иначе	
			ИдКаталога = ИдКаталога + "/" + ДанныеИерархииФайла[Сч];
		КонецЕсли;	
		
		СтрокаДереваКаталог = УровниКаталогов[ИдКаталога];
		Если СтрокаДереваКаталог = Неопределено Тогда
			Если Сч = 0 Тогда
				СтрокаДереваКаталог = Дерево.Строки.Добавить();
			Иначе	
				СтрокаДереваКаталог = ТекКаталог.Строки.Добавить();
			КонецЕсли;	 
			
			СтрокаДереваКаталог.Наименование = ДанныеИерархииФайла[Сч];
			СтрокаДереваКаталог.КартинкаЕстьФайлы = -1;
			СтрокаДереваКаталог.КартинкаЕстьНастройки = -1;
			УровниКаталогов.Вставить(ИдКаталога, СтрокаДереваКаталог);
			СтрокаДереваКаталог.ИдКаталога = ИдКаталога;
			
		КонецЕсли;	 
		
		ТекКаталог = СтрокаДереваКаталог;
	КонецЦикла;	
КонецПроцедуры 

&НаСервере
Процедура СоздатьСценарийВДереве(Дерево, ДанныеФайла, УровниКаталогов, СценарииВКорне, КодыСценариев, ДанныеРанееИзмененныхСценариев, ДанныеСценариев, КешОтветственных)
	Если ДанныеФайла.Свойство("НовыйПутьВДереве") Тогда
		ДанныеИерархииФайла = СтрРазделить(ДанныеФайла.НовыйПутьВДереве, "/");
	Иначе	
		ДанныеИерархииФайла = СтрРазделить(ДанныеФайла.ПолноеИмяФайла, "/");
	КонецЕсли;	 
	Если ДанныеИерархииФайла[ДанныеИерархииФайла.Количество()-1] = "meta.yaml"
		И ДанныеИерархииФайла.Количество() >= 2 Тогда
		ДанныеИерархииФайла.Удалить(ДанныеИерархииФайла.Количество() - 1);
		ДанныеФайла.Вставить("Код", ДанныеИерархииФайла[ДанныеИерархииФайла.Количество() - 1]);
		ДанныеИерархииФайла.Удалить(ДанныеИерархииФайла.Количество() - 1);
	КонецЕсли;	 
	
	Если НЕ ДанныеФайла.Свойство("Код") Тогда
		ДанныеИзКеш = ДанныеСценариев.UIDCценариев[ДанныеФайла.UID];
		Если ДанныеИзКеш <> Неопределено Тогда
			ПолноеИмяФайла = ДанныеСценариев.UIDCценариев[ДанныеФайла.UID].ПолноеИмяФайла;
			ФайлСценария = Новый Файл(ПолноеИмяФайла);
			ФайлКаталога = Новый Файл(ФайлСценария.Путь);
			ДанныеФайла.Вставить("Код", ФайлКаталога.Имя);
		КонецЕсли;	 
	КонецЕсли;	
	
	ТекКаталог = Неопределено;
	
	ИдКаталога = "";
	Для Сч = 0 По ДанныеИерархииФайла.Количество() - 1 Цикл
		Если ПустаяСтрока(ИдКаталога) Тогда
			ИдКаталога = ДанныеИерархииФайла[Сч];
		Иначе	
			ИдКаталога = ИдКаталога + "/" + ДанныеИерархииФайла[Сч];
		КонецЕсли;	
		
		ТекКаталог = УровниКаталогов[ИдКаталога];
	КонецЦикла;	
	
	Если ДанныеИерархииФайла.Количество() > 0 Тогда
		Если ТекКаталог = Неопределено Тогда
			СценарииВКорне.Добавить(ДанныеФайла);
			Возврат;
		Иначе	
			СтрокаДереваСценарий = ТекКаталог.Строки.Добавить();
		КонецЕсли;	 
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДанныеФайла", ДанныеФайла);
		ДанныеЗаполнения.Вставить("ДанныеИерархииФайла", ДанныеИерархииФайла);
		ДанныеЗаполнения.Вставить("КодыСценариев", КодыСценариев);
		ДанныеЗаполнения.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
		ДанныеЗаполнения.Вставить("КешОтветственных", КешОтветственных);
		
		ЗаполнитьДанныеСценарияВДереве(СтрокаДереваСценарий, ДанныеЗаполнения);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ОтветственныйСистемыПоДаннымСценария(СтрокаUID, КешОтветственных)
	Значение = КешОтветственных[СтрокаUID];
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтрокаUID) Тогда
		UID = Новый УникальныйИдентификатор(СтрокаUID);
		Значение = Справочники.Пользователи.ПолучитьСсылку(UID);	
		Если ЗначениеЗаполнено(Значение) Тогда
			ЗначениеРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Значение, "Наименование");
			Если ЗначениеРезультат = Неопределено Тогда
				ЗначениеРезультат = Строка(Значение);
			КонецЕсли;	
		КонецЕсли;	
		КешОтветственных.Вставить(СтрокаUID, ЗначениеРезультат);
		Возврат Значение;
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Процедура ДанныеИерархииПоСтрокеДереваРекурсивно(СтрокаДерева, Стр)
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если СтрокаДерева.ТипСтроки = 0 Тогда
		Стр = СтрокаДерева.Наименование + "/" + Стр;
	КонецЕсли;	 
	ДанныеИерархииПоСтрокеДереваРекурсивно(СтрокаДерева.ПолучитьРодителя(), Стр);
КонецПроцедуры 

&НаКлиенте
Функция ДанныеИерархииПоСтрокеДерева(СтрокаДерева)
	Стр = "";
	ДанныеИерархииПоСтрокеДереваРекурсивно(СтрокаДерева, Стр);
	
	Если Лев(Стр, 1) = "/" Тогда
		Стр = Сред(Стр, 2);
	КонецЕсли;	 
	
	Если Прав(Стр, 1) = "/" Тогда
		Стр = Лев(Стр, СтрДлина(Стр) - 1);
	КонецЕсли;	 
	
	Возврат Стр; 
КонецФункции	 

&НаКлиенте
Процедура СделатьСтрокуДереваАктивнойПоUIDРекурсивно(ДеревоСтроки, UIDСценария, ЗначениеНайдено)
	
	Если ЗначениеНайдено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если СтрокаДерева.UIDСценария = UIDСценария Тогда
			Элементы.ДеревоСценариев.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			ЗначениеНайдено = Истина;
			Прервать;
		КонецЕсли;	 
		
		СделатьСтрокуДереваАктивнойПоUIDРекурсивно(СтрокаДерева.ПолучитьЭлементы(), UIDСценария, ЗначениеНайдено)
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСтрокуДереваАктивнойПоUID(UIDСценария)
	СделатьСтрокуДереваАктивнойПоUIDРекурсивно(ДеревоСценариев.ПолучитьЭлементы(), UIDСценария, Ложь);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработкаДобавленияНовогоСценария(ДанныеСценария)
	ОбновитьДеревоСценариевПоДаннымGit();
	СделатьСтрокуДереваАктивнойПоUID(ДанныеСценария.UID);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикСоздатьСценарий()
	ТекущаяСтрока = Элементы.ДеревоСценариев.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрокаДерева = ДеревоСценариев.НайтиПоИдентификатору(ТекущаяСтрока);
	ДанныеИерархии = ДанныеИерархииПоСтрокеДерева(СтрокаДерева);
	
	ДанныеДляПолученияСценария = Новый Структура;
	ДанныеДляПолученияСценария.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеДляПолученияСценария.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеДляПолученияСценария.Вставить("Ветка", Ветка);
	ДанныеДляПолученияСценария.Вставить("Проект", ТекущийПроект);
	ДанныеДляПолученияСценария.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ДанныеДляПолученияСценария.Вставить("ДанныеИерархии", ДанныеИерархии);
	ДанныеДляПолученияСценария.Вставить("ЭтоНовыйЭлемент", Истина);
	ДанныеДляПолученияСценария.Вставить("UIDСценария", Неопределено);
	ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ДанныеДляПолученияСценария);
КонецПроцедуры 

&НаКлиенте
Процедура ОбработчикИзмененияСценария(ВыбраннаяСтрока)
	Если ПустаяСтрока(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли;	 
	
	ТекущиеДанные = ДеревоСценариев.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные.ТипСтроки = 1 Тогда
		ДанныеСценария = ДанныеСценарияПоСтрокеДерева(ТекущиеДанные);
		ОткрытьСценарийДляРедактирование(ДанныеСценария);
	КонецЕсли;	 
	
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСтрокуДереваАктивнойПоДаннымИерархииРекурсивно(ДеревоСтроки, СтрокаИерархии)
	Для Каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если СтрокаДерева.ИдКаталога = СтрокаИерархии Тогда
			Элементы.ДеревоСценариев.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
		КонецЕсли;	 
		
		СделатьСтрокуДереваАктивнойПоДаннымИерархииРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаИерархии)
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура СделатьСтрокуДереваАктивнойПоДаннымИерархии(СтрокаИерархии)
	Если ПустаяСтрока(СтрокаИерархии) Тогда
		Возврат;
	КонецЕсли;	 
	
	СделатьСтрокуДереваАктивнойПоДаннымИерархииРекурсивно(ДеревоСценариев.ПолучитьЭлементы(), СтрокаИерархии);
	
КонецПроцедуры 

&НаКлиенте
Функция УбратьЗапрещенныеСимволыИзИмениФайла(Знач Стр) 
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"""","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");
	Стр = СтрЗаменить(Стр,"|","");
	Стр = СтрЗаменить(Стр,"+","");
	
	Стр = СтрЗаменить(Стр,".","");
	
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,Символы.НПП,"");
	
	Возврат Стр;
КонецФункции

&НаКлиенте
Процедура РазвернутьВсеСтрокиДереваРекурсивно(Дерево)
	Для Каждого Элем Из Дерево.ПолучитьЭлементы() Цикл
		ИдентификаторСтроки = Элем.ПолучитьИдентификатор();
		Элементы.ДеревоСценариев.Развернуть(ИдентификаторСтроки);
		РазвернутьВсеСтрокиДереваРекурсивно(Элем);
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева()
	РазвернутьВсеСтрокиДереваРекурсивно(ДеревоСценариев);
КонецПроцедуры 

&НаКлиенте
Процедура ИзменитьПометкуУдаленияУСценария(UIDСценария, Значение = Неопределено)
	СтрокаДерева = СтрокаДереваПоUID(UIDСценария);
	Если Значение = Неопределено Тогда
		СтрокаДерева.ПометкаУдаления = НЕ СтрокаДерева.ПометкаУдаления;
	Иначе	
		СтрокаДерева.ПометкаУдаления = Значение;
	КонецЕсли;	 
КонецПроцедуры 

&НаКлиенте
Процедура СтрокиСценариевПодчиненныеРекурсивно(ИсходнаяСтрока, Результат)
	Для Каждого ТекСтр Из ИсходнаяСтрока.ПолучитьЭлементы() Цикл
		Если ТекСтр.ТипСтроки = 1 Тогда
			Результат.Добавить(ТекСтр);
		КонецЕсли;	 
		
		СтрокиСценариевПодчиненныеРекурсивно(ТекСтр, Результат)
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция СтрокиСценариевПодчиненныеДанной(ИсходнаяСтрока)
	Результат = Новый Массив;
	СтрокиСценариевПодчиненныеРекурсивно(ИсходнаяСтрока, Результат);
	Возврат Результат; 
КонецФункции	 

&НаКлиенте
Процедура СценарииСПометкойНаУдалениеРекурсивно(СтрокаДерева, Результат)
	Для Каждого ТекСтр Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если ТекСтр.ТипСтроки = 1 И ТекСтр.ПометкаУдаления Тогда
			ДанныеСценария = Новый Структура;
			ДанныеСценария.Вставить("UID", ТекСтр.UIDСценария);
			ДанныеСценария.Вставить("Имя", ТекСтр.Наименование);
			ДанныеСценария.Вставить("Код", ТекСтр.Код);
			Результат.Добавить(ДанныеСценария);
		КонецЕсли;	 
		
		СценарииСПометкойНаУдалениеРекурсивно(ТекСтр, Результат)
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Функция СценарииСПометкойНаУдаление()
	Результат = Новый Массив;
	СценарииСПометкойНаУдалениеРекурсивно(ДеревоСценариев, Результат);
	Возврат Результат; 
КонецФункции	 

#КонецОбласти