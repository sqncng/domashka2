#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АдресСлужебныеДанныеСценариев = Параметры.АдресСлужебныеДанныеСценариев;
	UID = Параметры.UID;
	UIDСценария = Параметры.UIDСценария;
	Код = Параметры.Код;
	КодСценария = Параметры.КодСценария;
	Наименование = Параметры.Наименование;
	ТокенПользователя = Параметры.ТокенПользователя;
	Проект = Параметры.Проект;
	Ветка = Параметры.Ветка;
	ИдентификаторКоммита = Параметры.ИдентификаторКоммита;
	Сценарий = Параметры.СценарийНаименование;
	Если Параметры.Свойство("ПрофильПользователяСценарий") Тогда
		ПрофильПользователяСценарий = Параметры.ПрофильПользователяСценарий;
	КонецЕсли;	 
	
	КопированиеЭлемента = Ложь;
	UIDКопируемойНастройки = Неопределено;
	Если Параметры.Свойство("КопированиеЭлемента") Тогда
		КопированиеЭлемента = Параметры.КопированиеЭлемента;
	КонецЕсли;
	Если КопированиеЭлемента Тогда
		UID = Строка(Новый УникальныйИдентификатор);
		Код = "";
		ЭтоНовыйЭлемент = Истина;
		UIDКопируемойНастройки = Параметры.UIDКопируемойНастройки;
	КонецЕсли;	 
	
	Если Параметры.Свойство("ЭтоНовыйЭлемент") Тогда
		ЭтоНовыйЭлемент = Параметры.ЭтоНовыйЭлемент;
	КонецЕсли;	 
	
	Если ЭтоНовыйЭлемент И НЕ КопированиеЭлемента Тогда
		Если ПустаяСтрока(UID) Тогда
			UID = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;	 
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = НСтр("ru='Новая настройка'");
		КонецЕсли;	 
	Иначе	
		ДанныеНастройки = Параметры.ДанныеНастройки;
		Роль = ПрофильПользователяПоСтроке(Параметры.ПрофильПользователя);
		ЭталоннаяБД = ЭталоннаяБДПоСтроке(Параметры.ЭталоннаяБаза);
		Если НЕ ПустаяСтрока(Параметры.ЭталоннаяБаза) И ПустаяСтрока(ЭталоннаяБД) Тогда
			ОшибкаПоискаЭталоннойБазы = Истина;
			ИсходнаяСтрокаЭталоннойБазы = Параметры.ЭталоннаяБаза;
		КонецЕсли;	 
		ПараметрыЗапуска = Параметры.ПараметрыЗапуска;
		ОригинальныйТекстМетаданныхНастройки = Параметры.ОригинальныйТекстМетаданныхНастройки;
		
		Если ДанныеНастройки <> Неопределено Тогда
			ТегиТеста = ДанныеНастройки["ТегиТеста"];
			Публикуется = (ДанныеНастройки["ДанныеТеста"]["Публикуется"] = "Да");
			Выключена = (ДанныеНастройки["ДанныеТеста"]["Выключена"] = "Да");
			Описание = МнострочнаяСтрокаИзДанных(ДанныеНастройки["ДанныеТеста"]["Описание"]);
			ПараметрыЗапуска = ДанныеНастройки["ДанныеТеста"]["ПараметрыЗапуска"];
			Роль = ПрофильПользователяПоСтроке(ДанныеНастройки["ДанныеТеста"]["ПрофильПользователя"]);
			ЭталоннаяБД = ЭталоннаяБДПоСтроке(ДанныеНастройки["ДанныеТеста"]["ЭталоннаяБазаИмя"]);
			ПереданныеПараметрыВходящие = Тестирование.ПараметрыСценарияИзТекстовыхДанных(ДанныеНастройки["ПараметрыТеста"]);
			Тестирование.ЗаполнитьПараметрыВходящиеИзТекстовыхДанных(ПараметрыТеста, ПереданныеПараметрыВходящие);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.ДанныеРанееИзмененныхСценариев.ЕстьИзменения Тогда
		Для Каждого ТекНастройка Из Параметры.ДанныеРанееИзмененныхСценариев.ИзмененныеНастройки Цикл
			Если ТекНастройка["ДанныеТеста"]["UID"] = UID ИЛИ ТекНастройка["ДанныеТеста"]["UID"] = UIDКопируемойНастройки Тогда
				Роль = ПрофильПользователяПоСтроке(ТекНастройка["ДанныеТеста"]["ПрофильПользователя"]);
				ЭталоннаяБД = ЭталоннаяБДПоСтроке(ТекНастройка["ДанныеТеста"]["ЭталоннаяБазаИмя"]);
				ПараметрыЗапуска = ТекНастройка["ДанныеТеста"]["ПараметрыЗапуска"];
				Описание = МнострочнаяСтрокаИзДанных(ТекНастройка["ДанныеТеста"]["Описание"]);
				ТегиТеста = ТекНастройка["ТегиТеста"];
				Наименование = ТекНастройка["ДанныеТеста"]["Имя"];
				Публикуется = (ТекНастройка["ДанныеТеста"]["Публикуется"] = "Да");
				Выключена = (ТекНастройка["ДанныеТеста"]["Выключена"] = "Да");
				
				ПереданныеПараметрыВходящие = Тестирование.ПараметрыСценарияИзТекстовыхДанных(ТекНастройка["ПараметрыТеста"]);
				Тестирование.ЗаполнитьПараметрыВходящиеИзТекстовыхДанных(ПараметрыТеста, ПереданныеПараметрыВходящие);
				
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	Если ЭтоНовыйЭлемент Тогда
		Если ПустаяСтрока(Код) Тогда
			Модифицированность = Истина;
			Код = СгенерироватьНовыйКод();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если КопированиеЭлемента Тогда
		Наименование = НСтр("ru='Новая настройка'");
	КонецЕсли;	 
	
	ТаблицаТегов.Загрузить(Тестирование.ТегиСценарияИзТекстовыхДанных(ТегиТеста));
	
	// СтандартныеПодсистемы.Свойства
	СвойстваПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект,
		"НаборСвойствДляНастроекЗапускаСценариевВыгружаемый,НаборСвойствДляНастроекЗапускаСценариевНеВыгружаемый");
	
	ГруппыДляРазмещения = Новый СписокЗначений;
	ГруппыДляРазмещения.Добавить(СвойстваПроекта.НаборСвойствДляНастроекЗапускаСценариевВыгружаемый,
		Элементы.ГруппаВыгружаемые.Имя);
	ГруппыДляРазмещения.Добавить(СвойстваПроекта.НаборСвойствДляНастроекЗапускаСценариевНеВыгружаемый,
		Элементы.ГруппаНевыгружаемые.Имя);
	ГруппыДляРазмещения.Добавить("ВсеОстальные", Элементы.ГруппаОбщие.Имя);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", ГруппыДляРазмещения);
	ОбъектНастройки = Справочники.НастройкиЗапускаСценариев.СоздатьЭлемент();
	ОбъектНастройки.Владелец = ЭталоннаяБД;
	//ДополнительныеПараметры.Вставить("Объект", ОбъектНастройки);
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);

	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект, ОбъектНастройки);
		
	// В Git можно редактировать только выгружаемые теги, поэтому остальные не отображаются.
	Элементы.ГруппаОбщие.Видимость = Ложь;
	Элементы.ГруппаНевыгружаемые.Видимость = Ложь;
	
	// Заполнение дополнительных свойств из таблицы тегов
	Для Каждого Строка Из ТаблицаТегов Цикл
		ОписаниеРеквизитов = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Наименование", Строка.Имя));
		Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитов Цикл
			 ЭтотОбъект[ОписаниеРеквизита.ИмяРеквизитаЗначение] = Истина;
		КонецЦикла;
	КонецЦикла;

	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если ОшибкаПоискаЭталоннойБазы Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'Не получилось найти эталонную базу по строке <%1>.'"), ИсходнаяСтрокаЭталоннойБазы));
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаПриЗакрытии", ЭтотОбъект);
		КнопкиДаНет = РежимДиалогаВопрос.ДаНетОтмена;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ИмяСобытия") Тогда
			Если ВыбранноеЗначение.ИмяСобытия = "ЗапуститьТест" Тогда
				ЗапуститьТестСНачала();
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВИндексИЗакрыть(Команда)
	Если Модифицированность Тогда
	 	ЗаписатьВоВременныйФайл();
	КонецЕсли;	 
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИндекс(Команда)
	Если Модифицированность Тогда
		ЗаписатьВоВременныйФайл();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура Фиксировать(Команда)
	Если Модифицированность Тогда
		ЗаписатьВоВременныйФайл();
	КонецЕсли;	 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ветка", Ветка);
	ПараметрыФормы.Вставить("Проект", Проект);
	ПараметрыФормы.Вставить("ТокенПользователя", ТокенПользователя);
	ПараметрыФормы.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ПараметрыФормы.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаФиксироватьИзменения", ПараметрыФормы, , Ветка); 
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	ТекстВопроса = НСтр("ru = 'Отменить изменения по этой настройке запуска сценария?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОбОтменеИзмененийСценариев", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК); 
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПараметрыТеста(Команда)
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
	
	ДанныеДляПолученияСценария = Новый Структура;
	ДанныеДляПолученияСценария.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеДляПолученияСценария.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеДляПолученияСценария.Вставить("Ветка", Ветка);
	ДанныеДляПолученияСценария.Вставить("Проект", Проект);
	ДанныеДляПолученияСценария.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ДанныеДляПолученияСценария.Вставить("ПолноеИмяФайла", ПолноеИмяФайлаСценарияВРепозитории(АдресСлужебныеДанныеСценариев, UIDСценария));
	ДанныеДляПолученияСценария.Вставить("UIDСценария", UIDСценария);
	
	ДанныеСценарияИзРепозитория = Неопределено;
	Для Каждого Элем Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если Элем["ДанныеСценария"]["UID"] = ДанныеДляПолученияСценария.UIDСценария Тогда
			Если Элем["ЭтоНовыйЭлемент"] = Истина Тогда
				ДанныеСценарияИзРепозитория = Элем["ДанныеСценария"];
				Прервать;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если ДанныеСценарияИзРепозитория = Неопределено Тогда
		ДанныеСценарияИзРепозитория = ТестированиеКлиент.ДанныеСценарияИзРепозитория(ДанныеДляПолученияСценария);
	КонецЕсли;	 
	
	ПерезаполнитьПараметрыТестаСервер(ДанныеРанееИзмененныхСценариев, ДанныеСценарияИзРепозитория );
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусТестов(Команда)
	UIDНастроекТестирования = Новый Массив;
	UIDНастроекТестирования.Добавить(UID);
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка, Тесты", 
		"СтатусПрохожденияТестовВВетке",
		Истина,
		Истина, 
		Ветка,
		ТестыПоUIDНастроек(UIDНастроекТестирования, Проект));
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы,,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ФормаПолучитьТекстыСценариев(Команда)
	СформироватьТекстСценарияДляПросмотра(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФормаПолучитьТекстыСценариевБезРаскраски(Команда)
	СформироватьТекстСценарияДляПросмотра(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаБДДляЗапускаТестов(Команда)
	ПараметрыЗапускаТестов = ТестированиеКлиент.ПараметрыЗапускаТестов();
	ПараметрыЗапускаТестов.Вставить("Сценарий", Наименование);
	ПараметрыЗапускаТестов.Вставить("ЗапускИзСценария",Истина);
	
	ОткрытьФорму("Обработка.НастройкиЛокальногоЗапускаСценариев.Форма", 
		ПараметрыЗапускаТестов, 
		ЭтаФорма,
		УникальныйИдентификатор,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗапускТестов(Команда)
	ЗапуститьТестСНачала();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускФреймворкаТестирования(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Ложь);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Ложь);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Истина);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РольПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапускаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПубликуетсяПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыключенаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТЧПараметрыВходящие

&НаКлиенте
Процедура ПараметрыТестаПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ПараметрыТеста.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя <> "ПараметрыТестаЗначение" Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ТипПараметра = ПредопределенноеЗначение("Перечисление.ТипПараметраСценарияИлиПроцесса.Таблица") Тогда
		ПараметрыФормы = Новый Структура("ЗначениеТаблицы", ТекущиеДанные.Значение);
		ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаУстановкиЗначенияТаблицы", ПараметрыФормы,Элементы.ПараметрыТеста,УникальныйИдентификатор);	
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТестаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЗначениеТаблицы") Тогда
			Элементы.ПараметрыТеста.ТекущиеДанные.Значение = ВыбранноеЗначение.ЗначениеТаблицы;
			Модифицированность = Истина;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыТестаПриИзменении(Элемент)
	ПеренумероватьТаблицуПараметров();
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Функция ТегиВыгружаемыеДляЗаписиВоВременныйФайл()
	// Обновление таблицы тегов из дополнительных реквизитов.
	
	ТаблицаТегов.Очистить();

	Для Каждого Набор Из Элементы.ГруппаВыгружаемые.ПодчиненныеЭлементы Цикл
		Для Каждого ЭлементДополнительногоРеквизита Из Набор.ПодчиненныеЭлементы Цикл
			ОписаниеРеквизитов = ЭтотОбъект.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ЭлементДополнительногоРеквизита.Имя));
			Для Каждого ОписаниеРеквизита Из ОписаниеРеквизитов Цикл
				ЗначениеРеквизита = ЭтотОбъект[ОписаниеРеквизита.ИмяРеквизитаЗначение];
				Если ЗначениеРеквизита Тогда
					НоваяСтрока = ТаблицаТегов.Добавить();
					НоваяСтрока.Имя = ОписаниеРеквизита.Наименование;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТегиСценария = Новый Массив;
	Индекс = 0;
	Для Каждого СтрокаТега Из ТаблицаТегов Цикл
		ДанныеТега = Новый Структура;
		Индекс = Индекс + 1;
		ДанныеТега.Вставить("НомерСтроки", Строка(Индекс));
		ДанныеТега.Вставить("Имя", СтрокаТега.Имя);
			
		ТегиСценария.Добавить(ДанныеТега);
	КонецЦикла;
	
	Возврат ТегиСценария;
КонецФункции

&НаСервере
Функция ЭталоннаяБДПоСтроке(Стр)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭталонныеБазыТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭталонныеБазыТестирования КАК ЭталонныеБазыТестирования
		|ГДЕ
		|	ЭталонныеБазыТестирования.Владелец = &Владелец
		|	И ЭталонныеБазыТестирования.Наименование = &Наименование
		|	И НЕ ЭталонныеБазыТестирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("Наименование", Стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка; 
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	 

&НаСервере
Функция ПрофильПользователяПоСтроке(Стр)
	Если НЕ ЗначениеЗаполнено(Стр) Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиПользователей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрофилиПользователей КАК ПрофилиПользователей
		|ГДЕ
		|	ПрофилиПользователей.Владелец = &Проект
		|	И ПрофилиПользователей.Наименование = &Наименование
		|	И НЕ ПрофилиПользователей.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Наименование", Стр);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	 

&НаКлиенте
Процедура ЗаписатьВоВременныйФайл()
	
	ДанныеДлаЗаписи = ДанныеДлаЗаписи();
	ТестированиеКлиент.ЗаписатьНастройкуСценарияВоВременныйФайл(ДанныеДлаЗаписи);
	Оповестить("ИзменениеВременныхФайловСценариевРаботыПользователя", ДанныеДлаЗаписи);
	Оповестить("СозданиеНовойНастройкиСценарияРаботыПользователяGit", ДанныеДлаЗаписи);
	
	Модифицированность = Ложь;
КонецПроцедуры 

&НаСервере
Функция ДанныеДлаЗаписи()
	Данные = Новый Структура;
	Данные.Вставить("Наименование", Наименование);
	Данные.Вставить("Имя", Наименование);
	Данные.Вставить("UID", UID);
	Данные.Вставить("UIDСценария", UIDСценария);
	Данные.Вставить("Код", Код);
	Данные.Вставить("КодСценария", КодСценария);
	Данные.Вставить("Проект", Проект);
	Данные.Вставить("СценарийНаименование", Сценарий);
	Данные.Вставить("ПараметрыЗапуска", ПараметрыЗапуска);
	Данные.Вставить("ИдентификаторБазы", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭталоннаяБД, "ИдентификаторБазы"));
	Данные.Вставить("ПроектUID", Строка(Проект.УникальныйИдентификатор()));
	Данные.Вставить("ПроектНаименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"));
	Данные.Вставить("ЭталоннаяБазаНаименование", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭталоннаяБД, "Наименование"));
	Данные.Вставить("ПрофильПользователя", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Роль, "Наименование"));
	Данные.Вставить("Ветка", Ветка);
	Данные.Вставить("ИмяВетки", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"));
	Данные.Вставить("ИмяПроекта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"));
	Данные.Вставить("ТегиТеста", ТегиВыгружаемыеДляЗаписиВоВременныйФайл());
	Данные.Вставить("ПараметрыТеста", ПараметрыДляЗаписиВоВременныйФайл());
	Данные.Вставить("ОригинальныйТекстМетаданныхНастройки", ОригинальныйТекстМетаданныхНастройки);
	Данные.Вставить("Публикуется", Публикуется);
	Данные.Вставить("Выключена", Выключена);
	Данные.Вставить("ЭтоНовыйЭлемент", ЭтоНовыйЭлемент);
	Данные.Вставить("ЭтоНастройкаСценария", Истина);
	Данные.Вставить("Описание", Описание);
	
	Возврат Данные; 
КонецФункции	 

&НаСервере
Функция ПараметрыДляЗаписиВоВременныйФайл()
	Массив = Новый Массив;
	Для Каждого СтрокаПараметрыВходящие Из ПараметрыТеста Цикл
		Структура = Новый Структура;
		Структура.Вставить("НомерСтроки", СтрокаПараметрыВходящие.НомСтр);
		Структура.Вставить("Имя", СтрокаПараметрыВходящие.Имя);
		Структура.Вставить("Значение", СтрокаПараметрыВходящие.Значение);
		Структура.Вставить("ТипПараметра", СтрокаПараметрыВходящие.ТипПараметра);
		Структура.Вставить("ИсходящийПараметр", СтрокаПараметрыВходящие.ИсходящийПараметр);
		
		Массив.Добавить(Структура);
		
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

&НаКлиенте
Процедура ОбработкаВопросаОбОтменеИзмененийСценариев(Результат, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ТестированиеКлиент.УдалитьВременныеФайлыСценария(Ветка, ИмяПроектаСтрокой(Проект), КодСценария, Код);
		Оповестить("ОтменаИзмененийСценариевРаботыПользователя");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Закрыть", Истина);
		ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
			"ПослеПредупреждения", ЭтаФорма, ДопПараметры);
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, НСтр("ru = 'Изменения отменены.'"));
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПредупреждения(ДопПараметры) Экспорт
	Если ДопПараметры.Закрыть Тогда
		Закрыть();
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаПриЗакрытии(Результат, ВерсияПроверки) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьВоВременныйФайл();
		Закрыть();
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПараметраПоСтроке(Стр)
	Если Стр = "Строка" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Строка; 
	ИначеЕсли Стр = "Число" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Число; 
	ИначеЕсли Стр = "Дата" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Дата; 
	ИначеЕсли Стр = "Таблица" Тогда
		Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Таблица; 
	КонецЕсли;	 
	
	Возврат Перечисления.ТипПараметраСценарияИлиПроцесса.Строка; 
КонецФункции	 

&НаСервереБезКонтекста
Функция ПреобразоватьМногострочнуюСтрокуТаблицы(Знач Стр)
	СтрСокрЛ = СокрЛ(Стр);
	Если Лев(СтрСокрЛ, 1) <> "|" Тогда
		Возврат Стр; 
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Стр,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		МассивСтрок[Ккк] = СокрЛП(МассивСтрок[Ккк]);
	КонецЦикла;	
	
	Стр = СтрСоединить(МассивСтрок,Символы.ПС);
	Возврат Стр; 
	
КонецФункции	 

&НаСервереБезКонтекста
Функция ПолноеИмяФайлаСценарияВРепозитории(АдресСлужебныеДанныеСценариев, UIDСценария)
	ДанныеСценариевКеш = ПолучитьИзВременногоХранилища(АдресСлужебныеДанныеСценариев);
	ДанныеСценария = ДанныеСценариевКеш.UIDCценариев[UIDСценария];
	Возврат ДанныеСценария.ПолноеИмяФайла; 
КонецФункции	 

&НаСервереБезКонтекста
Функция ТестыПоUIDНастроек(UIDНастроекТестирования, Проект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Тесты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Тесты КАК Тесты
	               |ГДЕ
	               |	НЕ Тесты.ПометкаУдаления
	               |	И Тесты.UIDНастройкиСценария В(&UIDНастроекТестирования)
	               |	И Тесты.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", Проект);
	Запрос.УстановитьПараметр("UIDНастроекТестирования", UIDНастроекТестирования);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ДанныеДляПолученияНастроек()
	
	Структура = Новый Структура;
	Структура.Вставить("UIDСценария", UIDСценария);
	Структура.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	
	Возврат Структура;
КонецФункции	 

&НаСервере
Функция СгенерироватьНовыйКод()
	КодыНастроекСценария = Новый Соответствие;
	СборщикСценариев = СборщикСценариев();
	ДанныеДляПолученияФайловНастроек = ДанныеРепозитория();
	ДанныеДляПолученияФайловНастроек.Вставить("ДанныеДляПолученияНастроек", ДанныеДляПолученияНастроек());
	ДанныеДляПолученияФайловНастроек.Вставить("ПолучатьДвоичныеДанныеФайлов", Истина);
	ДанныеНастроекСценарияИзРепозитория = Тестирование.ДанныеНастроекСценарияИзРепозитория(ДанныеДляПолученияФайловНастроек);
	Для Каждого ТекНастройка Из ДанныеНастроекСценарияИзРепозитория.ДанныеНастроек Цикл
		ДанныеНастройки = Тестирование.ДанныеНастройкиСценарияИзРепозитория(Проект, ТекНастройка, ТокенПользователя, Ветка, ИдентификаторКоммита); 
		Результат = Новый Соответствие;
		СчетчикСтрок = 0;
		СборщикСценариев.ЧтениеДанныхYaml(Результат,
			ДанныеНастройки.ДвоичныеДанныеФайла.ОткрытьПотокДляЧтения(), СчетчикСтрок);
		КодыНастроекСценария.Вставить(Результат["ДанныеТеста"]["Код"], Истина);
	КонецЦикла;	 

	НовыйКод = СлучайныйКод();
	Пока НЕ КодУникален(НовыйКод, КодыНастроекСценария) Цикл
		НовыйКод = СлучайныйКод();
	КонецЦикла;	 
	
	Возврат НовыйКод;
КонецФункции	 

&НаСервере
Функция СлучайныйКод()
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	Значение = XMLСтрока(ГСЧ.СлучайноеЧисло(5000, 1000000-1));
	Пока СтрДлина(Значение) < 9 Цикл
		Значение = "0" + Значение;
	КонецЦикла;	 
	Возврат Значение; 
КонецФункции	 

&НаСервере
Функция КодУникален(НовыйКод, КодыНастроекСценария)
	Если КодыНастроекСценария[НовыйКод] = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	 
КонецФункции	 

&НаСервере
Функция ДанныеРепозитория()
	Структура = Новый Структура;
	Структура.Вставить("Проект", Проект);
	Структура.Вставить("ТокенПользователя", ТокенПользователя);
	Структура.Вставить("Ветка", Ветка);
	Структура.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	Структура.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	
	Возврат Структура; 
КонецФункции	 

Функция СборщикСценариев()
	Возврат Обработки.СборкаТекстовСценариев.Создать();
КонецФункции	

&НаСервереБезКонтекста
Функция ИмяПроектаСтрокой(Проект)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"); 
КонецФункции	 

&НаСервере
Процедура ПерезаполнитьПараметрыТестаСервер(ДанныеРанееИзмененныхСценариев, ДанныеСценарияИзРепозитория)
	КопияПараметров = РеквизитФормыВЗначение("ПараметрыТеста").Скопировать();
	ПараметрыТеста.Очистить();
	
	НайденыЛокальноИзмененныеДанные = Ложь;
	Для Каждого Элем Из ДанныеРанееИзмененныхСценариев.ИзмененныеМетаданныеИТекстСценария Цикл
		Если Элем["ДанныеСценария"]["UID"] = UIDСценария Тогда
			НайденыЛокальноИзмененныеДанные = Истина;
			
			Для Каждого ТекПараметр Из Элем["ПараметрыСценария"] Цикл
				СтрокаПараметрыВходящие = ПараметрыТеста.Добавить();
				СтрокаПараметрыВходящие.НомСтр = ТекПараметр["НомерСтроки"];
				СтрокаПараметрыВходящие.Имя = ТекПараметр["Имя"];
				СтрокаПараметрыВходящие.Значение = ТекПараметр["Значение"];
				СтрокаПараметрыВходящие.ТипПараметра = ТипПараметраПоСтроке(ТекПараметр["ТипПараметра"]);
				Если СтрокаПараметрыВходящие.ТипПараметра
						= ПредопределенноеЗначение("Перечисление.ТипПараметраСценарияИлиПроцесса.Таблица") Тогда
					СтрокаПараметрыВходящие.Значение = ПреобразоватьМногострочнуюСтрокуТаблицы(ТекПараметр["Значение"]);
				КонецЕсли;	 
				СтрокаПараметрыВходящие.ИсходящийПараметр = (ТекПараметр["ИсходящийПараметр"] = "Да");
			КонецЦикла;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	Если НЕ НайденыЛокальноИзмененныеДанные Тогда
		
		Для Каждого ТекПараметр Из ДанныеСценарияИзРепозитория["ПараметрыСценария"] Цикл
			СтрокаПараметрыВходящие = ПараметрыТеста.Добавить();
			СтрокаПараметрыВходящие.НомСтр = ТекПараметр["НомерСтроки"];
			СтрокаПараметрыВходящие.Имя = ТекПараметр["Имя"];
			СтрокаПараметрыВходящие.Значение = ТекПараметр["Значение"];
			СтрокаПараметрыВходящие.ТипПараметра = ТипПараметраПоСтроке(ТекПараметр["ТипПараметра"]);
			Если СтрокаПараметрыВходящие.ТипПараметра
					= ПредопределенноеЗначение("Перечисление.ТипПараметраСценарияИлиПроцесса.Таблица") Тогда
				СтрокаПараметрыВходящие.Значение = ПреобразоватьМногострочнуюСтрокуТаблицы(ТекПараметр["Значение"]);
			КонецЕсли;	 
			СтрокаПараметрыВходящие.ИсходящийПараметр = (ТекПараметр["ИсходящийПараметр"] = "Да");
		КонецЦикла;	 
	КонецЕсли;	 
	
	Для Каждого СтрокаПараметрыТеста Из ПараметрыТеста Цикл
		СтрокаКопияПараметров = КопияПараметров.Найти(СтрокаПараметрыТеста.Имя, "Имя");
		Если СтрокаКопияПараметров <> Неопределено Тогда
			СтрокаПараметрыТеста.Значение = СтрокаКопияПараметров.Значение;
			СтрокаПараметрыТеста.ТипПараметра = СтрокаКопияПараметров.ТипПараметра;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура СформироватьТекстСценарияДляПросмотра(ДелатьРаскраскуТекста)
	
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
	СтруктураПараметров = Новый Структура; 
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(СтруктураПараметров);
	СтруктураПараметров.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	ТекущиеДанныеСценария = ТестированиеКлиент.ТекущиеДанныеСценария(СтруктураПараметров);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	ДопПараметры.Вставить("ФорматироватьТолькоПервыйУровеньПодсценариев", Ложь);
	ДопПараметры.Вставить("ТекущиеДанныеСценария", ТекущиеДанныеСценария);
	ДопПараметры.Вставить("НастройкаСценарияGit", ДанныеНастройкиСценарияКлиент());
	ТекстСценария = ПолучитьТекстыСценариевСервер(Модифицированность, ДопПараметры);
	Если ТекстСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ДелатьРаскраскуТекста Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ТекстСценария);
		ТекстовыйДокумент.Показать(Наименование);
		Возврат;
	КонецЕсли;	 
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ТекстСценария",ТекстСценария);
	ПараметрыСценария.Вставить("Проект",Проект);
	ПараметрыСценария.Вставить("Сценарий",Наименование);
	ПараметрыСценария.Вставить("ДанныеРанееИзмененныхСценариев",ДанныеРанееИзмененныхСценариев);
	ДопПараметры = Новый Структура;
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ДопПараметры);
	ПараметрыСценария.Вставить("ДопПараметры", ДопПараметры);
	
	ОткрытьФорму("Справочник.НастройкиЗапускаСценариев.Форма.Сценарии",ПараметрыСценария,,Истина);
КонецПроцедуры 

&НаСервере
Процедура ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(СтруктураПараметров)
	СтруктураПараметров.Вставить("ЧтениеИзGit", Истина);
	СтруктураПараметров.Вставить("ЧтениеИзТекста", Ложь);
	СтруктураПараметров.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	СтруктураПараметров.Вставить("ФункцияСистемы", Неопределено);
	СтруктураПараметров.Вставить("Проект", Проект);
	СтруктураПараметров.Вставить("ТокенПользователя", ТокенПользователя);
	СтруктураПараметров.Вставить("Ветка", Ветка);
	СтруктураПараметров.Вставить("ТаблицаТегов", ТаблицаТегов);
	СтруктураПараметров.Вставить("КодСценарияGit", КодСценария);
	СтруктураПараметров.Вставить("ПрофильПользователяGit", Роль);
	Если НЕ ЗначениеЗаполнено(Роль) И ЗначениеЗаполнено(ПрофильПользователяСценарий) Тогда
		СтруктураПараметров.Вставить("ПрофильПользователяGit", ПрофильПользователяСценарий);
	КонецЕсли;	 
	СтруктураПараметров.Вставить("UIDСценария", UIDСценария);
	СтруктураПараметров.Вставить("ТекущиеПараметрыВходящие", ПараметрыВходящиеДляЗаписиВоВременныйФайл());
	СтруктураПараметров.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
КонецПроцедуры 

&НаСервере
Функция ПолучитьТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры)
	ОбъектТекстыСценариев = ОбъектнуюМодельТекстыСценариевСервер(Наименование,ФлагМодифицированности,ДополнительныеПараметры);
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ОбъектТекстыСценариев",ОбъектТекстыСценариев);
	ПараметрыСценария.Вставить("Процесс",Наименование);
	ПараметрыСценария.Вставить("ШагиДоТеста",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПроверка",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПослеТеста",Новый ТаблицаЗначений);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ПараметрыСценария);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
			ПараметрыСценария.Вставить("ДанныеРанееИзмененныхСценариев",
				ДополнительныеПараметры.ДанныеРанееИзмененныхСценариев);
		КонецЕсли;	 
		
		Если ДополнительныеПараметры.Свойство("СТекущегоШага") Тогда
			ПараметрыСценария.Вставить("СТекущегоШага",ДополнительныеПараметры.СТекущегоШага);
			Если ДополнительныеПараметры.СТекущегоШага Тогда
				ПараметрыСценария.Вставить("ТекущийНомерСтрокиСценария",ДополнительныеПараметры.ТекущийНомерСтрокиСценария);
			Иначе	
				ПараметрыСценария.Вставить("ТекущийНомерСтрокиСценария",Неопределено);
			КонецЕсли;	 
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("НастройкаСценарияGit") Тогда
			ПараметрыСценария.Вставить("НастройкаСценарияGit",ДополнительныеПараметры.НастройкаСценарияGit);
		КонецЕсли;	
	КонецЕсли;	 
	
	ПараметрыСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	ПараметрыСценария.Вставить("ЧтениеИзТекста",Ложь);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ИсключитьСлужебныеСловаИзТекстаСценария") Тогда
			ПараметрыСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",
			ДополнительныеПараметры.ИсключитьСлужебныеСловаИзТекстаСценария);
		КонецЕсли;	 
	КонецЕсли;	 
	
	НастройкиБДДляЗапускаТестовИзСценария = Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
	
	Если НастройкиБДДляЗапускаТестовИзСценария <> Неопределено Тогда
		ПараметрыСценария.Вставить("БазаДанных",НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза);
	Иначе	
		ПараметрыСценария.Вставить("БазаДанных",Неопределено);
	КонецЕсли;	 
	
	Возврат Тестирование.ТекстСценария(ПараметрыСценария);
КонецФункции	

&НаСервере
Функция ПараметрыВходящиеДляЗаписиВоВременныйФайл()
	Массив = Новый Массив;
	Для Каждого СтрокаПараметрыВходящие Из ПараметрыТеста Цикл
		Структура = Новый Структура;
		Структура.Вставить("НомерСтроки", СтрокаПараметрыВходящие.НомСтр);
		Структура.Вставить("Имя", СтрокаПараметрыВходящие.Имя);
		Структура.Вставить("Значение", СтрокаПараметрыВходящие.Значение);
		Структура.Вставить("ТипПараметра", СтрокаПараметрыВходящие.ТипПараметра);
		Структура.Вставить("ИсходящийПараметр", СтрокаПараметрыВходящие.ИсходящийПараметр);
		
		Массив.Добавить(Структура);
		
	КонецЦикла;	 
	
	Возврат Массив;
КонецФункции	 

&НаСервере
Процедура ДополнитьПараметрыНастройкиПараметрамиСценария(ПараметрыВходящие, ТекущиеДанныеСценария)
	Для Каждого ТекПараметр Из ТекущиеДанныеСценария["ПараметрыСценария"] Цикл
		СтрокаПараметрыВходящие = ПараметрыВходящие.Найти(ТекПараметр["Имя"], "Имя");
		Если СтрокаПараметрыВходящие = Неопределено Тогда
			СтрокаПараметрыВходящие = ПараметрыВходящие.Добавить();
			СтрокаПараметрыВходящие.Имя = ТекПараметр["Имя"];
			СтрокаПараметрыВходящие.Значение = ТекПараметр["Значение"];
			СтрокаПараметрыВходящие.ИсходящийПараметр = (НРег(ТекПараметр["ИсходящийПараметр"]) = "да");
			СтрокаПараметрыВходящие.ТипПараметра = ТипПараметраПоСтроке(ТекПараметр["ТипПараметра"]);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Функция ОбъектнуюМодельТекстыСценариевСервер(ОбъектСервер,ФлагМодифицированности,
	      ДополнительныеПараметры)
	ТаблицаПараметрыВходящие = ПараметрыТеста.Выгрузить();
	ДополнитьПараметрыНастройкиПараметрамиСценария(ТаблицаПараметрыВходящие, ДополнительныеПараметры.ТекущиеДанныеСценария);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаПараметров",ТаблицаПараметрыВходящие);
	СтруктураПараметров.Вставить("ДоТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ПроверкаТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ПослеТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ДеревоСхемы", Неопределено);
	СтруктураПараметров.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(СтруктураПараметров);
	
	СтруктураПараметров.Вставить("ФункцияСистемы",
		ФункцияСистемыПоДаннымСценария(ДополнительныеПараметры.ТекущиеДанныеСценария["ДанныеСценария"]["UIDФункцияСистемы"]));
	
	СтруктураПараметров.Вставить("UIDРазделПроекта",
		ДополнительныеПараметры.ТекущиеДанныеСценария["ДанныеСценария"]["UIDРазделПроекта"]);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("UIDСценариевКомпиляции") Тогда
			СтруктураПараметров.Вставить("UIDСценариевКомпиляции",
				ДополнительныеПараметры.UIDСценариевКомпиляции);
		КонецЕсли;	 
		Если ДополнительныеПараметры.Свойство("ДанныеРанееИзмененныхСценариев") Тогда
			СтруктураПараметров.Вставить("ДанныеРанееИзмененныхСценариев",
				ДополнительныеПараметры.ДанныеРанееИзмененныхСценариев);
		КонецЕсли;	 
			
		Если ДополнительныеПараметры.Свойство("СТекущегоШага") Тогда
			СтруктураПараметров.Вставить("СТекущегоШага",ДополнительныеПараметры.СТекущегоШага);
			Если ДополнительныеПараметры.СТекущегоШага Тогда
				СтруктураПараметров.Вставить("ТекущийНомерСтрокиСценария",ДополнительныеПараметры.ТекущийНомерСтрокиСценария);
			Иначе	
				СтруктураПараметров.Вставить("ТекущийНомерСтрокиСценария",Неопределено);
			КонецЕсли;	 
		КонецЕсли;	 
		Если ДополнительныеПараметры.Свойство("НастройкаСценарияGit") Тогда
			СтруктураПараметров.Вставить("НастройкаСценарияGit",ДополнительныеПараметры.НастройкаСценарияGit);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ТестированиеГрафическиеСхемыСервер.ТекстыСценариев(ОбъектСервер,СтруктураПараметров);
КонецФункции	

&НаСервереБезКонтекста
Функция ФункцияСистемыПоДаннымСценария(UIDФункцияСистемы)
	Если ЗначениеЗаполнено(UIDФункцияСистемы) Тогда
		UID = Новый УникальныйИдентификатор(UIDФункцияСистемы);
		Возврат Справочники.ФункцииСистемы.ПолучитьСсылку(UID);	
	КонецЕсли;	 
КонецФункции

&НаКлиенте
Процедура ЗапуститьТестСНачала()
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Истина);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Ложь);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Ложь);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия) 
	#Если НЕ ВебКлиент Тогда
		
	ТестированиеКлиент.ПодключитьФреймВоркТестирования(ЭтаФорма.УникальныйИдентификатор,
	"ОткрытьФормуФреймворкаТестированияПродолжение",ЭтаФорма,ПараметрыОткрытия);	
		
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФреймворкаТестированияПродолжение(Результат,Адрес,ПомещаемыйФайл,ДополнительныеПараметры) Экспорт
	Если НЕ Результат Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		   НСтр("ru = 'Не получилось подключить файл %1.'"),ПомещаемыйФайл);
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда
		
	ИмяОбработки = ТестированиеСлужебныйВызовСервера.ПодключитьВнешнююОбработкуСервер(Адрес);
		
	ПараметрыОткрытия = ДополнительныеПараметры;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",Ложь);
	ДополнительныеПараметры.Вставить("СТекущегоШага",ПараметрыОткрытия.СТекущегоШага);
	
	ДополнительныеПараметры.Вставить("ПрисоединенныеФайлы",Неопределено);
	ДополнительныеПараметры.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
	
	ДополнительныеПараметры.Вставить("UIDСценариевКомпиляции", Новый Соответствие);
	ДополнительныеПараметры.UIDСценариевКомпиляции.Вставить(UIDСценария, Истина);
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);	
	ДополнительныеПараметры.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, Проект);
	СтруктураПараметров = Новый Структура; 
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(СтруктураПараметров);
	СтруктураПараметров.Вставить("ДанныеРанееИзмененныхСценариев", ДанныеРанееИзмененныхСценариев);
	ТекущиеДанныеСценария = ТестированиеКлиент.ТекущиеДанныеСценария(СтруктураПараметров);	
	ДополнительныеПараметры.Вставить("ТекущиеДанныеСценария", ТекущиеДанныеСценария);
	
	ТекстСценариев = ПолучитьОтформатированныеТекстыСценариевКлиент(Модифицированность,ДополнительныеПараметры);
	Если ТекстСценариев = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	НастройкиБДДляЗапускаТестовИзСценария = НастройкиБДДляЗапускаТестовИзСценария();
	
	ТестированиеКлиент.ЗаменитьСтрокуПодключенияПрофиляTestClient(
     	ТекстСценариев,НастройкиБДДляЗапускаТестовИзСценария, Роль);
	
	ДанныеПараметрыЗапуска = Новый Структура;
	ДанныеПараметрыЗапуска.Вставить("ТекстСценариев",ТекстСценариев);
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Роль);
	ДанныеПараметрыЗапуска.Вставить("МассивРолей",МассивРолей);
	ДанныеПараметрыЗапуска.Вставить("УникальныйИдентификатор",УникальныйИдентификатор);
	ДанныеПараметрыЗапуска.Вставить("ПараметрыОткрытия",ПараметрыОткрытия);
	ДанныеПараметрыЗапуска.Вставить("НастройкиБДДляЗапускаТестовИзСценария",НастройкиБДДляЗапускаТестовИзСценария);
	ДанныеПараметрыЗапуска.Вставить("ПрисоединенныеФайлы",ДополнительныеПараметры.ПрисоединенныеФайлы);
	ДанныеПараметрыЗапуска.Вставить("СТекущегоШага",ПараметрыОткрытия.СТекущегоШага);
	ДанныеПараметрыЗапуска.Вставить("ЗагрузкаСценария",ПараметрыОткрытия.ЗагрузкаСценария);
	ДанныеПараметрыЗапуска.Вставить("ЗапускСценария",ПараметрыОткрытия.ЗапускСценария);
	ДанныеПараметрыЗапуска.Вставить("ЭтоПроцесс",Ложь);
	ДанныеПараметрыЗапуска.Вставить("ИмяОбработки",ИмяОбработки);
	
	ДанныеПараметрыЗапуска.Вставить("UIDСценариевКомпиляции", ДополнительныеПараметры.UIDСценариевКомпиляции);
	ДополнитьСтруктуруПараметровОбязятельнымиЗначениями(ДанныеПараметрыЗапуска);
	
	ДанныеПараметрыЗапуска.Вставить("НадоСчитатьТекущийPIDTestManager",Ложь);
	
	ТестированиеКлиент.ОткрытьФормуФреймворкаТестирования(ДанныеПараметрыЗапуска);
	
	Если ДанныеПараметрыЗапуска.НадоСчитатьТекущийPIDTestManager Тогда
		КоличествоСекундПроверкиPIDTestManager = 0;
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ТаймаутЗапускаTestManager") Тогда
			Если ЗначениеЗаполнено(НастройкиБДДляЗапускаТестовИзСценария.ТаймаутЗапускаTestManager) Тогда
				КоличествоСекундПроверкиPIDTestManager = НастройкиБДДляЗапускаТестовИзСценария.ТаймаутЗапускаTestManager;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(КоличествоСекундПроверкиPIDTestManager) Тогда
			КоличествоСекундПроверкиPIDTestManager = 60;
		КонецЕсли;	 
		
		ПрошлоСекундПроверкиPIDTestManager = 0;
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры 

&НаКлиенте
Функция ПолучитьОтформатированныеТекстыСценариевКлиент(ФлагМодифицированности,ДополнительныеПараметры)
	ТекстСценария = ПолучитьОтформатированныеТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры);
	
	Возврат ТекстСценария;
КонецФункции

&НаСервереБезКонтекста
Функция НастройкиБДДляЗапускаТестовИзСценария()
	Возврат Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
КонецФункции	

&НаСервере
Функция ПолучитьОтформатированныеТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры)
	ФД                    = Новый ФорматированныйДокумент;
	ТекстСценария         = ПолучитьТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры);
	Если ТекстСценария = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ДополнительныеПараметры.Свойство("ПрисоединенныеФайлы") Тогда
		ДополнительныеПараметры.ПрисоединенныеФайлы = Новый Массив;
	КонецЕсли;	 
	
	Если НЕ ДополнительныеПараметры.ДелатьРаскраску Тогда
		ТестированиеГрафическиеСхемыСервер.ВернутьУгловыеСкобки(ТекстСценария);
		Возврат ТекстСценария;
	КонецЕсли;	 
	
	ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры);
	
	Возврат ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры);
КонецФункции

&НаСервере
Процедура ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры)
	
	ТестированиеГрафическиеСхемыСервер.ТекстФорматированныйТекстСценарияИзОбычногоТекста(ТекстСценария,
	          ФД,Проект,Наименование,ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Функция ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры)
	Возврат ТестированиеГрафическиеСхемыСервер.ОбычныйТекстСценарияИзФорматированногоДокумента(ФД,ДополнительныеПараметры);
КонецФункции	

&НаСервере
Функция МнострочнаяСтрокаИзДанных(Данные)
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Возврат СтрСоединить(Данные, Символы.ПС); 
	КонецЕсли;	 
	
	Возврат Данные; 
КонецФункции	 

&НаКлиенте
Процедура ПеренумероватьТаблицуПараметров()
	
	НомСтр = 0;
	Для Каждого СтрокаПараметрыТеста Из ПараметрыТеста Цикл
		НомСтр = НомСтр + 1;
		СтрокаПараметрыТеста.НомСтр = НомСтр;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеНастройкиСценарияКлиент()
	
	Структура = Новый Структура;	
	Структура.Вставить("Код", Код);
	Структура.Вставить("UID", UID);
	Структура.Вставить("Наименование", Наименование);
	Структура.Вставить("ЭталоннаяБД", ЭталоннаяБД);
	Возврат Структура;
	
КонецФункции	

#КонецОбласти
