#Область ПеременныеФормы

&НаКлиенте
Перем ЗакладкиРедактора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Описание, РедактируемыйОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(СхемаПроцессаТекст,
	                                            РедактируемыйОбъект.ХранилищеСхемаТекст);
												
	ДелатьРаскраску = ДелатьРаскраску();
	
	СтроитьДерево = Истина;
	Если Параметры.Свойство("СтроитьДерево") Тогда
		СтроитьДерево = Параметры.СтроитьДерево;
	КонецЕсли;	 
												
	СхемаИзХранилища = РедактируемыйОбъект.ХранилищеСхемаBPMN.Получить();
	Если ТипЗнч(СхемаИзХранилища) = Тип("ГрафическаяСхема") Тогда
		СхемаПроцессаBPMNОсновная = СхемаИзХранилища;
		СхемаПроцессаBPMNТекущая  = СхемаПроцессаBPMNОсновная;
	КонецЕсли;
	
	Если СтроитьДерево Тогда
		ДеревоСхемыИзХранилища = ТестированиеГрафическиеСхемыСервер.ДеревоСценарияИзБазыДанных(
	                                                                    РедактируемыйОбъект.Ссылка);
	КонецЕсли;	 
																	
	Если ТипЗнч(ДеревоСхемыИзХранилища) = Тип("ДеревоЗначений") Тогда
        Попытка
			ЗначениеВРеквизитФормы(ДеревоСхемыИзХранилища,"ДеревоСхемы");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Описание, ТекущийОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(СхемаПроцессаТекст,
	                                                ТекущийОбъект.ХранилищеСхемаТекст);
	ТекущийОбъект.Описание   = Описание.ПолучитьТекст();
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ТекущийОбъект.СхемаТекст = Объект.ОбычныйТекст;
	Иначе	
		ТекущийОбъект.СхемаТекст = СхемаПроцессаТекст.ПолучитьТекст();
	КонецЕсли;	
	
	ТекущийОбъект.ХранилищеСхемаBPMN      = Новый ХранилищеЗначения(СхемаПроцессаBPMNОсновная);
	
	ДеревоСхемыСервер                     = РеквизитФормыВЗначение("ДеревоСхемы");
	КопияДерева                           = ДеревоСхемыСервер.Скопировать();
	ОставитьВДеревеСхемыТолькоСтрокиСвоегоСценария(КопияДерева);
	ТекущийОбъект.ХранилищеСтруктурыСхемы = Новый ХранилищеЗначения(КопияДерева);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ОтключитьОбработчикОжидания("ОбновитьТекущийPIDTestManager");
	ОтключитьОбработчикОжидания("ПроверкаМодифицированностиВкладкиОсновногоРедактора");
	
	Если НадоУдалитьКаталогРедактора Тогда
		Попытка
			УдалитьФайлы(КаталогРедактора);
		Исключение
			ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("РедакторСценариев","Ошибка",ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьЗначения(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.Свойства
	СвойстваПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец,
		"НаборСвойствДляСценариевРаботыПользователейВыгружаемый,НаборСвойствДляСценариевРаботыПользователейНеВыгружаемый");
	
	ГруппыДляРазмещения = Новый СписокЗначений;
	ГруппыДляРазмещения.Добавить(СвойстваПроекта.НаборСвойствДляСценариевРаботыПользователейВыгружаемый,
		Элементы.ГруппаВыгружаемые.Имя);
	ГруппыДляРазмещения.Добавить(СвойстваПроекта.НаборСвойствДляСценариевРаботыПользователейНеВыгружаемый,
		Элементы.ГруппаНевыгружаемые.Имя);
	ГруппыДляРазмещения.Добавить("ВсеОстальные", Элементы.ГруппаОбщие.Имя);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", ГруппыДляРазмещения);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ТипРедактора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	    "Тестирование", "ТипРедактораВСценарииТестирования");
	
	Если НЕ ЗначениеЗаполнено(ТипРедактора) Тогда
		ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент();
	КонецЕсли;
	
	ВидимостьПанелиШагов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	    "Справочник.СценарииРаботыПользователей.ФормаЭлемента", "ВидимостьПанелиШагов");
	Если ТипЗнч(ВидимостьПанелиШагов) = Тип("Булево") Тогда
		Элементы.ГруппаИзвестныеШаги.Видимость = ВидимостьПанелиШагов;
	КонецЕсли;	 
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	    "Справочник.СценарииРаботыПользователей.ФормаЭлемента", "ТекущаяСтраницаФормыМикропроцесса");
	Если СохраненноеЗначение <> Неопределено Тогда
		Страница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.Найти(СохраненноеЗначение);
		Если Страница <> Неопределено Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Страница;
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.Свойство("СоздатьШаблон") И Параметры.СоздатьШаблон Тогда
		Объект.Наименование = Параметры.ИмяШаблона;
		Текст = Параметры.Текст;
		Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
			ТекстРедактораПослеИнициализации = Текст;
		Иначе
			ТестированиеГрафическиеСхемыСервер.СделатьСтандартнуюПодготовкуТекстаHTML(Текст);
			ШаблонHTML = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML");
			ТекстHTML  = ШаблонHTML.ПолучитьТекст();
			ТекстHTML  = СтрЗаменить(ТекстHTML,"<ПроизвольныйТекст>",Текст);
			СхемаПроцессаТекст.УстановитьHTML(ТекстHTML,Новый Структура);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
	КонецЕсли;
	
	Если Параметры.Свойство("ПерейтиКСтрокеСценария") Тогда
		ПерейтиКНужнойСтрокеСценария = Параметры.ПерейтиКСтрокеСценария;
	КонецЕсли;	 
	
	ДелатьРаскраску = ДелатьРаскраску();
	
	ТекстСхемыПроцесса = СхемаПроцессаТекст.ПолучитьТекст();
	Если ЗначениеЗаполнено(ТекстСхемыПроцесса) Тогда
		Если ДелатьРаскраску Тогда
			Объект.ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
		КонецЕсли;	 
	КонецЕсли;	 
	
	УправлениеВидимостьюЭлементовСервер();
	ПутьКСхемеТекущийИд = -1;
	ПутьКСхемеСписок.Добавить(ПутьКСхемеТекущийИд,"Основная");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СписокИспользуетсяВСценариях.Параметры.УстановитьЗначениеПараметра("СценарийОтбор", Объект.Ссылка);
		СписокИспользуетсяВПроцессах.Параметры.УстановитьЗначениеПараметра("СценарийОтбор", Объект.Ссылка);
	Иначе	
		СписокИспользуетсяВСценариях.Параметры.УстановитьЗначениеПараметра("СценарийОтбор",
		    Справочники.СценарииРаботыПользователей.ПустаяСсылка());
		СписокИспользуетсяВПроцессах.Параметры.УстановитьЗначениеПараметра("СценарийОтбор",
		    Справочники.СценарииРаботыПользователей.ПустаяСсылка());
	КонецЕсли;
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ЕстьКешФайловРедактораСценариев = СтандартныеПодсистемыСервер.ПараметрыКлиентаНаСервере().Получить("ЕстьКешФайловРедактораСценариев");
		Если ЕстьКешФайловРедактораСценариев <> Истина Тогда
			ДвоичныеДанные = ПолучитьОбщийМакет("РедакторТекстов");
			МакетРедактора = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		Иначе
			ЕстьКешВПараметрахСеанса = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	ДоступностьКнопокСменыРедактораСервер(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Модифицированность Тогда
		Попытка
			ОтформатироватьСхемаПроцессаТекстКлиент();
		Исключение
			Отказ = Истина;
				ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		Объект.ОбычныйТекст = ТекущийТекстСценарияОсновногоРедактора();
		СброситьПризнакМодифицированностиВкладкиРедактора();
	КонецЕсли;	
	
	СохранитьТекущуюСхемуВДерево(ПутьКСхемеТекущийИд,СхемаПроцессаBPMNТекущая);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Элементы.ОбычныйТекст.Видимость Тогда
		ЭтаФорма.ТекущийЭлемент = Элементы.ОбычныйТекст;
	Иначе	
		ЭтаФорма.ТекущийЭлемент = Элементы.СхемаПроцессаТекст;
	КонецЕсли;	 
	
	Если ПерейтиКНужнойСтрокеСценария > 0 Тогда
		ПодключитьОбработчикОжидания("ПерейтиКНужнойСтрокеСценарияОбработчикОжидания",0.1,Истина);
	КонецЕсли;	 
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		СменитьРедакторСценарияНаОсновнойСлужебный();
	Иначе
		ПодключитьОбработчикОжиданияМодифицированностиОсновногоРедактора();
	КонецЕсли;
	
	Если ТипРедактора <> ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ДоступностьКнопокСменыРедактораКлиент(Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ИмяСобытия") Тогда
			Если ВыбранноеЗначение.ИмяСобытия = "СозданиеШаблонаСценария" Тогда
				Если ЗначениеЗаполнено(Объект.Код) Тогда
					ПозицияНачала    = 0;
					ПозицияОкончания = 0;
					
					Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
						Текст = "И " + ВыбранноеЗначение.ИмяШаблона;
						
						ЭкземплярРедактор= ТекущаяВкладкаРедактора();
						ВыделеннаяОбласть = ЭкземплярРедактор.getSelection();
						НачалоДиапазона = ВыделеннаяОбласть.startLineNumber;
						ОкончаниеДиапазона = ВыделеннаяОбласть.endLineNumber;
						
						ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(ОкончаниеДиапазона);
						
						Соответствие = new Соответствие;
						Соответствие.Вставить("startLineNumber", НачалоДиапазона);
						Соответствие.Вставить("startColumn", 1);
						Соответствие.Вставить("endLineNumber", ОкончаниеДиапазона);
						Соответствие.Вставить("endColumn", СтрДлина(ПолныйТекстСтроки) + 1);
						ЭкземплярРедактор.insertText(Текст, РедакторСценариевКлиент.ЗаписатьОбъектJSON(Соответствие));
						
					Иначе	
						Текст = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
						
						СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
						СхемаПроцессаТекст.Вставить(ПозицияНачала,"И " + ВыбранноеЗначение.ИмяШаблона);
					КонецЕсли;
					
					Модифицированность = Истина;
				КонецЕсли;	 
			ИначеЕсли ВыбранноеЗначение.ИмяСобытия = "ЗапуститьТест" Тогда
				ЗапуститьТестСНачала();
			ИначеЕсли ВыбранноеЗначение.ИмяСобытия = "ВыборПараметровСценария" Тогда
				СтрокаПараметров = "";
				Для Каждого ТекПараметр Из ВыбранноеЗначение.ПараметрыСценария Цикл
					СтрокаПараметров = СтрокаПараметров + ТекПараметр + " = ''" + Символы.ПС;
				КонецЦикла;
				ДобавитьСтрокуПараметровВРедактор(СтрокаПараметров);
			КонецЕсли;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ПередачаТекстаСценарияИзФормаЗагрузкиСхемыИзТекста" Тогда
		УстановитьТекстВСхемаПроцессаТекстСервер(Параметр);
		ОтформатироватьСхемаПроцессаТекстКлиент();
	ИначеЕсли ИмяСобытия = "РедактированиеТаблицыРедактора" Тогда
		Если Параметр.UID <> УникальныйИдентификатор Тогда
			Возврат;
		КонецЕсли;	
		
		МассивТаблицы = Параметр.МассивСтрок; 
		ЗаменитьТаблицуРедактораПослеРедактирования(МассивТаблицы);
	КонецЕсли;	 
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СхемаПроцессаBPMNВыбор(Элемент)
	ТекущийЭлементСхемы = Элемент.ТекущийЭлемент;
	Если ТекущийЭлементСхемы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Подсценарий = Неопределено;
	СхемаПроцессаBPMNВыборСервер(ТекущийЭлементСхемы.Имя,Подсценарий);
	Если Подсценарий <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", Подсценарий);
		ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаЭлемента",ПараметрыОткрытия);
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйТекстПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокШагиСценариевПриАктивизацииСтроки(Элемент)
	ТекЭлемент = Элементы.ДинамическийСписокШагиСценариев.ТекущаяСтрока;
	Если НЕ ЗначениеЗаполнено(ТекЭлемент) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеИзвестногоШага = ОписаниеШагаИзСписка(ТекЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокШагиСценариевВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПозицияНачала    = 0;
	ПозицияОкончания = 0;
	Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Если ПозицияНачала = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если СокрЛП(СхемаПроцессаТекст.ПолучитьТекст()) = "" Тогда
		Возврат;
	КонецЕсли;	 
	
	ПозицияНачала = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияНачала);
	ПозицияОкончания = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	
	ПозицияСтрокиНачало    = -1;
	ПозицияСтрокиОкончание = -1;
	
	Текст                 = СхемаПроцессаТекст.ПолучитьТекст();
	СтрокаТекстаПоПозиции = ПолучитьСтрокуТекстаПоПозиции(Текст,ПозицияНачала,ПозицияСтрокиНачало,ПозицияСтрокиОкончание);
	
	ТекстШага = ТекстШагаИзЭлементаИзвестныеШаги(ВыбраннаяСтрока);
	
	ЗакладкаНачало    = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ПозицияСтрокиНачало-1);
	ЗакладкаОкончание = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ПозицияСтрокиОкончание);
	СхемаПроцессаТекст.Удалить(ЗакладкаНачало,ЗакладкаОкончание);
	СхемаПроцессаТекст.Вставить(ЗакладкаНачало,ТекстШага);
КонецПроцедуры

&НаКлиенте
Процедура ФункцияСистемыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Владелец);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ФункцииСистемы.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.ФункцияСистемы,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РедакторHTMLДокументСформирован(Элемент)
	Если НЕ РедакторИнициализирован Тогда
		ИнициализироватьРедактор();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ДоступностьКнопокСменыРедактораКлиентОбработчик",0.1,Истина);
	
	Если ЗначениеЗаполнено(ТекстРедактораПослеИнициализации) Тогда
		ПодключитьОбработчикОжидания("УстановитьТекстРедактораОбработчик", 1, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	НужноЗакрытьФорму = Ложь;
	
	Element = ДанныеСобытия.Element;
	Если Element.id = "VanessaEditorEventForwarder" Тогда
		Пока Истина Цикл
			msg = Элементы.РедакторHTML.Document.defaultView.popVanessaMessage();
			Если (msg = Неопределено) Тогда
				Прервать;
			КонецЕсли;
			
			Если msg.type = "PRESS_ESCAPE" Тогда
				НужноЗакрытьФорму = Истина;
			ИначеЕсли msg.type = "PRESS_CTRL_S" Тогда
				Записать();
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
	Если НужноЗакрытьФорму Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ВывестиТекстHTML(Команда)
	ТекстHTML = "";
	СхемаПроцессаТекст.ПолучитьHTML(ТекстHTML,Новый Структура);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстHTML);
КонецПроцедуры

&НаКлиенте
Процедура ОтформатироватьСхемуТекст(Команда)
	ОтформатироватьСценарий();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСхемуВФайл(Команда)
	ГрафическиеСхемыКлиент.ВыгрузитьСхемуВФайл(СхемаПроцессаBPMNТекущая);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИзГрафическойСхемыТекст(Команда)
	КомандаСформироватьИзГрафическойСхемыТекстСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьВШаблон(Команда)
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		
		Текст = ВыделенныйТекстОсновногоРедактора();
		
		Если ПустаяСтрока(Текст) Тогда
			ВызватьИсключение
			НСтр("ru = 'Для преобразования текста в посценарий необходимо выделить одну или несколько строк сценария.'");
		КонецЕсли;	 
	Иначе		
		Текст = ПолучитьВыделенныйТекстФорматированногоДокумента();
		Если ПустаяСтрока(Текст) Тогда
			ВызватьИсключение
			НСтр("ru = 'Для преобразования текста в посценарий необходимо выделить одну или несколько строк сценария.'");
		КонецЕсли;	 
		
		ТекстСценария = СхемаПроцессаТекст.ПолучитьТекст();
		Если НЕ ПустаяСтрока(ТекстСценария) Тогда
			ДанныеСтрок = СтрРазделить(ТекстСценария, Символы.ПС);
			Если ДанныеСтрок.Количество() > 0 Тогда
				ПерваяСтрока = ДанныеСтрок[0];
				Если Найти(ПерваяСтрока, "language") > 0 Тогда
					Текст = ПерваяСтрока + Символы.ПС + Текст;
				КонецЕсли;	 
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоздатьШаблон",Истина);
	ПараметрыФормы.Вставить("Текст",Текст);
	ПараметрыФормы.Вставить("Функция",Объект.ФункцияСистемы);
	
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.СозданиеШаблонаСценария",ПараметрыФормы,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтступ(Команда)
	ПозицияНачала    = 0;
	ПозицияОкончания = 0;
	Текст = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
	
	Если СокрЛП(Текст) = "" Тогда
		Возврат;
	КонецЕсли;	 
	
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		МассивСтрок[Ккк] = "  " + МассивСтрок[Ккк];
	КонецЦикла;	
	
	Текст = СтрСоединить(МассивСтрок,Символы.ПС);
	
	СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
	СхемаПроцессаТекст.Вставить(ПозицияНачала,Текст);
	
	Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРедкоИспользуемыеШаги(Команда)
	Стр = СхемаПроцессаТекст.ПолучитьТекст();
	
	НовыйМассивСтрок = Новый Массив;
	
	МассивСтрок = СтрРазделить(Стр,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Если Найти(НРег(МассивСтрок[Ккк]),"я перехожу к следующему реквизиту") > 0 Тогда
			Продолжить;
		ИначеЕсли Найти(НРег(МассивСтрок[Ккк]),"я активизирую поле") > 0 Тогда
			Продолжить;
		ИначеЕсли Найти(НРег(МассивСтрок[Ккк]),"я открываю выпадающий список") > 0 Тогда
			Продолжить;
		ИначеЕсли Найти(НРег(МассивСтрок[Ккк]),"я нажимаю кнопку выбора у поля") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		НовыйМассивСтрок.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;	
	
	Стр = СтрСоединить(НовыйМассивСтрок,Символы.ПС);
	УстановитьТекстВСхемаПроцессаТекстСервер(Стр);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПараметрыВходящие(Команда)
	ПерезаполнитьПараметрыВходящиеСервер();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарийКВыделеннымСтрокам(Команда)
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		
		ДобавитьУбратьКомментарийОсновнойРедактор(Истина);
		
	Иначе	
		ПозицияНачала    = 0;
		ПозицияОкончания = 0;
		Текст            = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
		
		Если СокрЛП(Текст) = "" Тогда
			Возврат;
		КонецЕсли;	 
		
		МассивСтрок = СтрРазделить(Текст,Символы.ПС);
		
		Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
			МассивСтрок[Ккк] = "#" + МассивСтрок[Ккк];
		КонецЦикла;	
		
		Текст = СтрСоединить(МассивСтрок,Символы.ПС);
		
		СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
		СхемаПроцессаТекст.Вставить(ПозицияНачала,Текст);
		
		Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
		
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьКомментарийУВыделенныхСтрок(Команда)
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		
		ДобавитьУбратьКомментарийОсновнойРедактор(Ложь);
		
	Иначе	
		ПозицияНачала    = 0;
		ПозицияОкончания = 0;
		Текст            = ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала,ПозицияОкончания);
		
		Если СокрЛП(Текст) = "" Тогда
			Возврат;
		КонецЕсли;	 
		
		МассивСтрок = СтрРазделить(Текст,Символы.ПС);
		
		Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
			Если Лев(МассивСтрок[Ккк],1) <> "#" Тогда
				Продолжить;
			КонецЕсли;	 
			МассивСтрок[Ккк] = Сред(МассивСтрок[Ккк],2);
		КонецЦикла;	
		
		Текст = СтрСоединить(МассивСтрок,Символы.ПС);
		
		СхемаПроцессаТекст.Удалить(ПозицияНачала,ПозицияОкончания);
		СхемаПроцессаТекст.Вставить(ПозицияНачала,Текст);
		
		Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	КонецЕсли;	
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакомментироватьРедкоИспользуемыеШаги(Команда)
	Стр = СхемаПроцессаТекст.ПолучитьТекст();
	
	НовыйМассивСтрок = Новый Массив;
	
	МассивСтрок = СтрРазделить(Стр,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Если Найти(НРег(МассивСтрок[Ккк]),"я перехожу к следующему реквизиту") > 0 Тогда
			МассивСтрок[Ккк] = "#" + МассивСтрок[Ккк];
		ИначеЕсли Найти(НРег(МассивСтрок[Ккк]),"я активизирую поле") > 0 Тогда
			МассивСтрок[Ккк] = "#" + МассивСтрок[Ккк];
		ИначеЕсли Найти(НРег(МассивСтрок[Ккк]),"я открываю выпадающий список") > 0 Тогда
			МассивСтрок[Ккк] = "#" + МассивСтрок[Ккк];
		ИначеЕсли Найти(НРег(МассивСтрок[Ккк]),"я нажимаю кнопку выбора у поля") > 0 Тогда
			МассивСтрок[Ккк] = "#" + МассивСтрок[Ккк];
		КонецЕсли;	 
		
		НовыйМассивСтрок.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;	
	
	Стр = СтрСоединить(НовыйМассивСтрок,Символы.ПС);
	УстановитьТекстВСхемаПроцессаТекстСервер(Стр);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоВнешнемТекстовомРедакторе(Команда)
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Сценарий изменен. Записать?'");
		Обработчик = Новый ОписаниеОповещения("ОткрытьВоВнешнемТекстовомРедактореПродолжение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;	 
	
	ОткрытьВоВнешнемТекстовомРедактореПродолжение(Неопределено,Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстСценарияИзВнешнегоФайла(Команда)
	Если Не ЗначениеЗаполнено(ИмяФайлаДляВнешнегоТекстовогоРедактора) Тогда
		Возврат;
	КонецЕсли;	
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайлаДляВнешнегоТекстовогоРедактора,"UTF-8");
	ТекстСценария = Текст.Прочитать();
	Текст.Закрыть();
	
	Объект.ОбычныйТекст = ТекстСценария;
	ДействияПослеПолученияФайлаСервер(ТекстСценария);
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗапускТестов(Команда)
	ЗапуститьТестСНачала();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаБДДляЗапускаТестов(Команда)
	ПараметрыЗапускаТестов = ТестированиеКлиент.ПараметрыЗапускаТестов();
	ПараметрыЗапускаТестов.Вставить("Сценарий", Объект.Ссылка);
	ПараметрыЗапускаТестов.Вставить("ЗапускИзСценария",Истина);
	
	ОткрытьФорму("Обработка.НастройкиЛокальногоЗапускаСценариев.Форма", 
		ПараметрыЗапускаТестов, 
		ЭтаФорма,
		УникальныйИдентификатор,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ТекстыСценариев(Команда)
	
	СформироватьТекстСценарияДляПросмотра(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТекстыСценариевБезРаскраски(Команда)
	
	СформироватьТекстСценарияДляПросмотра(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСценарий(Команда)
	ТекущаяСтрокаТекста = ТекущаяСтрокаТекста();
	
	Если ПустаяСтрока(ТекущаяСтрокаТекста) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите не пустую строку текста.'"));
		Возврат;
	КонецЕсли;	 
	
	ОткрытьСценарийПоСтроке(ТекущаяСтрокаТекста);
КонецПроцедуры

&НаКлиенте
Процедура СменитьРедакторСценария(Команда)
	СменитьРедакторСценарияСервер();
КонецПроцедуры

&НаКлиенте
Процедура СменитьРедакторСценарияНаОбычныйТекст(Команда)
	
	ТекстСценария = Неопределено;
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ТекстСценария = ТекущийТекстСценарияОсновногоРедактора();
	КонецЕсли;	
	
	СменитьРедакторСценарияНаОбычныйТекстСервер(ТекстСценария);
КонецПроцедуры

&НаКлиенте
Процедура СменитьРедакторНаОсновной(Команда)
	СменитьРедакторСценарияНаОсновнойСлужебный();
КонецПроцедуры

&НаКлиенте
Процедура СменитьРедакторСценарияНаРедакторСРаскраской(Команда)
	ТекстСценария = Неопределено;
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ТекстСценария = ТекущийТекстСценарияОсновногоРедактора();
	КонецЕсли;
	
	СменитьРедакторСценарияНаРедакторСРаскраскойСервер(ТекстСценария);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьГрафическуюСхему(Команда)
	РассчитатьГрафическуюСхемуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускФреймворкаТестирования(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Ложь);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Ложь);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Истина);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ПолнотекстовыйПоискШага(Команда)
	ПозицияНачала    = 0;
	ПозицияОкончания = 0;
	Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Если СокрЛП(СхемаПроцессаТекст.ПолучитьТекст()) = "" Тогда
		Возврат;
	КонецЕсли;	 
	
	ПозицияНачала = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияНачала);
	ПозицияОкончания = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	
	Текст                 = СхемаПроцессаТекст.ПолучитьТекст();
	СтрокаТекстаПоПозиции = ПолучитьСтрокуТекстаПоПозиции(Текст,ПозицияНачала);
	Если ПустаяСтрока(СтрокаТекстаПоПозиции) Тогда
		Возврат;
	КонецЕсли;	 
	
	Если Не Элементы.ДинамическийСписокШагиСценариев.Видимость Тогда
		Элементы.ДинамическийСписокШагиСценариев.Видимость = Истина;
	КонецЕсли;	
	
	СтрокаДляПоискаШагаПолнотекстовыйПоиск = СтрокаТекстаПоПозиции;
	
	ПодключитьОбработчикОжидания("ПолнотекстовыйПоискШагаПродолжение",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьСписокШаговСценариевПользователей(Команда)
	Элементы.ГруппаИзвестныеШаги.Видимость = НЕ Элементы.ГруппаИзвестныеШаги.Видимость;
	СохранитьНастройкуВидимостиПанелиШагов(Элементы.ГруппаИзвестныеШаги.Видимость);
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборСпискаШагов(Команда)
	ДинамическийСписокШагиСценариев.Отбор.Элементы.Очистить();
	ДинамическийСписокШагиСценариев.УсловноеОформление.Элементы.Очистить();
	Элементы.ДинамическийСписокШагиСценариевСброситьОтборСпискаШагов.Видимость = Ложь;
	Элементы.ДинамическийСписокШагиСценариев.Отображение = ОтображениеТаблицы.Дерево;
КонецПроцедуры

&НаКлиенте
Процедура НайтиВДругихСценариях(Команда)
	ТабДок = НайтиВДругихСценарияхСервер();
	ТабДок.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ЗапускТестовСТекущегоШага(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Истина);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Истина);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Ложь);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

&НаКлиенте
Процедура ВывестиЗначенияПараметров(Команда)
	ТекущиеДанные = Элементы.ДеревоСхемы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыСценария = ТекущиеДанные.Параметры;
	
	Если ПараметрыСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Результат = "";
	Ном = 0;
	Для Каждого ПараметрСценария Из ПараметрыСценария Цикл
		Ном       = Ном + 1;
		Результат = Результат + "Параметр №" + Ном + Символы.ПС;
		
		Результат = Результат + "	Тип=" + ПараметрСценария.Тип + Символы.ПС;
		Результат = Результат + "	Вид=" + ПараметрСценария.Вид + Символы.ПС;
		Результат = Результат + "	ЗначениеПараметра=" + ПараметрСценария.ЗначениеПараметра + Символы.ПС;
		Результат = Результат + "	НомерПараметра=" + ПараметрСценария.НомерПараметра + Символы.ПС;
		Результат = Результат + "	НомерПараметраВСценарии=" + ПараметрСценария.НомерПараметраВСценарии + Символы.ПС;
		Результат = Результат + "	ИзменяемыйПараметр=" + ПараметрСценария.ИзменяемыйПараметр + Символы.ПС;
		Результат = Результат + "	Символ=" + ПараметрСценария.Символ + Символы.ПС;
	КонецЦикла;	
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиПрисвоенияПараметров(Команда)
	ДобавитьСтрокиПрисвоенияПараметровСлужебный(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокиПрисвоенияПараметровСВыбором(Команда)
	ДобавитьСтрокиПрисвоенияПараметровСлужебный(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СтатусТестов(Команда)
	ДанныеОтбор = Новый Структура;
	ДанныеОтбор.Вставить("СценарийРаботыПользователя",Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("КлючВарианта, Отбор, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии", 
		"СтатусПрохожденияТестовВВетке",
		ДанныеОтбор, 
		Истина,
		Истина);
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТаблицуСценария(Команда)
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ТекущаяВкладка = ТекущаяВкладкаРедактора();
		Позиция = ТекущаяВкладка.getPosition();
		ТекущаяСтрока = Позиция.LineNumber;
		ТекстСтроки = СокрЛ(ТекущаяВкладка.getLineContent(ТекущаяСтрока));
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Возврат;
		КонецЕсли;
		
		СтрокиДляИзменения = ТаблицаИзДанныхРедактораПоНомерСтроки(ТекущаяСтрока);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтрокиДляИзменения", СтрокиДляИзменения);
		ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.РедактированиеТаблицыСценария", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенюРедактора(Команда)
	ЗакладкиРедактора.showContextMenu();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВерсиюРедактора(Команда)
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ЗакладкиРедактора.version);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТЧПараметрыВходящие

&НаКлиенте
Процедура ПараметрыВходящиеПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ПараметрыВходящие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя <> "ПараметрыВходящиеЗначение" Тогда
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ТипПараметра = ПредопределенноеЗначение("Перечисление.ТипПараметраСценарияИлиПроцесса.Таблица") Тогда
		ПараметрыФормы = Новый Структура("ЗначениеТаблицы", ТекущиеДанные.Значение);
		ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаУстановкиЗначенияТаблицы", ПараметрыФормы,Элементы.ПараметрыВходящие,УникальныйИдентификатор);	
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВходящиеТипПараметраПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПараметрыВходящие.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипПараметра = ПредопределенноеЗначение("Перечисление.ТипПараметраСценарияИлиПроцесса.Макет") Тогда
		ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВходящиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЗначениеТаблицы") Тогда
			Элементы.ПараметрыВходящие.ТекущиеДанные.Значение = ВыбранноеЗначение.ЗначениеТаблицы;
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСписокИспользуетсяВСценариях

&НаКлиенте
Процедура СписокИспользуетсяВСценарияхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаЭлемента",
	    Новый Структура("Ключ", Элемент.ТекущиеДанные.Ссылка));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСписокИспользуетсяВПроцессах

&НаКлиенте
Процедура СписокИспользуетсяВПроцессахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	  
	Если Поле.Имя = "СписокИспользуетсяВПроцессахШаг" Тогда
		ОткрытьФорму("Справочник.ШагиПроцесса.Форма.ФормаЭлемента",
	    	Новый Структура("Ключ", Элемент.ТекущиеДанные.Шаг));
	ИначеЕсли Поле.Имя = "СписокИспользуетсяВПроцессахПроцесс" Тогда
		ОткрытьФорму("Справочник.Процессы.Форма.Процесс",
	    	Новый Структура("Ключ", Элемент.ТекущиеДанные.Процесс));
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОткрытьФормуФреймворкаТестированияПродолжение(Результат,Адрес,ПомещаемыйФайл,ДополнительныеПараметры) Экспорт
	Если НЕ Результат Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			   НСтр("ru = 'Не получилось подключить файл %1.'"),ПомещаемыйФайл);
	КонецЕсли;	 
	
	#Если НЕ ВебКлиент Тогда
		
	ИмяОбработки = ТестированиеСлужебныйВызовСервера.ПодключитьВнешнююОбработкуСервер(Адрес);
		
	ОтформатироватьТекстСценарияЕслиЭтоНеобходимо();	
		
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;	 
	
	ПараметрыОткрытия = ДополнительныеПараметры;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",Ложь);
	ДополнительныеПараметры.Вставить("СТекущегоШага",ПараметрыОткрытия.СТекущегоШага);
	
	Если ПараметрыОткрытия.СТекущегоШага Тогда
		ДополнительныеПараметры.Вставить("ТекущийНомерСтрокиСценария",ТекущийНомерСтрокиСценария());
	КонецЕсли;	 
	
	
	ДополнительныеПараметры.Вставить("ПрисоединенныеФайлы",Неопределено);
	ДополнительныеПараметры.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Истина);
	ТекстСценариев = ПолучитьОтформатированныеТекстыСценариевКлиент(Модифицированность,ДополнительныеПараметры);
	Если ТекстСценариев = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	НастройкиБДДляЗапускаТестовИзСценария = НастройкиБДДляЗапускаТестовИзСценария();
	
	ТестированиеКлиент.ЗаменитьСтрокуПодключенияПрофиляTestClient(
     	ТекстСценариев,НастройкиБДДляЗапускаТестовИзСценария,Объект.ПрофильПользователя);
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ТекстСценариев",ТекстСценариев);
	МассивРолей = Новый Массив;
	МассивРолей.Добавить(Объект.ПрофильПользователя);
	ПараметрыЗапуска.Вставить("МассивРолей",МассивРолей);
	ПараметрыЗапуска.Вставить("УникальныйИдентификатор",УникальныйИдентификатор);
	ПараметрыЗапуска.Вставить("ПараметрыОткрытия",ПараметрыОткрытия);
	ПараметрыЗапуска.Вставить("НастройкиБДДляЗапускаТестовИзСценария",НастройкиБДДляЗапускаТестовИзСценария);
	ПараметрыЗапуска.Вставить("ПрисоединенныеФайлы",ДополнительныеПараметры.ПрисоединенныеФайлы);
	ПараметрыЗапуска.Вставить("СТекущегоШага",ПараметрыОткрытия.СТекущегоШага);
	ПараметрыЗапуска.Вставить("ЗагрузкаСценария",ПараметрыОткрытия.ЗагрузкаСценария);
	ПараметрыЗапуска.Вставить("ЗапускСценария",ПараметрыОткрытия.ЗапускСценария);
	ПараметрыЗапуска.Вставить("ЭтоПроцесс",Ложь);
	ПараметрыЗапуска.Вставить("ИмяОбработки",ИмяОбработки);
	
	ПараметрыЗапуска.Вставить("НадоСчитатьТекущийPIDTestManager",Ложь);
	
	ТестированиеКлиент.ОткрытьФормуФреймворкаТестирования(ПараметрыЗапуска);
	
	Если ПараметрыЗапуска.НадоСчитатьТекущийPIDTestManager Тогда
		КоличествоСекундПроверкиPIDTestManager = 0;
		Если НастройкиБДДляЗапускаТестовИзСценария.Свойство("ТаймаутЗапускаTestManager") Тогда
			Если ЗначениеЗаполнено(НастройкиБДДляЗапускаТестовИзСценария.ТаймаутЗапускаTestManager) Тогда
				КоличествоСекундПроверкиPIDTestManager = НастройкиБДДляЗапускаТестовИзСценария.ТаймаутЗапускаTestManager;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Если Не ЗначениеЗаполнено(КоличествоСекундПроверкиPIDTestManager) Тогда
			КоличествоСекундПроверкиPIDTestManager = 60;
		КонецЕсли;	 
		
		ПрошлоСекундПроверкиPIDTestManager = 0;
	КонецЕсли;	 
	
	#КонецЕсли
КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	Проект = Объект.Владелец;
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСтрокуДляПомещенияВФорматированныйДокумент(Стр)
	ТестированиеГрафическиеСхемыСервер.ЭкранироватьУгловыеСкобки(Стр);
	ТестированиеГрафическиеСхемыСервер.СделатьСтандартнуюПодготовкуТекстаHTML(Стр);
КонецПроцедуры

&НаСервере
Процедура УстановитьСтрокуHTMLВФорматированныйДокумент(Стр)
	ШаблонHTML   = Справочники.СценарииРаботыПользователей.ПолучитьМакет("ШаблонHTML");
	
	ТекстHTML = ШаблонHTML.ПолучитьТекст();
	ТекстHTML = СтрЗаменить(ТекстHTML,"<ПроизвольныйТекст>",Стр);
	
	СхемаПроцессаТекст.УстановитьHTML(ТекстHTML,Новый Структура);
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстВСхемаПроцессаТекстСервер(Знач СтрокаHTML)
	ПодготовитьСтрокуДляПомещенияВФорматированныйДокумент(СтрокаHTML);
	УстановитьСтрокуHTMLВФорматированныйДокумент(СтрокаHTML);
КонецПроцедуры

&НаСервере
Процедура ПоказатьПутьКСхеме()
	МассивСтрокНавигации = Новый Массив;
	
	Ном = 0;
	Для Каждого ДанныеСхемы Из ПутьКСхемеСписок Цикл
		Ном = Ном + 1;
		
		СтрокаНавигации = Новый ФорматированнаяСтрока(ДанныеСхемы.Представление,,,,Строка(ДанныеСхемы.Значение));
		МассивСтрокНавигации.Добавить(СтрокаНавигации);
		
		Если Ном < ПутьКСхемеСписок.Количество() Тогда
			МассивСтрокНавигации.Добавить(" \ ");
		КонецЕсли;	 
	КонецЦикла;	
	
	ПутьКСхеме = Новый ФорматированнаяСтрока(МассивСтрокНавигации);
КонецПроцедуры

&НаКлиенте
Процедура ОтформатироватьСхемаПроцессаТекстКлиент(ДополнительныеПараметры = Неопределено)
	ТекНомерСтроки = ТекущийНомерСтрокиСценария();
	Если Элементы.ОбычныйТекст.Видимость Тогда
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		Элементы.ОбычныйТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	КонецЕсли;	 
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ДополнительныеПараметры.Вставить("Текст", ТекущийТекстСценарияОсновногоРедактора());
	КонецЕсли;	
	ОтформатироватьСхемаПроцессаТекст(ДополнительныеПараметры);
	Если ДополнительныеПараметры.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ДополнительныеПараметры.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ДополнительныеПараметры.ОписаниеОшибки);
	КонецЕсли;	
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		УстановитьТекстСценарияТекущейВкладкиРедактора(Объект.ОбычныйТекст);
		ПерейтиКСтрокеОсновногоРедактора(ТекНомерСтроки);
	Иначе	
		Если Элементы.ОбычныйТекст.Видимость Тогда
			Элементы.ОбычныйТекст.УстановитьГраницыВыделения(НачалоСтроки, НачалоКолонки, НачалоСтроки, КонецКолонки);
		Иначе
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСхемаТекст Тогда
				ПереходКСтрокеСценария(ТекНомерСтроки,Ложь);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	
КонецПроцедуры 

&НаСервере
Процедура ОтформатироватьСхемаПроцессаТекст(ДополнительныеПараметры = Неопределено)
	Текст = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("Текст") Тогда
			Текст = ДополнительныеПараметры.Текст;
			Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
				ОбычныйТекст = Текст;
			КонецЕсли;	
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ДелатьРаскраску = Ложь;
	КонецЕсли;	
	
	Если Текст = Неопределено Тогда
		Если Не ДелатьРаскраску Тогда
			Текст = Объект.ОбычныйТекст;
		Иначе	
			Текст = СхемаПроцессаТекст.ПолучитьТекст();
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если ДополнительныеПараметры =  Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;	 
	Если Не ДополнительныеПараметры.Свойство("ДелатьРаскраску") Тогда
		ДополнительныеПараметры.Вставить("ДелатьРаскраску",ДелатьРаскраску);
	КонецЕсли;	 
	ДополнительныеПараметры.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	ДополнительныеПараметры.Вставить("ЧтениеИзТекста",Ложь);
	
	
	ОбъектСервер       = РеквизитФормыВЗначение("Объект");
	ДеревоСхемыИзформы = РеквизитФормыВЗначение("ДеревоСхемы");
	
	ПроектСценария = ОбъектСервер.Владелец;
	Сценарий       = ОбъектСервер.Ссылка;
	
	ТестированиеГрафическиеСхемыСервер.ДеревоСценарияИзТекста(Текст,
	                         ДеревоСхемыИзформы,ПроектСценария,ОбъектСервер,ДополнительныеПараметры);
	ЗначениеВРеквизитФормы(ДеревоСхемыИзформы,"ДеревоСхемы");
	
	ТестированиеГрафическиеСхемыСервер.ПараметрыВходящиеИзДерева(ДеревоСхемыИзформы,
	       ОбъектСервер.ПараметрыВходящие);
		   
		   
	ПараметрыВерсийСценариев = Новый Структура;		   
	ПараметрыВерсийСценариев.Вставить("Дерево",ДеревоСхемыИзформы);
	ПараметрыВерсийСценариев.Вставить("ВерсииШаблонов",ОбъектСервер.ВерсииШаблонов);
	ПараметрыВерсийСценариев.Вставить("Проект",ПроектСценария);
	ПараметрыВерсийСценариев.Вставить("Сценарий",Сценарий);
	ПараметрыВерсийСценариев.Вставить("ФункцияСистемы",ОбъектСервер.ФункцияСистемы);
	ТестированиеГрафическиеСхемыСервер.ВерсииШаблонов(ПараметрыВерсийСценариев);
			  
			  
	ШаблонHTML   = ОбъектСервер.ПолучитьМакет("ШаблонHTML");
	ТестированиеГрафическиеСхемыСервер.ФорматированныйДокументПоДеревуСхемы(ДеревоСхемыИзформы,
	        СхемаПроцессаТекст,ШаблонHTML,ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ДелатьРаскраску  Тогда
		ОбъектСервер.ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	Иначе	
		Если ДополнительныеПараметры.Свойство("ТекстДокумента") Тогда
			ТекстСценария = ДополнительныеПараметры.ТекстДокумента;
			ОбъектСервер.ОбычныйТекст = ТекстСценария;
		ИначеЕсли ДополнительныеПараметры.Свойство("Текст") Тогда
			ТекстСценария = ДополнительныеПараметры.Текст;
			ОбычныйТекст = ТекстСценария;
		Иначе	
			ТекстСценария = ОбъектСервер.ОбычныйТекст;
		КонецЕсли;	 
		УстановитьТекстВСхемаПроцессаТекстСервер(ТекстСценария);
	КонецЕсли;	 		  
	
	ЗначениеВРеквизитФормы(ДеревоСхемыИзформы,"ДеревоСхемы");
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьЗначения(ИмяТекущейСтраницы)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Справочник.СценарииРаботыПользователей.ФормаЭлемента",
	      "ТекущаяСтраницаФормыМикропроцесса", ИмяТекущейСтраницы);
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненнуюСхемуСервер(ИмяЭлементаСхемы,ДопПараметры)
	ИдСтрокиДерева = ДопПараметры.ИдСтрокиДерева;
	ОписаниеСхемы = ДопПараметры.ОписаниеСхемы;
	
	ДеревоСхемыСервер = РеквизитФормыВЗначение("ДеревоСхемы");
	СтрокаДерева      = ДеревоСхемыСервер.Строки.Найти(ИмяЭлементаСхемы,"ИмяЭлемента",Истина);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	СборщикСценариев = Обработки.СборкаТекстовСценариев.Создать();
	Если СтрокаДерева.ТипЭлемента = СборщикСценариев.ТипЭлементаШаблонСценария() Тогда
		ДопПараметры.Вставить("Подсценарий",СтрокаДерева.ДополнительныеСвойства.Шаблон);
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДопПараметры.Вставить("ИдСтрокиДерева",СтрокаДерева.ИдСтрокиДерева);
	ДопПараметры.Вставить("ОписаниеСхемы",СтрокаДерева.ОписаниеЭлемента);
	
	Возврат СтрокаДерева.ПодчиненнаяСхема;
КонецФункции	

&НаСервере
Функция ПолучитьСхемуИзДереваПоИдСтроки(ИдСтрокиДерева)
	ДеревоСхемыСервер = РеквизитФормыВЗначение("ДеревоСхемы");
	
	СтрокаДерева = ДеревоСхемыСервер.Строки.Найти(ИдСтрокиДерева,"ИдСтрокиДерева",Истина);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Возврат СтрокаДерева.ПодчиненнаяСхема;
КонецФункции	

&НаСервере
Функция СохранитьТекущуюСхемуВДерево(ИдСтрокиДерева,Схема)
	ДеревоСхемыСервер = РеквизитФормыВЗначение("ДеревоСхемы");
	
	Если ИдСтрокиДерева = -1 Тогда
		СхемаПроцессаBPMNОсновная = Схема;
	Иначе
		СтрокаДерева = ДеревоСхемыСервер.Строки.Найти(ИдСтрокиДерева,"ИдСтрокиДерева",Истина);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.ПодчиненнаяСхема = Схема;
		КонецЕсли;	 
	КонецЕсли;	 
	
	ЗначениеВРеквизитФормы(ДеревоСхемыСервер,"ДеревоСхемы");
КонецФункции	

&НаКлиенте
Процедура ПутьКСхемеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СохранитьТекущуюСхемуВДерево(ПутьКСхемеТекущийИд,СхемаПроцессаBPMNТекущая);
	
	НавигационнаяСсылка = Число(НавигационнаяСсылка);
	Если НавигационнаяСсылка = -1 Тогда
		СхемаПроцессаBPMNТекущая   = СхемаПроцессаBPMNОсновная;
	Иначе	
		СхемаПроцессаBPMNТекущая   = ПолучитьСхемуИзДереваПоИдСтроки(НавигационнаяСсылка);
	КонецЕсли;	 
	
	ЭлементНайден     = Ложь;
	МассивДляУдаления = Новый Массив;
	Для Каждого Элем Из ПутьКСхемеСписок Цикл
		Если Элем.Значение = НавигационнаяСсылка Тогда
			ЭлементНайден = Истина;
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ ЭлементНайден Тогда
			Продолжить;
		КонецЕсли;	 
		
		МассивДляУдаления.Добавить(Элем);
	КонецЦикла;	
	
	Для Каждого Элем Из МассивДляУдаления Цикл
		ПутьКСхемеСписок.Удалить(Элем);
	КонецЦикла;	
	
	ПоказатьПутьКСхеме();
	ПутьКСхемеТекущийИд = НавигационнаяСсылка;
	
	Элементы.СхемаПроцессаBPMNТекущая.ТолькоПросмотр = ЭтоШаблонСценария(ПутьКСхемеТекущийИд);
КонецПроцедуры

&НаСервере
Процедура СформироватьИзГрафическойСхемыТекстСервер()
	ОбъектСервер       = РеквизитФормыВЗначение("Объект");
	ДеревоСхемыИзформы = РеквизитФормыВЗначение("ДеревоСхемы");
	
	ДеревоСхемыИзформы = ТестированиеГрафическиеСхемыСервер.ПреобразоватьГрафическуюСхемуВДеревоСхемы(
	                                                     СхемаПроцессаBPMNОсновная,ДеревоСхемыИзформы);
	ЗначениеВРеквизитФормы(ДеревоСхемыИзформы,"ДеревоСхемы");
	
	ТестированиеГрафическиеСхемыСервер.ПараметрыВходящиеИзДерева(
	                       ДеревоСхемыИзформы,ОбъектСервер.ПараметрыВходящие);
	
	ШаблонHTML   = ОбъектСервер.ПолучитьМакет("ШаблонHTML");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",ДелатьРаскраску);
		
	ТестированиеГрафическиеСхемыСервер.ФорматированныйДокументПоДеревуСхемы(ДеревоСхемыИзформы,
	           СхемаПроцессаТекст,ШаблонHTML,ДополнительныеПараметры);
	
	ЗначениеВРеквизитФормы(ДеревоСхемыИзформы,"ДеревоСхемы");
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПараметрыВходящиеСервер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	ПараметрыВходящие = ОбъектСервер.ПараметрыВходящие.Выгрузить();
	ПараметрыВходящие.Очистить();
	
	ДеревоСхемыИзформы = РеквизитФормыВЗначение("ДеревоСхемы");
	ТестированиеГрафическиеСхемыСервер.ПараметрыВходящиеИзДерева(
	                    ДеревоСхемыИзформы,ПараметрыВходящие);
						
						
	ИменаПараметров = Новый Соответствие;
	Для Каждого СтрокаПараметрыВходящие Из ПараметрыВходящие Цикл
		ИменаПараметров.Вставить(СтрокаПараметрыВходящие.Имя,Истина);
		
		СтрокаТЧПараметрыВходящие = ОбъектСервер.ПараметрыВходящие.Найти(СтрокаПараметрыВходящие.Имя,"Имя");
		Если СтрокаТЧПараметрыВходящие = Неопределено Тогда
			СтрокаТЧПараметрыВходящие = ОбъектСервер.ПараметрыВходящие.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧПараметрыВходящие,СтрокаПараметрыВходящие);
		КонецЕсли;	 
	КонецЦикла;	 						
	
	СтрокиДляУдаления = Новый Массив;
	Для Каждого СтрокаТЧПараметрыВходящие Из ОбъектСервер.ПараметрыВходящие Цикл
		Если ИменаПараметров[СтрокаТЧПараметрыВходящие.Имя] = Неопределено Тогда
			СтрокиДляУдаления.Добавить(СтрокаТЧПараметрыВходящие);
		КонецЕсли;	 
	КонецЦикла;	 
	
	Для Каждого Элем Из СтрокиДляУдаления Цикл
		ОбъектСервер.ПараметрыВходящие.Удалить(Элем);
	КонецЦикла;	 
						
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыделенныйТекстФорматированногоДокумента(ПозицияНачала = 0,ПозицияОкончания = 0)
	ПозицияНачала    = 0;
    ПозицияОкончания = 0;
    Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
	
	Текст = СхемаПроцессаТекст.ПолучитьТекст(ПозицияНачала,ПозицияОкончания);
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	Позиция = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
	
	Если СокрЛП(МассивСтрок[МассивСтрок.Количество()-1]) = "" Тогда
		Позиция = Позиция - 1 - СтрДлина(МассивСтрок[МассивСтрок.Количество()-1]);
		ПозицияОкончания = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(Позиция);
		
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
		Текст = СтрСоединить(МассивСтрок,Символы.ПС);
	КонецЕсли;	 
	
	Возврат Текст;
КонецФункции	

&НаСервере
Функция ОпределитьЯвляетсяЛиСтрокаДереваШаблономПроцессаИлиВложенаВНего(СтрокаДерева)
	Если СтрокаДерева.ТипЭлемента = "ШаблонСценария" Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	Возврат ОпределитьЯвляетсяЛиСтрокаДереваШаблономПроцессаИлиВложенаВНего(СтрокаДерева.Родитель);
КонецФункции	

&НаСервере
Функция ЭтоШаблонСценария(ПутьКСхемеТекущийИд)
	Если ПутьКСхемеТекущийИд = -1 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ДеревоСхемыСервер = РеквизитФормыВЗначение("ДеревоСхемы");
	
	СтрокаДерева = ДеревоСхемыСервер.Строки.Найти(ПутьКСхемеТекущийИд,"ИдСтрокиДерева",Истина);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОпределитьЯвляетсяЛиСтрокаДереваШаблономПроцессаИлиВложенаВНего(СтрокаДерева);
КонецФункции	

&НаКлиенте
Процедура ОтформатироватьСценарий()
	Если Не ЗначениеЗаполнено(Объект.ФункцияСистемы) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		       НСтр("ru = 'Не заполнено поле Функция.'"),,"Объект.ФункцияСистемы");
		Возврат;
	КонецЕсли;	 
	
	ДополнительныеПараметры = Новый Структура;
	ОтформатироватьСхемаПроцессаТекстКлиент(ДополнительныеПараметры);
	
	Если ДополнительныеПараметры.ДелатьРаскраску Тогда
		Объект.ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	КонецЕсли;	 
	Модифицированность = Истина;
	
	//очистим графическую схему, т.к. ее надо теперь пересчитать
	СхемаПроцессаBPMNТекущая  = Новый ГрафическаяСхема;
	СхемаПроцессаBPMNОсновная = Новый ГрафическаяСхема;
КонецПроцедуры

&НаСервере
Функция КомандаЗапускаВнешнегоТекстовогоРедактора()
	Возврат Тестирование.КомандаЗапускаВнешнегоТекстовогоРедактора();
КонецФункции	 

&НаКлиенте
Функция ПолучитьИмяФайлаДляВнешнегоТекстовогоРедактора()
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
	          КаталогВременныхФайлов()) + Объект.Наименование + ".scenario1c";
КонецФункции	

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сценарии.ХранилищеСхемаBPMN КАК ХранилищеСхемаBPMN,
	|	Сценарии.ХранилищеСхемаТекст КАК ХранилищеСхемаТекст,
	|	Сценарии.ХранилищеСтруктурыСхемы КАК ХранилищеСтруктурыСхемы,
	|	Сценарии.ХранилищеОписания КАК ХранилищеОписания
	|ИЗ
	|	Справочник.СценарииРаботыПользователей КАК Сценарии
	|ГДЕ
	|	Сценарии.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", КопируемыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СхемаИзХранилища = Выборка.ХранилищеСхемаBPMN.Получить();
		Если ТипЗнч(СхемаИзХранилища) = Тип("ГрафическаяСхема") Тогда
			СхемаПроцессаBPMNОсновная = СхемаИзХранилища;
			СхемаПроцессаBPMNТекущая  = СхемаПроцессаBPMNОсновная;
		КонецЕсли;
		
		СхемаТекстИзХранилища = Выборка.ХранилищеСхемаТекст.Получить();
		Если ТипЗнч(СхемаТекстИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			СхемаПроцессаТекст = СхемаТекстИзХранилища;
		КонецЕсли;
		
		ОписаниеИзХранилища = Выборка.ХранилищеОписания.Получить();
		Если ТипЗнч(ОписаниеИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Описание = ОписаниеИзХранилища;
		КонецЕсли;
		
		ДеревоСхемыИзХранилища = Выборка.ХранилищеСтруктурыСхемы.Получить();
		Если ТипЗнч(ДеревоСхемыИзХранилища) = Тип("ДеревоЗначений") Тогда
			ЗначениеВРеквизитФормы(ДеревоСхемыИзХранилища,"ДеревоСхемы");
		КонецЕсли;	 
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиБДДляЗапускаТестовИзСценария()
	Возврат Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
КонецФункции	

&НаКлиенте
Процедура ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия) 
	#Если НЕ ВебКлиент Тогда
		
	ТестированиеКлиент.ПодключитьФреймВоркТестирования(ЭтаФорма.УникальныйИдентификатор,
	"ОткрытьФормуФреймворкаТестированияПродолжение",ЭтаФорма,ПараметрыОткрытия);	
		
	#КонецЕсли
КонецПроцедуры

&НаСервере
Функция ПодключитьВнешнююОбработкуСервер(АдресХранилища)
	Возврат ВнешниеОбработки.Подключить(АдресХранилища,,Ложь); 
КонецФункции 

&НаКлиенте
Процедура ОбработкаПослеПомещенияФайла(Результат,АдресХранилища,ВыбранноеИмяФайла,ДополнительныеПараметры) Экспорт
	ИмяОбработки = ПодключитьВнешнююОбработкуСервер(АдресХранилища);
	ДополнительныеПараметры.Вставить("ИмяОбработки",ИмяОбработки);
КонецПроцедуры

&НаСервере
Функция ОбъектнуюМодельТекстыСценариевСервер(ОбъектСервер,ФлагМодифицированности,
	      ДополнительныеПараметры = Неопределено)
	ТаблицаПараметрыВходящие = ОбъектСервер.ПараметрыВходящие.Выгрузить();
	ТаблицаПараметрыВходящие.Колонки.Добавить("НесколькоЗначений",Новый ОписаниеТипов("Булево"));
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТаблицаПараметров",ТаблицаПараметрыВходящие);
	СтруктураПараметров.Вставить("ДоТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ПроверкаТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ПослеТеста",Новый ТаблицаЗначений);
	СтруктураПараметров.Вставить("ДеревоСхемы",РеквизитФормыВЗначение("ДеревоСхемы"));
	СтруктураПараметров.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("СТекущегоШага") Тогда
			СтруктураПараметров.Вставить("СТекущегоШага",ДополнительныеПараметры.СТекущегоШага);
			Если ДополнительныеПараметры.СТекущегоШага Тогда
				СтруктураПараметров.Вставить("ТекущийНомерСтрокиСценария",ДополнительныеПараметры.ТекущийНомерСтрокиСценария);
			Иначе	
				СтруктураПараметров.Вставить("ТекущийНомерСтрокиСценария",Неопределено);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	Возврат ТестированиеГрафическиеСхемыСервер.ТекстыСценариев(ОбъектСервер,СтруктураПараметров);
КонецФункции	

&НаСервере
Функция ПолучитьТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры = Неопределено)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Если ОбнаруженыИзмененныеШаблоны(ОбъектСервер) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Подчиненные сценарии были изменены. Необходимо отформатировать сценарий.'"));
		Возврат Неопределено;
	КонецЕсли;	 
	
	ОбъектТекстыСценариев = ОбъектнуюМодельТекстыСценариевСервер(ОбъектСервер,ФлагМодифицированности,ДополнительныеПараметры);
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ОбъектТекстыСценариев",ОбъектТекстыСценариев);
	ПараметрыСценария.Вставить("Процесс",ОбъектСервер.Ссылка);
	ПараметрыСценария.Вставить("ШагиДоТеста",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПроверка",Новый ТаблицаЗначений);
	ПараметрыСценария.Вставить("ШагиПослеТеста",Новый ТаблицаЗначений);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("СТекущегоШага") Тогда
			ПараметрыСценария.Вставить("СТекущегоШага",ДополнительныеПараметры.СТекущегоШага);
			Если ДополнительныеПараметры.СТекущегоШага Тогда
				ПараметрыСценария.Вставить("ТекущийНомерСтрокиСценария",ДополнительныеПараметры.ТекущийНомерСтрокиСценария);
			Иначе	
				ПараметрыСценария.Вставить("ТекущийНомерСтрокиСценария",Неопределено);
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
	ПараметрыСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",Ложь);
	ПараметрыСценария.Вставить("ЧтениеИзТекста",Ложь);
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ИсключитьСлужебныеСловаИзТекстаСценария") Тогда
			ПараметрыСценария.Вставить("ИсключитьСлужебныеСловаИзТекстаСценария",
			ДополнительныеПараметры.ИсключитьСлужебныеСловаИзТекстаСценария);
		КонецЕсли;	 
	КонецЕсли;	 
	
	НастройкиБДДляЗапускаТестовИзСценария = Тестирование.НастройкиБДДляЗапускаТестовИзСценария();
	
	Если НастройкиБДДляЗапускаТестовИзСценария <> Неопределено Тогда
		ПараметрыСценария.Вставить("БазаДанных",НастройкиБДДляЗапускаТестовИзСценария.ЭталоннаяБаза);
	Иначе	
		ПараметрыСценария.Вставить("БазаДанных",Неопределено);
	КонецЕсли;	 
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект");
	
	Возврат Тестирование.ТекстСценария(ПараметрыСценария);
КонецФункции	

&НаСервере
Процедура ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры)
	
	ТестированиеГрафическиеСхемыСервер.ТекстФорматированныйТекстСценарияИзОбычногоТекста(ТекстСценария,
	          ФД,Объект.Владелец,Объект.Ссылка,ДополнительныеПараметры);
КонецПроцедуры

&НаСервере
Функция ПолучитьОтформатированныеТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры)
	ФД                    = Новый ФорматированныйДокумент;
	ТекстСценария         = ПолучитьТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры);
	Если ТекстСценария = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если ДополнительныеПараметры.Свойство("ПрисоединенныеФайлы") Тогда
		ДополнительныеПараметры.ПрисоединенныеФайлы = ПрисоединенныеФайлы();
	КонецЕсли;	 
	
	Если НЕ ДополнительныеПараметры.ДелатьРаскраску Тогда
		ТестированиеГрафическиеСхемыСервер.ВернутьУгловыеСкобки(ТекстСценария);
		Возврат ТекстСценария;
	КонецЕсли;	 
	
	ТекстФорматированныйТекстСценарияИзОбычногоТекстаСервер(ТекстСценария,ФД,ДополнительныеПараметры);
	
	Возврат ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры);
КонецФункции

&НаСервере
Функция ОбычныйТекстСценарияИзФорматированногоДокументаСервер(ФД,ДополнительныеПараметры)
	Возврат ТестированиеГрафическиеСхемыСервер.ОбычныйТекстСценарияИзФорматированногоДокумента(ФД,ДополнительныеПараметры);
КонецФункции	

&НаКлиенте
Функция ПолучитьОтформатированныеТекстыСценариевКлиент(ФлагМодифицированности,ДополнительныеПараметры)
	ТекстСценария = ПолучитьОтформатированныеТекстыСценариевСервер(ФлагМодифицированности,ДополнительныеПараметры);
	
	Возврат ТекстСценария;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтрокуТекстаПоПозиции(Текст,Знач Позиция,ПозицияНачала=Неопределено,ПозицияОкончания=Неопределено)
	ПозицияНачала    = -1;
	ПозицияОкончания = -1;
	
	Если Позиция > 0 Тогда
		Пока Истина Цикл
			Позиция = Позиция - 1;
			
			Если Позиция = 0 Тогда
				ПозицияНачала = Позиция+1;
				Прервать;
			КонецЕсли;	 
			
			Символ = Сред(Текст,Позиция,1);
			Если Символ = Символы.ПС Тогда
				ПозицияНачала = Позиция+1;
				Прервать;
			КонецЕсли;	 
			
		КонецЦикла;	
	Иначе 	
		ПозицияНачала = 1;
	КонецЕсли;	 
	
	Если ПозицияНачала = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	ДлинаТекста = СтрДлина(Текст);
	
	Пока Истина Цикл
		Позиция = Позиция + 1;
		
		Если Позиция > ДлинаТекста Тогда
			ПозицияОкончания = Позиция-1;
			Прервать;
		КонецЕсли;	 
		
		Символ = Сред(Текст,Позиция,1);
		Если Символ = Символы.ПС Тогда
			ПозицияОкончания = Позиция-1;
			Прервать;
		КонецЕсли;	 
		
	КонецЦикла;	
	
	Возврат Сред(Текст,ПозицияНачала,ПозицияОкончания-ПозицияНачала+1);
КонецФункции	

&НаСервереБезКонтекста
Функция СнипетПоСтроке(Стр)
	Если ТестированиеГрафическиеСхемыСервер.СнипетПоСтроке(Стр) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаСервере
Функция УбратьКлючевоеСлово(Стр)
	Если ТестированиеГрафическиеСхемыСервер.УбратьКлючевоеСлово(Стр) Тогда
		Возврат Истина;
	КонецЕсли;	 
	
	Возврат Ложь;
КонецФункции	

&НаСервереБезКонтекста
Функция НайтиСценарийПоСтроке(Знач Стр,Проект)
	Стр = СокрЛП(Стр);
	СмоглиОпределить = СнипетПоСтроке(Стр);
	Если Не СмоглиОпределить Тогда
		Возврат Неопределено;
	КонецЕсли;	 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сценарии.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК Сценарии
		|ГДЕ
		|	НЕ Сценарии.ПометкаУдаления
		|	И Сценарии.СнипетСценария = &СнипетСценария
		|	И Сценарии.ФункцияСистемы.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("СнипетСценария", НРег(Стр));
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции	

&НаКлиенте
Процедура ОткрытьСценарийПоСтроке(Стр)
	Сценарий = НайтиСценарийПоСтроке(Стр,Объект.Владелец);
	Если Сценарий = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
     		НСтр("ru = 'Не найден сценарий по строке <%1>.'"),Стр));
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("Ключ", Сценарий);
	ОткрытьФорму("Справочник.СценарииРаботыПользователей.ФормаОбъекта", ПараметрыФормы);	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостьюЭлементовСервер()
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		Элементы.СраницыРедактор.ТекущаяСтраница = Элементы.СтраницаОсновнойРедактор;
		Элементы.СхемаПроцессаТекст.Видимость = Ложь;
		Элементы.ОбычныйТекст.Видимость = Ложь;
	Иначе	
		Элементы.СраницыРедактор.ТекущаяСтраница = Элементы.СтраницаДругиеРедакторы;
		Элементы.СхемаПроцессаТекст.Видимость = ДелатьРаскраску;
		Элементы.ОбычныйТекст.Видимость = НЕ ДелатьРаскраску;
	КонецЕсли;	
	
	Элементы.СменитьРедакторСценарияНаОбычныйТекст.Пометка
		= ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОбычныйТекст();
	Элементы.СменитьРедакторСценарияНаРедакторСРаскраской.Пометка
		= ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент();
	Элементы.ФормаСменитьРедакторНаОсновной.Пометка
		= ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной();
КонецПроцедуры

&НаСервере
Процедура СменитьРедакторСценарияСервер()
	ДелатьРаскраску = НЕ ДелатьРаскраску;
	
	Если ДелатьРаскраску Тогда
		//Значит надо отформатировать текст
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ДелатьРаскраску",Истина);
		ДополнительныеПараметры.Вставить("Текст",Объект.ОбычныйТекст);
		ОтформатироватьСхемаПроцессаТекст(ДополнительныеПараметры);
	Иначе
		Объект.ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	КонецЕсли;	 
	
	УправлениеВидимостьюЭлементовСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоВнешнемТекстовомРедактореПродолжение(Ответ, Параметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда 
		Записать();
	КонецЕсли;
	
	ИмяФайлаДляВнешнегоТекстовогоРедактора = ПолучитьИмяФайлаДляВнешнегоТекстовогоРедактора();
	
	КомандаЗапускаВнешнегоТекстовогоРедактора = КомандаЗапускаВнешнегоТекстовогоРедактора(); 
	Если Не ЗначениеЗаполнено(КомандаЗапускаВнешнегоТекстовогоРедактора) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр(
		         "ru = 'Не указана команда вызова внешнего текстового редактора.'"));
		Возврат;
	КонецЕсли;	 
	
	ТекстСценария = СхемаПроцессаТекст.ПолучитьТекст();
	ЗТ = Новый ЗаписьТекста(ИмяФайлаДляВнешнегоТекстовогоРедактора,"UTF-8"); 
	ЗТ.ЗаписатьСтроку(ТекстСценария); 
	ЗТ.Закрыть();
	
	СтрокаКоманды = """" + КомандаЗапускаВнешнегоТекстовогоРедактора 
	  + """ """ + ИмяФайлаДляВнешнегоТекстовогоРедактора + """";
	ЗапуститьПриложение(СтрокаКоманды);
КонецПроцедуры

&НаСервере
Процедура РассчитатьГрафическуюСхемуПоДеревуСхемы(ПараметрДеревоСхемы)
	ДанныеСхемы                = ТестированиеГрафическиеСхемыСервер.ГрафическаяСхемаПоДеревуСхемы(
	                                                                           ПараметрДеревоСхемы);
	СхемаПроцессаBPMNОсновная  = ДанныеСхемы.Схема;
	СхемаПроцессаBPMNТекущая   = СхемаПроцессаBPMNОсновная;
КонецПроцедуры

&НаСервере
Процедура РассчитатьГрафическуюСхемуСервер()
	ДеревоСхемыСервер = РеквизитФормыВЗначение("ДеревоСхемы");
	
	РассчитатьГрафическуюСхемуПоДеревуСхемы(ДеревоСхемыСервер);
	
	ПутьКСхемеСписок.Очистить();
	ПутьКСхемеТекущийИд = -1;
	ПутьКСхемеСписок.Добавить(ПутьКСхемеТекущийИд,"Основная");
	
	ЗначениеВРеквизитФормы(ДеревоСхемыСервер,"ДеревоСхемы");
	
	ПоказатьПутьКСхеме();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОставитьВДеревеСхемыТолькоСтрокиСвоегоСценария(Дерево)
	ОставитьВДеревеСхемыТолькоСтрокиСвоегоСценарияРекурсивно(Дерево);
КонецПроцедуры

&НаСервере
Процедура ОставитьВДеревеСхемыТолькоСтрокиСвоегоСценарияРекурсивно(Дерево)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ТипЭлемента = ТестированиеГрафическиеСхемыСервер.ТипЭлементаШаблонСценария() Тогда
			СтрокаДерева.Строки.Очистить();
			Продолжить;
		КонецЕсли;	 
		
		ОставитьВДеревеСхемыТолькоСтрокиСвоегоСценарияРекурсивно(СтрокаДерева);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ОбнаруженыИзмененныеШаблоны(ОбъектСервер)
	Если ОбъектСервер.ВерсииШаблонов.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;	 
	
	ВерсииБД = Тестирование.ВерсииСценариевБД(ОбъектСервер.ВерсииШаблонов.ВыгрузитьКолонку("Шаблон"));
	Для Каждого СтрокаШаблона Из ОбъектСервер.ВерсииШаблонов Цикл
		СтрокаВерсииБД = ВерсииБД.Найти(СтрокаШаблона.Шаблон,"Сценарий");
		Если СтрокаВерсииБД.Версия <> СтрокаШаблона.Версия Тогда
			Возврат Истина;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

&НаСервере
Процедура КомандаСформироватьИзГрафическойСхемыТекстСервер()
	РассчитатьГрафическуюСхемуСервер();
	СохранитьТекущуюСхемуВДерево(ПутьКСхемеТекущийИд,СхемаПроцессаBPMNТекущая);
	СформироватьИзГрафическойСхемыТекстСервер();
КонецПроцедуры

&НаСервере
Функция ПрисоединенныеФайлы()
	Массив = Новый Массив;
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	МассивСценариевДляПолученияФайлов = Новый Массив;
	МассивСценариевДляПолученияФайлов.Добавить(ОбъектСервер.Ссылка);
	Тестирование.ДополнитьВложенныеСценарии(МассивСценариевДляПолученияФайлов,ОбъектСервер.Ссылка);
	
	ДанныеФайлов = Тестирование.ДанныеФайлов(МассивСценариевДляПолученияФайлов);
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ДанныеФайла.Файл);
		Массив.Добавить(Новый Структура("ДвоичныеДанныеФайла,Имя,Расширение,Сценарий",
		      ДвоичныеДанныеФайла,ДанныеФайла.Наименование,ДанныеФайла.Расширение,ДанныеФайла.Сценарий));
	КонецЦикла;	
		  
	Возврат Массив;
КонецФункции	

&НаСервере
Процедура ВыполнитьПолнотекстовыйПоискШагаПоСтроке(Знач Стр,МассивВидимыхГрупп)
	Стр = СокрЛП(Стр);
	УбратьКлючевоеСлово(Стр);
	
	Массив = Новый Массив;
	МассивСтрок = СтрРазделить(Стр," ");
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Если НЕ ЗначениеЗаполнено(МассивСтрок[Ккк]) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(МассивСтрок[Ккк],1) = "[" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(МассивСтрок[Ккк],1) = """" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Лев(МассивСтрок[Ккк],1) = "'" Тогда
			Продолжить;
		КонецЕсли;	 
		
		Массив.Добавить(МассивСтрок[Ккк] + "*");
	КонецЦикла;	
	
	Стр = СтрСоединить(Массив," ");
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(Стр,500);
	СписокПоиска.ИспользованиеМетаданных = ИспользованиеМетаданныхПолнотекстовогоПоиска.Использовать;
	
	МассивОтбор = Новый Массив();
	МассивОтбор.Добавить(Метаданные.Справочники.ШагиСценариевПользователя);
	СписокПоиска.ОбластьПоиска = МассивОтбор;	
	
	СписокПоиска.ПерваяЧасть();
	МассивСсылок = Новый Массив;
	Для Каждого Элем Из СписокПоиска Цикл
		МассивСсылок.Добавить(Элем.Значение);
	КонецЦикла;	
	
	ДинамическийСписокШагиСценариев.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = ДинамическийСписокШагиСценариев.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ссылка");    
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = МассивСсылок;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
	ЭлементОтбора = ДинамическийСписокШагиСценариев.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЭтоГруппа");    
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
	Элементы.ГруппаИзвестныеШаги.Видимость = Истина;
	Элементы.ДинамическийСписокШагиСценариев.Отображение = ОтображениеТаблицы.Список;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеГруппыСпискаШагов(МассивВидимыхГрупп)
	Если НЕ Элементы.ГруппаИзвестныеШаги.Видимость Тогда
		Возврат;
	КонецЕсли;	 
	
	Для Каждого Группа Из МассивВидимыхГрупп Цикл
		Если НЕ Элементы.ДинамическийСписокШагиСценариев.Развернут(Группа) Тогда
			Элементы.ДинамическийСписокШагиСценариев.Развернуть(Группа,Истина);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПолнотекстовыйПоискШагаПродолжение()
	МассивВидимыхГрупп = Новый Массив;
	ВыполнитьПолнотекстовыйПоискШагаПоСтроке(СтрокаДляПоискаШагаПолнотекстовыйПоиск,МассивВидимыхГрупп);
	Элементы.ДинамическийСписокШагиСценариевСброситьОтборСпискаШагов.Видимость = Истина;
	РазвернутьВсеГруппыСпискаШагов(МассивВидимыхГрупп);
	ТекущийЭлемент = Элементы.ДинамическийСписокШагиСценариев;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеШагаИзСписка(Шаг)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиСценариевПользователя.Описание КАК Описание
		|ИЗ
		|	Справочник.ШагиСценариевПользователя КАК ШагиСценариевПользователя
		|ГДЕ
		|	ШагиСценариевПользователя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Шаг);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Описание; 
	КонецЦикла;

	Возврат Неопределено; 
КонецФункции	

&НаСервереБезКонтекста
Функция ТекстШагаИзЭлементаИзвестныеШаги(Элем)
	Возврат СокрЛП(Элем.Наименование);
КонецФункции	

&НаКлиенте
Процедура ОкончаниеВыбораПрофиляПользователя(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.ПрофильПользователя = Результат;
	КонецЕсли;	 
КонецПроцедуры

&НаСервере
Функция НайтиВДругихСценарияхСервер()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ВерсииШаблонов КАК СценарииРаботыПользователейВерсииШаблонов
		|ГДЕ
		|	СценарииРаботыПользователейВерсииШаблонов.Шаблон = &Шаблон
		|	И СценарииРаботыПользователейВерсииШаблонов.ВЭтомСценарии
		|
		|УПОРЯДОЧИТЬ ПО
		|	СценарииРаботыПользователейВерсииШаблонов.Ссылка.Наименование";
	
	Запрос.УстановитьПараметр("Шаблон", Объект.Ссылка);
	
	МассивСценариев = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	Макет = ОбъектСервер.ПолучитьМакет("ИспользованиеВДругихСценариях");
	
	ТабДок = Новый ТабличныйДокумент;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Сценарий = Объект.Ссылка;	
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Ном = 0;
	Для Каждого ВызывающийСценарий Из МассивСценариев Цикл
		Ном                              = Ном + 1;
		ОбластьСтрока.Параметры.Ном      = Ном;	
		ОбластьСтрока.Параметры.Сценарий = ВызывающийСценарий;	
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;	
	
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;
КонецФункции	

&НаКлиенте
Функция ТекущийНомерСтрокиСценария()
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		Возврат ТекущийНомерСтрокиОсновногоРедактора();
	Иначе	
		Если Элементы.ОбычныйТекст.Видимость Тогда
			НачалоСтроки = 0;
			НачалоКолонки = 0;
			КонецСтроки = 0;
			КонецКолонки = 0;
			Элементы.ОбычныйТекст.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
			
			Возврат НачалоСтроки;
		Иначе	
			ПозицияНачала    = 0;
			ПозицияОкончания = 0;
			Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
			
			ПозицияНачала = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияНачала);
			ПозицияОкончания = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
			
			ТекстСценария = СхемаПроцессаТекст.ПолучитьТекст();
			
			МассивСтрок = СтрРазделить(ТекстСценария,Символы.ПС);
			
			НомерСтроки = 0;
			ТекДлина = 0;
			Для Каждого СтрокаСценария Из МассивСтрок Цикл
				ТекДлина    = ТекДлина + СтрДлина(СтрокаСценария) + 1;
				НомерСтроки = НомерСтроки + 1;
				
				Если ПозицияНачала <= ТекДлина Тогда
					Прервать;
				КонецЕсли;	 
			КонецЦикла;	
			
			Возврат НомерСтроки;
		КонецЕсли;	 
	КонецЕсли;	
	
КонецФункции	

&НаКлиенте
Функция ДанныеПодчиненныхСценариев()
	Массив = Новый Массив;
	Для Каждого СтрокаВерсииШаблонов Из Объект.ВерсииШаблонов Цикл
		Структура = Новый Структура;
		Структура.Вставить("Сценарий",СтрокаВерсииШаблонов.Шаблон);
		Структура.Вставить("Версия",СтрокаВерсииШаблонов.Версия);
		
		Массив.Добавить(Структура);
	КонецЦикла;	
	
	Возврат Массив;
КонецФункции	 

&НаСервереБезКонтекста
Функция ИзмененныеПодчиненныеСценарии(ДанныеПодчиненныхСценариев)
	ТаблицаСценариев = Новый ТаблицаЗначений;
	ТаблицаСценариев.Колонки.Добавить("Сценарий");
	ТаблицаСценариев.Колонки.Добавить("Версия");
	Для Каждого Данные Из ДанныеПодчиненныхСценариев Цикл
		СтрокаТаблицаСценариев = ТаблицаСценариев.Добавить();
		СтрокаТаблицаСценариев.Сценарий = Данные.Сценарий;
		СтрокаТаблицаСценариев.Версия = Данные.Версия;
	КонецЦикла;
	
	ИзмененныеСценарии = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователей.Ссылка КАК Ссылка,
		|	СценарииРаботыПользователей.ВерсияСценария КАК ВерсияСценария
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
		|ГДЕ
		|	СценарииРаботыПользователей.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ТаблицаСценариев.ВыгрузитьКолонку("Сценарий"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Сценарий = ВыборкаДетальныеЗаписи.Ссылка;
		СтрокаТаблицаСценариев = ТаблицаСценариев.Найти(Сценарий,"Сценарий");
		Если СтрокаТаблицаСценариев.Версия <> ВыборкаДетальныеЗаписи.ВерсияСценария Тогда
			Структура = Новый Структура;
			Структура.Вставить("Сценарий",Сценарий);
			Структура.Вставить("НоваяВерсия",ВыборкаДетальныеЗаписи.ВерсияСценария);
			Структура.Вставить("ТекущаяВерсия",СтрокаТаблицаСценариев.Версия);
			
			ИзмененныеСценарии.Добавить(Структура);
		КонецЕсли;	 
	КонецЦикла;
	
	Возврат ИзмененныеСценарии;
КонецФункции	 

&НаКлиенте
Процедура ОтформатироватьТекстСценарияЕслиЭтоНеобходимо()
	ДанныеПодчиненныхСценариев    = ДанныеПодчиненныхСценариев();
	ИзмененныеПодчиненныеСценарии = ИзмененныеПодчиненныеСценарии(ДанныеПодчиненныхСценариев);
	
	Если ИзмененныеПодчиненныеСценарии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОтформатироватьСценарий();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНужнойСтрокеСценарияОбработчикОжидания()
	ПереходКСтрокеСценария(ПерейтиКНужнойСтрокеСценария,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПереходКСтрокеСценария(НомерСтрокиСценария,ВыделятьСтроку)
	Текст       = СхемаПроцессаТекст.ПолучитьТекст();
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	Если МассивСтрок.Количество() < НомерСтрокиСценария Тогда
		Возврат;
	КонецЕсли;	
	ДлинаСтроки = СтрДлина(МассивСтрок[НомерСтрокиСценария-1]);
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		
		Если НЕ РедакторИнициализирован Тогда
			ПодключитьОбработчикОжидания("ПерейтиКНужнойСтрокеСценарияОбработчикОжидания",0.1,Истина);
			Возврат;
		КонецЕсли;	
		
		ТекущаяВкладкаРедактора = ТекущаяВкладкаРедактора();
		ТекущаяВкладкаРедактора.revealLineInCenter(НомерСтрокиСценария);
		ТекущаяВкладкаРедактора.setPosition(НомерСтрокиСценария, 1, "");
		
	Иначе	
		
		Если Элементы.ОбычныйТекст.Видимость Тогда
			Если ВыделятьСтроку Тогда
				Элементы.ОбычныйТекст.УстановитьГраницыВыделения(НомерСтрокиСценария, 1, НомерСтрокиСценария, ДлинаСтроки+1);
			Иначе	
				Элементы.ОбычныйТекст.УстановитьГраницыВыделения(НомерСтрокиСценария, 1, НомерСтрокиСценария, 1);
			КонецЕсли;	 
		Иначе	
			
			ДлинаТекстаСНачала = 0;
			Для Ккк = 0 По НомерСтрокиСценария-1-1 Цикл
				Стр = МассивСтрок[Ккк];
				ДлинаТекстаСНачала = ДлинаТекстаСНачала + СтрДлина(Стр) + 1;
			КонецЦикла;	
			
			ПозицияНачала = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ДлинаТекстаСНачала);
			ПозицияОкончания = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ДлинаТекстаСНачала+ДлинаСтроки+1);
			
			Если ВыделятьСтроку Тогда
				Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
			Иначе	
				Элементы.СхемаПроцессаТекст.УстановитьГраницыВыделения(ПозицияНачала,ПозицияНачала);
			КонецЕсли;	 
		КонецЕсли;	 	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестСНачала()
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗапускСценария",Истина);
	ПараметрыОткрытия.Вставить("СТекущегоШага",Ложь);
	ПараметрыОткрытия.Вставить("ЗагрузкаСценария",Ложь);
	ОткрытьФормуФреймворкаТестирования(ПараметрыОткрытия);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСценария(Сценарий)
	Возврат Тестирование.ПараметрыСценария(Сценарий);
КонецФункции	 

&НаКлиенте
Процедура ДобавитьСтрокиПрисвоенияПараметровСлужебный(ВыборЗначения)
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ТекущаяСтрокаТекста = ТекущаяСтрокаТекста();
		Сценарий = НайтиСценарийПоСтроке(ТекущаяСтрокаТекста,Объект.Владелец);
		Если Сценарий = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	     		НСтр("ru = 'Не найден сценарий по строке <%1>.'"),ТекущаяСтрокаТекста));
			Возврат;
		КонецЕсли;	
		ПараметрыСценария = ПараметрыСценария(Сценарий);
		СтрокаПараметров = СокрЛ(СтрокаПараметровПодсценария(ПараметрыСценария));
		
		Если ВыборЗначения Тогда
			ПараметрыСценария = ПараметрыСценарияИзСтроки(СтрокаПараметров);
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ПараметрыСценария", ПараметрыСценария);
			ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ВыборПараметровСценария", ДопПараметры , ЭтаФорма);
			Возврат;
		КонецЕсли;	
		
		ДобавитьСтрокуПараметровВРедактор(СтрокаПараметров);
		
	Иначе	
		ПозицияНачалаСтрокиВТексте = 0;
		ПозицияОкончанияСтрокиВТексте = 0;
		ТекущаяСтрокаТекста = ТекущаяСтрокаТекста(ПозицияНачалаСтрокиВТексте,ПозицияОкончанияСтрокиВТексте);
		
		Если ПустаяСтрока(ТекущаяСтрокаТекста) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите не пустую строку текста.'"));
			Возврат;
		КонецЕсли;	 
		
		Сценарий = НайтиСценарийПоСтроке(ТекущаяСтрокаТекста,Объект.Владелец);
		
		Если Сценарий = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	     		НСтр("ru = 'Не найден сценарий по строке <%1>.'"),ТекущаяСтрокаТекста));
			Возврат;
		КонецЕсли;	
		
		ПараметрыСценария = ПараметрыСценария(Сценарий);
		
		СтрокаПараметров = СтрокаПараметровПодсценария(ПараметрыСценария);
		
		ПозицияДляВставки = СхемаПроцессаТекст.ПолучитьЗакладкуПоПозиции(ПозицияОкончанияСтрокиВТексте);
		СхемаПроцессаТекст.Вставить(ПозицияДляВставки,СтрокаПараметров);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаТекста(ПозицияНачалаСтрокиВТексте = Неопределено, ПозицияОкончанияСтрокиВТексте = Неопределено)
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		Возврат ТекущаяСтрокаОсновногоРедактора();
	Иначе	
		ПозицияНачала    = 0;
		ПозицияОкончания = 0;
		Элементы.СхемаПроцессаТекст.ПолучитьГраницыВыделения(ПозицияНачала,ПозицияОкончания);
		
		Если СокрЛП(СхемаПроцессаТекст.ПолучитьТекст()) = "" Тогда
			Возврат "";
		КонецЕсли;	 
		
		ПозицияНачала = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияНачала);
		ПозицияОкончания = СхемаПроцессаТекст.ПолучитьПозициюПоЗакладке(ПозицияОкончания);
		
		Текст   = СхемаПроцессаТекст.ПолучитьТекст();
		Возврат ПолучитьСтрокуТекстаПоПозиции(Текст,ПозицияНачала,ПозицияНачалаСтрокиВТексте,ПозицияОкончанияСтрокиВТексте);
	КонецЕсли;	
	
	
КонецФункции	 

&НаСервере
Процедура СхемаПроцессаBPMNВыборСервер(ИмяЭлементаСхемы,Подсценарий)
	СохранитьТекущуюСхемуВДерево(ПутьКСхемеТекущийИд,СхемаПроцессаBPMNТекущая);
	
	ИдСтрокиДерева         = Неопределено;
	ОписаниеСхемы          = Неопределено;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИдСтрокиДерева",ИдСтрокиДерева);
	ДопПараметры.Вставить("ОписаниеСхемы",ОписаниеСхемы);
	ДопПараметры.Вставить("Подсценарий",Подсценарий);
	
	ВложеннаяСхема = ПолучитьПодчиненнуюСхемуСервер(ИмяЭлементаСхемы,ДопПараметры);
	Подсценарий = ДопПараметры.Подсценарий;
	Если ВложеннаяСхема = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	ИдСтрокиДерева = ДопПараметры.ИдСтрокиДерева;
	ОписаниеСхемы  = ДопПараметры.ОписаниеСхемы;
	
	СхемаПроцессаBPMNТекущая = ВложеннаяСхема;
	ПутьКСхемеСписок.Добавить(ИдСтрокиДерева,ОписаниеСхемы);
	ПутьКСхемеТекущийИд = ИдСтрокиДерева;
	
	ПоказатьПутьКСхеме();
	
	Элементы.СхемаПроцессаBPMNТекущая.ТолькоПросмотр = ЭтоШаблонСценария(ПутьКСхемеТекущийИд);
КонецПроцедуры 

&НаКлиенте
Процедура ДействияПослеПолученияФайлаСервер(ТекстСценария)
	УстановитьТекстВСхемаПроцессаТекстСервер(ТекстСценария);
	ОтформатироватьСхемаПроцессаТекстКлиент();
	ПоказатьПутьКСхеме();
КонецПроцедуры 

&НаКлиенте
Процедура СформироватьТекстСценарияДляПросмотра(ДелатьРаскраскуТекста)
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		 НСтр("ru = 'Необходимо записать элемент перед получением текстов сценариев.'"));
		Возврат;
	КонецЕсли;	 
	
	ОтформатироватьТекстСценарияЕслиЭтоНеобходимо();	
	
	ТекстСценария = ПолучитьТекстыСценариевСервер(Модифицированность);
	Если ТекстСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ДелатьРаскраскуТекста Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ТекстСценария);
		ТекстовыйДокумент.Показать(Объект.Наименование);
		Возврат;
	КонецЕсли;	 
	
	ПараметрыСценария = Новый Структура;
	ПараметрыСценария.Вставить("ТекстСценария",ТекстСценария);
	ПараметрыСценария.Вставить("Проект",Объект.Владелец);
	ПараметрыСценария.Вставить("Сценарий",Объект.Ссылка);
	
	ОткрытьФорму("Справочник.НастройкиЗапускаСценариев.Форма.Сценарии",ПараметрыСценария,,Истина);
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СохранитьНастройкуВидимостиПанелиШагов(Значение)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Справочник.СценарииРаботыПользователей.ФормаЭлемента",
	      "ВидимостьПанелиШагов", Значение);
КонецПроцедуры 

&НаСервере
Процедура СменитьРедакторСценарияНаОбычныйТекстСервер(ТекстСценария)
	Если ТекстСценария = Неопределено Тогда
		Объект.ОбычныйТекст = СхемаПроцессаТекст.ПолучитьТекст();
	Иначе	
		Объект.ОбычныйТекст = ТекстСценария;
	КонецЕсли;	
	
	ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОбычныйТекст();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	    "Тестирование", "ТипРедактораВСценарииТестирования", ТипРедактора);
	
	ДелатьРаскраску = Ложь;
	УправлениеВидимостьюЭлементовСервер();
КонецПроцедуры

&НаСервере
Процедура СменитьРедакторСценарияНаРедакторСРаскраскойСервер(ТекстСценария)
	ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент();
	ДелатьРаскраску = Истина;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДелатьРаскраску",Истина);
	Если ТекстСценария = Неопределено Тогда
		ДополнительныеПараметры.Вставить("Текст", Объект.ОбычныйТекст);
	Иначе	
		ДополнительныеПараметры.Вставить("Текст",ТекстСценария);
	КонецЕсли;	
	ОтформатироватьСхемаПроцессаТекст(ДополнительныеПараметры);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	    "Тестирование", "ТипРедактораВСценарииТестирования", ТипРедактора);
	
	УправлениеВидимостьюЭлементовСервер();
КонецПроцедуры

&НаСервере
Функция ДелатьРаскраску()
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент() Тогда
		Возврат Истина;
	Иначе	
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

&НаКлиенте
Процедура СменитьРедакторСценарияНаОсновнойСлужебный() 
	#Если НЕ ВебКлиент Тогда
	
	ПредыдущийТипРедактора = ТипРедактора;
	ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной();
	Если ПредыдущийТипРедактора <> ТипРедактора Тогда
		УправлениеВидимостьюЭлементовСервер();
	КонецЕсли;
	
	Элементы.СраницыРедактор.ТекущаяСтраница = Элементы.СтраницаОсновнойРедактор;
	
	Если НЕ ЗначениеЗаполнено(СсылкаРедактора) Тогда
		ЕстьКешФайловРедактора = ТестированиеКлиент.ЕстьКешФайловРедактора(КаталогРедактора);
		Если НЕ ЕстьКешФайловРедактора Тогда
			Если НЕ ЗначениеЗаполнено(КаталогРедактора) Тогда
				КаталогРедактора = ПолучитьИмяВременногоФайла();
				СоздатьКаталог(КаталогРедактора);
				НадоУдалитьКаталогРедактора = Истина;
			КонецЕсли;	
			
			Файл = Новый Файл(КаталогРедактора);
			Если НЕ Файл.Существует() Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Каталог <%1> не существует.'"),КаталогРедактора);
			КонецЕсли;	     
			
			Если НЕ ЗначениеЗаполнено(МакетРедактора) Тогда
				ДвоичныеДанные = ДанныеМакетаРедактора();
			Иначе	
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(МакетРедактора);
				УдалитьИзВременногоХранилища(МакетРедактора);
			КонецЕсли;	
			МакетРедактора = ""; 
			
			ЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
			ЧтениеZipФайла.ИзвлечьВсе(КаталогРедактора, РежимВосстановленияПутейФайловZIP.Восстанавливать);
			ЧтениеZipФайла.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаРедактора) Тогда
		СсылкаРедактора = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогРедактора) + "index.html?localeCode=" + Лев(ТекущийЯзыкСистемы(), 2);
	Иначе
		ДоступностьКнопокСменыРедактораКлиент(Истина);
	КонецЕсли;
	
	Если ЗакладкиРедактора <> Неопределено И ТекущаяВкладкаРедактора() <> Неопределено Тогда
		Если ПредыдущийТипРедактора = ТестированиеКлиентСервер.ТипРедактораОбычныйТекст() Тогда
			УстановитьТекстСценарияТекущейВкладкиРедактора(Объект.ОбычныйТекст);
		ИначеЕсли ПредыдущийТипРедактора = ТестированиеКлиентСервер.ТипРедактораФорматированныйДокумент() Тогда
			УстановитьТекстСценарияТекущейВкладкиРедактора(СхемаПроцессаТекст.ПолучитьТекст());
		КонецЕсли;	
	КонецЕсли;	

	Если ПредыдущийТипРедактора <> ТипРедактора ИЛИ НЕ ЕстьКешВПараметрахСеанса Тогда
		СменитьРедакторСценарияНаОсновнойСлужебныйСервер(ТипРедактора, НадоУдалитьКаталогРедактора);
	КонецЕсли;	
	
	ПодключитьОбработчикОжиданияМодифицированностиОсновногоРедактора();
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаМодифицированностиВкладкиОсновногоРедактора()
	
	Попытка
		Если ЗакладкиРедактора <> Неопределено И ЗакладкиРедактора.tabStack.length > 0 Тогда
			Если ЗакладкиРедактора.tabStack[0].modified Тогда
				Модифицированность = Истина;
			КонецЕсли;	
		КонецЕсли;	
	Исключение
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("РедакторСценариев","Ошибка",ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура СменитьРедакторСценарияНаОсновнойСлужебныйСервер(ТипРедактора, НадоУдалитьКаталогРедактора)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	    "Тестирование", "ТипРедактораВСценарииТестирования", ТипРедактора);
	
	Если НЕ НадоУдалитьКаталогРедактора Тогда
		УстановитьПривилегированныйРежим(Истина);
		ТекущиеПараметры = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
		ТекущиеПараметры.Вставить("ЕстьКешФайловРедактораСценариев", Истина);
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ТекущиеПараметры);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;	
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ДанныеМакетаРедактора()
	Возврат ПолучитьОбщийМакет("РедакторТекстов");	
КонецФункции	

&НаКлиенте
Процедура ИнициализироватьРедактор()
	
	ДанныеРедактора = Новый Структура;
	РедакторСценариевКлиент.ИнициализироватьРедактор(Элементы.РедакторHTML, ДанныеРедактора);	
	ЗакладкиРедактора = ДанныеРедактора.ЗакладкиРедактора;
	GherkinProvider = ДанныеРедактора.GherkinProvider;
	
	ПодключитьОбработчикОжидания("ОткрытьВкладкуВРедакторе", 0.1, Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьВкладкуВРедакторе()
	ТекстСценария = Объект.ОбычныйТекст;
	ЗаголовокЗакладки = НСтр("ru = 'Текст сценария'") + ".feature";
	ЭкземплярРедактора = ЗакладкиРедактора.edit(ТекстСценария,
		ЗаголовокЗакладки,
		ЗаголовокЗакладки, НСтр("ru = 'Текст сценария'"), 0, Ложь, Истина);
		
	РедакторСценариевКлиент.УстановитьСписокШагов(Элементы.РедакторHTML, Объект.ВерсииШаблонов);
	
	РедакторИнициализирован = Истина;
КонецПроцедуры

&НаКлиенте
Функция ТекущаяВкладкаРедактора()
	
	Возврат ЗакладкиРедактора.current.editor;
	
КонецФункции	

&НаКлиенте
Функция ТекущийТекстСценарияОсновногоРедактора()
	Возврат ТекущаяВкладкаРедактора().getContent();
КонецФункции

&НаКлиенте
Процедура УстановитьТекстСценарияТекущейВкладкиРедактора(ТекстСценария)
	Если ТекущийТекстСценарияОсновногоРедактора() <> ТекстСценария Тогда
		ТекущаяВкладкаРедактора().setContent(ТекстСценария);
		РедакторСценариевКлиент.УстановитьСписокШагов(Элементы.РедакторHTML, Объект.ВерсииШаблонов);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СброситьПризнакМодифицированностиВкладкиРедактора()
	ЗакладкиРедактора.current.resetModified();
КонецПроцедуры

&НаКлиенте
Функция ТекущаяСтрокаОсновногоРедактора()
	ТекНомерСтроки = ТекущаяВкладкаРедактора().getPosition().lineNumber;
	Возврат ТекущаяВкладкаРедактора().getLineContent(ТекНомерСтроки);
КонецФункции	

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияМодифицированностиОсновногоРедактора()
	
	Если ТипРедактора = ТестированиеКлиентСервер.ТипРедактораОсновной() Тогда
		ОтключитьОбработчикОжидания("ПроверкаМодифицированностиВкладкиОсновногоРедактора");
		ПодключитьОбработчикОжидания("ПроверкаМодифицированностиВкладкиОсновногоРедактора", 1, Ложь);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрокеОсновногоРедактора(НомерСтроки)
	ПерейтиКНужнойСтрокеСценария = НомерСтроки;
	ПодключитьОбработчикОжидания("ПерейтиКСтрокеОсновногоРедактораОбработчик", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтрокеОсновногоРедактораОбработчик()
	ТекущаяВкладкаРедактора().revealLineInCenter(ПерейтиКНужнойСтрокеСценария);
	ТекущаяВкладкаРедактора().setSelection(ПерейтиКНужнойСтрокеСценария, 1, ПерейтиКНужнойСтрокеСценария, 1);
КонецПроцедуры

&НаКлиенте
Функция ТекущийНомерСтрокиОсновногоРедактора()
	Возврат ТекущаяВкладкаРедактора().getSelection().startLineNumber;
КонецФункции	

&НаКлиенте
Функция ТаблицаИзДанныхРедактораПоНомерСтроки(ТекущаяСтрока)
	
	ЭкземплярРедактор = ТекущаяВкладкаРедактора();
	ТекущаяСтрокаРедактор = ЭкземплярРедактор.getPosition().LineNumber;
	ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(ТекущаяСтрокаРедактор);
	ТекстСтроки = СокрЛ(ПолныйТекстСтроки);
	
	МинСтр = ТекущаяСтрокаРедактор;
	МаксСтр = ТекущаяСтрокаРедактор;
	ДлинаМаксСтр = СтрДлина(ПолныйТекстСтроки);
	
	МассивСтрокДляРедактирования = Новый Массив;
	МассивСтрокДляРедактирования.Добавить(ТекстСтроки);
	
	ТекНомСтр = ТекущаяСтрокаРедактор;
	Пока Истина Цикл
		ТекНомСтр = ТекНомСтр - 1;
		ТекстСтроки = СокрЛ(ЭкземплярРедактор.getLineContent(ТекНомСтр));
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	
		
		МинСтр = ТекНомСтр;
		
		МассивСтрокДляРедактирования.Вставить(0, ТекстСтроки);
	КонецЦикла;	
	
	ТекНомСтр = ТекущаяСтрокаРедактор;
	Пока Истина Цикл
		ТекНомСтр = ТекНомСтр + 1;
		Стр = ЭкземплярРедактор.getLineContent(ТекНомСтр);
		ТекстСтроки = СокрЛ(Стр);
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	
		
		МаксСтр = ТекНомСтр;
		ДлинаМаксСтр = СтрДлина(Стр);
		
		МассивСтрокДляРедактирования.Добавить(ТекстСтроки);
	КонецЦикла;	
	
	Возврат МассивСтрокДляРедактирования;
	
КонецФункции	

&НаКлиенте
Процедура ЗаменитьТаблицуРедактораПослеРедактирования(МассивСтрокТаблицы)
		
	ЭкземплярРедактор = ТекущаяВкладкаРедактора();
	Попытка
		ПозицияРедактор = ЭкземплярРедактор.getPosition();
	Исключение
		Возврат;
	КонецПопытки;
	
	ТекущаяСтрокаРедактор = ПозицияРедактор.LineNumber;
	ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(ТекущаяСтрокаРедактор);
	ТекстСтроки = СокрЛ(ПолныйТекстСтроки);
	Префикс = Лев(ПолныйТекстСтроки, СтрДлина(ПолныйТекстСтроки) - СтрДлина(ТекстСтроки));
	
	РедакторСценариевКлиент.ФорматироватьТаблицуСценария(МассивСтрокТаблицы);
	СтрокаЗамены = "";
	Для Каждого Стр Из МассивСтрокТаблицы Цикл
		СтрокаЗамены = СтрокаЗамены + Префикс + Стр + Символы.ПС;
	КонецЦикла;	 
	
	СтрокаЗамены = СокрП(СтрокаЗамены);
	
	МинСтр = 0;
	МаксСтр = 0;
	ДлинаМаксСтр = 0;
	МассивСтрокДляРедактирования = ТаблицаИзДанныхРедактора(ТекущаяСтрокаРедактор, МинСтр, МаксСтр, ДлинаМаксСтр);
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("startLineNumber", МинСтр);
	Соответствие.Вставить("startColumn", 1);
	Соответствие.Вставить("endLineNumber", МаксСтр);
	Соответствие.Вставить("endColumn", ДлинаМаксСтр+1);
	ЭкземплярРедактор.insertText(СтрокаЗамены, РедакторСценариевКлиент.ЗаписатьОбъектJSON(Соответствие));
	
КонецПроцедуры

&НаКлиенте
Функция ТаблицаИзДанныхРедактора(ТекущаяСтрокаРедактор, МинСтр, МаксСтр, ДлинаМаксСтр) Экспорт
	ЭкземплярРедактор = ТекущаяВкладкаРедактора();
	ТекущаяСтрокаРедактор = ЭкземплярРедактор.getPosition().LineNumber;
	ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(ТекущаяСтрокаРедактор);
	ТекстСтроки = СокрЛ(ПолныйТекстСтроки);
	
	МинСтр = ТекущаяСтрокаРедактор;
	МаксСтр = ТекущаяСтрокаРедактор;
	ДлинаМаксСтр = СтрДлина(ПолныйТекстСтроки);
	
	МассивСтрокДляРедактирования = Новый Массив;
	МассивСтрокДляРедактирования.Добавить(ТекстСтроки);
	
	ТекНомСтр = ТекущаяСтрокаРедактор;
	Пока Истина Цикл
		ТекНомСтр = ТекНомСтр - 1;
		ТекстСтроки = СокрЛ(ЭкземплярРедактор.getLineContent(ТекНомСтр));
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	
		
		МинСтр = ТекНомСтр;
		
		МассивСтрокДляРедактирования.Вставить(0, ТекстСтроки);
	КонецЦикла;	
	
	ТекНомСтр = ТекущаяСтрокаРедактор;
	Пока Истина Цикл
		ТекНомСтр = ТекНомСтр + 1;
		Стр = ЭкземплярРедактор.getLineContent(ТекНомСтр);
		ТекстСтроки = СокрЛ(Стр);
		Если Лев(ТекстСтроки, 1) <> "|" Тогда
			Прервать;
		КонецЕсли;	
		
		МаксСтр = ТекНомСтр;
		ДлинаМаксСтр = СтрДлина(Стр);
		
		МассивСтрокДляРедактирования.Добавить(ТекстСтроки);
	КонецЦикла;	
	
	Возврат МассивСтрокДляРедактирования;
	
КонецФункции

&НаКлиенте
Функция СтрокаПараметровПодсценария(ПараметрыСценария)
	
	СтрокаПараметров = Символы.ПС;
	Для Каждого ПараметрСценария Из ПараметрыСценария Цикл
		Если ПараметрСценария.ИсходящийПараметр Тогда
			СтрокаПараметров = СтрокаПараметров + "Возврат " +  ПараметрСценария.Имя + " как $" + ПараметрСценария.Имя + "$" + Символы.ПС;
		Иначе	
			СтрокаПараметров = СтрокаПараметров + ПараметрСценария.Имя + " = '" + ПараметрСценария.Значение + "'" + Символы.ПС;
		КонецЕсли;	 
	КонецЦикла;	
	
	СтрокаПараметров = СтрокаПараметров + Символы.ПС;
	
	Возврат СтрокаПараметров;
	
КонецФункции	

&НаКлиенте
Функция ПараметрыСценарияИзСтроки(Стр)
	Результат = Новый Массив;
	
	МассивСтрок = СтрРазделить(Стр, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		ТекСтр = МассивСтрок[Сч];
		Поз = Найти(ТекСтр,"=");
		Если Поз > 0 Тогда
			Результат.Добавить(СокрЛП(Лев(ТекСтр, Поз - 1)));
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ДобавитьСтрокуПараметровВРедактор(СтрокаПараметров)
	
	ЭкземплярРедактор = ТекущаяВкладкаРедактора();
	
	ТекНомерСтроки = ЭкземплярРедактор.getPosition().lineNumber + 1;
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("startLineNumber", ТекНомерСтроки);
	Соответствие.Вставить("startColumn", 1);
	Соответствие.Вставить("endLineNumber", ТекНомерСтроки);
	Соответствие.Вставить("endColumn", 1);
	ЭкземплярРедактор.insertText(СтрокаПараметров, РедакторСценариевКлиент.ЗаписатьОбъектJSON(Соответствие));
	
КонецПроцедуры

&НаСервере
Процедура ДоступностьКнопокСменыРедактораСервер(Значение)
	
	Элементы.ФормаСменитьРедакторНаОсновной.Доступность = Значение;
	Элементы.СменитьРедакторСценарияНаОбычныйТекст.Доступность = Значение;
	Элементы.СменитьРедакторСценарияНаРедакторСРаскраской.Доступность = Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКнопокСменыРедактораКлиент(Значение)
	
	Элементы.ФормаСменитьРедакторНаОсновной.Доступность = Значение;
	Элементы.СменитьРедакторСценарияНаОбычныйТекст.Доступность = Значение;
	Элементы.СменитьРедакторСценарияНаРедакторСРаскраской.Доступность = Значение;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьКнопокСменыРедактораКлиентОбработчик()
	
	ДоступностьКнопокСменыРедактораКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ВыделенныйТекстОсновногоРедактора()
	
	ЭкземплярРедактор= ТекущаяВкладкаРедактора();
	ВыделеннаяОбласть = ЭкземплярРедактор.getSelection();
	НачалоДиапазона = ВыделеннаяОбласть.startLineNumber;
	ОкончаниеДиапазона = ВыделеннаяОбласть.endLineNumber;
	
	Если ПустаяСтрока(ЭкземплярРедактор.getLineContent(ОкончаниеДиапазона)) ИЛИ ВыделеннаяОбласть.endColumn = 1 Тогда
		ОкончаниеДиапазона = ОкончаниеДиапазона - 1;
	КонецЕсли;	 
	
	ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(ОкончаниеДиапазона);
	ДлинаМаксСтр = СтрДлина(ПолныйТекстСтроки);
	
	Массив = Новый Массив;
	Для Сч = НачалоДиапазона По ОкончаниеДиапазона Цикл
		ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(Сч);
		Массив.Добавить(ПолныйТекстСтроки);
	КонецЦикла;	
	
	Текст = СокрП(СтрСоединить(Массив, Символы.ПС));
	
	Возврат Текст;
	
КонецФункции	

&НаКлиенте
Процедура УстановитьТекстРедактораОбработчик()
	УстановитьТекстСценарияТекущейВкладкиРедактора(ТекстРедактораПослеИнициализации);
	ТекстРедактораПослеИнициализации = "";
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУбратьКомментарийОсновнойРедактор(ДобавлятьКомментарий)
	
	ЭкземплярРедактор= ТекущаяВкладкаРедактора();
	ВыделеннаяОбласть = ЭкземплярРедактор.getSelection();
	НачалоДиапазона = ВыделеннаяОбласть.startLineNumber;
	ОкончаниеДиапазона = ВыделеннаяОбласть.endLineNumber;
	
	Если ПустаяСтрока(ЭкземплярРедактор.getLineContent(ОкончаниеДиапазона)) ИЛИ ВыделеннаяОбласть.endColumn = 1 Тогда
		ОкончаниеДиапазона = ОкончаниеДиапазона - 1;
	КонецЕсли;	 
	
	ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(НачалоДиапазона);
	
	ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(ОкончаниеДиапазона);
	ДлинаМаксСтр = СтрДлина(ПолныйТекстСтроки);
	
	Массив = Новый Массив;
	Для Сч = НачалоДиапазона По ОкончаниеДиапазона Цикл
		ПолныйТекстСтроки = ЭкземплярРедактор.getLineContent(Сч);
		Если ДобавлятьКомментарий Тогда
			ПолныйТекстСтроки = "//" + ПолныйТекстСтроки;
		Иначе	
			Поз = Найти(ПолныйТекстСтроки, "//");
			Если Поз > 0 Тогда
				ПолныйТекстСтроки = Сред(ПолныйТекстСтроки, Поз + 2);
			КонецЕсли;	 
		КонецЕсли;
		Массив.Добавить(ПолныйТекстСтроки);
	КонецЦикла;	
	
	СтрокаЗамены = СокрП(СтрСоединить(Массив, Символы.ПС));
	
	Соответствие = new Соответствие;
	Соответствие.Вставить("startLineNumber", НачалоДиапазона);
	Соответствие.Вставить("startColumn", 1);
	Соответствие.Вставить("endLineNumber", ОкончаниеДиапазона);
	Соответствие.Вставить("endColumn", ДлинаМаксСтр+1);
	ЭкземплярРедактор.insertText(СтрокаЗамены, РедакторСценариевКлиент.ЗаписатьОбъектJSON(Соответствие));
		
КонецПроцедуры

#КонецОбласти

