#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТокенПользователя = Параметры.ТокенПользователя;
	
	Если НЕ ЗначениеЗаполнено(ТокенПользователя) Тогда
		Отказ = Истина;
		ВызватьИсключение НСтр("ru = 'Не указан токен пользователя.'");
	КонецЕсли;	 
	
	ТекущийПроект = Параметры.Проект;
	Ветка = Параметры.Ветка;
	АдресСлужебныеДанныеСценариев = Параметры.АдресСлужебныеДанныеСценариев;
	ИдентификаторКоммита = Параметры.ИдентификаторКоммита;
	
	Заголовок = СтрШаблон(НСтр("ru = 'Фиксация изменений в git (%1)'"), Ветка);
	Элементы.ЗаголовокЗапросаНаСлияние.Видимость = Ложь;
	
	Если Параметры.Свойство("СсылкаНаОшибку") И ЗначениеЗаполнено(Параметры.СсылкаНаОшибку) Тогда
		ТекстИсправления = Справочники.Ошибки.ТекстДляХранилищаКонфигурации(Параметры.СсылкаНаОшибку);
		МассивСтрок = СтрРазделить(СокрЛП(ТекстИсправления),Символы.ПС);
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаголовокЗапросаНаСлияние = МассивСтрок[0];
			МассивТекстСообщения = Новый Массив;
			Для Сч = 0 По Мин(49, МассивСтрок.Количество() - 1) Цикл
				МассивТекстСообщения.Добавить(МассивСтрок[Сч]);
			КонецЦикла;	
			ТекстСообщения = СтрСоединить(МассивТекстСообщения, Символы.ПС);
		КонецЕсли;	 
	КонецЕсли;	 
	
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	    "Справочник.СценарииРаботыПользователей.ФормаФиксироватьИзменения", "КомуОтправить");
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		Если НЕ ЗначениеЗаполнено(КомуОтправить) Тогда
			КомуОтправить = СохраненноеЗначение;
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьВидимость();
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, ТекущийПроект);
	
	Для Каждого ИзмененныйUID Из ДанныеРанееИзмененныхСценариев.ИзмененныеUID Цикл
		СтрокаТаблицаИзменений = ТаблицаИзменений.Добавить();
		СтрокаТаблицаИзменений.Наименование = ИзмененныйUID.Имя;
	КонецЦикла;	 
	
	КодСценария = Неопределено;
	Если ДанныеРанееИзмененныхСценариев.ИзмененныеUID.Количество() > 0 Тогда
		КодСценария = ДанныеРанееИзмененныхСценариев.ИзмененныеUID[0].Код;
	КонецЕсли;	 	
	
	ИмяВеткиМерджРеквеста = ИмяВеткиМерджРеквестаСервер(ТекущийПроект, Ветка, ПользователиКлиент.ТекущийПользователь(), КодСценария);
	ИмяВеткиМерджРеквеста = СтрЗаменить(ИмяВеткиМерджРеквеста, """", "");
		
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Элементы.ФормаФиксировать.Доступность = Ложь;
		Элементы.ФормаКнопкаОтменить.Доступность = Ложь;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, ТекущийПроект);
	
	ТаблицаИзменений.Очистить();
	Для Каждого ИзмененныйUID Из ДанныеРанееИзмененныхСценариев.ИзмененныеUID Цикл
		СтрокаТаблицаИзменений = ТаблицаИзменений.Добавить();
		СтрокаТаблицаИзменений.Наименование = ИзмененныйUID.Имя;
	КонецЦикла;	 
	
	Если ТаблицаИзменений.Количество() = 0 Тогда
		Элементы.ФормаФиксировать.Доступность = Ложь;
		Элементы.ФормаКнопкаОтменить.Доступность = Ложь;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СохранитьЗначенияПриЗакрытии(КомуОтправить);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Фиксировать(Команда)
	#Если НЕ ВебКлиент Тогда
		
	Если ПустаяСтрока(ТекстСообщения) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнен текст коммита.'");
	КонецЕсли;	 
	
	ДанныеРанееИзмененныхСценариев = ТестированиеКлиент.ДанныеРанееИзмененныхСценариев(Ветка, ТекущийПроект);
	ДобавитьДвоичныеДанныеДляИзмененныхФайлов(ДанныеРанееИзмененныхСценариев);
	
	ОбновленныйТекстЭталонныхБаз = Неопределено;
	ДанныеФайлаЭталонныхБаз = ДанныеФайлаЭталонныхБазСервер(ДанныеРанееИзмененныхСценариев, ТекущийПроект, Ветка, ТокенПользователя);
	Если ДанныеФайлаЭталонныхБаз <> Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("yaml");
		ДанныеДляВыгрузки = ДанныеДляВыгрузкиЭталонныхБД(ДанныеФайлаЭталонныхБаз);
		ТестированиеКлиент.ВыгрузитьДанныеЭталонныхБДВФайл(ДанныеДляВыгрузки, ИмяФайла);
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ИмяФайла,"UTF-8");
		ОбновленныйТекстЭталонныхБаз = Текст.Прочитать();
		Текст.Закрыть();
	КонецЕсли;	 
	
	РезультатФиксации = ФиксироватьСервер(ДанныеРанееИзмененныхСценариев, ТекущийПроект, Ветка, ТокенПользователя, ОбновленныйТекстЭталонныхБаз);
	
	Если НЕ РезультатФиксации.Ошибка Тогда
		ТестированиеКлиент.УдалитьВременныеФайлыСценариевРаботыПользователей(Ветка, ИмяПроектаСтрокой(ТекущийПроект));
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Закрыть", Истина);
		Если РезультатФиксации.ОтветСервера.Свойство("iid") Тогда
			ДопПараметры.Вставить("ИдентификаторЗапросаНаСлияние", РезультатФиксации.ОтветСервера.iid);
		КонецЕсли;	
		ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
			"ПослеПредупреждения", ЭтаФорма, ДопПараметры);
		
		Если СоздатьМерджРеквест Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Создан запрос на слияние: '")));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'ссылка'"),,,,РезультатФиксации.WebСсылка));
			
			ТекстПредупреждения = Новый ФорматированнаяСтрока(МассивСтрок);
			
			ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, ТекстПредупреждения);
			
		Иначе	
			
			ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Изменения зафиксированы в ветке <%1>.'"), ИмяВеткиСтрокой(Ветка)));
		КонецЕсли;	 
	Иначе	
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Закрыть", Ложь);
		ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
			"ПослеПредупреждения", ЭтаФорма, ДопПараметры);
		ВызватьИсключение  НСтр("ru = 'Во время фиксации изменений возникли ошибки.'")
			+ Символы.ПС + РезультатФиксации.ТекстОшибки;
	КонецЕсли;	 
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтменить(Команда)
	
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите отменить все изменения сценариев пользователей в данной ветке?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВопросаОбОтменеСценариев", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМерджРеквестПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимость()
	Элементы.ИмяВеткиМерджРеквеста.Видимость = СоздатьМерджРеквест;
	Элементы.КомуОтправить.Видимость = СоздатьМерджРеквест;
	Элементы.ЗаголовокЗапросаНаСлияние.Видимость = СоздатьМерджРеквест;
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ЗаголовокЗапросаНаСлияниеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		ТекстСообщения = ЗаголовокЗапросаНаСлияние;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСообщенияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЗаголовокЗапросаНаСлияние) Тогда
		ЗаголовокЗапросаНаСлияние = ТекстСообщения;
	КонецЕсли;	 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТЧТаблицаИзменений

&НаКлиенте
Процедура ТаблицаИзмененийПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИзмененийПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИзмененийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ИмяВеткиСтрокой(Ветка)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Наименование"); 
КонецФункции	 

&НаСервере
Функция ДанныеФайлаЭталонныхБазСервер(ДанныеРанееИзмененныхСценариев, ТекущийПроект, Ветка, ТокенПользователя)
	ДанныеФиксацииИзменений = Новый Структура;
	ДанныеФиксацииИзменений.Вставить("СоздатьМерджРеквест", СоздатьМерджРеквест);
	ДанныеФиксацииИзменений.Вставить("ИмяВеткиМерджРеквеста", ИмяВеткиМерджРеквеста);
	ДанныеФиксацииИзменений.Вставить("КомуОтправить", КомуОтправить);
	ДанныеФиксацииИзменений.Вставить("ТекстСообщения", ТекстСообщения);
	ДанныеФиксацииИзменений.Вставить("ЗаголовокЗапросаНаСлияние", ЗаголовокЗапросаНаСлияние(ЗаголовокЗапросаНаСлияние));
	ДанныеФиксацииИзменений.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	
	ДанныеПодключения = Новый Структура;
	ДанныеПодключения.Вставить("Проект", ТекущийПроект);
	ДанныеПодключения.Вставить("Ветка", Ветка);
	ДанныеПодключения.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеПодключения.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	
	Возврат Тестирование.ДанныеФайлаЭталонныхБаз(ДанныеРанееИзмененныхСценариев, ДанныеПодключения, ДанныеФиксацииИзменений);
КонецФункции	 

&НаСервере
Функция ФиксироватьСервер(ДанныеРанееИзмененныхСценариев, ТекущийПроект, Ветка, ТокенПользователя, ОбновленныйТекстЭталонныхБаз)
	ДанныеФиксацииИзменений = Новый Структура;
	ДанныеФиксацииИзменений.Вставить("СоздатьМерджРеквест", СоздатьМерджРеквест);
	ДанныеФиксацииИзменений.Вставить("ИмяВеткиМерджРеквеста", ИмяВеткиМерджРеквеста);
	ДанныеФиксацииИзменений.Вставить("КомуОтправить", КомуОтправить);
	ДанныеФиксацииИзменений.Вставить("ТекстСообщения", ТекстСообщения);
	ДанныеФиксацииИзменений.Вставить("ЗаголовокЗапросаНаСлияние", ЗаголовокЗапросаНаСлияние(ЗаголовокЗапросаНаСлияние));
	ДанныеФиксацииИзменений.Вставить("АдресСлужебныеДанныеСценариев", АдресСлужебныеДанныеСценариев);
	ДанныеФиксацииИзменений.Вставить("ОбновленныйТекстЭталонныхБаз", ОбновленныйТекстЭталонныхБаз);
	
	ДанныеПодключения = Новый Структура;
	ДанныеПодключения.Вставить("Проект", ТекущийПроект);
	ДанныеПодключения.Вставить("Ветка", Ветка);
	ДанныеПодключения.Вставить("ТокенПользователя", ТокенПользователя);
	ДанныеПодключения.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	
	Возврат Тестирование.ФиксироватьИзменения(ДанныеРанееИзмененныхСценариев, ДанныеПодключения, ДанныеФиксацииИзменений);
КонецФункции 

&НаКлиенте
Процедура ПослеПредупреждения(ДопПараметры) Экспорт
	Если ДопПараметры.Закрыть Тогда
		Закрыть();
		
		Если СоздатьМерджРеквест Тогда
			ВеткаМерджРеквеста = СоздатьВеткуСервер(ТекущийПроект, ИмяВеткиМерджРеквеста, Ветка, ДопПараметры);
			ТекстЗаголовка = НСтр("ru='Создание ветки.'");
			ТекстСообщенияВОповещении = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Создана ветка: %1'"), ВеткаМерджРеквеста);
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ВеткаМерджРеквеста);
			ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
			ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщенияВОповещении, БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;	 
	
	Оповестить("ФиксацияИзмененийСценариевПользователей");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВопросаОбОтменеСценариев(Результат, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ТестированиеКлиент.УдалитьВременныеФайлыСценариевРаботыПользователей(Ветка, ИмяПроектаСтрокой(ТекущийПроект));
		Оповестить("ОтменаИзмененийСценариевРаботыПользователя");
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Закрыть", Истина);
		ОписаниеОповещенияПослеПредупреждения = Новый ОписаниеОповещения(
			"ПослеПредупреждения", ЭтаФорма, ДопПараметры);
		ПоказатьПредупреждение(ОписаниеОповещенияПослеПредупреждения, НСтр("ru = 'Изменения отменены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьВеткуСервер(Проект, ИмяВетки, ВеткаИсточник, ДопПараметры)
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Владелец", Проект);
	ДанныеЗаполнения.Вставить("Имя", ИмяВетки);
	ДанныеЗаполнения.Вставить("Наименование", ИмяВетки);
	ДанныеЗаполнения.Вставить("Источник ", ВеткаИсточник);
	ДанныеЗаполнения.Вставить("Статус ", Перечисления.СтатусыВеток.Тестируется);
	ДанныеЗаполнения.Вставить("ИдентификаторЗапросаНаСлияние ", ДопПараметры.ИдентификаторЗапросаНаСлияние);
	
	Возврат Справочники.Ветки.НоваяВетка(Неопределено, ДанныеЗаполнения); 
КонецФункции	 

&НаКлиенте
Процедура ДобавитьДвоичныеДанныеДляИзмененныхФайлов(ДанныеРанееИзмененныхСценариев)
	Для Каждого ДанныеИзмененногоФайла Из ДанныеРанееИзмененныхСценариев.ИзмененныеФайлы Цикл
		Если ДанныеИзмененногоФайла.Действие = "Добавление" ИЛИ ДанныеИзмененногоФайла.Действие = "Изменение" Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ДанныеИзмененногоФайла.ПутьЛокально);
			ДанныеИзмененногоФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ИмяПроектаСтрокой(Проект)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "Наименование"); 
КонецФункции	 

&НаКлиенте
Функция ДанныеДляВыгрузкиЭталонныхБД(ДанныеФайлаЭталонныхБаз)
	Результат = Новый Массив;
	Для Каждого ДанныеЭталоннойБД Из ДанныеФайлаЭталонныхБаз["ЭталонныеБД"] Цикл
		ДанныеБазы = Новый Структура;
		ДанныеБазы.Вставить("Наименование", ДанныеЭталоннойБД["Наименование"]);
		ДанныеБазы.Вставить("ПутьКФайлуВыгрузки", ДанныеЭталоннойБД["ПутьКФайлуВыгрузки"]);
		ДанныеБазы.Вставить("ИдентификаторБазы", ДанныеЭталоннойБД["ИдентификаторБазы"]);
		ДанныеБазы.Вставить("ПрофилиПользователей", Новый Массив);
		Для Каждого ТекПользователь Из ДанныеЭталоннойБД["ПрофилиПользователей"] Цикл
			ДанныеПользователя = Новый Структура;
			ДанныеПользователя.Вставить("ПрофильПользователя", ТекПользователь["ПрофильПользователя"]);
			ДанныеПользователя.Вставить("Логин", ТекПользователь["Логин"]);
			ДанныеПользователя.Вставить("Пароль", ТекПользователь["Пароль"]);
			ДанныеБазы.ПрофилиПользователей.Добавить(ДанныеПользователя);
		КонецЦикла;	 
		
		Результат.Добавить(ДанныеБазы);
	КонецЦикла;	 
	
	Возврат Результат;
	
КонецФункции	 

&НаСервереБезКонтекста
Процедура СохранитьЗначенияПриЗакрытии(КомуОтправить)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Справочник.СценарииРаботыПользователей.ФормаФиксироватьИзменения",
	      "КомуОтправить", КомуОтправить);
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЗаголовокЗапросаНаСлияние(Стр)
	
	Если НЕ ЗначениеЗаполнено(Стр) Тогда
		Возврат НСтр("ru = 'Фиксация изменений из СППР.'");
	КонецЕсли;	 
	
	Возврат Стр; 
	
КонецФункции	

&НаСервереБезКонтекста
Функция ИмяВеткиМерджРеквестаСервер(ТекущийПроект, Ветка, Ответственный, КодСценария)
	
	ИмяВетки = "";
	
	РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ветка, "Имя, Владелец, Тип");
	Если РеквизитыВетки.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта
		ИЛИ РеквизитыВетки.Тип = Перечисления.ТипыВеток.ВеткаВерсии Тогда
		Версии = ВерсииИспользующиеВетку(Ветка);
		Если Версии.Количество() > 0 Тогда
			ИмяВетки = Версии[0];
		КонецЕсли;
	Иначе
		ИмяВетки = РеквизитыВетки.Имя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяВетки) Тогда
		ИмяВетки = РеквизитыВетки.Имя;
	КонецЕсли;	
	
	EmailПользователя = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		Ответственный,
		Справочники.ВидыКонтактнойИнформации.EmailПользователя,,,
		Новый Структура("ТолькоПервая", Истина));
		
	СтрокаОтветственный = ИмяПользователяДляИмениВетки(Ответственный, EmailПользователя);	
	
	Результат = "bdd/" + ИмяВетки + "/" + СтрокаОтветственный;
	Если КодСценария <> Неопределено И ЗначениеЗаполнено(КодСценария) Тогда
		Результат = Результат + "/" + КодСценария + "-";
	Иначе	
		Результат = Результат + "/";
	КонецЕсли;
	
	ДатаСтрокой = Формат(ТекущаяДата(), "ДЛФ=D");
	Результат = Результат + ДатаСтрокой;
	
	Возврат Результат; 
КонецФункции	


&НаСервереБезКонтекста
Функция ВерсииИспользующиеВетку(Ветка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.ПубликуемыйНомерВерсии КАК ПубликуемыйНомерВерсии
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ветка = &Ветка
	|	И НЕ ВерсииПроекта.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ДатаНачалаРазработки"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПубликуемыйНомерВерсии");
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяПользователяДляИмениВетки(Пользователь, EmailПользователя = "")
	
	Если ЗначениеЗаполнено(EmailПользователя) Тогда
		ЧастиEmail = СтрРазделить(EmailПользователя, "@", Ложь);
		Если ЧастиEmail.Количество() > 1 Тогда
			ИмяПользователя = ЧастиEmail[0];
			Возврат ИмяПользователя
		КонецЕсли;
	КонецЕсли;
	
	ИмяПользователя = Строка(Пользователь);
	ЧастиИмени = СтрРазделить(ИмяПользователя, " ", Ложь);
	Если ЧастиИмени.Количество() > 2 Тогда
		ИмяПользователя = ЧастиИмени[0] + " " + ЧастиИмени[1];
	КонецЕсли;
	ИмяПользователя = СтрЗаменить(ИмяПользователя, " ", "-");
	ИмяПользователя = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяПользователя, "-");
	Возврат ИмяПользователя;
КонецФункции

#КонецОбласти     