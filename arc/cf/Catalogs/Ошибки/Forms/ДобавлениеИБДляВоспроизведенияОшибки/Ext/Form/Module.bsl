&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ИдентификаторФоновогоЗадания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.КаталогПриемник) 
	   И ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(Параметры.КаталогПриемник) Тогда
		
		КаталогПриемник = Параметры.КаталогПриемник;
	КонецЕсли; 
	
	Ошибка    = Параметры.Ошибка;
	КодОшибки = Параметры.КодОшибки;
	
	Если ЗначениеЗаполнено(Параметры.КаталогИБПрикладываемыхКОшибкам) Тогда
		Элементы.КаталогПриемник.СписокВыбора.Добавить(Параметры.КаталогИБПрикладываемыхКОшибкам);
		Элементы.КаталогПриемник.КнопкаВыпадающегоСписка = Истина;
		Если НЕ ЗначениеЗаполнено(КаталогПриемник) Тогда
			КаталогПриемник = Параметры.КаталогИБПрикладываемыхКОшибкам;
		КонецЕсли; 
	КонецЕсли; 
	
	КаталогИсходнойБазы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		Ошибка.УникальныйИдентификатор(), 
		"ПутьЛокальнойКопииБазы", 
		КаталогИсходнойБазы);
	
	Если ЗначениеЗаполнено(КаталогИсходнойБазы) Тогда
	
		Элементы.КаталогИсходнойБазы.СписокВыбора.Добавить(КаталогИсходнойБазы);
		Элементы.КаталогИсходнойБазы.КнопкаВыпадающегоСписка = Истина;
	
	КонецЕсли;
	
	СпискокИмен = ПолучитьСписокИменПользователейИБ(КаталогИсходнойБазы);
	
	Если СпискокИмен <> Неопределено Тогда
	
		Элементы.ИмяПользователяИБ.СписокВыбора.ЗагрузитьЗначения(СпискокИмен);
		Элементы.ИмяПользователяИБ.КнопкаВыпадающегоСписка = Истина;
	
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогИсходнойБазыПриИзменении(Элемент)
	
	Если Найти(КаталогИсходнойБазы, "Srvr=") > 0 Тогда
		ПроверитьОткрытиеБазы();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходнойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогИсходнойБазы;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Расположение исходной базы'");
	
	ДополнительныеПараметры = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогИсходнойБазыНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходнойБазыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогИсходнойБазы = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогПриемник;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Куда скопировать базу'");
	
	ДополнительныеПараметры = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогПриемникНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогПриемникНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогПриемник = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСерверомСППРПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(ЭтаФорма);
	
	Если КопироватьСерверомСППР Тогда
		
		Элементы.Копировать.Заголовок = НСтр("ru = 'Добавить ИБ и Закрыть'");
		ПредупреждениеОбОткрытойБазе = НСтр("ru = 'Необходимо закрыть исходную базу.
                                         |После начала копирования, открытая ошибка будет сохранена и закрыта.
                                         |После завершении копирования, информация об ИБ для воспроизведения будет обновлена.'");
	Иначе 
		
		Элементы.Копировать.Заголовок = НСтр("ru = 'Добавить ИБ'");
		ПредупреждениеОбОткрытойБазе = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокИменПользователейИБ(КаталогИсходнойБазы)
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиИБ",
		"ИменаПользователейИБ");
		
КонецФункции

&НаСервере
Процедура СохранитьИмяПользователяИБ()
	
	Если Не ЗначениеЗаполнено(ИмяПользователяИБ) Тогда
		Возврат;
	КонецЕсли; 
	
	ИменаПользователейИБ = Элементы.ИмяПользователяИБ.СписокВыбора.ВыгрузитьЗначения();
	
	ТекущееИмя = ИменаПользователейИБ.Найти(ИмяПользователяИБ);
	Если ТекущееИмя <> Неопределено Тогда
		ИменаПользователейИБ.Удалить(ТекущееИмя);
	КонецЕсли; 
	
	ИменаПользователейИБ.Вставить(0, ИмяПользователяИБ);
	
	КоличествоЗапоминаемыхИмен = 10;
	Если ИменаПользователейИБ.Количество() > КоличествоЗапоминаемыхИмен Тогда
		ИменаПользователейИБ.Удалить(КоличествоЗапоминаемыхИмен);
	КонецЕсли; 
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
	"НастройкиИБ",
	"ИменаПользователейИБ",
	ИменаПользователейИБ,
	,
	,
	Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьБазуИзСписка(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьБазуИзСпискаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияСППРКлиент.ВыбратьБазуИзСписка(ОписаниеОповещения, УникальныйИдентификатор, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВыгрузкиНаКлиенте() Экспорт
	
	Если ФормаДлительнойОперации = Неопределено ИЛИ Не ФормаДлительнойОперации.Открыта() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторФоновогоЗадания) Тогда
		
		Попытка
			ЗаданиеВыполнено = ЗаданиеВыполнено(ИдентификаторФоновогоЗадания);
		Исключение
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ВызватьИсключение;
		КонецПопытки;
		
		Если ЗаданиеВыполнено Тогда
			
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Закрыть(КаталогПриемник);
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ЗавершениеВыгрузкиНаКлиенте", 3);
		Возврат;
		
	КонецЕсли;
	
	КаталогПриемникСРазделителем = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПриемник);
	
	Файл = Новый Файл(КаталогПриемникСРазделителем +"dumpresult");
	Если Файл.Существует() Тогда
		
		Попытка
			
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(Файл.ПолноеИмя);
			Если ТекстовыйДокумент.ПолучитьТекст() = "0" Тогда
				
				ПредупреждениеОбОткрытойБазе = "";
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				Закрыть(КаталогПриемник);
				
			Иначе 
				
				ПредупреждениеОбОткрытойБазе = НСтр("ru = 'Исходная база, возможно, открыта пользователем.
						|Рекомендуется завершить работу с этой базой перед копированием.'");
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				
			КонецЕсли;
			
		Исключение
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ВызватьИсключение;
		КонецПопытки;
		
		
		Попытка
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
		КонецПопытки;
		
	Иначе 
		ПодключитьОбработчикОжидания("ЗавершениеВыгрузкиНаКлиенте", 3, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопировать(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(КаталогИсходнойБазы, "Srvr=") > 0 Тогда
		
		КопироватьСервернуюБазу();
		
	Иначе 
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаКопироватьПродолжение", ЭтотОбъект);
		НачатьПоискФайлов(ОписаниеОповещения, КаталогИсходнойБазы, "*.*", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьПродолжение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Каталог исходной базы отсутствует или в нем нет файлов.'"));
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияСППРКлиент.СоздатьКопиюКаталогаФайлов(КаталогПриемник, КаталогИсходнойБазы, Ложь);
	
	Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	            НСтр("ru = 'Запущено копирование ИБ для воспроизведения ошибки %1'"), КодОшибки);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Запущено копирование ИБ'"), 
	                               ПолучитьНавигационнуюСсылку(Ошибка),
	                               Пояснение, 
	                               БиблиотекаКартинок.ДобавитьИБДляВоспроизведенияОшибки);
	
	СохранитьПутьЛокальнойКопииИБ(КаталогИсходнойБазы);
	
	Закрыть(КаталогПриемник);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура КопироватьСервернуюБазу()
	
	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("ПутьИБ", КаталогИсходнойБазы);
	ПараметрыЗапуска.Вставить("КаталогПриемник", КаталогПриемник);
	
	КаталогНаДиске = Новый Файл(КаталогПриемник);
	Если Не КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(КаталогПриемник);
	КонецЕсли;
	
	Если КопироватьСерверомСППР Тогда 
		
		ПараметрыЗапуска.Вставить("ИмяПользователя", ИмяПользователяИБ);
		ПараметрыЗапуска.Вставить("ПарольПользователя", ПарольИБ);
		ПараметрыЗапуска.Вставить("Ошибка", Ошибка);
		
		КопироватьИБ(ЭтаФорма.УникальныйИдентификатор, ПараметрыЗапуска);
		
		СохранитьПутьЛокальнойКопииИБ(КаталогИсходнойБазы);
		СохранитьИмяПользователяИБ();
		
		Закрыть("КопироватьСерверомСППР");
	
	Иначе 
		
		КаталогПриемникСРазделителем = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогПриемник);
		
		ДополнительныеПараметрыЗапуска =
				" /DumpIB """ + КаталогПриемникСРазделителем +"dump.dt"""
				+ " /DumpResult """ + КаталогПриемникСРазделителем + "dumpresult""";
		
		ПараметрыЗапуска.Вставить("ДополнительныеПараметрыЗапуска", ДополнительныеПараметрыЗапуска);
		
		КодВозврата = ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыЗапуска);
		
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, Новый УникальныйИдентификатор);
		
		ИдентификаторФоновогоЗадания = Неопределено;
		ПодключитьОбработчикОжидания("ЗавершениеВыгрузкиНаКлиенте", 3, Истина);
		
		СохранитьПутьЛокальнойКопииИБ(КаталогИсходнойБазы);
		СохранитьИмяПользователяИБ();
		
	КонецЕсли;
		

КонецПроцедуры

&НаСервереБезКонтекста
Функция КопироватьИБ(УникальныйИдентификатор, ПараметрыЗапуска)
	
	Возврат ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
					"Справочники.Ошибки.КопироватьИБ",
					ПараметрыЗапуска);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)

	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

&НаКлиенте
Процедура ВыбратьБазуИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия.ФайловыйРежим Тогда
		
		КаталогИсходнойБазы = РезультатЗакрытия.КаталогИБ;
	Иначе 
		
		КаталогИсходнойБазы = "Srvr=""" + РезультатЗакрытия.ИмяСервера
					+ """;Ref=""" + РезультатЗакрытия.ИмяИБ + """";
	КонецЕсли;
	
	Если РезультатЗакрытия.ФайловыйРежим Тогда 
		ПроверитьОткрытиеБазы();
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОткрытиеБазы()
	
	БазаОткрыта = Ложь;
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогИсходнойБазы) Тогда
		НайденныеФайлы = НайтиФайлы(КаталогИсходнойБазы, "*.*", Истина);
		Для каждого ДанныеФайла Из НайденныеФайлы Цикл
			Если ДанныеФайла.Имя = "1Cv8.1CL" Тогда
				БазаОткрыта = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	Если БазаОткрыта Тогда
		ПредупреждениеОбОткрытойБазе = НСтр("ru = 'Исходная база, возможно, открыта пользователем.
													|Рекомендуется завершить работу с этой базой перед копированием.'");
													
		ПодключитьОбработчикОжидания("ПроверитьОткрытиеБазы", 3, Истина);
	Иначе
		ПредупреждениеОбОткрытойБазе = "";
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СохранитьПутьЛокальнойКопииИБ(ПутьИБ)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		Ошибка.УникальныйИдентификатор(), 
		"ПутьЛокальнойКопииБазы",
		ПутьИБ,
		,
		,
		Истина);

КонецПроцедуры 

&НаКлиенте
Процедура КаталогПриемникОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(КаталогПриемник) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоддельнаяПроцедураЗавершение", ЭтотОбъект);
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			НачатьЗапускПриложения(ОписаниеОповещения, КаталогПриемник);
		Иначе
			НачатьЗапускПриложения(ОписаниеОповещения, "explorer.exe /root, """ + КаталогПриемник + """");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсходнойБазыОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(КаталогИсходнойБазы) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоддельнаяПроцедураЗавершение", ЭтотОбъект);
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			НачатьЗапускПриложения(ОписаниеОповещения, КаталогИсходнойБазы);
		Иначе
			НачатьЗапускПриложения(ОписаниеОповещения, "explorer.exe /root, """ + КаталогИсходнойБазы + """");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддельнаяПроцедураЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.ИмяПользователяИБ.Доступность = Форма.КопироватьСерверомСППР;
	Элементы.ПарольИБ.Доступность = Форма.КопироватьСерверомСППР;

	ЭтоСервернаяБаза = Найти(Форма.КаталогИсходнойБазы, "Srvr=") > 0;
	Элементы.ГруппаСервер.Видимость = ЭтоСервернаяБаза;

КонецПроцедуры
 
#КонецОбласти
