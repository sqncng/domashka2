#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Зарегистрирована                  = Параметры.Зарегистрирована;
	Признана                          = Параметры.Признана;
	Исправлена                        = Параметры.Исправлена;
	Проверена                         = Параметры.Проверена;
	Закрыта                           = Параметры.Закрыта;
	НеПризнана                        = Параметры.НеПризнана;
	Отозвана                          = Параметры.Отозвана;
	НеПланируетсяИсправлять           = Параметры.НеПланируетсяИсправлять;
	ОжидаетИсправленияПовторяемой     = Параметры.ОжидаетИсправленияПовторяемой;
	СтатусИсходный                    = Параметры.Статус;
	Статус                            = Параметры.Статус;
	СрочностьИсправления              = Параметры.СрочностьИсправления;
	ВерсияИсправления                 = Параметры.ВерсияИсправления;
	ИсходноеЗначениеВерсияИсправления = Параметры.ИсходноеЗначениеВерсияИсправления;
	СрокОтработки                     = Параметры.СрокОтработки;
	НовыйСрокОтработки                = Параметры.НовыйСрокОтработки;
	Проект                            = Параметры.Проект;
	ДатаУстановкиТекущегоСтатуса      = Параметры.ДатаУстановкиТекущегоСтатуса;
	ОшибкаПодлежитЗакрытию            = Параметры.ОшибкаПодлежитЗакрытию;
	КомуНаправлена                    = Параметры.КомуНаправлена;
	Исправляется                      = Параметры.Исправляется;
	
	ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями =
		Параметры.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями;
	
	ЕстьИсправлениеВВеткахПомимоОсновной = Параметры.ЕстьИсправлениеВВеткахПомимоОсновной;
	
	ЕстьПравоИзмененияСрокаОтработки = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ПланированиеОтработкиОшибок", Проект);
		
	Если Элементы.Найти("Закрыта") <> Неопределено Тогда
		Элементы.Закрыта.Видимость = Параметры.ОшибкаПодлежитЗакрытию;
	КонецЕсли;
	
	Если НЕ Параметры.ДоступноРедактирование Тогда
		ТолькоПросмотр = Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Если НЕ Параметры.ДоступноЗакрытие И Элементы.Найти("Закрыта") <> Неопределено Тогда
		Элементы.Закрыта.Доступность = Ложь;
	КонецЕсли;
	
	Если НЕ Параметры.ДоступенОтзыв И Элементы.Найти("Отозвана") <> Неопределено Тогда
		Элементы.Отозвана.Доступность = Ложь;
	КонецЕсли;
	
	ДоступноПланированиеОтработки = Параметры.ДоступноРедактирование И Параметры.ДоступноПланированиеОтработки;
	Элементы.СрокОтработки.Доступность = ДоступноПланированиеОтработки;
	Элементы.НеПланируетсяИсправлять.Доступность = ДоступноПланированиеОтработки;
	
	ТекстСтатусДействие = Справочники.Ошибки.ТекстСтатусДействиеСОшибкой(Статус, ОшибкаПодлежитЗакрытию);
	
	УстановитьСтраницуНовогоСрокаОтработки(СрокОтработки, НовыйСрокОтработки, Элементы);
	
	УстановитьДоступностьЭлементов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗарегистрированаПриИзменении(Элемент)
	
	Если НЕ Зарегистрирована Тогда
		ОбработатьСнятиеФлага();
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнанаПриИзменении(Элемент)
	
	Если Признана Тогда
		НеПризнана = Ложь;
		Отозвана = Ложь;
		ОбработатьУстановкуФлага();
	Иначе
		ОбработатьСнятиеФлага();
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправленаПриИзменении(Элемент)
	
	Если Исправлена Тогда
		НеПризнана = Ложь;
		Отозвана = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		ОбработатьУстановкуФлага();
	Иначе
		ОбработатьСнятиеФлага();
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверенаПриИзменении(Элемент)
	
	Если Проверена Тогда
		НеПризнана = Ложь;
		Отозвана = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		ОбработатьУстановкуФлага();
	Иначе
		ОбработатьСнятиеФлага();
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаПриИзменении(Элемент)
	
	Если Закрыта Тогда
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		ОбработатьУстановкуФлага();
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура НеПризнанаПриИзменении(Элемент)
	
	Если НеПризнана Тогда
		
		Признана = Ложь;
		Исправлена = Ложь;
		Проверена = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		ОбработатьУстановкуФлага();
	Иначе
		ОбработатьСнятиеФлага();
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозванаПриИзменении(Элемент)
	
	Если Отозвана Тогда
		
		Признана = Ложь;
		Исправлена = Ложь;
		Проверена = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		ОбработатьУстановкуФлага();
		
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура НеПланируетсяИсправлятьПриИзменении(Элемент)
	
	Если НеПланируетсяИсправлять Тогда
		
		Исправлена = Ложь;
		Проверена = Ложь;
		Закрыта = Ложь;
		НеПризнана = Ложь;
		Отозвана = Ложь;
		
		ОбработатьУстановкуФлага();
		
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидаетИсправленияПовторяемойПриИзменении(Элемент)
	
	Если ОжидаетИсправленияПовторяемой Тогда
		
		Исправлена = Ложь;
		Проверена = Ложь;
		Закрыта = Ложь;
		НеПризнана = Ложь;
		Отозвана = Ложь;
		НеПланируетсяИсправлять = Ложь;
		
		ОбработатьУстановкуФлага();
		
	КонецЕсли;
	
	ОбработатьИзменениеФлага();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ Исправлена И ЕстьИсправлениеВВеткахПомимоОсновной Тогда
		// Запрещается отмена исправления - требуется обработать исправление в ветках.
		ТекстСообщения = НСтр("ru='Для отмены исправления ошибки укажите корректное состояние исправления в ветках на закладке ""Ветки""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Закрыта И НЕ Признана И НЕ Отозвана Тогда
		ТекстСообщения = НСтр("ru='Для закрытия ошибка должна иметь один из следующих признаков:
							| Признана
							| Отозвана'");
							
		Возврат;
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	
	СтруктураРезультата.Вставить("Зарегистрирована", Зарегистрирована);
	СтруктураРезультата.Вставить("Признана", Признана);
	СтруктураРезультата.Вставить("Исправлена", Исправлена);
	СтруктураРезультата.Вставить("Проверена", Проверена);
	СтруктураРезультата.Вставить("Закрыта", Закрыта);
	СтруктураРезультата.Вставить("НеПризнана", НеПризнана);
	СтруктураРезультата.Вставить("Отозвана", Отозвана);
	СтруктураРезультата.Вставить("НеПланируетсяИсправлять", НеПланируетсяИсправлять);
	СтруктураРезультата.Вставить("ОжидаетИсправленияПовторяемой", ОжидаетИсправленияПовторяемой);
	СтруктураРезультата.Вставить("СрокОтработки", СрокОтработки);
	
	Если ЕстьПравоИзмененияСрокаОтработки Тогда
		СтруктураРезультата.Вставить("НовыйСрокОтработки", СрокОтработки);
	Иначе
		СтруктураРезультата.Вставить("НовыйСрокОтработки", НовыйСрокОтработки);
	КонецЕсли;
	
	Закрыть(СтруктураРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьСнятиеФлага()
	
	Если НЕ Зарегистрирована И Признана Тогда
		Признана = Ложь;
	КонецЕсли;
	
	Если НЕ Признана И Исправлена Тогда
		Исправлена = Ложь;
	КонецЕсли;
	
	Если НЕ Исправлена И Проверена Тогда
		Проверена = Ложь;
	КонецЕсли;
	
	Если НЕ Проверена И Закрыта Тогда
		Закрыта = Ложь;
	КонецЕсли;
	
	Если НЕ НеПризнана И Зарегистрирована И Отозвана Тогда
		Отозвана = Ложь;
	КонецЕсли;
	
	Если НЕ Признана и НеПланируетсяИсправлять Тогда
		НеПланируетсяИсправлять = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУстановкуФлага()
	
	Если Закрыта И Признана И НЕ Проверена Тогда
		Проверена = Истина;
	ИначеЕсли Закрыта И НеПризнана И НЕ Отозвана Тогда
		Отозвана = Истина;
	КонецЕсли;
	
	Если Проверена И НЕ Исправлена Тогда
		Исправлена = Истина;
	КонецЕсли;
	
	Если Исправлена И НЕ Признана Тогда
		Признана = Истина;
	КонецЕсли;
	
	Если Признана И НЕ Зарегистрирована Тогда
		Зарегистрирована = Истина;
	КонецЕсли;
	
	Если Отозвана И НЕ НеПризнана Тогда
		НеПризнана = Истина;
	КонецЕсли;
	
	Если НеПланируетсяИсправлять Тогда
		
		Если НЕ Зарегистрирована Тогда
			Зарегистрирована = Истина;
		КонецЕсли;
		
		Если НЕ Признана Тогда
			Признана = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОжидаетИсправленияПовторяемой Тогда
		
		Если НЕ Зарегистрирована Тогда
			Зарегистрирована = Истина;
		КонецЕсли;
		
		Если НЕ Признана Тогда
			Признана = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеФлага()
	
	Если Закрыта Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта");
	ИначеЕсли НеПланируетсяИсправлять Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять");
	ИначеЕсли Отозвана Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана");
	ИначеЕсли Проверена Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена");
	ИначеЕсли Исправлена Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена");
	ИначеЕсли ОжидаетИсправленияПовторяемой Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки");
	ИначеЕсли Признана Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана");
	ИначеЕсли НеПризнана Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана");
	ИначеЕсли Зарегистрирована Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована");
	Иначе
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована");
	КонецЕсли;
	
	ДатаУстановкиТекущегоСтатуса = ТекущаяДата();
	
	ТекстСтатусДействие = Справочники.Ошибки.ТекстСтатусДействиеСОшибкой(Статус, ОшибкаПодлежитЗакрытию);
	
	РассчитатьСрокОтработки();
	
	УстановитьДоступностьЭлементов();
	УстановитьСтраницуНовогоСрокаОтработки(СрокОтработки, НовыйСрокОтработки, Элементы);
	
КонецПроцедуры

&НаСервере
Функция СрокОтработкиПоНорме()
	
	РеквизитыОшибки = Новый Структура;
	РеквизитыОшибки.Вставить("Владелец", Проект);
	РеквизитыОшибки.Вставить("Статус", Статус);
	РеквизитыОшибки.Вставить("СрочностьИсправления", СрочностьИсправления);
	РеквизитыОшибки.Вставить("ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями", ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
	РеквизитыОшибки.Вставить("ВерсияИсправления", ВерсияИсправления);
	РеквизитыОшибки.Вставить("КомуНаправлена", КомуНаправлена);
	РеквизитыОшибки.Вставить("Исправляется", Исправляется);
		
	Возврат Справочники.Ошибки.СрокОтработкиОшибки(РеквизитыОшибки, ИсходноеЗначениеВерсияИсправления, ДатаУстановкиТекущегоСтатуса);

КонецФункции
												
&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.НеПризнана.Доступность = Зарегистрирована;
	Элементы.НовыйСрокОтработки.Видимость = ЕстьПравоИзмененияСрокаОтработки;
	Элементы.ДекорацияНовыйСрокОтработкиНеИзменяется.Видимость = ЕстьПравоИзмененияСрокаОтработки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуНовогоСрокаОтработки(СрокОтработки, НовыйСрокОтработки, Элементы)
	
	Если СрокОтработки = НовыйСрокОтработки Тогда
		Элементы.ГруппаНовыйСрокОтработки.ТекущаяСтраница = Элементы.СтраницаНовыйСрокОтработкиНеИзменяется;
	Иначе
		Элементы.ГруппаНовыйСрокОтработки.ТекущаяСтраница = Элементы.СтраницаНовыйСрокОтработки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСрокОтработки()
	
	Если ЕстьПравоИзмененияСрокаОтработки Тогда
		
		СрокОтработкиПоНорме =  СрокОтработкиПоНорме();
		
		Если СрокОтработкиПоНорме > СрокОтработки Тогда
			СрокОтработки = СрокОтработкиПоНорме;
		КонецЕсли;
	Иначе
		Если СтатусИсходный <> Статус Тогда
			
			СрокОтработкиПоНорме =  СрокОтработкиПоНорме();
			
			Если СрокОтработкиПоНорме > НовыйСрокОтработки Тогда
				НовыйСрокОтработки = СрокОтработкиПоНорме;
			Конецесли;
			
		Иначе
			НовыйСрокОтработки = СрокОтработки;
		КонецЕсли;
		
	КОнецЕсли;
	
КонецПроцедуры

#КонецОбласти