#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КаталогИсходнойБазы = Параметры.КаталогИсходнойБазы;
	НомерОшибки         = Параметры.НомерОшибки;
	Ошибка              = Параметры.Ошибка;
	Проект              = Параметры.Проект;
	Если Параметры.Свойство("ВерсияПлатформы") Тогда
		ВерсияПлатформы = Параметры.ВерсияПлатформы;
	КонецЕсли;
	Если Параметры.Свойство("Клиент") Тогда
		Клиент = Параметры.Клиент;
	КонецЕсли;
	Если Параметры.Свойство("ЗапуститьКонфигуратор") Тогда
		ЗапуститьКонфигуратор = Параметры.ЗапуститьКонфигуратор;
		НеЗагружатьНастройки = Истина;
	КонецЕсли;
	Если Параметры.Свойство("ЗапуститьПредприятие") Тогда
		ЗапуститьПредприятие = Параметры.ЗапуститьПредприятие;
		НеЗагружатьНастройки = Истина;
	КонецЕсли;
	Если Параметры.Свойство("СкопироватьИБИзОбщейВЛокальнуюКопию") Тогда
		СкопироватьИБИзОбщейВЛокальнуюКопию = Параметры.СкопироватьИБИзОбщейВЛокальнуюКопию;
	КонецЕсли;
	
	ЭтоФайл = ТипЗнч(КаталогИсходнойБазы) = Тип("СправочникСсылка.Файлы") И ЗначениеЗаполнено(КаталогИсходнойБазы);
	УказанКаталог = ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИсходнойБазы);
	
	ПутьПроекта = СокрЛП(Строка(Параметры.Проект));
	ПутьПроекта = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ПутьПроекта, "_");

	ЗагрузитьНастройки();
	ЗагрузитьДоступныеВерсииПроекта();
	
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
	
		Элементы.ВерсияПлатформы.Видимость = Истина;
		Элементы.Пояснение1ССтартера.Видимость = Ложь;
	
	Иначе
	
		Элементы.ВерсияПлатформы.Видимость = Ложь;
		Элементы.Пояснение1ССтартера.Видимость = Истина;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если НеЗагружатьНастройки Тогда
		Настройки.Очистить();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МасссивНепроверяемыхРеквизитов = Новый Массив;
	Если НЕ (ЗапуститьПредприятие ИЛИ ЗапуститьКонфигуратор) ИЛИ НЕ ЗапускатьУказаннуюПлатформу Тогда
		МасссивНепроверяемыхРеквизитов.Добавить("КаталогИсполняемогоФайла");
	КонецЕсли; 
	
	Если Не ОбновитьИзХранилища Тогда
		
		МасссивНепроверяемыхРеквизитов.Добавить("ВерсияХранилище");
		МасссивНепроверяемыхРеквизитов.Добавить("ВерсияХранилищеИмяПользователя");
		
	КонецЕсли; 
	
	Если НЕ ЗапуститьПредприятие И НЕ ЗапуститьКонфигуратор И НЕ СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Необходимо выбрать режим запуска.'"),
			,
			"ЗапуститьПредприятие",
			,
			Отказ);
		
	КонецЕсли; 
	
	Если НЕ СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		МасссивНепроверяемыхРеквизитов.Добавить("ПутьСкопировать");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МасссивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьШаблонПутиЛокальнойКопииБазы();
	ПроанализироватьКаталогИсходнойБазы();
	
	Если СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		СкопироватьИБИзОбщейВЛокальнуюКопию = Ложь;
		
		Оповещение = Новый ОписаниеОповещения("ПроверитьПутьЛокальнойКопииБазыЗавершение", ЭтотОбъект);
		ТекстПредложения = НСтр("ru = 'Для копирования ошибок необходимо установить расширение для работы с файлами.'");
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);
		
	Иначе
		УстановитьДоступностьВидимость();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьЗапуститьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = ПутьЗапустить;
	
	Если СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Куда скопировать базу'");
	Иначе 
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбрать базу'");
	КонецЕсли; 
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ПутьЗапустить = ДиалогВыбораФайла.Каталог;
		СимволСлеша = ПолучитьРазделительПути();
		СоздаватьКаталогПоКодуОшибки = ПредопределенноеЗначение("Перечисление.СпособыСозданияЛокальнойКопииБазыОшибки.СоздаватьКаталогПоКодуОшибки");
		Если СкопироватьИБИзОбщейВЛокальнуюКопию И СпособСозданияЛокальнойКопииБазыОшибки = СоздаватьКаталогПоКодуОшибки Тогда
			
			ПутьЗапустить = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьЗапустить)
			              + ПутьПроекта + СимволСлеша + НомерОшибки;
			Если Элементы.ПутьЗапустить.СписокВыбора.НайтиПоЗначению(ПутьЗапустить) = Неопределено Тогда
				Элементы.ПутьЗапустить.СписокВыбора.Добавить(ПутьЗапустить);
			КонецЕсли;
			Элементы.ПутьЗапустить.КнопкаВыпадающегоСписка = Истина;
			
		КонецЕсли; 
		
		ПроверитьПутьЗапуска();
		УстановитьДоступностьВидимость();
		
		Если Не ЗначениеЗаполнено(РасположениеЛокальнойКопииБазы) И ЗначениеЗаполнено(ПутьЗапустить) Тогда
		
			ПоказатьВопросОСохраненииЛокальногоПути();
		
		КонецЕсли; 

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПредприятиеПриИзменении(Элемент)
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКонфигураторПриИзменении(Элемент)
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = КаталогИсполняемогоФайла;
	ДиалогВыбораФайла.Заголовок = "Выбор каталога программных файлов 1С:Предприятия";
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		КаталогИсполняемогоФайла = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогИсполняемогоФайла) 
		И Элементы.КаталогИсполняемогоФайла.СписокВыбора.НайтиПоЗначению(КаталогИсполняемогоФайла) = Неопределено Тогда
		Элементы.КаталогИсполняемогоФайла.СписокВыбора.Добавить(КаталогИсполняемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьЗапуститьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПутьЗапустить) И ТипЗнч(ПутьЗапустить) = Тип("Строка") Тогда
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			ЗапуститьПриложение(ПутьЗапустить);
		Иначе
			ЗапуститьПриложение("explorer.exe /root, """ + ПутьЗапустить + """");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьСкопироватьОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПутьСкопировать) И ТипЗнч(ПутьСкопировать) = Тип("Строка") Тогда
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			ЗапуститьПриложение(ПутьСкопировать);
		Иначе
			ЗапуститьПриложение("explorer.exe /root, """ + ПутьСкопировать + """");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ПутьСкопировать) И ТипЗнч(ПутьСкопировать) = Тип("СправочникСсылка.Файлы") Тогда
		ПоказатьЗначение(, ПутьСкопировать);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФлагСкопироватьПриИзменении(Элемент)
	
	Если СкопироватьИБИзОбщейВЛокальнуюКопию = Ложь 
	   И ЛокальныеКопииБаз.Количество() = 0
	   И ЗначениеЗаполнено(ПутьОбщейБазы) Тогда
		
		ПутьЗапустить = ПутьОбщейБазы;
		
	КонецЕсли; 
	
	ПроверитьПутьЗапуска();
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьЗапуститьПриИзменении(Элемент)
	
	ВыбранИсточникКопирования = ИсточникиКопирования.НайтиПоЗначению(ПутьЗапустить) <> Неопределено;
	
	Если ВыбранИсточникКопирования Тогда
		СкопироватьИБИзОбщейВЛокальнуюКопию = Ложь;
	КонецЕсли; 
	
	ПроверитьПутьЗапуска();
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьСкопироватьПриИзменении(Элемент)
	
	ПроверитьПутьЗапуска();
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзХранилищаПриИзменении(Элемент)
	УстановитьДоступностьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВерсияХранилищеПриИзменении(Элемент)
	
	Ответ = ПолучитьПутьХранилищаИВерсиюПлатформы(ВерсияХранилище);
	ПутьКХранилищу               = Ответ.ПутьКХранилищу;
	ВерсияПлатформыВерсииПроекта = Ответ.ВерсияПлатформы;
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияХранилищеИмяПользователяПриИзменении(Элемент)
	
	Если НРег(ВерсияХранилищеИмяПользователя) = НРег("ТолькоПросмотр") Тогда
		ПодключитьКонфигурациюКХранилищу = Ложь;
	КонецЕсли; 
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СкопироватьЗапустить(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновитьИзХранилища И Не ЗначениеЗаполнено(ПутьКХранилищу) Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Нужно выбрать версию проекта с заполненным путем к хранилищу.'"));
		Возврат;
		
	КонецЕсли; 
	
	Если СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		Оповещение = Новый ОписаниеОповещения("СкопироватьЗапуститьЗавершение", ЭтотОбъект);
		ТекстПредложения = НСтр("ru = 'Для копирования ошибок необходимо установить расширение для работы с файлами.'");
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);
	
	Иначе
		
		ПродолжитьСозданиеБазыИЗапуск();
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимЗапускаПлатформы(Команда)
	
	ЗапускатьУказаннуюПлатформу = НЕ ЗапускатьУказаннуюПлатформу;
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьБазуИзСписка(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьБазуИзСпискаЗавершение", ЭтотОбъект);
	ОбщегоНазначенияСППРКлиент.ВыбратьБазуИзСписка(ОписаниеОповещения, УникальныйИдентификатор, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СтрокаСоединения(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтрокаСоединенияЗавершение", ЭтотОбъект);
	ПараметрыФормы     = Новый Структура("СтрокаСоединения", ПутьЗапустить);
	
	ОткрытьФорму("Справочник.Ошибки.Форма.СтрокаСоединенияСервернойБазы", ПараметрыФормы,
	             ЭтаФорма,
	             ,
	             ,
	             ,
	             ОписаниеОповещения,
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСоединенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПутьЗапустить = Результат.СтрокаСоединения;
		
		Если Не ЗначениеЗаполнено(ШаблонПутиСервернойБазы) И Результат.Свойство("КластерСерверов1С") 
			И Результат.Свойство("ТипСУБД") И Результат.Свойство("СерверБазыДанных") Тогда
		
			ПоказатьВопросОСохраненииСерверныхНастроек(Результат);
		
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьБазуИзСпискаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия.ФайловыйРежим Тогда
		ПутьЗапустить = РезультатЗакрытия.КаталогИБ;
	Иначе 
		ПутьЗапустить = СтрШаблон("Srvr=""%1"";""Ref=%2""", РезультатЗакрытия.ИмяСервера, РезультатЗакрытия.ИмяИБ);
	КонецЕсли;
	
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалитьФайлыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("ВопросУдалитьФайлыЗавершениеЗавершение", ЭтотОбъект), ПутьЗапустить);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалитьФайлыЗавершениеЗавершение(ДополнительныеПараметры) Экспорт
	
	ПродолжитьСозданиеБазыИЗапуск();

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеБазыИЗапуск()

	ДождатьсяЗавершения = ЗапуститьКонфигуратор ИЛИ ЗапуститьПредприятие ИЛИ ОбновитьИзХранилища;
	
	Если СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		ЭтоСервернаяБаза = ЭтоСтрокаСоединенияСервернойБазы(ПутьЗапустить);
		
		Если ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(ПутьСкопировать) Тогда
			
			ФайлПутьСкопировать = Новый Файл(ПутьСкопировать);
			ЭтоФайл = Неопределено;
			
			ФайлПутьСкопировать.НачатьПроверкуЭтоФайл(Новый ОписаниеОповещения("ПродолжитьСозданиеБазыИЗапускЗавершение", ЭтотОбъект, Новый Структура("ДождатьсяЗавершения, ФайлПутьСкопировать, ЭтоСервернаяБаза", ДождатьсяЗавершения, ФайлПутьСкопировать, ЭтоСервернаяБаза)));
			Возврат; 
		
		ИначеЕсли ТипЗнч(ПутьСкопировать) = Тип("СправочникСсылка.Файлы") И ЗначениеЗаполнено(ПутьСкопировать) Тогда
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ПутьСкопировать,, УникальныйИдентификатор, ПутьЗапустить);
			
			АдресФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
				ДанныеФайла.Версия, УникальныйИдентификатор);
				
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
				
			Если ЭтоСервернаяБаза Тогда
				
				#Если ВебКлиент Тогда
					ПолноеИмяФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "." + ДанныеФайла.Расширение;
				#Иначе
					ПолноеИмяФайла = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
				#КонецЕсли
				
			Иначе
				ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьЗапустить) + ИмяФайла;
			КонецЕсли; 
			
			
			Файл = Новый Файл(ПолноеИмяФайла);
			
			РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
			
			ТекстПояснения =
				СтрШаблон(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
				|Пожалуйста, подождите.'"),
				ИмяФайла, 
				РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
			
			Состояние(ТекстПояснения);
			
			Если Файл.Существует() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолноеИмяФайла);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу);
			
			// Сохраним Файл из БД на диск.
			Оповщение = Новый ОписаниеОповещения("ПродолжитьСозданиеБазыЗавершение", ЭтотОбъект, Новый Структура("АдресФайла", АдресФайла));
			НачатьПолучениеФайлов(Оповщение, ПередаваемыеФайлы,ПутьКФайлу, Ложь);
			Возврат;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	ПродолжитьОтключитьсяОтХранилища();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеБазыИЗапускЗавершение(ЭтоФайл, ДополнительныеПараметры) Экспорт
	
	ДождатьсяЗавершения = ДополнительныеПараметры.ДождатьсяЗавершения;
	ФайлПутьСкопировать = ДополнительныеПараметры.ФайлПутьСкопировать;
	ЭтоСервернаяБаза = ДополнительныеПараметры.ЭтоСервернаяБаза;
	
	Если ЭтоФайл Тогда
		
		Если ЭтоСервернаяБаза Тогда
			
			#Если ВебКлиент Тогда
				ИмяФайлаПриемника = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "." + ФайлПутьСкопировать.Расширение;
			#Иначе
				ИмяФайлаПриемника = ПолучитьИмяВременногоФайла(ФайлПутьСкопировать.Расширение);
			#КонецЕсли
			
		Иначе 
			ИмяФайлаПриемника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьЗапустить) + ФайлПутьСкопировать.Имя;
		КонецЕсли; 
		
		ФайлПутьЗапустить = Новый Файл(ПутьЗапустить);
		Если Не ФайлПутьЗапустить.Существует() Тогда
			СоздатьКаталог(ПутьЗапустить);
		КонецЕсли; 
		
		ОповещениеПослеКопирования = Новый ОписаниеОповещения("ПродолжитьПослеКопированияФайла", ЭтотОбъект);
		НачатьКопированиеФайла(ОповещениеПослеКопирования, ФайлПутьСкопировать.ПолноеИмя, ИмяФайлаПриемника);
		Возврат;
		
	Иначе 
		
		ОповещениеПродолжения = Новый ОписаниеОповещения("ПродолжитьСозданиеБазыИЗапускФрагмент", ЭтотОбъект);
		ОбщегоНазначенияСППРКлиент.СоздатьКопиюКаталогаФайлов(ПутьЗапустить, ПутьСкопировать, ДождатьсяЗавершения, ОповещениеПродолжения);
		
		#Если НЕ ВебКлиент Тогда
		Если Не ДождатьсяЗавершения Тогда
			ПродолжитьОтключитьсяОтХранилища();
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПослеКопированияФайла(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	ПолученныеФайлы = Новый Массив;
	ПолученныеФайлы.Добавить(Новый Структура("Имя", СкопированныйФайл));
	ПродолжитьСозданиеБазыЗавершение(ПолученныеФайлы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеБазыИЗапускФрагмент(КодВозврата, ДополнительныеПараметры) Экспорт
	
	ПродолжитьОтключитьсяОтХранилища();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеБазыЗавершение(ПолученныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ПолученныеФайлы[0].Имя;
	
	// Для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения.
	Если   ЗначениеЗаполнено(ДополнительныеПараметры)
		   И ДополнительныеПараметры.Свойство("АдресФайла")
		   И ЭтоАдресВременногоХранилища(ДополнительныеПараметры.АдресФайла) Тогда
		УдалитьИзВременногоХранилища(ДополнительныеПараметры.АдресФайла);
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ВерсияПлатформы", ВерсияПлатформы);
	ПараметрыСоздания.Вставить("ИскатьВерсию",    Ложь);
	Если ЗапускатьУказаннуюПлатформу Тогда
		ПараметрыСоздания.Вставить("КаталогИсполняемогоФайла", 
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла));
	КонецЕсли; 
	
	ЭтоСервернаяБаза               = ЭтоСтрокаСоединенияСервернойБазы(ПутьЗапустить);
	ЭтоСтрокаСозданияСервернойБазы = ЭтоСтрокаСозданияСервернойБазы(ПутьЗапустить);
	
	ПараметрыПакетногоСоздания = " %СтрокаСоединения% %ТипСоздания% ""%ИмяФайлШаблона%"" /Out ""%ИмяФайлаЛогов%""";
	
	Если ЭтоСервернаяБаза И ЭтоСтрокаСозданияСервернойБазы Тогда 
		
		СтрокаСоединения = ПутьЗапустить;
		ТипСоздания      = "/UseTemplate";
		ШаблонКоманды    = "%КаталогИсполняемогоФайла%1cv8 CREATEINFOBASE";
		
		ПутьЗапустить = ПолучитьСтрокуСоединенияИзСтрокиСозданияСервернойБазы(ПутьЗапустить);
		
	ИначеЕсли ЭтоСервернаяБаза Тогда 
		
		Файл = Новый Файл(ПолноеИмяФайла);
		
		СтрокаСоединения = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(ПутьЗапустить);
		ТипСоздания      = ?(ВРег(Файл.Расширение) = ".CF", "/LoadCfg", "/RestoreIB");
		ШаблонКоманды    = "%КаталогИсполняемогоФайла%1cv8 DESIGNER";
		
	Иначе
		СтрокаСоединения = СтрЗаменить(" File=""%ПутьДоБазы%"";", "%ПутьДоБазы%", ПутьЗапустить);
		ТипСоздания      = "/UseTemplate";
		ШаблонКоманды    = "%КаталогИсполняемогоФайла%1cv8 CREATEINFOBASE";
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ИмяФайлаЛогов = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".log";
	#Иначе
		ИмяФайлаЛогов = ПолучитьИмяВременногоФайла("log");
	#КонецЕсли
	
	ПараметрыПакетногоСоздания = СтрЗаменить(ПараметрыПакетногоСоздания, "%СтрокаСоединения%", СтрокаСоединения);
	ПараметрыПакетногоСоздания = СтрЗаменить(ПараметрыПакетногоСоздания, "%ТипСоздания%",      ТипСоздания);
	ПараметрыПакетногоСоздания = СтрЗаменить(ПараметрыПакетногоСоздания, "%ИмяФайлШаблона%",   ПолноеИмяФайла);
	ПараметрыПакетногоСоздания = СтрЗаменить(ПараметрыПакетногоСоздания, "%ИмяФайлаЛогов%",    ИмяФайлаЛогов);
	
	ПараметрыСоздания.Вставить("ДополнительныеПараметрыЗапуска", ПараметрыПакетногоСоздания);
	
	ДополнительныеПараметрыСоздания = Новый Структура;
	ДополнительныеПараметрыСоздания.Вставить("ПолноеИмяФайла",  ПолноеИмяФайла);
	ДополнительныеПараметрыСоздания.Вставить("ИмяФайлаЛогов",   ИмяФайлаЛогов);
	ДополнительныеПараметрыСоздания.Вставить("БылаСозданаБаза", Истина);
	
	#Если ВебКлиент Тогда
		Оповещение = Новый ОписаниеОповещения("ПродолжитьСозданиеБазыПослеЗапуска", ЭтотОбъект, ДополнительныеПараметрыСоздания);
		ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыСоздания, ШаблонКоманды, Истина, Оповещение);
		Возврат;
	#Иначе
		КодВозврата = ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыСоздания, ШаблонКоманды, Истина);
		ПродолжитьСозданиеБазыПослеЗапуска(КодВозврата, ДополнительныеПараметрыСоздания);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСозданиеБазыПослеЗапуска(КодВозврата, ДополнительныеПараметры) Экспорт 
	
	Если КодВозврата = 0 Тогда
		
		УдалитьФайлы(ДополнительныеПараметры.ПолноеИмяФайла);
		
	Иначе
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяФайлаЛогов) Тогда
			
			Лог = Новый ТекстовыйДокумент;
			Лог.Прочитать(ДополнительныеПараметры.ИмяФайлаЛогов);
			ТекстЛога = Лог.ПолучитьТекст();
			УдалитьФайлы(ДополнительныеПараметры.ИмяФайлаЛогов);
			
		Иначе 
			ТекстЛога = "";
		КонецЕсли;
		
		ВызватьИсключение НСтр("ru = 'Не удалось создать базу из архива.
		                       |Лог пакетных операций:
		                       |'") + ТекстЛога;
		
	КонецЕсли;
	
	ПродолжитьОтключитьсяОтХранилища(ДополнительныеПараметры.БылаСозданаБаза);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОтключитьсяОтХранилища(БылаСозданаБаза = Ложь)
	
	ДождатьсяЗавершения = ЗапуститьКонфигуратор ИЛИ ЗапуститьПредприятие;
	
	ДополнительныеПараметрыОтключения = Новый Структура;
	ДополнительныеПараметрыОтключения.Вставить("БылаСозданаБаза",  БылаСозданаБаза);
	
	Если ОбновитьИзХранилища Тогда
		
		ПараметрыСоздания = Новый Структура;
		
		Если ЗначениеЗаполнено(ВерсияПлатформыВерсииПроекта) Тогда
			ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER";
			ПараметрыСоздания.Вставить("ВерсияПлатформы", ВерсияПлатформыВерсииПроекта);
			ПараметрыСоздания.Вставить("ИскатьВерсию",    Ложь);
		Иначе 
			ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8s DESIGNER";
			ПараметрыСоздания.Вставить("ВерсияПлатформы", ВерсияПлатформы);
			ПараметрыСоздания.Вставить("ИскатьВерсию",    Истина);
		КонецЕсли; 
		
		Если ЗапускатьУказаннуюПлатформу Тогда
			ПараметрыСоздания.Вставить("КаталогИсполняемогоФайла", 
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла));
		КонецЕсли; 
		
		ПараметрыПакетногоПодключения = " %СтрокаСоединения%
			| /ConfigurationRepositoryUnbindCfg -force /Out ""%ИмяФайлаЛогов%"" -NoTruncate ";
		
		СтрокаСоединения = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(ПутьЗапустить);
		
		#Если ВебКлиент Тогда
			ИмяФайлаЛогов = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".log";
		#Иначе
			ИмяФайлаЛогов = ПолучитьИмяВременногоФайла("log");
		#КонецЕсли
		
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%СтрокаСоединения%", СтрокаСоединения);
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%ИмяФайлаЛогов%",    ИмяФайлаЛогов);
		
		ПараметрыСоздания.Вставить("ДополнительныеПараметрыЗапуска", ПараметрыПакетногоПодключения);
		
		ДополнительныеПараметрыОтключения.Вставить("ИмяФайлаЛогов",  ИмяФайлаЛогов);
		
		#Если ВебКлиент Тогда
			Оповещение = Новый ОписаниеОповещения("ПродолжитьОбновлениеИзХранилища", ЭтотОбъект, ДополнительныеПараметрыОтключения);
			ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыСоздания, ШаблонКоманды, ДождатьсяЗавершения, Оповещение);
		#Иначе
			КодВозврата = ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыСоздания, ШаблонКоманды, ДождатьсяЗавершения);
			ПродолжитьОбновлениеИзХранилища(КодВозврата, ДополнительныеПараметрыОтключения);
		#КонецЕсли
		Возврат;
	
	КонецЕсли;
	
	ПродолжитьОбновлениеИзХранилища(Неопределено, ДополнительныеПараметрыОтключения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбновлениеИзХранилища(КодВозврата, ДополнительныеПараметры) Экспорт
	
	ДождатьсяЗавершения = ЗапуститьКонфигуратор ИЛИ ЗапуститьПредприятие;
	БылаСозданаБаза = ДополнительныеПараметры.Свойство("БылаСозданаБаза") И ДополнительныеПараметры.БылаСозданаБаза;
	
	Если ОбновитьИзХранилища Тогда
		
		ПараметрыСоздания = Новый Структура;
		
		Если ЗначениеЗаполнено(ВерсияПлатформыВерсииПроекта) Тогда
			ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8 DESIGNER";
			ПараметрыСоздания.Вставить("ВерсияПлатформы", ВерсияПлатформыВерсииПроекта);
			ПараметрыСоздания.Вставить("ИскатьВерсию",    Ложь);
		Иначе 
			ШаблонКоманды = "%КаталогИсполняемогоФайла%1cv8s DESIGNER";
			ПараметрыСоздания.Вставить("ВерсияПлатформы", ВерсияПлатформы);
			ПараметрыСоздания.Вставить("ИскатьВерсию",    Истина);
		КонецЕсли; 
		
		Если ЗапускатьУказаннуюПлатформу Тогда
			ПараметрыСоздания.Вставить("КаталогИсполняемогоФайла", 
				ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогИсполняемогоФайла));
		КонецЕсли; 
		
		ПараметрыПакетногоПодключения = " %СтрокаСоединения%
			| /ConfigurationRepositoryF ""%КаталогХранилища%""
			| /ConfigurationRepositoryN ""%ИмяПользователяХранилища%"" 
			| /ConfigurationRepositoryP ""%ПарольПользователяХранилища%""
			| %ДействияСБазой% /Out ""%ИмяФайлаЛогов%"" -NoTruncate ";
		
		Если ПодключитьКонфигурациюКХранилищу Тогда
			ДействияСБазой = "/ConfigurationRepositoryBindCfg -forceBindAlreadyBindedUser -forceReplaceCfg";
		Иначе 
			ДействияСБазой = "/ConfigurationRepositoryUpdateCfg -revised -force";
		КонецЕсли;
		
		СтрокаСоединения = ОбщегоНазначенияСППРКлиентСервер.СтрокаСоединенияИБ(ПутьЗапустить);
		
		#Если ВебКлиент Тогда
			ИмяФайлаЛогов = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".log";
		#Иначе
			ИмяФайлаЛогов = ПолучитьИмяВременногоФайла("log");
		#КонецЕсли
		
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%СтрокаСоединения%",            СтрокаСоединения);
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%КаталогХранилища%",            ПутьКХранилищу);
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%ИмяПользователяХранилища%",    ВерсияХранилищеИмяПользователя);
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%ПарольПользователяХранилища%", ВерсияХранилищеПароль);
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%ДействияСБазой%",              ДействияСБазой);
		ПараметрыПакетногоПодключения = СтрЗаменить(ПараметрыПакетногоПодключения,"%ИмяФайлаЛогов%",               ИмяФайлаЛогов);
		
		ПараметрыСоздания.Вставить("ДополнительныеПараметрыЗапуска", ПараметрыПакетногоПодключения);
		
		ДополнительныеПараметрыОбновления = Новый Структура;
		ДополнительныеПараметрыОбновления.Вставить("ИмяФайлаЛогов",   ИмяФайлаЛогов);
		ДополнительныеПараметрыОбновления.Вставить("БылаСозданаБаза", БылаСозданаБаза);
		
		#Если ВебКлиент Тогда
			Оповещение = Новый ОписаниеОповещения("ПродолжитьОбновлениеБазыПослеЗапуска", ЭтотОбъект, ДополнительныеПараметрыОбновления);
			ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыСоздания, ШаблонКоманды, ДождатьсяЗавершения, Оповещение);
		#Иначе
			КодВозврата = ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыСоздания, ШаблонКоманды, ДождатьсяЗавершения);
			ПродолжитьОбновлениеБазыПослеЗапуска(КодВозврата, ДополнительныеПараметрыОбновления);
		#КонецЕсли
		Возврат;
		
	КонецЕсли;
	
	ПродолжитьЗапускБазы(БылаСозданаБаза);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбновлениеБазыПослеЗапуска(КодВозврата, ДополнительныеПараметры) Экспорт 
	
	Если КодВозврата <> 0 Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяФайлаЛогов) Тогда
			
			Лог = Новый ТекстовыйДокумент;
			Лог.Прочитать(ДополнительныеПараметры.ИмяФайлаЛогов);
			ТекстЛога = Лог.ПолучитьТекст();
			УдалитьФайлы(ДополнительныеПараметры.ИмяФайлаЛогов);
			
		Иначе 
			ТекстЛога = "";
		КонецЕсли;
		
		Действие = ?(ПодключитьКонфигурациюКХранилищу, НСтр("ru = 'Не удалось подключиться к хранилищу'"), 
		                                               НСтр("ru = 'Не удалось обновиться из хранилища'"));
		
		ВызватьИсключение Действие + НСтр("ru = '
		                                  |Лог пакетных операций:
		                                  |'") + ТекстЛога;
		
	КонецЕсли;
	
	ПродолжитьЗапускБазы(ДополнительныеПараметры.БылаСозданаБаза);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьЗапускБазы(БылаСозданаБаза = Ложь)
	
	ДождатьсяЗавершения = ЗапуститьКонфигуратор ИЛИ ЗапуститьПредприятие;
	
	СохранитьНастройкиОшибки();
	
	Если (ДождатьсяЗавершения И СкопироватьИБИзОбщейВЛокальнуюКопию)
	     ИЛИ БылаСозданаБаза Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Копирование завершено'"), 
			ПолучитьНавигационнуюСсылку(Ошибка),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создана локальная копия ИБ ошибки %1'"), НомерОшибки), 
			БиблиотекаКартинок.СоздатьЛокальнуюКопиюИБ);
		
	ИначеЕсли СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Запущено копирование ИБ'"), 
			ПолучитьНавигационнуюСсылку(Ошибка),
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запущено создание локальной копии ИБ ошибки %1'"), НомерОшибки), 
			БиблиотекаКартинок.СоздатьЛокальнуюКопиюИБ);
		
	КонецЕсли; 
	
	Если ЗапуститьКонфигуратор Тогда
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("ПутьИБ",          ПутьЗапустить);
		ПараметрыЗапуска.Вставить("ВерсияПлатформы", ВерсияПлатформы);
		ПараметрыЗапуска.Вставить("ДополнительныеПараметрыЗапуска", ДополнительныеПараметрыЗапуска);
		Если ЗапускатьУказаннуюПлатформу Тогда
			ПараметрыЗапуска.Вставить("КаталогИсполняемогоФайла", КаталогИсполняемогоФайла);
		КонецЕсли; 
		ОбщегоНазначенияСППРКлиент.ЗапуститьКонфигуратор(ПараметрыЗапуска);
	КонецЕсли;
	
	Если ЗапуститьПредприятие Тогда
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("ПутьИБ",          ПутьЗапустить);
		ПараметрыЗапуска.Вставить("ВерсияПлатформы", ВерсияПлатформы);
		ПараметрыЗапуска.Вставить("ДополнительныеПараметрыЗапуска", ДополнительныеПараметрыЗапуска);
		ПараметрыЗапуска.Вставить("Клиент",          Клиент);
		ПараметрыЗапуска.Вставить("Отладка");
		Если ЗапускатьУказаннуюПлатформу Тогда
			ПараметрыЗапуска.Вставить("КаталогИсполняемогоФайла", КаталогИсполняемогоФайла);
		КонецЕсли; 
		ОбщегоНазначенияСППРКлиент.ЗапуститьПредприятие(ПараметрыЗапуска);
	КонецЕсли;
	
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ИсторияКаталогИсполняемогоФайла = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"КаталогИсполняемогоФайла", 
		Новый Массив);
	Элементы.КаталогИсполняемогоФайла.СписокВыбора.ЗагрузитьЗначения(ИсторияКаталогИсполняемогоФайла);
	Если ИсторияКаталогИсполняемогоФайла.Количество() > 0 Тогда
		КаталогИсполняемогоФайла = ИсторияКаталогИсполняемогоФайла[ИсторияКаталогИсполняемогоФайла.Количество()-1];
	КонецЕсли; 
	
	ДополнительныеПараметрыЗапуска = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"ДополнительныеПараметрыЗапуска", 
		ДополнительныеПараметрыЗапуска);
	
	ТипБазыПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"ТипБазыПоУмолчанию",
		Перечисления.ТипБазы.Файловый);
	
	СпособСозданияЛокальнойКопииБазыОшибки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"СпособСозданияЛокальнойКопииБазыОшибки", 
		Перечисления.СпособыСозданияЛокальнойКопииБазыОшибки.СоздаватьКаталогПоКодуОшибки);
		
	ЛокальныеКопииБаз = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		Ошибка.УникальныйИдентификатор(), 
		"ЛокальныеКопииБаз", 
		Новый СписокЗначений);
	
	Если ЛокальныеКопииБаз.Количество() = 0 Тогда
	
		ПутьЛокальнойКопииБазы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			Ошибка.УникальныйИдентификатор(), 
			"ПутьЛокальнойКопииБазы",
			"");
		
		Если ЗначениеЗаполнено(ПутьЛокальнойКопииБазы) Тогда
			ЛокальныеКопииБаз.Добавить(ПутьЛокальнойКопииБазы);
		КонецЕсли; 
	
	КонецЕсли; 
	
	ЗапускатьУказаннуюПлатформу = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		Ошибка.УникальныйИдентификатор(), 
		"ЗапускатьУказаннуюПлатформу", 
		ЗапускатьУказаннуюПлатформу);
		
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ЗапускатьУказаннуюПлатформу = Истина;
		Элементы.ИзменитьРежимЗапускаПлатформы2.Видимость = Ложь;
	КонецЕсли;
	
	НастройкиСерверныхБаз = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"РаботаСОшибками", 
		"НастройкиСерверныхБаз",
		Новый Структура);
	
	НастройкиСерверныхБаз.Свойство("КластерСерверов1С",      КластерСерверов1С);
	НастройкиСерверныхБаз.Свойство("ТипСУБД",                ТипСУБД);
	НастройкиСерверныхБаз.Свойство("СмещениеДат",            СмещениеДат);
	НастройкиСерверныхБаз.Свойство("СерверБазыДанных",       СерверБазыДанных);
	НастройкиСерверныхБаз.Свойство("ПользовательСервераБазыДанных",         ПользовательСервераБазыДанных);
	НастройкиСерверныхБаз.Свойство("ПарольПользователяСервераБазыДанных",   ПарольПользователяСервераБазыДанных);
	НастройкиСерверныхБаз.Свойство("СоздаватьБазуДанныхВСлучаеОтстутствия", СоздаватьБазуДанныхВСлучаеОтстутствия);
	
	ШаблонПутиСервернойБазы = "";
	Если     ЗначениеЗаполнено(КластерСерверов1С) ИЛИ ЗначениеЗаполнено(ТипСУБД)
	     ИЛИ ЗначениеЗаполнено(СмещениеДат)       ИЛИ ЗначениеЗаполнено(СерверБазыДанных) 
	     ИЛИ ЗначениеЗаполнено(ПользовательСервераБазыДанных) 
	     ИЛИ ЗначениеЗаполнено(ПарольПользователяСервераБазыДанных) Тогда
		 
		ИмяБазыСервера1С    = НомерОшибки;
		ИмяБазыСУБД         = НомерОшибки;
		СоздаватьБазуСтрока = ?(СоздаватьБазуДанныхВСлучаеОтстутствия, "Y", "N");
		
		ШаблонПутиСервернойБазы = "Srvr=""%КластерСерверов1С%"";Ref=""%ИмяБазыСервера1С%"";DBMS=""%ТипСУБД%"";"
		                        + "DBSrvr=""%СерверБазыДанных%"";DB=""%ИмяБазыСУБД%"";%СмещениеДатСтрока%"
		                        + "DBUID=""%ПользовательСервераБазыДанных%"";DBPwd=""%ПарольПользователяСервераБазыДанных%"";"
		                        + "CrSQLDB=""%СоздаватьБазу%"";";
		
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%КластерСерверов1С%", КластерСерверов1С);
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%ИмяБазыСервера1С%",  ИмяБазыСервера1С);
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%ТипСУБД%",           ПолучитьИмяЗначенияПеречисления(ТипСУБД));
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%СерверБазыДанных%",  СерверБазыДанных);
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%ИмяБазыСУБД%",       ИмяБазыСУБД);
		СмещениеДатСтрока       = ?(ЗначениеЗаполнено(СмещениеДат), "SQLYOffs=""" + СмещениеДат + """;", "");
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%СмещениеДатСтрока%", СмещениеДатСтрока);
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%ПользовательСервераБазыДанных%",       ПользовательСервераБазыДанных);
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%ПарольПользователяСервераБазыДанных%", ПарольПользователяСервераБазыДанных);
		ШаблонПутиСервернойБазы = СтрЗаменить(ШаблонПутиСервернойБазы, "%СоздаватьБазу%",       СоздаватьБазуСтрока);
		
	КонецЕсли; 
	
	РасположениеЛокальнойКопииБазы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РаботаСОшибками", "РасположениеЛокальнойКопииБазы");
	
	ВерсияХранилище = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		Ошибка.УникальныйИдентификатор(), 
		"ВерсияХранилище", 
		ВерсияХранилище);
		
	ИменаПользователейХранилищ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПодключенияКБазе",
		"ИменаПользователейХранилищ");
	
	Если ЗначениеЗаполнено(ИменаПользователейХранилищ) Тогда
		Элементы.ВерсияХранилищеИмяПользователя.СписокВыбора.ЗагрузитьЗначения(ИменаПользователейХранилищ);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаблонПутиЛокальнойКопииБазы()
	
	СимволСлеша = ПолучитьРазделительПути();
	ШаблонПутиЛокальнойКопииБазы = "";
	Если ЗначениеЗаполнено(РасположениеЛокальнойКопииБазы) Тогда
		
		ШаблонПутиЛокальнойКопииБазы = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РасположениеЛокальнойКопииБазы)
		                             + ПутьПроекта + СимволСлеша;
		
		СоздаватьКаталогПоКодуОшибки = ПредопределенноеЗначение("Перечисление.СпособыСозданияЛокальнойКопииБазыОшибки.СоздаватьКаталогПоКодуОшибки");
		Если Не ЗначениеЗаполнено(СпособСозданияЛокальнойКопииБазыОшибки) 
		     ИЛИ СпособСозданияЛокальнойКопииБазыОшибки = СоздаватьКаталогПоКодуОшибки Тогда
			ШаблонПутиЛокальнойКопииБазы = ШаблонПутиЛокальнойКопииБазы + НомерОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
 
&НаСервере
Процедура СохранитьНастройкиОшибки()
	
	Если СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		Если ЛокальныеКопииБаз.НайтиПоЗначению(ПутьЗапустить) = Неопределено Тогда
			ЛокальныеКопииБаз.Вставить(0, ПутьЗапустить);
		КонецЕсли;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			Ошибка.УникальныйИдентификатор(), 
			"ЛокальныеКопииБаз",
			ЛокальныеКопииБаз,
			,
			,
			Истина);
		
	КонецЕсли; 
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		Ошибка.УникальныйИдентификатор(), 
		"ЗапускатьУказаннуюПлатформу",
		ЗапускатьУказаннуюПлатформу,
		,
		,
		Истина);
	
	Если ЗапускатьУказаннуюПлатформу Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РаботаСОшибками", 
			"КаталогИсполняемогоФайла",
			Элементы.КаталогИсполняемогоФайла.СписокВыбора.ВыгрузитьЗначения(),
			,
			,
			Истина);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"РаботаСОшибками", 
			"ДополнительныеПараметрыЗапуска",
			ДополнительныеПараметрыЗапуска,
			,
			,
			Истина);
		
	КонецЕсли;
	
	Если ОбновитьИзХранилища Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			Ошибка.УникальныйИдентификатор(), 
			"ВерсияХранилище",
			ВерсияХранилище,
			,
			,
			Истина);
		
		Если ЗначениеЗаполнено(ВерсияХранилищеИмяПользователя) Тогда
		
			ИменаПользователейХранилищ = Элементы.ВерсияХранилищеИмяПользователя.СписокВыбора.ВыгрузитьЗначения();
			
			ТекущееИмя = ИменаПользователейХранилищ.Найти(ВерсияХранилищеИмяПользователя);
			Если ТекущееИмя <> Неопределено Тогда
				ИменаПользователейХранилищ.Удалить(ТекущееИмя);
			КонецЕсли; 
			
			ИменаПользователейХранилищ.Вставить(0, ВерсияХранилищеИмяПользователя);
			
			КоличествоЗапоминаемыхИмен = 10;
			Если ИменаПользователейХранилищ.Количество() > КоличествоЗапоминаемыхИмен Тогда
				ИменаПользователейХранилищ.Удалить(КоличествоЗапоминаемыхИмен);
			КонецЕсли; 
			
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"НастройкиПодключенияКБазе",
				"ИменаПользователейХранилищ",
				ИменаПользователейХранилищ,
				,
				,
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьПутьЗапуска()

	ПутиИсточникаПрименикаСовпадают = (ПутьЗапустить = ПутьСкопировать) И СкопироватьИБИзОбщейВЛокальнуюКопию;
	Если ПутиИсточникаПрименикаСовпадают Тогда
		ТекстРазличныхПредупреждений = НСтр("ru = 'Путь запуска и путь источника совпадают.'");
		Возврат;
	Иначе 
		ТекстРазличныхПредупреждений = "";
	КонецЕсли; 
	
	Если СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		#Если Не ВебКлиент Тогда
		Если ЗначениеЗаполнено(ПутьСкопировать) Тогда
			ФайлПутьСкопировать = Новый Файл(ПутьСкопировать);
			Если ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(ПутьСкопировать) И
					Не ФайлПутьСкопировать.Существует() Тогда
				ТекстРазличныхПредупреждений = НСтр("ru = 'В поле источника для копирования указана недоступная директория. Проверьте корректность указанного пути.'");
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
		#КонецЕсли
		
		Если ЗначениеЗаполнено(ПутьСкопировать) 
		   И ПутьСкопировать = ПутьОбщейБазы 
		   И Не ПутьОбщейБазыСодержитФайл1CD Тогда
			
			ТекстРазличныхПредупреждений = НСтр("ru = 'В поле источника для копирования указан путь не содержащий файлов базы. Проверьте корректность указанного пути.'");
			Возврат;
			
		КонецЕсли; 
		
		ИмеютсяФайлыВКаталогеПриемнике = Ложь;
		
		#Если Не ВебКлиент Тогда
		Если ЗначениеЗаполнено(ПутьЗапустить) И СкопироватьИБИзОбщейВЛокальнуюКопию И ПодключитьРасширениеРаботыСФайлами() Тогда
			НайденныеФайлы = НайтиФайлы(ПутьЗапустить, "*.*", Истина);
			ИмеютсяФайлыВКаталогеПриемнике = НайденныеФайлы.Количество() <> 0;
		КонецЕсли; 
		#КонецЕсли
		
		Если ИмеютсяФайлыВКаталогеПриемнике И СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
			ТекстРазличныхПредупреждений = НСтр("ru = 'В каталоге-приемнике имеются файлы.
			                                    |Перед копированием все файлы будут удалены.'");
			
			ПодключитьОбработчикОжидания("ПроверитьПутьЗапуска", 5, Истина);
		Иначе
			ТекстРазличныхПредупреждений = "";
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСохраненииЛокальногоПути()

	СимволСлеша = ПолучитьРазделительПути();
	
	ПутьИБ = СтрЗаменить(ПутьЗапустить, СимволСлеша + НомерОшибки, "");
	ПутьИБ = СтрЗаменить(ПутьИБ, СимволСлеша + ПутьПроекта, "");
	
	ДополнительныеПараметры = Новый Структура("ПутьИБ", ПутьИБ);
	Если ПутьИБ = ПутьЗапустить Тогда
		ТекстВопроса = НСтр("ru = 'Сохранить единый путь ""%ПутьИБ%"" для сохранения всех локальных баз ошибок?
                             |Настройки всегда можно изменить в: Органайзер - Персональные настройки - Работа с базами.'");
		ДополнительныеПараметры.Вставить("СпособСозданияЛокальнойКопииБазыОшибки", ПредопределенноеЗначение("Перечисление.СпособыСозданияЛокальнойКопииБазыОшибки.ИспользоватьОдинКаталог"));
	Иначе
		ТекстВопроса = НСтр("ru = 'Сохранить путь ""%ПутьИБ%%СимволСлеша%<Проект>%СимволСлеша%<Код ошибки>"" для сохранения всех локальных баз ошибок?
                             |Настройки всегда можно изменить в: Органайзер - Персональные настройки - Работа с базами.'");
		ДополнительныеПараметры.Вставить("СпособСозданияЛокальнойКопииБазыОшибки", ПредопределенноеЗначение("Перечисление.СпособыСозданияЛокальнойКопииБазыОшибки.СоздаватьКаталогПоКодуОшибки"));
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросОСохраненииЛокальногоПутиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ПутьИБ%", ПутьИБ);
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%СимволСлеша%", СимволСлеша);
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сохранить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не сохранять'"));
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСохраненииЛокальногоПутиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
	
		СохранитьНастройкиСозданияЛокальныхБаз(ДополнительныеПараметры);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиСозданияЛокальныхБаз(ДополнительныеПараметры)

	РасположениеЛокальнойКопииБазы = ДополнительныеПараметры.ПутьИБ;
	СпособСозданияЛокальнойКопииБазыОшибки = ДополнительныеПараметры.СпособСозданияЛокальнойКопииБазыОшибки;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РаботаСОшибками", 
		"РасположениеЛокальнойКопииБазы",
		РасположениеЛокальнойКопииБазы,
		,
		,
		Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РаботаСОшибками", 
		"СпособСозданияЛокальнойКопииБазыОшибки",
		ДополнительныеПараметры.СпособСозданияЛокальнойКопииБазыОшибки,
		,
		,
		Истина);

КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьВопросОСохраненииСерверныхНастроек(Результат)
	
	НастройкиСерверныхБаз = Новый Структура;
	ПеренестиВСтруктуруПриНаличии(Результат, НастройкиСерверныхБаз, "КластерСерверов1С");
	ПеренестиВСтруктуруПриНаличии(Результат, НастройкиСерверныхБаз, "ТипСУБД");
	ПеренестиВСтруктуруПриНаличии(Результат, НастройкиСерверныхБаз, "СмещениеДат");
	ПеренестиВСтруктуруПриНаличии(Результат, НастройкиСерверныхБаз, "СерверБазыДанных");
	ПеренестиВСтруктуруПриНаличии(Результат, НастройкиСерверныхБаз, "ПользовательСервераБазыДанных");
	ПеренестиВСтруктуруПриНаличии(Результат, НастройкиСерверныхБаз, "ПарольПользователяСервераБазыДанных");
	ПеренестиВСтруктуруПриНаличии(Результат, НастройкиСерверныхБаз, "СоздаватьБазуДанныхВСлучаеОтстутствия");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НастройкиСерверныхБаз", НастройкиСерверныхБаз);
	
	ТекстВопроса = НСтр("ru = 'Сохранить выбранные настройки создания локальных серверных баз?
	                          |Настройки всегда можно изменить в: Органайзер - Персональные настройки - Работа с базами.'");
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросОСохраненииСерверныхНастроекЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Сохранить'"));
	Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не сохранять'"));
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСохраненииСерверныхНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СохранитьНастройкиСерверныхБаз(ДополнительныеПараметры)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиСерверныхБаз(ДополнительныеПараметры)
	
	НастройкиСерверныхБаз = ДополнительныеПараметры.НастройкиСерверныхБаз;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"РаботаСОшибками",
		"НастройкиСерверныхБаз",
		НастройкиСерверныхБаз,
		,
		,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВСтруктуруПриНаличии(Источник, Приемник, ИмяПараметра)
	
	Если Источник.Свойство(ИмяПараметра) Тогда
		Приемник.Вставить(ИмяПараметра, Источник[ИмяПараметра]);
	КонецЕсли; 

КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьДоступностьВидимость()
	
	ЭтоФайл = ТипЗнч(ПутьСкопировать) = Тип("СправочникСсылка.Файлы") И ЗначениеЗаполнено(ПутьСкопировать);
	УказанКаталог = ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(ПутьСкопировать);
	
	Если УказанКаталог Тогда
		Элементы.ПутьСкопировать.КнопкаОткрытия = Истина;
	ИначеЕсли ЭтоФайл Тогда
		Элементы.ПутьСкопировать.КнопкаОткрытия = Истина;
	Иначе
		Элементы.ПутьСкопировать.КнопкаОткрытия = Ложь;
	КонецЕсли;
	
	Элементы.ВерсияХранилище.Видимость        = ОбновитьИзХранилища;
	Элементы.ПутьКХранилищу.Видимость         = ОбновитьИзХранилища;
	Элементы.ВерсияХранилищеИмяПользователя.Видимость   = ОбновитьИзХранилища;
	Элементы.ВерсияХранилищеПароль.Видимость  = ОбновитьИзХранилища;
	Элементы.ПодключитьКонфигурациюКХранилищу.Видимость = ОбновитьИзХранилища;
	
	Если (ЗапуститьКонфигуратор ИЛИ ЗапуститьПредприятие) И СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
	
		Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаСкопироватьИЗапустить;
		Элементы.СкопироватьЗапустить.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		
		Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаСкопировать;
		Элементы.Скопировать.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		Элементы.ГруппаСтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаЗапустить;
		Элементы.Запустить.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли; 
	
	Если ЗапускатьУказаннуюПлатформу Тогда
		Элементы.ГруппаСтраницыКаталогаПрограммы.ТекущаяСтраница = Элементы.РучнойКаталог;
	Иначе
		Элементы.ГруппаСтраницыКаталогаПрограммы.ТекущаяСтраница = Элементы.ГруппаАвтоматическийКаталог;
	КонецЕсли;
	
	Элементы.ПутьСкопировать.Доступность = СкопироватьИБИзОбщейВЛокальнуюКопию;
	
	Элементы.ПодключитьКонфигурациюКХранилищу.Доступность = (НРег(ВерсияХранилищеИмяПользователя) <> НРег("ТолькоПросмотр"));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИсполняемогоФайлаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(КаталогИсполняемогоФайла) 
		И Элементы.КаталогИсполняемогоФайла.СписокВыбора.НайтиПоЗначению(КаталогИсполняемогоФайла) = Неопределено Тогда
		Элементы.КаталогИсполняемогоФайла.СписокВыбора.Добавить(КаталогИсполняемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПутьЛокальнойКопииБазыЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	СкопироватьИБИзОбщейВЛокальнуюКопию = Истина;
	ПроверитьПутьЗапуска();
	УстановитьДоступностьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапуститьЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Не СкопироватьИБИзОбщейВЛокальнуюКопию Тогда
		Возврат;
	КонецЕсли; 
	
	ПутиИсточникаПрименикаСовпадают = (ПутьЗапустить = ПутьСкопировать);
	Если ПутиИсточникаПрименикаСовпадают Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Путь запуска и путь источника совпадают.'"));
		Возврат;
	КонецЕсли; 
	
	Если ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(ПутьСкопировать) Тогда
		
		#Если Не ВебКлиент Тогда
		ФайлПутьСкопировать = Новый Файл(ПутьСкопировать);
		Если ФайлПутьСкопировать.ЭтоФайл() Тогда
			Если Не ФайлПутьСкопировать.Существует() Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Файл исходной базы отсутствует или к нему нет доступа.'"));
				Возврат;
			КонецЕсли; 
		Иначе
			
			Если ЭтоСтрокаСоединенияСервернойБазы(ПутьЗапустить) Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Копирование файловых баз в серверные не поддерживается.
				|Выберите в качестве источника - файл выгрузки информационной базы (.dt).'"));
				Возврат;
			КонецЕсли;
			
			НайденныеФайлы = НайтиФайлы(ПутьСкопировать, "*.*", Истина);
			Если НайденныеФайлы.Количество() = 0 Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Каталог исходной базы отсутствует или в нем нет файлов.'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		#КонецЕсли
		
	ИначеЕсли Не ЗначениеЗаполнено(ПутьСкопировать) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана исходная ИБ.'"));
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("СкопироватьЗапуститьЗавершениеЗавершение", ЭтотОбъект), ПутьЗапустить, "*.*", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗапуститьЗавершениеЗавершение(НайденныеФайлы, ДополнительныеПараметры1) Экспорт
	
	Если НайденныеФайлы.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'В каталоге-приемнике имеются файлы.
		|Перед копированием все файлы будут удалены.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросУдалитьФайлыЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить файлы и продолжить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да);
	Иначе
		ПродолжитьСозданиеБазыИЗапуск();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроанализироватьКаталогИсходнойБазы()
	
	ИсточникиКопирования.Очистить();
	ПутьОбщейБазы = "";
	ЗапуститьСписокВыбора = Элементы.ПутьЗапустить.СписокВыбора;
	
	Если ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(КаталогИсходнойБазы) Тогда 
		
		#Если ВебКлиент Тогда
		ИсточникиКопирования.Добавить(КаталогИсходнойБазы);
		#Иначе
		
		Файл = Новый Файл(КаталогИсходнойБазы);
		
		Если Файл.Существует() Тогда
			
			Если Файл.ЭтоКаталог() Тогда
				
				ИсточникиКопирования.Добавить(КаталогИсходнойБазы);
				ПутьОбщейБазы = КаталогИсходнойБазы;
				
				ФайлыБазыДанных = НайтиФайлы(КаталогИсходнойБазы, "1Cv8.1CD");
				ПутьОбщейБазыСодержитФайл1CD = ФайлыБазыДанных.Количество() > 0;
				
				ФайлыКонфигурации = НайтиФайлы(КаталогИсходнойБазы, "*.cf");
				
				Для Каждого ФайлКонфигурации Из ФайлыКонфигурации Цикл
					ИсточникиКопирования.Добавить(ФайлКонфигурации.ПолноеИмя);
				КонецЦикла; 
				Если ФайлыКонфигурации.Количество() > 0 Тогда
					ПутьСкопировать = ФайлыКонфигурации[0].ПолноеИмя;
				КонецЕсли; 
				
				ФайлыБазы = НайтиФайлы(КаталогИсходнойБазы, "*.dt");
				
				Для Каждого ФайлБазы Из ФайлыБазы Цикл
					ИсточникиКопирования.Добавить(ФайлБазы.ПолноеИмя);
				КонецЦикла; 
				Если ФайлыБазы.Количество() > 0 Тогда
					ПутьСкопировать = ФайлыБазы[0].ПолноеИмя;
				КонецЕсли; 
				
			ИначеЕсли Файл.Расширение = ".dt" ИЛИ Файл.Расширение = ".cf" Тогда
				ИсточникиКопирования.Добавить(КаталогИсходнойБазы);
			КонецЕсли; 
			
		Иначе 
			ИсточникиКопирования.Добавить(КаталогИсходнойБазы);
		КонецЕсли;
		
		#КонецЕсли
		
	ИначеЕсли ЭтоСтрокаСоединенияСервернойБазы(КаталогИсходнойБазы) Тогда
		
		ПутьЗапустить = КаталогИсходнойБазы;
		ЗапуститьСписокВыбора.Добавить(КаталогИсходнойБазы);
		
	КонецЕсли;
	
	СписокШаблонов = ОбщегоНазначенияСППРВызовСервера.СписокШаблоновИнформационныхБазОшибки(Ошибка);
	
	Для Каждого Файл Из СписокШаблонов Цикл
		ИсточникиКопирования.Добавить(Файл.Значение, Файл.Представление);
	КонецЦикла; 
	
	Если ЛокальныеКопииБаз.Количество() > 0 Тогда
		
		ПутьЗапустить = ЛокальныеКопииБаз[0].Значение;
		СкопироватьИБИзОбщейВЛокальнуюКопию = Ложь;
		
		Для Каждого ЛокальнаяКопияБазы Из ЛокальныеКопииБаз Цикл
			ЗапуститьСписокВыбора.Добавить(ЛокальнаяКопияБазы.Значение);
		КонецЦикла; 
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ШаблонПутиСервернойБазы) Тогда
		
		СтрокаПоиска = ПолучитьСтрокуСоединенияИзСтрокиСозданияСервернойБазы(ШаблонПутиСервернойБазы);
		
		Если ЗапуститьСписокВыбора.НайтиПоЗначению(СтрокаПоиска) = Неопределено Тогда
			ЗапуститьСписокВыбора.Добавить(ШаблонПутиСервернойБазы);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ШаблонПутиЛокальнойКопииБазы) Тогда
		
		Если ЗапуститьСписокВыбора.НайтиПоЗначению(ШаблонПутиЛокальнойКопииБазы) = Неопределено Тогда
			Элементы.ПутьЗапустить.СписокВыбора.Добавить(ШаблонПутиЛокальнойКопииБазы);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПутьЗапустить) Тогда
		
		Если   ТипБазыПоУмолчанию = ПредопределенноеЗначение("Перечисление.ТипБазы.Серверный")
		     И ЗначениеЗаполнено(ШаблонПутиСервернойБазы) Тогда
			ПутьЗапустить = ШаблонПутиСервернойБазы;
			СкопироватьИБИзОбщейВЛокальнуюКопию = Истина;
		ИначеЕсли ЗначениеЗаполнено(ШаблонПутиЛокальнойКопииБазы) Тогда
			ПутьЗапустить = ШаблонПутиЛокальнойКопииБазы;
			СкопироватьИБИзОбщейВЛокальнуюКопию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьОбщейБазы) Тогда
		Элементы.ПутьЗапустить.СписокВыбора.Добавить(ПутьОбщейБазы);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПутьЗапустить) И ЗначениеЗаполнено(ПутьОбщейБазы) Тогда
	
		ПутьЗапустить = ПутьОбщейБазы;
		СкопироватьИБИзОбщейВЛокальнуюКопию = Ложь;
	
	КонецЕсли; 
	
	Для Каждого ИсточникКопирования Из ИсточникиКопирования Цикл
		Элементы.ПутьСкопировать.СписокВыбора.Добавить(ИсточникКопирования.Значение, ИсточникКопирования.Представление);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПутьСкопировать) И Элементы.ПутьСкопировать.СписокВыбора.Количество() > 0 Тогда
		ПутьСкопировать = Элементы.ПутьСкопировать.СписокВыбора[0].Значение;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПутьСкопировать) Тогда
		ПутьСкопировать = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПутьЗапустить) И ЗначениеЗаполнено(ПутьСкопировать) Тогда
		СкопироватьИБИзОбщейВЛокальнуюКопию = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСтрокаСоединенияСервернойБазы(Знач ПутьИБ)
	
	ПутьИБ = ВРег(ПутьИБ);
	
	Если Найти(ПутьИБ, "SRVR=") > 0 И Найти(ПутьИБ, "REF=") > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСтрокаСозданияСервернойБазы(Знач ПутьИБ)
	
	ПутьИБ = ВРег(ПутьИБ);
	
	Если Найти(ПутьИБ, "SRVR=") > 0 И Найти(ПутьИБ, "REF=") > 0 
	   И Найти(ПутьИБ, "DBMS=") > 0 И Найти(ПутьИБ, "DBSRVR=") > 0 
		 И Найти(ПутьИБ, "DB=") > 0 Тогда
		 
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуСоединенияИзСтрокиСозданияСервернойБазы(Знач ПутьИБ)
	
	СтрокаСоединения = "";
	
	ПутьИБВРег = ВРег(ПутьИБ);
	
	НачалоSRVR = Найти(ПутьИБВРег, "SRVR=");
	СтрокаSRVR = Сред(ПутьИБВРег, НачалоSRVR);
	КонецSRVR  = Найти(СтрокаSRVR, ";");
	
	Если КонецSRVR <> 0 Тогда
		СтрокаСоединения = Сред(ПутьИБ, НачалоSRVR, КонецSRVR);
	Иначе 
		СтрокаСоединения = Сред(ПутьИБ, НачалоSRVR);
	КонецЕсли;
	
	НачалоREF = Найти(ПутьИБВРег, "REF=");
	СтрокаREF = Сред(ПутьИБВРег, НачалоREF);
	КонецREF  = Найти(СтрокаREF, ";");
	
	Если КонецREF <> 0 Тогда
		СтрокаСоединения = СтрокаСоединения + Сред(ПутьИБ, НачалоREF, КонецREF);
	Иначе 
		СтрокаСоединения = СтрокаСоединения + Сред(ПутьИБ, НачалоREF);
	КонецЕсли;

	Возврат СтрокаСоединения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяЗначенияПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;

КонецФункции

&НаСервере
Процедура ЗагрузитьДоступныеВерсииПроекта()
	
	ВерсияИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка, "ВерсияИсправления");
	
	Если ЗначениеЗаполнено(ВерсияИсправления) Тогда
		ВерсияХранилище = ВерсияИсправления;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Проект
	|	И (ВерсииПроекта.Ветка.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|			ИЛИ ВерсииПроекта.Ветка.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаВерсии)
	|				И (ВерсииПроекта.ДатаПрекращенияПоддержки >= &ТекущаяДата
	|					ИЛИ ВерсииПроекта.ДатаПрекращенияПоддержки = ДАТАВРЕМЯ(1, 1, 1)))";
	
	Запрос.УстановитьПараметр("Проект",      Проект);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ДоступныеВерсии = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Элементы.ВерсияХранилище.СписокВыбора.ЗагрузитьЗначения(ДоступныеВерсии);
	
	Если Не ЗначениеЗаполнено(ВерсияХранилище) И ДоступныеВерсии.Количество() = 1 Тогда
		ВерсияХранилище = ДоступныеВерсии[0];
	КонецЕсли; 
	
	Ответ = ПолучитьПутьХранилищаИВерсиюПлатформы(ВерсияХранилище);
	ПутьКХранилищу               = Ответ.ПутьКХранилищу;
	ВерсияПлатформыВерсииПроекта = Ответ.ВерсияПлатформы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПутьХранилищаИВерсиюПлатформы(Версия);
	
	Ответ = Новый Структура;
	Ответ.Вставить("ПутьКХранилищу",  "");
	Ответ.Вставить("ВерсияПлатформы", "");
	
	Если ЗначениеЗаполнено(Версия) Тогда
		
		РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, 
			"Владелец,Ветка.Тип,Ветка.Имя,ВерсияПлатформыХранилища");
		
		Если РеквизитыВерсии.ВеткаТип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
			
			РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыВерсии.Владелец, 
				"Ветка.Имя,ВерсияПлатформы");
			
			Ответ.ПутьКХранилищу  = РеквизитыПроекта.ВеткаИмя;
			Ответ.ВерсияПлатформы = РеквизитыПроекта.ВерсияПлатформы;
			
		Иначе 
			Ответ.ПутьКХранилищу  = РеквизитыВерсии.ВеткаИмя;
			Ответ.ВерсияПлатформы = РеквизитыВерсии.ВерсияПлатформыХранилища;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти
