
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Ветка = Неопределено;
	ОтборПоВеткеОбнаружения = Истина;
	
	Если Параметры.Свойство("ТехническийПроект") И ЗначениеЗаполнено(Параметры.ТехническийПроект) Тогда
		Ветка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТехническийПроект, "Ветка");
		ЭтаФорма.Заголовок = НСтр("ru='Ошибки, зарегистрированные при тестировании технического проекта'");
		ОтборПоВеткеОбнаружения = Истина;
	ИначеЕсли Параметры.Свойство("ВеткаОбнаружения") И ЗначениеЗаполнено(Параметры.ВеткаОбнаружения) Тогда
		Ветка = Параметры.ВеткаОбнаружения;
		ЭтаФорма.Заголовок = НСтр("ru='Ошибки, обнаруженные в ветке'");
		ОтборПоВеткеОбнаружения = Истина;
	ИначеЕсли Параметры.Свойство("ВеткаИсправления") И ЗначениеЗаполнено(Параметры.ВеткаИсправления) Тогда
		Ветка = Параметры.ВеткаИсправления;
		ЭтаФорма.Заголовок = НСтр("ru='Ошибки, исправляемые в ветке'");
		ОтборПоВеткеОбнаружения = Ложь;
	КонецЕсли;
	
	Элементы.ОткрытьПоследнийЗапуск.Видимость = Ложь;
	Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "ДатаНачалаТестирования")) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
		                |	ЗапускТестирования.Ссылка КАК Ссылка,
		                |	ЗапускТестирования.Дата КАК Дата,
		                |	ЗапускТестирования.ДатаЗавершения КАК ДатаЗавершения
		                |ИЗ
		                |	Документ.ЗапускТестирования КАК ЗапускТестирования
		                |ГДЕ
		                |	ЗапускТестирования.Ветка = &Ветка
		                |	И НЕ ЗапускТестирования.ПометкаУдаления
		                |	И ЗапускТестирования.Проведен
		                |	И ЗапускТестирования.Настройка <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
		                |
		                |УПОРЯДОЧИТЬ ПО
		                |	ЗапускТестирования.Дата УБЫВ";
			
		Запрос.УстановитьПараметр("Ветка", Ветка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Элементы.ОткрытьПоследнийЗапуск.Видимость = Истина;
			Элементы.ОткрытьПоследнийЗапуск.Заголовок = СтрШаблон(НСтр("ru='Последний запуск тестирования: запущен %1'"), Выборка.Дата);
			Если ЗначениеЗаполнено(Выборка.ДатаЗавершения) Тогда
				 Элементы.ОткрытьПоследнийЗапуск.Заголовок = Элементы.ОткрытьПоследнийЗапуск.Заголовок 
				 											+ СтрШаблон(НСтр("ru=' и завершен %1'"), Выборка.ДатаЗавершения);
			Иначе
				Элементы.ОткрытьПоследнийЗапуск.Заголовок = Элементы.ОткрытьПоследнийЗапуск.Заголовок + НСтр("ru=' и все ещё выполняется'");
			КонецЕсли;
			ПоследнийЗапускТестирования = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СостояниеИсправления.Видимость = НЕ ОтборПоВеткеОбнаружения;

	Список.Параметры.УстановитьЗначениеПараметра("ОтборПоВеткеОбнаружения", ОтборПоВеткеОбнаружения);
	Список.Параметры.УстановитьЗначениеПараметра("Ветка", Ветка);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКомандыФормы);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандКонтроля = Новый Массив;
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль"));
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(ЭтотОбъект, СпискиДляВыводаКомандКонтроля);
	// Конец ОбъектыНаКонтроле
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДействияСОшибкой" Тогда
		
		Если ВыбраннаяСтрока<>Неопределено Тогда
			
			ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		    СтандартнаяОбработка = Ложь;
		
			ОбработатьДействиеСОшибкой(ДанныеСтроки.ДействияСОшибкой, ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОшибкуРаботыСПрограммой(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ВеткаОбнаружения, МетодВыявленияОшибки", Ветка,
		ПредопределенноеЗначение("Перечисление.МетодыВыявленияОшибок.РаботаСПрограммой"));
	ОткрытьФорму("Справочник.Ошибки.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОшибкуПоАудиту(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ВеткаОбнаружения, МетодВыявленияОшибки", Ветка,
		ПредопределенноеЗначение("Перечисление.МетодыВыявленияОшибок.АудитКода"));
	ОткрытьФорму("Справочник.Ошибки.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
	
КонецПроцедуры

&НаКлиенте
Процедура Вернуть(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована") Тогда
			ТекстСообщения = НСтр("ru='Незарегистрированная ошибка не может быть возвращена'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Ссылка = ТекущиеДанные.Ссылка;
		
		Структура = Новый Структура("Ссылка", Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВернутьЗавершение", ЭтотОбъект, Структура);
		ОткрытьФорму("Справочник.Ошибки.Форма.ВозвратОшибки", Структура, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    Ссылка = ДополнительныеПараметры.Ссылка;
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        
        ВернутьСервер(Ссылка, Результат.КомуНаправлена, Результат.Комментарий);
        
        ТекстОповещения = НСтр("ru='Ошибка возвращена'");
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Ссылка);
		
        ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, Ссылка, БиблиотекаКартинок.Информация32);
        ИсторияРаботыПользователя.Добавить(Ссылка);
        
        Оповестить("ОшибкаВозвращена", Ссылка);
        ОповеститьОбИзменении(Тип("СправочникСсылка.Ошибки"));
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
		Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		МассивСсылок = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если ДанныеСтроки.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована")
				И ДанныеСтроки.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана") Тогда
				
				МассивСсылок.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Структура = Новый Структура("МассивСсылок", МассивСсылок);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект, Структура);
		ОткрытьФорму("Справочник.Ошибки.Форма.ПеренаправлениеОшибки",, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    МассивСсылок = ДополнительныеПараметры.МассивСсылок;
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        
        КоличествоОбработанных = 0;
        ПеренаправитьСервер(МассивСсылок, Результат.КомуНаправлена, Результат.Комментарий, КоличествоОбработанных);
        Элементы.Список.Обновить();
        
        ТекстОповещения = НСтр("ru='Перенаправлено ошибок: %Количество%'");
        ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
        ПоказатьОповещениеПользователя(НСтр("ru='Перенаправление ошибок'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Ознакомиться(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		МассивСсылок = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если (ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки"))
				И ЗначениеЗаполнено(ДанныеСтроки.КомуНаправлена) Тогда
				
				МассивСсылок.Добавить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		КоличествоОбработанных = 0;
		ОзнакомитьсяСервер(МассивСсылок, КоличествоОбработанных);
		
		Элементы.Список.Обновить();
		
		ТекстОповещения = НСтр("ru='Обработано ошибок: %Количество%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
		ПоказатьОповещениеПользователя(НСтр("ru='Ознакомление с ошибками'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнатьИсправитьПроверитьЗакрыть(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		СписокСсылок = Новый Массив;
		СписокПроектов = Новый Массив;
		СписокВерсий = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если (ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена"))
				И НЕ ДанныеСтроки.ПометкаУдаления Тогда
				
				СписокСсылок.Добавить(Строка);
				
				Если СписокПроектов.Найти(ДанныеСтроки.Владелец) = Неопределено Тогда
					СписокПроектов.Добавить(ДанныеСтроки.Владелец);
				КонецЕсли;
				
				Если СписокВерсий.Найти(ДанныеСтроки.ВерсияИсправления) = Неопределено Тогда
					СписокВерсий.Добавить(ДанныеСтроки.ВерсияИсправления);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СписокСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СписокСсылок", СписокСсылок);
		ДопПараметры.Вставить("СписокПроектов", СписокПроектов);
		ДопПараметры.Вставить("СписокВерсий", СписокВерсий);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПризнатьисправитьПроверитьЗакрытьЗавершение", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Справочник.Ошибки.Форма.ПризнатьИсправитьПроверитьЗакрыть",, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнатьИсправитьПроверитьЗакрытьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    СписокСсылок = ДополнительныеПараметры.СписокСсылок;
    СписокПроектов = ДополнительныеПараметры.СписокПроектов;
    СписокВерсий = ДополнительныеПараметры.СписокВерсий;
	
    Если ТипЗнч(РезультатДействия) = Тип("Структура") Тогда
        
        КоличествоОбработанных = 0;
        ПризнатьИсправитьПроверитьЗакрытьСервер(СписокСсылок, СписокПроектов, СписокВерсий, РезультатДействия, КоличествоОбработанных);
        Элементы.Список.Обновить();
        
        ТекстОповещения = НСтр("ru='Обработано ошибок: %Количество%'");
        ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
        ПоказатьОповещениеПользователя(НСтр("ru='Признание, исправление, проверка, закрытие ошибок'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НеПризнаватьОтозватьЗакрыть(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		СписокСсылок = Новый Массив;
		СписокПроектов = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если (ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана"))
				И НЕ ДанныеСтроки.ПометкаУдаления Тогда
				
				СписокСсылок.Добавить(Строка);
				
				Если СписокПроектов.Найти(ДанныеСтроки.Владелец) = Неопределено Тогда
					СписокПроектов.Добавить(ДанныеСтроки.Владелец);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СписокСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СписокСсылок", СписокСсылок);
		ДопПараметры.Вставить("СписокПроектов", СписокПроектов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НеПризнаватьОтозватьЗакрытьЗавершение", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Справочник.Ошибки.Форма.НеПризнаватьОтозватьЗакрыть",, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеПризнаватьОтозватьЗакрытьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    СписокСсылок = ДополнительныеПараметры.СписокСсылок;
	СписокПроектов = ДополнительныеПараметры.СписокПроектов;
    
    Если ТипЗнч(РезультатДействия) = Тип("Структура") Тогда
        
        КоличествоОбработанных = 0;
        НеПризнаватьОтозватьЗакрытьСервер(СписокСсылок, СписокПроектов, РезультатДействия, КоличествоОбработанных);
        Элементы.Список.Обновить();
        
        ТекстОповещения = НСтр("ru='Обработано ошибок: %Количество%'");
        ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
        ПоказатьОповещениеПользователя(НСтр("ru='Непризнание, отзыв, закрытие ошибок'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьВерсиюИсправления(Команда)
	
	МассивСсылок = Новый Массив;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			МассивСсылок.Добавить(Строка);
		КонецЦикла;
		
	КонецЕсли;
		
	Если МассивСсылок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолеОтбораВладелец = Новый ПолеКомпоновкиДанных("Владелец");
	
	Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	
	Для Каждого ЭлементОтбора из Список.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбораВладелец
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
				
				Проект = ЭлементОтбора.ПравоеЗначение;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Проект) Тогда
		СтруктураОтбора.Вставить("Владелец", Проект);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Структура = Новый Структура("МассивСсылок", МассивСсылок);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НазначитьВерсиюИсправленияЗавершение", ЭтотОбъект, Структура);
	ОткрытьФорму("Справочник.ВерсииПроекта.ФормаВыбора",
				 ПараметрыФормы,
				 ЭтаФорма,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьВерсиюИсправленияЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	ВерсияИсправления = РезультатДействия;
	
	МассивСсылок = ДополнительныеПараметры.МассивСсылок;
	
	Если ЗначениеЗаполнено(ВерсияИсправления) Тогда
		
		КоличествоОбработанных = 0;
		НазначитьВерсиюИсправленияСервер(МассивСсылок, ВерсияИсправления, КоличествоОбработанных);
		
		Элементы.Список.Обновить();
			
		ТекстОповещения = НСтр("ru='Назначена версия исправления для ошибок: %Количество%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
		ПоказатьОповещениеПользователя(НСтр("ru='Назначение версии исправления'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

&НаКлиенте
Процедура ОткрытьПоследнийЗапуск(Команда)
	Если ЗначениеЗаполнено(ПоследнийЗапускТестирования) Тогда
		ПоказатьЗначение(Неопределено, ПоследнийЗапускТестирования);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьДействиеСОшибкой(ДействияСОшибкой, Ссылка)
	
	Если ДействияСОшибкой = "Зарегистрировать" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Регистрация");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Признать" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Признание");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Исправить" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Исправление");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Отозвать" Тогда
		
		ПараметрыФормы = Новый Структура("Ошибка", Ссылка);
		ОткрытьФорму("Справочник.Ошибки.Форма.ОтзывОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Подтвердить исправление" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "ПодтверждениеИсправления");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Закрыть" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Закрытие");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПеренаправитьСервер(МассивСсылок, КомуНаправлена, Комментарий, КоличествоОбработанных)
	
	Справочники.Ошибки.Перенаправить(МассивСсылок, КомуНаправлена, 
								Комментарий, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьСервер(Ошибка, КомуНаправлена, Комментарий)
				
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ошибка);
	
	Справочники.Ошибки.Вернуть(МассивСсылок, КомуНаправлена, Комментарий);
				
КонецПроцедуры

&НаСервере
Процедура ОзнакомитьсяСервер(МассивСсылок, КоличествоОбработанных)
	
	Справочники.Ошибки.Ознакомиться(МассивСсылок, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура ПризнатьИсправитьПроверитьЗакрытьСервер(СписокСсылок, СписокПроектов, СписокВерсий, ДанныеИДействиядляОбработки, КоличествоОбработанных)
	
	Справочники.Ошибки.ПризнатьИсправитьПроверитьЗакрыть(СписокСсылок, СписокПроектов, СписокВерсий, ДанныеИДействиядляОбработки, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура НеПризнаватьОтозватьЗакрытьСервер(СписокСсылок, СписокПроектов, ДанныеИДействиядляОбработки, КоличествоОбработанных)
	
	Справочники.Ошибки.НеПризнаватьОтозватьЗакрыть(СписокСсылок, СписокПроектов, ДанныеИДействиядляОбработки, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура НазначитьВерсиюИсправленияСервер(МассивСсылок, ВерсияИсправления, КоличествоОбработанных)
	
	Справочники.Ошибки.НазначитьВерсиюИсправления(МассивСсылок, ВерсияИсправления, КоличествоОбработанных);
	
КонецПроцедуры

#КонецОбласти
