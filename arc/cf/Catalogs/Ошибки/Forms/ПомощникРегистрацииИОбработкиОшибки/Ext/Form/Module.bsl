&НаКлиенте
Перем ДанныеФормыРазблокированы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Параметры.ДействиеСОшибкой = "Регистрация";
		
		ТекущийЭлемент = Элементы.Наименование;
		
        ПриЧтенииСозданииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
		ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("ПовторяющаяОшибка") Тогда
			Если ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ПовторяющаяОшибка) Тогда
				СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначенияЗаполнения.ПовторяющаяОшибка);
			КонецЕсли;
		КонецЕсли;
		
		АвтоЗаголовок = Ложь;
		
	КонецЕсли;
	
	УстановитьРеквизитыИОтображениеПоДействию(Параметры.ДействиеСОшибкой);
	
	Если ЗначениеЗаполнено(Объект.Владелец) И Элементы.Найти("Владелец") <> Неопределено Тогда
		Элементы.Владелец.ПропускатьПриВводе = Истина;
	Иначе
		Элементы.Владелец.ПропускатьПриВводе = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РазделПроекта) И Элементы.Найти("РазделПроекта") <> Неопределено И Объект.Признана Тогда
		Элементы.РазделПроекта.ПропускатьПриВводе = Истина;
	Иначе
		Элементы.РазделПроекта.ПропускатьПриВводе = Ложь;
	КонецЕсли;
	
	Если Объект.МетодВыявленияОшибки = ПредопределенноеЗначение("Перечисление.МетодыВыявленияОшибок.АудитКода") Тогда
		ТекущийЭлемент = Элементы.ПорядокВоспроизведения;
		Элементы.ПорядокВоспроизведения.АктивизироватьПоУмолчанию = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияСППР.НастроитьФормуПоПараметрам(ЭтаФорма, ОбщегоНазначенияСППР.ПараметрыНастройкиФормы(ЭтаФорма));
	
	УстановитьДоступностьФорматированныхПолей();
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКоманднаяПанельФормы);
	// Конец ИнтеграцияС1СДокументооборотом
	
	УчетВремени.НастроитьФормуДляУчетаЗатратВремени(ЭтаФорма);
	
	ПроверитьИспользованиеПатчей();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТестирование") Тогда
		ЭлементСписка = Элементы.МетодВыявленияОшибки.СписокВыбора.НайтиПоЗначению(Перечисления.МетодыВыявленияОшибок.Автотесты);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.МетодВыявленияОшибки.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;	 
	КонецЕсли;	 
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ПовторяющаяОшибка") Тогда
		ПовторяющаяОшибка = Параметры.ЗначенияЗаполнения.ПовторяющаяОшибка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриЧтенииСозданииНаСервере();
	
	ЗаписаннаяОшибкаНеПризнана = ТекущийОбъект.НеПризнана;
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(ПорядокВоспроизведения,
	                        РедактируемыйОбъект.ХранилищеПорядкаВоспроизведения);
							
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(ИсходнаяИнформацияОбОшибке,
						 	РедактируемыйОбъект.ХранилищеИсходнойИнформацииОбОшибке);
	
	СтруктураИсходнойИнформации = Новый Структура;
	СтруктураИсходнойИнформации.Вставить("ИсходнаяИнформацияОбОшибке", ИсходнаяИнформацияОбОшибке);
	СтруктураИсходнойИнформации.Вставить("Клиент", Объект.Клиент);
	СтруктураИсходнойИнформации.Вставить("СУБД", Объект.СУБД);
	СтруктураИсходнойИнформации.Вставить("ВерсияПлатформы", Объект.ВерсияПлатформы);
	
	УстановитьЗаголовокГиперссылокИсходнойИнформации(Элементы, СтруктураИсходнойИнформации);
	
	УстановитьДоступностьФорматированныхПолей();
	УстановитьВидимостьЭлементовКтоПривнес();
	
	ДобавитьКаталогИБПрикладываемыхКОшибкам();
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
	// ОбъектыНаКонтроле
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаОбъектыНаКонтроле");
	// Конец ОбъектыНаКонтроле
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПеренаправитьОшибкуПоАудиту" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбработатьОповещениеОПеренаправленииОшибкиПоАудиту(Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "НеПризнаватьОшибкуПоАудиту" И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбработатьОповещениеОНепризнанииОшибкиПоАудиту(Параметр, Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "ПереключенХронометраж" Тогда
		УчетВремениКлиентСервер.ОбработатьПереключениеХронометража(Параметр, ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
	
	Если ИмяСобытия = "Патчи_ЗакрытиеКарточкиПатча" Тогда
		ПроверитьИспользованиеПатчей();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписанаПовторяемаяОшибка" И Источник = ЭтотОбъект Тогда
		ОбработатьОповещениеОЗаписиПовторяемойОшибки(Параметр);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	
	Если ДанныеФормыРазблокированы Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДанныеФормыРазблокированы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(Объект.КомуНаправлена) И ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ДанныеЗамещения = ИнформацияОЗамещенииПользователя();
		ДанныеПоследнегоНаправления = ИнформацияОПоследнемНаправлении();
		
		Если ЗначениеЗаполнено(ДанныеЗамещения.ДатаНачалаЗамещения)
			И ДанныеПоследнегоНаправления.Дата > ДанныеЗамещения.ДатаНачалаЗамещения
			И (ДанныеПоследнегоНаправления.Дата < ДанныеЗамещения.ДатаОкончанияЗамещения
			ИЛИ ДанныеЗамещения.ДатаОкончанияЗамещения = '00010101')
			И ДанныеПоследнегоНаправления.КомуНаправлена = Объект.КомуНаправлена Тогда
				
			ОшибкаНаправленаРанее = Истина;
			
		Иначе
			ОшибкаНаправленаРанее = Ложь;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(ДанныеЗамещения.ЗамещающийПользователь) И НЕ ОшибкаНаправленаРанее Тогда
			
			ТекстВопроса = НСтр("ru='Для пользователя, которому направляется ошибка, настроено замещение.
			|Замещает пользователь %Замещающий%'");
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Замещающий%", ДанныеЗамещения.ЗамещающийПользователь);
			
			Если ЗначениеЗаполнено(ДанныеЗамещения.ДатаНачалаЗамещения) Тогда
				ТекстВопроса = ТекстВопроса + " " + НСтр("ru='с'") + " "
					+ Формат(ДанныеЗамещения.ДатаНачалаЗамещения, "ДЛФ=ddMMyy");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЗамещения.ДатаОкончанияЗамещения) Тогда
				ТекстВопроса = ТекстВопроса + " " + НСтр("ru='по'") + " "
					+ Формат(ДанныеЗамещения.ДатаОкончанияЗамещения, "ДЛФ=ddMMyy");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЗамещения.Комментарий) Тогда
				ТекстВопроса = ТекстВопроса +Символы.ПС + ДанныеЗамещения.Комментарий;
			КонецЕсли;
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("Продолжить", НСтр("ru='Продолжить'"));
			СписокКнопок.Добавить("Направить замещающему", НСтр("ru='Направить замещающему'"));
			СписокКнопок.Добавить("Отмена", НСтр("ru='Отмена'"));
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Замещающий", ДанныеЗамещения.ЗамещающийПользователь);
			СтруктураПараметров.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗамещенииПередЗаписьюЗавершение", ЭтотОбъект, СтруктураПараметров);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок,, "Направить замещающему");
			
		Иначе
			Отказ = Ложь;
			ПередЗаписьюНаКлиенте();
		КонецЕсли;
		
	Иначе
		Отказ = Ложь;
		ПередЗаписьюНаКлиенте();
	КонецЕсли;
	
	Если СтатусПатча = ПредопределенноеЗначение("Перечисление.СтатусыПатчей.Опубликован")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта") Тогда
		
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'При понижении статуса ошибки будет отозван опубликованный патч.
			|Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗамещенииПередЗаписьюВопросОбОтзывеПатча", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗамещенииПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если РезультатВопроса = "Продолжить" Тогда
		ПередЗаписьюНаКлиенте();
	ИначеЕсли РезультатВопроса = "Направить замещающему" Тогда
		Объект.КомуНаправлена = ДополнительныеПараметры.Замещающий;
		ПередЗаписьюНаКлиенте();
	Иначе
        Отказ = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи, Отказ);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(ПорядокВоспроизведения,
	                    ТекущийОбъект.ХранилищеПорядкаВоспроизведения);
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(ИсходнаяИнформацияОбОшибке,
						ТекущийОбъект.ХранилищеИсходнойИнформацииОбОшибке);
						
	ТекущийОбъект.ПорядокВоспроизведения = ПорядокВоспроизведения.ПолучитьТекст();
	ТекущийОбъект.ИсходнаяИнформацияОбОшибке = ИсходнаяИнформацияОбОшибке.ПолучитьТекст();
	
	Если ТекущийОбъект.СрокОтработки <> НовыйСрокОтработки Тогда
		ТекущийОбъект.СрокОтработки = НовыйСрокОтработки;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьВФорме", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИспользоватьПатчи И ТекущийОбъект.СоздатьПатч Тогда
		ПатчиСлужебный.ДобавитьПатч(ТекущийОбъект);
		ПроверитьИспользованиеПатчей();
	КонецЕсли;
	
	Если ИспользоватьПатчи И Не ТекущийОбъект.СоздатьПатч И ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		ПатчиСлужебный.УдалитьПатчи(ТекущийОбъект.Ссылка);
		ПроверитьИспользованиеПатчей();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ДобавитьКаталогИБПрикладываемыхКОшибкам();
	
	АвтоЗаголовок = Истина;
	
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("ЕстьПравоЗакрытияОшибок", ПользовательИмеетПравоЗакрытияОшибок);
	ПараметрыДоступа.Вставить("ЕстьПравоОтзываОшибок", ПользовательИмеетПравоОтзываОшибки);
	ПараметрыДоступа.Вставить("ЕстьПравоПланированияОтработкиОшибок", ДоступноПланированиеОтработки);
	
	УстановитьКомандыДействий(Элементы,
							  Объект.Статус,
							  Объект.КомуНаправлена,
							  ОшибкаПодлежитЗакрытию,
							  Объект.Ссылка,
							  ПараметрыДоступа);
							  
	ИсходноеЗначениеСрочностьИсправления = Объект.СрочностьИсправления;
	ИсходноеЗначениеСтатус = Объект.Статус;
	ИсходноеЗначениеВерсияИсправления = Объект.ВерсияИсправления;
	ИсходноеЗначениеКомуНаправлена = Объект.КомуНаправлена;
	ИсходноеЗначениеЕстьИзмененияВПроектныхРешениях = Объект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями;
	ИсходноеЗначениеИсправляется = Объект.Исправляется;
	ИсходноеЗначениеПрчиныНепризнанияЗаполнено = ЗначениеЗаполнено(Объект.ПричиныНепризнания);
	
	УстановитьПодчиненныеОбъекты();
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
	УстановитьОтображениеИсправленияВВетках();
	Комментарий = "";
	ЗаписаннаяОшибкаНеПризнана = ТекущийОбъект.НеПризнана;
	УстановитьИнформациюОбИсправленииВТехническомПроекте();
	
	УчетВремени.НастроитьКомандуХронометража(ЭтаФорма);
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ЗаписатьДанныеСогласующихРесурсыПредмета(ЭтотОбъект, Объект.Ссылка);
	// Конец ЗадачиПроцессов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключитьОбработчикОжидания("РазблокироватьДанныеФормы", 5 * 60, Истина);
	Оповестить("Запись_Ошибки", Новый Структура("Ссылка,Статус", Объект.Ссылка, Объект.Статус));
	
	Если ЗначениеЗаполнено(ПовторяющаяОшибка) Тогда
		Оповестить("ЗаписанаПовторяемаяОшибка", Объект.Ссылка, ВладелецФормы);
	КонецЕсли;
	
	ОбщегоНазначенияСППРКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗамещенииПередЗаписьюВопросОбОтзывеПатча(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗаписьюНаКлиенте();
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если Объект.Владелец <> Проект Тогда
		
		Объект.РазделыПроекта.Очистить();
		
		ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы, 
			Объект.РазделыПроекта.Количество());
			
		Объект.ИсправлениеВВетках.Очистить();
		УстановитьОтображениеИсправленияВВетках();
		
		ПриИзменениеВладельцаСервер();
		
		Проект = Объект.Владелец;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура РазделПроектаПриИзменении(Элемент)
	
	ПриИзмененииРазделаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МетодВыявленияОшибкиПриИзменении(Элемент)
	
	ПриИзмененииМетодаВыявленияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СрочностьИсправленияПриИзменении(Элемент)
	
	ПриИзмененииСрочностиИсправленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СборкаОбнаруженияПриИзменении(Элемент)
	
	ПриИзмененииСборкиОбнаруженияСервер();
											
КонецПроцедуры

&НаКлиенте
Процедура ВерсияИсправленияПриИзменении(Элемент)
	
	ПриИзмененииВерсииИсправленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторяемаяОшибкаПриИзменении(Элемент)
	
	ПриИзменнииПовторяемойОшибки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторяемаяОшибкаПриНепризнанииПриИзменении(Элемент)
	
	ПриИзменнииПовторяемойОшибки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточниковПриИзменении(Элемент)
											
	ПриИзмененииПризнакаВнешнегоИсточникаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСпособИсправленияПриИзменении(Элемент)
	
	Элементы.СпособИсправления.Доступность = Объект.ЕстьСпособИсправления;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьСпособОбходаПриИзменении(Элемент)
	
	Элементы.СпособОбхода.Доступность = Объект.ЕстьСпособОбхода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОшибкиПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		Ссылка = ДанныеСобытия.Anchor.Href;
	Исключение
		Ссылка = "";
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Если Найти(Ссылка,"#ИсходнаяИнформация#")<>0  Тогда
			
			СтруктураПараметров = Новый Структура;
			
			СтруктураПараметров.Вставить("ИсходнаяИнформацияОбОшибке", ИсходнаяИнформацияОбОшибке);
			СтруктураПараметров.Вставить("Клиент", Объект.Клиент);
			СтруктураПараметров.Вставить("СУБД", Объект.СУБД);
			СтруктураПараметров.Вставить("ВерсияПлатформы", Объект.ВерсияПлатформы);
			СтруктураПараметров.Вставить("КодОбращения", Объект.КодОбращения);
			СтруктураПараметров.Вставить("ДоступноРедактирование", ДоступноИзменениеОшибки);
			
			Если НЕ ДоступноИзменениеОшибки Тогда
				СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
			КонецЕсли;
	
			ОписаниеОповещения = Новый ОписаниеОповещения("ИсходнаяИнформацияОбОшибкеЗавершение", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.Ошибки.Форма.ИсходнаяИнформацияОбОшибке",
	             СтруктураПараметров,
				 ЭтаФорма,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		ИначеЕсли Найти(Ссылка,"#СтатусОшибки#")<>0 Тогда
			СостояниеОшибки();
		ИначеЕсли Найти(Ссылка,"#ОснованиеОшибки#")<>0 Тогда
			ПоказатьЗначение(Неопределено, Объект.Основание);
		ИначеЕсли Найти(Ссылка,"#ПовторяемаяОшибка#")<>0 Тогда
			ОбработатьПереходКПовторяемойОшибке(Объект.ПовторяемаяОшибка);
		ИначеЕсли Найти(Ссылка,"#ИнформационнаяБазаДляВоспроизведения#")<>0 Тогда
			
			Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
				РаботаСФайламиСлужебныйКлиент.ПоказатьПредупреждениеОНеобходимостиРасширенияРаботыСФайлами(Неопределено);
				Возврат;
			КонецЕсли;
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтотОбъект);
			НачатьЗапускПриложения(Оповещение, Объект.ИнформационнаяБазаДляВоспроизведения);
			
		ИначеЕсли Найти(Ссылка,"#ИнформационнаяБазаДляВоспроизведенияПредприятие#")<>0 Тогда

			ОбщегоНазначенияСППРКлиент.ОткрытьИБДляВоспроизведенияОшибки(Объект, "ЗапуститьПредприятие");
			
		ИначеЕсли Найти(Ссылка,"#ИнформационнаяБазаДляВоспроизведенияКонфигуратор#")<>0 Тогда
			
			ОбщегоНазначенияСППРКлиент.ОткрытьИБДляВоспроизведенияОшибки(Объект, "ЗапуститьКонфигуратор");
			
		ИначеЕсли Найти(Ссылка,"#ЗахватитьОбъекты#") <> 0 Тогда
			
			ЗахватитьОбъектыКлиент();
			
		ИначеЕсли Найти(Ссылка,"#СкриншотСценария") <> 0 Тогда
			
			ОткрытьСкриншотСценария(Ссылка);
			
		ИначеЕсли Найти(Ссылка,"#СценарийПользователя#") <> 0 Тогда
			
			ОткрытьСценарийПользователя();
		
		ИначеЕсли Найти(Ссылка,"#СценарийПользователя;") <> 0 Тогда
			
			ОткрытьСценарийПользователя(Ссылка);
	
		ИначеЕсли Найти(Ссылка,"#ЗаблокированоТестов#")<>0 Тогда
			
			ОткрытьБлокирующиеТесты();
			
		ИначеЕсли Найти(Ссылка,"#ОшибкиСОдинаковымХешем#")<>0 Тогда
			
			ОткрытьОшибкиСОдинаковымХешем();
			
		Иначе
			
			Попытка
				ПерейтиПоНавигационнойСсылке(Ссылка);
			Исключение
				Попытка
					HTMLДокумент = Элементы.ОписаниеОшибки.document;
					ВременноеПолеВвода = HTMLДокумент.createElement("INPUT");
					АктивныйЭлемент = HTMLДокумент.activeElement;
					ВременноеПолеВвода.value = ДанныеСобытия.Element.innerText;
					HTMLДокумент.body.appendChild(ВременноеПолеВвода);
					ВременноеПолеВвода.select();
					HTMLДокумент.execCommand("copy");
					HTMLДокумент.body.removeChild(ВременноеПолеВвода);
					АктивныйЭлемент.focus();
					
					ТекстСообщения = НСтр("ru = 'Ссылка скопирована в буфер обмена.'");
					ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.ИнтеграцияВключена);
				Исключение
					ТекстСообщения = НСтр("ru = 'Не удалось скопировать ссылку.'");
					ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.Ошибка32);
				КонецПопытки;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаПриложения(ВыбранныйЭлемент, Параметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
Процедура СрочностьИсправленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаДляВоспроизведенияПриИзменении(Элемент)
	
	УстановитьДоступностьДействийСБазой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженаПриИзменении(Элемент)
	
	ПриИзмененииМестаОбнаруженияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнаруженаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеткаОбнаруженияПриИзменении(Элемент)
	
	ПриИзмененииВеткиОбнаруженияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОбнаруженияПриИзменении(Элемент)
	
	ПриИзмененииДатыОбнаружения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениямиПриИзменении(Элемент)
	
	ОпределитьНеобходимостьЗакрытияОшибки();
	
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("ЕстьПравоЗакрытияОшибок", ПользовательИмеетПравоЗакрытияОшибок);
	ПараметрыДоступа.Вставить("ЕстьПравоОтзываОшибок", ПользовательИмеетПравоОтзываОшибки);
	ПараметрыДоступа.Вставить("ЕстьПравоПланированияОтработкиОшибок", ДоступноПланированиеОтработки);
	
	УстановитьКомандыДействий(Элементы,
							  Объект.Статус,
							  Объект.КомуНаправлена,
							  ОшибкаПодлежитЗакрытию,
							  Объект.Ссылка,
							  ПараметрыДоступа);
							  
	ИзмененоНаправление = Ложь;
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	Если ОшибкаПодлежитЗакрытию И НЕ Объект.Закрыта Тогда
		
		ЗаполнитьЗакрывающего(Объект, 
							  ВариантНаправленияОшибокНаЗакрытие,
							  ЗакрывающийОшибки,
							  ОтветственныйЗаПроект,
							  ОтветственныйЗаРаздел,
							  ТекущийПользователь);
							  
	КонецЕсли;
	
	Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
		ИзмененоНаправление = Истина;
	КонецЕсли;
	
	ПриИзменнииФлагаЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениямиСервер(ИзмененоНаправление);
			
КонецПроцедуры

&НаКлиенте
Процедура СборкаОбнаруженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОтборПоВерсиямВоспроизведенияПроекта", РегистрироватьОшибкиТолькоПоУказаннымВерсиям);
	ПараметрыОткрытия.Вставить("Проект", Объект.Владелец);
	
	Если Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников Тогда
		ПараметрыОткрытия.Вставить("ТолькоПубликуемые", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СборкаОбнаружения) Тогда
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.СборкаОбнаружения);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СборкиВерсии.Форма.ФормаВыбораВерсииИСборки", ПараметрыОткрытия, Элемент);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПатчаНажатие(Элемент)
	
	Результат = ОбработкаОткрытияКарточкиПатча();
	Если ЗначениеЗаполнено(Результат.ТекстСообщения) Тогда
		ПоказатьПредупреждение(, Результат.ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Результат.Патч);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПубликацииПриИзменении(Элемент)
	
	ПроверитьИспользованиеПатчей();
	
КонецПроцедуры

&НаКлиенте
Процедура НеРасследуетсяПривнесениеПриИзменении(Элемент)
	
	Если Объект.НеРасследуетсяПривнесение 
	   И УказыватьВОшибкахКтоПривнес 
	   И ЗначениеЗаполнено(ТекстПредупрежденияНеУказанКтоПривнес)
	   И ВерсияПроектаНаПоддержке(Объект.Владелец, Объект.ВерсияИсправления) Тогда
		
		ТекстВопроса = ТекстПредупрежденияНеУказанКтоПривнес + Символы.ПС
		             + НСтр("ru = 'Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("НеРасследуетсяПривнесениеПродолжение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		 
	Иначе
		НеРасследуетсяПривнесениеПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КтоПривнесПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.КтоПривнес) Тогда
		Объект.НеРасследуетсяПривнесение = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправляетсяПриИзменении(Элемент)
	
	ПриИзмененииВариантаИсправленияСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправляетсяОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныНепризнанияПриИзменении(Элемент)
	
	УстановитьПодсказкуВводаПричинНепризнания();
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническиеПроектыОбнаруженияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокТехническихПроектов", СписокТехническихПроектовОбнаружения);
	
	ОткрытьФорму("Справочник.ТехническиеПроекты.Форма.ТехническиеПроектыСОтбором", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВеткаИсправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВеткаДляИсправления = Неопределено;
	Если Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения")
		И ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
		ВеткаДляИсправления = ВеткаОбнаружения;
	КонецЕсли;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется"));
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Владелец);
	СтруктураОтбора.Вставить("Статус", СписокСтатусов);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("ИсключитьВеткиБезПрямогоПомещения", Истина);
	
	Если Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения") Тогда
		ПараметрыОткрытия.Вставить("ВеткаДляИсправления", ВеткаДляИсправления);
	ИначеЕсли Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта") Тогда
		ПараметрыОткрытия.Вставить("ОтбиратьДляИсправленияВОсновнойВетке", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Ветки.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВеткаИсправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВеткаДляИсправления = Неопределено;
	Если Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения") Тогда
		
		Если ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
			ВеткаДляИсправления = ВеткаОбнаружения;
		КонецЕсли;
		
		ПараметрыПолученияДанных.Вставить("ВеткаДляИсправления", ВеткаДляИсправления);
	КонецЕсли;
	
	Если Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта") Тогда
		ПараметрыПолученияДанных.Вставить("ОтбиратьДляИсправленияВОсновнойВетке", Истина);
	КонецЕсли;
	
	ПараметрыПолученияДанных.Вставить("ИсключитьВеткиБезПрямогоПомещения", Истина);
	
	ДанныеВыбора = ДанныеВыбораВеткиИсправления(ПараметрыПолученияДанных);
	
	СтандартнаяОбработка = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ВеткаИсправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) = 0 И Ожидание <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВеткаДляИсправления = Неопределено;
	Если Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения") Тогда
		
		Если ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
			ВеткаДляИсправления = ВеткаОбнаружения;
		КонецЕсли;
		
		ПараметрыПолученияДанных.Вставить("ВеткаДляИсправления", ВеткаДляИсправления);
	КонецЕсли;
	
	Если Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта") Тогда
		ПараметрыПолученияДанных.Вставить("ОтбиратьДляИсправленияВОсновнойВетке", Истина);
	КонецЕсли;
	
	ПараметрыПолученияДанных.Вставить("ИсключитьВеткиБезПрямогоПомещения", Истина);
	
	ДанныеВыбора = ДанныеВыбораВеткиИсправления(ПараметрыПолученияДанных);
	
	Если ДанныеВыбора.Количество()>10 Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВеткаИсправленияПриИзменении(Элемент)
	
	ПриИзмененииВеткиИсправленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	Объект.ПользовательУказавшийПодразделение = ТекущийПользователь;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОчистка(Элемент, СтандартнаяОбработка)
	Объект.ПользовательУказавшийПодразделение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
КонецПроцедуры

// ЗадачиПроцессов

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиСогласующиеРесурс(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗадачиПроцессовКлиент.ОбработкаНавигационнойСсылкиСогласующиеРесурс(ЭтотОбъект,
	                                                                    Элемент,
	                                                                    НавигационнаяСсылкаФорматированнойСтроки,
	                                                                    СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработатьИзменениеСогласующихРесурсыПоПредмету()
	
	ЗадачиПроцессов.ОбработатьИзменениеСогласующихРесурсыПоПредмету(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СогласующийРесурсПриИзменении()

	ЗадачиПроцессовКлиент.ОтразитьИзменениеЕдинственногоСогласующегоРесурса(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИсправлениеВВетках

&НаКлиенте
Процедура ИсправлениеВВеткахСостояниеИсправленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсправлениеВВетках.ТекущиеДанные;
	
	Если ТекущиеДанные.СостояниеИсправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.Исправлена") Тогда
		ТекущиеДанные.ДатаИсправления = ТекущаяДатаСервера();
	Иначе
		ТекущиеДанные.ДатаИсправления = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриОкончанииРедактированияИсправленияВВетках();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Объект.ВерсияИсправления)
		И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ветка) Тогда
		Если УдаляетсяСтрокаВеткиВерсииИсправления(Элемент.ТекущиеДанные.Ветка) Тогда
			
			ТекстВопроса = НСтр("ru='Удаляется строка ветки версии, указанной в качестве версии исправления ошибки. Ошибку без указания ветки для версии исправления нельзя будет записать. Продолжить удаление?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеУдаленияСтрокиВетки", ЭтотОбъект);
			
			Отказ = Истина;
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Иначе
			ЗавершитьУдалениеСтрокиВетки();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеУдаленияСтрокиВетки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗавершитьУдалениеСтрокиВетки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахПослеУдаления(Элемент)
	
	ПослеУдаленияИсправленияВВетках();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахСостояниеИсправленияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахВеткаИсправленияСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВеткаДляИсправления = Неопределено;
	Если Элементы.ИсправлениеВВетках.ТекущиеДанные <> Неопределено Тогда
		ВеткаДляИсправления = Элементы.ИсправлениеВВетках.ТекущиеДанные.Ветка;
	КонецЕсли;
	
	ЗначениеЗаполнения = Новый Структура("РазрабатываемыйОбъект, Источник", Объект, ВеткаДляИсправления);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, РежимВыбора", ЗначениеЗаполнения, Истина);

	ОткрытьФорму(
		"Справочник.Ветки.ФормаОбъекта",
		ПараметрыФормы, 
		Элемент,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахВеткаИсправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВеткаДляИсправления = Неопределено;
	Если Элементы.ИсправлениеВВетках.ТекущиеДанные <> Неопределено Тогда
		ВеткаДляИсправления = Элементы.ИсправлениеВВетках.ТекущиеДанные.Ветка;
	КонецЕсли;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается"));
	СписокСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется"));
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Владелец);
	СтруктураОтбора.Вставить("Статус", СписокСтатусов);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("ВеткаДляИсправления", ВеткаДляИсправления);
	ПараметрыОткрытия.Вставить("ИсключитьВеткиБезПрямогоПомещения", Истина);
	
	ОткрытьФорму("Справочник.Ветки.ФормаВыбора", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахВеткаИсправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) = 0 И Ожидание <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВеткаДляИсправления = Неопределено;
	ТекущаяСтрока = Элементы.ИсправлениеВВетках.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтрокаТЧ = Объект.ИсправлениеВВетках.НайтиПоИдентификатору(ТекущаяСтрока);
		ВеткаДляИсправления = СтрокаТЧ.Ветка;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Вставить("ВеткаДляИсправления", ВеткаДляИсправления);
	ПараметрыПолученияДанных.Вставить("ИсключитьВеткиБезПрямогоПомещения", Истина);
	
	ДанныеВыбора = ДанныеВыбораВеткиИсправления(ПараметрыПолученияДанных);
	
	Если ДанныеВыбора.Количество()>10 Тогда
		ДанныеВыбора = Новый СписокЗначений;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахВеткаИсправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВеткаДляИсправления = Неопределено;
	ТекущаяСтрока = Элементы.ИсправлениеВВетках.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтрокаТЧ = Объект.ИсправлениеВВетках.НайтиПоИдентификатору(ТекущаяСтрока);
		ВеткаДляИсправления = СтрокаТЧ.Ветка;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Вставить("ВеткаДляИсправления", ВеткаДляИсправления);
	ПараметрыПолученияДанных.Вставить("ИсключитьВеткиБезПрямогоПомещения", Истина);
	
	ДанныеВыбора = ДанныеВыбораВеткиИсправления(ПараметрыПолученияДанных);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправлениеВВеткахВеткаИсправленияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Родитель.ТекущиеДанные.ВеткаИсправления) Тогда
		ИсправлениеВВеткахВеткаИсправленияПриИзмененииСервер(Элемент.Родитель.ТекущиеДанные.ВеткаИсправления);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПротокол

&НаКлиенте
Процедура ПротоколВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТЧ = Объект.Протокол.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтрокаТЧ <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Автор", СтрокаТЧ.Автор);
		ПараметрыФормы.Вставить("Дата", СтрокаТЧ.Дата);
		ПараметрыФормы.Вставить("Статус", СтрокаТЧ.Статус);
		ПараметрыФормы.Вставить("КомуНаправлена", СтрокаТЧ.КомуНаправлена);
		ПараметрыФормы.Вставить("Комментарий", СтрокаТЧ.Комментарий);
		
		Если СтрокаТЧ.НомерСтроки = 1 И СтрокаТЧ.Автор = ТекущийПользователь Тогда
			ПараметрыФормы.Вставить("ДоступноРедактирование", ДоступноИзменениеОшибки);
		КонецЕсли;
		
		Структура = Новый Структура("СтрокаПротокола", СтрокаТЧ);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколВыборЗавершение", ЭтотОбъект, Структура);
		
		ОткрытьФорму("Справочник.Ошибки.Форма.СтрокаПротокола", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВыборЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатДействия) = Тип("Строка") Тогда
		
		СтрокаТЧ = ДополнительныеПараметры.СтрокаПротокола;
		СтрокаТЧ.Комментарий = РезультатДействия;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОбщегоНазначенияСППРКлиент.ЗаписатьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьФайл(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Ошибка еще не записана. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрисоединитьФайлЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьПрисоединениеФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
    Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрисоединитьФайлПослеЗаписи", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
	КонецЕсли;
	
	Отказ = Ложь;
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьФайлПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    ВыполнитьПрисоединениеФайла();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПрисоединениеФайла()
    
    РаботаСФайламиКлиент.ДобавитьФайл(Неопределено ,Объект.Ссылка, ЭтаФорма, 2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзБуфераКакФайл(Команда)
	
	ОчиститьСообщения();
	
	КомпонентаУстановлена = РаботаСКартинкамиКлиент.ПроинициализироватьКомпоненту();
	Если Не КомпонентаУстановлена Тогда
		РаботаСКартинкамиКлиент.УстановитьКомпоненту();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Ошибка еще не записана. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьКартинкуИзБуфераКакФайлЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьДобавлениеКартинкиИзБуфераКакФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзБуфераКакФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    Иначе
        ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьКартинкуИзБуфераПослеЗаписи", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
    КонецЕсли;
    
    Отказ = Ложь;
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКартинкуИзБуфераПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	ВыполнитьДобавлениеКартинкиИзБуфераКакФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДобавлениеКартинкиИзБуфераКакФайл()
    
    Перем ПараметрыДобавления, ПутьКФайлу;
	
	КомпонентаПолученияКартинкиИзБуфера = ПараметрыПриложения["СППР.КомпонентаПолученияКартинкиИзБуфера"];
	Если КомпонентаПолученияКартинкиИзБуфера = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентаПолученияКартинкиИзБуфера = ПараметрыПриложения["СППР.КомпонентаПолученияКартинкиИзБуфера"];
    ПутьКФайлу = КомпонентаПолученияКартинкиИзБуфера.ПолучитьКартинкуИзБуфера();
    
    Если Не ПустаяСтрока(ПутьКФайлу) Тогда
        ПараметрыДобавления = Новый Структура;
        ПараметрыДобавления.Вставить("ОбработчикРезультата", Неопределено);
        ПараметрыДобавления.Вставить("ПолноеИмяФайла", ПутьКФайлу);
        ПараметрыДобавления.Вставить("ВладелецФайла", Объект.Ссылка);
        ПараметрыДобавления.Вставить("ФормаВладелец", ЭтаФорма);
        ПараметрыДобавления.Вставить("НеОткрыватьКарточкуПослеСозданияИзФайла", Истина);
        
        РаботаСФайламиСлужебныйКлиент.ДобавитьИзФайловойСистемыСРасширением(ПараметрыДобавления);
    Иначе
        ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Буфер обмена не содержит картинки'"));
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияДляХранилища(Команда)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИнформацияДляХранилищаПослеЗаписи", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
		
		Отказ = Ложь;
		ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
		
	Иначе
		ИнформацияДляХранилищаПоказатьИнформацию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияДляХранилищаПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	ИнформацияДляХранилищаПоказатьИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияДляХранилищаПоказатьИнформацию()

	ПараметрыФормы = Новый Структура("Ссылка", Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.ИнформацияДляХранилища",
	             ПараметрыФормы,
				 ,
				 Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуИсправления(Команда)
	
	ДатаИсправления = Объект.ДатаИсправления;
	
	Структура = Новый Структура("ДатаИсправления", ДатаИсправления);
	ОписаниеТипов = Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьДатуИсправленияЗавершение", ЭтотОбъект, Структура);
	
	ПоказатьВводЗначения(ОписаниеОповещения, ДатаИсправления,, ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДатуИсправленияЗавершение(Значение, ДополнительныеПараметры) Экспорт
    
    ДатаИсправления = ?(Значение = Неопределено, ДополнительныеПараметры.ДатаИсправления, Значение);
    
    Если (Значение <> Неопределено) Тогда
        
        Если Не ЗначениеЗаполнено(ДатаИсправления) Тогда
            ТекстСообщения = НСтр("ru='Дата исправления не указана'");
            Сообщить(ТекстСообщения);
            Возврат;
        КонецЕсли;
        
        Если ДатаИсправления <> Объект.ДатаИсправления Тогда
            
            СтруктураРеквизитов = Новый Структура;
            СтруктураРеквизитов.Вставить("ДатаСоздания", 	 Объект.ДатаСоздания);
            СтруктураРеквизитов.Вставить("ДатаРегистрации",  Объект.ДатаРегистрации);
            СтруктураРеквизитов.Вставить("ДатаРассмотрения", Объект.ДатаРассмотрения);
			СтруктураРеквизитов.Вставить("ДатаПроверки",     Объект.ДатаПроверки);
			СтруктураРеквизитов.Вставить("ДатаЗакрытия",     Объект.ДатаЗакрытия);
            
            ЭтоНовыйОбъект = Не ЗначениеЗаполнено(Объект.Ссылка);
			
			СтрокаРеквизитов = "";
			ИменаРеквизитов = Новый Массив;
			
			ЕстьОшибкиДатОтработки = ЕстьОшибкиУказанияДатОбработки(
												  СтруктураРеквизитов,
												  ДатаИсправления,
												  ИменаРеквизитов,
												  СтрокаРеквизитов);
												  
												  
			ВыполненаОбработкаИзмененияДатыИсправления = Ложь;
			
			Если ЕстьОшибкиДатОтработки Тогда

				Если НЕ ЭтоНовыйОбъект Тогда
					ТекстСообщения = НСтр("ru='При установке даты исправления %ДатаИсправления%
					|даты других этапов работы с ошибкой окажутся некорректными:'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаИсправления%", ДатаИсправления);
					
					ТекстСообщения = ТекстСообщения + Символы.ПС + Символы.ПС + СтрокаРеквизитов + Символы.ПС + Символы.ПС;
					ТекстСообщения = ТекстСообщения + НСтр("ru='Установить указанную дату для этих этапов?'");
					
					Структура = Новый Структура;
					Структура.Вставить("ИменаРеквизитов", ИменаРеквизитов);
					Структура.Вставить("СтруктураРеквизитов", СтруктураРеквизитов);
					Структура.Вставить("ДатаИсправления", ДатаИсправления);
					
					ОписаниеОповещения = Новый ОписаниеОповещения("ОтработатьИзменениеДатыИсправленияЗавершение", ЭтотОбъект, Структура);
					
					ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
					ВыполненаОбработкаИзмененияДатыИсправления = Истина;
					
				КонецЕсли;
			    
			КонецЕсли;
			
			Если НЕ ВыполненаОбработкаИзмененияДатыИсправления Тогда
				ВыполнитьИзменениеДатыИсправления(СтруктураРеквизитов, ИменаРеквизитов, ДатаИсправления);
			КонецЕсли;
            
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтработатьИзменениеДатыИсправленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СтруктураРеквизитов = ДополнительныеПараметры.СтруктураРеквизитов;
		ИменаРеквизитов = ДополнительныеПараметры.ИменаРеквизитов;
		ДатаИсправления = ДополнительныеПараметры.ДатаИсправления;
		
		ВыполнитьИзменениеДатыИсправления(СтруктураРеквизитов, ИменаРеквизитов, ДатаИсправления);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеДатыИсправления(СтруктураРеквизитов, ИменаИзменяемыхРеквизитов, ДатаИсправления)
	
	Для Каждого ИмяРеквизита из ИменаИзменяемыхРеквизитов Цикл
		СтруктураРеквизитов[ИмяРеквизита] = ДатаИсправления;
	КонецЦикла;
	
	Объект.ДатаИсправления = ДатаИсправления;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов);
	
	Если ЗначениеЗаполнено(Объект.ДатаИсправления) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Исправил) Тогда
			Объект.Исправил = ТекущийПользователь;
		КонецЕсли;
	Иначе
		Объект.Исправил = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
	ПриИзмененииДатыИсправленияСервер();
			
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРазделы(Команда)
	
	ПараметрыФормы = Новый Структура;
	МассивРазделов = Новый Массив;
	
	Для Каждого СтрокаТЧ из Объект.РазделыПроекта Цикл
		МассивРазделов.Добавить(СтрокаТЧ.Раздел);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Проект", Объект.Владелец);
	ПараметрыФормы.Вставить("МассивРазделов", МассивРазделов);
	ПараметрыФормы.Вставить("ИзмененияДоступны", ДоступноИзменениеОшибки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнительныеРазделыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.РазделыПроекта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРазделыЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    Результат = Результат1;
    
    Если ТипЗнч(Результат) = Тип("Массив") Тогда
        
        Объект.РазделыПроекта.Очистить();
        
        КоличествоРазделов = 0;
        Для Каждого Раздел из Результат Цикл
            НоваяСтрока = Объект.РазделыПроекта.Добавить();
            НоваяСтрока.Раздел = Раздел;
            
            КоличествоРазделов = КоличествоРазделов + 1;
        КонецЦикла;
        
        ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы, КоличествоРазделов);
		
		Модифицированность = Истина;
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсходнаяИнформацияОбОшибке(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсходнаяИнформацияОбОшибке", ИсходнаяИнформацияОбОшибке);
	СтруктураПараметров.Вставить("ДоступноРедактирование", ДоступноИзменениеОшибки);
	СтруктураПараметров.Вставить("Клиент", Объект.Клиент);
	СтруктураПараметров.Вставить("СУБД", Объект.СУБД);
	СтруктураПараметров.Вставить("ВерсияПлатформы", Объект.ВерсияПлатформы);
	СтруктураПараметров.Вставить("КодОбращения", Объект.КодОбращения);
	СтруктураПараметров.Вставить("КлиентТипПлатформы", Объект.КлиентТипПлатформы);
	СтруктураПараметров.Вставить("СерверТипПлатформы", Объект.СерверТипПлатформы);
	
	Если НЕ ДоступноИзменениеОшибки Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсходнаяИнформацияОбОшибкеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Ошибки.Форма.ИсходнаяИнформацияОбОшибке",
	             СтруктураПараметров,
				 ЭтаФорма,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура ИсходнаяИнформацияОбОшибкеЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатДействия) = Тип("Структура") Тогда
		
		ИсходнаяИнформацияОбОшибке = РезультатДействия.ИсходнаяИнформацияОбОшибке;
		Объект.Клиент = РезультатДействия.Клиент;
		Объект.СУБД = РезультатДействия.СУБД; 
		Объект.КлиентТипПлатформы = РезультатДействия.КлиентТипПлатформы;
		Объект.СерверТипПлатформы = РезультатДействия.СерверТипПлатформы;
		Объект.ВерсияПлатформы = РезультатДействия.ВерсияПлатформы;
	    Объект.КодОбращения = РезультатДействия.КодОбращения;
		
		УстановитьЗаголовокГиперссылокИсходнойИнформации(Элементы, РезультатДействия);
	    УстановитьПризнакПолученияИнформацииИзВнешнихИсточников();
		
		Объект.ИсходнаяИнформацияОбОшибке = ИсходнаяИнформацияОбОшибке.ПолучитьТекст();
		
		Модифицированность = Истина;
		
		ОбновитьОписаниеОшибки(ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОшибки()
	
	ДатаУстановкиТекущегоСтатуса = ДатаУстановкиТекущегоСтатуса(Объект, ТекущаяДатаСервера());
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ОшибкаПодлежитЗакрытию", ОшибкаПодлежитЗакрытию);
	СтруктураПараметров.Вставить("ДоступноРедактирование", ДоступноИзменениеОшибки);
	СтруктураПараметров.Вставить("ДоступноЗакрытие", ПользовательИмеетПравоЗакрытияОшибок);
	СтруктураПараметров.Вставить("ДоступноПланированиеОтработки", ДоступноПланированиеОтработки);
	СтруктураПараметров.Вставить("ДоступенОтзыв", ПользовательИмеетПравоОтзываОшибки);
	СтруктураПараметров.Вставить("Зарегистрирована", Объект.Зарегистрирована);
	СтруктураПараметров.Вставить("Признана", Объект.Признана);
	СтруктураПараметров.Вставить("Исправлена", Объект.Исправлена);
	СтруктураПараметров.Вставить("Проверена", Объект.Проверена);
	СтруктураПараметров.Вставить("Закрыта", Объект.Закрыта);
	СтруктураПараметров.Вставить("НеПризнана", Объект.НеПризнана);
	СтруктураПараметров.Вставить("Отозвана", Объект.Отозвана);
	СтруктураПараметров.Вставить("НеПланируетсяИсправлять", Объект.НеПланируетсяИсправлять);
	СтруктураПараметров.Вставить("ОжидаетИсправленияПовторяемой", Объект.ОжидаетИсправленияПовторяемой);
	СтруктураПараметров.Вставить("Статус", Объект.Статус);
	СтруктураПараметров.Вставить("СрокОтработки", Объект.СрокОтработки);
	СтруктураПараметров.Вставить("НовыйСрокОтработки", НовыйСрокОтработки);
	СтруктураПараметров.Вставить("СрочностьИсправления", Объект.СрочностьИсправления);
	СтруктураПараметров.Вставить("Проект", Объект.Владелец);
	СтруктураПараметров.Вставить("ВерсияИсправления", Объект.ВерсияИсправления);
	СтруктураПараметров.Вставить("ИсходноеЗначениеВерсияИсправления", ИсходноеЗначениеВерсияИсправления);
	СтруктураПараметров.Вставить("ДатаУстановкиТекущегоСтатуса", ДатаУстановкиТекущегоСтатуса);
	СтруктураПараметров.Вставить("ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями",
								Объект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
	СтруктураПараметров.Вставить("КомуНаправлена", Объект.КомуНаправлена);
	СтруктураПараметров.Вставить("Исправляется", Объект.Исправляется);
	
	СтруктураПараметров.Вставить("ЕстьИсправлениеВВеткахПомимоОсновной", ЕстьИсправлениеВВеткахПомимоОсновной());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СостояниеОшибкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Ошибки.Форма.СтатусОшибки",
	             СтруктураПараметров,
				 ЭтаФорма,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОшибкиЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатДействия) = Тип("Структура") Тогда
		
		ИзмененоИсправление = Ложь;
		МассивИзмененных = Новый Массив;
		
		СтароеЗначениеИсправлена = Объект.Исправлена;
		
		КомуНаправленаРанее = Объект.КомуНаправлена;
		ИзмененоНаправление = Ложь;
		
		Если ОшибкаПодлежитЗакрытию Тогда
			
			Если НЕ Объект.Отозвана И РезультатДействия.Отозвана
				ИЛИ НЕ Объект.Проверена И РезультатДействия.Проверена Тогда
				
				ЗаполнитьЗакрывающего(Объект, 
							  ВариантНаправленияОшибокНаЗакрытие,
							  ЗакрывающийОшибки,
							  ОтветственныйЗаПроект,
							  ОтветственныйЗаРаздел,
							  ТекущийПользователь);
			КонецЕсли;
						  
		Иначе
			
			Если НЕ Объект.Отозвана И РезультатДействия.Отозвана
				ИЛИ НЕ Объект.Проверена И РезультатДействия.Проверена Тогда
				
				Если Объект.Автор = ТекущийПользователь Тогда
					Объект.КомуНаправлена = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
				Иначе
					Объект.КомуНаправлена = Объект.Автор;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
			ИзмененоНаправление = Истина;
		КонецЕсли;
					
		Если Объект.Зарегистрирована <> РезультатДействия.Зарегистрирована Тогда
			Объект.Зарегистрирована = РезультатДействия.Зарегистрирована;
			МассивИзмененных.Добавить("Зарегистрирована");
		КонецЕсли;
		
		Если Объект.Признана <> РезультатДействия.Признана Тогда
			Объект.Признана = РезультатДействия.Признана;
			МассивИзмененных.Добавить("Признана");
		КонецЕсли;
		
		Если Объект.Исправлена <> РезультатДействия.Исправлена Тогда
			Объект.Исправлена = РезультатДействия.Исправлена;
			ИзмененоИсправление = Истина;
			МассивИзмененных.Добавить("Исправлена");
		КонецЕсли;
		
		Если Объект.Проверена <> РезультатДействия.Проверена Тогда
			Объект.Проверена = РезультатДействия.Проверена;
			МассивИзмененных.Добавить("Проверена");
		КонецЕсли;
		
		Если Объект.Закрыта <> РезультатДействия.Закрыта Тогда
			Объект.Закрыта = РезультатДействия.Закрыта;
			МассивИзмененных.Добавить("Закрыта");
		КонецЕсли;
		
		Если Объект.НеПризнана <> РезультатДействия.НеПризнана Тогда
			Объект.НеПризнана = РезультатДействия.НеПризнана;
			МассивИзмененных.Добавить("НеПризнана");
		КонецЕсли;
		
		Если Объект.Отозвана <> РезультатДействия.Отозвана Тогда
			Объект.Отозвана = РезультатДействия.Отозвана;
			МассивИзмененных.Добавить("Отозвана");
		КонецЕсли;
		
		Если Объект.НеПланируетсяИсправлять <> РезультатДействия.НеПланируетсяИсправлять Тогда
			Объект.НеПланируетсяИсправлять = РезультатДействия.НеПланируетсяИсправлять;
			МассивИзмененных.Добавить("НеПланируетсяИсправлять");
		КонецЕсли;
		
		Если Объект.ОжидаетИсправленияПовторяемой <> РезультатДействия.ОжидаетИсправленияПовторяемой Тогда
			Объект.ОжидаетИсправленияПовторяемой = РезультатДействия.ОжидаетИсправленияПовторяемой;
			МассивИзмененных.Добавить("ОжидаетИсправленияПовторяемой");
		КонецЕсли;
		
		Если Не СтароеЗначениеИсправлена И РезультатДействия.Исправлена Тогда
			ЗаполнитьИзмененныеОбработчики();
		КонецЕсли;
		
		УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
		СостояниеОшибкиЗавершениеСервер(ИзмененоИсправление, ИзмененоНаправление);
		
		Если ИзмененыКлючевыеРеквизитыДляСрокаОтработки() ИЛИ ДоступноПланированиеОтработки Тогда
			Объект.СрокОтработки = РезультатДействия.СрокОтработки;
			НовыйСрокОтработки = РезультатДействия.НовыйСрокОтработки;
		Иначе
			Если НовыйСрокОтработки <> Объект.СрокОтработки Тогда
				НовыйСрокОтработки = Объект.СрокОтработки;
			КонецЕсли;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		ОбновитьОписаниеОшибки(ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибкуВТехническийПроект(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Ошибка еще не записана. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьОшибкуВТехническийПроектЗавершениеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Ошибка изменена. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьОшибкуВТехническийПроектЗавершениеВопроса", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		НачатьДобавлениеОшибкиВТехническийПроект();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибкуВТехническийПроектЗавершениеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    Иначе
        ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьОшибкуВТехническийПроектПослеЗаписи", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
    КонецЕсли;
    
	Отказ = Ложь;
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибкуВТехническийПроектПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	НачатьДобавлениеОшибкиВТехническийПроект();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеОшибкиВТехническийПроект()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьОшибкуВТехническийПроектЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("Проект", Объект.Владелец);
	ИмяФормыВыбора = "Справочник.ТехническиеПроекты.Форма.ВыборТехническогоПроекта";
	
	ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОшибкуВТехническийПроектЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) И ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.ТехническиеПроекты")  Тогда
		ОбработатьДобавлениеОшибкиВТехническийПроект(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехническиеПроектыИсправляющиеОшибку(Команда)
	
	ПараметрыФормы = Новый Структура("Ошибка", Объект.Ссылка);
	ОткрытьФорму("Справочник.ТехническиеПроекты.Форма.ТехническиеПроектыДляИсправленияОшибки",ПараметрыФормы,);
				
КонецПроцедуры

&НаКлиенте
Процедура ТипПроблемыБезДетализации(Команда)
	
	Объект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.БезДетализации");
	ПриИзмененииТипаПроблемыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроблемыОбъектыМетаданных(Команда)
	
	Объект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбъектыМетаданных");
	ПриИзмененииТипаПроблемыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроблемыОбработчикиОбновления(Команда)
	
	Объект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбработчикиОбновления");
	ПриИзмененииТипаПроблемыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроблемныхОбъектов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СписокПроблемныхОбъектовЗавершение", ЭтотОбъект);
	
	МассивДанныхОбОбъектах = Новый Массив;
	
	Для Каждого СтрокаТЧ из Объект.СписокОбъектов Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ПроблемныйОбъект", СтрокаТЧ.ПроблемныйОбъект);
		СтруктураДанных.Вставить("ПодчиненныйОбъект", СтрокаТЧ.ПодчиненныйОбъект);
		СтруктураДанных.Вставить("ПодчиненныйОбъектСтрока", СтрокаТЧ.ПодчиненныйОбъектСтрока);
		СтруктураДанных.Вставить("Уточнение", СтрокаТЧ.Уточнение);
		СтруктураДанных.Вставить("ХешУточнения", СтрокаТЧ.ХешУточнения);
		СтруктураДанных.Вставить("Комментарий", СтрокаТЧ.Комментарий);
		
		МассивДанныхОбОбъектах.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Проект", Объект.Владелец);
	СтруктураПараметров.Вставить("ТипПроблемы", Объект.ТипПроблемы);
	СтруктураПараметров.Вставить("ВерсияИсправления", Объект.ВерсияИсправления);
	СтруктураПараметров.Вставить("ДоступноИзменениеОшибки", ДоступноИзменениеОшибки);
	СтруктураПараметров.Вставить("Ошибка", Объект.Ссылка);
	СтруктураПараметров.Вставить("СписокОбъектов", МассивДанныхОбОбъектах);
	
	ОткрытьФорму("Справочник.Ошибки.Форма.СписокПроблемныхОбъектов",
				СтруктураПараметров,
				ЭтаФорма,
				Объект.Ссылка,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
КонецПроцедуры

&НаКлиенте
Процедура СписокПроблемныхОбъектовЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатДействия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныйСписокОбъектов = РезультатДействия.СписокОбъектов;
	
	Объект.СписокОбъектов.Очистить();
	
	Для Каждого Структура из ПолученныйСписокОбъектов Цикл
		СтрокаТЧ = Объект.СписокОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Структура);
	КонецЦикла;
	ОбъектМетаданных = ?(Объект.СписокОбъектов.Количество() <> 0, Объект.СписокОбъектов.Получить(0).ПроблемныйОбъект, Неопределено);
	ПриИзмененииОбъектовМетаданных();
	
	Если РезультатДействия.Свойство("СписокОбъектовДляПереноса") Тогда
		ПеренестиСписокОбъектовВИзмененные(РезультатДействия.СписокОбъектовДляПереноса);
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	Модифицированность = Истина;
	
	ЗахватитьОбъекты = Ложь;
	Если РезультатДействия.Свойство("ЗахватитьОбъекты", ЗахватитьОбъекты) Тогда
		Если ЗахватитьОбъекты Тогда
			ЗахватитьОбъектыКлиент();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ДанныеХронометража = ПереключитьХронометражНаСервере(Объект.Ссылка);
	
	Элементы.ПереключитьХронометраж.Пометка = НЕ Элементы.ПереключитьХронометраж.Пометка;
	
	Оповестить("ПереключенХронометраж", ДанныеХронометража, ЭтотОбъект);
	
	Если ДанныеХронометража.ХронометражЗавершен Тогда
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("Начало", ДанныеХронометража.НачалоЗавершеннойРаботы);
		ДанныеОповещения.Вставить("Окончание", ДанныеХронометража.ОкончаниеЗавершеннойРаботы);
		
		Оповестить("ЗаписаныДанныеКалендаря", ДанныеОповещения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПовторяемуюОшибку(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Ошибка еще не записана. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗарегистрироватьПовторяемуюОшибкуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗарегистрироватьПовторяемуюОшибкуЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьРегистрациюПовторяемойОшибки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПовторяемуюОшибкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
    Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьПовторяемуюОшибкуПослеЗаписи", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
	КонецЕсли;
	
	Отказ = Ложь;
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПовторяемуюОшибкуПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьРегистрациюПовторяемойОшибки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокВоспроизведенияОчиститьФормат(Команда)
	
	ОчищенныйТекст = ПорядокВоспроизведения.ПолучитьТекст();
	ПорядокВоспроизведения.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ОчищенныйТекст));
	
КонецПроцедуры

#Область КомандыДействийСОшибкой

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Зарегистрирована = Истина;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("Зарегистрирована");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаРегистрация Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРегистрация;
	КонецЕсли;
		
	ОбработатьКомандуДействияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура Признать(Команда)
	
	ОчиститьСообщения();
		
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Признана = Истина;
	Объект.Зарегистрирована = Истина;
	Объект.НеПризнана = Ложь;
	Объект.Отозвана = Ложь;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("Признана");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаПризнание Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПризнание;
	КонецЕсли;
	
	ОбработатьКомандуДействияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НеПризнавать(Команда)
	
	Объект.НеПризнана = Истина;
	Объект.Признана = Ложь;
	Объект.Исправлена = Ложь;
	Объект.Проверена = Ложь;
	
	ИзмененоНаправление = Ложь;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("НеПризнана");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаНепризнание Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаНепризнание;
	КонецЕсли;
	
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	Если Объект.Зарегистрирована Тогда
		Объект.КомуНаправлена = Объект.Зарегистрировал;
	Иначе
		Объект.КомуНаправлена = Объект.Автор;
	КонецЕсли;
	
	Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
		ИзмененоНаправление = Истина;
	КонецЕсли;
	
	НеПризнаватьСервер(ИзмененоНаправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИсправление(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Исправлена = Истина;
	Объект.НеПланируетсяИсправлять = Ложь;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("Исправлена");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаИсправление Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсправление;
	КонецЕсли;
	
	ИзмененоНаправление = Ложь;
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	ЗаполнитьПроверяющего(Объект,
						  ВариантНаправленияОшибокНаПроверку,
						  ПроверяющийОшибки,
						  ОтветственныйЗаРаздел,
						  ТекущийПользователь);
	
	Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
		ИзмененоНаправление = Истина;
	КонецЕсли;
	
	ОтметитьИсправлениеСервер(ИзмененоНаправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИсправление(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Проверена = Истина;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("Проверена");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	ИзмененоНаправление = Ложь;
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	Если ОшибкаПодлежитЗакрытию Тогда
		
		ЗаполнитьЗакрывающего(Объект, 
							  ВариантНаправленияОшибокНаЗакрытие,
							  ЗакрывающийОшибки,
							  ОтветственныйЗаПроект,
							  ОтветственныйЗаРаздел,
							  ТекущийПользователь);
						  
	Иначе
							  
		Если Объект.Автор = ТекущийПользователь Тогда
			Объект.КомуНаправлена = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Иначе
			Объект.КомуНаправлена = Объект.Автор;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
		ИзмененоНаправление = Истина;
	КонецЕсли;
	
    ПодтвердитьИсправлениеСервер(ИзмененоНаправление);
		
КонецПроцедуры

&НаКлиенте
Процедура Отозвать(Команда)
	
	ОчиститьСообщения();
	
	Объект.Отозвана = Истина;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("Отозвана");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	ИзмененоНаправление = Ложь;
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	Если ОшибкаПодлежитЗакрытию Тогда
		
		ЗаполнитьЗакрывающего(Объект, 
							  ВариантНаправленияОшибокНаЗакрытие,
							  ЗакрывающийОшибки,
							  ОтветственныйЗаПроект,
							  ОтветственныйЗаРаздел,
							  ТекущийПользователь);
						  
	Иначе
							  
		Если Объект.Автор = ТекущийПользователь Тогда
			Объект.КомуНаправлена = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Иначе
			Объект.КомуНаправлена = Объект.Автор;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
		ИзмененоНаправление = Истина;
	КонецЕсли;
	
	ОтозватьСервер(ИзмененоНаправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОшибку(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Закрыта = Истина;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("Закрыта");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	ИзмененоНаправление = Ложь;
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	Если Объект.Автор = ТекущийПользователь Тогда
		Объект.КомуНаправлена = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	Иначе
		Объект.КомуНаправлена = Объект.Автор;
	КонецЕсли;
	
	Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
		ИзмененоНаправление = Истина;
	КонецЕсли;
	
	ЗакрытьОшибкуСервер(ИзмененоНаправление);
	
КонецПроцедуры

&НаКлиенте
Процедура Вернуть(Команда)
	
	ОчиститьСообщения();
	
	СтатусныеРеквизиты = Новый Структура;
	
	СтатусныеРеквизиты.Вставить("Статус", Объект.Статус);
	СтатусныеРеквизиты.Вставить("Автор", Объект.Автор);
	СтатусныеРеквизиты.Вставить("Зарегистрировал", Объект.Зарегистрировал);
	СтатусныеРеквизиты.Вставить("Рассмотрел", Объект.Рассмотрел);
	СтатусныеРеквизиты.Вставить("Исправил", Объект.Исправил);
	СтатусныеРеквизиты.Вставить("Проверил", Объект.Проверил);
	
	МассивИзмененных = Новый Массив;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована") Тогда
		
		Объект.Зарегистрирована = Ложь;
		МассивИзмененных.Добавить("Зарегистрирована");
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаРегистрация Тогда
			 Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРегистрация;
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана") Тогда
		
		Объект.Признана = Ложь;
		МассивИзмененных.Добавить("Признана");
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаПризнание Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПризнание;
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана") Тогда
		
		Объект.НеПризнана = Ложь;
		МассивИзмененных.Добавить("НеПризнана");
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаПризнание Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПризнание;
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена") Тогда
		
		Если Объект.Исправляется = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках")
			И ЗначениеЗаполнено(Объект.ВерсияИсправления) Тогда
			
			Если ЕстьИсправлениеВВеткахПомимоОсновной() Тогда
				// Запрещается отмена исправления - требуется обработать исправление в ветках.
				ТекстСообщения = НСтр("ru='Для отмены исправления ошибки укажите корректное состояние исправления в ветках на закладке ""Ветки""'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.Исправлена = Ложь;
		МассивИзмененных.Добавить("Исправлена");
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаИсправление Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсправление;
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена") Тогда
		
		Объект.Проверена = Ложь;
		МассивИзмененных.Добавить("Проверена");
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СводнаяИнформация Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СводнаяИнформация;
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки") Тогда
		
		Объект.ОжидаетИсправленияПовторяемой = Ложь;
		МассивИзмененных.Добавить("ОжидаетИсправленияПовторяемой");
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.СтраницаИсправление Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсправление;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	ВернутьСервер(СтатусныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	Если Объект.Протокол.Количество()>0 Тогда
		СтрокаПротокола = Объект.Протокол[0];
		Объект.КомуНаправлена = СтрокаПротокола.Автор;
	Иначе
		Объект.КомуНаправлена = Объект.Автор;
	КонецЕсли;
	
	ОтветитьСервер();
		
	ТекущийЭлемент = Элементы.Комментарий;
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьсяИЗакрыть(Команда)
	
	Объект.КомуНаправлена = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ОбщегоНазначенияСППРКлиент.ЗаписатьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонфигуратор(Команда)
	
	ОбщегоНазначенияСППРКлиент.ОткрытьИБДляВоспроизведенияОшибки(Объект, "ЗапуститьКонфигуратор");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредприятие(Команда)
	
	ОбщегоНазначенияСППРКлиент.ОткрытьИБДляВоспроизведенияОшибки(Объект, "ЗапуститьПредприятие");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЛокальнуюКопиюИБ(Команда)
	
	ОбщегоНазначенияСППРКлиент.СоздатьЛокальнуюКопиюБазыОшибки(Объект, "СоздатьЛокальнуюКопиюИБ");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьИБВУказанныйКаталог(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Ошибка еще не записана. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("КомандаКопироватьИБВУказанныйКаталогЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		КопироватьИБВУказанныйКаталог();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОшибкуПоАудиту(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстСообщения = Нстр("ru = 'Данные еще не записаны.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если Объект.СписокОбъектов.Количество() = 0 Тогда
		ТекстСообщения = Нстр("ru = 'Необходимо заполнить таблицу ""Объекты метаданных""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПеренаправлениеОшибкиПоАудиту("СписокОбъектов", Элементы["СписокОбъектов"].ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОшибкуПоАудитуПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = Новый ОписаниеОповещения("ЗарегистрироватьПеренаправляемуюОшибку", ЭтотОбъект,
			ДополнительныеПараметры);
			
	ВладелецДляФормы = ЭтотОбъект;
			
	Если ДополнительныеПараметры.Свойство("ФормаИсточник") Тогда
		Если ДополнительныеПараметры.ФормаИсточник <> Неопределено Тогда
			ВладелецДляФормы = ДополнительныеПараметры.ФормаИсточник;
		КонецЕсли;
	КонецЕсли;
			
		ОткрытьФорму("Справочник.Ошибки.Форма.ПеренаправлениеОшибки",
					,
					ВладелецДляФормы,
					,
					,
					,
					ПараметрыОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры

&НаКлиенте
Процедура НеПризнаватьОшибкуПоАудитуПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	ПараметрыОповещения = Новый ОписаниеОповещения("ЗарегистрироватьНеПризнаваемуюОшибку", ЭтотОбъект,
			ДополнительныеПараметры);
			
	ВладелецДляФормы = ЭтотОбъект;
			
	Если ДополнительныеПараметры.Свойство("ФормаИсточник") Тогда
		Если ДополнительныеПараметры.ФормаИсточник <> Неопределено Тогда
			ВладелецДляФормы = ДополнительныеПараметры.ФормаИсточник;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КомуНаправить",        Объект.Автор);
	ПараметрыОткрытияФормы.Вставить("Заголовок",            НСтр("ru = 'Непризнание ошибки'"));
	ПараметрыОткрытияФормы.Вставить("ЗамещатьПользователя", Истина);
	
	ОткрытьФорму("Справочник.Ошибки.Форма.ПеренаправлениеОшибки",
				ПараметрыОткрытияФормы,
				ВладелецДляФормы,
				,
				,
				,
				ПараметрыОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВОтдельнуюОшибку(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена")) ТОгда
		
		ТекстСообщения = НСтр("ru='Выделение в отдельную ошибку возможно только для зарегистрированных, признанных, или исправленных ошибок.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеСтроки = Новый Массив;
	
	Для Каждого ИдентификаторСтроки из Элементы.ИсправлениеВВетках.ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Объект.ИсправлениеВВетках.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТЧ <> Неопределено Тогда
			Если СтрокаТЧ.СостояниеИсправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ТребуетсяИсправление")
				И ЗначениеЗаполнено(СтрокаТЧ.Ветка) Тогда
				ОбрабатываемыеСтроки.Добавить(ИдентификаторСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбрабатываемыеСтроки.Количество()>0 Тогда
		
		Если Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru='Перед выполнением измененная ошибка будет записана. Продолжить?'");
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбрабатываемыеСтроки", ОбрабатываемыеСтроки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыделитьВеткиВОтдельнуюОшибкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			ОбработатьВыделениеВетокДляИсправленияВОтдельнуюОшибку(ОбрабатываемыеСтроки);
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='Не указаны строки, требующие исправления, выделение которых возможно в отдельную ошибку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеПланируетсяИсправлять(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НеПланируетсяИсправлять = Истина;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("НеПланируетсяИсправлять");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	НеПланируетсяИсправлятьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьИсправленияПовторяемойОшибки(Команда)
	
	ОчиститьСообщения();
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ОжидаетИсправленияПовторяемой = Истина;
	
	МассивИзмененных = Новый Массив;
	МассивИзмененных.Добавить("ОжидаетИсправленияПовторяемой");
	УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
	
	Объект.КомуНаправлена = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	
	ОжидатьИсправленияПовторяемойОшибкиСервер();
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыОбъекта(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

&НаКлиенте
Процедура КопироватьСсылку(Команда)
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось скопировать ссылку. В веб-клиенте данная возможность не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	ПолеHTMLДокумента = Элементы.ОписаниеОшибки;
	Если ПолеHTMLДокумента.Вид <> ВидПоляФормы.ПолеHTMLДокумента Тогда
		Текст = НСтр("ru = 'Не удалось скопировать ссылку.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	ДокументHTML = ПолеHTMLДокумента.Документ;
	
	АктивныйЭлемент = ДокументHTML.activeElement;
	Если НРег(АктивныйЭлемент.nodeName) <> "a" Тогда
		Текст = НСтр("ru = 'Не удалось скопировать ссылку: не выбрана ссылка.'");
		ПоказатьПредупреждение(, Текст);
		Возврат;
	КонецЕсли;
	
	Ссылка = АктивныйЭлемент.href;
	НачалоСсылки = СтрНайти(Ссылка,"e1cib");
	Если Сред(Ссылка,НачалоСсылки-1,1) = "/" Тогда
		Ссылка = Прав(Ссылка,СтрДлина(Ссылка)-НачалоСсылки+1)
	КонецЕсли;
	
	Попытка
		БуфераОбмена = ДокументHTML.ParentWindow.ClipboardData;
		БуфераОбмена.SetData("Text", Ссылка);
	Исключение
		// в OSX и Linux этот метод не работает, ничего делать не надо
		ТекстСообщения = НСтр("ru = 'Не удалось скопировать ссылку.'");
		ПоказатьОповещениеПользователя(,,ТекстСообщения,БиблиотекаКартинок.Ошибка32);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗахватитьОбъекты(Команда)
	
	ЗахватитьОбъектыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗахватитьОбъектыКлиент(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось захватить объекты в хранилище. В веб-клиенте данная возможность не поддерживается.'"));
		Возврат;
	#КонецЕсли
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗахватитьОбъектыКлиент", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
		
		Записать(СтруктураПараметровЗаписи);
		
		Отказ = Ложь;
		ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
		
	Иначе
		
		ПараметрыФормыЗахвата = Новый Структура;
		ПараметрыФормыЗахвата.Вставить("Ошибка", Объект.Ссылка);
		ПараметрыФормыЗахвата.Вставить("РежимЗапуска", "ЗахватОбъектов");
		
		ОткрытьФорму("Обработка.РаботаСХранилищем.Форма",
			ПараметрыФормыЗахвата,
			ЭтотОбъект,
			,
			,
			,
			,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЯПривнес(Команда)
	
	Объект.КтоПривнес = ТекущийПользователь;
	Объект.НеРасследуетсяПривнесение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НеРасследуетсяПривнесениеПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если Объект.НеРасследуетсяПривнесение И ЗначениеЗаполнено(Объект.КтоПривнес) Тогда
			Объект.КтоПривнес = Неопределено;
		КонецЕсли; 
		
	Иначе
		Объект.НеРасследуетсяПривнесение = НЕ Объект.НеРасследуетсяПривнесение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИсправлениеВВетках(Команда)
	
	Дата = ТекущаяДатаСервера();
	
	Для Каждого Идентификатор из Элементы.ИсправлениеВВетках.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.ИсправлениеВВетках.НайтиПоИдентификатору(Идентификатор);
		СтрокаТЧ.СостояниеИСправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.Исправлена");
		СтрокаТЧ.ДатаИсправления = Дата;
	КонецЦикла;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИсправлениеВВеткахНеПланируется(Команда)
	
	Для Каждого Идентификатор из Элементы.ИсправлениеВВетках.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.ИсправлениеВВетках.НайтиПоИдентификатору(Идентификатор);
		СтрокаТЧ.СостояниеИсправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ИсправлениеНеПланируется");
		СтрокаТЧ.ДатаИсправления = '00010101';
		СтрокаТЧ.ВеткаИсправления = ПредопределенноеЗначение("Справочник.Ветки.ПустаяСсылка");
	КонецЦикла;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИсправлениеВВеткахОшибкиНеБыло(Команда)
	
	Для Каждого Идентификатор из Элементы.ИсправлениеВВетках.ВыделенныеСтроки Цикл
		СтрокаТЧ = Объект.ИсправлениеВВетках.НайтиПоИдентификатору(Идентификатор);
		СтрокаТЧ.СостояниеИСправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ОшибкиНеБылоВЭтойВетке");
		СтрокаТЧ.ДатаИсправления = '00010101';
	КонецЦикла;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВеткиДляИсправления(Команда)
	
	ТекстСообщения = "";
	
	Для Каждого Строка из Объект.ИсправлениеВВетках Цикл
		Если (Строка.СостояниеИСправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ТребуетсяИсправление")
			ИЛИ Строка.СостояниеИСправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.Исправлена"))
			И НЕ ЗначениеЗаполнено(Строка.ВеткаИсправления) Тогда
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Проект", Объект.Владелец);
			ДопПараметры.Вставить("ВеткаОбнаружения", Строка.Ветка);
			ДопПараметры.Вставить("Ошибка", Объект.Ссылка);
			ДопПараметры.Вставить("Срочность", Объект.СрочностьИсправления);
			
			ТекВетка = ТекущаяВеткаДляИсправленияОшибок(ДопПараметры);
			
			Если ТекВетка = Неопределено Тогда
				Если СоздатьВеткуНаСервере(ДопПараметры) Тогда
					Строка.ВеткаИсправления = ДопПараметры.СозданнаяВетка;
					ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru='Ветка <%1> создана на сервере Gitlab.'"),
					ДопПараметры.СозданнаяВеткаИмя) + Символы.ПС; 
				КонецЕсли;	
			Иначе
				Строка.ВеткаИсправления = ТекВетка;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ПоказатьОповещениеПользователя(ТекстСообщения,,, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВетки(Команда)
	
	ЗаполнитьВеткиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВеткуАвтоматически(Команда)
	
	Если ЗначениеЗаполнено(Объект.ВеткаИсправления) Тогда
		ТекстВопроса = НСтр("ru='Ветка исправления уже указана. Перезаполнить?'");
		ПараметрыОповещения = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикВопросЗаполнитьВеткуИсправления", 
			ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПодобратьВеткуАвтоматическиСлужебный();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьОтветственнымМоеПодразделение(Команда)
	Объект.ПользовательУказавшийПодразделение = ТекущийПользователь;
	Объект.Подразделение = ПодразделениеПользователя(ТекущийПользователь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Проект = Объект.Владелец;
	
	НовыйСрокОтработки = Объект.СрокОтработки;
	
	ИсходноеЗначениеСрочностьИсправления = Объект.СрочностьИсправления;
	ИсходноеЗначениеСтатус = Объект.Статус;
	ИсходноеЗначениеВерсияИсправления = Объект.ВерсияИсправления;
	ИсходноеЗначениеКомуНаправлена = Объект.КомуНаправлена;
	ИсходноеЗначениеЕстьИзмененияВПроектныхРешениях = Объект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями;
	ИсходноеЗначениеИсправляется = Объект.Исправляется;
	ИсходноеЗначениеПрчиныНепризнанияЗаполнено = ЗначениеЗаполнено(Объект.ПричиныНепризнания);
	ТекущееЗначениеПовторяемаяОшибка = Объект.ПовторяемаяОшибка;
	
	ДоступноИзменениеОшибки =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеОшибок", Объект.Владелец);
			
	ДоступноПланированиеОтработки = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ПланированиеОтработкиОшибок", Объект.Владелец);
		
	ДоступноИзменениеСтатусаПубликации = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеСтатусаПубликацииОшибок", Объект.Владелец);
		
	ДоступноИзменениеТехническихПроектов =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеТехническихПроектов", Объект.Владелец);
		
	ДоступноИзменениеМестаОбнаруженияОшибки =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеМестаОбнаруженияОшибок", Объект.Владелец);
		
	ДоступноИзменениеПодразделения =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеПодразделенияВОшибках", Объект.Владелец);
		
	Если ЗначениеЗаполнено(Объект.ПользовательУказавшийПодразделение) Тогда
		ТекстУстановил = СтрШаблон(НСтр("ru = 'Установил подразделение ""%1""'"), Объект.ПользовательУказавшийПодразделение);
		Элементы.Подразделение.РасширеннаяПодсказка.Заголовок = ТекстУстановил;
	КонецЕсли;
	
	ДоступноИзменениеХронометража = УправлениеДоступом.ЕстьРоль("ИзменениеДанныхХронометража");
	
	ПользовательИмеетПравоЗакрытияОшибок = Справочники.Ошибки.ПользовательИмеетПравоЗакрытияОшибок(Объект.Владелец);
	ПользовательИмеетПравоОтзываОшибки = ПользовательИмеетПравоОтзываОшибки();
	
	УказанаСсылкаПовторяемойОшибки =
		ТипЗнч(Объект.ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки") И ЗначениеЗаполнено(Объект.ПовторяемаяОшибка);
	
	ПрочитатьНастройкиПроекта();
	ОпределитьНеобходимостьЗакрытияОшибки();
	ЗаполнитьОтветственногоЗаРаздел();
	ЗаполнитьВеткуИТипВеткиОбнаружения();
	ЗаполнитьСписокТехническихПроектовОбнаружения();
	ЗаполнитьДатуОбнаружения();
	
	ПризнакиПолученияИнформацииОбОшибкеИзВнешнихИсточников = 
		Константы.ПризнакиПолученияИнформацииОбОшибкахИзВнешнихИсточников.Получить();
		
	ТекущаяСрочностьИсправления = Объект.СрочностьИсправления;
	
	ВеткаИсправления = Объект.ВеткаИсправления;
	Исправляется = Объект.Исправляется;
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	
	УстановитьДоступностьРазделовПроекта();
	УстановитьВидимостьЭлементовАудитаКода();
	УстановитьПодчиненныеОбъекты();
	УстановитьДоступностьСпособовОбходаИсправления();
	УстановитьДоступностьВерсииИсправления();
	УстановитьДоступностьСтатусаПубликации();
	УстановитьДоступностьОтветственногоЗаРаздел();
	УстановитьДоступностьКомандыРегистрацииПовторяемойОшибки();
	УстановитьВидимостьГдеОшибка(); 
	УстановитьДоступностьМестаОбнаружения();
	УстановитьВидимостьВыделенияВОтдельнуюОшибку();
	УстановитьДоступностьПодразделения();
	
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("ЕстьПравоЗакрытияОшибок", ПользовательИмеетПравоЗакрытияОшибок);
	ПараметрыДоступа.Вставить("ЕстьПравоОтзываОшибок", ПользовательИмеетПравоОтзываОшибки);
	ПараметрыДоступа.Вставить("ЕстьПравоПланированияОтработкиОшибок", ДоступноПланированиеОтработки);
	
	УстановитьКомандыДействий(Элементы,
							  Объект.Статус,
							  Объект.КомуНаправлена,
							  ОшибкаПодлежитЗакрытию,
							  Объект.Ссылка,
							  ПараметрыДоступа);
		
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
		Объект.РазделыПроекта.Количество());
		
	УстановитьОтображениеИсправленияВВетках();
			
	УстановитьСтраницуВерсииОбнаружения(Элементы, Объект.Обнаружена);
	
	УстановитьСписокВыбораКомуНаправлена();
	УстановитьДоступностьДействийСБазой(ЭтаФорма);
	УстановитьВидимостьИнформацииОбИсправлении(Элементы, Объект.Исправлена);
	УстановитьИнформациюОбИсправленииВТехническомПроекте();
	УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	УстановитьВидимостьПризнакаПубликацииСборкиВоспроизведения();
	УстановитьВидимостьВеткиИсправления();
	УстановитьОтображениеИнформацииОбОбнаружении();
	
	Если Элементы.Найти("ИсправлениеВВеткахКонтекстноеМенюВыделитьВОтдельнуюОшибку") <> Неопределено Тогда
		Элементы.ИсправлениеВВеткахКонтекстноеМенюВыделитьВОтдельнуюОшибку.Доступность = ДоступноИзменениеОшибки;
	КонецЕсли;
	
	УстановитьПодсказкуВводаПричинНепризнания();
	
	УчетВремени.НастроитьКомандуХронометража(ЭтаФорма);
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ОтобразитьИнформациюПоСогласующимВФорме(ЭтотОбъект, Объект.Ссылка, "Дополнительно");
	// Конец ЗадачиПроцессов
	
КонецПроцедуры

&НаСервере
Процедура ПриИзменениеВладельцаСервер()
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	// Конец СтандартныеПодсистемы.Свойства
	
	ПрочитатьНастройкиПроекта();
	ОпределитьНеобходимостьЗакрытияОшибки();
	ПользовательИмеетПравоЗакрытияОшибок = Справочники.Ошибки.ПользовательИмеетПравоЗакрытияОшибок(Объект.Владелец);
	ПользовательИмеетПравоОтзываОшибки = ПользовательИмеетПравоОтзываОшибки();
	
	ДоступноИзменениеОшибки =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеОшибок", Объект.Владелец);
		
	ДоступноПланированиеОтработки = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ПланированиеОтработкиОшибок", Объект.Владелец);
		
	ДоступноИзменениеСтатусаПубликации = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеСтатусаПубликацииОшибок", Объект.Владелец);
		
	ДоступноИзменениеТехническихПроектов =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеТехническихПроектов", Объект.Владелец);

	ДоступноИзменениеМестаОбнаруженияОшибки =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеМестаОбнаруженияОшибок", Объект.Владелец);
		
	ДоступноИзменениеПодразделения =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеПодразделенияВОшибках", Объект.Владелец);

	ЗаполнитьВеткуИТипВеткиОбнаружения();
	ЗаполнитьСписокТехническихПроектовОбнаружения();
	ЗаполнитьДатуОбнаружения();
	
	ДанныеОбнаружения = Новый Структура;
	ДанныеОбнаружения.Вставить("Обнаружена", Объект.Обнаружена);
	ДанныеОбнаружения.Вставить("ВеткаОбнаружения", Объект.ВеткаОбнаружения);
	ДанныеОбнаружения.Вставить("СборкаОбнаружения", Объект.СборкаОбнаружения);
	ДанныеОбнаружения.Вставить("ДатаОбнаружения", Объект.ДатаОбнаружения);
			
	Объект.ВерсияИсправления = 
			Справочники.Ошибки.ВерсияИсправления(Объект.Владелец,
												 ДанныеОбнаружения,
												 Объект.СрочностьИсправления,
												 Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
												 Объект.Исправляется);
												 
	ВеткаИсправления = Объект.ВеткаИсправления;
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	
	УстановитьДоступностьРазделовПроекта();
	УстановитьДоступностьВерсииИсправления();
	УстановитьДоступностьСтатусаПубликации();
	УстановитьДоступностьКомандыДобавленияОшибкиВТехническийПроект();
	УстановитьДоступностьОтветственногоЗаРаздел();
	УстановитьДоступностьФорматированныхПолей();
	ПроверитьУказаниеРазделаИОтветственного();
	УстановитьСписокВыбораКомуНаправлена();
	УстановитьОтображениеИнформацииОбОбнаружении();
	ДобавитьКаталогИБПрикладываемыхКОшибкам();
	УстановитьВидимостьГдеОшибка();
	УстановитьДоступностьМестаОбнаружения();
	УстановитьВидимостьВыделенияВОтдельнуюОшибку();
	УстановитьДоступностьПодразделения();
	МетаданныеПриИзмененииПроекта();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСрочностиИсправленияСервер()
	
	УстановитьВерсиюИсправления();
	УстановитьВариантИсправления();
	ПроверитьОчиститьВеткуИсправления();
	ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления();
	
	Если Объект.Статус <> Перечисления.СтатусыОшибок.Признана
		ИЛИ Объект.Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		
		// Для признанных ошибок, исправляемых в основной ветке, срок пересчитывается при установке версии.
		// В противном случае его нужно пересчитать отдельно, если он уже был рассчитан.
		Если ЗначениеЗаполнено(НовыйСрокОтработки)
			И ТекущаяСрочностьИсправления <> Объект.СрочностьИсправления Тогда
			
			УстановитьСрокОтработки();
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСрочностьИсправления = Объект.СрочностьИсправления;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	ПроверитьИспользованиеПатчей();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСборкиОбнаруженияСервер()
	
	ЗаполнитьВеткуИТипВеткиОбнаружения();
	УстановитьВерсиюИсправления();
	УстановитьВариантИсправления();
	ПроверитьОчиститьВеткуИсправления();
	ЗаполнитьДатуОбнаружения();
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	УстановитьОтображениеИсправленияВВетках();
	ПроверитьИспользованиеПатчей();
	УстановитьВидимостьПризнакаПубликацииСборкиВоспроизведения();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПризнакаВнешнегоИсточникаСервер()

	Если КонтролироватьОбязательностьПубликации Тогда
		
		Если Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников
			И Объект.СтатусПубликации <> Перечисления.СтатусыПубликацииОшибок.Публикуется Тогда
			Объект.СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.Публикуется;
		ИначеЕсли НЕ Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников
			И Объект.СтатусПубликации <> Перечисления.СтатусыПубликацииОшибок.НеПубликуется Тогда
			Объект.СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.НеПубликуется;
		КонецЕсли;
		
	КонецЕсли;
							  
	ПроверитьИспользованиеПатчей();
	УстановитьВерсиюИсправления();
	УстановитьВариантИсправления();
	ПроверитьОчиститьВеткуИсправления();
	ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления();
	
	ПользовательИмеетПравоОтзываОшибки = ПользовательИмеетПравоОтзываОшибки();
	
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("ЕстьПравоЗакрытияОшибок", ПользовательИмеетПравоЗакрытияОшибок);
	ПараметрыДоступа.Вставить("ЕстьПравоОтзываОшибок", ПользовательИмеетПравоОтзываОшибки);
	ПараметрыДоступа.Вставить("ЕстьПравоПланированияОтработкиОшибок", ДоступноПланированиеОтработки);
	
	УстановитьКомандыДействий(Элементы,
							  Объект.Статус,
							  Объект.КомуНаправлена,
							  ОшибкаПодлежитЗакрытию,
							  Объект.Ссылка,
							  ПараметрыДоступа);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВерсииИсправленияСервер()
	
	УстановитьВариантИсправления();
	ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления();
	УстановитьОтображениеИсправленияВВетках();
	
	Если Объект.Статус = Перечисления.СтатусыОшибок.Признана
		И Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		УстановитьСрокОтработки();
	КонецЕсли;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	ПроверитьИспользованиеПатчей();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыИсправленияСервер()
	
	ПроверитьИзменитьДатуИсправленияВВеткеВерсииИсправления();
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	ПроверитьИспользованиеПатчей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитыИОтображениеПоДействию(Действие)
	
	ДатаДействия = ТекущаяДатаСервера();
	
	Если Действие = "Регистрация" Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРегистрация;
		Заголовок = НСтр("ru='Регистрация ошибки'");
		Объект.Зарегистрирована = Истина;
		Объект.Зарегистрировал = ТекущийПользователь;
		Объект.ДатаРегистрации = ДатаДействия;
		Объект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована;
		
	ИначеЕсли Действие = "Признание" Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПризнание;
		Заголовок = НСтр("ru='Признание ошибки'");
		Объект.Признана = Истина;
		Объект.Рассмотрел = ТекущийПользователь;
		Объект.ДатаРассмотрения = ДатаДействия;
		Объект.Статус = Перечисления.СтатусыОшибок.Признана;
		
	ИначеЕсли Действие = "Исправление" Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаИсправление;
		Заголовок = НСтр("ru='Исправление ошибки'");
		Объект.Исправлена = Истина;
		Объект.Исправил = ТекущийПользователь;
		Объект.ДатаИсправления = ДатаДействия;
		Объект.Статус = Перечисления.СтатусыОшибок.Исправлена;
		
		ЗаполнитьПроверяющего(Объект, ВариантНаправленияОшибокНаПроверку, ПроверяющийОшибки, ОтветственныйЗаРаздел, ТекущийПользователь);
		
	ИначеЕсли Действие = "ПодтверждениеИсправления" Тогда
		
		Заголовок = НСтр("ru='Подтверждение исправления ошибки'");
		Объект.Проверена = Истина;
		Объект.Проверил = ТекущийПользователь;
		Объект.ДатаПроверки = ДатаДействия;
		Объект.Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена;
		
		Если ОшибкаПодлежитЗакрытию Тогда
			ЗаполнитьЗакрывающего(Объект, ВариантНаправленияОшибокНаЗакрытие, ЗакрывающийОшибки, 
									ОтветственныйЗаПроект, ОтветственныйЗаРаздел, ТекущийПользователь);
		КонецЕсли;
		
	ИначеЕсли Действие = "Закрытие" Тогда
		
		Заголовок = НСтр("ru='Закрытие ошибки'");
		Объект.Закрыта = Истина;
		Объект.Закрыл = ТекущийПользователь;
		Объект.ДатаЗакрытия = ДатаДействия;
		Объект.Статус = Перечисления.СтатусыОшибок.Закрыта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусныеРеквизитыПоФлагам(ИзмененныеФлаги)
	
	МассивДат = Новый Массив;
	
	Если ИзмененныеФлаги.Найти("Зарегистрирована") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("Зарегистрирована", "Зарегистрировал", "ДатаРегистрации", МассивДат);
	КонецЕсли;
		
	Если ИзмененныеФлаги.Найти("Признана") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("Признана", "Рассмотрел", "ДатаРассмотрения", МассивДат);
	КонецЕсли;
		
	Если ИзмененныеФлаги.Найти("Исправлена") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("Исправлена", "Исправил", "ДатаИсправления", МассивДат);
	КонецЕсли;
	
	Если ИзмененныеФлаги.Найти("Проверена") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("Проверена", "Проверил", "ДатаПроверки", МассивДат);
	КонецЕсли;
	
	Если ИзмененныеФлаги.Найти("Закрыта") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("Закрыта", "Закрыл", "ДатаЗакрытия", МассивДат);
	КонецЕсли;
	
	Если ИзмененныеФлаги.Найти("НеПризнана") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("НеПризнана", "Рассмотрел", "ДатаРассмотрения", МассивДат);
	КонецЕсли;
	
	Если ИзмененныеФлаги.Найти("Отозвана") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("Отозвана", "Отозвал", "ДатаОтзыва", МассивДат);
	КонецЕсли;
	
	Если ИзмененныеФлаги.Найти("НеПланируетсяИсправлять") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("НеПланируетсяИсправлять", "НеПланируетИсправлять", "ДатаНеПланируетсяИсправлять", МассивДат);
	КонецЕсли;
	
	Если ИзмененныеФлаги.Найти("ОжидаетИсправленияПовторяемой") <> Неопределено Тогда
		УстановитьЗначенияРеквизитовПоФлагу("ОжидаетИсправленияПовторяемой", "УстановилОжидаетИсправленияПовторяемой", "ДатаОжидаетИсправленияПовторяемой", МассивДат);
	КонецЕсли;
	
	Если МассивДат.Количество()>0 Тогда
		УстановитьДатыИзмененияСтатусов(МассивДат);
	КонецЕсли;
	
	Если Объект.Закрыта Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта");
	ИначеЕсли Объект.НеПланируетсяИсправлять Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять");
	ИначеЕсли Объект.ОжидаетИсправленияПовторяемой Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки");
	ИначеЕсли Объект.Отозвана Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана");
	ИначеЕсли Объект.Проверена Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена");
	ИначеЕсли Объект.Исправлена Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена");
	ИначеЕсли Объект.ОжидаетИсправленияПовторяемой Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки");
	ИначеЕсли Объект.Признана Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана");
	ИначеЕсли Объект.НеПризнана Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана");
	ИначеЕсли Объект.Зарегистрирована Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована");
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована");
	КонецЕсли;
	
	УстановитьВидимостьИнформацииОбИсправлении(Элементы, Объект.Исправлена);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияРеквизитовПоФлагу(ПолеФлага, ПолеОтветственного, ПолеДаты, МассивДатКУстановке)
	
	Если Объект[ПолеФлага] Тогда
		Объект[ПолеОтветственного] = ТекущийПользователь;
		МассивДатКУстановке.Добавить(ПолеДаты);
	Иначе
		Объект[ПолеОтветственного] = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		Объект[ПолеДаты] = '00010101';
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДатыИзмененияСтатусов(МассивРеквизитов)
	
	Дата = ТекущаяДатаСервера();
	Для Каждого ИмяРеквизита из МассивРеквизитов Цикл
		Объект[ИмяРеквизита] = Дата;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьИзмененияДатыИсправления(Элементы, Исправлена)
	
	Элементы.ИзменитьДатуИсправления.Доступность = Исправлена;
	
КонецПроцедуры

&НаСервере
Функция ТекущаяДатаСервера()
	
	Возврат ТекущаяДата();
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПоКодуСервер(Код)
	
	Возврат Справочники.Ошибки.ПолучитьОшибкуПоКоду(Код, Объект.Владелец);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРазделовПроекта()
	
	Элементы.РазделПроекта.Доступность = УказыватьРазделПроекта;
	Элементы.ДополнительныеРазделы.Доступность = УказыватьРазделПроекта;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовАудитаКода()
	
	МетодВыявления = Объект.МетодВыявленияОшибки;
	
	Если МетодВыявления = Перечисления.МетодыВыявленияОшибок.АудитКода Тогда
		
		Элементы.ПорядокВоспроизведения.Заголовок = НСтр("ru = 'Описание проблемы'");
		
	ИначеЕсли МетодВыявления = Перечисления.МетодыВыявленияОшибок.РаботаСПрограммой Тогда
		
		Элементы.ПорядокВоспроизведения.Заголовок = Метаданные.Справочники.Ошибки.Реквизиты.ПорядокВоспроизведения.Синоним;
		
	Иначе
		
		Элементы.ПорядокВоспроизведения.Заголовок = НСтр("ru = 'Запуск сценария'");
		
	КонецЕсли;
	
	Элементы.ГруппаИБ.Видимость = (МетодВыявления <> Перечисления.МетодыВыявленияОшибок.АудитКода);
	Элементы.ГруппаСтандарт.Видимость = (МетодВыявления = Перечисления.МетодыВыявленияОшибок.АудитКода);
	Элементы.Наименование.ОтметкаНезаполненного = (МетодВыявления = Перечисления.МетодыВыявленияОшибок.РаботаСПрограммой);
	Элементы.Тест.Видимость = (МетодВыявления = Перечисления.МетодыВыявленияОшибок.Автотесты);
	Элементы.ВидПроблемы.Видимость = (МетодВыявления = Перечисления.МетодыВыявленияОшибок.Автотесты);
	Элементы.ОбъектМетаданных.Видимость = (МетодВыявления <> Перечисления.МетодыВыявленияОшибок.Автотесты);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовКтоПривнес()
	
	Элементы.ГруппаКтоПривнес.Видимость = УказыватьВОшибкахКтоПривнес;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодчиненныеОбъекты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписокОбъектов.НомерСтроки КАК НомерСтроки,
	|	СписокОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ СписокОбъектов
	|ИЗ
	|	&СписокОбъектов КАК СписокОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОбъектов.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СписокОбъектов.ПодчиненныйОбъект) = ТИП(Справочник.КомандыОбъектовМетаданных)
	|			ТОГДА ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.КомандыОбъектовМетаданных).Имя
	|		КОГДА ТИПЗНАЧЕНИЯ(СписокОбъектов.ПодчиненныйОбъект) = ТИП(Справочник.ФормыОбъектовМетаданных)
	|			ТОГДА ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.ФормыОбъектовМетаданных).Имя
	|		КОГДА ТИПЗНАЧЕНИЯ(СписокОбъектов.ПодчиненныйОбъект) = ТИП(Справочник.МакетыОбъектовМетаданных)
	|			ТОГДА ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.МакетыОбъектовМетаданных).Имя
	|		КОГДА ТИПЗНАЧЕНИЯ(СписокОбъектов.ПодчиненныйОбъект) = ТИП(Справочник.РеквизитыОбъектовМетаданных)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.РеквизитыОбъектовМетаданных).Родитель.Имя <> """"
	|							И ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.РеквизитыОбъектовМетаданных).Родитель.ВидРеквизита <> ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.Реквизиты)
	|							И ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.РеквизитыОбъектовМетаданных).Родитель.ВидРеквизита <> ЗНАЧЕНИЕ(Перечисление.ВидыРеквизитов.СтандартныеРеквизиты)
	|						ТОГДА ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.РеквизитыОбъектовМетаданных).Родитель.Имя + ""."" + ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.РеквизитыОбъектовМетаданных).Имя
	|					ИНАЧЕ ВЫРАЗИТЬ(СписокОбъектов.ПодчиненныйОбъект КАК Справочник.РеквизитыОбъектовМетаданных).Имя
	|				КОНЕЦ
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СписокОбъектов.ПодчиненныйОбъект)
	|	КОНЕЦ КАК ПодчиненныйОбъектИмя,
	|	СписокОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъектСсылка
	|ИЗ
	|	СписокОбъектов КАК СписокОбъектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("СписокОбъектов",    Объект.СписокОбъектов.Выгрузить()); 
	
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаСписокОбъектов = Пакет[1].Выбрать();
	
	Пока ВыборкаСписокОбъектов.Следующий() Цикл
		
		СтрокаТаблицы = Объект.СписокОбъектов[ВыборкаСписокОбъектов.НомерСтроки - 1];
		СтрокаТаблицы.ПодчиненныйОбъектСтрока = РаботаСОбъектамиМетаданных.ПредставлениеПодчиненногоОбъекта(
														ВыборкаСписокОбъектов.ПодчиненныйОбъектСсылка,
														ВыборкаСписокОбъектов.ПодчиненныйОбъектИмя);
	КонецЦикла;
	
	Если Объект.СписокОбъектов.Количество() <> 0 Тогда
		ОбъектМетаданных = Объект.СписокОбъектов.Получить(0).ПроблемныйОбъект;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДействийСБазой(Форма)
	
	ВозможноСоздатьКопиюБазы = ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(Форма.Объект.ИнформационнаяБазаДляВоспроизведения);
	Если НЕ ВозможноСоздатьКопиюБазы И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
	
		СписокШаблонов = ОбщегоНазначенияСППРВызовСервера.СписокШаблоновИнформационныхБазОшибки(Форма.Объект.Ссылка);
		ВозможноСоздатьКопиюБазы = СписокШаблонов.Количество() > 0;
	
	КонецЕсли; 
	
	ЭтоСтрокаСоединения = ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(Форма.Объект.ИнформационнаяБазаДляВоспроизведения);
	
	Форма.Элементы.СоздатьЛокальнуюКопиюИБ.Доступность = ВозможноСоздатьКопиюБазы;
	
	Форма.Элементы.ОткрытьПредприятие.Доступность = ЭтоСтрокаСоединения ИЛИ ВозможноСоздатьКопиюБазы;
	Форма.Элементы.ОткрытьКонфигуратор.Доступность = ЭтоСтрокаСоединения ИЛИ ВозможноСоздатьКопиюБазы;
	
КонецПроцедуры
   
&НаСервере
Процедура УстановитьДоступностьМестаОбнаружения()
	
	ЭлементыТолькоПросмотр = НЕ ДоступноИзменениеМестаОбнаруженияОшибки И ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.Владелец.ТолькоПросмотр = ЭлементыТолькоПросмотр;
	
	// Автор ошибки может изменять место обнаружения, но не может изменять владельца
	ЭлементыМестоОбнаруженияТолькоПросмотр = ЭлементыТолькоПросмотр 
											И Объект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке 
											И НЕ Объект.Автор = ТекущийПользователь;
	Элементы.ГруппаМестоОбнаружения.ТолькоПросмотр = ЭлементыМестоОбнаруженияТолькоПросмотр;
	Если ЭлементыМестоОбнаруженияТолькоПросмотр Тогда
		Элементы.ГруппаМестоОбнаружения.Подсказка = НСтр("ru='Для изменения места обнаружения ошибки, обратитесь к уполномоченному пользователю.'");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВыделенияВОтдельнуюОшибку()
	
	Элементы.ИсправлениеВВеткахКонтекстноеМенюВыделитьВОтдельнуюОшибку.Видимость = ДоступноПланированиеОтработки;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПодразделения()
	
	Элементы.Подразделение.ТолькоПросмотр = Не ДоступноИзменениеПодразделения;
		
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиПроекта()
	
	СтрокаРеквизитов = "ВариантНаправленияОшибокНаПроверку,
						|ВариантНаправленияОшибокНаЗакрытие,
						|ПроверяющийОшибки,
						|ЗакрывающийОшибки,
						|КонтролироватьОбязательностьПубликацииОшибок,
						|УказыватьВОшибкахРазделПроекта,
						|УказыватьВОшибкахМестоИсправления,
						|ИспользоватьЗакрытиеОшибок,
						|ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями,
						|Ответственный,
						|АвтоматическиИсправлятьОшибкиВВетках,
						|УказыватьВОшибкахКтоПривнес,
						|ТекстПредупрежденияНеУказанКтоПривнес,
						|РегистрироватьОшибкиТолькоПоУказаннымВерсиям,
						|ХранитьСценарииРаботыПользователейВРепозитории";
						
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Владелец, СтрокаРеквизитов);
		
	ВариантНаправленияОшибокНаПроверку = РеквизитыПроекта.ВариантНаправленияОшибокНаПроверку;
	ВариантНаправленияОшибокНаЗакрытие = РеквизитыПроекта.ВариантНаправленияОшибокНаЗакрытие;
	ПроверяющийОшибки = РеквизитыПроекта.ПроверяющийОшибки;
	ЗакрывающийОшибки = РеквизитыПроекта.ЗакрывающийОшибки;
	КонтролироватьОбязательностьПубликации = РеквизитыПроекта.КонтролироватьОбязательностьПубликацииОшибок;
	УказыватьРазделПроекта = РеквизитыПроекта.УказыватьВОшибкахРазделПроекта;
	УказыватьВОшибкахМестоИсправления = РеквизитыПроекта.УказыватьВОшибкахМестоИсправления;
	ИспользоватьЗакрытиеОшибок = РеквизитыПроекта.ИспользоватьЗакрытиеОшибок;
	ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями =
		РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями;
	ОтветственныйЗаПроект = РеквизитыПроекта.Ответственный;
	АвтоматическиИсправлятьОшибкиВВетках =
		РеквизитыПроекта.АвтоматическиИсправлятьОшибкиВВетках;
	УказыватьВОшибкахКтоПривнес = РеквизитыПроекта.УказыватьВОшибкахКтоПривнес;
	ТекстПредупрежденияНеУказанКтоПривнес = РеквизитыПроекта.ТекстПредупрежденияНеУказанКтоПривнес;
	РегистрироватьОшибкиТолькоПоУказаннымВерсиям = РеквизитыПроекта.РегистрироватьОшибкиТолькоПоУказаннымВерсиям;
	ХранитьСценарииРаботыПользователейВРепозитории = РеквизитыПроекта.ХранитьСценарииРаботыПользователейВРепозитории;
	
	Если КонтролироватьОбязательностьПубликации = Неопределено Тогда
		КонтролироватьОбязательностьПубликации = Ложь;
	КонецЕсли;
	
	Если УказыватьРазделПроекта = Неопределено Тогда
		УказыватьРазделПроекта = Ложь;
	КонецЕсли;
	
	Если ИспользоватьЗакрытиеОшибок = Неопределено Тогда
		ИспользоватьЗакрытиеОшибок = Ложь;
	КонецЕсли;
	
	Если ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Неопределено Тогда
		ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Ложь;
	КонецЕсли;
	
	Если РегистрироватьОшибкиТолькоПоУказаннымВерсиям = Неопределено Тогда
		РегистрироватьОшибкиТолькоПоУказаннымВерсиям = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственногоЗаРаздел()
	
	Если ЗначениеЗаполнено(Объект.РазделПроекта) Тогда
		ОтветственныйЗаРаздел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РазделПроекта, "Ответственный");
	Иначе
		ОтветственныйЗаРаздел = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПроверяющего(ТекущийОбъект, ВариантНаправленияОшибокНаПроверку, ПроверяющийОшибки, ОтветственныйЗаРаздел, ТекущийПользователь)
	
	Если ВариантНаправленияОшибокНаПроверку = 
		ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаПроверку.Зарегистрировавшему") Тогда
		
		ТекущийОбъект.КомуНаправлена = ТекущийОбъект.Зарегистрировал;
		
	ИначеЕсли ВариантНаправленияОшибокНаПроверку = 
		ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаПроверку.Исправившему") Тогда
		
		ТекущийОбъект.КомуНаправлена = ТекущийОбъект.Исправил;
		
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект.КомуНаправлена) Тогда
			ТекущийОбъект.КомуНаправлена = ТекущийПользователь;
		КонецЕсли;
		
    ИначеЕсли ВариантНаправленияОшибокНаПроверку = 
		ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаПроверку.ОтветственномуЗаРаздел") Тогда
		
		ТекущийОбъект.КомуНаправлена = ОтветственныйЗаРаздел;
		
	ИначеЕсли ВариантНаправленияОшибокНаПроверку = 
		ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаПроверку.УказанномуПользователю") Тогда
		ТекущийОбъект.КомуНаправлена = ПроверяющийОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗакрывающего(ТекущийОбъект, ВариантНаправленияОшибокНаЗакрытие, ЗакрывающийОшибки, 
			ОтветственныйЗаПроект, ОтветственныйЗаРаздел, ТекущийПользователь)
	
	Если ВариантНаправленияОшибокНаЗакрытие = 
		ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаЗакрытие.ОтветственномуЗаПроект") Тогда
		
		ТекущийОбъект.КомуНаправлена = ОтветственныйЗаПроект;
		
    ИначеЕсли ВариантНаправленияОшибокНаЗакрытие = 
		ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаЗакрытие.ОтветственномуЗаРаздел") Тогда
		
		ТекущийОбъект.КомуНаправлена = ОтветственныйЗаРаздел;
		
	ИначеЕсли ВариантНаправленияОшибокНаЗакрытие = 
		ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаЗакрытие.УказанномуПользователю") Тогда
		ТекущийОбъект.КомуНаправлена = ЗакрывающийОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСпособовОбходаИсправления()
	
	Элементы.СпособОбхода.Доступность = Объект.ЕстьСпособОбхода;
	Элементы.СпособИсправления.Доступность = Объект.ЕстьСпособИсправления;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Ошибки.ХранилищеПорядкаВоспроизведения КАК ХранилищеПорядкаВоспроизведения,
	|	Ошибки.ХранилищеИсходнойИнформацииОбОшибке КАК ХранилищеИсходнойИнформацииОбОшибке
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", КопируемыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПорядокВоспроизведенияИзХранилища = Выборка.ХранилищеПорядкаВоспроизведения.Получить();
		Если ТипЗнч(ПорядокВоспроизведенияИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			ПорядокВоспроизведения = ПорядокВоспроизведенияИзХранилища;
		КонецЕсли;
		
		ИсходнаяИнформацияИзХранилища = Выборка.ХранилищеИсходнойИнформацииОбОшибке.Получить();
		Если ТипЗнч(ИсходнаяИнформацияИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			ИсходнаяИнформацияОбОшибке = ИсходнаяИнформацияИзХранилища;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВерсиюИсправления()
	
	// Если ошибка уже исправлена, версию исправления не меняем.
	Если НЕ Объект.Исправлена Тогда
		
		ДанныеОбнаружения = Новый Структура;
		ДанныеОбнаружения.Вставить("Обнаружена", Объект.Обнаружена);
		ДанныеОбнаружения.Вставить("ВеткаОбнаружения", Объект.ВеткаОбнаружения);
		ДанныеОбнаружения.Вставить("СборкаОбнаружения", Объект.СборкаОбнаружения);
		ДанныеОбнаружения.Вставить("ДатаОбнаружения", Объект.ДатаОбнаружения);
			
		Объект.ВерсияИсправления = 
			    Справочники.Ошибки.ВерсияИсправления(Объект.Владелец,
			                                         ДанныеОбнаружения,
			                                         Объект.СрочностьИсправления,
			                                         Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
													 Объект.Исправляется);
		
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыОшибок.Признана
		И Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		УстановитьСрокОтработки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОчиститьВеткуИсправления()
	
	Если Объект.Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения
		И Объект.Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		
		Если ЗначениеЗаполнено(Объект.ВеткаИсправления) Тогда
			Объект.ВеткаИсправления = Справочники.Ветки.ПустаяСсылка();
			ВеткаИсправления = Объект.ВеткаИсправления;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьВерсииИсправления()
	
	Элементы.ВерсияИсправления.Доступность = ДоступноПланированиеОтработки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСтатусаПубликации()
	
	Элементы.СтатусПубликации.Доступность = ДоступноИзменениеСтатусаПубликации;
	Элементы.СтатусПубликацииПриНепризнании.Доступность = ДоступноИзменениеСтатусаПубликации;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОписаниеОшибки(ОписаниеОшибки)
	
	ОписаниеОшибки = Справочники.Ошибки.ПолнаяИнформацияПоОшибке(Объект, НовыйСрокОтработки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКнопкиВернуть(Элементы, Статус)
	
	Если Элементы.Найти("Вернуть") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована") Тогда
		Элементы.Вернуть.Заголовок = НСтр("ru='Вернуть на регистрацию'");
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана") 
		ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана") Тогда
		Элементы.Вернуть.Заголовок = НСтр("ru='Вернуть на рассмотрение'");
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена")
		ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки") Тогда
		Элементы.Вернуть.Заголовок = НСтр("ru='Вернуть на исправление'");
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена") Тогда
		Элементы.Вернуть.Заголовок = НСтр("ru='Вернуть на проверку'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораКомуНаправлена(ОтветственныеЗаМетаданные = Неопределено)
	
	СписокЗначений = Новый СписокЗначений;
	Если ОтветственныеЗаМетаданные = Неопределено Тогда
		МассивОбъектовМетаданных = Объект.СписокОбъектов.Выгрузить(, "ПроблемныйОбъект").ВыгрузитьКолонку("ПроблемныйОбъект");
		ОтветственныеЗаМетаданные = РеквизитыМетаданных(МассивОбъектовМетаданных);
	КонецЕсли;
	
	Если (Объект.Зарегистрирована ИЛИ Объект.Признана) И ЗначениеЗаполнено(ОтветственныеЗаМетаданные.ОтветственныйРазработчик)
		И СписокЗначений.НайтиПоЗначению(ОтветственныеЗаМетаданные.ОтветственныйРазработчик) = Неопределено Тогда
		СписокЗначений.Добавить(ОтветственныеЗаМетаданные.ОтветственныйРазработчик, "Ответственный разработчик: " + ОтветственныеЗаМетаданные.ОтветственныйРазработчик);
	КонецЕсли;
	
	Если Объект.Исправлена И ЗначениеЗаполнено(ОтветственныеЗаМетаданные.ОтветственныйТестировщик)
		И СписокЗначений.НайтиПоЗначению(ОтветственныеЗаМетаданные.ОтветственныйТестировщик) = Неопределено Тогда
		СписокЗначений.Добавить(ОтветственныеЗаМетаданные.ОтветственныйТестировщик, "Ответственный тестировщик: " + ОтветственныеЗаМетаданные.ОтветственныйТестировщик);
	КонецЕсли;
	
	Если УказыватьРазделПроекта И ЗначениеЗаполнено(ОтветственныйЗаРаздел) И СписокЗначений.НайтиПоЗначению(ОтветственныйЗаРаздел) = Неопределено Тогда
		СписокЗначений.Добавить(ОтветственныйЗаРаздел, "Ответственный за раздел проекта: " + ОтветственныйЗаРаздел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветственныеЗаМетаданные.ОтветственныйРазработчик)
		И СписокЗначений.НайтиПоЗначению(ОтветственныеЗаМетаданные.ОтветственныйРазработчик) = Неопределено Тогда
		СписокЗначений.Добавить(ОтветственныеЗаМетаданные.ОтветственныйРазработчик, "Ответственный разработчик: " + ОтветственныеЗаМетаданные.ОтветственныйРазработчик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветственныеЗаМетаданные.ОтветственныйТестировщик)
		И СписокЗначений.НайтиПоЗначению(ОтветственныеЗаМетаданные.ОтветственныйТестировщик) = Неопределено Тогда
		СписокЗначений.Добавить(ОтветственныеЗаМетаданные.ОтветственныйТестировщик, "Ответственный тестировщик: " + ОтветственныеЗаМетаданные.ОтветственныйТестировщик);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтветственныйЗаПроект) Тогда
		СписокЗначений.Добавить(ОтветственныйЗаПроект, "Ответственный за проект: " + ОтветственныйЗаПроект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Автор) И Объект.МетодВыявленияОшибки <> Перечисления.МетодыВыявленияОшибок.Автотесты И СписокЗначений.НайтиПоЗначению(Объект.Автор) = Неопределено Тогда
		СписокЗначений.Добавить(Объект.Автор, "Автор: " + Объект.Автор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Зарегистрировал) И СписокЗначений.НайтиПоЗначению(Объект.Зарегистрировал) = Неопределено Тогда
		СписокЗначений.Добавить(Объект.Зарегистрировал, "Зарегистрировал: " + Объект.Зарегистрировал);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Рассмотрел) И СписокЗначений.НайтиПоЗначению(Объект.Рассмотрел) = Неопределено Тогда
		СписокЗначений.Добавить(Объект.Рассмотрел, "Рассмотрел: " + Объект.Рассмотрел);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Исправил) И СписокЗначений.НайтиПоЗначению(Объект.Исправил) = Неопределено Тогда
		СписокЗначений.Добавить(Объект.Исправил, "Исправил: " + Объект.Исправил);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проверил) И СписокЗначений.НайтиПоЗначению(Объект.Проверил) = Неопределено Тогда
		СписокЗначений.Добавить(Объект.Проверил, "Проверил: " + Объект.Проверил);
	КонецЕсли;
	
	Элементы.КомуНаправлена.СписокВыбора.Очистить();
	
	Для Каждого ЭлементСписка из СписокЗначений Цикл
		НовыйЭлемент = Элементы.КомуНаправлена.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПолученияИнформацииИзВнешнихИсточников()

	ТекущееЗначениеОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников = Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников;
	
	ТекстИсходнойИнформации = ИсходнаяИнформацияОбОшибке.ПолучитьТекст();
	
	Если ЗначениеЗаполнено(ПризнакиПолученияИнформацииОбОшибкеИзВнешнихИсточников) Тогда
		
		МассивПризнаковВнешнейОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		НРег(ПризнакиПолученияИнформацииОбОшибкеИзВнешнихИсточников), " ");
		
		ИсходнаяИнформацияНРег = НРег(ТекстИсходнойИнформации);
		
		Для Каждого Признак из МассивПризнаковВнешнейОшибки Цикл
			Если Найти(ИсходнаяИнформацияНРег, Признак)>0 Тогда
				Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТекущееЗначениеОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников <> Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников Тогда
		ПриИзмененииПризнакаВнешнегоИсточникаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГиперссылокИсходнойИнформации(Элементы, СтруктураДанных)
	
	ЕстьДанные = Ложь;
	
	Для Каждого ЭлементСтруктуры из СтруктураДанных Цикл
		
		Если ЭлементСтруктуры.Ключ = "ИсходнаяИнформацияОбОшибке" Тогда
			
			Документ = ЭлементСтруктуры.Значение;
			ТекстДокумента = Документ.ПолучитьТекст();
			
			Если ЗначениеЗаполнено(ТекстДокумента) Тогда
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
				ЕстьДанные = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьДанные Тогда
		Элементы.ИсходнаяИнформацияОбОшибке.Заголовок = НСтр("ru='Исходная информация об ошибке'");
	Иначе
		Элементы.ИсходнаяИнформацияОбОшибке.Заголовок = НСтр("ru='Исходная информация об ошибке (не указана)'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсправлениеСервер()
	
	Если Объект.Исправлена Тогда
		Объект.ДатаИсправления = ТекущаяДатаСервера();
		УстановитьАвтоИсправлениеВВетках();
		ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	Иначе
		Объект.ДатаИсправления = '00010101';
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СостояниеОшибкиЗавершениеСервер(ИзмененоИсправление, ИзмененоНаправление)
	
	УстановитьДоступностьИзмененияДатыИсправления(Элементы, Объект.Исправлена);
		
	Если ИзмененоИсправление Тогда
		ОбработатьИсправлениеСервер();
		
		Если Объект.Исправлена Тогда
			ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления();
		Иначе
			ОтменитьИсправлениеВВетках(Объект.ИсправлениеВВетках);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтображениеИсправленияВВетках();
	
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("ЕстьПравоЗакрытияОшибок", ПользовательИмеетПравоЗакрытияОшибок);
	ПараметрыДоступа.Вставить("ЕстьПравоОтзываОшибок", ПользовательИмеетПравоОтзываОшибки);
	ПараметрыДоступа.Вставить("ЕстьПравоПланированияОтработкиОшибок", ДоступноПланированиеОтработки);
	
	УстановитьКомандыДействий(Элементы,
							  Объект.Статус,
							  Объект.КомуНаправлена,
							  ОшибкаПодлежитЗакрытию,
							  Объект.Ссылка,
							  ПараметрыДоступа);
							  
	Если ИзмененоНаправление Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
	УстановитьДоступностьКомандыДобавленияОшибкиВТехническийПроект();
	УстановитьДоступностьОтветственногоЗаРаздел();
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКомандыДействий(Элементы, Статус, КомуНаправлена, ОшибкаПодлежитЗакрытию, Ссылка, ПараметрыДоступа)
	
	ЕстьПравоЗакрытияОшибок = ПараметрыДоступа.ЕстьПравоЗакрытияОшибок;
	ЕстьПравоОтзываОшибок   = ПараметрыДоступа.ЕстьПравоОтзываОшибок;
	ЕстьПравоПланированияОтработкиОшибок = ПараметрыДоступа.ЕстьПравоПланированияОтработкиОшибок;
	
	Если Элементы.Найти("Вернуть") <> Неопределено Тогда
		
		Элементы.Вернуть.Видимость = 
			(Статус<>ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована")
			И Статус<>ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана")
			И Статус<>ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта")
			И Статус<>ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять"));
	КонецЕсли;

	Если Элементы.Найти("Зарегистрировать") <> Неопределено Тогда
		Элементы.Зарегистрировать.Видимость = 
			(Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована"));
	КонецЕсли;

	Если Элементы.Найти("Признать") <> Неопределено Тогда
		Элементы.Признать.Видимость = 
			(Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована")
			ИЛИ Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана"));
	КонецЕсли;
											
	Если Элементы.Найти("НеПризнавать") <> Неопределено Тогда
		Элементы.НеПризнавать.Видимость = (Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована"));
	КонецЕсли;
	
	Если Элементы.Найти("ОтметитьИсправление") <> Неопределено Тогда
		Элементы.ОтметитьИсправление.Видимость = 
		(Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана")
		ИЛИ Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять"));
	КонецЕсли;
	
	Если Элементы.Найти("ПодтвердитьИсправление") <> Неопределено Тогда
		Элементы.ПодтвердитьИсправление.Видимость = (Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена"));
	КонецЕсли;
	
	Если Элементы.Найти("Отозвать") <> Неопределено Тогда
		Элементы.Отозвать.Видимость =
		ЗначениеЗаполнено(Ссылка)
		И ((Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана"))
		ИЛИ (Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована")));
	КонецЕсли;
		
	Если Элементы.Найти("ОзнакомитьсяИЗакрыть") <> Неопределено Тогда
		Элементы.ОзнакомитьсяИЗакрыть.Видимость = 
			((НЕ ОшибкаПодлежитЗакрытию
			И (Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена")
			ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана")))
			ИЛИ (ОшибкаПодлежитЗакрытию И Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта"))
			ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять")
			ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки"))
			И ЗначениеЗаполнено(КомуНаправлена);
	КонецЕсли;
		
	ВидимостьЗакрытия = 
		(ОшибкаПодлежитЗакрытию
		И (Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена")
		ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана")));
		
	Если Элементы.Найти("ЗакрытьОшибку") <> Неопределено Тогда
		
		Элементы.ЗакрытьОшибку.Видимость = ВидимостьЗакрытия;
		Если ВидимостьЗакрытия Тогда
			Элементы.ЗакрытьОшибку.Доступность = ЕстьПравоЗакрытияОшибок;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Найти("ЗакрытьОшибкуИНаправитьНаОзнакомление") <> Неопределено Тогда
		
		Элементы.ЗакрытьОшибкуИНаправитьНаОзнакомление.Видимость = ВидимостьЗакрытия;
		Если ВидимостьЗакрытия Тогда
			Элементы.ЗакрытьОшибкуИНаправитьНаОзнакомление.Доступность = ЕстьПравоЗакрытияОшибок;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.Найти("Отозвать") <> Неопределено Тогда
		Элементы.Отозвать.Доступность = ЕстьПравоОтзываОшибок;
	КонецЕсли;
	
	Если Элементы.Найти("НеПланируетсяИсправлять") <> Неопределено Тогда
		Элементы.НеПланируетсяИсправлять.Видимость = (Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана")
			И ЕстьПравоПланированияОтработкиОшибок);
	КонецЕсли;
	
	Если Элементы.Найти("ОжидатьИсправленияПовторяемойОшибки") <> Неопределено Тогда
		Элементы.ОжидатьИсправленияПовторяемойОшибки.Видимость = (Статус=ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана"));
	КонецЕсли;
		
	УстановитьЗаголовокКнопкиВернуть(Элементы, Статус);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьКомандуДействияСервер()
	
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("ЕстьПравоЗакрытияОшибок", ПользовательИмеетПравоЗакрытияОшибок);
	ПараметрыДоступа.Вставить("ЕстьПравоОтзываОшибок", ПользовательИмеетПравоОтзываОшибки);
	ПараметрыДоступа.Вставить("ЕстьПравоПланированияОтработкиОшибок", ДоступноПланированиеОтработки);
	
	УстановитьКомандыДействий(Элементы,
							  Объект.Статус,
							  Объект.КомуНаправлена,
							  ОшибкаПодлежитЗакрытию,
							  Объект.Ссылка,
							  ПараметрыДоступа);
							  
	УстановитьСписокВыбораКомуНаправлена();
	УстановитьСрокОтработки();
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	УстановитьДоступностьКомандыДобавленияОшибкиВТехническийПроект();
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьИсправлениеСервер(ИзмененоНаправление)
	
	ОбработатьКомандуДействияСервер();
	УстановитьАвтоИсправлениеВВетках();
	ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления();
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	УстановитьОтображениеИсправленияВВетках();
	
	Если ИзмененоНаправление Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
	УстановитьДоступностьОтветственногоЗаРаздел();
	
КонецПроцедуры

&НаСервере
Процедура ПодтвердитьИсправлениеСервер(ИзмененоНаправление)
	
	ОбработатьКомандуДействияСервер();
	
	Если ИзмененоНаправление Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НеПризнаватьСервер(ИзмененоНаправление)
	
	ОбработатьКомандуДействияСервер();
	
	Если ИзмененоНаправление Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтозватьСервер(ИзмененоНаправление)
	
	ОбработатьКомандуДействияСервер();
	
	Если Объект.Отозвана И Объект.ИсправлениеВВетках.Количество()>0 Тогда
		УстановитьОтображениеИсправленияВВетках();
	КонецЕсли;
	
	Если ИзмененоНаправление Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьОшибкуСервер(ИзмененоНаправление)
	
	ОбработатьКомандуДействияСервер();
	
	Если ИзмененоНаправление Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВернутьСервер(СтатусныеРеквизиты)
	
	ОбработатьКомандуДействияСервер();
	
	КомуНаправленаРанее = Объект.КомуНаправлена;
	
	Объект.КомуНаправлена = Справочники.Ошибки.ПолучательВозвращеннойОшибки(Объект.Ссылка, СтатусныеРеквизиты);
	
	Если КомуНаправленаРанее <> Объект.КомуНаправлена Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
	Если Не Объект.Исправлена Тогда
		ОтменитьИсправлениеВВетках(Объект.ИсправлениеВВетках);
		УстановитьОтображениеИсправленияВВетках();
	КонецЕсли;
	
	УстановитьДоступностьОтветственногоЗаРаздел();
	
КонецПроцедуры

&НаСервере
Процедура ОтветитьСервер()
	
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзменнииФлагаЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениямиСервер(ИзмененоНаправление)
	
	Если ИзмененоНаправление Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РазделПроектаПриИзмененииСервер()
	
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаписьВПротокол(АвторИзменений, Комментарий)
	
	Дата = '00010101';
	РеквизитыОбъектаВИБ = Новый Структура;
	
	ПолучитьДанныеНаСервере(Дата, РеквизитыОбъектаВИБ);
	
	// Добавляется перевод в предыдущие статус при необходимости
	ДобавитьПереводВСтатусыВПротокол(РеквизитыОбъектаВИБ, АвторИзменений, Дата);
	
	НоваяСтрока = Объект.Протокол.Вставить(0);
	НоваяСтрока.Автор = АвторИзменений;
	НоваяСтрока.Дата = Дата;
	НоваяСтрока.Комментарий = Комментарий;
	НоваяСтрока.КомуНаправлена = Объект.КомуНаправлена;
	НоваяСтрока.Статус = Объект.Статус;
	
	Если ЗначениеЗаполнено(Объект.КомуНаправлена) Тогда
		Объект.ДатаНаправления = Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПереводВСтатусыВПротокол(РеквизитыОбъекта, АвторИзменений, Дата)
	
	ПроверяемыеРеквизиты = Новый Массив;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана") Тогда
		ПроверяемыеРеквизиты.Добавить("Зарегистрирована");
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена") Тогда
		ПроверяемыеРеквизиты.Добавить("Зарегистрирована");
		ПроверяемыеРеквизиты.Добавить("Признана");
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена") Тогда
	    ПроверяемыеРеквизиты.Добавить("Зарегистрирована");
		ПроверяемыеРеквизиты.Добавить("Признана");
		ПроверяемыеРеквизиты.Добавить("Исправлена");
	КонецЕсли;
	
	Для Каждого ИмяРеквизита из ПроверяемыеРеквизиты Цикл
		Если РеквизитыОбъекта[ИмяРеквизита] <> Неопределено И Не РеквизитыОбъекта[ИмяРеквизита] Тогда
			
			СтатусДляПротокола = ПредопределенноеЗначение("Перечисление.СтатусыОшибок." + ИмяРеквизита);
			
			НоваяСтрока = Объект.Протокол.Вставить(0);
			НоваяСтрока.Автор = АвторИзменений;
			НоваяСтрока.Дата = Дата;
			НоваяСтрока.КомуНаправлена = Объект.КомуНаправлена;
			НоваяСтрока.Статус = СтатусДляПротокола;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеНаСервере(Дата, РеквизитыОбъекта)
	
	Дата = ТекущаяДатаСервера();
	
	СтрокаРеквизитов = "Зарегистрирована,Признана,Исправлена,Проверена";
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ссылка, СтрокаРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКопироватьИБВУказанныйКаталогЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьИБВУказанныйКаталогПослеЗаписи", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
		
		Записать(СтруктураПараметровЗаписи);
	КонецЕсли;
	
	Отказ = Ложь;
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИБВУказанныйКаталогПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	КопироватьИБВУказанныйКаталог();	
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИБВУказанныйКаталог()

	Оповещение = Новый ОписаниеОповещения("КопироватьИБВУказанныйКаталогОткрыть", ЭтотОбъект);
	ТекстПредложения = НСтр("ru = 'Для копирования ошибок необходимо установить расширение для работы с файлами.'");
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение, ТекстПредложения);

КонецПроцедуры

&НаКлиенте
Процедура КопироватьИБВУказанныйКаталогОткрыть(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КаталогПриемник", Объект.ИнформационнаяБазаДляВоспроизведения);
	ПараметрыФормы.Вставить("Ошибка", Объект.Ссылка);
	ПараметрыФормы.Вставить("КодОшибки", Объект.Код);
	ПараметрыФормы.Вставить("КаталогИБПрикладываемыхКОшибкам", КаталогИБПрикладываемыхКОшибкам);
	ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьИБВУказанныйКаталогЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Ошибки.Форма.ДобавлениеИБДляВоспроизведенияОшибки", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КопироватьИБВУказанныйКаталогЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") И РезультатЗакрытия <> "КопироватьСерверомСППР" Тогда
		
		Если Объект.ИнформационнаяБазаДляВоспроизведения <> РезультатЗакрытия Тогда
			Объект.ИнформационнаяБазаДляВоспроизведения = РезультатЗакрытия;
			Модифицированность = Истина;
		КонецЕсли;
		
		УстановитьДоступностьДействийСБазой(ЭтаФорма); 
		
	ИначеЕсли РезультатЗакрытия = "КопироватьСерверомСППР" Тогда
		
		Объект.ИнформационнаяБазаДляВоспроизведения = "<Выгрузка ИБ выполняется...>";
		ОбщегоНазначенияСППРКлиент.ЗаписатьИЗакрыть(ЭтаФорма);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКаталогИБПрикладываемыхКОшибкам()

	Если КаталогИБПрикладываемыхКОшибкам <> "" Тогда
		ЭлементСписка = Элементы.ИнформационнаяБазаДляВоспроизведения.СписокВыбора.НайтиПоЗначению(КаталогИБПрикладываемыхКОшибкам);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ИнформационнаяБазаДляВоспроизведения.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
	КаталогИБПрикладываемыхКОшибкам = Справочники.Ошибки.СгенерироватьКаталогИБОшибки(Объект);
	
	Если ЗначениеЗаполнено(КаталогИБПрикладываемыхКОшибкам) Тогда
		Если Элементы.ИнформационнаяБазаДляВоспроизведения.СписокВыбора.НайтиПоЗначению(КаталогИБПрикладываемыхКОшибкам) = Неопределено Тогда
			Элементы.ИнформационнаяБазаДляВоспроизведения.СписокВыбора.Добавить(КаталогИБПрикладываемыхКОшибкам);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьПеренаправляемуюОшибку(ДанныеПолучателя, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ФормаИсточник", Неопределено);
	
	Если ТипЗнч(ДанныеПолучателя) = Тип("КодВозвратаДиалога") Или
		ДанныеПолучателя = Неопределено Тогда
		Возврат;
	Иначе
		
		ПеренаправляемаяОшибка = ЗарегистрироватьПеренаправляемуюОшибкуНаСервере(ДанныеПолучателя, ДополнительныеПараметры);
		
		Если Не ЗначениеЗаполнено(ПеренаправляемаяОшибка) Тогда
			Возврат;
		КонецЕсли;
		
		ТекстОповещения = НСтр("ru='Перенаправлена ошибка: %Ошибка%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Ошибка%", Объект.Наименование);
		ПоказатьОповещениеПользователя(НСтр("ru='Перенаправление ошибки:'"),
			ПолучитьНавигационнуюСсылку(ПеренаправляемаяОшибка), ТекстОповещения, БиблиотекаКартинок.Информация32);
			
		ИсторияРаботыПользователя.Добавить(ПеренаправляемаяОшибка);
			
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	
	Оповестить("ПеренаправленаОшибкаАудита",, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьПеренаправляемуюОшибкуНаСервере(ДанныеПолучателя, ДополнительныеПараметры)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	Ошибка = Справочники.Ошибки.СоздатьЭлемент();
	
	Реквизиты = "Наименование, Владелец, ВерсияИсправления, ВерсияПлатформы, ДатаОбнаружения, ИсходнаяИнформацияОбОшибке, 
	|Клиент, МетодВыявленияОшибки, Исправляется, ОписаниеИзменений, ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников, 
	|ПорядокВоспроизведения, РазделПроекта, СборкаОбнаружения, СрочностьИсправления, СУБД, 
	|ЗарегистрированаИзАПК, Обнаружена, 
	|ВеткаОбнаружения, Стандарт, ТипПроблемы, ВидПроблемы";
	
	ЗаполнитьЗначенияСвойств(Ошибка, Объект, Реквизиты);
	
	Если ДополнительныеПараметры.Свойство("Статус") Тогда
		Статус = ДополнительныеПараметры.Статус;
	Иначе
		Статус = Перечисления.СтатусыОшибок.Зарегистрирована;
	КонецЕсли;
	
	ДатаОшибки  = ТекущаяДатаСеанса();
	АвторОшибки = Пользователи.ТекущийПользователь();
	
	Ошибка.Зарегистрирована = Истина;
	Ошибка.Зарегистрировал  = АвторОшибки;
	Ошибка.ДатаСоздания     = ДатаОшибки;
	Ошибка.ДатаРегистрации  = ДатаОшибки;
	Ошибка.Автор            = АвторОшибки;
	Ошибка.Статус           = Статус;
	Ошибка.Основание        = Объект.Ссылка;
	Ошибка.КомуНаправлена   = ДанныеПолучателя.КомуНаправлена;
	Ошибка.ДатаНаправления  = ДатаОшибки;
	
	Ошибка.ХранилищеИсходнойИнформацииОбОшибке = Новый ХранилищеЗначения(ИсходнаяИнформацияОбОшибке);
	Ошибка.ХранилищеПорядкаВоспроизведения = Новый ХранилищеЗначения(ПорядокВоспроизведения);
	
	Если Объект.СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.НеПубликуется Тогда
		Ошибка.СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.НеПубликуется;
	КонецЕсли;
	
	// Добавим строку в протокол
	НоваяСтрока = Ошибка.Протокол.Добавить();
	
	НоваяСтрока.Автор          = АвторОшибки;
	НоваяСтрока.Дата           = ДатаОшибки;
	НоваяСтрока.Комментарий    = ДанныеПолучателя.Комментарий;
	НоваяСтрока.КомуНаправлена = ДанныеПолучателя.КомуНаправлена;
	НоваяСтрока.Статус         = Ошибка.Статус;
	
	Ошибка.РазделыПроекта.Загрузить(Объект.РазделыПроекта.Выгрузить());
	
	Для Каждого Индекс Из ДополнительныеПараметры.ИдентификаторыСтрокТаблицы Цикл
		НоваяСтрока = Ошибка.СписокОбъектов.Добавить();
		ТекущаяСтрока = Объект[ДополнительныеПараметры.ИмяТаблицы].НайтиПоИдентификатору(Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	КонецЦикла;
	
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Ложь);
	
	Если НЕ ЗначениеЗаполнено(Ошибка.ПовторяемаяОшибка) Тогда
		Ошибка.ПовторяемаяОшибка = "";
	КонецЕсли;
	
	Ошибка.Записать();
	
	Для Каждого Индекс Из ДополнительныеПараметры.ИдентификаторыСтрокТаблицы Цикл
		ТекущаяСтрока = Объект[ДополнительныеПараметры.ИмяТаблицы].НайтиПоИдентификатору(Индекс);
		Объект[ДополнительныеПараметры.ИмяТаблицы].Удалить(ТекущаяСтрока);
	КонецЦикла;
	
	Записать();
	
	Возврат Ошибка.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьНеПризнаваемуюОшибку(ДанныеПолучателя, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("ФормаИсточник", Неопределено);
	
	Если ТипЗнч(ДанныеПолучателя) = Тип("КодВозвратаДиалога") Или
		ДанныеПолучателя = Неопределено Тогда
		Возврат;
	Иначе
		
		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли; 
		
		ДополнительныеПараметры.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана"));
		
		ПеренаправляемаяОшибка = ЗарегистрироватьПеренаправляемуюОшибкуНаСервере(ДанныеПолучателя, ДополнительныеПараметры);
		
		Если Не ЗначениеЗаполнено(ПеренаправляемаяОшибка) Тогда
			Возврат;
		КонецЕсли;
		
		ТекстОповещения = НСтр("ru='Перенаправлена ошибка: %Ошибка%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Ошибка%", Объект.Наименование);
		ПоказатьОповещениеПользователя(НСтр("ru='Перенаправление ошибки:'"),
			ПолучитьНавигационнуюСсылку(ПеренаправляемаяОшибка), ТекстОповещения, БиблиотекаКартинок.Информация32);
		
		ИсторияРаботыПользователя.Добавить(ПеренаправляемаяОшибка);
		
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	
	Оповестить("НеПризнанаОшибкаАудита",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСтраницуВерсииОбнаружения(Элементы, МестоОбнаружения)
	
	Если МестоОбнаружения = ПредопределенноеЗначение("Перечисление.МестаОбнаруженияОшибок.ВСборке") Тогда
		Элементы.СтраницыМестоОбнаружения.ТекущаяСтраница = Элементы.СтраницаСборкаОбнаружения;
	ИначеЕсли МестоОбнаружения = ПредопределенноеЗначение("Перечисление.МестаОбнаруженияОшибок.ВВетке") Тогда
		Элементы.СтраницыМестоОбнаружения.ТекущаяСтраница = Элементы.СтраницаВеткаОбнаружения;
	Иначе
		Элементы.СтраницыМестоОбнаружения.ТекущаяСтраница = Элементы.СтраницаМестоОбнаруженияНеУказано;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИнформацииОбИсправлении(Элементы, Исправлена)
	
	Если Исправлена Тогда
		Элементы.СтраницыИнформацииОбИсправлении.ТекущаяСтраница = Элементы.СтраницаИнформацииСИсправлением;
	Иначе
		Элементы.СтраницыИнформацииОбИсправлении.ТекущаяСтраница = Элементы.СтраницаИнформацииБезИсправления;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеИсправленияВВетках()
	
	Элементы.СтраницаИсправлениеВВетках.Видимость =
		(Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках);
	
	КоличествоВсего = 0;
	КоличествоОтработано = 0;
	
	Если Не Объект.Отозвана Тогда
		
		Для Каждого СтрокаТаблицы из Объект.ИсправлениеВВетках Цикл
			
			//Количество всего - количество, где исправление требуется (или исправлено)
			Если СтрокаТаблицы.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление
				ИЛИ СтрокаТаблицы.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
				
				КоличествоВсего = КоличествоВсего + 1;
				
			КонецЕсли;
			
			// Отработанными считаются ветки, по которым отмечено исправление
			Если СтрокаТаблицы.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
				КоличествоОтработано = КоличествоОтработано + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоВсего < КоличествоОтработано Тогда
			КоличествоВсего = КоличествоОтработано;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru='Ветки (%КоличествоОтработано%/%КоличествоВсего%)'");
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%КоличествоОтработано%", КоличествоОтработано);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%КоличествоВсего%", КоличествоВсего);
	
	Элементы.СтраницаИсправлениеВВетках.Заголовок = ТекстЗаголовка;
	
	Если КоличествоВсего = КоличествоОтработано Тогда
		Элементы.СтраницаИсправлениеВВетках.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаИсправлениеВВетках.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМестаОбнаруженияСервер()
	
	ЗаполнитьСписокТехническихПроектовОбнаружения();
	
	УстановитьСтраницуВерсииОбнаружения(Элементы, Объект.Обнаружена);
	
	Если Объект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		Объект.ДатаОбнаружения = ТекущаяДатаСервера();
		Объект.СборкаОбнаружения = ПредопределенноеЗначение("Справочник.СборкиВерсии.ПустаяСсылка");
	Иначе
		Объект.ДатаОбнаружения = '00010101';
		Объект.ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнитьВеткуИТипВеткиОбнаружения();
	ЗаполнитьДатуОбнаружения();
	УстановитьДоступностьВерсииИсправления();
	УстановитьВерсиюИсправления();
	УстановитьВариантИсправления();
	ПроверитьОчиститьВеткуИсправления();
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	УстановитьОтображениеИсправленияВВетках();
	ПроверитьИспользованиеПатчей();
	УстановитьОтображениеИнформацииОбОбнаружении();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВеткиОбнаруженияСервер()
	
	ЗаполнитьВеткуИТипВеткиОбнаружения();
	ЗаполнитьСписокТехническихПроектовОбнаружения();
	УстановитьВерсиюИсправления();
	УстановитьВариантИсправления();
	ПроверитьОчиститьВеткуИсправления();
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	УстановитьОтображениеИсправленияВВетках();
	ПроверитьИспользованиеПатчей();
	УстановитьОтображениеИнформацииОбОбнаружении();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОтветственногоЗаРаздел()
	
	Элементы.ОтветственныйЗаРаздел.Доступность = НЕ Объект.Исправлена ИЛИ ДоступноПланированиеОтработки;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьИсправлениеВВетках()
	
	Если Объект.Исправляется <> Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках
		И Объект.ИсправлениеВВетках.Количество()>0 Тогда
		
		Объект.ИсправлениеВВетках.Очистить();
		Возврат;
	КонецЕсли;
	
	Если Проект <> Объект.Владелец Тогда
		Объект.ИсправлениеВВетках.Очистить();
	КонецЕсли;
	
	Если Объект.Отозвана Тогда
		Возврат;
	КонецЕсли;

	ВеткиДляИсправления = Справочники.Ошибки.ВеткиДляИсправленияОшибки(Объект.Владелец,
	                          Объект.ВерсияИсправления,
	                          Объект.Обнаружена,
	                          Объект.СборкаОбнаружения,
	                          Объект.ВеткаОбнаружения,
	                          Объект.ДатаОбнаружения);
	
	// Ранее добавленные строки, по которым не указано исправление, удаляются,
	// если они не удовлетворяют условиям автоматического добавления в ТЧ
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаТЧ из Объект.ИсправлениеВВетках Цикл
		
		Если ВеткиДляИсправления.Найти(СтрокаТЧ.Ветка, "Ветка") = Неопределено Тогда
			Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
				ИЛИ СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока из УдаляемыеСтроки Цикл
		Объект.ИсправлениеВВетках.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из ВеткиДляИсправления ЦИкл
		
		СтруктураОтбора = Новый Структура("Ветка", СтрокаТаблицы.Ветка);
		НайденныеСтроки = Объект.ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество()=0 Тогда
			// Требуемая строка добавляется в ТЧ
			НоваяСтрока = Объект.ИсправлениеВВетках.Добавить();
			НоваяСтрока.Ветка = СтрокаТаблицы.Ветка;
			
			Если СтрокаТаблицы.ВеткаРанееВерсииИсправления И СтрокаТаблицы.ТипВетки = Перечисления.ТипыВеток.ВеткаВерсии Тогда
				НоваяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется;
			Иначе
				НоваяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление;
			КонецЕсли;
		Иначе
			// В строке соответствующей ветки актуализируется состояние
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				
				Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
					ИЛИ СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
					
					Если СтрокаТаблицы.ВеткаРанееВерсииИсправления И СтрокаТаблицы.ТипВетки = Перечисления.ТипыВеток.ВеткаВерсии Тогда
						НайденнаяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется;
					Иначе
						НайденнаяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Данные по версии исправления соотносятся с информацией о ветке в ТЧ ИсправлениеВВетках
	ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления();
	
	// Устанавливается ветка исправления, если возможно
	ВеткиДляОбработки = Объект.ИсправлениеВВетках.Выгрузить().ВыгрузитьКолонку("Ветка");
	РеквизитыВеток = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВеткиДляОбработки, "ИзмененияПомещаютсяТолькоЧерезДругиеВетки");
	
	Для Каждого СтрокаТЧ из Объект.ИсправлениеВВетках Цикл
		
		РеквизитыВетки = РеквизитыВеток.Получить(СтрокаТч.Ветка);
		Если РеквизитыВетки.ИзмененияПомещаютсяТолькоЧерезДругиеВетки <> Истина Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВеткаИсправления)
				И (СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление
				ИЛИ СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена) Тогда
				
				СтрокаТЧ.ВеткаИсправления = СтрокаТЧ.Ветка;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтменитьИсправлениеВВетках(ИсправлениеВВетках)
	
	Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
		Если СтрокаТЧ.СостояниеИсправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.Исправлена") Тогда
			СтрокаТЧ.СостояниеИсправления = ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ТребуетсяИсправление");
			СтрокаТЧ.ДатаИсправления = '00010101';
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНеобходимостьЗакрытияОшибки();
	
	ОшибкаПодлежитЗакрытию = 
	    НЕ Объект.НеПланируетсяИсправлять
		И ИспользоватьЗакрытиеОшибок
		И НЕ ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		ИЛИ ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		И Объект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями;
		
КонецПроцедуры

&НаСервере
Функция ПользовательИмеетПравоОтзываОшибки()
	
	ЕстьПравоОтзыва = УправлениеДоступомСППР.РольДоступнаПоПроекту("ОтзывОшибок", Объект.Владелец);
	
	АвторамРазрешенОтзывОшибки = Справочники.Ошибки.АвторамРазрешенОтзывОшибки(Объект.Владелец, Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников);
	
	Если ТекущийПользователь = Объект.Зарегистрировал
		ИЛИ (НЕ Объект.Зарегистрирована И Объект.Автор = ТекущийПользователь) Тогда
		
		ПользовательЯвляетсяОтзывающим = Истина;
	Иначе
		ПользовательЯвляетсяОтзывающим = Ложь;
	КонецЕсли;
	
	ПользовательЗамещаетОтзывающего = Ложь;
	
	Если НЕ ПользовательЯвляетсяОтзывающим И АвторамРазрешенОтзывОшибки Тогда
		
		ЗамещаемыйПользователь = Справочники.Пользователи.ПустаяСсылка();
		
		Если Объект.Зарегистрирована Тогда
			ЗамещаемыйПользователь = Объект.Зарегистрировал;
		Иначе
			ЗамещаемыйПользователь = Объект.Автор;
		КонецЕсли;
		
		// Если настроено замещение, то подставляется замещающий
		Если ЗначениеЗаполнено(ЗамещаемыйПользователь) Тогда
			
			ДанныеОЗамещении =
				Справочники.Ошибки.ДанныеОЗамещенииПользователяВРаботеСОшибками(ЗамещаемыйПользователь, Объект.Владелец);
			
			Если ЗначениеЗаполнено(ДанныеОЗамещении.ЗамещающийПользователь) Тогда
				Если ДанныеОЗамещении.ЗамещающийПользователь = ТекущийПользователь Тогда
					ПользовательЗамещаетОтзывающего = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

		
	Возврат ЕстьПравоОтзыва 
		ИЛИ ((ПользовательЯвляетсяОтзывающим ИЛИ ПользовательЗамещаетОтзывающего)
		И АвторамРазрешенОтзывОшибки);
	
КонецФункции

&НаКлиенте
Процедура ПриИзменнииПовторяемойОшибки()
	
	Если ТипЗнч(Объект.ПовторяемаяОшибка) = Тип("Строка")
		И ЗначениеЗаполнено(Объект.ПовторяемаяОшибка) Тогда
		
		СсылкаНаОшибкуПоКоду = ПолучитьСсылкуПоКодуСервер(СокрП(Объект.ПовторяемаяОшибка));
		
		Если ЗначениеЗаполнено(СсылкаНаОшибкуПоКоду) Тогда
			Объект.ПовторяемаяОшибка = СсылкаНаОшибкуПоКоду;
		КонецЕсли;
	КонецЕсли;

	ТекущееЗначениеПовторяемаяОшибка = Объект.ПовторяемаяОшибка;
	
	УказанаСсылкаПовторяемойОшибки =
			ТипЗнч(Объект.ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки") И ЗначениеЗаполнено(Объект.ПовторяемаяОшибка);
	
	Если УказанаСсылкаПовторяемойОшибки Тогда
		
		РезультатПроверкиПовторяемойОшибки = ПроверитьУказаннуюПовторяемуюОшибку(Объект.ПовторяемаяОшибка, Объект.ВеткаОбнаружения);
		Если РезультатПроверкиПовторяемойОшибки.РезультатПроверки 
			И РезультатПроверкиПовторяемойОшибки.Свойство("ПовторяемаяОшибка") Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("ПовторяемаяОшибка", РезультатПроверкиПовторяемойОшибки.ПовторяемаяОшибка);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьУказаннуюПовторяемуюОшибкуЗавершение", 
								ЭтотОбъект, ПараметрыОповещения);
			
			ТекстВопроса = РезультатПроверкиПовторяемойОшибки.ТекстСообщения 
						+ НСтр("ru=' Подставить повторяемую ошибку из выбранной?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Возврат;
		КонецЕсли;
				
		РезультатПроверкиТекущейОшибки = ПроверитьОшибкиСУказаннойПовторяемойОшибкой(Объект.Ссылка, Объект.ПовторяемаяОшибка);
		Если РезультатПроверкиТекущейОшибки.РезультатПроверки Тогда
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СписокОшибок", РезультатПроверкиТекущейОшибки.ПовторяемыеОшибки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьОшибкиСУказаннойПовторяемойОшибкойЗавершение", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.Ошибки.Форма.ОбновлениеСсылокНаПовторяемыеОшибки",
						СтруктураПараметров,
						ЭтаФорма,
						ЭтотОбъект,
						,
						,
						ОписаниеОповещения,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	УстановитьДоступностьКомандыРегистрацииПовторяемойОшибки();
	
	УстановитьПодсказкуВводаПричинНепризнания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьУказаннуюПовторяемуюОшибку(ОшибкаСсылка, ВеткаОбнаружения)
	
	Возврат Справочники.Ошибки.ПроверитьУказаннуюПовторяемуюОшибку(ОшибкаСсылка, ВеткаОбнаружения);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьОшибкиСУказаннойПовторяемойОшибкой(ОшибкаСсылка, ПовторяемаяОшибкаСсылка)
	
	Возврат Справочники.Ошибки.ПроверитьОшибкиСУказаннойПовторяемойОшибкой(ОшибкаСсылка, ПовторяемаяОшибкаСсылка);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьУказаннуюПовторяемуюОшибкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ПовторяемаяОшибка = ДополнительныеПараметры.ПовторяемаяОшибка;
		ПриИзменнииПовторяемойОшибки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОшибкиСУказаннойПовторяемойОшибкойЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатДействия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатДействия.СписокОшибок.Количество() > 0 Тогда
		ОбновитьПолеПовторяемаяОшибкаУОшибокДубликатов(РезультатДействия.СписокОшибок, Объект.ПовторяемаяОшибка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьПолеПовторяемаяОшибкаУОшибокДубликатов(СписокОшибок, ПовторяемаяОшибка) Экспорт
	
	НеУдалосьЗаблокироватьОшибки = Новый Массив;
	
	Для Каждого ОшибкаСсылка Из СписокОшибок Цикл
		
		Попытка
			ОбъектОшибки = ОшибкаСсылка.Ошибка.ПолучитьОбъект();
			ОбъектОшибки.Заблокировать();
			ОбъектОшибки.ПовторяемаяОшибка = ПовторяемаяОшибка;
			ОбъектОшибки.Записать();
		Исключение
			НеУдалосьЗаблокироватьОшибки.Добавить(ОбъектОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Если НеУдалосьЗаблокироватьОшибки.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru='Не удалось заблокировать %1: %2'");
		НомераОшибок = "";
		Для Каждого Ошибка Из НеУдалосьЗаблокироватьОшибки Цикл
			НомераОшибок = НомераОшибок + " " + Ошибка.Код + ";";
		КонецЦикла;
		ТекстОшибки = ?(НеУдалосьЗаблокироватьОшибки.Количество() > 1, "ошибки", "ошибку");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ТекстОшибки, НомераОшибок);
		
		ВызватьИсключение(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьДанныеФормы()

	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	ДанныеФормыРазблокированы = Истина;
	РазблокироватьДанныеФормыДляРедактирования();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДатаУстановкиТекущегоСтатуса(Объект, Дата)
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована") Тогда
		ДатаУстановки = Объект.ДатаСоздания;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована") Тогда
		ДатаУстановки = Объект.ДатаРегистрации;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана") Тогда
		ДатаУстановки = Объект.ДатаРассмотрения;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена") Тогда
		ДатаУстановки = Объект.ДатаИсправления;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана") Тогда
		ДатаУстановки = Объект.ДатаОтзыва;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена") Тогда
		ДатаУстановки = Объект.ДатаПроверки;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта") Тогда
		ДатаУстановки = Объект.ДатаЗакрытия;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять") Тогда
		ДатаУстановки = Объект.ДатаНеПланируетсяИсправлять;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки") Тогда
		ДатаУстановки = Объект.ДатаОжидаетИсправленияПовторяемой;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаУстановки) Тогда
		ДатаУстановки = Дата;
	КонецЕсли;
	
	Возврат ДатаУстановки;
	
КонецФункции

&НаСервере
Процедура УстановитьСрокОтработки()
		
	Если НЕ ИзмененыКлючевыеРеквизитыДляСрокаОтработки() Тогда
		// Если в результате изменений в форме ключевые реквизиты,
		// от которых зависит срок отработки, вернулись (или остались)
		// в исходное состояние, срок менять не требуется.
		// Если срок был изменен при работе в форме (например менялся статус, но вернулся к исходному),
		// то новый срок возвращается к исходному.
		Если НовыйСрокОтработки <> Объект.СрокОтработки Тогда
			НовыйСрокОтработки = Объект.СрокОтработки;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ДатаУстановкиТекущегоСтатуса = ДатаУстановкиТекущегоСтатуса(Объект, ТекущаяДата());
	
	РеквизитыОшибки = Новый Структура;
	РеквизитыОшибки.Вставить("Владелец", Объект.Владелец);
	РеквизитыОшибки.Вставить("Статус", Объект.Статус);
	РеквизитыОшибки.Вставить("СрочностьИсправления", Объект.СрочностьИсправления);
	РеквизитыОшибки.Вставить("ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями", Объект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
	РеквизитыОшибки.Вставить("ВерсияИсправления", Объект.ВерсияИсправления);
	РеквизитыОшибки.Вставить("КомуНаправлена", Объект.КомуНаправлена);
	РеквизитыОшибки.Вставить("Исправляется", Объект.Исправляется);
	
	СрокОтработкиПоНорме = Справочники.Ошибки.СрокОтработкиОшибки(РеквизитыОшибки, ИсходноеЗначениеВерсияИсправления, ДатаУстановкиТекущегоСтатуса);
	
	Если СрочностьИсправленияПовышена(ТекущаяСрочностьИсправления, Объект.СрочностьИсправления)
		ИЛИ (Объект.Статус = Перечисления.СтатусыОшибок.Признана
		И Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта) Тогда
	
		НовыйСрокОтработки = СрокОтработкиПоНорме;
		
	ИначеЕсли СрокОтработкиПоНорме > НовыйСрокОтработки Тогда
		
		НовыйСрокОтработки = СрокОтработкиПоНорме;	
	
	КонецЕсли;
													
КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибкиУказанияДатОбработки(СтруктураРеквизитов, ДатаИсправления, ИменаРеквизитов, СтрокаРеквизитов)
	
	ЕстьОшибкаУказанияДат = Ложь;
	
	Для Каждого Реквизит из СтруктураРеквизитов Цикл
		
		Если Реквизит.Ключ = "ДатаСоздания" ИЛИ Реквизит.Ключ = "ДатаРегистрации" ИЛИ Реквизит.Ключ = "ДатаРассмотрения" Тогда
			Если Реквизит.Значение > ДатаИсправления Тогда
				
				ЕстьОшибкаУказанияДат = Истина;
				
				Если ЗначениеЗаполнено(СтрокаРеквизитов) Тогда
					СтрокаРеквизитов = СтрокаРеквизитов + Символы.ПС;
				КонецЕсли;
				
				Если Реквизит.Ключ = "ДатаСоздания" Тогда
					Синоним = "Дата создания";
				ИначеЕсли Реквизит.Ключ = "ДатаРегистрации" Тогда
					Синоним = "Дата регистрации";
				ИначеЕсли Реквизит.Ключ = "ДатаРассмотрения" Тогда
					Синоним = "Дата рассмотрения";
				КонецЕсли;
				
				СтрокаРеквизитов = СтрокаРеквизитов + Синоним + ": " + Формат(Реквизит.Значение, "ДЛФ=DT");
				
				ИменаРеквизитов.Добавить(Реквизит.Ключ);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Реквизит.Ключ = "ДатаПроверки" ИЛИ Реквизит.Ключ = "ДатаЗакрытия" Тогда
			Если Реквизит.Значение < ДатаИсправления И ЗначениеЗаполнено(Реквизит.Значение) Тогда
				
				ЕстьОшибкаУказанияДат = Истина;
				
				Если ЗначениеЗаполнено(СтрокаРеквизитов) Тогда
					СтрокаРеквизитов = СтрокаРеквизитов + Символы.ПС;
				КонецЕсли;
				
				Если Реквизит.Ключ = "ДатаПроверки" Тогда
					Синоним = "Дата проверки";
				ИначеЕсли Реквизит.Ключ = "ДатаЗакрытия" Тогда
					Синоним = "Дата регистрации";
				КонецЕсли;
				
				СтрокаРеквизитов = СтрокаРеквизитов + Синоним + ": " + Формат(Реквизит.Значение, "ДЛФ=DT");
				
				ИменаРеквизитов.Добавить(Реквизит.Ключ);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибкаУказанияДат;
	
КонецФункции

&НаСервере
Процедура УстановитьИнформациюОбИсправленииВТехническомПроекте()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ГруппаИсправлениеВТехническихПроектах.ТекущаяСтраница = Элементы.ГруппаДобавитьВТехническийПроект;
	Иначе
		МассивТехническихПроектов = Справочники.Ошибки.ТехническиеПроектыИсправляющиеОшибку(Объект.Ссылка);
		
		Если МассивТехническихПроектов.Количество()=0 Тогда
			ИсправляющийТехническийПроект = Справочники.ТехническиеПроекты.ПустаяСсылка();
			Элементы.ГруппаИсправлениеВТехническихПроектах.ТекущаяСтраница = Элементы.ГруппаДобавитьВТехническийПроект;
		ИначеЕсли МассивТехническихПроектов.Количество()=1 Тогда
			ИсправляющийТехническийПроект = МассивТехническихПроектов[0];
			Элементы.ГруппаИсправлениеВТехническихПроектах.ТекущаяСтраница = Элементы.ГруппаИсправляющийТехническийПроект;
		Иначе
			ИсправляющийТехническийПроект = Справочники.ТехническиеПроекты.ПустаяСсылка();
			Элементы.ГруппаИсправлениеВТехническихПроектах.ТекущаяСтраница = Элементы.ГруппаИсправляющиеТехническиеПроекты;
			ТекстЗаголовкаКоманды = НСтр("ru='Технические проекты, исправляющие ошибку (%Количество%)'");
			ТекстЗаголовкаКоманды = СтрЗаменить(ТекстЗаголовкаКоманды, "%Количество%", МассивТехническихПроектов.Количество());
			Элементы.ТехническиеПроектыДляИсправленияОшибки.Заголовок = ТекстЗаголовкаКоманды;
		КонецЕсли;
			
	КонецЕсли;
	
	УстановитьДоступностьКомандыДобавленияОшибкиВТехническийПроект();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыДобавленияОшибкиВТехническийПроект()
	
	Элементы.ДобавитьОшибкуВТехническийПроект.Доступность =
		ДоступноИзменениеТехническихПроектов И Объект.Признана;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавлениеОшибкиВТехническийПроект(Техническийпроект)
	
	Попытка
		ТехническийПроектОбъект = ТехническийПроект.ПолучитьОбъект();
		ТехническийПроектОбъект.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось заблокировать технический проект'");
		ВызватьИсключение(ТекстСообщения);
	КонецПопытки;
	
	НоваяСтрока = ТехническийПроектОбъект.ИдеиИОшибки.Добавить();
	НоваяСтрока.Идея = Объект.Ссылка;
	
	ТехническийПроектОбъект.Записать();
	ТехническийПроектОбъект.Разблокировать();

	ИсправляющийТехническийПроект = Техническийпроект;
	УстановитьИнформациюОбИсправленииВТехническомПроекте();
	
КонецПроцедуры

&НаСервере
Функция ИнформацияОЗамещенииПользователя()
	
	Возврат Справочники.Ошибки.ДанныеОЗамещенииПользователяВРаботеСОшибками(Объект.КомуНаправлена, Объект.Владелец);
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписьюНаКлиенте()
	
	СтатусПоСтрокеПротокола = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПустаяСсылка");
	КомуНаправленаПоСтрокеПротокола = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ПоследнийКомментарийПротокола = "";
	
	ТекстПорядкаВоспроизведения = ПорядокВоспроизведения.ПолучитьТекст();
	
	Если ЗначениеЗаполнено(ТекстПорядкаВоспроизведения) И 
		Объект.МетодВыявленияОшибки = ПредопределенноеЗначение("Перечисление.МетодыВыявленияОшибок.АудитКода")
		И Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		
		ТекстНаименования = НСтр("ru = 'Аудит кода. %ПорядокВоспроизведения%'");
		ТекстНаименования = СтрЗаменить(ТекстНаименования, "%ПорядокВоспроизведения%", ТекстПорядкаВоспроизведения);
		ТекстНаименования = СтрЗаменить(ТекстНаименования, Символы.ВК, " ");
		ТекстНаименования = СтрЗаменить(ТекстНаименования, Символы.ПС, " ");
		ТекстНаименования = СтрЗаменить(ТекстНаименования, "  ", " ");
		
		Объект.Наименование = ТекстНаименования;
		
	КонецЕсли;
	
	Если Объект.Протокол.Количество()>0 Тогда
		ПоследняяСтрока = Объект.Протокол.Получить(0);
		СтатусПоСтрокеПротокола =  ПоследняяСтрока.Статус;
		КомуНаправленаПоСтрокеПротокола = ПоследняяСтрока.КомуНаправлена;
		ПоследнийКомментарийПротокола = ПоследняяСтрока.Комментарий;
	КонецЕсли;
	
	Если Объект.Статус <> СтатусПоСтрокеПротокола ИЛИ Объект.КомуНаправлена <> КомуНаправленаПоСтрокеПротокола 
		ИЛИ (ПоследнийКомментарийПротокола <> Комментарий И Комментарий <> "") Тогда
		ДобавитьЗаписьВПротокол(ТекущийПользователь, Комментарий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ИнформацияОПоследнемНаправлении()
	
	СтруктураИнформации = Новый Структура;
	СтруктураИнформации.Вставить("Дата", '00010101');
	СтруктураИнформации.Вставить("КомуНаправлена", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	
	Если Объект.Протокол.Количество()>0 Тогда
		
		СтрокаПротокола = Объект.Протокол[0];
		
		СтруктураИнформации.Вставить("Дата", СтрокаПротокола.Дата);
		СтруктураИнформации.Вставить("КомуНаправлена", СтрокаПротокола.КомуНаправлена);
		
	КонецЕсли;
	
	Возврат СтруктураИнформации;
	
КонецФункции

&НаСервере
Процедура УстановитьАвтоИсправлениеВВетках()
	
	Если НЕ Объект.Исправлена ИЛИ НЕ АвтоматическиИсправлятьОшибкиВВетках Тогда
		Возврат;
	КонецЕсли;
	
	ВеткиДляОбработки = Объект.ИсправлениеВВетках.Выгрузить().ВыгрузитьКолонку("Ветка");
	РеквизитыВеток = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВеткиДляОбработки, "ИзмененияПомещаютсяТолькоЧерезДругиеВетки");
	
	Для Каждого СтрокаТЧ из Объект.ИсправлениеВВетках Цикл
		Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
			
			СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена;
			СтрокаТЧ.ДатаИсправления = Объект.ДатаИсправления;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВеткаИсправления) Тогда
				
				РеквизитыВетки = РеквизитыВеток.Получить(СтрокаТч.Ветка);
				Если РеквизитыВетки.ИзмененияПомещаютсяТолькоЧерезДругиеВетки <> Истина Тогда
					СтрокаТЧ.ВеткаИсправления = СтрокаТЧ.Ветка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
																		 
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРазделаСервер()
	
	ЗаполнитьОтветственногоЗаРаздел();
	
	Объект.ОтветственныйЗаРаздел = ОтветственныйЗаРаздел;
	
	УстановитьСписокВыбораКомуНаправлена();
	
	Если ОшибкаПодлежитЗакрытию И Объект.Закрыта
		ИЛИ НЕ ОшибкаПодлежитЗакрытию И Объект.Проверена Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КомуНаправлена) И ЗначениеЗаполнено(Объект.РазделПроекта) Тогда
		
		Объект.КомуНаправлена = ОтветственныйЗаРаздел;
		
		// Если настроено замещение, то подставляется замещающий
		Если ЗначениеЗаполнено(Объект.КомуНаправлена) Тогда
			РазделПроектаПриИзмененииСервер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУказаниеРазделаИОтветственного()
	
	Если НЕ ЗначениеЗаполнено(Объект.РазделПроекта) И ЗначениеЗаполнено(Объект.ОтветственныйЗаРаздел) Тогда
		Объект.ОтветственныйЗаРаздел = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьФорматированныхПолей()
	
	Если Элементы.Найти("ПорядокВоспроизведения") <> Неопределено Тогда
		Элементы.ПорядокВоспроизведения.ТолькоПросмотр = НЕ ДоступноИзменениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СрочностьИсправленияПовышена(СтараяСрочностьИсправления, НоваяСрочностьИсправления)
	
	СрочностьПовышена = Ложь;
	
	Если НоваяСрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.Немедленно
		И СтараяСрочностьИсправления <> Перечисления.СрочностьИсправленияОшибок.Немедленно Тогда
		
		СрочностьПовышена = Истина;
		
	ИначеЕсли  НоваяСрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее
		И СтараяСрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке Тогда
		
		СрочностьПовышена = Истина;
		
	КонецЕсли;
	
	Возврат СрочностьПовышена;
	
КонецФункции

&НаКлиенте
Функция НомерСтрокиСценарияИзПорядкаВоспроизведения(Текст)
	
	СтрокиДляПоиска = Новый Массив;
	СтрокиДляПоиска.Добавить("Строка сценария №");
	СтрокиДляПоиска.Добавить("Строка вложенного сценария №");
	
	МассивСтрок = СтрРазделить(Текст,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Стр = МассивСтрок[Ккк];
		
		Для Каждого СтрокаПоиска Из СтрокиДляПоиска Цикл
			Если Найти(Стр,СтрокаПоиска) > 0 Тогда
				Поз = Найти(Стр,СтрокаПоиска);
				
				НомерСтрокиСценарияВТексте = СокрЛП(Сред(Стр,Поз + СтрДлина(СтрокаПоиска)));
				НомерСтрокиСценарияВТексте = СтрЗаменить(НомерСтрокиСценарияВТексте,Символы.НПП,"");
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСтрокиСценарияВТексте) Тогда
					Возврат Число(НомерСтрокиСценарияВТексте); 
				КонецЕсли;	 
				
			КонецЕсли;	 
		КонецЦикла;	
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции	

&НаСервереБезКонтекста
Функция СценарийПоUID(UID)
	Возврат Справочники.СценарииРаботыПользователей.ПолучитьСсылку(UID); 
КонецФункции	 

&НаКлиенте
Процедура ОткрытьСценарийПользователя(ТекстСсылки = Неопределено)
	
	Ветка = ПредопределенноеЗначение("Справочник.Ветки.ПустаяСсылка");
	Если Объект.Обнаружена = ПредопределенноеЗначение("Перечисление.МестаОбнаруженияОшибок.ВВетке") Тогда
		Ветка = Объект.ВеткаОбнаружения;
	КонецЕсли;
	
	Если ТекстСсылки <> Неопределено Тогда
		Поз = Найти(ТекстСсылки,"#");
		Стр = Сред(ТекстСсылки,Поз+1);
		Стр = Лев(Стр,СтрДлина(Стр)-1);
		
		МассивСтрок = СтрРазделить(Стр,";");
		Если МассивСтрок.Количество() <> 3 Тогда
			Возврат;
		КонецЕсли;	 
		
		UID = Новый УникальныйИдентификатор(МассивСтрок[2]);
		НомерСтрокиСценария = Число(МассивСтрок[1]);

		Если ХранитьСценарииРаботыПользователейВРепозитории Тогда
			ПараметрВетка = Ветка;
			Если НЕ ЗначениеЗаполнено(ПараметрВетка) Тогда
				ВеткиДляВыбора = Новый Массив;
				Для Каждого СтрокаИсправлениеВВетках Из Объект.ИсправлениеВВетках Цикл
					Если СтрокаИсправлениеВВетках.СостояниеИсправления = 
							ПредопределенноеЗначение("Перечисление.СостоянияИсправленияОшибок.ИсправлениеНеПланируется") Тогда
						Продолжить;
					КонецЕсли;						
					
					ВеткиДляВыбора.Добавить(СтрокаИсправлениеВВетках.Ветка);
					
				КонецЦикла;
				
				Если ВеткиДляВыбора.Количество() = 1 Тогда
					ПараметрВетка = ВеткиДляВыбора[0];
				ИначеЕсли ВеткиДляВыбора.Количество() > 1 Тогда
					Спс = Новый СписокЗначений;
					Спс.ЗагрузитьЗначения(ВеткиДляВыбора);
					
					ДопПараметры = Новый Структура;
					ДопПараметры.Вставить("UID", UID);
					ДопПараметры.Вставить("НомерСтрокиСценария", НомерСтрокиСценария);
					ОписаниеОповещения = Новый ОписаниеОповещения("ВыборВеткиДляОткрытияСценарияЗавершение", ЭтотОбъект, ДопПараметры);
					ПоказатьВыборИзСписка(ОписаниеОповещения,Спс);
					Возврат;
					
				КонецЕсли;	
				
			КонецЕсли;	
			
			ПараметрыФормы = Новый Структура("Проект, UIDСценария, Ветка, УникальныйИдентификатор, СсылкаНаОшибку", 
							Объект.Владелец, Строка(UID), ПараметрВетка, UID, Объект.Ссылка);
			Если НомерСтрокиСценария <> Неопределено Тогда
				ПараметрыФормы.Вставить("ПерейтиКСтрокеСценария", НомерСтрокиСценария);
			КонецЕсли;
			
			ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ПараметрыФормы);
			Возврат;

		Иначе
			ЭлементСценарий = СценарийПоUID(UID);
			
			ПараметрыФормы = Новый Структура("Ключ", ЭлементСценарий);
			Если НомерСтрокиСценария <> Неопределено Тогда
				ПараметрыФормы.Вставить("ПерейтиКСтрокеСценария",НомерСтрокиСценария);
			КонецЕсли;
			
			ОткрытьФорму("Справочник.СценарииРаботыПользователей.ФормаОбъекта",
				ПараметрыФормы,
				ЭтаФорма);
		
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	НомерСтрокиСценария = НомерСтрокиСценарияИзПорядкаВоспроизведения(Объект.ПорядокВоспроизведения);

	Если ХранитьСценарииРаботыПользователейВРепозитории Тогда
		
		ПараметрыФормы = Новый Структура("Проект, Тест, Ветка", Объект.Владелец, Объект.Тест, Ветка);
		Если НомерСтрокиСценария <> Неопределено Тогда
			ПараметрыФормы.Вставить("ПерейтиКСтрокеСценария",НомерСтрокиСценария);
		КонецЕсли;
		ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ПараметрыФормы);

	Иначе
	
		ПараметрыФормы = Новый Структура("Ключ", Объект.СценарийПользователя);
		Если НомерСтрокиСценария <> Неопределено Тогда
			ПараметрыФормы.Вставить("ПерейтиКСтрокеСценария",НомерСтрокиСценария);
		КонецЕсли;
		
		ОткрытьФорму("Справочник.СценарииРаботыПользователей.ФормаОбъекта",
		             ПараметрыФормы,
					 ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОшибкиСОдинаковымХешем()
	
	ПараметрыФормы = Новый Структура("Проект", Объект.Владелец);
	
	СписокХеш = Новый СписокЗначений;
	Для Каждого СтрокаТЧ из Объект.СписокОбъектов Цикл
		СписокХеш.Добавить(СтрокаТЧ.ХешУточнения);
	КонецЦикла;	
	
	ПараметрыФормы.Вставить("СписокХеш",СписокХеш);
	ПараметрыФормы.Вставить("ДатаРегистрации",ДобавитьМесяц(НачалоДня(ТекущаяДата()),-1));
	ИмяФормыСписка = "Справочник.Ошибки.Форма.ОшибкиСОдинаковымХешем";
	
	ОткрытьФорму(ИмяФормыСписка, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБлокирующиеТесты()
	
	ПараметрыФормы = Новый Структура("СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов, ОтборОшибка", 
		Истина,
		Истина,
		Объект.Ссылка);
		
	ОткрытьФорму(
		"Отчет.ТестыЗаблокированныеОшибками.Форма",
		ПараметрыФормы, ,
		Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СсылкаНаФайлСкриншотаСценария(Знач ТекстСсылки,СсылкаНаОшибку)
	
	Поз = Найти(ТекстСсылки,"#СкриншотСценария:");
	ТекстСсылки = Сред(ТекстСсылки,Поз);
	
	ТекстСсылки = СтрЗаменить(ТекстСсылки,"#СкриншотСценария:","");
	Поз = Найти(ТекстСсылки,"#");
	ИмяФайла = Лев(ТекстСсылки,Поз-1);
	
	
	ФайлыОшибки = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(СсылкаНаОшибку,ФайлыОшибки);
	ФайлыКартинок = Новый Массив;
	Для Каждого ТекФайл Из ФайлыОшибки Цикл
		Если НРег(ТекФайл.Наименование) <> НРег(ИмяФайла) Тогда
			Продолжить;
		КонецЕсли;	 
		
		ФайлыКартинок.Добавить(ТекФайл);
	КонецЦикла;	
	
	Если ФайлыКартинок.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Файл картинки <" + ИмяФайла + "> не найден.'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;	
	
	Возврат ФайлыКартинок[0]; 	
	
КонецФункции	 

&НаКлиенте
Процедура ОткрытьСкриншотСценария(ТекстСсылки)
	
	НужныйФайл = СсылкаНаФайлСкриншотаСценария(ТекстСсылки,Объект.Ссылка);
	
	ПредыдущийАдресФайла = "";
	ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(НужныйФайл,УникальныйИдентификатор,Истина);
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьТаблицуОбъектовМетаданныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРезультатамПоискаСервер(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРезультатамПоискаСервер(Результат, ДополнительныеПараметры)
	
	ПараметрыВыполнения = ДополнительныеПараметры.ПараметрыВыполнения;
	ИмяТаблицы          = ДополнительныеПараметры.ИмяТаблицы;
	ТаблицаМетаданные   = Объект[ИмяТаблицы].Выгрузить();

	ТаблицаОбъектов = Справочники.Ошибки.ТаблицаОбъектовПоРезультатамПоиска(ТаблицаМетаданные,
	                                                      ИмяТаблицы,
														  Объект.Владелец,
														  Результат,
														  ПараметрыВыполнения);
														  
	Для Каждого СтрокаТаблицы из ТаблицаОбъектов Цикл
		НоваяСтрока = Объект[ИмяТаблицы].Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмененныеОбработчики();
	
	Справочники.Ошибки.ЗаполнитьИзмененныеОбработчики(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИспользованиеПатчей()
	
	ИспользоватьПатчи = Истина;
	
	Элементы.ГруппаСоздаватьПатч.Видимость = ИспользоватьПатчи;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Патч = ПатчиСлужебный.ПатчПоОшибке(Объект.Ссылка);
	СтатусПатча = Справочники.Патчи.СтатусПатча(Патч);
	
	Элементы.СтатусПатча.Заголовок = СтатусПатча;
	
КонецПроцедуры

&НаСервере
Функция ОбработкаОткрытияКарточкиПатча()
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстСообщения", "");
	Результат.Вставить("Патч");
	Если Объект.Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована
		Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Результат.ТекстСообщения = НСтр("ru = 'Ошибка еще не зарегистрирована.'");
	ИначеЕсли Объект.Статус = Перечисления.СтатусыОшибок.НеПризнана
		Или Объект.Статус = Перечисления.СтатусыОшибок.Отозвана Тогда
		Результат.ТекстСообщения = НСтр("ru = 'Для непризнанных ошибок патчи не готовятся.'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.ТекстСообщения) Тогда
		Патч = ПатчиСлужебный.ПатчПоОшибке(Объект.Ссылка);
		Если Патч = Неопределено Тогда
			Результат.ТекстСообщения = НСтр("ru = 'Для данной ошибки патч не найден.'");
		Иначе
			Результат.Патч = Патч;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияПроектаНаПоддержке(Проект, Версия)
	
	Возврат Справочники.ВерсииПроекта.ВерсииНаПоддержке(Проект).Найти(Версия) <> Неопределено;
	
КонецФункции

&НаКлиентеНАСервереБезКонтекста
Процедура УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, ТипПроблемы, КоличествоОбъектов)
	
	Если ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбъектыМетаданных") Тогда
		ТекстЗаголовка = НСтр("ru='Объекты метаданных (%Количество%)'");
	ИначеЕсли ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбработчикиОбновления") Тогда
		ТекстЗаголовка = НСтр("ru='Обработчики обновления (%Количество%)'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Список объектов (без детализации) (%Количество%)'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Количество%", КоличествоОбъектов);
	Элементы.СписокПроблемныхОбъектов.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаПроблемыНаСервере()
	
	ТребуетсяОчистка = Ложь;
	
	Для Каждого СтрокаТаблицы из Объект.СписокОбъектов Цикл
		
		Если Объект.ТипПроблемы = Перечисления.ТипПроблемы.БезДетализации
			И ЗначениеЗаполнено(СтрокаТаблицы.ПроблемныйОбъект) Тогда
			ТребуетсяОчистка = Истина;
		ИначеЕсли Объект.ТипПроблемы = Перечисления.ТипПроблемы.ОбъектыМетаданных
			И ТипЗнч(СтрокаТаблицы.ПроблемныйОбъект) <> Тип("СправочникСсылка.ОбъектыМетаданных")
			И ТипЗнч(СтрокаТаблицы.ПроблемныйОбъект) <> Тип("СправочникСсылка.Подсистемы") Тогда
			ТребуетсяОчистка = Истина;
		ИначеЕсли Объект.ТипПроблемы = Перечисления.ТипПроблемы.ОбработчикиОбновления
			И ТипЗнч(СтрокаТаблицы.ПроблемныйОбъект) <> Тип("СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы") Тогда
			ТребуетсяОчистка = Истина;
		КонецЕсли;
		
		Если ТребуетсяОчистка Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Если ТребуетсяОчистка Тогда
		Объект.СписокОбъектов.Очистить();
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСписокОбъектовВИзмененные(СписокОбъектовДляПереноса)
	
	ПроблемаОбработчиков = (Объект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбработчикиОбновления"));

	Если ПроблемаОбработчиков Тогда
		
		Объект.ОбработчикиОбновления.Очистить();
		
		Для Каждого СтрокаТаблицы Из СписокОбъектовДляПереноса Цикл
			НоваяСтрока = Объект.ОбработчикиОбновления.Добавить();
			НоваяСтрока.ОбработчикОбновления  = СтрокаТаблицы.ПроблемныйОбъект;
			НоваяСтрока.ОписаниеИзменений     = СтрокаТаблицы.ПодчиненныйОбъект;
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОПеренаправленииОшибкиПоАудиту(Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	
	Если Параметр.Свойство("ОбновлятьСписокОбъектов") Тогда
		Если Параметр.ОбновлятьСписокОбъектов Тогда
			ОбновитьСписокОбъектов(Параметр.СписокОбъектов, ИдентификаторыСтрок);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	
	ВыполнитьПеренаправлениеОшибкиПоАудиту("СписокОбъектов", ИдентификаторыСтрок, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОНепризнанииОшибкиПоАудиту(Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыСтрок = Новый Массив;
	
	Если Параметр.Свойство("ОбновлятьСписокОбъектов") Тогда
		Если Параметр.ОбновлятьСписокОбъектов Тогда
			ОбновитьСписокОбъектов(Параметр.СписокОбъектов, ИдентификаторыСтрок);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	
	ВыполнитьНепризнаниеОшибкиПоАудиту("СписокОбъектов", ИдентификаторыСтрок, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОЗаписиПовторяемойОшибки(ПараметрОповещения);
	
	Если НЕ ЗначениеЗаполнено(Объект.ПовторяемаяОшибка)
		И ТипЗнч(ПараметрОповещения) = Тип("СправочникСсылка.Ошибки")
		И ЗначениеЗаполнено(ПараметрОповещения) Тогда
		
		Объект.ПовторяемаяОшибка = ПараметрОповещения;
		
		Модифицированность = Истина;
		
		Объект.ОжидаетИсправленияПовторяемой = Истина;
		
		МассивИзмененных = Новый Массив;
		МассивИзмененных.Добавить("ОжидаетИсправленияПовторяемой");
		УстановитьСтатусныеРеквизитыПоФлагам(МассивИзмененных);
		
		Объект.КомуНаправлена = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
		ПриОбработкеОповещенияОЗаписиПовторяемойОшибкиСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПеренаправлениеОшибкиПоАудиту(ИмяТаблицы, ИдентификаторыСтрокТаблицы, ФормаИсточник=Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрокТаблицы", ИдентификаторыСтрокТаблицы);
	ДополнительныеПараметры.Вставить("ФормаИсточник", ФормаИсточник);
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренаправитьОшибкуПоАудитуПослеЗаписи", ЭтотОбъект,
			ДополнительныеПараметры);
			
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
		
		Записать(СтруктураПараметровЗаписи);
		
		Отказ = Ложь;
		ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
		
	Иначе
	
		ПараметрыОповещения = Новый ОписаниеОповещения("ЗарегистрироватьПеренаправляемуюОшибку", ЭтотОбъект,
			ДополнительныеПараметры);
			
		Если ФормаИсточник <> Неопределено Тогда
			ВладелецДляФормы = ФормаИсточник;
		Иначе
			ВладелецДляФормы = ЭтотОбъект;
		КонецЕсли;
			
		ОткрытьФорму("Справочник.Ошибки.Форма.ПеренаправлениеОшибки",
					,
					ВладелецДляФормы,
					,
					,
					,
					ПараметрыОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНепризнаниеОшибкиПоАудиту(ИмяТаблицы, ИдентификаторыСтрокТаблицы, ФормаИсточник=Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицы", ИмяТаблицы);
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрокТаблицы", ИдентификаторыСтрокТаблицы);
	ДополнительныеПараметры.Вставить("ФормаИсточник", ФормаИсточник);
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НеПризнаватьОшибкуПоАудитуПослеЗаписи", ЭтотОбъект,
			ДополнительныеПараметры);
			
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
		
		Записать(СтруктураПараметровЗаписи);
		
		Отказ = Ложь;
		ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
		
	Иначе
	
		ПараметрыОповещения = Новый ОписаниеОповещения("ЗарегистрироватьНеПризнаваемуюОшибку", ЭтотОбъект,
			ДополнительныеПараметры);
			
		Если ФормаИсточник <> Неопределено Тогда
			ВладелецДляФормы = ФормаИсточник;
		Иначе
			ВладелецДляФормы = ЭтотОбъект;
		КонецЕсли;
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("КомуНаправить", Объект.Автор);
		ПараметрыОткрытияФормы.Вставить("Заголовок",     НСтр("ru = 'Непризнание ошибки'"));
	
		ОткрытьФорму("Справочник.Ошибки.Форма.ПеренаправлениеОшибки",
					ПараметрыОткрытияФормы,
					ВладелецДляФормы,
					,
					,
					,
					ПараметрыОповещения,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокОбъектов(ПолученныйСписокОбъектов, ИдентификаторыСтрок)
	
	Объект.СписокОбъектов.Очистить();
	
	Для Каждого Структура из ПолученныйСписокОбъектов Цикл
		СтрокаТЧ = Объект.СписокОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Структура);
		
		Если Структура.Переносить Тогда
			ИдентификаторыСтрок.Добавить(СтрокаТЧ.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПризнакаПубликацииСборкиВоспроизведения()
	
	СборкаОпубликована = Ложь;
	
	Если ЗначениеЗаполнено(Объект.СборкаОбнаружения) Тогда
		СборкаОпубликована = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СборкаОбнаружения, "Опубликована");
	КонецЕсли;
	
	Элементы.СборкаОбнаруженияОпубликована.Видимость = СборкаОпубликована;
	Элементы.СборкаОбнаруженияДатаПубликации.Видимость = СборкаОпубликована;
	
КонецПроцедуры

&НаСервере
Функция ИзмененыКлючевыеРеквизитыДляСрокаОтработки()
	
	ЕстьИзменения = Ложь;
	
	Если ИсходноеЗначениеСрочностьИсправления <> Объект.СрочностьИсправления Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ИсходноеЗначениеСтатус <> Объект.Статус Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ИсходноеЗначениеВерсияИсправления <> Объект.ВерсияИсправления Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ИсходноеЗначениеКомуНаправлена) И НЕ ЗначениеЗаполнено(Объект.КомуНаправлена))
		ИЛИ (НЕ ЗначениеЗаполнено(ИсходноеЗначениеКомуНаправлена) И ЗначениеЗаполнено(Объект.КомуНаправлена)) Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ИсходноеЗначениеЕстьИзмененияВПроектныхРешениях <> Объект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ИсходноеЗначениеИсправляется <> Объект.Исправляется Тогда
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ПереключитьХронометражНаСервере(Ссылка)
	
	Возврат УчетВремени.ПереключитьХронометраж(Ссылка);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьГдеОшибка()
	
	Элементы.ГдеИсправленаОшибка.Видимость = УказыватьВОшибкахМестоИсправления;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВеткуИТипВеткиОбнаружения()
	
	Если Объект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		
		Если ЗначениеЗаполнено(Объект.ВеткаОбнаружения) Тогда
			ВеткаОбнаружения = Объект.ВеткаОбнаружения;
			ТипВеткиОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВеткаОбнаружения, "Тип");
		Иначе
			ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
			ТипВеткиОбнаружения = Перечисления.ТипыВеток.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли Объект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		
		Если ЗначениеЗаполнено(Объект.СборкаОбнаружения) Тогда
			ВеткаОбнаружения = Справочники.Ошибки.ВеткаПоСборке(Объект.СборкаОбнаружения);
			
			Если ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
				ТипВеткиОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаОбнаружения, "Тип");
			Иначе
				ТипВеткиОбнаружения = Перечисления.ТипыВеток.ПустаяСсылка();
			КОнецЕсли;
		Иначе
			ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
			ТипВеткиОбнаружения = Перечисления.ТипыВеток.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
		ТипВеткиОбнаружения = Перечисления.ТипыВеток.ПустаяСсылка();
	КонецЕсли;
	
КОнецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТехническихПроектовОбнаружения()
	
	Если Объект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке
		И ТипВеткиОбнаружения = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
		СписокТехническихПроектовОбнаружения.ЗагрузитьЗначения(Справочники.Ветки.ТехническиеПроектыИспользующиеВетку(Объект.ВеткаОбнаружения));
	Иначе
		СписокТехническихПроектовОбнаружения.Очистить();
	КонецЕсли;
	
	ОтображениеСпискаТехническихПроектов = "";
	
	Для Каждого ЗначениеСписка из СписокТехническихПроектовОбнаружения Цикл
		Если ЗначениеЗаполнено(ОтображениеСпискаТехническихПроектов) Тогда
			Префикс = ";";
		КонецЕсли;
		ОтображениеСпискаТехническихПроектов = ОтображениеСпискаТехническихПроектов + Префикс + Строка(ЗначениеСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеИнформацииОбОбнаружении()
	
	КоличествоТехническихПроектов = СписокТехническихПроектовОбнаружения.Количество();
	
	Элементы.ОтображениеСпискаТехническихПроектов.Видимость = КоличествоТехническихПроектов>0;
	
	Если КоличествоТехническихПроектов>1 Тогда
		ЗаголовокПоля = НСтр("ru='Технические проекты'");
	Иначе
		ЗаголовокПоля = НСтр("ru='Технический проект'");
	КонецЕсли;
	
	Элементы.ОтображениеСпискаТехническихПроектов.Заголовок = ЗаголовокПоля;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВариантаИсправленияСервер(РассчитыватьВерсиюИсправления)
	
	Если РассчитыватьВерсиюИсправления Тогда
		
		ТребуетсяИзменитьВерсию = Ложь;
		
		Если Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
			
			ВеткаВерсииИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВерсияИсправления, "Ветка");
			// Если версия исправления разрабатывается в ветке обнаружения,
			// ее изменять не требуется
			Если ВеткаВерсииИсправления <> ВеткаОбнаружения Тогда
				ТребуетсяИзменитьВерсию = Истина;
			КонецЕсли;
			
		ИначеЕсли Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
			
			ТипВеткиВерсииИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВерсияИсправления, "Ветка.Тип");
			// Если версия исправления разрабатывается в основной ветке проекта,
			// ее изменять не требуется
			Если ТипВеткиВерсииИсправления <> Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
				ТребуетсяИзменитьВерсию = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяИзменитьВерсию Тогда
			
			ДанныеОбнаружения = Новый Структура;
			ДанныеОбнаружения.Вставить("Обнаружена", Объект.Обнаружена);
			ДанныеОбнаружения.Вставить("ВеткаОбнаружения", Объект.ВеткаОбнаружения);
			ДанныеОбнаружения.Вставить("СборкаОбнаружения", Объект.СборкаОбнаружения);
			ДанныеОбнаружения.Вставить("ДатаОбнаружения", Объект.ДатаОбнаружения);
	
			Объект.ВерсияИсправления = Справочники.Ошибки.ВерсияИсправления(Объект.Владелец,
												 ДанныеОбнаружения,
												 Объект.СрочностьИсправления,
												 Объект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
												 Объект.Исправляется);
		КонецЕсли;
	КонецЕсли;
	
	АктуализироватьИсправлениеВВетках();
	УстановитьОтображениеИсправленияВВетках();
	УстановитьВидимостьВеткиИсправления();
	
	Если Объект.Статус = Перечисления.СтатусыОшибок.Признана
		И Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		УстановитьСрокОтработки();
	КонецЕсли;
	
	ПеренестиДанныеВеткиИсправленияПриСменеВариантаИсправления();
	УстановитьВеткуИсправления();
	
	Исправляется = Объект.Исправляется;
	
	Если Объект.Исправляется <> Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		ВеткаИсправленияДляОсновнойВеткиПроекта = Справочники.Ветки.ПустаяСсылка();
		ВеткаИсправленияДляВеткиОбнаружения = Справочники.Ветки.ПустаяСсылка();
	КонецЕсли;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантИсправления(РассчитыватьВерсиюИсправления=Ложь)
	
	Если Объект.Исправлена Тогда
		Возврат; // Для уже исправленных ошибок вариант исправления не изменяется.
	КонецЕсли;
	
	Объект.Исправляется = Справочники.Ошибки.ВариантИсправления(ВеткаОбнаружения, Объект.МетодВыявленияОшибки,
	                      Объект.ВерсияИсправления);
	
	ПриИзмененииВариантаИсправленияСервер(РассчитыватьВерсиюИсправления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВыбораВеткиИсправления(ПараметрыПолученияДанных)
	
	Возврат Справочники.Ветки.ПолучитьДанныеВыбора(ПараметрыПолученияДанных)
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВеткиНаСервере()
	
	АктуализироватьИсправлениеВВетках();
	УстановитьОтображениеИсправленияВВетках();
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления()
	
	Если Объект.Исправляется <> Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВерсияИсправления) Тогда
		
		ВеткаВерсииИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВерсияИсправления, "Ветка");
		
		Если Не ЗначениеЗаполнено(ВеткаВерсииИсправления) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Ветка", ВеткаВерсииИсправления);
		СтрокиТЧ = Объект.ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТЧ.Количество()>0 Тогда
			СтрокаВетки = СтрокиТЧ[0];
		Иначе
			СтрокаВетки = Объект.ИсправлениеВВетках.Добавить();
			СтрокаВетки.Ветка = ВеткаВерсииИсправления;
			СтрокаВетки.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление;
		КонецЕсли;
		
		Если Объект.Исправлена Тогда
			
			Если СтрокаВетки.СостояниеИсправления <> Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
				СтрокаВетки.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаВетки.ДатаИсправления) Тогда
				СтрокаВетки.ДатаИсправления = Объект.ДатаИсправления;
			КонецЕсли;
			
			Если АвтоматическиИсправлятьОшибкиВВетках И НЕ ЗначениеЗаполнено(СтрокаВетки.ВеткаИсправления) Тогда
				НельзяПомещатьНапрямую = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаВетки.Ветка, "ИзмененияПомещаютсяТолькоЧерезДругиеВетки");
				Если НельзяПомещатьНапрямую <> Истина Тогда
					СтрокаВетки.ВеткаИсправления = СтрокаВетки.Ветка;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если СтрокаВетки.СостояниеИсправления <> Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
				СтрокаВетки.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление;
			КонецЕсли;
			СтрокаВетки.ДатаИсправления = '00010101';
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИзменитьДатуИсправленияВВеткеВерсииИсправления()
	
	Если Объект.Исправляется <> Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВерсияИсправления) Тогда
		
		ВеткаВерсииИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВерсияИсправления, "Ветка");
		
		Если Не ЗначениеЗаполнено(ВеткаВерсииИсправления) Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Ветка", ВеткаВерсииИсправления);
		СтрокиТЧ = Объект.ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиТЧ.Количество()>0 Тогда
			СтрокаВетки = СтрокиТЧ[0];
			Если СтрокаВетки.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
				Если СтрокаВетки.ДатаИсправления <> Объект.ДатаИсправления Тогда
					СтрокаВетки.ДатаИсправления = Объект.ДатаИсправления;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдаляетсяСтрокаВеткиВерсииИсправления(Ветка)
	
	Результат = Ложь;
	
	ВеткаВерсииИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВерсияИсправления, "Ветка");
	
	Если ЗначениеЗаполнено(ВеткаВерсииИсправления) Тогда
		Если Ветка = ВеткаВерсииИсправления Тогда
			
			СтруктураОтбора = Новый Структура("Ветка", Ветка);
			СтрокиВетки = Объект.ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиВетки.Количество()=1 Тогда
				Результат = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗавершитьУдалениеСтрокиВетки()
	
	Объект.ИсправлениеВВетках.Удалить(Объект.ИсправлениеВВетках.НайтиПоИдентификатору(Элементы.ИсправлениеВВетках.ТекущаяСтрока));
	УстановитьОтображениеИсправленияВВетках();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОбнаружения()
	
	Если Объект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		Если ЗначениеЗаполнено(Объект.СборкаОбнаружения) Тогда
			ДатаОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СборкаОбнаружения, "ДатаСборки");
		Иначе
			ДатаОбнаружения = '00010101';
		КонецЕсли;
	Иначе
		ДатаОбнаружения = Объект.ДатаОбнаружения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВеткиВОтдельнуюОшибкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыделитьВеткиВОтдельнуюОшибкуПослеЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
	Иначе
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВеткиВОтдельнуюОшибкуПослеЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьВыделениеВетокДляИсправленияВОтдельнуюОшибку(ДополнительныеПараметры.ОбрабатываемыеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыделениеВетокДляИсправленияВОтдельнуюОшибку(ОбрабатываемыеСтроки)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТаблицы", "ИсправлениеВВетках");
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрокТаблицы", ОбрабатываемыеСтроки);
	
	ОтдельнаяОшибка = ЗарегистрироватьОшибкуСВыделениемВетокНаСервере(ДополнительныеПараметры);
		
	Если Не ЗначениеЗаполнено(ОтдельнаяОшибка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОповещения = НСтр("ru='Зарегистрирована ошибка: %Ошибка%'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Ошибка%", Объект.Наименование);
	ПоказатьОповещениеПользователя(НСтр("ru='Регистрация ошибки:'"),
	ПолучитьНавигационнуюСсылку(ОтдельнаяОшибка), ТекстОповещения, БиблиотекаКартинок.Информация32);
	
	ИсторияРаботыПользователя.Добавить(ОтдельнаяОшибка);
		
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьОшибкуСВыделениемВетокНаСервере(ДополнительныеПараметры)
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	
	Ошибка = Справочники.Ошибки.СоздатьЭлемент();
	
	Ошибка.Основание = Объект.Ссылка;
	
	Реквизиты = "Наименование, Владелец, ВерсияИсправления, ВерсияПлатформы, ДатаОбнаружения, ИсходнаяИнформацияОбОшибке, 
	|Клиент, МетодВыявленияОшибки, ОписаниеИзменений, ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников, Зарегистрировал, 
	|ПорядокВоспроизведения, РазделПроекта, СборкаОбнаружения, СрочностьИсправления, СУБД, 
	|ЗарегистрированаИзАПК, Обнаружена, Исправляется, Зарегистрирована, Признана, Рассмотрел, 
	|ВеткаОбнаружения, Стандарт, ТипПроблемы, ВидПроблемы";
	
	ЗаполнитьЗначенияСвойств(Ошибка, Объект, Реквизиты);
	
	Если ДополнительныеПараметры.Свойство("Статус") Тогда
		Статус = ДополнительныеПараметры.Статус;
	Иначе
		Если Ошибка.Признана Тогда
			Статус = Перечисления.СтатусыОшибок.Признана;
		Иначе
			Статус = Перечисления.СтатусыОшибок.Зарегистрирована;
		КонецЕсли;
	КонецЕсли;
	
	ДатаОшибки  = ТекущаяДатаСеанса();
	АвторОшибки = Пользователи.ТекущийПользователь();
	
	Ошибка.Зарегистрирована = Истина;
	
	Ошибка.ДатаСоздания     = ДатаОшибки;
	Ошибка.ДатаРегистрации  = ДатаОшибки;
	Ошибка.Автор            = АвторОшибки;
	Ошибка.Статус           = Статус;
	Ошибка.Основание        = Объект.Ссылка;
	Ошибка.КомуНаправлена   = Объект.КомуНаправлена;
	Ошибка.ДатаНаправления  = ДатаОшибки;
	
	Если Статус = Перечисления.СтатусыОшибок.Признана Тогда
		Ошибка.ДатаРассмотрения = ДатаОшибки;
		
		Если НЕ ЗначениеЗаполнено(Ошибка.Рассмотрел) Тогда
			Ошибка.Рассмотрел  = АвторОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ошибка.Зарегистрировал) Тогда
		Ошибка.Зарегистрировал  = АвторОшибки;
	КонецЕсли;
	
	Ошибка.ХранилищеИсходнойИнформацииОбОшибке = Новый ХранилищеЗначения(ИсходнаяИнформацияОбОшибке);
	Ошибка.ХранилищеПорядкаВоспроизведения = Новый ХранилищеЗначения(ПорядокВоспроизведения);
	
	Если Объект.СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.НеПубликуется Тогда
		Ошибка.СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.НеПубликуется;
	КонецЕсли;
	
	// Добавим строку в протокол
	НоваяСтрока = Ошибка.Протокол.Добавить();
	
	НоваяСтрока.Автор          = АвторОшибки;
	НоваяСтрока.Дата           = ДатаОшибки;
	НоваяСтрока.КомуНаправлена = Ошибка.КомуНаправлена;
	НоваяСтрока.Статус         = Ошибка.Статус;
	
	Ошибка.РазделыПроекта.Загрузить(Объект.РазделыПроекта.Выгрузить());
	Ошибка.СписокОбъектов.Загрузить(Объект.СписокОбъектов.Выгрузить());
	
	// В выделенную ошибку переносятся все строки исходной ошибки
	Для Каждого СтрокаТЧ Из Объект.ИсправлениеВВетках Цикл
		
		НоваяСтрока = Ошибка.ИсправлениеВВетках.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		// Выделенные строки подлежат исправлению в создаваемой ошибке,
		// остальные - исправляются в отдельной (исходной, либо еще какой-то).
		ИдентификаторСтроки = СтрокаТЧ.ПолучитьИдентификатор();
		Если ДополнительныеПараметры.ИдентификаторыСтрокТаблицы.Найти(ИдентификаторСтроки) = Неопределено Тогда
			НоваяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправляетсяВОтдельнойОшибке;
		Иначе
			НоваяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление;
		КонецЕсли;
	КонецЦикла;
	
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(Объект.КомуНаправлена, Объект.Владелец, Комментарий, Ложь);
		
	Ошибка.Записать();
	
	Для Каждого Индекс Из ДополнительныеПараметры.ИдентификаторыСтрокТаблицы Цикл
		ТекущаяСтрока = Объект[ДополнительныеПараметры.ИмяТаблицы].НайтиПоИдентификатору(Индекс);
		ТекущаяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправляетсяВОтдельнойОшибке;
	КонецЦикла;
	
	Записать();
	
	Возврат Ошибка.Ссылка;
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияИсправленияВВетках()
	
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	УстановитьОтображениеИсправленияВВетках();
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияИсправленияВВетках()
	
	ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения();
	УстановитьОтображениеИсправленияВВетках();
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура НеПланируетсяИсправлятьСервер()
	
	Если Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		УстановитьНеПланируетсяИсправлятьДляВеток();
	КонецЕсли;
	
	ОбработатьКомандуДействияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОжидатьИсправленияПовторяемойОшибкиСервер()
	
	ОбработатьКомандуДействияСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНеПланируетсяИсправлятьДляВеток()
	
	Для Каждого СтрокаТЧ из Объект.ИсправлениеВВетках Цикл
		СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется;
		СтрокаТЧ.ДатаИсправления = '00010101';
	КонецЦикла;
	
	УстановитьОтображениеИсправленияВВетках();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВеткиИсправления()
	
	Элементы.ВеткаИсправления.Видимость =
		(Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения
		ИЛИ Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта);
	Элементы.ПодобратьВеткуАвтоматически.Видимость = Элементы.ВеткаИсправления.Видимость;
		
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВеткиИсправленияСервер()
	
	Если ЗначениеЗаполнено(Объект.ВеткаИсправления) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВеткаИсправления, "Статус") = Перечисления.СтатусыВеток.Заморожена Тогда
		Ветка = Объект.ВеткаИсправления.ПолучитьОбъект();
		Ветка.Статус = Перечисления.СтатусыВеток.Разрабатывается;
		Ветка.Записать();
	КонецЕсли;
	
	ВеткаИсправления = Объект.ВеткаИсправления;
	
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсправлениеВВеткахВеткаИсправленияПриИзмененииСервер(Ветка)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Статус") = Перечисления.СтатусыВеток.Заморожена Тогда
		ВеткаОбъект = Ветка.ПолучитьОбъект();
		ВеткаОбъект.Статус = Перечисления.СтатусыВеток.Разрабатывается;
		ВеткаОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьИсправлениеВВеткахПомимоОсновной()
	
	Результат = Ложь;
	
	ОсновнаяВетка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВерсияИсправления, "Ветка");
	
	Для Каждого СтрокаТЧ из Объект.ИсправлениеВВетках Цикл
		Если СтрокаТЧ.Ветка <> ОсновнаяВетка
			И СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПереходКПовторяемойОшибке(ПовторяемаяОшибка)
	
	ПоказатьЗначение(Неопределено, ПовторяемаяОшибка);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМетодаВыявленияНаСервере()
	
	УстановитьВариантИсправления();
	УстановитьВидимостьЭлементовАудитаКода();
	
КОнецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандыРегистрацииПовторяемойОшибки()
	
	Если Элементы.Найти("ЗарегистрироватьПовторяемуюОшибку") <> Неопределено Тогда
		Элементы.ЗарегистрироватьПовторяемуюОшибку.Доступность = НЕ ЗначениеЗаполнено(Объект.ПовторяемаяОшибка)
			И ДоступноИзменениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегистрациюПовторяемойОшибки()
	
	ПараметрыРегистрации = Новый Структура;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ПовторяющаяОшибка", Объект.Ссылка);
	
	ПараметрыРегистрации.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
	
	ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки",
	             ПараметрыРегистрации,ЭтотОбъект);
				 
КонецПроцедуры

&НаСервере
Процедура ПриОбработкеОповещенияОЗаписиПовторяемойОшибкиСервер()
	
	УстановитьДоступностьКомандыРегистрацииПовторяемойОшибки();
	ОжидатьИсправленияПовторяемойОшибкиСервер();
	УстановитьПодсказкуВводаПричинНепризнания();
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеВеткиИсправленияПриСменеВариантаИсправления()
	
	ПриемникВеткиИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаИсправления, "Приемник");
	
	Если (Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта
		ИЛИ Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения)
		И Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		
		Для Каждого СтрокаТЧ из Объект.ИсправлениеВВетках Цикл
				
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВеткаИсправления)
				И (СтрокаТЧ.Ветка = ВеткаИсправления ИЛИ СтрокаТЧ.Ветка = ПриемникВеткиИсправления) Тогда
				СтрокаТЧ.ВеткаИсправления = ВеткаИсправления;
			КонецЕсли;
			
			Если АвтоматическиИсправлятьОшибкиВВетках И Объект.Исправлена Тогда
				Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
					
					СтрокаТЧ.СОстояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена;
					СтрокаТч.ДатаИсправления = Объект.ДатаИсправления;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		
		Если Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
			Объект.ВеткаИсправления = ВеткаИсправленияДляОсновнойВеткиПроекта;
		ИначеЕсли Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
			Объект.ВеткаИсправления = ВеткаИсправленияДляВеткиОбнаружения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВеткуИсправленияДляОсновнойВеткиИВеткиОбнаружения()
	
	ПолученнаяВеткаДляОсновнойВетки = Справочники.Ветки.ПустаяСсылка();
	ПолученнаяВеткаДляВеткиОбнаружения = Справочники.Ветки.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Объект.Владелец)
		И Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		
		ОсновнаяВетка = Справочники.Ошибки.ОсновнаяВеткаПроекта(Объект.Владелец);
		
		Для Каждого СтрокаТЧ из Объект.ИсправлениеВВетках Цикл
				
			Если ЗначениеЗаполнено(ОсновнаяВетка) И СтрокаТЧ.Ветка = ОсновнаяВетка Тогда
				ПолученнаяВеткаДляОсновнойВетки = СтрокаТЧ.ВеткаИсправления;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВеткаОбнаружения) И СтрокаТЧ.Ветка = ВеткаОбнаружения Тогда
				ПолученнаяВеткаДляВеткиОбнаружения = СтрокаТЧ.ВеткаИсправления;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВеткаИсправленияДляОсновнойВеткиПроекта = ПолученнаяВеткаДляОсновнойВетки;
	ВеткаИсправленияДляВеткиОбнаружения = ПолученнаяВеткаДляВеткиОбнаружения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВеткуИсправления()
	
	Если Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВеткаИсправления) И ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
			
			Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаОбнаружения,"ИзмененияПомещаютсяТолькоЧерезДругиеВетки") Тогда
				Объект.ВеткаИсправления = ВеткаОбнаружения;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ВеткаИсправления) Тогда
			
			ОсновнаяВетка = Справочники.Ошибки.ОсновнаяВеткаПроекта(Объект.Владелец);
			
			Если ЗначениеЗаполнено(ОсновнаяВетка) Тогда
				Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяВетка,"ИзмененияПомещаютсяТолькоЧерезДругиеВетки") Тогда
					Объект.ВеткаИсправления = ОсновнаяВетка;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВеткиДляОткрытияСценарияЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	Если РезультатДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	UID = ДополнительныеПараметры.UID;
	НомерСтрокиСценария = ДополнительныеПараметры.НомерСтрокиСценария;
	ПараметрыФормы = Новый Структура("Проект, UIDСценария, Ветка, УникальныйИдентификатор, СсылкаНаОшибку", 
					Объект.Владелец, Строка(UID), РезультатДействия.Значение, UID, Объект.Ссылка);
	Если НомерСтрокиСценария <> Неопределено Тогда
		ПараметрыФормы.Вставить("ПерейтиКСтрокеСценария", НомерСтрокиСценария);
	КонецЕсли;
	
	ТестированиеКлиент.ОткрытьСценарийДляРедактированияВРепозитории(ПараметрыФормы);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуВводаПричинНепризнания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.ПовторяемаяОшибка) И ТипЗнч(Объект.ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки")
		И Не ЗначениеЗаполнено (Объект.ПричиныНепризнания) Тогда
		КодПовторяемой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ПовторяемаяОшибка, "Код");
		ТекстПодсказки = НСтр("ru='Дубль ошибки %КодПовторяемой%. Актуальную информацию см. в %КодПовторяемой%.'");
		ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%КодПовторяемой%", КодПовторяемой);
	Иначе
		ТекстПодсказки = "";
	КонецЕсли;
	
	Элементы.ПричиныНепризнания.ПодсказкаВвода = ТекстПодсказки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущаяВеткаДляИсправленияОшибок(ДопПараметры)
	
	ДанныеОшибки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДопПараметры.Ошибка, "Исправляется,Обнаружена");
	ТипВеткиОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДопПараметры.ВеткаОбнаружения, "Тип");
	Если ДанныеОшибки.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		ВеткаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДопПараметры.Проект, "Ветка");
	ИначеЕсли ДанныеОшибки.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения
		 	И ДанныеОшибки.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке
			И (ТипВеткиОбнаружения = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок
				ИЛИ ТипВеткиОбнаружения = Перечисления.ТипыВеток.ВеткаТехническогоПроекта)
			Тогда
			
			Возврат ДопПараметры.ВеткаОбнаружения;
			
	Иначе	
		ВеткаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДопПараметры.ВеткаОбнаружения, "Приемник");
		Если НЕ ЗначениеЗаполнено(ВеткаПриемник) Тогда
			ВеткаПриемник = ДопПараметры.ВеткаОбнаружения;
		КонецЕсли;	
	КонецЕсли;	
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ПодразделениеПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
		ВызватьИсключение НСтр("ru='У текущего пользователя не указано подразделение.'");
	КонецЕсли;
	
	СрочностьИсправленияОшибки = ДопПараметры.Срочность;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Владелец = &Владелец
		|	И Ветки.Тип = &Тип
		|	И Ветки.Приемник = &Приемник
		|	И Ветки.Статус = &Статус
		|	И Ветки.Подразделение = &Подразделение
		|	И Ветки.ПриоритетТестирования = &ПриоритетТестирования
		|	И НЕ Ветки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", ДопПараметры.Проект);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеПользователя);
	Запрос.УстановитьПараметр("Приемник", ВеткаПриемник);
	Если СрочностьИсправленияОшибки = Перечисления.СрочностьИсправленияОшибок.Немедленно Тогда
		Запрос.УстановитьПараметр("ПриоритетТестирования", Перечисления.ПриоритетыТестированияВеток.Срочный);
	Иначе	
		Запрос.УстановитьПараметр("ПриоритетТестирования", Перечисления.ПриоритетыТестированияВеток.Обычный);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВеток.Разрабатывается);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;

	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикСоздатьВеткуДляИсправленияОшибок(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Проект", Объект.Владелец);
		ДопПараметры.Вставить("ВеткаОбнаружения", Объект.ВеткаОбнаружения);
		ДопПараметры.Вставить("Ошибка", Объект.Ссылка);
		ДопПараметры.Вставить("Срочность", Объект.СрочностьИсправления);
		Если СоздатьВеткуНаСервере(ДопПараметры) Тогда
			Объект.ВеткаИсправления = ДопПараметры.СозданнаяВетка;
			Модифицированность = Истина;
			ПоказатьОповещениеПользователя(
				СтрШаблон(НСтр("ru='Ветка <%1> создана на сервере Gitlab.'"), ДопПараметры.СозданнаяВеткаИмя)
					,,, БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВопросЗаполнитьВеткуИсправления(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодобратьВеткуАвтоматическиСлужебный();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВеткуАвтоматическиСлужебный()
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Проект", Объект.Владелец);
	ДопПараметры.Вставить("ВеткаОбнаружения", Объект.ВеткаОбнаружения);
	ДопПараметры.Вставить("Ошибка", Объект.Ссылка);
	ДопПараметры.Вставить("Срочность", Объект.СрочностьИсправления);
	ТекВетка = ТекущаяВеткаДляИсправленияОшибок(ДопПараметры);
	Если ТекВетка = Неопределено Тогда
		ТекстВопроса = НСтр("ru='Подходящая ветка не найдена. Создать?'");
		ПараметрыОповещения = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикСоздатьВеткуДляИсправленияОшибок", 
			ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.ВеткаИсправления = ТекВетка;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьВеткуНаСервере(ДопПараметры)
	
	ТекВетка = Справочники.Ветки.СоздатьЭлемент();
	ВеткаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДопПараметры.ВеткаОбнаружения, "Приемник");
	Если НЕ ЗначениеЗаполнено(ВеткаПриемник) Тогда
		ВеткаПриемник = ДопПараметры.ВеткаОбнаружения;
	КонецЕсли;	
	ТекВетка.Источник = ВеткаПриемник;
	ТекВетка.Приемник = ВеткаПриемник;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Владелец", Объект.Владелец);
	ДанныеЗаполнения.Вставить("СрочностьОшибки", ДопПараметры.Срочность);
	Справочники.Ветки.ЗаполнитьРеквизитыВетки(ТекВетка,, ДанныеЗаполнения);

	СрочностьИсправленияОшибки = ДопПараметры.Срочность;
	Если СрочностьИсправленияОшибки = Перечисления.СрочностьИсправленияОшибок.Немедленно Тогда
		ТекВетка.СрочностьИсправленияОшибок = Перечисления.СрочностьИсправленияОшибок.Немедленно;
		ТекВетка.ПриоритетТестирования = Перечисления.ПриоритетыТестированияВеток.Срочный;
	Иначе	
		ТекВетка.СрочностьИсправленияОшибок = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее;
		ТекВетка.ПриоритетТестирования = Перечисления.ПриоритетыТестированияВеток.Обычный;
	КонецЕсли;
	
	ТекВетка.Наименование = ТекВетка.Имя;
	ТекВетка.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок;
	ТекВетка.Статус = Перечисления.СтатусыВеток.Разрабатывается;	
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ПодразделениеПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийПользователь, "Подразделение");
	Если НЕ ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
		ВызватьИсключение НСтр("ru='У текущего пользователя не указано подразделение.'");
	КонецЕсли;
	ТекВетка.Подразделение = ПодразделениеПользователя;
	
	ТестированиеЗапускТестирования.СоздатьВеткуВGitLab(
		ТекВетка.Владелец,
		ТекВетка.Имя,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекВетка.Источник, "Имя"));
	
	ТекВетка.Записать(); 
	
	ДопПараметры.Вставить("СозданнаяВетка", ТекВетка.Ссылка);
	ДопПараметры.Вставить("СозданнаяВеткаИмя", ТекВетка.Имя);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодразделениеПользователя(Пользователь)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "Подразделение");
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитыМетаданных(СписокОбъектов)
	
	Возврат Справочники.Ошибки.РеквизитыМетаданныхОшибки(СписокОбъектов);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОбъектовМетаданных()
	
	Если Объект.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектовМетаданных = Объект.СписокОбъектов.Выгрузить(, "ПроблемныйОбъект").ВыгрузитьКолонку("ПроблемныйОбъект");
	РеквизитыМетаданных = РеквизитыМетаданных(МассивОбъектовМетаданных);
	УстановитьСписокВыбораКомуНаправлена(РеквизитыМетаданных);
	Если УказыватьРазделПроекта И Не ЗначениеЗаполнено(Объект.РазделПроекта) Тогда
		Объект.РазделПроекта = РеквизитыМетаданных.РазделПроекта;
	КонецЕсли;
	
	Если Объект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбъектыМетаданных") Тогда
		УстановитьЗаголовокГиперссылкиСписокПроблемныхОбъектов(Элементы, Объект.ТипПроблемы, Объект.СписокОбъектов.Количество());
	Иначе
		Объект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбъектыМетаданных");
		ПриИзмененииТипаПроблемыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхПриИзменении(Элемент)
	
	// По умолчанию элемент формы относится к первой строке списка объекта метаданных,
	//	поэтому если мы его очистили - удаляем первую строку, если изменили - меняем первую строку.
	Если Не ЗначениеЗаполнено(ОбъектМетаданных) И Объект.СписокОбъектов.Количество() <> 0 Тогда
		Объект.СписокОбъектов.Удалить(0);
		Если Объект.СписокОбъектов.Количество() <> 0 Тогда
			ОбъектМетаданных = Объект.СписокОбъектов.Получить(0).ПроблемныйОбъект;
		КонецЕсли;
	Иначе
		Стр = ?(Объект.СписокОбъектов.Количество() <> 0, Объект.СписокОбъектов.Получить(0), Объект.СписокОбъектов.Добавить());
		Стр.ПроблемныйОбъект = ОбъектМетаданных;
	КонецЕсли;
	ПриИзмененииОбъектовМетаданных();
	
КонецПроцедуры

&НаСервере
Процедура МетаданныеПриИзмененииПроекта()
	
	Если Объект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбъектыМетаданных") И Объект.Владелец <> Проект Тогда
		// Изменился проект, необходимо очистить текущие метаданные.
		Объект.СписокОбъектов.Очистить();
		ОбъектМетаданных = Неопределено;
		ПриИзмененииОбъектовМетаданных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыОбнаружения()
	
	ЗаполнитьДатуОбнаружения();
	УстановитьВерсиюИсправления();
	УстановитьВариантИсправления();
	ПроверитьОчиститьВеткуИсправления();
	ПроверитьЗаполнитьИнформациюПоВеткеВерсииИсправления();
	ОбновитьОписаниеОшибки(ОписаниеОшибки);
	ПроверитьИспользованиеПатчей();
	
КонецПроцедуры

#КонецОбласти