
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДоступноИзменениеОшибок = РольДоступна("ДобавлениеИзменениеОшибок")
	                          ИЛИ РольДоступна("ПолныеПрава");
							  
	ДоступноПланированиеОтработки = РольДоступна("ПланированиеОтработкиОшибок")
	                          ИЛИ РольДоступна("ПолныеПрава");
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Список.ОсновнаяТаблица = "Справочник.Ошибки";
	Список.ДинамическоеСчитываниеДанных = Истина;
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "КомуНаправлена", КомуНаправлена, СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Автор", Автор, СтруктураБыстрогоОтбора);
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокОшибокВВетках, "Автор", Автор, СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "ВерсияИсправления", ВерсияИсправления, СтруктураБыстрогоОтбора);
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокОшибокВВетках, "ВерсияИсправления", ВерсияИсправления, СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокОшибокВВетках, "СостояниеИсправления", СостояниеИсправления, СтруктураБыстрогоОтбора);
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("Статус", СписокСтатусов, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоСтатусу();
	КонецЕсли;
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("СрочностьИсправления", СписокСрочностьИсправления, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоСрочностиИсправления();
	КонецЕсли;
	
	РазделПроекта = Параметры.РазделПроекта;
	УстановитьПараметрРаздел(Список, СписокОшибокВВетках, РазделПроекта);
	
	УстановитьПараметрКомуНаправлена(СписокОшибокВВетках, КомуНаправлена);
	
	Если Параметры.КлючНазначенияИспользования = "ПодборДляТехническихПроектов" 
		ИЛИ Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		Элементы.Список.РежимВыбора = Истина;
	Иначе
		Если ТипЗнч(СтруктураБыстрогоОтбора) <> Тип("Структура") Тогда
			Проекты.УстановитьОтборВСпискеПоПроекту(Список);
			Проекты.УстановитьОтборВСпискеПоПроекту(СписокОшибокВВетках);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПараметрыДляОтбораТехпроектов();
	
	УстановитьДоступностьЭлементов();
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.СписокКомандыФормы);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандКонтроля = Новый Массив;
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль"));
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(ЭтотОбъект, СпискиДляВыводаКомандКонтроля);
	// Конец ОбъектыНаКонтроле
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список, "КомуНаправлена", КомуНаправлена, СтруктураБыстрогоОтбора, Настройки);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список, "Автор", Автор, СтруктураБыстрогоОтбора, Настройки);
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список, "ВерсияИсправления", ВерсияИсправления, СтруктураБыстрогоОтбора, Настройки);
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(СписокОшибокВВетках, "СостояниеИсправления", СостояниеИсправления, СтруктураБыстрогоОтбора, Настройки);
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("Статус",
			"СписокСтатусов",
			СписокСтатусов,
			СтруктураБыстрогоОтбора,
			Настройки) Тогда
			
		УстановитьОтборПоСтатусу();
	КонецЕсли;
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("СрочностьИсправления",
			"СписокСрочностьИсправления",
			СписокСрочностьИсправления,
			СтруктураБыстрогоОтбора,
			Настройки) Тогда
			
		УстановитьОтборПоСрочностиИсправления();
	КонецЕсли;
	
	Если ТипЗнч(СтруктураБыстрогоОтбора) <> Тип("Структура") Тогда
		
		УстановитьПараметрКомуНаправлена(СписокОшибокВВетках, КомуНаправлена);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОшибокВВетках,
																			"Автор",
																			Автор,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(Автор));
																			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОшибокВВетках,
																			"ВерсияИсправления",
																			ВерсияИсправления,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(ВерсияИсправления));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.РазделПроекта) Тогда
		РазделПроекта = Параметры.РазделПроекта;
	Иначе
		Если ТипЗнч(СтруктураБыстрогоОтбора) <> Тип("Структура") Тогда
			
			ПараметрРаздел = Настройки.Получить("РазделПроекта");
			Если ПараметрРаздел <> Неопределено Тогда
				УстановитьПараметрРаздел(Список, СписокОшибокВВетках, ПараметрРаздел);
			КонецЕсли;
		Иначе
			Если Настройки.Получить("РазделПроекта")<>Неопределено Тогда
				Настройки.Удалить("РазделПроекта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененТекущийПроект" Тогда
		УстановитьОтборПоПроектуСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборРазделПроектаПриИзменении(Элемент)
	
	УстановитьПараметрРаздел(Список, СписокОшибокВВетках, РазделПроекта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКомуНаправленаПриИзменении(Элемент)
	
	УстановитьОтборПоИсполнителю();
	УстановитьПараметрКомуНаправлена(СписокОшибокВВетках, КомуНаправлена);
	
	УстановитьПараметрыДляОтбораТехпроектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторОшибкиПриИзменении(Элемент)
	
	УстановитьОтборПоАвтору();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрочностьИсправленияПриИзменении(Элемент)
	
	УстановитьОтборПоСрочностиИсправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрочностьИсправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокСрочностьисправления);
	
	ОткрытьФорму("Перечисление.СрочностьИсправленияОшибок.Форма.ВыборСпискаСтатусов", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрочностьИсправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокСрочностьИсправления = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокСтатусовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокСтатусов);
	
	ОткрытьФорму("Перечисление.СтатусыОшибок.Форма.ВыборСпискаСтатусов", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокСтатусовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокСтатусов = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСписокСтатусовПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеИсправленияПриИзменении(Элемент)
	
	УстановитьОтборПоСостояниюИсправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВерсияИсправленияПриИзменении(Элемент)
	
	УстановитьОтборПоВерсииИсправления();
	
	УстановитьПараметрыДляОтбораТехпроектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВерсияИсправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолеОтбораВладелец = Новый ПолеКомпоновкиДанных("Владелец");
	Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	
	Для Каждого ЭлементОтбора из Список.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбораВладелец
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
				
				Проект = ЭлементОтбора.ПравоеЗначение;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(Проект) Тогда
		СтруктураОтбора = Новый Структура("Владелец", Проект);
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ВерсииПроекта.ФормаВыбора", ПараметрыФормы, Элемент);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДействияСОшибкой" Тогда
		
		Если ВыбраннаяСтрока<>Неопределено Тогда
			
			ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		    СтандартнаяОбработка = Ложь;
		
			ОбработатьДействиеСОшибкой(ДанныеСтроки.ДействияСОшибкой, ДанныеСтроки.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСписокОшибокВВетках

&НаКлиенте
Процедура СписокОшибокВВеткахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Элементы.СписокОшибокВВетках.ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.Ошибки.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	ОткрытьФорму("Справочник.Ошибки.ФормаОбъекта", Новый Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура Вернуть(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована") Тогда
			ТекстСообщения = НСтр("ru='Незарегистрированная ошибка не может быть возвращена'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Ссылка = ТекущиеДанные.Ссылка;
		
		Структура = Новый Структура("Ссылка", Ссылка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВернутьЗавершение", ЭтотОбъект, Структура);
		ОткрытьФорму("Справочник.Ошибки.Форма.ВозвратОшибки", Структура, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    Ссылка = ДополнительныеПараметры.Ссылка;
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        
        ВернутьСервер(Ссылка, Результат.КомуНаправлена, Результат.Комментарий);
        
        ТекстОповещения = НСтр("ru='Ошибка возвращена'");
        ПоказатьОповещениеПользователя(ТекстОповещения, ПолучитьНавигационнуюСсылку(Ссылка), Ссылка, БиблиотекаКартинок.Информация32);
        ИсторияРаботыПользователя.Добавить(Ссылка);
        
        Оповестить("ОшибкаВозвращена", Ссылка);
        ОповеститьОбИзменении(Тип("СправочникСсылка.Ошибки"));
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		МассивСсылок = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если ДанныеСтроки.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована")
				И ДанныеСтроки.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана") Тогда
				
				МассивСсылок.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Структура = Новый Структура("МассивСсылок", МассивСсылок);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПеренаправитьЗавершение", ЭтотОбъект, Структура);
		ОткрытьФорму("Справочник.Ошибки.Форма.ПеренаправлениеОшибки",, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    МассивСсылок = ДополнительныеПараметры.МассивСсылок;
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        
        КоличествоОбработанных = 0;
        ПеренаправитьСервер(МассивСсылок, Результат.КомуНаправлена, Результат.Комментарий, КоличествоОбработанных);
        Элементы.Список.Обновить();
        
        ТекстОповещения = НСтр("ru='Перенаправлено ошибок: %Количество%'");
        ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
        ПоказатьОповещениеПользователя(НСтр("ru='Перенаправление ошибок'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Ознакомиться(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		МассивСсылок = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если (ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки"))
				И ЗначениеЗаполнено(ДанныеСтроки.КомуНаправлена) Тогда
				
				МассивСсылок.Добавить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		КоличествоОбработанных = 0;
		ОзнакомитьсяСервер(МассивСсылок, КоличествоОбработанных);
		
		Элементы.Список.Обновить();
		
		ТекстОповещения = НСтр("ru='Обработано ошибок: %Количество%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
		ПоказатьОповещениеПользователя(НСтр("ru='Ознакомление с ошибками'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнатьИсправитьПроверитьЗакрыть(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		СписокСсылок = Новый Массив;
		СписокПроектов = Новый Массив;
		СписокВерсий = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если (ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена"))
				И НЕ ДанныеСтроки.ПометкаУдаления Тогда
				
				СписокСсылок.Добавить(Строка);
				
				Если СписокПроектов.Найти(ДанныеСтроки.Владелец) = Неопределено Тогда
					СписокПроектов.Добавить(ДанныеСтроки.Владелец);
				КонецЕсли;
				
				Если СписокВерсий.Найти(ДанныеСтроки.ВерсияИсправления) = Неопределено Тогда
					СписокВерсий.Добавить(ДанныеСтроки.ВерсияИсправления);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СписокСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СписокСсылок", СписокСсылок);
		ДопПараметры.Вставить("СписокПроектов", СписокПроектов);
		ДопПараметры.Вставить("СписокВерсий", СписокВерсий);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПризнатьисправитьПроверитьЗакрытьЗавершение", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Справочник.Ошибки.Форма.ПризнатьИсправитьПроверитьЗакрыть",, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнатьИсправитьПроверитьЗакрытьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    СписокСсылок = ДополнительныеПараметры.СписокСсылок;
    СписокПроектов = ДополнительныеПараметры.СписокПроектов;
	СписокВерсий = ДополнительныеПараметры.СписокВерсий;
    
    Если ТипЗнч(РезультатДействия) = Тип("Структура") Тогда
        
        КоличествоОбработанных = 0;
        ПризнатьИсправитьПроверитьЗакрытьСервер(СписокСсылок, СписокПроектов, СписокВерсий, РезультатДействия, КоличествоОбработанных);
        Элементы.Список.Обновить();
        
        ТекстОповещения = НСтр("ru='Обработано ошибок: %Количество%'");
        ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
        ПоказатьОповещениеПользователя(НСтр("ru='Признание, исправление, проверка, закрытие ошибок'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НеПризнаватьОтозватьЗакрыть(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		СписокСсылок = Новый Массив;
		СписокПроектов = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если (ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана")
				ИЛИ ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана"))
				И НЕ ДанныеСтроки.ПометкаУдаления Тогда
				
				СписокСсылок.Добавить(Строка);
				
				Если СписокПроектов.Найти(ДанныеСтроки.Владелец) = Неопределено Тогда
					СписокПроектов.Добавить(ДанныеСтроки.Владелец);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СписокСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СписокСсылок", СписокСсылок);
		ДопПараметры.Вставить("СписокПроектов", СписокПроектов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НеПризнаватьОтозватьЗакрытьЗавершение", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Справочник.Ошибки.Форма.НеПризнаватьОтозватьЗакрыть",, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеПланируетсяИсправлять(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		МассивСсылок = Новый Массив;
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Список.ДанныеСтроки(Строка);
			
			Если ДанныеСтроки.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана") Тогда
				МассивСсылок.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСсылок.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Структура = Новый Структура("МассивСсылок", МассивСсылок);
		ОписаниеОповещения = Новый ОписаниеОповещения("НеПланируетсяИсправлятьЗавершение", ЭтотОбъект, Структура);
		ОткрытьФорму("Справочник.Ошибки.Форма.НеПланируетсяИсправлять",, ЭтаФорма,,,, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеПланируетсяИсправлятьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    МассивСсылок = ДополнительныеПараметры.МассивСсылок;
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("Структура") Тогда
        
        КоличествоОбработанных = 0;
        НеПланируетсяИсправлятьСервер(МассивСсылок, Результат.КомуНаправлена, Результат.Комментарий, КоличествоОбработанных);
        Элементы.Список.Обновить();
        
        ТекстОповещения = НСтр("ru='Не планируется исправлять ошибок: %Количество%'");
        ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
        ПоказатьОповещениеПользователя(НСтр("ru='Не планируется исправление ошибок'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НеПризнаватьОтозватьЗакрытьЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    СписокСсылок = ДополнительныеПараметры.СписокСсылок;
	СписокПроектов = ДополнительныеПараметры.СписокПроектов;
    
    Если ТипЗнч(РезультатДействия) = Тип("Структура") Тогда
        
        КоличествоОбработанных = 0;
        НеПризнаватьОтозватьЗакрытьСервер(СписокСсылок, СписокПроектов, РезультатДействия, КоличествоОбработанных);
        Элементы.Список.Обновить();
        
        ТекстОповещения = НСтр("ru='Обработано ошибок: %Количество%'");
        ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
        ПоказатьОповещениеПользователя(НСтр("ru='Непризнание, отзыв, закрытие ошибок'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьВерсиюИсправления(Команда)
	
	МассивСсылок = Новый Массив;
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
			МассивСсылок.Добавить(Строка);
		КонецЦикла;
		
	КонецЕсли;
		
	Если МассивСсылок.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолеОтбораВладелец = Новый ПолеКомпоновкиДанных("Владелец");
	
	Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	
	Для Каждого ЭлементОтбора из Список.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбораВладелец
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
				
				Проект = ЭлементОтбора.ПравоеЗначение;
				
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Если ЗначениеЗаполнено(Проект) Тогда
		СтруктураОтбора.Вставить("Владелец", Проект);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Структура = Новый Структура("МассивСсылок", МассивСсылок);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НазначитьВерсиюИсправленияЗавершение", ЭтотОбъект, Структура);
	ОткрытьФорму("Справочник.ВерсииПроекта.ФормаВыбора",
				 ПараметрыФормы,
				 ЭтаФорма,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьВерсиюИсправленияЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	УказаннаяВерсияИсправления = РезультатДействия;
	
	МассивСсылок = ДополнительныеПараметры.МассивСсылок;
	
	Если ЗначениеЗаполнено(УказаннаяВерсияИсправления) Тогда
		
		КоличествоОбработанных = 0;
		НазначитьВерсиюИсправленияСервер(МассивСсылок, УказаннаяВерсияИсправления, КоличествоОбработанных);
		
		Элементы.Список.Обновить();
			
		ТекстОповещения = НСтр("ru='Назначена версия исправления для ошибок: %Количество%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоОбработанных);
		ПоказатьОповещениеПользователя(НСтр("ru='Назначение версии исправления'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОшибкуВВетке(Команда)
	
	ТекущиеДанные = Элементы.СписокОшибокВВетках.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Элементы.СписокОшибокВВетках.ТекущиеДанные.Ссылка);
	ОткрытьФорму("Справочник.Ошибки.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

&НаКлиенте
Процедура СоздатьВеткуДляИсправленияОшибок(Команда)
	
	ОчиститьСообщения();
	Результат = ПроверитьВозможностьУказанияОднойВеткиИсправления();
	Если Результат <> Неопределено И Результат.Ошибки.Количество() > 0 Тогда
		
		ПараметрыОповещения = Новый Структура("Ошибки", Результат.Ошибки);
		ОписаниеОповещения = Новый ОписаниеОповещения("УказатьВеткуИсправленияЗавершение", ЭтотОбъект, ПараметрыОповещения);

		ЗначениеЗаполнения = Новый Структура("РазрабатываемыйОбъект, Источник", Результат.Ошибки[0], Результат.Ветка);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, РежимВыбора", ЗначениеЗаполнения, Истина);
		ОткрытьФорму(
			"Справочник.Ветки.ФормаОбъекта",
			ПараметрыФормы, 
			,
			Истина,,,ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВеткуДляИсправленияОшибок(Команда)
	
	ОчиститьСообщения();
	Результат = ПроверитьВозможностьУказанияОднойВеткиИсправления();
	Если Результат <> Неопределено И Результат.Ошибки.Количество() > 0 Тогда
		
		ПараметрыОповещения = Новый Структура("Ошибки", Результат.Ошибки);
		ОписаниеОповещения = Новый ОписаниеОповещения("УказатьВеткуИсправленияЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
		Отбор = Новый Структура("Владелец", Результат.Владелец);
		ПараметрыФормы = Новый Структура("РежимВыбора, ЗакрыватьПриВыборе, Отбор, ВеткаДляИсправления", 
										 Истина, Истина, Отбор, Результат.Ветка);

		ОткрытьФорму(
			"Справочник.Ветки.ФормаВыбора",
			ПараметрыФормы, 
			,
			Истина,,,ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыДляОтбораТехпроектов()
	
	УстановитьПараметрКомуНаправлена(Список, КомуНаправлена);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПоПроекту", ПараметрыСеанса.ТекущийПроект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ИспользоватьОтборПоАвтору", ЗначениеЗаполнено(Автор));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПоАвтору", Автор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ИспользоватьОтборПоСрочностиИсправления", СписокСрочностьИсправления.Количество() > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПоСрочностиИсправления", СписокСрочностьИсправления);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ИспользоватьОтборПоСтатусу", СписокСтатусов.Количество() > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПоСтатусу", СписокСтатусов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ИспользоватьОтборПоВерсииИсправления", ЗначениеЗаполнено(ВерсияИсправления));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПоВерсииИсправления", ВерсияИсправления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоАвтору()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Автор",
																			Автор,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(Автор));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОшибокВВетках,
																			"Автор",
																			Автор,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(Автор));
	
	УстановитьПараметрыДляОтбораТехпроектов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоИсполнителю()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"КомуНаправлена",
																			КомуНаправлена,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(КомуНаправлена));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСрочностиИсправления()
	
	ИспользоватьОтбор = СписокСрочностьИсправления.Количество()>0;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"СрочностьИсправления",
																			СписокСрочностьИсправления,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ИспользоватьОтбор);
	
	УстановитьПараметрыДляОтбораТехпроектов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусу()
	
	ИспользоватьОтбор = СписокСтатусов.Количество()>0;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Статус",
																			СписокСтатусов,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ИспользоватьОтбор);
	
	УстановитьПараметрыДляОтбораТехпроектов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостояниюИсправления()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОшибокВВетках,
																			"СостояниеИсправления",
																			СостояниеИсправления,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(СостояниеИсправления));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВерсииИсправления()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"ВерсияИсправления",
																			ВерсияИсправления,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(ВерсияИсправления));
																			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокОшибокВВетках,
																			"ВерсияИсправления",
																			ВерсияИсправления,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ЗначениеЗаполнено(ВерсияИсправления));
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДействиеСОшибкой(ДействияСОшибкой, Ссылка)
	
	Если ДействияСОшибкой = "Зарегистрировать" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Регистрация");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Признать" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Признание");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Исправить" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Исправление");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Отозвать" Тогда
		
		ПараметрыФормы = Новый Структура("Ошибка", Ссылка);
		ОткрытьФорму("Справочник.Ошибки.Форма.ОтзывОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Подтвердить исправление" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "ПодтверждениеИсправления");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ДействияСОшибкой = "Закрыть" Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", Ссылка);
		ПараметрыФормы.Вставить("ДействиеСОшибкой", "Закрытие");
		
		ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПеренаправитьСервер(МассивСсылок, КомуНаправлена, Комментарий, КоличествоОбработанных)
	
	Справочники.Ошибки.Перенаправить(МассивСсылок, КомуНаправлена, 
								Комментарий, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьСервер(Ошибка, КомуНаправлена, Комментарий)
				
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ошибка);
	
	Справочники.Ошибки.Вернуть(МассивСсылок, КомуНаправлена, Комментарий);
				
КонецПроцедуры

&НаСервере
Процедура ОзнакомитьсяСервер(МассивСсылок, КоличествоОбработанных)
	
	Справочники.Ошибки.Ознакомиться(МассивСсылок, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура НеПланируетсяИсправлятьСервер(МассивСсылок, КомуНаправлена, Комментарий, КоличествоОбработанных)
	
	Справочники.Ошибки.НеПланируетсяИсправлять(МассивСсылок, КомуНаправлена, 
								Комментарий, КоличествоОбработанных);
	
КонецПроцедуры
							
&НаСервере
Процедура ПризнатьИсправитьПроверитьЗакрытьСервер(СписокСсылок, СписокПроектов, СписокВерсий, ДанныеИДействиядляОбработки, КоличествоОбработанных)
	
	Справочники.Ошибки.ПризнатьИсправитьПроверитьЗакрыть(СписокСсылок, СписокПроектов, СписокВерсий, ДанныеИДействиядляОбработки, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура НеПризнаватьОтозватьЗакрытьСервер(СписокСсылок, СписокПроектов, ДанныеИДействиядляОбработки, КоличествоОбработанных)
	
	Справочники.Ошибки.НеПризнаватьОтозватьЗакрыть(СписокСсылок, СписокПроектов, ДанныеИДействиядляОбработки, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура НазначитьВерсиюИсправленияСервер(МассивСсылок, ВерсияИсправления, КоличествоОбработанных)
	
	Справочники.Ошибки.НазначитьВерсиюИсправления(МассивСсылок, ВерсияИсправления, КоличествоОбработанных);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПроектуСервер()
	
	Проекты.УстановитьОтборВСпискеПоПроекту(Список);
	Проекты.УстановитьОтборВСпискеПоПроекту(СписокОшибокВВетках);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрРаздел(Список, СписокОшибокВВетках, РазделПроекта)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		"Раздел", РазделПроекта, ЗначениеЗаполнено(РазделПроекта));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОшибокВВетках,
		"Раздел", РазделПроекта, ЗначениеЗаполнено(РазделПроекта));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ИспользоватьОтборПоРазделуПроекта", ЗначениеЗаполнено(РазделПроекта));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОтборПоРазделуПроекта", РазделПроекта);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрКомуНаправлена(СписокОшибокВВетках, КомуНаправлена)
	
	СписокОшибокВВетках.Параметры.УстановитьЗначениеПараметра("КомуНаправлена", КомуНаправлена);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Если Элементы.Найти("СписокКонтекстноеМенюПризнатьИсправитьПроверитьЗакрыть") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюПризнатьИсправитьПроверитьЗакрыть.Видимость = ДоступноИзменениеОшибок;
	КонецЕсли;
	
	Если Элементы.Найти("СписокКонтекстноеМенюНеПризнаватьОтозватьЗакрыть") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюНеПризнаватьОтозватьЗакрыть.Видимость = ДоступноИзменениеОшибок;
	КонецЕсли;

	Если Элементы.Найти("СписокКонтекстноеМенюНеПланируетсяИсправлять") <> Неопределено Тогда
		Элементы.СписокКонтекстноеМенюНеПланируетсяИсправлять.Видимость = ДоступноПланированиеОтработки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьУказанияОднойВеткиИсправления()
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() < 0 Тогда
		Возврат Неопределено; 
	КонецЕсли;
	ВеткиВКоторыхТребуетсяИсправление = Новый Массив;
	Ошибки = Новый Массив;

	Для Каждого Строка из Элементы.Список.ВыделенныеСтроки Цикл
		Если Строка.Исправляется 
			= ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках") Тогда
			Для Каждого СтрокаИсправлениеВВетках Из Строка.ИсправлениеВВетках Цикл
				Если СтрокаИсправлениеВВетках.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление 
					И НЕ ЗначениеЗаполнено(СтрокаИсправлениеВВетках.ВеткаИсправления) Тогда
					Если ВеткиВКоторыхТребуетсяИсправление.Найти(СтрокаИсправлениеВВетках.Ветка) = Неопределено Тогда
						ВеткиВКоторыхТребуетсяИсправление.Добавить(СтрокаИсправлениеВВетках.Ветка);
					КонецЕсли;
					Если Ошибки.Найти(Строка) = Неопределено Тогда
						Ошибки.Добавить(Строка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ВеткиВКоторыхТребуетсяИсправление.Количество() > 1 Тогда
		СтрокаСоСпискомВеток = СтрСоединить(ВеткиВКоторыхТребуетсяИсправление, "; ");
		ТекстСообщения = СтрШаблон(НСтр("ru='Нельзя указать одну ветку для исправления, в выделенных ошибках требуется исправление в нескольких ветках: %1.'"), 
								   СтрокаСоСпискомВеток);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	Если Ошибки.Количество() = 0 ИЛИ ВеткиВКоторыхТребуетсяИсправление.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Не найдено ни одной ошибки, где требуется указать ветку исправления (ветки уже заполнены или указано, что исправление не требуется).'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Ветка = ВеткиВКоторыхТребуетсяИсправление[0];
	Результат = Новый Структура("Ошибки, Ветка, Владелец", Ошибки, Ветка, Ветка.Владелец);
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура УказатьВеткуИсправленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.Ветки") Тогда
		КоличествоУспешных = 0;
		УказатьВеткуИсправленияСервер(ДополнительныеПараметры.Ошибки, Результат, КоличествоУспешных);
		
		ТекстОповещения = НСтр("ru='""%Ветка%"" указана у ошибок: %Количество%'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Количество%", КоличествоУспешных);
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Ветка%", Результат);
		ПоказатьОповещениеПользователя(НСтр("ru='Заполнение ветки исправления'"),,ТекстОповещения, БиблиотекаКартинок.Информация32);

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УказатьВеткуИсправленияСервер(Ошибки, Ветка, КоличествоУспешных)
	
	Для Каждого Ошибка Из Ошибки Цикл
		Попытка
			ОшибкаОбъект = Ошибка.ПолучитьОбъект();
			Для Каждого СтрокаИсправлениеВВетках Из ОшибкаОбъект.ИсправлениеВВетках Цикл
				Если СтрокаИсправлениеВВетках.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление 
					
					И НЕ ЗначениеЗаполнено(СтрокаИсправлениеВВетках.ВеткаИсправления) Тогда
					СтрокаИсправлениеВВетках.ВеткаИсправления = Ветка;
				КонецЕсли;
			КонецЦикла;
			ОшибкаОбъект.Записать();
			КоличествоУспешных = КоличествоУспешных + 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не удалось указать ветку исправления ""%1"" в ошибке %2.'"), Ветка, Ошибка.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
