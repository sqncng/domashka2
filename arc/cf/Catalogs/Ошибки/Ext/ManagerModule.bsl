#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СформироватьПечатныеФормы(МассивОбъектов, СУчетомПриемника=Ложь, ДанныеСоответствия=Неопределено) Экспорт
	
	Возврат Новый Соответствие;
	
КонецФункции

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("Автор");
	НеРедактируемыеРеквизиты.Добавить("Зарегистрировал");
	НеРедактируемыеРеквизиты.Добавить("Рассмотрел");
	НеРедактируемыеРеквизиты.Добавить("Исправил");
	НеРедактируемыеРеквизиты.Добавить("Проверил");
	НеРедактируемыеРеквизиты.Добавить("Отозвал");
	НеРедактируемыеРеквизиты.Добавить("Закрыл");
	НеРедактируемыеРеквизиты.Добавить("НеПланируетИсправлять");
	НеРедактируемыеРеквизиты.Добавить("ДатаСоздания");
	НеРедактируемыеРеквизиты.Добавить("ДатаРегистрации");
	НеРедактируемыеРеквизиты.Добавить("ДатаРассмотрения");
	НеРедактируемыеРеквизиты.Добавить("ДатаПроверки");
	НеРедактируемыеРеквизиты.Добавить("ДатаОтзыва");
	НеРедактируемыеРеквизиты.Добавить("ДатаЗакрытия");
	НеРедактируемыеРеквизиты.Добавить("ДатаНеПланируетсяИсправлять");
	НеРедактируемыеРеквизиты.Добавить("ВерсияИсправления");
	НеРедактируемыеРеквизиты.Добавить("Зарегистрирована");
	НеРедактируемыеРеквизиты.Добавить("НеПризнана");
	НеРедактируемыеРеквизиты.Добавить("Признана");
	НеРедактируемыеРеквизиты.Добавить("Исправлена");
	НеРедактируемыеРеквизиты.Добавить("Проверена");
	НеРедактируемыеРеквизиты.Добавить("Отозвана");
	НеРедактируемыеРеквизиты.Добавить("Закрыта");
	НеРедактируемыеРеквизиты.Добавить("НеПланируетсяИсправлять");
	НеРедактируемыеРеквизиты.Добавить("ДатаПервойПубликации");
	НеРедактируемыеРеквизиты.Добавить("ДатаИзмененияПубликации");
	НеРедактируемыеРеквизиты.Добавить("ЗарегистрированаИзАПК");
	НеРедактируемыеРеквизиты.Добавить("ХранилищеИсходнойИнформацииОбОшибке");
	НеРедактируемыеРеквизиты.Добавить("ДатаНаправления");
	НеРедактируемыеРеквизиты.Добавить("ОтветственныйЗаРазделПроекта");
	Если Не Пользователи.РолиДоступны("ИзменениеПодразделенияВОшибках") Тогда
		НеРедактируемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Формирует html-текст с описанием ошибки
//
// Параметры:
//  Ошибка - СправочникОбъект.Ошибка, СправочникСсылка.Ошибки - ошибка, описание которой требуется получить
//
// Возвращаемое значение:
//  Описание - Строка. Строка, содержащая html-описание ошибки
//
Функция ПолнаяИнформацияПоОшибке(Ошибка, НовыйСрокОтработки) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	Макет = ПолучитьМакет("Макет");
	
	Если ТипЗнч(Ошибка) = Тип("СправочникСсылка.Ошибки") Тогда
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
	Иначе
		ОшибкаОбъект = Ошибка;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("РазмерШрифта", 2);
	
	ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.Наименование);
	ДобавитьАбзац(ТекстовыйДокумент);
	
	ТекстовыйДокумент.ДобавитьСтроку("<TABLE border=1><TBODY><TR>");
	ТекстовыйДокумент.ДобавитьСтроку("<TD vAlign=top width=450>");
	
	ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.Владелец, НСтр("ru='Проект:'"), Истина,, ПараметрыТекста);
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.РазделПроекта) Тогда
		Заголовок = НСтр("ru='Раздел проекта:'");
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.РазделПроекта, Заголовок, Истина,, ПараметрыТекста);
	КонецЕсли;
	
	ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.Код, НСтр("ru='Код:'"), Истина,, ПараметрыТекста);
	
	ДатаУстановкиТекущегоСтатуса = ДатаУстановкиТекущегоСтатуса(ОшибкаОбъект);
	ОшибкаПодлежитЗакрытию = ОшибкаПодлежитЗакрытию(ОшибкаОбъект);
	Заголовок = НСтр("ru='Статус: '");
	
	ТекстНадписиСтатусДействие = Строка(ОшибкаОбъект.Статус);
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.СрокОтработки) Тогда
		
		ТекстНадписиСтатусДействие = 
			ТекстНадписиСтатусДействие
			+ ". "
			+ ТекстСтатусДействиеСОшибкой(ОшибкаОбъект.Статус, ОшибкаПодлежитЗакрытию)
			+ " "
			+ Формат(ОшибкаОбъект.СрокОтработки,"ДФ=дд.ММ.гг");
			
		Если ОшибкаОбъект.СрокОтработки <> НовыйСрокОтработки Тогда
				
			ТекстНадписиСтатусДействие = 
				ТекстНадписиСтатусДействие
				+ ". "
				+ НСтр("ru='Новый срок:'")
				+ " "
				+ Формат(НовыйСрокОтработки,"ДФ=дд.ММ.гг");
			
		КонецЕсли;
			
	ИначеЕсли ЗначениеЗаполнено(НовыйСрокОтработки) Тогда		
		
		ТекстНадписиСтатусДействие = 
			ТекстНадписиСтатусДействие
			+ ". "
			+ ТекстСтатусДействиеСОшибкой(ОшибкаОбъект.Статус, ОшибкаПодлежитЗакрытию)
			+ " "
			+ Формат(НовыйСрокОтработки,"ДФ=дд.ММ.гг");
			
	КонецЕсли;
	
	ВывестиГиперссылку(ТекстовыйДокумент, "#СтатусОшибки#", ТекстНадписиСтатусДействие, Заголовок, ПараметрыТекста);
	
	Заголовок = НСтр("ru='Срочность исправления:'");
	
	ПараметрыСрочности = Новый Структура;
	ПараметрыСрочности.Вставить("РазмерШрифта", 2);
	
	Если ОшибкаОбъект.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.Немедленно Тогда
		ПараметрыСрочности.Вставить("ЦветТекста", "#ff0000");
	КонецЕсли;
	
	ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.СрочностьИсправления, Заголовок, Истина,, ПараметрыСрочности);
	
	Заголовок = НСтр("ru='Версия исправления:'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.ВерсияИсправления, Заголовок, Истина,, ПараметрыТекста);
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ГдеИсправленаОшибка) Тогда
		Заголовок = НСтр("ru='Где исправлена:'");
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.ГдеИсправленаОшибка, Заголовок, Истина,, ПараметрыТекста);
	КонецЕсли;
	
	ВывестиСтатусПубликации(ОшибкаОбъект.СтатусПубликации, ТекстовыйДокумент, Макет, ПараметрыТекста);
			
	ТекстПоля = НСтр("ru='Информация из внешних источников: %Флаг%'");
	ТекстПоля = СтрЗаменить(ТекстПоля, "%Флаг%", ОшибкаОбъект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников);
	ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля,,,, ПараметрыТекста);
	
	Если ОшибкаОбъект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями Тогда
		ТекстПоля = НСтр("ru='Есть изменения в проектных решениях'");
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля,,,, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Основание) Тогда
		Заголовок = НСтр("ru='Основание: '");
		ВывестиГиперссылку(ТекстовыйДокумент, "#ОснованиеОшибки#", ОшибкаОбъект.Основание, Заголовок, ПараметрыТекста);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ПовторяемаяОшибка) Тогда
		ВывестиПовторяемуюОшибку(ОшибкаОбъект.ПовторяемаяОшибка, ТекстовыйДокумент, Макет, ПараметрыТекста);
	КонецЕсли;
	
	Если ОшибкаОбъект.МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.Автотесты И 
		ПолучитьФункциональнуюОпцию("ИспользоватьТестирование") Тогда
		
		КоличествоЗаблокированныхТестов = КоличествоЗаблокированныхТестов(ОшибкаОбъект);
		Если КоличествоЗаблокированныхТестов > 0 Тогда
			ЗаголовокЗаблокированоТестов = СтрШаблон(НСтр("ru='Заблокировано тестов: %1'"), КоличествоЗаблокированныхТестов);
			ВывестиГиперссылку(ТекстовыйДокумент, "#ЗаблокированоТестов#", ЗаголовокЗаблокированоТестов,,ПараметрыТекста);
		КонецЕсли;

		КоличествоОшибокСПроблемнымиОбъектами = КоличествоОшибокСОдинаковымХешем(ОшибкаОбъект);
		Если КоличествоОшибокСПроблемнымиОбъектами > 1 Тогда
			Заголовок = СтрШаблон(НСтр("ru='Ошибки с одинаковыми проблемными объектами за последний месяц: %1'"), КоличествоОшибокСОдинаковымХешем(ОшибкаОбъект));
			ВывестиГиперссылку(ТекстовыйДокумент, "#ОшибкиСОдинаковымХешем#", Заголовок,,ПараметрыТекста);
		КонецЕсли;
	КонецЕсли;
	
	ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	
	ТекстовыйДокумент.ДобавитьСтроку("<TD vAlign=top>");
	
	Заголовок = НСтр("ru='Создал: '");
	ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаСоздания,
							ОшибкаОбъект.Автор, ПараметрыТекста);
	ДобавитьАбзац(ТекстовыйДокумент);
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Зарегистрировал) Тогда 
		Заголовок = НСтр("ru='Зарегистрировал: '");
		ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаРегистрации,
							ОшибкаОбъект.Зарегистрировал, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Рассмотрел) Тогда
		Если ОшибкаОбъект.Признана Тогда
			Заголовок = НСтр("ru='Признал: '");
		Иначе
			Заголовок = НСтр("ru='Не признал: '");
		КонецЕсли;
		
		ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаРассмотрения,
							ОшибкаОбъект.Рассмотрел, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.НеПланируетИсправлять) Тогда
		Заголовок = НСтр("ru='Не планирует исправлять: '");
		ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаНеПланируетсяИсправлять,
							ОшибкаОбъект.НеПланируетИсправлять, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Исправил) Тогда
		Заголовок = НСтр("ru='Исправил: '");
		ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаИсправления,
							ОшибкаОбъект.Исправил, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Проверил) Тогда
		Заголовок = НСтр("ru='Проверил: '");
		ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаПроверки,
							ОшибкаОбъект.Проверил, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Отозвал) Тогда
		Заголовок = НСтр("ru='Отозвал: '");
		ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаОтзыва,
							ОшибкаОбъект.Отозвал, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Закрыл) Тогда
		Заголовок = НСтр("ru='Закрыл: '");
		ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет, Заголовок, ОшибкаОбъект.ДатаЗакрытия,
							ОшибкаОбъект.Закрыл, ПараметрыТекста);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	ТекстовыйДокумент.ДобавитьСтроку("</TR></TBODY></TABLE>");
	
	ДобавитьАбзац(ТекстовыйДокумент);
	
	// Вывод информации об исправлении по версиям
	
	ВерсииИсборкиИсправления = ВерсииИСборкиИсправленияОшибки(ОшибкаОбъект);
	
	Если ВерсииИсборкиИсправления.Количество()>0 Тогда
		
		ВывестиИнформациюОбИсправленииВВерсиях(ВерсииИсборкиИсправления, ТекстовыйДокумент, Макет);
	
		Если Ошибка.Исправлена И Ошибка.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
			ВывестиИнформациюОбИсправленииВДругихПроектах(ВерсииИсборкиИсправления, ТекстовыйДокумент, Макет);
		КонецЕсли;
	
	КонецЕсли;

	ВывестиЗаголовокРаздела(ТекстовыйДокумент, НСтр("ru='Воспроизведение'"));
	ДобавитьАбзац(ТекстовыйДокумент);
	
	СценарийЗаполнен = ЗначениеЗаполнено(ОшибкаОбъект.СценарийПользователя) ИЛИ 
				(ЗначениеЗаполнено(ОшибкаОбъект.Тест) И Справочники.Тесты.ЭтоТестДляСценарияРаботыПользователя(ОшибкаОбъект.Тест));
				
	Если ЗначениеЗаполнено(ОшибкаОбъект.ИсходнаяИнформацияОбОшибке) Тогда
		Если Не СценарийЗаполнен Тогда
			ВывестиИсходнуюИнформацию(Истина, ТекстовыйДокумент);
		КонецЕсли;	 
	Иначе
		ВывестиИсходнуюИнформацию(Ложь, ТекстовыйДокумент);
	КонецЕсли;
	
	Если СценарийЗаполнен Тогда
		ВывестиГиперссылкиПереходаКСценариям(ОшибкаОбъект,ТекстовыйДокумент);
		ВывестиШагиСценарияПользователя(ОшибкаОбъект,ТекстовыйДокумент,Макет);
	КонецЕсли;
	
	СписокШаблонов = ОбщегоНазначенияСППРВызовСервера.СписокШаблоновИнформационныхБазОшибки(ОшибкаОбъект.Ссылка);
	
	Если СписокШаблонов.Количество() > 0 ИЛИ ЗначениеЗаполнено(ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения) Тогда
		
		УказанКаталог = ОбщегоНазначенияСППРКлиентСервер.ЭтоПутьФайловойСистемы(ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения);
		
		Если ЗначениеЗаполнено(ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения) Тогда
			
			Заголовок = НСтр("ru='Информационная база для воспроизведения:'");
			
			УказанаСсылка = ОбщегоНазначенияСППРКлиентСервер.ЭтоWebАдрес(ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения);
			
			Если УказанКаталог ИЛИ УказанаСсылка Тогда
				Представление = ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения;
				ВывестиГиперссылку(ТекстовыйДокумент, "#ИнформационнаяБазаДляВоспроизведения#", Представление, Заголовок);
			Иначе
				ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения, Заголовок, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если СписокШаблонов.Количество() > 0 Тогда
			ШаблонСсылки = "<A href=""%Ссылка%"" title=""%Подсказка%"">%Текст%</A> ";
			ШаблонСсылки = СтрЗаменить(ШаблонСсылки, "%Подсказка%", НСтр("ru = 'Открыть карточку файла...'"));
			Для каждого Шаблон Из СписокШаблонов Цикл
				
				Текст = ШаблонСсылки;
				Текст = СтрЗаменить(Текст, "%Ссылка%", ПолучитьНавигационнуюСсылку(Шаблон.Значение));
				Текст = СтрЗаменить(Текст, "%Текст%", Шаблон.Представление);
				
				ТекстовыйДокумент.ДобавитьСтроку(Текст);
				
			КонецЦикла;
			ДобавитьАбзац(ТекстовыйДокумент);
		КонецЕсли;
		
		ДобавитьАбзац(ТекстовыйДокумент);
		
		ИнформационнаяБазаДляВоспроизведения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			ОшибкаОбъект.Ссылка.УникальныйИдентификатор(), 
			"ПутьЛокальнойКопииБазы", 
			ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения);
		Если УказанКаталог 
			ИЛИ ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(ОшибкаОбъект.ИнформационнаяБазаДляВоспроизведения)
			ИЛИ ОбщегоНазначенияСППРКлиентСервер.ЭтоСтрокаСоединенияИнформационнойБазы(ИнформационнаяБазаДляВоспроизведения)
			ИЛИ СписокШаблонов.Количество() > 0 Тогда
			
			Текст = "<A href=""#ИнформационнаяБазаДляВоспроизведенияПредприятие#"" title=""" 
			+ ИнформационнаяБазаДляВоспроизведения+ """>"+НСтр("ru = 'Запустить 1С:Предприятие'")+"</A> &nbsp;&nbsp;&nbsp; <A href=""#ИнформационнаяБазаДляВоспроизведенияКонфигуратор#"" title=""" 
			+ ИнформационнаяБазаДляВоспроизведения+ """>"+НСтр("ru = 'Запустить Конфигуратор'")+"</A>";
			ТекстовыйДокумент.ДобавитьСтроку(Текст);
			
		КонецЕсли; 
		
		ДобавитьАбзац(ТекстовыйДокумент);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Стандарт) Тогда
		Заголовок = НСтр("ru='Стандарт:'");
		СтандартСсылка = СтандартыРазработкиВызовСервера.НавигационнаяСсылкаНаСтандарт(ОшибкаОбъект.Стандарт);
		СтандартНаименование = ОшибкаОбъект.Стандарт.Наименование;
		ВывестиГиперссылку(ТекстовыйДокумент, СтандартСсылка, СтандартНаименование, Заголовок);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ПорядокВоспроизведения) Тогда
		Заголовок = НСтр("ru='Порядок воспроизведения:'");
		Если СценарийЗаполнен Тогда
			Заголовок = "";
		КонецЕсли;	 
		ПараметрыТекста = Новый Структура;
		ПараметрыТекста.Вставить("НеразрывныеПробелы",Ложь);
		Если СценарийЗаполнен Тогда
			ВывестиПоле(ТекстовыйДокумент, Макет, 
			УбратьСлужебнуюИнформациюПорядокВоспроизведения(
				ОшибкаОбъект.ПорядокВоспроизведения,ОшибкаОбъект,Макет), Заголовок,,,ПараметрыТекста);
		Иначе	
			ВывестиПоле(ТекстовыйДокумент, Макет, 
				ОшибкаОбъект.ПорядокВоспроизведения, Заголовок,,,ПараметрыТекста);
		КонецЕсли;	 
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		ТипВетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаОбъект.ВеткаОбнаружения, "Тип");
	Иначе
		ТипВетки = Неопределено;
	КонецЕсли;
	
	Если (ТипВетки = Перечисления.ТипыВеток.ВеткаВерсии
		ИЛИ ТипВетки = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта
		ИЛИ ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке)
		И ОшибкаОбъект.СписокОбъектов.Количество() > 0
		И ОшибкаОбъект.ТипПроблемы = Перечисления.ТипПроблемы.ОбъектыМетаданных Тогда
		
		ВывестиГиперссылку(ТекстовыйДокумент, "#ЗахватитьОбъекты#", НСтр("ru='Захватить объекты в хранилище версии'"));
		ДобавитьАбзац(ТекстовыйДокумент);
		
	КонецЕсли;
	
	Если ОшибкаОбъект.СписокОбъектов.Количество() > 0 Тогда
		ВывестиТаблицуСписокОбъектов(ОшибкаОбъект, Макет, ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.Клиент) Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.Клиент, НСтр("ru='Клиент:'"), Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.СУБД) Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.СУБД, НСтр("ru='СУБД:'"), Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.КодОбращения) Тогда
		ВывестиКодОбращения(ОшибкаОбъект.КодОбращения, ТекстовыйДокумент, Макет);
	КонецЕсли;
	
	ИнформацияОбОбнаружении = "";
	
	Если ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		
		Если ЗначениеЗаполнено(ОшибкаОбъект.СборкаОбнаружения) Тогда
			ДатаСборкиОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаОбъект.СборкаОбнаружения, "ДатаСборки");
		Иначе
			ДатаСборкиОбнаружения = '00010101';
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаСборкиОбнаружения) Тогда
			ИнформацияОбОбнаружении = Строка(ОшибкаОбъект.СборкаОбнаружения)
										+ НСтр("ru=' от '") 
										+ ОбщегоНазначенияСППРКлиентСервер.ДатаСтрокой(ДатаСборкиОбнаружения);
		Иначе
			ИнформацияОбОбнаружении = ОшибкаОбъект.СборкаОбнаружения;
		КонецЕсли;
		
	ИначеЕсли ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		
		ИнформацияОбОбнаружении = ОшибкаОбъект.ВеткаОбнаружения;
		
		Если ЗначениеЗаполнено(ОшибкаОбъект.ДатаОбнаружения) Тогда
			ИнформацияОбОбнаружении = Строка(ИнформацияОбОбнаружении) 
										+ ", " 
										+ ОбщегоНазначенияСППРКлиентСервер.ДатаСтрокой(ОшибкаОбъект.ДатаОбнаружения);
		КонецЕсли;
		
	КонецЕсли;
	
	Заголовок = НСтр("ru='Обнаружена:'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ИнформацияОбОбнаружении, Заголовок, Истина);
	
	Заголовок = НСтр("ru='Версия платформы:'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.ВерсияПлатформы, Заголовок, Истина);
	
	Если ОшибкаОбъект.СерверТипПлатформы = ОшибкаОбъект.КлиентТипПлатформы Тогда
		Если ЗначениеЗаполнено(СокрЛП(ОшибкаОбъект.СерверТипПлатформы)) Тогда
			Заголовок = НСтр("ru='Тип платформы:'");
			ВывестиПоле(ТекстовыйДокумент, Макет, СокрЛП(ОшибкаОбъект.СерверТипПлатформы), Заголовок, Истина);
		КонецЕсли;	
	Иначе
		Если ЗначениеЗаполнено(СокрЛП(ОшибкаОбъект.СерверТипПлатформы)) Тогда
			Заголовок = НСтр("ru='Тип платформы (сервер):'");
			ВывестиПоле(ТекстовыйДокумент, Макет, СокрЛП(ОшибкаОбъект.СерверТипПлатформы), Заголовок, Истина);
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СокрЛП(ОшибкаОбъект.КлиентТипПлатформы)) Тогда
			Заголовок = НСтр("ru='Тип платформы (клиент):'");
			ВывестиПоле(ТекстовыйДокумент, Макет, СокрЛП(ОшибкаОбъект.КлиентТипПлатформы), Заголовок, Истина);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьАбзац(ТекстовыйДокумент);
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.СпособОбхода)
		ИЛИ ((ЗначениеЗаполнено(ОшибкаОбъект.ОписаниеИзменений)
		ИЛИ ОшибкаОбъект.ОбработчикиОбновления.Количество()>0) И ОшибкаОбъект.Исправлена) Тогда
		ВывестиЗаголовокРаздела(ТекстовыйДокумент, НСтр("ru='Исправление'"));
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.СпособОбхода) Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.СпособОбхода, НСтр("ru='Способ обхода:'"), Истина);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.СпособИсправления) Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.СпособИсправления, НСтр("ru='Способ исправления:'"), Истина);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ОписаниеИзменений) 
		И ОшибкаОбъект.Исправлена Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.ОписаниеИзменений, НСтр("ru='Описание изменений:'"), Истина);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ОшибкаОбъект.ОбработчикиОбновления.Количество()>0
		И ОшибкаОбъект.Исправлена Тогда
		ВывестиТаблицуОбработчикиОбновления(ОшибкаОбъект, Макет, ТекстовыйДокумент);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ПубликуемоеОписание) Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.ПубликуемоеОписание, НСтр("ru='Публикуемое описание:'"), Истина);
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ДатаПервойПубликации) Тогда
		Заголовок = НСтр("ru='Дата первой публикации:'");
		ТекстДаты = Формат(ОшибкаОбъект.ДатаПервойПубликации, "ДЛФ=D");
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстДаты, Заголовок, Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ДатаИзмененияПубликации) Тогда
		Заголовок = НСтр("ru='Дата изменения публикации:'");
		ТекстДаты = Формат(ОшибкаОбъект.ДатаИзмененияПубликации, "ДЛФ=D");
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстДаты, Заголовок, Истина);
	КонецЕсли;
	
	Если ОшибкаОбъект.НеПризнана И ЗначениеЗаполнено(ОшибкаОбъект.ПричиныНепризнания) Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, ОшибкаОбъект.ПричиныНепризнания, НСтр("ru='Причины непризнания:'"));
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
	Текст = ТекстовыйДокумент.ПолучитьТекст();
	
	Возврат "<HTML>" + Текст + "</HTML>";
	
КонецФункции

// Формирует текст для закладки хранилища конфигурации
// на основаниии информации об ошибке.
//
// Параметры:
//  Ошибка - СправочникСсылка.Ошибки. Ошибка, к которой требуется
//  сформировать информацию
//
// Возвращаемое значение:
//  ТекстЗакладки - Строка. Текст, содержащий информацию для закладки.
//
Функция ТекстДляХранилищаКонфигурации(Ошибка) Экспорт
	
	ИменаРеквизитов = "Код, Наименование, ПорядокВоспроизведения, ПубликуемоеОписание, СтатусПубликации, ОписаниеИзменений, ВерсияИсправления";
	Реквизиты = Новый Структура(ИменаРеквизитов);
	Реквизиты.Вставить("ИспользоватьСлеши", "Владелец.ИспользоватьСлешиВТекстеЗакладкиВХранилище");
	
	КоллекцияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ошибка, Реквизиты);
	Префикс             = ?(КоллекцияРеквизитов.ИспользоватьСлеши, "//", "");
	
	Если ЗначениеЗаполнено(КоллекцияРеквизитов.ПубликуемоеОписание) 
		И КоллекцияРеквизитов.СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.Публикуется Тогда
		Текст = ЗаголовокДляХранилищаКонфигурации() + КоллекцияРеквизитов.Код + Символы.ПС + Символы.ПС;
		Текст = Текст + Префикс + КоллекцияРеквизитов.Наименование;
		Текст = Текст + Символы.ПС + КоллекцияРеквизитов.ПубликуемоеОписание;
	Иначе
		Текст = Префикс + ЗаголовокДляХранилищаКонфигурации() + КоллекцияРеквизитов.Код + Символы.ПС + Символы.ПС;
		Текст = Текст + Префикс + КоллекцияРеквизитов.Наименование;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(КоллекцияРеквизитов.ПорядокВоспроизведения) Тогда
		Текст = Текст + Символы.ПС + Префикс + Символы.ПС + Префикс + "Порядок воспроизведения:" + Символы.ПС;
		ДобавляемыйТекст = МногострочныйТекстКомментарием(КоллекцияРеквизитов.ПорядокВоспроизведения, Префикс);
		Текст = Текст + ДобавляемыйТекст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоллекцияРеквизитов.ОписаниеИзменений) Тогда
		Текст = Текст + Символы.ПС + Префикс + Символы.ПС + Префикс + "Описание изменений:" + Символы.ПС;
		ДобавляемыйТекст = МногострочныйТекстКомментарием(КоллекцияРеквизитов.ОписаниеИзменений, Префикс);
		Текст = Текст + ДобавляемыйТекст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КоллекцияРеквизитов.ВерсияИсправления) Тогда
		Текст = Текст + Символы.ПС + Символы.ПС + Префикс + "Версия исправления: " + КоллекцияРеквизитов.ВерсияИсправления;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Формирует заголовок перед информацией об ошибке для закладки в хранилище
//
// Возвращаемое значение:
//  Заголовок закладки - Строка. Текст, содержащий заголовок закладки в хранилище.
//
Функция ЗаголовокДляХранилищаКонфигурации() Экспорт
	
	Возврат  НСтр("ru='Исправлена ошибка '");
	
КонецФункции

// Рассчитывает и возвращает версию исправления ошибок, исходя из переданных данных и настроек проекта
//
// Параметры:
//  Проект - СправочникСсылка.Проекты -  Проект, по которому требуется получить версию исправления ошибок
//  ДанныеОбнаружения - Структура:
//   *Обнаружена - ПеречислениеСсылка.МестаОбнаруженияОшибок - Место обнаружения
//   *ВеткаОбнаружения - СправочникСсылка.Ветки - Ветка обнаружения ошибки
//   *СборкаОбнаружения - СправочникСсылка.СборкиВерсии - Сборка воспроизведения
//   *ДатаОбнаружения - Дата - Дата обнаружения ошибки
//  СрочностьИсправления - ПеречислениеСсылка.СрочностьИсправленияОшибок - Срочность исправления ошибки
//  ИнформацияИзВнешнихИсточников - Булево - Признак того, что информация об ошибке получена из внешних источников
//  ВариантИсправления - ПеречислениеСсылка.ВариантыИсправленияОшибок - вариант исправления ошибки.
//
// Возвращаемое значение:
//  ВерсияИсправления - СправочникСсылка.ВерсииПроекта - Версия исправления ошибок
//
Функция ВерсияИсправления(Проект, ДанныеОбнаружения, СрочностьИсправления, ИнформацияИзВнешнихИсточников, ВариантИсправления) Экспорт
	
	Обнаружена        = ДанныеОбнаружения.Обнаружена;
	ВеткаОбнаружения  = ДанныеОбнаружения.ВеткаОбнаружения;
	СборкаОбнаружения = ДанныеОбнаружения.СборкаОбнаружения;
	ДатаОбнаружения   = ДанныеОбнаружения.ДатаОбнаружения;
			
	РегистрироватьОшибкиТолькоПоУказаннымВерсиям =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "РегистрироватьОшибкиТолькоПоУказаннымВерсиям");
	
	КолонкаВерсииИсправления = "";
	
	Если СрочностьИсправления = ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.Немедленно") Тогда
		КолонкаВерсииИсправления = "ВерсияИсправленияНемедленно";
	ИначеЕсли СрочностьИсправления = ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.ЖелательноБыстрее") Тогда
		КолонкаВерсииИсправления = "ВерсияИсправленияЖелательноБыстрее";
	ИначеЕсли СрочностьИсправления = ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.ВПлановомПорядке") Тогда
		КолонкаВерсииИсправления = "ВерсияИсправленияВПлановомПорядке";
	КонецЕсли;
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		ВерсияОбнаружения = ВерсияОбнаруженияДляВетки(ВеткаОбнаружения, ДатаОбнаружения);
	ИначеЕсли Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		ВерсияОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаОбнаружения, "Владелец");
	Иначе
		ВерсияОбнаружения = Справочники.ВерсииПроекта.ПустаяСсылка();
	КонецЕсли;
	
	Если ВариантИсправления = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
		
		Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
			АнализируемаяВетка = ВеткаОбнаружения;
		Иначе
			АнализируемаяВетка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаОбнаружения, "Ветка");
		КонецЕсли;
		
		ДанныеДляВеткиОбнаружения = ДанныеДляВетки(АнализируемаяВетка);
		ТипВеткиОбнаружения = ДанныеДляВеткиОбнаружения.Тип;
		ТипВеткиПриемника   = ДанныеДляВеткиОбнаружения.ТипПриемника;
		ВеткаПриемник       = ДанныеДляВеткиОбнаружения.Приемник;
		
		Если ТипВеткиОбнаружения = Перечисления.ТипыВеток.ВеткаВерсии Тогда
			// Если ветка - ветка версии, исправление именно в этой ветке
			Возврат ВерсияОбнаружения;
		ИначеЕсли ТипВеткиОбнаружения = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
			// Если ветка- ветка технического проекта, исправление в версии технического проекта.
			Возврат ВерсияОбнаруженияДляВеткиТехническогоПроекта(АнализируемаяВетка, ДатаОбнаружения);
		ИначеЕсли ТипВеткиОбнаружения = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
			// Если ветка- ветка для исправленния ошибок - анализируется ветка-приемник.
			Если ТипВеткиПриемника = Перечисления.ТипыВеток.ВеткаВерсии Тогда
				//Если приемник- ветка версии, то исправление в версии-приемнике.
				Возврат ВерсияОбнаруженияДляВеткиВерсии(ВеткаПриемник);
			ИначеЕсли ТипВеткиПриемника = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
				// Если приемник- основная ветка проекта, исправление планируется в текущей
				// версии, разрабатываемой в основной ветке.
				Возврат ВерсияПоОсновнойВеткеПроекта(Проект);
			КонецЕсли;
		КонецЕсли;
		
		// Если же ветка- основная ветка проекта, то исправление планируется, исходя
		// из настроек проекта, с учетом срочности исправления.
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаВерсииИсправления) ИЛИ Не ЗначениеЗаполнено(ВерсияОбнаружения) Тогда
		Возврат ПредопределенноеЗначение("Справочник.ВерсииПроекта.ПустаяСсылка");
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|&ВерсияИзКолонкиНастройки КАК ВерсияИсправления
	|ИЗ
	|	Справочник.Проекты.ПорядокВоспроизведенияИИсправленияОшибок КАК ПроектыПорядокВоспроизведенияИИсправленияОшибок
	|ГДЕ
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.Ссылка = &Проект
	|	И (ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияВоспроизведения = &ВерсияОбнаружения
	|     ИЛИ ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияВоспроизведения = ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроектыПорядокВоспроизведенияИИсправленияОшибок.ВерсияВоспроизведения УБЫВ"
	;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВерсияИзКолонкиНастройки", "ПроектыПорядокВоспроизведенияИИсправленияОшибок." + КолонкаВерсииИсправления);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ВерсияОбнаружения", ВерсияОбнаружения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Если НЕ РегистрироватьОшибкиТолькоПоУказаннымВерсиям Тогда
			Возврат ВерсияОбнаружения;
		Иначе
			Возврат ПредопределенноеЗначение("Справочник.ВерсииПроекта.ПустаяСсылка");
		КонецЕсли;
			
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВерсияИсправления;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.ВерсииПроекта.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

// Определяет вариант исправления для ошибки, исходя из данных ошибки
//
// Параметры:
//  ВеткаОбнаружения - СправочникСсылка.Ветки - ветка обнаружения.
//  МетодВыявления - ПеречислениеСсылка.МетодыВыявленияОшибок - метод выявления ошибки.
//  ВерсияИсправления - СправочникСсылка.ВерсииПроекта - версия исправления ошибки.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыИсправленияОшибок - вариант исправления
//
Функция ВариантИсправления(ВеткаОбнаружения, МетодВыявления, ВерсияИсправления) Экспорт
	
	Результат = Перечисления.ВариантыИсправленияОшибок.ПустаяСсылка();
	
	ДанныеВеткиОбнаружения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВеткаОбнаружения, "Тип,Приемник");
	ДанныеВеткиВерсииИсправления = ДанныеВеткиВерсии(ВерсияИсправления);
	
	Если (ДанныеВеткиОбнаружения.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта
		ИЛИ ДанныеВеткиОбнаружения.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок
		ИЛИ МетодВыявления = Перечисления.МетодыВыявленияОшибок.Автотесты)
		И (ВеткаОбнаружения = ДанныеВеткиВерсииИсправления.Ветка
		ИЛИ ДанныеВеткиОбнаружения.Приемник = ДанныеВеткиВерсииИсправления.Ветка) Тогда
		
		Результат = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения;
	Иначе
		
		Если ДанныеВеткиВерсииИсправления.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта
			ИЛИ (НЕ ЗначениеЗаполнено(ВерсияИсправления) И ДанныеВеткиОбнаружения.Тип <> Перечисления.ТипыВеток.ВеткаТехническогоПроекта) Тогда
			Результат = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта;
		Иначе
			Результат = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает и возвращает значения реквизитов ветки, указанной в переданной версии.
//
// Параметры:
//  Версия - СправочникСсылка.ВерсииПроекта- версия.
//
// Возвращаемое значение:
// Структура - структура, содержащая данные реквизитов
//
Функция ДанныеВеткиВерсии(Версия) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ветка", Справочники.Ветки.ПустаяСсылка());
	Результат.Вставить("Тип", Перечисления.ТипыВеток.ПустаяСсылка());
	Результат.Вставить("Статус", Перечисления.СтатусыВеток.ПустаяСсылка());
	Результат.Вставить("Приемник", Справочники.Ветки.ПустаяСсылка());
	
	Если НЕ ЗначениеЗаполнено(Версия) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ветка.Ссылка КАК Ветка,
	|	ВерсииПроекта.Ветка.Тип КАК Тип,
	|	ВерсииПроекта.Ветка.Статус КАК Статус,
	|	ВерсииПроекта.Ветка.Приемник КАК Приемник
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ссылка = &Версия"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура Перенаправить(МассивОшибок, КомуНаправлена, Комментарий, КоличествоОбработанных=0) Экспорт
			
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Ошибка из МассивОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ОшибкаБылаНаправлена = ОшибкаОбъект.КомуНаправлена;
		ОшибкаОбъект.КомуНаправлена = КомуНаправлена;
		
		ОшибкаОбъект.ДатаНаправления = ТекущаяДата();
		
		ПоследнийКомментарийПротокола = "";
		
		Если ОшибкаОбъект.Протокол.Количество()>0 Тогда
			ПоследнийКомментарийПротокола = ОшибкаОбъект.Протокол[0].Комментарий;	
		КонецЕсли;
		
		Если ОшибкаБылаНаправлена<>КомуНаправлена 
			ИЛИ ПоследнийКомментарийПротокола <> Комментарий Тогда
			ОшибкаОбъект.ДобавитьЗаписьВПротокол(ТекущийПользователь, Комментарий);
		КонецЕсли;
		
		ОшибкаОбъект.ДополнительныеСвойства.Вставить("Перенаправление", Истина);

		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Вернуть(МассивОшибок, КомуНаправлена, Комментарий, КоличествоОбработанных=0) Экспорт
			
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Ошибка из МассивОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ОшибкаОбъект.ВернутьВПредыдущийСтатус();
		
		ОшибкаОбъект.КомуНаправлена = КомуНаправлена;
		ОшибкаОбъект.ДатаНаправления = ТекущаяДата();
		
		ОшибкаОбъект.ДобавитьЗаписьВПротокол(ТекущийПользователь, Комментарий);

		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НеПризнавать(МассивОшибок, ПричиныНепризнания, КомуНаправлена, Комментарий, СтатусПубликации, ПовторяемаяОшибка = Неопределено, КоличествоОбработанных=0) Экспорт
			
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Ошибка из МассивОшибок Цикл
		
		Дата = ТекущаяДата();
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПризнана;
		ОшибкаОбъект.КомуНаправлена = КомуНаправлена;
		ОшибкаОбъект.СтатусПубликации = СтатусПубликации;
		
		Если ПовторяемаяОшибка <> Неопределено Тогда
			ОшибкаОбъект.ПовторяемаяОшибка = ПовторяемаяОшибка;
		КонецЕсли;
		
		ОшибкаОбъект.ДатаНаправления = Дата;
		ОшибкаОбъект.ДатаРассмотрения = Дата;
		
		ОшибкаОбъект.Рассмотрел = ТекущийПользователь;

		ОшибкаОбъект.ДобавитьЗаписьВПротокол(ТекущийПользователь, Комментарий);
		
		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Ознакомиться(МассивОшибок, КоличествоОбработанных=0) Экспорт
	
	Для Каждого Ошибка из МассивОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ОшибкаОбъект.КомуНаправлена = Справочники.Пользователи.ПустаяСсылка();
		ОшибкаОбъект.ДополнительныеСвойства.Вставить("Ознакомление", Истина);
		
		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура Закрыть(МассивОшибок, КомуНаправлена, Комментарий, КоличествоОбработанных=0) Экспорт
			
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Ошибка из МассивОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Закрыта;
		ОшибкаОбъект.КомуНаправлена = КомуНаправлена;
		
		ОшибкаОбъект.ДатаНаправления = ТекущаяДата();
		ОшибкаОбъект.ДобавитьЗаписьВПротокол(ТекущийПользователь, Комментарий);

		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НазначитьВерсиюИсправления(МассивОшибок, ВерсияИсправления, КоличествоОбработанных) Экспорт
	
	РеквизитыВерсииИсправления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияИсправления, "Владелец,Ветка, ПорядковыйНомер");
	
	ПроектВерсии = РеквизитыВерсииИсправления.Владелец;
	Ветка = РеквизитыВерсииИсправления.Ветка;
	
	ВеткиВерсий = Новый Соответствие;
	ВеткиВерсий.Вставить(ВерсияИсправления, Ветка);
	
	Для Каждого Ошибка из МассивОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		Если ПроектВерсии <> ОшибкаОбъект.Владелец Тогда
			Продолжить;
		КонецЕсли;
		
		ОшибкаОбъект.ВерсияИсправления = ВерсияИсправления;
		
		Если ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
			
			ВеткаОбнаружения = ОшибкаОбъект.ВеткаОбнаружения;
			
		ИначеЕсли ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
			
			Если ЗначениеЗаполнено(ОшибкаОбъект.СборкаОбнаружения) Тогда
				ВеткаОбнаружения = ВеткаПоСборке(ОшибкаОбъект.СборкаОбнаружения);
			Иначе
				ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
			КонецЕсли;
			
		Иначе
			ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
		КонецЕсли;
	
		ОшибкаОбъект.Исправляется = ВариантИсправления(ВеткаОбнаружения, ОшибкаОбъект.МетодВыявленияОшибки,
	                                                   ВерсияИсправления);
						  
		Если ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
			ПроверитьУстановитьИсправлениеПоВеткеВерсииИсправления(ОшибкаОбъект, ВеткиВерсий, Ложь);
			АктуализироватьСостояниеИсправленияВВетках(ОшибкаОбъект);
		КонецЕсли;
		
		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОшибкуПоКоду(Код, Проект) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Код = &Код"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Ошибки.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Ошибки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПользовательИмеетПравоЗакрытияОшибок(Проект) Экспорт
	
	Возврат УправлениеДоступомСППР.РольДоступнаПоПроекту("ЗакрытиеОшибок", Проект);
	
КонецФункции

// Определяет, в какие технические проекты включена ошибка
//
// Параметры:
//  Ссылка - Тип - СправочникСсылка.Ошибки. Ссылка на ошибку, включение которой в тех. проекты нужно определеить
//
// Возвращаемое значение:
//  ТехническиеПроекты - Тип- Массив. Массив рехнических проектов, исправляющих ошибки
//
Функция ТехническиеПроектыИсправляющиеОшибку(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТехническиеПроектыИдеиИОшибки.Ссылка КАК ТехническийПроект
	|ИЗ
	|	Справочник.ТехническиеПроекты.ИдеиИОшибки КАК ТехническиеПроектыИдеиИОшибки
	|ГДЕ
	|	ТехническиеПроектыИдеиИОшибки.Идея = &Ошибка
	|	И НЕ ТехническиеПроектыИдеиИОшибки.Ссылка.ПометкаУдаления
	|	И ТехническиеПроектыИдеиИОшибки.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Отменен)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ошибка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТехническийПроект");
	
КонецФункции

Функция ПолучательВозвращеннойОшибки(Ошибка, СтатусныеРеквизиты = Неопределено) Экспорт
	
	Если ТипЗнч(СтатусныеРеквизиты) = Тип("Структура") Тогда
		РеквизитыОшибки = СтатусныеРеквизиты;
	Иначе
		ИменаРеквизитов = "Статус,Автор,Зарегистрировал,Рассмотрел,Исправил,Проверил";
		РеквизитыОшибки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ошибка, ИменаРеквизитов);
	КонецЕсли;
	
	Если РеквизитыОшибки.Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
			
		Получатель = РеквизитыОшибки.Зарегистрировал;
		
	ИначеЕсли РеквизитыОшибки.Статус = Перечисления.СтатусыОшибок.НеПризнана
		ИЛИ РеквизитыОшибки.Статус = Перечисления.СтатусыОшибок.Признана Тогда
		
		Получатель = РеквизитыОшибки.Рассмотрел;
		
	ИначеЕсли РеквизитыОшибки.Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
		
		Получатель = РеквизитыОшибки.Исправил;
		
	ИначеЕсли РеквизитыОшибки.Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена Тогда
		
		Получатель = РеквизитыОшибки.Проверил;
		
	ИначеЕсли РеквизитыОшибки.Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда
		
		Получатель = РеквизитыОшибки.Рассмотрел;	
		
	Иначе
		
		Получатель = Справочники.Пользователи.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Получатель;
	
КонецФункции

Функция КопироватьИБ(Параметры, АдресРезультата = Неопределено) Экспорт
	
	КаталогПриемник = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Параметры.КаталогПриемник);
	
	ПараметрыЗапуска = Новый Структура;
	
	ПараметрыЗапуска.Вставить("ПутьИБ", Параметры.ПутьИБ);
	ПараметрыЗапуска.Вставить("ИмяПользователя", Параметры.ИмяПользователя);
	ПараметрыЗапуска.Вставить("ПарольПользователя", Параметры.ПарольПользователя);
	
	ПараметрыЗапуска.Вставить("ДополнительныеПараметрыЗапуска", " /DumpIB """ + КаталогПриемник +"dump.dt""");
	
	КодВозвратаСозданияДампа = ОбщегоНазначенияСППРКлиентСервер.ЗапуститьПриложение1С(ПараметрыЗапуска);
		
	Если КодВозвратаСозданияДампа = 0 Тогда
		
		Если Параметры.Свойство("Ошибка") И ЗначениеЗаполнено(Параметры.Ошибка) Тогда
		
			Ошибка = Параметры.Ошибка.ПолучитьОбъект();
			Ошибка.ИнформационнаяБазаДляВоспроизведения = Параметры.КаталогПриемник;
			Ошибка.Записать();
		
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Не удалось выгрузить базу.'");
		
	КонецЕсли;
	
КонецФункции

// Возвращает данные о замещении пользователя в работе с ошибками
//
// Параметры:
//  Пользователь - Тип - СправочникСсылка.Пользователи. Пользователь, данные о замещении которого нужно получить
//  Проект - Тип - СправочникСсылка.Проекты. Проект, при работе с ошибкой которого требуется заместить пользователя
//
// Возвращаемое значение:
//  Структура данных - тип - структура. Данные о замещении в виде структуры со следующими ключами:
//    ЗамещающийПользователь - пользователь, который замещает
//    ДатаНачалаЗамещения - дата начала замещения
//    ДатаОкончанияЗамещения - дата окончания замещения
//    Комментарий - комментарий
//
Функция ДанныеОЗамещенииПользователяВРаботеСОшибками(Пользователь, Проект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Структура = Новый Структура;
	Структура.Вставить("ЗамещающийПользователь", Справочники.Пользователи.ПустаяСсылка());
	Структура.Вставить("ЗамещаетТекущийПользователь", Ложь);
	Структура.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	Структура.Вставить("ДатаНачалаЗамещения", '00010101');
	Структура.Вставить("ДатаОкончанияЗамещения", '00010101');
	Структура.Вставить("Комментарий", "");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗамещениеПользователейПоРаботеСОшибками.ЗамещающийПользователь КАК ЗамещающийПользователь,
	|	ЗамещениеПользователейПоРаботеСОшибками.Проект КАК Проект,
	|	ЗамещениеПользователейПоРаботеСОшибками.ДатаНачалаЗамещения КАК ДатаНачалаЗамещения,
	|	ЗамещениеПользователейПоРаботеСОшибками.ДатаОкончанияЗамещения КАК ДатаОкончанияЗамещения,
	|	ЗамещениеПользователейПоРаботеСОшибками.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ЗамещениеПользователейПоРаботеСОшибками КАК ЗамещениеПользователейПоРаботеСОшибками
	|ГДЕ
	|	ЗамещениеПользователейПоРаботеСОшибками.Пользователь = &Пользователь
	|	И (ЗамещениеПользователейПоРаботеСОшибками.Проект = &Проект
	|			ИЛИ ЗамещениеПользователейПоРаботеСОшибками.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|	И ЗамещениеПользователейПоРаботеСОшибками.ДатаНачалаЗамещения <= &ТекущаяДата
	|	И (ЗамещениеПользователейПоРаботеСОшибками.ДатаОкончанияЗамещения >= &ТекущаяДата
	|			ИЛИ ЗамещениеПользователейПоРаботеСОшибками.ДатаОкончанияЗамещения = ДАТАВРЕМЯ(1, 1, 1))"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		
		Если НЕ ЗначениеЗаполнено(Выборка.ЗамещающийПользователь) Тогда
			// Если в настройках замещения не указан пользователь, то обработку
			// ошибок может вести любой пользователь, поэтому замещающим считается текущий пользователь
			Структура.ЗамещающийПользователь = Пользователи.ТекущийПользователь();
			Структура.Вставить("ЗамещаетТекущийПользователь", Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Проект) Тогда
			// Настройки с указанием конкретного проекта считаются более приоритетными,
			// чем общие (без указания проекта).
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Выполняет замещение пользователя "Кому направлена" в ошибке с учетом настроек замещения
// и добавляет комментарий о замещении в поле "Комментарий" при необходимости.
//
// Параметры:
//  Пользователь - Тип - СправочникСсылка.Пользователи. Пользователь, который замещается
//  Проект - Тип - СправочникСсылка.Проекты. Проект, при работе с ошибками которого замещается пользователь
//  Комментарий - Тип - Строка. Комментарий о направлении ошибки
//  УказыватьАвтоКомментарий - Тип - Булево. Признак - указывать ли автоматический комментарий о замещении в ошибке.
//
Процедура ЗаместитьПользователяПриРаботеСОшибкой(Пользователь, Проект, Комментарий, УказыватьАвтоКомментарий) Экспорт
	
	ДанныеОЗамещении = ДанныеОЗамещенииПользователяВРаботеСОшибками(Пользователь, Проект);
	
	Если НЕ ЗначениеЗаполнено(ДанныеОЗамещении.ЗамещающийПользователь) Тогда
		Возврат;
	КонецЕсли;	
	
	Замещаемый = Пользователь;
	Пользователь = ДанныеОЗамещении.ЗамещающийПользователь;
	
	Если УказыватьАвтоКомментарий И НЕ ДанныеОЗамещении.ЗамещаетТекущийПользователь Тогда
		
		ТекстКомментария = НСтр("ru='Ошибка направляется пользователю %Пользователь2% в связи с замещением пользователя %Пользователь1% '");
		
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%Пользователь2%", Строка(ДанныеОЗамещении.ЗамещающийПользователь));
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%Пользователь1%", Строка(Замещаемый));
		
		Если ЗначениеЗаполнено(ДанныеОЗамещении.ДатаНачалаЗамещения) Тогда
			ТекстКомментария = ТекстКомментария + НСтр("ru=' с %ДатаНачала%'");
			ТекстКомментария = СтрЗаменить(ТекстКомментария, "%ДатаНачала%", Формат(ДанныеОЗамещении.ДатаНачалаЗамещения, "ДФ=дд.ММ.гггг"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОЗамещении.ДатаОкончанияЗамещения) Тогда
			ТекстКомментария = ТекстКомментария + НСтр("ru=' до %ДатаОкончания%'");
			ТекстКомментария = СтрЗаменить(ТекстКомментария, "%ДатаОкончания%", Формат(ДанныеОЗамещении.ДатаОкончанияЗамещения, "ДФ=дд.ММ.гггг"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеОЗамещении.Комментарий) Тогда
			ТекстКомментария = ТекстКомментария + НСтр("ru=' по причине: %Причина%'");
			ТекстКомментария = СтрЗаменить(ТекстКомментария, "%Причина%", Строка(ДанныеОЗамещении.Комментарий));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Комментарий) Тогда
			Комментарий = Комментарий + Символы.ПС + "====================" + Символы.ПС + ТекстКомментария;
		Иначе
			Комментарий = ТекстКомментария;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает срок отработки ошибки,
// исходя из настроек проекта и данных ошибки
//
// Параметры:
//  РеквизитыОшибки - Структура - структура, содержащая реквизиты ошибки. Должна включать следующие реквизиты:
//  	Владелец - СправочникСсылка.Проекты - проект, к которому относится ошибка
//  	Статус - ПеречислениеСсылка.СтатусыОшибок - текущий статус ошибки
//  	СрочностьИсправления - ПеречислениеСсылка.СрочностьИсправленияОшибок - срочность, указанная в ошибке
//  	ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями - Булево - признак наличия проектных изменений в ошибке
//  	ВерсияИсправления - СправочникСсылка.ВерсииПроекта - версия исправления ошибки.
//  	КомуНаправлена - СправочникСсылка.Пользователи - пользователь, которому направлена ошибка.
//  НачальнаяДатаОтсчета - Дата - дата, от которой отсчитывается срок( при смене статуса - это установки текущего статуса ошибки).
//  ВерсияИсправленияВИБ - СправочникСсылка.ВерсииПроекта - версия в записанной ошибке.
//
// Возвращаемое значение:
//  СрокОтработки - Тип - Дата - рассчитанный срок отработки ошибки.
//
Функция СрокОтработкиОшибки(РеквизитыОшибки, ВерсияИсправленияВИБ, НачальнаяДатаОтсчета) Экспорт
	
	НормаДлительностиОтработки = 0;
	
	СтатусДляОпределенияНормы = СтатусДляОпределенияНормыДлительностиОтработки(РеквизитыОшибки.Владелец,
																				РеквизитыОшибки.Статус,
																				РеквизитыОшибки.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПроектыНормыДлительностиОтработкиОшибок.Норма КАК Норма
	|ИЗ
	|	Справочник.Проекты.НормыДлительностиОтработкиОшибок КАК ПроектыНормыДлительностиОтработкиОшибок
	|ГДЕ
	|	ПроектыНормыДлительностиОтработкиОшибок.Ссылка = &Проект
	|	И ПроектыНормыДлительностиОтработкиОшибок.СтатусОшибки = &СтатусОшибки
	|	И ПроектыНормыДлительностиОтработкиОшибок.СрочностьИсправления = &СрочностьИсправления"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Проект", РеквизитыОшибки.Владелец);
	Запрос.УстановитьПараметр("СтатусОшибки", СтатусДляОпределенияНормы);
	Запрос.УстановитьПараметр("СрочностьИсправления", РеквизитыОшибки.СрочностьИсправления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НормаДлительностиОтработки = Выборка.Норма;
	КонецЕсли;
	
	Календарь = Константы.ОсновнойКалендарь.Получить();
	
	НачальнаяДата = НачальнаяДатаОтсчета;
	
	Если РеквизитыОшибки.Статус = Перечисления.СтатусыОшибок.Признана Тогда
		
		// Если ошибка на этапе исправления (в статусе Признана) и у нее версия исправления указана такая,
		// дата начала разработки которой - в будущем, то срок отработки рассчитывать от этой даты
		// (даты начала разработки версии).
		
		Если РеквизитыОшибки.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
			
			ДатаНачалаРазработкиВерсииИсправления =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОшибки.ВерсияИсправления, "ДатаНачалаРазработки");
			
			Если ДатаНачалаРазработкиВерсииИсправления = Неопределено Тогда
				ДатаНачалаРазработкиВерсииИсправления = '00010101';
			КонецЕсли;
			
			Если ДатаНачалаРазработкиВерсииИсправления > ТекущаяДата() Тогда
				НачальнаяДата = ДатаНачалаРазработкиВерсииИсправления;
			ИначеЕсли РеквизитыОшибки.ВерсияИсправления <> ВерсияИсправленияВИБ Тогда
				НачальнаяДата = ТекущаяДата();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачальнаяДата) Тогда
		НачальнаяДата = ТекущаяДата();
	КонецЕсли;
	
	ИнтервалРабочегоВремени = ОбщегоНазначенияСППрПовтИсп.ИнтервалРабочегоВремени();
	
	// Если установка срока отработки ошибки происходит после номинального окончания
	// рабочего времени, срок увеличивается (начинается со следующих суток)
	Если ЗначениеЗаполнено(ИнтервалРабочегоВремени.ОкончаниеИнтервала) Тогда
		
		Час = Час(НачальнаяДата);
		Минута = Минута(НачальнаяДата);
		
		Если Дата(1,1,1,Час,Минута,0) > ИнтервалРабочегоВремени.ОкончаниеИнтервала Тогда
			 НачальнаяДата = НачальнаяДата + 86400;
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаПоКалендарю =
		КалендарныеГрафики.ДатаПоКалендарю(Календарь, НачальнаяДата, НормаДлительностиОтработки, Ложь);
		
		Если ТипЗнч(ДатаПоКалендарю) = Тип("Дата") И НормаДлительностиОтработки = 0 Тогда
			// При нулевой длительности графики вернут исходную дату. Если это выходной,
			// требуется получить ближайшую рабочую дату.
			
			МассивНачальныхДат = Новый Массив;
			МассивНачальныхДат.Добавить(ДатаПоКалендарю);
			
			ПолученныеДаты = КалендарныеГрафики.ДатыБлижайшихРабочихДней(Календарь, МассивНачальныхДат, Ложь, Ложь);
			
			Если ПолученныеДаты <> Неопределено Тогда
				
				БлижайшаяРабочаяДата = ПолученныеДаты.Получить(ДатаПоКалендарю);
				
				Если ТипЗнч(БлижайшаяРабочаяДата) = Тип("Дата") Тогда
					ДатаПоКалендарю = БлижайшаяРабочаяДата;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Если ДатаПоКалендарю = Неопределено Тогда
		ДатаПоКалендарю = НачальнаяДата + НормаДлительностиОтработки*86400 ;
	КонецЕсли;
	
	Возврат ДатаПоКалендарю;
	
КонецФункции

// Определяет, требуется ли отработка поручения по ошибке.
//
// Параметры:
//  Проект - Тип - СправочникСсылка.Проекты - проект, к которому относится ошибка
//  Статус - Тип - ПеречислениеСсылка.СтатусыОшибок - текущий статус ошибки
//  ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями - Тип - Булево. Признак наличия проектных изменений в ошибке
//  КомуНаправлена - Тип -  СправочникСсылка.Пользователи. Пользователь, которому направлена ошибка.
//
// Возвращаемое значение:
//  ТребуетсяОтработка - Тип - Булево - Признак необходимости отработки поручения. Истина - требуется, Ложь - не требуется.
//
Функция ТребуетсяОтработкаПоручения(Проект, Статус, ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями, КомуНаправлена) Экспорт
	
	ТребуетсяЗакрытиеОшибки = ТребуетсяЗакрытиеОшибки(Проект, ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
	
	Если (((Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена ИЛИ Статус = Перечисления.СтатусыОшибок.Отозвана)
		И НЕ ТребуетсяЗакрытиеОшибки)
		ИЛИ Статус = Перечисления.СтатусыОшибок.Закрыта
		ИЛИ Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять
		ИЛИ Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки)
		И ЗначениеЗаполнено(КомуНаправлена) Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяПересчетСрокаОтработки(СтарыеЗначенияРеквизитов, ТекущиеЗначенияРеквизитов, ТребуетсяОтработкаПоручения=Ложь, ИзменяетсяДатаНаправления=Ложь) Экспорт
	
	ТребуетсяПересчет = Ложь;	
	
	ИзменилисьУсловияРасчета = Ложь;
	
	Если (СтарыеЗначенияРеквизитов.Статус <> ТекущиеЗначенияРеквизитов.Статус) Тогда
		ИзменилисьУсловияРасчета = Истина;
	КонецЕсли;
	
	Если СтарыеЗначенияРеквизитов.ВерсияИсправления <> ТекущиеЗначенияРеквизитов.ВерсияИсправления
		И ТекущиеЗначенияРеквизитов.Статус = Перечисления.СтатусыОшибок.Признана
		И ТекущиеЗначенияРеквизитов.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		ИзменилисьУсловияРасчета = Истина;
	КонецЕсли;
		
	Если СтарыеЗначенияРеквизитов.Исправляется <> ТекущиеЗначенияРеквизитов.Исправляется
		И ТекущиеЗначенияРеквизитов.Статус = Перечисления.СтатусыОшибок.Признана Тогда
		ИзменилисьУсловияРасчета = Истина;
	КонецЕсли;
	
	Если СтарыеЗначенияРеквизитов.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями <>
		ТекущиеЗначенияРеквизитов.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями Тогда
		ИзменилисьУсловияРасчета = Истина;
	КонецЕсли;
	
	Если СтарыеЗначенияРеквизитов.СрочностьИсправления <> ТекущиеЗначенияРеквизитов.СрочностьИсправления Тогда
		ИзменилисьУсловияРасчета = Истина;
	КонецЕсли;
	
	НужноРассчитатьСрокОтработки = ИзменилисьУсловияРасчета
	                               И СтарыеЗначенияРеквизитов.СрокОтработки = ТекущиеЗначенияРеквизитов.СрокОтработки
								   ИЛИ НЕ ЗначениеЗаполнено(ТекущиеЗначенияРеквизитов.СрокОтработки)
								   ИЛИ (ТребуетсяОтработкаПоручения И ИзменяетсяДатаНаправления);
								   
	Возврат НужноРассчитатьСрокОтработки;
									
КонецФункции

// Формирует и возвращает текст с информацией о статусе ошибки и дальнейшем действии с ошибкой 
//
// Параметры:
//  Статус - Тип - ПеречислениеСсылка.СтатусыОшибок. Статус ошибки.
//  ОшибкаПодлежитЗакрытию - Тип- Булево. Признак того, что ошибка нуждается в закрытии
//
// Возвращаемое значение:
//  ТекстСтатусДействие - Тип- строка. Строка с информацией о статусе и действиии с ошибкой.
//
Функция ТекстСтатусДействиеСОшибкой(Статус, ОшибкаПодлежитЗакрытию) Экспорт
	
	Если Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована Тогда
		ТекстСтатусДействие = НСтр("ru='Зарегистрировать не позднее'");
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
		ТекстСтатусДействие = НСтр("ru='Рассмотреть не позднее'");
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПризнана Тогда
		ТекстСтатусДействие = НСтр("ru='Отозвать не позднее'");
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Признана Тогда
		ТекстСтатусДействие = НСтр("ru='Исправить не позднее'");
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
		ТекстСтатусДействие = НСтр("ru='Проверить не позднее'");
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена
		ИЛИ Статус = Перечисления.СтатусыОшибок.Отозвана Тогда
		
		Если ОшибкаПодлежитЗакрытию Тогда
			ТекстСтатусДействие = НСтр("ru='Закрыть не позднее'");
		Иначе
			ТекстСтатусДействие = НСтр("ru='Отработать поручение не позднее'");
		КонецЕсли;
	Иначе
		ТекстСтатусДействие = НСтр("ru='Отработать поручение не позднее'");
	КонецЕсли;
	
	Возврат ТекстСтатусДействие;
	
КонецФункции

// Возвращает дату установки текущего статуса ошибки
//
// Параметры:
//  Ошибка - Тип - СправочникОбъект.Ошибки. Ошибка, для которой определяется дата текущего статуса
//
// Возвращаемое значение:
//  ДатаУстановки - Тип- Дата. Дата установки текущего статуса ошибки.
//
Функция ДатаУстановкиТекущегоСтатуса(Ошибка) Экспорт
	
	ДатаУстановки = ТекущаяДата();
	
	Если Ошибка.Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована Тогда
		ДатаУстановки = Ошибка.ДатаСоздания;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
		ДатаУстановки = Ошибка.ДатаРегистрации;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Признана
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.НеПризнана Тогда
		ДатаУстановки = Ошибка.ДатаРассмотрения;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда
		ДатаУстановки = Ошибка.ДатаОжидаетИсправленияПовторяемой;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять Тогда
		ДатаУстановки = Ошибка.ДатаНеПланируетсяИсправлять;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
		ДатаУстановки = Ошибка.ДатаИсправления;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Отозвана Тогда
		ДатаУстановки = Ошибка.ДатаОтзыва;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена Тогда
		ДатаУстановки = Ошибка.ДатаПроверки;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Закрыта Тогда
		ДатаУстановки = Ошибка.ДатаЗакрытия;
	КонецЕсли;
	
	Возврат ДатаУстановки;
	
КонецФункции

// Возвращает признак необходимости закрытия ошибки
//
// Параметры:
//  Ошибка - Тип - СправочникОбъект.Ошибки. Ошибка, для которой определяется дата текущего статуса
//
// Возвращаемое значение:
//  ТребуетсяЗакрытие - Тип- Булево. Признак необходимости закрытия ошибки.
//
Функция ОшибкаПодлежитЗакрытию(Ошибка) Экспорт
	
	Возврат ТребуетсяЗакрытиеОшибки(Ошибка.Владелец, Ошибка.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
	
КонецФункции

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.Ошибки) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторГруппыОшибки = НСтр("ru='Ошибки'");
	
	ПоказателиТекущихДел = ПоказателиТекущихДелПоОшибкам();
	
	СписокСроков = Новый СписокЗначений;
	СписокСроков.Добавить("Вчера");
	СписокСроков.Добавить("Сегодня");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Действие", Новый СписокЗначений);
	ПараметрыОтбора.Вставить("СрокОтработки", СписокСроков);
	ПараметрыОтбора.Вставить("СрочностьИсправления", Новый СписокЗначений);
	ПараметрыОтбора.Вставить("СостояниеИсправления", Перечисления.СостоянияИсправленияОшибок.ПустаяСсылка());
	
	СписокДействийИсправить = Новый СписокЗначений;
	СписокДействийИсправить.Добавить("Рассмотреть, исправить, проверить");
	
	СписокДействийОтработатьПоручение = Новый СписокЗначений;
	СписокДействийОтработатьПоручение.Добавить("Отработать поручение");
	
	ПараметрыОтбораИсправитьНемедленно	= Новый Структура;
	ПараметрыОтбораИсправить			= Новый Структура;
	ПараметрыОтбораОтработатьПоручение 	= Новый Структура;
	
	Для Каждого ЭлементСтруктуры из ПараметрыОтбора Цикл
		ПараметрыОтбораИсправитьНемедленно.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		ПараметрыОтбораИсправить.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		ПараметрыОтбораОтработатьПоручение.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	СписокИсправитьНемедленноСрочностьИсправления = Новый СписокЗначений;
	СписокИсправитьНемедленноСрочностьИсправления.Добавить(Перечисления.СрочностьИсправленияОшибок.Немедленно);
	
	ПараметрыОтбораИсправитьНемедленно.Вставить("Действие", СписокДействийИсправить);
	ПараметрыОтбораИсправитьНемедленно.Вставить("СрочностьИсправления", СписокИсправитьНемедленноСрочностьИсправления);
	
	СписокИсправитьСрочностьИсправления = Новый СписокЗначений;
	СписокИсправитьСрочностьИсправления.Добавить(Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке);
	СписокИсправитьСрочностьИсправления.Добавить(Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее);
	
	ПараметрыОтбораИсправить.Вставить("Действие", СписокДействийИсправить);
	ПараметрыОтбораИсправить.Вставить("СрочностьИсправления", СписокИсправитьСрочностьИсправления);
	
	ПараметрыОтбораОтработатьПоручение.Вставить("Действие", СписокДействийОтработатьПоручение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлюЧНазначенияИспользования", "ТекущиеДела");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбораИсправитьНемедленно);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ОшибкиИсправитьНемедленно";
	Дело.ЕстьДела       = ПоказателиТекущихДел.КоличествоОшибокИсправитьНемедленно > 0;
	Дело.Представление  = НСтр("ru = 'Рассмотреть, исправить, проверить (немедленно)'");
	Дело.Количество     = ПоказателиТекущихДел.КоличествоОшибокИсправитьНемедленно;
	Дело.Важное 		= Истина;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Форма          = "Справочник.Ошибки.Форма.ОшибкиНаправленныеМне";
	Дело.Владелец       = ИдентификаторГруппыОшибки;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлюЧНазначенияИспользования", "ТекущиеДела");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбораИсправить);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ОшибкиИсправить";
	Дело.ЕстьДела       = ПоказателиТекущихДел.КоличествоОшибокИсправить > 0;
	Дело.Представление  = НСтр("ru = 'Рассмотреть, исправить, проверить'");
	Дело.Количество     = ПоказателиТекущихДел.КоличествоОшибокИсправить;
	Дело.Важное 		= Ложь;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Форма          = "Справочник.Ошибки.Форма.ОшибкиНаправленныеМне";
	Дело.Владелец       = ИдентификаторГруппыОшибки;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлюЧНазначенияИспользования", "ТекущиеДела");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбораОтработатьПоручение);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ОшибкиОтработатьПоручение";
	Дело.ЕстьДела       = ПоказателиТекущихДел.КоличествоОшибокОтработатьПоручение > 0;
	Дело.Представление  = НСтр("ru = 'Отработать поручение'");
	Дело.Количество     = ПоказателиТекущихДел.КоличествоОшибокОтработатьПоручение;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Форма          = "Справочник.Ошибки.Форма.ОшибкиНаправленныеМне";
	Дело.Владелец       = ИдентификаторГруппыОшибки;
	
КонецПроцедуры

// Формирует и возвращает информацию о том, исправлена ли ошибка в других проектах,
// включающих указанный в ошибке проект, а также о том, в каких сборках она исправлена
//
// Параметры:
//  РеквизитыОшибки - Тип - Структура. Структура, содаржащая реквизиты ошибки, необходимые для вычислений
//
Функция ИнформацияОбИсправленииВДругихПроектах(РеквизитыОшибки) Экспорт
	
КонецФункции

// Формирует структуру с информацией об обнаружении ошибки.
//
// Параметры:
//  Обнаружена - ПеречислениеССылка.МестаОбнаруженияОшибок - место обнаружения.
//  СборкаОбнаружения - СправочникСсылка.СборкиВерсии - Сборка версии воспроизведения.
//  ВеткаВОбнаружения - СправочникСсылка.Ветки - ветка обнаружения.
//  ДатаОбнаруженияОшибки - Дата - дата обнаружения ошибки.
//
//  Возвращаемое значение:
//   Результат - Структура - структура результата с полями:
//    * ДатаОбнаружения - Дата - дата обнаружения ошибки.
//    * Версия - СправочникСсылка.ВерсииПроекта - версия обнаружения.
//
Функция ДанныеОбнаруженияОшибки(Обнаружена, СборкаОбнаружения, ВеткаОбнаружения, ДатаОбнаруженияОшибки) Экспорт
	
	ДатаОбнаружения = '00010101';
	Версия = Справочники.ВерсииПроекта.ПустаяСсылка();
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		ВерсияОбнаружения = ВерсияОбнаруженияДляВетки(ВеткаОбнаружения, ДатаОбнаруженияОшибки);
	ИначеЕсли Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		ВерсияОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаОбнаружения, "Владелец");
	Иначе
		ВерсияОбнаружения = Справочники.ВерсииПроекта.ПустаяСсылка();
	КонецЕсли;
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СборкаОбнаружения, "Владелец, ДатаСборки");
		Версия = Реквизиты.Владелец;
		ДатаОбнаружения = Реквизиты.ДатаСборки;
		
	ИначеЕсли Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		
		Версия = ВерсияОбнаружения;
		ДатаОбнаружения = ДатаОбнаруженияОшибки;
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ДатаОбнаружения", ДатаОбнаружения);
	СтруктураРезультата.Вставить("Версия", Версия);
	
	Возврат СтруктураРезультата;
	
КонецФункции

//Генерирует путь к каталогу для информационных баз, приложенных к ошибке.
//
// Параметры:
//  Ошибка - Справочник.Ошибки - Ошибка, для которой генерируется каталог.
// 
// Возвращаемое значение:
//  Строка - Путь к каталогу для информационной базы.
//
Функция СгенерироватьКаталогИБОшибки(Ошибка) Экспорт
	
	КаталогИБПрикладываемыхКОшибкам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка.Владелец, "КаталогИБПрикладываемыхКОшибкам");
	Если ЗначениеЗаполнено(КаталогИБПрикладываемыхКОшибкам) Тогда
		возврат КаталогИБПрикладываемыхКОшибкам 
		      + ?(Прав(КаталогИБПрикладываемыхКОшибкам, 1) <> "\", "\", "") + СокрЛП(Ошибка.Код);
	КонецЕсли; 
	
	Возврат "";
КонецФункции

//Заполняет хеш уточнения для каждогй строки таблицы СписокОбъектов.
//
// Параметры:
//  Ошибка - Справочник.Ошибки - Ошибка, для заполнятся хеши уточнения.
//
Процедура ЗаполнитьХешУточнения(ОшибкаОбъект) Экспорт
	
	Если ОшибкаОбъект.СписокОбъектов.Количество() > 0 Тогда
		
		Для Каждого Строка Из ОшибкаОбъект.СписокОбъектов Цикл
			Строка.ХешУточнения = ПосчитатьХеш(Строка.Уточнение);
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Функция СоздатьТаблицуОписанийОшибок() Экспорт
	
	ТаблицаОписанийОшибок = Новый ТаблицаЗначений;
	
	ТаблицаОписанийОшибок.Колонки.Добавить("Наименование",               Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ТаблицаОписанийОшибок.Колонки.Добавить("ИсходнаяИнформацияОбОшибке", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки));
	ТаблицаОписанийОшибок.Колонки.Добавить("ПорядокВоспроизведения",     Новый ОписаниеТипов("Строка"));
	ТаблицаОписанийОшибок.Колонки.Добавить("ПроблемныйОбъект",           
		Новый ОписаниеТипов("СправочникСсылка.ОбъектыМетаданных,
		                    |СправочникСсылка.Подсистемы,
		                    |СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы"));
	ТаблицаОписанийОшибок.Колонки.Добавить("ПодчиненныйОбъект", 
		Новый ОписаниеТипов("СправочникСсылка.МакетыОбъектовМетаданных, 
		                    |СправочникСсылка.ФормыОбъектовМетаданных, ПеречислениеСсылка.ТипыМодулейОбъектовМетаданных, 
		                    |СправочникСсылка.КомандыОбъектовМетаданных, СправочникСсылка.РеквизитыОбъектовМетаданных")); 
	ТаблицаОписанийОшибок.Колонки.Добавить("РазделПроекта",            Новый ОписаниеТипов("СправочникСсылка.РазделыПроекта"));
	ТаблицаОписанийОшибок.Колонки.Добавить("РазделПроектаМетаданные",  Новый ОписаниеТипов("СправочникСсылка.РазделыПроекта"));
	ТаблицаОписанийОшибок.Колонки.Добавить("Уточнение",                Новый ОписаниеТипов("Строка"));
	ТаблицаОписанийОшибок.Колонки.Добавить("Стандарт",                 Новый ОписаниеТипов("СправочникСсылка.СтандартыРазработки"));
	ТаблицаОписанийОшибок.Колонки.Добавить("КомуНаправлена",           Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаОписанийОшибок.Колонки.Добавить("КомуНаправленаМетаданные", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаОписанийОшибок.Колонки.Добавить("СрочностьИсправления",     Новый ОписаниеТипов("ПеречислениеСсылка.СрочностьИсправленияОшибок"));
	ТаблицаОписанийОшибок.Колонки.Добавить("ПолноеИмяОбъекта",         Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(255)));
	ТаблицаОписанийОшибок.Колонки.Добавить("МестоОбнаружения",         Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(255)));
	ТаблицаОписанийОшибок.Колонки.Добавить("Комментарий",              Новый ОписаниеТипов("Строка"));
	
	
	Если ТаблицаОписанийОшибок.Колонки.Найти("ХешУточнения") = Неопределено Тогда
		ТаблицаОписанийОшибок.Колонки.Добавить("ХешУточнения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	КонецЕсли; 
	
	Если ТаблицаОписанийОшибок.Колонки.Найти("СсылкаНаОшибку") = Неопределено Тогда
		ТаблицаОписанийОшибок.Колонки.Добавить("СсылкаНаОшибку", Новый ОписаниеТипов("СправочникСсылка.Ошибки"));
	КонецЕсли; 
	
	Если ТаблицаОписанийОшибок.Колонки.Найти("КодОшибки") = Неопределено Тогда
		ТаблицаОписанийОшибок.Колонки.Добавить("КодОшибки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	КонецЕсли; 
	
	Если ТаблицаОписанийОшибок.Колонки.Найти("ЭтоДублирующаяОшибка") = Неопределено Тогда
		ТаблицаОписанийОшибок.Колонки.Добавить("ЭтоДублирующаяОшибка", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	ТаблицаОписанийОшибок.ЗаполнитьЗначения(Ложь, "ЭтоДублирующаяОшибка");
	
	Возврат ТаблицаОписанийОшибок;
	
КонецФункции

Функция ЗарегистрироватьОшибкиСУчетомДублей(Данные, МестоВозникновения, ПараметрыОшибки = Неопределено, ПоляГруппировки = "") Экспорт
	
	Возврат ЗарегистрироватьСУчетомДублей(Данные, МестоВозникновения, ПараметрыОшибки, ПоляГруппировки)
	
КонецФункции

Функция ЗарегистрироватьОшибкуСУчетомДублей(ОшибкаОбъект, ПараметрыРегистрации = Неопределено) Экспорт
	
	ТаблицаРегистрации = СоздатьТаблицуОписанийОшибок();
	
	ЗаполнитьТаблицуРегистрации(ОшибкаОбъект, ТаблицаРегистрации, ПараметрыРегистрации);
	
	МестоВозникновения = МестоВозникновенияДляРегистрацииОшибки(ОшибкаОбъект);
	
	СсылкаНового = ОшибкаОбъект.ПолучитьСсылкуНового();
	
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("ДатаОбнаружения");
	ПараметрыОшибки.Вставить("ВерсияПлатформы");
	ПараметрыОшибки.Вставить("МетодВыявленияОшибки");
	ПараметрыОшибки.Вставить("СрочностьИсправления");
	ПараметрыОшибки.Вставить("СценарийПользователя");
	ПараметрыОшибки.Вставить("Процесс");
	ПараметрыОшибки.Вставить("НастройкаЗапускаСценария");
	ПараметрыОшибки.Вставить("НастройкаЗапускаПроцесса");
	ПараметрыОшибки.Вставить("Тест");
	ПараметрыОшибки.Вставить("ВеткаОбнаружения");
	ПараметрыОшибки.Вставить("Обнаружена");
	ПараметрыОшибки.Вставить("СборкаОбнаружения");
	ПараметрыОшибки.Вставить("Клиент");		
	ПараметрыОшибки.Вставить("КлиентТипПлатформы");
	ПараметрыОшибки.Вставить("СерверТипПлатформы");
	Если ТипЗнч(ПараметрыРегистрации) = Тип("Структура") Тогда
		Если ПараметрыРегистрации.Свойство("АвторВПротоколе") Тогда
			ПараметрыОшибки.Вставить("АвторВПротоколе", ПараметрыРегистрации.АвторВПротоколе);
		КонецЕсли;	
	КонецЕсли;	
	
	ПараметрыОшибки.Вставить("СУБД");
	
	ПараметрыОшибки.Вставить("ИнформационнаяБазаДляВоспроизведения");
	Если ЗначениеЗаполнено(СсылкаНового) Тогда
		ПараметрыОшибки.Вставить("Идентификатор", СсылкаНового);
	КонецЕсли; 
	
	Если ПараметрыРегистрации <> Неопределено Тогда 
		
		Если ПараметрыРегистрации.Свойство("ДостоверностьОбнаружения") Тогда
			ПараметрыОшибки.Вставить("ДостоверностьОбнаружения", ПараметрыРегистрации.ДостоверностьОбнаружения);
		КонецЕсли;
		
		Если ПараметрыРегистрации.Свойство("ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе") Тогда
			ПараметрыОшибки.Вставить("ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе",
			                         ПараметрыРегистрации.ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе);
		КонецЕсли;
		
		Если ПараметрыРегистрации.Свойство("ДатаНаследования") Тогда
			ПараметрыОшибки.Вставить("ДатаНаследования", ПараметрыРегистрации.ДатаНаследования);
		КонецЕсли;

	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыОшибки, ОшибкаОбъект);
	ЗарегистрироватьСУчетомДублей(ТаблицаРегистрации, МестоВозникновения, ПараметрыОшибки, "Наименование");
	
	СсылкаНаОшибку       = Неопределено;
	КодОшибки            = Неопределено;
	ЭтоДублирующаяОшибка = Истина;
	Для Каждого Строка Из ТаблицаРегистрации Цикл
		
		СсылкаНаОшибку = Строка.СсылкаНаОшибку;
		КодОшибки      = Строка.КодОшибки;
		Если Не Строка.ЭтоДублирующаяОшибка Тогда
			ЭтоДублирующаяОшибка = Ложь;
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЗаписатьОшибкуВРегистрРезультатыРегистрацииОшибок(ОшибкаОбъект, СсылкаНаОшибку, ЭтоДублирующаяОшибка, ПараметрыРегистрации);
	ОтозватьОшибкиНижеПоДеревуВеток(СсылкаНаОшибку, ЭтоДублирующаяОшибка, ПараметрыРегистрации);
	
	Ответ = Новый Структура;
	Ответ.Вставить("СсылкаНаОшибку",       СсылкаНаОшибку);
	Ответ.Вставить("КодОшибки",            КодОшибки);
	Ответ.Вставить("ЭтоДублирующаяОшибка", ЭтоДублирующаяОшибка);
	Возврат Ответ;
	
КонецФункции

Процедура ЗаполнитьИзмененныеОбработчики(ОшибкаОбъект) Экспорт
	
	Если ОшибкаОбъект.ТипПроблемы = Перечисления.ТипПроблемы.БезДетализации Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ОшибкаОбъект.СписокОбъектов Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ПроблемныйОбъект) Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ОшибкаОбъект.ТипПроблемы = Перечисления.ТипПроблемы.ОбработчикиОбновления Тогда
		
			Отбор = Новый Структура("ОбработчикОбновления,ОписаниеИзменений");
			Отбор.ОбработчикОбновления = Строка.ПроблемныйОбъект;
			Отбор.ОписаниеИзменений    = Строка.Уточнение;
			
			Если ОшибкаОбъект.ОбработчикиОбновления.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
				НоваяСтрока = ОшибкаОбъект.ОбработчикиОбновления.Добавить();
				НоваяСтрока.ОбработчикОбновления = Строка.ПроблемныйОбъект;
				НоваяСтрока.ОписаниеИзменений    = Строка.Уточнение;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Выполняет заполнение списка выбора подчиненных объектов для указанного объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - СправочникСсылка.ОбъектыМетаданных - объект метаданных, подчиненные объекты которого включаются в список.
//  СписокВыбора - СписокЗначений - список значения для выбора.
//  СписокОбъектов - СписокЗначений - список подчиненных объектов.
//
Процедура УстановитьСписокВыбораПодчиненныхОбъектов(ОбъектМетаданных, СписокВыбора, СписокОбъектов) Экспорт

	СписокВыбора.Очистить();
	СписокОбъектов.Очистить();
	
	РеквизитыРодителя = Новый Структура;
	РеквизитыРодителя.Вставить("Имя", "Родитель.Имя");
	
	ТипОбъекта = ВРег(ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектМетаданных, РеквизитыРодителя).Имя);
	
	Если РаботаСОбъектамиМетаданныхКлиентСервер.УЭтогоКлассаОбъектаЕстьМодульМенеджера(ТипОбъекта) Тогда
		СписокОбъектов.Добавить(Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджера, 
									Строка(Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджера));
	КонецЕсли;
								
	Если РаботаСОбъектамиМетаданныхКлиентСервер.УЭтогоКлассаОбъектаЕстьМодульОбъекта(ТипОбъекта) Тогда							
		СписокОбъектов.Добавить(Перечисления.ТипыМодулейОбъектовМетаданных.МодульОбъекта,
									Строка(Перечисления.ТипыМодулейОбъектовМетаданных.МодульОбъекта));
	КонецЕсли;
								
	Если РаботаСОбъектамиМетаданныхКлиентСервер.УЭтогоКлассаОбъектаЕстьМодульМенеджераЗначений(ТипОбъекта) Тогда							
		СписокОбъектов.Добавить(Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджераЗначений,
									Строка(Перечисления.ТипыМодулейОбъектовМетаданных.МодульМенеджераЗначений));
	КонецЕсли;
	
	Если РаботаСОбъектамиМетаданныхКлиентСервер.УЭтогоКлассаОбъектаЕстьМодульНабораЗаписей(ТипОбъекта) Тогда							
		СписокОбъектов.Добавить(Перечисления.ТипыМодулейОбъектовМетаданных.МодульНабораЗаписей,
									Строка(Перечисления.ТипыМодулейОбъектовМетаданных.МодульНабораЗаписей));
	КонецЕсли;
	
	ПодчиненныеОбъекты = РаботаСОбъектамиМетаданных.ПодчиненныеОбъектыОбъектаМетаданных(ОбъектМетаданных);
	
	Для каждого ЭлементКоллекции Из ПодчиненныеОбъекты Цикл
		СписокОбъектов.Добавить(ЭлементКоллекции.Значение, ЭлементКоллекции.Представление);
	КонецЦикла; 
	
	СписокОбъектов.СортироватьПоПредставлению();
	
	Для каждого ЭлементКоллекции Из СписокОбъектов Цикл
		СписокВыбора.Добавить(ЭлементКоллекции.Представление);
	КонецЦикла; 
	
КонецПроцедуры

// Формирует и возвращает таблицу значений, содержащую объекты, подобранные по результатам поиска.
//
// Параметры:
//  ТаблицыМетаданных - ТаблицыЗначений - Таблица, содержащая объекты метаданных.
//  ИмяТаблицы - Строка - Имя таблицы, по которой выполняется формирование.
//  Проект - СправочникСсылка.Проекты - проект, для которого формируется таблица.
//  Результат - Структура- структура, содержащая результат действия.
//  ПараметрыВыполнения - Структура - параметры, определяющие заполнения.
//
// Возвращаемое значение:
//  ТаблицаОбъектов - ТаблицаЗначений - таблица, содержащая объекты по результатам поиска.
//
Функция ТаблицаОбъектовПоРезультатамПоиска(ТаблицаМетаданные, ИмяТаблицы, Проект, Результат, ПараметрыВыполнения) Экспорт
	
	Если ИмяТаблицы = "СписокОбъектов" Тогда
		ТаблицаМетаданные.Колонки["ПроблемныйОбъект"].Имя = "ОбъектМетаданных";
	КонецЕсли; 
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Метаданные.ОбъектМетаданных КАК ОбъектМетаданных,
	|	Метаданные.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ ВТИзмененныеМетаданные
	|ИЗ
	|	&Метаданные КАК Метаданные";
	Запрос.УстановитьПараметр("Метаданные", ТаблицаМетаданные);
	Запрос.Выполнить();
	
	ТаблицаОбъектов = РаботаСОбъектамиМетаданных.ТаблицаПолныхИменОбъектовМетаданныхПоВТИзмененныеМетаданные(МенеджерВТ);
	
	РаботаСОбъектамиМетаданных.ЗаполнитьТаблицуПоРезультатамПоиска(ТаблицаОбъектов, Результат, ПараметрыВыполнения); 
	
	Для Каждого СтрокаТаблицы из ТаблицаОбъектов Цикл
		СтрокаТаблицы.ПолноеИмя = СтрЗаменить(СтрокаТаблицы.ПолноеИмя, ".Форма.",".");
		СтрокаТаблицы.ПолноеИмя = СтрЗаменить(СтрокаТаблицы.ПолноеИмя, ".Макет.",".");
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.ПолноеИмя КАК ПолноеИмя
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ВложенныйЗапрос.ПодчиненныйОбъект КАК ПодчиненныйОбъект
	|ПОМЕСТИТЬ ДобавляемыеСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Формы.Владелец КАК ОбъектМетаданных,
	|		Формы.Ссылка КАК ПодчиненныйОбъект
	|	ИЗ
	|		Справочник.ФормыОбъектовМетаданных КАК Формы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОбъектов КАК ТаблицаОбъектов
	|			ПО Формы.Наименование = ТаблицаОбъектов.ПолноеИмя
	|				И (Формы.Владелец.Владелец = &Проект)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Макеты.Владелец,
	|		Макеты.Ссылка
	|	ИЗ
	|		Справочник.МакетыОбъектовМетаданных КАК Макеты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОбъектов КАК ТаблицаОбъектов
	|			ПО Макеты.Наименование = ТаблицаОбъектов.ПолноеИмя
	|				И (Макеты.Владелец.Владелец = &Проект)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Объекты.Ссылка,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		Справочник.ОбъектыМетаданных КАК Объекты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОбъектов КАК ТаблицаОбъектов
	|			ПО Объекты.Наименование = ТаблицаОбъектов.ПолноеИмя
	|				И (Объекты.Владелец = &Проект)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавляемыеСтроки.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ДобавляемыеСтроки.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	ВЫБОР
	|		КОГДА ДобавляемыеСтроки.ПодчиненныйОбъект ССЫЛКА Справочник.ФормыОбъектовМетаданных
	|			ТОГДА &ИмяКлассаФорма + "" "" + ВЫРАЗИТЬ(ДобавляемыеСтроки.ПодчиненныйОбъект КАК Справочник.ФормыОбъектовМетаданных).Имя
	|		КОГДА ДобавляемыеСтроки.ПодчиненныйОбъект ССЫЛКА Справочник.МакетыОбъектовМетаданных
	|			ТОГДА &ИмяКлассаМакет + "" "" + ВЫРАЗИТЬ(ДобавляемыеСтроки.ПодчиненныйОбъект КАК Справочник.МакетыОбъектовМетаданных).Имя
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПодчиненныйОбъектСтрока
	|ИЗ
	|	ДобавляемыеСтроки КАК ДобавляемыеСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмененныеМетаданные КАК ВТИзмененныеМетаданные
	|		ПО ДобавляемыеСтроки.ОбъектМетаданных = ВТИзмененныеМетаданные.ОбъектМетаданных
	|			И (ДобавляемыеСтроки.ПодчиненныйОбъект = ВЫБОР
	|				КОГДА (ВТИзмененныеМетаданные.ПодчиненныйОбъект ССЫЛКА Справочник.ФормыОбъектовМетаданных
	|						ИЛИ ВТИзмененныеМетаданные.ПодчиненныйОбъект ССЫЛКА Справочник.МакетыОбъектовМетаданных)
	|						И ВТИзмененныеМетаданные.ПодчиненныйОбъект <> ЗНАЧЕНИЕ(Справочник.ФормыОбъектовМетаданных.ПустаяСсылка)
	|						И ВТИзмененныеМетаданные.ПодчиненныйОбъект <> ЗНАЧЕНИЕ(Справочник.МакетыОбъектовМетаданных.ПустаяСсылка)
	|					ТОГДА ВТИзмененныеМетаданные.ПодчиненныйОбъект
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ)
	|ГДЕ
	|	ВТИзмененныеМетаданные.ОбъектМетаданных ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДобавляемыеСтроки.ОбъектМетаданных.Наименование";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
	Запрос.УстановитьПараметр("ИмяКлассаФорма",  НСтр("ru = 'Форма'"));
	Запрос.УстановитьПараметр("ИмяКлассаМакет",  НСтр("ru = 'Макет'"));
	Запрос.УстановитьПараметр("Проект",          Проект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает и возвращает основную ветку проектк
//
// Параметры:
//  Проект - СправочникСсылка.Проекты - интересующий проект
//
// Возвращаемое значение:
//  СправочникСсылка.Ветки - основная ветка проекта.
//
Функция ОсновнаяВеткаПроекта(Проект) Экспорт
	
	Результат = Справочники.Ветки.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Ветки.Ссылка КАК Ветка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Владелец = &Проект
		|	И НЕ Ветки.ПометкаУдаления
		|	И Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)"
		;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Проект", Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ветка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Анализирует, разрешен ли авторам ошибки ее отзыв с учетом настроек проекта
//
// Параметры:
//  Проект - СправочникСсылка.Проекты - интересующий проект
//  ОшибкаИзВнешнихИсточников - Булево - признак того, что ошибка зарегистрирована по информации от внешних источников
//
// Возвращаемое значение:
//  Булево - наличие разрешения на отзыв ошибок для авторов
//
Функция АвторамРазрешенОтзывОшибки(Проект, ОшибкаИзВнешнихИсточников) Экспорт

	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.РазрешатьАвторамОтзывВнутреннихОшибок КАК РазрешатьАвторамОтзывВнутреннихОшибок,
	|	Проекты.РазрешатьАвторамОтзывВнешнихОшибок КАК РазрешатьАвторамОтзывВнешнихОшибок
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка = &Проект"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ОшибкаИзВнешнихИсточников Тогда
			Результат = Выборка.РазрешатьАвторамОтзывВнешнихОшибок;
		Иначе
			Результат = Выборка.РазрешатьАвторамОтзывВнутреннихОшибок;
		КонецЕсли;
		
	Иначе
		 Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

Процедура ПризнатьИсправитьПроверитьЗакрыть(СписокОшибок, СписокПроектов, СписокВерсий, ДанныеИДействиядляОбработки, КоличествоОбработанных) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	РеквизитыПроектов = РеквизитыПроектов(СписокПроектов);
	
	ВеткиВерсий = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокВерсий, "Ветка");
	
	Для Каждого Ошибка из СписокОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ТекущийСтатус = ОшибкаОбъект.Статус;
		КомуНаправлена = ОшибкаОбъект.КомуНаправлена;
		Комментарий = "";
		
		Если ОшибкаОбъект.Протокол.Количество()>0 Тогда
			ПоследняяСтрока = ОшибкаОбъект.Протокол.Получить(0);
			Комментарий = ПоследняяСтрока.Комментарий;
		КонецЕсли;
			
		Если ДанныеИДействияДляОбработки.Закрыть И НЕ ДанныеИДействияДляОбработки.ПодтвердитьИсправление Тогда
			
			Если НЕ ОшибкаОбъект.Проверена Тогда
				ТекстСообщения = НСтр("ru='Ошибка, которая не проверена (%КодОшибки%), не может быть закрыта'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", ОшибкаОбъект.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеИДействияДляОбработки.ПодтвердитьИсправление И НЕ ДанныеИДействияДляОбработки.ОтметитьИсправление Тогда
			
			Если НЕ ОшибкаОбъект.Исправлена Тогда
				ТекстСообщения = НСтр("ru='Для ошибки, которая не исправлена (%КодОшибки%), нельзя подтвердить исправление'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", ОшибкаОбъект.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеИДействияДляОбработки.ОтметитьИсправление И НЕ ДанныеИДействияДляОбработки.Признать Тогда
			
			Если НЕ ОшибкаОбъект.Признана Тогда
				ТекстСообщения = НСтр("ru='Для ошибки, которая не рассмотрена (%КодОшибки%), нельзя отметить исправление'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", ОшибкаОбъект.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ОшибкаОбработана =
			УстановитьРеквизитыПоДействиюИСтатусуПризнание(ОшибкаОбъект, ДанныеИДействияДляОбработки,
			                                                 ТекущийПользователь, РеквизитыПроектов, ВеткиВерсий);
			
		Если НЕ ОшибкаОбработана Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОшибкаОбъект.ПроверитьЗаполнение() Тогда
			ТекстСообщения = НСтр("ru='Ошибка %КодОшибки% не записана.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", ОшибкаОбъект.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ОшибкаОбъект.ДатаНаправления = ТекущаяДата();
		
		Если ТекущийСтатус <> ОшибкаОбъект.Статус ИЛИ КомуНаправлена <> ОшибкаОбъект.КомуНаправлена
			ИЛИ (Комментарий <> ДанныеИДействияДляОбработки.Комментарий И ДанныеИДействияДляОбработки.Комментарий <> "") Тогда
			
			ОшибкаОбъект.ДобавитьЗаписьВПротокол(ТекущийПользователь, ДанныеИДействиядляОбработки.Комментарий);
		КонецЕсли;

		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НеПризнаватьОтозватьЗакрыть(СписокОшибок, СписокПроектов, ДанныеИДействияДляОбработки, КоличествоОбработанных) Экспорт
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	РеквизитыПроектов = РеквизитыПроектов(СписокПроектов);
	
	Для Каждого Ошибка из СписокОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ТекущийСтатус = ОшибкаОбъект.Статус;
		КомуНаправлена = ОшибкаОбъект.КомуНаправлена;
		Комментарий = "";
		
		Если ОшибкаОбъект.Протокол.Количество()>0 Тогда
			ПоследняяСтрока = ОшибкаОбъект.Протокол.Получить(0);
			Комментарий = ПоследняяСтрока.Комментарий;
		КонецЕсли;
		
		Если ДанныеИДействияДляОбработки.Закрыть И НЕ ДанныеИДействияДляОбработки.Отозвать Тогда
			
			Если НЕ ОшибкаОбъект.Отозвана Тогда
				ТекстСообщения = НСтр("ru='Ошибка, которая не отозвана (%КодОшибки%), не может быть закрыта'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", ОшибкаОбъект.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеИДействияДляОбработки.Отозвать И НЕ ДанныеИДействияДляОбработки.НеПризнавать Тогда
			
			Если НЕ ОшибкаОбъект.НеПризнана Тогда
				ТекстСообщения = НСтр("ru='Ошибка (%КодОшибки%) не может быть отозвана без рассмотрения'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", ОшибкаОбъект.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ОшибкаОбработана =
			УстановитьРеквизитыПоДействиюИСтатусуНепризнание(ОшибкаОбъект, ДанныеИДействияДляОбработки,
			                                                 ТекущийПользователь, РеквизитыПроектов);
			
		Если НЕ ОшибкаОбработана Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОшибкаОбъект.ПроверитьЗаполнение() Тогда
			ТекстСообщения = НСтр("ru='Ошибка %КодОшибки% не записана.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", ОшибкаОбъект.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		ОшибкаОбъект.ДатаНаправления = ТекущаяДата();
		
		Если ТекущийСтатус <> ОшибкаОбъект.Статус ИЛИ КомуНаправлена <> ОшибкаОбъект.КомуНаправлена
			ИЛИ (Комментарий <> ДанныеИДействияДляОбработки.Комментарий И ДанныеИДействияДляОбработки.Комментарий <> "") Тогда
			
			ОшибкаОбъект.ДобавитьЗаписьВПротокол(ТекущийПользователь, ДанныеИДействиядляОбработки.Комментарий);
		КонецЕсли;

		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет версию обнаружения ошибки для указанной ветки
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки - ветка, для которой нужно определить версию обнаружения
//  ДатаОбнаружения - Дата - Дата обнаружения ошибки.
//
// Возвращаемое значение:
//  Версия - СправочникСсылка.ВерсииПроекта - искомая версия обнаружения
//
Функция ВерсияОбнаруженияДляВетки(Ветка, ДатаОбнаружения) Экспорт
	
	Версия = Справочники.ВерсииПроекта.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(Ветка) Тогда
		Возврат Версия;
	КонецЕсли;
	
	ТипВетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Тип");
	
	Если ТипВетки = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
		Версия = ВерсияОбнаруженияДляВеткиТехническогоПроекта(Ветка, ДатаОбнаружения);
	ИначеЕсли ТипВетки = Перечисления.ТипыВеток.ВеткаВерсии Тогда
		Версия = ВерсияОбнаруженияДляВеткиВерсии(Ветка);
	ИначеЕсли ТипВетки = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
		Версия = ВерсияОбнаруженияДляВеткиПроекта(Ветка, ДатаОбнаружения);
	ИначеЕсли ТипВетки = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
		Версия = ВерсияОбнаруженияДляВеткиИсправленияОшибок(Ветка, ДатаОбнаружения);
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

// Определяет версию, разрабатываемую в основной ветке указанного проекта.
//
// Параметры:
//  Проект - СправочникСсылка.Проекты - проект, версию которого нужно определить
//
// Возвращаемое значение:
//  СправочникСсылка.ВерсииПроекта - требуемая версия
//
Функция ВерсияПоОсновнойВеткеПроекта(Проект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Возврат Справочники.ВерсииПроекта.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Ветки.Ссылка КАК Ветка
	|ПОМЕСТИТЬ ВТВетки
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	Ветки.Владелец = &Проект
	|	И НЕ Ветки.ПометкаУдаления
	|	И Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВерсииПроекта.Ссылка КАК Версия
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВетки КАК ВТВетки
	|		ПО ВерсииПроекта.Ветка = ВТВетки.Ветка
	|ГДЕ
	|	НЕ ВерсииПроекта.ПометкаУдаления
	|	И ВерсииПроекта.Владелец = &Проект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ПорядковыйНомер ВОЗР"
	;
	
	Версия = Справочники.ВерсииПроекта.ПустаяСсылка();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Версия = Выборка.Версия;
	КонецЕсли;
	
	Возврат Версия;
	
КонецФункции

// Определяет ветку для указанной сборки
//
// Параметры:
//  Сборка - СправочникСсылка.СборкиВерсии - сборка, для которой нужно определить ветку
//
// Возвращаемое значение:
//  СправочникСсылка.Ветки - искомая ветка
//
Функция ВеткаПоСборке(Сборка) Экспорт
	
	Если Не ЗначениеЗаполнено(Сборка) Тогда
		Возврат Справочники.Ветки.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиВерсии.Ветка КАК Ветка
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Ссылка = &Сборка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Сборка", Сборка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат  Выборка.Ветка;
	Иначе
		Возврат Справочники.Ветки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Определяет ветки проекта для исправления ошибки
//
// Параметры:
//  Проект - СправочникСсылка.Проекты - проект, к которому относится ошибка.
//  ВерсияИсправления - СправочникСсылка.ВерсииПроекта - версия обнаружения ошибки.
//
// Возвращаемое значение:
//  Ветки - ТаблицаЗначений - таблица с колонками:
//   *Ветка - СправочникСсылка.Ветки - ветка для исправления
//   *ДатаСоздания - Дата - дата создания ветки.
//
Функция ВеткиДляИсправленияОшибки(Проект, ВерсияИсправления, Обнаружена, СборкаОбнаружения, ВеткаОбнаружения, ДатаОбнаружения) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииПроекта.Ссылка КАК Версия,
	|	ВерсииПроекта.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ВТВерсияИсправления
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ссылка = &ВерсияИсправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииПроекта.Ссылка КАК Версия,
	|	ВерсииПроекта.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ВТВерсияОбнаружения
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ссылка = &ВерсияОбнаружения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииПроекта.Ветка КАК Ветка,
	|	ВЫБОР
	|		КОГДА ВерсииПроекта.ПорядковыйНомер < ВТВерсияИсправления.ПорядковыйНомер
	|				ИЛИ ВТВерсияИсправления.ПорядковыйНомер ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВеткаРанееВерсииИсправления,
	|	Ветки.Тип КАК ТипВетки,
	|	Ветки.ДатаСоздания КАК ДатаСоздания
	|ПОМЕСТИТЬ ВТВетки
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	|		ПО ВерсииПроекта.Ветка = Ветки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВерсияОбнаружения КАК ВТВерсияОбнаружения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВерсияИсправления КАК ВТВерсияИсправления
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Проект
	|	И (ВерсииПроекта.ПорядковыйНомер >= ВТВерсияОбнаружения.ПорядковыйНомер
	|			ИЛИ ВТВерсияОбнаружения.ПорядковыйНомер ЕСТЬ NULL)
	|	И НЕ ВерсииПроекта.ПометкаУдаления
	|	И НЕ Ветки.ПометкаУдаления
	|	И Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаВерсии)
	|	И Ветки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Разрабатывается), ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Тестируется))
	|	И (ВерсииПроекта.ДатаПрекращенияПоддержки >= &ТекущаяДата
	|			ИЛИ ВерсииПроекта.ДатаПрекращенияПоддержки = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Ветки.Ссылка,
	|	ЛОЖЬ,
	|	Ветки.Тип,
	|	Ветки.ДатаСоздания
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	НЕ Ветки.ПометкаУдаления
	|	И Ветки.Владелец = &Проект
	|	И Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ветки.Ветка КАК Ветка,
	|	Ветки.ВеткаРанееВерсииИсправления КАК ВеткаРанееВерсииИсправления,
	|	Ветки.ТипВетки КАК ТипВетки,
	|	Ветки.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	ВТВетки КАК Ветки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания"
	;
	
	ВерсияОбнаружения = Справочники.ВерсииПроекта.ПустаяСсылка();
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке И ЗначениеЗаполнено(СборкаОбнаружения) Тогда
		ВерсияОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаОбнаружения, "Владелец");
	ИначеЕсли Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке И ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
		ВерсияОбнаружения = ВерсияОбнаруженияДляВетки(ВеткаОбнаружения, ДатаОбнаружения);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ВерсияОбнаружения", ВерсияОбнаружения);
	Запрос.УстановитьПараметр("ВерсияИсправления", ВерсияИсправления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура НеПланируетсяИсправлять(МассивОшибок, КомуНаправлена, Комментарий, КоличествоОбработанных=0) Экспорт
			
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Для Каждого Ошибка из МассивОшибок Цикл
		
		ОшибкаОбъект = Ошибка.ПолучитьОбъект();
		
		ОшибкаБылаНаправлена = ОшибкаОбъект.КомуНаправлена;
		ОшибкаОбъект.КомуНаправлена = КомуНаправлена;
		
		Если ЗначениеЗаполнено(КомуНаправлена) И ОшибкаБылаНаправлена<>КомуНаправлена Тогда
			ОшибкаОбъект.ДатаНаправления = ТекущаяДата();
			ОшибкаОбъект.ДополнительныеСвойства.Вставить("Перенаправление", Истина);
		КонецЕсли;
		
		ПоследнийКомментарийПротокола = "";
		
		Если ОшибкаОбъект.Протокол.Количество()>0 Тогда
			ПоследнийКомментарийПротокола = ОшибкаОбъект.Протокол[0].Комментарий;	
		КонецЕсли;
		
		Если ОшибкаБылаНаправлена<>КомуНаправлена 
			ИЛИ ПоследнийКомментарийПротокола <> Комментарий Тогда
			ОшибкаОбъект.ДобавитьЗаписьВПротокол(ТекущийПользователь, Комментарий);
		КонецЕсли;

		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять;
		
		Попытка
			ОшибкаОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru='Ошибка %Код% не записана.' ");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", ОшибкаОбъект.Код) + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРегистрации(ОшибкаОбъект, ТаблицаРегистрации, ПараметрыРегистрации = Неопределено) Экспорт
	
	Если ОшибкаОбъект.СписокОбъектов.Количество() > 0 Тогда
		
		Счетчик = 0;
		Для Каждого Строка Из ОшибкаОбъект.СписокОбъектов Цикл
			
			НоваяСтрока = ТаблицаРегистрации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОшибкаОбъект);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если ПараметрыРегистрации <> Неопределено 
			   И ПараметрыРегистрации.Свойство("РазделОтветственныйОбъектовМетаданных") Тогда
				
				Если ЗначениеЗаполнено(ПараметрыРегистрации.РазделОтветственныйОбъектовМетаданных[Счетчик].РазделПроекта) Тогда
					НоваяСтрока.РазделПроектаМетаданные = ПараметрыРегистрации.РазделОтветственныйОбъектовМетаданных[Счетчик].РазделПроекта;
				КонецЕсли;
				Если ЗначениеЗаполнено(ПараметрыРегистрации.РазделОтветственныйОбъектовМетаданных[Счетчик].КомуНаправлена) Тогда
					НоваяСтрока.КомуНаправленаМетаданные = ПараметрыРегистрации.РазделОтветственныйОбъектовМетаданных[Счетчик].КомуНаправлена;
				КонецЕсли;
			КонецЕсли;
			Счетчик = Счетчик + 1;
			
		КонецЦикла; 
		
	Иначе 
		
		НоваяСтрока = ТаблицаРегистрации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОшибкаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

Функция МестоВозникновенияДляРегистрацииОшибки(ОшибкаОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.СборкаОбнаружения) Тогда
		МестоВозникновения = ОшибкаОбъект.СборкаОбнаружения;
	ИначеЕсли ЗначениеЗаполнено(ОшибкаОбъект.ВеткаОбнаружения) Тогда
		МестоВозникновения = ОшибкаОбъект.ВеткаОбнаружения;
	Иначе 
		МестоВозникновения = Неопределено;
	КонецЕсли; 
	
	Возврат МестоВозникновения;
	
КонецФункции

Процедура ПоискДублирующихОшибок(Таблица, МестоВозникновения, ПараметрыОшибки = Неопределено) Экспорт
	
	ЗапросДублирующихсяОшибок = Новый Запрос;
	ЗапросДублирующихсяОшибок.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОписанияОшибок.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	ТаблицаОписанияОшибок.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	ТаблицаОписанияОшибок.ХешУточнения КАК ХешУточнения,
	|	&СборкаОбнаружения КАК СборкаОбнаружения,
	|	&ВеткаОбнаружения КАК ВеткаОбнаружения,
	|	&ДатаОбнаружения КАК ДатаОбнаружения,
	|	&ДатаНаследования КАК ДатаНаследования,
	|	&РегистрироватьЗановоНепризнанныеОшибки КАК РегистрироватьЗановоНепризнанныеОшибки,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаОписанияОшибок.ПроблемныйОбъект) В (ТИП(Справочник.ОбъектыМетаданных), ТИП(Справочник.Подсистемы))
	|				И ТаблицаОписанияОшибок.ПроблемныйОбъект <> ЗНАЧЕНИЕ(Справочник.ОбъектыМетаданных.ПустаяСсылка)
	|				И ТаблицаОписанияОшибок.ПроблемныйОбъект <> ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипПроблемы.ОбъектыМетаданных)
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаОписанияОшибок.ПроблемныйОбъект) = ТИП(Справочник.ОбработчикиОбновленияИнформационнойБазы)
	|				И ТаблицаОписанияОшибок.ПроблемныйОбъект <> ЗНАЧЕНИЕ(Справочник.ОбработчикиОбновленияИнформационнойБазы.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипПроблемы.ОбработчикиОбновления)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипПроблемы.БезДетализации)
	|	КОНЕЦ КАК ТипПроблемы
	|ПОМЕСТИТЬ ТаблОписанияОшибок
	|ИЗ
	|	&ТаблицаОписанийОшибок КАК ТаблицаОписанияОшибок
	|ГДЕ
	|	НЕ ПОДСТРОКА(ТаблицаОписанияОшибок.ХешУточнения, 1, 1) ПОДОБНО """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТОшибки.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	ТОшибки.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	ТОшибки.ХешУточнения КАК ХешУточнения,
	|	ЕСТЬNULL(Ветки.Владелец, СборкиВерсии.Владелец) КАК Проект,
	|	ТОшибки.СборкаОбнаружения КАК СборкаОбнаружения,
	|	ЕСТЬNULL(СборкиВерсии.Ветка, ТОшибки.ВеткаОбнаружения) КАК ВеткаОбнаружения,
	|	ТОшибки.ДатаОбнаружения КАК ДатаОбнаружения,
	|	ТОшибки.ДатаНаследования КАК ДатаНаследования,
	|	ТОшибки.РегистрироватьЗановоНепризнанныеОшибки КАК РегистрироватьЗановоНепризнанныеОшибки,
	|	ВЫБОР
	|		КОГДА ТОшибки.ВеткаОбнаружения = НЕОПРЕДЕЛЕНО
	|				ИЛИ ТОшибки.ВеткаОбнаружения = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	|			ТОГДА ТОшибки.ВеткаОбнаружения
	|		ИНАЧЕ Ветки.Приемник
	|	КОНЕЦ КАК ВеткаОбнаруженияПриемник,
	|	ТОшибки.ТипПроблемы КАК ТипПроблемы
	|ПОМЕСТИТЬ ОписаниеОшибок
	|ИЗ
	|	ТаблОписанияОшибок КАК ТОшибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	|		ПО (Ветки.Ссылка = ТОшибки.ВеткаОбнаружения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО (СборкиВерсии.Ссылка = ТОшибки.СборкаОбнаружения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибкиСписокОбъектов.Ссылка КАК Ссылка,
	|	ОшибкиСписокОбъектов.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	ОшибкиСписокОбъектов.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	ОшибкиСписокОбъектов.ХешУточнения КАК ХешУточнения,
	|	ТОшибки.ВеткаОбнаружения КАК ОригинальнаяВеткаОбнаружения,
	|	ТОшибки.ВеткаОбнаруженияПриемник КАК ОригинальнаяВеткаОбнаруженияПриемник,
	|	ТОшибки.ДатаОбнаружения КАК ДатаОбнаружения,
	|	ТОшибки.ДатаНаследования КАК ДатаНаследования,
	|	ТОшибки.РегистрироватьЗановоНепризнанныеОшибки КАК РегистрироватьЗановоНепризнанныеОшибки,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ОшибкиСписокОбъектов.Ссылка.ПовторяемаяОшибка) = ТИП(Справочник.Ошибки)
	|				И ОшибкиСписокОбъектов.Ссылка.ПовторяемаяОшибка <> ЗНАЧЕНИЕ(Справочник.Ошибки.ПустаяСсылка)
	|				И (ОшибкиСписокОбъектов.Ссылка.Отозвана
	|					ИЛИ ТОшибки.РегистрироватьЗановоНепризнанныеОшибки
	|						И ОшибкиСписокОбъектов.Ссылка.НеПризнана)
	|				И ВЫБОР
	|					КОГДА ОшибкиСписокОбъектов.Ссылка.ВеткаОбнаружения = ТОшибки.ВеткаОбнаружения
	|						ТОГДА ТОшибки.ДатаОбнаружения
	|					ИНАЧЕ ТОшибки.ДатаНаследования
	|				КОНЕЦ > ОшибкиСписокОбъектов.Ссылка.ДатаОтзыва
	|			ТОГДА ОшибкиСписокОбъектов.Ссылка.ПовторяемаяОшибка
	|		ИНАЧЕ ОшибкиСписокОбъектов.Ссылка
	|	КОНЕЦ КАК ОригинальнаяОшибка
	|ПОМЕСТИТЬ ОтобранныеОшибки
	|ИЗ
	|	Справочник.Ошибки.СписокОбъектов КАК ОшибкиСписокОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОписаниеОшибок КАК ТОшибки
	|		ПО (НЕ ОшибкиСписокОбъектов.Ссылка.ПометкаУдаления)
	|			И ОшибкиСписокОбъектов.Ссылка.Владелец = ТОшибки.Проект
	|			И ОшибкиСписокОбъектов.ХешУточнения = ТОшибки.ХешУточнения
	|			И (ТОшибки.ТипПроблемы <> ЗНАЧЕНИЕ(Перечисление.ТипПроблемы.ОбъектыМетаданных)
	|				ИЛИ ОшибкиСписокОбъектов.ПодчиненныйОбъект = ТОшибки.ПодчиненныйОбъект)
	|			И (ТОшибки.ТипПроблемы = ЗНАЧЕНИЕ(Перечисление.ТипПроблемы.БезДетализации)
	|				ИЛИ ОшибкиСписокОбъектов.ПроблемныйОбъект = ТОшибки.ПроблемныйОбъект)
	|			И (ОшибкиСписокОбъектов.Ссылка.ВеткаОбнаружения <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	|					И (ОшибкиСписокОбъектов.Ссылка.ВеткаОбнаружения В (ТОшибки.ВеткаОбнаружения, ТОшибки.ВеткаОбнаруженияПриемник)
	|						ИЛИ ОшибкиСписокОбъектов.Ссылка.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках))
	|				ИЛИ ОшибкиСписокОбъектов.Ссылка.СборкаОбнаружения <> ЗНАЧЕНИЕ(Справочник.СборкиВерсии.ПустаяСсылка)
	|					И (ОшибкиСписокОбъектов.Ссылка.СборкаОбнаружения = ТОшибки.СборкаОбнаружения
	|						ИЛИ ОшибкиСписокОбъектов.Ссылка.СборкаОбнаружения.Ветка В (ТОшибки.ВеткаОбнаружения, ТОшибки.ВеткаОбнаруженияПриемник)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТОшибки.Ссылка КАК Ссылка,
	|	ТОшибки.Ссылка.Код КАК Код,
	|	ТОшибки.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	ТОшибки.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	ТОшибки.ХешУточнения КАК ХешУточнения,
	|	ТОшибки.ОригинальнаяОшибка КАК ОригинальнаяОшибка,
	|	ТОшибки.ОригинальнаяВеткаОбнаружения КАК ОригинальнаяВеткаОбнаружения,
	|	ВЫБОР
	|		КОГДА ТОшибки.РегистрироватьЗановоНепризнанныеОшибки
	|			ТОГДА ТОшибки.ОригинальнаяОшибка.НеПризнана
	|		ИНАЧЕ ТОшибки.ОригинальнаяОшибка.Отозвана
	|	КОНЕЦ КАК НеПризнанаОтозвана,
	|	ВЫБОР
	|		КОГДА ТОшибки.ОригинальнаяОшибка.ДатаОтзыва <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТОшибки.ОригинальнаяОшибка.ДатаОтзыва
	|		КОГДА ТОшибки.ОригинальнаяОшибка.ДатаОтзыва <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТОшибки.ОригинальнаяОшибка.ДатаОтзыва
	|		КОГДА ТОшибки.ОригинальнаяОшибка.ДатаНаправления <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ТОшибки.ОригинальнаяОшибка.ДатаНаправления
	|		ИНАЧЕ ТОшибки.ОригинальнаяОшибка.ДатаРассмотрения
	|	КОНЕЦ КАК ОригинальнаяОшибкаДатаРассмотрения,
	|	ЕСТЬNULL(ОшибкиИсправлениеВВетках.Ветка, ТОшибки.ОригинальнаяОшибка.ВеткаОбнаружения) КАК ВеткаОбнаружения,
	|	ТОшибки.ДатаОбнаружения КАК ДатаОбнаружения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОшибкиИсправлениеВВетках.Ветка, ТОшибки.ОригинальнаяОшибка.ВеткаОбнаружения) = ТОшибки.ОригинальнаяВеткаОбнаружения
	|			ТОГДА ТОшибки.ДатаОбнаружения
	|		ИНАЧЕ ТОшибки.ДатаНаследования
	|	КОНЕЦ КАК ДатаОбнаруженияНаследования,
	|	ВЫБОР
	|		КОГДА НЕ ОшибкиИсправлениеВВетках.Ветка ЕСТЬ NULL
	|			ТОГДА ОшибкиИсправлениеВВетках.ВеткаИсправления
	|		КОГДА НЕ ТОшибки.ОригинальнаяОшибка.ВеткаИсправления ЕСТЬ NULL
	|				И НЕ ТОшибки.ОригинальнаяОшибка.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	|			ТОГДА ТОшибки.ОригинальнаяОшибка.ВеткаИсправления
	|		ИНАЧЕ ТОшибки.ОригинальнаяОшибка.ВеткаОбнаружения
	|	КОНЕЦ КАК ВеткаИсправления,
	|	ВЫБОР
	|		КОГДА ОшибкиИсправлениеВВетках.Ветка ЕСТЬ NULL
	|			ТОГДА ТОшибки.ОригинальнаяОшибка.Проверена
	|		ИНАЧЕ ОшибкиИсправлениеВВетках.Ссылка.Исправлена
	|				И ОшибкиИсправлениеВВетках.СостояниеИсправления <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.ТребуетсяИсправление)
	|	КОНЕЦ КАК Исправлена,
	|	ВЫБОР
	|		КОГДА ОшибкиИсправлениеВВетках.Ветка ЕСТЬ NULL
	|			ТОГДА ТОшибки.ОригинальнаяОшибка.ДатаПроверки
	|		ИНАЧЕ ОшибкиИсправлениеВВетках.ДатаИсправления
	|	КОНЕЦ КАК ДатаИсправления
	|ПОМЕСТИТЬ ОтобранныеОшибкиИсправлениеВВетках
	|ИЗ
	|	ОтобранныеОшибки КАК ТОшибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	|		ПО (ТОшибки.ОригинальнаяОшибка.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках))
	|			И (НЕ ТОшибки.ОригинальнаяОшибка.НеПризнана)
	|			И (ОшибкиИсправлениеВВетках.Ссылка = ТОшибки.ОригинальнаяОшибка)
	|			И (ОшибкиИсправлениеВВетках.Ветка В (ТОшибки.ОригинальнаяВеткаОбнаружения, ТОшибки.ОригинальнаяВеткаОбнаруженияПриемник))
	|			И (ОшибкиИсправлениеВВетках.СостояниеИсправления В (ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.ТребуетсяИсправление), ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.Исправлена)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТОшибки.Ссылка КАК Ссылка,
	|	ТОшибки.Код КАК Код,
	|	ТОшибки.ПроблемныйОбъект КАК ПроблемныйОбъект,
	|	ТОшибки.ПодчиненныйОбъект КАК ПодчиненныйОбъект,
	|	ТОшибки.ХешУточнения КАК ХешУточнения,
	|	ТОшибки.НеПризнанаОтозвана КАК НеПризнанаОтозвана,
	|	ТОшибки.ОригинальнаяОшибка КАК ОригинальнаяОшибка,
	|	ТОшибки.ОригинальнаяОшибкаДатаРассмотрения КАК ОригинальнаяОшибкаДатаРассмотрения,
	|	ТОшибки.ВеткаОбнаружения КАК ВеткаОбнаружения,
	|	ТОшибки.ВеткаИсправления КАК ВеткаИсправления,
	|	ТОшибки.ВеткаИсправления.ДатаПомещения КАК ВеткаИсправленияДатаПомещения,
	|	ТОшибки.Исправлена КАК Исправлена,
	|	ТОшибки.ДатаИсправления КАК ДатаИсправления,
	|	ТОшибки.ДатаОбнаруженияНаследования КАК ДатаОбнаруженияНаследования,
	|	ТОшибки.ОригинальнаяВеткаОбнаружения КАК ОригинальнаяВеткаОбнаружения
	|ИЗ
	|	ОтобранныеОшибкиИсправлениеВВетках КАК ТОшибки
	|ГДЕ
	|	НЕ(ТОшибки.НеПризнанаОтозвана
	|					И ТОшибки.ДатаОбнаруженияНаследования > ТОшибки.ОригинальнаяОшибкаДатаРассмотрения
	|				ИЛИ ТОшибки.Исправлена
	|					И ТОшибки.ДатаОбнаруженияНаследования > ТОшибки.ДатаИсправления
	|					И ТОшибки.ВеткаИсправления = ТОшибки.ВеткаОбнаружения
	|				ИЛИ ТОшибки.Исправлена
	|					И ТОшибки.ВеткаИсправления <> ТОшибки.ВеткаОбнаружения
	|					И (ТОшибки.ВеткаИсправления.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена)
	|							И ТОшибки.ДатаОбнаруженияНаследования > ТОшибки.ВеткаИсправления.ДатаПомещения
	|						ИЛИ ТОшибки.ВеткаИсправления = ТОшибки.ОригинальнаяВеткаОбнаружения
	|							И ТОшибки.ДатаОбнаружения > ТОшибки.ДатаИсправления
	|						ИЛИ ТОшибки.ВеткаИсправления.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Заморожена)))";

	СборкаОбнаружения = Справочники.СборкиВерсии.ПустаяСсылка();
	ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
	
	Если ТипЗнч(МестоВозникновения) = Тип("СправочникСсылка.Ветки") Тогда
		ВеткаОбнаружения = МестоВозникновения;
	Иначе
		СборкаОбнаружения = МестоВозникновения;
	КонецЕсли;

	ПараметрыСТипомСтруктура = (ТипЗнч(ПараметрыОшибки) = Тип("Структура"));
	ДатаОбнаружения = Дата(1, 1, 1, 0, 0, 0);
	Если ПараметрыСТипомСтруктура И ПараметрыОшибки.Свойство("ДатаОбнаружения") 
		                            И ЗначениеЗаполнено(ПараметрыОшибки.ДатаОбнаружения) Тогда
		ДатаОбнаружения = ПараметрыОшибки.ДатаОбнаружения;
	КонецЕсли;
	ДатаНаследования = ДатаОбнаружения;
	Если ПараметрыСТипомСтруктура 
		И ПараметрыОшибки.Свойство("ДатаНаследования") 
		И ЗначениеЗаполнено(ПараметрыОшибки.ДатаНаследования) Тогда
		ДатаНаследования =  ПараметрыОшибки.ДатаНаследования;
	КонецЕсли;
	
   	РегистрироватьЗановоНепризнанныеОшибки = Ложь;	
	Если ПараметрыСТипомСтруктура И ПараметрыОшибки.Свойство("ДостоверностьОбнаружения") 
		И ПараметрыОшибки.ДостоверностьОбнаружения = "Высокая" Тогда			
			РегистрироватьЗановоНепризнанныеОшибки = Истина;
	КонецЕсли;

	ЗапросДублирующихсяОшибок.УстановитьПараметр("ВеткаОбнаружения", ВеткаОбнаружения);
	ЗапросДублирующихсяОшибок.УстановитьПараметр("СборкаОбнаружения", СборкаОбнаружения);
	ЗапросДублирующихсяОшибок.УстановитьПараметр("ДатаНаследования", ДатаНаследования);
	ЗапросДублирующихсяОшибок.УстановитьПараметр("ДатаОбнаружения", ДатаОбнаружения);
	ЗапросДублирующихсяОшибок.УстановитьПараметр("РегистрироватьЗановоНепризнанныеОшибки", РегистрироватьЗановоНепризнанныеОшибки);

	ОписанияОшибокДляЗапроса = Таблица.Скопировать(,"ПроблемныйОбъект,ПодчиненныйОбъект,ХешУточнения");
	ЗапросДублирующихсяОшибок.УстановитьПараметр("ТаблицаОписанийОшибок", ОписанияОшибокДляЗапроса);
	
	Отбор = Новый Структура("ПроблемныйОбъект,ПодчиненныйОбъект,ХешУточнения");
	ДублиОшибок = ЗапросДублирующихсяОшибок.Выполнить().Выбрать();
	
	Пока ДублиОшибок.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, ДублиОшибок);
		МассивДублей = Таблица.НайтиСтроки(Отбор);
		Для Каждого Строка Из МассивДублей Цикл
			Строка.ЭтоДублирующаяОшибка = Истина;
			Строка.СсылкаНаОшибку = ДублиОшибок.Ссылка;
			Строка.КодОшибки      = ДублиОшибок.Код;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗарегистрироватьСУчетомДублей(ТаблицаРегистрации, МестоВозникновения, ПараметрыОшибки = Неопределено, ПоляГруппировки = "") Экспорт
	
	ДополнитьПараметрыОшибки(МестоВозникновения, ПараметрыОшибки);
	
	// Добавление колонок, в случае их отсутствия
	Если ТаблицаРегистрации.Колонки.Найти("ХешУточнения") = Неопределено Тогда
		ТаблицаРегистрации.Колонки.Добавить("ХешУточнения", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	КонецЕсли; 
	
	Если ТаблицаРегистрации.Колонки.Найти("СсылкаНаОшибку") = Неопределено Тогда
		ТаблицаРегистрации.Колонки.Добавить("СсылкаНаОшибку", Новый ОписаниеТипов("СправочникСсылка.Ошибки"));
	КонецЕсли; 
	
	Если ТаблицаРегистрации.Колонки.Найти("КодОшибки") = Неопределено Тогда
		ТаблицаРегистрации.Колонки.Добавить("КодОшибки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(11)));
	КонецЕсли; 
	
	Если ТаблицаРегистрации.Колонки.Найти("ЭтоДублирующаяОшибка") = Неопределено Тогда
		ТаблицаРегистрации.Колонки.Добавить("ЭтоДублирующаяОшибка", Новый ОписаниеТипов("Булево"));
	КонецЕсли; 
	ТаблицаРегистрации.ЗаполнитьЗначения(Ложь, "ЭтоДублирующаяОшибка");	
	
	Для Каждого Строка Из ТаблицаРегистрации Цикл
		Строка.ХешУточнения = ПосчитатьХеш(Строка.Уточнение);
	КонецЦикла; 
	
	ПоискДублирующихОшибок(ТаблицаРегистрации, МестоВозникновения, ПараметрыОшибки);
	
	НадоРегистрироватьОшибки = Истина;
	Если ТипЗнч(ПараметрыОшибки) = Тип("Структура")
		И ПараметрыОшибки.Свойство("НадоРегистрироватьОшибки")
		Тогда
			НадоРегистрироватьОшибки = ПараметрыОшибки.НадоРегистрироватьОшибки;
	КонецЕсли;	
	
	Если НадоРегистрироватьОшибки Тогда
		СгруппироватьИЗаписатьОшибки(ТаблицаРегистрации, ПараметрыОшибки, ПоляГруппировки);
	КонецЕсли;	
	
КонецФункции

Процедура ЗаписатьОшибкуВРегистрРезультатыРегистрацииОшибок(Ошибка, СсылкаНаОшибку, ЭтоДубль, ПараметрыРегистрации) Экспорт
	
	ВыполнятьЗагрузку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка.Владелец, "ЗагружатьРезультатыВыполненияТестов");
	Если НЕ ВыполнятьЗагрузку Тогда
		Возврат;
	КонецЕсли;
	Ветка = ?(ЗначениеЗаполнено(Ошибка.ВеткаОбнаружения), Ошибка.ВеткаОбнаружения,
	                            ПодобратьВерсиюИсправленияВеткуОбнаруженияДляОшибки(Ошибка).ВеткаОбнаружения);
	Если НЕ ЗначениеЗаполнено(Ветка) ИЛИ НЕ ЗначениеЗаполнено(Ошибка.Тест) Тогда
		Возврат;
	КонецЕсли;

	ИсходнаяИнформация = СокрЛП(Ошибка.ИсходнаяИнформацияОбОшибке + Символы.ПС + Символы.ПС + Ошибка.ПорядокВоспроизведения);
	
	ИдЗапуска = Неопределено;      
	ИдПроекта = Неопределено;
	ПараметрыРегистрации.Свойство("ИдентификаторЗапуска", ИдЗапуска);
	ПараметрыРегистрации.Свойство("ИдентификаторПроекта", ИдПроекта);
	Если НЕ ЗначениеЗаполнено(ИдЗапуска) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан идентификатор запуска.'");
		
		ЗаписьЖурналаРегистрации("ЗаписатьОшибкуВРегистрРезультатыРегистрацииОшибок",
								 УровеньЖурналаРегистрации.Ошибка,,
								 СсылкаНаОшибку, ТекстСообщения + Символы.ПС + ИсходнаяИнформация);
		Возврат;
	КонецЕсли;
	
	ПроектТестирования = Неопределено; 
  	Если ЗначениеЗаполнено(ИдПроекта) Тогда
		ПроектТестирования = ПроектТестированияПоАдресуСервера(ИдПроекта);
	КонецЕсли;                                                            
	Если НЕ ЗначениеЗаполнено(ПроектТестирования) Тогда
		ПроектТестирования =  Ошибка.Владелец;
	КонецЕсли;

	ЗапускТестирования = ЗапускТестирования(ИдЗапуска, ПроектТестирования);
	Если НЕ ЗначениеЗаполнено(ЗапускТестирования) Тогда
		НовыйЗапускТестирования = Документы.ЗапускТестирования.СоздатьДокумент();
		НовыйЗапускТестирования.Pipeline_ID = ИдЗапуска;
		НовыйЗапускТестирования.Проект = ПроектТестирования;
		НовыйЗапускТестирования.Ветка = Ветка; 
		НовыйЗапускТестирования.ВеткаСтрокой = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя");
		НовыйЗапускТестирования.Дата = ТекущаяДата();
		НовыйЗапускТестирования.ДополнительныеСвойства.Вставить("НеЗапускатьАвтоматическоеТестирование", Истина);
		НовыйЗапускТестирования.Записать(РежимЗаписиДокумента.Проведение);
		ЗапускТестирования = НовыйЗапускТестирования.Ссылка;
	КонецЕсли;
		
	РезультатыТестаДетализируютсяПоОбъектамМетаданных =
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка.Тест,"РезультатыТестаДетализируютсяПоОбъектамМетаданных");
	
	ЭлементыТеста = Новый Массив;
	Если РезультатыТестаДетализируютсяПоОбъектамМетаданных Тогда 
		Для Каждого Строка Из Ошибка.СписокОбъектов Цикл
			Если ЗначениеЗаполнено(Строка.ПодчиненныйОбъект) Тогда
				ЭлементыТеста.Добавить(Строка.ПодчиненныйОбъект);
			ИначеЕсли ЗначениеЗаполнено(Строка.ПроблемныйОбъект) Тогда 
				ЭлементыТеста.Добавить(Строка.ПроблемныйОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЭлементыТеста.Количество() = 0 Тогда
		ЭлементыТеста.Добавить(Неопределено);
	КонецЕсли;
	Для Каждого ЭлементТеста Из ЭлементыТеста Цикл
		
		МенеджерЗаписи = РегистрыСведений.РезультатыРегистрацииОшибок.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Проект = ПроектТестирования;
		МенеджерЗаписи.Тест = Ошибка.Тест;
		МенеджерЗаписи.ЭлементТеста = ЭлементТеста;
		МенеджерЗаписи.Ветка = Ветка;
		МенеджерЗаписи.Ошибка = СсылкаНаОшибку;
		
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.Период = ТекущаяДата();
			МенеджерЗаписи.Проект = ПроектТестирования;
			МенеджерЗаписи.Тест = Ошибка.Тест;
			МенеджерЗаписи.ЭлементТеста = ЭлементТеста;
			МенеджерЗаписи.Ветка = Ветка;
			МенеджерЗаписи.Ошибка = СсылкаНаОшибку;
			МенеджерЗаписи.ЗапускТестирования = ЗапускТестирования;
			МенеджерЗаписи.Дубликат = ЭтоДубль;
			МенеджерЗаписи.Сценарий = Ошибка.СценарийПользователя;
			Если ПараметрыРегистрации.Свойство("Процесс") Тогда
				МенеджерЗаписи.Процесс = ПараметрыРегистрации.Процесс;
			КонецЕсли;
			МенеджерЗаписи.ИсходнаяИнформация = ИсходнаяИнформация;
			
			МенеджерЗаписи.Записать();
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные для указанной ветки
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки - интересующая ветка
//
// Возвращаемое значение:
//  Структура - содержит данные ветки.
//
Функция ДанныеДляВетки(Ветка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", Перечисления.ТипыВеток.ПустаяСсылка());
	Результат.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	Результат.Вставить("ТипПриемника", Перечисления.ТипыВеток.ПустаяСсылка());
	Результат.Вставить("Приемник", Справочники.Ветки.ПустаяСсылка());
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ветки.Тип КАК Тип,
	|	Ветки.Приемник КАК Приемник,
	|	Приемники.Тип КАК ТипПриемника
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Приемники
	|		ПО Ветки.Приемник = Приемники.Ссылка
	|ГДЕ
	|	Ветки.Ссылка = &Ветка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВерсияОбнаруженияДляВеткиТехническогоПроекта(Ветка, ДатаОбнаружения) Экспорт
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Версия КАК Версия,
	|	ТехническиеПроекты.Версия.ПорядковыйНомер КАК ВерсияПорядковыйНомер
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ветка = &Ветка
	|	И ТехническиеПроекты.Версия <> ЗНАЧЕНИЕ(Справочник.ВерсииПроекта.ПустаяСсылка)
	|	И НЕ ТехническиеПроекты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсияПорядковыйНомер ВОЗР"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Версия;
	Иначе
		// Если ветка не указана в технических проектах, версия определяется по ветке-приемнику
		ВеткаПриемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Приемник");
		
		Если ЗначениеЗаполнено(ВеткаПриемник) Тогда
			Возврат ВерсияОбнаруженияДляВетки(ВеткаПриемник, ДатаОбнаружения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Справочники.ВерсииПроекта.ПустаяСсылка();
	
КонецФункции

Функция ВерсияОбнаруженияДляВеткиПроекта(Ветка, ДатаОбнаружения) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(Ветки.ДатаСоздания) КАК ДатаСоздания
	|ПОМЕСТИТЬ ВТДатыСоздания
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаВерсии)
	|	И Ветки.Источник = &Ветка
	|	И Ветки.ДатаСоздания > &ДатаОбнаружения
	|	И НЕ Ветки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(Ветки.Ссылка) КАК Ветка
	|ПОМЕСТИТЬ ВТВетки
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыСоздания КАК ДатыСоздания
	|		ПО Ветки.ДатаСоздания = ДатыСоздания.ДатаСоздания
	|			И (Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаВерсии))
	|			И (Ветки.Источник = &Ветка)
	|			И (НЕ Ветки.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Версия
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВетки КАК Ветки
	|		ПО ВерсииПроекта.Ветка = Ветки.Ветка
	|ГДЕ
	|	ВерсииПроекта.Ветка <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	|	И (НЕ Ветки.Ветка ЕСТЬ NULL
	|			ИЛИ Ветки.Ветка ЕСТЬ NULL
	|				И ВерсииПроекта.Ветка = &Ветка)
	|	И НЕ ВерсииПроекта.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ПорядковыйНомер"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	Запрос.УстановитьПараметр("ДатаОбнаружения", ДатаОбнаружения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Версия;
	Иначе
		Возврат Справочники.ВерсииПроекта.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ВерсияОбнаруженияДляВеткиИсправленияОшибок(Ветка, ДатаОбнаружения) Экспорт
	
	ДанныеВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ветка, "Приемник, Приемник.Тип");
	Если ДанныеВетки.ПриемникТип <> Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
		Возврат ВерсияОбнаруженияДляВетки(ДанныеВетки.Приемник, ДатаОбнаружения);
	КонецЕсли;
	
	Возврат Справочники.ВерсииПроекта.ПустаяСсылка();
	
КонецФункции

// Определяет версию обнаружения по указанной ветке
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки - ветка обнаружения ошибки
//
// Возвращаемое значение:
//  Версия - СправочникСсылка.ВерсииПроекта - Версия для указанной ветки
//
Функция ВерсияОбнаруженияДляВеткиВерсии(Ветка) Экспорт
	
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Версия
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ветка = &Ветка
	|	И НЕ ВерсииПроекта.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииПроекта.ПорядковыйНомер ВОЗР"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Версия;
	Иначе
		Возврат Справочники.ВерсииПроекта.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Определяет подразделение, ответственное за ошибку, по ответственному пользователю (см. ОтветственныйЗаОшибку())
//
// Параметры:
//	Ошибка - СправочникСсылка.Ошибки - ссылка на ошибку, для которой нужно определить ответственное подразделение
//
// Возвращаемое значение:
//	Подразделение - СправочникСсылка.Подразделения - Подразделение, ответственное за ошибку
//
Функция ПодразделениеОтветственноеЗаОшибку(Ошибка) Экспорт
	
	Подразделение = Неопределено;
	
	ОтветственныйЗаОшибку = ОтветственныйЗаОшибку(Ошибка);
	
	Если ЗначениеЗаполнено(ОтветственныйЗаОшибку) Тогда
		Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтветственныйЗаОшибку, "Подразделение");
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

// Определяет пользователя, ответственнгое за ошибку, по следующему принципу:
//		Если ошибка исправлена - возвращается пользователь из реквизита "Исправил";
//		Если ошибка признана/не признана - возвращается пользователь из реквизита "Рассмотрел";
//		Если ошибка зарегистрирована - возвращается пользователь из реквизита "Зарегистрировал";
//		Если ошибка не зарегистрирована - возвращается автор ошибки;
//
// Параметры:
//	Ошибка - СправочникСсылка.Ошибки - ссылка на ошибку, для которой нужно определить ответственного пользователя;
//				Структура - допускается указание структуры, которая обязательно должна содержать следующие данные:
//					- Статус - ПеречислениеСсылка.СтатусыОшибок;
//					- КтоПривнес - СправочникСсылка.Пользователи;
//					- Исправил - СправочникСсылка.Пользователи;
//					- Рассмотрел - СправочникСсылка.Пользователи;
//					- Зарегистрировал - СправочникСсылка.Пользователи;
//					- Автор - СправочникСсылка.Пользователи;
//
// Возвращаемое значение:
//	СправочникСсылка.Пользователи - Пользователь, ответственный за ошибку
//
Функция ОтветственныйЗаОшибку(Ошибка) Экспорт
	
	Ответственный = Неопределено;
	ОтветственныйПривнесший = Ложь;
	
	Если ОтветственныйПривнесший И ЗначениеЗаполнено(Ошибка.КтоПривнес) Тогда
		Ответственный = Ошибка.КтоПривнес;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Закрыта И Не Ошибка.Исправил.Пустая()
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
		Ответственный = Ошибка.Исправил;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Закрыта И Не Ошибка.Рассмотрел.Пустая()
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.Отозвана И Не Ошибка.Рассмотрел.Пустая()
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.НеПризнана
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.Признана
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда
		Ответственный = Ошибка.Рассмотрел;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
		Ответственный = Ошибка.Зарегистрировал;
	ИначеЕсли Ошибка.Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.Отозвана
		ИЛИ Ошибка.Статус = Перечисления.СтатусыОшибок.Закрыта Тогда
		Ответственный = Ошибка.Автор;
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

// Заполняет подразделение, ответственное за ошибку, по ответственному пользователю (см. ОтветственныйЗаОшибку())
//
// Параметры:
//	ОшибкаОбъект - СправочникОбъект.Ошибки - ошибка, для которой нужно определить ответственное подразделение
//	ОшибкаСсылка - СправочникСсылка.Ошибки - предыдущая версия ошибки, на основании нее определяется, поменялся ли ответственный пользователь
//
Процедура ЗаполнитьПодразделениеОтветственноеЗаОшибку(ОшибкаОбъект, ОшибкаСсылка) Экспорт
	
	Если Не ОшибкаОбъект.ПользовательУказавшийПодразделение.Пустая() Тогда
		// Если заполнен ПользовательУказавшийПодразделение, значит подразделение установлено в ручном режиме, не переопределяем его.
		Возврат;
	КонецЕсли;
	
	Ответственный = ОтветственныйЗаОшибку(ОшибкаОбъект);
	СтарыйОтветственный = Неопределено;
	Если ЗначениеЗаполнено(ОшибкаСсылка) Тогда
		РеквизитыСтрокой = "Статус,КтоПривнес,Исправил,Рассмотрел,Зарегистрировал,Автор";
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОшибкаСсылка, РеквизитыСтрокой);
		СтарыйОтветственный = ОтветственныйЗаОшибку(РеквизитыСсылки);
	КонецЕсли;
	Если СтарыйОтветственный <> Ответственный Тогда
		ОшибкаОбъект.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ответственный, "Подразделение");
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыМетаданныхОшибки(МассивМетаданных) Экспорт
	
	АнализируемыеРеквизитыСтрокой = "ОтветственныйРазработчик,ОтветственныйТестировщик,РазделПроекта";
	СтруктураВозврата = Новый Структура(АнализируемыеРеквизитыСтрокой);
	
	Если МассивМетаданных.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	АнализируемыеРеквизиты = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыМетаданных.Ответственный КАК ОтветственныйРазработчик,
	|	ОбъектыМетаданных.ОтветственныйЗаТестирование КАК ОтветственныйТестировщик,
	|	ОбъектыМетаданных.РазделПроекта КАК РазделПроекта
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Ссылка В (&Метаданные)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтветственныйРазработчик),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтветственныйЗаТестирование),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РазделПроекта)
	|ПО
	|	ОБЩИЕ";
	Запрос.УстановитьПараметр("Метаданные", МассивМетаданных);
	Результат = Запрос.Выполнить();
	
	ВыборкаИтого = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаИтого.Следующий() Тогда
		
		//Получаем реквизиты, у которых для всех объектов одинаковые значения:
		Для каждого АнализируемыйРеквизит Из СтрРазделить(АнализируемыеРеквизитыСтрокой, ",") Цикл
			Если ВыборкаИтого[АнализируемыйРеквизит] = 1 Тогда
				АнализируемыеРеквизиты.Добавить(АнализируемыйРеквизит);
			КонецЕсли;
		КонецЦикла;
		
		Если АнализируемыеРеквизиты.Количество() <> 0 Тогда
			Выборка = ВыборкаИтого.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка, СтрСоединить(АнализируемыеРеквизиты, ","));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьОшибкиСоСменойСрокаОтработки(Версия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	НЕ Ошибки.ПометкаУдаления
	|	И Ошибки.ВерсияИсправления = &Версия
	|	И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ОшибкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОшибкаОбъект.Заблокировать();
			ОшибкаОбъект.ДополнительныеСвойства.Вставить("РассчитатьСрокОтработки", Истина);
			ОшибкаОбъект.Записать();
			ОшибкаОбъект.Разблокировать();
		Исключение
			ИмяСобытия = НСтр("ru='Запись ошибки'");
			ТекстСообщения = НСтр("ru = 'Не удалось записать ошибку по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОписаниеОшибки());
			
			ЗаписьЖурналаРегистрации(ИмяСобытия,
									 УровеньЖурналаРегистрации.Ошибка,
									 Метаданные.Справочники.Ошибки,
									 ОшибкаОбъект.Ссылка,
									 ТекстСообщения);
		КонецПопытки;
								 
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиПоле(ТекстовыйДокумент, Макет, Знач ЗначениеПоля, Заголовок = "", ЗаголовокСлева = Ложь, Ссылка = Неопределено, ПараметрыТекста = Неопределено)
	
	РазмерШрифта = 4;
	ЦветТекста = "";
	
	Если Заголовок="" Тогда
		Область = Макет.ПолучитьОбласть("ПолеБезЗаголовка");
	ИначеЕсли ЗаголовокСлева Тогда
		Область = Макет.ПолучитьОбласть("ПолеЗаголовокСлева");
	Иначе
		Область = Макет.ПолучитьОбласть("ПолеЗаголовокСверху");
		Область.Параметры.Заголовок = Заголовок + "<BR>";
	КонецЕсли;
	
	ОбработанноеЗначениеПоля = ЗначениеПоля;
	
	Если ТипЗнч(ОбработанноеЗначениеПоля) = Тип("Строка") Тогда
		ОбработанноеЗначениеПоля = СтрЗаменить(ОбработанноеЗначениеПоля, "<", "&lt");
		ОбработанноеЗначениеПоля = СтрЗаменить(ОбработанноеЗначениеПоля, ">", "&gt");
		ОбработанноеЗначениеПоля = РазэкранироватьУгловыеСкобкиВСтроке(ОбработанноеЗначениеПоля);
		ОбработанноеЗначениеПоля = НавигационныеСсылкиВГиперссылки(ОбработанноеЗначениеПоля);
		ОбработанноеЗначениеПоля = ТекстовыеСсылкиВГиперссылки(ОбработанноеЗначениеПоля);
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыТекста) = Тип("Структура") Тогда
		Если ПараметрыТекста.Свойство("НеразрывныеПробелы") И ПараметрыТекста.НеразрывныеПробелы Тогда
			ОбработанноеЗначениеПоля = СтрЗаменить(ОбработанноеЗначениеПоля, " ", "&nbsp;");
		КонецЕсли;	 
	КонецЕсли;	 
	
	
	Если ТипЗнч(ПараметрыТекста) = Тип("Структура") Тогда
		
		Если ПараметрыТекста.Свойство("Зачеркнутый") И ПараметрыТекста.Зачеркнутый Тогда
			ОбработанноеЗначениеПоля = "<Strike>" + ОбработанноеЗначениеПоля + "</Strike>";
		КонецЕсли;
		
		Если ПараметрыТекста.Свойство("ЦветТекста") Тогда
			ЦветТекста = "color=" + Строка(ПараметрыТекста.ЦветТекста);
		КонецЕсли;
		
		Если ПараметрыТекста.Свойство("РазмерШрифта") Тогда
			РазмерШрифта = ПараметрыТекста.РазмерШрифта;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаголовокСлева Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			ОбработанноеЗначениеПоля = "<A href=""" + ПолучитьНавигационнуюСсылку(Ссылка)+ """" + ">" + Строка(Заголовок) + "</A>";
		Иначе
			ОбработанноеЗначениеПоля = Заголовок + " " + ОбработанноеЗначениеПоля;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработанноеЗначениеПоля = "<FONT Size=" + Строка(РазмерШрифта) + " " + ЦветТекста + ">"
								+ ОбработанноеЗначениеПоля + "</FONT>";
								
	ОбработанноеЗначениеПоля = СтрЗаменить(ОбработанноеЗначениеПоля, Символы.ПС, "<BR>");
	
	ОбработанноеЗначениеПоля = ОбработанноеЗначениеПоля + "<BR>";
	
	Если Заголовок = "" Тогда
		ТекстовыйДокумент.ДобавитьСтроку(ОбработанноеЗначениеПоля);
	ИначеЕсли ЗаголовокСлева Тогда	
		ТекстовыйДокумент.ДобавитьСтроку(ОбработанноеЗначениеПоля);
	Иначе
		ОбработанноеЗначениеПоля = Заголовок + "<BR>" + ОбработанноеЗначениеПоля;
		
		ОбработанноеЗначениеПоля = "<FONT Size=" + Строка(РазмерШрифта) + " " + ЦветТекста + ">"
								+ ОбработанноеЗначениеПоля + "</FONT>";
								
		ТекстовыйДокумент.ДобавитьСтроку(ОбработанноеЗначениеПоля);
	КонецЕсли;
	
КонецПроцедуры

Функция НавигационныеСсылкиВГиперссылки(Знач Текст)
	
	КоличествоВхождений = 2;
	ВсегоСсылок = СтрЧислоВхождений(Текст, "e1cib/data/")*КоличествоВхождений;
	Если ВсегоСсылок = 0 Тогда
		Возврат Текст;
	КонецЕсли;
	
	ЗаменныеСсылки = "";
	НомерВхождения = 1;
	ДругойШрифт = Новый Структура("РазмерШрифта", 2);
	Пока НомерВхождения <= ВсегоСсылок Цикл
		ТекстСсылки = ОбщегоНазначенияСППРКлиентСервер.ТекстНавигационнойСсылки(Текст, НомерВхождения);
		Гиперссылка = СформироватьГиперссылку(ТекстСсылки,,,ДругойШрифт);
		Если СтрНайти(ЗаменныеСсылки, ТекстСсылки) = 0 Тогда
			Текст = СтрЗаменить(Текст, ТекстСсылки, Гиперссылка);
			ЗаменныеСсылки = ЗаменныеСсылки + "," + ТекстСсылки;
		КонецЕсли;
		НомерВхождения = НомерВхождения + КоличествоВхождений;
	КонецЦикла;
	Возврат Текст;
	
КонецФункции

Функция СформироватьГиперссылку(СтрокаСсылки, ПредставлениеСсылки = "", Заголовок = "", ПараметрыТекста = Неопределено)
	
	Если ПустаяСтрока(ПредставлениеСсылки) Тогда
		ПредставлениеСсылки = СтрокаСсылки;
	КонецЕсли;
	
	РазмерШрифта = 4;
	Если ТипЗнч(ПараметрыТекста) = Тип("Структура") Тогда
		
		Если ПараметрыТекста.Свойство("РазмерШрифта") Тогда
			РазмерШрифта = ПараметрыТекста.РазмерШрифта;
		КонецЕсли;
		
	КонецЕсли;
	
	Текст = "<A href=""" + СтрокаСсылки+ """" + ">" + ПредставлениеСсылки+ "</A>";
	Если Заголовок<>"" Тогда
		Текст = Заголовок + " " + Текст;
	КонецЕсли;
	Текст = "<FONT Size=" + Строка(РазмерШрифта) + ">" + Текст + "</FONT>";
	
	Возврат Текст;
	
КонецФункции

Процедура ВывестиГиперссылку(ТекстовыйДокумент, СтрокаСсылки, ПредставлениеСсылки, Заголовок = "", ПараметрыТекста = Неопределено)
	
	Текст = СформироватьГиперссылку(СтрокаСсылки, ПредставлениеСсылки, Заголовок, ПараметрыТекста) + "<BR>";
	ТекстовыйДокумент.ДобавитьСтроку(Текст);
	
КонецПроцедуры

Процедура ВывестиЗаголовокРаздела(ТекстовыйДокумент, Заголовок)
	
	ТекстовыйДокумент.ДобавитьСтроку("<STRONG><FONT Size=4>" + Заголовок + "</FONT></STRONG><BR>");
	
КонецПроцедуры

Процедура ВывестиДействиеСОшибкой(ТекстовыйДокумент, Макет,  Заголовок, ДатаДействия, АвторДействия, ПараметрыТекста)
	
	Область = Макет.ПолучитьОбласть("ДействиеСОшибкой");
	
	РазмерШрифта = 4;
	
	Если ТипЗнч(ПараметрыТекста) = Тип("Структура") Тогда
		
		Если ПараметрыТекста.Свойство("РазмерШрифта") Тогда
			РазмерШрифта = ПараметрыТекста.РазмерШрифта;							
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДаты = Формат(ДатаДействия, "ДЛФ=D");
	
	Область.Параметры.Заголовок = "<FONT Size=" + Строка(РазмерШрифта) + ">" + Заголовок + "</FONT>";
	Область.Параметры.ДатаДействия = "<FONT Size=" + Строка(РазмерШрифта) + ">" + СтрокаДаты + "</FONT>";
	Область.Параметры.АвторДействия = "<FONT Size=" + Строка(РазмерШрифта) + ">" + АвторДействия + "</FONT>";
	
	ТекстовыйДокумент.Вывести(Область);
	
КонецПроцедуры

Процедура ДобавитьАбзац(ТекстовыйДокумент)
	
	ТекстовыйДокумент.ДобавитьСтроку("<BR>");
	
КонецПроцедуры

Функция МногострочныйТекстКомментарием(Текст, Префикс = "//")
	
	ТекстСКомментарием = "";
	
	Сч = 1;
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	
	Пока Сч <= КоличествоСтрок Цикл
		
		СтрокаТекста = СтрПолучитьСтроку(Текст, Сч);
		
		Если СтрокаТекста <> "" Тогда
			Если ПустаяСтрока(ТекстСКомментарием) Тогда
				Разделитель = "";
			Иначе
				Разделитель = Символы.ПС;
			КонецЕсли;
			
			ТекстСКомментарием = ТекстСКомментарием + Разделитель + Префикс + СтрокаТекста;
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	Возврат ТекстСКомментарием;
		
КонецФункции

// Рассчитывает статус для определения нормы длительности отработки ошибки,
// исходя из настроек проекта и текущего статуса ошибки
//
// Параметры:
//  Проект - Тип - СправочникСсылка.Проекты - проект, к которому относится ошибка
//  Статус - Тип - ПеречислениеСсылка.СтатусыОшибок - текущий статус ошибки
//  ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями - Тип - Булево. Признак наличия проектных изменений в ошибке
//
// Возвращаемое значение:
//  СтатусДляНормы - Тип - ПеречислениеСсылка.СтатусыОшибок - статус для расчета нормы
//
Функция СтатусДляОпределенияНормыДлительностиОтработки(Проект, Статус, ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями)
	
	СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.НеЗарегистрирована;
	
	СтрокаРеквизитов = "ИспользоватьЗакрытиеОшибок, ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями";
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, СтрокаРеквизитов);
	
	Если Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена Тогда
		
		Если РеквизитыПроекта.ИспользоватьЗакрытиеОшибок Тогда
			
			Если РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями Тогда
				
				Если ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями Тогда
					СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.ПроверенаИсправлена;
				Иначе
					СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.Закрыта;
				КонецЕсли;
			Иначе
				СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.ПроверенаИсправлена;
			КонецЕсли;
		Иначе
			СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.Закрыта;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Отозвана Тогда
		
		Если РеквизитыПроекта.ИспользоватьЗакрытиеОшибок Тогда
			
			Если РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями Тогда
				
				Если ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями Тогда
					СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.Отозвана;
				Иначе
					СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.Закрыта;
				КонецЕсли;
			Иначе
				СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.Отозвана;
			КонецЕсли;
		Иначе
			СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.Закрыта;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять Тогда
		
		СтатусДляОпределенияНормы = Перечисления.СтатусыОшибок.Закрыта;
		
	Иначе
		СтатусДляОпределенияНормы = Статус;
	КонецЕсли;
	
	Возврат СтатусДляОпределенияНормы;
	
КонецФункции

Функция ПоказателиТекущихДелПоОшибкам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА Ошибки.СрокОтработки < &ДатаЗавтра
	|					И (Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НЕПризнана), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена))
	|						ИЛИ Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|							И Ошибки.Владелец.ИспользоватьЗакрытиеОшибок
	|							И (НЕ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|								ИЛИ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|									И Ошибки.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями))
	|					И Ошибки.СрочностьИсправления = ЗНАЧЕНИЕ(Перечисление.СрочностьИсправленияОшибок.Немедленно)
	|				ТОГДА Ошибки.Ссылка
	|		КОНЕЦ) КАК КоличествоОшибокИсправитьНемедленно,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА Ошибки.СрокОтработки < &ДатаЗавтра
	|					И (Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НЕПризнана), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена))
	|						ИЛИ Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|							И Ошибки.Владелец.ИспользоватьЗакрытиеОшибок
	|							И (НЕ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|								ИЛИ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|									И Ошибки.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями))
	|					И Ошибки.СрочностьИсправления В (ЗНАЧЕНИЕ(Перечисление.СрочностьИсправленияОшибок.ВПлановомПорядке), ЗНАЧЕНИЕ(Перечисление.СрочностьИсправленияОшибок.ЖелательноБыстрее))
	|				ТОГДА Ошибки.Ссылка
	|		КОНЕЦ) КАК КоличествоОшибокИсправить,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА Ошибки.СрокОтработки < &ДатаЗавтра
	|					И (Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПланируетсяИсправлять), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки))
	|						ИЛИ Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена), ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|							И (НЕ Ошибки.Владелец.ИспользоватьЗакрытиеОшибок
	|								ИЛИ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|									И НЕ Ошибки.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями))
	|				ТОГДА Ошибки.Ссылка
	|		КОНЕЦ) КАК КоличествоОшибокОтработатьПоручение
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	НЕ Ошибки.ПометкаУдаления
	|	И Ошибки.КомуНаправлена = &ТекущийПользователь"
	;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущаяДата = НачалоДня(Текущаядата());
	
	ДатаЗавтра = ОбщегоНазначенияСППР.СледующаяДатаПоОсновномуКалендарю();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ДатаЗавтра", ДатаЗавтра);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоОшибокИсправитьНемедленно", 0);
	СтруктураРезультата.Вставить("КоличествоОшибокИсправить", 0);
	СтруктураРезультата.Вставить("КоличествоОшибокОтработатьПоручение", 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Выборка);
	КонецЕслИ;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Функция ТребуетсяЗакрытиеОшибки(Проект, ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями)
	
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаРеквизитов = "ИспользоватьЗакрытиеОшибок,ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями";
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, СтрокаРеквизитов);
	
	Если РеквизитыПроекта.ИспользоватьЗакрытиеОшибок = Неопределено Тогда
		РеквизитыПроекта.ИспользоватьЗакрытиеОшибок = Ложь;
	КонецЕсли;
	
	Если РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Неопределено Тогда
		РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Ложь;
	КонецЕсли;
	
	ТребуетсяЗакрытие =
		РеквизитыПроекта.ИспользоватьЗакрытиеОшибок
		И (НЕ РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		ИЛИ РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		И ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
		
	Возврат ТребуетсяЗакрытие;
	
КонецФункции

Функция НаименованиеСценарияПользователя(СсылкаСценарийПользователя)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователей.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СценарииРаботыПользователей КАК СценарииРаботыПользователей
		|ГДЕ
		|	СценарииРаботыПользователей.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаСценарийПользователя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Наименование; 
	КонецЦикла;
	
	Возврат ""; 
КонецФункции	 

Процедура ВывестиГиперссылкиПереходаКСценариям(ОшибкаОбъект,ТекстовыйДокумент)
	НадоВывестиИерархиюСценариев = Ложь;
	Позиция = -1;
	
	ПорядокВоспроизведения = ОшибкаОбъект.ПорядокВоспроизведения;
	ПорядокВоспроизведения = СтрЗаменить(ПорядокВоспроизведения,Символы.ВК,"");
	
	МассивСтрок = СтрРазделить(ПорядокВоспроизведения,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Если Нрег(МассивСтрок[Ккк]) = "стек вызова:" Тогда
			НадоВывестиИерархиюСценариев = Истина;
			Позиция = Ккк;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НадоВывестиИерархиюСценариев Тогда
		СтрокиИерархии = Новый Массив;
		КоличествоПустыхСтрок = 0;
		Для Ккк = Позиция+1 По МассивСтрок.Количество()-1 Цикл
			Если НЕ ЗначениеЗаполнено(МассивСтрок[Ккк]) Тогда
				КоличествоПустыхСтрок = КоличествоПустыхСтрок + 1;
				Если КоличествоПустыхСтрок <= 1 Тогда
					Продолжить;
				КонецЕсли;	 
				
				Прервать;
			КонецЕсли;
			
			Если Нрег(МассивСтрок[Ккк]) = "шаги" Тогда
				Прервать;
			КонецЕсли;	 
			
			СтрокиИерархии.Добавить(МассивСтрок[Ккк]);
			КоличествоПустыхСтрок = 0;
		КонецЦикла;	
		
		ВывестиЗаголовокРаздела(ТекстовыйДокумент, НСтр("ru='Сценарий'"));
		
		ШагОтступа    = Символы.НПП + Символы.НПП + Символы.НПП + Символы.НПП;
		ТекущийОтступ = ШагОтступа;
		
		Для Каждого ЭлементИерархии Из СтрокиИерархии Цикл
			МассивСтрок = СтрРазделить(ЭлементИерархии,";");
			Если МассивСтрок.Количество() <> 4 Тогда
			//должно быть 3 значения, после каждого есть символ ;
				Продолжить;
			КонецЕсли;	 
			
			ВывестиГиперссылку(ТекстовыйДокумент, "#СценарийПользователя;" + МассивСтрок[1] + ";" + МассивСтрок[2] 
			   + "#", МассивСтрок[0], ТекущийОтступ);
			
			ТекущийОтступ = ТекущийОтступ + ШагОтступа;
		КонецЦикла;	
		
		ДобавитьАбзац(ТекстовыйДокумент);
	Иначе	
		НаименованиеТеста = "";
		Если ЗначениеЗаполнено(ОшибкаОбъект.СценарийПользователя) Тогда
			НаименованиеТеста = НаименованиеСценарияПользователя(ОшибкаОбъект.СценарийПользователя);
		Иначе
			НаименованиеТеста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаОбъект.Тест, "Наименование");
		КонецЕсли;
		
		ВывестиГиперссылку(ТекстовыйДокумент, "#СценарийПользователя#", НаименованиеТеста, "Сценарий пользователя: ");
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;	 
КонецПроцедуры

Процедура ВывестиШагиСценарияПользователя(ОшибкаОбъект,ТекстовыйДокумент,Макет)
	НадоВывестиСекциюШаговСценария = Ложь;
	Позиция = -1;
	
	ПорядокВоспроизведения = ОшибкаОбъект.ПорядокВоспроизведения;
	ПорядокВоспроизведения = СтрЗаменить(ПорядокВоспроизведения,Символы.ВК,"");
	
	МассивСтрок = СтрРазделить(ПорядокВоспроизведения,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		Если Нрег(МассивСтрок[Ккк]) = "шаги" Тогда
			НадоВывестиСекциюШаговСценария = Истина;
			Позиция = Ккк;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	
	
	Если НадоВывестиСекциюШаговСценария Тогда
		СтрокиШагов = Новый Массив;
		Для Ккк = Позиция+1 По МассивСтрок.Количество()-1 Цикл
			Если НРег(МассивСтрок[Ккк]) = НРег("Последний шаг не выполнен.") Тогда
				СтрокиШагов.Добавить(МассивСтрок[Ккк]);
				Прервать;
			КонецЕсли;	 
			
			СтрокиШагов.Добавить(МассивСтрок[Ккк]);
		КонецЦикла;	
		
		ВывестиЗаголовокРаздела(ТекстовыйДокумент, НСтр("ru='Шаги'"));
		
		ШагОтступа    = Символы.НПП + Символы.НПП + Символы.НПП + Символы.НПП;
		ТекущийОтступ = ШагОтступа;
		
		Для Каждого ЭлементИерархии Из СтрокиШагов Цикл
			Если Не ЗначениеЗаполнено(ЭлементИерархии) Тогда
				Продолжить;
			КонецЕсли;	 
			ВывестиПоле(ТекстовыйДокумент, Макет, ЭлементИерархии,"", Истина);
		КонецЦикла;	
		
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;	 
КонецПроцедуры

Функция ИмяКартинкиПрисоединеннойКОшибке(Ошибка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрисоединенныеФайлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Файлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов
	|	И ПрисоединенныеФайлы.Расширение В(&Расширение)
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления
	|	И ПрисоединенныеФайлы.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ВладелецФайлов", Ошибка);
	Запрос.УстановитьПараметр("Расширение", РаботаСФайламиСлужебный.СписокРасширенийДляПредпросмотра());
	Запрос.УстановитьПараметр("Наименование", "MainScreen");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наименование;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрисоединенныеФайлы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Файлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайлов
	|	И ПрисоединенныеФайлы.Расширение В(&Расширение)
	|	И НЕ ПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайлов", Ошибка);
	Запрос.УстановитьПараметр("Расширение", РаботаСФайламиСлужебный.СписокРасширенийДляПредпросмотра());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наименование;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции	 

Процедура ВывестиГиперссылкуСмСкриншот(ОшибкаОбъект,ТекстовыйДокумент,Макет,СтрокаСообщения)
	ИмяКартинки = ИмяКартинкиПрисоединеннойКОшибке(ОшибкаОбъект.Ссылка);
	
	Если ИмяКартинки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрИндекс = СтрНайти(СтрокаСообщения, НСтр("ru='скриншот'"))-1;
	Текст = ?(СтрИндекс>0, Лев(СтрокаСообщения, СтрИндекс), НСтр("ru='Для получения дополнительной информации см. приложенный'"));
	Ссылка = ?(СтрИндекс>0, Прав(СтрокаСообщения, СтрДлина(СтрокаСообщения)-СтрИндекс), НСтр("ru='скриншот'"));
	Ссылка = СтрЗаменить(Ссылка, ".", "");
	
	ВывестиГиперссылку(ТекстовыйДокумент, "#СкриншотСценария:" + ИмяКартинки
	    + "#", Ссылка, Текст);
КонецПроцедуры

Функция ЭкранироватьУгловыеСкобкиВСтроке(Знач СтрокаТекста)
	СтрокаТекста = СтрЗаменить(СтрокаТекста,"<","~ЭкранированиеСимволМеньше~");
	СтрокаТекста = СтрЗаменить(СтрокаТекста,">","~ЭкранированиеСимволБольше~");
	
	Возврат СтрокаТекста; 
КонецФункции	 

Функция РазэкранироватьУгловыеСкобкиВСтроке(Знач СтрокаТекста)
	СтрокаТекста = СтрЗаменить(СтрокаТекста,"~ЭкранированиеСимволМеньше~","<");
	СтрокаТекста = СтрЗаменить(СтрокаТекста,"~ЭкранированиеСимволБольше~",">");
	
	Возврат СтрокаТекста; 
КонецФункции	 

Функция УбратьСлужебнуюИнформациюПорядокВоспроизведения(Знач ПорядокВоспроизведения,ОшибкаОбъект,
	    Макет)
	ПорядокВоспроизведения = СтрЗаменить(ПорядокВоспроизведения,Символы.ВК,"");
	
	СлужебнаяСекция = Ложь;
	
	Результат = Новый Массив;
	
	МассивСтрок = СтрРазделить(ПорядокВоспроизведения,Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		СтрокаНрег = Нрег(МассивСтрок[Ккк]);
		Если СтрокаНрег = "стек вызова:" ИЛИ СтрокаНрег = "шаги" Тогда
			Результат.Очистить();
			СлужебнаяСекция = Истина;
			Продолжить;
		КонецЕсли;	 
		
		Если СлужебнаяСекция Тогда
			Если СтрокаНрег = "последний шаг не выполнен." Тогда
				СлужебнаяСекция = Ложь;
			КонецЕсли;	 
			
			Продолжить;
		КонецЕсли;
		
		СтрокаПорядкаВоспроизведения = СокрЛП(СтрЗаменить(СтрокаНрег,Символы.НПП," "));
		Если СтрокаПорядкаВоспроизведения = "для получения дополнительной информации см. приложенный скриншот." 
			 ИЛИ СтрНайти(СтрокаПорядкаВоспроизведения, "для получения дополнительной информации см. приложенные скриншоты") > 0 Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ВывестиГиперссылкуСмСкриншот(ОшибкаОбъект,ТекстовыйДокумент,Макет,МассивСтрок[Ккк]);
			СтрокаТекста = ТекстовыйДокумент.ПолучитьТекст();
			СтрокаТекста = ЭкранироватьУгловыеСкобкиВСтроке(СтрокаТекста);
			Результат.Добавить(СтрокаТекста);
			Продолжить;
		КонецЕсли;	 
		
		Результат.Добавить(МассивСтрок[Ккк]);
	КонецЦикла;	
	
	Возврат СтрСоединить(Результат,Символы.ПС);
КонецФункции	 

Функция КоличествоОшибокСОдинаковымХешем(ОшибкаОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОшибкиСписокОбъектов.Ссылка) КАК КоличествоОшибок
		|ИЗ
		|	Справочник.Ошибки.СписокОбъектов КАК ОшибкиСписокОбъектов
		|ГДЕ
		|	ОшибкиСписокОбъектов.Ссылка.ДатаРегистрации >= &ДатаРегистрации
		|	И ОшибкиСписокОбъектов.Ссылка.Владелец = &Владелец
		|	И ОшибкиСписокОбъектов.ХешУточнения В(&ХешУточнения)";
	
	
	СписокХеш = Новый СписокЗначений;
	Для Каждого СтрокаТЧ из ОшибкаОбъект.СписокОбъектов Цикл
		СписокХеш.Добавить(СтрокаТЧ.ХешУточнения);
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Владелец", ОшибкаОбъект.Владелец);
	Запрос.УстановитьПараметр("ДатаРегистрации", ДобавитьМесяц(НачалоДня(ТекущаяДата()),-1));
	Запрос.УстановитьПараметр("ХешУточнения", СписокХеш);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	КоличествоОшибок = 0;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		КоличествоОшибок = ВыборкаДетальныеЗаписи.КоличествоОшибок; 
	КонецЕсли;
	Возврат КоличествоОшибок;
	
КонецФункции

Функция КоличествоЗаблокированныхТестов(ОшибкаОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЭтаОшибка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка = &Ошибка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПовторяемаяОшибка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.ПовторяемаяОшибка = &Ошибка
	|	И Ошибки.ВеткаОбнаружения = &Ветка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтаОшибка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОшибкиДляОтбора
	|ИЗ
	|	ЭтаОшибка КАК ЭтаОшибка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПовторяемаяОшибка.Ссылка
	|ИЗ
	|	ПовторяемаяОшибка КАК ПовторяемаяОшибка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыРегистрацииОшибокСрезПоследних.Тест КАК Тест,
	|	РезультатыРегистрацииОшибокСрезПоследних.ЗапускТестирования КАК ЗапускТестирования
	|ПОМЕСТИТЬ ТестыДляОтбора
	|ИЗ
	|	РегистрСведений.РезультатыРегистрацииОшибок.СрезПоследних(
	|			,
	|			Ветка = &Ветка
	|				И Ошибка В
	|					(ВЫБРАТЬ
	|						ОшибкиДляОтбора.Ссылка
	|					ИЗ
	|						ОшибкиДляОтбора КАК ОшибкиДляОтбора)) КАК РезультатыРегистрацииОшибокСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыВыполненияТестовСрезПоследних.Тест КАК Тест,
	|	РезультатыВыполненияТестовСрезПоследних.ЗапускТестирования КАК ЗапускТестирования
	|ПОМЕСТИТЬ СрезПоследних
	|ИЗ
	|	РегистрСведений.РезультатыВыполненияТестов.СрезПоследних(
	|			,
	|			Ветка = &Ветка
	|				И Тест В
	|					(ВЫБРАТЬ
	|						ТестыДляОтбора.Тест
	|					ИЗ
	|						ТестыДляОтбора)
	|				И ЭлементТеста = НЕОПРЕДЕЛЕНО) КАК РезультатыВыполненияТестовСрезПоследних
	|ГДЕ
	|	РезультатыВыполненияТестовСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВыполненияТеста.ВыполненСОшибкой)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СрезПоследних.Тест) КАК КоличествоТестов
	|ИЗ
	|	СрезПоследних КАК СрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТестыДляОтбора КАК ТестыДляОтбора
	|		ПО СрезПоследних.Тест = ТестыДляОтбора.Тест
	|			И СрезПоследних.ЗапускТестирования = ТестыДляОтбора.ЗапускТестирования";
	
	Запрос.УстановитьПараметр("Ошибка", ОшибкаОбъект.Ссылка); 
	Запрос.УстановитьПараметр("Ветка", ОшибкаОбъект.ВеткаОбнаружения);
	УстановитьПривилегированныйРежим(Истина);
	Результат = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоТестов;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
	
КонецФункции

Функция ИсправлениеОшибкиВДругихПроектах(ВерсииИСборкиИсправления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииИСборкиИсправления.Сборка КАК Сборка,
	|	ВерсииИСборкиИсправления.Версия КАК Версия,
	|	ВерсииИСборкиИсправления.ДатаСборки КАК ДатаСборки,
	|	ВерсииИСборкиИсправления.ДатаОбнаружения КАК ДатаОбнаружения
	|ПОМЕСТИТЬ ВТВерсииИСборкиИсправления
	|ИЗ
	|	&ВерсииИСборкиИсправления КАК ВерсииИСборкиИсправления
	|ГДЕ
	|	НЕ ВерсииИСборкиИсправления.ДатаСборки ЕСТЬ NULL
	|	И ВерсииИСборкиИсправления.ДатаСборки <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиВерсии.Ссылка КАК Сборка
	|ПОМЕСТИТЬ ВТСборкиСодержашиеОшибку
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВерсииИСборкиИсправления КАК ВерсииИСборкиИсправления
	|		ПО СборкиВерсии.Владелец = ВерсииИСборкиИсправления.Версия
	|			И СборкиВерсии.ДатаСборки >= ВерсииИСборкиИсправления.ДатаОбнаружения
	|			И СборкиВерсии.ДатаСборки < ВерсииИСборкиИсправления.ДатаСборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СборкиВключаемыхПроектов.Ссылка.Владелец КАК Версия,
	|	МАКСИМУМ(СборкиВключаемыхПроектов.Ссылка.ДатаСборки) КАК ДатаСборки
	|ПОМЕСТИТЬ ВТВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками
	|ИЗ
	|	Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВключаемыхПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСборкиСодержашиеОшибку КАК СборкиСодержашиеОшибку
	|		ПО СборкиВключаемыхПроектов.Сборка = СборкиСодержашиеОшибку.Сборка
	|ГДЕ
	|	НЕ СборкиВключаемыхПроектов.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкиВключаемыхПроектов.Ссылка.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиВерсии.Владелец КАК Версия,
	|	МИНИМУМ(СборкиВерсии.ДатаСборки) КАК ДатаСборки,
	|	МИНИМУМ(ПубликуемыеСборки.ДатаПубликации) КАК ДатаПубликуемойСборки
	|ПОМЕСТИТЬ ВТДатыСборокИсправленияВКонечныхПроектах
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками КАК ВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками
	|		ПО СборкиВерсии.Владелец = ВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками.Версия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК ПубликуемыеСборки
	|		ПО (ПубликуемыеСборки.Владелец = ВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками.Версия)
	|			И (НЕ ПубликуемыеСборки.ПометкаУдаления)
	|			И (ПубликуемыеСборки.Опубликована)
	|			И (ПубликуемыеСборки.ДатаСборки > ВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками.ДатаСборки)
	|			И (ПубликуемыеСборки.ДатаПубликации > ВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками.ДатаСборки)
	|ГДЕ
	|	СборкиВерсии.ДатаСборки > ВерсииИМаксимальныеДатыСборокВключающиеСборкиСОшибками.ДатаСборки
	|	И НЕ СборкиВерсии.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкиВерсии.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиВерсии.Владелец КАК Версия,
	|	МАКСИМУМ(СборкиВерсии.ДатаСборки) КАК ДатаСборки,
	|	МИНИМУМ(СборкиВерсии.Ссылка) КАК Сборка,
	|	МАКСИМУМ(ПубликуемыеСборки.ДатаПубликации) КАК ДатаПубликуемойСборки,
	|	МИНИМУМ(ПубликуемыеСборки.Ссылка) КАК ПубликуемаяСборка
	|ПОМЕСТИТЬ ВТСборкиИсправленияВКонечныхПроектах
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыСборокИсправленияВКонечныхПроектах КАК ДатыСборокИсправленияВКонечныхПроектах
	|		ПО СборкиВерсии.Владелец = ДатыСборокИсправленияВКонечныхПроектах.Версия
	|			И СборкиВерсии.ДатаСборки = ДатыСборокИсправленияВКонечныхПроектах.ДатаСборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК ПубликуемыеСборки
	|		ПО (ПубликуемыеСборки.Владелец = ДатыСборокИсправленияВКонечныхПроектах.Версия)
	|			И (НЕ ПубликуемыеСборки.ПометкаУдаления)
	|			И (ПубликуемыеСборки.Опубликована)
	|			И (ПубликуемыеСборки.ДатаПубликации = ДатыСборокИсправленияВКонечныхПроектах.ДатаПубликуемойСборки)
	|
	|СГРУППИРОВАТЬ ПО
	|	СборкиВерсии.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкиИсправленияВКонечныхПроектах.Сборка КАК Сборка,
	|	СборкиИсправленияВКонечныхПроектах.ДатаСборки КАК ДатаСборки,
	|	СборкиИсправленияВКонечныхПроектах.ПубликуемаяСборка КАК ПубликуемаяСборка,
	|	СборкиИсправленияВКонечныхПроектах.ДатаПубликуемойСборки КАК ДатаПубликуемойСборки,
	|	СборкиИсправленияВКонечныхПроектах.Версия КАК Версия,
	|	ВерсииПроекта.ПорядковыйНомер КАК ПорядковыйНомерВерсии,
	|	ВерсииПроекта.Владелец КАК Проект
	|ПОМЕСТИТЬ ВТВерсииИсправления
	|ИЗ
	|	ВТСборкиИсправленияВКонечныхПроектах КАК СборкиИсправленияВКонечныхПроектах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ПО СборкиИсправленияВКонечныхПроектах.Версия = ВерсииПроекта.Ссылка
	|ГДЕ
	|	НЕ ВерсииПроекта.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТВерсииИсправления.Проект КАК Проект,
	|	ВТВерсииИсправления.Версия КАК Версия,
	|	ВТВерсииИсправления.ПорядковыйНомерВерсии КАК ПорядковыйНомерВерсии,
	|	ВТВерсииИсправления.Сборка КАК Сборка,
	|	ВТВерсииИсправления.ДатаСборки КАК ДатаСборки,
	|	ВТВерсииИсправления.ПубликуемаяСборка КАК ПубликуемаяСборка,
	|	ВТВерсииИсправления.ДатаПубликуемойСборки КАК ДатаПубликуемойСборки,
	|	Проекты.Наименование КАК НаименованиеПроекта
	|ИЗ
	|	ВТВерсииИсправления КАК ВТВерсииИсправления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ВТВерсииИсправления.Проект = Проекты.Ссылка
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеПроекта,
	|	ПорядковыйНомерВерсии"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВерсииИСборкиИсправления", ВерсииИСборкиИсправления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВывестиИнформациюОбИсправленииВДругихПроектах(ВерсииИСборкиИсправления, ТекстовыйДокумент, Макет)
	
	ТаблицаВерсий = ИсправлениеОшибкиВДругихПроектах(ВерсииИСборкиИсправления);
	
	Если ТаблицаВерсий.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиЗаголовокРаздела(ТекстовыйДокумент, НСтр("ru='Исправление в других проектах'"));
	ДобавитьАбзац(ТекстовыйДокумент);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("РазмерШрифта", 2);
	
	ТекстовыйДокумент.ДобавитьСтроку("<TABLE border=1><TBODY><TR>");
	
	Для Каждого СтрокаТаблицы из ТаблицаВерсий Цикл
			
		ТекстовыйДокумент.ДобавитьСтроку("<TR>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD vAlign=top width=250>");
		
		ВывестиПоле(ТекстовыйДокумент, Макет, СтрокаТаблицы.НаименованиеПроекта, "", Истина,, ПараметрыТекста);
		
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD vAlign=top>");
		
		ВывестиИнформациюОбИсправленииВВерсии(СтрокаТаблицы.Сборка,
											  СтрокаТаблицы.ДатаСборки,
											  СтрокаТаблицы.ПубликуемаяСборка,
											  СтрокаТаблицы.ДатаПубликуемойСборки,
											  ТекстовыйДокумент,
											  Макет,
											  ПараметрыТекста);
		
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		ТекстовыйДокумент.ДобавитьСтроку("</TR>");
		
	КонецЦикла;
	
	ТекстовыйДокумент.ДобавитьСтроку("</TR></TBODY></TABLE>");
	
	ДобавитьАбзац(ТекстовыйДокумент);
	
КонецПроцедуры

Процедура ВывестиИнформациюОбИсправленииВВерсии(Сборка, ДатаСборки, ПубликуемаяСборка, ДатаПубликуемойСборки, ТекстовыйДокумент, Макет, ПараметрыТекста)
		
	Если ДатаСборки <= ТекущаяДата() Тогда
		ИнформацияОСборке = НСтр("ru='Включено в сборку %ПредставлениеСборки%'");
	Иначе
		ИнформацияОСборке = НСтр("ru='Планируется включить в сборку %ПредставлениеСборки%'");
	КонецЕсли;
	
	ПредставлениеСборки = Строка(Сборка) + " от " + Формат(ДатаСборки, "ДФ='dd.MM.yyyy'");
	ИнформацияОСборке = СтрЗаменить(ИнформацияОСборке, "%ПредставлениеСборки%", ПредставлениеСборки);
	
	ВывестиПоле(ТекстовыйДокумент, Макет, ИнформацияОСборке, "", Истина,, ПараметрыТекста);
	
	// Вывод информации о публикации исправления
	Если ЗначениеЗаполнено(ПубликуемаяСборка) Тогда
		
		ИнформацияОПубликуемойСборке = НСтр("ru='Опубликовано %ДатаПубликации% в сборке %ПредставлениеСборки%'");
		
		ДатаПубликации = ДатаПубликуемойСборки;
		
		Если ЗначениеЗаполнено(ДатаПубликации) Тогда
			ИнформацияОПубликуемойСборке = СтрЗаменить(ИнформацияОПубликуемойСборке, "%ДатаПубликации%", " " + Формат(ДатаПубликации, "ДФ='dd.MM.yyyy'"));
		Иначе
			ИнформацияОПубликуемойСборке = СтрЗаменить(ИнформацияОПубликуемойСборке, "%ДатаПубликации%", "");
		КонецЕсли;
		
		ПредставлениеПубликуемойСборки = Строка(ПубликуемаяСборка);
		ИнформацияОПубликуемойСборке = СтрЗаменить(ИнформацияОПубликуемойСборке, "%ПредставлениеСборки%", ПредставлениеПубликуемойСборки);
		
		ВывестиПоле(ТекстовыйДокумент, Макет, ИнформацияОПубликуемойСборке, "", Истина,, ПараметрыТекста);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВывестиТаблицуОбработчикиОбновления(ОшибкаОбъект, Макет, ТекстовыйДокумент)
	
	ПараметрыТекста = Новый Структура("РазмерШрифта", 2);
	ОбработчикиОбновления = ОшибкаОбъект.ОбработчикиОбновления;
	ТекстовыйДокумент.ДобавитьСтроку("<TABLE border=1><TBODY><TR Align=middle>");
	
	ТекстовыйДокумент.ДобавитьСтроку("<TD>");
	ТекстПоля = НСтр("ru='Обработчик обновления'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
	ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	
	ТекстовыйДокумент.ДобавитьСтроку("<TD>");
	ТекстПоля = НСтр("ru='Изменения'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
	ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	
	ТекстовыйДокумент.ДобавитьСтроку("<TD>");
	ТекстПоля = НСтр("ru='Ответственный'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
	ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	
	Для Каждого Строка Из ОбработчикиОбновления Цикл
		ТекстовыйДокумент.ДобавитьСтроку("<TR>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD valign=""top"">");
		СтрокаСсылки = "#" + ПолучитьНавигационнуюСсылку(Строка.ОбработчикОбновления) + "#";
		ПредставлениеСсылки = Строка(Строка.ОбработчикОбновления);
		ВывестиГиперссылку(ТекстовыйДокумент, СтрокаСсылки, ПредставлениеСсылки, , ПараметрыТекста);
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD valign=""top"">");
		ТекстПоля = Строка.ОписаниеИзменений;
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD valign=""top"">");
		ТекстПоля = Строка(Строка.Ответственный);
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		
		ТекстовыйДокумент.ДобавитьСтроку("</TR>");
	КонецЦикла;
	
	ТекстовыйДокумент.ДобавитьСтроку("</TBODY></TABLE>");
	ДобавитьАбзац(ТекстовыйДокумент);
	
КонецПроцедуры

Процедура ВывестиТаблицуСписокОбъектов(ОшибкаОбъект, Макет, ТекстовыйДокумент)
	
	ПроблемаМетаданных     = (ОшибкаОбъект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбъектыМетаданных"));
	ПроблемаОбработчиков   = (ОшибкаОбъект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.ОбработчикиОбновления"));
	ПроблемаБезДетализации = (ОшибкаОбъект.ТипПроблемы = ПредопределенноеЗначение("Перечисление.ТипПроблемы.БезДетализации"));
	
	ПараметрыТекста = Новый Структура("РазмерШрифта", 2);
	СписокОбъектов = ОшибкаОбъект.СписокОбъектов;
	ТекстовыйДокумент.ДобавитьСтроку("<TABLE border=1><TBODY><TR Align=middle>");
	
	Если ПроблемаМетаданных ИЛИ ПроблемаОбработчиков Тогда
		ТекстовыйДокумент.ДобавитьСтроку("<TD>");
		ТекстПоля = ?(ПроблемаМетаданных, НСтр("ru='Объект метаданных'"), НСтр("ru='Обработчик обновления'"));
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	КонецЕсли;
	
	Если ПроблемаМетаданных Тогда
		ЕстьПодчиненныеОбъекты = СписокОбъектов.НайтиСтроки(Новый Структура("ПодчиненныйОбъект", Неопределено)).Количество()
			<> СписокОбъектов.Количество();
		
		Если ЕстьПодчиненныеОбъекты Тогда 
			ТекстовыйДокумент.ДобавитьСтроку("<TD>");
			ТекстПоля = НСтр("ru='Подчиненный объект'");
			ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
			ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		КонецЕсли;
	Иначе
		ЕстьПодчиненныеОбъекты = Ложь;
	КонецЕсли;
	
	ТекстовыйДокумент.ДобавитьСтроку("<TD>");
	ТекстПоля = НСтр("ru='Уточнение'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
	ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	
	ТекстовыйДокумент.ДобавитьСтроку("<TD>");
	ТекстПоля = НСтр("ru='Комментарий'");
	ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
	ТекстовыйДокумент.ДобавитьСтроку("</TD>");
	
	
	Для Каждого Строка Из СписокОбъектов Цикл
		ТекстовыйДокумент.ДобавитьСтроку("<TR>");
		
		Если ПроблемаМетаданных ИЛИ ПроблемаОбработчиков Тогда
			ТекстовыйДокумент.ДобавитьСтроку("<TD valign=""top"">");
			СтрокаСсылки = ?(ЗначениеЗаполнено(Строка.ПроблемныйОбъект), 
			                 ПолучитьНавигационнуюСсылку(Строка.ПроблемныйОбъект), 
			                 "");
			ПредставлениеСсылки = Строка(Строка.ПроблемныйОбъект);
			ВывестиГиперссылку(ТекстовыйДокумент, СтрокаСсылки, ПредставлениеСсылки, , ПараметрыТекста);
			ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		КонецЕсли;
		
		Если ПроблемаМетаданных 
			И ЕстьПодчиненныеОбъекты Тогда
			ТекстовыйДокумент.ДобавитьСтроку("<TD valign=""top"">");
			Если ТипЗнч(Строка.ПодчиненныйОбъект) <> Тип("ПеречислениеСсылка.ТипыМодулейОбъектовМетаданных")
				И Строка.ПодчиненныйОбъект <> Неопределено Тогда
				СтрокаСсылки = "#" + ПолучитьНавигационнуюСсылку(Строка.ПодчиненныйОбъект) + "#";
				ПредставлениеСсылки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ПодчиненныйОбъект, "Имя");
				ВывестиГиперссылку(ТекстовыйДокумент, СтрокаСсылки, ПредставлениеСсылки, , ПараметрыТекста);
			Иначе
				Если ТипЗнч(Строка.ПодчиненныйОбъект) = Тип("ПеречислениеСсылка.ТипыМодулейОбъектовМетаданных") Тогда
					ТекстПоля = Строка(Строка.ПодчиненныйОбъект);
				Иначе
					ТекстПоля = "";
				КонецЕсли;
				ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
			КонецЕсли;
			ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD valign=""top"">");
		ТекстПоля = Строка.Уточнение;
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD valign=""top"">");
		ТекстПоля = Строка(Строка.Комментарий);
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина, , ПараметрыТекста);
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		
		ТекстовыйДокумент.ДобавитьСтроку("</TR>");
	КонецЦикла;
	
	ТекстовыйДокумент.ДобавитьСтроку("</TBODY></TABLE>");
	ДобавитьАбзац(ТекстовыйДокумент);
	
КонецПроцедуры

Функция ПосчитатьХеш(Данные)
	
	ОбъектХеш = Новый ХешированиеДанных(ХешФункция.SHA256);
	ОбъектХеш.Добавить(Данные);
	Возврат Base64Строка(ОбъектХеш.ХешСумма);
	
КонецФункции

Процедура ДополнитьПараметрыОшибки(МестоВозникновения, ПараметрыОшибки)
	
	Если ПараметрыОшибки = Неопределено Тогда
		ПараметрыОшибки = Новый Структура;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ТипМестаВозникновения = ТипЗнч(МестоВозникновения);
	Обнаружена = Неопределено;
	ВеткаОбнаружения = Неопределено;
	СборкаОбнаружения = Неопределено;
	
	Если ТипМестаВозникновения = Тип("СправочникСсылка.Ветки") Тогда
		
		Проект           = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоВозникновения, "Владелец");
		Обнаружена       = Перечисления.МестаОбнаруженияОшибок.ВВетке;
		ВеткаОбнаружения = МестоВозникновения;
		
	ИначеЕсли ТипМестаВозникновения = Тип("СправочникСсылка.СборкиВерсии") Тогда
		
		Проект            = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МестоВозникновения, "Владелец.Владелец");
		Обнаружена        = Перечисления.МестаОбнаруженияОшибок.ВСборке;
		СборкаОбнаружения = МестоВозникновения;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Неизвестное место возникновения проблемы'")
	КонецЕсли;
	
	ПараметрыОшибки.Вставить("Владелец",         Проект);
	ПараметрыОшибки.Вставить("ДатаСоздания",     ТекущаяДата);
	ПараметрыОшибки.Вставить("ДатаНаправления",  ТекущаяДата);
	ПараметрыОшибки.Вставить("Статус",           Перечисления.СтатусыОшибок.Зарегистрирована);
	ПараметрыОшибки.Вставить("Зарегистрирована", Истина);
	
	Если Не ПараметрыОшибки.Свойство("МетодВыявленияОшибки") Тогда
		ПараметрыОшибки.Вставить("ПараметрыОшибки", Перечисления.МетодыВыявленияОшибок.РаботаСПрограммой);
	КонецЕсли; 
	Если Не ПараметрыОшибки.Свойство("Обнаружена") Тогда
		ПараметрыОшибки.Вставить("Обнаружена", Обнаружена);
	КонецЕсли; 
	Если Не ПараметрыОшибки.Свойство("ВеткаОбнаружения") Тогда
		ПараметрыОшибки.Вставить("ВеткаОбнаружения", ВеткаОбнаружения);
	КонецЕсли;
	Если Не ПараметрыОшибки.Свойство("СборкаОбнаружения") Тогда
		ПараметрыОшибки.Вставить("СборкаОбнаружения", СборкаОбнаружения);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СгруппироватьИЗаписатьОшибки(ТаблицаОшибок, ПараметрыОшибки, ПоляГруппировки = "")
	
	Если ЗначениеЗаполнено(ПоляГруппировки) Тогда
		
		СтруктураОтбора = Новый Структура(ПоляГруппировки);
		
		ГруппыОшибокКЗаписи = ТаблицаОшибок.Скопировать();
		ГруппыОшибокКЗаписи.Свернуть(ПоляГруппировки);
		Для Каждого ГруппаОшибок Из ГруппыОшибокКЗаписи Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ГруппаОшибок);
			НайденныеСтроки = ТаблицаОшибок.НайтиСтроки(СтруктураОтбора);
			
			ОшибкиНаЗапись = Новый Массив;
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если Не Строка.ЭтоДублирующаяОшибка Тогда
					ОшибкиНаЗапись.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			Если ОшибкиНаЗапись.Количество() > 0 Тогда
				ЗаписатьОшибку(ОшибкиНаЗапись, ПараметрыОшибки);
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка Из ТаблицаОшибок Цикл
			
			Если Не Строка.ЭтоДублирующаяОшибка Тогда
				ЗаписатьОшибку(Строка, ПараметрыОшибки);
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаписатьОшибку(ДанныеОшибки, ПараметрыОшибки)
	
	ДатаОшибки = ТекущаяДатаСеанса();
	
	СсылкаНаОшибку = Неопределено;
	Если ТипЗнч(ДанныеОшибки) = Тип("Массив") Тогда
		Для Каждого Строка Из ДанныеОшибки Цикл
			Если ЗначениеЗаполнено(Строка.СсылкаНаОшибку) Тогда
				Если ЗначениеЗаполнено(СсылкаНаОшибку) Тогда
					СсылкаНаОшибку = Неопределено;
					Прервать;
				Иначе 
					СсылкаНаОшибку = Строка.СсылкаНаОшибку;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли ТипЗнч(ДанныеОшибки) <> Тип("Массив") Тогда
		СсылкаНаОшибку = ДанныеОшибки.СсылкаНаОшибку;
	КонецЕсли;
	
	ЗаписатьСуществующуюОшибку = ЗначениеЗаполнено(СсылкаНаОшибку) 
							И ПараметрыОшибки.Владелец.ВозвращатьВоспроизводимыеОшибкиНаРегистрацию;
	КомуНаправленаСуществующаяОшибка = Справочники.Пользователи.ПустаяСсылка();
	
	Если ЗаписатьСуществующуюОшибку Тогда
		СоздаваемаяОшибка = СсылкаНаОшибку.ПолучитьОбъект();
		СоздаваемаяОшибка.Статус = Перечисления.СтатусыОшибок.Зарегистрирована;
		
		Если ЗначениеЗаполнено(СоздаваемаяОшибка.КомуНаправлена) Тогда
			КомуНаправленаСуществующаяОшибка = СоздаваемаяОшибка.КомуНаправлена;
		ИначеЕсли СоздаваемаяОшибка.НеПризнана И ЗначениеЗаполнено(СоздаваемаяОшибка.Рассмотрел) Тогда
			КомуНаправленаСуществующаяОшибка = СоздаваемаяОшибка.Рассмотрел;
		ИначеЕсли СоздаваемаяОшибка.Исправлена И ЗначениеЗаполнено(СоздаваемаяОшибка.Исправил) Тогда
			КомуНаправленаСуществующаяОшибка = СоздаваемаяОшибка.Исправил;
		ИначеЕсли СоздаваемаяОшибка.Протокол.Количество() > 0 Тогда
			КомуНаправленаСуществующаяОшибка = СоздаваемаяОшибка.Протокол[СоздаваемаяОшибка.Протокол.Количество() - 1].Автор;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СоздаваемаяОшибка, ПараметрыОшибки,,"ДатаСоздания");
		
	Иначе
		СоздаваемаяОшибка = Справочники.Ошибки.СоздатьЭлемент();
		СоздаваемаяОшибка.УстановитьНовыйКод();
		СоздаваемаяОшибка.Заполнить(Неопределено);
		ЗаполнитьЗначенияСвойств(СоздаваемаяОшибка, ПараметрыОшибки);
		Если ПараметрыОшибки.Свойство("Идентификатор") И ЗначениеЗаполнено(ПараметрыОшибки.Идентификатор) Тогда
			СоздаваемаяОшибка.УстановитьСсылкуНового(ПараметрыОшибки.Идентификатор);
		КонецЕсли;

	КонецЕсли;
	
	Если ТипЗнч(ДанныеОшибки) = Тип("Массив") Тогда
		
		ПерваяСтрока = ДанныеОшибки[0];
		ТипПроблемы           = ПолучитьМаксимальныйТипПроблемы(ДанныеОшибки);
		КомуНаправлена        = ПолучитьАктуальноеКомуНаправлена(ДанныеОшибки);
		РазделПроекта         = ПолучитьАктуальныйРаздел(ДанныеОшибки);
		
		ПрисвоитьЕслиПолеЕсть(СоздаваемаяОшибка, ПерваяСтрока, "ПорядокВоспроизведения");
		ПрисвоитьЕслиПолеЕсть(СоздаваемаяОшибка, ПерваяСтрока, "ИсходнаяИнформацияОбОшибке");
		
		ЗаполнитьЗначенияСвойств(СоздаваемаяОшибка, ПерваяСтрока);
		
		Для Каждого СтрокаОшибки Из ДанныеОшибки Цикл
			ДобавитьСтрокуЕслиЕстьДанные(СоздаваемаяОшибка, СтрокаОшибки);
		КонецЦикла;
		СоздаваемаяОшибка.СписокОбъектов.Сортировать("ПроблемныйОбъект,ПодчиненныйОбъект,Уточнение");
		
	Иначе 
		
		ТипПроблемы           = ПолучитьТипПроблемы(ТипЗнч(ДанныеОшибки.ПроблемныйОбъект));
		КомуНаправлена        = ДанныеОшибки.КомуНаправлена;
		ПрисвоитьЕслиПолеЕсть(СоздаваемаяОшибка, ДанныеОшибки, "ПорядокВоспроизведения");
		ПрисвоитьЕслиПолеЕсть(СоздаваемаяОшибка, ДанныеОшибки, "ИсходнаяИнформацияОбОшибке");
		
		ЗаполнитьЗначенияСвойств(СоздаваемаяОшибка, ДанныеОшибки);
		ДобавитьСтрокуЕслиЕстьДанные(СоздаваемаяОшибка, ДанныеОшибки);
		
	КонецЕсли;
	
	Если ЗаписатьСуществующуюОшибку И ЗначениеЗаполнено(КомуНаправленаСуществующаяОшибка) Тогда
		КомуНаправлена = КомуНаправленаСуществующаяОшибка; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоздаваемаяОшибка.ПорядокВоспроизведения) Тогда
		
		ФорматированнаяСтрока   = Новый ФорматированнаяСтрока(СоздаваемаяОшибка.ПорядокВоспроизведения);
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьФорматированнуюСтроку(ФорматированнаяСтрока);
		СоздаваемаяОшибка.ХранилищеПорядкаВоспроизведения = Новый ХранилищеЗначения(ФорматированныйДокумент);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СоздаваемаяОшибка.ИсходнаяИнформацияОбОшибке) Тогда
		
		ФорматированнаяСтрока   = Новый ФорматированнаяСтрока(СоздаваемаяОшибка.ИсходнаяИнформацияОбОшибке);
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
		ФорматированныйДокумент.УстановитьФорматированнуюСтроку(ФорматированнаяСтрока);
		СоздаваемаяОшибка.ХранилищеИсходнойИнформацииОбОшибке = Новый ХранилищеЗначения(ФорматированныйДокумент);
		
	КонецЕсли; 
	
	Если ПараметрыОшибки.Свойство("ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе") 
	   И ПараметрыОшибки.ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе 
		 И Не ЗначениеЗаполнено(СоздаваемаяОшибка.ИнформационнаяБазаДляВоспроизведения) Тогда
		
		СоздаваемаяОшибка.ИнформационнаяБазаДляВоспроизведения = Справочники.Ошибки.СгенерироватьКаталогИБОшибки(СоздаваемаяОшибка);
		
	КонецЕсли;
	
	СоздаваемаяОшибка.ТипПроблемы    = ТипПроблемы;
	СоздаваемаяОшибка.РазделПроекта  = РазделПроекта;
	
	СоздаваемаяОшибка.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения;
	
	Ответ = ПодобратьВерсиюИсправленияВеткуОбнаруженияДляОшибки(СоздаваемаяОшибка);
	СоздаваемаяОшибка.ВерсияИсправления   = Ответ.ВерсияИсправления;
	
	ИзмененияПомещаютсяТолькоЧерезДругиеВетки = ?(СоздаваемаяОшибка.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоздаваемаяОшибка.СборкаОбнаружения, "Ветка.ИзмененияПомещаютсяТолькоЧерезДругиеВетки"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СоздаваемаяОшибка.ВеткаОбнаружения, "ИзмененияПомещаютсяТолькоЧерезДругиеВетки"));
	
	Если НЕ ИзмененияПомещаютсяТолькоЧерезДругиеВетки Тогда
		СоздаваемаяОшибка.ВеткаИсправления = СоздаваемаяОшибка.ВеткаОбнаружения;
	КонецЕсли;
	
	СоздаваемаяОшибка.КомуНаправлена = КомуНаправлена;
	
	СтрокаПротокола = СоздаваемаяОшибка.Протокол.Вставить(0);
	СтрокаПротокола.Дата           = ДатаОшибки;
	Если ПараметрыОшибки.Свойство("АвторВПротоколе") И ЗначениеЗаполнено(ПараметрыОшибки.АвторВПротоколе) Тогда
		СтрокаПротокола.Автор = ПараметрыОшибки.АвторВПротоколе;
	Иначе	
		СтрокаПротокола.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	СтрокаПротокола.КомуНаправлена = КомуНаправлена;
	СтрокаПротокола.Статус         = Перечисления.СтатусыОшибок.Зарегистрирована;
	Если ЗаписатьСуществующуюОшибку Тогда
		СтрокаПротокола.Комментарий = НСтр("ru = 'Ошибка все ещё воспроизводится, её необходимо рассмотреть.'");
	КонецЕсли;
	
	// Если для пользователя настроено замещение, то в поле Кому направлена подставляется замещающий
	Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(СоздаваемаяОшибка.КомуНаправлена, СоздаваемаяОшибка.Владелец, "", Ложь);
	СоздаваемаяОшибка.Записать();
	
	Если ТипЗнч(ДанныеОшибки) = Тип("Массив") Тогда
		Для Каждого Строка Из ДанныеОшибки Цикл
			Строка.СсылкаНаОшибку = СоздаваемаяОшибка.Ссылка;
			Строка.КодОшибки      = СоздаваемаяОшибка.Код;
		КонецЦикла; 
	Иначе
		ДанныеОшибки.СсылкаНаОшибку = СоздаваемаяОшибка.Ссылка;
		ДанныеОшибки.КодОшибки      = СоздаваемаяОшибка.Код;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьСтрокуЕслиЕстьДанные(Ошибка, Строка)

	Если ЗначениеЗаполнено(Строка.ПроблемныйОбъект)
	 ИЛИ ЗначениеЗаполнено(Строка.ПодчиненныйОбъект)
	 ИЛИ ЗначениеЗаполнено(Строка.Уточнение)
	 ИЛИ ЗначениеЗаполнено(Строка.Комментарий) Тогда
		
		СтрокаМетаданных = Ошибка.СписокОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМетаданных, Строка, 
		                         "ПроблемныйОбъект,ПодчиненныйОбъект,Уточнение,Комментарий");
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьМаксимальныйТипПроблемы(Массив)
	
	Ответ = Перечисления.ТипПроблемы.БезДетализации;
	
	Для Каждого Строка Из Массив Цикл
		
		ТипЗначения = ТипЗнч(Строка.ПроблемныйОбъект);
		
		ТипПроблемы = ПолучитьТипПроблемы(ТипЗначения);
		Если ТипПроблемы = Перечисления.ТипПроблемы.ОбработчикиОбновления
		   И Ответ = Перечисления.ТипПроблемы.БезДетализации Тогда
			
			Ответ = Перечисления.ТипПроблемы.ОбработчикиОбновления;
			
		ИначеЕсли ТипПроблемы = Перечисления.ТипПроблемы.ОбъектыМетаданных
		   И (    Ответ = Перечисления.ТипПроблемы.БезДетализации
		      ИЛИ Ответ = Перечисления.ТипПроблемы.ОбработчикиОбновления) Тогда
			
			Ответ = Перечисления.ТипПроблемы.ОбъектыМетаданных;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьТипПроблемы(ТипЗначения)
	
	Если ТипЗначения = Тип("СправочникСсылка.ОбъектыМетаданных")
	 ИЛИ ТипЗначения = Тип("СправочникСсылка.Подсистемы") Тогда
		Возврат Перечисления.ТипПроблемы.ОбъектыМетаданных;
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы") Тогда
		Возврат Перечисления.ТипПроблемы.ОбработчикиОбновления;
	Иначе 
		Возврат Перечисления.ТипПроблемы.БезДетализации;
	КонецЕсли; 
	
КонецФункции

Процедура ПрисвоитьЕслиПолеЕсть(Приемник, Источник, ИмяПоля)
	
	Если Источник.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		Приемник[ИмяПоля] = Источник[ИмяПоля];
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру со ссылкой на версию исправления и ветку обнаружения ошибки.
// см. в Справочники.Ошибки.ПомощникРегистрацииИОбработкиОшибки
//
Функция ПодобратьВерсиюИсправленияВеткуОбнаруженияДляОшибки(ОшибкаОбъект)
	
	ВерсияИсправления = Справочники.ВерсииПроекта.ПустаяСсылка();
	ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
	
	Если ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		
		ВеткаОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаОбъект.СборкаОбнаружения, "Владелец.Ветка");
		
	ИначеЕсли ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		
		ВеткаОбнаружения = ОшибкаОбъект.Веткаобнаружения;
		
	КонецЕсли;
	
	ДанныеОбнаружения = Новый Структура;
	ДанныеОбнаружения.Вставить("Обнаружена", ОшибкаОбъект.Обнаружена);
	ДанныеОбнаружения.Вставить("ВеткаОбнаружения", ОшибкаОбъект.ВеткаОбнаружения);
	ДанныеОбнаружения.Вставить("СборкаОбнаружения", ОшибкаОбъект.СборкаОбнаружения);
	ДанныеОбнаружения.Вставить("ДатаОбнаружения", ОшибкаОбъект.ДатаОбнаружения);
			
	ВерсияИсправления = ВерсияИсправления(ОшибкаОбъект.Владелец, 
		                                  ДанныеОбнаружения,
		                                  ОшибкаОбъект.СрочностьИсправления, 
		                                  ОшибкаОбъект.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
										  ОшибкаОбъект.Исправляется);
	
	Возврат Новый Структура("ВерсияИсправления, ВеткаОбнаружения", ВерсияИсправления, ВеткаОбнаружения);
	
КонецФункции

// Проверяет, является ли указанная повторяемая ошибка, в свою очередь, дублем другой ошибки,
// заполнено ли у нее поле "Повторяемая ошибка"
Функция ПроверитьУказаннуюПовторяемуюОшибку(Ошибка, ВеткаОбнаружения) Экспорт
	ДанныеОтвета = Новый Структура;
	
	РеквизитыПовторяемойОшибки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ошибка, "ПовторяемаяОшибка,ВеткаОбнаружения,ВеткаОбнаружения.Тип,Владелец");
	РеквизитыВеткиОбнаружения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВеткаОбнаружения, "Тип,Владелец");
	Если ТипЗнч(РеквизитыПовторяемойОшибки.ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки") 
		И РеквизитыПовторяемойОшибки.ПовторяемаяОшибка <> Справочники.Ошибки.ПустаяСсылка() Тогда
		ВладелецПовторяемойОшибки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыПовторяемойОшибки.ПовторяемаяОшибка, "Владелец");
		Если ВладелецПовторяемойОшибки <> РеквизитыПовторяемойОшибки.Владелец Тогда
			ДанныеОтвета.Вставить("РезультатПроверки", Ложь);
		Иначе
			ДанныеОтвета.Вставить("РезультатПроверки", Истина);
			ТекстСообщения = НСтр("ru='Недопустимо указание повторяемой ошибки, у которой, в свою очередь, заполнено поле повторяемая ошибка.'");
			ДанныеОтвета.Вставить("ТекстСообщения", ТекстСообщения);
			ДанныеОтвета.Вставить("ПовторяемаяОшибка", РеквизитыПовторяемойОшибки.ПовторяемаяОшибка);
		КонецЕсли;
	ИначеЕсли ВеткаОбнаружения <> РеквизитыПовторяемойОшибки.ВеткаОбнаружения 
		И ВеткаОбнаружения <> Справочники.Ветки.ПустаяСсылка()
		И РеквизитыПовторяемойОшибки.ВеткаОбнаружения <> Справочники.Ветки.ПустаяСсылка()
		И РеквизитыВеткиОбнаружения.Владелец = РеквизитыПовторяемойОшибки.Владелец
		И (РеквизитыПовторяемойОшибки.ВеткаОбнаруженияТип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок 
			ИЛИ РеквизитыПовторяемойОшибки.ВеткаОбнаруженияТип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта) Тогда
		
		ДанныеОтвета.Вставить("РезультатПроверки", Истина);
		ТекстСообщения = НСтр("ru='Недопустимо указание повторяемой ошибки'");
		Если РеквизитыПовторяемойОшибки.ВеткаОбнаруженияТип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru=', которая обнаружена в ветке для исправления ошибки.'");
		ИначеЕсли РеквизитыПовторяемойОшибки.ВеткаОбнаруженияТип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
			ТекстСообщения = ТекстСообщения + НСтр("ru=', которая обнаружена в ветке технического проекта.'");
		КонецЕсли;
		ДанныеОтвета.Вставить("ТекстСообщения", ТекстСообщения);
	Иначе
		ДанныеОтвета.Вставить("РезультатПроверки", Ложь);
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

// При попытке указать у ошибки повторяемую, проверяет, существуют ли ошибки,
// у которых в поле "Повторяемая ошибка" указана текущая ошибка.
Функция ПроверитьОшибкиСУказаннойПовторяемойОшибкой(Ошибка, ПовторяемаяОшибка) Экспорт
	ДанныеОтвета = Новый Структура;
	
	ВладелецОшибки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка, "Владелец");
	ВладелецПовторяемойОшибкиОшибки = Неопределено;
	
	Если ТипЗнч(ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки") 
		И ПовторяемаяОшибка <> Справочники.Ошибки.ПустаяСсылка() Тогда
		ВладелецПовторяемойОшибкиОшибки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПовторяемаяОшибка, "Владелец");
	КонецЕсли;

	Если ВладелецОшибки <> ВладелецПовторяемойОшибкиОшибки Тогда
		ДанныеОтвета.Вставить("РезультатПроверки", Ложь);
		Возврат ДанныеОтвета;
	КонецЕсли;
	
	ПовторяемыеОшибки = ОшибкиСУказаннойПовторяемойОшибкой(Ошибка);
	Если ПовторяемыеОшибки.Количество() > 0 И 
		Ошибка <> Справочники.Ошибки.ПустаяСсылка() Тогда

		ДанныеОтвета.Вставить("РезультатПроверки", Истина);
		
		ТекстСообщения = НСтр("ru='Недопустимо указание повторяемой ошибки. Есть ошибки, у которой в поле ""Повторяемая ошибка"" указана текущая ошибка.'");
		ДанныеОтвета.Вставить("ТекстСообщения", ТекстСообщения);
		ДанныеОтвета.Вставить("ПовторяемыеОшибки", ПовторяемыеОшибки);
		
	Иначе
		ДанныеОтвета.Вставить("РезультатПроверки", Ложь);
	КонецЕсли;
	
	Возврат ДанныеОтвета;
	
КонецФункции

Функция ОшибкиСУказаннойПовторяемойОшибкой(Ошибка)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ошибки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|ГДЕ
		|	Ошибки.ПовторяемаяОшибка = &ПовторяемаяОшибка
		|	И НЕ Ошибки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПовторяемаяОшибка", Ошибка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция УстановитьРеквизитыПоДействиюИСтатусуПризнание(ОшибкаОбъект, ДанныеИДействияДляОбработки, ТекущийПользователь, РеквизитыПроектов, ВеткиВерсий)
	
	ДатаДействия =  ТекущаяДата();
	
	Признана = Ложь;
	Исправлена = Ложь;
	Проверена = Ложь;
	Закрыта = Ложь;
	
	ИсправлятьВВеткахАвтоматически = АвтоматическиИсправлятьОшибкиВВетках(ОшибкаОбъект.Владелец, РеквизитыПроектов);
	
	Если ДанныеИДействияДляОбработки.Признать Тогда
		
		Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
			
			ОшибкаОбъект.Признана = Истина;
			ОшибкаОбъект.ДатаРассмотрения = ДатаДействия;
			ОшибкаОбъект.Рассмотрел = ТекущийПользователь;
			
			Если ЗначениеЗаполнено(Лев(ДанныеИДействияДляОбработки.ПубликуемоеОписание,100)) Тогда
				ОшибкаОбъект.ПубликуемоеОписание = ДанныеИДействияДляОбработки.ПубликуемоеОписание;
			КонецЕсли;
			
			Признана = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИДействияДляОбработки.ОтметитьИсправление Тогда
		Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Признана
			ИЛИ ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована
			И ОшибкаОбъект.Признана Тогда
			
			ОшибкаОбъект.Исправлена = Истина;
			ОшибкаОбъект.ДатаИсправления = ДатаДействия;
			ОшибкаОбъект.Исправил = ТекущийПользователь;
			
			Если ЗначениеЗаполнено(Лев(ДанныеИДействияДляОбработки.ОписаниеВыполненныхИзменений,100)) Тогда
				ОшибкаОбъект.ОписаниеИзменений = ДанныеИДействияДляОбработки.ОписаниеВыполненныхИзменений;
			КонецЕсли;
			
			Если ДанныеИДействияДляОбработки.ЕстьИзмененияВПроектныхРешениях Тогда
				ОшибкаОбъект.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями = Истина;
			КонецЕсли;
			
			Если ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
				Если ИсправлятьВВеткахАвтоматически Тогда
					ОтметитьИсправлениеВВетках(ОшибкаОбъект);
				Иначе
					ПроверитьУстановитьИсправлениеПоВеткеВерсииИсправления(ОшибкаОбъект, ВеткиВерсий, Истина);
				КонецЕсли;
			КонецЕсли;
			
			Исправлена = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеИДействияДляОбработки.ПодтвердитьИсправление Тогда
		Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Исправлена
			ИЛИ ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Признана
			И ОшибкаОбъект.Исправлена Тогда
			
			ОшибкаОбъект.Проверена = Истина;
			ОшибкаОбъект.ДатаПроверки = ДатаДействия;
			ОшибкаОбъект.Проверил = ТекущийПользователь;
			
			Проверена = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПодлежитЗакрытию = ОшибкаПодлежитЗакрытию(ОшибкаОбъект);
	
	Если ДанныеИДействияДляОбработки.Закрыть Тогда
		Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена
			ИЛИ (ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Исправлена
			ИЛИ ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Признана
			ИЛИ ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована)
			И ОшибкаОбъект.Проверена Тогда
			
			Если ОшибкаПодлежитЗакрытию Тогда
				
				ОшибкаОбъект.Закрыта = Истина;
				ОшибкаОбъект.ДатаЗакрытия = ДатаДействия;
				ОшибкаОбъект.Закрыл = ТекущийПользователь;
				
				Закрыта = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если Закрыта Тогда
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Закрыта;
	ИначеЕсли Проверена Тогда
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена;
	ИначеЕсли Исправлена Тогда
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Исправлена;
	ИначеЕсли Признана Тогда
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Признана;
	КонецЕсли;
	
	Если Проверена И НЕ ДанныеИДействияДляОбработки.Закрыть И ОшибкаПодлежитЗакрытию Тогда
		ОшибкаОбъект.КомуНаправлена = ЗакрывающийДляОшибки(ОшибкаОбъект, РеквизитыПроектов);
	ИначеЕсли Закрыта И НЕ ЗначениеЗаполнено(ДанныеИДействияДляОбработки.КомуНаправлена) Тогда
		ОшибкаОбъект.КомуНаправлена = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Если ЗначениеЗаполнено(ДанныеИДействияДляОбработки.КомуНаправлена) Тогда
			ОшибкаОбъект.КомуНаправлена = ДанныеИДействияДляОбработки.КомуНаправлена;
		ИначеЕсли Проверена И НЕ ОшибкаПодлежитЗакрытию И ЗначениеЗаполнено(ОшибкаОбъект.КомуНаправлена) Тогда
			ОшибкаОбъект.КомуНаправлена = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
		
	Возврат (Признана ИЛИ Исправлена ИЛИ Проверена ИЛИ Закрыта);
	
КонецФункции

Функция УстановитьРеквизитыПоДействиюИСтатусуНепризнание(ОшибкаОбъект, ДанныеИДействияДляОбработки, ТекущийПользователь, РеквизитыПроектов)
	
	ДатаДействия =  ТекущаяДата();
	
	НеПризнана = Ложь;
	Отозвана = Ложь;
	Закрыта = Ложь;
	
	Если ДанныеИДействияДляОбработки.НеПризнавать Тогда
		
		Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
			
			ОшибкаОбъект.НеПризнана = Истина;
			ОшибкаОбъект.ДатаРассмотрения = ДатаДействия;
			ОшибкаОбъект.Рассмотрел = ТекущийПользователь;
			
			Если ЗначениеЗаполнено(Лев(ДанныеИДействияДляОбработки.ПричиныНепризнания,100)) Тогда
				ОшибкаОбъект.ПричиныНепризнания = ДанныеИДействияДляОбработки.ПричиныНепризнания;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Лев(ДанныеИДействияДляОбработки.ПубликуемоеОписание,100)) Тогда
				ОшибкаОбъект.ПубликуемоеОписание = ДанныеИДействияДляОбработки.ПубликуемоеОписание;
			КонецЕсли;
			
			НеПризнана = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеИДействияДляОбработки.Отозвать Тогда
		Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПризнана
			ИЛИ ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована
			И ОшибкаОбъект.НеПризнана Тогда
			
			ОшибкаОбъект.Отозвана = Истина;
			ОшибкаОбъект.ДатаОтзыва = ДатаДействия;
			ОшибкаОбъект.Отозвал = ТекущийПользователь;
			
			Если ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках
				И ОшибкаОбъект.ИсправлениеВВетках.Количество()>0 Тогда
				ОшибкаОбъект.ИсправлениеВВетках.Очистить();
			КонецЕсли;
			
			Отозвана = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПодлежитЗакрытию = ОшибкаПодлежитЗакрытию(ОшибкаОбъект);
	
	Если ДанныеИДействияДляОбработки.Закрыть Тогда
		Если ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Отозвана
			ИЛИ (ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПризнана
			ИЛИ ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Зарегистрирована)
			И ОшибкаОбъект.Отозвана Тогда
			
			Если ОшибкаПодлежитЗакрытию Тогда
				
				ОшибкаОбъект.Закрыта = Истина;
				ОшибкаОбъект.ДатаЗакрытия = ДатаДействия;
				ОшибкаОбъект.Закрыл = ТекущийПользователь;
				
				Закрыта = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
		
	Если Закрыта Тогда
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Закрыта;
	ИначеЕсли Отозвана Тогда
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.Отозвана;
	ИначеЕсли НеПризнана Тогда
		ОшибкаОбъект.Статус = Перечисления.СтатусыОшибок.НеПризнана;
	КонецЕсли;
	
	Если Отозвана И НЕ ДанныеИДействияДляОбработки.Закрыть И ОшибкаПодлежитЗакрытию Тогда
		Если ЗначениеЗаполнено(ДанныеИДействияДляОбработки.КомуНаправлена) Тогда
			ОшибкаОбъект.КомуНаправлена = ДанныеИДействияДляОбработки.КомуНаправлена;	
		Иначе
			ОшибкаОбъект.КомуНаправлена = ЗакрывающийДляОшибки(ОшибкаОбъект, РеквизитыПроектов);
		КонецЕсли;
	ИначеЕсли Закрыта И НЕ ЗначениеЗаполнено(ДанныеИДействияДляОбработки.КомуНаправлена) Тогда
		ОшибкаОбъект.КомуНаправлена = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		Если ЗначениеЗаполнено(ДанныеИДействияДляОбработки.КомуНаправлена) Тогда
			ОшибкаОбъект.КомуНаправлена = ДанныеИДействияДляОбработки.КомуНаправлена;
		ИначеЕсли Отозвана И НЕ ОшибкаПодлежитЗакрытию И ЗначениеЗаполнено(ОшибкаОбъект.КомуНаправлена) Тогда
			ОшибкаОбъект.КомуНаправлена = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеИДействияДляОбработки.Отозвать И Отозвана Тогда
		ОшибкаОбъект.ИсправлениеВВетках.Очистить();
	КонецЕсли;
	
	Возврат (НеПризнана ИЛИ Отозвана ИЛИ Закрыта);
	
КонецФункции

Функция ЗакрывающийДляОшибки(ОшибкаОбъект, РеквизитыПроектов)
	
	Закрывающий = Справочники.Пользователи.ПустаяСсылка();
	
	СтрокаПроекта = РеквизитыПроектов.Найти(ОшибкаОбъект.Владелец, "Проект");
	
	Если СтрокаПроекта <> Неопределено Тогда
		Если СтрокаПроекта.КомуНаправлять = Перечисления.ВариантыНаправленияОшибокНаЗакрытие.ОтветственномуЗаПроект Тогда
			Закрывающий = СтрокаПроекта.ОтветственныйЗаПроект;
		ИначеЕсли СтрокаПроекта.КомуНаправлять = Перечисления.ВариантыНаправленияОшибокНаЗакрытие.ОтветственномуЗаРаздел Тогда
			Если ЗначениеЗаполнено(ОшибкаОбъект.РазделПроекта) Тогда
				Закрывающий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаОбъект.РазделПроекта, "Ответственный");
			КонецЕсли;
		Иначе
			Закрывающий = СтрокаПроекта.ЗакрывающийОшибки;
		КОнецЕсли;
	КонецЕсли;
	
	Возврат Закрывающий;
	
КонецФункции

Функция ПолучитьАктуальноеКомуНаправлена(Массив)
	
	КомуНаправлена           = Справочники.Пользователи.ПустаяСсылка();
	КомуНаправленаМетаданные = Справочники.Пользователи.ПустаяСсылка();
	
	Для Каждого Строка Из Массив Цикл
		
		Если Не ЗначениеЗаполнено(КомуНаправлена)
		   И ЗначениеЗаполнено(Строка.КомуНаправлена) Тогда
			КомуНаправлена = Строка.КомуНаправлена;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(КомуНаправленаМетаданные)
		   И ЗначениеЗаполнено(Строка.КомуНаправленаМетаданные) Тогда
			КомуНаправленаМетаданные = Строка.КомуНаправленаМетаданные;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ?(ЗначениеЗаполнено(КомуНаправленаМетаданные), КомуНаправленаМетаданные, КомуНаправлена);
	
КонецФункции

Функция ПолучитьАктуальныйРаздел(Массив)
	
	РазделПроекта           = Справочники.РазделыПроекта.ПустаяСсылка();
	РазделПроектаМетаданные = Справочники.РазделыПроекта.ПустаяСсылка();
	
	Для Каждого Строка Из Массив Цикл
		
		Если Не ЗначениеЗаполнено(РазделПроекта)
		   И ЗначениеЗаполнено(Строка.РазделПроекта) Тогда
			РазделПроекта = Строка.РазделПроекта;
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(РазделПроектаМетаданные)
		   И ЗначениеЗаполнено(Строка.РазделПроектаМетаданные) Тогда
			РазделПроектаМетаданные = Строка.РазделПроектаМетаданные;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ?(ЗначениеЗаполнено(РазделПроектаМетаданные), РазделПроектаМетаданные, РазделПроекта);
	
КонецФункции

Процедура ОтозватьОшибкиНижеПоДеревуВеток(СсылкаНаОшибку, ЭтоДубль, ПараметрыРегистрации)
	
	Если ЭтоДубль Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОшибку", СсылкаНаОшибку);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОшибкиСписокОбъектов.ПроблемныйОбъект                КАК ПроблемныйОбъект,
		|	ОшибкиСписокОбъектов.ПодчиненныйОбъект               КАК ПодчиненныйОбъект,
		|	ОшибкиСписокОбъектов.ХешУточнения                    КАК ХешУточнения,
		|	ОшибкиСписокОбъектов.Ссылка.ТипПроблемы              КАК ТипПроблемы,
		|	ОшибкиСписокОбъектов.Ссылка.Обнаружена               КАК Обнаружена,
		|	ОшибкиСписокОбъектов.Ссылка.ВеткаОбнаружения         КАК ВеткаОбнаружения
		|ИЗ
		|	Справочник.Ошибки.СписокОбъектов КАК ОшибкиСписокОбъектов
		|ГДЕ
		|	ОшибкиСписокОбъектов.Ссылка = &СсылкаНаОшибку";
	
	ВыгрузкаСпискаОбъектов = Запрос.Выполнить().Выгрузить();
	
	Если ВыгрузкаСпискаОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Обнаружена          = ВыгрузкаСпискаОбъектов[0].Обнаружена;
	ВеткаОбнаружения    = ВыгрузкаСпискаОбъектов[0].ВеткаОбнаружения;
	ТипПроблемы         = ВыгрузкаСпискаОбъектов[0].ТипПроблемы;
	
	Если Обнаружена <> Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		Возврат;
	КонецЕсли; 
	
	ЗапросОшибкиПодчиненныхВеток = Новый Запрос;
	ОписанияОшибокДляЗапроса = ВыгрузкаСпискаОбъектов.Скопировать(,"ПроблемныйОбъект,ПодчиненныйОбъект,ХешУточнения");
	ЗапросОшибкиПодчиненныхВеток.УстановитьПараметр("ТаблицаОписанийОшибок", ОписанияОшибокДляЗапроса);
	ЗапросОшибкиПодчиненныхВеток.УстановитьПараметр("ВеткаОбнаружения", ВеткаОбнаружения);
	ЗапросОшибкиПодчиненныхВеток.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОписанияОшибок.ПроблемныйОбъект,
	|	ТаблицаОписанияОшибок.ПодчиненныйОбъект,
	|	ТаблицаОписанияОшибок.ХешУточнения
	|ПОМЕСТИТЬ ОписаниеОшибок
	|ИЗ
	|	&ТаблицаОписанийОшибок КАК ТаблицаОписанияОшибок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОшибкиСписокОбъектов.Ссылка
	|ИЗ
	|	Справочник.Ошибки.СписокОбъектов КАК ОшибкиСписокОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОписаниеОшибок КАК ОписаниеОшибок
	|		ПО %УсловиеСоединения%
	|			
	|ГДЕ
	|	НЕ ОшибкиСписокОбъектов.Ссылка.ПометкаУдаления
	|	И НЕ ОшибкиСписокОбъектов.Ссылка.Отозвана
	|	И НЕ ОшибкиСписокОбъектов.Ссылка.Исправлена
	|	И (ОшибкиСписокОбъектов.Ссылка.ПовторяемаяОшибка = ЗНАЧЕНИЕ(Справочник.Ошибки.ПустаяСсылка)
	|    ИЛИ ОшибкиСписокОбъектов.Ссылка.ПовторяемаяОшибка = """")
	|	И ОшибкиСписокОбъектов.Ссылка.ВеткаОбнаружения.Приемник = &ВеткаОбнаружения
	|	И ПОДСТРОКА(ОшибкиСписокОбъектов.Уточнение, 1, 1) НЕ ПОДОБНО """"
	|	";
	
	Если ТипПроблемы = Перечисления.ТипПроблемы.ОбъектыМетаданных Тогда
		
		ОтборСтрок        = Новый Структура("ПроблемныйОбъект, ПодчиненныйОбъект, ХешУточнения");
		УсловиеСоединения = "ОшибкиСписокОбъектов.ПроблемныйОбъект = ОписаниеОшибок.ПроблемныйОбъект
		                    |	И ОшибкиСписокОбъектов.ПодчиненныйОбъект = ОписаниеОшибок.ПодчиненныйОбъект
		                    |	И ОшибкиСписокОбъектов.ХешУточнения = ОписаниеОшибок.ХешУточнения
		                    |	И ТИПЗНАЧЕНИЯ(ОписаниеОшибок.ПроблемныйОбъект) В (ТИП(Справочник.ОбъектыМетаданных), ТИП(Справочник.Подсистемы))"
		
	ИначеЕсли ТипПроблемы = Перечисления.ТипПроблемы.ОбработчикиОбновления Тогда
		
		ОтборСтрок        = Новый Структура("ПроблемныйОбъект, ХешУточнения");
		УсловиеСоединения = "ОшибкиСписокОбъектов.ПроблемныйОбъект = ОписаниеОшибок.ПроблемныйОбъект
		                    |	И ОшибкиСписокОбъектов.ХешУточнения = ОписаниеОшибок.ХешУточнения
		                    |	И ТИПЗНАЧЕНИЯ(ОписаниеОшибок.ПроблемныйОбъект) = ТИП(Справочник.ОбработчикиОбновленияИнформационнойБазы)"
	Иначе 
		
		ОтборСтрок        = Новый Структура("ХешУточнения");
		УсловиеСоединения = "ОшибкиСписокОбъектов.ХешУточнения = ОписаниеОшибок.ХешУточнения
		                    |	И ОписаниеОшибок.ПроблемныйОбъект = НЕОПРЕДЕЛЕНО"
	КонецЕсли; 
	
	ЗапросОшибкиПодчиненныхВеток.Текст = СтрЗаменить(ЗапросОшибкиПодчиненныхВеток.Текст, "%УсловиеСоединения%", УсловиеСоединения);
	
	НавигационнаяСсылкаНаОшибку = ПолучитьНавигационнуюСсылку(СсылкаНаОшибку);
	ВыгрузкаОшибкиПодчиненныхВеток = ЗапросОшибкиПодчиненныхВеток.Выполнить().Выгрузить();
	Для Каждого СтрокаОшибкиПодчиненныхВеток Из ВыгрузкаОшибкиПодчиненныхВеток Цикл
		
		Попытка
			
			ОшибкаОбъект = СтрокаОшибкиПодчиненныхВеток.Ссылка.ПолучитьОбъект();
			
			СтрокиНаУдаление = Новый Массив;
			Для Каждого СтрокаСпискаОбъектов Из ОшибкаОбъект.СписокОбъектов Цикл
				
				ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаСпискаОбъектов);
				
				Если ВыгрузкаСпискаОбъектов.НайтиСтроки(ОтборСтрок).Количество() > 0 Тогда
					СтрокиНаУдаление.Добавить(СтрокаСпискаОбъектов);
				КонецЕсли;
				
			КонецЦикла; 
			
			Если СтрокиНаУдаление.Количество() = ОшибкаОбъект.СписокОбъектов.Количество() Тогда
				
				// не признание ошибки
				ОшибкаОбъект.Статус            = Перечисления.СтатусыОшибок.НеПризнана;
				ОшибкаОбъект.НеПризнана        = Истина;
				ОшибкаОбъект.Признана          = Ложь;
				ОшибкаОбъект.ДобавитьЗаписьВПротокол(Пользователи.ТекущийПользователь(), "");
				
				// отзыв ошибки
				ОшибкаОбъект.ПовторяемаяОшибка = СсылкаНаОшибку;
				ОшибкаОбъект.Статус            = Перечисления.СтатусыОшибок.Отозвана;
				Комментарий = СтрШаблон(НСтр("ru = 'Ошибка отозвана т.к. найдена аналогичная ошибка в ветке приемнике:
				                             |%1'"), НавигационнаяСсылкаНаОшибку);
				ОшибкаОбъект.ДобавитьЗаписьВПротокол(Пользователи.ТекущийПользователь(), Комментарий);
				
			Иначе
				
				Для Каждого СтрокаНаУдаление Из СтрокиНаУдаление Цикл
					ОшибкаОбъект.СписокОбъектов.Удалить(СтрокаНаУдаление);
				КонецЦикла; 
				
				Комментарий = СтрШаблон(НСтр("ru = 'Часть строк ""списка объектов"" была удалена т.к. найдена аналогичная ошибка в ветке приемнике:
				                             |%1'"), НавигационнаяСсылкаНаОшибку);
				ОшибкаОбъект.ДобавитьЗаписьВПротокол(Пользователи.ТекущийПользователь(), Комментарий);
				
			КонецЕсли; 
			
			ОшибкаОбъект.Записать()
		
		Исключение
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Отзыв ошибки подчиненной ветки'"), 
			                         УровеньЖурналаРегистрации.Ошибка,,, 
			                         ПодробноеПредставлениеОшибки);
		КонецПопытки;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПроектТестированияПоАдресуСервера(АдресСервера)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|ГДЕ
		|	Проекты.АдресGitСервера ПОДОБНО &АдресСервера";
	
	Запрос.УстановитьПараметр("АдресСервера", АдресСервера);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

Функция ЗапускТестирования(ИдентификаторЗапуска, Проект)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗапускТестирования.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗапускТестирования КАК ЗапускТестирования
		|ГДЕ
		|	ЗапускТестирования.Pipeline_ID = &Pipeline_ID
		|	И ЗапускТестирования.Проект = &Проект
		|	И НЕ ЗапускТестирования.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Pipeline_ID", ИдентификаторЗапуска);
	Запрос.УстановитьПараметр("Проект", Проект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РеквизитыПроектов(Проекты)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.Ссылка КАК Проект,
	|	Проекты.Ссылка.Ответственный КАК ОтветственныйЗаПроект,
	|	Проекты.ВариантНаправленияОшибокНаЗакрытие КАК КомуНаправлять,
	|	Проекты.ЗакрывающийОшибки КАК ЗакрывающийОшибки,
	|	Проекты.АвтоматическиИсправлятьОшибкиВВетках КАК АвтоматическиИсправлятьОшибкиВВетках
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка В(&СписокПроектов)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПроектов", Проекты);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОтметитьИсправлениеВВетках(ОшибкаОбъект)
	
	Для Каждого СтрокаТЧ из ОшибкаОбъект.ИсправлениеВВетках Цикл
		Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
			СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена;
			СтрокаТЧ.ДатаИсправления = ОшибкаОбъект.ДатаИсправления;
			СтрокаТЧ.ВеткаИсправления = СтрокаТЧ.Ветка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУстановитьИсправлениеПоВеткеВерсииИсправления(ОшибкаОбъект, ВеткиВерсий, ОтмечатьИсправление)
	
	Если ЗначениеЗаполнено(ОшибкаОбъект.ВерсияИсправления) Тогда
		
		Ветка = ВеткиВерсий.Получить(ОшибкаОбъект.ВерсияИсправления);
		
		Если ЗначениеЗаполнено(Ветка) Тогда
			
			СтруктураОтбора = Новый Структура("Ветка", Ветка);
			
			СтрокиТЧ = ОшибкаОбъект.ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиТЧ.Количество()>0 Тогда
				СтрокаВетки = СтрокиТЧ[0];
			Иначе
				СтрокаВетки = ОшибкаОбъект.ИсправлениеВВетках.Добавить();
				СтрокаВетки.Ветка = Ветка;
			КонецЕсли;
			
			НужноОтметитьИсправление = ОтмечатьИсправление ИЛИ ОшибкаОбъект.Исправлена;
			
			Если НужноОтметитьИсправление Тогда
				
				Если СтрокаВетки.СостояниеИсправления <> Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
					СтрокаВетки.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена;
				КонецЕсли;
				
				Если ОшибкаОбъект.ДатаИсправления <> СтрокаВетки.ДатаИсправления Тогда
					СтрокаВетки.ДатаИсправления = ОшибкаОбъект.ДатаИсправления;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаВетки.ВеткаИсправления) Тогда
					СтрокаВетки.ВеткаИсправления = СтрокаВетки.Ветка;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция АвтоматическиИсправлятьОшибкиВВетках(Проект, РеквизитыПроектов)
	
	ИсправлятьАвтоматически = Ложь;
	
	СтрокаПроекта = РеквизитыПроектов.Найти(Проект, "Проект");
	
	Если СтрокаПроекта <> Неопределено Тогда
		ИсправлятьАвтоматически = СтрокаПроекта.АвтоматическиИсправлятьОшибкиВВетках;
	КонецЕсли;
	
	Возврат ИсправлятьАвтоматически;
	
КонецФункции

Функция ВерсииИСборкиИсправленияОшибки(ОшибкаОбъект)
		
	КвалификаторыДаты = Новый Квалификаторыдаты(ЧастиДаты.ДатаВремя);
	
	ВеткиДляИсправления = Новый ТаблицаЗначений;
	ВеткиДляИсправления.Колонки.Добавить("Ветка", Новый ОписаниеТипов("СправочникСсылка.Ветки"));
	ВеткиДляИсправления.Колонки.Добавить("ВеткаИсправления", Новый ОписаниеТипов("СправочникСсылка.Ветки"));
	ВеткиДляИсправления.Колонки.Добавить("ДатаОбнаружения", Новый ОписаниеТипов("Дата",,,,,КвалификаторыДаты));
	ВеткиДляИсправления.Колонки.Добавить("ДатаИсправления", Новый ОписаниеТипов("Дата",,,,,КвалификаторыДаты));
	
	Если ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		ДатаОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаОбъект.СборкаОбнаружения, "ДатаСборки");
	Иначе
		ДатаОбнаружения = ОшибкаОбъект.ДатаОбнаружения;
	КонецЕсли;
	
	Если ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		
		Для Каждого СтрокаТЧ из ОшибкаОбъект.ИсправлениеВВетках Цикл
			
			Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
				
				СтрокаТаблицы = ВеткиДляИсправления.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТЧ);
				
				Если ЗначениеЗаполнено(СтрокаТЧ.ДатаПривнесения) Тогда
					СтрокаТаблицы.ДатаОбнаружения = СтрокаТЧ.ДатаПривнесения;
				Иначе
					СтрокаТаблицы.ДатаОбнаружения = ДатаОбнаружения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ОшибкаОбъект.Исправлена И ЗначениеЗаполнено(ОшибкаОбъект.ВеткаИсправления) Тогда
			
			Если ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
				
				Если ОшибкаОбъект.Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
					
					ДанныеВеткиОбнаружения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОшибкаОбъект.ВеткаОбнаружения, "Тип,Приемник");
					
					Если ДанныеВеткиОбнаружения.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта
						ИЛИ ДанныеВеткиОбнаружения.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
						ВеткаОбнаружения = ДанныеВеткиОбнаружения.Приемник;
					Иначе
						ВеткаОбнаружения = ОшибкаОбъект.ВеткаОбнаружения;
					КонецЕсли;
				Иначе
					ВеткаОбнаружения = Справочники.Ошибки.ВеткаПоСборке(ОшибкаОбъект.СборкаОбнаружения);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
					СтрокаТаблицы = ВеткиДляИсправления.Добавить();
					СтрокаТаблицы.Ветка = ВеткаОбнаружения;
					СтрокаТаблицы.ВеткаИсправления = ОшибкаОбъект.ВеткаИсправления;
					СтрокаТаблицы.ДатаИсправления = ОшибкаОбъект.ДатаИсправления;
					СтрокаТаблицы.ДатаОбнаружения = ДатаОбнаружения;
				КонецЕсли;
				
			ИначеЕсли ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
				
				ОсновнаяВетка = ОсновнаяВеткаПроекта(ОшибкаОбъект.Владелец);
				
				Если ЗначениеЗаполнено(ОсновнаяВетка) Тогда
					СтрокаТаблицы = ВеткиДляИсправления.Добавить();
					СтрокаТаблицы.Ветка = ОсновнаяВетка;
					СтрокаТаблицы.ВеткаИсправления = ОшибкаОбъект.ВеткаИсправления;
					СтрокаТаблицы.ДатаИсправления = ОшибкаОбъект.ДатаИсправления;
					СтрокаТаблицы.ДатаОбнаружения = ДатаОбнаружения;
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВеткиДляИсправления.Ветка КАК Ветка,
	|	ВеткиДляИсправления.ВеткаИсправления КАК ВеткаИсправления,
	|	ВеткиДляИсправления.ДатаИсправления КАК ДатаИсправления,
	|	ВеткиДляИсправления.ДатаОбнаружения КАК ДатаОбнаружения
	|ПОМЕСТИТЬ ВТВеткиПоОшибке
	|ИЗ
	|	&ВеткиДляИсправления КАК ВеткиДляИсправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВеткиДляИсправления.Ветка КАК Ветка,
	|	ВЫБОР
	|		КОГДА ВеткиДляИсправления.Ветка = ВеткиДляИсправления.ВеткаИсправления
	|			ТОГДА ВеткиДляИсправления.ДатаИсправления
	|		КОГДА Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена)
	|			ТОГДА ЕСТЬNULL(Ветки.ДатаПомещения, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаИсправления,
	|	ВеткиКонечные.Тип КАК ТипВетки,
	|	ВеткиДляИсправления.ДатаОбнаружения КАК ДатаОбнаружения
	|ПОМЕСТИТЬ ВТВеткиДляИсправления
	|ИЗ
	|	ВТВеткиПоОшибке КАК ВеткиДляИсправления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	|		ПО ВеткиДляИсправления.ВеткаИсправления = Ветки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ветки КАК ВеткиКонечные
	|		ПО ВеткиДляИсправления.Ветка = ВеткиКонечные.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сборки.Владелец КАК Версия,
	|	Сборки.Владелец.ПорядковыйНомер КАК ПорядковыйНомерВерсии,
	|	Сборки.Владелец.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	Сборки.Ссылка КАК Сборка,
	|	Сборки.ДатаСборки КАК ДатаСборки,
	|	Сборки.Опубликована КАК Опубликована,
	|	Сборки.ДатаПубликации КАК ДатаПубликации,
	|	Сборки.Ветка КАК Ветка,
	|	Ветки.Тип КАК ТипВетки,
	|	МИНИМУМ(ВеткиДляИсправления.ДатаОбнаружения) КАК ДатаОбнаружения,
	|	МИНИМУМ(ВеткиДляИсправления.ДатаИсправления) КАК ДатаИсправления
	|ПОМЕСТИТЬ ВТСборки
	|ИЗ
	|	Справочник.СборкиВерсии КАК Сборки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	|		ПО Сборки.Ветка = Ветки.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВеткиДляИсправления КАК ВеткиДляИсправления
	|		ПО (Сборки.Ветка = ВеткиДляИсправления.Ветка
	|					И Сборки.ДатаСборки >= ВеткиДляИсправления.ДатаИсправления
	|					И ВеткиДляИсправления.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВеткиДляИсправления.ТипВетки = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|					И Ветки.Источник = ВеткиДляИсправления.Ветка
	|					И Ветки.ДатаСоздания > ВеткиДляИсправления.ДатаИсправления
	|					И ВеткиДляИсправления.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|					И Сборки.ДатаСборки >= ВеткиДляИсправления.ДатаИсправления)
	|ГДЕ
	|	НЕ Сборки.ПометкаУдаления
	|	И НЕ Сборки.Владелец.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Сборки.Владелец,
	|	Сборки.Владелец.ПорядковыйНомер,
	|	Сборки.Владелец.ДатаПредстоящейСборки,
	|	Сборки.Ссылка,
	|	Сборки.ДатаСборки,
	|	Сборки.Опубликована,
	|	Сборки.ДатаПубликации,
	|	Сборки.Ветка,
	|	Ветки.Тип
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сборки.Версия КАК Версия,
	|	Сборки.ПорядковыйНомерВерсии КАК ПорядковыйНомерВерсии,
	|	Сборки.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	Сборки.ДатаИсправления КАК ДатаИсправления,
	|	Сборки.ДатаОбнаружения КАК ДатаОбнаружения
	|ПОМЕСТИТЬ ВТВерсииИДатыОсновнойВетки
	|ИЗ
	|	ВТСборки КАК Сборки
	|ГДЕ
	|	Сборки.ТипВетки = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(ВерсииИДатыОсновнойВетки.ПорядковыйНомерВерсии) КАК ПорядковыйНомерВерсии
	|ПОМЕСТИТЬ ВТПорядковыеНомераВерсийОсновнойВетки
	|ИЗ
	|	ВТВерсииИДатыОсновнойВетки КАК ВерсииИДатыОсновнойВетки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииИДатыОсновнойВетки.Версия КАК Версия,
	|	ВерсииИДатыОсновнойВетки.ПорядковыйНомерВерсии КАК ПорядковыйНомерВерсии,
	|	ВерсииИДатыОсновнойВетки.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	ВерсииИДатыОсновнойВетки.ДатаИсправления КАК ДатаИсправления,
	|	ВерсииИДатыОсновнойВетки.ДатаОбнаружения КАК ДатаОбнаружения
	|ПОМЕСТИТЬ ВТВерсииОсновнойВетки
	|ИЗ
	|	ВТВерсииИДатыОсновнойВетки КАК ВерсииИДатыОсновнойВетки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядковыеНомераВерсийОсновнойВетки КАК ПорядковыеНомераВерсийОсновнойВетки
	|		ПО ВерсииИДатыОсновнойВетки.ПорядковыйНомерВерсии = ПорядковыеНомераВерсийОсновнойВетки.ПорядковыйНомерВерсии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сборки.Версия КАК Версия,
	|	Сборки.ПорядковыйНомерВерсии КАК ПорядковыйНомерВерсии,
	|	Сборки.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	Сборки.ДатаИсправления КАК ДатаИсправления,
	|	Сборки.ДатаОбнаружения КАК ДатаОбнаружения
	|ПОМЕСТИТЬ ВТВерсии
	|ИЗ
	|	ВТСборки КАК Сборки
	|ГДЕ
	|	Сборки.ТипВетки <> ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВерсииОсновнойВетки.Версия,
	|	ВерсииОсновнойВетки.ПорядковыйНомерВерсии,
	|	ВерсииОсновнойВетки.ДатаПредстоящейСборки,
	|	ВерсииОсновнойВетки.ДатаИсправления,
	|	ВерсииОсновнойВетки.ДатаОбнаружения
	|ИЗ
	|	ВТВерсииОсновнойВетки КАК ВерсииОсновнойВетки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Версии.Версия КАК Версия,
	|	Версии.ПорядковыйНомерВерсии КАК ПорядковыйНомерВерсии,
	|	Версии.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	МИНИМУМ(Сборки.ДатаСборки) КАК ДатаСборки,
	|	МИНИМУМ(ПубликуемыеСборки.ДатаСборки) КАК ДатаПубликуемойСборки
	|ПОМЕСТИТЬ ВТВерсииИДатыСборок
	|ИЗ
	|	ВТВерсии КАК Версии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСборки КАК Сборки
	|		ПО Версии.Версия = Сборки.Версия
	|			И (Сборки.ДатаСборки > Версии.ДатаИсправления)
	|			И (Версии.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСборки КАК ПубликуемыеСборки
	|		ПО Версии.Версия = ПубликуемыеСборки.Версия
	|			И (ПубликуемыеСборки.ДатаСборки > Версии.ДатаИсправления)
	|			И (Версии.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1))
	|			И (ПубликуемыеСборки.Опубликована)
	|
	|СГРУППИРОВАТЬ ПО
	|	Версии.Версия,
	|	Версии.ПорядковыйНомерВерсии,
	|	Версии.ДатаПредстоящейСборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииИДатыСборок.Версия КАК Версия,
	|	ВерсииИДатыСборок.ПорядковыйНомерВерсии КАК ПорядковыйНомерВерсии,
	|	ВерсииИДатыСборок.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	МИНИМУМ(Сборки.Сборка) КАК Сборка,
	|	МИНИМУМ(ПубликуемыеСборки.Сборка) КАК ПубликуемаяСборка
	|ПОМЕСТИТЬ ВТВерсииИСборки
	|ИЗ
	|	ВТВерсииИДатыСборок КАК ВерсииИДатыСборок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСборки КАК Сборки
	|		ПО ВерсииИДатыСборок.Версия = Сборки.Версия
	|			И ВерсииИДатыСборок.ДатаСборки = Сборки.ДатаСборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСборки КАК ПубликуемыеСборки
	|		ПО ВерсииИДатыСборок.Версия = ПубликуемыеСборки.Версия
	|			И ВерсииИДатыСборок.ДатаПубликуемойСборки = ПубликуемыеСборки.ДатаСборки
	|			И (ПубликуемыеСборки.Опубликована)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииИДатыСборок.Версия,
	|	ВерсииИДатыСборок.ПорядковыйНомерВерсии,
	|	ВерсииИДатыСборок.ДатаПредстоящейСборки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииИСборки.Версия КАК Версия,
	|	ВерсииИСборки.ПорядковыйНомерВерсии КАК ПорядковыйНомерВерсии,
	|	ВерсииИСборки.ДатаПредстоящейСборки КАК ДатаПредстоящейСборки,
	|	Сборки.Сборка КАК Сборка,
	|	ПубликуемыеСборки.Сборка КАК ПубликуемаяСборка,
	|	Сборки.ДатаОбнаружения КАК ДатаОбнаружения,
	|	Сборки.ДатаСборки КАК ДатаСборки,
	|	ПубликуемыеСборки.ДатаСборки КАК ДатаПубликуемойСборки,
	|	ПубликуемыеСборки.ДатаПубликации КАК ДатаПубликацииСборки
	|ИЗ
	|	ВТВерсииИСборки КАК ВерсииИСборки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСборки КАК Сборки
	|		ПО ВерсииИСборки.Сборка = Сборки.Сборка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСборки КАК ПубликуемыеСборки
	|		ПО ВерсииИСборки.ПубликуемаяСборка = ПубликуемыеСборки.Сборка
	|ГДЕ
	|	(НЕ Сборки.Сборка ЕСТЬ NULL
	|			ИЛИ ВерсииИСборки.ДатаПредстоящейСборки >= &ТекущаяДата)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомерВерсии"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВеткиДляИсправления", ВеткиДляИсправления);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВывестиИнформациюОбИсправленииВВерсиях(ВерсииИсборкиИсправления, ТекстовыйДокумент, Макет)
	
	ВывестиЗаголовокРаздела(ТекстовыйДокумент, НСтр("ru='Исправление по версиям'"));
	ДобавитьАбзац(ТекстовыйДокумент);
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("РазмерШрифта", 2);
	
	ТекстовыйДокумент.ДобавитьСтроку("<TABLE border=1><TBODY><TR>");
	
	Для Каждого СтрокаТаблицы из ВерсииИсборкиИсправления Цикл
			
		ТекстовыйДокумент.ДобавитьСтроку("<TR>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD vAlign=top width=250>");
		
		ВывестиПоле(ТекстовыйДокумент, Макет, СтрокаТаблицы.Версия, "", Истина,, ПараметрыТекста);
		
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		
		ТекстовыйДокумент.ДобавитьСтроку("<TD vAlign=top>");
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Сборка) И СтрокаТаблицы.ДатаСборки <= ТекущаяДата() Тогда
			ИнформацияОСборке = НСтр("ru='Включено в сборку %ПредставлениеСборки%'");
			ПредставлениеСборки = Строка(СтрокаТаблицы.Сборка) + НСтр("ru=' от '") + Формат(СтрокаТаблицы.ДатаСборки, "ДФ='dd.MM.yyyy'");
		ИначеЕсли СтрокаТаблицы.ДатаПредстоящейСборки >= ТекущаяДата() Тогда 
			ИнформацияОСборке = НСтр("ru='Планируется включить в сборку %ПредставлениеСборки%'");
			ПредставлениеСборки = НСтр("ru=' от '") + Формат(СтрокаТаблицы.ДатаПредстоящейСборки, "ДФ='dd.MM.yyyy'");
		Иначе
			ИнформацияОСборке = "";
			ПредставлениеСборки = "";
		КонецЕсли;
		
		ИнформацияОСборке = СтрЗаменить(ИнформацияОСборке, "%ПредставлениеСборки%", ПредставлениеСборки);
		
		ВывестиПоле(ТекстовыйДокумент, Макет, ИнформацияОСборке, "", Истина,, ПараметрыТекста);
		
		// Вывод информации о публикации исправления
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПубликуемаяСборка) Тогда
			
			ИнформацияОПубликуемойСборке = НСтр("ru='Опубликовано %ДатаПубликации% в сборке %ПредставлениеСборки%'");
			
			ДатаПубликации = СтрокаТаблицы.ДатаПубликацииСборки;
			
			Если ЗначениеЗаполнено(ДатаПубликации) Тогда
				ИнформацияОПубликуемойСборке = СтрЗаменить(ИнформацияОПубликуемойСборке, "%ДатаПубликации%", " " + Формат(ДатаПубликации, "ДФ='dd.MM.yyyy'"));
			Иначе
				ИнформацияОПубликуемойСборке = СтрЗаменить(ИнформацияОПубликуемойСборке, "%ДатаПубликации%", "");
			КонецЕсли;
			
			ПредставлениеПубликуемойСборки = Строка(СтрокаТаблицы.ПубликуемаяСборка);
			ИнформацияОПубликуемойСборке = СтрЗаменить(ИнформацияОПубликуемойСборке, "%ПредставлениеСборки%", ПредставлениеПубликуемойСборки);
			
			ВывестиПоле(ТекстовыйДокумент, Макет, ИнформацияОПубликуемойСборке, "", Истина,, ПараметрыТекста);
			
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку("</TD>");
		ТекстовыйДокумент.ДобавитьСтроку("</TR>");
		
	КонецЦикла;
	
	ТекстовыйДокумент.ДобавитьСтроку("</TR></TBODY></TABLE>");
	
	ДобавитьАбзац(ТекстовыйДокумент);
	
КонецПроцедуры

Процедура ВывестиПовторяемуюОшибку(ПовторяемаяОшибка, ТекстовыйДокумент, Макет, ПараметрыТекста)
	
	Если ТипЗнч(ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки") Тогда
		Заголовок = НСтр("ru='Повторяемая ошибка: '");
		ВывестиГиперссылку(ТекстовыйДокумент, "#ПовторяемаяОшибка#", ПовторяемаяОшибка,
		                   Заголовок, ПараметрыТекста);
	Иначе
		Заголовок = НСтр("ru='Повторяемая ошибка:'");
		ВывестиПоле(ТекстовыйДокумент, Макет, ПовторяемаяОшибка, Заголовок, Истина,, ПараметрыТекста);
	КонецЕсли;
		
КонецПроцедуры

Процедура ВывестиИсходнуюИнформацию(ИсходнаяИнформацияУказана, ТекстовыйДокумент)
	
	Если ИсходнаяИнформацияУказана Тогда
		ВывестиГиперссылку(ТекстовыйДокумент, "#ИсходнаяИнформация#", НСтр("ru='Исходная информация об ошибке'"));
		ДобавитьАбзац(ТекстовыйДокумент);
	Иначе
		ВывестиГиперссылку(ТекстовыйДокумент, "#ИсходнаяИнформация#", НСтр("ru='Исходная информация об ошибке (не указана)'"));
		ДобавитьАбзац(ТекстовыйДокумент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиКодОбращения(КодОбращения, ТекстовыйДокумент, Макет)
	
	Заголовок = НСтр("ru='Код обращения:'");
	ВывестиПоле(ТекстовыйДокумент, Макет, СОКРЛП(КодОбращения), Заголовок, Истина);
		
КонецПроцедуры

Процедура ВывестиСтатусПубликации(СтатусПубликации, ТекстовыйДокумент, Макет, ПараметрыТекста)
	
	Если ЗначениеЗаполнено(СтатусПубликации) Тогда
		ВывестиПоле(ТекстовыйДокумент, Макет, СтатусПубликации, "", Истина,, ПараметрыТекста);
	Иначе
		ТекстПоля = НСтр("ru='Статус публикации не определен'");
		ВывестиПоле(ТекстовыйДокумент, Макет, ТекстПоля, "", Истина,, ПараметрыТекста);
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьСостояниеИсправленияВВетках(ОшибкаОбъект)
	
	ВеткиДляИсправления = ВеткиДляИсправленияОшибки(ОшибкаОбъект.Владелец,
	                                                ОшибкаОбъект.ВерсияИсправления,
													ОшибкаОбъект.Обнаружена,
													ОшибкаОбъект.СборкаОбнаружения,
													ОшибкаОбъект.ВеткаОбнаружения,
													ОшибкаОбъект.ДатаОбнаружения);
	
	Для Каждого СтрокаТЧ из ОшибкаОбъект.ИсправлениеВВетках Цикл
														
		Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
			ИЛИ СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
			
			ПараметрыОтбора = Новый Структура("Ветка", СтрокаТЧ.Ветка);
			НайденныеВетки = ВеткиДляИсправления.НайтиСтроки(ПараметрыОтбора);
			
			Если НайденныеВетки.Количество()>0 Тогда
				ДанныеВетки = НайденныеВетки[0];
				Если ДанныеВетки.ТипВетки = Перечисления.ТипыВеток.ВеткаВерсии И ДанныеВетки.ВеткаРанееВерсииИсправления Тогда
					СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется;
				Иначе
					СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстовыеСсылкиВГиперссылки(Знач Стр)
	
	МассивСтрок = СтрРазделить(Стр, Символы.ПС);
	Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
		ТекСтр = МассивСтрок[Сч];
		
		Если Найти(ТекСтр, "href=") > 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Поз = Найти(ТекСтр, "https://");
		Если Поз = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПраваяЧасть = Сред(ТекСтр, Поз);
		
		МассивСтрокСсылка = СтрРазделить(ПраваяЧасть, " ");
		Если МассивСтрокСсылка.Количество() = 1 Тогда
			СтрокаСсылки = СокрЛП(ПраваяЧасть);
			МассивСтрок[Сч] = СтрЗаменить(МассивСтрок[Сч], СтрокаСсылки, СформироватьГиперссылку(СтрокаСсылки, СтрокаСсылки));
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
		
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Исправил
	|		И Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта))
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Автор
	|		И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана)
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Ошибки.Рассмотрел = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Рассмотрел
	|		И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта)
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Ошибки.Исправил = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Отозвал
	|		И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта)
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Ошибки.Исправил = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Ошибки.Рассмотрел = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Закрыл
	|		И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта)
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Ошибки.Отозвал = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Ошибки.Исправил = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Ошибки.Рассмотрел = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Рассмотрел
	|		И Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПризнана),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПланируетсяИсправлять),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Зарегистрировал
	|		И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована)
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = Ошибки.Автор
	|		И Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована)
	|ГДЕ
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Справочник.Ошибки";
	
	ЭлементыДляОбработки = Новый Массив;
	
	ВыборкаОбъектовДляОбработки = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Пока ВыборкаОбъектовДляОбработки.Следующий() Цикл
		ЭлементыДляОбработки.Добавить(ВыборкаОбъектовДляОбработки.Ссылка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Пользователи.Подразделение КАК Подразделение,
	|	Ошибки.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) И НЕ Пользователи.Ссылка ЕСТЬ NULL
	|		И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка) КАК ТребуетсяОбработка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|	ПО Пользователи.Ссылка = ВЫБОР
	|			КОГДА Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ПроверенаИсправлена),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Исправлена))
	|				ТОГДА Ошибки.Исправил
	|			КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана) И Ошибки.Рассмотрел = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА Ошибки.Автор
	|			КОГДА Ошибки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПризнана),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Признана),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеПланируетсяИсправлять),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Отозвана))
	|				ТОГДА Ошибки.Рассмотрел
	|			КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Зарегистрирована)
	|				ТОГДА Ошибки.Зарегистрировал
	|			КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.НеЗарегистрирована)
	|				ТОГДА Ошибки.Автор
	|			КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта) И Ошибки.Исправил <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА Ошибки.Исправил
	|			КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта) И Ошибки.Рассмотрел <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА Ошибки.Рассмотрел
	|			КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта) И Ошибки.Отозвал <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА Ошибки.Отозвал
	|			КОГДА Ошибки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОшибок.Закрыта) И Ошибки.Закрыл <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА Ошибки.Закрыл
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КОНЕЦ
	|ГДЕ
	|	Ошибки.Ссылка В(&ЭлементыДляОбработки)";
	
	Запрос.УстановитьПараметр("ЭлементыДляОбработки", ЭлементыДляОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ТребуетсяОбработка Тогда
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
		КонецЕсли;
		
		Попытка
			
			НачатьТранзакцию();
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОтменитьТранзакцию();
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
				
				СправочникОбъект.Подразделение = Выборка.Подразделение;
				
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось заполнить ответственное подразделение для ошибки %1 по причине: %2'"),
				Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта,
				Выборка.Ссылка,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = 
		Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли