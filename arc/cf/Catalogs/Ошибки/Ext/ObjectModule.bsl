#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет добавление новой записи в протокол по ошибке
//
// Параметры:
//  АвторИзменений - тип- СправочникСсылка.Пользователи. Пользователь, являющийся автором изменений
//  Комментарий - тип - Строка. Строка комментария, добавляемая в протокол
//
Процедура ДобавитьЗаписьВПротокол(АвторИзменений, Комментарий) Экспорт
	
	ДатаДляПротокола = ТекущаяДата();
	
	НоваяСтрока = Протокол.Вставить(0);
	НоваяСтрока.Автор = АвторИзменений;
	НоваяСтрока.Дата = ДатаДляПротокола;
	НоваяСтрока.Комментарий = Комментарий;
	НоваяСтрока.КомуНаправлена = КомуНаправлена;
	НоваяСтрока.Статус = Статус;
	
	Если ЗначениеЗаполнено(КомуНаправлена) Тогда
		ДатаНаправления = ДатаДляПротокола;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет возвращение ошибки в статус, предшествующий текущему статусу ошибки
//
Процедура ВернутьВПредыдущийСтатус() Экспорт
	
	Если Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована Тогда
		Возврат;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
		
		Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована;
		ДатаРегистрации = '00010101';
		Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
		Зарегистрирована = Ложь;
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПризнана ИЛИ Статус = Перечисления.СтатусыОшибок.Признана Тогда
		
		Статус = Перечисления.СтатусыОшибок.Зарегистрирована;
		ДатаРассмотрения = '00010101';
		Рассмотрел = Справочники.Пользователи.ПустаяСсылка();
		Признана = Ложь;
		НеПризнана = Ложь;
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
		
		Статус = Перечисления.СтатусыОшибок.Признана;
		ДатаИсправления = '00010101';
		Исправил = Справочники.Пользователи.ПустаяСсылка();
		Исправлена = Ложь;
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена Тогда
		
		Статус = Перечисления.СтатусыОшибок.Исправлена;
		ДатаПроверки = '00010101';
		Проверил = Справочники.Пользователи.ПустаяСсылка();
		Проверена = Ложь;
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять Тогда
		
		Статус = Перечисления.СтатусыОшибок.Признана;
		ДатаНеПланируетсяИсправлять = '00010101';
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетсяИсправлять = Ложь;
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда
		
		Статус = Перечисления.СтатусыОшибок.Признана;
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		ОжидаетИсправленияПовторяемой = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если Не ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
		
	ДатаСоздания = ТекущаяДата();
	Автор = Пользователи.ТекущийПользователь();
	Владелец = Проекты.ПроектПоУмолчанию();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Ошибки") Тогда
		
		Основание = ДанныеЗаполнения;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ПовторяющаяОшибка") Тогда
			ЗаполнитьДанныеИзПовторяющейОшибки(ДанныеЗаполнения.ПовторяющаяОшибка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ТехническийПроект")
			И ТипЗнч(ДанныеЗаполнения.ТехническийПроект) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			// Регистрация ошибки, обнаруженной при разработке или тестировании технического проекта
			
			ТехническийПроект = ДанныеЗаполнения.ТехническийПроект;
			
			СтрокаРеквизитов = "Версия, Ветка, Владелец, Ответственный,
			|РазделПроекта, ИзмененияПомещеныВХранилищеВерсии, ДатаПомещенияИзмененийВХранилищеВерсии";
			РеквизитыТехническогоПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТехническийПроект, СтрокаРеквизитов);
			
			Владелец = РеквизитыТехническогоПроекта.Владелец;
			
			УказыватьВОшибкахРазделПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "УказыватьВОшибкахРазделПроекта");
			
			Если УказыватьВОшибкахРазделПроекта Тогда
				
				РазделПроекта = РеквизитыТехническогоПроекта.РазделПроекта;
				
				Если ЗначениеЗаполнено(РазделПроекта) Тогда
					ОтветственныйЗаРаздел = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РазделПроекта, "Ответственный");
				КонецЕсли;
				
			КонецЕсли;
			
			СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке;
			
			Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке;
			ВеткаОбнаружения = РеквизитыТехническогоПроекта.Ветка;
			ДатаОбнаружения = ТекущаяДата();
			Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения;
			
			Если ЗначениеЗаполнено(РеквизитыТехническогоПроекта.Версия) Тогда
				ВерсияИсправления = РеквизитыТехническогоПроекта.Версия;
			Иначе
				
				ДанныеОбнаружения = Новый Структура;
				ДанныеОбнаружения.Вставить("Обнаружена", Обнаружена);
				ДанныеОбнаружения.Вставить("ВеткаОбнаружения", ВеткаОбнаружения);
				ДанныеОбнаружения.Вставить("СборкаОбнаружения", Справочники.СборкиВерсии.ПустаяСсылка());
				ДанныеОбнаружения.Вставить("ДатаОбнаружения", ДатаОбнаружения);
	
				ВерсияИсправления = Справочники.Ошибки.ВерсияИсправления(Владелец,
				                      ДанныеОбнаружения,
									  СрочностьИсправления,
									  ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
									  Исправляется);
			КонецЕсли;
			
			КомуНаправлена = РеквизитыТехническогоПроекта.Ответственный;
			
			// Если настроено замещение, то подставляется замещающий
			Если ЗначениеЗаполнено(КомуНаправлена) Тогда
				Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(КомуНаправлена, Владелец, "", Ложь);
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("МетодВыявленияОшибки") Тогда
				МетодВыявленияОшибки = ДанныеЗаполнения.МетодВыявленияОшибки;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ОбъектыМетаданных") Тогда
				ТипПроблемы = Перечисления.ТипПроблемы.ОбъектыМетаданных;
				Для Каждого ЭлементМассива Из ДанныеЗаполнения.ОбъектыМетаданных Цикл
					НоваяСтрока = СписокОбъектов.Добавить();
					НоваяСтрока.ПроблемныйОбъект = ЭлементМассива;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВеткаОбнаружения")
			И ТипЗнч(ДанныеЗаполнения.ВеткаОбнаружения) = Тип("СправочникСсылка.Ветки") Тогда
			// Регистрация ошибки, обнаруженной в ветке
			
			Ветка = ДанныеЗаполнения.ВеткаОбнаружения;
			
			СтрокаРеквизитов = "Владелец, Ответственный, Тип";
			РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ветка, СтрокаРеквизитов);
			Владелец = РеквизитыВетки.Владелец;
			СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке;
			Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке;
			ВеткаОбнаружения = Ветка;
			ДатаОбнаружения = ТекущаяДата();
			
			ДанныеОбнаружения = Новый Структура;
			ДанныеОбнаружения.Вставить("Обнаружена", Обнаружена);
			ДанныеОбнаружения.Вставить("ВеткаОбнаружения", ВеткаОбнаружения);
			ДанныеОбнаружения.Вставить("СборкаОбнаружения", Справочники.СборкиВерсии.ПустаяСсылка());
			ДанныеОбнаружения.Вставить("ДатаОбнаружения", ДатаОбнаружения);
	
			ВерсияИсправления = Справочники.Ошибки.ВерсияИсправления(Владелец,
				                 ДанныеОбнаружения,
								 СрочностьИсправления,
								 ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
								 Исправляется);
								 
			Исправляется = Справочники.Ошибки.ВариантИсправления(ВеткаОбнаружения, МетодВыявленияОшибки, ВерсияИсправления);
						  
			КомуНаправлена = РеквизитыВетки.Ответственный;
			
			Если РеквизитыВетки.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
				СписокТехническихПроектов = Справочники.Ветки.ТехническиеПроектыИспользующиеВетку(Ветка);
				Если СписокТехническихПроектов.Количество()=1 Тогда
					СтрокаРеквизитов = "РазделПроекта, Ответственный";
					РеквизитыТехническогоПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СписокТехническихПроектов[0], СтрокаРеквизитов);
					
					Если ЗначениеЗаполнено(РеквизитыТехническогоПроекта.РазделПроекта) Тогда
						РазделПроекта = РеквизитыТехническогоПроекта.РазделПроекта;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			// Если настроено замещение, то подставляется замещающий
			Если ЗначениеЗаполнено(КомуНаправлена) Тогда
				Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(КомуНаправлена, Владелец, "", Ложь);
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("МетодВыявленияОшибки") Тогда
				МетодВыявленияОшибки = ДанныеЗаполнения.МетодВыявленияОшибки;
			КонецЕсли;
			
			Если ДанныеЗаполнения.Свойство("ОбъектыМетаданных") Тогда
				ТипПроблемы = Перечисления.ТипПроблемы.ОбъектыМетаданных;
				Для Каждого ЭлементМассива Из ДанныеЗаполнения.ОбъектыМетаданных Цикл
					НоваяСтрока = СписокОбъектов.Добавить();
					НоваяСтрока.ПроблемныйОбъект = ЭлементМассива;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Ошибка")
			И ТипЗнч(ДанныеЗаполнения.Ошибка) = Тип("СправочникСсылка.Ошибки") Тогда
			
			Основание = ДанныеЗаполнения.Ошибка;
			
			ЗапрашиваемыеРеквизиты = Новый Структура;
			ЗапрашиваемыеРеквизиты.Вставить("Владелец", "Владелец");
			ЗапрашиваемыеРеквизиты.Вставить("УказыватьВОшибкахРазделПроекта", "Владелец.УказыватьВОшибкахРазделПроекта");
			ЗапрашиваемыеРеквизиты.Вставить("РазделПроекта", "РазделПроекта");
			ЗапрашиваемыеРеквизиты.Вставить("УказыватьВОшибкахМестоИсправления", "Владелец.УказыватьВОшибкахМестоИсправления");
			ЗапрашиваемыеРеквизиты.Вставить("ТипПроблемы", "ТипПроблемы");
			ЗапрашиваемыеРеквизиты.Вставить("ВидПроблемы", "ВидПроблемы");
			ЗапрашиваемыеРеквизиты.Вставить("ОтветственныйЗаРаздел", "РазделПроекта.Ответственный");
			ЗапрашиваемыеРеквизиты.Вставить("КомуНаправлена", "Исправил");
			ЗапрашиваемыеРеквизиты.Вставить("Обнаружена", "Обнаружена");
			ЗапрашиваемыеРеквизиты.Вставить("ВеткаОбнаружения", "ВеткаОбнаружения");
			ЗапрашиваемыеРеквизиты.Вставить("СборкаОбнаружения", "СборкаОбнаружения");
			ЗапрашиваемыеРеквизиты.Вставить("ВерсияИсправления", "ВерсияИсправления");
			
			Ошибка = ДанныеЗаполнения.Ошибка;
			
			РеквизитыОшибки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ошибка, ЗапрашиваемыеРеквизиты);
			
			Владелец = РеквизитыОшибки.Владелец;
			
			ТипПроблемы = РеквизитыОшибки.ТипПроблемы;
			ВидПроблемы = РеквизитыОшибки.ВидПроблемы;
			
			Если РеквизитыОшибки.УказыватьВОшибкахРазделПроекта Тогда
				
				РазделПроекта = РеквизитыОшибки.РазделПроекта;
				ОтветственныйЗаРаздел = РеквизитыОшибки.ОтветственныйЗаРаздел
				
			КонецЕсли;
			
			СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке;
			
			Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке;
			ДатаОбнаружения = ТекущаяДата();
			ВеткаОбнаружения = РеквизитыОшибки.ВеткаОбнаружения;
			СборкаОбнаружения = РеквизитыОшибки.СборкаОбнаружения;
			
			ВерсияИсправления = РеквизитыОшибки.ВерсияИсправления;
			
			Если Не ЗначениеЗаполнено(ВерсияИсправления) Тогда
				
				ДанныеОбнаружения = Новый Структура;
				ДанныеОбнаружения.Вставить("Обнаружена", Обнаружена);
				ДанныеОбнаружения.Вставить("ВеткаОбнаружения", ВеткаОбнаружения);
				ДанныеОбнаружения.Вставить("СборкаОбнаружения", СборкаОбнаружения);
				ДанныеОбнаружения.Вставить("ДатаОбнаружения", ДатаОбнаружения);
	
				ВерсияИсправления = Справочники.Ошибки.ВерсияИсправления(Владелец,
				                        ДанныеОбнаружения,
										СрочностьИсправления,
										ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
										Исправляется);
			КонецЕсли;
			
			КомуНаправлена = РеквизитыОшибки.КомуНаправлена;
			
			// Если настроено замещение, то подставляется замещающий
			Если ЗначениеЗаполнено(КомуНаправлена) Тогда
				Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(КомуНаправлена, Владелец, "", Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("МетодВыявленияОшибки") Тогда
			МетодВыявленияОшибки = ДанныеЗаполнения.МетодВыявленияОшибки;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СписокОбъектов") Тогда
			Для Каждого ЭлементМассива Из ДанныеЗаполнения.СписокОбъектов Цикл
				НоваяСтрока = СписокОбъектов.Добавить();
				НоваяСтрока.ПроблемныйОбъект = ЭлементМассива;
			КонецЦикла;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОбработчикиОбновления") Тогда
			
			Для Каждого СтрМас из ДанныеЗаполнения.ОбработчикиОбновления Цикл
				НоваяСтрока = ОбработчикиОбновления.Добавить();
				НоваяСтрока.ОбработчикОбновления = СтрМас;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПовторяемаяОшибка) Тогда
		ПовторяемаяОшибка = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МетодВыявленияОшибки) Тогда
		МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.РаботаСПрограммой;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипПроблемы) Тогда
		ТипПроблемы = Перечисления.ТипПроблемы.БезДетализации;
	КонецЕсли;
	
	УстановитьСтатусПубликации();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	РеквизитыПроекта = РеквизитыПроекта();
	
	ЗаписаннаяОшибкаНеПризнана = Ложь;
	ПовторяемаяОшибкаИзменена = Ложь;
	ПричиныНепризнанияОчищены = Ложь;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ССылка, "НеПризнана,ПовторяемаяОшибка,ПричиныНепризнания");
		ЗаписаннаяОшибкаНеПризнана = РеквизитыСсылки.НеПризнана;
		ПовторяемаяОшибкаИзменена = РеквизитыСсылки.ПовторяемаяОшибка <> ПовторяемаяОшибка;
		ПричиныНепризнанияОчищены =  ЗначениеЗаполнено(РеквизитыСсылки.ПричиныНепризнания) И НЕ ЗначениеЗаполнено(ПричиныНепризнания);
	КонецЕсли;
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если НЕ Зарегистрирована Тогда
		НепроверяемыеРеквизиты.Добавить("ВерсияПлатформы");
		НепроверяемыеРеквизиты.Добавить("ПорядокВоспроизведения");
		НепроверяемыеРеквизиты.Добавить("СпособОбхода");
		НепроверяемыеРеквизиты.Добавить("СпособИсправления");
	КонецЕсли;
	
	Если НЕ Исправлена Тогда
		НепроверяемыеРеквизиты.Добавить("ОписаниеИзменений");
		НепроверяемыеРеквизиты.Добавить("ДатаИсправления");
		НепроверяемыеРеквизиты.Добавить("ВерсияИсправления");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПовторяемаяОшибка) И ТипЗнч(ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки")
		ИЛИ НЕ НеПризнана ИЛИ ЗаписаннаяОшибкаНеПризнана И НЕ ПовторяемаяОшибкаИзменена И НЕ ПричиныНепризнанияОчищены Тогда
		НепроверяемыеРеквизиты.Добавить("ПричиныНепризнания");
	КонецЕсли;
	
	ОшибкаПодлежитЗакрытию =
		РеквизитыПроекта.ИспользоватьЗакрытиеОшибок
		И (НЕ РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		ИЛИ РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		И ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
	
		Если (Проверена ИЛИ Отозвана) И (НЕ ОшибкаПодлежитЗакрытию) ИЛИ Закрыта ИЛИ НеПланируетсяИсправлять
			ИЛИ ОжидаетИсправленияПовторяемой Тогда
		НепроверяемыеРеквизиты.Добавить("КомуНаправлена");
	КонецЕсли;
	
	Если НЕ Зарегистрирована ИЛИ Отозвана Тогда
		НепроверяемыеРеквизиты.Добавить("СборкаОбнаружения");
		НепроверяемыеРеквизиты.Добавить("ВеткаОбнаружения");
		НепроверяемыеРеквизиты.Добавить("ДатаОбнаружения");
	КонецЕсли;
	
	Если СтатусПубликации <> Перечисления.СтатусыПубликацииОшибок.Публикуется
		ИЛИ (НЕ Признана И НЕ НеПризнана) Тогда
		НепроверяемыеРеквизиты.Добавить("ПубликуемоеОписание");
	КонецЕсли;
	
	Если НЕ ЕстьСпособИсправления Тогда
		НепроверяемыеРеквизиты.Добавить("СпособИсправления");
	КонецЕсли;
	
	Если НЕ ЕстьСпособОбхода Тогда
		НепроверяемыеРеквизиты.Добавить("СпособОбхода");
	КонецЕсли;
	
	Если НЕ РеквизитыПроекта.УказыватьВОшибкахРазделПроекта
		ИЛИ Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована
		ИЛИ (Статус = Перечисления.СтатусыОшибок.Отозвана И НЕ Признана)
		ИЛИ (Статус = Перечисления.СтатусыОшибок.Закрыта И НЕ Признана) Тогда
		НепроверяемыеРеквизиты.Добавить("РазделПроекта");
	КонецЕсли;
	
	Если НЕ РеквизитыПроекта.УказыватьВОшибкахМестоИсправления
		ИЛИ НЕ Исправлена Тогда
		НепроверяемыеРеквизиты.Добавить("ГдеИсправленаОшибка");
	КонецЕсли;
	
	Если НЕ РеквизитыПроекта.УказыватьВОшибкахКтоПривнес
	 ИЛИ НеРасследуетсяПривнесение ИЛИ Не Исправлена
	 ИЛИ Справочники.ВерсииПроекта.ВерсииНаПоддержке(Владелец).Найти(ВерсияИсправления) = Неопределено Тогда
		НепроверяемыеРеквизиты.Добавить("КтоПривнес");
	КонецЕсли; 
	
	Если Обнаружена <> Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		НепроверяемыеРеквизиты.Добавить("СборкаОбнаружения");
	КонецЕсли;
	
	Если Обнаружена <> Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		НепроверяемыеРеквизиты.Добавить("ВеткаОбнаружения");
		НепроверяемыеРеквизиты.Добавить("ДатаОбнаружения");
	КонецЕсли;
	
	Если МетодВыявленияОшибки = Перечисления.МетодыВыявленияОшибок.АудитКода Тогда
		НепроверяемыеРеквизиты.Добавить("Наименование");
	КонецЕсли;
	
	Если Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения
		И Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта ИЛИ НЕ Исправлена Тогда
		НепроверяемыеРеквизиты.Добавить("ВеткаИсправления");
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда
		НепроверяемыеРеквизиты.Добавить("ПовторяемаяОшибка");
	КонецЕсли;
		
	Если НепроверяемыеРеквизиты.Количество()>0 Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьУказаниеПовторяемойОшибки(Отказ);
	ПроверитьДанныеПриОжиданииИсправленияПовторяемойОшибки(Отказ);
	ПроверитьВозможностьОтзываПоСтатусу(Отказ);
	ПроверитьУказаниеМестаОбнаружения(Отказ);
	ПроверитьУказаниеВариантаИсправления(Отказ);
	ПроверитьУказаниеДатыИсправления(Отказ);
	
	Если Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках
		И (Проверена ИЛИ Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена
		   ИЛИ Статус = Перечисления.СтатусыОшибок.Закрыта И Исправлена)Тогда
		Если ИзмененыКлючевыеРеквизитыДляАнализаВеток() Тогда
			ПроверитьУказаниеАктуальныхВетокДляИсправления(Отказ);
			ПроверитьУказаниеСостоянияИсправленияДляВеток(Отказ);
			ПроверитьДанныеПоВеткеВерсииИсправления(Отказ);
		КонецЕсли;
	КонецЕсли;

	ПроверитьУказаниеВеткиИсправленияНаВозможностьПомещения(Отказ);
	ПроверитьУказаниеВерсииИсправленияПриИсправленииТолькоВОсновнойВетке(Отказ);
	ПроверитьУказаниеВерсииИсправленияПриИсправленииТолькоВВеткеОбнаружения(Отказ);
	ПроверитьЗаполнениеДанныхОбИсправленииВВетках(Отказ);
	ПроверитьЗаполнениеПубликуемогоОписанияПриВключенииСозданияПатчей(Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Автор = Пользователи.ТекущийПользователь();
	ДатаСоздания = ТекущаяДата();
	ДатаНаправления = '00010101';
	Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована;
	Основание = Неопределено;
	
	ДатаПервойПубликации = '00010101';
	ДатаИзмененияПубликации = '00010101';
	
	ДатаРегистрации = '00010101';
	ДатаРассмотрения = '00010101';
	ДатаИсправления = '00010101';
	ДатаПроверки = '00010101';
	ДатаОтзыва = '00010101';
	ДатаЗакрытия = '00010101';
	ДатаНеПланируетсяИсправлять = '00010101';
	ДатаОжидаетИсправленияПовторяемой = '00010101';
	
	Зарегистрирована = Ложь;
	Признана = Ложь;
	НеПризнана = Ложь;
	Исправлена = Ложь;
	Проверена = Ложь;
	Отозвана = Ложь;
	Закрыта = Ложь;
	НеПланируетсяИсправлять = Ложь;
	ОжидаетИсправленияПовторяемой = Ложь;
	
	Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
	Рассмотрел = Справочники.Пользователи.ПустаяСсылка();
	Исправил = Справочники.Пользователи.ПустаяСсылка();
	Проверил = Справочники.Пользователи.ПустаяСсылка();
	Отозвал = Справочники.Пользователи.ПустаяСсылка();
	Закрыл = Справочники.Пользователи.ПустаяСсылка();
	НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
	УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
	
	КтоПривнес = Справочники.Пользователи.ПустаяСсылка();
	Ветка = Справочники.Ветки.ПустаяСсылка();
	ВеткаИсправления = Справочники.Ветки.ПустаяСсылка();
	
	ОписаниеИзменений = "";
	СпособОбхода = "";
	СпособИсправления = "";
	ПубликуемоеОписание = "";
	ПричиныНепризнания = "";
	
	ПовторяемаяОшибка = "";
	
	СрокОтработки = '00010101';
	
	ЗаполнитьКомуНаправлена();
	УстановитьФлагОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников();
	
	УстановитьСтатусПубликации();
	
	Протокол.Очистить();
	ДополнительныеРеквизиты.Очистить();
	ИсправлениеВВетках.Очистить();
	
	Если Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		
		ВеткиДляИсправления = Справочники.Ошибки.ВеткиДляИсправленияОшибки(Владелец,
		                          ВерсияИсправления,
		                          Обнаружена,
		                          СборкаОбнаружения,
		                          ВеткаОбнаружения,
		                          ДатаОбнаружения);
		
		Для Каждого СтрокаТаблицы из ВеткиДляИсправления Цикл
			
			НоваяСтрока = ИсправлениеВВетках.Добавить();
			НоваяСтрока.Ветка = СтрокаТаблицы.Ветка;
			
			Если СтрокаТаблицы.ВеткаРанееВерсииИсправления И СтрокаТаблицы.ТипВетки = Перечисления.ТипыВеток.ВеткаВерсии Тогда
				НоваяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется;
			Иначе
				НоваяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗарегистрированаИзАПК = Ложь;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;	
	
	РеквизитыПроекта = РеквизитыПроекта();
	РеквизитыОшибкиДоЗаписи = РеквизитыОшибкиДоЗаписи();
	
	ЕстьПравоПланирования = 
			УправлениеДоступомСППР.РольДоступнаПоПроекту("ПланированиеОтработкиОшибок", Владелец);
	
	ВыполнитьПроверкиПередЗаписью(РеквизитыОшибкиДоЗаписи, РеквизитыПроекта, ЕстьПравоПланирования, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ОчиститьРеквизитыПоСтатусу(РеквизитыПроекта);
	УстановитьСтатусныеРеквизиты();
	
	СтатусПоСтрокеПротокола = Перечисления.СтатусыОшибок.ПустаяСсылка();
	КомуНаправленаПоСтрокеПротокола = Справочники.Пользователи.ПустаяСсылка();
	КомментарийПоСтрокеПротокола = "";
	
	Если Протокол.Количество()>0 Тогда
		СтрокаПротокола = Протокол.Получить(0);
		СтатусПоСтрокеПротокола = СтрокаПротокола.Статус;
		КомуНаправленаПоСтрокеПротокола = СтрокаПротокола.КомуНаправлена;
		КомментарийПоСтрокеПротокола = СтрокаПротокола.Комментарий;
	КонецЕсли;
	
	ТекстПоследнегоПоручения = КомментарийПоСтрокеПротокола;
	
	ИзменяетсяДатаНаправления = Ложь;
	
	Если Статус <> СтатусПоСтрокеПротокола ИЛИ КомуНаправлена <> КомуНаправленаПоСтрокеПротокола Тогда
		ДобавитьЗаписьВПротокол(ТекущийПользователь, "");
		ИзменяетсяДатаНаправления = Истина;
	КонецЕсли;
	
	УстановитьДатыПубликации();
	СкорректироватьДанныеНеСоответствующиеПроекту();
	
	Если Обнаружена <> Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		СборкаОбнаружения = Справочники.СборкиВерсии.ПустаяСсылка();
	КонецЕсли;
	
	Если Обнаружена <> Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		ВеткаОбнаружения = Справочники.Ветки.ПустаяСсылка();
		ДатаОбнаружения = '00010101';
	КонецЕсли;
	
	РассчитатьСрокОтработкиПринудительно = Ложь;
	
	Если ДополнительныеСвойства.Свойство("РассчитатьСрокОтработки") И ДополнительныеСвойства.РассчитатьСрокОтработки Тогда
		РассчитатьСрокОтработкиПринудительно = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомуНаправлена) Тогда
		РассчитатьСрокОтработки(ИзменяетсяДатаНаправления, РеквизитыОшибкиДоЗаписи, РассчитатьСрокОтработкиПринудительно);
	Иначе
		ДатаНаправления = '00010101';
		СрокОтработки = '00010101';
	КонецЕсли;
	
	ПроверитьОчиститьВеткуИсправления();
	АктуализироватьИсправлениеВВетках();
	
	Если РеквизитыПроекта.АвтоматическиИсправлятьОшибкиВВетках Тогда
		Если НЕ РеквизитыОшибкиДоЗаписи.Исправлена И Исправлена Тогда
			УстановитьИсправлениеВВетках()
		КонецЕсли;
	КонецЕсли;
	
	Если Не РеквизитыОшибкиДоЗаписи.Исправлена И Исправлена Тогда
		Справочники.Ошибки.ЗаполнитьИзмененныеОбработчики(ЭтотОбъект);
	КонецЕсли;
	
	Если Исправлена Тогда
		Для Каждого СтрТабл из ОбработчикиОбновления Цикл
			
			Если Не ЗначениеЗаполнено(СтрТабл.Ответственный) Тогда
				СтрТабл.Ответственный = Исправил;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Справочники.Ошибки.ЗаполнитьПодразделениеОтветственноеЗаОшибку(ЭтотОбъект, ЭтотОбъект.Ссылка);
	
	Справочники.Ошибки.ЗаполнитьХешУточнения(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("РеквизитыДоЗаписи", РеквизитыОшибкиДоЗаписи);
	ДополнительныеСвойства.Вставить("РеквизитыПроекта", РеквизитыПроекта);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка ИЛИ ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьОтветственногоВОбработчикахОбновления();
	
	РеквизитыДоЗаписи = Неопределено;
	Если ДополнительныеСвойства.Свойство("РеквизитыДоЗаписи", РеквизитыДоЗаписи) Тогда
		
		СформироватьСообщениеПоОтработкеОшибки(ДополнительныеСвойства.РеквизитыДоЗаписи,
		                                       ДополнительныеСвойства.РеквизитыПроекта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСтатусныеРеквизиты()
	
	МассивФлагов = Новый Массив;
	
	Если Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
		
		Зарегистрирована = Истина;
		МассивФлагов.Добавить("Зарегистрирована");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПризнана Тогда
		
		Зарегистрирована = Истина;
		НеПризнана = Истина;
		МассивФлагов.Добавить("Зарегистрирована");
		МассивФлагов.Добавить("НеПризнана");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Признана Тогда
		
		Зарегистрирована = Истина;
		Признана = Истина;
		МассивФлагов.Добавить("Зарегистрирована");
		МассивФлагов.Добавить("Признана");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
		
		Зарегистрирована = Истина;
		Признана = Истина;
		Исправлена = Истина;
		
		МассивФлагов.Добавить("Зарегистрирована");
		МассивФлагов.Добавить("Признана");
		МассивФлагов.Добавить("Исправлена");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена Тогда
		
		Зарегистрирована = Истина;
		Признана = Истина;
		Исправлена = Истина;
		Проверена = Истина;
		
		МассивФлагов.Добавить("Зарегистрирована");
		МассивФлагов.Добавить("Признана");
		МассивФлагов.Добавить("Исправлена");
		МассивФлагов.Добавить("Проверена");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Отозвана Тогда
		
		Отозвана = Истина;
		МассивФлагов.Добавить("Отозвана");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Закрыта Тогда
		
		Закрыта = Истина;
		МассивФлагов.Добавить("Закрыта");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять Тогда	
		
		НеПланируетсяИсправлять = Истина;
		Зарегистрирована = Истина;
		Признана = Истина;
		
		МассивФлагов.Добавить("НеПланируетсяИсправлять");
		МассивФлагов.Добавить("Зарегистрирована");
		МассивФлагов.Добавить("Признана");
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда	
		
		ОжидаетИсправленияПовторяемой = Истина;
		Зарегистрирована = Истина;
		Признана = Истина;
		
		МассивФлагов.Добавить("ОжидаетИсправленияПовторяемой");
		МассивФлагов.Добавить("Зарегистрирована");
		МассивФлагов.Добавить("Признана");
	
	КонецЕсли;
	
	УстановитьРеквизиты(МассивФлагов);
	
КонецПроцедуры

Процедура УстановитьРеквизиты(МассивФлагов)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Дата = ТекущаяДата();
	
	Если МассивФлагов.Найти("Зарегистрирована")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Зарегистрировал) Тогда
			Зарегистрировал = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаРегистрации) Тогда
			ДатаРегистрации = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФлагов.Найти("Признана")<> Неопределено 
		ИЛИ МассивФлагов.Найти("НеПризнана")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Рассмотрел) Тогда
			Рассмотрел = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаРассмотрения) Тогда
			ДатаРассмотрения = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФлагов.Найти("Исправлена")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Исправил) Тогда
			Исправил = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаИсправления) Тогда
			ДатаИсправления = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФлагов.Найти("Проверена")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Проверил) Тогда
			Проверил = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаПроверки) Тогда
			ДатаПроверки = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФлагов.Найти("Отозвана")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Отозвал) Тогда
			Отозвал = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаОтзыва) Тогда
			ДатаОтзыва = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФлагов.Найти("Закрыта")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Закрыл) Тогда
			Закрыл = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаЗакрытия) Тогда
			ДатаЗакрытия = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФлагов.Найти("НеПланируетсяИсправлять")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(НеПланируетИсправлять) Тогда
			НеПланируетИсправлять = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаНеПланируетсяИсправлять) Тогда
			ДатаНеПланируетсяИсправлять = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивФлагов.Найти("ОжидаетИсправленияПовторяемой")<> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(УстановилОжидаетИсправленияПовторяемой) Тогда
			УстановилОжидаетИсправленияПовторяемой = ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаОжидаетИсправленияПовторяемой) Тогда
			ДатаОжидаетИсправленияПовторяемой = Дата;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРеквизитыПоСтатусу(РеквизитыПроекта)
	
	ИспользуетсяЗакрытие = РеквизитыПроекта.ИспользоватьЗакрытиеОшибок;
	ИспользуетсяЗакрытиеТолькоСПроектнымиИзменениями =
		РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями;
	
	Если Статус = Перечисления.СтатусыОшибок.НеЗарегистрирована Тогда
		
		ДатаРегистрации = '00010101';
		ДатаРассмотрения = '00010101';
		ДатаИсправления = '00010101';
		ДатаПроверки = '00010101';
		ДатаОтзыва = '00010101';
		ДатаЗакрытия = '00010101';
		ДатаНеПланируетсяИсправлять = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		Зарегистрирована = Ложь;
		Признана = Ложь;
		НеПризнана = Ложь;
		Исправлена = Ложь;
		Проверена = Ложь;
		Отозвана = Ложь;
		Закрыта = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		Зарегистрировал = Справочники.Пользователи.ПустаяСсылка();
		Рассмотрел = Справочники.Пользователи.ПустаяСсылка();
		Исправил = Справочники.Пользователи.ПустаяСсылка();
		Проверил = Справочники.Пользователи.ПустаяСсылка();
		Отозвал = Справочники.Пользователи.ПустаяСсылка();
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
	
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
		
		ДатаРассмотрения = '00010101';
		ДатаИсправления = '00010101';
		ДатаПроверки = '00010101';
		ДатаОтзыва = '00010101';
		ДатаЗакрытия = '00010101';
		ДатаНепланируетсяИсправлять = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		Признана = Ложь;
		НеПризнана = Ложь;
		Исправлена = Ложь;
		Проверена = Ложь;
		Отозвана = Ложь;
		Закрыта = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		Рассмотрел = Справочники.Пользователи.ПустаяСсылка();
		Исправил = Справочники.Пользователи.ПустаяСсылка();
		Проверил = Справочники.Пользователи.ПустаяСсылка();
		Отозвал = Справочники.Пользователи.ПустаяСсылка();
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Признана 
		ИЛИ Статус = Перечисления.СтатусыОшибок.НеПризнана Тогда
		
		ДатаИсправления = '00010101';
		ДатаПроверки = '00010101';
		ДатаОтзыва = '00010101';
		ДатаЗакрытия = '00010101';
		ДатаНепланируетсяИсправлять = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		Исправлена = Ложь;
		Проверена = Ложь;
		Отозвана = Ложь;
		Закрыта = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		Если Статус = Перечисления.СтатусыОшибок.Признана Тогда
			НеПризнана = Ложь;
		ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПризнана Тогда
			Признана = Ложь;
		КонецЕсли;
		
		Исправил = Справочники.Пользователи.ПустаяСсылка();
		Проверил = Справочники.Пользователи.ПустаяСсылка();
		Отозвал = Справочники.Пользователи.ПустаяСсылка();
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
		
		ДатаПроверки = '00010101';
		ДатаОтзыва = '00010101';
		ДатаЗакрытия = '00010101';
		ДатаНепланируетсяИсправлять = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		НеПризнана = Ложь;
		Проверена = Ложь;
		Отозвана = Ложь;
		Закрыта = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		Проверил = Справочники.Пользователи.ПустаяСсылка();
		Отозвал = Справочники.Пользователи.ПустаяСсылка();
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена Тогда
		
		ДатаОтзыва = '00010101';
		ДатаЗакрытия = '00010101';
		ДатаНепланируетсяИсправлять = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		НеПризнана = Ложь;
		Отозвана = Ложь;
		Закрыта = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		Отозвал = Справочники.Пользователи.ПустаяСсылка();
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Отозвана Тогда
		
		ДатаЗакрытия = '00010101';
		ДатаНепланируетсяИсправлять = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		Закрыта = Ложь;
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.Закрыта Тогда
		
		Если Исправлена Тогда
			НеПризнана = Ложь;
		КонецЕсли;
		
		ДатаНепланируетсяИсправлять = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		НеПланируетсяИсправлять = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять Тогда
		
		ДатаИсправления = '00010101';
		ДатаПроверки = '00010101';
		ДатаОтзыва = '00010101';
		ДатаЗакрытия = '00010101';
		ДатаОжидаетИсправленияПовторяемой = '00010101';
		
		НеПризнана = Ложь;
		Исправлена = Ложь;
		Проверена = Ложь;
		Закрыта = Ложь;
		ОжидаетИсправленияПовторяемой = Ложь;
		
		Исправил = Справочники.Пользователи.ПустаяСсылка();
		Проверил = Справочники.Пользователи.ПустаяСсылка();
		ОТозвал = Справочники.Пользователи.ПустаяСсылка();
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		УстановилОжидаетИсправленияПовторяемой = Справочники.Пользователи.ПустаяСсылка();
		
	ИначеЕсли Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда
		
		ДатаИсправления = '00010101';
		ДатаПроверки = '00010101';
		ДатаОтзыва = '00010101';
		ДатаЗакрытия = '00010101';
		ДатаНеПланируетсяИсправлять = '00010101';
		
		НеПризнана = Ложь;
		Исправлена = Ложь;
		Проверена = Ложь;
		Закрыта = Ложь;
		НеПланируетсяИсправлять = Ложь;
		
		Исправил = Справочники.Пользователи.ПустаяСсылка();
		Проверил = Справочники.Пользователи.ПустаяСсылка();
		ОТозвал = Справочники.Пользователи.ПустаяСсылка();
		Закрыл = Справочники.Пользователи.ПустаяСсылка();
		НеПланируетИсправлять = Справочники.Пользователи.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДатыПубликации()
	
	Если СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.Публикуется
		И Не ЗначениеЗаполнено(ДатаПервойПубликации) Тогда
		
		ДатаПервойПубликации = ТекущаяДата();
		
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		
		ПубликуемыеРеквизиты = 
			"ПубликуемоеОписание,СпособОбхода,СпособИсправления,ВерсияИсправления,Статус,Обнаружена,СборкаОбнаружения";
		
		СтрокаРеквизитов = ПубликуемыеРеквизиты + ",ДатаПервойПубликации";
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, СтрокаРеквизитов);
		
		Если СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.Публикуется
			И ЗначениеЗаполнено(Реквизиты.ДатаПервойПубликации) 
			И (ПубликуемоеОписание <> Реквизиты.ПубликуемоеОписание
			ИЛИ СпособОбхода <> Реквизиты.СпособОбхода
			ИЛИ СпособИсправления <> Реквизиты.СпособИсправления
			ИЛИ ВерсияИсправления <> Реквизиты.ВерсияИсправления
			ИЛИ Статус <> Реквизиты.Статус
			ИЛИ Обнаружена <> Реквизиты.Обнаружена
			ИЛИ СборкаОбнаружения <> Реквизиты.СборкаОбнаружения) Тогда
			
			ДатаИзмененияПубликации = ТекущаяДата();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеМестаОбнаружения(Отказ)
	
	Если СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.Публикуется
		И Обнаружена <> Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		
		ТекстСообщения = НСтр("ru='Для ошибок со статусом публикации ""Публикуется"" допускается указывать только вариант обнаружения ошибки ""В сборке""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Обнаружена");
				
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеВариантаИсправления(Отказ)
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
		Если ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
			
			ТипВетки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаОбнаружения, "Тип");
			
			Если ТипВетки = Перечисления.ТипыВеток.ВеткаТехническогоПроекта
				ИЛИ ТипВетки = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
				
				Если Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения
					И Исправляется <> Перечисления.ВариантыИсправленияОшибок.БезИзмененийВВетках Тогда
					
					ТекстСообщения = НСтр("ru='Ошибки, обнаруженные в ветке технического проекта, или в ветке для исправления ошибок, следует исправлять только в ветке обнаружения.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Исправляется");
					
					Отказ = Истина;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьОтзываПоСтатусу(Отказ)
	
	Если (Отозвана ИЛИ Статус = Перечисления.СтатусыОшибок.Отозвана)
		И Зарегистрирована И НЕ Признана И НЕ НеПризнана Тогда
		
		ТекстСообщения = НСтр("ru='Зарегистрированная ошибка не может быть отозвана без рассмотрения. Необходимо признать, или не признать ошибку'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеПовторяемойОшибки(Отказ)
	
	Если ЗначениеЗаполнено(ПовторяемаяОшибка) Тогда
		
		Если ПовторяемаяОшибка = Ссылка Тогда
			ТекстСообщения = НСтр("ru='Значение поля ""Повторяемая ошибка"" указано неверно - ошибка ссылается сама на себя.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПовторяемаяОшибка");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки") Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если СтатусПубликации  = Перечисления.СтатусыПубликацииОшибок.Публикуется Тогда
				
				СтатусПубликацииПовторяемойОшибки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПовторяемаяОшибка, "СтатусПубликации");
				
				Если СтатусПубликацииПовторяемойОшибки <> Перечисления.СтатусыПубликацииОшибок.Публикуется Тогда
					
					ТекстСообщения = НСтр("ru='Для публикуемой ошибки не допускается указание непубликуемой повторяемой ошибки'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПовторяемаяОшибка");
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			РезультатПроверкиПовторяемыхОшибок = Справочники.Ошибки.ПроверитьУказаннуюПовторяемуюОшибку(ПовторяемаяОшибка, ВеткаОбнаружения);
			Если РезультатПроверкиПовторяемыхОшибок.РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверкиПовторяемыхОшибок.ТекстСообщения, ЭтотОбъект, "ПовторяемаяОшибка");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			РезультатПроверкиСсылающихсяОшибок = Справочники.Ошибки.ПроверитьОшибкиСУказаннойПовторяемойОшибкой(ЭтотОбъект.Ссылка, ПовторяемаяОшибка);
			Если РезультатПроверкиСсылающихсяОшибок.РезультатПроверки Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверкиСсылающихсяОшибок.ТекстСообщения, ЭтотОбъект, "ПовторяемаяОшибка");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДанныеПриОжиданииИсправленияПовторяемойОшибки(Отказ)
	
	Если Статус = Перечисления.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки Тогда
		
		УказанаПовторяемаяОшибка = Ложь;
		Если ТипЗнч(ПовторяемаяОшибка) = Тип("СправочникСсылка.Ошибки")
			И ЗначениеЗаполнено(ПовторяемаяОшибка) Тогда
			УказанаПовторяемаяОшибка = Истина;
		КонецЕсли;
		
		Если НЕ УказанаПовторяемаяОшибка Тогда
			ТекстСообщения = НСтр("ru='В ошибке, ожидающей исправления повторяемой ошибки, должна быть указана повторяемая ошибка'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПовторяемаяОшибка");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеДатыИсправления(Отказ)
	
	Если ЗначениеЗаполнено(ДатаИсправления) Тогда
		
		ДатаОбнаруженияОшибки = '00010101';
		
		Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
			
			ДатаСборки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаОбнаружения, "ДатаСборки");
			Если ДатаСборки = Неопределено Тогда
				ДатаСборки = '00010101';
			КонецЕсли;
			
			ДатаОбнаруженияОшибки = ДатаСборки;
			ТекстСообщения = НСтр("ru='Дата исправления ошибки не может быть ранее даты сборки обнаружения'");
			ИмяПоля = "СборкаОбнаружения";
		Иначе
			ДатаОбнаруженияОшибки = ДатаОбнаружения;
			ТекстСообщения = НСтр("ru='Дата исправления ошибки не может быть ранее даты обнаружения ошибки'");
			ИмяПоля = "ДатаОбнаружения";
		КонецЕсли;
		
		Если ДатаИсправления < ДатаОбнаруженияОшибки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ИмяПоля);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ДатаИсправления < ДатаСоздания ИЛИ ДатаИсправления < ДатаРегистрации ИЛИ ДатаИсправления < ДатаРассмотрения Тогда
			ТекстСообщения = НСтр("ru='Дата исправления	указана ранее даты предыдущих этапов работы с ошибкой'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если (ДатаИсправления > ДатаПроверки И ЗначениеЗаполнено(ДатаПроверки))
			ИЛИ (ДатаИсправления > ДатаЗакрытия И ЗначениеЗаполнено(ДатаЗакрытия)) Тогда
			ТекстСообщения = НСтр("ru='Дата исправления	указана позже даты последующих этапов работы с ошибкой'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьЗаписиЗакрытойОшибки(РеквизитыДоЗаписи, РеквизитыПроекта, Отказ)
	
	ЗаписьЗапрещена = Ложь;
	ПроектОшибки = Владелец;
	
	ИспользуетсяЗакрытие = РеквизитыПроекта.ИспользоватьЗакрытиеОшибок;
	ИспользуетсяЗакрытиеТолькоПриПроектныхИзменениях =
		РеквизитыПроекта.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями;
	
	ИмеетсяПравоЗакрытияОшибок = Справочники.Ошибки.ПользовательИмеетПравоЗакрытияОшибок(Владелец);
	
	Если Статус = Перечисления.СтатусыОшибок.Закрыта Тогда
		
		Если НЕ ИспользуетсяЗакрытие Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='По проекту %Проект% не используется закрытие ошибок
			|Ошибка %КодОшибки% не записана'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ПроектОшибки);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", Код);
			ВызватьИсключение(ТекстСообщения);
		Иначе
			Если ИспользуетсяЗакрытиеТолькоПриПроектныхИзменениях Тогда
				Если НЕ ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями Тогда
					Отказ = Истина;
					ТекстСообщения = НСтр("ru='По проекту %Проект% используется закрытие ошибок
					|только для ошибок с признаком ""Есть изменения по сравнению с ранее принятыми проектными решениями""
					|Ошибка %КодОшибки% не записана'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ПроектОшибки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОшибки%", Код);
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыОшибок.Закрыта
		И РеквизитыДоЗаписи.Статус <> Перечисления.СтатусыОшибок.Закрыта Тогда
				
		Если НЕ ИмеетсяПравоЗакрытияОшибок Тогда
			ЗаписьЗапрещена = Истина;
		КонецЕсли;
		
	ИначеЕсли НЕ ЭтоНовый() Тогда
		
		Если РеквизитыДоЗаписи.Статус = Перечисления.СтатусыОшибок.Закрыта Тогда
			
			Если РеквизитыДоЗаписи.Владелец <> Владелец Тогда
				СтароеПравоЗакрытияОшибок = Справочники.Ошибки.ПользовательИмеетПравоЗакрытияОшибок(РеквизитыДоЗаписи.Владелец);
				ПроектОшибки = РеквизитыДоЗаписи.Владелец;
				
				Если НЕ СтароеПравоЗакрытияОшибок Тогда
					ЗаписьЗапрещена = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписьЗапрещена Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru='Текущему пользователю запрещено записывать ошибки в статусе ""Закрыта""по проекту %Проект%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", ПроектОшибки);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
			
КонецПроцедуры

Процедура СкорректироватьДанныеНеСоответствующиеПроекту()
	
	Если ЗначениеЗаполнено(РазделПроекта) Тогда
		
		ПроектРаздела = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РазделПроекта, "Владелец");
		
		Если ПроектРаздела <> Владелец Тогда
			РазделПроекта = Справочники.РазделыПроекта.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипПроблемы = Перечисления.ТипПроблемы.ОбъектыМетаданных Тогда
		СкорректироватьМетаданные(СписокОбъектов, "ПроблемныйОбъект");
	КонецЕсли; 
	
КонецПроцедуры

Процедура СкорректироватьМетаданные(ТабличнаяЧасть, ИмяРеквизита)
	
	МассивМетаданных = Новый Массив;
	Для Каждого СтрокаТЧ из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ[ИмяРеквизита]) Тогда
			МассивМетаданных.Добавить(СтрокаТЧ[ИмяРеквизита]);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = ТабличнаяЧасть.Количество();
	Если КоличествоСтрок > 0 Тогда
		
		СоответствиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивМетаданных, "Владелец");
		СоответствиеМетаданных = МетаданныеТребуемогоПроекта(МассивМетаданных);
		
		Сч = КоличествоСтрок;
		Пока Сч > 0 Цикл
			
			ОбъектМетаданных = ТабличнаяЧасть[Сч - 1][ИмяРеквизита];
			СтруктураРеквизитов = СоответствиеРеквизитов.Получить(ОбъектМетаданных);
			
			Если СтруктураРеквизитов <> Неопределено Тогда
				ВладелецОбъектаМетаданных = СтруктураРеквизитов.Владелец;
				Если ВладелецОбъектаМетаданных <> Владелец Тогда
					
					СоответствующийОбъектМетаданных = СоответствиеМетаданных.Получить(ОбъектМетаданных);
					
					Если СоответствующийОбъектМетаданных <> Неопределено Тогда
						ТабличнаяЧасть[Сч - 1][ИмяРеквизита] = СоответствующийОбъектМетаданных;
					Иначе
						ТабличнаяЧасть.Удалить(Сч - 1);
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				ТабличнаяЧасть.Удалить(Сч - 1);
			КонецЕсли;
			
			Сч = Сч - 1;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция МетаданныеТребуемогоПроекта(МассивМетаданных)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтарыеОбъектыМетаданных.Ссылка КАК СтарыйОбъект,
	|	НовыеОбъектыМетаданных.Ссылка КАК НовыйОбъект
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК СтарыеОбъектыМетаданных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыМетаданных КАК НовыеОбъектыМетаданных
	|		ПО СтарыеОбъектыМетаданных.Наименование = НовыеОбъектыМетаданных.Наименование
	|       И НовыеОбъектыМетаданных.Владелец = &Проект
	|ГДЕ
	|	СтарыеОбъектыМетаданных.Ссылка В(&МассивМетаданных)"
	;
	
	СоответствиеОбъектов = Новый Соответствие;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивМетаданных", МассивМетаданных);
	Запрос.УстановитьПараметр("Проект", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеОбъектов.Вставить(Выборка.СтарыйОбъект, Выборка.НовыйОбъект);
	КонецЦикла;
	
	Возврат СоответствиеОбъектов;
	
КонецФункции

Процедура ПроверитьВозможностьЗаписиСИзмененнымиРеквизитами(РеквизитыДоЗаписи, ЕстьПравоПланирования, Отказ);
	
	Если НЕ ЭтоНовый() Тогда
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		
		ПроверитьВозможностьИзмененияСрокаОтработки(РеквизитыДоЗаписи, ЕстьПравоПланирования, Отказ);
		ПроверитьВозможностьИзмененияСтатусаПубликации(РеквизитыДоЗаписи, Отказ);
		ПроверитьВозможностьИзмененияОтветственногоЗаРаздел(РеквизитыДоЗаписи, ЕстьПравоПланирования, Отказ);
		ПроверитьВозможностьИзмененияМестаОбнаружения(РеквизитыДоЗаписи, ТекущийПользователь, Отказ);
		ПроверитьВозможностьОтзыва(РеквизитыДоЗаписи, ТекущийПользователь, Отказ);
	КонецЕсли;
	
	Если НЕ ЕстьПравоПланирования Тогда
		ПроверитьВозможностьУстановкиСтатусаИсправлениеНеПланируется(РеквизитыДоЗаписи, Отказ);
		ПроверитьВозможностьУстановкиСостоянийИсправлениеНеПланируетсяИлиВОтдельнойОшибке(РеквизитыДоЗаписи, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьИсправлениеВВетках()
	
	Если ИсправлениеВВетках.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НеПланируетсяИсправлять Тогда
		Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
			СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется;
			СтрокаТЧ.ДатаИсправления = '00010101';
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФлагОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников()
	
	ТекстИсходнойИнформации = ИсходнаяИнформацияОбОшибке;
	
	ПризнакиПолученияИнформацииОбОшибкеИзВнешнихИсточников =
		Константы.ПризнакиПолученияИнформацииОбОшибкахИзВнешнихИсточников.Получить();
	
	Если ЗначениеЗаполнено(ПризнакиПолученияИнформацииОбОшибкеИзВнешнихИсточников) Тогда
		
		МассивПризнаковВнешнейОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			НРег(ПризнакиПолученияИнформацииОбОшибкеИзВнешнихИсточников), " ");
		
		ИсходнаяИнформацияНРег = НРег(ТекстИсходнойИнформации);
		
		Для Каждого Признак из МассивПризнаковВнешнейОшибки Цикл
			Если Найти(ИсходнаяИнформацияНРег, Признак)>0 Тогда
				ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусПубликации()
	
	Если НЕ ЗначениеЗаполнено(Владелец) ИЛИ НЕ ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "КонтролироватьОбязательностьПубликацииОшибок") Тогда
		СтатусПубликации = Перечисления.СтатусыПубликацииОшибок.Публикуется;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКомуНаправлена()
	
	Если ЗначениеЗаполнено(ВеткаОбнаружения) Тогда
		РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВеткаОбнаружения, "Тип,Ответственный");
		ТипВетки = РеквизитыВетки.Тип;
		ОтветственныйЗаВетку = РеквизитыВетки.Ответственный;
	Иначе
		ТипВетки = Перечисления.ТипыВеток.ПустаяСсылка();
		ОтветственныйЗаВетку = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке
		И (ТипВетки = Перечисления.ТипыВеток.ВеткаТехническогоПроекта
		ИЛИ ТипВетки = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок) Тогда
			
		КомуНаправлена = ОтветственныйЗаВетку;
		
	ИначеЕсли ЗначениеЗаполнено(РазделПроекта) Тогда
		КомуНаправлена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РазделПроекта, "Ответственный");
	Иначе
		КомуНаправлена = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	// Если настроено замещение, то подставляется замещающий
	Если ЗначениеЗаполнено(КомуНаправлена) Тогда
		Справочники.Ошибки.ЗаместитьПользователяПриРаботеСОшибкой(КомуНаправлена, Владелец, "", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСрокОтработки(ИзменяетсяДатаНаправления, РеквизитыДоЗаписи, РассчитатьСрокОтработкиПринудительно=Ложь)
	
	ПредыдущийСрокОтработки = РеквизитыДоЗаписи.СрокОтработки;
	
	ТребуетсяОтработкаПоручения = Справочники.Ошибки.ТребуетсяОтработкаПоручения(Владелец,
									Статус,
									ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями,
									КомуНаправлена);
	
	Если РассчитатьСрокОтработкиПринудительно Тогда
		НужноРассчитатьСрокОтработки = Истина;								
		// Срок отработки не требуется рассчитывать, если срок изменил пользователь и новый срок заполнен
	ИначеЕсли (ПредыдущийСрокОтработки <> СрокОтработки ИЛИ ДополнительныеСвойства.Свойство("ЗаписьВФорме"))
		И ЗначениеЗаполнено(СрокОтработки) Тогда
		НужноРассчитатьСрокОтработки = Ложь;
	Иначе
		
		ТекущиеРеквизиты = Новый Структура;
		ТекущиеРеквизиты.Вставить("Статус", Статус);
		ТекущиеРеквизиты.Вставить("ВерсияИсправления", ВерсияИсправления);
		ТекущиеРеквизиты.Вставить("Исправляется", Исправляется);
		ТекущиеРеквизиты.Вставить("СрокОтработки", СрокОтработки);
		ТекущиеРеквизиты.Вставить("ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями", ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
		ТекущиеРеквизиты.Вставить("СрочностьИсправления", СрочностьИсправления);
		
		НужноРассчитатьСрокОтработки = Справочники.Ошибки.ТребуетсяПересчетСрокаОтработки(РеквизитыДоЗаписи,
		                                                                                  ТекущиеРеквизиты,
																						  ТребуетсяОтработкаПоручения,
																						  ИзменяетсяДатаНаправления);
	КонецЕсли;
	
	Если НужноРассчитатьСрокОтработки Тогда
		
		Если ТребуетсяОтработкаПоручения Тогда
			
			Если ЗначениеЗаполнено(ДатаНаправления) Тогда
				ДатаНачалаОтсчета = ДатаНаправления;
			Иначе
				ДатаНачалаОтсчета = ТекущаяДата();
			КонецЕсли;
		Иначе
			ДатаНачалаОтсчета = Справочники.Ошибки.ДатаУстановкиТекущегоСтатуса(ЭтотОбъект);
		КонецЕсли;
		
		РеквизитыОшибки = Новый Структура;
		РеквизитыОшибки.Вставить("Владелец", Владелец);
		РеквизитыОшибки.Вставить("Статус", Статус);
		РеквизитыОшибки.Вставить("СрочностьИсправления", СрочностьИсправления);
		РеквизитыОшибки.Вставить("ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями", ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями);
		РеквизитыОшибки.Вставить("ВерсияИсправления", ВерсияИсправления);
		РеквизитыОшибки.Вставить("КомуНаправлена", КомуНаправлена);
		РеквизитыОшибки.Вставить("Исправляется", Исправляется);
		
		СрокОтработкиПоНорме = Справочники.Ошибки.СрокОтработкиОшибки(РеквизитыОшибки, РеквизитыДоЗаписи.ВерсияИсправления, ДатаНачалаОтсчета);
		
		СрокОтработки = СрокОтработкиПоНорме;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьИсправлениеВВетках()
	
	Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
		Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
			
			СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена;
			СтрокаТЧ.ДатаИсправления = ДатаИсправления;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВеткаИсправления) Тогда
				СтрокаТЧ.ВеткаИсправления = СтрокаТЧ.Ветка;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыПроекта()
	
	СтрокаРеквизитов = "УказыватьВОшибкахРазделПроекта,
						|УказыватьВОшибкахМестоИсправления,
						|ИспользоватьЗакрытиеОшибок,
						|ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями,
						|АвтоматическиИсправлятьОшибкиВВетках,
						|УказыватьВОшибкахКтоПривнес,
						|ИспользоватьРегламентноеЗаданиеСообщенийПоОшибкам,
						|ПользовательАвторСообщенийСистемыВзаимодействия";
						
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, СтрокаРеквизитов);
	
	Для Каждого Реквизит из Реквизиты Цикл
		Если Реквизит.Значение = Неопределено Тогда
			Если Реквизит.Ключ = "ПользовательАвторСообщенийСистемыВзаимодействия" Тогда
				Реквизиты[Реквизит.Ключ] = Справочники.Пользователи.ПустаяСсылка();
			Иначе
				Реквизиты[Реквизит.Ключ] = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

Функция РеквизитыОшибкиДоЗаписи()
	
	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("Владелец", Справочники.Проекты.ПустаяСсылка());
	Реквизиты.Вставить("Статус", Перечисления.СтатусыОшибок.ПустаяСсылка());
	Реквизиты.Вставить("Признана", Ложь);
	Реквизиты.Вставить("НеПризнана", Ложь);
	Реквизиты.Вставить("Исправлена", Ложь);
	Реквизиты.Вставить("Проверена", Ложь);
	Реквизиты.Вставить("Отозвана", Ложь);
	Реквизиты.Вставить("НеПланируетсяИсправлять", Ложь);
	Реквизиты.Вставить("ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников", Ложь);
	Реквизиты.Вставить("ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями", Ложь);
	Реквизиты.Вставить("СрокОтработки", '00010101');
	Реквизиты.Вставить("Обнаружена", Перечисления.МестаОбнаруженияОшибок.ПустаяСсылка());
	Реквизиты.Вставить("ВеткаОбнаружения", Справочники.Ветки.ПустаяСсылка());
	Реквизиты.Вставить("СборкаОбнаружения", Справочники.СборкиВерсии.ПустаяСсылка());
	Реквизиты.Вставить("ВерсияИсправления", Справочники.ВерсииПроекта.ПустаяСсылка());
	Реквизиты.Вставить("Исправляется", Перечисления.ВариантыИсправленияОшибок.ПустаяСсылка());
	Реквизиты.Вставить("СтатусПубликации", Перечисления.СтатусыПубликацииОшибок.ПустаяСсылка());
	Реквизиты.Вставить("СрочностьИсправления", Перечисления.СрочностьИсправленияОшибок.ПустаяСсылка());
	Реквизиты.Вставить("ЕстьСпособОбхода", Ложь);
	Реквизиты.Вставить("ЕстьСпособИсправления", Ложь);
	Реквизиты.Вставить("СпособОбхода", "");
	Реквизиты.Вставить("СпособИсправления", "");
	Реквизиты.Вставить("ОтветственныйЗаРаздел", Справочники.Пользователи.ПустаяСсылка());
	Реквизиты.Вставить("КомуНаправлена", Справочники.Пользователи.ПустаяСсылка());
	
	ТаблицаИсправлениеВВетках = Новый ТаблицаЗначений;
	ТаблицаИсправлениеВВетках.Колонки.Добавить("Ветка", Новый ОписаниеТипов("СправочникСсылка.Ветки"));
	ТаблицаИсправлениеВВетках.Колонки.Добавить("СостояниеИсправления", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияИсправленияОшибок"));
	
	Реквизиты.Вставить("ИсправлениеВВетках", ТаблицаИсправлениеВВетках);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ошибки.Владелец КАК Владелец,
		|	Ошибки.Статус КАК Статус,
		|	Ошибки.Признана КАК Признана,
		|	Ошибки.НеПризнана КАК НеПризнана,
		|	Ошибки.Исправлена КАК Исправлена,
		|	Ошибки.Проверена КАК Проверена,
		|	Ошибки.Отозвана КАК Отозвана,
		|	Ошибки.НеПланируетсяИсправлять КАК НеПланируетсяИсправлять,
		|	Ошибки.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников КАК ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
		|	Ошибки.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями КАК ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями,
		|	Ошибки.СрокОтработки КАК СрокОтработки,
		|	Ошибки.Обнаружена КАК Обнаружена,
		|	Ошибки.ВеткаОбнаружения КАК ВеткаОбнаружения,
		|	Ошибки.СборкаОбнаружения КАК СборкаОбнаружения,
		|	Ошибки.ВерсияИсправления КАК ВерсияИсправления,
		|	Ошибки.Исправляется КАК Исправляется,
		|	Ошибки.СтатусПубликации КАК СтатусПубликации,
		|	Ошибки.СрочностьИсправления КАК СрочностьИсправления,
		|	Ошибки.ЕстьСпособОбхода КАК ЕстьСпособОбхода,
		|	Ошибки.ЕстьСпособИсправления КАК ЕстьСпособИсправления,
		|	Ошибки.СпособОбхода КАК СпособОбхода,
		|	Ошибки.СпособИсправления КАК СпособИсправления,
		|	Ошибки.ОтветственныйЗаРаздел КАК ОтветственныйЗаРаздел,
		|	Ошибки.КомуНаправлена КАК КомуНаправлена,
		|	Ошибки.ИсправлениеВВетках.(
		|		Ветка КАК Ветка,
		|		СостояниеИсправления КАК СостояниеИсправления
		|	) КАК ИсправлениеВВетках
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|ГДЕ
		|	Ошибки.Ссылка = &Ссылка"
		;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
			Реквизиты.ИсправлениеВВетках = Выборка.ИсправлениеВВетках.Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ПроверитьУказаниеСрочностиИсправления(РеквизитыОшибкиДоЗаписи, ЕстьПравоПланирования, Отказ)
	
	Если НеПризнана Тогда
		Возврат;
	КонецЕсли;
	
	Если Зарегистрирована И ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников И НЕ ЕстьПравоПланирования Тогда
		
		Если РеквизитыОшибкиДоЗаписи.Статус <> Статус
			ИЛИ РеквизитыОшибкиДоЗаписи.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников <> ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников
			ИЛИ РеквизитыОшибкиДоЗаписи.СрочностьИсправления <> СрочностьИсправления
			ИЛИ РеквизитыОшибкиДоЗаписи.ЕстьСпособОбхода <> ЕстьСпособОбхода
			ИЛИ РеквизитыОшибкиДоЗаписи.ЕстьСпособИсправления <> ЕстьСпособИсправления
			ИЛИ Лев(РеквизитыОшибкиДоЗаписи.СпособОбхода,1000) <> Лев(СпособОбхода,1000)
			ИЛИ Лев(РеквизитыОшибкиДоЗаписи.СпособИсправления,1000) <> Лев(СпособИсправления,1000) Тогда
			
			Если НЕ ЕстьСпособИсправления И НЕ ЗначениеЗаполнено(СпособИсправления)
				И НЕ ЕстьСпособОбхода И НЕ ЗначениеЗаполнено(СпособОбхода)
				И СрочностьИсправления <> Перечисления.СрочностьИсправленияОшибок.Немедленно
				И СрочностьИсправления <> Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее Тогда
				
				Отказ = Истина;
				ТекстСообщения = 
					НСтр("ru='При отсутствии способа обхода и исправления для ошибки необходимо указать срочность исправления ""Немедленно"" или ""Желательно быстрее"".
						|Если способ обхода или исправления существует - следует его указать'");
				
				ВызватьИсключение(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьОтветственногоВОбработчикахОбновления()
	
	Если ОбработчикиОбновления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧОбработчикиОбновления.ОбработчикОбновления КАК Обработчик
	|ПОМЕСТИТЬ ВТТекущиеОбработчики
	|ИЗ
	|	Справочник.Ошибки.ОбработчикиОбновления КАК ТЧОбработчикиОбновления
	|ГДЕ
	|	ТЧОбработчикиОбновления.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Выполнить();
	
	Справочники.ОбработчикиОбновленияИнформационнойБазы.ИзменитьОтветственногоВОбработчикахОбновления(МенеджерВТ);
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеПубликуемогоОписанияПриВключенииСозданияПатчей(Отказ)
	
	Если Не СоздатьПатч Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПубликуемоеОписание) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПатчиСлужебный.ДляВсехВерсийОтключеноСозданиеПатчей(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекстСообщения = НСтр("ru = 'Включено создание патча. Необходимо заполнить публикуемое описание.'");
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПубликуемоеОписание");
	
КонецПроцедуры

Процедура ПроверитьУказаниеСборкиДляВнешнейОшибки(СборкаОпубликована, Отказ)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников Тогда
		
		СборкаУказанаВерно = Ложь;
		
		Если СборкаОпубликована Тогда
			СборкаУказанаВерно = Истина;
		КонецЕсли;
		
		Если НЕ СборкаУказанаВерно Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Для ошибки, информация о которой получена из внешних источников, должна быть указана публикуемая сборка обнаружения'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуСозданияОшибкиИСборкиОбнаружения(ДатаСборкиОбнаружения, Отказ)
	
	Если ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаСоздания < ДатаСборкиОбнаружения Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru='Дата создания ошибки ранее даты сборки обнаружения. Необходимо проверить правильность указания сборки обнаружения.'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкиПередЗаписью(РеквизитыОшибкиДоЗаписи, РеквизитыПроекта, ЕстьПравоПланирования, Отказ)
	
	ПроверитьВозможностьЗаписиЗакрытойОшибки(РеквизитыОшибкиДоЗаписи, РеквизитыПроекта, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьЗаписиСИзмененнымиРеквизитами(РеквизитыОшибкиДоЗаписи, ЕстьПравоПланирования, Отказ);
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьУказаниеСрочностиИсправления(РеквизитыОшибкиДоЗаписи, ЕстьПравоПланирования, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке
		И ЗначениеЗаполнено(СборкаОбнаружения) Тогда
		
		РеквизитыСборки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СборкаОбнаружения, "ДатаСборки,Опубликована");
		
		ПроверитьУказаниеСборкиДляВнешнейОшибки(РеквизитыСборки.Опубликована, Отказ);
		ПроверитьДатуСозданияОшибкиИСборкиОбнаружения(РеквизитыСборки.ДатаСборки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСообщениеПоОтработкеОшибки(РеквизитыОбъектаДоЗаписи, РеквизитыПроекта)
	
	Если НЕ СистемаВзаимодействия.ИспользованиеДоступно()
		ИЛИ ПометкаУдаления
		ИЛИ (Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаОбнаружения, "Тип") = Перечисления.ТипыВеток.ВеткаТехническогоПроекта)
		ИЛИ НЕ РеквизитыПроекта.ИспользоватьРегламентноеЗаданиеСообщенийПоОшибкам 
		ИЛИ НЕ ЗначениеЗаполнено(РеквизитыПроекта.ПользовательАвторСообщенийСистемыВзаимодействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КомуНаправлена) И КомуНаправлена <> Пользователи.ТекущийПользователь()
		И ЗначениеЗаполнено(СрокОтработки) И НачалоДня(СрокОтработки) <= НачалоДня(ТекущаяДата())
		И ЗначениеЗаполнено(РеквизитыПроекта.ПользовательАвторСообщенийСистемыВзаимодействия) Тогда
		
		Если РеквизитыОбъектаДоЗаписи.Владелец <> Владелец
			ИЛИ РеквизитыОбъектаДоЗаписи.СрокОтработки <> СрокОтработки
			ИЛИ РеквизитыОбъектаДоЗаписи.КомуНаправлена <> КомуНаправлена Тогда
			
			Попытка
				ОшибкиСервер.СформироватьСообщениеПоОшибке(Ссылка,
			                                            СрокОтработки,
														КомуНаправлена,
														РеквизитыПроекта.ПользовательАвторСообщенийСистемыВзаимодействия);
			Исключение
			
				ТекстСообщения = НСтр("ru = 'Не удалось сформировать сообщение системы взаимодействия по причине: %Причина%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ИмяСобытия = НСтр("ru = 'Формирование сообщений по ошибкам'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, Ссылка, ТекстСообщения);
	
			КонецПопытки;
											  
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхОбИсправленииВВетках(Отказ)
	
	Если Исправляется <> Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках ИЛИ Отозвана Тогда
		Возврат;
	КонецЕсли;
	
	ВеткиИсправления = Новый Массив;
	
	Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ВеткаИсправления) Тогда
			Если ВеткиИсправления.Найти(СтрокаТЧ.ВеткаИсправления) = Неопределено Тогда
				ВеткиИсправления.Добавить(СтрокаТЧ.ВеткаИсправления);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	РеквизитыВетокИсправления = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ВеткиИсправления, "ИзмененияПомещаютсяТолькоЧерезДругиеВетки,ДатаПомещения");
	
	Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
		Если ЗначениеЗаполнено(СборкаОбнаружения) Тогда
			ДатаОбнаруженияОшибки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СборкаОбнаружения, "ДатаСборки");
		Иначе
			ДатаОбнаруженияОшибки = '00010101';
		КонецЕсли;
	Иначе
		ДатаОбнаруженияОшибки = ДатаОбнаружения;
	КонецЕсли;
		
	Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
		
		Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
			
			// Проверка заполнения даты исправления для веток с исправлением
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаИсправления) Тогда
				
				ТекстСообщения = НСтр("ru='В строке %НомерСтроки% списка ""Исправление в ветках"" не заполнено поле ""Дата исправления"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
				                                                                  СтрокаТЧ.НомерСтроки,
				                                                                  "ДатаИсправления");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ = Истина;
				
			КонецЕсли;
			
			// Проверка заполнения ветки исправления для веток с исправлением
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВеткаИсправления) Тогда
				
				ТекстСообщения = НСтр("ru='В строке %НомерСтроки% списка ""Исправление в ветках"" не заполнено поле ""Ветка исправления"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
				                                                                  СтрокаТЧ.НомерСтроки,
				                                                                  "ВеткаИсправления");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Ветка) Тогда
			
			// Проверка дублей веток в табличной части
			СтруктураОтбора = Новый Структура("Ветка", СтрокаТЧ.Ветка);
			НайденныеСтроки = ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество()>1 Тогда
				
				ТекстСообщения = НСтр("ru='Ветка %Ветка% повторяется в списке ""Исправление в ветках""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", СтрокаТЧ.Ветка);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
				                                                                  СтрокаТЧ.НомерСтроки,
				                                                                  "Ветка");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ =  Истина;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ВеткаИсправления) И СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
			
			// Проверка запрета помещения изменений в ветку напрямую
			РеквизитыВетки = РеквизитыВетокИсправления.Получить(СтрокаТЧ.ВеткаИсправления);
			
			ПомещениеЗапрещено = РеквизитыВетки.ИзмененияПомещаютсяТолькоЧерезДругиеВетки;
			
			Если ПомещениеЗапрещено <> Неопределено И ПомещениеЗапрещено Тогда
				ТекстСообщения = НСтр("ru='Для ветки %Ветка% запрещено помещение изменений напрямую в ветку. Укажите другую ветку.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", СтрокаТЧ.ВеткаИсправления);
				
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
				                                                                  СтрокаТЧ.НомерСтроки,
				                                                                  "ВеткаИсправления");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
				
				Отказ =  Истина;
			КонецЕсли;
			
			// Проверка даты обнаружения и исправления
			Если ЗначениеЗаполнено(СтрокаТЧ.ДатаПривнесения) Тогда
				ДатаПривнесения = СтрокаТЧ.ДатаПривнесения;
			Иначе
				ДатаПривнесения = ДатаОбнаруженияОшибки;
			КонецЕсли;
			
			Если ДатаПривнесения > СтрокаТЧ.ДатаИсправления Тогда
				ТекстСообщения = НСтр("ru='Дата исправления в ветке %Ветка% ранее даты Обнаружения. Необходимо указать корректные даты.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", СтрокаТЧ.Ветка);
					
				ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
					                                                              СтрокаТЧ.НомерСтроки,
					                                                              "ДатаИсправления");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
					
				Отказ =  Истина;
			КонецЕсли;
			
			// Проверка даты исправления и помещения
			Если ЗначениеЗаполнено(СтрокаТЧ.Ветка) И СтрокаТЧ.Ветка <> СтрокаТЧ.ВеткаИсправления Тогда
				
				ДатаПомещенияВетки = РеквизитыВетки.ДатаПомещения;
				Если ДатаПомещенияВетки = Неопределено Тогда
					ДатаПомещенияВетки = '00010101';
				КОнецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.ДатаИсправления)
					И СтрокаТЧ.ДатаИсправления >= ДатаПомещенияВетки И ЗначениеЗаполнено(ДатаПомещенияВетки) Тогда
					
					ТекстСообщения = НСтр("ru='Дата помещения ветки %Ветка% ранее даты исправления. Необходимо указать корректную ветку, или дату исправления.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", СтрокаТЧ.ВеткаИсправления);
					
					ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
					                                                                  СтрокаТЧ.НомерСтроки,
					                                                                  "ВеткаИсправления");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
					
					Отказ =  Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУказаниеСостоянияИсправленияДляВеток(Отказ)
	
	Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
		// Для проверенных ошибок по всем веткам должно быть принято решение об исправлении, или отсутствии необходимости в этом
		Если (Проверена ИЛИ Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена
			  ИЛИ (Статус = Перечисления.СтатусыОшибок.Закрыта И Исправлена))
			  И СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
			
			ТекстСообщения = НСтр("ru='В строке %НомерСтроки% списка ""Исправление в ветках"" указано неверное состояние исправления. Для проверенной ошибки следует отметить исправление, или указать, что исправление не планируется'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
			                                                                  СтрокаТЧ.НомерСтроки,
			                                                                  "СостояниеИсправления");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
			
			Отказ =  Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДанныеПоВеткеВерсииИсправления(Отказ)
	
	Если ЗначениеЗаполнено(ВерсияИсправления) Тогда
		
		ВеткаВерсииИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияИсправления, "Ветка");
		
		Если ЗначениеЗаполнено(ВеткаВерсииИсправления) Тогда
			
			СтруктураОтбора = Новый Структура("Ветка", ВеткаВерсииИсправления);
			СтрокиВетки = ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
			
			Если СтрокиВетки.Количество()>0 Тогда
				СтрокаВетки = СтрокиВетки[0];
				
				Если Исправлена ИЛИ Статус = Перечисления.СтатусыОшибок.Исправлена Тогда
					Если СтрокаВетки.СостояниеИсправления <> Перечисления.СостоянияИсправленияОшибок.Исправлена Тогда
						ТекстСообщения = НСтр("ru='Для исправленной ошибки в строке %НомерСтроки% с веткой версии исправления %Ветка% списка ""Исправление в ветках"" не отмечено исправление.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", СтрокаВетки.Ветка);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаВетки.НомерСтроки);
						
						ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
				                                                                  СтрокаВетки.НомерСтроки,
				                                                                  "СостояниеИсправления");
				
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
				
						Отказ =  Истина;
					КонецЕсли;
				Иначе
					Если СтрокаВетки.СостояниеИсправления <> Перечисления.СостоянияИсправленияОшибок.ТребуетсяИсправление Тогда
						ТекстСообщения = НСтр("ru='Для ошибки, требующей исправления, в строке %НомерСтроки% с веткой версии исправления %Ветка% списка ""Исправление в ветках"" указано неверное состояние исправления. Необходимо указать ""Требуется исправить""'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", СтрокаВетки.Ветка);
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаВетки.НомерСтроки);
						
						ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИсправлениеВВетках",
				                                                                  СтрокаВетки.НомерСтроки,
				                                                                  "СостояниеИсправления");
				
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
				
						Отказ =  Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru='В списке веток для исправления отсутствует ветка основной версии исправления %Ветка%.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", ВеткаВерсииИсправления);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеАктуальныхВетокДляИсправления(Отказ)
	
	ЕстьОшибки = Ложь;
	
	ВеткиДляИсправления = Справочники.Ошибки.ВеткиДляИсправленияОшибки(Владелец,
	                          ВерсияИсправления,
	                          Обнаружена,
	                          СборкаОбнаружения,
	                          ВеткаОбнаружения,
	                          ДатаОбнаружения);
	
	Для Каждого СтрокаВетки из ВеткиДляИсправления Цикл
		
		Если СтрокаВетки.ДатаСоздания > ДатаПроверки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИсправлениеВВетках.Найти(СтрокаВетки.Ветка) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='В списке ""Исправление в ветках"" отсутствует ветка %Ветка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ветка%", СтрокаВетки.Ветка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
			
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = НСтр("ru='Для исправления выполните заполнение списка веток в ошибке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ИзмененыКлючевыеРеквизитыДляАнализаВеток()
	
	Если ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Ошибки.Обнаружена КАК Обнаружена,
	|	Ошибки.ВеткаОбнаружения КАК ВеткаОбнаружения,
	|	Ошибки.СборкаОбнаружения КАК СборкаОбнаружения,
	|	Ошибки.ВерсияИсправления КАК ВерсияИсправления,
	|	Ошибки.Проверена КАК Проверена,
	|	Ошибки.Статус КАК Статус,
	|	Ошибки.ИсправлениеВВетках.(
	|		Ветка КАК Ветка,
	|		СостояниеИсправления КАК СостояниеИсправления
	|	) КАК ИсправлениеВВетках
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Ложь;
	
	Если Выборка.Следующий() Тогда
		
		Если (Проверена И НЕ Выборка.Проверена)
			ИЛИ (Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена И Статус <> Выборка.Статус)
			ИЛИ (Статус = Перечисления.СтатусыОшибок.Закрыта И Исправлена И Статус <> Выборка.Статус
			     И Выборка.Статус <> Перечисления.СтатусыОшибок.ПроверенаИсправлена)
			ИЛИ (Обнаружена <> Выборка.Обнаружена)
			ИЛИ (ВеткаОбнаружения <> Выборка.ВеткаОбнаружения)
			ИЛИ (СборкаОбнаружения <> Выборка.СборкаОбнаружения)
			ИЛИ (ВерсияИсправления <> Выборка.ВерсияИсправления) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		ТаблицаДоЗаписи = Выборка.ИсправлениеВВетках.Выгрузить();
		
		Для Каждого СтрокаТаблицыДоЗаписи из ТаблицаДоЗаписи Цикл
			Если ИсправлениеВВетках.Найти(СтрокаТаблицыДоЗаписи.Ветка, "Ветка") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
			Если ТаблицаДоЗаписи.Найти(СтрокаТЧ.Ветка, "Ветка") = Неопределено Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИзмененыКлючевыеРеквизитыДляАнализаКорректностиВерсииИсправления(УчитыватьИзменениеОбнаружения)
	
	Если ЭтоНовый() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Ошибки.Исправлена КАК Исправлена,
	|	Ошибки.Проверена КАК Проверена,
	|   Ошибки.Статус КАК Статус,
	|	Ошибки.Исправляется КАК Исправляется,
	|	Ошибки.ВерсияИсправления КАК ВерсияИсправления,
	|	Ошибки.Обнаружена КАК Обнаружена,
	|	Ошибки.СборкаОбнаружения КАК СборкаОбнаружения,
	|	Ошибки.ВеткаОбнаружения КАК ВеткаОбнаружения
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Ложь;
	
	Если Выборка.Следующий() Тогда
		
		ИзмененоОбнаружение = (Обнаружена <> Выборка.Обнаружена)
			ИЛИ (СборкаОбнаружения <> Выборка.СборкаОбнаружения)
			ИЛИ (ВеткаОбнаружения <> Выборка.ВеткаОбнаружения);
		
		Если (Проверена И НЕ Выборка.Проверена)
			ИЛИ (Статус = Перечисления.СтатусыОшибок.ПроверенаИсправлена И Статус <> Выборка.Статус)
			ИЛИ (Статус = Перечисления.СтатусыОшибок.Закрыта И Исправлена И Статус <> Выборка.Статус
			     И Выборка.Статус <> Перечисления.СтатусыОшибок.ПроверенаИсправлена)
			ИЛИ (Исправлена И НЕ Выборка.Исправлена)
			ИЛИ (Статус = Перечисления.СтатусыОшибок.Исправлена И Статус <> Выборка.Статус)
			ИЛИ (Статус = Перечисления.СтатусыОшибок.Закрыта И Признана И Статус <> Выборка.Статус
			     И Выборка.Статус <> Перечисления.СтатусыОшибок.ПроверенаИсправлена
			     И Выборка.Статус <> Перечисления.СтатусыОшибок.Исправлена)
			ИЛИ (Исправляется <> Выборка.Исправляется)
			ИЛИ (Выборка.Исправлена И ВерсияИсправления <> Выборка.ВерсияИсправления)
			ИЛИ (УчитыватьИзменениеОбнаружения И ИзмененоОбнаружение) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьОчиститьВеткуИсправления()
	
	Если Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения
		И Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		
		Если ЗначениеЗаполнено(ВеткаИсправления) Тогда
			ВеткаИсправления = Справочники.Ветки.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеВеткиИсправленияНаВозможностьПомещения(Отказ)
	
	Если Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения
		И Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта
		ИЛИ НЕ ЗначениеЗаполнено(ВеткаИсправления) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрещеноПомещениеВВетку = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаИсправления, "ИзмененияПомещаютсяТолькоЧерезДругиеВетки");
	
	Если ЗапрещеноПомещениеВВетку Тогда
		ТекстСообщения = НСтр("ru='Для ветки исправления запрещено помещение изменений напрямую в ветку. Укажите другую ветку исправления.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВеткаИсправления");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеВерсииИсправленияПриИсправленииТолькоВОсновнойВетке(Отказ)
	
	Если (Статус <> Перечисления.СтатусыОшибок.Исправлена И Статус <> Перечисления.СтатусыОшибок.ПроверенаИсправлена
		  И Статус <> Перечисления.СтатусыОшибок.Закрыта)
		ИЛИ Отозвана ИЛИ Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияИсправления) 
		И ИзмененыКлючевыеРеквизитыДляАнализаКорректностиВерсииИсправления(Ложь) Тогда
		
		ДанныеВетки = ДанныеВеткиВерсии(ВерсияИсправления);
		
		ВеткаУказанаВерно = (ДанныеВетки.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта)
			ИЛИ (ДанныеВетки.Тип = Перечисления.ТипыВеток.ВеткаВерсии)
			И (ДанныеВетки.ТипИсточника = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта)
			И (ДанныеВетки.ДатаСоздания > ДатаИсправления);
		
		Если НЕ ВеткаУказанаВерно Тогда
			ТекстСообщения = НСтр("ru='Для ошибок, исправляемых только в основной ветке проекта, должна быть указана версия исправления, разрабатываемая в основной ветке проекта. Измените версию исправления (при наличии соответствующих прав), или вариант исправления ошибки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВерсияИсправления");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказаниеВерсииИсправленияПриИсправленииТолькоВВеткеОбнаружения(Отказ)
	
	Если (Статус <> Перечисления.СтатусыОшибок.Исправлена И Статус <> Перечисления.СтатусыОшибок.ПроверенаИсправлена
		  И Статус <> Перечисления.СтатусыОшибок.Закрыта)
		ИЛИ Отозвана ИЛИ Исправляется <> Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияИсправления) 
		И ИзмененыКлючевыеРеквизитыДляАнализаКорректностиВерсииИсправления(Истина) Тогда
		
		Если Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке Тогда
			
			ВеткаОбнаруженияОшибки = ВеткаОбнаружения;
			
		ИначеЕсли Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВСборке Тогда
			
			Если ЗначениеЗаполнено(СборкаОбнаружения) Тогда
				ВеткаОбнаруженияОшибки = Справочники.Ошибки.ВеткаПоСборке(СборкаОбнаружения);
			Иначе
				ВеткаОбнаруженияОшибки = Справочники.Ветки.ПустаяСсылка();
			КонецЕсли;
			
		Иначе
			ВеткаОбнаруженияОшибки = Справочники.Ветки.ПустаяСсылка();
		КонецЕсли;
		
	    ПриемникВеткиОбнаружения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаОбнаруженияОшибки, "Приемник");
		
		ДанныеВеткиИсправления = Справочники.Ошибки.ДанныеВеткиВерсии(ВерсияИсправления);
		
		ВеткаСоответствуетОбнаружению = (ДанныеВеткиИсправления.Ветка = ВеткаОбнаруженияОшибки
			ИЛИ ПриемникВеткиОбнаружения = ДанныеВеткиИсправления.Ветка);
		
		Если НЕ ВеткаСоответствуетОбнаружению Тогда
			ТекстСообщения = НСтр("ru='Для ошибок, исправляемых только в ветке обнаружения, должна быть указана версия исправления, разрабатываемая в ветке обнаружения, либо ветка, в которую помещается ветка обнаружения. Измените версию исправления, или вариант исправления ошибки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВерсияИсправления");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзПовторяющейОшибки(ПовторяющаяОшибка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ошибки.Наименование КАК Наименование,
	|	Ошибки.ИнформационнаяБазаДляВоспроизведения КАК ИнформационнаяБазаДляВоспроизведения,
	|	Ошибки.ИсходнаяИнформацияОбОшибке КАК ИсходнаяИнформацияОбОшибке,
	|	Ошибки.Клиент КАК Клиент,
	|	Ошибки.КодОбращения КАК КодОбращения,
	|	Ошибки.ПорядокВоспроизведения КАК ПорядокВоспроизведения,
	|	Ошибки.СУБД КАК СУБД,
	|	Ошибки.ХранилищеИсходнойИнформацииОбОшибке КАК ХранилищеИсходнойИнформацииОбОшибке,
	|	Ошибки.ХранилищеПорядкаВоспроизведения КАК ХранилищеПорядкаВоспроизведения,
	|	Ошибки.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников КАК ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников,
	|	Ошибки.СтатусПубликации КАК СтатусПубликации
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ПовторяющаяОшибка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка,,"ХранилищеИсходнойИнформацииОбОшибке,ХранилищеПорядкаВоспроизведения");
		ХранилищеИсходнойИнформацииОбОшибке = Новый ХранилищеЗначения(Выборка.ХранилищеИсходнойИнформацииОбОшибке.Получить());
		ХранилищеПорядкаВоспроизведения = Новый ХранилищеЗначения(Выборка.ХранилищеПорядкаВоспроизведения.Получить());
		
		Основание = ПовторяющаяОшибка;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеВеткиВерсии(Версия)
	
	Результат = Новый Структура;
	Результат.Вставить("Тип", Неопределено);
	Результат.Вставить("ДатаСоздания", '00010101');
	Результат.Вставить("ТипИсточника", Неопределено);
	
	Если НЕ ЗначениеЗаполнено(Версия) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Ветки.Ссылка КАК Ветка,
	|	Ветки.Тип КАК Тип,
	|	Ветки.ДатаСоздания КАК ДатаСоздания,
	|	Ветки.Источник.Тип КАК ТипИсточника
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Ветки КАК Ветки
	|		ПО ВерсииПроекта.Ветка = Ветки.Ссылка
	|ГДЕ
	|	ВерсииПроекта.Ссылка = &Версия"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Версия", Версия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат.Вставить("Тип", Выборка.Тип);
		Результат.Вставить("ДатаСоздания", Выборка.ДатаСоздания);
		Результат.Вставить("ТипИсточника", Выборка.ТипИсточника);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьВозможностьИзмененияСрокаОтработки(РеквизитыДоЗаписи, ЕстьПравоПланирования, Отказ)

	Если РеквизитыДоЗаписи.СрокОтработки <> СрокОтработки Тогда
		
		Если НЕ ЕстьПравоПланирования И НЕ ДополнительныеСвойства.Свойство("ЗаписьВФорме") Тогда
			Отказ = Истина;
			ТекстСообщения = 
			НСтр("ru='Текущему пользователю запрещено изменять в ошибке реквизит ""Срок отработки"".'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияСтатусаПубликации(РеквизитыДоЗаписи, Отказ)

	ДоступноИзменениеСтатусаПубликации = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеСтатусаПубликацииОшибок", Владелец);
	
	Если РеквизитыДоЗаписи.СтатусПубликации <> СтатусПубликации Тогда
		
		Если НЕ ДоступноИзменениеСтатусаПубликации И НЕ ДополнительныеСвойства.Свойство("ЗаписьВФорме") Тогда
			Отказ = Истина;
			ТекстСообщения = 
				НСтр("ru='Текущему пользователю запрещено изменять в ошибке реквизит ""Статус публикации"".'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияОтветственногоЗаРаздел(РеквизитыДоЗаписи, ЕстьПравоПланирования, Отказ)

	Если РеквизитыДоЗаписи.ОтветственныйЗаРаздел <> ОтветственныйЗаРаздел Тогда
		
		Если НЕ ЕстьПравоПланирования И НЕ ДополнительныеСвойства.Свойство("ЗаписьВФорме") И Исправлена Тогда
			Отказ = Истина;
			ТекстСообщения = 
				НСтр("ru='Текущему пользователю запрещено изменять в ошибке реквизит ""Ответственный за раздел проекта"".'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьУстановкиСтатусаИсправлениеНеПланируется(РеквизитыДоЗаписи, Отказ)

	Если (РеквизитыДоЗаписи.НеПланируетсяИсправлять <> НеПланируетсяИсправлять И НеПланируетсяИсправлять)
		ИЛИ (РеквизитыДоЗаписи.Статус <> Статус И Статус = Перечисления.СтатусыОшибок.НеПланируетсяИсправлять) Тогда
			
		Отказ = Истина;
		ТекстСообщения = 
		    НСтр("ru='Текущему пользователю запрещено устанавливать в ошибке статус ""Не планируется исправлять"".'");
		ВызватьИсключение(ТекстСообщения);
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьВозможностьУстановкиСостоянийИсправлениеНеПланируетсяИлиВОтдельнойОшибке(РеквизитыДоЗаписи, Отказ)

	ВеткиДляИсправления = Справочники.Ошибки.ВеткиДляИсправленияОшибки(Владелец,
		                                                               ВерсияИсправления,
																	   Обнаружена,
																	   СборкаОбнаружения,
																	   ВеткаОбнаружения,
																	   ДатаОбнаружения);
																		   
	Для Каждого СтрокаТЧ из ИсправлениеВВетках Цикл
			
		Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
			ИЛИ СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправляетсяВОтдельнойОшибке Тогда
				
			ИсправленияДляВеткиМожноНеПланировать = Ложь;
			
			СтруктураОтбора = Новый Структура("Ветка", СтрокаТЧ.Ветка);
			
			СтрокиВетокДляИсправления = ВеткиДляИсправления.НайтиСтроки(СтруктураОтбора);
			Если СтрокиВетокДляИсправления.Количество()>0 Тогда
				
				СтрокаВетки = СтрокиВетокДляИсправления[0];
				
				Если СтрокаВетки.ТипВетки = Перечисления.ТипыВеток.ВеткаВерсии И СтрокаВетки.ВеткаРанееВерсииИсправления Тогда
					ИсправленияДляВеткиМожноНеПланировать = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокиТаблицы = РеквизитыДоЗаписи.ИсправлениеВВетках.НайтиСтроки(СтруктураОтбора);
				
			Если СтрокиТаблицы.Количество()=0 Тогда
					
				// Если добавлены новые строки
					
				Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
					И НЕ ИсправленияДляВеткиМожноНеПланировать Тогда
				    Отказ = Истина;
					ТекстСообщения = 
					    НСтр("ru='Текущему пользователю запрещено устанавливать в ошибке состояния исправления в ветках ""Не планируется исправлять"".'");
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
					
				Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправляетсяВОтдельнойОшибке Тогда
				    Отказ = Истина;
					ТекстСообщения = 
					    НСтр("ru='Текущему пользователю запрещено устанавливать в ошибке состояния исправления в ветках ""Исправляется в отдельной ошибке"".'");
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
					
			КонецЕсли;
				
			Для Каждого СтрокаТаблицы из СтрокиТаблицы Цикл
					
				Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
					И СтрокаТаблицы.СостояниеИсправления <> Перечисления.СостоянияИсправленияОшибок.ИсправлениеНеПланируется
					И НЕ ИсправленияДляВеткиМожноНеПланировать Тогда
					Отказ = Истина;
					ТекстСообщения = 
					    НСтр("ru='Текущему пользователю запрещено устанавливать в ошибке состояния исправления в ветках ""Не планируется исправлять"".'");
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
					
				Если СтрокаТЧ.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.ИсправляетсяВОтдельнойОшибке
					И СтрокаТаблицы.СостояниеИсправления <> Перечисления.СостоянияИсправленияОшибок.ИсправляетсяВОтдельнойОшибке Тогда
					Отказ = Истина;
					ТекстСообщения = 
					    НСтр("ru='Текущему пользователю запрещено устанавливать в ошибке состояния исправления в ветках ""Исправляется в отдельной ошибке"".'");
					ВызватьИсключение(ТекстСообщения);
				КонецЕсли;
					
			КонецЦикла;
				
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьВозможностьОтзыва(РеквизитыДоЗаписи, ТекущийПользователь, Отказ)

	Если Отозвана И (РеквизитыДоЗаписи.Отозвана <> Отозвана) Тогда
		
		ЕстьПравоОтзыва = УправлениеДоступомСППР.РольДоступнаПоПроекту("ОтзывОшибок", Владелец);
		
		АвторамРазрешенОтзывОшибки = Справочники.Ошибки.АвторамРазрешенОтзывОшибки(Владелец, ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников); 
		
		Если ТекущийПользователь = Зарегистрировал
			ИЛИ (НЕ Зарегистрирована И Автор = ТекущийПользователь) Тогда
			
			ПользовательЯвляетсяОтзывающим = Истина;
		Иначе
			ПользовательЯвляетсяОтзывающим = Ложь;
		КонецЕсли;
		
		ПользовательЗамещаетОтзывающего = Ложь;
		
		Если НЕ ПользовательЯвляетсяОтзывающим И АвторамРазрешенОтзывОшибки Тогда
			
			ЗамещаемыйПользователь = Справочники.Пользователи.ПустаяСсылка();
			
			Если Зарегистрирована Тогда
				ЗамещаемыйПользователь = Зарегистрировал;
			Иначе
				ЗамещаемыйПользователь = Автор;
			КонецЕсли;
			
			// Если настроено замещение, то подставляется замещающий
			Если ЗначениеЗаполнено(ЗамещаемыйПользователь) Тогда
				
				ДанныеОЗамещении = Справочники.Ошибки.ДанныеОЗамещенииПользователяВРаботеСОшибками(ЗамещаемыйПользователь, Владелец);
				
				Если ЗначениеЗаполнено(ДанныеОЗамещении.ЗамещающийПользователь) Тогда
					Если ДанныеОЗамещении.ЗамещающийПользователь = ТекущийПользователь Тогда
						ПользовательЗамещаетОтзывающего = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЕстьПравоОтзыва
			И (НЕ ПользовательЯвляетсяОтзывающим ИЛИ ПользовательЯвляетсяОтзывающим И НЕ АвторамРазрешенОтзывОшибки)
			И НЕ ПользовательЗамещаетОтзывающего Тогда
			Отказ = Истина;
			
			Если АвторамРазрешенОтзывОшибки Тогда
				ТекстСообщения = НСтр("ru='Текущему пользователю запрещено отзывать ошибку. Отозвать ошибку может пользователь, зарегистрировавший ошибку, или пользователь, обладающий правом отзыва ошибок.'");
			Иначе
				ТекстСообщения = НСтр("ru='Текущему пользователю запрещено отзывать ошибку. Отозвать ошибку может пользователь, обладающий правом отзыва ошибок.'");
			КонецЕсли;
				
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияМестаОбнаружения(РеквизитыДоЗаписи, ТекущийПользователь, Отказ)

	// Права на изменения места обнаружения проверяются по проекту ДО изменения реквизитов
	ДоступноИзменениеМестаОбнаружения = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеМестаОбнаруженияОшибок", РеквизитыДоЗаписи.Владелец);
		
	// Автор ошибки может изменять место обнаружения, но не может изменять владельца
	Если НЕ ДоступноИзменениеМестаОбнаружения 
			И (РеквизитыДоЗаписи.Владелец <> Владелец
			ИЛИ (НЕ Автор = ТекущийПользователь
			И (РеквизитыДоЗаписи.Обнаружена <> Обнаружена
				ИЛИ (Обнаружена = Перечисления.МестаОбнаруженияОшибок.ВВетке И РеквизитыДоЗаписи.ВеткаОбнаружения <> ВеткаОбнаружения)))) Тогда 
       	Отказ = Истина;
		ТекстСообщения = 
				НСтр("ru='Текущему пользователю запрещено изменять место обнаружения. Изменить место обнаружения может пользователь с соответствующими правами.'");
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли