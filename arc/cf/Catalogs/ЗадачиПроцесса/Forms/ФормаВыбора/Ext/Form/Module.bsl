#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборПредмет.ТолькоПросмотр = Параметры.БыстрыйОтборПоПредметуНедоступен;
	
	ЗаполнитьСписокНедоступныхДляВыбораЗадач();
	
	УстановитьУсловноеОформление();
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ЗадачиПроцессов.СформироватьПодменюПоВидуРесурса(ЭтотОбъект);
	ЗадачиПроцессов.УстановитьПараметрыДинамическогоСпискаЗадач(Список, ВидСогласуемогоРесурсаДляВывода);
	
	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуРесурса(ЭтотОбъект);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "Состояние",
	                                                                           СостояниеОтбор,
	                                                                           СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "Исполнитель",
	                                                                           Исполнитель,
	                                                                           СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "Предмет",
	                                                                           Предмет,
	                                                                           СтруктураБыстрогоОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Состояние",
	                                                                          "СостояниеОтбор",
	                                                                          СостояниеОтбор,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки,,
	                                                                          ВидСравненияКомпоновкиДанных.ВСписке);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Исполнитель",
	                                                                          "Исполнитель",
	                                                                           Исполнитель,
	                                                                           СтруктураБыстрогоОтбора, 
	                                                                           Настройки);

	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Предмет",
                                                                              "Предмет",
	                                                                          Предмет,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаПроцесса" Тогда
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы")
		И ВладелецФормы.ТекущиеДанные <> Неопределено 
		И ВладелецФормы.ТекущиеДанные.Свойство("Предмет")
		И ЗначениеЗаполнено(ВладелецФормы.ТекущиеДанные.Предмет) Тогда
		
		Предмет = ВладелецФормы.ТекущиеДанные.Предмет;
		Элементы.ОтборПредмет.ТолькоПросмотр = Истина;
		ОтборПредметПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           СостояниеОтбор,
	                                                           Тип("ПеречислениеСсылка.СостоянияЗадачПроцессов"),
	                                                           НСтр("ru = 'Выбранные состояния'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Исполнитель",
	                                                                        Исполнитель,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Исполнитель));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредметПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Предмет",
	                                                                        Предмет,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Предмет));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено  Тогда
		
		ЗадачаДляКоторойСформированПредпросмотр = Неопределено;
		ОписаниеЗадачи = Неопределено;
		
	Иначе
		
		Если ЗадачаДляКоторойСформированПредпросмотр <> ТекущиеДанные.Ссылка Тогда
			
			Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
				
				ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка",0.1,Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда)
	
	ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено  Тогда
		
		ЗадачаДляКоторойСформированПредпросмотр = Неопределено;
		ОписаниеЗадачи = Неопределено;
		
	Иначе
		ОтобразитьПредпросмотрЗадачи(ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьПредпросмотрЗадачи(ЗадачаПроцесса)

	ЗадачаОбъект = ЗадачаПроцесса.ПолучитьОбъект();
	ДанныеХранилища = ЗадачаОбъект.Описание.Получить();
	Если ТипЗнч(ДанныеХранилища) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЗадачи = ДанныеХранилища;
	Иначе
		ОписаниеЗадачи = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПоляСостояниеВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПолейДатаВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеСостоянияСогласования(СписокУсловноеОформление);
	
	// Выделение цветом состояния в зеленой зоне
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение серым недоступных для выбора задач.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение  = НедоступныеДляВыбораЗадачи;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступнаяДляВыбораЗадача);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокНедоступныхДляВыбораЗадач()
	
	Если Не Параметры.Свойство("ПараметрыВыбораЗадачи") 
		Или Не ТипЗнч(Параметры.ПараметрыВыбораЗадачи) = Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяЗадача = Параметры.ПараметрыВыбораЗадачи.ТекущаяЗадача;
	
	Если ТекущаяЗадача <> Справочники.ЗадачиПроцесса.ПустаяСсылка() Тогда
		
		ТекстЗапроса = "";
		
		Если Параметры.ПараметрыВыбораЗадачи.ИсключатьВышестоящиеЗадачи Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ИерархияЗадачПроцесса.Родитель КАК ЗадачаПроцесса
			|ИЗ
			|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
			|ГДЕ
			|	ИерархияЗадачПроцесса.ЗадачаПроцесса = &ТекущаяЗадача
			|	И НЕ ИерархияЗадачПроцесса.Родитель = &ТекущаяЗадача";
			
		КонецЕсли;
		
		Если Параметры.ПараметрыВыбораЗадачи.ИсключатьПодчиненныеЗадачи Тогда
			
			Если Не ПустаяСтрока(ТекстЗапроса) Тогда
				ТекстЗапроса = ТекстЗапроса + ЗадачиПроцессов.ТекстЗапросаОбъединитьВсе();
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК ЗадачаПроцесса
			|ИЗ
			|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
			|ГДЕ
			|	ИерархияЗадачПроцесса.Родитель = &ТекущаяЗадача
			|	И НЕ ИерархияЗадачПроцесса.ЗадачаПроцесса = &ТекущаяЗадача";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТекущаяЗадача", ТекущаяЗадача);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НедоступныеДляВыбораЗадачи.Добавить(Выборка.ЗадачаПроцесса);
		КонецЦикла;
		
		НедоступныеДляВыбораЗадачи.Добавить(ТекущаяЗадача);
		
	КонецЕсли;
	
	Для Каждого УжеПодобраннаяЗадача Из Параметры.ПараметрыВыбораЗадачи.УжеПодобранныеЗадачи Цикл
		
		НедоступныеДляВыбораЗадачи.Добавить(УжеПодобраннаяЗадача);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НедоступныеДляВыбораЗадачи.НайтиПоЗначению(ВыбраннаяСтрока) <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ИмяКоманды)

	ЗадачиПроцессов.ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ЭтотОбъект, ИмяКоманды);

КонецПроцедуры

&НаКлиенте
Процедура ФормаМножественногоОтбораПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Элемент") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ОтборСостояние Тогда
		
		СостояниеОтбор = Результат;
		УстановитьОтборСостояние();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСостояние()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Состояние",
	                                                                        СостояниеОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        СостояниеОтбор.Количество() > 0);

КонецПроцедуры 

#КонецОбласти
