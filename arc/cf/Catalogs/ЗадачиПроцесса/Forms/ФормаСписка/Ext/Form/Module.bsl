
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОчередиЗадач") Тогда
		Элементы.СтраницыФормы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаОчередь.Видимость = Ложь;
	КонецЕсли;
	
	ЗадачиПроцессов.СформироватьПодменюПоВидуРесурса(ЭтотОбъект);
	
	УстановленОтбор = Ложь;
	
	Если Параметры.Свойство("ТипСвязанныхЗадач")
		И Параметры.Свойство("ТекущаяЗадача")
		И ЗначениеЗаполнено(Параметры.ТекущаяЗадача) Тогда
		
		Если Параметры.ТипСвязанныхЗадач = "Последующие" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЗадачиПроцессаПредшествующиеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
			|		ПО ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = ЗадачиПроцесса.Ссылка
			|ГДЕ
			|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Параметры.ТекущаяЗадача);
			
			СписокЗадач = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Список, 
				"Ссылка",
				СписокЗадач, 
				ВидСравненияКомпоновкиДанных.ВСписке, НСтр("ru = 'Последующие задачи'"),
				,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
			
			УстановленОтбор = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Отбор.Количество() > 0 
		Или УстановленОтбор Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	МассивИменСписков = МассивИменСписков();
	
	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуРесурса(ЭтотОбъект, МассивИменСписков);
	Для Каждого ИмяСписка Из МассивИменСписков() Цикл
		ЗадачиПроцессов.УстановитьПараметрыДинамическогоСпискаЗадач(ЭтотОбъект[ИмяСписка], ВидСогласуемогоРесурсаДляВывода);
	КонецЦикла;
	
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                      "Состояние",
	                                                                      "СостояниеОтбор",
	                                                                      СостояниеОтбор,
	                                                                      СтруктураБыстрогоОтбора,,
	                                                                      ВидСравненияКомпоновкиДанных.ВСписке);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "Исполнитель",
	                                                                           Исполнитель,
	                                                                           СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "ТипПредмета",
	                                                                           ТипПредмета,
	                                                                           СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "Направлена",
	                                                                           Направлена,
	                                                                           СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "ЗонаСоблюденияСроков",
	                                                                           ЗонаСоблюденияСроковОтбор,
	                                                                           СтруктураБыстрогоОтбора);
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандКонтроля = Новый Массив;
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль"));
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"СписокОчередь", "СписокГруппаКонтрольОчередь", "СписокОчередьКонтекстноеМенюГруппаКонтроль"));
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(ЭтотОбъект, СпискиДляВыводаКомандКонтроля);
	// Конец ОбъектыНаКонтроле
	
	// Приоритеты
	СпискиДляВыводаКомандПриоритета = Новый Массив;
	СпискиДляВыводаКомандПриоритета.Добавить(
		ПриоритетыОчередиРабот.ДанныеСпискаДляВыводаКомандПриоритета(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль", "Приоритет"));
	СпискиДляВыводаКомандПриоритета.Добавить(
		ПриоритетыОчередиРабот.ДанныеСпискаДляВыводаКомандПриоритета(
		"СписокОчередь", "СписокГруппаКонтрольОчередь", "СписокОчередьКонтекстноеМенюГруппаКонтроль", "СписокОчередьПредмет"));
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеСписка(ЭтотОбъект, 
	                                                               СпискиДляВыводаКомандПриоритета, 
	                                                               Справочники.ЗадачиПроцесса.ПустаяСсылка());
	// Конец Приоритеты
	
	Если Параметры.Свойство("ЗадачаВОчереди") 
		И ЗначениеЗаполнено(Параметры.ЗадачаВОчереди) Тогда
		
		ИсполнительОчередь = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗадачаВОчереди, "Исполнитель");
		
		ПриИзмененииИсполнителяОчередь();
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОчередь;
		Элементы.СписокОчередь.ТекущаяСтрока = Параметры.ЗадачаВОчереди;
		
	ИначеЕсли Не ЗначениеЗаполнено(ИсполнительОчередь) Тогда
		
		ПриИзмененииИсполнителяОчередь();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Состояние",
	                                                                          "СостояниеОтбор",
	                                                                          СостояниеОтбор,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки,,
	                                                                          ВидСравненияКомпоновкиДанных.ВСписке);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Исполнитель",
	                                                                          "Исполнитель",
	                                                                           Исполнитель,
	                                                                           СтруктураБыстрогоОтбора, 
	                                                                           Настройки);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Направлена",
	                                                                          "Направлена",
	                                                                          Направлена,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "ЗонаСоблюденияСроков",
	                                                                          "ЗонаСоблюденияСроковОтбор",
	                                                                          ЗонаСоблюденияСроковОтбор,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки,,
	                                                                          ВидСравненияКомпоновкиДанных.ВСписке);
	
	Если Параметры.Свойство("ЗадачаВОчереди") 
		И ЗначениеЗаполнено(Параметры.ЗадачаВОчереди) Тогда
		
		Настройки.Удалить("ИсполнительОчередь");
		
	Иначе
		
		ИсполнительОчередь = Настройки.Получить("ИсполнительОчередь");
		
		Если ЗначениеЗаполнено(ИсполнительОчередь) Тогда
			ПриИзмененииИсполнителяОчередь();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаПроцесса"
		Или ИмяСобытия = "Запись_Приоритет" Тогда
		
		Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
			Элементы.Список.Обновить();
		ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОчередь Тогда
			Элементы.СписокОчередь.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           СостояниеОтбор,
	                                                           Тип("ПеречислениеСсылка.СостоянияЗадачПроцессов"),
	                                                           НСтр("ru = 'Выбранные состояния'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Исполнитель",
	                                                                        Исполнитель,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Исполнитель));

КонецПроцедуры

&НаКлиенте
Процедура ОтбррНаправленаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Направлена",
	                                                                        Направлена,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Направлена));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаСоблюденияСроковПриИзменении(Элемент)
	
	УстановитьОтборЗонаСоблюденияСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаСоблюденияСроковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           ЗонаСоблюденияСроковОтбор,
	                                                           Тип("ПеречислениеСсылка.ЗоныЗадач"),
	                                                           НСтр("ru = 'Выбранные зоны соблюдения сроков'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчередьПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
	ПриИзмененииИсполнителяОчередь();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОчередьПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОчередьПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПриоритетыОчередиРаботыКлиент.СписокОчередьПриПроверкеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОчередьПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПеретаскивания = ПриоритетыОчередиРаботыКлиент.ДанныеПеретаскиванияОчередьЗадач(Элемент,
	                                                                                      ПараметрыПеретаскивания, 
	                                                                                      СтандартнаяОбработка,
	                                                                                      Строка,
	                                                                                       Поле);
	
	Если Не ДанныеПеретаскивания.ПеретаскиваниеДопустимо Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПеретаскиваниеСтрокиНаСервере(ДанныеПеретаскивания.ДанныеПереносимойСтроки, ДанныеПеретаскивания.ДанныеСтрокиНазначения);
	Элементы.СписокОчередь.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Список

&НаКлиенте
Процедура Подключаемый_ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда)
	
	ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Запланировать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры 

&НаКлиенте
Процедура НаправитьНаПроверку(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКВыполнению(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичноСогласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласование(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьИсполнителямЗадачи(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителя(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Ознакомиться(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область ОчередьЗадач

&НаКлиенте
Процедура ПеренестиЗадачуВОчередиВниз(Команда)
	
	ПеренестиЗадачу("Вниз");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачуВОчередиВверх(Команда)
	
	ПеренестиЗадачу("Вверх");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ВыполнитьЗадачу", Элементы.СписокОчередь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОчередь(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Отменить", Элементы.СписокОчередь);

КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаПроверкуОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаПроверку", Элементы.СписокОчередь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Ответить", Элементы.СписокОчередь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Перенаправить", Элементы.СписокОчередь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКВыполнениюОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ПринятьКВыполнению", Элементы.СписокОчередь);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласованиеОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаСогласование", Элементы.СписокОчередь, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьИсполнителямЗадачиОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьИсполнителямЗадачи", Элементы.СписокОчередь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителяОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ИзменитьИсполнителя", Элементы.СписокОчередь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьсяОчередьЗадач(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Ознакомиться", Элементы.ОчередьЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенныеОчередьЗадач(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.ОчередьЗадач);
	
КонецПроцедуры

#КонецОбласти

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

// Приоритеты
&НаКлиенте
Процедура Подключаемый_УстановитьПриоритет(Команда)
	
	ПриоритетыОчередиРаботыКлиент.ВыполнитьКомандуИзмененияПриоритетаИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец Приоритеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПоляСостояниеВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПолейДатаВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеСостоянияСогласования(СписокУсловноеОформление);
	
	ПриоритетыОчередиРабот.УстановитьУсловноеОформлениеСписка(Список);
	
	СписокОчередьУсловноеОформление = СписокОчередь.КомпоновщикНастроек.Настройки.УсловноеОформление;
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПоляСостояниеВСписках(СписокОчередьУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПолейДатаВСписках(СписокОчередьУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеСостоянияСогласования(СписокОчередьУсловноеОформление);
	
	ПриоритетыОчередиРабот.УстановитьУсловноеОформлениеСписка(СписокОчередь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ИмяКоманды)

	ЗадачиПроцессов.ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ЭтотОбъект, ИмяКоманды);
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());

КонецПроцедуры

&НаКлиенте
Процедура ФормаМножественногоОтбораПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Элемент") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ОтборСостояние Тогда
		
		СостояниеОтбор = Результат;
		УстановитьОтборСостояние();
		
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ОтборЗонаСоблюденияСроков Тогда
		
		ЗонаСоблюденияСроковОтбор = Результат;
		УстановитьОтборЗонаСоблюденияСроков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСостояние()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Состояние",
	                                                                        СостояниеОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        СостояниеОтбор.Количество() > 0);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗонаСоблюденияСроков()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "ЗонаСоблюденияСроков",
	                                                                        ЗонаСоблюденияСроковОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        ЗонаСоблюденияСроковОтбор.Количество() > 0);

КонецПроцедуры

&НаСервере
Функция ПараметрыВидимостиКомандСписка()
	
	ПараметрыВидимости = Новый Структура;
	
	МассивИменКомандСогласования = Новый Массив;
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюЧастичноСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокЧастичноСогласовать");
	
	ПараметрыВидимости.Вставить("ЗависящиеОтВыбораХодаСогласования", МассивИменКомандСогласования);
	
	МассивИменКомандИзменения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИменКомандИзменения, МассивИменКомандСогласования);
	МассивИменКомандИзменения.Добавить("СписокПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокВыполнить");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюВыполнить");
	
	ПараметрыВидимости.Вставить("ЗависящиеОтПраваНаИзменение", МассивИменКомандИзменения); 
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("Согласовано");
	МассивИменКолонокСписка.Добавить("СогласованоВТекущей");
	МассивИменКолонокСписка.Добавить("СогласованоВДочерних");
	МассивИменКолонокСписка.Добавить("НаСогласовании");
	МассивИменКолонокСписка.Добавить("НаСогласованииВТекущей");
	МассивИменКолонокСписка.Добавить("НаСогласованииВДочерних");
	МассивИменКолонокСписка.Добавить("СогласованоПроцентВыполнения");
	МассивИменКолонокСписка.Добавить("ВыполняетсяСогласование");
	
	ПараметрыВидимости.Вставить("КолонкиСогласовавние", МассивИменКолонокСписка);
	
	Возврат ПараметрыВидимости;
	
КонецФункции

&НаСервере
Функция МассивИменСписков()
	
	МассивИменСписков = Новый Массив;
	МассивИменСписков.Добавить("Список");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОчередиЗадач") Тогда
		МассивИменСписков.Добавить("СписокОчередь");
	КонецЕсли;
	
	Возврат МассивИменСписков;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	Форма.Элементы.СписокОчередьПеренестиЗадачуВОчередиВверх.Доступность = ЗначениеЗаполнено(Форма.ИсполнительОчередь);
	Форма.Элементы.СписокОчередьПеренестиЗадачуВОчередиВниз.Доступность  = ЗначениеЗаполнено(Форма.ИсполнительОчередь);

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗадачу(Направление)

	Если ТипЗнч(Элементы.СписокОчередь.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПереносимойСтроки = Элементы.СписокОчередь.ТекущиеДанные;
	
	Если ДанныеПереносимойСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьПереносРаботыПоКомандеНаСервере(ДанныеПереносимойСтроки, Направление);
	
	Элементы.СписокОчередь.Обновить();

КонецПроцедуры

&НаСервере
Процедура ОбработатьПеретаскиваниеСтрокиНаСервере(ДанныеПереносимойСтроки, ДанныеСтрокиНазначения)
	
	ПриоритетыОчередиРабот.ОбработатьПеретаскиваниеСтроки(ИсполнительОчередь, ДанныеПереносимойСтроки, ДанныеСтрокиНазначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереносРаботыПоКомандеНаСервере(ДанныеПереносимойСтроки, ВариантПереноса)
	
	ПриоритетыОчередиРабот.ПеренестиЗадачуВОчередиПоКомандеИзСписка(ИсполнительОчередь, ДанныеПереносимойСтроки, ВариантПереноса);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИсполнителяОчередь()
	
	РегистрыСведений.ОчередиРаботСотрудников.УстановитьФорматПорядокНомерОчереди(ИсполнительОчередь, Элементы.СписокОчередьНомерВОчереди);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокОчередь,
		                                                               "Исполнитель",
		                                                               ИсполнительОчередь,
		                                                               Истина);

КонецПроцедуры


#КонецОбласти
