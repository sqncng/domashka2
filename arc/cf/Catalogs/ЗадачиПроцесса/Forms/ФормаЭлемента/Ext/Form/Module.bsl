
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВедетсяУчетВремени = ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени");
	
	Если Объект.Ссылка.Пустая() Тогда
		
		ПриСозданииЧтенииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	КонецЕсли;
	
	СписокПодчиненныхЗадачПриСозданииНаСервере();
	УчетВремени.НастроитьФормуДляУчетаЗатратВремени(ЭтаФорма);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительно");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Элементы.СтраницаДополнительно.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Элементы.СтраницыОписаниеДополнительно.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ИначеЕсли Элементы.СтраницаДополнительно.ПодчиненныеЭлементы.Количество() = 1
		И Элементы.СтраницаДополнительно.ПодчиненныеЭлементы[0].Имя = "ВидДеятельности" И НЕ ВедетсяУчетВремени Тогда
		Элементы.СтраницыОписаниеДополнительно.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ФормаГруппаДополнительныхКоманд;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандКонтроля = Новый Массив;
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль"));
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(ЭтотОбъект, 
	                                                                   СпискиДляВыводаКомандКонтроля);
	// Конец ОбъектыНаКонтроле
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандПриоритета = Новый Массив;
	СпискиДляВыводаКомандПриоритета.Добавить(
		ПриоритетыОчередиРабот.ДанныеСпискаДляВыводаКомандПриоритета(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль", "СписокПриоритет"));
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеСписка(ЭтотОбъект, 
	                                                               СпискиДляВыводаКомандПриоритета,
	                                                               Справочники.ЗадачиПроцесса.ПустаяСсылка(),
	                                                               ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(Объект.Предмет));
	// Конец ОбъектыНаКонтроле
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеХранилища = РедактируемыйОбъект.Описание.Получить();
	Если ТипЗнч(ДанныеХранилища) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЗадачи = ДанныеХранилища;
	Иначе
		ОписаниеЗадачи = Новый ФорматированныйДокумент;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ОбъектыНаКонтроле
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаОбъектыНаКонтроле");
	// Конец ОбъектыНаКонтроле
	
	// Приоритеты
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаОбъектыНаКонтроле");
	// Конец Приоритеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОтключитьОтметкуНезаполненного();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийИсполнительПорученияПоЗадаче = Объект.ИсполнительПорученияПоЗадаче;
	УстановитьДанныеШаблона();
	ОбновитьВсеСостоянияФормы();
	СформироватьТекстПротоколаВзаимодействия();
	ТекстПоручения = "";
	УстановитьПометкуПубликуется(ЭтотОбъект);
	
	УстановитьПараметрыСпискаПодчиненныхЗадач();
	
	УчетВремени.НастроитьКомандуХронометража(ЭтаФорма);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ОбъектыНаКонтроле
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаОбъектыНаКонтроле");
	// Конец ОбъектыНаКонтроле
	
	// Приоритеты
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаОбъектыНаКонтроле");
	// Конец Приоритеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Родитель", Объект.Родитель);
	Оповестить("Запись_ЗадачаПроцесса", ПараметрыОповещения , Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтатусПоСтрокеПротокола         = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка");
	НаправленаПоСтрокеПротокола     = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ПоследнееПоручениеПротокола     = "";
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗапланированоПоПользователям", ЗапланированоПоПользователям.Выгрузить()); 
	
	СогласованиеРесурсовЗадач = СогласующиеРесурсы.Выгрузить(, "ВидРесурса, Запланировано");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СогласованиеРесурсовЗадач",СогласованиеРесурсовЗадач);
	
	КоличествоСтрокПротокола = ТекущийОбъект.ПротоколВзаимодействия.Количество();
	Если КоличествоСтрокПротокола > 0  Тогда
		ПоследняяСтрока = ТекущийОбъект.ПротоколВзаимодействия.Получить(КоличествоСтрокПротокола - 1);
		СтатусПоСтрокеПротокола        = ПоследняяСтрока.Статус;
		НаправленаПоСтрокеПротокола    = ПоследняяСтрока.ИсполнительПоручения;
		ПоследнееПоручениеПротокола    = ПоследняяСтрока.ТекстПоручения;
	КонецЕсли;
	
	Если ТекущийОбъект.Статус <> СтатусПоСтрокеПротокола 
		Или ТекущийОбъект.ИсполнительПорученияПоЗадаче <> НаправленаПоСтрокеПротокола 
		Или (ПоследнееПоручениеПротокола <> ТекстПоручения И ТекстПоручения <> "") Тогда
		ДобавитьЗаписьВПротокол(ТекущийОбъект, ТекущийПользователь, ТекстПоручения);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.Описание = Новый ХранилищеЗначения(ОписаниеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаПроцесса" Тогда
		
		Если ЗначениеЗаполнено(Объект.Родитель) 
			И Объект.Родитель = Источник Тогда
			
			СохранитьРезультатыРедактированияОписанияЕслиНеобходимо();
			ОбновитьВсеСостоянияФормы();
			
		Иначе
			
			Если ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("Родитель")
				И Параметр.Родитель = Объект.Ссылка Тогда
				
				СохранитьРезультатыРедактированияОписанияЕслиНеобходимо();
				ОбновитьВсеСостоянияФормы();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Элементы.Список.Видимость = Истина Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПереключенХронометраж" Тогда
		УчетВремениКлиентСервер.ОбработатьПереключениеХронометража(Параметр, ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СтруктураБыстрогоОтбора = Неопределено;
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Состояние",
	                                                                          "СостояниеОтбор",
	                                                                          СостояниеОтбор,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки,,
	                                                                          ВидСравненияКомпоновкиДанных.ВСписке);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Исполнитель",
	                                                                          "Исполнитель",
	                                                                           ИсполнительОтборПодчиненные,
	                                                                           СтруктураБыстрогоОтбора, 
	                                                                           Настройки);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "ЗонаСоблюденияСроков",
	                                                                          "ЗонаСоблюденияСроковОтбор",
	                                                                          ЗонаСоблюденияСроковОтбор,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки,,
	                                                                          ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтролирующийПриИзменении(Элемент)
	
	ДополнитьСписокВыбораКомуНаправлена(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	ДополнитьСписокВыбораКомуНаправлена(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",                      Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыбора",               Истина);
	ПараметрыФормы.Вставить("ПараметрыВыбораЗадачи",            ПараметрыВыбораЗадачи());
	ПараметрыФормы.Вставить("БыстрыйОтборПоПредметуНедоступен", Истина);
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Родитель);
	КонецЕсли;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Предмет", Объект.Предмет);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОбработчикЗакрытияФормы = Новый ОписаниеОповещения("ФормаВыбораЗадачиПроцессаПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикЗакрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	ПриИзмененииРодителяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийСтатус = Объект.Статус;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПринятьКВыполнению" Тогда
		ПринятьЗадачуКВыполнению();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтметитьВыполнение" Тогда
		ВыполнитьТекущуюЗадачу()
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Запланировать" Тогда
		ЗапланироватьЗадачу();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "НаправитьНаПроверку" Тогда
		НаправитьЗадачуНаПроверку();
	КонецЕсли;
	
	ЗаписьВыполненаУспешно = Записать();
	Если Не ЗаписьВыполненаУспешно Тогда
		Объект.Статус = ТекущийСтатус;
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОчередьЗадачОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьЗадачуВОчереди" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗадачаВОчереди", ЗадачаВОчереди);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеЗадачиПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПредшествующиеЗадачи" Тогда
		
		ПараметрыФормы = Новый Структура;
		МассивПредшествующихЗадач = Новый Массив;
		Для Каждого СтрокаПредшествующаяЗадача Из Объект.ПредшествующиеЗадачи Цикл
			МассивПредшествующихЗадач.Добавить(СтрокаПредшествующаяЗадача.ПредшествующаяЗадача);
		КонецЦикла;
		ПараметрыФормы.Вставить("ПредшествующиеЗадачи", МассивПредшествующихЗадач);
		ПараметрыФормы.Вставить("ТекущаяЗадача",        Объект.Ссылка);
		ПараметрыФормы.Вставить("ЗадачаРодитель",       Объект.Родитель);
		ПараметрыФормы.Вставить("Предмет",              Объект.Предмет);
		ПараметрыФормы.Вставить("Доступность",          ПравоИзмененияСтруктурыЗадачиПоШаблону(ЭтотОбъект)
		                                                Или Не ЗначениеЗаполнено(Объект.ЗадачаШаблона));
		
		ОбработчикЗакрытияФормы = Новый ОписаниеОповещения("ПредшествующиеЗадачиПослеЗакрытия", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПредшествующиеЗадачи", ПараметрыФормы, ЭтотОбъект,,,,
		             ОбработчикЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодчиненныеЗадачи" Тогда
		
		ОткрытьПодчиненныеЗадачи();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоследующиеЗадачи" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяЗадача", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТипСвязанныхЗадач", "Последующие");
		
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("Исполнитель",          Неопределено);
		СтруктураБыстрогоОтбора.Вставить("Направлена",           Неопределено);
		СтруктураБыстрогоОтбора.Вставить("Состояние",            Неопределено);
		СтруктураБыстрогоОтбора.Вставить("ЗонаСоблюденияСроков", Неопределено);
		
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ФормаСписка", ПараметрыФормы,ЭтотОбъект, УникальныйИдентификатор,
		                                                           ,,, РежимОткрытияОкнаФормы.Независимый);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВзаимодействияHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСобытия.Href = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Найти(ДанныеСобытия.Href, "#СсылкаИзменить") > 0 Тогда
		
		Если Объект.ПротоколВзаимодействия.Количество() > 0 Тогда
			
			ИзменитьПоследнееПоручение();
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(ДанныеСобытия.Href);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыОтветаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОчиститьСообщения();
	
	СтандартнаяОбработка = Ложь;

	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки,"ОтветитьНаПоручение") > 0 Тогда
		
		Если ПустаяСтрока(ТекстПоручения) Тогда
			
			ТекстВопроса = НСтр("ru = 'Вы действительно хотите ответить пустым сообщением. Продолжить?'");
			ОписаниеОповещенияПослеВопросаОбПустомОтвете = Новый ОписаниеОповещения("ПослеВопросаОбПустомОтвете", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияПослеВопросаОбПустомОтвете, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ОтветитьНаПоручение();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки,"ОзнакомитьсяСПоручением") > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстПоручения) Тогда
			
			ТекстВопроса = НСтр("ru = 'При ознакомлении с поручением очищается текст введенного вами поручения. Продолжить?'");
			ОписаниеОповещенияПослеВопросаОбОзнакомлении = Новый ОписаниеОповещения("ПослеОтветаНаВопросОбОзнакомлении", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияПослеВопросаОбОзнакомлении, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		Иначе
			
			ОзнакомитьсяСПоручением();
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУкажитеПредметОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОбОкончанииВыбора = Новый ОписаниеОповещения("ВыборТипаПредметаПриЗавершении", ЭтотОбъект);
	
	ПоказатьВыборИзМеню(ОповещениеОбОкончанииВыбора, СписокТиповПредметов, Элементы.ДекорацияУкажитеПредмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияХодСогласованияОсновнойРесурсОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПриОбработкеНавигационнойСсылкиХодСогласования(НавигационнаяСсылкаФорматированнойСтроки);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияХодСогласованияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПриОбработкеНавигационнойСсылкиХодСогласования(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированоОсновнойРесурсПриИзменении(Элемент)
	
	ДанныеРесурса = ДанныеСогласованияОсновногоРесурса(ЭтотОбъект);
	
	Если ДанныеРесурса <> Неопределено Тогда
		ПриИзмененииЗапланировано(ДанныеРесурса, ЗапланированоОсновнойРесурс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПланРесурсПриИзменении(Элемент)

	КодВидаРесурса = КодВидаРесурсаПоПостфиксуСтроки(Элемент.Имя);
	
	ДанныеРесурса = ДанныеСогласованияРесурсаПоКодуРесурса(ЭтотОбъект, КодВидаРесурса);
	
	Если ДанныеРесурса <> Неопределено Тогда
		ПриИзмененииЗапланировано(ДанныеРесурса, ЭтотОбъект["ЗапланированоРесурс_" + КодВидаРесурса]);
	КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЕщеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаписьВыполненаУспешно = Записать();
		Если Не ЗаписьВыполненаУспешно Тогда
			Возврат;
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КодВидаРесурса = КодВидаРесурсаПоПостфиксуСтроки(НавигационнаяСсылкаФорматированнойСтроки);
	ДанныеРесурса  = ДанныеСогласованияРесурсаПоКодуРесурса(ЭтотОбъект, КодВидаРесурса);
	
	Если ДанныеРесурса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "СогласоватьВТекущей") Тогда
		СогласоватьВТекущей(ДанныеРесурсаСтруктурой(ДанныеРесурса));
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "СогласоватьВДочерних") Тогда
		СогласоватьВДочерних(ДанныеРесурсаСтруктурой(ДанныеРесурса));
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "СогласоватьИзБюджетаРодительской") Тогда
		СогласоватьИзБюджетаРодительской(ДанныеРесурсаСтруктурой(ДанныеРесурса));
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "НеСогласоватьВТекущей") Тогда
		НеСогласоватьВТекущей(ДанныеРесурсаСтруктурой(ДанныеРесурса));
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ЧастичноСогласоватьВТекущей") Тогда
		ПриНачалеЧастичногоСогласования(ДанныеРесурсаСтруктурой(ДанныеРесурса));
	КонецЕсли;
	
КонецПроцедуры

#Область СписокПодчиненныхЗадач

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборСостояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           СостояниеОтбор,
	                                                           Тип("ПеречислениеСсылка.СостоянияЗадачПроцессов"),
	                                                           НСтр("ru = 'Выбранные состояния'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Исполнитель",
	                                                                        ИсполнительОтборПодчиненные,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(ИсполнительОтборПодчиненные));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаСоблюденияСроковПриИзменении(Элемент)
	
	УстановитьОтборЗонаСоблюденияСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаСоблюденияСроковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           ЗонаСоблюденияСроковОтбор,
	                                                           Тип("ПеречислениеСсылка.ЗоныЗадач"),
	                                                           НСтр("ru = 'Выбранные зоны соблюдения сроков'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКФормеЭлементаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиКФормеЭлемента" Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаФормаЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ЗадачиПроцессов.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ЗадачиПроцессовКлиент.ВыборКорректен(Элементы.Список, Истина) Тогда
		
		ЗадачаДляКоторойСформированПредпросмотр = Неопределено;
		ОписаниеЗадачи = Неопределено;
		
	Иначе
		
		Если ЗадачаДляКоторойСформированПредпросмотр <> ТекущиеДанные.Ссылка Тогда
			
			Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
				
				ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка",0.1,Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.СписокЗадачПриПеретаскивании(Элементы.Список, Строка, ПараметрыПеретаскивания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтменитьВыполнениеСПересозданиемЗадач(Команда)
	
	ПересоздатьЗадачи(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнениеСПересозданиемЗадачПоШаблону(Команда)
	
	ПересоздатьЗадачи(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВСтатусЗапланирована(Команда)
	
	ПонизитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВСтатусОтменена(Команда)
	
	ПонизитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Отменена"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревестиВСтатусПринятаКВыполнению(Команда)
	
	ПонизитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьТекущаяЗадача(Команда)
	
	АвторПоследнегоСообщения = АвторПоследнегоСообщения(ЭтотОбъект);
	
	Если АвторПоследнегоСообщения <> Неопределено Тогда
		Объект.ИсполнительПорученияПоЗадаче = АвторПоследнегоСообщения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗадачи(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФактическаяДатаНачала",    Объект.ФактическаяДатаНачала);
	ПараметрыФормы.Вставить("ФактическаяДатаОкончания", Объект.ФактическаяДатаОкончания);
	ПараметрыФормы.Вставить("Статус",                   Объект.Статус);
	ПараметрыФормы.Вставить("Предмет",                  Объект.Предмет);
	ПараметрыФормы.Вставить("ЗадачаШаблона",            Объект.ЗадачаШаблона);
	ПараметрыФормы.Вставить("Задача",                   Объект.Ссылка);
	
	ОбработчикЗакрытияФормы = Новый ОписаниеОповещения("ПараметрыЗадачиПослеЗакрытия", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПараметрыЗадачи", ПараметрыФормы, ЭтотОбъект,,,,
	             ОбработчикЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ВыполнитьПереключениеХронометража(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Публикуется(Команда)
	
	Объект.Публикуется = Не Объект.Публикуется;
	УстановитьПометкуПубликуется(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьОсновнойРесурс(Команда) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаписьВыполненаУспешно = Записать();
		Если Не ЗаписьВыполненаУспешно Тогда
			Возврат;
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеРесурса = ДанныеСогласованияОсновногоРесурса(ЭтотОбъект);
	
	Если ДанныеРесурса <> Неопределено Тогда
		СогласоватьВсе(ДанныеРесурсаСтруктурой(ДанныеРесурса));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСогласования(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаписьВыполненаУспешно = Записать();
		Если Не ЗаписьВыполненаУспешно Тогда
			Возврат;
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КодВидаРесурса = КодВидаРесурсаПоПостфиксуСтроки(Команда.Имя);
	ДанныеРесурса  = ДанныеСогласованияРесурсаПоКодуРесурса(ЭтотОбъект, КодВидаРесурса);
	
	Если ДанныеРесурса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Команда.Имя, "СогласоватьРесурс") Тогда
		СогласоватьВсе(ДанныеРесурсаСтруктурой(ДанныеРесурса));
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, "НаправитьНаСогласованииОповеститьРесурс") Тогда
		НаправитьНаСогласованиеОповестить(ДанныеРесурса, "НаправитьНаСогласованииОповеститьРесурс_" + ДанныеРесурса.КодВидаРесурса);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НаправитьНаСогласованииОповеститьОсновнойРесурс(Команда)
	
	ДанныеРесурса = ДанныеСогласованияОсновногоРесурса(ЭтотОбъект);
	
	Если ДанныеРесурса <> Неопределено Тогда
		НаправитьНаСогласованиеОповестить(ДанныеРесурсаСтруктурой(ДанныеРесурса), "НаправитьНаСогласованииОповеститьОсновнойРесурс");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненнуюЗадачуТекущей(Команда)
	
	ЗадачиПроцессовКлиент.СоздатьЗадачу(Объект.Ссылка, "Подчиненная", Объект.Предмет);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	СоставляющиеИмени = СтрРазделить(Команда.Имя, "_", Ложь);
	Если СоставляющиеИмени.Количество() = 2 Тогда
		
		ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыОбъекта(ЭтотОбъект, Команда);
		
	Иначе
		
		ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыСписка(ЭтотОбъект, Команда);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

// Приоритеты
&НаКлиенте
Процедура Подключаемый_УстановитьПриоритет(Команда)
	
	СоставляющиеИмени = СтрРазделить(Команда.Имя, "_", Ложь);
	Если СоставляющиеИмени.Количество() = 2 Тогда
	
		ПриоритетыОчередиРаботыКлиент.ВыполнитьКомандуИзмененияПриоритетаИзФормыОбъекта(ЭтотОбъект, Команда);
		
	Иначе
		
		ПриоритетыОчередиРаботыКлиент.ВыполнитьКомандуИзмененияПриоритетаИзФормыСписка(ЭтотОбъект, Команда);
		
	КонецЕсли;
	
КонецПроцедуры
// Конец Приоритеты

#Область СписокПодчиненныхЗадач

&НаКлиенте
Процедура Подключаемый_ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда)
	
	ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда.Имя);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(Команда)
	
	ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПаралельнуюЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Паралельная", Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненнуюЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Подчиненная", Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоследующуюЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Последующая", Объект.Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ВыполнитьЗадачу", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Запланировать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Запланировать", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаПроверку(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаПроверку", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Ответить", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Перенаправить", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКВыполнению(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ПринятьКВыполнению", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Согласовать", Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НеСогласовать", Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичноСогласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ЧастичноСогласовать", Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласование(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьНаСогласование", Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьИсполнителямЗадачи(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("НаправитьИсполнителямЗадачи", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителя(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("ИзменитьИсполнителя", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Ознакомиться(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Ознакомиться", Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка("Отменить", Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки                  = ЦветаСтиля.ЦветГиперссылкиЗадачи;
	ЦветПояснения                    = ЦветаСтиля.ЦветТекстаВыполненнойЗадачи;
	КартинкаСогласовать              = БиблиотекаКартинок.СогласоватьРесурсЗадачи;
	ИспользоватьСогласованиеРесурсов = ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов");
	ИспользуетсяОчередьРабот         = ПолучитьФункциональнуюОпцию("ИспользоватьОчередиЗадач");
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПравоИзмененияЗадачБезКонтроля   = ЗадачиПроцессов.ПравоИзмененияЗадачБезКонтроля(Объект.Ссылка, Объект.Предмет);
	ПравоЧтенияСостояниеСогласования = ЗадачиПроцессов.ПравоДоступаСостояниеСогласования();
	ПравоИзмененияЗадачПроцессов     = ПравоДоступа("Изменение", Метаданные.Справочники.ЗадачиПроцесса);
	
	ДоступноИзменениеХронометража = УправлениеДоступом.ЕстьРоль("ИзменениеДанныхХронометража");
	
	ТекущийИсполнительПорученияПоЗадаче = Объект.ИсполнительПорученияПоЗадаче;
	
	ОбновитьРеквизитыРодительскойЗадачи();
	
	Если ЗначениеЗаполнено(Объект.ЗадачаШаблона) Тогда
		
		РеквизитыЗадачиШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЗадачаШаблона,
		                                                                    "Исполнитель, ВозможнаОтменаОтветственнымЗаПредмет"); 
		ИсполнительЗадачиШаблона = РеквизитыЗадачиШаблона.Исполнитель;
		ВозможнаОтменаОтветственнымЗаПредметЗадачиПоШаблону = 
			ЗадачиПроцессов.ОтветственныйЗаПредметМожетОтменитьЗадачу(РеквизитыЗадачиШаблона.ВозможнаОтменаОтветственнымЗаПредмет,
			                                                          Объект.Предмет,
			                                                          ТекущийПользователь);
		
	КонецЕсли;
	
	Элементы.ФормаПараметрыЗадачи.Доступность = ПравоИзмененияЗадачБезКонтроля;
	ОтветственныйЗаПредмет = ЗадачиПроцессовПереопределяемый.ОтветственныйПредметаЗадачи(Объект.Предмет);
	
	ЗаполнитьСписокТиповПредмета();
	УстановитьДанныеШаблона();
	ОбновитьВсеСостоянияФормы();
	ЗадачиПроцессов.УстановитьЗаголовокПредмета(Объект.Предмет, Элементы.Предмет);
	СформироватьТекстПротоколаВзаимодействия();
	ДополнитьСписокВыбораКомуНаправлена(ЭтотОбъект);
	УстановитьПометкуПубликуется(ЭтотОбъект);
	
	ЕстьСогласуемыеРесурсы = ЕстьСогласуемыеРесурсы();
	
	УчетВремени.НастроитьКомандуХронометража(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповПредмета();
	
	СписокТиповПредметов.Очистить();
	
	Для Каждого ТипПредмета Из Метаданные.ОпределяемыеТипы.ПредметПроцесса.Тип.Типы() Цикл
		
		МетаданныеПредмета = Метаданные.НайтиПоТипу(ТипПредмета);
		СписокТиповПредметов.Добавить(МетаданныеПредмета.ПолноеИмя(), МетаданныеПредмета.ПредставлениеОбъекта);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыРодительскойЗадачи()
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		РеквизитыРодительскойЗадачи      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Родитель, "Исполнитель, Контролирующий");
		ИсполнительРодительскойЗадачи    = РеквизитыРодительскойЗадачи.Исполнитель;
		КонтролирующийРодительскойЗадачи = РеквизитыРодительскойЗадачи.Контролирующий;
	Иначе
		ИсполнительРодительскойЗадачи    = Справочники.Пользователи.ПустаяСсылка();
		КонтролирующийРодительскойЗадачи = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСписокВыбораКомуНаправлена(Форма)
	
	СписокЗначений = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Форма.Объект.Исполнитель)
		И Форма.Объект.Исполнитель <> Форма.ТекущийПользователь Тогда
		СписокЗначений.Добавить(Форма.Объект.Исполнитель, СтрШаблон(НСтр("ru = 'Исполнитель: %1'"), Форма.Объект.Исполнитель));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Контролирующий)
		И Форма.Объект.Исполнитель <> Форма.ТекущийПользователь Тогда
		СписокЗначений.Добавить(Форма.Объект.Контролирующий, СтрШаблон(НСтр("ru = 'Контролирующий: %1'"), Форма.Объект.Контролирующий));
	КонецЕсли;
	
	АвторПоследнегоСообщения = АвторПоследнегоСообщения(Форма);
	Если ЗначениеЗаполнено(АвторПоследнегоСообщения) Тогда
		СписокЗначений.Добавить(АвторПоследнегоСообщения, СтрШаблон(НСтр("ru = 'Автор поручения: %1'"), АвторПоследнегоСообщения));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ОтветственныйЗаПредмет) 
		И Форма.ОтветственныйЗаПредмет <> Форма.ТекущийПользователь Тогда
		СписокЗначений.Добавить(Форма.ОтветственныйЗаПредмет, 
		                        СтрШаблон(НСтр("ru = 'Ответственный за %1: %2'"), 
		                        НРег(Форма.Элементы.Предмет.Заголовок),
		                        Форма.ОтветственныйЗаПредмет));
	КонецЕсли;
	
	Форма.Элементы.ИсполнительПорученияПоЗадаче.СписокВыбора.Очистить();
	
	Для Каждого ЭлементСписка из СписокЗначений Цикл
		НовыйЭлемент = Форма.Элементы.ИсполнительПорученияПоЗадаче.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементСписка);
	КонецЦИкла;

КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораЗадачи()

	ПараметрыВыбораЗадачи = ЗадачиПроцессовКлиент.ПараметрыВыбораЗадачи();
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ПараметрыВыбораЗадачи.ТекущаяЗадача              = Объект.Ссылка;
		ПараметрыВыбораЗадачи.ИсключатьПодчиненныеЗадачи = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыВыбораЗадачи;

КонецФункции 

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КопируемыйОбъект, "Описание");
	
	ОписаниеИзХранилища = ХранилищеОписания.Получить();
	Если ТипЗнч(ОписаниеИзХранилища) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЗадачи = ОписаниеИзХранилища;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРодителяНаСервере()
	
	ОбновитьРеквизитыРодительскойЗадачи();
	УстановитьДанныеШаблона();
	ОбновитьВсеСостоянияФормы();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область Родитель
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Родитель.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапрещеноЗаписыватьЗадачуБезРодителя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Родитель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
#КонецОбласти

#Область ВидДеятельности

	Если Элементы.Найти("ВидДеятельности") <> Неопределено Тогда
		
		// Отметка незаполненого включена
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидДеятельности.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедетсяУчетВремени");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьСогласуемыеРесурсы");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПометкаУдаления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗадачПроцессов.Отменена;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидДеятельности");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		// Отметка незаполненого выключена
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидДеятельности.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВедетсяУчетВремени");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕстьСогласуемыеРесурсы");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПометкаУдаления");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗадачПроцессов.Отменена;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидДеятельности");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
	КонецЕсли;
	
#КонецОбласти

#Область СписокПодчиненныхЗадач

	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПоляСостояниеВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПолейДатаВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеСостоянияСогласования(СписокУсловноеОформление);
	
	// Выделение цветом состояния в желтой зоне
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Выделение жирным задачи, для которой выводятся связанные задачи.'");
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Ссылка");
	ОтборЭлемента.ВидСравнения    = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение  = Объект.Ссылка;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
	// Приоритеты
	ПриоритетыОчередиРабот.УстановитьУсловноеОформлениеСписка(Список, 
	                                                          ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(Объект.Предмет));
	// Конец Приоритеты
	
#КонецОбласти

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуПубликуется(Форма)
	
	Форма.Элементы.ФормаПубликуется.Пометка = Форма.Объект.Публикуется;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодчиненныеЗадачи()
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПодчиненныеЗадачи;
	ПриПереключенииНаПодчиненныеЗадачиСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодВидаРесурсаПоПостфиксуСтроки(СтрокаСКодом)
	
	Позиция = СтрНайти(СтрокаСКодом, "_", НаправлениеПоиска.СКонца);
	Возврат Прав(СтрокаСКодом, СтрДлина(СтрокаСКодом) - Позиция);
	
КонецФункции

&НаСервере
Функция ЕстьСогласуемыеРесурсы()
	
	Для Каждого СтрокаРесурсы Из СогласующиеРесурсы Цикл
		Если СтрокаРесурсы.Запланировано <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#Область ПротоколВзаимодействия

&НаСервере
Процедура СформироватьТекстПротоколаВзаимодействия()

	ПротоколВзаимодействия = 
		"<!DOCTYPE html>
		|<html>
		| <head>
		|  <meta charset=""utf-8"">
		|<style type=""text/css"">
		|.users {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|}
		|.commentLeft {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #eeffda;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-left: 10%;
		|}
		|.commentRight {
		|	font-size: 14px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #484848;
		|	background-color: #ededed;
		|	padding-top: 7px;
		|	padding-bottom: 8px;
		|	padding-left: 10px;
		|	padding-right: 15px;
		|	margin-right: 10%; 
		|}
		|.status {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	width: 50%;
		|	float: left;
		|}
		|.text {
		|	padding-top: 7px;
		|	padding-bottom: 2px;
		|}
		|.date {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	margin-right: 30px;
		|	padding-top: 5px;
		|}
		|.time {
		|	font-size: 10px;
		|	font-family: Arial, Helvetica, sans-serif;
		|	color: #afafaf;
		|	text-align: right;
		|	padding: 0px;
		|}
		|.edit {
		|	border: none;
		|	margin-left: 5px;
		|}
		|.marginLeft {
		|	margin-left: 10%;
		|	margin-bottom: 1px;
		|}
		|.marginRight {
		|	margin-right: 10%;
		|	margin-bottom: 1px;
		|}
		|.mb {
		|margin-bottom: 15px;
		|}
		|a.user:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	margin-left: 10px;
		|	padding-left: 1px;
		|}
		|a.user2:link {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 40px;
		|}
		|a.user2:visited {
		|	color: #828282;
		|	margin-right: 7px;
		|	padding-left: 1px;
		|	margin-left: 4px;
		|}
		|</style>
		| </head>
		| <body>";
		
	КартинкаНаправлена    = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.КомуНаправлена, УникальныйИдентификатор);
	КартинкаРедактировать = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.Редактировать, УникальныйИдентификатор);
	
	СтрокаСсылкаИзменить = "<a href=""#СсылкаИзменить"">%СсылкаИзменить%</a>";
	СтрокаСсылкаИзменить = СтрЗаменить(СтрокаСсылкаИзменить, "%СсылкаИзменить%", НСтр("ru = 'изменить комментарий'"));
	
	КоличествоСтрок = Объект.ПротоколВзаимодействия.Количество();
	Инд = КоличествоСтрок - 1;
	
	Пока Инд >= 0 Цикл
		
		СтрокаПротокол = Объект.ПротоколВзаимодействия.Получить(Инд);
		Инд = Инд -1;
		
		ТекстПорученияПротокола = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(СтрокаПротокол.ТекстПоручения, "");
		ТекстПорученияПротокола = СтрЗаменить(ТекстПорученияПротокола, Символы.ПС, "<br>");
		
		Если  СтрокаПротокол.Автор <> ТекущийПользователь Тогда
			ИмяСтиляПользователи = "marginRight";
			ИмяСтиляКомментарий  = "commentRight mb";
		Иначе
			ИмяСтиляПользователи = "marginLeft";
			ИмяСтиляКомментарий  = "commentLeft mb";
		КонецЕсли;
		
		ТекстАвтор          = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.Автор),
		                                ПредставлениеПользователя(СтрокаПротокол.Автор, ТекущийПользователь, НСтр("ru = 'Я'")));
		
		ТекстКомуНаправлена = СтрШаблон("<a href=""%1"" class=""user"">%2</a>",
		                                ПолучитьНавигационнуюСсылку(СтрокаПротокол.ИсполнительПоручения),
		                                ПредставлениеПользователя(СтрокаПротокол.ИсполнительПоручения, ТекущийПользователь, НСтр("ru = 'Мне'")));
		
		СтрокаПользователи     = "<div class=""users"">" + ТекстАвтор;
		Если ЗначениеЗаполнено(СтрокаПротокол.ИсполнительПоручения) Тогда
			СтрокаПользователи = СтрокаПользователи + "<IMG src=""" + КартинкаНаправлена + """>" + ТекстКомуНаправлена +"</div>";
		Иначе
			СтрокаПользователи = СтрокаПользователи +"</div>";
		КонецЕсли;
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + " 
			|<div class=""" + ИмяСтиляПользователи + """>" + СтрокаПользователи + "</div>";
			
		Если СтрокаПротокол.НомерСтроки = КоличествоСтрок И СтрокаПротокол.Автор = ТекущийПользователь Тогда
			СтрокаИзменить = "<a  href=""#СсылкаИзменить""><img class = ""edit"" src="""+ КартинкаРедактировать + """></a>";
		Иначе
			СтрокаИзменить = "";
		КонецЕсли;
		
		СтрокаСтатус    = "<div class=""status"">" + СтрокаПротокол.Статус +"</div>";
		ДатаПоручения   = ПредставлениеДаты(СтрокаПротокол.Дата);
		СтрокаДата      = "<div class=""time"">"   + ДатаПоручения + "</div>";
		СтрокаПоручение = "<div class=""text"">"   + ТекстПорученияПротокола + СтрокаИзменить + "</div>";
		
		ПротоколВзаимодействия = ПротоколВзаимодействия + "
			|<div class=""" + ИмяСтиляКомментарий + """>" + СтрокаСтатус + СтрокаДата + СтрокаПоручение + "</div>";
		
	КонецЦикла;
	
	ПротоколВзаимодействия = ПротоколВзаимодействия 
		+ "
		|</body>
		|</html>";
		
	ЗадачиПроцессов.ДобавитьТегиКСсылкам(ПротоколВзаимодействия);

КонецПроцедуры

&НаСервере
Функция ПредставлениеПользователя(Пользователь, ТекущийПользователь, ПредставлениеЕслиТекущий)
	
	Если Пользователь = ТекущийПользователь Тогда
		Возврат ПредставлениеЕслиТекущий;
	Иначе
		Возврат Строка(Пользователь);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПредставлениеДаты(Дата)

	ДатаСеанса = ТекущаяДатаСеанса();
	
	Если НачалоДня(Дата) = НачалоДня(ДатаСеанса) Тогда 
		Возврат Формат(Дата, "ДЛФ=T");
	ИначеЕсли НачалоДня(Дата) = НачалоДня(ДатаСеанса) - 86400 Тогда
		Возврат НСтр("ru = 'Вчера'");
	Иначе
		Возврат Формат(Дата, "ДЛФ=D");
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ИзменитьПоследнееПоручение()

	СтрокаТЧ = Объект.ПротоколВзаимодействия[Объект.ПротоколВзаимодействия.Количество() - 1];
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Автор",                СтрокаТЧ.Автор);
	ПараметрыФормы.Вставить("Дата",                 СтрокаТЧ.Дата);
	ПараметрыФормы.Вставить("Статус",               СтрокаТЧ.Статус);
	ПараметрыФормы.Вставить("ИсполнительПоручения", СтрокаТЧ.ИсполнительПоручения);
	ПараметрыФормы.Вставить("ТекстПоручения",       СтрокаТЧ.ТекстПоручения);
	
	Структура = Новый Структура("СтрокаПротокола", СтрокаТЧ);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПротоколВыборЗавершение", ЭтотОбъект, Структура);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.СтрокаПротокола", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколВыборЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатДействия) = Тип("Строка") Тогда
		
		СтрокаТЧ = ДополнительныеПараметры.СтрокаПротокола;
		СтрокаТЧ.ТекстПоручения = РезультатДействия;
		
		СформироватьТекстПротоколаВзаимодействия();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтветаНаВопросОбОзнакомлении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ОзнакомитьсяСПоручением();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьсяСПоручением()

	Объект.ИсполнительПорученияПоЗадаче = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ТекстПоручения                      = "";
	
	ЗаписьВыполненаУспешно = Записать();
	Если ЗаписьВыполненаУспешно Тогда
		Модифицированность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбПустомОтвете(Результат, ДополнительныеПараметры) Экспорт

	 Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ОтветитьНаПоручение();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаПоручение()
	
	Объект.ИсполнительПорученияПоЗадаче = АвторПоследнегоСообщения(ЭтотОбъект);
	
	ЗаписьВыполненаУспешно = Записать();
	Если ЗаписьВыполненаУспешно Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция АвторПоследнегоСообщения(Форма)

	АвторПоследнегоСообщения = Неопределено;
	КоличествоСтрокПротокола = Форма.Объект.ПротоколВзаимодействия.Количество();
	
	Для Инд = 1 По КоличествоСтрокПротокола Цикл
		АвторСообщения = Форма.Объект.ПротоколВзаимодействия[КоличествоСтрокПротокола - инд].Автор;
		
		Если ЗначениеЗаполнено(АвторСообщения)
			И АвторСообщения <> Форма.ТекущийПользователь Тогда 
			
			АвторПоследнегоСообщения = АвторСообщения;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АвторПоследнегоСообщения;

КонецФункции

&НаСервере
Процедура ДобавитьЗаписьВПротокол(ТекущийОбъект, АвторИзменений, Комментарий)
	
	Дата = ТекущаяДатаСеанса();
	
	НоваяСтрока = ТекущийОбъект.ПротоколВзаимодействия.Добавить();
	НоваяСтрока.Автор                = АвторИзменений;
	НоваяСтрока.Дата                 = Дата;
	НоваяСтрока.ТекстПоручения       = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Комментарий, "");
	НоваяСтрока.ИсполнительПоручения = ТекущийОбъект.ИсполнительПорученияПоЗадаче;
	НоваяСтрока.Статус               = ТекущийОбъект.Статус;
	
	ТекущийОбъект.ДатаПорученияПоЗадаче = ЗадачиПроцессовКлиентСервер.ДатаПорученияПоЗадаче(ТекущийОбъект, АвторИзменений, Дата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещенийПослеЗакрытия

&НаКлиенте
Процедура ФормаВыбораЗадачиПроцессаПослеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбора <> Объект.Родитель Тогда
		Объект.Родитель    = РезультатВыбора;
		Модифицированность = Истина;
		ПриИзмененииРодителяНаСервере();
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеЗадачиПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Объект.ПредшествующиеЗадачи.Очистить();
		Для Каждого ПредшествующаяЗадача Из Результат Цикл
			НоваяСтрока = Объект.ПредшествующиеЗадачи.Добавить();
			НоваяСтрока.ПредшествующаяЗадача = ПредшествующаяЗадача;
		КонецЦикла;
		
		Модифицированность = Истина;
		
		ОбновитьСвязанныеЗадачи();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗадачиПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Объект.ФактическаяДатаНачала    = Результат.ФактическаяДатаНачала;
		Объект.ФактическаяДатаОкончания = Результат.ФактическаяДатаОкончания;
		Объект.Предмет                  = Результат.Предмет;
		
		Модифицированность = Истина;
		
		ОбновитьСостояниеЗадачи();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатусаЗадачи

&НаКлиенте
Процедура НаправитьЗадачуНаПроверку()

	Если ПустаяСтрока(ТекстПоручения) Тогда
		ТекстПоручения = ЗадачиПроцессовКлиентСервер.ТекстПорученияНаправитьЗадачуНаПроверку();
	КонецЕсли;
	Объект.Статус                       = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению");
	Объект.ИсполнительПорученияПоЗадаче = Объект.Контролирующий;

КонецПроцедуры

&НаКлиенте
Процедура ПринятьЗадачуКВыполнению()

	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению");
	Если Объект.ИсполнительПорученияПоЗадаче = Объект.Исполнитель
		И ПустаяСтрока(ТекстПоручения) Тогда
		
		Объект.ИсполнительПорученияПоЗадаче = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТекущуюЗадачу()

	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена");
	Если (ТекущийПользователь = Объект.Исполнитель
		Или ТекущийПользователь = Объект.Контролирующий)
		И Объект.ИсполнительПорученияПоЗадаче = ТекущийПользователь
		И ПустаяСтрока(ТекстПоручения) Тогда
		
		Объект.ИсполнительПорученияПоЗадаче = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьЗадачу()

	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Запланирована");
	Если ТекущийПользователь = Объект.Исполнитель
		И ТекущийПользователь = Объект.ИсполнительПорученияПоЗадаче
		И ПустаяСтрока(ТекстПоручения) Тогда
		
		Объект.ИсполнительПорученияПоЗадаче = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Согласование

&НаСервере
Процедура УстановитьДанныеШаблона()
	
	ДанныеШаблона = ЗадачиПроцессов.ДанныеШаблонаПоПредмету(Объект.Предмет);
	
	Если ЗначениеЗаполнено(ДанныеШаблона.ШаблонПроцесса) Тогда
		
		ДоступныеВидыСогласуемыхРесурсов               = ДанныеШаблона.ВидыСогласуемыхРесурсов;
		ОтветственныйЗаШаблон                          = ДанныеШаблона.Ответственный;
		ШаблонПроцесса                                 = ДанныеШаблона.ШаблонПроцесса;
		ЗапретитьПереименованиеЗадачСозданныхПоШаблону = ДанныеШаблона.ЗапретитьПереименованиеЗадачСозданныхПоШаблону;
		ЗапрещеноЗаписыватьЗадачуБезРодителя           = Не ЗначениеЗаполнено(Объект.ЗадачаШаблона)
		                                                 И ДанныеШаблона.ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона
		                                                 И Не ПравоИзмененияЗадачБезКонтроля
		                                                 И (Объект.Ссылка.Пустая() Или ЗначениеЗаполнено(Объект.Родитель));
		
	Иначе
		
		ДоступныеВидыСогласуемыхРесурсов = ЗадачиПроцессовПовтИсп.ИспользуемыеВИБВидыСогласуемыхРесурсов();
		
	КонецЕсли;
	
	ЗадачиПроцессов.ЗаполнитьТаблицуСогласующихРесурсы(СогласующиеРесурсы,
	                                                   ЗапланированоПоПользователям,
	                                                   ДоступныеВидыСогласуемыхРесурсов,
	                                                   Объект.Ссылка,
	                                                   Объект.Предмет,
	                                                   Объект.Родитель,
	                                                   Объект.Исполнитель);
	
	ИзменитьФормуДляОтраженияСогласования();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияПротоколаРесурса(КодСогласуемогоРесурса, ВариантОткрытия)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПротоколСогласованияРесурсов.Период КАК Период,
	|	ПротоколСогласованияРесурсов.ВидРесурса КАК ВидРесурса,
	|	ПротоколСогласованияРесурсов.Пользователь КАК Пользователь,
	|	ПротоколСогласованияРесурсов.СтатусСогласования КАК СтатусСогласования,
	|	ПротоколСогласованияРесурсов.Количество КАК Количество,
	|	ПротоколСогласованияРесурсов.Автор КАК Автор,
	|	ЛОЖЬ КАК ЭтоТекущееРедактирование
	|ИЗ
	|	РегистрСведений.ПротоколСогласованияРесурсов КАК ПротоколСогласованияРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|		ПО ПротоколСогласованияРесурсов.ВидРесурса = ВидыСогласуемыхРесурсов.Ссылка
	|ГДЕ
	|	ВидыСогласуемыхРесурсов.Код = &КодСогласуемогоРесурса
	|	И ПротоколСогласованияРесурсов.Задача = &Задача
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	&Запланировано КАК Запланировано,
	|	&Согласовано КАК Согласовано
	|ПОМЕСТИТЬ ТекущиеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ТекущееЗапланированоПоПользователям.Пользователь КАК Пользователь,
	|	ТекущееЗапланированоПоПользователям.Количество   КАК Количество
	|ПОМЕСТИТЬ ТекущееЗапланированоПоПользователям
	|ИЗ
	|	&ТекущееЗапланированоПоПользователям КАК ТекущееЗапланированоПоПользователям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	ПротоколСогласованияРесурсов.Пользователь КАК Пользователь,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколСогласованияРесурсов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияРесурса.КСогласованию)
	|				ТОГДА ПротоколСогласованияРесурсов.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Запланировано,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколСогласованияРесурсов.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияРесурса.Согласовано)
	|				ТОГДА ПротоколСогласованияРесурсов.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Согласовано
	|ПОМЕСТИТЬ ПредыдущиеДанныеПоПользователям
	|ИЗ
	|	РегистрСведений.ПротоколСогласованияРесурсов КАК ПротоколСогласованияРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|		ПО ПротоколСогласованияРесурсов.ВидРесурса = ВидыСогласуемыхРесурсов.Ссылка
	|ГДЕ
	|	ПротоколСогласованияРесурсов.Задача = &Задача
	|	И ВидыСогласуемыхРесурсов.Код = &КодСогласуемогоРесурса
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколСогласованияРесурсов.Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	СУММА(ПредыдущиеДанныеПоПользователям.Запланировано) КАК Запланировано,
	|	СУММА(ПредыдущиеДанныеПоПользователям.Согласовано) КАК Согласовано
	|ПОМЕСТИТЬ ПредыдущиеДанные
	|ИЗ
	|	ПредыдущиеДанныеПоПользователям КАК ПредыдущиеДанныеПоПользователям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Пользователь         КАК Пользователь,
	|	СУММА(ВложенныйЗапрос.Запланировано) КАК Запланировано
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредыдущиеДанныеПоПользователям.Пользователь КАК Пользователь,
	|		ЕСТЬNULL(ТекущееЗапланированоПоПользователям.Количество, 0) - ПредыдущиеДанныеПоПользователям.Запланировано КАК Запланировано
	|	ИЗ
	|		ПредыдущиеДанныеПоПользователям КАК ПредыдущиеДанныеПоПользователям
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущееЗапланированоПоПользователям КАК ТекущееЗапланированоПоПользователям
	|			ПО (ТекущееЗапланированоПоПользователям.Пользователь = ПредыдущиеДанныеПоПользователям.Пользователь)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущееЗапланированоПоПользователям.Пользователь,
	|		ТекущееЗапланированоПоПользователям.Количество
	|	ИЗ
	|		ТекущееЗапланированоПоПользователям КАК ТекущееЗапланированоПоПользователям
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущиеДанныеПоПользователям КАК ПредыдущиеДанныеПоПользователям
	|			ПО ТекущееЗапланированоПоПользователям.Пользователь = ПредыдущиеДанныеПоПользователям.Пользователь
	|	ГДЕ
	|		ПредыдущиеДанныеПоПользователям.Пользователь ЕСТЬ NULL) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Пользователь
	|
	|ИМЕЮЩИЕ 
	|	СУММА(ВложенныйЗапрос.Запланировано) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ
	|	ТекущиеДанные.Согласовано - ЕСТЬNULL(ПредыдущиеДанные.Согласовано, 0)     КАК Согласовано,
	|	ТекущиеДанные.Запланировано - ЕСТЬNULL(ПредыдущиеДанные.Запланировано, 0) КАК Запланировано
	|ИЗ
	|	ТекущиеДанные КАК ТекущиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущиеДанные КАК ПредыдущиеДанные
	|		ПО (ИСТИНА)";
	
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КодВидаРесурса", КодСогласуемогоРесурса);
	НайденныеСтроки = СогласующиеРесурсы.НайтиСтроки(ПараметрыПоиска);
	
	Запрос.УстановитьПараметр("Запланировано", НайденныеСтроки[0].Запланировано);
	Запрос.УстановитьПараметр("Согласовано", НайденныеСтроки[0].Согласовано);
	ВидРесурса                = НайденныеСтроки[0].ВидРесурса;
	Согласующие               = НайденныеСтроки[0].Согласующие;
	ДоступноВРодительской     = НайденныеСтроки[0].ДоступноВРодительской;
	ВыполняетсяСогласование   = НайденныеСтроки[0].ВыполняетсяСогласование;
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	Запрос.УстановитьПараметр("КодСогласуемогоРесурса", КодСогласуемогоРесурса);
	Запрос.УстановитьПараметр("ТекущееЗапланированоПоПользователям", ТаблицаЗапланированоПоПользователямПоВидуРесурса( ВидРесурса));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаПротокол = Результат[0].Выгрузить();
	
	ВыборкаТекущееПланирование = Результат[5].Выбрать();
	
	Пока ВыборкаТекущееПланирование.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПротокол.Добавить();
		НоваяСтрока.Период                   = ТекущаяДата;
		НоваяСтрока.ВидРесурса               = ВидРесурса;
		НоваяСтрока.СтатусСогласования       = Перечисления.СтатусыСогласованияРесурса.КСогласованию;
		НоваяСтрока.Количество               = ВыборкаТекущееПланирование.Запланировано;
		НоваяСтрока.Автор                    = ТекущийПользователь;
		НоваяСтрока.Пользователь             = ВыборкаТекущееПланирование.Пользователь;
		НоваяСтрока.ЭтоТекущееРедактирование = Истина;
		
	КонецЦикла;
	
	ТекущееЗапланировано = 0;
	ТекущееСогласовано   = 0;
	
	ВыборкаТекущееСогласование =  Результат[6].Выбрать();
	Если ВыборкаТекущееСогласование.Следующий() Тогда
		ТекущееЗапланировано = ВыборкаТекущееСогласование.Запланировано;
		ТекущееСогласовано   = ВыборкаТекущееСогласование.Согласовано;
	КонецЕсли;
	
	Если ТекущееСогласовано <> 0 Тогда
		НоваяСтрока = ТаблицаПротокол.Добавить();
		НоваяСтрока.Период                   = ТекущаяДата;
		НоваяСтрока.ВидРесурса               = ВидРесурса;
		НоваяСтрока.СтатусСогласования       = Перечисления.СтатусыСогласованияРесурса.Согласовано;
		НоваяСтрока.Количество               = ТекущееСогласовано;
		НоваяСтрока.Автор                    = ТекущийПользователь;
		НоваяСтрока.Пользователь             = Объект.Исполнитель;
		НоваяСтрока.ЭтоТекущееРедактирование = Истина;
	КонецЕсли; 
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресПротоколаВоВременномХранилище", ПоместитьВоВременноеХранилище(ТаблицаПротокол, УникальныйИдентификатор));
	ПараметрыОткрытия.Вставить("ЗапланированоПоПользователям",       ЗапланированоПоПользователямПоВидуРесурса(ЭтотОбъект, ВидРесурса));
	ПараметрыОткрытия.Вставить("Задача",                             Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Исполнитель",                        Объект.Исполнитель);
	ПараметрыОткрытия.Вставить("ВидРесурса",                         ВидРесурса);
	ПараметрыОткрытия.Вставить("ВыполняетсяСогласование",            ВыполняетсяСогласование);
	ПараметрыОткрытия.Вставить("Согласующие",                        Согласующие);
	ПараметрыОткрытия.Вставить("ДоступноВРодительской",              ДоступноВРодительской);
	ПараметрыОткрытия.Вставить("ИсполнительРодительскойЗадачи",      ИсполнительРодительскойЗадачи);
	ПараметрыОткрытия.Вставить("ВариантОтображения",                 ВариантОткрытия);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗапланированоПоПользователямПоВидуРесурса(Форма, ВидРесурса)
	
	ЗапланированоПоПользователямПоВидуРесурса = Новый Массив;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса", ВидРесурса);
	
	НайденныеСтроки = Форма.ЗапланированоПоПользователям.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		ДанныеПоПользователю = Новый Структура;
		ДанныеПоПользователю.Вставить("Пользователь", НайденнаяСтрока.Пользователь );
		ДанныеПоПользователю.Вставить("Количество",   НайденнаяСтрока.Количество );
		
		ЗапланированоПоПользователямПоВидуРесурса.Добавить(ДанныеПоПользователю);
		
	КонецЦикла;
	
	Возврат ЗапланированоПоПользователямПоВидуРесурса;

КонецФункции

&НаСервере
Функция ТаблицаЗапланированоПоПользователямПоВидуРесурса(ВидРесурса)
	
	ТаблицаЗапланированоПоПользователям = Новый ТаблицаЗначений;
	ТаблицаЗапланированоПоПользователям.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗапланированоПоПользователям.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса", ВидРесурса);
	
	НайденныеСтроки = ЗапланированоПоПользователям.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НоваяСтрока = ТаблицаЗапланированоПоПользователям.Добавить();
		НоваяСтрока.Пользователь = НайденнаяСтрока.Пользователь;
		НоваяСтрока.Количество   = НайденнаяСтрока.Количество;
		
	КонецЦикла;
	
	Возврат ТаблицаЗапланированоПоПользователям;

КонецФункции

&НаКлиенте
Процедура ОткрытьПротоколСогласованияРесурсов(КодВидаРесурса, ВариантОткрытия)
	
	ПараметрыОткрытия = ПараметрыОткрытияПротоколаРесурса(КодВидаРесурса, ВариантОткрытия);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПротоколСогласованияПослеЗакрытия", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПротоколСогласованияРесурсов.Форма.ПараметрическаяОтЗадачи", 
	              ПараметрыОткрытия,
	              ЭтотОбъект,,,,
	              ОповещениеОЗакрытии, 
	              РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСогласованияПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Запланировано по пользователям
	ИндексыИзмененныхСтрок = Новый Массив;
	
	Для Каждого КлючИЗначение Из Результат.ЗапланированоПоПользователям Цикл
		
		Если КлючИЗначение.Значение = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ВидРесурса", Результат.ВидРесурса);
		ПараметрыПоиска.Вставить("Пользователь", КлючИЗначение.Ключ);
		
		НайденныеСтроки = ЗапланированоПоПользователям.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ИзменяемаяСтрока = НайденныеСтроки[0];
		Иначе
			ИзменяемаяСтрока = ЗапланированоПоПользователям.Добавить();
			ИзменяемаяСтрока.ВидРесурса   = Результат.ВидРесурса;
			ИзменяемаяСтрока.Пользователь = КлючИЗначение.Ключ;
		КонецЕсли;
		
		ИзменяемаяСтрока.Количество = КлючИЗначение.Значение;
		
		ИндексыИзмененныхСтрок.Добавить(ЗапланированоПоПользователям.Индекс(ИзменяемаяСтрока));
		
	КонецЦикла;
	
	ИндексыОтсутствующихСтрок = Новый Массив;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса", Результат.ВидРесурса);
	
	НайденныеСтроки = ЗапланированоПоПользователям.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		ИндексНайденнойСтроки = ЗапланированоПоПользователям.Индекс(НайденнаяСтрока);
		
		Если ИндексыИзмененныхСтрок.Найти(ИндексНайденнойСтроки) = Неопределено Тогда
			
			ИндексыОтсутствующихСтрок.Вставить(0, ИндексНайденнойСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексыОтсутствующихСтрок.Количество() > 0 Тогда
		Для Каждого ИндексСтрокиКУдалению Из ИндексыОтсутствующихСтрок Цикл
			 ЗапланированоПоПользователям.Удалить(ИндексСтрокиКУдалению);
		КонецЦикла;
	КонецЕсли;
	
	// Согласующие ресурсы
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса", Результат.ВидРесурса);
	
	НайденныеСтроки = СогласующиеРесурсы.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденныеСтроки[0].Запланировано             = Результат.План;
		НайденныеСтроки[0].Согласовано               = Результат.Согласовано;
		НайденныеСтроки[0].ДоступноВРодительской     = Результат.ДоступноВРодительской;
		ОбновитьИнформациюСогласование(Ложь);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеНавигационнойСсылкиХодСогласования(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки,"ПротоколСогласования") Тогда
		
		ОткрытьПротоколСогласованияРесурсов(КодВидаРесурсаПоПостфиксуСтроки(НавигационнаяСсылкаФорматированнойСтроки), "ПротоколСогласования");
		
	ИначеЕсли СтрНайти(НавигационнаяСсылкаФорматированнойСтроки,"ПланированиеПоПользователям") Тогда
		
		ОткрытьПротоколСогласованияРесурсов(КодВидаРесурсаПоПостфиксуСтроки(НавигационнаяСсылкаФорматированнойСтроки), "ПланированиеПоПользователям");
		
	ИначеЕсли СтрНайти(НавигационнаяСсылкаФорматированнойСтроки,"ПодчиненныеЗадачи")  Тогда
		
		АктивныйЭлементФормы = ТекущийЭлемент;
		ТекущийЭлемент = Элементы.ЗапланированоОсновнойРесурс;
		
		ОткрытьПодчиненныеЗадачи();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСогласованияРесурсаПоКодуРесурса(Форма, КодРесурса)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("КодВидаРесурса", КодРесурса);
	
	ДанныеРесурса = Неопределено;
	
	НайденныеСтроки = Форма.СогласующиеРесурсы.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеРесурса = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат ДанныеРесурса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеСогласованияОсновногоРесурса(Форма)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Основной", Истина);
	
	ДанныеРесурса = Неопределено;
	
	НайденныеСтроки = Форма.СогласующиеРесурсы.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеРесурса = НайденныеСтроки[0];
	КонецЕсли;
	
	Возврат ДанныеРесурса;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииЗапланировано(ДанныеСтрокиРесурса, Запланировано) 
	
	ДанныеСтрокиРесурса.Запланировано = Запланировано;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса",   ДанныеСтрокиРесурса.ВидРесурса);
	Если Не ЗначениеЗаполнено(Объект.Родитель)
		И ЗначениеЗаполнено(Объект.ЗадачаШаблона)
		И ЗапланированоПоПользователям.Количество() > 1 Тогда
		ПараметрыПоиска.Вставить("Пользователь", Объект.Исполнитель);
	КонецЕсли;
	
	НайденныеСтроки = ЗапланированоПоПользователям.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		ИзменяемаяСтрока = ЗапланированоПоПользователям.Добавить();
		ИзменяемаяСтрока.ВидРесурса   = ДанныеСтрокиРесурса.ВидРесурса;
		ИзменяемаяСтрока.Пользователь = Объект.Исполнитель;
	Иначе
		ИзменяемаяСтрока              = НайденныеСтроки[0];
		ИзменяемаяСтрока.Пользователь = Объект.Исполнитель;
	КонецЕсли;
	
	ИзменяемаяСтрока.Количество = Запланировано;
	
	Если ИзменяемаяСтрока.Количество = 0 Тогда
		ЗапланированоПоПользователям.Удалить(ИзменяемаяСтрока); 
	КонецЕсли;
	
	ОбновитьИнформациюСогласование(Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеРесурсаСтруктурой(СтрокаТаблицы)
	
	ДанныеРесурсаСтруктурой = Новый Структура;
	ДанныеРесурсаСтруктурой.Вставить("ВидРесурса",             СтрокаТаблицы.ВидРесурса);
	ДанныеРесурсаСтруктурой.Вставить("Согласующие",            СтрокаТаблицы.Согласующие);
	ДанныеРесурсаСтруктурой.Вставить("Наименование",           СтрокаТаблицы.Наименование);
	ДанныеРесурсаСтруктурой.Вставить("ЕдиницаИзмерения",       СтрокаТаблицы.ЕдиницаИзмерения);
	ДанныеРесурсаСтруктурой.Вставить("Основной",               СтрокаТаблицы.Основной);
	ДанныеРесурсаСтруктурой.Вставить("Запланировано",          СтрокаТаблицы.Запланировано);
	ДанныеРесурсаСтруктурой.Вставить("Согласовано",            СтрокаТаблицы.Согласовано);
	ДанныеРесурсаСтруктурой.Вставить("ЗапланированоВДочерних", СтрокаТаблицы.ЗапланированоВДочерних);
	ДанныеРесурсаСтруктурой.Вставить("СогласованоВДочерних",   СтрокаТаблицы.СогласованоВДочерних);
	ДанныеРесурсаСтруктурой.Вставить("КодВидаРесурса",         СтрокаТаблицы.КодВидаРесурса);
	ДанныеРесурсаСтруктурой.Вставить("ДоступноВРодительской",  СтрокаТаблицы.ДоступноВРодительской);
	
	Возврат ДанныеРесурсаСтруктурой;
	
КонецФункции

&НаСервере
Процедура ОтразитьИзмененияЗапланированоПриСогласовании(ТекущееЗначение, ПредыдущееЗначение, ВидРесурса, Согласующий, ТекущийПользователь, МассивЗадачДляРасчета)
	
	Если ТекущееЗначение <> ПредыдущееЗначение Тогда
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = Объект.Ссылка;
		ПараметрыСогласования.Исполнитель              = Объект.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс        = ВидРесурса;
		ПараметрыСогласования.Количество               = ТекущееЗначение - ПредыдущееЗначение;
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса() - 1;
		ПараметрыСогласования.Согласующий              = Согласующий;
		РегистрыСведений.ПротоколСогласованияРесурсов.ЗапланироватьРесурсВЗадаче(ПараметрыСогласования);
		
		МассивЗадачДляРасчета.Добавить(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыСогласования

&НаСервере
Процедура ЧастичноСогласоватьВТекущей(ДанныеРесурсаВФорме, Согласовать)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СохраненныеДанныеРесурса = ЗадачиПроцессов.ДанныеСогласованияЗадачиПоВидуРесурса(Объект.Ссылка,
	                                                                                 Объект.Родитель,
	                                                                                 ДанныеРесурсаВФорме.ВидРесурса, 
	                                                                                 Объект.Предмет,
	                                                                                 Объект.Исполнитель);
	
	ЯвляетсяСогласующимРесурса = (СохраненныеДанныеРесурса.Согласующий = ТекущийПользователь);
	
	КСогласованию = ДанныеРесурсаВФорме.Запланировано - СохраненныеДанныеРесурса.Согласовано;
	
	Если Не ЯвляетсяСогласующимРесурса 
		Или КСогласованию = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивЗадачДляРасчета = Новый Массив;
	
	ОтразитьИзмененияЗапланированоПриСогласовании(ДанныеРесурсаВФорме.Запланировано,
	                                              СохраненныеДанныеРесурса.Запланировано,
	                                              ДанныеРесурсаВФорме.ВидРесурса, 
	                                              СохраненныеДанныеРесурса.Согласующий, 
	                                              ТекущийПользователь, 
	                                              МассивЗадачДляРасчета);
	
	
	ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыЧастичногоСогласованияРесурса();
	
	ПараметрыСогласования.Задача = Объект.Ссылка;
	ПараметрыСогласования.Исполнитель         = Объект.Исполнитель;
	ПараметрыСогласования.СогласуемыйРесурс   = ДанныеРесурсаВФорме.ВидРесурса;
	ПараметрыСогласования.Согласуется         = Согласовать;
	ПараметрыСогласования.НеСогласуется       = КСогласованию - Согласовать;
	ПараметрыСогласования.ТекущийПользователь = ТекущийПользователь;
	ПараметрыСогласования.ТекущаяДата         = ТекущаяДатаСеанса();
	ПараметрыСогласования.Согласующий         = ТекущийПользователь;
	
	РегистрыСведений.ПротоколСогласованияРесурсов.ЧастичноСогласоватьРесурс(ПараметрыСогласования);
	
	ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
	                                        ДанныеРесурсаВФорме.ВидРесурса, 
	                                        ПараметрыСогласования.Согласуется, 
	                                        Перечисления.СтатусыСогласованияРесурса.Согласовано);
	
	ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
	                                        ДанныеРесурсаВФорме.ВидРесурса, 
	                                        ПараметрыСогласования.НеСогласуется, 
	                                        Перечисления.СтатусыСогласованияРесурса.НеСогласовано);
	
	ПослеВыполненияКомандыСогласованияНаСервере(МассивЗадачДляРасчета, ДанныеРесурсаВФорме);
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьВДочерних(ДанныеРесурсаВФорме)

	УстановитьПривилегированныйРежим(Истина);
	
	СохраненныеДанныеРесурса = ЗадачиПроцессов.ДанныеСогласованияЗадачиПоВидуРесурса(Объект.Ссылка,
	                                                                                 Объект.Родитель,
	                                                                                 ДанныеРесурсаВФорме.ВидРесурса, 
	                                                                                 Объект.Предмет,
	                                                                                 Объект.Исполнитель);
	
	ЯвляетсяСогласующимРесурса = (СохраненныеДанныеРесурса.Согласующий = ТекущийПользователь);
	СогласоватьВДочерних       = СохраненныеДанныеРесурса.ЗапланированоВДочерних - СохраненныеДанныеРесурса.СогласованоВДочерних;
	
	Если Не ЯвляетсяСогласующимРесурса 
		Или СогласоватьВДочерних = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивЗадачДляРасчета = Новый Массив;
	
	Если СогласоватьВДочерних <> 0 Тогда
		
		ПараметрыСогласования = ЗадачиПроцессов.ПараметрыСогласованияРесурсовДочернихЗадачЗадачи();
		ПараметрыСогласования.ЗадачаПроцесса           = Объект.Ссылка;
		ПараметрыСогласования.ВидСогласуемогоРесурса   = ДанныеРесурсаВФорме.ВидРесурса;
		ПараметрыСогласования.ПредставлениеВидаРесурса = ЗадачиПроцессовКлиентСервер.ПредставлениеВидаРесурса(ДанныеРесурсаВФорме.Наименование, 
		                                                                                                      ДанныеРесурсаВФорме.ЕдиницаИзмерения);
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.МассивЗадачДляРасчета    = МассивЗадачДляРасчета;
		ПараметрыСогласования.ИсполнительТекущейЗадачи = Объект.Исполнитель;
		
		ЗадачиПроцессов.СогласоватьРесурсыДочернихЗадачЗадачи(ПараметрыСогласования);
		
		ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
		                                        ДанныеРесурсаВФорме.ВидРесурса, 
		                                        ПараметрыСогласования.КоличествоСогласовано, 
		                                        Перечисления.СтатусыСогласованияРесурса.Согласовано);
		
		Если ПараметрыСогласования.ЕстьОшибки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПараметрыСогласования.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ПослеВыполненияКомандыСогласованияНаСервере(МассивЗадачДляРасчета, ДанныеРесурсаВФорме);
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьВТекущей(ДанныеРесурсаВФорме)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СохраненныеДанныеРесурса = ЗадачиПроцессов.ДанныеСогласованияЗадачиПоВидуРесурса(Объект.Ссылка,
	                                                                                 Объект.Родитель,
	                                                                                 ДанныеРесурсаВФорме.ВидРесурса, 
	                                                                                 Объект.Предмет,
	                                                                                 Объект.Исполнитель);
	
	ЯвляетсяСогласующимРесурса = (СохраненныеДанныеРесурса.Согласующий = ТекущийПользователь);
	
	КСогласованию = ДанныеРесурсаВФорме.Запланировано - СохраненныеДанныеРесурса.Согласовано;
	
	Если Не ЯвляетсяСогласующимРесурса 
		Или КСогласованию = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивЗадачДляРасчета = Новый Массив;
	
	ОтразитьИзмененияЗапланированоПриСогласовании(ДанныеРесурсаВФорме.Запланировано,
	                                              СохраненныеДанныеРесурса.Запланировано,
	                                              ДанныеРесурсаВФорме.ВидРесурса, 
	                                              СохраненныеДанныеРесурса.Согласующий, 
	                                              ТекущийПользователь, 
	                                              МассивЗадачДляРасчета);
	
	Если КСогласованию <> 0 Тогда
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = Объект.Ссылка;
		ПараметрыСогласования.Исполнитель              = Объект.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс        = ДанныеРесурсаВФорме.ВидРесурса;
		ПараметрыСогласования.Количество               = КСогласованию;
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса();
		ПараметрыСогласования.Согласующий              = СохраненныеДанныеРесурса.Согласующий;
		РегистрыСведений.ПротоколСогласованияРесурсов.СогласоватьРесурсВЗадаче(ПараметрыСогласования);
		
		ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
		                                        ДанныеРесурсаВФорме.ВидРесурса, 
		                                        ПараметрыСогласования.Количество, 
		                                        Перечисления.СтатусыСогласованияРесурса.Согласовано);
		
		МассивЗадачДляРасчета.Добавить(Объект.Ссылка);
		
	КонецЕсли;
	
	ПослеВыполненияКомандыСогласованияНаСервере(МассивЗадачДляРасчета, ДанныеРесурсаВФорме);
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьИзБюджетаРодительской(ДанныеРесурсаВФорме)

	УстановитьПривилегированныйРежим(Истина);
	
	ЯвляетсяИсполнителемРодительскойЗадачи  = (ТекущийПользователь = ИсполнительРодительскойЗадачи);
	Если Не ЯвляетсяИсполнителемРодительскойЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеДанныеРесурса = ЗадачиПроцессов.ДанныеСогласованияЗадачиПоВидуРесурса(Объект.Ссылка,
	                                                                                 Объект.Родитель,
	                                                                                 ДанныеРесурсаВФорме.ВидРесурса, 
	                                                                                 Объект.Предмет,
	                                                                                 Объект.Исполнитель);
	
	ДоступноВРодительской            = СохраненныеДанныеРесурса.ДоступноВРодительской;
	КСогласованиюВТекущей            = ДанныеРесурсаВФорме.Запланировано - СохраненныеДанныеРесурса.Согласовано;
	ЗаимствоватьИзРодительскойЗадачи = 0;
	
	
	Если ЯвляетсяИсполнителемРодительскойЗадачи
		И КСогласованиюВТекущей > 0
		И ДоступноВРодительской > 0 Тогда
		
		ЗаимствоватьИзРодительскойЗадачи = Мин(ДоступноВРодительской, КСогласованиюВТекущей);
		
	КонецЕсли;
	
	Если ЗаимствоватьИзРодительскойЗадачи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивЗадачДляРасчета = Новый Массив;
	
	Если ЗаимствоватьИзРодительскойЗадачи > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
		
			ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
			ПараметрыСогласования.Задача                   = Объект.Родитель;
			ПараметрыСогласования.Пользователь             = ИсполнительРодительскойЗадачи;
			ПараметрыСогласования.СогласуемыйРесурс        = ДанныеРесурсаВФорме.ВидРесурса;
			ПараметрыСогласования.Количество               = ЗаимствоватьИзРодительскойЗадачи;
			ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
			ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса();
			ПараметрыСогласования.Согласующий              = ИсполнительРодительскойЗадачи;
			
			РегистрыСведений.ПротоколСогласованияРесурсов.ВыделитьРесурсИзЗадачи(ПараметрыСогласования);
			
			ПараметрыСогласования.Задача                   = Объект.Ссылка;
			ПараметрыСогласования.Пользователь             = Объект.Исполнитель;
			РегистрыСведений.ПротоколСогласованияРесурсов.СогласоватьРесурсВЗадаче(ПараметрыСогласования);
			
			ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
			                                        ДанныеРесурсаВФорме.ВидРесурса, 
			                                        ПараметрыСогласования.Количество, 
			                                        Перечисления.СтатусыСогласованияРесурса.Согласовано);
			
			МассивЗадачДляРасчета.Добавить(Объект.Родитель);
			МассивЗадачДляРасчета.Добавить(Объект.Ссылка);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОтразитьИзмененияЗапланированоПриСогласовании(ДанныеРесурсаВФорме.Запланировано,
	                                              СохраненныеДанныеРесурса.Запланировано,
	                                              ДанныеРесурсаВФорме.ВидРесурса, 
	                                              СохраненныеДанныеРесурса.Согласующий, 
	                                              ТекущийПользователь, 
	                                              МассивЗадачДляРасчета);
	
	ПослеВыполненияКомандыСогласованияНаСервере(МассивЗадачДляРасчета, ДанныеРесурсаВФорме);
	
КонецПроцедуры

&НаСервере
Процедура НеСогласоватьВТекущей(ДанныеРесурсаВФорме)

	УстановитьПривилегированныйРежим(Истина);
	
	СохраненныеДанныеРесурса = ЗадачиПроцессов.ДанныеСогласованияЗадачиПоВидуРесурса(Объект.Ссылка,
	                                                                                 Объект.Родитель,
	                                                                                 ДанныеРесурсаВФорме.ВидРесурса, 
	                                                                                 Объект.Предмет,
	                                                                                 Объект.Исполнитель);
	
	ЯвляетсяСогласующимРесурса = (СохраненныеДанныеРесурса.Согласующий = ТекущийПользователь);
	
	КСогласованию = ДанныеРесурсаВФорме.Запланировано - СохраненныеДанныеРесурса.Согласовано;
	
	Если Не ЯвляетсяСогласующимРесурса 
		Или КСогласованию = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивЗадачДляРасчета = Новый Массив;
	
	ОтразитьИзмененияЗапланированоПриСогласовании(ДанныеРесурсаВФорме.Запланировано,
	                                              СохраненныеДанныеРесурса.Запланировано,
	                                              ДанныеРесурсаВФорме.ВидРесурса, 
	                                              СохраненныеДанныеРесурса.Согласующий, 
	                                              ТекущийПользователь, 
	                                              МассивЗадачДляРасчета);
	
	Если КСогласованию <> 0 Тогда
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = Объект.Ссылка;
		ПараметрыСогласования.Исполнитель              = Объект.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс        = ДанныеРесурсаВФорме.ВидРесурса;
		ПараметрыСогласования.Количество               = КСогласованию;
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса();
		ПараметрыСогласования.Согласующий              = СохраненныеДанныеРесурса.Согласующий;
		РегистрыСведений.ПротоколСогласованияРесурсов.НеСогласоватьРесурсВЗадаче(ПараметрыСогласования);
		
		ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
		                                        ДанныеРесурсаВФорме.ВидРесурса, 
		                                        ПараметрыСогласования.Количество, 
		                                        Перечисления.СтатусыСогласованияРесурса.НеСогласовано);
		
		МассивЗадачДляРасчета.Добавить(Объект.Ссылка);
		
	КонецЕсли;
	
	ПослеВыполненияКомандыСогласованияНаСервере(МассивЗадачДляРасчета, ДанныеРесурсаВФорме);
	
КонецПроцедуры

&НаСервере
Процедура СогласоватьВсе(ДанныеРесурсаВФорме)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаимствоватьИзРодительскойЗадачи = 0;
	СогласоватьВТекущей              = 0;
	СогласоватьВДочерних             = 0;
	
	СохраненныеДанныеРесурса = ЗадачиПроцессов.ДанныеСогласованияЗадачиПоВидуРесурса(Объект.Ссылка,
	                                                                                 Объект.Родитель,
	                                                                                 ДанныеРесурсаВФорме.ВидРесурса, 
	                                                                                 Объект.Предмет,
	                                                                                 Объект.Исполнитель);
	
	ЯвляетсяСогласующимРесурса              = (СохраненныеДанныеРесурса.Согласующий = ТекущийПользователь);
	ЯвляетсяИсполнителемРодительскойЗадачи  = (ТекущийПользователь = ИсполнительРодительскойЗадачи);
	
	Запланировано         = ДанныеРесурсаВФорме.Запланировано;
	Согласовано           = СохраненныеДанныеРесурса.Согласовано;
	ДоступноВРодительской = СохраненныеДанныеРесурса.ДоступноВРодительской;
	КСогласованиюВТекущей = Запланировано - Согласовано;
	
	ЗапланированоВДочерних = СохраненныеДанныеРесурса.ЗапланированоВДочерних;
	СогласованоВДочерних   = СохраненныеДанныеРесурса.СогласованоВДочерних;
	КСогласованиюВДочерних = ЗапланированоВДочерних - СогласованоВДочерних;
	
	Если ЯвляетсяИсполнителемРодительскойЗадачи
		И КСогласованиюВТекущей > 0
		И ДоступноВРодительской > 0 Тогда
		
		ЗаимствоватьИзРодительскойЗадачи = Мин(ДоступноВРодительской, КСогласованиюВТекущей);
		КСогласованиюВТекущей = КСогласованиюВТекущей - ЗаимствоватьИзРодительскойЗадачи;
		
	КонецЕсли;
	
	Если КСогласованиюВТекущей <> 0 
		И ЯвляетсяСогласующимРесурса Тогда
		СогласоватьВТекущей =  КСогласованиюВТекущей;
	КонецЕсли;
	
	Если ЯвляетсяСогласующимРесурса
		И  КСогласованиюВДочерних <> 0 Тогда
		
		СогласоватьВДочерних = КСогласованиюВДочерних;
		
	КонецЕсли;
	
	Если ЗаимствоватьИзРодительскойЗадачи = 0
		И СогласоватьВТекущей = 0 
		И СогласоватьВДочерних = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивЗадачДляРасчета = Новый Массив;
	
	Если ЗаимствоватьИзРодительскойЗадачи > 0 Тогда
		
		НачатьТранзакцию();
		
		Попытка
		
			ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
			ПараметрыСогласования.Задача                   = Объект.Родитель;
			ПараметрыСогласования.Исполнитель              = ИсполнительРодительскойЗадачи;
			ПараметрыСогласования.СогласуемыйРесурс        = ДанныеРесурсаВФорме.ВидРесурса;
			ПараметрыСогласования.Количество               = ЗаимствоватьИзРодительскойЗадачи;
			ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
			ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса() - 1;
			ПараметрыСогласования.Согласующий              = ИсполнительРодительскойЗадачи;
			
			РегистрыСведений.ПротоколСогласованияРесурсов.ВыделитьРесурсИзЗадачи(ПараметрыСогласования);
			
			ПараметрыСогласования.Задача                   = Объект.Ссылка;
			ПараметрыСогласования.Задача                   = Объект.Исполнитель;
			РегистрыСведений.ПротоколСогласованияРесурсов.СогласоватьРесурсВЗадаче(ПараметрыСогласования);
			
			ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
			                                        ДанныеРесурсаВФорме.ВидРесурса, 
			                                        ЗаимствоватьИзРодительскойЗадачи, 
			                                        Перечисления.СтатусыСогласованияРесурса.Согласовано);
			
			МассивЗадачДляРасчета.Добавить(Объект.Родитель);
			МассивЗадачДляРасчета.Добавить(Объект.Ссылка);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	ОтразитьИзмененияЗапланированоПриСогласовании(ДанныеРесурсаВФорме.Запланировано,
	                                              СохраненныеДанныеРесурса.Запланировано,
	                                              ДанныеРесурсаВФорме.ВидРесурса, 
	                                              СохраненныеДанныеРесурса.Согласующий, 
	                                              ТекущийПользователь, 
	                                              МассивЗадачДляРасчета);

	Если СогласоватьВТекущей <> 0 Тогда
		
		ПараметрыСогласования = РегистрыСведений.ПротоколСогласованияРесурсов.ПараметрыСогласованияРесурса();
		ПараметрыСогласования.Задача                   = Объект.Ссылка;
		ПараметрыСогласования.Исполнитель              = Объект.Исполнитель;
		ПараметрыСогласования.СогласуемыйРесурс        = ДанныеРесурсаВФорме.ВидРесурса;
		ПараметрыСогласования.Количество               = СогласоватьВТекущей;
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.ТекущаяДата              = ТекущаяДатаСеанса();
		ПараметрыСогласования.Согласующий              = СохраненныеДанныеРесурса.Согласующий;
		РегистрыСведений.ПротоколСогласованияРесурсов.СогласоватьРесурсВЗадаче(ПараметрыСогласования);
		
		ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
		                                        ДанныеРесурсаВФорме.ВидРесурса, 
		                                        СогласоватьВТекущей, 
		                                        Перечисления.СтатусыСогласованияРесурса.Согласовано);
		
		МассивЗадачДляРасчета.Добавить(Объект.Ссылка);
		
	КонецЕсли;
	
	Если СогласоватьВДочерних <> 0 Тогда
		
		ПараметрыСогласования = ЗадачиПроцессов.ПараметрыСогласованияРесурсовДочернихЗадачЗадачи();
		ПараметрыСогласования.ЗадачаПроцесса           = Объект.Ссылка;
		ПараметрыСогласования.ВидСогласуемогоРесурса   = ДанныеРесурсаВФорме.ВидРесурса;
		ПараметрыСогласования.ПредставлениеВидаРесурса = ЗадачиПроцессовКлиентСервер.ПредставлениеВидаРесурса(ДанныеРесурсаВФорме.Наименование, 
		                                                                                                      ДанныеРесурсаВФорме.ЕдиницаИзмерения);
		ПараметрыСогласования.ТекущийПользователь      = ТекущийПользователь;
		ПараметрыСогласования.МассивЗадачДляРасчета    = МассивЗадачДляРасчета;
		ПараметрыСогласования.ИсполнительТекущейЗадачи = Объект.Исполнитель;
		
		ЗадачиПроцессов.СогласоватьРесурсыДочернихЗадачЗадачи(ПараметрыСогласования);
		
		ОтразитьВТаблицеРезультатовСогласования(ЭтотОбъект,
		                                        ДанныеРесурсаВФорме.ВидРесурса, 
		                                        ПараметрыСогласования.КоличествоСогласовано, 
		                                        Перечисления.СтатусыСогласованияРесурса.Согласовано);
		
		Если ПараметрыСогласования.ЕстьОшибки Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПараметрыСогласования.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадачДляРасчета, ДанныеРесурсаВФорме.ВидРесурса, Объект.Предмет);
	ОбновитьИнформациюСогласование(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПослеВыполненияКомандыСогласованияНаСервере(МассивЗадачДляРасчета, ДанныеВидаРесурса)
	
	РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадачДляРасчета,
	                                                                                 ДанныеВидаРесурса.ВидРесурса,
	                                                                                 Объект.Предмет);
	РегистрыСведений.ЗадачиЗапланированоПоСотрудникам.РассчитатьДанныеПоМассивуЗадач(МассивЗадачДляРасчета);
	ОбновитьИнформациюСогласование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласованиеОповестить(ДанныеРесурса, ИмяЭлементаНаправитьСогласовать)
	
	Если ТекущийПользователь = Объект.Исполнитель
		Или (ТекущийПользователь = Объект.Контролирующий
			И ДанныеРесурса.Согласующие.НайтиПоЗначению(ТекущийПользователь) = Неопределено) Тогда
		
		НаправитьНаСогласованиеТекущаяЗадача(ДанныеРесурса, ИмяЭлементаНаправитьСогласовать);
		
	Иначе
		
		ОповеститьОРезультатахСогласования(ДанныеРесурса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласованиеТекущаяЗадача(ДанныеРесурса, ИмяЭлементаНаправитьСогласовать)
	
	ТребуетсяНаправитьСогласующему            = 0;
	ТребуетсяНаправитьИсполнителюРодительской = 0;
	
	КСогласованиюВТекущей  = ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано;
	КСогласованиюВДочерних = ДанныеРесурса.ЗапланированоВДочерних - ДанныеРесурса.СогласованоВДочерних;
	ВсегоКСогласованию     = КСогласованиюВТекущей + КСогласованиюВДочерних;
	ДоступноВРодительской  = ДанныеРесурса.ДоступноВРодительской;
	
	ЯвляетсяСогласующимРесурса                      = ДанныеРесурса.Согласующие.НайтиПоЗначению(ТекущийПользователь) <> Неопределено;
	ЯвляетсяИсполнителемРодительскойЗадачи          = (ТекущийПользователь = ИсполнительРодительскойЗадачи);
	ИсполнительРодительскойЗадачиСогласующийРесурса = ДанныеРесурса.Согласующие.НайтиПоЗначению(ИсполнительРодительскойЗадачи) <> Неопределено;
		
	Если КСогласованиюВТекущей > 0 
		И ДоступноВРодительской > 0 
		И Не ЯвляетсяИсполнителемРодительскойЗадачи
		И Не ИсполнительРодительскойЗадачиСогласующийРесурса Тогда
		
		ТребуетсяНаправитьИсполнителюРодительской = Мин(КСогласованиюВТекущей, ДоступноВРодительской);
		
	КонецЕсли;
	
	Если ВсегоКСогласованию <> 0
		И Не ЯвляетсяСогласующимРесурса Тогда
		
		ТребуетсяНаправитьСогласующему = ВсегоКСогласованию;
		
	КонецЕсли;
	
	ДанныеДляНаправленияРодительская = ДанныеДляНаправленияНаСогласование(ИсполнительРодительскойЗадачи,
		                                                                  ТребуетсяНаправитьИсполнителюРодительской,
		                                                                  ДанныеРесурса.Наименование,
		                                                                  ДанныеРесурса.ЕдиницаИзмерения);
	
	ДанныеДляНаправленияСогласующийРесурс = ДанныеДляНаправленияНаСогласование(СогласущийРесурсаИзСтрокиДанныхРесурса(ДанныеРесурса),
		                                                                       ТребуетсяНаправитьСогласующему, 
		                                                                       ДанныеРесурса.Наименование, 
		                                                                       ДанныеРесурса.ЕдиницаИзмерения);
	
	Если ТребуетсяНаправитьСогласующему <> 0
		И ТребуетсяНаправитьИсполнителюРодительской <> 0 Тогда
		
		ДопонительныеПараметры = Новый Структура;
		ДопонительныеПараметры.Вставить("ИсполнителюРодительскойЗадачи", ДанныеДляНаправленияРодительская);
		ДопонительныеПараметры.Вставить("СогласующемуРесурс",            ДанныеДляНаправленияСогласующийРесурс);
		
		ОповещениеОВыбореКомуНаправить = Новый ОписаниеОповещения("ПослеВыбораСогласующегоПриНаправлении", ЭтотОбъект, ДопонительныеПараметры);
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("ИсполнителюРодительскойЗадачи", СтрШаблон(НСтр("ru = 'Исполнителю родительской задачи для согласования %1 %2'"),
		                                                                 ТребуетсяНаправитьИсполнителюРодительской,
		                                                                 ДанныеРесурса.ЕдиницаИзмерения));
		
		СписокВыбора.Добавить("СогласующемуРесурс",            СтрШаблон(НСтр("ru = 'Согласущему ресурс для согласования %1 %2'"), 
		                                                                 ТребуетсяНаправитьСогласующему, 
		                                                                 ДанныеРесурса.ЕдиницаИзмерения));
		
		ПоказатьВыборИзМеню(ОповещениеОВыбореКомуНаправить, СписокВыбора, Элементы[ИмяЭлементаНаправитьСогласовать]);
		
		Возврат;
		
	КонецЕсли;
	
	Если ТребуетсяНаправитьСогласующему <> 0 Тогда
		
		ВыполнитьНаправлениеНаСогласование(ДанныеДляНаправленияСогласующийРесурс);
		Возврат;
		
	КонецЕсли;
	
	Если ТребуетсяНаправитьИсполнителюРодительской <> 0 Тогда
		
		ВыполнитьНаправлениеНаСогласование(ДанныеДляНаправленияРодительская);
		Возврат;
		
	КонецЕсли;
		

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСогласующегоПриНаправлении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьНаправлениеНаСогласование(ДополнительныеПараметры[Результат.Значение]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНаправлениеНаСогласование(ДанныеНаправления) Экспорт
	
	Объект.ИсполнительПорученияПоЗадаче = ДанныеНаправления.Согласующий;
	
	ПредставлениеВидаРесурса = ЗадачиПроцессовКлиентСервер.ПредставлениеВидаРесурса(ДанныеНаправления.Наименование, ДанныеНаправления.ЕдиницаИзмерения);
	
	ТекстНаправления = ЗадачиПроцессовКлиентСервер.ТекстНаправленияНаСогласование(ПредставлениеВидаРесурса, ДанныеНаправления.Количество); 
	
	Если СтрНайти(ТекстПоручения, ТекстНаправления) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПоручения = ТекстПоручения 
	                + ?(ПустаяСтрока(ТекстПоручения), "", Символы.ПС)
	                + ТекстНаправления;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СогласущийРесурсаИзСтрокиДанныхРесурса(ДанныеРесурса) Экспорт
	
	Если ДанныеРесурса.Согласующие.Количество() > 0 Тогда
		Возврат ДанныеРесурса.Согласующие.Получить(0).Значение;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДанныеДляНаправленияНаСогласование(Согласующий, Количество, Наименование, ЕдиницаИзмерения)
	
	ДанныеДляНаправления = Новый Структура;
	ДанныеДляНаправления.Вставить("Согласующий", Согласующий);
	ДанныеДляНаправления.Вставить("Количество", Количество);
	ДанныеДляНаправления.Вставить("Наименование", Наименование);
	ДанныеДляНаправления.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Возврат ДанныеДляНаправления;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОРезультатахСогласования(ДанныеРесурса)

	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса", ДанныеРесурса.ВидРесурса);
	
	НайденныеСтроки = РезультатыСогласованияВФорме.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДляАнализа = НайденныеСтроки[0];
	
	СогласованоПоРесурсу = СтрокаДляАнализа.Согласовано;
	НеСогласованоПоРесурсу = СтрокаДляАнализа.НеСогласовано;
	
	Если СогласованоПоРесурсу = 0 
		И НеСогласованоПоРесурсу = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОповещения = СтрШаблон(НСтр("ru = 'Результаты согласования по ресурсу %1:'"), ДанныеРесурса.Наименование);
	
	Если СогласованоПоРесурсу <> 0 Тогда
		ТекстОповещения = ТекстОповещения + " " + СтрШаблон(НСтр("ru = 'согласовано: %1 %2'"), СогласованоПоРесурсу, ДанныеРесурса.ЕдиницаИзмерения);
	КонецЕсли;
	
	Если НеСогласованоПоРесурсу <> 0 Тогда
		
		Если СогласованоПоРесурсу <> 0 Тогда
			ТекстОповещения = ТекстОповещения + ", ";
		КонецЕсли;
		
		ТекстОповещения = ТекстОповещения + " " + СтрШаблон(НСтр("ru = 'не согласовано: %1 %2'"), НеСогласованоПоРесурсу, ДанныеРесурса.ЕдиницаИзмерения);
		
	КонецЕсли;
	
	Если СтрНайти(ТекстПоручения, ТекстОповещения) > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПоручения = ТекстПоручения 
	                + ?(ПустаяСтрока(ТекстПоручения), "", Символы.ПС)
	                + ТекстОповещения;
	
	Объект.ИсполнительПорученияПоЗадаче = Объект.Исполнитель;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьВТаблицеРезультатовСогласования(Форма, ВидРесурса, Количество, СтатусСогласования)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса", ВидРесурса);
//	ПараметрыПоиска.Вставить("ВидРесурса", ВидРесурса);
	
	
	НайденныеСтроки = Форма.РезультатыСогласованияВФорме.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаКОтражению = НайденныеСтроки[0];
		
	Иначе
		
		СтрокаКОтражению = Форма.РезультатыСогласованияВФорме.Добавить();
		СтрокаКОтражению.ВидРесурса = ВидРесурса;
		
	КонецЕсли;
	
	Если СтатусСогласования = ПредопределенноеЗначение("Перечисление.СтатусыСогласованияРесурса.Согласовано") Тогда
		
		СтрокаКОтражению.Согласовано = СтрокаКОтражению.Согласовано + Количество;
		
	ИначеЕсли СтатусСогласования = ПредопределенноеЗначение("Перечисление.СтатусыСогласованияРесурса.НеСогласовано") Тогда
		
		СтрокаКОтражению.НеСогласовано = СтрокаКОтражению.НеСогласовано + Количество;
		
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеЧастичногоСогласования(ДанныеРесурса)
	
	ОписаниеОбработчикаЗакрытия = Новый ОписаниеОповещения("ПослеУказанияЧастичногоСогласования", ЭтотОбъект, ДанныеРесурса);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЕдиницаИзмеренияРесурса", ДанныеРесурса.ЕдиницаИзмерения);
	ПараметрыОткрытия.Вставить("Запрошено",               ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано);
	ПараметрыОткрытия.Вставить("НаименованиеРесурса",     ДанныеРесурса.Наименование);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ЧастичноеСогласованиеРесурса", 
	             ПараметрыОткрытия, ЭтотОбъект,
	             ,,,
	             ОписаниеОбработчикаЗакрытия, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУказанияЧастичногоСогласования(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧастичноСогласоватьВТекущей(ДополнительныеПараметры, Результат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеСостояния

&НаСервере
Процедура ОбновитьИнформациюСогласование(ПерезаполнятьПоДаннымИБ)
	
	Если ПерезаполнятьПоДаннымИБ Тогда
		УстановитьДанныеШаблона();
	КонецЕсли;
	
	ТаблицаКомандЕще.Очистить();
	
	Если Не ИспользоватьСогласованиеРесурсов
		Или Не ПравоЧтенияСостояниеСогласования
		Или Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена 
		Или Объект.ПометкаУдаления Тогда
		
		Элементы.ГруппаСогласованиеНеОсновныхРесурсов.Видимость  = Ложь;
		Элементы.ГруппаОсновнойРесурс.Видимость                  = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЕстьОсновнойРесурс   = Ложь;
	ЕстьНеОсновнойРесурс = Ложь;
	СтрокаОсновнойРесурс = Неопределено;
	
	Если Не СогласующиеРесурсы.Количество() = 0 Тогда
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Основной", Истина);
		НайденныеСтроки = СогласующиеРесурсы.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЕстьОсновнойРесурс = Истина;
			СтрокаОсновнойРесурс = НайденныеСтроки[0];
		КонецЕсли;
		
		ПараметрыПоиска.Основной = Ложь;
		НайденныеСтроки = СогласующиеРесурсы.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЕстьНеОсновнойРесурс = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаСогласованиеНеОсновныхРесурсов.Видимость  = ЕстьНеОсновнойРесурс;
	Элементы.ГруппаОсновнойРесурс.Видимость                  = ЕстьОсновнойРесурс;
	
	Если Не ЕстьОсновнойРесурс
		И Не ЕстьНеОсновнойРесурс Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЕстьОсновнойРесурс Тогда
		
		ОбновитьСостояниеСогласованияПоОсновномуРесурсу( СтрокаОсновнойРесурс);
		
	КонецЕсли;
	
	Для Каждого СтрокаРесурс Из СогласующиеРесурсы Цикл
		Если Не СтрокаРесурс.Основной Тогда
			ОбновитьСостояниеСогласованияПоНеОсновномуРесурсу( СтрокаРесурс)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗапланированоПоПользователюПоВидуРесурса(Форма, ВидРесурса)
	
	Данные = Новый Структура;
	Данные.Вставить("ПланТолькоПоИсполнителю",                      Ложь);
	Данные.Вставить("КоличествоПользователей",                      0);
	Данные.Вставить("ЗапланированоПоДругимИсполнителям",            0);
	Данные.Вставить("КоличествоПользователейОтличныхОтИсполнителя", 0);
	
	ЗапланированоПоПользователямПоВидуРесурса = ЗапланированоПоПользователямПоВидуРесурса(Форма, ВидРесурса);
	
	Если ЗапланированоПоПользователямПоВидуРесурса.Количество() = 0 Тогда
		Данные.ПланТолькоПоИсполнителю = Истина;
	ИначеЕсли ЗапланированоПоПользователямПоВидуРесурса.Количество() = 1 
		И ЗапланированоПоПользователямПоВидуРесурса[0].Пользователь = Форма.Объект.Исполнитель Тогда
		Данные.ПланТолькоПоИсполнителю = Истина; 
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из ЗапланированоПоПользователямПоВидуРесурса Цикл
		
		Если ЭлементМассива.Пользователь <> Форма.Объект.Исполнитель Тогда
			Данные.КоличествоПользователейОтличныхОтИсполнителя = Данные.КоличествоПользователейОтличныхОтИсполнителя + 1;
			Данные.ЗапланированоПоДругимИсполнителям =  Данные.ЗапланированоПоДругимИсполнителям + ЭлементМассива.Количество;
		КонецЕсли;
		
		Данные.КоличествоПользователей = Данные.КоличествоПользователей + 1;
		
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеСогласованияПоНеОсновномуРесурсу(ДанныеРесурса)
	
	Если Не ИспользоватьСогласованиеРесурсов Тогда
		Элементы["ГруппаСогласованиеРесурс_" + ДанныеРесурса.КодВидаРесурса].Видимость = Ложь;
		Возврат;
	Иначе
		Элементы["ГруппаСогласованиеРесурс_" + ДанныеРесурса.КодВидаРесурса].Видимость = Истина;
	КонецЕсли;
	
	ДанныеЗапланированоПоПользователюПоВидуРесурса = ДанныеЗапланированоПоПользователюПоВидуРесурса(ЭтотОбъект, ДанныеРесурса.ВидРесурса);

	ПараметрыИнформацияХодСогласования = НовыйПараметрыОтображенияИнформацииПоВидуРесурса();
	ПараметрыИнформацияХодСогласования.КодВидаРесурса                   = ДанныеРесурса.КодВидаРесурса;
	ПараметрыИнформацияХодСогласования.ЕдиницаИзмеренияВидаРесурса       = ДанныеРесурса.ЕдиницаИзмерения;
	ПараметрыИнформацияХодСогласования.ВыполняетсяСогласование           = ДанныеРесурса.ВыполняетсяСогласование;
	ПараметрыИнформацияХодСогласования.Запланировано                     = ДанныеРесурса.Запланировано;
	ПараметрыИнформацияХодСогласования.КСогласованиюВТекущей             = ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано;
	ПараметрыИнформацияХодСогласования.КСогласованиюВДочерних            = ДанныеРесурса.ЗапланированоВДочерних - ДанныеРесурса.СогласованоВДочерних;
	ПараметрыИнформацияХодСогласования.ЗапланированоВДочерних            = ДанныеРесурса.ЗапланированоВДочерних;
	ПараметрыИнформацияХодСогласования.СогласованоВДочерних              = ДанныеРесурса.СогласованоВДочерних;
	ПараметрыИнформацияХодСогласования.ДоступноВРодительской             = ДанныеРесурса.ДоступноВРодительской;
	ПараметрыИнформацияХодСогласования.Исполнитель                       = Объект.Исполнитель;
	ПараметрыИнформацияХодСогласования.ИсполнительРодительскойЗадачи     = ИсполнительРодительскойЗадачи;
	ПараметрыИнформацияХодСогласования.ИмяЭлементаЗапланировано          = "ЗапланированоРесурс_" + ДанныеРесурса.КодВидаРесурса;
	ПараметрыИнформацияХодСогласования.ИмяРеквизитаЗапланировано         = "ЗапланированоРесурс_" + ДанныеРесурса.КодВидаРесурса;
	ПараметрыИнформацияХодСогласования.ИмяЭлементаХодСогласования        = "ДекорацияХодСогласованияРесурс_" + ДанныеРесурса.КодВидаРесурса;
	ПараметрыИнформацияХодСогласования.ИмяДекорацииЕдИзРесурса           = "ДекорацияЕдИзмПланРесурс_" + ДанныеРесурса.КодВидаРесурса;
	ПараметрыИнформацияХодСогласования.ЕстьПодчиненныеЗначимыеЗадачи     = ЕстьПодчиненныеЗначимыеЗадачи;
	ПараметрыИнформацияХодСогласования.ПланПоИсполнителю                 = ДанныеЗапланированоПоПользователюПоВидуРесурса.ПланТолькоПоИсполнителю;
	ПараметрыИнформацияХодСогласования.ЗапланированоДляПользователей     = ДанныеЗапланированоПоПользователюПоВидуРесурса.КоличествоПользователейОтличныхОтИсполнителя;
	ПараметрыИнформацияХодСогласования.ЗапланированоПоДругимИсполнителям = ДанныеЗапланированоПоПользователюПоВидуРесурса.ЗапланированоПоДругимИсполнителям;
	ПараметрыИнформацияХодСогласования.РодительскаяЗадача                = Объект.Родитель;
	ПараметрыИнформацияХодСогласования.ЗадачаШаблона                     = Объект.ЗадачаШаблона;

	ОтобразитьИнформациюПланХодСогласованияПоВидуРесурса(ПараметрыИнформацияХодСогласования);
	
	ПараметрыОтображенияСогласовать = НовыйПараметрыОтображенияСогласовать();
	ПараметрыОтображенияСогласовать.КодВидаРесурса                = ДанныеРесурса.КодВидаРесурса;
	ПараметрыОтображенияСогласовать.КодВидаРесурса                = ДанныеРесурса.ВыполняетсяСогласование;
	ПараметрыОтображенияСогласовать.КСогласованиюВТекущей         = ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано;
	ПараметрыОтображенияСогласовать.КСогласованиюВДочерних        = ДанныеРесурса.ЗапланированоВДочерних - ДанныеРесурса.СогласованоВДочерних;
	ПараметрыОтображенияСогласовать.ДоступноВРодительской         = ДанныеРесурса.ДоступноВРодительской;
	ПараметрыОтображенияСогласовать.ТекущийПользователь           = ТекущийПользователь;
	ПараметрыОтображенияСогласовать.ИсполнительРодительскойЗадачи = ИсполнительРодительскойЗадачи;
	ПараметрыОтображенияСогласовать.Исполнитель                   = Объект.Исполнитель;
	ПараметрыОтображенияСогласовать.СогласующиеРесурс             = ДанныеРесурса.Согласующие;
	ПараметрыОтображенияСогласовать.ИмяЭлементаСогласовать        = "СогласоватьРесурс_" + ДанныеРесурса.КодВидаРесурса;
	ПараметрыОтображенияСогласовать.ЕдиницаИзмеренияВидаРесурса   = ДанныеРесурса.ЕдиницаИзмерения;
	ПараметрыОтображенияСогласовать.ИмяКомандыСогласовать         = "СогласоватьРесурс_" + ДанныеРесурса.КодВидаРесурса;
	ПараметрыОтображенияСогласовать.ПостфиксГруппыЕще             = "Ресурс_" + ДанныеРесурса.КодВидаРесурса;
	
	ОтобразитьСогласоватьДляРесурса(ПараметрыОтображенияСогласовать);
	
	ПараметрыНаправитьОповестить = НовыйПараметрыОтображенияКомандыНаправитьОповеститьСогласование();
	ПараметрыНаправитьОповестить.ВидРесурса                     = ДанныеРесурса.ВидРесурса;
	ПараметрыНаправитьОповестить.ВыполняетсяСогласование        = ДанныеРесурса.ВыполняетсяСогласование;
	ПараметрыНаправитьОповестить.КодВидаРесурса                 = ДанныеРесурса.КодВидаРесурса;
	ПараметрыНаправитьОповестить.ЕдиницаИзмеренияВидаРесурса    = ДанныеРесурса.ЕдиницаИзмерения;
	ПараметрыНаправитьОповестить.Запланировано                  = ДанныеРесурса.Запланировано;
	ПараметрыНаправитьОповестить.ТекущийПользователь            = ТекущийПользователь;
	ПараметрыНаправитьОповестить.КСогласованиюВТекущей          = ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано;
	ПараметрыНаправитьОповестить.КСогласованиюВДочерних         = ДанныеРесурса.ЗапланированоВДочерних - ДанныеРесурса.СогласованоВДочерних;
	ПараметрыНаправитьОповестить.ДоступноВРодительской          = ДанныеРесурса.ДоступноВРодительской;
	ПараметрыНаправитьОповестить.СогласующиеРесурс              = ДанныеРесурса.Согласующие;
	ПараметрыНаправитьОповестить.Исполнитель                    = Объект.Исполнитель;
	ПараметрыНаправитьОповестить.Контролирующий                 = Объект.Контролирующий;
	ПараметрыНаправитьОповестить.ИсполнительРодительскойЗадачи  = ИсполнительРодительскойЗадачи;
	ПараметрыНаправитьОповестить.ИмяЭлементаНаправитьОповестить = "НаправитьНаСогласованииОповеститьРесурс_" + ДанныеРесурса.КодВидаРесурса;
	ПараметрыНаправитьОповестить.ИмяКомандыНаправитьОповестить  = "НаправитьНаСогласованииОповеститьРесурс_" + ДанныеРесурса.КодВидаРесурса;
	
	ОтобразитьНаправитьОповеститьСогласование(ПараметрыНаправитьОповестить)
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСогласованияПоОсновномуРесурсу(ДанныеРесурса)
	
	ДанныеЗапланированоПоПользователюПоВидуРесурса = ДанныеЗапланированоПоПользователюПоВидуРесурса(ЭтотОбъект, ДанныеРесурса.ВидРесурса);
	
	ПараметрыИнформацияХодСогласования = НовыйПараметрыОтображенияИнформацииПоВидуРесурса();
	ПараметрыИнформацияХодСогласования.КодВидаРесурса                    = ДанныеРесурса.КодВидаРесурса;
	ПараметрыИнформацияХодСогласования.ВыполняетсяСогласование           = ДанныеРесурса.ВыполняетсяСогласование;
	ПараметрыИнформацияХодСогласования.ЕдиницаИзмеренияВидаРесурса       = ДанныеРесурса.ЕдиницаИзмерения;
	ПараметрыИнформацияХодСогласования.Запланировано                     = ДанныеРесурса.Запланировано;
	ПараметрыИнформацияХодСогласования.КСогласованиюВТекущей             = ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано;
	ПараметрыИнформацияХодСогласования.КСогласованиюВДочерних            = ДанныеРесурса.ЗапланированоВДочерних - ДанныеРесурса.СогласованоВДочерних;
	ПараметрыИнформацияХодСогласования.ЗапланированоВДочерних            = ДанныеРесурса.ЗапланированоВДочерних;
	ПараметрыИнформацияХодСогласования.СогласованоВДочерних              = ДанныеРесурса.СогласованоВДочерних;
	ПараметрыИнформацияХодСогласования.ДоступноВРодительской             = ДанныеРесурса.ДоступноВРодительской;
	ПараметрыИнформацияХодСогласования.Исполнитель                       = Объект.Исполнитель;
	ПараметрыИнформацияХодСогласования.ИсполнительРодительскойЗадачи     = ИсполнительРодительскойЗадачи;
	ПараметрыИнформацияХодСогласования.ИмяЭлементаЗапланировано          = "ЗапланированоОсновнойРесурс";
	ПараметрыИнформацияХодСогласования.ИмяРеквизитаЗапланировано         = "ЗапланированоОсновнойРесурс";
	ПараметрыИнформацияХодСогласования.ИмяЭлементаХодСогласования        = "ДекорацияХодСогласованияОсновнойРесурс";
	ПараметрыИнформацияХодСогласования.ИмяДекорацииЕдИзРесурса           = "ДекорацияЕдИзмПланОсновнойРесурс";
	ПараметрыИнформацияХодСогласования.ЕстьПодчиненныеЗначимыеЗадачи     = ЕстьПодчиненныеЗначимыеЗадачи;
	ПараметрыИнформацияХодСогласования.ПланПоИсполнителю                 = ДанныеЗапланированоПоПользователюПоВидуРесурса.ПланТолькоПоИсполнителю;
	ПараметрыИнформацияХодСогласования.ЗапланированоДляПользователей     = ДанныеЗапланированоПоПользователюПоВидуРесурса.КоличествоПользователейОтличныхОтИсполнителя;
	ПараметрыИнформацияХодСогласования.ЗапланированоПоДругимИсполнителям = ДанныеЗапланированоПоПользователюПоВидуРесурса.ЗапланированоПоДругимИсполнителям;
	ПараметрыИнформацияХодСогласования.РодительскаяЗадача                = Объект.Родитель;
	ПараметрыИнформацияХодСогласования.ЗадачаШаблона                     = Объект.ЗадачаШаблона;

	ОтобразитьИнформациюПланХодСогласованияПоВидуРесурса(ПараметрыИнформацияХодСогласования);
	
	ПараметрыОтображенияСогласовать = НовыйПараметрыОтображенияСогласовать();
	ПараметрыОтображенияСогласовать.КодВидаРесурса                = ДанныеРесурса.КодВидаРесурса;
	ПараметрыОтображенияСогласовать.ВыполняетсяСогласование       = ДанныеРесурса.ВыполняетсяСогласование;
	ПараметрыОтображенияСогласовать.КСогласованиюВТекущей         = ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано;
	ПараметрыОтображенияСогласовать.КСогласованиюВДочерних        = ДанныеРесурса.ЗапланированоВДочерних - ДанныеРесурса.СогласованоВДочерних;
	ПараметрыОтображенияСогласовать.ДоступноВРодительской         = ДанныеРесурса.ДоступноВРодительской;
	ПараметрыОтображенияСогласовать.ТекущийПользователь           = ТекущийПользователь;
	ПараметрыОтображенияСогласовать.ИсполнительРодительскойЗадачи = ИсполнительРодительскойЗадачи;
	ПараметрыОтображенияСогласовать.Исполнитель                   = Объект.Исполнитель;
	ПараметрыОтображенияСогласовать.СогласующиеРесурс             = ДанныеРесурса.Согласующие;
	ПараметрыОтображенияСогласовать.ИмяЭлементаСогласовать        = "СогласоватьОсновнойРесурс";
	ПараметрыОтображенияСогласовать.ЕдиницаИзмеренияВидаРесурса   = ДанныеРесурса.ЕдиницаИзмерения;
	ПараметрыОтображенияСогласовать.ИмяКомандыСогласовать         = "СогласоватьОсновнойРесурс";
	ПараметрыОтображенияСогласовать.ПостфиксГруппыЕще             = "ОсновнойРесурс";
	
	ОтобразитьСогласоватьДляРесурса(ПараметрыОтображенияСогласовать);
	
	ПараметрыНаправитьОповестить = НовыйПараметрыОтображенияКомандыНаправитьОповеститьСогласование();
	ПараметрыНаправитьОповестить.ВидРесурса                     = ДанныеРесурса.ВидРесурса;
	ПараметрыНаправитьОповестить.ВыполняетсяСогласование        = ДанныеРесурса.ВыполняетсяСогласование;
	ПараметрыНаправитьОповестить.КодВидаРесурса                 = ДанныеРесурса.КодВидаРесурса;
	ПараметрыНаправитьОповестить.ЕдиницаИзмеренияВидаРесурса    = ДанныеРесурса.ЕдиницаИзмерения;
	ПараметрыНаправитьОповестить.Запланировано                  = ДанныеРесурса.Запланировано;
	ПараметрыНаправитьОповестить.ТекущийПользователь            = ТекущийПользователь;
	ПараметрыНаправитьОповестить.КСогласованиюВТекущей          = ДанныеРесурса.Запланировано - ДанныеРесурса.Согласовано;
	ПараметрыНаправитьОповестить.КСогласованиюВДочерних         = ДанныеРесурса.ЗапланированоВДочерних - ДанныеРесурса.СогласованоВДочерних;
	ПараметрыНаправитьОповестить.ДоступноВРодительской          = ДанныеРесурса.ДоступноВРодительской;
	ПараметрыНаправитьОповестить.СогласующиеРесурс              = ДанныеРесурса.Согласующие;
	ПараметрыНаправитьОповестить.Исполнитель                    = Объект.Исполнитель;
	ПараметрыНаправитьОповестить.Контролирующий                 = Объект.Контролирующий;
	ПараметрыНаправитьОповестить.ИсполнительРодительскойЗадачи  = ИсполнительРодительскойЗадачи;
	ПараметрыНаправитьОповестить.ИмяЭлементаНаправитьОповестить = "НаправитьНаСогласованииОповеститьОсновнойРесурс";
	ПараметрыНаправитьОповестить.ИмяКомандыНаправитьОповестить  = "НаправитьНаСогласованииОповеститьОсновнойРесурс";
	
	ОтобразитьНаправитьОповеститьСогласование(ПараметрыНаправитьОповестить);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНаправитьОповеститьСогласование(ПараметрыОтображения)
	
	ЭлементНаправитьОповестить =  Элементы[ПараметрыОтображения.ИмяЭлементаНаправитьОповестить];
	
	Если Не ПараметрыОтображения.ВыполняетсяСогласование Тогда
		
		ЭлементНаправитьОповестить.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЯвляетсяСогласующимРесурса              = (ПараметрыОтображения.СогласующиеРесурс.НайтиПоЗначению(ПараметрыОтображения.ТекущийПользователь) <> Неопределено);
	ЯвляетсяИсполнителемРодительскойЗадачи  =  ПараметрыОтображения.ТекущийПользователь = ПараметрыОтображения.ИсполнительРодительскойЗадачи;
	
	ОбщееКоличествоКСогласованию        = ПараметрыОтображения.КСогласованиюВТекущей + ПараметрыОтображения.КСогласованиюВДочерних;
	ДоступноКСогласованию               = 0;
	ДоступноКСогласованиюИзРодительской = 0;
	
	Если ЯвляетсяСогласующимРесурса Тогда
		ДоступноКСогласованию               = ОбщееКоличествоКСогласованию;
		ДоступноКСогласованиюИзРодительской = Мин(ПараметрыОтображения.КСогласованиюВТекущей, ПараметрыОтображения.ДоступноВРодительской);
	ИначеЕсли ЯвляетсяИсполнителемРодительскойЗадачи
		И ПараметрыОтображения.КСогласованиюВТекущей > 0 Тогда
		ДоступноКСогласованиюИзРодительской = Мин(ПараметрыОтображения.КСогласованиюВТекущей, ПараметрыОтображения.ДоступноВРодительской);
		ДоступноКСогласованию               = ДоступноКСогласованиюИзРодительской;
	КонецЕсли;
	
	ПараметрыОтображения.ЕстьРезультатыСогласования = ЕстьРезультатыСогласованияПоВидуРесурса(ЭтотОбъект, ПараметрыОтображения.ВидРесурса);
	
	ЭлементНаправитьОповестить.Видимость = ВидимостьНаправитьНаСогласование(ПараметрыОтображения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьРезультатыСогласованияПоВидуРесурса(Форма, ВидРесурса)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ВидРесурса", ВидРесурса);
	
	НайденныеСтроки = Форма.РезультатыСогласованияВФорме.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаДляАнализа = НайденныеСтроки[0];
	
	Если СтрокаДляАнализа.Согласовано = 0
		И СтрокаДляАнализа.НеСогласовано = 0 Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ВидимостьНаправитьНаСогласование(ПараметрыОтображения)
	
	Если ПараметрыОтображения.Исполнитель <> ПараметрыОтображения.ТекущийПользователь
		И ПараметрыОтображения.Контролирующий <> ПараметрыОтображения.ТекущийПользователь Тогда
		
		Если ПараметрыОтображения.ЕстьРезультатыСогласования Тогда
			Команды[ПараметрыОтображения.ИмяКомандыНаправитьОповестить].Подсказка = НСтр("ru = 'Оповестить исполнителья о результатах согласования'");
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыОтображения.КСогласованиюВТекущей = 0
		И ПараметрыОтображения.КСогласованиюВДочерних = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыОтображения.СогласующиеРесурс.НайтиПоЗначению(ПараметрыОтображения.ТекущийПользователь) <> Неопределено Тогда
		Возврат Ложь;
	Иначе
		Команды[ПараметрыОтображения.ИмяКомандыНаправитьОповестить].Подсказка = СтрШаблон(НСтр("ru = 'Направить запланированные %1 %2 на согласование'"), 
		                                                                                  ПараметрыОтображения.КСогласованиюВТекущей + ПараметрыОтображения.КСогласованиюВДочерних, 
		                                                                                  ПараметрыОтображения.ЕдиницаИзмеренияВидаРесурса);
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыОтображенияКомандыНаправитьОповеститьСогласование()
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("ВидРесурса",                     Неопределено);
	ПараметрыОтображения.Вставить("ВыполняетсяСогласование",        Ложь);
	ПараметрыОтображения.Вставить("КодВидаРесурса",                 "");
	ПараметрыОтображения.Вставить("ЕдиницаИзмеренияВидаРесурса",    "");
	ПараметрыОтображения.Вставить("Запланировано",                  0);
	ПараметрыОтображения.Вставить("КСогласованиюВТекущей",          0);
	ПараметрыОтображения.Вставить("КСогласованиюВДочерних",         0);
	ПараметрыОтображения.Вставить("ДоступноВРодительской",          0);
	ПараметрыОтображения.Вставить("ТекущийПользователь",            Неопределено);
	ПараметрыОтображения.Вставить("Исполнитель",                    Неопределено);
	ПараметрыОтображения.Вставить("Контролирующий",                 Неопределено);
	ПараметрыОтображения.Вставить("СогласующиеРесурс",              Неопределено);
	ПараметрыОтображения.Вставить("ИсполнительРодительскойЗадачи",  Неопределено);
	ПараметрыОтображения.Вставить("ИмяЭлементаНаправитьОповестить", "НаправитьНаСогласованииОповеститьОсновнойРесурс");
	ПараметрыОтображения.Вставить("ИмяКомандыНаправитьОповестить",  "");
	ПараметрыОтображения.Вставить("ЕстьПодчиненныеЗначимыеЗадачи",  Ложь);
	ПараметрыОтображения.Вставить("ЕстьРезультатыСогласования",     Ложь);
	
	Возврат ПараметрыОтображения;
	
КонецФункции

&НаСервере
Процедура ОтобразитьИнформациюПланХодСогласованияПоВидуРесурса(ПараметрыОтображения)
	
	ЭтотОбъект[ПараметрыОтображения.ИмяРеквизитаЗапланировано]       = ПараметрыОтображения.Запланировано;
	Элементы[ПараметрыОтображения.ИмяДекорацииЕдИзРесурса].Заголовок = ПараметрыОтображения.ЕдиницаИзмеренияВидаРесурса; 
	
	ТекстНадписиПоПользователям = "";
	
	Если Не ПараметрыОтображения.ВыполняетсяСогласование
		И ЗначениеЗаполнено(ПараметрыОтображения.ЗадачаШаблона)
		И Не ЗначениеЗаполнено(ПараметрыОтображения.РодительскаяЗадача) Тогда
		
		ТекстНадписиПоПользователям = СтрШаблон(НСтр("ru = 'в т.ч по другим исполнителям - %1'"), ПараметрыОтображения.ЗапланированоПоДругимИсполнителям);
		
		Если Не ПараметрыОтображения.ПланПоИсполнителю Тогда
			Элементы[ПараметрыОтображения.ИмяЭлементаЗапланировано].ТолькоПросмотр = Истина;
		Иначе
			Элементы[ПараметрыОтображения.ИмяЭлементаЗапланировано].ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстГиперссылки = "ПланированиеПоПользователям_" + ПараметрыОтображения.КодВидаРесурса;
	ПланированиеПоПользователямПредставление = Новый ФорматированнаяСтрока(ТекстНадписиПоПользователям, , ЦветГиперссылки,,ТекстГиперссылки);
	
	ТекстНадписи = "";
	
	Если ПараметрыОтображения.КСогласованиюВТекущей <> 0
		И ПараметрыОтображения.ВыполняетсяСогласование Тогда
		
		ТекстНадписи = СтрШаблон(НСтр("ru = 'К согл.: %1'"), ПараметрыОтображения.КСогласованиюВТекущей);
		
	ИначеЕсли ПараметрыОтображения.Запланировано <> 0
		И ПараметрыОтображения.ВыполняетсяСогласование Тогда
		
		ТекстНадписи = НСтр("ru = 'все согласовано'");
		
	ИначеЕсли Не ПараметрыОтображения.ВыполняетсяСогласование Тогда 
		
		ТекстНадписи = НСтр("ru = 'история'");
		
	КонецЕсли;
	
	ТекстГиперссылки = "ПротоколСогласования_" + ПараметрыОтображения.КодВидаРесурса;
	ХодСогласованияПредставление = Новый ФорматированнаяСтрока(ТекстНадписи, , ЦветГиперссылки,,ТекстГиперссылки);
	
	Если Не ПустаяСтрока(ТекстНадписиПоПользователям) Тогда
		ХодСогласованияПредставление = Новый ФорматированнаяСтрока(ПланированиеПоПользователямПредставление, "  ", ХодСогласованияПредставление);
	КонецЕсли;
	
	ХодСогласованияДочерниеПредставление = "";
	
	Если ПараметрыОтображения.ЗапланированоВДочерних <> 0 
		Или ПараметрыОтображения.СогласованоВДочерних <> 0 Тогда
		
		ХодСогласованияДочерниеПредставление = " " + НСтр("ru = 'Дочерние:'") + " ";
		
		Если ПараметрыОтображения.ЗапланированоВДочерних <> 0 Тогда
			
			ТекстНадписи = СтрШаблон(НСтр("ru = 'план: %1'"), ПараметрыОтображения.ЗапланированоВДочерних);
			ТекстГиперссылки = "ПодчиненныеЗадачи_" + ПараметрыОтображения.КодВидаРесурса;
			СтрокаПланДочерние = Новый ФорматированнаяСтрока(ТекстНадписи,,ЦветГиперссылки,,ТекстГиперссылки);
			ХодСогласованияДочерниеПредставление = Новый ФорматированнаяСтрока(ХодСогласованияДочерниеПредставление, " ", СтрокаПланДочерние);
			
			Если ПараметрыОтображения.ВыполняетсяСогласование Тогда
				
				Если ПараметрыОтображения.КСогласованиюВДочерних <> 0 Тогда
					
					ТекстНадписи = СтрШаблон(НСтр("ru = 'к согл.: %1'"), ПараметрыОтображения.КСогласованиюВДочерних);
					СтрокаКСогласованиюДочерние = Новый ФорматированнаяСтрока(ТекстНадписи,, ЦветГиперссылки,,ТекстГиперссылки);
					
				Иначе
					
					ТекстНадписи = НСтр("ru = 'все согласовано'");
					СтрокаКСогласованиюДочерние = Новый ФорматированнаяСтрока(ТекстНадписи,, ЦветГиперссылки,,ТекстГиперссылки);
					
				КонецЕсли;
				
				Разделитель =  Новый ФорматированнаяСтрока(", ",, ЦветГиперссылки,, ТекстГиперссылки);
				ХодСогласованияДочерниеПредставление = Новый ФорматированнаяСтрока(ХодСогласованияДочерниеПредставление, Разделитель, СтрокаКСогласованиюДочерние);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ХодСогласованияПредставление = Новый ФорматированнаяСтрока(ХодСогласованияПредставление, " " ,ХодСогласованияДочерниеПредставление);
		
	КонецЕсли;
	
	Элементы[ПараметрыОтображения.ИмяЭлементаХодСогласования].Заголовок = ХодСогласованияПредставление;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыОтображенияИнформацииПоВидуРесурса()
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("КодВидаРесурса",                    "");
	ПараметрыОтображения.Вставить("ВыполняетсяСогласование",           Ложь);
	ПараметрыОтображения.Вставить("ЕдиницаИзмеренияВидаРесурса",       "");
	ПараметрыОтображения.Вставить("Запланировано",                     0);
	ПараметрыОтображения.Вставить("КСогласованиюВТекущей",             0);
	ПараметрыОтображения.Вставить("КСогласованиюВДочерних",            0);
	ПараметрыОтображения.Вставить("ДоступноВРодительской",             0);
	ПараметрыОтображения.Вставить("ЗапланированоВДочерних",            0);
	ПараметрыОтображения.Вставить("СогласованоВДочерних",              0); 
	ПараметрыОтображения.Вставить("ПланПоИсполнителю",                 Истина);
	ПараметрыОтображения.Вставить("ЗапланированоДляПользователей",     0);
	ПараметрыОтображения.Вставить("ЗапланированоПоДругимИсполнителям", 0);
	ПараметрыОтображения.Вставить("Исполнитель",                       Неопределено);
	ПараметрыОтображения.Вставить("РодительскаяЗадача",                Неопределено);
	ПараметрыОтображения.Вставить("ЗадачаШаблона",                     Неопределено);
	ПараметрыОтображения.Вставить("ИсполнительРодительскойЗадачи",     Неопределено);
	ПараметрыОтображения.Вставить("ИмяРеквизитаЗапланировано",         "");
	ПараметрыОтображения.Вставить("ИмяЭлементаЗапланировано",          "");
	ПараметрыОтображения.Вставить("ИмяДекорацииЕдИзРесурса",           "");
	ПараметрыОтображения.Вставить("ИмяЭлементаХодСогласования",        Неопределено);
	ПараметрыОтображения.Вставить("ЕстьПодчиненныеЗначимыеЗадачи",     Ложь);
	
	
	Возврат ПараметрыОтображения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыОтображенияСогласовать() 
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("КодВидаРесурса",                "");
	ПараметрыОтображения.Вставить("ВыполняетсяСогласование",       Ложь);
	ПараметрыОтображения.Вставить("КСогласованиюВТекущей",         0);
	ПараметрыОтображения.Вставить("КСогласованиюВДочерних",        0);
	ПараметрыОтображения.Вставить("ДоступноВРодительской",         0);
	ПараметрыОтображения.Вставить("ТекущийПользователь",           Неопределено);
	ПараметрыОтображения.Вставить("Исполнитель",                   Неопределено);
	ПараметрыОтображения.Вставить("ИсполнительРодительскойЗадачи", Неопределено);
	ПараметрыОтображения.Вставить("СогласующиеРесурс",             Неопределено);
	ПараметрыОтображения.Вставить("ИмяЭлементаСогласовать",        "");
	ПараметрыОтображения.Вставить("ИмяКомандыСогласовать",         "");
	ПараметрыОтображения.Вставить("ЕдиницаИзмеренияВидаРесурса",   "");
	ПараметрыОтображения.Вставить("ПостфиксГруппыЕще",             "");

	Возврат ПараметрыОтображения; 
	
КонецФункции

&НаСервере
Процедура ОтобразитьСогласоватьДляРесурса(ПараметрыОтображения)
	
	ЭлементСогласовать = Элементы[ПараметрыОтображения.ИмяЭлементаСогласовать];
	ЭлементГруппаЕще   = Элементы["ГруппаЕще" + ПараметрыОтображения.ПостфиксГруппыЕще];
	
	Если Не ПараметрыОтображения.ВыполняетсяСогласование Тогда
		
		ЭлементСогласовать.Видимость = Ложь;
		ЭлементГруппаЕще.Видимость   = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЯвляетсяСогласующимРесурса              = (ПараметрыОтображения.СогласующиеРесурс.НайтиПоЗначению(ПараметрыОтображения.ТекущийПользователь) <> Неопределено);
	ЯвляетсяИсполнителемРодительскойЗадачи  =  ПараметрыОтображения.ТекущийПользователь = ПараметрыОтображения.ИсполнительРодительскойЗадачи;
	
	ОбщееКоличествоКСогласованию        = ПараметрыОтображения.КСогласованиюВТекущей + ПараметрыОтображения.КСогласованиюВДочерних;
	ДоступноКСогласованию               = 0;
	ДоступноКСогласованиюИзРодительской = 0;
	
	Если ЯвляетсяСогласующимРесурса Тогда
		ДоступноКСогласованию               = ОбщееКоличествоКСогласованию;
		ДоступноКСогласованиюИзРодительской = Мин(ПараметрыОтображения.КСогласованиюВТекущей, ПараметрыОтображения.ДоступноВРодительской);
	ИначеЕсли ЯвляетсяИсполнителемРодительскойЗадачи
		И ПараметрыОтображения.КСогласованиюВТекущей > 0 Тогда
		ДоступноКСогласованиюИзРодительской = Мин(ПараметрыОтображения.КСогласованиюВТекущей, ПараметрыОтображения.ДоступноВРодительской);
		ДоступноКСогласованию               = ДоступноКСогласованиюИзРодительской;
	КонецЕсли;
	
	Если ДоступноКСогласованию <> 0 Тогда
		
		ЭлементСогласовать.Видимость = Истина;
		ЭлементСогласовать.Заголовок = СтрШаблон(НСтр("ru = '%1 %2'"), ДоступноКСогласованию, ПараметрыОтображения.ЕдиницаИзмеренияВидаРесурса);
		
		ПараметрыПодсказки = НовыйПараметрыПодсказкиОсновнойКомандыСогласовать();
		ПараметрыПодсказки.ОбщееКоличествоКСогласованию        = ОбщееКоличествоКСогласованию;
		ПараметрыПодсказки.ДоступноКСогласованию                    = ДоступноКСогласованию;
		ПараметрыПодсказки.ДоступноКСогласованиюИзРодительской      = ДоступноКСогласованиюИзРодительской;
		ПараметрыПодсказки.ЯвляетсяСогласующимРесурса               = ЯвляетсяСогласующимРесурса;
		ПараметрыПодсказки.ЯвляетсяИсполнителемРодительскойЗадачи   = ЯвляетсяИсполнителемРодительскойЗадачи;
		ПараметрыПодсказки.ЕдиницаИзмеренияВидаРесурса              = ПараметрыОтображения.ЕдиницаИзмеренияВидаРесурса;
		
		Команды[ПараметрыОтображения.ИмяКомандыСогласовать].Подсказка = ПодсказкаОсновнойКомандыСогласовать(ПараметрыПодсказки);
		
		ПараметрыФормированияГруппыЕщеПоРесурсу = НовыйПараметрыФормированияГруппыЕщеПоРесурсу();
		ПараметрыФормированияГруппыЕщеПоРесурсу.Форма                                  = ЭтотОбъект;
		ПараметрыФормированияГруппыЕщеПоРесурсу.КодВидаРесурса                         = ПараметрыОтображения.КодВидаРесурса;
		ПараметрыФормированияГруппыЕщеПоРесурсу.КСогласованиюВТекущей                  = ПараметрыОтображения.КСогласованиюВТекущей;
		ПараметрыФормированияГруппыЕщеПоРесурсу.КСогласованиюВДочерних                 = ПараметрыОтображения.КСогласованиюВДочерних;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ДоступноВРодительской                  = ПараметрыОтображения.ДоступноВРодительской;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ДоступноКСогласованию                  = ДоступноКСогласованию;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ДоступноКСогласованиюИзРодительской    = ДоступноКСогласованиюИзРодительской;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ТекущийПользователь                    = ПараметрыОтображения.ТекущийПользователь;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ЯвляетсяСогласующимРесурса             = ЯвляетсяСогласующимРесурса;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ЯвляетсяИсполнителемРодительскойЗадачи = ЯвляетсяИсполнителемРодительскойЗадачи;
		ПараметрыФормированияГруппыЕщеПоРесурсу.Исполнитель                            = ПараметрыОтображения.Исполнитель;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ИсполнительРодительскойЗадачи          = ПараметрыОтображения.ИсполнительРодительскойЗадачи;;
		ПараметрыФормированияГруппыЕщеПоРесурсу.СогласующиеРесурс                      = ПараметрыОтображения.СогласующиеРесурс;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ЕдиницаИзмеренияВидаРесурса            = ПараметрыОтображения.ЕдиницаИзмеренияВидаРесурса;
		ПараметрыФормированияГруппыЕщеПоРесурсу.ПостфиксГруппыЕще                      = ПараметрыОтображения.ПостфиксГруппыЕще;
		
		ОтобразитьГруппуЕщеПоРесурсу(ПараметрыФормированияГруппыЕщеПоРесурсу);
		
	Иначе
		
		ЭлементСогласовать.Видимость = Ложь;
		ЭлементГруппаЕще.Видимость   = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыФормированияГруппыЕщеПоРесурсу()
	
	ПараметрыФормирования =  Новый Структура;
	ПараметрыФормирования.Вставить("Форма",                                  Неопределено);
	ПараметрыФормирования.Вставить("ВидРесурса",                             Неопределено);
	ПараметрыФормирования.Вставить("КодВидаРесурса",                         "");
	ПараметрыФормирования.Вставить("КСогласованиюВТекущей",                  0);
	ПараметрыФормирования.Вставить("КСогласованиюВДочерних",                 0);
	ПараметрыФормирования.Вставить("ДоступноВРодительской",                  0);
	ПараметрыФормирования.Вставить("ДоступноКСогласованию",                  0);
	ПараметрыФормирования.Вставить("ДоступноКСогласованиюИзРодительской",    0);
	ПараметрыФормирования.Вставить("ТекущийПользователь",                    Неопределено);
	ПараметрыФормирования.Вставить("ЯвляетсяСогласующимРесурса",             Ложь);
	ПараметрыФормирования.Вставить("ЯвляетсяИсполнителемРодительскойЗадачи", Ложь);
	ПараметрыФормирования.Вставить("Исполнитель",                            Неопределено);
	ПараметрыФормирования.Вставить("ИсполнительРодительскойЗадачи",          Неопределено);
	ПараметрыФормирования.Вставить("СогласующиеРесурс",                      Неопределено);
	ПараметрыФормирования.Вставить("ЕдиницаИзмеренияВидаРесурса",            "");
	ПараметрыФормирования.Вставить("ПостфиксГруппыЕще",                      "");
	
	Возврат  ПараметрыФормирования;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтобразитьГруппуЕщеПоРесурсу(ПараметрыФормирования)
	
	Форма    = ПараметрыФормирования.Форма;
	Элементы = Форма.Элементы;
	
	КоличествоВыведенныхКоманд = 0;
	
#Область СогласоватьИзБюджетаРодительской
	
	Если ПараметрыФормирования.ДоступноКСогласованиюИзРодительской > 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Согласовать для текущей задачи %1 %2 из бюджета родительской задачи'"),
		                           ПараметрыФормирования.ДоступноКСогласованиюИзРодительской,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		ТекстПояснения = СтрШаблон(НСтр("ru = 'Из из бюджета родительской задачи будет вычтено и соласовано в данной задаче %1 %2. Всего в родительской доступно %3 %2'"),
		                           ПараметрыФормирования.ДоступноКСогласованиюИзРодительской,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса,
		                           ПараметрыФормирования.ДоступноВРодительской);
		
		ТекстКоманды   = "СогласоватьИзБюджетаРодительской_" + ПараметрыФормирования.КодВидаРесурса;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(БиблиотекаКартинок.СогласоватьРесурс);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,, Форма.ЦветГиперссылки,, ТекстКоманды));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПояснения,, Форма.ЦветПояснения));
		МассивСтрок.Добавить(Символы.ПС);
		
		ИмяЭлементаФормыКоманды = ИмяЭлементаФормыКомандыЕщеСогласование(ПараметрыФормирования.ПостфиксГруппыЕще, КоличествоВыведенныхКоманд);
		
		Элементы[ИмяЭлементаФормыКоманды].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы[ИмяЭлементаФормыКоманды].Видимость = Истина;
		
		ДанныеСтрокиКомандыЕще = НовыйДанныеСтрокиКомандЕще();
		ДанныеСтрокиКомандыЕще.КодВидаРесурса    = ПараметрыФормирования.КодВидаРесурса;
		ДанныеСтрокиКомандыЕще.ВидРесурса        = ПараметрыФормирования.ВидРесурса;
		ДанныеСтрокиКомандыЕще.ИмяКоманды        = "СогласоватьИзБюджетаРодительской";
		ДанныеСтрокиКомандыЕще.КоличествоРесурса = ПараметрыФормирования.ДоступноКСогласованиюИзРодительской;
		
		ДобавитьСтрокуКомандЕще(Форма.ТаблицаКомандЕще, ДанныеСтрокиКомандыЕще);
		
		КоличествоВыведенныхКоманд = КоличествоВыведенныхКоманд + 1;
		
	КонецЕсли;
	
#КонецОбласти

#Область СогласоватьВТекущей

	Если ПараметрыФормирования.ЯвляетсяСогласующимРесурса
		И ПараметрыФормирования.КСогласованиюВТекущей <> 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Согласовать для текущей задачи %1 %2.'"),
		                           ПараметрыФормирования.КСогласованиюВТекущей,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		ТекстПояснения = СтрШаблон(НСтр("ru = 'Для данной задачи будет согласовано %1 %2.'"),
		                           ПараметрыФормирования.КСогласованиюВТекущей,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		Если ПараметрыФормирования.ДоступноКСогласованиюИзРодительской > 0
		    И ПараметрыФормирования.КСогласованиюВТекущей > 0 Тогда
			ТекстПояснения = ТекстПояснения + " " + НСтр("ru = 'Бюджет родительской задачи затронут не будет'");
		КонецЕсли;
		
		ТекстКоманды   = "СогласоватьВТекущей_" + ПараметрыФормирования.КодВидаРесурса;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(БиблиотекаКартинок.СогласоватьРесурс);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,, Форма.ЦветГиперссылки,, ТекстКоманды));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПояснения,, Форма.ЦветПояснения));
		МассивСтрок.Добавить(Символы.ПС);
		
		ИмяЭлементаФормыКоманды = ИмяЭлементаФормыКомандыЕщеСогласование(ПараметрыФормирования.ПостфиксГруппыЕще, КоличествоВыведенныхКоманд);
		
		Элементы[ИмяЭлементаФормыКоманды].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы[ИмяЭлементаФормыКоманды].Видимость = Истина;
		
		ДанныеСтрокиКомандыЕще = НовыйДанныеСтрокиКомандЕще();
		ДанныеСтрокиКомандыЕще.КодВидаРесурса    = ПараметрыФормирования.КодВидаРесурса;
		ДанныеСтрокиКомандыЕще.ВидРесурса        = ПараметрыФормирования.ВидРесурса;
		ДанныеСтрокиКомандыЕще.ИмяКоманды        = "СогласоватьВТекущей";
		ДанныеСтрокиКомандыЕще.КоличествоРесурса = ПараметрыФормирования.КСогласованиюВТекущей;
		
		ДобавитьСтрокуКомандЕще(Форма.ТаблицаКомандЕще, ДанныеСтрокиКомандыЕще);
		
		КоличествоВыведенныхКоманд = КоличествоВыведенныхКоманд + 1;
		
	КонецЕсли;
	
#КонецОбласти

#Область СогласоватьВДочерних
	
	Если ПараметрыФормирования.ЯвляетсяСогласующимРесурса
		И ПараметрыФормирования.КСогласованиюВДочерних <> 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Согласовать для дочерних задач %1 %2'"),
		                           ПараметрыФормирования.КСогласованиюВДочерних,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		ТекстПояснения = СтрШаблон(НСтр("ru = 'Для дочерних задач будет будет согласовано %1 %2'"),
		                           ПараметрыФормирования.КСогласованиюВДочерних,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		ТекстКоманды   = "СогласоватьВДочерних_" + ПараметрыФормирования.КодВидаРесурса;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(БиблиотекаКартинок.СогласоватьРесурс);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,, Форма.ЦветГиперссылки,, ТекстКоманды));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПояснения,, Форма.ЦветПояснения));
		МассивСтрок.Добавить(Символы.ПС);
		
		ИмяЭлементаФормыКоманды = ИмяЭлементаФормыКомандыЕщеСогласование(ПараметрыФормирования.ПостфиксГруппыЕще, КоличествоВыведенныхКоманд);
		
		Элементы[ИмяЭлементаФормыКоманды].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы[ИмяЭлементаФормыКоманды].Видимость = Истина;
		
		ДанныеСтрокиКомандыЕще = НовыйДанныеСтрокиКомандЕще();
		ДанныеСтрокиКомандыЕще.КодВидаРесурса    = ПараметрыФормирования.КодВидаРесурса;
		ДанныеСтрокиКомандыЕще.ВидРесурса        = ПараметрыФормирования.ВидРесурса;
		ДанныеСтрокиКомандыЕще.ИмяКоманды        = "СогласоватьВДочерних";
		ДанныеСтрокиКомандыЕще.КоличествоРесурса = ПараметрыФормирования.КСогласованиюВДочерних;
		
		ДобавитьСтрокуКомандЕще(Форма.ТаблицаКомандЕще, ДанныеСтрокиКомандыЕще);
		
		КоличествоВыведенныхКоманд = КоличествоВыведенныхКоманд + 1;
		
	КонецЕсли;
	
#КонецОбласти

#Область ЧастичноСогласоватьВТекущей

	Если ПараметрыФормирования.ЯвляетсяСогласующимРесурса
		И ПараметрыФормирования.КСогласованиюВТекущей <> 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Частично согласовать для текущей задачи запрошенные %1 %2'"),
		                           ПараметрыФормирования.КСогласованиюВТекущей,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		ТекстПояснения = СтрШаблон(НСтр("ru = 'Вы сможете указать количество согласуемых %1. Оставшиеся %1 будут не согласованы, план будет скорректирован'"),
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		Если ПараметрыФормирования.ДоступноКСогласованиюИзРодительской > 0
		    И ПараметрыФормирования.КСогласованиюВТекущей > 0 Тогда
			ТекстПояснения = ТекстПояснения + " " + НСтр("ru = 'Бюджет родительской задачи затронут не будет'");
		КонецЕсли;
		
		ТекстКоманды   = "ЧастичноСогласоватьВТекущей_" + ПараметрыФормирования.КодВидаРесурса;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(БиблиотекаКартинок.ЧастичноСогласоватьРесурсы);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,, Форма.ЦветГиперссылки,, ТекстКоманды));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПояснения,, Форма.ЦветПояснения));
		МассивСтрок.Добавить(Символы.ПС);
		
		ИмяЭлементаФормыКоманды = ИмяЭлементаФормыКомандыЕщеСогласование(ПараметрыФормирования.ПостфиксГруппыЕще, КоличествоВыведенныхКоманд);
		
		Элементы[ИмяЭлементаФормыКоманды].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы[ИмяЭлементаФормыКоманды].Видимость = Истина;
		
		ДанныеСтрокиКомандыЕще = НовыйДанныеСтрокиКомандЕще();
		ДанныеСтрокиКомандыЕще.КодВидаРесурса    = ПараметрыФормирования.КодВидаРесурса;
		ДанныеСтрокиКомандыЕще.ВидРесурса        = ПараметрыФормирования.ВидРесурса;
		ДанныеСтрокиКомандыЕще.ИмяКоманды        = "ЧастичноСогласоватьВТекущей";
		ДанныеСтрокиКомандыЕще.КоличествоРесурса = ПараметрыФормирования.КСогласованиюВТекущей;
		
		ДобавитьСтрокуКомандЕще(Форма.ТаблицаКомандЕще, ДанныеСтрокиКомандыЕще);
		
		КоличествоВыведенныхКоманд = КоличествоВыведенныхКоманд + 1;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область НеСогласоватьВТекущей

	Если ПараметрыФормирования.ЯвляетсяСогласующимРесурса
		И ПараметрыФормирования.КСогласованиюВТекущей <> 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Не согласовать для текущей задачи %1 %2'"),
		                           ПараметрыФормирования.КСогласованиюВТекущей,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		ТекстПояснения = СтрШаблон(НСтр("ru = 'Для данной задачи будет не согласовано %1 %2. План будет скорректирован на %1 %2'"),
		                           ПараметрыФормирования.КСогласованиюВТекущей,
		                           ПараметрыФормирования.ЕдиницаИзмеренияВидаРесурса);
		
		ТекстКоманды   = "НеСогласоватьВТекущей_" + ПараметрыФормирования.КодВидаРесурса;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(БиблиотекаКартинок.НеСогласоватьРесурсы);
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка,, Форма.ЦветГиперссылки,, ТекстКоманды));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПояснения,, Форма.ЦветПояснения));
		МассивСтрок.Добавить(Символы.ПС);
		
		ИмяЭлементаФормыКоманды = ИмяЭлементаФормыКомандыЕщеСогласование(ПараметрыФормирования.ПостфиксГруппыЕще, КоличествоВыведенныхКоманд);
		
		Элементы[ИмяЭлементаФормыКоманды].Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы[ИмяЭлементаФормыКоманды].Видимость = Истина;
		
		ДанныеСтрокиКомандыЕще = НовыйДанныеСтрокиКомандЕще();
		ДанныеСтрокиКомандыЕще.КодВидаРесурса    = ПараметрыФормирования.КодВидаРесурса;
		ДанныеСтрокиКомандыЕще.ВидРесурса        = ПараметрыФормирования.ВидРесурса;
		ДанныеСтрокиКомандыЕще.ИмяКоманды        = "НеСогласоватьВТекущей";
		ДанныеСтрокиКомандыЕще.КоличествоРесурса = ПараметрыФормирования.КСогласованиюВТекущей;
		
		ДобавитьСтрокуКомандЕще(Форма.ТаблицаКомандЕще, ДанныеСтрокиКомандыЕще);
		
		КоличествоВыведенныхКоманд = КоличествоВыведенныхКоманд + 1;
		
	КонецЕсли;
	
#КонецОбласти
	
	Элементы["ГруппаЕще" + ПараметрыФормирования.ПостфиксГруппыЕще].Видимость = (КоличествоВыведенныхКоманд > 1);
	
	СкрытьЛишниеДекорацииСогласованиеЕще(Элементы, ПараметрыФормирования.ПостфиксГруппыЕще, КоличествоВыведенныхКоманд);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьЛишниеДекорацииСогласованиеЕще(Элементы, Постфикс, КоличествоВыведенныхКоманд)
	
	НомерДекорации = КоличествоВыведенныхКоманд + 1;
	
	Для Инд = НомерДекорации По 5 Цикл
		
		Элементы["ДекорацияЕще" + Постфикс + "_" + Строка(Инд)].Видимость = 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуКомандЕще(Таблица, ДанныеСтроки)
	
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяЭлементаФормыКомандыЕщеСогласование(Постфикс, КоличествоВыведенныхКоманд)
	
	Возврат "ДекорацияЕще" + Постфикс + "_" + Строка(КоличествоВыведенныхКоманд + 1);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйДанныеСтрокиКомандЕще()
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("КодВидаРесурса",    "");
	ДанныеСтроки.Вставить("ВидРесурса",        Неопределено);
	ДанныеСтроки.Вставить("ИмяКоманды",        "");
	ДанныеСтроки.Вставить("КоличествоРесурса", 0);
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодсказкаОсновнойКомандыСогласовать(ПараметрыПодсказки)
	
	Если ПараметрыПодсказки.ЯвляетсяСогласующимРесурса Тогда
		
		Если ПараметрыПодсказки.ОбщееКоличествоКСогласованию > 0 Тогда
			
			Если ПараметрыПодсказки.ДоступноКСогласованиюИзРодительской > 0 
				И ПараметрыПодсказки.ЯвляетсяИсполнителемРодительскойЗадачи Тогда
				
				Если ПараметрыПодсказки.ДоступноКСогласованиюИзРодительской >= ПараметрыПодсказки.ОбщееКоличествоКСогласованию Тогда
					
					Возврат СтрШаблон(НСтр("ru = 'Согласовать %1 %2 из бюджета родительской задачи.'"), 
					                  ПараметрыПодсказки.ОбщееКоличествоКСогласованию, 
					                  ПараметрыПодсказки.ЕдиницаИзмеренияВидаРесурса);
					
				Иначе
					
					Возврат СтрШаблон(НСтр("ru = 'Согласовать %1 %2, из них %3 %2 из бюджета родительской задачи.'"), 
					                  ПараметрыПодсказки.ОбщееКоличествоКСогласованию, 
					                  ПараметрыПодсказки.ЕдиницаИзмеренияВидаРесурса,
					                  ПараметрыПодсказки.ДоступноКСогласованиюИзРодительской);
					
				КонецЕсли;
				
			Иначе
				
				Возврат СтрШаблон(НСтр("ru = 'Согласовать %1 %2'"), 
				                  ПараметрыПодсказки.ОбщееКоличествоКСогласованию, 
				                  ПараметрыПодсказки.ЕдиницаИзмеренияВидаРесурса);
				
			КонецЕсли;
			
		Иначе
			
			Возврат СтрШаблон(НСтр("ru = 'Согласовать %1 %2'"), 
			                  ПараметрыПодсказки.ОбщееКоличествоКСогласованию, 
			                  ПараметрыПодсказки.ЕдиницаИзмеренияВидаРесурса);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыПодсказки.ЯвляетсяИсполнителемРодительскойЗадачи
		И ПараметрыПодсказки.ДоступноКСогласованию > 0 Тогда
		
		Возврат СтрШаблон(НСтр("ru = 'Согласовать %1 %2 из бюджета родительской задачи.'"), 
		                  ПараметрыПодсказки.ОбщееКоличествоКСогласованию, 
		                  ПараметрыПодсказки.ЕдиницаИзмеренияВидаРесурса);
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйПараметрыПодсказкиОсновнойКомандыСогласовать()
	
	ПараметрыПодсказки = Новый Структура;
	ПараметрыПодсказки.Вставить("ОбщееКоличествоКСогласованию",           0);
	ПараметрыПодсказки.Вставить("ДоступноКСогласованию",                  0);
	ПараметрыПодсказки.Вставить("ДоступноКСогласованиюИзРодительской",    0);
	ПараметрыПодсказки.Вставить("ЯвляетсяСогласующимРесурса",             Ложь);
	ПараметрыПодсказки.Вставить("ЯвляетсяИсполнителемРодительскойЗадачи", Ложь);
	ПараметрыПодсказки.Вставить("ЕдиницаИзмеренияВидаРесурса",            "");
	
	Возврат ПараметрыПодсказки;
	
КонецФункции

&НаСервере
Процедура ОбновитьСвязанныеЗадачи()

	КоличествоЗадачПрешественников = Объект.ПредшествующиеЗадачи.Количество();
	КоличествоПодчиненныхЗадач     = 0;
	КоличествоПоследующихЗадач     = 0;
	ЕстьПодчиненныеЗначимыеЗадачи  = Ложь;
	
	ТекстПодчиненные = "";
	ТекстПоследующие = "";
	
	Если Не Объект.Ссылка.Пустая() Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачиПроцесса.Ссылка) КАК КоличествоПодчиненныхЗадач
		|ИЗ
		|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|ГДЕ
		|	ЗадачиПроцесса.Родитель = &Ссылка
		|	И НЕ ЗадачиПроцесса.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачиПроцессаПредшествующиеЗадачи.Ссылка) КАК КоличествоПоследующихЗадач
		|ИЗ
		|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|		ПО ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = ЗадачиПроцесса.Ссылка
		|ГДЕ
		|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачиПроцесса.Ссылка) КАК КоличествоПодчиненныхЗадач
		|ИЗ
		|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|ГДЕ
		|	ЗадачиПроцесса.Родитель = &Ссылка
		|	И НЕ ЗадачиПроцесса.ПометкаУдаления
		|	И НЕ ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена)";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаПодчиненные = Результат[0].Выбрать();
		
		Если ВыборкаПодчиненные.Следующий() Тогда
			КоличествоПодчиненныхЗадач = ВыборкаПодчиненные.КоличествоПодчиненныхЗадач;
		КонецЕсли;
		
		ВыборкаПоследующие = Результат[1].Выбрать();
		Если ВыборкаПоследующие.Следующий() Тогда
			КоличествоПоследующихЗадач = ВыборкаПоследующие.КоличествоПоследующихЗадач;
		КонецЕсли;
		
		ВыборкаПодчиненныеЗначимые = Результат[2].Выбрать();
		Если ВыборкаПодчиненныеЗначимые.Следующий() Тогда
			ЕстьПодчиненныеЗначимыеЗадачи = ВыборкаПодчиненныеЗначимые.КоличествоПодчиненныхЗадач > 0;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПредшествующие = СтрШаблон(НСтр("ru = 'Предшествующие%1'"),
		?(КоличествоЗадачПрешественников = 0, "", " (" + Строка(КоличествоЗадачПрешественников) + ")"));
	СтрокаПредшествующие = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(ТекстПредшествующие, "ПредшествующиеЗадачи");

	Если КоличествоПоследующихЗадач <> 0 Тогда
		ТекстПоследующие = СтрШаблон(НСтр("ru = 'Последующие%1'"), "(" + Строка(КоличествоПоследующихЗадач) + ")");
		СтрокаПоследующие   = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(ТекстПоследующие, "ПоследующиеЗадачи");
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		СтрокаПодчиненные = "";
	Иначе
		ТекстПодчиненные     = СтрШаблон(НСтр("ru = 'Подчиненные%1'"),
		?(КоличествоПодчиненныхЗадач = 0, "", " (" + Строка(КоличествоПодчиненныхЗадач) + ")"));
		СтрокаПодчиненные    = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(ТекстПодчиненные, "ПодчиненныеЗадачи");
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", Метаданные.Справочники.ЗадачиПроцесса)
		И Не Объект.Ссылка.Пустая()
		И (Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована
		Или Объект.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению) Тогда
		
		Элементы.ДобавитьПодчиненнуюЗадачу.Видимость = Истина;
		
	Иначе 
		
		Элементы.ДобавитьПодчиненнуюЗадачу.Видимость = Ложь;
		
	КонецЕсли;
	
	Если КоличествоПоследующихЗадач = 0 Тогда
		СвязанныеЗадачиПредставление = Новый ФорматированнаяСтрока(СтрокаПредшествующие, ", ", СтрокаПодчиненные);
	Иначе
		СвязанныеЗадачиПредставление = Новый ФорматированнаяСтрока(СтрокаПредшествующие, ", ", СтрокаПоследующие, ", ", СтрокаПодчиненные);
	КонецЕсли;
	
	Элементы.ДекорацияСвязанныеЗадачи.Заголовок = СвязанныеЗадачиПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОчередьЗадач()
	
	Если Не ИспользуетсяОчередьРабот Тогда
		Элементы.СостояниеОчередьЗадач.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.СостояниеОчередьЗадач.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПоложениеВОчереди = 0;
	ЗадачаВОчереди    = Справочники.ЗадачиПроцесса.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИерархияЗадачПроцесса.Родитель КАК ЗадачаВОчереди,
	|	ОчередиРаботСотрудников.ПорядокНомерВОчереди КАК ПорядокНомерВОчереди,
	|	ОчередиРаботСотрудников.Сотрудник КАК Сотрудник,
	|	ИерархияЗадачПроцесса.Родитель.Наименование КАК ЗадачаВОчередиНаименование
	|ПОМЕСТИТЬ ЗадачаИсполнителяВОчереди
	|ИЗ
	|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И ИерархияЗадачПроцесса.Родитель.Исполнитель = ЗадачиПроцесса.Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ПО ИерархияЗадачПроцесса.Родитель = ОчередиРаботСотрудников.Работа
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &Задача
	|	И ОчередиРаботСотрудников.Работа ЕСТЬ НЕ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИерархияЗадачПроцесса.Уровень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередиРаботСотрудников.Работа) КАК НомерВОчереди
	|ИЗ
	|	ЗадачаИсполнителяВОчереди КАК ЗадачаИсполнителяВОчереди
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиРаботСотрудников КАК ОчередиРаботСотрудников
	|		ПО ЗадачаИсполнителяВОчереди.ПорядокНомерВОчереди >= ОчередиРаботСотрудников.ПорядокНомерВОчереди
	|			И ЗадачаИсполнителяВОчереди.Сотрудник = ОчередиРаботСотрудников.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачаИсполнителяВОчереди.ЗадачаВОчереди КАК ЗадачаВОчереди,
	|	ЗадачаИсполнителяВОчереди.ЗадачаВОчередиНаименование КАК ЗадачаВОчередиНаименование
	|ИЗ
	|	ЗадачаИсполнителяВОчереди КАК ЗадачаИсполнителяВОчереди";
	
	Запрос.УстановитьПараметр("Задача", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПоложениеВОчереди = Результат[1].Выбрать();
	
	Если ВыборкаПоложениеВОчереди.Следующий() Тогда
	
		ПоложениеВОчереди = ВыборкаПоложениеВОчереди.НомерВОчереди;
	
	КонецЕсли;
	
	ВыборкаЗадачаВОчереди = Результат[2].Выбрать();

	Если ВыборкаЗадачаВОчереди.Следующий() Тогда
	
		ЗадачаВОчереди             = ВыборкаЗадачаВОчереди.ЗадачаВОчереди;
		ЗадачаВОчередиНаименование = ВыборкаЗадачаВОчереди.ЗадачаВОчередиНаименование;
	
	КонецЕсли;
	
	Если ПоложениеВОчереди = 0 
		Или ЗадачаВОчереди = Неопределено Тогда
		
		Элементы.СостояниеОчередьЗадач.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Элементы.СостояниеОчередьЗадач.Видимость = Истина;
	
	Если ЗадачаВОчереди <> Объект.Ссылка Тогда
		
		СостояниеОчередьЗадач = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = '<span style=""color: ПоясняющийТекст"">Положение вышестоящей задачи ""%1."" </span> <a href=""ПоказатьЗадачуВОчереди"">в очереди работ - %2</a>'"),
			ЗадачаВОчередиНаименование, Строка(ПоложениеВОчереди));
		
	Иначе
		
		СостояниеОчередьЗадач = СтроковыеФункции.ФорматированнаяСтрока(
			НСтр("ru = '<span style=""color: ПоясняющийТекст"">Положение задачи </span> <a href=""ПоказатьЗадачуВОчереди"">в очереди работ - %1.</a>'"),
			Строка(ПоложениеВОчереди));
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЗадачи()
	
	Если Объект.Ссылка.Пустая() Тогда
		СостояниеПредставление = Новый ФорматированнаяСтрока(НСтр("ru = 'Новая'"));
		Возврат;
	КонецЕсли;
	
	МаксимальныйВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка();
	Зона                        = Перечисления.ЗоныЗадач.ПустаяСсылка();
	Запланировано               = 0;
	Выполнено                   = 0;
	ЕдиницаИзмеренияРесурса     = "";
	
	ПредставлениеДействия = "";
	ТекстГиперссылки      = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус КАК МаксимальныйВозможныйСтатус,
	|	СостоянияЗадачПроцессов.Зона                        КАК Зона
	|ИЗ
	|	РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|ГДЕ
	|	СостоянияЗадачПроцессов.ЗадачаПроцесса = &ЗадачаПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ИтогиСогласованияЗадачРесурсов.Запланировано + ИтогиСогласованияЗадачРесурсов.ЗапланированоВДочерних                                  КАК Запланировано,
	|	ВЫБОР
	|		КОГДА ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|			ТОГДА ИтогиСогласованияЗадачРесурсов.Запланировано
	|		ИНАЧЕ 0
	|	КОНЕЦ + ИтогиСогласованияЗадачРесурсов.ВыполненоСогласованоВДочерних + ИтогиСогласованияЗадачРесурсов.ВыполненоНаСогласованииВДочерних КАК Выполнено
	|ИЗ
	|	РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|ГДЕ
	|	ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = &ЗадачаПроцесса
	|	И ИтогиСогласованияЗадачРесурсов.ВидРесурса = &ВидРесурса
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ВидыСогласуемыхРесурсов.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|ГДЕ
	|	ВидыСогласуемыхРесурсов.Ссылка = &ВидРесурса";
	
	Запрос.УстановитьПараметр("ЗадачаПроцесса", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидРесурса",     ЗадачиПроцессовПовтИсп.ОсновнойВидСогласуемогоРесурса());
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаЗонаСтатус       = Результат[0].Выбрать();
	ВыборкаДанныеВыполнения = Результат[1].Выбрать();
	ВыборкаЕдИзмРесурса     = Результат[2].Выбрать();
	
	Если ВыборкаЗонаСтатус.Следующий() Тогда
	
		МаксимальныйВозможныйСтатус = ВыборкаЗонаСтатус.МаксимальныйВозможныйСтатус;
		Зона                        = ВыборкаЗонаСтатус.Зона;
	
	КонецЕсли;
	
	Если ВыборкаДанныеВыполнения.Следующий() Тогда
		
		Запланировано               = ВыборкаДанныеВыполнения.Запланировано;
		Выполнено                   = ВыборкаДанныеВыполнения.Выполнено;
		
	КонецЕсли;
	
	Если ВыборкаЕдИзмРесурса.Следующий() Тогда
		 ЕдиницаИзмеренияРесурса = ВыборкаЕдИзмРесурса.ЕдиницаИзмерения;
	КонецЕсли;
	
	Состояние = ЗадачиПроцессовКлиентСервер.СостояниеЗадачи(Объект.Статус, МаксимальныйВозможныйСтатус);
	
	ЦветТекстаСостояния = ЗадачиПроцессов.ЦветСтиляПоЗонеЗадачи(Зона);
	СтрокаСостояния     = Строка(Состояние);
	
	Если Запланировано <> 0 
		И ЕстьПодчиненныеЗначимыеЗадачи Тогда
		
		ПроцентВыполнения = Окр((Выполнено/ Запланировано) * 100, 
		                        0,
		                        РежимОкругления.Окр15как10);
	
		
		ПредставлениеЕдиницыИзмерения = ?(ПустаяСтрока(ЕдиницаИзмеренияРесурса), 
		                                  "", 
		                                  СтрШаблон("(%1)", ЕдиницаИзмеренияРесурса));
		
		ТекстВыполнения = СтрШаблон(НСтр("ru = 'план %1 - %2, выполнено - %3 (%4%%)'"),
		                            ПредставлениеЕдиницыИзмерения,
		                            Запланировано,
		                            Выполнено,
		                            ПроцентВыполнения);
		
		Если Не ПустаяСтрока(ТекстВыполнения) Тогда
			
			СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, ", ", ТекстВыполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЦветТекстаСостояния <> Неопределено Тогда
		СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния,,ЦветТекстаСостояния);
	Иначе
		СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) Тогда
		
		Если ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) Тогда
			ТекстДатыВыполнения = СтрШаблон(НСтр("ru = 'выполнялась с %1 по %2'"), Формат(Объект.ФактическаяДатаНачала,"ДЛФ=D"), Формат(Объект.ФактическаяДатаОкончания,"ДЛФ=D"));
		Иначе
			ТекстДатыВыполнения = СтрШаблон(НСтр("ru = 'начата %1'"), Формат(Объект.ФактическаяДатаНачала,"ДЛФ=D"));
		КонецЕсли;
		
		СтрокаДатыВыполнения = Новый ФорматированнаяСтрока(ТекстДатыВыполнения,, ЦветТекстаСостояния);
		
		СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, ", ", СтрокаДатыВыполнения);
		
	КонецЕсли;
	
	СледующийСтатус = ЗадачиПроцессовКлиентСервер.СледующийСтатус(Объект.Статус, МаксимальныйВозможныйСтатус);
	Если СледующийСтатус <> Неопределено Тогда
		
		ПараметрыПроверкиПовышенияСтатуса = ЗадачиПроцессовКлиентСервер.ПараметрыПроверкиПраваПовышенияСтатуса();
		ПараметрыПроверкиПовышенияСтатуса.Задача                         = Объект.Ссылка;
		ПараметрыПроверкиПовышенияСтатуса.ПравоИзменения                 = ПравоИзмененияЗадачПроцессов;
		ПараметрыПроверкиПовышенияСтатуса.ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроля;
		ПараметрыПроверкиПовышенияСтатуса.ЗадачаШаблона                  = Объект.ЗадачаШаблона;
		ПараметрыПроверкиПовышенияСтатуса.Контролирующий                 = Объект.Контролирующий;
		ПараметрыПроверкиПовышенияСтатуса.ТекущийПользователь            = ТекущийПользователь;
		ПараметрыПроверкиПовышенияСтатуса.Родитель                       = Объект.Родитель;
		ПараметрыПроверкиПовышенияСтатуса.ИсполнительРодительскойЗадачи  = ИсполнительРодительскойЗадачи;
		ПараметрыПроверкиПовышенияСтатуса.Исполнитель                    = Объект.Исполнитель;
		ПараметрыПроверкиПовышенияСтатуса.ТекущийСтатус                  = Объект.Статус;
		ПараметрыПроверкиПовышенияСтатуса.СледующийСтатус                = СледующийСтатус;
			
		Если ЗадачиПроцессов.ПользовательМожетПеревестиЗадачуНаСледующийСтатус(ПараметрыПроверкиПовышенияСтатуса) Тогда
		
			Если СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
				
				ПредставлениеДействия = НСтр("ru = 'Принять к выполнению'");
				ТекстГиперссылки      = "ПринятьКВыполнению";
				
			ИначеЕсли СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
				
				ПредставлениеДействия = НСтр("ru = 'Отметить выполнение'");
				ТекстГиперссылки      = "ОтметитьВыполнение";
				
			ИначеЕсли СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
				
				ПредставлениеДействия = НСтр("ru = 'Запланировать'");
				ТекстГиперссылки      = "Запланировать";
				
			КонецЕсли;
			
		Иначе
			
			Если СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена
				И ТекущийПользователь = Объект.Исполнитель
				И ЗначениеЗаполнено(Объект.Контролирующий) Тогда
				
				ПредставлениеДействия = НСтр("ru = 'Направить на проверку'");
				ТекстГиперссылки      = "НаправитьНаПроверку";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПредставлениеДействия) Тогда
			СтрокаДальнейшееДействие = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(НРег(ПредставлениеДействия), ТекстГиперссылки);
			СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, ", ", СтрокаДальнейшееДействие);
		Иначе
			СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, ".");
		КонецЕсли;
		
		Если Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована 
			И МаксимальныйВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			
			ПредставлениеДействия = "";
			
			ПараметрыПроверкиПовышенияСтатуса.СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена;
			
			Если ЗадачиПроцессов.ПользовательМожетПеревестиЗадачуНаСледующийСтатус(ПараметрыПроверкиПовышенияСтатуса) Тогда
				
				ПредставлениеДействия = НСтр("ru = 'Отметить выполнение'");
				ТекстГиперссылки      = "ОтметитьВыполнение";
			
			ИначеЕсли ТекущийПользователь = Объект.Исполнитель
				И ЗначениеЗаполнено(Объект.Контролирующий) Тогда
				
				ПредставлениеДействия = НСтр("ru = 'Направить на проверку'");
				ТекстГиперссылки      = "НаправитьНаПроверку"
				
			КонецЕсли;

			Если Не ПустаяСтрока(ПредставлениеДействия) Тогда
				СтрокаДополнительноеДействие = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(НРег(ПредставлениеДействия), ТекстГиперссылки);
				Если ЗначениеЗаполнено(СледующийСтатус) Тогда
					СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, " " + НСтр("ru = 'или'") + " ", СтрокаДополнительноеДействие);
				Иначе
					СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, " ", СтрокаДополнительноеДействие);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
			
			ПараметрыПроверкиПовышенияСтатуса.СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению;
			
			Если (МаксимальныйВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена
				Или МаксимальныйВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению)
				И ЗадачиПроцессов.ПользовательМожетПеревестиЗадачуНаСледующийСтатус(ПараметрыПроверкиПовышенияСтатуса) Тогда

				
				ПредставлениеДействия = НСтр("ru = 'Принять к выполнению'");
				ТекстГиперссылки      = "ПринятьКВыполнению";
				
				СтрокаДополнительноеДействие = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(НРег(ПредставлениеДействия), ТекстГиперссылки);
				СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, " " + НСтр("ru = 'или'") + " ", СтрокаДополнительноеДействие);
				
			КонецЕсли;
			
			Если МаксимальныйВозможныйСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
				
				ПредставлениеДействия = "";
				
				ПараметрыПроверкиПовышенияСтатуса.СледующийСтатус = Перечисления.СтатусыЗадачПроцессов.Выполнена;
				
				Если ЗадачиПроцессов.ПользовательМожетПеревестиЗадачуНаСледующийСтатус(ПараметрыПроверкиПовышенияСтатуса) Тогда
					
					ПредставлениеДействия = НСтр("ru = 'Отметить выполнение'");
					ТекстГиперссылки      = "ОтметитьВыполнение";
				
				ИначеЕсли ТекущийПользователь = Объект.Исполнитель
					И ЗначениеЗаполнено(Объект.Контролирующий) Тогда
				
					ПредставлениеДействия = НСтр("ru = 'Направить на проверку'");
					ТекстГиперссылки      = "НаправитьНаПроверку"
				
				КонецЕсли;
				
				Если Не ПустаяСтрока(ПредставлениеДействия) Тогда
					СтрокаДополнительноеДействие = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(НРег(ПредставлениеДействия), ТекстГиперссылки);
					СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, " " + НСтр("ru = 'или'") + " ", СтрокаДополнительноеДействие);
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) Тогда
			СтрокаСостояния = Новый ФорматированнаяСтрока(СтрокаСостояния, ".");
		КонецЕсли;
		
	КонецЕсли;
	
	СостояниеПредставление = СтрокаСостояния;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВариантыОтвета()
	
	ВариантыОтветитьПредставление = "";
	
	Если ТекущийИсполнительПорученияПоЗадаче <> ТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОзнакомиться = НСтр("ru = 'Ознакомиться'");

	
	АвторПоследнегоСообщения = АвторПоследнегоСообщения(ЭтотОбъект);
	Если АвторПоследнегоСообщения <> Неопределено Тогда
		
		СтрокаОзнакомиться = НРег(СтрокаОзнакомиться);
		
	КонецЕсли;
	
	СтрокаОтветить     = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(НСтр("ru = 'Ответить'"), "ОтветитьНаПоручение");
	СтрокаОзнакомиться = ЗадачиПроцессов.ФорматированнаяСтрокаСГиперссылкой(СтрокаОзнакомиться, "ОзнакомитьсяСПоручением");
	СтрокаИли          = " " + НСтр("ru = 'или'") + " ";
	
	
	Если АвторПоследнегоСообщения = Неопределено Тогда
		
		ВариантыОтветитьПредставление = СтрокаОзнакомиться;
		
	Иначе
		
		ВариантыОтветитьПредставление = Новый ФорматированнаяСтрока(СтрокаОтветить, СтрокаИли, СтрокаОзнакомиться);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыборПредмета

&НаКлиенте
Процедура ВыборТипаПредметаПриЗавершении(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОбОкончанииВыбора = Новый ОписаниеОповещения("ВыборПредметаПриЗавершении", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму(Результат.Значение + ".ФормаВыбора",ПараметрыОткрытия, ЭтотОбъект,,,,ОповещениеОбОкончанииВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПредметаПриЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Предмет = Результат;
	ПредметПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредметПриИзмененииНаСервере()
	
	ОтветственныйЗаПредмет = ЗадачиПроцессовПереопределяемый.ОтветственныйПредметаЗадачи(Объект.Предмет);
	
	УстановитьДанныеШаблона();
	ОбновитьВсеСостоянияФормы();
	ЗадачиПроцессов.УстановитьЗаголовокПредмета(Объект.Предмет, Элементы.Предмет);
	
КонецПроцедуры 

#КонецОбласти

#Область ИзмениеРеквизитовФормы

&НаСервере
Процедура ИзменитьФормуДляОтраженияСогласования()
	
	СоздатьРеквизитыФормыДляОтраженияСогласования();
	СоздатьЭлементыФормыДляОтраженияСогласования();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормыДляОтраженияСогласования()

	МассивСозданныхРеквизитов = Новый Массив;
	
	Для Каждого СтрокаРесурса Из СогласующиеРесурсы Цикл
		
		Если СтрокаРесурса.Основной Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидыРесурсовДляКоторыхСозданыРеквизиты.НайтиПоЗначению(СтрокаРесурса.ВидРесурса) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьРеквизитыДляВидаРесурса(СтрокаРесурса, МассивСозданныхРеквизитов);
		
		ВидыРесурсовДляКоторыхСозданыРеквизиты.Добавить(СтрокаРесурса.ВидРесурса);
		
	КонецЦикла;
	
	Если МассивСозданныхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивСозданныхРеквизитов, );
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыДляВидаРесурса(СтрокаРесурса, МассивСозданныхРеквизитов)

	ИмяРеквизита = "ЗапланированоРесурс_" + СтрокаРесурса.КодВидаРесурса;
	МассивСозданныхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3)));
	
	Команда = ЭтотОбъект.Команды.Добавить("НаправитьНаСогласованииОповеститьРесурс_" + СтрокаРесурса.КодВидаРесурса);
	Команда.Действие    = "Подключаемый_ВыполнитьКомандуСогласования";
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Картинка    = БиблиотекаКартинок.НаправитьНаСогласование;
	
	Команда = ЭтотОбъект.Команды.Добавить("СогласоватьРесурс_" + СтрокаРесурса.КодВидаРесурса);
	Команда.Действие    = "Подключаемый_ВыполнитьКомандуСогласования";
	Команда.Отображение = ОтображениеКнопки.Картинка;
	Команда.Картинка    = БиблиотекаКартинок.СогласоватьРесурсЗадачи;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыДляОтраженияСогласования()

	Для Каждого СтрокаРесурса Из СогласующиеРесурсы Цикл
		
		Если СтрокаРесурса.Основной Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСписка = ВидыРесурсовДляКоторыхСозданыРеквизиты.НайтиПоЗначению(СтрокаРесурса.ВидРесурса);
		
		Если ЭлементСписка <> Неопределено
			И ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		СоздатьЭлементыФормыДляВидаРесурса(СтрокаРесурса);
		
		ЭлементСписка.Пометка = Истина;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормыДляВидаРесурса(СтрокаРесурса)

	КодВидаРесурса = СтрокаРесурса.КодВидаРесурса;
	
	Группа = Элементы.Добавить("ГруппаСогласованиеРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("ГруппаФормы"), Элементы.ГруппаСогласованиеНеОсновныхРесурсов);
	Группа.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.ОтображатьЗаголовок      = Ложь;
	Группа.Отображение              = ОтображениеОбычнойГруппы.Нет;
	Группа.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Группа.РастягиватьПоГоризонтали = Истина;
	
	ЭлементФормы = Элементы.Добавить("ЗаголовокРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("ДекорацияФормы"), Группа);
	ЭлементФормы.Вид = ВидДекорацииФормы.Надпись;
	ЭлементФормы.Заголовок = СтрокаРесурса.Наименование + ":";
	
	ЭлементФормы =  Элементы.Добавить("ЗапланированоРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("ПолеФормы"), Группа);
	ЭлементФормы.ПутьКДанным              = "ЗапланированоРесурс_" + СтрокаРесурса.КодВидаРесурса;
	ЭлементФормы.Вид                      = ВидПоляФормы.ПолеВвода;
	ЭлементФормы.Заголовок                = НСтр("ru = 'План'");
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.МаксимальнаяШирина       = 8;
	ЭлементФормы.УстановитьДействие("ПриИзменении", "Подключаемый_ПланРесурсПриИзменении");
	
	ЭлементФормы =  Элементы.Добавить("ДекорацияЕдИзмПланРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("ДекорацияФормы"), Группа);
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.МаксимальнаяШирина       = 8;
	
	ЭлементФормы =  Элементы.Добавить("ДекорацияХодСогласованияРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("ДекорацияФормы"), Группа);
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ДекорацияХодСогласованияОбработкаНавигационнойСсылки");
	
	ЭлементФормы = Элементы.Добавить("СогласоватьРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("КнопкаФормы"), Группа);
	ЭлементФормы.ИмяКоманды                     = "СогласоватьРесурс_" + СтрокаРесурса.КодВидаРесурса;
	ЭлементФормы.Вид                            = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементФормы.Отображение                    = ОтображениеКнопки.КартинкаИТекст;
	ЭлементФормы.Заголовок                      = " ";
	ЭлементФормы.АвтоМаксимальнаяВысота         = Ложь;
	ЭлементФормы.Высота                         = 1;
	
	ЭлементФормы = Элементы.Добавить("НаправитьНаСогласованииОповеститьРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("КнопкаФормы"), Группа);
	ЭлементФормы.ИмяКоманды = "НаправитьНаСогласованииОповеститьРесурс_" + СтрокаРесурса.КодВидаРесурса;
	ЭлементФормы.Вид                            = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементФормы.Отображение                    = ОтображениеКнопки.Картинка;
	ЭлементФормы.АвтоМаксимальнаяВысота         = Ложь;
	ЭлементФормы.Высота                         = 1;
	
	ГруппаЕще = Элементы.Добавить("ГруппаЕщеРесурс_" + СтрокаРесурса.КодВидаРесурса, Тип("ГруппаФормы"), Группа);
	ГруппаЕще.Вид                           = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЕще.Поведение                     = ПоведениеОбычнойГруппы.Всплывающая;
	ГруппаЕще.ВертикальноеПоложениеВГруппе  = ВертикальноеПоложениеЭлемента.Низ;
	ГруппаЕще.РастягиватьПоВертикали        = Ложь;
	ГруппаЕще.ЦветТекстаЗаголовка           = ЦветГиперссылки;
	ГруппаЕще.Заголовок                     = "Еще..";
	ГруппаЕще.ШрифтЗаголовка                = Новый Шрифт(,10);
	ГруппаЕще.ОтображатьЗаголовок           = Истина;
	ГруппаЕще.Группировка                   = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ЭлементФормы =  Элементы.Добавить("ДекорацияЕщеРесурс_" + СтрокаРесурса.КодВидаРесурса + "_1", Тип("ДекорацияФормы"), ГруппаЕще);
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.МаксимальнаяШирина       = 50;
	ЭлементФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияЕщеОбработкаНавигационнойСсылки");
	
	ЭлементФормы =  Элементы.Добавить("ДекорацияЕщеРесурс_" + СтрокаРесурса.КодВидаРесурса + "_2", Тип("ДекорацияФормы"), ГруппаЕще);
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.МаксимальнаяШирина       = 50;
	ЭлементФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияЕщеОбработкаНавигационнойСсылки");
	
	ЭлементФормы =  Элементы.Добавить("ДекорацияЕщеРесурс_" + СтрокаРесурса.КодВидаРесурса + "_3", Тип("ДекорацияФормы"), ГруппаЕще);
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.МаксимальнаяШирина       = 50;
	ЭлементФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияЕщеОбработкаНавигационнойСсылки");
	
	ЭлементФормы =  Элементы.Добавить("ДекорацияЕщеРесурс_" + СтрокаРесурса.КодВидаРесурса + "_4", Тип("ДекорацияФормы"), ГруппаЕще);
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.МаксимальнаяШирина       = 50;
	ЭлементФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияЕщеОбработкаНавигационнойСсылки");
	
	ЭлементФормы =  Элементы.Добавить("ДекорацияЕщеРесурс_" + СтрокаРесурса.КодВидаРесурса + "_5", Тип("ДекорацияФормы"), ГруппаЕще);
	ЭлементФормы.АвтоМаксимальнаяШирина   = Ложь;
	ЭлементФормы.МаксимальнаяШирина       = 50;
	ЭлементФормы.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияЕщеОбработкаНавигационнойСсылки");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СохранитьРезультатыРедактированияОписанияЕслиНеобходимо()

	Если Не Модифицированность И ТекущийЭлемент = Элементы.ОписаниеЗадачи Тогда
		ТекущийЭлемент = Элементы.Наименование;
		ТекущийЭлемент = Элементы.ОписаниеЗадачи;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностью()
	
	ПараметрыПроверкиПраваПониженияСтатуса = ЗадачиПроцессовКлиентСервер.ПараметрыПроверкиПраваПониженияСтатуса();
	
	ПараметрыПроверкиПраваПониженияСтатуса.Задача                         = Объект.Ссылка;
	ПараметрыПроверкиПраваПониженияСтатуса.ПометкаУдаления                = Объект.ПометкаУдаления;
	ПараметрыПроверкиПраваПониженияСтатуса.ПравоИзменения                 = ПравоИзмененияЗадачПроцессов;
	ПараметрыПроверкиПраваПониженияСтатуса.ПравоИзмененияЗадачБезКонтроля = ПравоИзмененияЗадачБезКонтроля;
	ПараметрыПроверкиПраваПониженияСтатуса.ЗадачаШаблона                  = Объект.ЗадачаШаблона;
	ПараметрыПроверкиПраваПониженияСтатуса.Контролирующий                 = Объект.Контролирующий;
	ПараметрыПроверкиПраваПониженияСтатуса.ТекущийПользователь            = ТекущийПользователь;
	ПараметрыПроверкиПраваПониженияСтатуса.Родитель                       = Объект.Родитель;
	ПараметрыПроверкиПраваПониженияСтатуса.ИсполнительРодительскойЗадачи  = ИсполнительРодительскойЗадачи;
	ПараметрыПроверкиПраваПониженияСтатуса.Исполнитель                    = Объект.Исполнитель;
	
	ПравоПониженияСтатуса                  = ЗадачиПроцессовКлиентСервер.ПравоПониженияСтатуса(ПараметрыПроверкиПраваПониженияСтатуса);
	
	ПараметрыПроверкиИзмененияИсполнителя = ЗадачиПроцессовКлиентСервер.ПараметрыПроверкиИзмененияИсполнителя();
	
	ПараметрыПроверкиИзмененияИсполнителя.ПравоИзмененияЗадачБезКонтроля   = ПравоИзмененияЗадачБезКонтроля;
	ПараметрыПроверкиИзмененияИсполнителя.Задача                           = Объект.Ссылка;
	ПараметрыПроверкиИзмененияИсполнителя.Родитель                         = Объект.Родитель;
	ПараметрыПроверкиИзмененияИсполнителя.ИсполнительЗадачиШаблона         = ИсполнительЗадачиШаблона;
	ПараметрыПроверкиИзмененияИсполнителя.ТекущийПользователь              = ТекущийПользователь;
	ПараметрыПроверкиИзмененияИсполнителя.Исполнитель                      = Объект.Исполнитель;
	ПараметрыПроверкиИзмененияИсполнителя.ИсполнительРодительскойЗадачи    = ИсполнительРодительскойЗадачи;
	ПараметрыПроверкиИзмененияИсполнителя.Контролирующий                   = Объект.Контролирующий;
	ПараметрыПроверкиИзмененияИсполнителя.КонтролирующийРодительскойЗадачи = КонтролирующийРодительскойЗадачи;
	ПараметрыПроверкиИзмененияИсполнителя.ПротоколВзаимодействия           = Объект.ПротоколВзаимодействия;
	ПараметрыПроверкиИзмененияИсполнителя.Статус                           = Объект.Статус;
	ПараметрыПроверкиИзмененияИсполнителя.ОтветственныйЗаПредмет           = ОтветственныйЗаПредмет;
	
	ПравоИзмененияКонтролирующего          = ЗадачиПроцессовКлиентСервер.ПравоИзмененияКонтролирующего(ПараметрыПроверкиИзмененияИсполнителя);
	ПравоИзмененияИсполнителя              = ЗадачиПроцессовКлиентСервер.ПравоИзмененияИсполнителя(ПараметрыПроверкиИзмененияИсполнителя);
	ПравоИзмененияСтруктурыЗадачиПоШаблону = ПравоИзмененияСтруктурыЗадачиПоШаблону(ЭтотОбъект);
	
	Элементы.Контролирующий.ТолькоПросмотр = Не ПравоИзмененияКонтролирующего;
	Элементы.Исполнитель.ТолькоПросмотр    = Не ПравоИзмененияИсполнителя;
	
	Элементы.Родитель.ТолькоПросмотр  = Не ЗначениеЗаполнено(Объект.Предмет)
	                                    Или (ЗначениеЗаполнено(Объект.ЗадачаШаблона)
	                                    И Не ПравоИзмененияСтруктурыЗадачиПоШаблону);
	
	Элементы.Наименование.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ЗадачаШаблона)
	                                       И ЗапретитьПереименованиеЗадачСозданныхПоШаблону
	                                       И Не ПравоИзмененияСтруктурыЗадачиПоШаблону;
	
	ОтменаВыполненияЗадачиДоступна = Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
	                                 И ПравоПониженияСтатуса;
	
	ПонижениеДоЗапланированоДоступно = (Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена 
	                                    Или Объект.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	                                    И ПравоПониженияСтатуса;
	
	ПонижениеДоОтмененаДоступно = (Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
	                                 Или Объект.Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
	                                 Или Объект.Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована)
	                               И (ПравоПониженияСтатуса Или ВозможнаОтменаОтветственнымЗаПредметЗадачиПоШаблону);
	
	ЗадачаПоШаблону = ЗначениеЗаполнено(Объект.ЗадачаШаблона);
	
	Элементы.ФормаОтменитьВыполнениеСПересозданиемЗадач.Доступность          = ОтменаВыполненияЗадачиДоступна;
	Элементы.ФормаОтменитьВыполнениеСПересозданиемЗадачПоШаблону.Доступность = ОтменаВыполненияЗадачиДоступна И ЗадачаПоШаблону;
	
	Элементы.ФормаПеревестиВСтатусПринятаКВыполнению.Доступность = ОтменаВыполненияЗадачиДоступна;
	Элементы.ФормаПеревестиВСтатусЗапланирована.Доступность      = ПонижениеДоЗапланированоДоступно;
	Элементы.ФормаПеревестиВСтатусОтменена.Доступность           = ПонижениеДоОтмененаДоступно;
	
	Элементы.Ответить.Доступность  = Объект.ПротоколВзаимодействия.Количество() > 0;
	
	Элементы.ВариантыОтветитьПредставление.Видимость = (ТекущийИсполнительПорученияПоЗадаче = ТекущийПользователь);
	
	Если ЗначениеЗаполнено(Объект.Предмет) Тогда
		Элементы.СтраницыПредмет.ТекущаяСтраница = Элементы.СтраницаПредметЗаполнен;
	Иначе
		Элементы.СтраницыПредмет.ТекущаяСтраница = Элементы.СтраницаПредметНеЗаполнен;
	КонецЕсли;
	
	Элементы.КрайняяДатаОкончания.Доступность = Не ЗначениеЗаполнено(Объект.КрайняяДатаОкончания)
	                                            Или Не ЗначениеЗаполнено(Объект.Контролирующий)
	                                            Или ПравоИзмененияКонтролирующего;
	
КонецПроцедуры

#Область ПраваНаИзменение

&НаКлиентеНаСервереБезКонтекста
Функция ПравоИзмененияСтруктурыЗадачиПоШаблону(Форма)
	
	ПравоИзмененияСтруктурыЗадачиПоШаблону = Ложь;
	
	Если Форма.ПравоИзмененияЗадачБезКонтроля Тогда
		ПравоИзмененияСтруктурыЗадачиПоШаблону = Истина;
	ИначеЕсли Форма.ТекущийПользователь = Форма.ОтветственныйЗаШаблон Тогда
		ПравоИзмененияСтруктурыЗадачиПоШаблону = Истина;
	КонецЕсли;
	
	Возврат ПравоИзмененияСтруктурыЗадачиПоШаблону;
	
КонецФункции

&НаКлиенте
Процедура ПересоздатьЗадачи(ТолькоПоШаблону)
	
	Результат = РезультатАнализаПересозданияЗадач(ТолькоПоШаблону);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресТаблицы", Результат.АдресТаблицы);
	ПараметрыОткрытия.Вставить("Задача", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ЭтоПонижениеСтатуса", Ложь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТолькоПоШаблону", ТолькоПоШаблону);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОтчетПонижениеСтатусаПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПонижениеСтатуса", ПараметрыОткрытия, ЭтотОбъект,
	             ,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаСервере
Функция РезультатАнализаПересозданияЗадач(ТолькоПоШаблону)
	
	Возврат ЗадачиПроцессов.ДанныеДляПересозданияЗадач(Объект.Ссылка, Объект.Предмет,
	                                                   ТолькоПоШаблону, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьВсеСостоянияФормы()
	
	ОбновитьСвязанныеЗадачи();
	ОбновитьСостояниеЗадачи();
	ОбновитьСостояниеОчередьЗадач();
	ОбновитьИнформациюСогласование(Ложь);
	ОбновитьВариантыОтвета();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьСтатус(Статус)
	
	Результат = РезультатПониженияСтатуса(Статус);
	
	Если Результат.ТребуетсяОткрытиеОтчета Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("АдресТаблицы", Результат.АдресТаблицы);
		ПараметрыОткрытия.Вставить("ЕстьНедоступныеДляИзменения", Результат.ЕстьНедоступныеДляИзменения);
		ПараметрыОткрытия.Вставить("Задача", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("ЭтоПонижениеСтатуса", Истина);
		ПараметрыОткрытия.Вставить("ТекущийСтатус", Объект.Статус);
		ПараметрыОткрытия.Вставить("НовыйСтатус", Статус);
		
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОтчетПонижениеСтатусаПослеЗакрытия", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.ПонижениеСтатуса", ПараметрыОткрытия, ЭтотОбъект,
		             ,,,ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Результат.ВыполненоУспешно Тогда
		
		Оповестить("Запись_ЗадачаПроцесса", Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПонижениеСтатусаПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.ЭтоПонижениеСтатуса Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Понижение статуса задач'");
			
			РезультатВыполнения = РезультатПониженияСтатусаСПодчиненными(Результат.НовыйСтатус);
			Если РезультатВыполнения.ВыполненоУспешно Тогда
				Оповестить("Запись_ЗадачаПроцесса",,Объект.Ссылка);
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Задача, у которых понижен статус - %1.'"), РезультатВыполнения.КоличествоОбработанных);
			Иначе
				ТекстСообщения = НСтр("ru = 'Понижение статуса задачи не выполнено.'");
			КонецЕсли;
			
		Иначе
			
			ТекстЗаголовка = НСтр("ru = 'Пересоздание задач'");
			
			РезультатВыполнения = РезультатПересозданияЗадач(ДополнительныеПараметры.ТолькоПоШаблону);
			Если РезультатВыполнения.ВыполненоУспешно Тогда
				Оповестить("Запись_ЗадачаПроцесса");
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Пересоздано задач - %1.'"), РезультатВыполнения.КоличествоОбработанных);
			Иначе
				ТекстСообщения = НСтр("ru = 'Пересоздание задач не выполнено.'");
			КонецЕсли;
			
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатПересозданияЗадач(ТолькоПоШаблону)

	РезультатВыполнения = ЗадачиПроцессов.РезультатПересозданияЗадач(Объект.Ссылка, Объект.Предмет, ТолькоПоШаблону);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция РезультатПониженияСтатусаСПодчиненными(НовыйСтатус)

	Результат = ЗадачиПроцессов.РезультатПониженияСтатусаСПодчиненными(Объект.Ссылка, Объект.Статус, НовыйСтатус, Объект.Предмет);
	Если Результат.ВыполненоУспешно Тогда
		Прочитать();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатПониженияСтатуса(Статус)

	ДанныеДляПонижения = ЗадачиПроцессов.ДанныеДляПониженияСтатусаЗадачи(Объект.Ссылка, Объект.Статус, Статус, Объект.Предмет, УникальныйИдентификатор);
	ДанныеДляПонижения.Вставить("ТребуетсяОткрытиеОтчета", Ложь);
	ДанныеДляПонижения.Вставить("ВыполненоУспешно", Ложь);
	
	Если Не ДанныеДляПонижения.ТребуетсяИзменениеДругихЗадач 
		И ДанныеДляПонижения.КоличествоЗадачКИзменению = 1 Тогда
		
		ТекущийСтатус = Объект.Статус;
		Объект.Статус = Статус;
		
		Если ТекущийПользователь = Объект.Исполнитель
			И ПустаяСтрока(ТекстПоручения) Тогда
		
			Объект.ИсполнительПорученияПоЗадаче = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
			
		ИначеЕсли ТекущийПользователь = Объект.ИсполнительПорученияПоЗадаче Тогда
			
			Объект.ИсполнительПорученияПоЗадаче = Объект.Исполнитель;
			
		ИначеЕсли ПустаяСтрока(ТекстПоручения) Тогда
			
			Объект.ИсполнительПорученияПоЗадаче = Объект.Исполнитель;
			
		КонецЕсли;
		
		ЗаписьВыполненаУспешно = Записать();
		Если Не ЗаписьВыполненаУспешно Тогда
			Объект.Статус = ТекущийСтатус;
		Иначе
			ДанныеДляПонижения.ВыполненоУспешно = Истина;
			Модифицированность = Ложь;
		КонецЕсли;
		
	ИначеЕсли ДанныеДляПонижения.КоличествоЗадачКИзменению <> 0 Тогда
		
		ДанныеДляПонижения.ТребуетсяОткрытиеОтчета = Истина;
		
	КонецЕсли;
	
	Возврат ДанныеДляПонижения;

КонецФункции 

#КонецОбласти

#Область СтандартныеПодсистемы

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

#КонецОбласти

#Область ПереключениеХронометража

&НаСервере
Функция РезультатПереключенияХронометражаНаСервере(Ссылка, ВыполнитьБезусловно)
	
	Результат = Новый Структура;
	Результат.Вставить("ПереключениеВозможно", Истина);
	Результат.Вставить("ДанныеХронометража",   Неопределено);
	
	Если Не ВыполнитьБезусловно
		И Не УчетВремени.ХронометражВключен(ТекущийПользователь, Ссылка)
		И ИспользуетсяОчередьРабот Тогда
		
		Результат.ПереключениеВозможно = РегистрыСведений.ОчередиРаботСотрудников.РаботаПерваяВОчереди(ТекущийПользователь, Ссылка);
		
	КонецЕсли;
	
	Если Результат.ПереключениеВозможно Тогда
		Результат.ДанныеХронометража = УчетВремени.ПереключитьХронометраж(Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПодборНеПоОчередиПослеОтвета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено 
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ВыполнитьПереключениеХронометража(Истина);
		
	ИначеЕсли Результат = "ВОчередьРабот" Тогда
		
		ПараметрыОткрытия       = Новый Структура;
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("РольВЗадаче", "МояОчередь");
		ПараметрыОткрытия.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		
		ОткрытьФорму("Справочник.ЗадачиПроцесса.Форма.МоиЗадачи", ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереключениеХронометража(Безусловно)
	
	Результат = РезультатПереключенияХронометражаНаСервере(Объект.Ссылка, Безусловно);
	
	Если Не Результат.ПереключениеВозможно Тогда
		
		ВопросПользователю = НСтр("ru = 'Работа для которой начинается хронометраж не является первой задачей очереди. Все равно продолжить?'");
		
		ПодборНеПоОчередиПослеОтвета = Новый ОписаниеОповещения("ПодборНеПоОчередиПослеОтвета", ЭтотОбъект);
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("ВОчередьРабот", НСтр("ru = 'В очередь работ'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.ОК);
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(ПодборНеПоОчередиПослеОтвета, 
		               ВопросПользователю,
		               КнопкиВопроса,,
		               "ВОчередьРабот");
		
	Иначе
		
		ПослеПереключенияХронометража(Результат.ДанныеХронометража);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПереключенияХронометража(ДанныеХронометража)
	
	Элементы.ПереключитьХронометраж.Пометка = НЕ Элементы.ПереключитьХронометраж.Пометка;
	
	Оповестить("ПереключенХронометраж", ДанныеХронометража, ЭтотОбъект);
	
	Если ДанныеХронометража.ХронометражЗавершен Тогда
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("Начало", ДанныеХронометража.НачалоЗавершеннойРаботы);
		ДанныеОповещения.Вставить("Окончание", ДанныеХронометража.ОкончаниеЗавершеннойРаботы);
		
		Оповестить("ЗаписаныДанныеКалендаря", ДанныеОповещения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СписокПодчиненыхЗадач

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено  Тогда
		
		ЗадачаДляКоторойСформированПредпросмотр = Неопределено;
		ОписаниеЗадачиПредпросмотр              = Неопределено;
		
	Иначе
		ОтобразитьПредпросмотрЗадачи(ТекущиеДанные.Ссылка, ОписаниеЗадачиПредпросмотр);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтобразитьПредпросмотрЗадачи(ЗадачаПроцесса, ОписаниеЗадачи)

	Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "Описание");
	ДанныеХранилища = Описание.Получить();
	Если ТипЗнч(ДанныеХранилища) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЗадачи = ДанныеХранилища;
	Иначе
		ОписаниеЗадачи = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПодчиненныхЗадачПриСозданииНаСервере()
	
	УстановитьПараметрыСпискаПодчиненныхЗадач();
	
	ЗадачиПроцессов.СформироватьПодменюПоВидуРесурса(ЭтотОбъект);
	ЗадачиПроцессов.СформироватьПодменюПоПлануЗанятости(ЭтотОбъект, ПараметрыНастроекПоПлануЗанятости());
	ЗадачиПроцессов.УстановитьПараметрыДинамическогоСпискаЗадач(Список, ВидСогласуемогоРесурсаДляВывода);
	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуРесурса(ЭтотОбъект);
	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуПланаЗанятости(ЭтотОбъект, ПараметрыНастроекПоПлануЗанятости());
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());
	
	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуРесурса(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриПереключенииНаПодчиненныеЗадачиСервер()

	ЗадачиПроцессов.УстановитьТекущуюСтрокуСпискаПоПервойПодчиненойЗадаче(Элементы.Список, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Функция ПараметрыВидимостиКомандСписка()
	
	ПараметрыВидимости = Новый Структура;
	
	МассивИменКомандСогласования = Новый Массив;
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюЧастичноСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокЧастичноСогласовать");
	
	ПараметрыВидимости.Вставить("ЗависящиеОтВыбораХодаСогласования", МассивИменКомандСогласования);
	
	МассивИменКомандИзменения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИменКомандИзменения, МассивИменКомандСогласования);
	МассивИменКомандИзменения.Добавить("СписокДобавитьПодчиненнуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокДобавитьПаралельнуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокДобавитьПоследующуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокВыполнить");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюВыполнить");
	
	ПараметрыВидимости.Вставить("ЗависящиеОтПраваНаИзменение", МассивИменКомандИзменения); 
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("СписокСогласовано");
	МассивИменКолонокСписка.Добавить("СписокСогласованоВТекущей");
	МассивИменКолонокСписка.Добавить("СписокСогласованоВДочерних");
	МассивИменКолонокСписка.Добавить("СписокНаСогласовании");
	МассивИменКолонокСписка.Добавить("СписокНаСогласованииВТекущей");
	МассивИменКолонокСписка.Добавить("СписокНаСогласованииВДочерних");
	МассивИменКолонокСписка.Добавить("СписокСогласованоПроцентВыполнения");
	МассивИменКолонокСписка.Добавить("СписокВыполняетсяСогласование");
	
	ПараметрыВидимости.Вставить("КолонкиСогласовавние", МассивИменКолонокСписка);
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("СписокПланПоЗадачамМинусФактическиеТрудозатраты");
	МассивИменКолонокСписка.Добавить("СписокФактическиеТрудозатратыПрошлыйПериодРабочегоПлана");
	МассивИменКолонокСписка.Добавить("СписокФактическиеТрудозатратыТекущийПериодРабочегоПлана");
	МассивИменКолонокСписка.Добавить("СписокФактическиеТрудозатраты");
	
	ПараметрыВидимости.Вставить("КолонкиУчетВремени", МассивИменКолонокСписка);
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("СписокРабочийПланТекущийПериод");
	МассивИменКолонокСписка.Добавить("СписокРабочийПланПрошлыйПериод");
	
	ПараметрыВидимости.Вставить("КолонкиПланирование", МассивИменКолонокСписка);
	
	Возврат ПараметрыВидимости;
	
КонецФункции

&НаКлиенте
Процедура ФормаМножественногоОтбораПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Элемент") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ОтборСостояние Тогда
		
		СостояниеОтбор = Результат;
		УстановитьОтборСостояние();
		
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ОтборЗонаСоблюденияСроков Тогда
		
		ЗонаСоблюденияСроковОтбор = Результат;
		УстановитьОтборЗонаСоблюденияСроков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСостояние()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Состояние",
	                                                                        СостояниеОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        СостояниеОтбор.Количество() > 0);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗонаСоблюденияСроков()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "ЗонаСоблюденияСроков",
	                                                                        ЗонаСоблюденияСроковОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        ЗонаСоблюденияСроковОтбор.Количество() > 0);

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ИмяКоманды)

	ЗадачиПроцессов.ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ЭтотОбъект, ИмяКоманды);
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(ИмяКоманды)

	ЗадачиПроцессов.ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(ЭтотОбъект, ИмяКоманды);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаПодчиненныхЗадач()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "ТекущаяЗадача",
	                                                                   Объект.Ссылка,
	                                                                   Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыНастроекПоПлануЗанятости()
	
	ПараметрыНастроек = ЗадачиПроцессовКлиентСервер.НовыйПараметрыНастроекПоПлануЗанятости();
	
	ПараметрыНастроек.ИмяКолонкиФактПрошлыйПериод        = "СписокФактическиеТрудозатратыПрошлыйПериодРабочегоПлана";
	ПараметрыНастроек.ИмяКолонкиФактТекущийПериод        = "СписокФактическиеТрудозатратыТекущийПериодРабочегоПлана";
	ПараметрыНастроек.ИмяКолонкиРабочийПланПрошлыйПериод = "СписокРабочийПланПрошлыйПериод";
	ПараметрыНастроек.ИмяКолонкиРабочийПланТекущийПериод = "СписокРабочийПланТекущийПериод";
	ПараметрыНастроек.ИмяГруппыТекущийПериод             = "СписокГруппаТекущийПериод";
	ПараметрыНастроек.ИмяГруппыПрошлыйПериод             = "СписокГруппаПрошлыйПериод";
	
	Возврат ПараметрыНастроек;
	
КонецФункции

#КонецОбласти

#КонецОбласти
