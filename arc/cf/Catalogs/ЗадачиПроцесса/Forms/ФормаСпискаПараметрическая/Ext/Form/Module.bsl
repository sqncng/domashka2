
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если (Не Параметры.Свойство("Предмет"))
		Или Не ЗначениеЗаполнено(Параметры.Предмет) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан предмет. Данная форма предназначена для работы с задачами по предмету.'")
	КонецЕсли;
	
	Предмет = Параметры.Предмет;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЗадачиПроцессов.СформироватьКомандыСозданияЗадачПоШаблону(ЭтотОбъект,
	                                                          Предмет,
	                                                          "СписокЗадачиПоШаблону",
	                                                          СписокКомандСозданияЗадачПоШаблону,
	                                                          ТекущийПользователь);
	
	ЗадачиПроцессов.СформироватьПодменюПоВидуРесурса(ЭтотОбъект);
	ЗадачиПроцессов.СформироватьПодменюПоПлануЗанятости(ЭтотОбъект, ПараметрыНастроекПоПлануЗанятости());
	ЗадачиПроцессов.УстановитьПараметрыДинамическогоСпискаЗадач(Список, ВидСогласуемогоРесурсаДляВывода);

	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуРесурса(ЭтотОбъект);
	ЗадачиПроцессов.ЗагрузитьНастройкуПоВидуПланаЗанятости(ЭтотОбъект, ПараметрыНастроекПоПлануЗанятости());
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());
	
	ОтобразитьПредставлениеЭтапаПроцесса();
	
	СтруктураБыстрогоОтбора = Неопределено;
	
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	                                                                   "Предмет",
	                                                                   Предмет,
	                                                                   Истина);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                      "Состояние",
	                                                                      "СостояниеОтбор",
	                                                                      СостояниеОтбор,
	                                                                      СтруктураБыстрогоОтбора,,
	                                                                      ВидСравненияКомпоновкиДанных.ВСписке);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "Исполнитель",
	                                                                           Исполнитель,
	                                                                           СтруктураБыстрогоОтбора);
	
	ОбщегоНазначенияСППРКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список,
	                                                                           "ЗонаСоблюденияСроков",
	                                                                           ЗонаСоблюденияСроковОтбор,
	                                                                           СтруктураБыстрогоОтбора);
	
	Если Параметры.Свойство("РежимОтбораЗадач") Тогда
		УстановитьОтборЗадачПоРежимуПараметра(Параметры);
	КонецЕсли;
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандКонтроля = Новый Массив;
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль"));
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(ЭтотОбъект, 
	                                                                   СпискиДляВыводаКомандКонтроля);
	// Конец ОбъектыНаКонтроле
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандПриоритета = Новый Массив;
	СпискиДляВыводаКомандПриоритета.Добавить(
		ПриоритетыОчередиРабот.ДанныеСпискаДляВыводаКомандПриоритета(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль", "Приоритет"));
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеСписка(ЭтотОбъект, 
	                                                               СпискиДляВыводаКомандПриоритета,
	                                                               Справочники.ЗадачиПроцесса.ПустаяСсылка(),
	                                                               ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(Предмет));
	// Конец ОбъектыНаКонтроле
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	 ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                           "Состояние",
	                                                                           "СостояниеОтбор",
	                                                                           СостояниеОтбор,
	                                                                           СтруктураБыстрогоОтбора, 
	                                                                           Настройки,,
	                                                                           ВидСравненияКомпоновкиДанных.ВСписке);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "Исполнитель",
	                                                                          "Исполнитель",
	                                                                           Исполнитель,
	                                                                           СтруктураБыстрогоОтбора, 
	                                                                           Настройки);
	
	ЗадачиПроцессовКлиентСервер.ОтборПоЗначениюСпискаПередЗагрузкойИзНастроек(Список,
	                                                                          "ЗонаСоблюденияСроков",
	                                                                          "ЗонаСоблюденияСроковОтбор",
	                                                                          ЗонаСоблюденияСроковОтбор,
	                                                                          СтруктураБыстрогоОтбора, 
	                                                                          Настройки,,
	                                                                          ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ЗадачаПроцесса" Тогда
		
		ВыполнитьОбновлениеСписка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьРежимПросмотра();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборСостояние();

	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           СостояниеОтбор,
	                                                           Тип("ПеречислениеСсылка.СостоянияЗадачПроцессов"),
	                                                           НСтр("ru = 'Выбранные состояния'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсполнительПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Исполнитель",
	                                                                        Исполнитель,
	                                                                        ВидСравненияКомпоновкиДанных.Равно,
	                                                                        ,
	                                                                        ЗначениеЗаполнено(Исполнитель));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаСоблюденияСроковПриИзменении(Элемент)
	
	УстановитьОтборЗонаСоблюденияСроков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаСоблюденияСроковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.МножественныйОтборСпискаНачалоВыбора(ЭтотОбъект,
	                                                           Элемент,
	                                                           ЗонаСоблюденияСроковОтбор,
	                                                           Тип("ПеречислениеСсылка.ЗоныЗадач"),
	                                                           НСтр("ru = 'Выбранные зоны соблюдения сроков'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТекущегоЭтапаПроцессаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ПерейтиВПланЗанятостиТехПроект") Тогда
		
		ПланированиеКлиент.ОткрытьПланЗанятостиПоТехПроекту(Предмет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если Не ЗадачиПроцессовКлиент.ВыборКорректен(Элементы.Список, Истина) Тогда
		
		ЗадачаДляКоторойСформированПредпросмотр = Неопределено;
		ОписаниеЗадачи = Неопределено;
		
	Иначе
		
		Если ЗадачаДляКоторойСформированПредпросмотр <> ТекущиеДанные.Ссылка Тогда
			
			Если Элементы.Список.ВыделенныеСтроки.Количество() = 1 Тогда
				
				ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка",0.1,Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
	
		Отказ = Истина;
		
		Если Элементы.Список.ТекущиеДанные = Неопределено Тогда
			ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Паралельная", Предмет);
		Иначе
			ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Подчиненная", Предмет);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ЗадачиПроцессовКлиент.СписокЗадачПриПеретаскивании(Элементы.Список, Строка, ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ЗадачиПроцессов.СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПаралельнуюЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Паралельная", Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненнуюЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Подчиненная", Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоследующуюЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.СоздатьЗадачуИзСписка(Элементы.Список, "Последующая", Предмет);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСозданияЗадачПоШаблону(Команда)
	
	ШаблонПроцесса = Неопределено;
	Для Каждого ЭлементСписка Из СписокКомандСозданияЗадачПоШаблону Цикл
		Если ЭлементСписка.Представление = Команда.Имя Тогда
			ШаблонПроцесса = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ШаблонПроцесса) Тогда
		СоздатьЗадачиПоШаблону(ШаблонПроцесса);
		Для Каждого ЭлементСписка Из СписокКомандСозданияЗадачПоШаблону Цикл
			Элементы[ЭлементСписка.Представление].Доступность = Ложь;
			Если ШаблонПроцесса = ЭлементСписка.Значение Тогда
				Элементы[ЭлементСписка.Представление].Пометка = Истина;
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда)
	
	ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(Команда)
	
	ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Запланировать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаПроверку(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКВыполнению(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Согласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НеСогласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастичноСогласовать(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаСогласование(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список, ЗадачиПроцессовКлиент.ПараметрыКомандыСписка(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьИсполнителямЗадачи(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИсполнителя(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Ознакомиться(Команда)
	
	ЗадачиПроцессовКлиент.ВыполнитьКомандуСписка(Команда.Имя, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ВыполнитьОбновлениеСписка();
	
КонецПроцедуры

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

// Приоритеты
&НаКлиенте
Процедура Подключаемый_УстановитьПриоритет(Команда)
	
	ПриоритетыОчередиРаботыКлиент.ВыполнитьКомандуИзмененияПриоритетаИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец Приоритеты

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОтобразитьПредставлениеЭтапаПроцесса()
	
	ПредставлениеТекущегоЭтапаПроцесса = ЗадачиПроцессов.ПредставлениеТекущегоЭтапаПроцесса(Предмет);
	Элементы.ПредставлениеТекущегоЭтапаПроцесса.Видимость = Не ПустаяСтрока(ПредставлениеТекущегоЭтапаПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ЗадачиПроцессовКлиент.ВыборКорректен(Элементы.Список, Истина) Тогда
		
		ОтобразитьПредпросмотрЗадачи(ТекущиеДанные.Ссылка, ОписаниеЗадачи);
		
	Иначе
		
		ЗадачаДляКоторойСформированПредпросмотр = Неопределено;
		ОписаниеЗадачи = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтобразитьПредпросмотрЗадачи(ЗадачаПроцесса, ОписаниеЗадачи)

	Описание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "Описание");
	ДанныеХранилища = Описание.Получить();
	Если ТипЗнч(ДанныеХранилища) = Тип("ФорматированныйДокумент") Тогда
		ОписаниеЗадачи = ДанныеХранилища;
	Иначе
		ОписаниеЗадачи = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПоляСостояниеВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеПолейДатаВСписках(СписокУсловноеОформление);
	ЗадачиПроцессов.УстановитьУсловноеОформлениеСостоянияСогласования(СписокУсловноеОформление);
	
	// Приоритеты
	ПриоритетыОчередиРабот.УстановитьУсловноеОформлениеСписка(Список, ЗадачиПроцессовПереопределяемый.ПроектПредметаЗадачи(Параметры.Предмет));
	// Конец Приоритеты
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗадачиПоШаблону(ШаблонПроцесса)

	ЗадачиПроцессов.СоздатьЗадачиПоШаблону(Предмет, ШаблонПроцесса);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ИмяКоманды)

	ЗадачиПроцессов.ИзменитьВидРесурсаПоКоторомуОтображаетсяХодСогласования(ЭтотОбъект, ИмяКоманды);
	ЗадачиПроцессов.УправлениеВидимостьюКомандСписка(ЭтотОбъект, ПараметрыВидимостиКомандСписка());

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(ИмяКоманды)

	ЗадачиПроцессов.ИзменитьВидПланаЗанятостиПоКоторомуВыводятсяДанные(ЭтотОбъект, ИмяКоманды, ПараметрыНастроекПоПлануЗанятости());

КонецПроцедуры

&НаКлиенте
Процедура ФормаМножественногоОтбораПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("Элемент") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ОтборСостояние Тогда
		
		СостояниеОтбор = Результат;
		УстановитьОтборСостояние();
		
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ОтборЗонаСоблюденияСроков Тогда
		
		ЗонаСоблюденияСроковОтбор = Результат;
		УстановитьОтборЗонаСоблюденияСроков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСостояние()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "Состояние",
	                                                                        СостояниеОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        СостояниеОтбор.Количество() > 0);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗонаСоблюденияСроков()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
	                                                                        "ЗонаСоблюденияСроков",
	                                                                        ЗонаСоблюденияСроковОтбор,
	                                                                        ВидСравненияКомпоновкиДанных.ВСписке,
	                                                                        ,
	                                                                        ЗонаСоблюденияСроковОтбор.Количество() > 0);

КонецПроцедуры

&НаСервере
Функция ПараметрыВидимостиКомандСписка()
	
	ПараметрыВидимости = Новый Структура;
	
	МассивИменКомандСогласования = Новый Массив;
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокКонтекстноеМенюЧастичноСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНаправитьНаСогласование");
	МассивИменКомандСогласования.Добавить("СписокСогласовать");
	МассивИменКомандСогласования.Добавить("СписокНеСогласовать");
	МассивИменКомандСогласования.Добавить("СписокЧастичноСогласовать");
	
	ПараметрыВидимости.Вставить("ЗависящиеОтВыбораХодаСогласования", МассивИменКомандСогласования);
	
	МассивИменКомандИзменения = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИменКомандИзменения, МассивИменКомандСогласования);
	МассивИменКомандИзменения.Добавить("СписокСоздать");
	МассивИменКомандИзменения.Добавить("СписокДобавитьПодчиненнуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокДобавитьПаралельнуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокДобавитьПоследующуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокВыполнить");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюДобавитьПодчиненнуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюДобавитьПаралельнуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюДобавитьПоследующуюЗадачу");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюПеренаправить");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюОтветить");
	МассивИменКомандИзменения.Добавить("СписокНаправитьНаПроверку");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюЗапланировать");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюПринятьКВыполнению");
	МассивИменКомандИзменения.Добавить("СписокКонтекстноеМенюВыполнить");
	
	ПараметрыВидимости.Вставить("ЗависящиеОтПраваНаИзменение", МассивИменКомандИзменения);
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("Согласовано");
	МассивИменКолонокСписка.Добавить("СогласованоВТекущей");
	МассивИменКолонокСписка.Добавить("СогласованоВДочерних");
	МассивИменКолонокСписка.Добавить("НаСогласовании");
	МассивИменКолонокСписка.Добавить("НаСогласованииВТекущей");
	МассивИменКолонокСписка.Добавить("НаСогласованииВДочерних");
	МассивИменКолонокСписка.Добавить("СогласованоПроцентВыполнения");
	МассивИменКолонокСписка.Добавить("ВыполняетсяСогласование");
	
	ПараметрыВидимости.Вставить("КолонкиСогласовавние", МассивИменКолонокСписка);
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("ПланПоЗадачамМинусФактическиеТрудозатраты");
	МассивИменКолонокСписка.Добавить("ФактическиеТрудозатратыПрошлыйПериодРабочегоПлана");
	МассивИменКолонокСписка.Добавить("ФактическиеТрудозатратыТекущийПериодРабочегоПлана");
	МассивИменКолонокСписка.Добавить("ФактическиеТрудозатраты");
	
	ПараметрыВидимости.Вставить("КолонкиУчетВремени", МассивИменКолонокСписка);
	
	МассивИменКолонокСписка = Новый Массив;
	МассивИменКолонокСписка.Добавить("РабочийПланТекущийПериод");
	МассивИменКолонокСписка.Добавить("РабочийПланПрошлыйПериод");
	
	ПараметрыВидимости.Вставить("КолонкиПланирование", МассивИменКолонокСписка);
	
	Возврат ПараметрыВидимости;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбновлениеСписка()
	
	Элементы.Список.Обновить();
	ОтобразитьПредставлениеЭтапаПроцесса();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыНастроекПоПлануЗанятости()
	
	ПараметрыНастроек = ЗадачиПроцессовКлиентСервер.НовыйПараметрыНастроекПоПлануЗанятости();
	
	ПараметрыНастроек.ИмяКолонкиФактПрошлыйПериод        = "ФактическиеТрудозатратыПрошлыйПериодРабочегоПлана";
	ПараметрыНастроек.ИмяКолонкиФактТекущийПериод        = "ФактическиеТрудозатратыТекущийПериодРабочегоПлана";
	ПараметрыНастроек.ИмяКолонкиРабочийПланПрошлыйПериод = "РабочийПланПрошлыйПериод";
	ПараметрыНастроек.ИмяКолонкиРабочийПланТекущийПериод = "РабочийПланТекущийПериод";
	ПараметрыНастроек.ИмяГруппыТекущийПериод             = "ГруппаТекущийПериод";
	ПараметрыНастроек.ИмяГруппыПрошлыйПериод             = "ГруппаПрошлыйПериод";
	
	Возврат ПараметрыНастроек;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРежимПросмотра()
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураБыстрогоОтбора) = Тип("Структура")
		И СтруктураБыстрогоОтбора.Свойство("Исполнитель")
		И ЗначениеЗаполнено(СтруктураБыстрогоОтбора.Исполнитель) Тогда
		
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗадачПоРежимуПараметра(Параметры)
	
	Если Параметры.РежимОтбораЗадач = "НевыполненныеЗадачиИсполнителяВерхнегоУровняНеПоШаблонуСПодчиненными" Тогда
		
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("Исполнитель")
			И ЗначениеЗаполнено(Параметры.СтруктураБыстрогоОтбора.Исполнитель) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачиПроцесса.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ЗадачиВерхнегоУровняНеПоШаблону
			|ИЗ
			|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
			|ГДЕ
			|	НЕ ЗадачиПроцесса.ПометкаУдаления
			|	И ЗадачиПроцесса.Предмет = &Предмет
			|	И ЗадачиПроцесса.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроцесса.ПустаяСсылка)
			|	И ЗадачиПроцесса.ЗадачаШаблона = ЗНАЧЕНИЕ(Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка)
			|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗадачиПроцесса.Ссылка КАК Ссылка
			|ИЗ
			|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
			|			ПО ИерархияЗадачПроцесса.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
			|ГДЕ
			|	НЕ ЗадачиПроцесса.ПометкаУдаления
			|	И ЗадачиПроцесса.Исполнитель = &Исполнитель
			|	И ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
			|	И ИерархияЗадачПроцесса.Родитель В
			|			(ВЫБРАТЬ
			|				ЗадачиВерхнегоУровняНеПоШаблону.Ссылка КАК Ссылка
			|			ИЗ
			|				ЗадачиВерхнегоУровняНеПоШаблону КАК ЗадачиВерхнегоУровняНеПоШаблону)";
			
			Запрос.УстановитьПараметр("Предмет", Предмет);
			Запрос.УстановитьПараметр("Исполнитель", Параметры.СтруктураБыстрогоОтбора.Исполнитель);
			
			ЗадачиДляОтбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", ЗадачиДляОтбора, ВидСравненияКомпоновкиДанных.ВСписке);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
