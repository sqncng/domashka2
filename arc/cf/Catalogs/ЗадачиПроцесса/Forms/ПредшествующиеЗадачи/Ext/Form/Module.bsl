&НаКлиенте
Перем ВыполняетсяЗакрытие;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("ПредшествующиеЗадачи")
		Или ТипЗнч(Параметры.ПредшествующиеЗадачи) <> Тип("Массив") Тогда
		 Отказ = Истина;
		 Возврат;
	КонецЕсли;
	
	Предмет = Параметры.Предмет;
	ТекущаяЗадача  = Параметры.ТекущаяЗадача;
	ЗадачаРодитель = Параметры.ЗадачаРодитель;
	
	Если НЕ Параметры.Доступность Тогда
		Элементы.ПредшествующиеЗадачи.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Для Каждого ПредшествующаяЗадача Из Параметры.ПредшествующиеЗадачи Цикл
		НоваяСтрока = ПредшествующиеЗадачи.Добавить();
		НоваяСтрока.ПредшествующаяЗадача = ПредшествующаяЗадача;
		НоваяСтрока.НомерСтроки          = ПредшествующиеЗадачи.Количество();
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ВыполняетсяЗакрытие И Модифицированность И Не ПереноситьИзменения И Не ЗавершениеРаботы Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстПредупреждения = НСтр("ru = 'Состав предшествующих задач был изменен. Перенести изменения?'");
		
		ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшествующиеЗадачи

&НаКлиенте
Процедура ПредшествующиеЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОткрытьФормуВыбораЗадачи(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеЗадачиПредшествующаяЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуВыбораЗадачи(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПредшествующиеЗадачи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.ПредшествующаяЗадача);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Не ТолькоПросмотр Тогда
		ПереноситьИзменения = Истина;
	КонецЕсли;
	
	Закрыть(МассивПредшествующихЗадач());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция МассивПредшествующихЗадач()
	
	МассивПредшествующихЗадач = Новый Массив;
	
	Для Каждого СтрокаПредшествующаяЗадача Из ПредшествующиеЗадачи Цикл
		
		Если МассивПредшествующихЗадач.Найти(СтрокаПредшествующаяЗадача.ПредшествующаяЗадача) = Неопределено Тогда
			МассивПредшествующихЗадач.Добавить(СтрокаПредшествующаяЗадача.ПредшествующаяЗадача);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивПредшествующихЗадач;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораЗадачи(ДобавлениеЗадачи)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыбора", Истина);
	ПараметрыФормы.Вставить("ПараметрыВыбораЗадачи", ПараметрыВыбораЗадачи());
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Предмет", Предмет);
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДобавлениеЗадачи", ДобавлениеЗадачи);
	
	ОбработчикЗакрытияФормы = Новый ОписаниеОповещения("ФормаВыбораЗадачиПроцессаПослеВыбора", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.ЗадачиПроцесса.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,ОбработчикЗакрытияФормы);

КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыбораЗадачи()

	ПараметрыВыбораЗадачи      = ЗадачиПроцессовКлиент.ПараметрыВыбораЗадачи();
	ПустаяСсылкаЗадачаПроцесса = ПредопределенноеЗначение("Справочник.ЗадачиПроцесса.ПустаяСсылка");
	
	Если ТекущаяЗадача = ПустаяСсылкаЗадачаПроцесса Тогда
		
		Если ЗадачаРодитель = ПустаяСсылкаЗадачаПроцесса Тогда
		
			ПараметрыВыбораЗадачи.ИсключатьПодчиненныеЗадачи = Ложь;
			ПараметрыВыбораЗадачи.ИсключатьВышестоящиеЗадачи = Ложь;
		
		Иначе
			
			ПараметрыВыбораЗадачи.ИсключатьПодчиненныеЗадачи = Ложь;
			ПараметрыВыбораЗадачи.ИсключатьВышестоящиеЗадачи = Истина;
			ПараметрыВыбораЗадачи.ТекущаяЗадача              = ЗадачаРодитель;
		КонецЕсли;
		
	Иначе
		
		ПараметрыВыбораЗадачи.ТекущаяЗадача = ТекущаяЗадача;
		
		Если ЗадачаРодитель = ПустаяСсылкаЗадачаПроцесса Тогда
			
			ПараметрыВыбораЗадачи.ИсключатьПодчиненныеЗадачи = Истина;
			ПараметрыВыбораЗадачи.ИсключатьВышестоящиеЗадачи = Ложь;
			
		Иначе
			
			ПараметрыВыбораЗадачи.ИсключатьПодчиненныеЗадачи = Истина;
			ПараметрыВыбораЗадачи.ИсключатьВышестоящиеЗадачи = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаПредшествующиеЗадача Из ПредшествующиеЗадачи Цикл
		
		ПараметрыВыбораЗадачи.УжеПодобранныеЗадачи.Добавить(СтрокаПредшествующиеЗадача.ПредшествующаяЗадача);
		
	КонецЦикла;
	
	Возврат ПараметрыВыбораЗадачи;

КонецФункции 

&НаКлиенте
Процедура ФормаВыбораЗадачиПроцессаПослеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ДобавлениеЗадачи Тогда
		
		НоваяСтрока = ПредшествующиеЗадачи.Добавить();
		НоваяСтрока.НомерСтроки = ПредшествующиеЗадачи.Количество();
		НоваяСтрока.ПредшествующаяЗадача = РезультатВыбора;
		
		Модифицированность = Истина;
		
	Иначе
		ТекущиеДанные = Элементы.ПредшествующиеЗадачи.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено 
			И ТекущиеДанные.ПредшествующаяЗадача <> РезультатВыбора Тогда
			
			ТекущиеДанные.ПредшествующаяЗадача = РезультатВыбора;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыполняетсяЗакрытие = Истина;
	ПереноситьИзменения  = Истина;
	Закрыть(МассивПредшествующихЗадач());
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти

