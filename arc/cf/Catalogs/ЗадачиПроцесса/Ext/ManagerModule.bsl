#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт

	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если Не ПравоДоступа("Редактирование", Метаданные.Справочники.ЗадачиПроцесса)
		Или МодульТекущиеДелаСервер.ДелоОтключено("ЗадачиПроцесса") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторГруппыЗадачи = НСтр("ru='Задачи процессов'");
	
	ЗонаСоблюденияСроковСписок = Новый СписокЗначений;
	ЗонаСоблюденияСроковСписок.Добавить(Перечисления.ЗоныЗадач.Желтая);
	ЗонаСоблюденияСроковСписок.Добавить(Перечисления.ЗоныЗадач.Красная);
	
	ПоказателиТекущихДел = ПоказателиТекущихДел();

	ПараметрыОтбораПриступить          = Новый Структура;
	
	СостояниеСписок = Новый СписокЗначений;
	СостояниеСписок.Добавить(Перечисления.СостоянияЗадачПроцессов.Запланирована);
	
	ПараметрыОтбораПриступить.Вставить("СостояниеСписокИсполнитель",               СостояниеСписок);
	ПараметрыОтбораПриступить.Вставить("ЗонаСоблюденияСроковСписокИсполнитель",    ЗонаСоблюденияСроковСписок);
	ПараметрыОтбораПриступить.Вставить("СостояниеСписокНаправлены",                Неопределено);
	ПараметрыОтбораПриступить.Вставить("ЗонаСоблюденияСроковСписокНаправлены",     Неопределено);
	ПараметрыОтбораПриступить.Вставить("СостояниеСписокКонтролирующий",            Неопределено);
	ПараметрыОтбораПриступить.Вставить("ЗонаСоблюденияСроковСписокКонтролирующий", Неопределено);
	ПараметрыОтбораПриступить.Вставить("РольВЗадаче",                              "Исполнитель");
	
	ПараметрыОтбораЗавершить         = Новый Структура;
	
	СостояниеСписок = Новый СписокЗначений;
	СостояниеСписок.Добавить(Перечисления.СостоянияЗадачПроцессов.Выполняется);
	
	ПараметрыОтбораЗавершить.Вставить("СостояниеСписокИсполнитель",                СостояниеСписок);
	ПараметрыОтбораЗавершить.Вставить("ЗонаСоблюденияСроковСписокИсполнитель",     ЗонаСоблюденияСроковСписок);
	ПараметрыОтбораПриступить.Вставить("СостояниеСписокНаправлены",                Неопределено);
	ПараметрыОтбораПриступить.Вставить("ЗонаСоблюденияСроковСписокНаправлены",     Неопределено);
	ПараметрыОтбораПриступить.Вставить("СостояниеСписокКонтролирующий",            Неопределено);
	ПараметрыОтбораПриступить.Вставить("ЗонаСоблюденияСроковСписокКонтролирующий", Неопределено);
	ПараметрыОтбораЗавершить.Вставить("РольВЗадаче",                               "Исполнитель");
	
	ПараметрыОтбораОтработатьПоручение = Новый Структура;
	ПараметрыОтбораОтработатьПоручение.Вставить("СостояниеСписокИсполнитель",            Неопределено);
	ПараметрыОтбораОтработатьПоручение.Вставить("ЗонаСоблюденияСроковСписокИсполнитель", Неопределено);
	ПараметрыОтбораПриступить.Вставить("СостояниеСписокНаправлены",                      Неопределено);
	ПараметрыОтбораПриступить.Вставить("ЗонаСоблюденияСроковСписокНаправлены",           Неопределено);
	ПараметрыОтбораПриступить.Вставить("СостояниеСписокКонтролирующий",                  Неопределено);
	ПараметрыОтбораПриступить.Вставить("ЗонаСоблюденияСроковСписокКонтролирующий",       Неопределено);
	ПараметрыОтбораОтработатьПоручение.Вставить("РольВЗадаче",                           "НаправленоПоручение");
	ПараметрыОтбораОтработатьПоручение.Вставить("ДатаПорученияПоЗадаче",                 НачалоДня(ТекущаяДатаСеанса()) + 86400);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ТекущиеДела");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбораОтработатьПоручение);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗадачиПроцессаОтработатьПоручение";
	Дело.ЕстьДела       = ПоказателиТекущихДел.КоличествоЗадачОтработатьПоручение > 0;
	Дело.Представление  = НСтр("ru = 'Отработать поручение'");
	Дело.Количество     = ПоказателиТекущихДел.КоличествоЗадачОтработатьПоручение;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Форма          = "Справочник.ЗадачиПроцесса.Форма.МоиЗадачи";
	Дело.Владелец       = ИдентификаторГруппыЗадачи;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ТекущиеДела");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбораПриступить);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗадачиПроцессаПриступить";
	Дело.ЕстьДела       = ПоказателиТекущихДел.КоличествоЗадачПриступить > 0;
	Дело.Представление  = НСтр("ru = 'Приступить'");
	Дело.Количество     = ПоказателиТекущихДел.КоличествоЗадачПриступить;
	Дело.Важное         = Ложь;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Форма          = "Справочник.ЗадачиПроцесса.Форма.МоиЗадачи";
	Дело.Владелец       = ИдентификаторГруппыЗадачи;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ТекущиеДела");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбораЗавершить);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗадачиПроцессаЗавершить";
	Дело.ЕстьДела       = ПоказателиТекущихДел.КоличествоЗадачЗавершить > 0;
	Дело.Представление  = НСтр("ru = 'Завершить'");
	Дело.Количество     = ПоказателиТекущихДел.КоличествоЗадачЗавершить;
	Дело.Важное         = Ложь;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Форма          = "Справочник.ЗадачиПроцесса.Форма.МоиЗадачи";
	Дело.Владелец       = ИдентификаторГруппыЗадачи;

	
КонецПроцедуры

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("Описание");
	НеРедактируемыеРеквизиты.Добавить("Предмет");
	НеРедактируемыеРеквизиты.Добавить("Родитель");
	НеРедактируемыеРеквизиты.Добавить("ИсполнительПорученияПоЗадаче");
	НеРедактируемыеРеквизиты.Добавить("ЗадачаШаблона");
	НеРедактируемыеРеквизиты.Добавить("Статус");
	НеРедактируемыеРеквизиты.Добавить("ДатаПорученияПоЗадаче");
	НеРедактируемыеРеквизиты.Добавить("СрокОтработкиПоручения");
	НеРедактируемыеРеквизиты.Добавить("ТекстПоследнегоПоручения");
	НеРедактируемыеРеквизиты.Добавить("ПредшествующиеЗадачи.*");
	НеРедактируемыеРеквизиты.Добавить("ПротоколВзаимодействия.*");
	НеРедактируемыеРеквизиты.Добавить("НаборыЗначенийДоступа.*");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Текст с описанием задачи для закладки в хранилище
//
// Параметры:
//  ЗадачаПроцесса - СправочникСсылка.ЗадачиПроцесса - описываемая задача
// 
// Возвращаемое значение:
//   - Строка - Текст с описанием
//
Функция ТекстДляХранилищаКонфигурации(ЗадачаПроцесса) Экспорт
	
	Текст = "";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задачи.Код КАК Код,
		|	Задачи.Наименование КАК Наименование,
		|	Задачи.Исполнитель КАК Исполнитель,
		|	Задачи.Публикуется КАК Публикуется,
		|	Задачи.Описание КАК Описание,
		|	Задачи.Предмет КАК Предмет,
		|	ТИПЗНАЧЕНИЯ(Задачи.Предмет) КАК ПредметТип,
		|	ВЫБОР
		|		КОГДА Задачи.Предмет.Владелец ССЫЛКА Справочник.Проекты ТОГДА
		|			ЕСТЬNULL(Задачи.Предмет.Владелец.ИспользоватьСлешиВТекстеЗакладкиВХранилище, ЛОЖЬ)
		|		КОГДА Задачи.Предмет.Владелец ССЫЛКА Справочник.ВерсииПроекта ТОГДА
		|			ЕСТЬNULL(Задачи.Предмет.Владелец.Владелец.ИспользоватьСлешиВТекстеЗакладкиВХранилище, ЛОЖЬ)
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ИспользоватьСлеши
		|ИЗ
		|	Справочник.ЗадачиПроцесса КАК Задачи
		|	
		|ГДЕ
		|	Задачи.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ЗадачаПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Текст
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Префикс              = ?(Выборка.ИспользоватьСлеши, "//", "");
	ПрефиксПриПубликации = ?(Выборка.Публикуется, "", Префикс);
	Текст = НСтр("ru='Реализована задача'") + " " + Выборка.Код + Символы.ПС + Символы.ПС;;
	
	Текст = Текст + ПрефиксПриПубликации + НСтр("ru='Наименование:'") + " " + Выборка.Наименование
		+ Символы.ПС + Префикс + НСтр("ru='Исполнитель:'") + " " + Выборка.Исполнитель
		+ Символы.ПС + Префикс + Выборка.ПредметТип + ": " + Выборка.Предмет;
	
	Если Выборка.Публикуется Тогда
		
		Описание = Выборка.Описание.Получить();
		ТекстОписания = "";
				
		Если ТипЗнч(Описание) = Тип("ФорматированныйДокумент") Тогда
			ТекстОписания = Описание.ПолучитьТекст();
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТекстОписания) Тогда
			Текст = Текст + Символы.ПС + ПрефиксПриПубликации +  НСтр("ru='Описание:'") + " " + Символы.ПС + ТекстОписания;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ТипЗначения(Предмет) = Тип(Справочник.СборкиВерсии)
	|		ТОГДА ЗначениеРазрешено(ВЫРАЗИТЬ(Предмет КАК Справочник.СборкиВерсии).Владелец.Владелец)
	|		ИНАЧЕ ЗначениеРазрешено(Предмет.Владелец)
	|	КОНЕЦ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" 
		И Параметры.Свойство("ТекущаяСтрока")
		И ЗначениеЗаполнено(Параметры.ТекущаяСтрока) Тогда
		
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаПараметрическая";
		Параметры.Вставить("Предмет", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ТекущаяСтрока, "Предмет"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоказателиТекущихДел()

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоЗадачЗавершить, 0) КАК КоличествоЗадачЗавершить,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоЗадачПриступить, 0) КАК КоличествоЗадачПриступить,
	|	ЕСТЬNULL(ВложенныйЗапрос.КоличествоЗадачОтработатьПоручение, 0) КАК КоличествоЗадачОтработатьПоручение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(СостоянияЗадачПроцессов.Зона, ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.Красная)) В (ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.Красная), ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.Желтая))
	|						И ЗадачиПроцесса.Исполнитель = &ТекущийПользователь
	|						И ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению)
	|						И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоЗадачЗавершить,
	|		СУММА(ВЫБОР
	|				КОГДА ЕСТЬNULL(СостоянияЗадачПроцессов.Зона, ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.Красная)) В (ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.Красная), ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.Желтая))
	|						И ЗадачиПроцесса.Исполнитель = &ТекущийПользователь
	|						И ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Запланирована)
	|						И СостоянияЗадачПроцессов.МаксимальныйВозможныйСтатус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПринятаКВыполнению))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоЗадачПриступить,
	|		СУММА(ВЫБОР
	|				КОГДА ЗадачиПроцесса.ИсполнительПорученияПоЗадаче = &ТекущийПользователь
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК КоличествоЗадачОтработатьПоручение
	|	ИЗ
	|		Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|			ПО (СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка)
	|	ГДЕ
	|		НЕ ЗадачиПроцесса.ПометкаУдаления
	|		И (ЗадачиПроцесса.ИсполнительПорученияПоЗадаче = &ТекущийПользователь
	|				ИЛИ ЗадачиПроцесса.Исполнитель = &ТекущийПользователь)) КАК ВложенныйЗапрос";

	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоЗадачПриступить",          0);
	СтруктураРезультата.Вставить("КоличествоЗадачЗавершить",           0);
	СтруктураРезультата.Вставить("КоличествоЗадачОтработатьПоручение", 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРезультата, Выборка);
	КонецЕслИ;
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#КонецЕсли