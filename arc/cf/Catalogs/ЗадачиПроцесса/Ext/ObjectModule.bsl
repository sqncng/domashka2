
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ВидЗадачи")
		И ДанныеЗаполнения.Свойство("ЗадачаПроцесса")
		И ДанныеЗаполнения.Свойство("Предмет") Тогда
		
		ЗаполнитьНовуюЗадачуОтносительноДругойЗадачи(ДанныеЗаполнения.ЗадачаПроцесса,
		                                             ДанныеЗаполнения.ВидЗадачи, 
		                                             ДанныеЗаполнения.Предмет);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Родитель");
	
	ИспользоватьУчетВремени = ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени");
	
	Если ИспользоватьУчетВремени И НЕ ЗначениеЗаполнено(ВидДеятельности) Тогда
		ВидДеятельностиПоУмолчанию = ВидДеятельностиПоУмолчанию();
	Иначе
		ВидДеятельностиПоУмолчанию = Неопределено;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ВидДеятельностиПоУмолчанию", ВидДеятельностиПоУмолчанию);
	
	Если НЕ ИспользоватьУчетВремени ИЛИ ПометкаУдаления 
		ИЛИ Статус = Перечисления.СтатусыЗадачПроцессов.Отменена
		ИЛИ ЗначениеЗаполнено(ВидДеятельностиПоУмолчанию) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидДеятельности");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени") И НЕ ЗначениеЗаполнено(ВидДеятельности) Тогда
		ЗаполнитьВидДеятельности();
	КонецЕсли;
	
	ПроверитьКорректностьСтатуса(Отказ);
	ПроверитьВозможностьИзмененияРеквизитов(Отказ);
	
	ИзменитьФактическиеДатыЕслиНеобходимо();
	
	КоличествоЗаписейВПротоколе = ПротоколВзаимодействия.Количество();
	Если КоличествоЗаписейВПротоколе > 0 Тогда
		ТекстПоследнегоПоручения = ПротоколВзаимодействия[КоличествоЗаписейВПротоколе - 1].ТекстПоручения;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НеВыполнятьРасчет")
		И ДополнительныеСвойства.НеВыполнятьРасчет Тогда
		Возврат;
	Иначе
		ДополнительныеСвойства.Вставить("ДанныеДляРасчета", ДанныеДляРасчета());
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ДатаПорученияПоЗадаче", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДатаПорученияПоЗадаче"));
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ДанныеДляРасчета") 
		И ДополнительныеСвойства.ДанныеДляРасчета.Свойство("ПометкаУдаления") Тогда
		
		Если ПометкаУдаления
			И Не ДополнительныеСвойства.ДанныеДляРасчета.ПометкаУдаления
			И ЗначениеЗаполнено(ЗадачаШаблона)
			И Не ЗадачиПроцессов.ПравоИзмененияЗадачБезКонтроля(Ссылка, Предмет) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Пометка на удаление задачи ""%1"" не выполнена. У вас нет прав изменять задачи созданные по шаблону.'"), 
			                                                Наименование), 
			 Ссылка,,,Отказ); 
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗадачиПроцессов.ЗаписатьИерархиюЗадачиПроцесса(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("ДатаПорученияПоЗадаче")
		И ДополнительныеСвойства.ДатаПорученияПоЗадаче <> ДатаПорученияПоЗадаче Тогда
		ЗадачиПроцессовПереопределяемый.УстановитьСрокОтработкиПорученияПоЗадачеПриЗаписи(ЭтотОбъект);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЗапланированоПоПользователям") Тогда
		РегистрыСведений.ПротоколСогласованияРесурсов.ОтразитьИзмененияПриЗаписиЗадачи(Ссылка, ДополнительныеСвойства.ЗапланированоПоПользователям, Предмет);
		РегистрыСведений.ЗадачиЗапланированоПоСотрудникам.ВыполнитьЗаписьВРегистрПоТаблице(Ссылка, ДополнительныеСвойства.ЗапланированоПоПользователям);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НеВыполнятьРасчет")
		И ДополнительныеСвойства.НеВыполнятьРасчет Тогда
		Возврат;
	Иначе
		
		ПроверитьВозможностьУстановкиПометкиУдаления(Отказ, ДополнительныеСвойства.ДанныеДляРасчета);
		
		Если Не Отказ Тогда
			УстановитьПривилегированныйРежим(Истина);
			РассчитатьСогласованиеРесурсов(ДополнительныеСвойства.ДанныеДляРасчета);
			РассчитатьМаксимальноВозможныйСтатусЗадачи(ДополнительныеСвойства.ДанныеДляРасчета);
			ОпределитьНеобходимостьСменыИсполнителяВРегистреПланыПоИсполнителям(ДополнительныеСвойства.ДанныеДляРасчета);
			РассчитатьЗонуЗадачи(ДополнительныеСвойства.ДанныеДляРасчета);
			РассчитатьУпорядочивание(ДополнительныеСвойства.ДанныеДляРасчета);
			ОпределитьПриоритетПриНеобходимости(ДополнительныеСвойства.ДанныеДляРасчета);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗадачаШаблона = Справочники.ЗадачиШаблонаПроцесса.ПустаяСсылка();
	ИсполнительПорученияПоЗадаче = Справочники.Пользователи.ПустаяСсылка();
	Статус                       = Перечисления.СтатусыЗадачПроцессов.Запланирована;
	
	ПлановаяДатаНачала           = '00010101';
	КрайняяДатаОкончания         = '00010101';
	ФактическаяДатаНачала        = '00010101';
	ФактическаяДатаОкончания     = '00010101';
	ДатаПорученияПоЗадаче        = '00010101';
	
	ПротоколВзаимодействия.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗаполнения

Процедура ЗаполнитьНовуюЗадачуОтносительноДругойЗадачи(ЗадачаПроцесса, ВидЗадачи, Предмет)
	
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Исполнитель = Пользователи.ТекущийПользователь();
		Предмет = Предмет;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                              КАК Ссылка,
	|	ЗадачиПроцесса.Исполнитель                                                                         КАК Исполнитель,
	|	ЗадачиПроцесса.Статус                                                                              КАК Статус,
	|	ЗадачиПроцесса.Родитель                                                                            КАК Родитель,
	|	ЗадачиПроцесса.КрайняяДатаОкончания                                                                КАК КрайняяДатаОкончания,
	|	ЗадачиПроцесса.Предмет                                                                             КАК Предмет,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))       КАК РодительИсполнитель,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Контролирующий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))    КАК РодительКонтролирующий,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка)) КАК РодительСтатус,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.КрайняяДатаОкончания, ДАТАВРЕМЯ(1,1,1,1,1,1))                      КАК РодительКрайняяДатаОкончания
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО ЗадачиПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗадачаПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если ВидЗадачи = "Паралельная" Тогда
		
		Исполнитель          = Выборка.Исполнитель;
		КрайняяДатаОкончания = Выборка.КрайняяДатаОкончания;
		Родитель             = Выборка.Родитель;
		
	ИначеЕсли ВидЗадачи = "Подчиненная" Тогда
		
		Исполнитель          = Выборка.Исполнитель;
		Родитель             = ЗадачаПроцесса;
		КрайняяДатаОкончания = ?(ЗначениеЗаполнено(Выборка.КрайняяДатаОкончания),
		                         Выборка.КрайняяДатаОкончания,
		                         НачалоДня(ТекущаяДатаСеанса() + 86400));
								 
		Если Не ЗначениеЗаполнено(ВидДеятельности) Тогда
			ВидДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "ВидДеятельности");
		КОнецЕсли;
		
	ИначеЕсли ВидЗадачи = "Последующая" Тогда
		
		Исполнитель          = Выборка.Исполнитель;
		КрайняяДатаОкончания = ?(ЗначениеЗаполнено(Выборка.КрайняяДатаОкончания),
		                         Выборка.КрайняяДатаОкончания + 86400,
		                         НачалоДня(ТекущаяДатаСеанса() + 86400));
		Родитель             = Выборка.Родитель;

		НоваяСтрока = ПредшествующиеЗадачи.Добавить();
		НоваяСтрока.ПредшествующаяЗадача = ЗадачаПроцесса;
		
	КонецЕсли;
	
	Предмет              = Выборка.Предмет;
	ПлановаяДлительность = 1;
	ПлановаяДатаНачала   = НачалоДня(КрайняяДатаОкончания - 86400);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Процедура ПроверитьКорректностьСтатуса(Отказ)
	
	СтатусыРодительскойЗадачи  = Новый СписокЗначений;
	СтатусыПредшествующихЗадач = Новый СписокЗначений;
	СтатусыДочернихЗадач       = Новый СписокЗначений;
	СтатусыПоследующихЗадач    = Новый СписокЗначений;
	
	Если Статус = Перечисления.СтатусыЗадачПроцессов.Запланирована Тогда
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			СтатусыРодительскойЗадачи.Добавить(Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению);
			СтатусыРодительскойЗадачи.Добавить(Перечисления.СтатусыЗадачПроцессов.Запланирована);
		КонецЕсли;
		
		Если Не Ссылка.Пустая() Тогда
		
			СтатусыДочернихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
			СтатусыДочернихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Запланирована);
			
			СтатусыПоследующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
			СтатусыПоследующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Запланирована);
			
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
		
		СтатусыДочернихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
		
	ИначеЕсли Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			СтатусыРодительскойЗадачи.Добавить(Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению);
		КонецЕсли;
		
		Если Не Ссылка.Пустая() Тогда
		
			СтатусыПредшествующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Выполнена);
			СтатусыПредшествующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
			
			СтатусыПоследующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
			СтатусыПоследующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Запланирована);
		
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			СтатусыРодительскойЗадачи.Добавить(Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению);
			СтатусыРодительскойЗадачи.Добавить(Перечисления.СтатусыЗадачПроцессов.Выполнена);
		КонецЕсли;
		
		Если Не Ссылка.Пустая() Тогда
		
			СтатусыПредшествующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Выполнена);
			СтатусыПредшествующихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
			
			СтатусыДочернихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Выполнена);
			СтатусыДочернихЗадач.Добавить(Перечисления.СтатусыЗадачПроцессов.Отменена);
		
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапросаРодительская = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка КАК Задача,
	|	""Родительская""      КАК ТипЗадачи,
	|	ЗадачиПроцесса.Статус КАК Статус
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &Родитель
	|	И НЕ ЗадачиПроцесса.Статус В (&СтатусыРодительскойЗадачи)";
	
	ТекстЗапросаПредшествующие = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка КАК Задача,
	|	""Предшествующая""    КАК ТипЗадачи,
	|	ЗадачиПроцесса.Статус КАК Статус
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка В (&МассивПредшествующихЗадач) 
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И НЕ ЗадачиПроцесса.Статус В (&СтатусыПредшествующихЗадач)"; 
	
	ТекстЗапросаДочерние    = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка КАК Задача,
	|	""Дочерняя""          КАК ТипЗадачи,
	|	ЗадачиПроцесса.Статус КАК Статус
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|ГДЕ
	|	ЗадачиПроцесса.Родитель = &Ссылка
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И НЕ ЗадачиПроцесса.Статус В (&СтатусыДочернихЗадач)";
	
	ТекстЗапросаПоследующие    = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка КАК Задача,
	|	""Последующая""       КАК ТипЗадачи,
	|	ЗадачиПроцесса.Статус КАК Статус
	|ИЗ
	|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = &Ссылка
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|	И НЕ ЗадачиПроцесса.Статус В(&СтатусыПоследующихЗадач)";
	
	ТекстЗапроса = "";
	
	Если СтатусыРодительскойЗадачи.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаРодительская;
	КонецЕсли;
	
	Если СтатусыПредшествующихЗадач.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапросаПредшествующие = СтрЗаменить(ТекстЗапросаПредшествующие, "РАЗРЕШЕННЫЕ", "");
			ТекстЗапроса = ТекстЗапроса + ЗадачиПроцессов.ТекстЗапросаОбъединитьВсе(); 
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПредшествующие;
		
	КонецЕсли;
	
	Если СтатусыДочернихЗадач.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапросаДочерние = СтрЗаменить(ТекстЗапросаДочерние, "РАЗРЕШЕННЫЕ", "");
			ТекстЗапроса = ТекстЗапроса + ЗадачиПроцессов.ТекстЗапросаОбъединитьВсе();
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДочерние;
		
	КонецЕсли;
	
	Если СтатусыПоследующихЗадач.Количество() > 0 Тогда
		
		Если Не ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапросаПоследующие = СтрЗаменить(ТекстЗапросаПоследующие, "РАЗРЕШЕННЫЕ", "");
			ТекстЗапроса = ТекстЗапроса + ЗадачиПроцессов.ТекстЗапросаОбъединитьВсе();
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПоследующие;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("СтатусыПредшествующихЗадач", СтатусыПредшествующихЗадач);
	Запрос.УстановитьПараметр("СтатусыПоследующихЗадач"   , СтатусыПоследующихЗадач);
	Запрос.УстановитьПараметр("СтатусыРодительскойЗадачи" , СтатусыРодительскойЗадачи);
	Запрос.УстановитьПараметр("СтатусыДочернихЗадач"      , СтатусыДочернихЗадач);
	Запрос.УстановитьПараметр("МассивПредшествующихЗадач",  ПредшествующиеЗадачи.Выгрузить().ВыгрузитьКолонку("ПредшествующаяЗадача"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗадачи = "Родительская" Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно записать задачу ""%1"" в статусе ""%2"", так как родительская задача ""%3"" находится в статусе ""%4"".'"),
			                           Ссылка, Статус, Выборка.Задача, Выборка.Статус);
		ИначеЕсли Выборка.ТипЗадачи = "Предшествующая" Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно записать задачу ""%1"" в статусе ""%2"", так как предшествующая задача ""%3"" находится в статусе ""%4"".'"),
			                           Ссылка, Статус, Выборка.Задача, Выборка.Статус);
		ИначеЕсли Выборка.ТипЗадачи = "Дочерняя" Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно записать задачу ""%1"" в статусе ""%2"", так как дочерняя задача ""%3"" находится в статусе ""%4"".'"),
			                           Ссылка, Статус, Выборка.Задача, Выборка.Статус);
		ИначеЕсли Выборка.ТипЗадачи = "Последующая" Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Невозможно записать задачу ""%1"" в статусе ""%2"", так как последующая задача ""%3"" находится в статусе ""%4"".'"),
			                           Ссылка, Статус, Выборка.Задача, Выборка.Статус);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,"СостояниеПредставление",,Отказ); 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьУстановкиПометкиУдаления(Отказ, ДанныеДляРасчета)
	
	Если НЕ ДанныеДляРасчета.ПометкаУдаления И ПометкаУдаления Тогда
		
		
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьУказанияРодителя(ДанныеДляПроверки, Отказ)

	Если Не ЗначениеЗаполнено(Родитель)
		И (ДанныеДляПроверки = Неопределено
		Или ЗначениеЗаполнено(ДанныеДляПроверки.Родитель)) Тогда
		
		ДанныеШаблона = ЗадачиПроцессов.ДанныеШаблонаПоПредмету(Предмет);
		
		Если ДанныеШаблона.ЗапретитьСозданиеНеПодчиненныхЗадачамШаблона
			И Не ЗадачиПроцессов.ПравоИзмененияЗадачБезКонтроля(, Предмет) Тогда
			
			ТекстСообщения = НСтр("ru = 'Настройками шаблона процесса запрещено создавать задачи, не подчиненные другим задачам.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			                                                  ЭтотОбъект,
			                                                  ,
			                                                  "Объект.Родитель",
			                                                  Отказ);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияРеквизитов(Отказ)
	
	Если ЭтоНовый() Тогда
		ПроверитьКорректностьУказанияРодителя(Неопределено, Отказ);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Ссылка                                                                           КАК Задача,
	|	ЗадачиПроцесса.Родитель                                                                         КАК Родитель,
	|	ЗадачиПроцесса.Наименование                                                                     КАК НаименованиеЗадачи,
	|	ЗадачиПроцесса.Статус                                                                           КАК Статус,
	|	ЗадачиПроцесса.ФактическаяДатаОкончания                                                         КАК ФактическаяДатаОкончания,
	|	ЗадачиПроцесса.Исполнитель                                                                      КАК Исполнитель,
	|	ЗадачиПроцесса.Контролирующий                                                                   КАК Контролирующий,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))    КАК ИсполнительРодительскойЗадачи,
	|	ЕСТЬNULL(ЗадачиПроцессаРодитель.Контролирующий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК КонтролирующийРодительскойЗадачи,
	|	ЕСТЬNULL(ЗадачиШаблонаПроцесса.Исполнитель, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))     КАК ИсполнительЗадачиШаблона,
	|	ЗадачиПроцесса.ПротоколВзаимодействия.(
	|		НомерСтроки КАК НомерСтроки,
	|		Автор КАК Автор,
	|		ТекстПоручения КАК ТекстПоручения,
	|		ИсполнительПоручения КАК ИсполнительПоручения,
	|		Статус КАК Статус
	|	) КАК ПротоколВзаимодействия
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцессаРодитель
	|		ПО ЗадачиПроцесса.Родитель = ЗадачиПроцессаРодитель.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗадачиШаблонаПроцесса КАК ЗадачиШаблонаПроцесса
	|		ПО ЗадачиПроцесса.ЗадачаШаблона = ЗадачиШаблонаПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ПроверитьКорректностьУказанияРодителя(Выборка, Отказ);
	ПроверитьВозможностьИзмененияФактическойДатыРедактирования(Выборка, Отказ);
	ПроверитьВозможностьИзмененияИсполнителя(Выборка, Отказ);
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияИсполнителя(Выборка, Отказ)
	
	ПараметрыПроверкиИзмененияИсполнителя = ЗадачиПроцессовКлиентСервер.ПараметрыПроверкиИзмененияИсполнителя();
	
	ПараметрыПроверкиИзмененияИсполнителя.ПравоИзмененияЗадачБезКонтроля   = ЗадачиПроцессов.ПравоИзмененияЗадачБезКонтроля();
	ПараметрыПроверкиИзмененияИсполнителя.Задача                           = Выборка.Задача;
	ПараметрыПроверкиИзмененияИсполнителя.Статус                           = Выборка.Статус;
	ПараметрыПроверкиИзмененияИсполнителя.ИсполнительЗадачиШаблона         = Выборка.ИсполнительЗадачиШаблона;
	ПараметрыПроверкиИзмененияИсполнителя.ТекущийПользователь              = Пользователи.ТекущийПользователь();
	ПараметрыПроверкиИзмененияИсполнителя.Исполнитель                      = Выборка.Исполнитель;
	ПараметрыПроверкиИзмененияИсполнителя.ИсполнительРодительскойЗадачи    = Выборка.ИсполнительРодительскойЗадачи;
	ПараметрыПроверкиИзмененияИсполнителя.Контролирующий                   = Выборка.Контролирующий;
	ПараметрыПроверкиИзмененияИсполнителя.КонтролирующийРодительскойЗадачи = Выборка.КонтролирующийРодительскойЗадачи;
	ПараметрыПроверкиИзмененияИсполнителя.ПротоколВзаимодействия           = Выборка.ПротоколВзаимодействия.Выгрузить();
	ПараметрыПроверкиИзмененияИсполнителя.ОтветственныйЗаПредмет           = ЗадачиПроцессовПереопределяемый.ОтветственныйПредметаЗадачи(Предмет);
	
	Если Контролирующий <> Выборка.Контролирующий Тогда
		ПравоИзмененияКонтролирующего = ЗадачиПроцессовКлиентСервер.ПравоИзмененияКонтролирующего(ПараметрыПроверкиИзмененияИсполнителя);
		Если Не ПравоИзмененияКонтролирующего Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Вы не можете изменить реквизит ""Контролирующий"" в задаче ""%1"".'"), Выборка.НаименованиеЗадачи);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			                                                  ЭтотОбъект,
			                                                  ,
			                                                  "Объект.Контролирующий",
			                                                  Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Исполнитель <> Выборка.Исполнитель Тогда
		ПравоИзмененияИсполнителя = ЗадачиПроцессовКлиентСервер.ПравоИзмененияИсполнителя(ПараметрыПроверкиИзмененияИсполнителя);
		Если Не ПравоИзмененияИсполнителя Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru='Вы не можете изменить реквизит ""Исполнитель"" в задаче ""%1"".'"), Выборка.НаименованиеЗадачи);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			                                                  ЭтотОбъект,
			                                                  ,
			                                                  "Объект.Исполнитель",
			                                                  Отказ);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьИзмененияФактическойДатыРедактирования(СтарыеРеквизиты, Отказ)
	
	Если СтарыеРеквизиты.Статус = Статус
		И Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена
		И СтарыеРеквизиты.ФактическаяДатаОкончания <> ФактическаяДатаОкончания
		И Не ЗадачиПроцессов.ПравоИзмененияЗадачБезКонтроля() Тогда
		
		ТекстСообщения = НСтр("ru='Текущему пользователю запрещено изменять в задаче реквизит ""Фактическая дата завершения"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			                                                  ЭтотОбъект,
			                                                  ,
			                                                  "Объект",
			                                                  Отказ);

		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетыСостояний

Функция ДанныеДляРасчета()
	
	Данные = Новый Структура;
	Данные.Вставить("СтарыйРодитель",               Справочники.ЗадачиПроцесса.ПустаяСсылка());
	Данные.Вставить("СтарыйПредмет",                Неопределено);
	Данные.Вставить("СтарыйИсполнитель",            Справочники.Пользователи.ПустаяСсылка());
	Данные.Вставить("Статус",                       Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка());
	Данные.Вставить("Зона",                         Перечисления.ЗоныЗадач.ПустаяСсылка());
	Данные.Вставить("СогласованиеРесурсовЗадач",    Неопределено);
	Данные.Вставить("ТаблицаПредшествующихЗадач",   Неопределено);
	Данные.Вставить("ТаблицаПоследующихЗадач",      Неопределено);
	Данные.Вставить("ЭтоНовый",                     Ложь);
	Данные.Вставить("ПометкаУдаления",              Ложь);
	Данные.Вставить("КрайняяДатаОкончания",         Дата(1,1,1));
	
	Если Ссылка.Пустая() Тогда
		Данные.ЭтоНовый = Истина;
		Возврат Данные;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцесса.Родитель                                                               КАК СтарыйРодитель,
	|	ЗадачиПроцесса.Предмет                                                                КАК СтарыйПредмет,
	|	ЗадачиПроцесса.Исполнитель                                                            КАК СтарыйИсполнитель,
	|	ЗадачиПроцесса.Статус                                                                 КАК Статус,
	|	ЗадачиПроцесса.ПлановаяДлительность                                                   КАК ПлановаяДлительность,
	|	ЗадачиПроцесса.ПометкаУдаления                                                        КАК ПометкаУдаления,
	|	ЗадачиПроцесса.КрайняяДатаОкончания                                                   КАК КрайняяДатаОкончания,
	|	ЕСТЬNULL(СостоянияЗадачПроцессов.Зона, ЗНАЧЕНИЕ(Перечисление.ЗоныЗадач.ПустаяСсылка)) КАК Зона
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗадачПроцессов КАК СостоянияЗадачПроцессов
	|		ПО СостоянияЗадачПроцессов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|ГДЕ
	|	ЗадачиПроцесса.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ИтогиСогласованияЗадачРесурсов.ВидРесурса    КАК ВидРесурса,
	|	ИтогиСогласованияЗадачРесурсов.Запланировано КАК Запланировано
	|ИЗ
	|	РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|ГДЕ
	|	ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача
	|ИЗ
	|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = ЗадачиПроцесса.Ссылка
	|				И НЕ ЗадачиПроцесса.ПометкаУдаления
	|				И НЕ ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|ГДЕ
	|	ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗадачиПроцессаПредшествующиеЗадачи.Ссылка КАК ПоследующаяЗадача
	|ИЗ
	|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = ЗадачиПроцесса.Ссылка
	|				И НЕ ЗадачиПроцесса.ПометкаУдаления
	|				И НЕ ЗадачиПроцесса.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|ГДЕ
	|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = &Ссылка";
	 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = Результат[0].Выбрать();
	Если ВыборкаШапка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Данные, ВыборкаШапка);
	КонецЕсли;
	
	Данные.СогласованиеРесурсовЗадач  = Результат[1].Выгрузить();
	Данные.ТаблицаПредшествующихЗадач = Результат[2].Выгрузить();
	Данные.ТаблицаПоследующихЗадач    = Результат[3].Выгрузить();
	
	Возврат Данные;
	
КонецФункции

Процедура РассчитатьСогласованиеРесурсов(ДанныеДляРасчета)
	
	ДанныеДляРасчета          = ДополнительныеСвойства.ДанныеДляРасчета;
	СогласованиеРесурсовЗадач = ?(ДополнительныеСвойства.Свойство("СогласованиеРесурсовЗадач"), 
	                              ДополнительныеСвойства.СогласованиеРесурсовЗадач,
	                              Неопределено);
	
	МассивЗадачДляРасчета = Новый Массив;
	
	Если ДанныеДляРасчета.СтарыйРодитель <> Родитель Тогда
		
		МассивЗадачДляРасчета.Добавить(Ссылка);
		МассивЗадачДляРасчета.Добавить(ДанныеДляРасчета.СтарыйРодитель);
	
	ИначеЕсли ДанныеДляРасчета.ЭтоНовый Тогда
		
		МассивЗадачДляРасчета.Добавить(Ссылка);
		
	ИначеЕсли (ДанныеДляРасчета.Статус <> Статус
		И (ДанныеДляРасчета.Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена 
		   Или Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена)) Тогда
		
		МассивЗадачДляРасчета.Добавить(Ссылка);
		
	ИначеЕсли (ДанныеДляРасчета.Статус <> Статус
		И (ДанныеДляРасчета.Статус = Перечисления.СтатусыЗадачПроцессов.Отменена
		   Или Статус = Перечисления.СтатусыЗадачПроцессов.Отменена)) Тогда
		
		МассивЗадачДляРасчета.Добавить(Ссылка);
		
	ИначеЕсли ДанныеДляРасчета.ПометкаУдаления <> ПометкаУдаления Тогда
		
		МассивЗадачДляРасчета.Добавить(Ссылка);
		
	КонецЕсли;
		
	Если МассивЗадачДляРасчета.Количество() > 0 Тогда
		
		РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадачДляРасчета, Неопределено, Предмет);
		Возврат;
		
	КонецЕсли;
	
	Если СогласованиеРесурсовЗадач <> Неопределено Тогда
		
		МассивЗадачДляРасчета.Добавить(Ссылка);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаЗапланировано.ВидРесурса    КАК ВидРесурса,
		|	ТаблицаЗапланировано.Запланировано КАК Запланировано
		|ПОМЕСТИТЬ ТаблицаЗапланированоТекущая
		|ИЗ
		|	&ТаблицаЗапланировано КАК ТаблицаЗапланировано
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапланированоПредыдущая.ВидРесурса    КАК ВидРесурса,
		|	ТаблицаЗапланированоПредыдущая.Запланировано КАК Запланировано
		|ПОМЕСТИТЬ ТаблицаЗапланированоПредыдущая
		|ИЗ
		|	&ТаблицаЗапланированоПредыдущая КАК ТаблицаЗапланированоПредыдущая
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗапланированоТекущая.ВидРесурса КАК ВидРесурса
		|ИЗ
		|	ТаблицаЗапланированоТекущая КАК ТаблицаЗапланированоТекущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗапланированоПредыдущая КАК ТаблицаЗапланированоПредыдущая
		|		ПО ТаблицаЗапланированоТекущая.ВидРесурса = ТаблицаЗапланированоПредыдущая.ВидРесурса
		|ГДЕ
		|	ТаблицаЗапланированоТекущая.Запланировано - ЕСТЬNULL(ТаблицаЗапланированоПредыдущая.Запланировано, 0) <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаЗапланированоПредыдущая.ВидРесурса
		|ИЗ
		|	ТаблицаЗапланированоПредыдущая КАК ТаблицаЗапланированоПредыдущая
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗапланированоТекущая КАК ТаблицаЗапланированоТекущая
		|		ПО ТаблицаЗапланированоПредыдущая.ВидРесурса = ТаблицаЗапланированоТекущая.ВидРесурса
		|ГДЕ
		|	ТаблицаЗапланированоТекущая.ВидРесурса ЕСТЬ NULL
		|	И ТаблицаЗапланированоПредыдущая.Запланировано <> 0";
		
		Запрос.УстановитьПараметр("ТаблицаЗапланировано",           СогласованиеРесурсовЗадач);
		Запрос.УстановитьПараметр("ТаблицаЗапланированоПредыдущая", ДанныеДляРасчета.СогласованиеРесурсовЗадач);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьВсеИтогиПоМассивуЗадач(МассивЗадачДляРасчета, Выборка.ВидРесурса, Предмет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьМаксимальноВозможныйСтатусЗадачи(ДанныеДляРасчета)
	
	МассивРассчитываемыхЗадач = Новый Массив;
	Если ДанныеДляРасчета.ТаблицаПоследующихЗадач <> Неопределено Тогда
		МассивПоследующихЗадач = ДанныеДляРасчета.ТаблицаПоследующихЗадач.ВыгрузитьКолонку("ПоследующаяЗадача");
	Иначе
		МассивПоследующихЗадач = Новый Массив;
	КонецЕсли;
	
	Если ДанныеДляРасчета.ЭтоНовый Тогда
	
		МассивРассчитываемыхЗадач.Добавить(Ссылка);
		Если ЗначениеЗаполнено(Родитель) Тогда
			МассивРассчитываемыхЗадач.Добавить(Родитель);
		КонецЕсли;
		
	ИначеЕсли ПометкаУдаления И Не ДанныеДляРасчета.ПометкаУдаления Тогда
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			МассивРассчитываемыхЗадач.Добавить(Родитель);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитываемыхЗадач, МассивПоследующихЗадач, Истина);
		
	ИначеЕсли Не ПометкаУдаления И ДанныеДляРасчета.ПометкаУдаления Тогда
		
		МассивРассчитываемыхЗадач.Добавить(Ссылка);
		Если ЗначениеЗаполнено(Родитель) Тогда
			МассивРассчитываемыхЗадач.Добавить(Родитель);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитываемыхЗадач, МассивПоследующихЗадач, Истина);
		
	Иначе
		
		РодительДобавлен = Ложь;
		
		Если Статус <> ДанныеДляРасчета.Статус Тогда
			
			МассивРассчитываемыхЗадач.Добавить(Ссылка);
			
			Если ЗначениеЗаполнено(Родитель) Тогда
				МассивРассчитываемыхЗадач.Добавить(Родитель);
				РодительДобавлен = Истина;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитываемыхЗадач, МассивПоследующихЗадач, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитываемыхЗадач, ЗадачиПроцессов.МассивДочернихЗадач(Ссылка), Истина);
			
		КонецЕсли;
		
		Если ДанныеДляРасчета.СтарыйРодитель <> Родитель Тогда
			
			МассивРассчитываемыхЗадач.Добавить(Ссылка);
			
			Если Не РодительДобавлен И ЗначениеЗаполнено(Родитель) Тогда
				МассивРассчитываемыхЗадач.Добавить(Родитель);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеДляРасчета.СтарыйРодитель) Тогда
				МассивРассчитываемыхЗадач.Добавить(ДанныеДляРасчета.СтарыйРодитель);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ДанныеДляРасчета.ТаблицаПредшествующихЗадач, ПредшествующиеЗадачи.Выгрузить(),,,Ложь) Тогда
			
			МассивРассчитываемыхЗадач.Добавить(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьМаксимальныйСтатусМассиваЗадач(МассивРассчитываемыхЗадач);
	
КонецПроцедуры

Процедура РассчитатьЗонуЗадачи(ДанныеЗадачиДоЗаписи)
	
	ДанныеДляРасчета = Новый Структура;
	ДанныеДляРасчета.Вставить("ПометкаУдаления",       ПометкаУдаления);
	ДанныеДляРасчета.Вставить("КрайняяДатаОкончания",  КрайняяДатаОкончания);
	ДанныеДляРасчета.Вставить("ПлановаяДлительность",  ПлановаяДлительность);
	ДанныеДляРасчета.Вставить("ФактическаяДатаНачала", ФактическаяДатаНачала);
	ДанныеДляРасчета.Вставить("Статус",                Статус);
	
	НоваяЗона = ЗадачиПроцессов.РасчитаннаяЗонаЗадачи(ДанныеДляРасчета);
	Если НоваяЗона <> ДанныеЗадачиДоЗаписи.Зона Тогда
		РегистрыСведений.СостоянияЗадачПроцессов.ЗаписатьНовуюЗонуЗадачи(Ссылка, НоваяЗона);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьУпорядочивание(ДанныеДляРасчета)

	МассивРассчитываемыхЗадач    = Новый Массив;
	МассивЗадачКОпределениюЭтапа = Новый Массив;
	ТребуетсяРасчетПоследующих   = Ложь;
	ТребуетсяРасчетПодчиненных   = Ложь;
	
	Если ДанныеДляРасчета.ЭтоНовый Тогда
		
		МассивРассчитываемыхЗадач.Добавить(Родитель);
		
	Иначе
		
		Если ЗадачаАктивна(ДанныеДляРасчета.Статус, ДанныеДляРасчета.ПометкаУдаления)
			И Не ЗадачаАктивна(Статус, ПометкаУдаления) Тогда
			
			МассивРассчитываемыхЗадач.Добавить(Родитель);
			ТребуетсяРасчетПоследующих = Истина;
			
		ИначеЕсли Не ЗадачаАктивна(ДанныеДляРасчета.Статус, ДанныеДляРасчета.ПометкаУдаления)
			И ЗадачаАктивна(Статус, ПометкаУдаления) Тогда
			
			МассивРассчитываемыхЗадач.Добавить(Родитель);
			ТребуетсяРасчетПоследующих = Истина;
			
		ИначеЕсли ДанныеДляРасчета.Статус <> Статус
			Или ДанныеДляРасчета.КрайняяДатаОкончания <> КрайняяДатаОкончания Тогда
			
			МассивЗадачКОпределениюЭтапа.Добавить(Родитель);
			
		КонецЕсли;
		
		Если ДанныеДляРасчета.СтарыйРодитель <> Родитель Тогда
			МассивРассчитываемыхЗадач.Добавить(Родитель);
			МассивРассчитываемыхЗадач.Добавить(ДанныеДляРасчета.СтарыйРодитель);
			ТребуетсяРасчетПоследующих = Истина;
			ТребуетсяРасчетПодчиненных = Истина;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ДанныеДляРасчета.ТаблицаПредшествующихЗадач, ПредшествующиеЗадачи.Выгрузить(),,,Ложь) Тогда
			
			МассивРассчитываемыхЗадач.Добавить(Родитель);
			ТребуетсяРасчетПоследующих = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяРасчетПоследующих Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиПроцесса.Родитель КАК Задача
		|ИЗ
		|	Справочник.ЗадачиПроцесса.ПредшествующиеЗадачи КАК ЗадачиПроцессаПредшествующиеЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|		ПО (ЗадачиПроцессаПредшествующиеЗадачи.Ссылка = ЗадачиПроцесса.Ссылка
		|				И НЕ ЗадачиПроцесса.ПометкаУдаления
		|				И НЕ ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.ПустаяСсылка))
		|				И ЗадачиПроцесса.Предмет = &Предмет)
		|ГДЕ
		|	ЗадачиПроцессаПредшествующиеЗадачи.ПредшествующаяЗадача = &Задача";
		
		Запрос.УстановитьПараметр("Задача", Ссылка);
		Запрос.УстановитьПараметр("Предмет", Предмет);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитываемыхЗадач, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача"));
		
	КонецЕсли;
	
	Если ТребуетсяРасчетПодчиненных Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИерархияЗадачПроцесса.ЗадачаПроцесса КАК Задача
		|ИЗ
		|	РегистрСведений.ИерархияЗадачПроцесса КАК ИерархияЗадачПроцесса
		|ГДЕ
		|	ИерархияЗадачПроцесса.Родитель = &Задача
		|	И ИерархияЗадачПроцесса.ЗадачаПроцесса <> &Задача";
		
		Запрос.УстановитьПараметр("Задача", Ссылка);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитываемыхЗадач, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача"));
		
	КонецЕсли;
	
	РегистрыСведений.СостоянияЗадачПроцессов.УпорядочитьЗадачиПоМассивуРодителей(МассивРассчитываемыхЗадач, Предмет);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРассчитываемыхЗадач, МассивЗадачКОпределениюЭтапа);
	РегистрыСведений.ЭтапыПроцесса.РассчитатьЭтапыПроцессаПоМассивуРодителей(МассивРассчитываемыхЗадач, Предмет);

КонецПроцедуры

Процедура ОпределитьПриоритетПриНеобходимости(ДанныеДляРасчета) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляОбработки = РегистрыСведений.ПриоритетыРабот.НовыйДанныеДляОбработкиИзмененияСтатусаЗадачиПроцесса();
	ДанныеДляОбработки.НовыйСтатус           = Статус;
	ДанныеДляОбработки.СтарыйСтатус          = ДанныеДляРасчета.Статус ;
	ДанныеДляОбработки.НовыйПометкаУдаления  = ПометкаУдаления ;
	ДанныеДляОбработки.НовыйПредмет          = Предмет;
	ДанныеДляОбработки.СтарыйПредмет         = ДанныеДляРасчета.СтарыйПредмет;
	ДанныеДляОбработки.НовыйИсполнитель      = Исполнитель;
	ДанныеДляОбработки.СтарыйИсполнитель     = ДанныеДляРасчета.СтарыйИсполнитель;
	ДанныеДляОбработки.НовыйРодитель         = Родитель;
	ДанныеДляОбработки.СтарыйРодитель        = ДанныеДляРасчета.СтарыйРодитель;
	ДанныеДляОбработки.СтарыйПометкаУдаления = ДанныеДляРасчета.ПометкаУдаления;
	ДанныеДляОбработки.Задача                = Ссылка;
	
	РегистрыСведений.ПриоритетыРабот.ПриИзмененииЗадачиПроцесса(ДанныеДляОбработки);
	
КонецПроцедуры

Процедура ОпределитьНеобходимостьСменыИсполнителяВРегистреПланыПоИсполнителям(ДанныеДляРасчета)
	
	Если ДанныеДляРасчета.СтарыйИсполнитель = Исполнитель Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиЗапланированоПоСотрудникам.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ЗадачиЗапланированоПоСотрудникам КАК ЗадачиЗапланированоПоСотрудникам
	|ГДЕ
	|	ЗадачиЗапланированоПоСотрудникам.Задача = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Ссылка);
	
	Исполнители = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Исполнители.Количество()> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Исполнители.Количество() = 1 
		И Исполнители[0] = ДанныеДляРасчета.СтарыйИсполнитель Тогда
		
		НаборЗаписей = РегистрыСведений.ПротоколСогласованияРесурсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задача.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		
		ИндексЗаписи = 0;
		ДатыИндексы = Новый Соответствие;
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			ЗаписьНабора.Пользователь = Исполнитель;
			
			МассивИндексов = ДатыИндексы.Получить(ЗаписьНабора.Период);
			Если МассивИндексов = Неопределено Тогда
				МассивИндексов = Новый Массив;
				МассивИндексов.Добавить(ИндексЗаписи);
				ДатыИндексы.Вставить(ЗаписьНабора.Период, МассивИндексов);
			Иначе
				МассивИндексов.Добавить(ИндексЗаписи);
			КонецЕсли;
			
			ИндексЗаписи = ИндексЗаписи + 1;
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из ДатыИндексы Цикл
			
			Если КлючИЗначение.Значение.Количество() > 0 Тогда
				
				Для Каждого ЭлементМассива Из КлючИЗначение.Значение Цикл
					
					НовыйПериод = КлючИЗначение.Ключ + 1;
					Пока ДатыИндексы.Получить(НовыйПериод) <> Неопределено Цикл
						НовыйПериод = НовыйПериод + 1;
					КонецЦикла;
					
					НаборЗаписей[ЭлементМассива].Период = НовыйПериод;
					МассивИндексов = Новый Массив;
					МассивИндексов.Добавить(ЭлементМассива);
					ДатыИндексы.Вставить(НовыйПериод, МассивИндексов);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ЗадачиЗапланированоПоСотрудникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задача.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			ЗаписьНабора.Пользователь = Исполнитель;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ЗадачаАктивна(Статус, ПометкаУдаления)
	
	Если ПометкаУдаления
		Или Статус = Перечисления.СтатусыЗадачПроцессов.Отменена
		Или Статус = Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка() Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Процедура ИзменитьФактическиеДатыЕслиНеобходимо()
	
	Если Статус <> Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		
		ФактическаяДатаОкончания = Дата(1,1,1);
		
	КонецЕсли;
	
	Если Статус <> Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению
		И Статус <> Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
		
		ФактическаяДатаНачала = Дата(1, 1, 1);
		
	КонецЕсли;
	
	ПредыдущийСтатус = Неопределено;
	Если Не Ссылка.Пустая() Тогда
		ПредыдущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус");
	КонецЕсли;
	
	Если ПредыдущийСтатус = Статус Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	Если (ПредыдущийСтатус = Перечисления.СтатусыЗадачПроцессов.Запланирована
		Или ПредыдущийСтатус = Перечисления.СтатусыЗадачПроцессов.ПустаяСсылка()
		Или ПредыдущийСтатус = Неопределено) Тогда
		
		Если Статус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
			Если Не ЗначениеЗаполнено(ФактическаяДатаНачала) Тогда
				ФактическаяДатаНачала = ТекущаяДата;
			КонецЕсли;
		ИначеЕсли Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			Если Не ЗначениеЗаполнено(ФактическаяДатаНачала) Тогда
				ФактическаяДатаНачала    = ТекущаяДата - 1;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ФактическаяДатаОкончания) Тогда
				ФактическаяДатаОкончания = ТекущаяДата;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПредыдущийСтатус = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
		
		Если Статус = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
			Если Не ЗначениеЗаполнено(ФактическаяДатаОкончания) Тогда
				ФактическаяДатаОкончания = ТекущаяДата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. описание в комментарии к одноименной процедуре в модуле УправлениеДоступом.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт

	ЗадачиПроцессовПереопределяемый.ЗаполнитьНаборыЗначенийДоступаЗадачиПроцесса(Предмет, Таблица);

КонецПроцедуры

Функция ВидДеятельностиПоУмолчанию()
	
	Результат = Справочники.ВидыДеятельности.ПустаяСсылка();
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ВидДеятельности");
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Ошибки") Тогда
		Результат = Константы.ВидДеятельностиДляРаботыСОшибками.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		 Результат = ОсновнойВидДеятельностиПоПроекту();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Константы.ОсновнойВидДеятельности.Получить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОсновнойВидДеятельностиПоПроекту()
	
	Если НЕ ЗначениеЗаполнено(Предмет) Тогда
		Возврат Справочники.ВидыДеятельности.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.СборкиВерсии")
		ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ФункцииМеханизмов") Тогда
		
		ПутьКРеквизиту = "Предметы.Владелец.Владелец.ВидДеятельности";
		
	ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы")
		ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.Ошибки")
		ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ТехническиеПроекты")
		ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ПрофилиПользователей")
		ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.Процессы")
		ИЛИ ТипЗнч(Предмет) = Тип("СправочникСсылка.ФункцииСистемы") Тогда
		
		ПутьКРеквизиту = "Предметы.Владелец.ВидДеятельности";
		
	Иначе
		Возврат Справочники.ВидыДеятельности.ПустаяСсылка();
	КОнецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ПутьКРеквизиту КАК ВидДеятельности
	|ИЗ
	|	&ИмяТаблицы КАК Предметы
	|ГДЕ
	|	Предметы.Ссылка = &Ссылка"
	;
	
	ИмяТаблицы = Предмет.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПутьКРеквизиту", ПутьКРеквизиту);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Ссылка", Предмет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВидДеятельности;
	Иначе
		Возврат Справочники.ВидыДеятельности.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьВидДеятельности()
	
	ВидДеятельностиПоУмолчанию = Неопределено;
	
	Если НЕ ДополнительныеСвойства.Свойство("ВидДеятельностиПоУмолчанию", ВидДеятельностиПоУмолчанию) Тогда
		ВидДеятельностиПоУмолчанию = ВидДеятельностиПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДеятельностиПоУмолчанию) Тогда
		ВидДеятельности = ВидДеятельностиПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли