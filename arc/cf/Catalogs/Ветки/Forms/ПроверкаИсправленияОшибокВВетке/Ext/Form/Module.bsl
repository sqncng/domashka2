#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Параметры.Свойство("Ветка", Ветка);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОшибкиУКоторыхНетКоммитов", Параметры.ОшибкиУКоторыхНетКоммитов);
	СтруктураПараметров.Вставить("ОшибкиКоторыеНеУказаныВВетке", Параметры.ОшибкиКоторыеНеУказаныВВетке);
	СтруктураПараметров.Вставить("ОшибкиКоторыеНеУказаныВВеткеКоммиты", Параметры.ОшибкиКоторыеНеУказаныВВеткеКоммиты);
	
	ОбновитьТаблицуИсправлениеОшибок(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Элементы.ФормаОК.Доступность = ПользовательМожетУправлятьВетками;
	Если НЕ ПользовательМожетУправлятьВетками Тогда
		Элементы.ГруппаШапка.Подсказка = НСтр("ru='Чтобы изменить статус, игнорируя проверки, обратитесь к уполномоченному пользователю.'");
		Элементы.ГруппаШапка.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ГруппаШапка.Подсказка = НСтр("ru='Нажмите ОК чтобы изменить статус, игнорируя проверки.'");
		Элементы.ГруппаШапка.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	КонецЕсли;
	ОбновитьДекорацииСНомеромОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоОшибок > 0 И НЕ ИгнорироватьПроверку Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Не все проблемы исправлены. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,
			КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	ПринудительнаяПередачаНаТестирование = Ложь;
	
	Закрыть(Новый Структура("ВсеИсправлено",КоличествоОшибок = 0));

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИсправлениеОшибок

&НаКлиенте
Процедура ИсправлениеОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ИмяПоля = Поле.Имя;
		Если СтрНачинаетсяС(Поле.Имя, Поле.Родитель.Имя) Тогда
			ИмяПоля = СтрЗаменить(Поле.Имя, Поле.Родитель.Имя, "");
		КонецЕсли;
		Если СтрНайти(ИмяПоля, "Git") > 0
			И ЗначениеЗаполнено(Элемент.ТекущиеДанные.КоммитВGit) Тогда
			ПерейтиПоНавигационнойСсылке(Элемент.ТекущиеДанные.КоммитВGit);
			Возврат;
		ИначеЕсли СтрНайти(ИмяПоля, "Действие") > 0
			И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Действие) Тогда

			Если Элемент.ТекущиеДанные.Действие = НСтр("ru='Очистить'") Тогда
				ОчисткаУспешна = ОчиститьВеткуВОшибке(Элемент.ТекущиеДанные.Ошибка);
				Если ОчисткаУспешна Тогда
					Элемент.ТекущиеДанные.ИсправлениеВСППР = Ложь;
					Элемент.ТекущиеДанные.Действие = "";
				КонецЕсли;
			ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.Действие, НСтр("ru='Указать'")) > 0 Тогда
				ИзменениеУспешно = УказатьВеткуВОшибке(Элемент.ТекущиеДанные.Ошибка);
				Если ИзменениеУспешно Тогда
					Элемент.ТекущиеДанные.ИсправлениеВСППР = Истина;
					Элемент.ТекущиеДанные.Действие = "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Элемент.ТекущиеДанные.Свойство(ИмяПоля)
			И ЗначениеЗаполнено(Элемент.ТекущиеДанные[ИмяПоля]) 
			И ЗначениеСсылочногоТипа(Элемент.ТекущиеДанные[ИмяПоля]) Тогда  
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные[ИмяПоля]);
			Возврат;
		Иначе
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ошибка);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДекорацииСНомеромОшибок();
	Если КоличествоОшибок = 0 Тогда
		Закрыть(Новый Структура("ВсеИсправлено", Истина));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	ПринудительнаяПередачаНаТестирование = Истина;
	Закрыть(Новый Структура("ПринудительнаяПередачаНаТестирование", Истина));
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьСервер();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЗначениеСсылочногоТипа(Значение)
	Возврат ОбщегоНазначения.ЗначениеСсылочногоТипа(Значение);
КонецФункции

&НаСервере
Функция УказатьВеткуВОшибке(Ошибка)
	Если ИзмененияПомещаютсяТолькоЧерезДругиеВетки Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя указать ветку исправления, в которой изменения помещаются только через другие ветки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Приемник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Приемник");
	ОсновнаяВеткаПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка, "Владелец.Ветка");
	ОшибкаОбъект = Ошибка.ПолучитьОбъект();

	Если ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВВеткеОбнаружения Тогда
		Если ОшибкаОбъект.ВеткаОбнаружения = Приемник 
			ИЛИ ОшибкаОбъект.ВеткаОбнаружения = Ветка Тогда
			ОшибкаОбъект.ВеткаИсправления = Ветка;
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Нельзя указать ветку исправления для ветки обнаружения %1.'"), 
							ОшибкаОбъект.ВеткаОбнаружения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ТолькоВОсновнойВеткеПроекта Тогда
		Если ОсновнаяВеткаПроекта = Приемник Тогда
			ОшибкаОбъект.ВеткаИсправления = Ветка;
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Нельзя указать ветку исправления для ветки обнаружения %1.'"), 
							ОшибкаОбъект.ВеткаОбнаружения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		Строки = ОшибкаОбъект.ИсправлениеВВетках.НайтиСтроки(Новый Структура("Ветка", Приемник));
		Для Каждого ДополнительнаяСтрока
			Из ОшибкаОбъект.ИсправлениеВВетках.НайтиСтроки(Новый Структура("Ветка", Ветка)) Цикл
			Строки.Добавить(ДополнительнаяСтрока);
		КонецЦикла; 
		Если Строки.Количество() > 0 Тогда
			Для Каждого Строка Из Строки Цикл
				Строка.ВеткаИсправления = Ветка;
			КонецЦикла;
		Иначе
			НоваяСтрока = ОшибкаОбъект.ИсправлениеВВетках.Добавить();
			НоваяСтрока.Ветка = Приемник;
			НоваяСтрока.СостояниеИсправления = Перечисления.СостоянияИсправленияОшибок.Исправлена;
			НоваяСтрока.ВеткаИсправления = Ветка;
			НоваяСтрока.ДатаИсправления = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаОбъект.Записать();
	Возврат Истина;

КонецФункции

&НаСервере
Функция ОчиститьВеткуВОшибке(Ошибка)
	
	ОшибкаОбъект = Ошибка.ПолучитьОбъект();

	Если ОшибкаОбъект.Статус 
		= ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена") Тогда
		// Если ошибка уже исправлена, то не можем очистить ветку
		ТекстСообщения = НСтр("ru = 'Нельзя очистить ветку у ошибки со статусом Проверена Исправлена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Если ОшибкаОбъект.Исправляется = Перечисления.ВариантыИсправленияОшибок.ВРазныхВетках Тогда
		Строки = ОшибкаОбъект.ИсправлениеВВетках.НайтиСтроки(Новый Структура("ВеткаИсправления", Ветка));
		Для Каждого Строка Из Строки Цикл
			Строка.ВеткаИсправления = Справочники.Ветки.ПустаяСсылка();
		КонецЦикла;
	Иначе
		ОшибкаОбъект.ВеткаИсправления = Справочники.Ветки.ПустаяСсылка();
	КонецЕсли;
	
	ОшибкаОбъект.Записать();
	Возврат Истина;

КонецФункции

&НаКлиенте
Процедура ОбновитьДекорацииСНомеромОшибок()
	ОшибкиКоторыеНеУказаныВВетке = ИсправлениеОшибок.НайтиСтроки(Новый Структура("ИсправлениеВGit, ИсправлениеВСППР", Ложь, Истина)); 
	ОшибкиУКоторыхНетКоммитов = ИсправлениеОшибок.НайтиСтроки(Новый Структура("ИсправлениеВGit, ИсправлениеВСППР", Истина, Ложь));
	КоличествоОшибок = ОшибкиКоторыеНеУказаныВВетке.Количество() + ОшибкиУКоторыхНетКоммитов.Количество();
	
	Элементы.ДекорацияКомментарийОшибкиGit.Видимость = 
		ОшибкиКоторыеНеУказаныВВетке.Количество() > 0;
	Элементы.ДекорацияКомментарийОшибкиGit.Заголовок = 
		СтрЗаменить(НСтр("ru='Найдено (0) ошибок, по которым нет коммита в ветке.'"), "(0)", 
		Строка(ОшибкиКоторыеНеУказаныВВетке.Количество()));
	
	Элементы.ДекорацияКомментарийОшибкиСППР.Видимость = 
		ОшибкиУКоторыхНетКоммитов.Количество() > 0;
	Элементы.ДекорацияКомментарийОшибкиСППР.Заголовок = 
		СтрЗаменить(НСтр("ru='Найдено (0) ошибок, в которых не указано, что они исправляются в данной ветке.'"), "(0)", 
		Строка(ОшибкиУКоторыхНетКоммитов.Количество()));
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено
		Или РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИгнорироватьПроверку = Истина;
	ДополнительныеПараметры = Новый Структура;
	Если ПринудительнаяПередачаНаТестирование Тогда
		ДополнительныеПараметры = Новый Структура("ПринудительнаяПередачаНаТестирование", Истина);
	КонецЕсли;
	ПринудительнаяПередачаНаТестирование = Ложь;
	Закрыть(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСервер()
	
	Ответ = Справочники.Ветки.ПроверкаИсправленияОшибокВВетке(Ветка);
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОшибкиУКоторыхНетКоммитов", Ответ.ОшибкиУКоторыхНетКоммитов);
	СтруктураПараметров.Вставить("ОшибкиКоторыеНеУказаныВВетке", Ответ.ОшибкиКоторыеНеУказаныВВетке);
	СтруктураПараметров.Вставить("ОшибкиКоторыеНеУказаныВВеткеКоммиты", Ответ.ОшибкиКоторыеНеУказаныВВеткеКоммиты);
	
	ОбновитьТаблицуИсправлениеОшибок(СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуИсправлениеОшибок(СтруктураПараметров)
	
	РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ветка, "Приемник, Владелец, ИзмененияПомещаютсяТолькоЧерезДругиеВетки");
	ИзмененияПомещаютсяТолькоЧерезДругиеВетки = РеквизитыВетки.ИзмененияПомещаютсяТолькоЧерезДругиеВетки;
	ПользовательМожетУправлятьВетками = УправлениеДоступомСППР.РольДоступнаПоПроекту("УправлениеВетками", РеквизитыВетки.Владелец);
	
	ОшибкиУКоторыхНетКоммитов = СтруктураПараметров.ОшибкиУКоторыхНетКоммитов;
	ОшибкиКоторыеНеУказаныВВетке = СтруктураПараметров.ОшибкиКоторыеНеУказаныВВетке;
	ОшибкиКоторыеНеУказаныВВеткеКоммиты = СтруктураПараметров.ОшибкиКоторыеНеУказаныВВеткеКоммиты;
	
	ИсправлениеОшибок.Очистить();
	Для Каждого Ошибка Из ОшибкиУКоторыхНетКоммитов Цикл
		НоваяСтрока = ИсправлениеОшибок.Добавить();
		НоваяСтрока.Ошибка = Ошибка;
		НоваяСтрока.ИсправлениеВСППР = Истина;
		НоваяСтрока.Действие = НСтр("ru='Очистить'");
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	               |	ОшибкиДляПроверки.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ОшибкиДляПроверки.Ссылка.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.ВРазныхВетках)
	               |				И НЕ ОшибкиИсправлениеВВетках.ВеткаИсправления ЕСТЬ NULL
	               |				И НЕ ОшибкиИсправлениеВВетках.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	               |			ТОГДА ОшибкиИсправлениеВВетках.ВеткаИсправления
	               |		КОГДА НЕ ОшибкиДляПроверки.Ссылка.ВеткаИсправления ЕСТЬ NULL
	               |				И НЕ ОшибкиДляПроверки.Ссылка.ВеткаИсправления = ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	               |			ТОГДА ОшибкиДляПроверки.Ссылка.ВеткаИсправления
	               |	КОНЕЦ КАК ВеткаИсправления
	               |ИЗ
	               |	Справочник.Ошибки КАК ОшибкиДляПроверки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	               |		ПО ОшибкиДляПроверки.Ссылка = ОшибкиИсправлениеВВетках.Ссылка
	               |			И (ОшибкиИсправлениеВВетках.Ветка = &Приемник)
	               |			И (ОшибкиИсправлениеВВетках.СостояниеИсправления <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсправленияОшибок.ИсправлениеНеПланируется))
	               |ГДЕ
	               |	ОшибкиДляПроверки.Ссылка В (&Ошибки)";
	Запрос.УстановитьПараметр("Ошибки", ОшибкиКоторыеНеУказаныВВетке);
	Запрос.УстановитьПараметр("Приемник", РеквизитыВетки.Приемник);
	ВеткиИсправления = Запрос.Выполнить().Выгрузить();
	
	Для Индекс = 0 ПО ОшибкиКоторыеНеУказаныВВетке.Количество() - 1 Цикл
		НоваяСтрока = ИсправлениеОшибок.Добавить();
		НоваяСтрока.Ошибка = ОшибкиКоторыеНеУказаныВВетке[Индекс];
		НоваяСтрока.ИсправлениеВGit = Истина;
		НоваяСтрока.КоммитВGit = ОшибкиКоторыеНеУказаныВВеткеКоммиты[Индекс];
		
		Если ИзмененияПомещаютсяТолькоЧерезДругиеВетки Тогда
			НоваяСтрока.Действие = НСтр("ru='Нельзя указать ветку: изменения помещаются только через другие ветки'");
			Продолжить;
		КонецЕсли;

		НоваяСтрока.Действие = НСтр("ru='Указать'");

		ВеткаИсправления = ВеткиИсправления.НайтиСтроки(Новый Структура("Ссылка", НоваяСтрока.Ошибка));
		Если ВеткаИсправления.Количество() > 0 И ЗначениеЗаполнено(ВеткаИсправления[0].ВеткаИсправления) Тогда
			НоваяСтрока.ТекущаяВеткаИсправления = ВеткаИсправления[0].ВеткаИсправления;
			НоваяСтрока.Действие = НоваяСтрока.Действие + СтрШаблон(НСтр("ru=' (вместо %1)'"), НоваяСтрока.ТекущаяВеткаИсправления);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
