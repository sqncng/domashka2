#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Отбор = Новый Структура;
	Параметры.Свойство("Отбор", Отбор);
	
	Если Отбор.Свойство("ПометкаУдаления") Тогда
		Отбор.Удалить("ПометкаУдаления");
	КонецЕсли;
	
	Если Параметры.Свойство("Проект") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			   "Владелец",
																			   Параметры.Проект,
																			   ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	Разрабатывается = Истина;
	Тестируется = Истина;
	
	Если Отбор.Свойство("Статус") Тогда

		Если ТипЗнч(Отбор.Статус) = Тип("Массив") 
			ИЛИ ТипЗнч(Отбор.Статус) = Тип("ФиксированныйМассив") Тогда
			МассивСтатусовВеток = Отбор.Статус;
		Иначе
			МассивСтатусовВеток = Новый Массив;
			МассивСтатусовВеток.Добавить(Отбор.Статус);
		КонецЕсли;

		Для Каждого СтатусДляОтбора из МассивСтатусовВеток Цикл
			Если СтатусДляОтбора = Перечисления.СтатусыВеток.Разрабатывается Тогда
				Разрабатывается = Истина;
			ИначеЕсли СтатусДляОтбора = Перечисления.СтатусыВеток.Тестируется Тогда
				Тестируется = Истина;
			ИначеЕсли СтатусДляОтбора = Перечисления.СтатусыВеток.Помещена Тогда
				Помещена = Истина;
			ИначеЕсли СтатусДляОтбора = Перечисления.СтатусыВеток.Заморожена Тогда
				Заморожена = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отбор.Свойство("Тип") Тогда
		
		Если ТипЗнч(Отбор.Тип) = Тип("Массив")
			ИЛИ ТипЗнч(Отбор.Тип) = Тип("ФиксированныйМассив") Тогда
			МассивТиповВеток = Отбор.Тип;
		Иначе
			МассивТиповВеток = Новый Массив;
			МассивТиповВеток.Добавить(Отбор.Тип);
		КонецЕсли;

		// Установка видимости элементов быстрых отборов по типу в зависимости от отбора
		
		Элементы.ГруппаТипыВеток.Видимость = Истина;
		Если Отбор.Тип = Перечисления.ТипыВеток.ВеткаВерсии
			ИЛИ  Отбор.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
			Элементы.ГруппаТипыВеток.Видимость = Ложь;
		КонецЕсли;

		ИспользоватьОтборПоВеткамВерсии = МассивТиповВеток.Найти(Перечисления.ТипыВеток.ВеткаВерсии) <> Неопределено 
				ИЛИ МассивТиповВеток.Найти(Перечисления.ТипыВеток.ОсновнаяВеткаПроекта) <> Неопределено;
		Элементы.ВеткиВерсии.Видимость = ИспользоватьОтборПоВеткамВерсии;
		ВеткиВерсии = ИспользоватьОтборПоВеткамВерсии;

		ИспользоватьОтборПоВеткамТехническихПроектов =
			МассивТиповВеток.Найти(Перечисления.ТипыВеток.ВеткаТехническогоПроекта) <> Неопределено;
		Элементы.ВеткиТехническихПроектов.Видимость = ИспользоватьОтборПоВеткамТехническихПроектов;
		ВеткиТехническихПроектов = ИспользоватьОтборПоВеткамТехническихПроектов;

		ИспользоватьОтборПоВеткамиДляИсправленияОшибок =
			МассивТиповВеток.Найти(Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок) <> Неопределено;
		Элементы.ВеткиДляИсправленияОшибок.Видимость = ИспользоватьОтборПоВеткамиДляИсправленияОшибок;
		ВеткиДляИсправленияОшибок = ИспользоватьОтборПоВеткамиДляИсправленияОшибок;
	Иначе

		ВеткиВерсии = Истина;
		ВеткиТехническихПроектов = Истина;
		ВеткиДляИсправленияОшибок = Истина;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ИсключитьСсылки") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка", 
																			    Параметры.ИсключитьСсылки, 
																			    ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
	ВеткаДляИсправления = Неопределено;
	Параметры.Свойство("ВеткаДляИсправления", ВеткаДляИсправления);
	Если Параметры.Свойство("ОтбиратьДляИсправленияВОсновнойВетке") 
		И Параметры.ОтбиратьДляИсправленияВОсновнойВетке
		И Параметры.Отбор.Свойство("Владелец") Тогда
		ВеткаДляИсправления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отбор.Владелец, "Ветка");
	КонецЕсли;
	
	Если ВеткаДляИсправления <> Неопределено Тогда
		УстановитьОтборВетокДляИсправления(ВеткаДляИсправления);
	КонецЕсли;
	
	Если Параметры.Свойство("ИсключитьВеткиБезПрямогоПомещения") Тогда
		Если Параметры.ИсключитьВеткиБезПрямогоПомещения Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ИзмененияПомещаютсяТолькоЧерезДругиеВетки", 
																			    Ложь, 
																			    ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановкаОтборовПриОткрытии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	УстановитьОтборПоОтветственному();
КонецПроцедуры

&НаКлиенте
Процедура РазрабатываетсяПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ТестируетсяПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ПомещенаПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ЗамороженаПриИзменении(Элемент)
	УстановитьОтборПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ВеткиВерсииПриИзменении(Элемент)
	УстановитьОтборПоТипу();
КонецПроцедуры

&НаКлиенте
Процедура ВеткиТехническихПроектовПриИзменении(Элемент)
	УстановитьОтборПоТипу();
КонецПроцедуры

&НаКлиенте
Процедура ВеткиДляИсправленияОшибокПриИзменении(Элемент)
	УстановитьОтборПоТипу();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановкаОтборовПриОткрытии()
	
	УстановитьОтборПоТипу();
	УстановитьОтборПоСтатусу();
	УстановитьОтборПоОтветственному();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСтатусу()
	
	ОтборПоСтатусам = Новый Массив;
	Если Заморожена Тогда
		ОтборПоСтатусам.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Заморожена"));
	Конецесли;
	Если Разрабатывается Тогда
		ОтборПоСтатусам.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается"));
	Конецесли;
	Если Тестируется Тогда
		ОтборПоСтатусам.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется"));
	Конецесли;
	Если Помещена Тогда
		ОтборПоСтатусам.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена"));
	Конецесли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Статус",
																			ОтборПоСтатусам,
																			ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры


&НаСервере
Процедура УстановитьОтборПоОтветственному()
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ОтборОтветственный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Ответственный",
																			ОтборОтветственный,
																			ВидСравненияКомпоновкиДанных.Равно,
																			,
																			ИспользоватьОтбор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТипу()
	
	МассивТипов = Новый Массив;
	Если ВеткиВерсии Тогда
		МассивТипов.Добавить(Перечисления.ТипыВеток.ОсновнаяВеткаПроекта);
		МассивТипов.Добавить(Перечисления.ТипыВеток.ВеткаВерсии);
	КонецЕсли;
	Если ВеткиТехническихПроектов И Элементы.ВеткиТехническихПроектов.Видимость Тогда
		МассивТипов.Добавить(Перечисления.ТипыВеток.ВеткаТехническогоПроекта);
	КонецЕсли;
	Если ВеткиДляИсправленияОшибок И Элементы.ВеткиДляИсправленияОшибок.Видимость Тогда
		МассивТипов.Добавить(Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Тип",
																			МассивТипов,
																			ВидСравненияКомпоновкиДанных.ВСписке);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВетокДляИсправления(Ветка)
		
	ГруппаИСтатус = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
																			НСтр("ru='Отбор веток по статусу'"),
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
																			
	ГруппаИСтатус.Использование = Истина;

	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИСтатус,
																			НСтр("ru='Отбор веток для исправления'"),
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
																			
	ГруппаИЛИ.Использование = Истина;
	
	ГруппаИПомещаемаяВетка = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ,
																			НСтр("ru='Отбор помещаемых веток'"),
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
																			
	ГруппаИПомещаемаяВетка.Использование = Истина;

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "Ссылка", ВидСравненияКомпоновкиДанных.Равно, Ветка,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИСтатус, "Статус", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СтатусыВеток.Помещена,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПомещаемаяВетка, "Приемник", ВидСравненияКомпоновкиДанных.Заполнено,,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИПомещаемаяВетка, "Приемник", ВидСравненияКомпоновкиДанных.Равно, Ветка,,Истина);
	
	
КонецПроцедуры

#КонецОбласти
