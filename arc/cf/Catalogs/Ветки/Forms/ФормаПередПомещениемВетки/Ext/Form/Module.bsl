#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Ветка = Параметры.Ветка;
	Проект = Параметры.Проект;
	
	РассчитатьСостоянияВетки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияВсеОшибкиИсправленыНажатие(Элемент)
	ОткрытьФормуПроверкиИсправленияОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНеВсеОшибкиИсправленыНажатие(Элемент)
	ОткрытьФормуПроверкиИсправленияОшибок();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваныНажатие(Элемент)
	ОткрытьФормуОшибкиИсправляемыеВВетке();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНеВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваныНажатие(Элемент)
	ОткрытьФормуОшибкиИсправляемыеВВетке();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЕстьТестыЗаблокированныеОшибкамиНажатие(Элемент)
	ОткрытьФормуЗаблокированныхТестов();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНеЕстьТестыЗаблокированныеОшибкамиНажатие(Элемент)
	ОткрытьФормуЗаблокированныхТестов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте

Процедура Поместить(Команда)
	
	Если КоличествоПроблем > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросООпомещенииОбработчик", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Обнаружены проблемы в ветке. Поместить ветку?'"), РежимДиалогаВопрос.ДаНет);
	Иначе	
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросООпомещенииОбработчик", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Поместить ветку?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура РассчитатьСостоянияВетки()
	
	ВключитьВидимостьВсехЭлементов();
	
	КоличествоПроблем = 0;
	
	//Исправлены все ошибки
	Попытка
		РезультатПроверки = РезультатПроверкиИсправленыВсеОшибкиСервер();
		ВВеткеИсправленыВсеОшибки = РезультатПроверки.ПроверкаВыполненаУспешно;
	Исключение
		ВВеткеИсправленыВсеОшибки = Ложь;
	КонецПопытки;
	Элементы.ДекорацияВсеОшибкиИсправлены.Видимость = ВВеткеИсправленыВсеОшибки;
	Элементы.ДекорацияНеВсеОшибкиИсправлены.Видимость = НЕ ВВеткеИсправленыВсеОшибки;
	
	Если НЕ ВВеткеИсправленыВсеОшибки Тогда
		КоличествоПроблем = КоличествоПроблем + 1;
	КонецЕсли;	
	
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект,
		"ПроверятьНаличиеЗапросаНаПомещениеПриСменеСтатусаВетки,ЗагружатьИзмененияВВетках,ЗагружатьРезультатыВыполненияТестов");
	
	Если РеквизитыПроекта.ПроверятьНаличиеЗапросаНаПомещениеПриСменеСтатусаВетки Тогда
		//Проверка конфликтов запроса на слияние
		Попытка
			ДанныеОткрытогоЗапросаНаСлияниеПоВетке = ТестированиеЗагрузкаРезультатовТестирования.ДанныеОткрытогоЗапросаНаСлияниеПоВетке(Ветка);
		Исключение
			ДанныеОткрытогоЗапросаНаСлияниеПоВетке = Неопределено;
		КонецПопытки;
		
		Если ДанныеОткрытогоЗапросаНаСлияниеПоВетке = Неопределено Тогда
			Элементы.ДекорацияЕстьКонфликтыЗапросаНаСлияниеДа.Видимость = Ложь;
			Элементы.ДекорацияНетКонфликтовЗапросаНаСлияние.Видимость = Ложь;
			КоличествоПроблем = КоличествоПроблем + 1;
		Иначе
			
			ИдентификаторЗапросаНаСлияние = ДанныеОткрытогоЗапросаНаСлияниеПоВетке.iid;
			
			ГиперссылкаНаЗапросНаСлияние = ГиперссылкаЗапросаНаСлияниеСервер(ИдентификаторЗапросаНаСлияние);
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Да'"),Новый Шрифт(,,Истина),WebЦвета.Красный,,ГиперссылкаНаЗапросНаСлияние));
			СсылкаНаЗапросНаСлияниеВРепозиторииДа =  Новый ФорматированнаяСтрока(МассивСтрок);
			
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Нет'"),Новый Шрифт(,,Истина),WebЦвета.Зеленый,,ГиперссылкаНаЗапросНаСлияние));
			СсылкаНаЗапросНаСлияниеВРепозиторииНет =  Новый ФорматированнаяСтрока(МассивСтрок);
			
			Если ТестированиеЗагрузкаРезультатовТестирования.СтатусЗапросаНаСлияниеОзначаетКонфликтПомещенияИзменений(
				ДанныеОткрытогоЗапросаНаСлияниеПоВетке.merge_status) Тогда
				
				Элементы.ДекорацияЕстьКонфликтыЗапросаНаСлияниеДа.Видимость = Истина;
				Элементы.ДекорацияНетКонфликтовЗапросаНаСлияние.Видимость = Ложь;
				Элементы.ДекорацияКонфликМерджаНеНайденЗапросНаСлияние.Видимость = Ложь;
				КоличествоПроблем = КоличествоПроблем + 1;
			Иначе
				
				Элементы.ДекорацияЕстьКонфликтыЗапросаНаСлияниеДа.Видимость = Ложь;
				Элементы.ДекорацияНетКонфликтовЗапросаНаСлияние.Видимость = Истина;
				Элементы.ДекорацияКонфликМерджаНеНайденЗапросНаСлияние.Видимость = Ложь;
				
			КонецЕсли;	
		КонецЕсли;
	Иначе
		Элементы.ГруппаЕстьКонфликтыМерджа.Видимость = Ложь;
	КонецЕсли;	
	
	Если РеквизитыПроекта.ЗагружатьИзмененияВВетках Тогда
		//Проверка, что изменения ОМ загружены на последний коммит в ветке
		Попытка
			ИнформацияОВетке = ТестированиеЗапускТестирования.ИнформацияОВетке(
				Проект, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "Имя"));
			
			ДанныеКоммитаИзСистемыХраненияВерсий = ИнформацияОВетке.commit.id;	
			ДанныеПоследнегоКоммитаПоЗагрузкеИзменений = ДанныеПоследнегоКоммитаПоЗагрузкеИзменений(Ветка);
			
			Если ДанныеПоследнегоКоммитаПоЗагрузкеИзменений = ДанныеКоммитаИзСистемыХраненияВерсий Тогда
				ИзмененияОМЗагруженыНаПоследнийКоммит = Истина;
			Иначе	
				ИзмененияОМЗагруженыНаПоследнийКоммит = Ложь;
			КонецЕсли;	
			
		Исключение
			ИзмененияОМЗагруженыНаПоследнийКоммит = Ложь;
		КонецПопытки;
		
		Если ИзмененияОМЗагруженыНаПоследнийКоммит Тогда
			Элементы.ДекорацияИзмененияОМНеЗагруженыНаПоследнийКоммит.Видимость = Ложь;
		Иначе	
			Элементы.ДекорацияИзмененияОМЗагруженыНаПоследнийКоммит.Видимость = Ложь;
			КоличествоПроблем = КоличествоПроблем + 1;
		КонецЕсли;
		
		//Все изменения ОМ согласованы
		ЕстьНеСогласованныеИзмененияОМ = ТестированиеЗагрузкаРезультатовТестирования.ЕстьНеСогласованныеИзмененияОМ(Ветка);
		Если ЕстьНеСогласованныеИзмененияОМ Тогда
			Элементы.ДекорацияВсеИзмененияОМСогласованы.Видимость = Ложь;
			КоличествоПроблем = КоличествоПроблем + 1;
		Иначе	
			Элементы.ДекорацияНеВсеИзмененияОМСогласованы.Видимость = Ложь;
		КонецЕсли;
	Иначе	
		Элементы.ГруппаИзмененияОМЗагруженыНаПоследнийКоммит.Видимость = Ложь;
		Элементы.ГруппаВсеИзмененияОМСогласованы.Видимость = Ложь;
	КонецЕсли;	
	
	//Все ошибки исправляемые в ветке либо проверены либо отозваны
	ВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны =
		ТестированиеЗагрузкаРезультатовТестирования.ВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны(Ветка);
		
	Если ВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны Тогда
		Элементы.ДекорацияНеВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны.Видимость = Ложь;
		КоличествоПроблем = КоличествоПроблем + 1;
	КонецЕсли;
	
	Если РеквизитыПроекта.ЗагружатьРезультатыВыполненияТестов Тогда
		//Проверка, что нет тестов заблокированных ошибками
		ДанныеПоЗаблокированнымТестамВВетке = ТестированиеЗагрузкаРезультатовТестирования.ДанныеПоЗаблокированнымТестамВВетке(Ветка);
		Если ДанныеПоЗаблокированнымТестамВВетке.ГотоваКПомещению Тогда
			Элементы.ДекорацияЕстьТестыЗаблокированныеОшибками.Видимость = Ложь;
		Иначе	
			Элементы.ДекорацияНеЕстьТестыЗаблокированныеОшибками.Видимость = Ложь;
			КоличествоПроблем = КоличествоПроблем + 1;
		КонецЕсли;
	Иначе	
		Элементы.ГруппаЕстьТестыЗаблокированныеОшибками.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВидимостьВсехЭлементов()
	
	Элементы.ДекорацияВсеОшибкиИсправлены.Видимость = Истина;
	Элементы.ДекорацияНеВсеОшибкиИсправлены.Видимость = Истина;
	
	Элементы.ДекорацияЕстьКонфликтыЗапросаНаСлияниеДа.Видимость = Истина;
	Элементы.ДекорацияНетКонфликтовЗапросаНаСлияние.Видимость = Истина;
	Элементы.ДекорацияКонфликМерджаНеНайденЗапросНаСлияние.Видимость = Истина;
	
	Элементы.ДекорацияИзмененияОМЗагруженыНаПоследнийКоммит.Видимость = Истина;
	Элементы.ДекорацияИзмененияОМНеЗагруженыНаПоследнийКоммит.Видимость = Истина;
	
	Элементы.ДекорацияВсеИзмененияОМСогласованы.Видимость = Истина;
	Элементы.ДекорацияНеВсеИзмененияОМСогласованы.Видимость = Истина;
	
	Элементы.ДекорацияВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны.Видимость = Истина;
	Элементы.ДекорацияНеВсеОшибкиИсправляемыеВВеткеЛибоПровереныЛибоОтозваны.Видимость = Истина;
	
	Элементы.ДекорацияЕстьТестыЗаблокированныеОшибками.Видимость = Истина;
	Элементы.ДекорацияНеЕстьТестыЗаблокированныеОшибками.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДанныеПоследнегоКоммитаПоЗагрузкеИзменений(Ветка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗагрузкиМетаданныхВВетках.ДанныеКоммита КАК ДанныеКоммита
		|ИЗ
		|	РегистрСведений.СостояниеЗагрузкиМетаданныхВВетках КАК СостояниеЗагрузкиМетаданныхВВетках
		|ГДЕ
		|	СостояниеЗагрузкиМетаданныхВВетках.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ДанныеКоммита;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции	

&НаСервере
Функция ГиперссылкаЗапросаНаСлияниеСервер(ИдентификаторЗапросаНаСлияние)
	Возврат Тестирование.ГиперссылкаНаЗапросНаСлияние(Проект, ИдентификаторЗапросаНаСлияние);
КонецФункции	

&НаСервере
Функция РезультатПроверкиИсправленыВсеОшибкиСервер()
	Возврат Справочники.Ветки.ПроверкаИсправленияОшибокВВетке(Ветка, Истина);
КонецФункции	

&НаКлиенте
Процедура ОткрытьФормуПроверкиИсправленияОшибок()
	ТестированиеКлиент.ПроверкаИсправленияОшибокВВетке(Ветка, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОшибкиИсправляемыеВВетке()
	ПараметрыФормы = Новый Структура("ВеткаИсправления", Ветка);
	ОткрытьФорму("Справочник.Ошибки.Форма.ОшибкиПоВетке",
					ПараметрыФормы,
					ЭтаФорма,
					Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаблокированныхТестов()
	ТестированиеКлиент.СтатусТестовВВетке(Ветка);
КонецПроцедуры

&НаКлиенте
Процедура ВопросООпомещенииОбработчик(Ответ, ВариантОтчета) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		Результат = Новый Структура;
		Результат.Вставить("ПоместитьВетку", Истина);
		ОповеститьОВыборе(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти