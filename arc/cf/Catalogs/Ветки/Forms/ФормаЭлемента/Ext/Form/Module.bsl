
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Проект = Объект.Владелец;
	ТекущийТипВетки = Объект.Тип;
	УстановитьВидимостьЭлементовСвязейМеждуВетками();
	УстановитьСвойстваЭлементаИмяВеткиИсходяИзВариантаВедения();
	УстановитьВидимостьЭлементовТестирования();
	ОбновитьГиперссылкуЗапросаНаСлияние();
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеФОИспользоватьТестирование = ПолучитьФункциональнуюОпцию("ИспользоватьТестирование");
	
	ПриЧтенииСозданииНаСервере();
	СозданиеВыборВетки = Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора; 
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		Элементы.ГруппаТестирование.Видимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ЗапускатьАвтоматическоеТестирование")
											И ЗначениеФОИспользоватьТестирование;
		Элементы.ФормаЗагрузитьИзмененияМетаданных.Видимость = ЗначениеФОИспользоватьТестирование;
		Элементы.ФормаОчиститьИзмененияМетаданных.Видимость = ЗначениеФОИспользоватьТестирование;
		Элементы.ИмяВетки.ТолькоПросмотр = НЕ (УправлениеДоступом.ИзменениеРазрешено(Объект.Владелец)
						ИЛИ УправлениеДоступомСППР.РольДоступнаПоПроекту("УправлениеАвтотестированием", Объект.Владелец)
						ИЛИ НЕ ВВеткеЕстьИзмененияОМ(Объект.Ссылка));
	КонецЕсли;
	Элементы.ПредшественникСтатус.Видимость = ЗначениеЗаполнено(Объект.Предшественник);	
	Элементы.ФормаГруппаЗапускТестирования.Видимость = Элементы.ГруппаТестирование.Видимость 
														И ПравоДоступа("Добавление", Метаданные.Документы.ЗапускТестирования); 
	Элементы.ДатаНачалаТестирования.Видимость = Элементы.ГруппаТестирование.Видимость;
													
	Если ЗначениеФОИспользоватьТестирование Тогда
		СостояниеТестирования = Тестирование.СостояниеТестированияВетки(Объект.Ссылка);
		ДатаЗагрузкиМетаданных = ДатаЗагрузкиМетаданных();
	КонецЕсли;
	
	ВидимостьЭлементовГруппыЗагрузкаИзмененийОбъектовМетаданных();
														
	// ОбъектыНаКонтроле
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаОбъектыНаКонтроле");
	// Конец ОбъектыНаКонтроле
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	ОбновитьИспользованиеВетки();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПрочитатьИнформациюОСборках();
	ЗаполнитьДанныеСогласованияИзменений();
	УстановитьВидимостьИнформацииОСборках();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("СтарыйСтатус") Тогда
		Если ТекущийОбъект.Статус = Перечисления.СтатусыВеток.Помещена
			И ТекущийОбъект.Статус <> ТекущийОбъект.ДополнительныеСвойства.СтарыйСтатус Тогда
			ОповеститьСогласующихПоИзменениямВВетке();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;

	Если СозданиеВыборВетки Тогда 
		СозданиеВыборВетки = Ложь;  // сбросим значение, чтобы больше не выполнялся этот код
		Закрыть(Объект.Ссылка); // установим значение параметра РезультатДействия для обработчика ОписаниеОповещенияОЗакрытии
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	    ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СтарыйСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "Статус");
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыйСтатус", СтарыйСтатус);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ПоместитьВетку") И ВыбранноеЗначение.ПоместитьВетку Тогда
			
			ЗавершитьПомещениеВетки();
			
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		ПроектПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипВеткиПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовСвязейМеждуВетками();
	ПриИзмененииТипаВеткиНаСервере();
	
	Если ИмяСгенерированоАвтоматически Тогда
		Объект.Имя = "";
	КонецЕсли;
	Если НаименованиеСгенерированоАвтоматически Тогда
		Объект.Наименование = "";
	КонецЕсли;
	
	Если ТекущийТипВетки <> Объект.Тип Тогда
		ТекущийТипВетки = Объект.Тип;
		Объект.НастройкаЗапускаТестирования = ПредопределенноеЗначение("Справочник.НастройкиЗапускаТестирования.ПустаяСсылка");
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
		Объект.ДатаСоздания = ТекущаяДата();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Приемник) Тогда
		Объект.Приемник = Объект.Источник;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимРазработкиПриИзменении(Элемент)
	УстановитьСвойстваЭлементаИмяВеткиИсходяИзВариантаВедения();
КонецПроцедуры

&НаКлиенте
Процедура ПриемникПриИзменении(Элемент)
	
	ПриИзмененииПриемникаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПомещенияПриИзменении(Элемент)
	
	ПриИзмененииДатыПомещенияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяВеткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВХранилище") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Каталог   = Объект.Имя;
		ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога хранилища конфигурации'");
		
		Если ДиалогВыбораФайла.Выбрать() Тогда
			Объект.Имя = ДиалогВыбораФайла.Каталог;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяВеткиОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВGitРепозитории") Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Объект.Имя) и ЗначениеЗаполнено(Объект.Владелец) Тогда
			Гиперссылка = ГиперсылкаНаВетку(Объект.Имя, Объект.Владелец);
			НачатьЗапускПриложения(Новый ОписаниеОповещения, Гиперссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСпискаВерсийТехническихПроектовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВерсииТехническиеПроектыИспользующиеВетку.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ВерсииТехническиеПроектыИспользующиеВетку.Количество() = 1 Тогда
		ПоказатьЗначение(Неопределено, ВерсииТехническиеПроектыИспользующиеВетку[0].Значение);
	ИначеЕсли Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаТехническогоПроекта") Тогда
		ОткрытьФорму("Справочник.ТехническиеПроекты.Форма.ТехническиеПроектыСОтбором", 
					Новый Структура("СписокТехническихПроектов", ВерсииТехническиеПроектыИспользующиеВетку), 
					ЭтаФорма);
	Иначе
		ОткрытьФорму("Справочник.ВерсииПроекта.Форма.ВерсииПроектаСОтбором", 
					Новый Структура("СписокВерсийПроекта", ВерсииТехническиеПроектыИспользующиеВетку), 
					ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПредшественникПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Предшественник)
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
			СтатусПредшественника = СтатусВетки(Объект.Предшественник);
			Если СтатусПредшественника <> ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена") Тогда
				Текст = СтрШаблон(НСтр("ru='Т.к. ветка предшественник <%1> не помещена, у текущей ветки статус будет изменен на ""Разрабатывается"".'"),Объект.Предшественник);
				ОписаниеОповещения = Новый ОписаниеОповещения("ПредупреждениеПредшественникПриИзмененииЗавершение", ЭтотОбъект);
				ПоказатьПредупреждение(ОписаниеОповещения, Текст);
			КонецЕсли;	
	КонецЕсли;	
	
	Элементы.ПредшественникСтатус.Видимость = ЗначениеЗаполнено(Объект.Предшественник);
	Если НЕ ЗначениеЗаполнено(Объект.Предшественник) Тогда
		СостояниеТестирования = ОбновитьСостояниеТестированияСервер(Объект.Ссылка)
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
	        И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
	    
	    СвойстваВыполнитьОтложеннуюИнициализацию();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияНеСогласованоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКИзменениямВВетке(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияИзмененийВВетках.НеСогласовано"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияТребуетСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКИзменениямВВетке(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияСогласованоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКИзменениямВВетке(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияИзмененийВВетках.Согласовано"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияНеТребуетСогласованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКИзменениямВВетке(ПредопределенноеЗначение("Перечисление.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования"));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияНеУказанСогласующийНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКИзменениямВВеткеБезУказанияСогласующего();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмененияНеУказанОтветственныйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКИзменениямВВеткеБезУказанияОтветственного();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СтатусТестов(Команда)
	
	ТестированиеКлиент.СтатусТестовВВетке(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусТестовПоОшибкам(Команда)
	
	Ветки = Новый Массив;
	Ветки.Добавить(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("КлючВарианта, ВидимостьКомандВариантовОтчетов, СформироватьПриОткрытии, Ветка", 
		"СтатусПрохожденияТестовВВеткеПоОшибкам",
		Истина, 
		Истина, 
		Ветки);

	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБлижайшийЗапуск(Команда)
	Если ЗначениеЗаполнено(БлижайшийЗапускТестирования) Тогда
		ПоказатьЗначение(Неопределено, БлижайшийЗапускТестирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоследнийЗапуск(Команда)
	Если ЗначениеЗаполнено(ПоследнийЗапускТестирования) Тогда
		ПоказатьЗначение(Неопределено, ПоследнийЗапускТестирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестирование(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФорму(
		"Документ.ЗапускТестирования.Форма.ФормаДокумента",  
		Новый Структура("ЗначенияЗаполнения", Новый Структура("Ветка", Объект.Ссылка)),
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестыВыполненныеСОшибкой(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументЗапускТестирования = ЗапуститьТестыИСоздатьЗапускТестирования();
	ПоказатьЗначение(,ДокументЗапускТестирования);
		
КонецПроцедуры

&НаКлиенте
Процедура Заморозить(Команда)
	Если НЕ ПроверятьЗапросНаСлияниеПриПередачеВеткиВТестирование(Объект.Владелец) Тогда
		ПоменятьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Заморожена"));
		Возврат;
	КонецЕсли;	 	
	
	Если НЕ (Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаТехническогоПроекта")
		ИЛИ Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаДляИсправленияОшибок") )
		Тогда
		
		ПоменятьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Заморожена"));
		Возврат;
		
	КонецЕсли;	
	
	ЗакрытьЗапросНаСлияниеИОбновитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Заморожена"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРазработку(Команда)
	ПоменятьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается"));
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаТестирование(Команда)
	
	Если ЗначениеЗаполнено(Объект.Предшественник) Тогда
		СтатусПредшественника = СтатусВетки(Объект.Предшественник);
		Если СтатусПредшественника <> ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена") Тогда
			Текст = СтрШаблон(НСтр("ru='Перед направлением на тестирование данной ветки надо поместить ветку предшественник <%1>'"),Объект.Предшественник);
			ПоказатьПредупреждение(Новый ОписаниеОповещения, Текст);
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	Если НЕ ПроверятьЗапросНаСлияниеПриПередачеВеткиВТестирование(Объект.Владелец) Тогда
		ПоменятьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется"));
		Возврат;
	КонецЕсли;	 	
	
	Если НЕ (Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаТехническогоПроекта")
		ИЛИ Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаДляИсправленияОшибок") )
		Тогда
		
		ПоменятьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется"));
		Возврат;
		
	КонецЕсли;	 
	
	СоздатьЗапросНаСлияниеИОбновитьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется"));
КонецПроцедуры

&НаКлиенте
Процедура Поместить(Команда)
	
	РежимРазработкиВетки = РежимРазработкиВетки(Объект.Ссылка);
	Если РежимРазработкиВетки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВХранилище")
		ИЛИ РежимРазработкиВетки = ПредопределенноеЗначение("Перечисление.РежимРазработки.БезИзменений")
		Тогда
			ЗавершитьПомещениеВетки();
	Иначе
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ветка", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("Проект", Объект.Владелец);
		ОткрытьФорму("Справочник.Ветки.Форма.ФормаПередПомещениемВетки",ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИсправлениеОшибокВВетке(Команда)
	ОчиститьСообщения();
	
	ТестированиеКлиент.ПроверкаИсправленияОшибокВВетке(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗапросНаСлияние(Команда)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
		ВызватьИсключение НСтр("ru='Ветка должна быть в статусе Тестируется.'");
	КонецЕсли;	 
	
	ДанныеОткрытогоЗапросаНаСлияние = ДанныеОткрытогоЗапросаНаСлияние(Объект.Владелец, Объект.Имя, Объект.Приемник);
	
	Если ДанныеОткрытогоЗапросаНаСлияние = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Запрос на слияние не найден.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;	
	
	Если Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0") <> Объект.ИдентификаторЗапросаНаСлияние Тогда
		ПривязатьУжеОткрытыйЗапросНаСлияние(Неопределено, ДанныеОткрытогоЗапросаНаСлияние);
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзмененияМетаданных(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Загрузка возможна только для записанного объекта. Записать?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьРазрабатываемыеМетаданныеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
    Иначе
		ВыполнитьЗагрузкуРазрабатываемыхМетаданных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзмененияМетаданных(Команда)
	Оповещение = Новый ОписаниеОповещения("ОчиститьИзмененияМетаданныхОкончание", ЭтаФорма);
	ТекстВопроса = НСтр("ru = 'Вы уверены, что хотите очистить результат загрузки метаданных?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеТестирования(Команда)
	
	СостояниеТестирования = ОбновитьСостояниеТестированияСервер(Объект.Ссылка);
	
КонецПроцедуры

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыОбъекта(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьПредшественника(Команда)
	Результат = ПредшественникСервер();
	Если ЗначениеЗаполнено(Результат) Тогда
		Объект.Предшественник = Результат;
		Модифицированность = Истина;
	КонецЕсли;	
	ПредшественникПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОСогласованииИзменений(Команда)
	
	ЗаполнитьДанныеСогласованияИзменений();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВетку(Команда)
	Если ЗначениеЗаполнено(Объект.Имя)
		И ЗначениеЗаполнено(Объект.Источник)
		И ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		Если СоздатьВеткуНаСервере() Тогда
			ПоказатьОповещениеПользователя(
				СтрШаблон(НСтр("ru='Ветка с именем %1 создана на сервере Gitlab'"), Объект.Имя),,,
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПрочитатьИнформациюОСборках();
	ЗаполнитьДанныеСогласованияИзменений();
	УстановитьВидимостьИнформацииОСборках();
	
	Элементы.ФормаСтатусТестов.Видимость = ЗначениеЗаполнено(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) 
		И ЗначениеЗаполнено(Объект.ДатаНачалаТестирования) Тогда
		Если НЕ ЗначениеЗаполнено(БлижайшийЗапускТестирования) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
			                |	ЗапускТестирования.Ссылка КАК Ссылка
			                |ИЗ
			                |	Документ.ЗапускТестирования КАК ЗапускТестирования
			                |ГДЕ
			                |	ЗапускТестирования.Ветка = &Ветка
			                |	И НЕ ЗапускТестирования.ПометкаУдаления
			                |	И НЕ ЗапускТестирования.Проведен
			                |	И ЗапускТестирования.Настройка <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
			                |
			                |УПОРЯДОЧИТЬ ПО
			                |	ЗапускТестирования.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Ветка", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				БлижайшийЗапускТестирования = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПоследнийЗапускТестирования) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
			                |	ЗапускТестирования.Ссылка КАК Ссылка
			                |ИЗ
			                |	Документ.ЗапускТестирования КАК ЗапускТестирования
			                |ГДЕ
			                |	ЗапускТестирования.Ветка = &Ветка
			                |	И НЕ ЗапускТестирования.ПометкаУдаления
			                |	И ЗапускТестирования.Проведен
			                |	И ЗапускТестирования.Настройка <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
			                |
			                |УПОРЯДОЧИТЬ ПО
			                |	ЗапускТестирования.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Ветка", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ПоследнийЗапускТестирования = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Элементы.ОткрытьПоследнийЗапуск.Доступность = ЗначениеЗаполнено(ПоследнийЗапускТестирования);
	Если ЗначениеЗаполнено(ПоследнийЗапускТестирования) Тогда
		Элементы.ОткрытьПоследнийЗапуск.Заголовок = СтрШаблон(НСтр("ru='Последнее тестирование: запущено %1'"), 
																ПоследнийЗапускТестирования.Дата);
		Если ЗначениеЗаполнено(ПоследнийЗапускТестирования.ДатаЗавершения) Тогда
			 Элементы.ОткрытьПоследнийЗапуск.Заголовок = Элементы.ОткрытьПоследнийЗапуск.Заголовок 
				 											+ СтрШаблон(НСтр("ru=' и завершен %1'"), 
															ПоследнийЗапускТестирования.ДатаЗавершения);
		Иначе
			Элементы.ОткрытьПоследнийЗапуск.Заголовок = Элементы.ОткрытьПоследнийЗапуск.Заголовок + НСтр("ru=' и все ещё выполняется'");
		КонецЕсли;

	Иначе
		Элементы.ОткрытьПоследнийЗапуск.Заголовок = НСтр("ru='Запуск тестирования ещё не выполнялся'");
	КонецЕсли;

	Элементы.ОткрытьБлижайшийЗапуск.Доступность = ЗначениеЗаполнено(БлижайшийЗапускТестирования);
	Элементы.ОткрытьБлижайшийЗапуск.Видимость = Истина;
	Если ЗначениеЗаполнено(БлижайшийЗапускТестирования) Тогда
		Элементы.ОткрытьБлижайшийЗапуск.Заголовок = СтрШаблон(НСтр("ru='Ближайший запуск тестирования: %1'"), 
															БлижайшийЗапускТестирования.Дата);
	ИначеЕсли ЗначениеЗаполнено(ПоследнийЗапускТестирования) Тогда
		Элементы.ОткрытьБлижайшийЗапуск.Заголовок = НСтр("ru='Новое тестирование не запланировано'");
	Иначе
		Элементы.ОткрытьБлижайшийЗапуск.Заголовок = "";
		Элементы.ОткрытьБлижайшийЗапуск.Видимость = Ложь;
	КонецЕсли;
	
	ЗначениеСпискаВыбора = Элементы.РежимРазработки.СписокВыбора.НайтиПоЗначению(Перечисления.РежимРазработки.БезИзменений);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "РежимРазработки") <> Перечисления.РежимРазработки.БезИзменений
		И ЗначениеСпискаВыбора <> Неопределено Тогда
		Элементы.РежимРазработки.СписокВыбора.Удалить(ЗначениеСпискаВыбора);
	КонецЕсли;
	ПользовательМожетУправлятьВетками = УправлениеДоступомСППР.РольДоступнаПоПроекту("УправлениеВетками", Объект.Владелец);
	
	Если Объект.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
		ИмяВеткиПоОбъекту = Справочники.Ветки.ИмяВеткиРепозиторияПоРазрабатываемомуОбъекту(Неопределено, Объект.Ответственный, Объект.Источник, Объект.Тип, Объект.ДатаСоздания);
		НаименованиеПоОбъекту = Справочники.Ветки.НаименованиеВеткиРепозиторияПоРазрабатываемомуОбъекту(Неопределено, Объект.Имя, Объект.Ответственный, Объект.Источник, Объект.Тип, Объект.ДатаСоздания);

		ИмяСгенерированоАвтоматически = Объект.Имя = ИмяВеткиПоОбъекту;
		НаименованиеСгенерированоАвтоматически = Объект.Наименование = НаименованиеПоОбъекту;
	КонецЕсли;
	
	Если ВеткаУдаленаНаСервере() Тогда
		Элементы.ИмяВетки.Подсказка = НСтр("ru='Ветка удалена на сервере.'");
	КонецЕсли;
	Элементы.ДатаПомещения.Доступность = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена");
	УстановитьВидимостьЭлементовСтатуса();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовСвязейМеждуВетками()
	
	Элементы.ГруппаСвязиСВетками.Видимость = Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта");
	
	ВеткаМожетБытьПомещена = Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта") 
	                         И Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии");
	
	Элементы.ИзмененияПомещаютсяТолькоЧерезДругиеВетки.Видимость = НЕ ВеткаМожетБытьПомещена;
	Элементы.РежимРазработки.Доступность = Объект.Тип <>  ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта");
	
	Элементы.Приемник.Видимость = ВеткаМожетБытьПомещена;
	Элементы.ДатаПомещения.Видимость = ВеткаМожетБытьПомещена;
	Элементы.Предшественник.Видимость = ВеткаМожетБытьПомещена;
	Элементы.ОбновитьПредшественника.Видимость = ВеткаМожетБытьПомещена;
	Элементы.ПредшественникСтатус.Видимость = ВеткаМожетБытьПомещена;

	Элементы.ФормаПроверитьИсправлениеОшибокВВетке.Видимость = ВеткаМожетБытьПомещена 
						И Объект.РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВGitРепозитории");
						
	Если Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаДляИсправленияОшибок")
		И Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаТехническогоПроекта") Тогда
		Элементы.ФормаЗагрузитьИзмененияМетаданных.Видимость = Ложь;
		Элементы.ФормаОчиститьИзмененияМетаданных.Видимость = Ложь;
	Иначе	
		Элементы.ФормаЗагрузитьИзмененияМетаданных.Видимость = Истина;
		Элементы.ФормаОчиститьИзмененияМетаданных.Видимость = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовТестирования()
	
	ВидимостьТестирования = ЗначениеЗаполнено(Объект.ДатаНачалаТестирования) 
												ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется");
	Элементы.ОткрытьБлижайшийЗапуск.Видимость = ВидимостьТестирования И Элементы.ОткрытьБлижайшийЗапуск.Видимость;
	Элементы.ОткрытьПоследнийЗапуск.Видимость = ВидимостьТестирования;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСтатуса()
	Элементы.ФормаВернутьВРазработку.Видимость = Ложь;
	Элементы.ФормаНаправитьНаТестирование.Видимость = Ложь;
	Элементы.ФормаНаправитьНаТестирование.Заголовок = НСтр("ru='Направить на тестирование'");
	Элементы.ФормаПоместить.Видимость = Ложь;
	Элементы.ФормаЗаморозить.Видимость = Ложь;
	Элементы.ГруппаСтатусы.Подсказка = "";
	
	ВеткаМожетБытьПомещена = Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта") 
	                         И Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии");
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается") Тогда
		Элементы.ФормаНаправитьНаТестирование.Видимость = Истина;
		Элементы.ФормаЗаморозить.Видимость = Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Заморожена") Тогда
		Элементы.ФормаВернутьВРазработку.Видимость = Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
		Элементы.ФормаВернутьВРазработку.Видимость = Истина;
		Элементы.ФормаПоместить.Видимость = ВеткаМожетБытьПомещена;
		Элементы.ФормаПоместить.Доступность = ПользовательМожетУправлятьВетками;
		Если НЕ ПользовательМожетУправлятьВетками И ВеткаМожетБытьПомещена Тогда
			Элементы.ГруппаСтатусы.Подсказка = НСтр("ru='Чтобы поместить ветку, обратитесь к уполномоченному пользователю.'");
			Элементы.ГруппаСтатусы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена") Тогда
		Элементы.ФормаНаправитьНаТестирование.Видимость = Истина;
		Элементы.ФормаНаправитьНаТестирование.Заголовок = НСтр("ru='Вернуть на тестирование'");
		Элементы.ФормаНаправитьНаТестирование.Доступность = ПользовательМожетУправлятьВетками;
		Элементы.ГруппаСтатусы.Доступность = ПользовательМожетУправлятьВетками;
		Если НЕ ПользовательМожетУправлятьВетками Тогда
			Элементы.ГруппаСтатусы.Подсказка = НСтр("ru='Чтобы изменить помещенную ветку, обратитесь к уполномоченному пользователю.'");
			Элементы.ГруппаСтатусы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьКомандыСозданияВетки(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИзменениеРазрешено = УправлениеДоступом.ИзменениеРазрешено(Объект.Ссылка);
		Если НЕ ИзменениеРазрешено Тогда
			Элементы.ГруппаСтатусы.Доступность = ИзменениеРазрешено;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыВеток.Помещена
		ИЛИ Объект.Статус = Перечисления.СтатусыВеток.Разрабатывается
		ИЛИ Объект.Статус = Перечисления.СтатусыВеток.Тестируется Тогда
		Элементы.ГруппаСостояниеТестирования.Видимость = Истина;
	Иначе	
		Элементы.ГруппаСостояниеТестирования.Видимость = Ложь;
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкаТестированияДляВетки(Тип, Ответственный)
	Возврат Справочники.Ветки.НастройкаТестированияДляВетки(Тип, Ответственный);
КонецФункции

&НаСервереБезКонтекста
Функция СрочнаяВеткаДляТестирования(Ветка)
	Возврат Справочники.Ветки.СрочнаяВеткаДляТестирования(Ветка);
КонецФункции

&НаСервере
Процедура ПроектПриИзмененииНаСервере()
	Если Объект.Владелец.РежимРазработки <> Перечисления.РежимРазработки.БезИзменений
		ИЛИ Объект.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта Тогда
		Объект.РежимРазработки = Объект.Владелец.РежимРазработки;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Источник) И Объект.Источник.Владелец <> Объект.Владелец Тогда
		Объект.Источник = Справочники.Ветки.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Приемник) И Объект.Приемник.Владелец <> Объект.Владелец Тогда
		Объект.Приемник = Справочники.Ветки.ПустаяСсылка();
	КонецЕсли;
	Элементы.ГруппаТестирование.Видимость = Объект.Владелец.ЗапускатьАвтоматическоеТестирование И ПолучитьФункциональнуюОпцию("ИспользоватьТестирование");
	Элементы.ФормаГруппаЗапускТестирования.Видимость = Элементы.ГруппаТестирование.Видимость 
														И ПравоДоступа("Добавление", Метаданные.Документы.ЗапускТестирования);
	Элементы.ДатаНачалаТестирования.Видимость = Элементы.ГруппаТестирование.Видимость;
														
	ЗначениеСпискаВыбора = Элементы.РежимРазработки.СписокВыбора.НайтиПоЗначению(Перечисления.РежимРазработки.БезИзменений);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "РежимРазработки") <> Перечисления.РежимРазработки.БезИзменений
		И ЗначениеСпискаВыбора <> Неопределено Тогда
		Элементы.РежимРазработки.СписокВыбора.Удалить(ЗначениеСпискаВыбора);
	ИначеЕсли ЗначениеСпискаВыбора = Неопределено Тогда
		Элементы.РежимРазработки.СписокВыбора.Добавить(Перечисления.РежимРазработки.БезИзменений);
	КонецЕсли;
	ПользовательМожетУправлятьВетками = УправлениеДоступомСППР.РольДоступнаПоПроекту("УправлениеВетками", Объект.Владелец);

	ПрочитатьИнформациюОСборках();
	УстановитьВидимостьИнформацииОСборках();
	УстановитьВидимостьКомандыСозданияВетки(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементаИмяВеткиИсходяИзВариантаВедения()
	
	Если Объект.РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВGitРепозитории") Тогда
		Элементы.ИмяВетки.Заголовок = НСтр("ru='Имя ветки в Git'");
		Элементы.ИмяВетки.КнопкаВыбора = Неопределено;
		Элементы.ИмяВетки.ПодсказкаВвода = НСтр("ru='Имя ветки в Git репозитории'");
	ИначеЕсли Объект.РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВХранилище") Тогда 
		Элементы.ИмяВетки.Заголовок = НСтр("ru='Адрес хранилища'");
		Элементы.ИмяВетки.КнопкаВыбора = Истина;
		Элементы.ИмяВетки.ПодсказкаВвода = НСтр("ru='Адрес хранилища или каталог файловой системы'");
	КонецЕсли;
	УстановитьВидимостьКомандыСозданияВетки(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКомандыСозданияВетки(Форма)
	
	ВеткаМожетБытьПомещена = Форма.Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта") 
	                         И Форма.Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии");
	
	Форма.Элементы.ФормаСоздатьВетку.Видимость = ВеткаМожетБытьПомещена
		И Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается")
		И Форма.Объект.РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВGitРепозитории");
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьИспользованиеВетки()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ВерсииТехническиеПроектыИспользующиеВетку.Очистить();
	Элементы.ОтображениеСпискаВерсийТехническихПроектов.Видимость = Ложь;
	
	Если Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта") 
		ИЛИ Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии") Тогда
		ВерсииТехническиеПроектыИспользующиеВетку.ЗагрузитьЗначения(ВерсииИспользующиеВетку(Объект.Ссылка));
	ИначеЕсли Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаТехническогоПроекта") Тогда 
		ВерсииТехническиеПроектыИспользующиеВетку.ЗагрузитьЗначения(ТехническиеПроектыИспользующиеВетку(Объект.Ссылка));
	КонецЕсли;
	Если ВерсииТехническиеПроектыИспользующиеВетку.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОтображениеСпискаВерсийТехническихПроектов.Видимость = Истина;
	ОтображениеСпискаВерсийТехническихПроектов = "";
	Для Каждого ЗначениеСписка из ВерсииТехническиеПроектыИспользующиеВетку Цикл
		Если ЗначениеЗаполнено(ОтображениеСпискаВерсийТехническихПроектов) Тогда
			Префикс = "; ";
		КонецЕсли;
		ОтображениеСпискаВерсийТехническихПроектов = ОтображениеСпискаВерсийТехническихПроектов + Префикс + Строка(ЗначениеСписка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТехническиеПроектыИспользующиеВетку(Ветка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехническиеПроекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ветка = &Ветка
	|	И НЕ ТехническиеПроекты.ПометкаУдаления"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервереБезКонтекста
Функция ВерсииИспользующиеВетку(Ветка)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Ветка = &Ветка
	|	И НЕ ВерсииПроекта.ПометкаУдаления"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаСервере
Функция ВеткаУдаленаНаСервере()
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Имя)
		ИЛИ Объект.РежимРазработки <> Перечисления.РежимРазработки.ВGitРепозитории
		ИЛИ (Объект.Статус <> Перечисления.СтатусыВеток.Помещена 
		И Объект.Статус <> Перечисления.СтатусыВеток.Заморожена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Ветки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	Ветки.Ссылка <> &Ветка
	|	И Ветки.Имя = &Имя
	|	И НЕ Ветки.ПометкаУдаления"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Имя", Объект.Имя);
	Выборка= Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПоменятьСтатус(НовыйСтатус)
	ОчиститьСообщения();
	
	Если НЕ ПользовательМожетУправлятьВетками
		И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена") 
		ИЛИ НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена")) Тогда
		ВызватьИсключение НСтр("ru='Недостаточно прав для изменения статуса.'");
	КонецЕсли;
	
	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
		Объект.ЗагружатьИзмененияОбъектовМетаданных = Истина;
	КонецЕсли;	
	
	ВеткаМожетБытьПомещена = Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта") 
	                         И Объект.Тип <> ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии");

	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") 
		И ВеткаМожетБытьПомещена И НЕ ЗначениеЗаполнено(Объект.Приемник) Тогда
		// Нельзя передать на тестирование ветку, без ветки приемника
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Нельзя передать на тестирование ветку, у которой не заполнен Приемник.'"),, "Приемник");
		Возврат;
	КонецЕсли;
	
	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется")
		ИЛИ НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Заморожена") Тогда
		Ответ = ПоменятьСтатусНаСервере(НовыйСтатус);
		Если НЕ Ответ.ПроверкаВыполненаУспешно Тогда
			Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") 
				И (Ответ.ОшибкиУКоторыхНетКоммитов.Количество() > 0 ИЛИ  Ответ.ОшибкиКоторыеНеУказаныВВетке.Количество() > 0 ) Тогда
				Ответ.Вставить("Ветка", Объект.Ссылка);
				ОповещениеУстановка = Новый ОписаниеОповещения("ПоменятьСтатусОкончание", ЭтаФорма, Новый Структура("Статус", НовыйСтатус));
				ОткрытьФорму("Справочник.Ветки.Форма.ПроверкаИсправленияОшибокВВетке", Ответ, ЭтаФорма,,,,ОповещениеУстановка);
			Иначе
				Если НЕ ПользовательМожетУправлятьВетками Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Не удается поменять статус.'") 
					+ Символы.ПС + Ответ.Сообщение,, "Статус");
					
				Иначе
					Оповещение = Новый ОписаниеОповещения("ПоменятьСтатусОкончание", ЭтаФорма, 
						Новый Структура("ПринудительнаяПередачаНаТестирование, Статус", Истина, НовыйСтатус));
					ТекстВопроса = СтрШаблон(НСтр("ru = 'При проверке возникла ошибка: %1Все равно изменить статус?'"), 
									Ответ.Сообщение + Символы.ПС);
					ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,
						КодВозвратаДиалога.Да);
				КонецЕсли;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Статус = НовыйСтатус;
	Модифицированность = Истина;
	СтатусПриИзменении();
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
		Элементы.ГруппаСостояниеТестирования.Видимость = Истина;
	Иначе	
		Элементы.ГруппаСостояниеТестирования.Видимость = Ложь;
	КонецЕсли;	 

КонецПроцедуры

&НаСервере
Функция ПоменятьСтатусНаСервере(НовыйСтатус)
	
	ПроверкаВыполненаУспешно = Истина;
	Сообщение = "";
	Ответ = Новый Структура("ПроверкаВыполненаУспешно, Сообщение", ПроверкаВыполненаУспешно, Сообщение);

	Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
		Ответ = Справочники.Ветки.ПроверкаИсправленияОшибокВВетке(Объект.Ссылка);
	ИначеЕсли НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Заморожена") Тогда
		Ответ = Справочники.Ветки.ПроверкаПередЗакрытиемВетки(Объект.Ссылка);
	КонецЕсли;

	Возврат Ответ;

КонецФункции

&НаКлиенте
Процедура ПоменятьСтатусОкончание(РезультатДействия, ДополнительныеПараметры) Экспорт
	Результат = Новый Структура;
	Если ТипЗнч(РезультатДействия)=Тип("Структура") Тогда
		Результат = РезультатДействия;
	ИначеЕсли РезультатДействия = КодВозвратаДиалога.Да Тогда
		Результат = ДополнительныеПараметры;
	КонецЕсли;
	НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется");
	Если Результат.Свойство("Статус") И ЗначениеЗаполнено(Результат.Статус) Тогда
		НовыйСтатус = Результат.Статус;
	КонецЕсли;

	Если Результат.Свойство("ВсеИсправлено") И Результат.ВсеИсправлено Тогда
		ПоменятьСтатус(НовыйСтатус)
	ИначеЕсли Результат.Свойство("ПринудительнаяПередачаНаТестирование") 
		И Результат.ПринудительнаяПередачаНаТестирование Тогда
		Объект.Статус = НовыйСтатус;
		Модифицированность = Истина;
		СтатусПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении()
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена") Тогда
		Объект.ДатаПомещения = Дата(1, 1, 1, 0, 0, 0);
		Элементы.ДатаПомещения.Доступность = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Объект.Приемник) 
			И НЕ ЗначениеЗаполнено(Объект.ДатаПомещения) Тогда
			Объект.ДатаПомещения = ТекущаяДата();
		КонецЕсли;
		Элементы.ДатаПомещения.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НастройкаЗапускаТестирования) Тогда
			Объект.НастройкаЗапускаТестирования = НастройкаТестированияДляВетки(Объект.Тип, Объект.Ответственный);
		КонецЕсли;
		СрочнаяВетка = ЗначениеЗаполнено(Объект.Ссылка) И СрочнаяВеткаДляТестирования(Объект.Ссылка);
		Если СрочнаяВетка Тогда
			Объект.ПриоритетТестирования = ПредопределенноеЗначение("Перечисление.ПриоритетыТестированияВеток.Срочный");
			Объект.СрочностьИсправленияОшибок = ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок.Немедленно");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаТестирования) Тогда
			Объект.ДатаНачалаТестирования = ТекущаяДата();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВариантЗапускаТестов) Тогда
			Если Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ОсновнаяВеткаПроекта")
				ИЛИ Объект.Тип = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаВерсии") Тогда
				Объект.ВариантЗапускаТестов = ПредопределенноеЗначение("Перечисление.ВариантыЗапускаТестов.ВсеВсегда");
			Иначе
				Объект.ВариантЗапускаТестов = ПредопределенноеЗначение("Перечисление.ВариантыЗапускаТестов.ВсеТолькоВПервыйРаз");
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	ОбработатьИзменениеСтатусаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИнформациюОСборках()
	
	ИнформацияОСборках = Справочники.Ветки.ИнформацияОСборкахВключающихИзмененияВетки(Объект.Ссылка);
	
	СборкаВключающаяИзменения = ИнформацияОСборках.Сборка;
	ПубликуемаяСборкаВключающаяИзменения = ИнформацияОСборках.ПубликуемаяСборка;
	ДатаСборки = ИнформацияОСборках.ДатаСборки;
	ДатаПубликуемойСборки = ИнформацияОСборках.ДатаПубликацииСборки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформацииОСборках()
	
	ИмеетсяСборка = ЗначениеЗаполнено(СборкаВключающаяИзменения);
	ИмеетсяПубликуемаяСборка = ЗначениеЗаполнено(ПубликуемаяСборкаВключающаяИзменения);
	
	ДанныеОСборкахДоступны = Объект.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта И ЗначениеЗаполнено(Объект.Ссылка)
	                          И Объект.Статус = Перечисления.СтатусыВеток.Помещена;
							  
	Элементы.ДекорацияИзмененияВключеныВСборку.Видимость = ДанныеОСборкахДоступны И ИмеетсяСборка;
	Элементы.СборкаВключающаяИзменения.Видимость = ДанныеОСборкахДоступны И ИмеетсяСборка;
	Элементы.ДатаСборки.Видимость = ДанныеОСборкахДоступны И ИмеетсяСборка;
	
	Элементы.ДекорацияИзмененияОпубликованыВСборке.Видимость = ДанныеОСборкахДоступны И ИмеетсяПубликуемаяСборка;
	Элементы.ПубликуемаяСборкаВключающаяИзменения.Видимость = ДанныеОСборкахДоступны И ИмеетсяПубликуемаяСборка;
	Элементы.ДатаПубликуемойСборки.Видимость = ДанныеОСборкахДоступны И ИмеетсяПубликуемаяСборка;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаВеткиНаСервере()
	
	ОбновитьИспользованиеВетки();
	ПрочитатьИнформациюОСборках();
	УстановитьВидимостьИнформацииОСборках();
	УстановитьВидимостьКомандыСозданияВетки(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатусаНаСервере()
	
	ПрочитатьИнформациюОСборках();
	УстановитьВидимостьИнформацииОСборках();
	УстановитьВидимостьЭлементовСтатуса();
	ВидимостьЭлементовГруппыЗагрузкаИзмененийОбъектовМетаданных();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПриемникаНаСервере()
	
	ПрочитатьИнформациюОСборках();
	УстановитьВидимостьИнформацииОСборках();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыПомещенияНаСервере()
	
	ПрочитатьИнформациюОСборках();
	УстановитьВидимостьИнформацииОСборках();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапросНаСлияниеИОбновитьСтатус(НовыйСтатус)
	
	Если НЕ ПроверятьЗапросНаСлияниеПриПередачеВеткиВТестирование(Объект.Владелец) Тогда
		ПоменятьСтатус(НовыйСтатус);
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторЗапросаНаСлияние) Тогда
		ДанныеОткрытогоЗапросаНаСлияние = ДанныеОткрытогоЗапросаНаСлияние(Объект.Владелец, Объект.Имя, Объект.Приемник);
		//Тут надо проверить, что ид реквеста всё ещё тот же
		
		Если ДанныеОткрытогоЗапросаНаСлияние = Неопределено Тогда
			СоздатьНовыйЗапросНаСлияниеИУстановитьСтатус(НовыйСтатус, НСтр("ru = 'Для последующего помещения ветки нужен запрос на помещение в системе контроля версий. Создать?'"));
			Возврат;
		ИначеЕсли Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0") <> Объект.ИдентификаторЗапросаНаСлияние Тогда
			ПривязатьУжеОткрытыйЗапросНаСлияние(НовыйСтатус, ДанныеОткрытогоЗапросаНаСлияние);
			Возврат;
		КонецЕсли;	 
		
		ОбновитьГиперссылкуЗапросаНаСлияние();
		ПоменятьСтатус(НовыйСтатус);
		Возврат;
	КонецЕсли;	 
	
	ДанныеОткрытогоЗапросаНаСлияние = ДанныеОткрытогоЗапросаНаСлияние(Объект.Владелец, Объект.Имя, Объект.Приемник);
	
	Если ТипЗнч(ДанныеОткрытогоЗапросаНаСлияние) = Тип("Структура") Тогда
		ПривязатьУжеОткрытыйЗапросНаСлияние(НовыйСтатус, ДанныеОткрытогоЗапросаНаСлияние);
		Возврат;
	КонецЕсли;	
	
	СоздатьНовыйЗапросНаСлияниеИУстановитьСтатус(НовыйСтатус, НСтр("ru = 'Для последующего помещения ветки нужен запрос на помещение в системе контроля версий. Создать?'"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытьЗапросНаСлияниеИОбновитьСтатус(НовыйСтатус)
	
	Если НЕ ПроверятьЗапросНаСлияниеПриПередачеВеткиВТестирование(Объект.Владелец) Тогда
		ПоменятьСтатус(НовыйСтатус);
		Возврат;
	КонецЕсли;	
	
	ДанныеОткрытогоЗапросаНаСлияние = Неопределено;
	Попытка
		ДанныеОткрытогоЗапросаНаСлияние = ДанныеОткрытогоЗапросаНаСлияние(Объект.Владелец, Объект.Имя, Объект.Приемник);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Если Найти(ТекстОшибки, "не найдена на гит сервере") = 0 Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
	КонецПопытки;
	
	Если ДанныеОткрытогоЗапросаНаСлияние = Неопределено Тогда
		ПоменятьСтатус(НовыйСтатус);
		Возврат;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторЗапросаНаСлияние) Тогда
		//Тут надо проверить, что ид реквеста всё ещё тот же
		
		Если Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0") <> Объект.ИдентификаторЗапросаНаСлияние Тогда
			Объект.ИдентификаторЗапросаНаСлияние = Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0");
		КонецЕсли;	 
		
		ОбновитьГиперссылкуЗапросаНаСлияние();
	КонецЕсли;	 
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'Для заморозки ветки необходимо закрыть запрос на помещение в системе контроля версий: '")));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0")
		,,,,ГиперссылкаНаЗапросНаСлияние(Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0"))));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Сделать это?'")));
	ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
	
	ЗакрытьЗапросНаСлияниеИУстановитьСтатус(НовыйСтатус, ТекстВопроса, ДанныеОткрытогоЗапросаНаСлияние.iid);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьУжеОткрытыйЗапросНаСлияние(НовыйСтатус, ДанныеОткрытогоЗапросаНаСлияние)
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДанныеОткрытогоЗапросаНаСлияние", ДанныеОткрытогоЗапросаНаСлияние);
	ПараметрыОповещения.Вставить("НовыйСтатус", НовыйСтатус);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОДобавленииИдСуществующегоЗапросаНаСлиянии", 
		ЭтотОбъект, ПараметрыОповещения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обнаружен уже открытый запрос на помещение ветки: '")));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0")
		,,,,ГиперссылкаНаЗапросНаСлияние(Формат(ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0"))));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Использовать его?'")));
	ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьНовыйЗапросНаСлияниеИУстановитьСтатус(НовыйСтатус, Текст)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("НовыйСтатус", НовыйСтатус);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОСозданииНовогоЗапросаНаСлияние", ЭтотОбъект, ПараметрыОповещения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Текст);
	ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗакрытьЗапросНаСлияниеИУстановитьСтатус(НовыйСтатус, Текст, ИдЗапросаНаСлияние)
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("НовыйСтатус", НовыйСтатус);
	ПараметрыОповещения.Вставить("ИдЗапросаНаСлияние", ИдЗапросаНаСлияние);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОЗакрытииЗапросаНаСлияние", ЭтотОбъект, ПараметрыОповещения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Текст);
	ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОСозданииНовогоЗапросаНаСлияние(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПутьКФайлуТокена = ПутьКФайлуТокена();
		ТокенПользователя = ТестированиеКлиент.ТокенПользователя(ПутьКФайлуТокена);
		РезультатСоздания = НовыйЗапросНаСлияниеСлужебный(ТокенПользователя);
		Если РезультатСоздания.Ошибка Тогда
			ВызватьИсключение РезультатСоздания.ТекстОшибки;
		КонецЕсли;	
		
		ДанныеЗапросаНаСлияние = РезультатСоздания.ДанныеЗапросаНаСлияние;
		Объект.ИдентификаторЗапросаНаСлияние = Формат(ДанныеЗапросаНаСлияние.iid, "ЧГ=; ЧН=0");
		Модифицированность = Истина;
		ОбновитьГиперссылкуЗапросаНаСлияние();
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Создан запрос на помещение: '")));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеЗапросаНаСлияние.iid, "ЧГ=; ЧН=0")
			,,,,ГиперссылкаНаЗапросНаСлияние(Формат(ДанныеЗапросаНаСлияние.iid, "ЧГ=; ЧН=0"))));
		ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
		ПоказатьПредупреждение(Новый ОписаниеОповещения, ТекстВопроса);
		
		ПоменятьСтатус(ДополнительныеПараметры.НовыйСтатус);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗакрытииЗапросаНаСлияние(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПутьКФайлуТокена = ПутьКФайлуТокена();
		ТокенПользователя = ТестированиеКлиент.ТокенПользователя(ПутьКФайлуТокена);
		РезультатСоздания = ЗакрытьЗапросНаСлияниеСлужебный(ТокенПользователя, ДополнительныеПараметры);
		Если РезультатСоздания.Ошибка Тогда
			ВызватьИсключение РезультатСоздания.ТекстОшибки;
		КонецЕсли;	
		
		ДанныеЗапросаНаСлияние = РезультатСоздания.ДанныеЗапросаНаСлияние;
		Объект.ИдентификаторЗапросаНаСлияние = Формат(ДанныеЗапросаНаСлияние.iid, "ЧГ=; ЧН=0");
		Модифицированность = Истина;
		ОбновитьГиперссылкуЗапросаНаСлияние();
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Закрыт запрос на помещение: '")));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ДанныеЗапросаНаСлияние.iid, "ЧГ=; ЧН=0")
			,,,,ГиперссылкаНаЗапросНаСлияние(Формат(ДанныеЗапросаНаСлияние.iid, "ЧГ=; ЧН=0"))));
		ТекстВопроса = Новый ФорматированнаяСтрока(МассивСтрок);
		ПоказатьПредупреждение(Новый ОписаниеОповещения, ТекстВопроса);
		
		ПоменятьСтатус(ДополнительныеПараметры.НовыйСтатус);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОДобавленииИдСуществующегоЗапросаНаСлиянии(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ИдентификаторЗапросаНаСлияние = Формат(ДополнительныеПараметры.ДанныеОткрытогоЗапросаНаСлияние.iid, "ЧГ=; ЧН=0");
		Если ДополнительныеПараметры.НовыйСтатус <> Неопределено Тогда
			ПоменятьСтатус(ДополнительныеПараметры.НовыйСтатус);
		КонецЕсли;	 
		Модифицированность = Истина;
		ОбновитьГиперссылкуЗапросаНаСлияние();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверятьЗапросНаСлияниеПриПередачеВеткиВТестирование(Проект)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ПроверятьНаличиеЗапросаНаПомещениеПриСменеСтатусаВетки")
			И ПолучитьФункциональнуюОпцию("ИспользоватьТестирование");
КонецФункции	 

&НаСервереБезКонтекста
Функция ДанныеОткрытогоЗапросаНаСлияние(Проект, ИмяВетки, ВеткаПриемник)
	
	Возврат ТестированиеЗапускТестирования.ДанныеОткрытогоЗапросаНаСлияниеПоВетке(Проект, ИмяВетки,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВеткаПриемник, "Имя"));
	
КонецФункции	 

&НаКлиенте
Процедура ОбновитьГиперссылкуЗапросаНаСлияние()
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторЗапросаНаСлияние) Тогда
		Элементы.СсылкаНаЗапросНаСлияниеВРепозитории.Видимость = Ложь;
		Возврат;
	КонецЕсли;	 
	
	Если НЕ ПроверятьЗапросНаСлияниеПриПередачеВеткиВТестирование(Объект.Владелец) Тогда
		Элементы.СсылкаНаЗапросНаСлияниеВРепозитории.Видимость = Ложь;
		Возврат;
	КонецЕсли;	
	
	Элементы.СсылкаНаЗапросНаСлияниеВРепозитории.Видимость = Истина;
	
	СсылкаНаЗапросНаСлияниеВРепозитории = СсылкаНаЗапросНаСлияниеВРепозитории();
	
КонецПроцедуры 

&НаСервере
Функция ГиперссылкаНаЗапросНаСлияние(ИдентификаторЗапросаНаСлияние = Неопределено)
	Если ИдентификаторЗапросаНаСлияние = Неопределено Тогда
		ИдентификаторЗапросаНаСлияние = Объект.ИдентификаторЗапросаНаСлияние;
	КонецЕсли;	 
	
	Возврат Тестирование.ГиперссылкаНаЗапросНаСлияние(Объект.Владелец, ИдентификаторЗапросаНаСлияние);
	
КонецФункции	 

&НаСервере
Функция СсылкаНаЗапросНаСлияниеВРепозитории()
	ГиперссылкаНаЗапросНаСлияние = ГиперссылкаНаЗапросНаСлияние();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		СтрШаблон(НСтр("ru = 'Открыть запрос на помещение №%1'"),
		УбратьСлужебныеСимволыИзИдентификатораЗапросаНаСлияние(Объект.ИдентификаторЗапросаНаСлияние)),,,,ГиперссылкаНаЗапросНаСлияние));
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
КонецФункции	 

&НаСервере
Функция НовыйЗапросНаСлияниеСлужебный(ТокенПользователя)
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Проект", Объект.Владелец);
	ПараметрыСоздания.Вставить("ИмяВеткиИсточник", Объект.Имя);
	ПараметрыСоздания.Вставить("ИмяВеткиПриемник", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Приемник, "Имя"));
	ПараметрыСоздания.Вставить("ТокенПользователя", ТокенПользователя);
	ПараметрыСоздания.Вставить("ВеткаПриемник", Объект.Приемник);
	ПараметрыСоздания.Вставить("Описание", НСтр("ru='Направление ветки на тестирование.'"));
	ПараметрыСоздания.Вставить("Заголовок", Объект.Наименование);
	
	Возврат Тестирование.НовыйЗапросНаСлияние(ПараметрыСоздания);
КонецФункции	 

&НаСервере
Функция ЗакрытьЗапросНаСлияниеСлужебный(ТокенПользователя, ДополнительныеПараметры)
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Проект", Объект.Владелец);
	ПараметрыСоздания.Вставить("ИмяВеткиИсточник", Объект.Имя);
	ПараметрыСоздания.Вставить("ИмяВеткиПриемник", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Приемник, "Имя"));
	ПараметрыСоздания.Вставить("ТокенПользователя", ТокенПользователя);
	ПараметрыСоздания.Вставить("ИдЗапросаНаСлияние", ДополнительныеПараметры.ИдЗапросаНаСлияние);
	ПараметрыСоздания.Вставить("ВеткаПриемник", Объект.Приемник);
	ПараметрыСоздания.Вставить("Описание", НСтр("ru='Направление ветки на тестирование.'"));
	ПараметрыСоздания.Вставить("Заголовок", Объект.Наименование);
	
	Возврат Тестирование.ЗакрытьЗапросНаСлияние(ПараметрыСоздания);
КонецФункции

&НаСервереБезКонтекста
Функция ПутьКФайлуТокена()
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Тестирование", "ФайлСодержащийТокен");
КонецФункции	 

&НаСервереБезКонтекста
Функция ОбновитьСостояниеТестированияСервер(Ветка)
	
	Возврат ТестированиеЗагрузкаРезультатовТестирования.ОбновитьСостояниеТестированияВетки(Ветка);
	
КонецФункции	 

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
    УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Функция ПредшественникСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Ответственный = &Ответственный
		|	И Ветки.Приемник = &Приемник
		|	И Ветки.СрочностьИсправленияОшибок = &СрочностьИсправленияОшибок
		|	И Ветки.Тип = &Тип
		|	И Ветки.Ссылка <> &Ссылка
		|	И Ветки.Статус = &Статус
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ветки.ДатаНачалаТестирования";
	
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	Запрос.УстановитьПараметр("Приемник", Объект.Приемник);
	Запрос.УстановитьПараметр("СрочностьИсправленияОшибок", Объект.СрочностьИсправленияОшибок);
	Запрос.УстановитьПараметр("Тип", Объект.Тип);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыВеток.Тестируется);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции	

&НаСервере
Функция УбратьСлужебныеСимволыИзИдентификатораЗапросаНаСлияние(Знач Стр)
	Возврат СтрЗаменить(Стр, Символы.НПП, "");
КонецФункции

&НаСервере
Процедура ОповеститьВеткиДляКоторыхДаннаяВеткаЯвляетсяПредшественником()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	Ветки.Предшественник = &Предшественник";
	
	Запрос.УстановитьПараметр("Предшественник", Объект.Ссылка);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Если Результат.Количество() > 0 Тогда
		ТестированиеЗагрузкаРезультатовТестирования.ДобавитьОповещенияДляВеток(Результат);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуРазрабатываемыхМетаданных()
	
	Перем ПараметрыЗагрузки, ФормаМодифицирована;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РежимРазработки = ПредопределенноеЗначение("Перечисление.РежимРазработки.ВGitРепозитории") Тогда
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Тестируется") Тогда
			ТекСообщения = НСтр("ru='Для веток в статусе ""Тестируется"" загрузка изменений объектов метаданных происходит с помощью регламентного задания.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекСообщения);
		ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается") Тогда
			Объект.ЗагружатьИзмененияОбъектовМетаданных = Истина;
			ТекСообщения = НСтр("ru='Установлен признак, что для данной ветки будет происходить загрузка изменений объектов метаданных с помощью регламентного задания.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекСообщения, , "ЗагружатьИзмененияОбъектовМетаданных", "Объект");
			Модифицированность = Истина;
		Иначе	
			ТекСообщения = СтрШаблон(НСтр("ru='Для веток в статусе ""%1"" не поддерживатеся загрузка изменений объектов метаданных.'"), Объект.Статус);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекСообщения);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;	
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Проект", Объект.Владелец);
	ПараметрыЗагрузки.Вставить("Ветка", Объект.Ссылка);
	ПараметрыЗагрузки.Вставить("ЗагрузкаИзмененийИзФормыВетки", Истина);
	
	ФормаМодифицирована = Модифицированность;
	
	ОткрытьФорму("Обработка.ЗагрузкаМетаданных.Форма", 
		ПараметрыЗагрузки, 
		ЭтаФорма,
		УникальныйИдентификатор,,,, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	Если Не ФормаМодифицирована Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДатаЗагрузкиМетаданных()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеЗагрузкиМетаданныхВВетках.ДатаЗагрузки КАК ДатаЗагрузки
		|ИЗ
		|	РегистрСведений.СостояниеЗагрузкиМетаданныхВВетках КАК СостояниеЗагрузкиМетаданныхВВетках
		|ГДЕ
		|	СостояниеЗагрузкиМетаданныхВВетках.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ДатаЗагрузки;
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции	

&НаКлиенте
Процедура ЗагрузитьРазрабатываемыеМетаданныеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Записать();
	Иначе
		Возврат;
    КонецЕсли;
    
    ВыполнитьЗагрузкуРазрабатываемыхМетаданных();

КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеПредшественникПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
    
	ПоменятьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Разрабатывается"));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСогласованияИзменений()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА ИзмененияВВетках.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.Согласовано)
	|				ТОГДА ИзмененияВВетках.Согласующий
	|		КОНЕЦ) КАК КоличествоСогласовано,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА ИзмененияВВетках.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.НеСогласовано)
	|				ТОГДА ИзмененияВВетках.Согласующий
	|		КОНЕЦ) КАК КоличествоНеСогласовано,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА ИзмененияВВетках.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования)
	|				ТОГДА ИзмененияВВетках.Согласующий
	|		КОНЕЦ) КАК КоличествоТребуетСогласования,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА ИзмененияВВетках.СтатусСогласования = ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.НеТребуетСогласования)
	|				ТОГДА ИзмененияВВетках.Согласующий
	|		КОНЕЦ) КАК КоличествоНеТребуетСогласования,
	|	КОЛИЧЕСТВО(ВЫБОР
	|			КОГДА ИзмененияВВетках.Согласующий = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА ИзмененияВВетках.Согласующий
	|		КОНЕЦ) КАК КоличествоНеУказанСогласующий,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ИзмененияВВетках.ОбъектМетаданных.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА ИзмененияВВетках.ОбъектМетаданных
	|		КОНЕЦ) КАК КоличествоНеУказанОтветственный
	|ИЗ
	|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
	|ГДЕ
	|	ИзмененияВВетках.Ветка = &Ветка"
	;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИзмененияНеСогласовано         = 0;
		ИзмененияСогласовано           = 0;
		ИзмененияНеТребуетСогласования = 0;
		ИзмененияТребуетСогласования   = 0;
		ИзмененияНеУказанСогласующий   = 0;
		ИзмененияНеУказанОтветственный = 0;
	Иначе
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ветка", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ИзмененияНеСогласовано         = Выборка.КоличествоНеСогласовано;
			ИзмененияСогласовано           = Выборка.КоличествоСогласовано;
			ИзмененияНеТребуетСогласования = Выборка.КоличествоНеТребуетСогласования;
			ИзмененияТребуетСогласования   = Выборка.КоличествоТребуетСогласования;
			ИзмененияНеУказанСогласующий   = Выборка.КоличествоНеУказанСогласующий;
			ИзмененияНеУказанОтветственный = Выборка.КоличествоНеУказанОтветственный;
		Иначе
			ИзмененияНеСогласовано         = 0;
			ИзмененияСогласовано           = 0;
			ИзмененияНеТребуетСогласования = 0;
			ИзмененияТребуетСогласования   = 0;
			ИзмененияНеУказанСогласующий   = 0;
			ИзмененияНеУказанОтветственный = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКИзменениямВВетке(СтатусСогласования)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ветка", Объект.Ссылка);
	
	СтруктураБыстрогоОтбора = Новый Структура;
	
	СписокСтатусовСогласования = Новый СписокЗначений;
	СписокСтатусовСогласования.Добавить(СтатусСогласования);
	
	СтруктураБыстрогоОтбора.Вставить("СтатусСогласования", СписокСтатусовСогласования);
	СтруктураБыстрогоОтбора.Вставить("Согласующий", Неопределено);
	СтруктураБыстрогоОтбора.Вставить("Ответственный", Неопределено);
	СтруктураБыстрогоОтбора.Вставить("СтатусВетки", Неопределено);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыОткрытия.Вставить("КлюЧНазначенияИспользования", "ИзмененияВВеткеПоСтатусамСогласования");
	
	ОткрытьФорму("РегистрСведений.ИзмененияВВетках.Форма.ИзмененияВВетке", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОповеститьСогласующихПоИзменениямВВетке()
	
	Справочники.Ветки.ОповеститьСогласующихПоИзменениямВВетке(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПомещениеВетки()
	
	ПоменятьСтатус(ПредопределенноеЗначение("Перечисление.СтатусыВеток.Помещена"));
	ОповеститьВеткиДляКоторыхДаннаяВеткаЯвляетсяПредшественником();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработатьПомещениеВетки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьИзмененияБезСогласования()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЛожЬ;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИзмененияВВетках.Согласующий КАК Согласающий
	|ИЗ
	|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
	|ГДЕ
	|	ИзмененияВВетках.Ветка = &Ветка
	|	И ИзмененияВВетках.СтатусСогласования В (ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.НеСогласовано), ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования))"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Объект.Ссылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка .Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьИзмененияМетаданныхОкончание(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	Если РезультатДействия = КодВозвратаДиалога.Да Тогда
		ОчиститьИзмененияМетаданныхСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьИзмененияМетаданныхСервер()
	ТекСообщения = НСтр("ru='Ранее загруженные изменения по метаданным очищены.'");
	
	ЗаписьЖурналаРегистрации("ОчиститьИзмененияМетаданныхСервер",
								УровеньЖурналаРегистрации.Информация,,Объект.Ссылка,ТекСообщения);
	
	ЗагрузкаМетаданных.ОчиститьИзмененияМетаданныхПоВетке(Объект.Ссылка);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекСообщения;
	Сообщение.Сообщить();
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКИзменениямВВеткеБезУказанияСогласующего()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ветка", Объект.Ссылка);
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Согласующий", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	СтруктураБыстрогоОтбора.Вставить("Ответственный", Неопределено);
	СтруктураБыстрогоОтбора.Вставить("СтатусСогласования", Неопределено);
	СтруктураБыстрогоОтбора.Вставить("СтатусВетки", Неопределено);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыОткрытия.Вставить("ОтборНеУказанСогласующий", Истина);
	ПараметрыОткрытия.Вставить("КлюЧНазначенияИспользования", "ИзмененияВВеткеБезУказанияСогласующего");
	
	ОткрытьФорму("РегистрСведений.ИзмененияВВетках.Форма.ИзмененияВВетке", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКИзменениямВВеткеБезУказанияОтветственного()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Ветка", Объект.Ссылка);
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Ответственный", ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	СтруктураБыстрогоОтбора.Вставить("Согласующий", Неопределено);
	СтруктураБыстрогоОтбора.Вставить("СтатусСогласования", Неопределено);
	СтруктураБыстрогоОтбора.Вставить("СтатусВетки", Неопределено);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ПараметрыОткрытия.Вставить("ОтборНеУказанОтветственный", Истина);
	ПараметрыОткрытия.Вставить("КлюЧНазначенияИспользования", "ИзмененияВВеткеБезУказанияСогласующего");
	
	ОткрытьФорму("РегистрСведений.ИзмененияВВетках.Форма.ИзмененияВВетке", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьТестыИСоздатьЗапускТестирования()
	      
	Док = Документы.ЗапускТестирования.СоздатьДокумент();
	Док.Заполнить(Неопределено);
	Док.Дата = ТекущаяДата();
	Док.Ветка = Объект.Ссылка;
	Док.Проект = Объект.Владелец;
	Док.Настройка = Объект.НастройкаЗапускаТестирования;
	Док.ЗапуститьТестыВыполненныеСОшибкой = Истина;
	Док.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат Док.Ссылка;
	
КонецФункции	

&НаСервере
Функция СоздатьВеткуНаСервере()
	Возврат ТестированиеЗапускТестирования.СоздатьВеткуВGitLab(
		Объект.Владелец,
		Объект.Имя,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Источник, "Имя"));
КонецФункции

&НаСервереБезКонтекста
Функция ВВеткеЕстьИзмененияОМ(СсылкаВетка)
	
	Если НЕ ЗначениеЗаполнено(СсылкаВетка) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзмененияВВетках.Ветка КАК Ветка
		|ИЗ
		|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|ГДЕ
		|	ИзмененияВВетках.Ветка = &Ветка";
	
	Запрос.УстановитьПараметр("Ветка", СсылкаВетка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Истина;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Ложь;

КонецФункции	

&НаСервереБезКонтекста
Функция ГиперсылкаНаВетку(ИмяВетки, Проект)
	Возврат РаботаCGit.ПерейтиКВетке(ИмяВетки, Проект);
КонецФункции

&НаКлиенте
Процедура ЗавершитьПомещениеВетки()
	
	Если ЕстьИзмененияБезСогласования() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='В ветке имеются изменения метаданных без согласования. Продолжить?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбработатьПомещениеВетки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РежимРазработкиВетки(Ветка)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка, "РежимРазработки");
КонецФункции	

&НаСервере
Процедура ВидимостьЭлементовГруппыЗагрузкаИзмененийОбъектовМетаданных()
	
	Если Объект.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок ИЛИ Объект.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
		Если Объект.Статус = Перечисления.СтатусыВеток.Разрабатывается Тогда
			Элементы.ЗагружатьИзмененияОбъектовМетаданных.Видимость = Истина;
			Элементы.ЗагружатьИзмененияОбъектовМетаданных.Доступность = Истина;
		ИначеЕсли Объект.Статус = Перечисления.СтатусыВеток.Тестируется Тогда
			Элементы.ЗагружатьИзмененияОбъектовМетаданных.Видимость = Истина;
			Элементы.ЗагружатьИзмененияОбъектовМетаданных.Доступность = Ложь;
		Иначе	
			Элементы.ЗагружатьИзмененияОбъектовМетаданных.Видимость = Ложь;
			Элементы.ДатаЗагрузкиМетаданных.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ЗагружатьИзмененияОбъектовМетаданных.Видимость = Ложь;
		Элементы.ДатаЗагрузкиМетаданных.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусВетки(Ветка)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка,"Статус");
КонецФункции	

#КонецОбласти
