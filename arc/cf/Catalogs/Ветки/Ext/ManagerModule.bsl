#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("Владелец");
	НеРедактируемыеРеквизиты.Добавить("Статус");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

//Создает элемент справочника Ветка и заполняет реквизиты исходя из разрабатываемого объекта.
//
// Параметры:
//  РазрабатываемыйОбъект - СправочникСсылка.Проекты            - Проект, для которого создается основная ветка.
//                        - СправочникСсылка.ВерсииПроектов     - Версия, для которой создается ветка.
//                        - СправочникСсылка.ТехническиеПроекты - Технический проект, для которого создается ветка.
//                        - СправочникСсылка.Ошибки             - Ошибка, для которой создается ветка исправления.
//                        - СправочникСсылка.Ветки              - Ветка источник, для которой подчиненная ветка.
//  ДанныеЗаполнения      - Структура                           - Структура реквизитов, для переопределения значений по умолчанию.
// 
// Возвращаемое значение:
//  СправочникСсылка.Ветки - Созданная ветка.
//
Функция НоваяВетка(РазрабатываемыйОбъект=Неопределено, ДанныеЗаполнения=Неопределено) Экспорт
	
	Ветка = Справочники.Ветки.СоздатьЭлемент();
	ЗаполнитьРеквизитыВетки(Ветка, РазрабатываемыйОбъект, ДанныеЗаполнения);
	Ветка.Записать();
	Возврат Ветка.Ссылка;
	
КонецФункции

//Заполняет реквизиты ветки исходя из разрабатываемого объекта.
//
// Параметры:
//  Ветка                 - СправочникСсылка.Ветки              - Ветка, у которой будут заполняться реквизиты.
//  РазрабатываемыйОбъект - СправочникСсылка.Проекты            - Проект, для которого создается основная ветка.
//                        - СправочникСсылка.ВерсииПроектов     - Версия, для которой создается ветка.
//                        - СправочникСсылка.ТехническиеПроекты - Технический проект, для которого создается ветка.
//                        - СправочникСсылка.Ошибки             - Ошибка, для которой создается ветка исправления.
//                        - СправочникСсылка.Ветки              - Ветка источник, для которой подчиненная ветка.
//  ДанныеЗаполнения      - Структура                           - Структура реквизитов, для переопределения значений по умолчанию.
//
Процедура ЗаполнитьРеквизитыВетки(Ветка, РазрабатываемыйОбъект=Неопределено, ДанныеЗаполнения=Неопределено) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
	КонецЕсли;
	
	Ветка.Ответственный = Пользователи.ТекущийПользователь();
	Ветка.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ветка.Ответственный, "Подразделение");
	Ветка.ДатаСоздания = ТекущаяДата();
	Ветка.Статус = Перечисления.СтатусыВеток.Разрабатывается;
	Ветка.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок;
	Ветка.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории;    
	Ветка.ПриоритетТестирования = Перечисления.ПриоритетыТестированияВеток.Обычный;
	Ветка.СрочностьИсправленияОшибок = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее;

	Если РазрабатываемыйОбъект <> Неопределено Тогда
		
		ТипРазрабатываемогоОбъекта = ТипЗнч(РазрабатываемыйОбъект.Ссылка);

		Если ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Проекты") Тогда
			
			Ветка.Тип = Перечисления.ТипыВеток.ОсновнаяВеткаПроекта;
			Ветка.Статус = Перечисления.СтатусыВеток.Тестируется;
			Ветка.Владелец = РазрабатываемыйОбъект.Ссылка;
			Ветка.Ответственный = РазрабатываемыйОбъект.Ответственный;
			
		ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.ВерсииПроекта") Тогда
			
			Ветка.Тип = Перечисления.ТипыВеток.ВеткаВерсии;
			Ветка.Статус = ?(РазрабатываемыйОбъект.ДатаПрекращенияПоддержки < ТекущаяДата() 
							И ЗначениеЗаполнено(РазрабатываемыйОбъект.ДатаПрекращенияПоддержки), 
							Перечисления.СтатусыВеток.Заморожена,
							Перечисления.СтатусыВеток.Тестируется);
			Ветка.Источник = РазрабатываемыйОбъект.Владелец.Ветка;
			Ветка.Владелец = РазрабатываемыйОбъект.Владелец;
			Ветка.Ответственный = РазрабатываемыйОбъект.Владелец.Ответственный;			
		ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
			Ветка.Тип = Перечисления.ТипыВеток.ВеткаТехническогоПроекта;
			Ветка.Источник = ?(ЗначениеЗаполнено(РазрабатываемыйОбъект.Версия.Ветка), 
								РазрабатываемыйОбъект.Версия.Ветка, 
								РазрабатываемыйОбъект.Владелец.Ветка);
			Ветка.Владелец = РазрабатываемыйОбъект.Владелец;
			Если РазрабатываемыйОбъект.Статус = Перечисления.СтатусыТехническихПроектов.Выполнен Тогда
				Ветка.Статус = Перечисления.СтатусыВеток.Помещена;
				Ветка.ДатаПомещения = РазрабатываемыйОбъект.ДатаПомещенияИзмененийВХранилищеВерсии;
			ИначеЕсли РазрабатываемыйОбъект.Статус = Перечисления.СтатусыТехническихПроектов.Отменен Тогда
				Ветка.Статус = Перечисления.СтатусыВеток.Заморожена;
			КонецЕсли;
			Если ЗначениеЗаполнено(РазрабатываемыйОбъект.Ответственный) Тогда
				Ветка.Ответственный = РазрабатываемыйОбъект.Ответственный;
			КонецЕсли;
			
		ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Ошибки") Тогда
			
			Ветка.Тип = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок;
			Ветка.Владелец = РазрабатываемыйОбъект.Владелец;
			Ветка.Источник = РазрабатываемыйОбъект.ВеткаОбнаружения;
			Ветка.Приемник = РазрабатываемыйОбъект.ВеткаОбнаружения;
			Ветка.ДатаПомещения = РазрабатываемыйОбъект.ДатаПроверки;
			Если РазрабатываемыйОбъект.Проверена Тогда
				Ветка.Статус = Перечисления.СтатусыВеток.Помещена;
			ИначеЕсли РазрабатываемыйОбъект.Отозвана Тогда
				Ветка.Статус = Перечисления.СтатусыВеток.Заморожена;
			КонецЕсли;
		
		ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Ветки") Тогда
			
			Ветка.Владелец = РазрабатываемыйОбъект.Владелец;
			Ветка.Источник = РазрабатываемыйОбъект.Ссылка;
			ТипСоздаваемойВетки = ?(РазрабатываемыйОбъект.Тип=Перечисления.ТипыВеток.ОсновнаяВеткаПроекта, 
									Перечисления.ТипыВеток.ВеткаВерсии, 
									РазрабатываемыйОбъект.Тип); 
			Ветка.Тип = ТипСоздаваемойВетки;
			
		КонецЕсли;
	Иначе
		Ветка.Владелец = Проекты.ПроектПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ветка.Владелец) Тогда
		Ветка.РежимРазработки = Ветка.Владелец.РежимРазработки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Ветка, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(Ветка.Источник) И ЗначениеЗаполнено(Ветка.Владелец) Тогда
		Ветка.Источник = Ветка.Владелец.Ветка;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ветка.Имя) Тогда
		Ветка.Имя = ?(Ветка.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории,
						ИмяВеткиРепозиторияПоРазрабатываемомуОбъекту(РазрабатываемыйОбъект, 
																	Ветка.Ответственный,
																	Ветка.Источник, 
																	Ветка.Тип, 
																	Ветка.ДатаСоздания,
																	ДанныеЗаполнения), "");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ветка.Наименование) Тогда
		Ветка.Наименование = НаименованиеВеткиРепозиторияПоРазрабатываемомуОбъекту(РазрабатываемыйОбъект, 
															Ветка.Имя, 
															Ветка.Ответственный, 
															Ветка.Источник, 
															Ветка.Тип, 
															Ветка.ДатаСоздания);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Ветка.Наименование) Тогда
		Ветка.Наименование = Ветка.Имя;
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("Приемник") Тогда
		Ветка.Приемник = Ветка.Источник;
	КонецЕсли;
		
КонецПроцедуры

//Подбирает настройку тестирования ветки по ответственному и типу.
//
// Параметры:
//  ТипВетки      - ПеречислениеСсылка.ТипыВеток        - Тип ветки, для которой выбирается настройка запуска.
//  Ответственный - СправочникСсылка.Пользователи       - Ответственный ветки.
//
// Возвращаемое значение:
//  СправочникСсылка.НастройкиЗапускаТестирования - настройка тестирования для ветки.
//  
Функция НастройкаТестированияДляВетки(ТипВетки, Ответственный) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 3
	                |	Ветки.НастройкаЗапускаТестирования КАК Ссылка
	                |ИЗ
	                |	Справочник.Ветки КАК Ветки
	                |ГДЕ
	                |	Ветки.НастройкаЗапускаТестирования <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
	                |	И Ветки.Тип = &Тип
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Ветки.ДатаСоздания УБЫВ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ ПЕРВЫЕ 3
	                |	Ветки.НастройкаЗапускаТестирования КАК Ссылка
	                |ИЗ
	                |	Справочник.Ветки КАК Ветки
	                |ГДЕ
	                |	Ветки.НастройкаЗапускаТестирования <> ЗНАЧЕНИЕ(Справочник.НастройкиЗапускаТестирования.ПустаяСсылка)
	                |	И Ветки.Тип = &Тип
	                |	И Ветки.Ответственный = &Ответственный
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Ветки.ДатаСоздания УБЫВ";
	Запрос.УстановитьПараметр("Тип", ТипВетки);
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	ВеткиПоТипуИОтветственному = МассивРезультатов[1].Выгрузить();
	ВеткиПоТипу = МассивРезультатов[0].Выгрузить();
	ВеткиДляАнализа = ?(ВеткиПоТипуИОтветственному.Количество() > 0, ВеткиПоТипуИОтветственному, ВеткиПоТипу);
		
	НастройкаЗапуска = Справочники.НастройкиЗапускаТестирования.ПустаяСсылка();
	Для Каждого Строка Из ВеткиДляАнализа Цикл
		Если НЕ ЗначениеЗаполнено(НастройкаЗапуска) Тогда
			НастройкаЗапуска = Строка.Ссылка;
		ИначеЕсли НастройкаЗапуска <> Строка.Ссылка Тогда
			НастройкаЗапуска = Справочники.НастройкиЗапускаТестирования.ПустаяСсылка();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НастройкаЗапуска;

КонецФункции
       
//Определяет является ли ветка срочной или нет.
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки       - Ветка.
//
// Возвращаемое значение:
//  Булево - Истина если ветка должна тестирования в срочном порядке и Ложь иначе
//  
Функция СрочнаяВеткаДляТестирования(Ветка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ветка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                |	Ошибки.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Ошибки КАК Ошибки
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	                |		ПО Ошибки.Ссылка = ОшибкиИсправлениеВВетках.Ссылка
	                |ГДЕ
	                |	(Ошибки.ВеткаИсправления = &Ветка
	                |			ИЛИ ОшибкиИсправлениеВВетках.ВеткаИсправления = &Ветка)
	                |	И НЕ(Ошибки.НеПризнана
	                |				ИЛИ Ошибки.Отозвана)
	                |	И Ошибки.ОшибкаЗарегистрированаПоИнформацииОтВнешнихИсточников
	                |	И Ошибки.СрочностьИсправления = ЗНАЧЕНИЕ(Перечисление.СрочностьИсправленияОшибок.Немедленно)";
	Запрос.УстановитьПараметр("Ветка", Ветка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;

КонецФункции

//Подбирает последнюю ветку по имени.
//
// Параметры:
//  Владелец - СправочникСсылка.Проект - Владелец ветки.
//  ИмяВетки - Строка                  - Имя ветки.
//
// Возвращаемое значение:
//  СправочникСсылка.Ветка - ссылка на существующую ветку.
//  
Функция ВеткаПоИмени(Проект, ИмяВетки) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ ПЕРВЫЕ 1
	                |	Ветки.Ссылка КАК Ссылка
	                |ПОМЕСТИТЬ ВеткиВРаботе
	                |ИЗ
	                |	Справочник.Ветки КАК Ветки
	                |ГДЕ
	                |	Ветки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Разрабатывается), ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Тестируется))
	                |	И НЕ Ветки.ПометкаУдаления
	                |	И Ветки.Имя = &Имя
	                |	И Ветки.Владелец = &Владелец
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Ветки.ДатаСоздания УБЫВ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ ПЕРВЫЕ 1
	                |	Ветки.Ссылка КАК Ссылка
	                |ПОМЕСТИТЬ ВеткиНеВРаботе
	                |ИЗ
	                |	Справочник.Ветки КАК Ветки
	                |ГДЕ
	                |	НЕ Ветки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Разрабатывается), ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Тестируется))
	                |	И НЕ Ветки.ПометкаУдаления
	                |	И Ветки.Имя = &Имя
	                |	И Ветки.Владелец = &Владелец
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Ветки.ДатаСоздания УБЫВ
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ВеткиВРаботе.Ссылка КАК Ссылка
	                |ИЗ
	                |	ВеткиВРаботе КАК ВеткиВРаботе
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ВеткиНеВРаботе.Ссылка
	                |ИЗ
	                |	ВеткиНеВРаботе КАК ВеткиНеВРаботе";
	
	Запрос.УстановитьПараметр("Имя", ИмяВетки);
	Запрос.УстановитьПараметр("Владелец", Проект);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
		
	Возврат Справочники.Ветки.ПустаяСсылка();

КонецФункции

//Генерирует имя ветки по параметрам.
//
// Параметры:
//  РазрабатываемыйОбъект - СправочникСсылка.Проекты            - Проект, для которого создается основная ветка.
//                        - СправочникСсылка.ВерсииПроектов     - Версия, для которой создается ветка.
//                        - СправочникСсылка.ТехническиеПроекты - Технический проект, для которого создается ветка.
//                        - СправочникСсылка.Ошибки             - Ошибка, для которой создается ветка исправления.
//                        - СправочникСсылка.Ветки              - Ветка источник, для которой подчиненная ветка.
//  Ответственный         - СправочникСсылка.Пользователи       - Ответственный за ветку.
//  Источник              - СправочникСсылка.Ветки              - Ветка источник.
//  Тип                   - ПеречислениеСсылка.ТипыВеток        - Тип ветки.
//  ДатаСоздания          - ДатаВремя                           - Дата создания ветки.
//  ДанныеЗаполнения      - Структура                           - Прочие параметры для генерации имени ветки.
//
// Возвращаемое значение:
//  Строка - Сгенерированное имя ветки.
//
Функция ИмяВеткиРепозиторияПоРазрабатываемомуОбъекту(РазрабатываемыйОбъект, Ответственный=Неопределено, 
													Источник=Неопределено, ТипВетки=Неопределено,
													ДатаСоздания=Неопределено, ДанныеЗаполнения = Неопределено) Экспорт
	Если ДатаСоздания = Неопределено Тогда
		ДатаСоздания = ТекущаяДата();
	КонецЕсли;
	ИмяВетки = "";
	ТипРазрабатываемогоОбъекта = ТипЗнч(?(РазрабатываемыйОбъект <> Неопределено, РазрабатываемыйОбъект.Ссылка, РазрабатываемыйОбъект));
	РазрабатываемыйОбъектСсылочногоТипа = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(РазрабатываемыйОбъект));
	РеквизитыРазрабатываемогоОбъекта = РазрабатываемыйОбъект;
	
	Если Ответственный = Неопределено Тогда 
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
		Если РазрабатываемыйОбъектСсылочногоТипа Тогда
			РеквизитыРазрабатываемогоОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РазрабатываемыйОбъект, "Ответственный, Код, Наименование");
		КонецЕсли;
		EmailПользователя = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			РеквизитыРазрабатываемогоОбъекта.Ответственный,
			Справочники.ВидыКонтактнойИнформации.EmailПользователя,,,
			Новый Структура("ТолькоПервая", Истина));
		
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить("tech-project/");
		СтрокаОтветственный = ИмяПользователяДляИмениВетки(РеквизитыРазрабатываемогоОбъекта.Ответственный, EmailПользователя);
		Если ЗначениеЗаполнено(СтрокаОтветственный) Тогда
			МассивСтрок.Добавить(СтрокаОтветственный);
			МассивСтрок.Добавить("/");
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыРазрабатываемогоОбъекта.Код) Тогда
			МассивСтрок.Добавить(РеквизитыРазрабатываемогоОбъекта.Код);
			МассивСтрок.Добавить("-");
		КонецЕсли;
		Наименование = СтрЗаменить(Строка(РеквизитыРазрабатываемогоОбъекта.Наименование), " ", "-");
		Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Наименование, "-");
		МассивСтрок.Добавить(Наименование);
		МассивСтрок.Добавить("/");
		МассивСтрок.Добавить("main");
		
		ИмяВетки = СтрСоединить(МассивСтрок, "");
		ИмяВетки = НРег(ИмяВетки);
		ИмяВетки = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтрЗаменить(ИмяВетки, "--", "-"));
	ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		ИмяВетки = "master";
	ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.ВерсииПроекта") Тогда
		Если РазрабатываемыйОбъектСсылочногоТипа Тогда
			РеквизитыРазрабатываемогоОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РазрабатываемыйОбъект, "НомерРедакции, НомерПодредакции, НомерВерсии");
		КонецЕсли;
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(Строка(РеквизитыРазрабатываемогоОбъекта.НомерРедакции));
		МассивСтрок.Добавить(Строка(РеквизитыРазрабатываемогоОбъекта.НомерПодредакции));
		МассивСтрок.Добавить(Строка(РеквизитыРазрабатываемогоОбъекта.НомерВерсии));
		ИмяВетки = "release-" + СтрСоединить(МассивСтрок, ".");
	ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Ошибки") 
		ИЛИ ТипВетки = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда 
		EmailПользователя = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Ответственный,Справочники.ВидыКонтактнойИнформации.EmailПользователя,,, Новый Структура("ТолькоПервая", Истина));
	
		МассивСтрок = Новый Массив();
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("СрочностьОшибки")
			И ДанныеЗаполнения.СрочностьОшибки = Перечисления.СрочностьИсправленияОшибок.Немедленно Тогда
			
			МассивСтрок.Добавить("hotfix/");	
			
		Иначе
			МассивСтрок.Добавить("bugfix/");
		КонецЕсли;	
		
		ВерсияРазработки = ВерсияРазработкиВетки(Источник);
		Если ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Ошибки") Тогда
			Если РазрабатываемыйОбъектСсылочногоТипа Тогда
				ИменаРеквизитов = "Владелец, СборкаОбнаружения, СборкаОбнаружения.Владелец, ВеткаОбнаружения";
				РеквизитыРазрабатываемогоОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РазрабатываемыйОбъект, ИменаРеквизитов);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ВерсияРазработки) Тогда
				ВерсияРазработки = ВерсияРазработкиВетки(РеквизитыРазрабатываемогоОбъекта.ВеткаОбнаружения);
			КонецЕсли;
			Если ЗначениеЗаполнено(ВерсияРазработки) Тогда
				МассивСтрок.Добавить(ВерсияРазработки);
			ИначеЕсли РеквизитыРазрабатываемогоОбъекта.Свойство("СборкаОбнаруженияВладелец") 
				И ЗначениеЗаполнено(РеквизитыРазрабатываемогоОбъекта.СборкаОбнаруженияВладелец) Тогда
				МассивСтрок.Добавить(РеквизитыРазрабатываемогоОбъекта.СборкаОбнаруженияВладелец);
			ИначеЕсли ЗначениеЗаполнено(РеквизитыРазрабатываемогоОбъекта.СборкаОбнаружения) Тогда
				МассивСтрок.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыРазрабатываемогоОбъекта.СборкаОбнаружения, "Владелец"));	
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(ВерсияРазработки) Тогда
			МассивСтрок.Добавить(ВерсияРазработки);
		КонецЕсли;
		МассивСтрок.Добавить("/");
		МассивСтрок.Добавить(ИмяПользователяДляИмениВетки(Ответственный, EmailПользователя));
		МассивСтрок.Добавить("/");
		ДатаСтрокой = Формат(ДатаСоздания, "ДЛФ=D");
		МассивСтрок.Добавить(ДатаСтрокой);
		ИмяВетки = СтрСоединить(МассивСтрок, "");
		ИмяВетки = НРег(ИмяВетки);
		ИмяВетки = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяВетки);
		
		Если ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Ошибки") Тогда
			СуществующиеВетки = ВеткиСДублирующимсяИменем(ИмяВетки, РеквизитыРазрабатываемогоОбъекта.Владелец);
			
			Индекс = 1;
			НовоеИмяВетки = ИмяВетки;
			Пока СуществующиеВетки.Найти(НовоеИмяВетки) <> Неопределено Цикл 
				Индекс = Индекс + 1;
				НовоеИмяВетки = ИмяВетки + "-" + Строка(Индекс);
			КонецЦикла;
			ИмяВетки = НовоеИмяВетки;
		КонецЕсли;
	ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Ветки") 
		И ТипВетки = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда 
		Если РазрабатываемыйОбъектСсылочногоТипа Тогда
			РеквизитыРазрабатываемогоОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РазрабатываемыйОбъект, "Имя, Владелец");
		КонецЕсли;
		EmailПользователя = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
			Ответственный,Справочники.ВидыКонтактнойИнформации.EmailПользователя,,, Новый Структура("ТолькоПервая", Истина));
		
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить("bugfix/");
		МассивСтрок.Добавить(ИмяПользователяДляИмениВетки(Ответственный, EmailПользователя));
		МассивСтрок.Добавить("/");
		МассивСтрок.Добавить(РеквизитыРазрабатываемогоОбъекта.Имя);
		МассивСтрок.Добавить("/");
		ДатаСтрокой = Формат(ДатаСоздания, "ДЛФ=D");
		МассивСтрок.Добавить(ДатаСтрокой);
		ИмяВетки = СтрСоединить(МассивСтрок, "");
		ИмяВетки = НРег(ИмяВетки);
		ИмяВетки = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяВетки);
		СуществующиеВетки = ВеткиСДублирующимсяИменем(ИмяВетки, РеквизитыРазрабатываемогоОбъекта.Владелец);
		
		Индекс = 1;
		НовоеИмяВетки = ИмяВетки;
		Пока СуществующиеВетки.Найти(НовоеИмяВетки) <> Неопределено Цикл 
			Индекс = Индекс + 1;
			НовоеИмяВетки = ИмяВетки + "-" + Строка(Индекс); 
		КонецЦикла;
		ИмяВетки = НовоеИмяВетки;
	КонецЕсли;
	
	ИмяВетки = СтрЗаменить(ИмяВетки, "//", "/");
	
	ОбщегоНазначенияСППР.ИмяВеткиРепозиторияПоРазрабатываемомуОбъекту(
		РазрабатываемыйОбъект, ИмяВетки, Ответственный, Источник, ТипВетки, ДатаСоздания, ДанныеЗаполнения);
	
	Возврат УбратьЗапрещенныеСимволыИзИмениВетки(ИмяВетки);
	
КонецФункции

//Генерирует наименование ветки по параметрам.
//
// Параметры:
//  РазрабатываемыйОбъект - СправочникСсылка.Проекты            - Проект, для которого создается основная ветка.
//                        - СправочникСсылка.ВерсииПроектов     - Версия, для которой создается ветка.
//                        - СправочникСсылка.ТехническиеПроекты - Технический проект, для которого создается ветка.
//                        - СправочникСсылка.Ошибки             - Ошибка, для которой создается ветка исправления.
//                        - СправочникСсылка.Ветки              - Ветка источник, для которой подчиненная ветка.
//  ИмяВетки              - Строка                              - Имя ветки.
//  Ответственный         - СправочникСсылка.Пользователи       - Ответственный за ветку.
//  Источник              - СправочникСсылка.Ветки              - Ветка источник.
//  Тип                   - Перечисление.ТипыВеток              - Тип ветки.
//  ДатаСоздания          - ДатаВремя                           - Дата создания ветки.
//
// Возвращаемое значение:
//  Строка - Сгенерированное наименование ветки.
//
Функция НаименованиеВеткиРепозиторияПоРазрабатываемомуОбъекту(РазрабатываемыйОбъект, Знач ИмяВетки = "", Ответственный=Неопределено, 
															Источник=Неопределено, ТипВетки=Неопределено, ДатаСоздания=Неопределено) Экспорт
	Если ДатаСоздания = Неопределено Тогда
		ДатаСоздания = ТекущаяДата();
	КонецЕсли;
	ИмяВетки = "";
	Наименование = ИмяВетки;
	
	ТипРазрабатываемогоОбъекта = ТипЗнч(?(РазрабатываемыйОбъект <> Неопределено, РазрабатываемыйОбъект.Ссылка, РазрабатываемыйОбъект)); 
	Если Ответственный = Неопределено Тогда 
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;

	СтрокаОтветственный = СтрЗаменить(ИмяПользователяДляИмениВетки(Ответственный), "-", " ");
	
	Если ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Проекты") Тогда
		Наименование = РазрабатываемыйОбъект.Наименование;
	ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.ВерсииПроекта") Тогда
		Если ЗначениеЗаполнено(РазрабатываемыйОбъект.ПубликуемыйНомерВерсии) Тогда
			Наименование = РазрабатываемыйОбъект.ПубликуемыйНомерВерсии;
		ИначеЕсли ЗначениеЗаполнено(РазрабатываемыйОбъект.Ссылка) Тогда
			Наименование = Строка(РазрабатываемыйОбъект.Ссылка);
		КонецЕсли;
	ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.ТехническиеПроекты") Тогда
			
		Наименование = РазрабатываемыйОбъект.Наименование;
		Если ЗначениеЗаполнено(Источник) Тогда
			Наименование = Наименование + " " + Строка(Источник);
		КонецЕсли;
			
	ИначеЕсли ТипРазрабатываемогоОбъекта = Тип("СправочникСсылка.Ошибки") 
		ИЛИ ТипВетки = Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
			
		Наименование = СтрШаблон(НСтр("ru='Исправление ошибок %1 %2 %3'"), 
											СтрокаОтветственный,
											Строка(Источник),
											Формат(ДатаСоздания, "ДЛФ=D"));
	КонецЕсли;
	Возврат Наименование;

КонецФункции

//Проверяет что для всех ошибок, исправляемых в ветке, есть соответствующие коммиты в репозитории.
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки - Проверяемая ветка.
//  ПринудительнаяПроверка - Булево - Если задано, то проверка выполняется в любом случае, вне зависимости от типа ветки.
// Возвращаемое значение:
//  Структура - Результат проверки.
//
Функция ПроверкаИсправленияОшибокВВетке(Ветка, ПринудительнаяПроверка=Ложь) Экспорт
	
	Ответ = Новый Структура("ПроверкаВыполненаУспешно, Сообщение, 
							|ОшибкиУКоторыхНетКоммитов, ОшибкиКоторыеНеУказаныВВетке, ОшибкиКоторыеНеУказаныВВеткеКоммиты", 
							Истина, "", Новый Массив, Новый Массив, Новый Массив);
	
	РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ветка, 
			"Тип, Владелец, Приемник, Приемник.Имя, Имя, РежимРазработки,
			|Владелец.РезультатыВыполненияТестовАдресСервера, 
			|Владелец.РезультатыВыполненияТестовИмяПроектаНаСервере, 
			|Владелец.РезультатыВыполненияТестовТокен, Владелец.РежимРазработки, ДатаСоздания");
	Если НЕ ПринудительнаяПроверка 
		И РеквизитыВетки.Тип <> Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
		// Проверку нужно выполнять только для веток с типом ВеткаТехническогоПроекта или ВеткаДляИсправленияОшибок 
		Возврат Ответ;
	КонецЕсли;
	
	Если НЕ (ЗначениеЗаполнено(РеквизитыВетки.ВладелецРезультатыВыполненияТестовАдресСервера) 
			И ЗначениеЗаполнено(РеквизитыВетки.ВладелецРезультатыВыполненияТестовИмяПроектаНаСервере) 
			И ЗначениеЗаполнено(РеквизитыВетки.ВладелецРезультатыВыполненияТестовТокен)
			И РеквизитыВетки.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории) Тогда
		// Проверку нужно выполнять только если есть данные для подключения к серверу тестирования и разработка ведется в Git репозитории
		Возврат Ответ;
	КонецЕсли;
	
	ВеткаСуществуетНаСервере = ТестированиеЗапускТестирования.ВеткаСуществуетНаСервере(РеквизитыВетки.Владелец, РеквизитыВетки.Имя);
	СписокПринятыхМерджРеквестов = ТестированиеЗапускТестирования.CписокМерджРеквестов(РеквизитыВетки.Владелец, 
					РеквизитыВетки.Имя, РеквизитыВетки.ПриемникИмя, "merged");
	
	// Если ветка не существует, но есть помещенные мердж реквест, то мы можем проверить исправление ошибок по коммитам мердж реквеста.
	Если НЕ ВеткаСуществуетНаСервере И СписокПринятыхМерджРеквестов.Количество() = 0 Тогда
		Ответ.ПроверкаВыполненаУспешно = Ложь;
		Ответ.Сообщение = СтрШаблон(НСтр("ru = 'Ветка с именем ""%1"" не найдена на сервере'"), РеквизитыВетки.Имя);
		Возврат Ответ;
	КонецЕсли;
	КоммитыРазличий = Новый Массив;

	// Отбор ошибок, исправляемых в ветке, по данным коммитов
	Попытка
		
		Если НЕ ЗначениеЗаполнено(РеквизитыВетки.Приемник) ИЛИ НЕ ЗначениеЗаполнено(РеквизитыВетки.ПриемникИмя) Тогда
			// Нельзя получить различия между ветками, если не заполнена ветка приемник, запрос не отработает
			Ответ.ПроверкаВыполненаУспешно = Ложь;
			Ответ.Сообщение = НСтр("ru = 'Нельзя получить изменения в ветке, если не заполнена ветка приемник.'");
			Возврат Ответ;
		КонецЕсли;
		
		Если ВеткаСуществуетНаСервере Тогда
			ОтветРазницаМеждуВетками = ТестированиеЗапускТестирования.РазницаМеждуВетками(РеквизитыВетки.Владелец, 
						РеквизитыВетки.ПриемникИмя, РеквизитыВетки.Имя);
			Если НЕ ОтветРазницаМеждуВетками.Свойство("commits") Тогда
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Не удалось получить различия между веткой %1 и веткой приемником %2.'"), 
									РеквизитыВетки.Имя,
									РеквизитыВетки.ПриемникИмя);
			КонецЕсли;
			КоммитыРазличий = ОтветРазницаМеждуВетками["commits"];
		КонецЕсли;
	Исключение
		Ответ.ПроверкаВыполненаУспешно = Ложь; // Нет данных о коммитах, с которыми нужно сравнивать.
		Ответ.Сообщение = СтрШаблон(НСтр("ru = 'Возникло исключение при проверке ветки ""%1""'"), Ветка)
						+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ответ;
	КонецПопытки;
	
	Для Каждого МерджРеквест Из СписокПринятыхМерджРеквестов Цикл
		// Отсекаются устаревшие мердж реквесты
		Если МерджРеквест.created_at < (РеквизитыВетки.ДатаСоздания - 24*60*60) Тогда
			Продолжить;
		КонецЕсли;
		
		ИнформацияОКоммитах = ТестированиеЗапускТестирования.CписокКоммитовМерджРеквеста(РеквизитыВетки.Владелец, МерджРеквест.iid);
		Для Каждого Коммит Из ИнформацияОКоммитах Цикл
			КоммитыРазличий.Добавить(Коммит);
		КонецЦикла;
	КонецЦикла;
	
	ШаблонКода = Справочники.Ошибки.ПустаяСсылка().Код;
	
	Заголовок = Справочники.Ошибки.ЗаголовокДляХранилищаКонфигурации();
	НомераОшибокИзКоммитов = Новый ТаблицаЗначений;
	НомераОшибокИзКоммитов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(255)));
	НомераОшибокИзКоммитов.Колонки.Добавить("Коммит", Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(255)));
	
	Для Каждого Коммит Из КоммитыРазличий Цикл
		Если НЕ Коммит.Свойство("title") Тогда
			Продолжить;
		КонецЕсли;
		ИндексЗаголовка = СтрНайти(Коммит.title, Заголовок);
		Если ИндексЗаголовка > 0 Тогда
			ЗаголовокКоммита = Прав(Коммит.title, СтрДлина(Коммит.title) - ИндексЗаголовка - СтрДлина(Заголовок) + 1);
			НомерОшибки = СокрЛП(СтрРазделить(СокрЛП(ЗаголовокКоммита), " ", Ложь)[0]);
			РазницаВДлине = СтрДлина(ШаблонКода) - СтрДлина(НомерОшибки);
			Если РазницаВДлине > 0 Тогда
				НомерОшибки = Лев(ШаблонКода, РазницаВДлине) + НомерОшибки;
			КонецЕсли;
			НоваяСтрока = НомераОшибокИзКоммитов.Добавить();
			НоваяСтрока.Код = НомерОшибки;
			НоваяСтрока.Коммит = Коммит.id; 
		КонецЕсли;
	КонецЦикла;
	
	// Отбор ошибок, исправляемых в ветке, по данным справочника Ошибки
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомераОшибокИзКоммитов.Код КАК Код,
	|	НомераОшибокИзКоммитов.Коммит КАК Коммит
	|ПОМЕСТИТЬ НомераОшибокИзКоммитов
	|ИЗ
	|	&НомераОшибокИзКоммитов КАК НомераОшибокИзКоммитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.Код КАК Код,
	|	Ошибки.ВеткаИсправления КАК ВеткаИсправления,
	|	Ошибки.ВеткаИсправления.Статус КАК ВеткаИсправленияСтатус,
	|	НомераОшибокИзКоммитов.Коммит КАК Коммит,
	|	ВЫБОР
	|		КОГДА Ошибки.ВеткаИсправления <> &ВеткаИсправления
	|					И Ошибки.ВеткаИсправления.Имя = &ВеткаИсправленияИмя
	|				ИЛИ ОшибкиИсправлениеВВетках.ВеткаИсправления <> &ВеткаИсправления
	|					И ОшибкиИсправлениеВВетках.ВеткаИсправления.Имя = &ВеткаИсправленияИмя
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОшибкаИсправленаВДругойВеткеСОдинаковымИменем
	|ПОМЕСТИТЬ ОшибкиИзКоммитов
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераОшибокИзКоммитов КАК НомераОшибокИзКоммитов
	|		ПО (НомераОшибокИзКоммитов.Код = Ошибки.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	|		ПО Ошибки.Ссылка = ОшибкиИсправлениеВВетках.Ссылка
	|ГДЕ
	|	Ошибки.Владелец = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Ошибки.Ссылка КАК Ссылка,
	|	Ошибки.Код КАК Код
	|ПОМЕСТИТЬ ОшибкиИзВетки
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	|		ПО Ошибки.Ссылка = ОшибкиИсправлениеВВетках.Ссылка
	|ГДЕ
	|	Ошибки.Владелец = &Проект
	|	И (Ошибки.ВеткаИсправления = &ВеткаИсправления
	|				И Ошибки.ВеткаИсправления <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	|			ИЛИ ОшибкиИсправлениеВВетках.ВеткаИсправления = &ВеткаИсправления
	|				И ОшибкиИсправлениеВВетках.ВеткаИсправления <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка))
	|	И НЕ Ошибки.НеПризнана
	|	И НЕ Ошибки.Отозвана
	|	И НЕ Ошибки.Исправляется = ЗНАЧЕНИЕ(Перечисление.ВариантыИсправленияОшибок.БезИзмененийВВетках)
	|	И &ВеткаИсправления <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибкиИзВетки.Ссылка КАК ОшибкиИзВеткиСсылка,
	|	ОшибкиИзВетки.Код КАК ОшибкиИзВеткиКод,
	|	ОшибкиИзКоммитов.Ссылка КАК ОшибкиИзКоммитовСсылка,
	|	ОшибкиИзКоммитов.Коммит КАК ОшибкиИзКоммитовКоммит,
	|	ОшибкиИзКоммитов.Код КАК ОшибкиИзКоммитовКод,
	|	ОшибкиИзКоммитов.ОшибкаИсправленаВДругойВеткеСОдинаковымИменем КАК ОшибкаИсправленаВДругойВеткеСОдинаковымИменем,
	|	ОшибкиИзКоммитов.ВеткаИсправленияСтатус КАК ВеткаИсправленияСтатус
	|ИЗ
	|	ОшибкиИзВетки КАК ОшибкиИзВетки
	|		ПОЛНОЕ СОЕДИНЕНИЕ ОшибкиИзКоммитов КАК ОшибкиИзКоммитов
	|		ПО (ОшибкиИзКоммитов.Ссылка = ОшибкиИзВетки.Ссылка)";
	
	Запрос.УстановитьПараметр("Проект", РеквизитыВетки.Владелец);
	Запрос.УстановитьПараметр("ВеткаИсправления", Ветка);
	Запрос.УстановитьПараметр("ВеткаИсправленияИмя", РеквизитыВетки.Имя);
	Запрос.УстановитьПараметр("НомераОшибокИзКоммитов", НомераОшибокИзКоммитов);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ОшибкиИзКоммитовСсылка) Тогда
			Ответ.ОшибкиУКоторыхНетКоммитов.Добавить(Выборка.ОшибкиИзВеткиСсылка);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Выборка.ОшибкиИзВеткиСсылка) И НЕ Выборка.ОшибкаИсправленаВДругойВеткеСОдинаковымИменем 
			И Выборка.ВеткаИсправленияСтатус <> Перечисления.СтатусыВеток.Тестируется 
			И Выборка.ВеткаИсправленияСтатус <> Перечисления.СтатусыВеток.Помещена Тогда
			Ответ.ОшибкиКоторыеНеУказаныВВетке.Добавить(Выборка.ОшибкиИзКоммитовСсылка);
			Ответ.ОшибкиКоторыеНеУказаныВВеткеКоммиты.Добавить(
					ТестированиеЗапускТестирования.АдресКоммита(РеквизитыВетки.Владелец, Выборка.ОшибкиИзКоммитовКоммит));
		КонецЕсли;
	КонецЦикла;
	Если Ответ.ОшибкиУКоторыхНетКоммитов.Количество() > 0 Тогда
		Ответ.Сообщение = Ответ.Сообщение 
							+ СтрШаблон(НСтр("ru = 'Нельзя изменить статус: в ветке указано исправление %1 ошибок без соответствующих коммитов в Git.'"),
							Ответ.ОшибкиУКоторыхНетКоммитов.Количество())
							+ Символы.ПС;
		Ответ.ПроверкаВыполненаУспешно = Ложь;
	КонецЕсли;
	Если Ответ.ОшибкиКоторыеНеУказаныВВетке.Количество() > 0 Тогда
		Ответ.Сообщение = Ответ.Сообщение 
							+ СтрШаблон(НСтр("ru = 'Нельзя изменить статус: в ветке есть %1 коммитов с исправлением ошибок, без указания ветки исправления в СППР.'"),
							Ответ.ОшибкиКоторыеНеУказаныВВетке.Количество())
							+ Символы.ПС;
		Ответ.ПроверкаВыполненаУспешно = Ложь;
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

//Проверяет что нет ошибок, которые должны исправляться в этой ветке.
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки - Проверяемая ветка.
// Возвращаемое значение:
//  Структура - Результат проверки.
//
Функция ПроверкаПередЗакрытиемВетки(Ветка) Экспорт
		
	Ответ = Новый Структура("ПроверкаВыполненаУспешно, Сообщение, 
							|НезакрытыеОшибки", 
							Истина, "", Новый Массив);
	
	РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ветка, "Тип, Владелец");
	Если РеквизитыВетки.Тип <> Перечисления.ТипыВеток.ВеткаТехническогоПроекта 
		И РеквизитыВетки.Тип <> Перечисления.ТипыВеток.ВеткаДляИсправленияОшибок Тогда
		// Проверку нужно выполнять только для веток с типом ВеткаТехническогоПроекта или ВеткаДляИсправленияОшибок 
		Возврат Ответ;
	КонецЕсли;

	// Отбор ошибок, исправляемых в ветке, по данным справочника Ошибки
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки.ИсправлениеВВетках КАК ОшибкиИсправлениеВВетках
	|		ПО Ошибки.Ссылка = ОшибкиИсправлениеВВетках.Ссылка
	|			И (ОшибкиИсправлениеВВетках.ВеткаИсправления = &ВеткаИсправления)
	|ГДЕ
	|	Ошибки.Владелец = &Проект
	|	И (Ошибки.ВеткаИсправления = &ВеткаИсправления
	|				И Ошибки.ВеткаОбнаружения <> Ошибки.ВеткаИсправления
	|			ИЛИ ОшибкиИсправлениеВВетках.ВеткаИсправления = &ВеткаИсправления
	|				И ОшибкиИсправлениеВВетках.Ветка <> ОшибкиИсправлениеВВетках.ВеткаИсправления)
	|	И НЕ Ошибки.НеПризнана
	|	И НЕ Ошибки.Отозвана";
	
	Запрос.УстановитьПараметр("Проект", РеквизитыВетки.Владелец);
	Запрос.УстановитьПараметр("ВеткаИсправления", Ветка);
	Ответ.НезакрытыеОшибки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Ответ.ПроверкаВыполненаУспешно = Ответ.НезакрытыеОшибки.Количество() = 0;
	Ответ.Сообщение = НСтр("ru = 'Нельзя заморозить ветку с неотработанным ошибками.'");
	
	Возврат Ответ;
	
КонецФункции

//Рассчитывает и возвращает данные о сборках,в которые вошли изменения,
//выполненные в ветке, в результате ее помещения в ветку-приемник.
//
//Параметры:
// Ветка - СправочникСсылка.Ветки - ветка, изменения в которой анализируются.
//
//Возвращаемое значение:
// Структура - информация О сборках.
//
Функция ИнформацияОСборкахВключающихИзмененияВетки(Ветка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Сборка", Справочники.СборкиВерсии.ПустаяСсылка());
	Результат.Вставить("ДатаСборки", '00010101');
	Результат.Вставить("ПубликуемаяСборка", Справочники.СборкиВерсии.ПустаяСсылка());
	Результат.Вставить("ДатаПубликуемойСборки", '00010101');
	Результат.Вставить("ДатаПубликацииСборки", '00010101');
	
	Если НЕ ЗначениеЗаполнено(Ветка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ветки.Ссылка КАК Ветка,
	|	Ветки.Приемник КАК Приемник,
	|	Ветки.Приемник.Тип КАК ТипПриемника,
	|	Ветки.Владелец КАК Проект,
	|	Ветки.ДатаПомещения КАК ДатаПомещения
	|ПОМЕСТИТЬ ВТВетки
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	Ветки.Ссылка = &Ветка
	|	И Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаТехническогоПроекта)
	|	И Ветки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВеток.Помещена)
	|	И Ветки.ДатаПомещения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ Ветки.Приемник.ПометкаУдаления
	|	И (Ветки.Приемник.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ВеткаВерсии)
	|			ИЛИ Ветки.Приемник.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииПроекта.Ссылка КАК Версия,
	|	Ветки.ДатаПомещения КАК ДатаПомещенияВетки,
	|	ВерсииПроекта.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ВТВерсии
	|ИЗ
	|	ВТВетки КАК Ветки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
	|		ПО Ветки.Проект = ВерсииПроекта.Владелец
	|			И (Ветки.Приемник = ВерсииПроекта.Ветка
	|				ИЛИ Ветки.ТипПриемника = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|					И Ветки.Приемник = ВерсииПроекта.Ветка.Источник
	|					И ВерсииПроекта.Ветка.ДатаСоздания > Ветки.ДатаПомещения)
	|			И (НЕ ВерсииПроекта.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Версии.Версия КАК Версия,
	|	СборкиВерсии.Ссылка КАК Сборка,
	|	СборкиВерсии.ДатаСборки КАК ДатаСборки,
	|	СборкиВерсии.ДатаПубликации КАК ДатаПубликации
	|ПОМЕСТИТЬ ВТПубликуемыеСборки
	|ИЗ
	|	ВТВерсии КАК Версии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО Версии.Версия = СборкиВерсии.Владелец
	|			И (НЕ СборкиВерсии.ПометкаУдаления)
	|			И (СборкиВерсии.Опубликована)
	|			И (СборкиВерсии.ДатаСборки > Версии.ДатаПомещенияВетки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкиВерсии.ДатаСборки,
	|	Версии.ПорядковыйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Версии.Версия КАК Версия,
	|	СборкиВерсии.Ссылка КАК Сборка,
	|	СборкиВерсии.ДатаСборки КАК ДатаСборки
	|ИЗ
	|	ВТВерсии КАК Версии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
	|		ПО Версии.Версия = СборкиВерсии.Владелец
	|			И (НЕ СборкиВерсии.ПометкаУдаления)
	|			И (СборкиВерсии.ДатаСборки > Версии.ДатаПомещенияВетки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкиВерсии.ДатаСборки,
	|	Версии.ПорядковыйНомер"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеПоСборкам = Запрос.Выполнить().Выгрузить();
	ДанныеПоПубликуемымСборкам = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТПубликуемыеСборки"].ПолучитьДанные().Выгрузить();
	
	Если ДанныеПоСборкам.Количество()>0 Тогда
		Результат.Вставить("Сборка", ДанныеПоСборкам[0].Сборка);
		Результат.Вставить("ДатаСборки", ДанныеПоСборкам[0].ДатаСборки);
		Результат.Вставить("ПубликуемаяСборка", Справочники.СборкиВерсии.ПустаяСсылка());
		Результат.Вставить("ДатаПубликуемойСборки", '00010101');
		Результат.Вставить("ДатаПубликацииСборки", '00010101');
	КонецЕсли;
	
	Если ДанныеПоПубликуемымСборкам.Количество()>0 Тогда
		Результат.Вставить("ПубликуемаяСборка", ДанныеПоПубликуемымСборкам[0].Сборка);
		Результат.Вставить("ДатаПубликуемойСборки", ДанныеПоПубликуемымСборкам[0].ДатаСборки);
		Результат.Вставить("ДатаПубликацииСборки", ДанныеПоПубликуемымСборкам[0].ДатаПубликации);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет, какие технические проекты используют указанную ветку
//
// Параметры:
//  Ветка - СправочникСсылка.Ветки - ветка, использхованик которой анализируется.
// Возвращаемое значение:
//  Массив - технические проекты, использующие ветку.
//
Функция ТехническиеПроектыИспользующиеВетку(Ветка) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ветка = &Ветка
	|	И НЕ ТехническиеПроекты.ПометкаУдаления"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ветка", Ветка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОповеститьСогласующихПоИзменениямВВетке(Ветка) Экспорт
	
	Попытка
		
		Если НЕ СистемаВзаимодействия.ИспользованиеДоступно() Тогда
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИзмененияВВетках.Согласующий КАК Согласующий
		|ИЗ
		|	РегистрСведений.ИзмененияВВетках КАК ИзмененияВВетках
		|ГДЕ
		|	ИзмененияВВетках.Ветка = &Ветка
		|	И ИзмененияВВетках.СтатусСогласования В (ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.ТребуетСогласования), ЗНАЧЕНИЕ(Перечисление.СтатусыСогласованияИзмененийВВетках.НеСогласовано))
		|	И ИзмененияВВетках.Согласующий <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)"
		;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Ветка", Ветка);
		
		СписокСогласующих = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Согласующий");
		
		Если СписокСогласующих.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаголовокОбсуждения = НСтр("ru='Помещение ветки без согласования изменений'");
		
		ТекстСообщения = НСтр("ru='Ветка была помещена. При этом имеются изменения метаданных, по которым нет согласования'");
		
		РаботаССистемойВзаимодействия.ДобавитьСообщениеПоОбъекту(Ветка,
		    СписокСогласующих,
		    Пользователи.ТекущийПользователь(),
		    ЗаголовокОбсуждения,
		    ТекстСообщения);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка при создании уведомления согласующим при помещении ветки: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИмяСобытия = НСтр("ru = 'Уведомления при помещении ветки'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, Ветка, ТекстСообщения);
		
	КонецПопытки;
									 
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
    
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ИсключитьСсылки")
		ИЛИ Параметры.Свойство("ВеткаДляИсправления")
		ИЛИ Параметры.Свойство("ИсключитьВеткиБезПрямогоПомещения")
		ИЛИ Параметры.Свойство("ОтбиратьДляИсправленияВОсновнойВетке") Тогда
		
		ДанныеВыбора = ВеткиСДополнительнымиОтборами(Параметры);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяПользователяДляИмениВетки(Пользователь, EmailПользователя = "")
	
	Если ЗначениеЗаполнено(EmailПользователя) Тогда
		ЧастиEmail = СтрРазделить(EmailПользователя, "@", Ложь);
		Если ЧастиEmail.Количество() > 1 Тогда
			ИмяПользователя = ЧастиEmail[0];
			Возврат ИмяПользователя
		КонецЕсли;
	КонецЕсли;
	
	ИмяПользователя = Строка(Пользователь);
	ЧастиИмени = СтрРазделить(ИмяПользователя, " ", Ложь);
	Если ЧастиИмени.Количество() > 2 Тогда
		ИмяПользователя = ЧастиИмени[0] + " " + ЧастиИмени[1];
	КонецЕсли;
	ИмяПользователя = СтрЗаменить(ИмяПользователя, " ", "-");
	ИмяПользователя = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяПользователя, "-");
	Возврат ИмяПользователя;
КонецФункции

Функция ВеткиСДополнительнымиОтборами(ПараметрыВыбора)
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Ветки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Ветки КАК Ветки
	|ГДЕ
	|	(Ветки.Владелец = &Проект
	|			ИЛИ &Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|	И НЕ Ветки.Ссылка В (&ИсключитьСсылки)
	|	И НЕ Ветки.ПометкаУдаления
	|	И (НЕ &ОтбиратьПоИмени
	|			ИЛИ Ветки.Наименование ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""\""
	|			ИЛИ Ветки.Имя ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""\"")
	|	И (НЕ &ОтбиратьПоСтатусу
	|			ИЛИ Ветки.Статус В (&Статус))
	|	И (НЕ &ОтбиратьПоТипу
	|			ИЛИ Ветки.Тип В (&Тип))
	|	И (Ветки.Ссылка = &ВеткаДляИсправления
	|			ИЛИ Ветки.Приемник = &ВеткаДляИсправления
	|				И Ветки.Приемник <> ЗНАЧЕНИЕ(Справочник.Ветки.ПустаяСсылка)
	|			ИЛИ НЕ &ОтбиратьВеткиДляИсправления)
	|	И (&ИсключитьВеткиБезПрямогоПомещения
	|				И НЕ Ветки.ИзмененияПомещаютсяТолькоЧерезДругиеВетки
	|			ИЛИ НЕ &ИсключитьВеткиБезПрямогоПомещения)
	|	И (&ОтбиратьДляИсправленияВОсновнойВетке
	|				И Ветки.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|			ИЛИ Ветки.Приемник.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыВеток.ОсновнаяВеткаПроекта)
	|			ИЛИ НЕ &ОтбиратьДляИсправленияВОсновнойВетке)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Проект = Справочники.Проекты.ПустаяСсылка();
	Если ПараметрыВыбора.Отбор.Свойство("Владелец") И ЗначениеЗаполнено(ПараметрыВыбора.Отбор.Владелец) Тогда
		ПараметрыВыбора.Отбор.Свойство("Владелец", Проект);
	КонецЕсли;
	
	ИсключитьСсылки = Неопределено;
	ПараметрыВыбора.Свойство("ИсключитьСсылки", ИсключитьСсылки);
	
	Если ПараметрыВыбора.Отбор.Свойство("Статус") Тогда
		ОтбиратьПоСтатусу = Истина;
		Статус = ПараметрыВыбора.Отбор.Статус;
	Иначе
		ОтбиратьПоСтатусу = Ложь;
		Статус = Неопределено;
	КонецЕсли;
	
	Если ПараметрыВыбора.Отбор.Свойство("Тип") Тогда
		ОтбиратьПоТипу = Истина;
		Тип = ПараметрыВыбора.Отбор.Тип;
	Иначе
		ОтбиратьПоТипу = Ложь;
		Тип = Неопределено;
	КонецЕсли;
	
	Если ПараметрыВыбора.Свойство("ИсключитьВеткиБезПрямогоПомещения") Тогда
		ИсключитьВеткиБезПрямогоПомещения = ПараметрыВыбора.ИсключитьВеткиБезПрямогоПомещения;
	Иначе
		ИсключитьВеткиБезПрямогоПомещения = Ложь;
	КонецЕсли;
	
	ВеткаДляИсправления = Неопределено;
	ОтбиратьВеткиДляИсправления = Ложь;
	Если ПараметрыВыбора.Свойство("ВеткаДляИсправления", ВеткаДляИсправления) Тогда
		ОтбиратьВеткиДляИсправления = Истина;
	КонецЕсли;
	
	ОтбиратьДляИсправленияВОсновнойВетке = Ложь;
	Если ПараметрыВыбора.Свойство("ОтбиратьДляИсправленияВОсновнойВетке") 
		И ПараметрыВыбора.ОтбиратьДляИсправленияВОсновнойВетке Тогда
		ОтбиратьДляИсправленияВОсновнойВетке = Истина;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ИсключитьСсылки", ИсключитьСсылки);
	Запрос.УстановитьПараметр("ОтбиратьПоСтатусу", ОтбиратьПоСтатусу);
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("ОтбиратьПоТипу", ОтбиратьПоТипу);
	Запрос.УстановитьПараметр("Тип", Тип);
	Запрос.УстановитьПараметр("ИсключитьВеткиБезПрямогоПомещения", ИсключитьВеткиБезПрямогоПомещения);
	Запрос.УстановитьПараметр("ОтбиратьВеткиДляИсправления", ОтбиратьВеткиДляИсправления);
	Запрос.УстановитьПараметр("ВеткаДляИсправления", ВеткаДляИсправления);
	Запрос.УстановитьПараметр("ОтбиратьДляИсправленияВОсновнойВетке", ОтбиратьДляИсправленияВОсновнойВетке);
	
	СтрокаПоиска = ПараметрыВыбора.СтрокаПоиска;
	
	Если СтрокаПоиска <> Неопределено Тогда
		СпецСимвол = "\";
		СимволыДляЭкранирования = СпецСимвол + "%_[]^";
		ЭкранированнаяСтрокаПоиска = СтрокаПоиска;
		Для Позиция=1 По СтрДлина(СимволыДляЭкранирования) Цикл
			ТекущийСимвол = Сред(СимволыДляЭкранирования, Позиция, 1);
			ЭкранированнаяСтрокаПоиска = СтрЗаменить(ЭкранированнаяСтрокаПоиска, ТекущийСимвол, СпецСимвол + ТекущийСимвол);
		КонецЦикла;
		Запрос.УстановитьПараметр("СтрокаПоиска", ЭкранированнаяСтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ОтбиратьПоИмени", Истина);
	Иначе
		Запрос.УстановитьПараметр("СтрокаПоиска", "");
		Запрос.УстановитьПараметр("ОтбиратьПоИмени", Ложь);
	КонецЕсли;

	
	СписокВыбора = Новый СписокЗначений;
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Функция ВеткиСДублирующимсяИменем(ИмяВетки, Владелец)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Ветки.Имя КАК Имя
		|ИЗ
		|	Справочник.Ветки КАК Ветки
		|ГДЕ
		|	НЕ Ветки.ПометкаУдаления
		|	И Ветки.Имя ПОДОБНО &ИмяВетки
		|	И Ветки.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("ИмяВетки", ИмяВетки + "%");
	Запрос.УстановитьПараметр("Проект", Владелец);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Имя"); 
	
КонецФункции

Функция ВерсияРазработкиВетки(Ветка)
	Версия = "";
	Если Не ЗначениеЗаполнено(Ветка) Тогда
		Возврат Версия;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВерсииПроекта.НомерРедакции КАК НомерРедакции,
		|	ВерсииПроекта.НомерПодредакции КАК НомерПодредакции,
		|	ВерсииПроекта.НомерВерсии КАК НомерВерсии,
		|	ВерсииПроекта.ДатаОкончанияРазработки КАК ДатаОкончанияРазработки,
		|	ВерсииПроекта.ДатаНачалаРазработки КАК ДатаНачалаРазработки
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|ГДЕ
		|	ВерсииПроекта.Ветка = &Ветка
		|	И ВерсииПроекта.ДатаНачалаРазработки > ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачалаРазработки");
	
	Запрос.УстановитьПараметр("Ветка", Ветка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(Выборка.НомерРедакции);
		МассивСтрок.Добавить(Выборка.НомерПодредакции);
		МассивСтрок.Добавить(Выборка.НомерВерсии);
		Версия = СтрСоединить(МассивСтрок, ".");
	КонецЕсли;
	Возврат Версия;
КонецФункции

Функция УбратьЗапрещенныеСимволыИзИмениВетки(Знач Стр)
	Стр = СтрЗаменить(Стр, """", "");
	Стр = СтрЗаменить(Стр, Символы.ПС, "");
	Стр = СтрЗаменить(Стр, Символы.ВК, "");
	ЗапрещенныеСимволы = " ~↓↑–<>,\|':;!№%?*()@#$%^&*+`";
	
	Для НомерСимвола = 1 По СтрДлина(ЗапрещенныеСимволы) Цикл
		ЗапрещенныйСимвол = Сред(ЗапрещенныеСимволы, НомерСимвола, 1);
		Стр = СтрЗаменить(Стр, ЗапрещенныйСимвол, "");
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

#КонецОбласти

#КонецЕсли