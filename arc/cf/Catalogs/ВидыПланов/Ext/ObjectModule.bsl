
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Статус                              = Перечисления.СтатусыВидовПланов.Черновик;
	ВидСогласуемогоРесурсаПлановыхРабот = Справочники.ВидыСогласуемыхРесурсов.ВидРесурсаПоУмолчанию(); 
	
	Если ДанныеЗаполнения = Неопределено
		Или Не ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		Или Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеЗаполнения, "ТипПлана") Тогда
		
		ТипПлана = Перечисления.ТипыПланов.Рабочий;
		
	Иначе
		
		ТипПлана = ДанныеЗаполнения.ТипПлана;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидСогласуемогоРесурсаПлановыхРабот");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НормативПланируемогоВремени = 0 
		И ПорогОтклоненияОтНормативаПланируемогоВремени > 0 Тогда
		
		ПорогОтклоненияОтНормативаПланируемогоВремени = 0;
		
	КонецЕсли;
	
	ОчиститьДублиТабличнойЧастиСПользователями("УчастникиПланирования", "Участник");
	ОчиститьДублиТабличнойЧастиСПользователями("ВладельцыПлана",        "Владелец");
	
	СформироватьПредставлениеТабличнойЧастиПоПользователям("УчастникиПланирования", 
	                                                       "Участник", 
	                                                       УчастникиСтрокой, 
	                                                       НСтр("ru = 'Участников'"));
	
	СформироватьПредставлениеТабличнойЧастиПоПользователям("ВладельцыПлана", 
	                                                       "Владелец", 
	                                                       ВладельцыСтрокой, 
	                                                       НСтр("ru = 'Владельцев'"));
	
	ПроверитьСоответвиеПланаЗанятостиПодчиненнымПланам(Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Справочники.ВидыПланов.УдалитьНеСоответствующиеНастройкамПланы(Ссылка);
	Если Статус = Перечисления.СтатусыВидовПланов.Действует Тогда
		Справочники.ВидыПланов.СоздатьПланыПоВидуПланаЕслиНеобходимо(Ссылка, НачалоДня(ТекущаяДатаСеанса()), 4);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СформироватьПредставлениеТабличнойЧастиПоПользователям(ИмяТабличнойЧасти, ИмяКолонки, РеквизитПредставление, ЗаголовокПредставления)
	
	РеквизитПредставление = "";
	КоличествоПользователей = ЭтотОбъект[ИмяТабличнойЧасти].Количество();
	
	Если КоличествоПользователей = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоПользователей > 3 Тогда
		РеквизитПредставление = СтрШаблон(НСтр("ru = '%1 - %2, в т.ч.'"), ЗаголовокПредставления, КоличествоПользователей);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 3
	|	Пользователи.Представление КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивУчастников)";
	
	Запрос.УстановитьПараметр("МассивУчастников", ЭтотОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку(ИмяКолонки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Индекс = 0;
	
	Пока Выборка.Следующий() Цикл
	
		Если Индекс = 0 Тогда
			РеквизитПредставление = РеквизитПредставление + " ";
		Иначе
			РеквизитПредставление = РеквизитПредставление + ", ";
		КонецЕсли;
		
		РеквизитПредставление = РеквизитПредставление + Выборка.Представление;
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	РеквизитПредставление = РеквизитПредставление + ".";
	
КонецПроцедуры

Процедура ОчиститьДублиТабличнойЧастиСПользователями(ИмяТабличнойЧасти, ИмяКолонки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.ИмяКолонки  КАК Пользователь,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Пользователь             КАК Пользователь,
	|	КОЛИЧЕСТВО(ТабличнаяЧасть.Пользователь) КАК Количество
	|ИЗ
	|	ТабличнаяЧасть КАК ТабличнаяЧасть
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Пользователь
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТабличнаяЧасть.Пользователь) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Пользователь КАК Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабличнаяЧасть.Пользователь КАК Пользователь,
	|		МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		ТабличнаяЧасть КАК ТабличнаяЧасть
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабличнаяЧасть.Пользователь) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТабличнаяЧасть",      ЭтотОбъект[ИмяТабличнойЧасти].Выгрузить());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТабличнаяЧасть.ИмяКолонки", "ТабличнаяЧасть." + ИмяКолонки);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[1].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ИмяТабличнойЧасти].Очистить();
	
	Выборка = Результат[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока             = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока[ИмяКолонки] = Выборка.Пользователь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоответвиеПланаЗанятостиПодчиненнымПланам(Отказ)
	
	Если Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипПлана = Перечисления.ТипыПланов.Занятости Тогда
		
		ТекущиеНастройкиПланирования = НастройкиПланирования[0];
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВидыПланов.Ссылка                                  КАК Ссылка,
		|	ВидыПланов.Наименование                            КАК Наименование,
		|	ВидыПлановНастройкиПланирования.Периодичность      КАК Периодичность,
		|	ВидыПлановНастройкиПланирования.КоличествоПериодов КАК КоличествоПериодов,
		|	ВидыПлановНастройкиПланирования.НачалоДействия     КАК НачалоДействия,
		|	ВидыПлановНастройкиПланирования.КонецДействия      КАК КонецДействия
		|ИЗ
		|	Справочник.ВидыПланов.НастройкиПланирования КАК ВидыПлановНастройкиПланирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
		|		ПО ВидыПлановНастройкиПланирования.Ссылка = ВидыПланов.Ссылка
		|ГДЕ
		|	НЕ ВидыПланов.ПометкаУдаления
		|	И ВидыПланов.РодительскийПлан = &ТекущийПлан
		|	И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)
		|	И ВидыПлановНастройкиПланирования.НомерСтроки = 1";
		
		Запрос.УстановитьПараметр("ТекущийПлан", Ссылка);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если ТекущиеНастройкиПланирования.Периодичность <> Выборка.Периодичность Тогда
				
				СообщитьОжидаемыеНастройкиПодчиненныхПланов(Выборка.Ссылка, Выборка.Наименование, Отказ);
				Продолжить;
				
			КонецЕсли;
			
			Если ТекущиеНастройкиПланирования.КоличествоПериодов <> Выборка.КоличествоПериодов Тогда
				
				СообщитьОжидаемыеНастройкиПодчиненныхПланов(Выборка.Ссылка, Выборка.Наименование, Отказ);
				Продолжить;
				
			КонецЕсли;
			
			ДанныеПланаЗанятости = Новый Структура;
			ДанныеПланаЗанятости.Вставить("Периодичность",      ТекущиеНастройкиПланирования.Периодичность);
			ДанныеПланаЗанятости.Вставить("КоличествоПериодов", ТекущиеНастройкиПланирования.КоличествоПериодов);
			ДанныеПланаЗанятости.Вставить("НачалоДействия",     ТекущиеНастройкиПланирования.НачалоДействия); 
			
			ДатаНачинаяСКорректна = Справочники.ВидыПланов.ДатаНачалаПланированияСоответсвуетРодительскомуПлану(Выборка.НачалоДействия,
			                                                                                                    ДанныеПланаЗанятости);
			
			Если Не ДатаНачинаяСКорректна Тогда
				СообщитьОжидаемыеНастройкиПодчиненныхПланов(Выборка.Ссылка, Выборка.Наименование,Отказ);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОжидаемыеНастройкиПодчиненныхПланов(ВидПлана, НаименованиеВидаПодчиненогоПлана, Отказ)
	
	ТекстСообщения = НСтр("ru = 'Для данного плана занятости уже существут подчиненный действующий рабочий план ""%1"" и его настройки не соответствуют новым настройкам периодичности планирования'");
	ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, НаименованиеВидаПодчиненогоПлана),
	                                      ВидПлана,,, Отказ);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли




