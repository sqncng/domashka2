#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает данные вида плана.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
// Возвращаемое значение:
//   Структура - содержит:
//     * ВидПлана                            - СправочникСсылка.ВидыПланов
//     * ВладелецПлана                       - СправочникСсылка.Пользователи
//     * ВидСогласуемогоРесурсаПлановыхРабот - СправочникСсылка.ВидыСогласуемыхРесурсов
//     * Статус                              - ПеречислениеСсылка.СтатусыПланов
//     * Наименование                        - Строка
//     * Периодичность                       - ПеречислениеСсылка.ПериодичностьПланов
//     * КоличествоПериодов                  - Число
//     * НачалоДействия                      - Дата
//     * КонецДействия                       - Дата
//     * Участники                           - Массив
//     * ВсеНастройкиПланирования            - ТаблицаЗначений - история настроек периодичности планирования
//
Функция ДанныеВидаПлана(ВидПлана) Экспорт
	
	ДанныеВидаПлана = НовыйДанныеВидаПлана();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыПланов.Ссылка                                                                         КАК ВидПлана,
	|	ВидыПланов.Статус                                                                         КАК Статус,
	|	ВидыПланов.ВидСогласуемогоРесурсаПлановыхРабот                                            КАК ВидСогласуемогоРесурсаПлановыхРабот,
	|	ВидыПланов.ПороговоеЗначениеПрочихРабот                                                   КАК ПороговоеЗначениеПрочихРабот,
	|	ВидыПланов.ПороговоеЗначениеЭтапаПопаданиеВПланЗанятости                                  КАК ПороговоеЗначениеЭтапаПопаданиеВПланЗанятости,
	|	ВидыПланов.Наименование                                                                   КАК Наименование,
	|	ВидыПланов.ТипПлана                                                                       КАК ТипПлана,
	|	ЕстьNULL(ВидыПлановРодительский.Ссылка, ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка))     КАК РодительскийВидПлана,
	|	ЕстьNULL(ВидыПлановРодительский.ТипПлана, ЗНАЧЕНИЕ(Перечисление.ТипыПланов.ПустаяСсылка)) КАК ТипРодительскогоПлана,
	|	ЕстьNULL(ВидыСогласуемыхРесурсов.ЕдиницаИзмерения, """")                                  КАК ЕдиницаИзмеренияВидРесурса,
	|	ЕстьNULL(ВидыСогласуемыхРесурсов.Наименование, """")                                      КАК НаименованиеВидРесурса,
	|	ВидыПланов.НастройкиОформленияНезаполненнаяЦель                                           КАК НастройкиОформленияНезаполненнаяЦель,
	|	ВидыПланов.НастройкиОформленияНезаполненоЧтоДостигнуто                                    КАК НастройкиОформленияНезаполненоЧтоДостигнуто,
	|	ВидыПланов.НормативПланируемогоВремени                                                    КАК НормативПланируемогоВремени,
	|	ВидыПланов.ПорогОтклоненияОтНормативаПланируемогоВремени                                  КАК ПорогОтклоненияОтНормативаПланируемогоВремени
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПлановРодительский
	|		ПО ВидыПланов.РодительскийПлан = ВидыПлановРодительский.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыСогласуемыхРесурсов КАК ВидыСогласуемыхРесурсов
	|		ПО ВидыПланов.ВидСогласуемогоРесурсаПлановыхРабот = ВидыСогласуемыхРесурсов.Ссылка

	|ГДЕ
	|	ВидыПланов.Ссылка = &ВидПлана
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	ВидыПлановУчастникиПланирования.Участник КАК Участник
	|ИЗ
	|	Справочник.ВидыПланов.УчастникиПланирования КАК ВидыПлановУчастникиПланирования
	|ГДЕ
	|	ВидыПлановУчастникиПланирования.Ссылка = &ВидПлана
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	ВидыПлановВладельцыПлана.Владелец КАК Владелец
	|ИЗ
	|	Справочник.ВидыПланов.ВладельцыПлана КАК ВидыПлановВладельцыПлана
	|ГДЕ
	|	ВидыПлановВладельцыПлана.Ссылка = &ВидПлана
	|;
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыПлановНастройкиПланирования.Периодичность      КАК Периодичность,
	|	ВидыПлановНастройкиПланирования.КоличествоПериодов КАК КоличествоПериодов,
	|	ВидыПлановНастройкиПланирования.НачалоДействия     КАК НачалоДействия,
	|	ВидыПлановНастройкиПланирования.КонецДействия      КАК КонецДействия
	|ИЗ
	|	Справочник.ВидыПланов.НастройкиПланирования КАК ВидыПлановНастройкиПланирования
	|ГДЕ
	|	ВидыПлановНастройкиПланирования.Ссылка = &ВидПлана
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыПлановНастройкиПланирования.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	ВидыПлановНастройкиПланирования.Периодичность      КАК Периодичность,
	|	ВидыПлановНастройкиПланирования.КоличествоПериодов КАК КоличествоПериодов,
	|	ВидыПлановНастройкиПланирования.НачалоДействия     КАК НачалоДействия,
	|	ВидыПлановНастройкиПланирования.КонецДействия      КАК КонецДействия
	|ИЗ
	|	Справочник.ВидыПланов.НастройкиПланирования КАК ВидыПлановНастройкиПланирования
	|ГДЕ
	|	ВидыПлановНастройкиПланирования.Ссылка = &ВидПлана
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыПлановНастройкиПланирования.НомерСтроки";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = Результат[0].Выбрать();
	ВыборкаУчастники    = Результат[1].Выбрать();
	ВыборкаВладельцы    = Результат[2].Выбрать();
	ВыборкаНастройки    = Результат[3].Выбрать();
	
	Если ВыборкаШапка.Следующий() Тогда
	
		ДанныеВидаПлана.ВидПлана                                        = ВыборкаШапка.ВидПлана;
		ДанныеВидаПлана.Статус                                          = ВыборкаШапка.Статус;
		ДанныеВидаПлана.Наименование                                    = ВыборкаШапка.Наименование;
		ДанныеВидаПлана.ВидСогласуемогоРесурсаПлановыхРабот             = ВыборкаШапка.ВидСогласуемогоРесурсаПлановыхРабот;
		ДанныеВидаПлана.ЕдиницаИзмеренияВидРесурса                      = ВыборкаШапка.ЕдиницаИзмеренияВидРесурса;
		ДанныеВидаПлана.НаименованиеВидРесурса                          = ВыборкаШапка.НаименованиеВидРесурса;
		ДанныеВидаПлана.ПороговоеЗначениеПрочихРабот                    = ВыборкаШапка.ПороговоеЗначениеПрочихРабот;
		ДанныеВидаПлана.ПороговоеЗначениеЭтапаПопаданиеВПланЗанятости   = ВыборкаШапка.ПороговоеЗначениеЭтапаПопаданиеВПланЗанятости;
		ДанныеВидаПлана.ТипПлана                                        = ВыборкаШапка.ТипПлана;
		ДанныеВидаПлана.РодительскийВидПлана                            = ВыборкаШапка.РодительскийВидПлана;
		ДанныеВидаПлана.ТипРодительскогоПлана                           = ВыборкаШапка.ТипРодительскогоПлана;
		ДанныеВидаПлана.НастройкиОформленияНезаполненнаяЦель            = ВыборкаШапка.НастройкиОформленияНезаполненнаяЦель;
		ДанныеВидаПлана.НастройкиОформленияНезаполненоЧтоДостигнуто     = ВыборкаШапка.НастройкиОформленияНезаполненоЧтоДостигнуто;
		ДанныеВидаПлана.НормативПланируемогоВремени                     = ВыборкаШапка.НормативПланируемогоВремени;
		ДанныеВидаПлана.ПорогОтклоненияОтНормативаПланируемогоВремени   = ВыборкаШапка.ПорогОтклоненияОтНормативаПланируемогоВремени;
	КонецЕсли;
	
	Пока ВыборкаУчастники.Следующий() Цикл
		
		ДанныеВидаПлана.Участники.Добавить(ВыборкаУчастники.Участник);
		
	КонецЦикла;
	
	Пока ВыборкаВладельцы.Следующий() Цикл
		
		ДанныеВидаПлана.ВладельцыПлана.Добавить(ВыборкаВладельцы.Владелец);
		
	КонецЦикла;
	
	Если ВыборкаНастройки.Следующий() Тогда
	
		ДанныеВидаПлана.Периодичность      = ВыборкаНастройки.Периодичность;
		ДанныеВидаПлана.КоличествоПериодов = ВыборкаНастройки.КоличествоПериодов;
		ДанныеВидаПлана.НачалоДействия     = ВыборкаНастройки.НачалоДействия;
		ДанныеВидаПлана.КонецДействия      = ВыборкаНастройки.КонецДействия;
	
	КонецЕсли;
	
	ДанныеВидаПлана.ВсеНастройкиПланирования = Результат[3].Выгрузить();
	
	Возврат ДанныеВидаПлана;
	
КонецФункции

// Определяет план текущего периода по виду плана.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
// Возвращаемое значение:
//   Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
Функция ПланТекущегоПерида(ВидПлана) Экспорт
	
	Возврат ПланПериода(ВидПлана, НачалоДня(ТекущаяДатаСеанса()));
	
КонецФункции

// Определяет составляемый план текущего периода по виду плана.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
// Возвращаемое значение:
//   Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
Функция СоставляемыйПланТекущегоПериода(ВидПлана) Экспорт

	ПланПериода = ПланПериода(ВидПлана, НачалоДня(ТекущаяДатаСеанса()));
	
	Пока ПланПериода.Зафиксирован Цикл
		
		ПланПериода = ПланПериода(ВидПлана, НачалоДня(ПланПериода.КонецПериода + 86400 + 2));
		
	КонецЦикла;
	
	Возврат ПланПериода;
	
КонецФункции

// Определяет план периода по виду плана и дате.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
//  ДатаПлана  - Дата
// Возвращаемое значение:
//   Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
Функция ПланПериода(ВидПлана, ДатаПлана) Экспорт
	
	ДанныеВидаПлана = ДанныеВидаПлана(ВидПлана);
	
	ДанныеПланаПериода = НовыйДанныеПланаПериода();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И Планы.НачалоПериода <= &ТекущаяДата
	|	И Планы.КонецПериода >= &ТекущаяДата";
	
	Запрос.УстановитьПараметр("ВидПлана",    ДанныеВидаПлана.ВидПлана);
	Запрос.УстановитьПараметр("ТекущаяДата", ДатаПлана);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Результат = РезультатСозданияПланаПоВидуПлана(ДанныеВидаПлана, ДатаПлана);
		
		Если ПустаяСтрока(Результат.ТекстОшибки) Тогда
			ЗаполнитьЗначенияСвойств(ДанныеПланаПериода, Результат);
		КонецЕсли;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеПланаПериода, Выборка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПланаПериода;
	
КонецФункции

// Создает планы по виду плана, начиная с определенной даты на заданное количество периодов, если они не созданы ранее.
//
// Параметры:
//  ВидПлана            - СправочникСсылка.ВидыПлана
//  ТребуемаяДатаПлана  - Дата
//  КоличествоПериодов  - Число
//
Процедура СоздатьПланыПоВидуПланаЕслиНеобходимо(ВидПлана, ТребуемаяДатаПлана, КоличествоПериодов) Экспорт
	
	ДанныеВидаПлана       = ДанныеВидаПлана(ВидПлана);
	ДатаНеобходимогоПлана = ТребуемаяДатаПлана;
	
	Для Инд = 1 По КоличествоПериодов Цикл
		
		НастройкиПланаНаДату  = НастройкиПланаПоДате(ДатаНеобходимогоПлана, ДанныеВидаПлана.ВсеНастройкиПланирования);
		Если Не ЗначениеЗаполнено(НастройкиПланаНаДату.Периодичность) Тогда
			НастройкиПланаНаДату  = НастройкиПланаПоБлижайшейПредстоящейДате(ДатаНеобходимогоПлана, ДанныеВидаПлана.ВсеНастройкиПланирования);
		КонецЕсли;
		ДатаСКоторойСоздавать = Макс(ДатаНеобходимогоПлана, НастройкиПланаНаДату.НачалоДействия);
		ПланПериода           = ПланПериода(ВидПлана, ДатаСКоторойСоздавать);
		
		Если Не ЗначениеЗаполнено(ПланПериода.ИдентификаторПлана) Тогда
			Прервать;
		КонецЕсли;
		
		ДатаНеобходимогоПлана = НачалоДня(ПланПериода.КонецПериода + 86400 + 2);
		
	КонецЦикла;
	
КонецПроцедуры

// Создает планы по виду плана на заданное количество периодов, если они не созданы ранее.
//
// Параметры:
//  ВидПлана               - СправочникСсылка.ВидыПлана
//  ДатаНеобходимогоПлана  - Дата
//  ДатаНеобходимогоПлана  - Дата
//
Процедура ДобавитьПланы(ВидПлана, КоличествоПериодов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.КонецПериода КАК КонецПериода
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонецПериода УБЫВ";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СоздатьПланыПоВидуПланаЕслиНеобходимо(ВидПлана, НачалоДня(Выборка.КонецПериода + 86400 + 2), КоличествоПериодов);
		
	Иначе
		
		СоздатьПланыПоВидуПланаЕслиНеобходимо(ВидПлана, НачалоДня(ТекущаяДатаСеанса()), КоличествоПериодов);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает план для вида плана на заданную дату
//
// Параметры:
//  ДанныеВидаПлана       - Структура - см.ДанныеВидаПлана 
//  ДатаНеобходимогоПлана - Дата
// Возвращаемое значение:
//   Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * ТекстОшибки        - Строка
//
Функция РезультатСозданияПланаПоВидуПлана(ДанныеВидаПлана, ДатаНеобходимогоПлана) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустаяДата = Дата(1, 1, 1);
	
	РезультатСоздания = Новый Структура;
	РезультатСоздания.Вставить("ИдентификаторПлана", 0);
	РезультатСоздания.Вставить("НачалоПериода",      ПустаяДата);
	РезультатСоздания.Вставить("КонецПериода",       ПустаяДата);
	РезультатСоздания.Вставить("ТекстОшибки",        "");
	
	НастройкиПланаНаДату = НастройкиПланаПоДате(ДатаНеобходимогоПлана, ДанныеВидаПлана.ВсеНастройкиПланирования);
	ДатаНачалаПериодаБезПлана = НастройкиПланаНаДату.НачалоДействия;
	
	Если НастройкиПланаНаДату.НачалоДействия = ПустаяДата  Тогда
		РезультатСоздания.ТекстОшибки = НСтр("ru = 'Не удалось определить требуемый период'");
		Возврат РезультатСоздания;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.НачалоПериода КАК НачалоПериода,
	|	Планы.КонецПериода  КАК КонецПериода,
	|	Планы.ЕстьЗаписи    КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И Планы.НачалоПериода >= &НачалоДействия
	|	И (Планы.КонецПериода = ДатаВремя(1,1,1,1,1,1) Или Планы.КонецПериода <= &КонецДействия)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонецПериода УБЫВ";
	
	Запрос.УстановитьПараметр("ВидПлана",       ДанныеВидаПлана.ВидПлана);
	Запрос.УстановитьПараметр("НачалоДействия", НастройкиПланаНаДату.НачалоДействия);
	Запрос.УстановитьПараметр("КонецДействия",  НастройкиПланаНаДату.КонецДействия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ДатаНачалаПериодБезПлана = НачалоДня(КонецДня(Выборка.КонецПериода) + 2);
	
	КонецЕсли;
	
	Если ДатаНеобходимогоПлана < ДатаНачалаПериодаБезПлана Тогда
		РезультатСоздания.ТекстОшибки = НСтр("ru = 'Запрашиваемый период плана раньше даты начала действия'");
		Возврат РезультатСоздания;
	КонецЕсли;
	
	ПериодПлана = ПериодПлана(НастройкиПланаНаДату, ДатаНачалаПериодаБезПлана, ДатаНеобходимогоПлана);
	
	Если ПериодПлана.ДатаНачала = Дата(1, 1, 1)
		Или ПериодПлана.ДатаОкончания = Дата(1, 1, 1) Тогда
		
		РезультатСоздания.ТекстОшибки = НСтр("ru = 'Не удалось определить требуемый период'");
		Возврат РезультатСоздания;
		
	КонецЕсли;
	
	ПараметрыЗаписиПлана = РегистрыСведений.Планы.ПараметрыЗаписиПлана();
	ПараметрыЗаписиПлана.ВидПлана      = ДанныеВидаПлана.ВидПлана;
	ПараметрыЗаписиПлана.НачалоПериода = ПериодПлана.ДатаНачала;
	ПараметрыЗаписиПлана.КонецПериода  = ПериодПлана.ДатаОкончания;
	ПараметрыЗаписиПлана.Активность    = Истина;
	ПараметрыЗаписиПлана.Зафиксирован  = Ложь;
	
	РегистрыСведений.Планы.ВыполнитьЗаписьПлана(ПараметрыЗаписиПлана);
	
	ЗаполнитьЗначенияСвойств(РезультатСоздания, ПараметрыЗаписиПлана);
	
	Возврат РезультатСоздания;
	
КонецФункции

// Получает период плана на заданную дату
//
// Параметры:
//  Настройки               - ТаблицаЗначений - содержит:
//     * НачалоДействия     - Дата
//     * КонецДействия      - Дата
//     * КоличествоПериодов - Число
//     * Периодичность      - ПеречислениеСсылка.ПериодичностьПланов
//  ДатаНачалаПериодаОтсчета - Дата - дата окончания известного плана.
//  ДатаНеобходимогоПлана    - Дата - дата требуемого плана.
//
// Возвращаемое значение:
//   Структура - см. ПланированиеКлиентСервер.НовыйПериодПлана
//
Функция ПериодПлана(Настройки, ДатаНачалаПериодаОтсчета, ДатаНеобходимогоПлана)
	
	Если ДатаНеобходимогоПлана < ДатаНачалаПериодаОтсчета Тогда
		Возврат ПланированиеКлиентСервер.НовыйПериодПлана(); 
	КонецЕсли;
	
	ТекущийПериодПлана = ПериодПланаПоДатеНачала(Настройки, ДатаНачалаПериодаОтсчета);
	
	Пока Истина Цикл
		
		Если ТекущийПериодПлана.ДатаНачала = Дата(1, 1, 1)
			И ТекущийПериодПлана.ДатаОкончания = Дата(1, 1, 1) Тогда
			
			Возврат ТекущийПериодПлана;
			
		КонецЕсли;
		
		Если ТекущийПериодПлана.ДатаНачала <= ДатаНеобходимогоПлана
			И ТекущийПериодПлана.ДатаОкончания >= ДатаНеобходимогоПлана Тогда
			
			Возврат ТекущийПериодПлана;
			
		КонецЕсли;
		
		ТекущийПериодПлана = ПериодПланаПоДатеНачала(Настройки, НачалоДня(КонецДня(ТекущийПериодПлана.ДатаОкончания) + 2));
		
	КонецЦикла;
	
КонецФункции

// Определяет следующий составляемый план на дату.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
//  ДатаПлана  - Дата
//  Создавать  - Булево - признак необходимости создавать план, если он отсутствует.
//
// Возвращаемое значение:
//   Неопределено, Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
Функция СледующийСоставляемыйПлан(ВидПлана, Дата, Создавать) Экспорт
	
	ДанныеПланаПериода = НовыйДанныеПланаПериода();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи,
	|	Планы.ВидПлана           КАК ВидПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.НачалоПериода > &Дата
	|	И Планы.ВидПлана = &ВидПлана
	|	И НЕ Планы.Зафиксирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Если Создавать Тогда
			
			Возврат ПланПериода(ВидПлана, НачалоДня(Дата + 86400 + 2));
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеПланаПериода, Выборка);
		
		Возврат ДанныеПланаПериода;
		
	КонецЕсли;
	
КонецФункции

// Определяет предыдущий составляемый план на дату.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
//  ДатаПлана  - Дата
//
// Возвращаемое значение:
//   Неопределено, Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
Функция ПредыдущийСоставляемыйПлан(ВидПлана, Дата) Экспорт
	
	ДанныеПланаПериода = НовыйДанныеПланаПериода();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи,
	|	Планы.ВидПлана           КАК ВидПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.КонецПериода < &Дата
	|	И Планы.ВидПлана = &ВидПлана
	|	И НЕ Планы.Зафиксирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	КонецПериода УБЫВ";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеПланаПериода, Выборка);
		
		Возврат ДанныеПланаПериода;
		
	КонецЕсли;
	
КонецФункции

// Определяет предыдущий зафиксированный план на дату.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
//  ДатаПлана  - Дата
//
// Возвращаемое значение:
//   Неопределено, Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
Функция ПредыдущийЗафиксированныйПлан(ВидПлана, Дата) Экспорт
	
	ДанныеПланаПериода = НовыйДанныеПланаПериода();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи,
	|	Планы.ВидПлана           КАК ВидПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.НачалоПериода < &Дата
	|	И Планы.ВидПлана = &ВидПлана
	|	И Планы.Зафиксирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода УБЫВ";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеПланаПериода, Выборка);
		
		Возврат ДанныеПланаПериода;
		
	КонецЕсли;
	
КонецФункции

// Определяет следующий зафиксированный план на дату.
//
// Параметры:
//  ВидПлана  - СправочникСсылка.ВидыПлана
//  ДатаПлана  - Дата
//
// Возвращаемое значение:
//   Неопределено, Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
Функция СледующийЗафиксированныйПлан(ВидПлана, Дата) Экспорт
	
	ДанныеПланаПериода = НовыйДанныеПланаПериода();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи,
	|	Планы.ВидПлана           КАК ВидПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.НачалоПериода > &Дата
	|	И Планы.ВидПлана = &ВидПлана
	|	И Планы.Зафиксирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода УБЫВ";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеПланаПериода, Выборка);
		
		Возврат ДанныеПланаПериода;
		
	КонецЕсли;
	
КонецФункции

// Определяет вид плана пользователя по умолчанию.
//
// Параметры:
//  Пользователь  - СправочникСсылка.ВидыПлана
//  ТипПлана      - СправочникСсылка.ТипыПланов
//
//
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.ВидыПлана
//
Функция ВидПланаПользователяПоУмолчанию(Пользователь, ТипПлана) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.Ссылка КАК Ссылка,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Планы.ИдентификаторПлана) КАК КоличествоПланов,
	|		МИНИМУМ(ВложенныйЗапрос.ЗначениеУпорядочивания) КАК ЗначениеУпорядочивания
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВидыПлановУчастникиПланирования.Ссылка КАК Ссылка,
	|			1 КАК ЗначениеУпорядочивания
	|		ИЗ
	|			Справочник.ВидыПланов.УчастникиПланирования КАК ВидыПлановУчастникиПланирования
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|				ПО ВидыПлановУчастникиПланирования.Ссылка = ВидыПланов.Ссылка
	|		ГДЕ
	|			ВидыПлановУчастникиПланирования.Участник = &Пользователь
	|			И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)
	|			И ВидыПланов.ТипПлана = &ТипПлана
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВидыПлановВладельцыПлана.Ссылка,
	|			0
	|		ИЗ
	|			Справочник.ВидыПланов.ВладельцыПлана КАК ВидыПлановВладельцыПлана
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК ВидыПланов
	|				ПО ВидыПлановВладельцыПлана.Ссылка = ВидыПланов.Ссылка
	|		ГДЕ
	|			ВидыПлановВладельцыПлана.Владелец = &Пользователь
	|			И ВидыПланов.ТипПлана = &ТипПлана
	|			И ВидыПланов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовПланов.Действует)) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Планы КАК Планы
	|			ПО (ВложенныйЗапрос.Ссылка = Планы.ВидПлана
	|					И Планы.ЕстьЗаписи)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.Ссылка) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ЗначениеУпорядочивания,
	|	ВложенныйЗапрос.КоличествоПланов УБЫВ";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТипПлана",     ТипПлана);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

// Удаляет несоответствующие настройкам виды плана. 
// Требуется в случае, когда настройки плана изменяются и уже созданы планы,
//   которые не соответствуют новым настройкам, но в них нет записей
//
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПлана 
//
Процедура УдалитьНеСоответствующиеНастройкамПланы(ВидПлана) Экспорт
	
	ДанныеВидаПлана = ДанныеВидаПлана(ВидПлана);
	ПланыКУдалению = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И НЕ Планы.ЕстьЗаписи";
	
	Запрос.УстановитьПараметр("ВидПлана", ВидПлана);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПериодПлана = Новый Структура;
		ПериодПлана.Вставить("НачалоПериода", Выборка.НачалоПериода);
		ПериодПлана.Вставить("КонецПериода",  Выборка.КонецПериода);
		
		Если Не ДатыПланаСоответствуютНастройкам(ПериодПлана, ДанныеВидаПлана.ВсеНастройкиПланирования) Тогда
			ПланыКУдалению.Добавить(Выборка.ИдентификаторПлана);
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого ИдентификаторПлана Из ПланыКУдалению Цикл
		РегистрыСведений.Планы.УдалитьПланПоИдентификатору(ИдентификаторПлана);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, соответствуют ли даты плана настройкам вида плана
//
// Параметры:
//  ПериодПлана           - Структура - содержит:
//  НастройкиПланирования - ТаблицаЗначений - содержит:
//     * НачалоДействия     - Дата
//     * КонецДействия      - Дата
//     * КоличествоПериодов - Число
//     * Периодичность      - ПеречислениеСсылка.ПериодичностьПланов
//
// Возвращаемое значение:
//  Булево
//
Функция ДатыПланаСоответствуютНастройкам(ПериодПлана, НастройкиПланирования) Экспорт
	
	Для Каждого СтрокаНастроек Из НастройкиПланирования  Цикл
		
		Если ПериодПлана.НачалоПериода >= СтрокаНастроек.НачалоДействия
			И (ПериодПлана.НачалоПериода <= СтрокаНастроек.КонецДействия Или СтрокаНастроек.КонецДействия = Дата(1, 1, 1)) Тогда
			
			НачалоПериодаПлана = СтрокаНастроек.НачалоДействия;
			
			Пока Истина Цикл
				
				ПериодПланаПоНастройкам = ПериодПланаПоДатеНачала(СтрокаНастроек, НачалоПериодаПлана);
				
				Если ПериодПланаПоНастройкам.ДатаНачала = ПериодПлана.НачалоПериода Тогда
					
					Если ПериодПланаПоНастройкам.ДатаОкончания = ПериодПлана.КонецПериода Тогда
						
						Возврат Истина;
						
					Иначе
						
						Возврат Ложь;
						
					КонецЕсли;
					
				ИначеЕсли ПериодПланаПоНастройкам.ДатаНачала > ПериодПлана.НачалоПериода Тогда
					
					Возврат Ложь;
					
				ИначеЕсли ПериодПланаПоНастройкам.ДатаНачала = Дата(1, 1, 1) Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
				НачалоПериодаПлана = НачалоДня(КонецДня(ПериодПланаПоНастройкам.ДатаОкончания) + 2) ;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Определяет период плана по дате начала
//
// Параметры:
//  ДатаНачалаПериода - Дата           - Структура - содержит:
//  Настройки - - ТаблицаЗначений - содержит:
//     * НачалоДействия     - Дата
//     * КонецДействия      - Дата
//     * КоличествоПериодов - Число
//     * Периодичность      - ПеречислениеСсылка.ПериодичностьПланов
//
// Возвращаемое значение:
//  Структура - см. ПланированиеКлиентСервер.НовыйПериодПлана
//
Функция ПериодПланаПоДатеНачала(Настройки, ДатаНачалаПериода)
	
	ПериодПлана = ПланированиеКлиентСервер.НовыйПериодПлана();
	
	Если Настройки.КонецДействия <> Дата(1, 1, 1) 
		И ДатаНачалаПериода > Настройки.КонецДействия Тогда
		
		Возврат ПериодПлана;
		
	КонецЕсли;
	
	ПериодПлана.ДатаНачала = ДатаНачалаПериода;
	
	Если Настройки.Периодичность = Перечисления.ПериодичностьПланов.Год Тогда
		
		ПериодПлана.ДатаОкончания = НачалоДня(ДобавитьМесяц(ПериодПлана.ДатаНачала, 12 * Настройки.КоличествоПериодов) - 2);
		
	ИначеЕсли Настройки.Периодичность = Перечисления.ПериодичностьПланов.Квартал Тогда
		
		ПериодПлана.ДатаОкончания = НачалоДня(ДобавитьМесяц(ПериодПлана.ДатаНачала, 3 * Настройки.КоличествоПериодов) - 2);
		
	ИначеЕсли Настройки.Периодичность = Перечисления.ПериодичностьПланов.Месяц Тогда
		
		ПериодПлана.ДатаОкончания = НачалоДня(ДобавитьМесяц(ПериодПлана.ДатаНачала, Настройки.КоличествоПериодов) - 2);
		
	ИначеЕсли Настройки.Периодичность = Перечисления.ПериодичностьПланов.Неделя Тогда
		
		ПериодПлана.ДатаОкончания = НачалоДня(ПериодПлана.ДатаНачала + 86400 * 7 * Настройки.КоличествоПериодов - 2);
		
	ИначеЕсли Настройки.Периодичность = Перечисления.ПериодичностьПланов.День Тогда
		
		ПериодПлана.ДатаОкончания = ПериодПлана.ДатаНачала + 86400 * (Настройки.КоличествоПериодов - 1);
		
	КонецЕсли;
	
	Если Настройки.КонецДействия <> Дата(1, 1, 1) Тогда
		ПериодПлана.ДатаОкончания = Мин(Настройки.КонецДействия, ПериодПлана.ДатаОкончания);
	КонецЕсли;
	
	Возврат ПериодПлана;
	
КонецФункции

// Получает данные предыдущего и следующих планов
//
// Параметры:
//  ДанныеПлана - Структура - содержит:
//     * ИдентификаторПлана - Число
//     * НачалоПериода      - Дата
//     * КонецПериода       - Дата
//     * Зафиксирован       - Булево
//     * ЕстьЗаписи         - Булево
//
// Возвращаемое значение:
//  Структура - содержит:
//    ДанныеПредыдущегоПлана - см. ДанныеВидаПлана
//    ДанныеСледующегоПлана  - см. ДанныеВидаПлана
//
Функция ДанныеПредшествующегоСледующегоПланов(ДанныеПлана) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеПредыдущегоПлана", Неопределено);
	Результат.Вставить("ДанныеСледующегоПлана", Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи,
	|	Планы.ВидПлана           КАК ВидПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.НачалоПериода > &ДатаОкончанияТекущегоПлана
	|	И Планы.ВидПлана = &ВидПлана
	|	И Планы.Зафиксирован = &Зафиксирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода
	|;
	|
	|///////////////////////////////////////////////////////1
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.ЕстьЗаписи         КАК ЕстьЗаписи,
	|	Планы.ВидПлана           КАК ВидПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.КонецПериода < &ДатаНачалаТекущегоПлана
	|	И Планы.ВидПлана = &ВидПлана
	|	И Планы.Зафиксирован = &Зафиксирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода Убыв";
	
	Запрос.УстановитьПараметр("ВидПлана",                   ДанныеПлана.ВидПлана);
	Запрос.УстановитьПараметр("ДатаНачалаТекущегоПлана",    ДанныеПлана.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияТекущегоПлана", ДанныеПлана.КонецПериода);
	Запрос.УстановитьПараметр("Зафиксирован",               ДанныеПлана.Зафиксирован);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаСледующийПлан = РезультатЗапроса[0].Выбрать();
	Если ВыборкаСледующийПлан.Следующий() Тогда
		Результат.ДанныеСледующегоПлана = НовыйДанныеПланаПериода();
		ЗаполнитьЗначенияСвойств(Результат.ДанныеСледующегоПлана, ВыборкаСледующийПлан);
	КонецЕсли;
	
	ВыборкаПредыдущийПлан = РезультатЗапроса[1].Выбрать();
	Если ВыборкаПредыдущийПлан.Следующий() Тогда
		Результат.ДанныеПредыдущегоПлана = НовыйДанныеПланаПериода();
		ЗаполнитьЗначенияСвойств(Результат.ДанныеПредыдущегоПлана, ВыборкаПредыдущийПлан);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, что дата начала планирования соответствует родительскому плану
//
// Параметры:
//  ДатаНачала - Дата - дата начала проверяемого подчиненного плана
//  ДанныеРодительскогоПлана - Структура - См. ДанныеВидаПлана
//
// Возвращаемое значение:
//  Булево - Истина, если соответствует.
//
Функция ДатаНачалаПланированияСоответсвуетРодительскомуПлану(ДатаНачала, ДанныеРодительскогоПлана) Экспорт
	
	ПериодичностьРодительскогоПлана      = ДанныеРодительскогоПлана.Периодичность;
	КоличествоПериодовРодительскогоПлана = ДанныеРодительскогоПлана.КоличествоПериодов;
	НачалоДействияРодительскогоПлана     = ДанныеРодительскогоПлана.НачалоДействия;
	
	Если НачалоДействияРодительскогоПлана > ДатаНачала Тогда
		
		Пока НачалоДействияРодительскогоПлана > ДатаНачала Цикл
			
			НачалоДействияРодительскогоПлана = Перечисления.ПериодичностьПланов.РезультатИзмененияДатыНаПериодичность
			                                            (НачалоДействияРодительскогоПлана, 
			                                             ПериодичностьРодительскогоПлана,
			                                             КоличествоПериодовРодительскогоПлана,
			                                             "Назад");
			
			
			Если  НачалоДействияРодительскогоПлана = ДатаНачала Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		
	ИначеЕсли НачалоДействияРодительскогоПлана < ДатаНачала Тогда
		
		Пока НачалоДействияРодительскогоПлана < ДатаНачала Цикл
			
			НачалоДействияРодительскогоПлана = Перечисления.ПериодичностьПланов.РезультатИзмененияДатыНаПериодичность
			                                          (НачалоДействияРодительскогоПлана, 
			                                           ПериодичностьРодительскогоПлана,
			                                           КоличествоПериодовРодительскогоПлана,
			                                           "Вперед");
			
			Если НачалоДействияРодительскогоПлана = ДатаНачала Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет ближайшую дату начала планирования, соответствующую настройкам родительского плана
//
// Параметры:
//  ВидПлана                 - СправочникСсылка.ВидыПланов - ссылка на проверяемый подчиненный план
//  ДатаНачала               - Дата - дата начала проверяемого подчиненного плана
//  ДанныеРодительскогоПлана - Структура - См. ДанныеВидаПлана
//
// Возвращаемое значение:
//  Дата - ближайшая доступная дата.
//
Функция БлижайшаяДатаНачалаПланированияСоотвествующаяНастройкамРодительскогоПлана(ВидПлана, ДатаНачала, ДанныеРодительскогоПлана) Экспорт
	
	ПериодичностьРодительскогоПлана      = ДанныеРодительскогоПлана.Периодичность;
	КоличествоПериодовРодительскогоПлана = ДанныеРодительскогоПлана.КоличествоПериодов;
	НачалоДействияРодительскогоПлана     = ДанныеРодительскогоПлана.НачалоДействия;
	
	ДанныеПлана = РегистрыСведений.Планы.ПоследнийЗначимыйПланВПериод(ВидПлана, НачалоДействияРодительскогоПлана);
	
	Если ДанныеПлана.ЕстьПлан Тогда
		
		Пока НачалоДействияРодительскогоПлана <= ДанныеПлана.КонецПериодаПлана Цикл
			
			НачалоДействияРодительскогоПлана = Перечисления.ПериодичностьПланов.РезультатИзмененияДатыНаПериодичность
			                                        (НачалоДействияРодительскогоПлана, 
			                                         ПериодичностьРодительскогоПлана,
			                                         КоличествоПериодовРодительскогоПлана,
			                                         "Вперед");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НачалоДействияРодительскогоПлана;
	
КонецФункции

// Возвращает данные планов по заданному периоду
//
// Параметры:
//  ПараметрыПолучения  - Структура - см. НовыйПараметрыПолученияДанныхПлановПоПериоду
//
// Возвращаемое значение:
//   ТаблицаЗначений   - содержит колонки:
//     * ИдентификаторПлана - Число - 
//     * НачалоПериода      - Дата -
//     * КонецПериода       - Дата - 
//     * Зафиксирован       - Булево - 
//
Функция ДанныеПлановПоЗаданномуПериоду(ПараметрыПолучения) Экспорт
	
	ДатыПланированияПоПериоду = 
		Перечисления.ПериодичностьПланов.ДатаНачалаИОкончанияПлановПопадающихВПериод(ПараметрыПолучения);

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Планы.ИдентификаторПлана КАК ИдентификаторПлана,
	|	Планы.НачалоПериода      КАК НачалоПериода,
	|	Планы.КонецПериода       КАК КонецПериода,
	|	Планы.Зафиксирован       КАК Зафиксирован
	|ИЗ
	|	РегистрСведений.Планы КАК Планы
	|ГДЕ
	|	Планы.ВидПлана = &ВидПлана
	|	И Планы.КонецПериода <= &КонецПериода
	|	И Планы.НачалоПериода >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода";
	
	Запрос.УстановитьПараметр("КонецПериода",  ДатыПланированияПоПериоду.КонецПериодаПланов);
	Запрос.УстановитьПараметр("НачалоПериода", ДатыПланированияПоПериоду.НачалоПериодаПланов);
	Запрос.УстановитьПараметр("ВидПлана",      ПараметрыПолучения.ВидПлана);
	
	ТаблицаПланов = Запрос.Выполнить().Выгрузить();
	
	РегистрыСведений.Планы.СоздатьОтсутствующиеПланыВПериоде(ТаблицаПланов, ДатыПланированияПоПериоду, ПараметрыПолучения);
	
	Возврат ТаблицаПланов;
	
КонецФункции

// Конструктор параметров получения данных планов по периоду
//
//  Возвращаемое значение:
//  ДанныеПлана - Структура - содержит:
//     * ВидПлана              - СправочникСсылка.ВидыПланов -
//     * ДатаНачала            - Дата -
//     * ДатаОкончания         - Дата -
//     * КоличествоПериодов    - Число -
//     * НастройкиПланирования - ТаблицаЗначений -
//
Функция НовыйПараметрыПолученияДанныхПлановПоПериоду() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ВидПлана",              Справочники.ВидыПланов.ПустаяСсылка());
	Параметры.Вставить("ДатаНачала",            Неопределено);
	Параметры.Вставить("ДатаОкончания",         Неопределено);
	Параметры.Вставить("КоличествоПериодов",    Неопределено);
	Параметры.Вставить("НастройкиПланирования", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает данные планов по заданному периоду
//
// Параметры:
//   ТаблицаЗначений   - содержит колонки:
//     * ИдентификаторПлана - Число - 
//     * НачалоПериода      - Дата -
//     * КонецПериода       - Дата - 
//     * Зафиксирован       - Булево - 
//
// Возвращаемое значение:
//   СтандартныйПериод   - период включающий все планы в таблице
//
Функция ПериодПлановПоТаблицеПланов(ТаблицаПланов) Экспорт
	
	ПериодПланов = Новый СтандартныйПериод;
	
	Если ТаблицаПланов.Количество() > 0 Тогда
		
		ПериодПланов.ДатаНачала = ТаблицаПланов[0].НачалоПериода;
		ПериодПланов.ДатаОкончания = ТаблицаПланов[ТаблицаПланов.Количество() - 1].КонецПериода;
		
	КонецЕсли;
	
	Возврат ПериодПланов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйДанныеВидаПлана()
	
	ДанныеВидаПлана = Новый Структура;
	
	ДанныеВидаПлана.Вставить("ВидПлана",                                      Неопределено);
	ДанныеВидаПлана.Вставить("ВладельцыПлана",                                Новый Массив);
	ДанныеВидаПлана.Вставить("ВидСогласуемогоРесурсаПлановыхРабот",           Неопределено);
	ДанныеВидаПлана.Вставить("ЕдиницаИзмеренияВидРесурса",                    ""); 
	ДанныеВидаПлана.Вставить("НаименованиеВидРесурса",                        "");
	ДанныеВидаПлана.Вставить("ПороговоеЗначениеПрочихРабот",                  0);
	ДанныеВидаПлана.Вставить("ПороговоеЗначениеЭтапаПопаданиеВПланЗанятости", 0);
	ДанныеВидаПлана.Вставить("Статус",                                        Неопределено);
	ДанныеВидаПлана.Вставить("Наименование",                                  "");
	ДанныеВидаПлана.Вставить("Периодичность",                                 Неопределено);
	ДанныеВидаПлана.Вставить("КоличествоПериодов",                            0);
	ДанныеВидаПлана.Вставить("НачалоДействия",                                Неопределено);
	ДанныеВидаПлана.Вставить("КонецДействия",                                 Неопределено);
	ДанныеВидаПлана.Вставить("Участники",                                     Новый Массив);
	ДанныеВидаПлана.Вставить("ВсеНастройкиПланирования",                      Неопределено);
	ДанныеВидаПлана.Вставить("ТипПлана",                                      Неопределено);
	ДанныеВидаПлана.Вставить("РодительскийВидПлана",                          Неопределено);
	ДанныеВидаПлана.Вставить("ТипРодительскогоПлана",                         Неопределено);
	ДанныеВидаПлана.Вставить("НастройкиОформленияНезаполненнаяЦель",          Неопределено);
	ДанныеВидаПлана.Вставить("НастройкиОформленияНезаполненоЧтоДостигнуто",   Неопределено);
	ДанныеВидаПлана.Вставить("НормативПланируемогоВремени",                   0);
	ДанныеВидаПлана.Вставить("ПорогОтклоненияОтНормативаПланируемогоВремени", 0);
	
	Возврат ДанныеВидаПлана;
	
КонецФункции

Функция НовыйДанныеПланаПериода()
	
	ДанныеПланаПериода = Новый Структура;
	ДанныеПланаПериода.Вставить("ИдентификаторПлана", Неопределено);
	ДанныеПланаПериода.Вставить("НачалоПериода",      Дата(1, 1, 1));
	ДанныеПланаПериода.Вставить("КонецПериода" ,      Дата(1, 1, 1));
	ДанныеПланаПериода.Вставить("Зафиксирован" ,      Ложь);
	ДанныеПланаПериода.Вставить("ЕстьЗаписи" ,        Ложь);
	
	Возврат ДанныеПланаПериода;
	
КонецФункции

Функция НастройкиПланаПоДате(Дата, НастройкиПланирования);
	
	Настройки = Новый Структура;
	Настройки.Вставить("НачалоДействия",     Дата(1,1,1));
	Настройки.Вставить("КонецДействия",      Дата(1,1,1));
	Настройки.Вставить("КоличествоПериодов", 0);
	Настройки.Вставить("Периодичность",      Перечисления.ПериодичностьПланов.ПустаяСсылка());
	
	Для Каждого СтрокаНастроек Из НастройкиПланирования Цикл
		
		Если Дата >= СтрокаНастроек.НачалоДействия
			И (Дата <= СтрокаНастроек.КонецДействия Или СтрокаНастроек.КонецДействия = Дата(1, 1, 1)) Тогда
			
			ЗаполнитьЗначенияСвойств(Настройки, СтрокаНастроек);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Настройки;

КонецФункции

Функция НастройкиПланаПоБлижайшейПредстоящейДате(ДатаНеобходимогоПлана, НастройкиПланирования)
	
	Настройки = НовыйНастройкиПлана();
	
	Для Каждого СтрокаНастроек Из НастройкиПланирования Цикл
		
		Если ДатаНеобходимогоПлана < СтрокаНастроек.НачалоДействия 
			И (СтрокаНастроек.НачалоДействия < Настройки.НачалоДействия
				Или Настройки.НачалоДействия = Дата(1,1,1)) Тогда
			
			ЗаполнитьЗначенияСвойств(Настройки, СтрокаНастроек);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция НовыйНастройкиПлана()
	
	Настройки = Новый Структура;
	Настройки.Вставить("НачалоДействия",     Дата(1,1,1));
	Настройки.Вставить("КонецДействия",      Дата(1,1,1));
	Настройки.Вставить("КоличествоПериодов", 0);
	Настройки.Вставить("Периодичность",      Перечисления.ПериодичностьПланов.ПустаяСсылка());
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#КонецЕсли


