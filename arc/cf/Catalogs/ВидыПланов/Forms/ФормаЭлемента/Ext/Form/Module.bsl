
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьФорму();
		
	Если Объект.Ссылка.Пустая() Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если Не ПодчиненДругомуПлану 
		И ЗначениеЗаполнено(Объект.РодительскийПлан) Тогда
		
		Объект.РодительскийПлан = ПредопределенноеЗначение("Справочник.ВидыПланов.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.НастройкиПланирования.Количество() = 0 Тогда
		СтрокаНастройки = ТекущийОбъект.НастройкиПланирования.Добавить();
		
		ПеренестиНастройкиПланированияСФормыВТабличнуюЧасть(СтрокаНастройки);
	
	Иначе
		
		РезультатПроверки = НастройкиИзмененыКорректно(ТекущийОбъект);
		
		Если РезультатПроверки.ИзмененияКорректны  Тогда
			
			Если РезультатПроверки.ПереноситьНастройкиИзФормы Тогда
				ПеренестиНастройкиПланированияСФормыВТабличнуюЧасть(ТекущийОбъект.НастройкиПланирования.Вставить(0));
			КонецЕсли;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ОформлятьНезаполенноеЧтоДостигнуто Тогда
		
		НастройкиОформления = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		НастройкиОформления.Использовать              = Истина;
		НастройкиОформления.Текст                     = ТекстЧтоДостигнуто;
		НастройкиОформления.ЦветТекста                = ЦветТекстаЧтоДостигнуто;
		НастройкиОформления.ЦветФона                  = ЦветФонаЧтоДостигнуто;
		НастройкиОформления.АвтоотметкаНезаполненного = АвтоотметкаЧтоДостигнуто;
		
		ТекущийОбъект.НастройкиОформленияНезаполненоЧтоДостигнуто = Новый ХранилищеЗначения(НастройкиОформления);
		
	Иначе
		
		ТекущийОбъект.НастройкиОформленияНезаполненоЧтоДостигнуто = Неопределено;
		
	КонецЕсли;
	
	Если ОформлятьНезаполненнуюЦель Тогда
		
		НастройкиОформления = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		НастройкиОформления.Использовать              = Истина;
		НастройкиОформления.Текст                     = ТекстЦель;
		НастройкиОформления.ЦветТекста                = ЦветТекстаЦель;
		НастройкиОформления.ЦветФона                  = ЦветФонаЦель;
		НастройкиОформления.АвтоотметкаНезаполненного = АвтоотметкаЦель;
		
		ТекущийОбъект.НастройкиОформленияНезаполненнаяЦель = Новый ХранилищеЗначения(НастройкиОформления);
		
	Иначе
		
		ТекущийОбъект.НастройкиОформленияНезаполненнаяЦель = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВидыПланов", Новый Структура, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПриИзменииРодительскогоПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура НормативПланируемогоВремениПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	
	ВыбратьПодобратьУчастников(Истина);
	РежимПодбора = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьВладельцев(Команда)
	
	ВыбратьПодобратьВладельцев(Истина);
	РежимПодбора = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура История(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресТаблицыНастройкиПланирования", РезультатПомещенияНастроекВоВременноеХранилище());
	
	ОткрытьФорму("Справочник.ВидыПланов.Форма.История", ПараметрыОткрытия, ЭтотОбъект, ,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция РезультатПомещенияНастроекВоВременноеХранилище()
	
	ТаблицаНастроек = Объект.НастройкиПланирования.Выгрузить();
	
	Если ТаблицаНастроек.Количество() > 0 Тогда
		ТаблицаНастроек.Удалить(0);
	КонецЕсли;
	Возврат ПоместитьВоВременноеХранилище(ТаблицаНастроек);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	ПланированиеКлиентСервер.ЗаполнитьПредставлениеЗначенийСпискаВыбораПериодаВЗависимостиОтКоличестваПериодов(
		Элементы.Периодичность.СписокВыбора,
		КоличествоПериодов);
		
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	
	ПланированиеКлиентСервер.ЗаполнитьПредставлениеЗначенийСпискаВыбораПериодаВЗависимостиОтКоличестваПериодов(
		Элементы.Периодичность.СписокВыбора,
		КоличествоПериодов);
		
	УправлениеДоступностью(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура НачинаяСПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительскийПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыВидовПланов.Действует"));
	СтруктураБыстрогоОтбора.Вставить("ПоказыватьВидыПланов", "УчастникИлиВладелец");
	СтруктураБыстрогоОтбора.Вставить("ТипПлана", ПредопределенноеЗначение("Перечисление.ТипыПланов.Занятости"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОповещениеПослеВыбораПлана = Новый ОписаниеОповещения("ПослеВыбораВидаПлана", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыПланов.ФормаВыбора",
	             ПараметрыФормы,
	             ЭтотОбъект,,,, 
	             ОповещениеПослеВыбораПлана, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодчиненДругомуПлануПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительскийПланПриИзменении(Элемент)
	
	ПриИзменииРодительскогоПлана();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаОформленияЦелиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьОформление" Тогда
		
		ПараметрыОткрытия = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		ПараметрыОткрытия.Использовать              = ОформлятьНезаполненнуюЦель;
		ПараметрыОткрытия.Текст                     = ТекстЦель;
		ПараметрыОткрытия.ЦветТекста                = ЦветТекстаЦель;
		ПараметрыОткрытия.ЦветФона                  = ЦветФонаЦель;
		ПараметрыОткрытия.АвтоотметкаНезаполненного = АвтоотметкаЦель;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент); 
		
		ОпоповещениеИзмененияОформления = Новый ОписаниеОповещения("ПослеИзмененияНастроекОформления", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.ВидыПланов.Форма.НастройкаОформления", ПараметрыОткрытия, ЭтотОбъект,,,,
		             ОпоповещениеИзмененияОформления, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаОформленияРезультатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НастроитьОформление" Тогда
		
		ПараметрыОткрытия = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		ПараметрыОткрытия.Использовать              = ОформлятьНезаполенноеЧтоДостигнуто;
		ПараметрыОткрытия.Текст                     = ТекстЧтоДостигнуто;
		ПараметрыОткрытия.ЦветТекста                = ЦветТекстаЧтоДостигнуто;
		ПараметрыОткрытия.ЦветФона                  = ЦветФонаЧтоДостигнуто;
		ПараметрыОткрытия.АвтоотметкаНезаполненного = АвтоотметкаЧтоДостигнуто;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		
		ОпоповещениеИзмененияОформления = Новый ОписаниеОповещения("ПослеИзмененияНастроекОформления", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.ВидыПланов.Форма.НастройкаОформления", ПараметрыОткрытия, ЭтотОбъект,,,,
		             ОпоповещениеИзмененияОформления, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьНезаполненнуюЦельЕслиПоРаботеВнесеноВПланМеньшеЧемОстатокПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьНазаполненныйРезультатЕслиСтатусРаботыОтличенОтВыполненоПриИзменении(Элемент)
	
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастникиПланирования

&НаКлиенте
Процедура УчастникиПланированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПользователейВТабличнуюЧасть(ВыбранноеЗначение, "УчастникиПланирования", "Участник");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВладельцыПлана

&НаКлиенте
Процедура ВладельцыПланаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбработкаВыбораПользователейВТабличнуюЧасть(ВыбранноеЗначение, "ВладельцыПлана", "Владелец");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПереносНастроекПланированияСФормыВТаблицу

&НаСервере
Функция НастройкиИзмененыКорректно(ТекущийОбъект)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИзмененияКорректны",         Истина);
	РезультатПроверки.Вставить("ПереноситьНастройкиИзФормы", Истина);
	
	ИзмененаДатаНачала      = Ложь;
	ИзмененаПериодичность   = Ложь;
	ИзмененРодительскийПлан = Ложь;
	
	СтрокаНастройки = ТекущийОбъект.НастройкиПланирования[0];
	
	Если СтрокаНастройки.Периодичность <> Периодичность
		Или СтрокаНастройки.КоличествоПериодов <> КоличествоПериодов Тогда
		
		ИзмененаПериодичность = Истина;
		
	КонецЕсли;
	
	Если СтрокаНастройки.НачалоДействия <> НачинаяС Тогда
		
		ИзмененаДатаНачала    = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РодительскийПлан) Тогда
		
		ДанныеРодительскогоПлана = Справочники.ВидыПланов.ДанныеВидаПлана(Объект.РодительскийПлан);
		ДатаНачинаяСКорректна    = Справочники.ВидыПланов.ДатаНачалаПланированияСоответсвуетРодительскомуПлану(НачинаяС, ДанныеРодительскогоПлана);
		
		Если Не ДатаНачинаяСКорректна Тогда
			
			ТекстСообщения = НСтр("ru = 'Дата начала планирования не соответствует периодичности родительского плана занятости.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "НачинаяС"); 
			РезультатПроверки.ИзмененияКорректны         = Ложь;
			РезультатПроверки.ПереноситьНастройкиИзФормы = Ложь;
			Возврат РезультатПроверки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ИзмененаДатаНачала
		И Не ИзмененаПериодичность Тогда
		
		РезультатПроверки.ПереноситьНастройкиИзФормы = Ложь;
		Возврат РезультатПроверки;
		
	КонецЕсли;
	
	КоличествоНастроекПланирования = ТекущийОбъект.НастройкиПланирования.Количество();
	
	Если СтрокаНастройки.НачалоДействия >= НачинаяС  Тогда
	
		Для ИндексСтроки = 0 По КоличествоНастроекПланирования - 1 Цикл
			
			СтрокаПроверяемыхНастроек = ТекущийОбъект.НастройкиПланирования[ИндексСтроки];
			
			ДанныеПлана = РегистрыСведений.Планы.ЕстьЗначимыйПланНачинаяСДаты(ТекущийОбъект.Ссылка, 
			                                                                  Макс(НачинаяС, СтрокаПроверяемыхНастроек.НачалоДействия));
			
			Если ДанныеПлана.ЕстьПлан Тогда
				
				ПараметрыПроверки = Перечисления.ПериодичностьПланов.ПараметрыПроверкиПериодичностиПлана();
				ПараметрыПроверки.ДатаНачалаНастроек         = НачинаяС;
				ПараметрыПроверки.ПериодичностьНастроек      = Периодичность;
				ПараметрыПроверки.КоличествоПериодовНастроек = КоличествоПериодов;
				ПараметрыПроверки.ДатаНачалаПлана            = ДанныеПлана.НачалоПериодаПлана;
				ПараметрыПроверки.ДатаОкончанияПлана         = ДанныеПлана.КонецПериодаПлана;
				
				Если Не Перечисления.ПериодичностьПланов.ПланСоответствуетПериодичностиПлана(ПараметрыПроверки) Тогда
					
					ТекстСообщения = НСтр("ru = 'Невозможно изменить дату начала планирования, так как уже есть планы позднее новой даты начала, которые не будут соответствовать периодичности плана.'");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "НачинаяС"); 
					РезультатПроверки.ИзмененияКорректны         = Ложь;
					РезультатПроверки.ПереноситьНастройкиИзФормы = Ложь;
					Возврат РезультатПроверки;
					
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПроверяемыхНастроек.НачалоДействия = НачинаяС Тогда
				
				УдалитьПервыеСтрокиИзТаблицы(ТекущийОбъект.НастройкиПланирования, ИндексСтроки);
				СтрокаПроверяемыхНастроек.КонецДействия      = Дата(1, 1, 1);
				СтрокаПроверяемыхНастроек.Периодичность      = Периодичность;
				СтрокаПроверяемыхНастроек.КоличествоПериодов = КоличествоПериодов;
				
				РезультатПроверки.ПереноситьНастройкиИзФормы = Ложь;
				Возврат РезультатПроверки;
				
			ИначеЕсли СтрокаПроверяемыхНастроек.НачалоДействия < НачинаяС Тогда
				
				УдалитьПервыеСтрокиИзТаблицы(ТекущийОбъект.НастройкиПланирования, ИндексСтроки);
				СтрокаПроверяемыхНастроек.КонецДействия      = НачалоДня(НачинаяС - 2);
				Возврат РезультатПроверки;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УдалитьПервыеСтрокиИзТаблицы(ТекущийОбъект.НастройкиПланирования, КоличествоНастроекПланирования);
		Возврат РезультатПроверки;
		
	ИначеЕсли СтрокаНастройки.НачалоДействия < НачинаяС  Тогда
		
		ДанныеПлана = РегистрыСведений.Планы.ЕстьЗначимыйПланНачинаяСДаты(ТекущийОбъект.Ссылка, НачинаяС);
		Если ДанныеПлана.ЕстьПлан Тогда
			
			ПараметрыПроверки = Перечисления.ПериодичностьПланов.ПараметрыПроверкиПериодичностиПлана();
			ПараметрыПроверки.ДатаНачалаНастроек         = НачинаяС;
			ПараметрыПроверки.ПериодичностьНастроек      = Периодичность;
			ПараметрыПроверки.КоличествоПериодовНастроек = КоличествоПериодов;
			ПараметрыПроверки.ДатаНачалаПлана            = ДанныеПлана.НачалоПериодаПлана;
			ПараметрыПроверки.ДатаОкончанияПлана         = ДанныеПлана.КонецПериодаПлана;
			
			Если Не Перечисления.ПериодичностьПланов.ПланСоответствуетПериодичностиПлана(ПараметрыПроверки) Тогда
				
				ТекстСообщения = НСтр("ru = 'Невозможно изменить дату начала планирования, так как уже есть планы позднее новой даты начала, которые не будут соответствовать периодичности плана.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"НачинаяС"); 
				РезультатПроверки.ИзмененияКорректны         = Ложь;
				РезультатПроверки.ПереноситьНастройкиИзФормы = Ложь;
				Возврат РезультатПроверки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеПлана = РегистрыСведений.Планы.ПоследнийЗначимыйПланВПериод(ТекущийОбъект.Ссылка, СтрокаНастройки.НачалоДействия, НачинаяС);
		Если ДанныеПлана.ЕстьПлан Тогда
			
			СтрокаНастройки.КонецДействия = НачалоДня(НачинаяС - 1);
			РезультатПроверки.ПереноситьНастройкиИзФормы = Истина;
			Возврат РезультатПроверки;
			
		Иначе
			
			СтрокаНастройки.КонецДействия      = Дата(1, 1, 1);
			СтрокаНастройки.НачалоДействия     = НачинаяС;
			СтрокаНастройки.Периодичность      = Периодичность;
			СтрокаНастройки.КоличествоПериодов = КоличествоПериодов;
			
			РезультатПроверки.ПереноситьНастройкиИзФормы = Ложь;
			
			Если ТекущийОбъект.НастройкиПланирования.Количество() > 1 Тогда
				ТекущийОбъект.НастройкиПланирования[1].КонецДействия = НачалоДня(НачинаяС - 1);
			КонецЕсли;
			
			Возврат РезультатПроверки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;

КонецФункции

&НаСервере
Процедура УдалитьПервыеСтрокиИзТаблицы(Таблица, КоличествоСтрок)
	
	Для Инд = 1  По КоличествоСтрок Цикл
		Таблица.Удалить(0);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиНастройкиПланированияСФормыВТабличнуюЧасть(СтрокаНастройки)
	
	СтрокаНастройки.Периодичность      = Периодичность;
	СтрокаНастройки.КоличествоПериодов = КоличествоПериодов;
	СтрокаНастройки.НачалоДействия     = НачинаяС;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЕдинственныйВидСогласуемыхРесурсов = Справочники.ВидыСогласуемыхРесурсов.ЕдинственныйВидРесурса();
	ТекущийРодительскийПлан = Объект.РодительскийПлан;
	
	Планирование.ЗаполнитьСписокВыбораПериодичностиПланов(Элементы.Периодичность.СписокВыбора);
	ОтобразитьТекущуюПериодичностьПланирования(ЭтотОбъект, НачалоДня(ТекущаяДатаСеанса()));
	ПроверитьДоступностьИзменений();
	ПодчиненДругомуПлану = ЗначениеЗаполнено(Объект.РодительскийПлан);
	ПолучитьНастройкиОформления();
	СформироватьПредставлениеНастроекОформления(ЭтотОбъект);
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьИзменений()
	
	СтруктураПоиска = Новый Структура("Владелец", Пользователи.ТекущийПользователь());
	
	Если Не Объект.Ссылка.Пустая()
		И Объект.ВладельцыПлана.Количество() > 0
		И Объект.ВладельцыПлана.НайтиСтроки(СтруктураПоиска).Количество() = 0
		И Не Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьТекущуюПериодичностьПланирования(Форма, ТекущаяДата)
	
	КоличествоЗаписей = Форма.Объект.НастройкиПланирования.Количество();
	
	Если КоличествоЗаписей > 0 Тогда
		
		ДанныеПериодичности = Форма.Объект.НастройкиПланирования[0];
		Форма.КоличествоПериодов  = ДанныеПериодичности.КоличествоПериодов;
		Форма.Периодичность       = ДанныеПериодичности.Периодичность;
		Форма.НачинаяС            = ДанныеПериодичности.НачалоДействия;
		
	Иначе
		
		Форма.КоличествоПериодов  = 1;
		Форма.Периодичность       = ПредопределенноеЗначение("Перечисление.ПериодичностьПланов.Неделя");
		Форма.НачинаяС            = ТекущаяДата;
		
	КонецЕсли;
	
	ПланированиеКлиентСервер.ЗаполнитьПредставлениеЗначенийСпискаВыбораПериодаВЗависимостиОтКоличестваПериодов(
		Форма.Элементы.Периодичность.СписокВыбора,
		Форма.КоличествоПериодов);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьУчастников(Подобрать)
	
	ВыбратьПодобратьПользователей(Подобрать, "УчастникиПланирования", "Участник");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьВладельцев(Подобрать) 
	
	ВыбратьПодобратьПользователей(Подобрать, "ВладельцыПлана", "Владелец"); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать, ИмяТабличнойЧасти, ИмяКолонки) 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
		Элементы[ИмяТабличнойЧасти].ТекущиеДанные = Неопределено,
		Неопределено,
		Элементы[ИмяТабличнойЧасти].ТекущиеДанные[ИмяКолонки]));
	
	Если Подобрать Тогда
		
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("РасширенныйПодбор", Истина);
		ПараметрыФормы.Вставить("ПараметрыРасширеннойФормыПодбора", ПараметрыРасширеннойФормыПодбора(ИмяТабличнойЧасти, ИмяКолонки));
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы[ИмяТабличнойЧасти]);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасширеннойФормыПодбора(ИмяТабличнойЧасти, ИмяКолонки)
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	Для каждого Элемент Из Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаВыбранныеПользователи               = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь  = Элемент[ИмяКолонки];
		СтрокаВыбранныеПользователи.НомерКартинки = 0;
		
	КонецЦикла;
	
	Если ИмяТабличнойЧасти = "УчастникиПланирования" Тогда
		ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников планирования'");
	Иначе
		ЗаголовокФормыПодбора = НСтр("ru = 'Подбор владельцев планирования'");
	КонецЕсли;
	
	ПараметрыРасширеннойФормыПодбора = Новый Структура;
	ПараметрыРасширеннойФормыПодбора.Вставить("ЗаголовокФормыПодбора", ЗаголовокФормыПодбора);
	ПараметрыРасширеннойФормыПодбора.Вставить("ВыбранныеПользователи", ВыбранныеПользователи);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУчастниковПланированияПоПодобраннымЗначениям(ИмяТабличнойЧасти,
	                                                            ИмяКолонкиТабличнойЧасти,
	                                                            МассивВыбранныхПользователей,
	                                                            МассивВыбранныхГруппПользователей,
	                                                            МассивРанееВыбранныхПользователей);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СоставыГруппПользователей.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ПользователиИзВыбранныхГруппПользователей
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей В(&МассивВыбранныхГруппПользователей)
	|	И НЕ СоставыГруппПользователей.Пользователь.Недействителен
	|	И НЕ СоставыГруппПользователей.Пользователь.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыбранныеПользователи.Пользователь КАК Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПользователиИзВыбранныхГруппПользователей.Пользователь КАК Пользователь
	|	ИЗ
	|		ПользователиИзВыбранныхГруппПользователей КАК ПользователиИзВыбранныхГруппПользователей
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Пользователи.Ссылка
	|	ИЗ
	|		Справочник.Пользователи КАК Пользователи
	|	ГДЕ
	|		Пользователи.Ссылка В(&МассивВыбранныхПользователей)) КАК ВыбранныеПользователи
	|ГДЕ
	|	НЕ ВыбранныеПользователи.Пользователь В (&МассивРанееВыбранныхПользователей)";
	
	Запрос.УстановитьПараметр("МассивВыбранныхГруппПользователей", МассивВыбранныхГруппПользователей);
	Запрос.УстановитьПараметр("МассивВыбранныхПользователей",      МассивВыбранныхПользователей);
	Запрос.УстановитьПараметр("МассивРанееВыбранныхПользователей", МассивРанееВыбранныхПользователей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока                           = Объект[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока[ИмяКолонкиТабличнойЧасти] = Выборка.Пользователь;
	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТипПланаРабочий = (Объект.ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.Рабочий"));
	
	Элементы.История.Видимость = Объект.НастройкиПланирования.Количество() > 1;
	
	Элементы.РодительскийПлан.Видимость                     = ТипПланаРабочий И Форма.ПодчиненДругомуПлану;
	Элементы.КоличествоПериодов.ТолькоПросмотр              = ТипПланаРабочий И Форма.ПодчиненДругомуПлану;
	Элементы.Периодичность.ТолькоПросмотр                   = ТипПланаРабочий И Форма.ПодчиненДругомуПлану;
	Элементы.ГруппаПороговоеЗначениеПрочиеРаботы.Видимость  = ТипПланаРабочий;
	Элементы.ГруппаПороговоеЗначениеПланЗанятости.Видимость = Не ТипПланаРабочий;
	Элементы.ГруппаНаОснованииПланаЗанятости.Видимость      = ТипПланаРабочий;
	
	Элементы.ГруппаВидСогласуемогоРесурса.Видимость = Не (ЗначениеЗаполнено(Форма.ЕдинственныйВидСогласуемыхРесурсов) 
	                                                  И Объект.ВидСогласуемогоРесурсаПлановыхРабот = Форма.ЕдинственныйВидСогласуемыхРесурсов);
	
	Форма.Элементы.ПорогОтклоненияОтНормативаПланируемогоВремени.Доступность = (Форма.Объект.НормативПланируемогоВремени > 0);
	
	Форма.Элементы.ГруппаОформлениеНезаполненнойЦели.Видимость        = ТипПланаРабочий;
	Форма.Элементы.ГруппаОформлениеНезаполненногоРезультата.Видимость = ТипПланаРабочий;
	Форма.Элементы.ДекорацияНастройкаОформленияЦели.Видимость         = Форма.ОформлятьНезаполненнуюЦель И ТипПланаРабочий;
	Форма.Элементы.ДекорацияНастройкаОформленияРезультата.Видимость   = Форма.ОформлятьНезаполенноеЧтоДостигнуто И ТипПланаРабочий;
	
	СформироватьЗаголовокФормы(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьЗаголовокФормы(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.Занятости") Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			
			Форма.Заголовок = НСтр("ru = 'Вид плана занятости (создание)'");
			
		Иначе
			
			Форма.Заголовок = СтрШаблон(НСтр("ru = '%1 (Вид плана занятости)'"), Объект.Наименование);
			
		КонецЕсли;
		
	ИначеЕсли Объект.ТипПлана = ПредопределенноеЗначение("Перечисление.ТипыПланов.Рабочий") Тогда
		
		Если Объект.Ссылка.Пустая() Тогда
			
			Форма.Заголовок = НСтр("ru = 'Вид рабочего плана (создание)'");
			
		Иначе
			
			Форма.Заголовок = СтрШаблон(НСтр("ru = '%1 (Вид рабочего плана)'"), Объект.Наименование);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПользователейВТабличнуюЧасть(ВыбранноеЗначение, ИмяТабличнойЧасти, ИмяКолонкиТабличнойЧасти)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивВыбранныхГруппПользователей = Новый Массив;
	МассивВыбранныхПользователей      = Новый Массив;
	МассивРанееВыбранныхПользователей = Новый Массив;
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") Тогда
			МассивВыбранныхПользователей.Добавить(ЭлементМассива);
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			МассивВыбранныхГруппПользователей.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВыбранныхГруппПользователей.Количество() = 0 
		И МассивВыбранныхПользователей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
		 МассивРанееВыбранныхПользователей.Добавить(СтрокаТаблицы[ИмяКолонкиТабличнойЧасти]);
	КонецЦикла;
	
	ЗаполнитьУчастниковПланированияПоПодобраннымЗначениям(ИмяТабличнойЧасти,
	                                                      ИмяКолонкиТабличнойЧасти,
	                                                      МассивВыбранныхПользователей,
	                                                      МассивВыбранныхГруппПользователей,
	                                                      МассивРанееВыбранныхПользователей);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораВидаПлана(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РодительскийПлан = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменииРодительскогоПлана()
	
	Если ТекущийРодительскийПлан = Объект.РодительскийПлан Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.РодительскийПлан) Тогда
		ТекущийРодительскийПлан = Объект.РодительскийПлан;
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеРодительскогоПланаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеРодительскогоПланаНаСервере()
	
	ДанныеРодительскогоПлана = Справочники.ВидыПланов.ДанныеВидаПлана(Объект.РодительскийПлан);
	
	Периодичность      = ДанныеРодительскогоПлана.Периодичность;
	КоличествоПериодов = ДанныеРодительскогоПлана.КоличествоПериодов; 
	
	ДатаНачинаяСКорректна = Справочники.ВидыПланов.ДатаНачалаПланированияСоответсвуетРодительскомуПлану(НачинаяС, ДанныеРодительскогоПлана);
	Если Не ДатаНачинаяСКорректна Тогда
		НачинаяС = Справочники.ВидыПланов.БлижайшаяДатаНачалаПланированияСоотвествующаяНастройкамРодительскогоПлана(Объект.Ссылка, НачинаяС, ДанныеРодительскогоПлана);
	КонецЕсли;
	
	ТекущийРодительскийПлан = Объект.РодительскийПлан;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиОформления()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	СохраненныеНастройки = СправочникОбъект.НастройкиОформленияНезаполненнаяЦель.Получить();
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		НастройкиОформленияЦели = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		ЗаполнитьЗначенияСвойств(НастройкиОформленияЦели, СохраненныеНастройки);
		
		Если НастройкиОформленияЦели <> Неопределено Тогда
			
			ОформлятьНезаполненнуюЦель = НастройкиОформленияЦели.Использовать;
			ТекстЦель                  = НастройкиОформленияЦели.Текст;
			ЦветТекстаЦель             = НастройкиОформленияЦели.ЦветТекста;
			ЦветФонаЦель               = НастройкиОформленияЦели.ЦветФона;
			АвтоотметкаЦель            = НастройкиОформленияЦели.АвтоотметкаНезаполненного;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СохраненныеНастройки = СправочникОбъект.НастройкиОформленияНезаполненоЧтоДостигнуто.Получить();
	
	Если СохраненныеНастройки <> Неопределено Тогда
	
		НастройкиОформленияЧтоДостигнуто = ПланированиеКлиентСервер.НовыйПараметрыОформленияПоВидуПлана();
		ЗаполнитьЗначенияСвойств(НастройкиОформленияЧтоДостигнуто, СохраненныеНастройки);
		
		Если НастройкиОформленияЧтоДостигнуто <> Неопределено Тогда
			
			ОформлятьНезаполенноеЧтоДостигнуто = НастройкиОформленияЧтоДостигнуто.Использовать;
			ТекстЧтоДостигнуто                 = НастройкиОформленияЧтоДостигнуто.Текст;
			ЦветТекстаЧтоДостигнуто            = НастройкиОформленияЧтоДостигнуто.ЦветТекста;
			ЦветФонаЧтоДостигнуто              = НастройкиОформленияЧтоДостигнуто.ЦветФона;
			АвтоотметкаЧтоДостигнуто              = НастройкиОформленияЧтоДостигнуто.АвтоотметкаНезаполненного;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеНастроекОформления(Форма)

	ПараметрыФормирования = ПараметрыФормированияПредставленияНастроекОформления();
	ПараметрыФормирования.Использовать       = Форма.ОформлятьНезаполненнуюЦель;
	ПараметрыФормирования.Текст              = Форма.ТекстЦель;
	ПараметрыФормирования.ЦветТекста         = Форма.ЦветТекстаЦель;
	ПараметрыФормирования.ЦветФона           = Форма.ЦветФонаЦель;
	ПараметрыФормирования.Автоотметка        = Форма.АвтоотметкаЦель;
	ПараметрыФормирования.ЭлементДекорация   = Форма.Элементы.ДекорацияНастройкаОформленияЦели;
	
	СформироватьПредставлениеНастройкиОформления(Форма, ПараметрыФормирования);
	
	ПараметрыФормирования = ПараметрыФормированияПредставленияНастроекОформления();
	ПараметрыФормирования.Использовать       = Форма.ОформлятьНезаполенноеЧтоДостигнуто;
	ПараметрыФормирования.Текст              = Форма.ТекстЧтоДостигнуто;
	ПараметрыФормирования.ЦветТекста         = Форма.ЦветТекстаЧтоДостигнуто;
	ПараметрыФормирования.ЦветФона           = Форма.ЦветФонаЧтоДостигнуто;
	ПараметрыФормирования.Автоотметка        = Форма.АвтоотметкаЧтоДостигнуто;
	ПараметрыФормирования.ЭлементДекорация   = Форма.Элементы.ДекорацияНастройкаОформленияРезультата;
	
	СформироватьПредставлениеНастройкиОформления(Форма, ПараметрыФормирования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеНастройкиОформления(Форма, ПараметрыФормирования)
	
	ПредставлениеОформления = "";
	ПустойЦвет = Новый Цвет(0, 0, 0);
	
	Если ПараметрыФормирования.Использовать Тогда
		
		Если ПараметрыФормирования.ЦветФона <> ПустойЦвет Тогда
			ПредставлениеОформления = ПредставлениеОформления + СтрШаблон(НСтр("ru = 'Цвет фона: %1.'"), Строка( ПараметрыФормирования.ЦветФона));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПараметрыФормирования.Текст) Тогда
			
			Если НЕ ПустаяСтрока(ПредставлениеОформления) Тогда
				ПредставлениеОформления = ПредставлениеОформления + " ";
			КонецЕсли;
			
			ПредставлениеОформления = ПредставлениеОформления + СтрШаблон(НСтр("ru = 'Текст: %1.'"), ПараметрыФормирования.Текст);
			
		КонецЕсли;
		
		Если ПараметрыФормирования.ЦветТекста <> ПустойЦвет Тогда
			
			Если НЕ ПустаяСтрока(ПредставлениеОформления) Тогда
				ПредставлениеОформления = ПредставлениеОформления + " ";
			КонецЕсли;
			
			ПредставлениеОформления = ПредставлениеОформления + СтрШаблон(НСтр("ru = 'Цвет Текста: %1.'"), Строка( ПараметрыФормирования.ЦветТекста)); 
			
		КонецЕсли;
		
		Если ПараметрыФормирования.Автоотметка Тогда
			
			Если НЕ ПустаяСтрока(ПредставлениеОформления) Тогда
				ПредставлениеОформления = ПредставлениеОформления + " ";
			КонецЕсли;
			
			ПредставлениеОформления = ПредставлениеОформления + НСтр("ru = 'Автоотметка незаполненного.'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеОформления) Тогда
		ПредставлениеОформления = НСтр("ru = 'Настроить оформление'");
	КонецЕсли;
	
	ПараметрыФормирования.ЭлементДекорация.Заголовок = Новый ФорматированнаяСтрока(ПредставлениеОформления,, Форма.ЦветГиперссылки,, "НастроитьОформление");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыФормированияПредставленияНастроекОформления()

	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("Использовать",    Ложь);
	ПараметрыФормирования.Вставить("Текст",           "");
	ПараметрыФормирования.Вставить("ЦветТекста",      Неопределено);
	ПараметрыФормирования.Вставить("ЦветФона",        Неопределено);
	ПараметрыФормирования.Вставить("Автоотметка",     Неопределено);
	ПараметрыФормирования.Вставить("ЭлементДекорация",Неопределено);
	
	Возврат ПараметрыФормирования;

КонецФункции 

&НаКлиенте
Процедура ПослеИзмененияНастроекОформления(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Элемент = Элементы.ДекорацияНастройкаОформленияЦели Тогда
		
		ТекстЦель       = Результат.Текст;
		ЦветТекстаЦель  = Результат.ЦветТекста;
		ЦветФонаЦель    = Результат.ЦветФона;
		АвтоотметкаЦель = Результат.АвтоотметкаНезаполненного;
		
		Модифицированность = Истина;
		
	ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ДекорацияНастройкаОформленияРезультата Тогда
		
		ТекстЧтоДостигнуто       = Результат.Текст;
		ЦветТекстаЧтоДостигнуто  = Результат.ЦветТекста;
		ЦветФонаЧтоДостигнуто    = Результат.ЦветФона;
		АвтоотметкаЧтоДостигнуто = Результат.АвтоотметкаНезаполненного;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	СформироватьПредставлениеНастроекОформления(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиЗадачи;
	ИспользуетсяУчетВремени = ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени");
	
	Если Не ИспользуетсяУчетВремени Тогда
		Элементы.ГруппаОформлениеНезаполненнойЦели.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


