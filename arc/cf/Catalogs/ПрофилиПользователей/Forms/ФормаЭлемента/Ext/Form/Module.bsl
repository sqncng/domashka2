
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусКонтроля = "Добавлено";
		ПриЧтенииСозданииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкиСервер.УстановитьТекущуюСтраницу("Справочник.ПрофилиПользователей.ФормаЭлемента", Элементы.ГруппаСтраницы, "ТекущаяСтраницаФормыПрофиляПользователей");
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Неопределено
		ИЛИ НЕ Элементы.ГруппаСтраницы.ТекущаяСтраница.Доступность Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОписание;
	КонецЕсли;
	
	УстановитьШрифтФорматированногоТекста();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ПриЧтенииСозданииНаСервере();
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Описание, РедактируемыйОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Заметки, РедактируемыйОбъект.ХранилищеЗаметок);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Описание, ТекущийОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Заметки, ТекущийОбъект.ХранилищеЗаметок);
	ТекущийОбъект.Описание = Описание.ПолучитьТекст();
	ТекущийОбъект.Заметки = Заметки.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ЗаписатьДанныеСогласующихРесурсыПредмета(ЭтотОбъект, Объект.Ссылка);
	// Конец ЗадачиПроцессов
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);	
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеИнформацииОбИспользованииИсточника" И Параметр= Объект.Ссылка Тогда
		ПриИзмененииДанныхОбИспользованииИсточникаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Объект.РазделыПроекта.Очистить();
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы, 
		Объект.РазделыПроекта.Количество());
		
	ПриИзмененииВладельцаНаСервере();
		
КонецПроцедуры

// ЗадачиПроцессов

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиСогласующиеРесурс(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗадачиПроцессовКлиент.ОбработкаНавигационнойСсылкиСогласующиеРесурс(ЭтотОбъект,
	                                                                    Элемент,
	                                                                    НавигационнаяСсылкаФорматированнойСтроки,
	                                                                    СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработатьИзменениеСогласующихРесурсыПоПредмету()
	
	ЗадачиПроцессов.ОбработатьИзменениеСогласующихРесурсыПоПредмету(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СогласующийРесурсПриИзменении()

	ЗадачиПроцессовКлиент.ОтразитьИзменениеЕдинственногоСогласующегоРесурса(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИсточникаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ОбъектИсточник) Тогда
		ПоказатьЗначение(,ОбъектИсточник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоИспользованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Приемник", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Источник", ОбъектИсточник);
	ПараметрыОткрытия.Вставить("ПравилоИспользования", ПравилоИспользования);
	
	ОткрытьФорму("ОбщаяФорма.ИнформацияОбИспользованииОбъектаИсточника", ПараметрыОткрытия);
	
КонецПроцедуры

// Конец ЗадачиПроцессов

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВидыДоступа

&НаКлиенте
Процедура ВидыДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВидыДоступа") Тогда
		ДобавитьВидДоступа(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для Каждого ЗначениеМассива из ВыбранноеЗначение Цикл
			ДобавитьВидДоступа(ЗначениеМассива);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборВидовДоступа(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Владелец));
	
	ОткрытьФорму("Справочник.ВидыДоступа.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.ВидыДоступа,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРазделы(Команда)
	
	ПараметрыФормы = Новый Структура;
	МассивРазделов = Новый Массив;
	
	Для Каждого СтрокаТЧ из Объект.РазделыПроекта Цикл
		МассивРазделов.Добавить(СтрокаТЧ.Раздел);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Проект", Объект.Владелец);
	ПараметрыФормы.Вставить("МассивРазделов", МассивРазделов);
	ПараметрыФормы.Вставить("ИзмененияДоступны", ДоступноИзменениеПрофиля);

	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнительныеРазделыЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.РазделыПроекта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРазделыЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("Массив") Тогда
        
        Объект.РазделыПроекта.Очистить();
        
        КоличествоРазделов = 0;
        Для Каждого Раздел из Результат Цикл
            НоваяСтрока = Объект.РазделыПроекта.Добавить();
            НоваяСтрока.Раздел = Раздел;
            
            КоличествоРазделов = КоличествоРазделов + 1;
        КонецЦикла;
        
        ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы, КоличествоРазделов);
		
		Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ОтобразитьИнформациюПоСогласующимВФорме(ЭтотОбъект, Объект.Ссылка, "СтраницаЗаметки");
	// Конец ЗадачиПроцессов
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
		Объект.РазделыПроекта.Количество());
		
	ДоступноИзменениеПрофиля = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеПрофилейПользователей", Объект.Владелец);
		
	ДоступноИзменениеИнформацииПоИспользованиюОбъектов =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеИнформацииОбИспользованииОбъектов", Объект.Владелец);
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДанныеОбИспользованииОбъектаИсточника();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектИсточник)
		И ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
		ТребуетсяБлокировкаПоИспользованиюИсточника = Истина;
	Иначе
		ТребуетсяБлокировкаПоИспользованиюИсточника = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДанныхОбИспользованииИсточника();
	УстановитьДоступностьИзмененияПравилаИспользования();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВладельцаНаСервере()
	
	ДоступноИзменениеПрофиля = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеПрофилейПользователей", Объект.Владелец);
		
	ДоступноИзменениеИнформацииПоИспользованиюОбъектов =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеИнформацииОбИспользованииОбъектов", Объект.Владелец);
	
	УстановитьДоступностьИзмененияПравилаИспользования();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВидДоступа(ВыбранноеЗначение)
	
	Строки = Объект.ВидыДоступа.НайтиСтроки(Новый Структура("ВидДоступа", ВыбранноеЗначение));
	
	Если Строки.Количество() = 0 Тогда
		Строка = Объект.ВидыДоступа.Добавить();
		Строка.ВидДоступа = ВыбранноеЗначение;
	Иначе
		Для Каждого Строка Из Строки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Комментарии) Тогда
				Объект.ВидыДоступа.Удалить(Строка);
			Иначе
				Строка.ВидДоступа = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначения()
	
	НастройкиСервер.СохранитьТекущуюСтраницу("Справочник.ПрофилиПользователей.ФормаЭлемента", Элементы.ГруппаСтраницы, "ТекущаяСтраницаФормыПрофиляПользователей");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ИспользуемыеЭлементы = ИспользуемыеПоляОбъектаИсточника();
	
	Для Каждого ИспользуемыйЭлемент из ИспользуемыеЭлементы Цикл
		
		Если НЕ Доступность ИЛИ ТолькоПросмотр ИЛИ НЕ ДоступноИзменениеПрофиля Тогда
			ИспользуемыйЭлемент.ТолькоПросмотр = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ИспользуемыйЭлемент.Имя = "Имя" ИЛИ ИспользуемыйЭлемент.Имя = "Наименование"
			 ИЛИ ИспользуемыйЭлемент.Имя = "Описание" Тогда
			 
			ИспользуемыйЭлемент.ТолькоПросмотр = ТребуетсяБлокировкаПоИспользованиюИсточника;
			
		ИначеЕсли ИспользуемыйЭлемент.Имя = "СтраницаРазрешенныеДействияИВидыДоступа" Тогда
			
			Если Объект.Система ИЛИ ТребуетсяБлокировкаПоИспользованиюИсточника Тогда
				ИспользуемыйЭлемент.ТолькоПросмотр = Истина;
			Иначе
				ИспользуемыйЭлемент.ТолькоПросмотр = Ложь;
			КонецЕсли;
			
		Иначе
			ИспользуемыйЭлемент.ТолькоПросмотр = ТребуетсяБлокировкаПоИспользованиюИсточника;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ Доступность ИЛИ ТолькоПросмотр ИЛИ НЕ ДоступноИзменениеПрофиля
		ИЛИ ТребуетсяБлокировкаПоИспользованиюИсточника Тогда
		ДоступностьКоманд = Ложь;
	Иначе
		ДоступностьКоманд = Истина;
	КонецЕсли;
	
	Элементы.ВидыДоступаПодборВидовДоступа.Доступность = ДоступностьКоманд;
			
	Элементы.Заметки.ТолькоПросмотр = НЕ ДоступноИзменениеПрофиля;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрофилиПользователей.ХранилищеОписания КАК ХранилищеОписания,
	|	ПрофилиПользователей.ХранилищеЗаметок КАК ХранилищеЗаметок
	|ИЗ
	|	Справочник.ПрофилиПользователей КАК ПрофилиПользователей
	|ГДЕ
	|	ПрофилиПользователей.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", КопируемыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОписаниеИзХранилища = Выборка.ХранилищеОписания.Получить();
		Если ТипЗнч(ОписаниеИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Описание = ОписаниеИзХранилища;
		КонецЕсли;
		
		ЗаметкиИзХранилища = Выборка.ХранилищеЗаметок.Получить();
		Если ТипЗнч(ЗаметкиИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Заметки = ЗаметкиИзХранилища;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШрифтФорматированногоТекста()

	ШрифтФорматированногоТекста = РаботаСФорматированнымДокументом.ШрифтФорматированногоТекста();
	Элементы.Описание.Шрифт = ШрифтФорматированногоТекста;
	Элементы.Заметки.Шрифт = ШрифтФорматированногоТекста;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбИспользованииОбъектаИсточника()
	
	ДанныеОбИспользовании = РегистрыСведений.ИспользованиеОбъектов.ДанныеОбИспользованииОбъектаИсточника(Объект.Ссылка);
	
	ОбъектИсточник = ДанныеОбИспользовании.Источник;
	ПравилоИспользования = ДанныеОбИспользовании.ПравилоИспользования;
	
	Элементы.ПредставлениеИсточника.Заголовок = ДанныеОбИспользовании.НаименованиеИсточника;;
	УстановитьКартинкуИспользованияИсточника();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДанныхОбИспользованииИсточника()

	Элементы.ГруппаПравилоИспользования.Видимость = ЗначениеЗаполнено(ПравилоИспользования);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДанныхОбИспользованииИсточникаНаСервере()
	
	ЗаполнитьДанныеОбИспользованииОбъектаИсточника();
	УстановитьВидимостьДанныхОбИспользованииИсточника();
	
	Если ЗначениеЗаполнено(ОбъектИсточник)
		И ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
		ТребуетсяБлокировкаПоИспользованиюИсточника = Истина;
	Иначе
		ТребуетсяБлокировкаПоИспользованиюИсточника = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуИспользованияИсточника()
	
	Если ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.СИзменениями Тогда
		Элементы.КартинкаПравилоИспользованияИсточника.Картинка = БиблиотекаКартинок.ОбъектИспользуетсяСИзменениями;
	Иначе
		Элементы.КартинкаПравилоИспользованияИсточника.Картинка = БиблиотекаКартинок.ОбъектИспользуетсяБезИзменений;
	КонецЕсли;
	
КОнецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияПравилаИспользования()
	
	Элементы.ПравилоИспользования.Гиперссылка = ДоступноИзменениеИнформацииПоИспользованиюОбъектов;
	
КонецПроцедуры

&НаСервере
Функция ИспользуемыеПоляОбъектаИсточника()
	
	Поля = Новый Массив;
	
	Поля.Добавить(Элементы.Наименование);
	Поля.Добавить(Элементы.Имя);
	Поля.Добавить(Элементы.Описание);
	Поля.Добавить(Элементы.Система);
	Поля.Добавить(Элементы.РазрешенныеДействия);
	Поля.Добавить(Элементы.ВидыДоступа);
	
	Возврат Поля;
	
КонецФункции

#КонецОбласти
