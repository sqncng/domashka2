#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет доступные и текущий приоритеты работы
//
// Параметры:
//  Работа  - СправочникСсылка.ТехническиеПроекты,
//            СправочникСсылка.ЗадачиПроцесса - работа.
//  Проект  - СправочникСсылка.Проекты - проект работы
//
// Возвращаемое значение:
//   Массив из Структура - содержит данные доступных приоритетов
//
Функция ПриоритетыРаботы(Работа, ПроектРаботы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПриоритетыРаботы = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ПроектРаботы) Тогда
		ПроектРаботы = ПриоритетыОчередиРабот.ПроектРаботы(Работа);
	КонецЕсли;
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.ЗадачиПроцесса") Тогда
		ПриоритетПоУмолчанию = РегистрыСведений.ПриоритетыРабот.ПриоритетРодительскойРаботыЗадачи(Работа);
		Если Не ЗначениеЗаполнено(ПриоритетПоУмолчанию) Тогда
			ПриоритетПоУмолчанию = ПриоритетПоУмолчанию(ПроектРаботы);
		КонецЕсли;
	Иначе
		ПриоритетПоУмолчанию = ПриоритетПоУмолчанию(ПроектРаботы);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Ссылка       КАК Ссылка,
	|	ПриоритетыРабот.Наименование КАК Наименование,
	|	ПриоритетыРабот.Цвет         КАК Цвет,
	|	ВЫБОР
	|		КОГДА ПриоритетыРаботРегистр.Приоритет ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|					КОГДА ПриоритетыРабот.Ссылка = &ПриоритетПоУмолчанию
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОГДА ПриоритетыРаботРегистр.Приоритет = ПриоритетыРабот.Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Установлен,
	|	ВЫБОР
	|		КОГДА ПриоритетыРаботРегистр.Приоритет = ПриоритетыРабот.Ссылка
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Записан
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРаботРегистр
	|		ПО (ПриоритетыРаботРегистр.Работа = &Работа)
	|ГДЕ
	|	НЕ ПриоритетыРабот.ПометкаУдаления
	|	И ПриоритетыРабот.Владелец = &Проект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетыРабот.Порядок";
	
	Запрос.УстановитьПараметр("Работа",               Работа);
	Запрос.УстановитьПараметр("Проект",               ПроектРаботы);
	Запрос.УстановитьПараметр("ПриоритетПоУмолчанию", ПриоритетПоУмолчанию);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеПриоритета = Новый Структура;
		ДанныеПриоритета.Вставить("Приоритет",          Выборка.Ссылка);
		ДанныеПриоритета.Вставить("Наименование",       Выборка.Наименование);
		ДанныеПриоритета.Вставить("Цвет",               Выборка.Цвет.Получить());
		ДанныеПриоритета.Вставить("Установлен",         Выборка.Установлен);
		
		Если Выборка.Установлен 
			И Не Выборка.Записан Тогда
			
			ДанныеЗаписи = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
			ДанныеЗаписи.Работа     = Работа;
			ДанныеЗаписи.Приоритет  = Выборка.Ссылка;
			РегистрыСведений.ПриоритетыРабот.ЗаписатьДанные(ДанныеЗаписи);
			
		КонецЕсли;
		
		ПриоритетыРаботы.Добавить(ДанныеПриоритета);
	
	КонецЦикла;
	
	Возврат ПриоритетыРаботы;
	
КонецФункции

// Определяет приоритет проекта по умолчанию
//
// Параметры:
//  Проект  - СправочникСсылка.Проекты - проект, для которого определяется приоритет
//
// Возвращаемое значение:
//   СправочникСсылка.ПриоритетыРабот - приоритет проекта по умолчанию
//
Функция ПриоритетПоУмолчанию(Проект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	ПриоритетыРабот.Владелец = &Проект
	|	И НЕ ПриоритетыРабот.ПометкаУдаления
	|	И ПриоритетыРабот.ПриоритетПоУмолчанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПриоритетыРабот.Ссылка) КАК КоличествоПриоритетов
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	ПриоритетыРабот.Владелец = &Проект
	|	И НЕ ПриоритетыРабот.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проекты.ИспользоватьПриоритеты КАК ИспользоватьПриоритеты
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПроект = РезультатЗапроса[2].Выбрать();
	Если ВыборкаПроект.Следующий() Тогда
		Если Не ВыборкаПроект.ИспользоватьПриоритеты Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаПриоритеты = РезультатЗапроса[1].Выбрать();
	Если ВыборкаПриоритеты.Следующий() Тогда
		Если ВыборкаПриоритеты.КоличествоПриоритетов < 2 Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаПриоритетПоУмолчанию = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаПриоритетПоУмолчанию.Следующий() Тогда
		
		Возврат ВыборкаПриоритетПоУмолчанию.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
	
	КонецЕсли;
	
	
КонецФункции

// Возвращает данные действующих приоритетов
//
// Параметры:
//  Проект - СправочникСсылка.Проекты - проект, для которого определяются приоритеты
//
// Возвращаемое значение:
//    Массив из Структура - содержит данные доступных приоритетов
//
Функция ДанныеДействующихПриоритетов(Проект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Ссылка                    КАК Ссылка,
	|	ПриоритетыРабот.Наименование              КАК Наименование,
	|	ПриоритетыРабот.ПриоритетПоУмолчанию      КАК ПриоритетПоУмолчанию,
	|	ПриоритетыРабот.Порядок                   КАК Порядок,
	|	ПриоритетыРабот.Описание                  КАК Описание,
	|	ПриоритетыРабот.Цвет                      КАК Цвет,
	|	ПриоритетыРабот.Владелец                  КАК Проект
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	НЕ ПриоритетыРабот.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА &СОтборомПоПроекту
	|				ТОГДА ПриоритетыРабот.Владелец = &Проект
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("СОтборомПоПроекту", ЗначениеЗаполнено(Проект));
	Запрос.УстановитьПараметр("Проект",            Проект);
	
	Приоритеты = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеПриоритета = НовыйДанныеПриоритета();
		ДанныеПриоритета.Приоритет    = Выборка.Ссылка;
		ДанныеПриоритета.Наименование = Выборка.Наименование ;
		ДанныеПриоритета.ПоУмолчанию  = Выборка.ПриоритетПоУмолчанию ;
		ДанныеПриоритета.Порядок      = Выборка.Порядок ;
		ДанныеПриоритета.Описание     = Выборка.Описание ;
		ДанныеПриоритета.Цвет         = Выборка.Цвет.Получить();
		
		Приоритеты.Добавить(ДанныеПриоритета);
	
	КонецЦикла;
	
	Возврат Приоритеты;
	
КонецФункции

// Определяет, возможно ли изменение приоритета работы
//
// Параметры:
//  ПараметрыИзменения - Структура - содержит:
//    * Работа           - СправочникСсылка.ТехническиеПроекты,
//                         СправочникСсылка.ЗадачиПроцесса - работа.
//    * Приоритет        - СправочникСсылка.ПриоритетыРабот - устанавливаемый приоритет
//    * СтарыйПриоритет  - СправочникСсылка.ПриоритетыРабот - старый приоритет работы.
//
// Возвращаемое значение:
//    Структура - содержит:
//     * ИзменениеВозможно    - Булево - признак того, что изменение возможно
//     * ПричинаНевозможности - Строка - причина, по которой изменение невозможно
//
Функция ИзменениеПриоритетаРаботыВозможно(ПараметрыИзменения) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИзменениеВозможно",    Истина);
	Результат.Вставить("ПричинаНевозможности", "");
	
	ПриоритетыРаботы = ПриоритетыРаботы(ПараметрыИзменения.Работа);
	
	Для Каждого ДанныеПриоритета Из ПриоритетыРаботы Цикл
		
		Если ДанныеПриоритета.Установлен Тогда
			
			ПараметрыИзменения.СтарыйПриоритет = ДанныеПриоритета.Приоритет;
		
			Если ДанныеПриоритета.Приоритет = ПараметрыИзменения.Приоритет Тогда
				
				Результат.ИзменениеВозможно = Ложь;
				Результат.ПричинаНевозможности = СтрШаблон(НСтр("ru = 'Изменение не выполнено. Приоритет ""%1"" уже установлен.'"),
				                                           ДанныеПриоритета.Приоритет);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Определяет возможность именения приоритета у работ
//
// Параметры:
//  РаботыКИзменениюПриоритета  - ТаблицаЗначений - содержит данные изменяемых работ
//
Процедура ПроверитьРаботыНаВозможностьИзмененияПриоритета(РаботыКИзменениюПриоритета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РаботыКИзменениюПриоритета.Работа    КАК Работа,
	|	РаботыКИзменениюПриоритета.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ РаботыКИзменениюПриоритета
	|ИЗ
	|	&РаботыКИзменениюПриоритета КАК РаботыКИзменениюПриоритета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботыКИзменениюПриоритета.Работа    КАК Работа,
	|	РаботыКИзменениюПриоритета.Приоритет КАК Приоритет,
	|	ТехническиеПроекты.Владелец          КАК Проект
	|ПОМЕСТИТЬ РаботыКИзменениюПроекты
	|ИЗ
	|	РаботыКИзменениюПриоритета КАК РаботыКИзменениюПриоритета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ПО РаботыКИзменениюПриоритета.Работа = ТехническиеПроекты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботыКИзменениюПриоритета.Работа,
	|	РаботыКИзменениюПриоритета.Приоритет,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|				ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|			ТОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец
	|		ИНАЧЕ ЗадачиПроцесса.Предмет.Владелец
	|	КОНЕЦ
	|ИЗ
	|	РаботыКИзменениюПриоритета КАК РаботыКИзменениюПриоритета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО РаботыКИзменениюПриоритета.Работа = ЗадачиПроцесса.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаботыКИзменениюПроекты.Работа    КАК Работа,
	|	РаботыКИзменениюПроекты.Приоритет КАК Приоритет,
	|	ПриоритетыРабот.Владелец          КАК ПроектПриоритета,
	|	РаботыКИзменениюПроекты.Проект    КАК ПроектРаботы,
	|	ВЫБОР
	|		КОГДА РаботыКИзменениюПроекты.Приоритет = ПриоритетыРаботРегистр.Приоритет
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УжеУстановлен,
	|	ЕСТЬNULL(ПриоритетыРаботРегистр.Приоритет, ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)) КАК СтарыйПриоритет
	|ИЗ
	|	РаботыКИзменениюПроекты КАК РаботыКИзменениюПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО РаботыКИзменениюПроекты.Приоритет = ПриоритетыРабот.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРаботРегистр
	|		ПО РаботыКИзменениюПроекты.Работа = ПриоритетыРаботРегистр.Работа";
	
	Запрос.УстановитьПараметр("РаботыКИзменениюПриоритета", РаботыКИзменениюПриоритета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РаботыКИзменениюПриоритета.Колонки.Добавить("УжеУстановлен",         Новый ОписаниеТипов("Булево"));
	РаботыКИзменениюПриоритета.Колонки.Добавить("ПроектНеСоответствует", Новый ОписаниеТипов("Булево"));
	
	РаботыКИзменениюПриоритета.Очистить();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = РаботыКИзменениюПриоритета.Добавить();
		НоваяСтрока.Работа                = Выборка.Работа;
		НоваяСтрока.Приоритет             = Выборка.Приоритет;
		НоваяСтрока.Проект                = Выборка.ПроектРаботы;
		НоваяСтрока.СтарыйПриоритет       = Выборка.СтарыйПриоритет;
		НоваяСтрока.УжеУстановлен         = Выборка.УжеУстановлен;
		НоваяСтрока.ПроектНеСоответствует = Выборка.ПроектПриоритета <> Выборка.ПроектРаботы;
	
	КонецЦикла;
	
КонецПроцедуры

// Определяет максимальный, используемый в ИБ порядок приоритета
//
// Возвращаемое значение:
//   Число
//
Функция МаксимальныйИспользуемыйПриоритет() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПриоритетыРабот.Порядок) КАК Порядок
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	НЕ ПриоритетыРабот.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат  0;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Порядок;
		
	КонецЕсли;
	
КонецФункции

// Определяет доступные значения порядка приоритета для проекта
//
// Параметры:
//  Проект               - СправочникСсылка.Проекты - проект, для которого определяются доступные значения
//  ИсключаемыйПриоритет - СправочникСсылка.ПриоритетыРабот - приоритет, который исключается из недоступных.
//
// Возвращаемое значение:
//    Структура - содержит:
//     * МаксимальныйПорядок  - Число - максимальный порядок.
//     * ДоступныеЗначения    - Массив - достуные значения.
//     * НеДоступныеЗначения  - Массив - недостуные значения.
//     * Представление        - Строка - информация о доступных значениях в текством виде.
//
Функция ДоступныеДляПроектаЗначенияПорядкаПриоритета(Проект, ИсключаемыйПриоритет = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("МаксимальныйПорядок", 2);
	Результат.Вставить("ДоступныеЗначения",   Новый Массив);
	Результат.Вставить("НеДоступныеЗначения", Новый Массив);
	Результат.Вставить("Представление",       "");
	
	МаксимальноДоступныйПорядок = Константы.МаксимальныйПорядокПриоритетаРаботы.Получить();
	
	Для Инд = 1 По МаксимальноДоступныйПорядок Цикл
		
		Результат.ДоступныеЗначения.Добавить(Инд);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриоритетыРабот.Порядок КАК Порядок
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	НЕ ПриоритетыРабот.ПометкаУдаления
	|	И ПриоритетыРабот.Владелец = &Проект
	|	И ПриоритетыРабот.Порядок <= &МаксимальноДоступныйПорядок
	|	И ВЫБОР
	|			КОГДА &ИсключатьПриоритет
	|				ТОГДА ПриоритетыРабот.Ссылка <> &ИсключаемыйПриоритет
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ИсключатьПриоритет",          ЗначениеЗаполнено(ИсключаемыйПриоритет));
	Запрос.УстановитьПараметр("ИсключаемыйПриоритет",        ИсключаемыйПриоритет);
	Запрос.УстановитьПараметр("Проект",                      Проект);
	Запрос.УстановитьПараметр("МаксимальноДоступныйПорядок", МаксимальноДоступныйПорядок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Порядок < 1 
			Или Выборка.Порядок > МаксимальноДоступныйПорядок Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.НедоступныеЗначения.Добавить(Выборка.Порядок);
		
		ИндексДоступныеЗначения = Результат.ДоступныеЗначения.Найти(Выборка.Порядок);
		Если ИндексДоступныеЗначения <> Неопределено Тогда
			Результат.ДоступныеЗначения.Удалить(ИндексДоступныеЗначения);
		КонецЕсли;
	
	КонецЦикла;
	
	Если Результат.НедоступныеЗначения.Количество() = 0 Тогда
		
		Результат.Представление = СтрШаблон(НСтр("ru = 'Доступны значения в диапазоне %1 - %2'"), "1", Строка(МаксимальноДоступныйПорядок));
		
	ИначеЕсли Результат.ДоступныеЗначения.Количество() = 0 Тогда
		
		Результат.Представление = НСтр("ru = 'Нет доступных значений.'");
		
	ИначеЕсли МаксимальноДоступныйПорядок < 6
		Или Результат.ДоступныеЗначения.Количество()<= Результат.НедоступныеЗначения.Количество() Тогда
		
		Результат.Представление = НСтр("ru = 'Доступные значения'") + " - ";
		
		ЭтоПервыйЭлемент = Истина;
		Для Каждого ДоступноеЗначение Из Результат.ДоступныеЗначения Цикл
			Результат.Представление = Результат.Представление + ?(ЭтоПервыйЭлемент, "", ",") + Строка(ДоступноеЗначение);
			ЭтоПервыйЭлемент = Ложь;
		КонецЦикла;
		
		Результат.Представление = Результат.Представление + ".";
		
	ИначеЕсли Результат.ДоступныеЗначения.Количество() > Результат.НедоступныеЗначения.Количество() Тогда
		
		Результат.Представление = СтрШаблон(НСтр("ru = 'Доступны значения в диапазоне %1 - %2, кроме'"), "1", Строка(МаксимальноДоступныйПорядок));
		
		ЭтоПервыйЭлемент = Истина;
		Для Каждого НедоступноеЗначение Из Результат.НеДоступныеЗначения Цикл
			Результат.Представление = Результат.Представление + ?(ЭтоПервыйЭлемент, " ", ", ") + Строка(НедоступноеЗначение);
			ЭтоПервыйЭлемент = Ложь;
		КонецЦикла;
		
		Результат.Представление = Результат.Представление + ".";
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует информацию о корректности настройки приоритетов
//
// Параметры:
//  Проект               - СправочникСсылка.Проекты - проект, для которого выводится информация
//
// Возвращаемое значение:
//    Структура - содержит:
//     * ТекстЗаголовка  - Строка - информация о корректности настройки.
//     * ЕстьПроблемы    - Булево - признак некорректности настройки.
//     * ЦветЗаголовка   - Цвет  - цвет надписи.
// 
Функция ДанныеЗаголовкаНастроеныПриоритеты(Проект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстЗаголовка", "");
	Результат.Вставить("ЕстьПроблемы",   Ложь);
	Результат.Вставить("ЦветЗаголовка",  ЦветаСтиля.ЦветГиперссылки);
	
	ДанныеПриоритетов = ДанныеДействующихПриоритетов(Проект);
	КоличествоПриоритетов = ДанныеПриоритетов.Количество();
	Если ДанныеПриоритетов.Количество() = 0 Тогда
		
		Результат.ТекстЗаголовка = НСтр("ru = 'Приоритеты не настроены'");
		Результат.ЕстьПроблемы   = Истина;
		
	ИначеЕсли ДанныеПриоритетов.Количество() = 1  Тогда
		
		Результат.ТекстЗаголовка = НСтр("ru = 'Задано приоритетов - 1, требуется задать как минимум еще один'");
		Результат.ЕстьПроблемы   = Истина;
		
	Иначе
		
		ТекстНастроитьПриоритеты = СтрШаблон(НСтр("ru = 'Задано приоритетов - %1'"), Строка(КоличествоПриоритетов));
		
		ЕстьПриоритетПоУмолчанию = Ложь;
		Для Каждого ДанныеПриоритета Из ДанныеПриоритетов Цикл
			Если ДанныеПриоритета.ПоУмолчанию Тогда
				ЕстьПриоритетПоУмолчанию = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьПриоритетПоУмолчанию Тогда
			Результат.ЕстьПроблемы   = Истина;
			ТекстНастроитьПриоритеты = ТекстНастроитьПриоритеты + "," + НСтр("ru = 'требуется задать приоритет по умолчанию'");
		КонецЕсли;
		
		Результат.ТекстЗаголовка = ТекстНастроитьПриоритеты;
	КонецЕсли;
	
	Если Результат.ЕстьПроблемы Тогда
		Результат.ЕстьПроблемы  = Истина;
		Результат.ЦветЗаголовка = ЦветаСтиля.ЗонаЗадачиКрасный;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьПриоритетПоУмолчаниюВФоне(Проект, ПереформироватьОчередь) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.Вставить("ЗапуститьВФоне", Истина);
	ПараметрыВыполнения.Вставить("ОжидатьЗавершение", 0);
	
	ИмяПроцедуры = "Справочники.ПриоритетыРабот.УстановитьПриоритетПоУмолчаниюУРаботСПустымПриоритетом";
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, Проект, ПереформироватьОчередь);
	
КонецПроцедуры

Процедура УстановитьПриоритетПоУмолчаниюУРаботСПустымПриоритетом(Проект, ПереформироватьОчередь) Экспорт
	
	ПриоритетПоУмолчанию = ПриоритетПоУмолчанию(Проект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Ссылка  КАК Приоритет,
	|	ПриоритетыРабот.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ПриоритетыРабот.ПриоритетПоУмолчанию
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПриоритетПоУмолчанию
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	ПриоритетыРабот.Владелец = &Проект
	|	И НЕ ПриоритетыРабот.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриоритетыРабот.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ НедействующиеПриоритетыРабот
	|ИЗ
	|	Справочник.ПриоритетыРабот КАК ПриоритетыРабот
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ЕстьПриоритетПоУмолчанию
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ПриоритетыРабот.ПометкаУдаления
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка КАК Работа,
	|	ВЫБОР
	|		КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ТехническиеПроекты
	|			ТОГДА ВЫБОР
	|					КОГДА ЗадачиПроцесса.Предмет.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыТехническихПроектов.Активен)
	|							И НЕ ЗадачиПроцесса.Предмет.ПометкаУдаления
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПредметАктивен
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО (ПриоритетыРабот.Работа = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(ПриоритетыРабот.Приоритет, ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)) В
	|			(ВЫБРАТЬ
	|				НедействующиеПриоритетыРабот.Ссылка КАК Ссылка
	|			ИЗ
	|				НедействующиеПриоритетыРабот КАК НедействующиеПриоритетыРабот)
	|	И ВЫБОР
	|			КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|					ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|				ТОГДА ВЫБОР
	|						КОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец = &Проект
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗадачиПроцесса.Предмет.Владелец = &Проект
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|	И НЕ ЗадачиПроцесса.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена), ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Выполнена))
	|	И НЕ ЗадачиПроцесса.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка,
	|	ИСТИНА
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО (ПриоритетыРабот.Работа = ТехническиеПроекты.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(ПриоритетыРабот.Приоритет, ЗНАЧЕНИЕ(Справочник.ПриоритетыРабот.ПустаяСсылка)) В
	|			(ВЫБРАТЬ
	|				НедействующиеПриоритетыРабот.Ссылка КАК Ссылка
	|			ИЗ
	|				НедействующиеПриоритетыРабот КАК НедействующиеПриоритетыРабот)
	|	И ТехническиеПроекты.Владелец = &Проект
	|	И НЕ ТехническиеПроекты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ЕстьПриоритетПоУмолчанию", ЗначениеЗаполнено(ПриоритетПоУмолчанию));
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаПорядков                = ТаблицаПорядковПриоритетовПоРезультатуЗапроса(Результат[0]);
	ПриоритетНеактивногоТехПроекта = ОпределенныйДляНеактивногоТехПроектаПриоритет(ТаблицаПорядков, ПриоритетПоУмолчанию);
	
	Выборка = Результат[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеЗаписи           = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписи.Работа    = Выборка.Работа;
		
		Если ЗначениеЗаполнено(ПриоритетПоУмолчанию) Тогда
			
			Если Не Выборка.ПредметАктивен Тогда
				ДанныеЗаписи.Приоритет = ПриоритетНеактивногоТехПроекта;
			Иначе
				ДанныеЗаписи.Приоритет = ПриоритетПоУмолчанию;
			КонецЕсли;
			РегистрыСведений.ПриоритетыРабот.ЗаписатьДанные(ДанныеЗаписи);
		Иначе
			РегистрыСведений.ПриоритетыРабот.УдалитьЗапись(ДанныеЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПереформироватьОчередь Тогда
		РегистрыСведений.ОчередиРаботСотрудников.СформироватьОчередьРаботСотрудников(
			РегистрыСведений.ОчередиРаботСотрудников.НовыйПараметрыФормированияОчередиСотрудников());
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПриоритетыПоПроектуВФоне(Проект, ПереформироватьОчередь) Экспорт

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.Вставить("ЗапуститьВФоне", Истина);
	ПараметрыВыполнения.Вставить("ОжидатьЗавершение", 0);
	
	ИмяПроцедуры = "Справочники.ПриоритетыРабот.ОчиститьПриоритетыПоПроекту";
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, Проект, ПереформироватьОчередь);
	
КонецПроцедуры

Процедура ОчиститьПриоритетыПоПроекту(Проект, ПереформироватьОчередь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗадачиПроцесса.Ссылка КАК Работа
	|ИЗ
	|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО (ПриоритетыРабот.Работа = ЗадачиПроцесса.Ссылка)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЗадачиПроцесса.Предмет ССЫЛКА Справочник.СборкиВерсии
	|					ИЛИ ЗадачиПроцесса.Предмет ССЫЛКА Справочник.ФункцииМеханизмов
	|				ТОГДА ВЫБОР
	|						КОГДА ЗадачиПроцесса.Предмет.Владелец.Владелец = &Проект
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ ЛОЖЬ
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЗадачиПроцесса.Предмет.Владелец = &Проект
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТехническиеПроекты.Ссылка
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыРабот КАК ПриоритетыРабот
	|		ПО (ПриоритетыРабот.Работа = ТехническиеПроекты.Ссылка)
	|ГДЕ
	|	ТехническиеПроекты.Владелец = &Проект
	|	И НЕ ТехническиеПроекты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДанныеЗаписи           = ПриоритетыОчередиРаботыКлиентСервер.НовыйДанныеПриоритета();
		ДанныеЗаписи.Работа    = Выборка.Работа;
		
		РегистрыСведений.ПриоритетыРабот.УдалитьЗапись(ДанныеЗаписи);
		
	КонецЦикла;
	
	Если ПереформироватьОчередь Тогда
		РегистрыСведений.ОчередиРаботСотрудников.СформироватьОчередьРаботСотрудников(
			РегистрыСведений.ОчередиРаботСотрудников.НовыйПараметрыФормированияОчередиСотрудников());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйДанныеПриоритета()
	
	ДанныеПриоритета = Новый Структура;
	ДанныеПриоритета.Вставить("Проект",       Справочники.Проекты.ПустаяСсылка());
	ДанныеПриоритета.Вставить("Приоритет",    Справочники.ПриоритетыРабот.ПустаяСсылка());
	ДанныеПриоритета.Вставить("Наименование", "");
	ДанныеПриоритета.Вставить("ПоУмолчанию",  Ложь);
	ДанныеПриоритета.Вставить("Порядок",      0);
	ДанныеПриоритета.Вставить("Описание",     "");
	ДанныеПриоритета.Вставить("Цвет",         Неопределено);
	
	Возврат ДанныеПриоритета;
	
КонецФункции

Функция ТаблицаПорядковПриоритетовПоРезультатуЗапроса(РезультатЗапроса)
	
	ТаблицаПорядков = Новый ТаблицаЗначений;
	ТаблицаПорядков.Колонки.Добавить("Приоритет",               Новый ОписаниеТипов("СправочникСсылка.ПриоритетыРабот"));
	ТаблицаПорядков.Колонки.Добавить("Порядок",                 Новый ОписаниеТипов("Число"));
	ТаблицаПорядков.Колонки.Добавить("ЭтоПриоритетПоУмолчанию", Новый ОписаниеТипов("Булево"));
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПорядков.Добавить();
		НоваяСтрока.Приоритет               = Выборка.Приоритет;
		НоваяСтрока.Порядок                 = Выборка.Порядок;
		НоваяСтрока.ЭтоПриоритетПоУмолчанию = Выборка.ЭтоПриоритетПоУмолчанию;
		
	КонецЦикла;
	
	Возврат ТаблицаПорядков;
	
КонецФункции

Функция ОпределенныйДляНеактивногоТехПроектаПриоритет(ТаблицаПорядков, ПриоритетПоУмолчанию)
	
	НужныйПриоритетСледующий = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПорядков Цикл
		
		Если НужныйПриоритетСледующий Тогда
			Возврат СтрокаТаблицы.Приоритет;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЭтоПриоритетПоУмолчанию Тогда
			НужныйПриоритетСледующий = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПриоритетПоУмолчанию;
	
КонецФункции

#КонецОбласти

#КонецЕсли
