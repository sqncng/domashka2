&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;
&НаКлиенте
Перем ТекущаяКонфигурацияКэш;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДоступноИзменениеПроекта = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ИзменениеПроектов", Объект.Ссылка);
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
		Элементы.Описание.ТолькоПросмотр = Ложь;
		Если Элементы.Найти("ОписаниеРедактироватьОписание") <> Неопределено Тогда
			Элементы.ОписаниеРедактироватьОписание.Пометка = Истина;
		КонецЕсли;
		
		РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации = Справочники.Проекты.РасписаниеРегламентногоЗаданияПоУмолчанию();
		РасписаниеРегламентногоЗаданияСообщенийПоОшибкам = Справочники.Проекты.РасписаниеРегламентногоЗаданияПоУмолчанию();
		РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках = Справочники.Проекты.РасписаниеРегламентногоЗаданияПоУмолчанию();
		
	Иначе
		Элементы.Описание.ТолькоПросмотр = Истина;
		Если Элементы.Найти("ОписаниеРедактироватьОписание") <> Неопределено Тогда
			Элементы.ОписаниеРедактироватьОписание.Пометка = Ложь;
		КонецЕсли;
		
		// Получаем расписание из самого регламентного задания
		// если РЗ не задано, то расписание = Неопределено и будет создано на клиенте в момент редактирования расписания
		РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации = Справочники.Проекты.ПолучитьРасписаниеЗагрузкиМетаданных(Объект.Ссылка);
		РасписаниеРегламентногоЗаданияСообщенийПоОшибкам = Справочники.Проекты.ПолучитьРасписаниеФормированияСОобщенийПоОшибкам(Объект.Ссылка);
		РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках = Справочники.Проекты.ПолучитьРасписаниеЗагрузкиИзмененийВВетках(Объект.Ссылка);
		
	КонецЕсли;
	
	СисИнфо = Новый СистемнаяИнформация;
	Элементы.ВерсияПлатформы.ПодсказкаВвода = СисИнфо.ВерсияПриложения;
	Элементы.ВерсияПлатформыХранилищаТехническихПроектов.ПодсказкаВвода = СисИнфо.ВерсияПриложения;
	
	Элементы.ВерсияПлатформы.СписокВыбора.Добавить("", НСтр("ru = '<версия по умолчанию>'"));
	Элементы.ВерсияПлатформыХранилищаТехническихПроектов.СписокВыбора.Добавить("", НСтр("ru = '<версия по умолчанию>'"));
	
	Для каждого ДоступнаяВерсия Из ОбщегоНазначенияСППР.СписокДоступныхВерсийПлатформы() Цикл
	
		Элементы.ВерсияПлатформы.СписокВыбора.Добавить(ДоступнаяВерсия);
		Элементы.ВерсияПлатформыХранилищаТехническихПроектов.СписокВыбора.Добавить(ДоступнаяВерсия);
	
	КонецЦикла; 
	
	УстановитьДоступностьЭлементов();
	
	УстановитьШрифтФорматированногоТекста();
	
	УстановитьНадписьВерсияПроектаВВетке();
	ТекстПоясненияКОбновлениюХранилища();
	ТекстПредупрежденияНеБудуРасследовать();
	ТекстКомандыВыгрузитьСправку();
	УстановитьТекстПоляЗакрытогоКлюча();
	
	Элементы.ЗакрытыйКлючДляПодписанияПатча.Доступность = ДоступноИзменениеПроекта;
	Если ЗначениеЗаполнено(Объект.ИнструкцияПоПроверкеПатча) Тогда
		УстановкаИнструкцииПроверкиПатча = СтроковыеФункции.ФорматированнаяСтрока("<a href='ссылка'>изменена</a>");
	Иначе
		УстановкаИнструкцииПроверкиПатча = СтроковыеФункции.ФорматированнаяСтрока("<a href='ссылка'>по умолчанию</a>");
	КонецЕсли;
	
	ОтветственныеЗаПубликацию.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Запись_ВерсииПроекта" Тогда
		
		УстановитьНадписьВерсияПроектаВВетке();
		
	ИначеЕсли ИмяСобытия = "Запись_ПриоритетРаботы"
		И ТипЗнч(Параметр) = Тип("Структура")
		И Параметр.Свойство("Владелец") 
		И Параметр.Владелец = Объект.Ссылка Тогда
		
		УправлениеДоступностьюПриоритеты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Описание, РедактируемыйОбъект.ХранилищеОписания);
	
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(ШаблонОписанияТехническогоПроекта,
		РедактируемыйОбъект.ХранилищеШаблонаОписанияТехническогоПроекта);
	
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриЧтенииСозданииНаСервере();
	
	ЗаполнитьПроектВТЧИспользуемыхРазделов();
	
	УстановитьДоступностьЭлементов();
	ЗаполнитьВерсииПоОбъекту();
	ЗаполнитьПоследнююСборку();
	
	ПроверитьУстановкуGITКомпонент();
	
	ОтветственныеЗаПубликацию.ЗагрузитьЗначения(РедактируемыйОбъект.ОтветственныеЗаПатчи.ВыгрузитьКолонку("Пользователь"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьПроектВТЧИспользуемыхРазделов();
	
	Если Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы <> ВестиОписанияОбработчиковОбновленияИнформационнойБазыПриЧтенииСоздании Тогда
		ВестиОписанияОбработчиковОбновленияИнформационнойБазыПриЧтенииСоздании = Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Описание, ТекущийОбъект.ХранилищеОписания);
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(ШаблонОписанияТехническогоПроекта,
		ТекущийОбъект.ХранилищеШаблонаОписанияТехническогоПроекта);
	
	ТекущийОбъект.Описание = Описание.ПолучитьТекст();
	
	Если ВариантИспользованияЗакрытияОшибок = 1 Тогда
		ТекущийОбъект.ИспользоватьЗакрытиеОшибок = Истина;
		ТекущийОбъект.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Ложь;
	ИначеЕсли ВариантИспользованияЗакрытияОшибок = 2 Тогда
		ТекущийОбъект.ИспользоватьЗакрытиеОшибок = Истина;
		ТекущийОбъект.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Истина;
	Иначе
		ТекущийОбъект.ИспользоватьЗакрытиеОшибок = Ложь;
		ТекущийОбъект.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Ложь;
	КонецЕсли;
	
	ЗаписатьНормыОтработкиОшибокВТабличнуюЧасть(ТекущийОбъект);
	
	НаименованиеПроекта = СокрЛП(ТекущийОбъект.Наименование);
	
	НаименованиеРегламентногоЗадания = НСтр("ru = 'Синхронизация с разрабатываемой конфигурацией проекта: %1'");
	НаименованиеРегламентногоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеРегламентногоЗадания,
	                                   НаименованиеПроекта);
	
	Справочники.Проекты.ОбновитьДанныеРегламентногоЗадания(Отказ,
	                                                       РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации,
														   ТекущийОбъект,
														   "РегламентноеЗаданиеСинхронизацииКонфигурацииGUID",
														   "СинхронизацияСРазрабатываемойКонфигурацией",
														   НаименованиеРегламентногоЗадания,
														   ТекущийОбъект.ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурации);
														   
	НаименованиеРегламентногоЗадания = НСтр("ru = 'Формирование сообщений системы взаимодействия по ошибкам проекта: %1'");
	НаименованиеРегламентногоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеРегламентногоЗадания,
	                                   НаименованиеПроекта);
									   
	Справочники.Проекты.ОбновитьДанныеРегламентногоЗадания(Отказ,
	                                                       РасписаниеРегламентногоЗаданияСообщенийПоОшибкам,
														   ТекущийОбъект,
														   "РегламентноеЗаданиеСообщенийПоОшибкамGUID",
														   "ФормированиеСообщенийПоОшибкам",
														   НаименованиеРегламентногоЗадания,
														   ТекущийОбъект.ИспользоватьРегламентноеЗаданиеСообщенийПоОшибкам);
	
	НаименованиеРегламентногоЗадания = НСтр("ru = 'Загрузка изменений в ветках проекта: %1'");
	НаименованиеРегламентногоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеРегламентногоЗадания,
	                                   НаименованиеПроекта);
									   
	Справочники.Проекты.ОбновитьДанныеРегламентногоЗадания(Отказ,
	                                                       РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках,
														   ТекущийОбъект,
														   "РегламентноеЗаданиеЗагрузкиИзмененийВВеткахGUID",
														   "ЗагрузкаИзмененийВВетках",
														   НаименованиеРегламентногоЗадания,
														   ТекущийОбъект.ЗагружатьИзмененияВВетках);
														   
	Если ОбновитьДанныеОбработчиковОбновления Тогда
		ИзмененныеБиблиотеки = ИзмененныеБиблиотеки();
		
		Если ИзмененныеБиблиотеки.Количество() > 0 Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзмененныеБиблиотеки", ИзмененныеБиблиотеки);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнструкцияПроверкиПатча) Тогда
		ТекущийОбъект.ИнструкцияПоПроверкеПатча = Новый ХранилищеЗначения(ИнструкцияПроверкиПатча);
	КонецЕсли;
	
	Ответственные = ОтветственныеЗаПубликацию.ВыгрузитьЗначения();
	ТекущийОбъект.ОтветственныеЗаПатчи.Очистить();
	Для Каждого Ответственный Из Ответственные Цикл
		Строка = ТекущийОбъект.ОтветственныеЗаПатчи.Добавить();
		Строка.Пользователь = Ответственный;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УправлениеДоступностьюПриоритеты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПредставлениеРасписанияСинхронизацииКонфигурации();
	ОбновитьПредставлениеРасписанияСообщенийПоОшибкам();
	ОбновитьПредставлениеРасписанияЗагрузкиИзмененийВВетках();
	
	УстановитьДоступностьЭлементовНастройкиРасписанияСинхронизацииКонфигурации();
	УстановитьДоступностьЭлементовНастройкиРасписанияСообщенийПоОшибкам();
	УстановитьДоступностьЭлементовНастройкиРасписанияЗагрузкиИзмененийВВетках();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогХранилищТехническихПроектовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = Объект.КаталогХранилищТехническихПроектов;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога информационной базы'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.КаталогХранилищТехническихПроектов = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИБДляЗагрузкиМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = Объект.КаталогИБДляЗагрузкиМетаданных;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога информационной базы'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.КаталогИБДляЗагрузкиМетаданных = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНаправленияОшибокНаПроверкуПриИзменении(Элемент)
	
	УстановитьДоступностьПроверяющегоОшибки(Элементы, Объект.ВариантНаправленияОшибокНаПроверку);
	
	Если Объект.ВариантНаправленияОшибокНаПроверку <> 
			ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаПроверку.УказанномуПользователю") Тогда
		Объект.ПроверяющийОшибки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНаправленияОшибокНаПроверкуОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИспользованияЗакрытияОшибокПриИзменении(Элемент)
		
	Если ВариантИспользованияЗакрытияОшибок = 1 Тогда
		
		Объект.ИспользоватьЗакрытиеОшибок = Истина;
		Объект.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Ложь;
		
	ИначеЕсли ВариантИспользованияЗакрытияОшибок = 2 Тогда
		
		Объект.ИспользоватьЗакрытиеОшибок = Истина;
		Объект.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Истина;
		
	Иначе
		
		Объект.ИспользоватьЗакрытиеОшибок = Ложь;
		Объект.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Ложь;
		
		Объект.ВариантНаправленияОшибокНаЗакрытие = 
			ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаЗакрытие.ОтветственномуЗаПроект");
			
		Объект.ЗакрывающийОшибки = Неопределено;
		
	КонецЕсли;
	
	ОбработатьТаблицуНормОтработкиОшибок();
	УстановитьДоступностьРеквизитовЗакрытия(Элементы, Объект.ИспользоватьЗакрытиеОшибок, Объект.ВариантНаправленияОшибокНаЗакрытие);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНаправленияОшибокНаЗакрытиеПриИзменении(Элемент)
	
	УстановитьДоступностьЗакрывающегоОшибки(Элементы, Объект.ВариантНаправленияОшибокНаЗакрытие);
	
	Если Объект.ВариантНаправленияОшибокНаЗакрытие <> 
			ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаЗакрытие.УказанномуПользователю") Тогда
		Объект.ЗакрывающийОшибки = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНаправленияОшибокНаЗакрытиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасположениеДистрибутивовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = Объект.РасположениеДистрибутивов;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога расположения дистрибутивов проекта'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.РасположениеДистрибутивов = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогИБПрикладываемыхКОшибкамНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = Объект.КаталогИБПрикладываемыхКОшибкам;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога баз, прикладываемых к ошибкам'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.КаталогИБПрикладываемыхКОшибкам = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурацииПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовНастройкиРасписанияСинхронизацииКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентноеЗаданиеСообщенийПоОшибкамПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовНастройкиРасписанияСообщенийПоОшибкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЯвляетсяБиблиотекойПриИзменении(Элемент)
	
	Элементы.УровеньБиблиотеки.Видимость = Объект.Библиотека;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбработчикиОбновленийПриИзменении(Элемент)
	НастроитьФормуПоИспользованиюОбработчиковОбновления();
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданныхПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПлатформыПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВПроектеРазрабатываютсяНесколькоКонфигурацийПриИзменении(Элемент)
	НастроитьФормуПоФлагуВПроектеРазрабатываютсяНесколькоКонфигураций();
КонецПроцедуры

&НаКлиенте
Процедура РежимРазработкиПриИзменении(Элемент)
	
	РежимРазработкиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьРезультатыВыполненияТестовПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ХранитьСценарииРаботыПользователяВРепозиторииПриИзменении(Элемент)
	УстановитьДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыйКлючДляПодписанияПатчаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "добавить" Или НавигационнаяСсылкаФорматированнойСтроки = "изменить" Тогда
		ОбработчикЗавершения = Новый ОписаниеОповещения("ЗакрытыйКлючДляПодписанияПатчаЗавершение", ЭтотОбъект);
		ФайловаяСистемаКлиент.ЗагрузитьФайл(ОбработчикЗавершения);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		
		УдалитьЗакрытыйКлючДляПодписанияПатча();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВеткаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Проект еще не записан. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьВеткуПроектаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		СоздатьВеткуПроекта();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаИнструкцииПроверкиПатчаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ИнструкцияПроверкиПатчаЗавершение", ЭтотОбъект);
	
	ПараметрыРедактирования = Новый Структура;
	ПараметрыРедактирования.Вставить("Инструкция", Объект.ИнструкцияПоПроверкеПатча);
	ОткрытьФорму("Справочник.Патчи.Форма.РедактированиеИнструкцииПроверки", ПараметрыРедактирования, , , , , ОбработкаЗавершения);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПриоритетыПриИзменении(Элемент)
	
	УправлениеДоступностьюПриоритеты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружатьИзмененияВВеткахПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовНастройкиРасписанияЗагрузкиИзмененийВВетках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЗаПубликациюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОтветственныеЗаПубликациюНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отмеченные", ОтветственныеЗаПубликацию);
	ПараметрыОткрытия.Вставить("ОписаниеТипов", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ПараметрыОткрытия.Вставить("ОграничиватьВыборУказаннымиЗначениями", Ложь);
	ПараметрыОткрытия.Вставить("ПодборПользователей", Истина);
	ПараметрыОткрытия.Вставить("Представление", НСтр("ru = 'Ответственные за публикацию патчей'"));
	ПараметрыОткрытия.Вставить("ПараметрыВыбора", Новый Массив);
	ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Элементы);
	
	ОткрытьФорму("Справочник.Патчи.Форма.ВводЗначенийСпискомСФлажками", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыМодулиОбновленияИнформационнойБазы

&НаКлиенте
Процедура МодулиОбновленияИнформационнойБазыВключатьОбработчикиЭтойБиблиотекиВПостроениеОчередиПриИзменении(Элемент)
	
	ОбновитьДанныеОбработчиковОбновления = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МодулиОбновленияИнформационнойБазыРежимВыполненияОтложенныхОбработчиковПриИзменении(Элемент)
	
	ОбновитьДанныеОбработчиковОбновления = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МодулиОбновленияИнформационнойБазыПараллельноеОтложенноеОбновлениеСВерсииПриИзменении(Элемент)
	
	ОбновитьДанныеОбработчиковОбновления = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВключаемыеПроекты

&НаКлиенте
Процедура ВключаемыеПроектыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиВключаемыхПроектов",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаемыеПроектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ТекущийПроект = Элемент.ТекущиеДанные.Проект;
		ЗаполнитьДеревоРазделов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаемыеПроектыПередУдалением(Элемент, Отказ)
	
	УдаляемыйПроект = Элемент.ТекущиеДанные.Проект;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаемыеПроектыПослеУдаления(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ТекущийПроект = Неопределено;
	КонецЕсли;
	
	УдалитьРазделыУдаленногоПроекта();
	УдаляемыйПроект = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаемыеПроектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого Значение из ВыбранноеЗначение Цикл
		
		СтруктураОтбора = Новый Структура("Проект", Значение);
		МассивСтрок = ВключаемыеПроекты.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество()=0 И Значение <>Объект.Ссылка Тогда
			НоваяСтрока = ВключаемыеПроекты.Добавить();
			НоваяСтрока.Проект = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключаемыеПроектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ВключаемыеПроектыВстроеннаяСборка" Тогда
		
		СтандартнаяОбработка = Ложь;
		ВстроеннаяСборка = Элементы.ВключаемыеПроекты.ТекущиеДанные.ВстроеннаяСборка;
		
		Если Не ЗначениеЗаполнено(ВстроеннаяСборка) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Ключ", ВстроеннаяСборка);
		ОткрытьФорму("Справочник.СборкиВерсии.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДеревоРазделов

&НаКлиенте
Процедура ДеревоРазделовИспользованиеПриИзменении(Элемент)
	
	СтрокаДерева = ДеревоРазделов.НайтиПоИдентификатору(Элементы.ДеревоРазделов.ТекущаяСтрока);
	
	Если СтрокаДерева <> Неопределено Тогда
		
		Если СтрокаДерева.Использование = 2 Тогда
			СтрокаДерева.Использование = 0;
		КонецЕсли;
		
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			ОбработатьИзменениеИспользованияРаздела(СтрокаДерева);
		КонецЕсли;
		
		УстановитьОтметкиРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаДерева.Использование);
		УстановитьОтметкиРодителейРекурсивно(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыКонфигурацииРазрабатываемыеВПроекте

&НаКлиенте
Процедура КонфигурацииРазрабатываемыеВПроектеПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.КонфигурацииРазрабатываемыеВПроекте.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПодключитьОбработчикОжидания("УстановитьОтборПоТекущейПодсистемеВСпискеПодсистемыВходящиеВКонфигурацию", 0.3, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацииРазрабатываемыеВПроектеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущаяКонфигурацияКэш = Элементы.КонфигурацииРазрабатываемыеВПроекте.ТекущиеДанные.Подсистема;
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацииРазрабатываемыеВПроектеПодсистемаПриИзменении(Элемент)
	
	ТекущаяПодсистема = Элементы.КонфигурацииРазрабатываемыеВПроекте.ТекущиеДанные.Подсистема;
	
	Если ТекущаяКонфигурацияКэш = ТекущаяПодсистема Тогда
		Возврат;
	КонецЕсли;
	
	
	КонфигурацииРазрабатываемыеВПроектеПодсистемаПриИзмененииНаСервере(ТекущаяКонфигурацияКэш, ТекущаяПодсистема);
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацииРазрабатываемыеВПроектеПередУдалением(Элемент, Отказ)
	ТекущаяКонфигурацияКэш = Элементы.КонфигурацииРазрабатываемыеВПроекте.ТекущиеДанные.Подсистема;
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацииРазрабатываемыеВПроектеПослеУдаления(Элемент)
	КонфигурацииРазрабатываемыеВПроектеПослеУдаленияНаСервере(ТекущаяКонфигурацияКэш);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПодсистемыВходящиеВКонфигурацию

&НаКлиенте
Процедура ПодсистемыВходящиеВКонфигурациюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущаяПодсистема = Неопределено;
	
	ТекущиеДанные = Элементы.КонфигурацииРазрабатываемыеВПроекте.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено Тогда
		ТекущаяПодсистема = ТекущиеДанные.Подсистема;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяПодсистема) Тогда
		
		ТекстСообщения = НСтр("ru = 'Перед добавлением дополнительных подсистем нужно выбрать основную.'");	
		ПоказатьПредупреждение(,ТекстСообщения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсистемыВходящиеВКонфигурациюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока
		Или Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПодсистема = Неопределено;
	
	ТекущиеДанныеОсновнойТаблицы = Элементы.КонфигурацииРазрабатываемыеВПроекте.ТекущиеДанные;

	Если ТекущиеДанныеОсновнойТаблицы <> Неопределено Тогда
		ТекущаяПодсистема = ТекущиеДанныеОсновнойТаблицы.Подсистема;
	КонецЕсли;
	
	ТекущиеДанныеТекущейТаблицы = Элементы.ПодсистемыВходящиеВКонфигурацию.ТекущиеДанные;
	ТекущиеДанныеТекущейТаблицы.ОсновнаяПодсистема = ТекущаяПодсистема;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборВключаемыхПроектов(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормы, Элементы.ВключаемыеПроекты,,,, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеОтметки(Команда)
	
	Строки = ДеревоРазделов.ПолучитьЭлементы();
	УстановитьОтметкиРекурсивно(Строки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметки(Команда)
	
	Строки = ДеревоРазделов.ПолучитьЭлементы();
	УстановитьОтметкиРекурсивно(Строки, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОписанияТехническогоПроекта(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидОписания", "ОписаниеТехническогоПроекта");
	ПараметрыФормы.Вставить("ШаблонОписания", ШаблонОписанияТехническогоПроекта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ШаблонОписанияТехническогоПроектаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Проекты.Форма.ШаблонОписания", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонОписанияТехническогоПроектаЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("ФорматированныйДокумент") Тогда
        ШаблонОписанияТехническогоПроекта = Результат;
        Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеОписания(Команда)
	
	ОбщегоНазначенияСППРКлиент.ПерейтиПоСсылкеФорматированногоДокумента(Элементы.Описание, Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОписание(Команда)
	
	Элементы.Описание.ТолькоПросмотр = НЕ Элементы.Описание.ТолькоПросмотр;
	
	Если Элементы.Найти("ОписаниеРедактироватьОписание") <> Неопределено Тогда
		Элементы.ОписаниеРедактироватьОписание.Пометка = НЕ Элементы.ОписаниеРедактироватьОписание.Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияСинхронизацииКонфигурации(Команда)
	
	РедактированиеРасписанияРегламентногоЗаданияСинхронизацииКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияСообщенийПоОшибкам(Команда)
	
	РедактированиеРасписанияРегламентногоЗаданияСообщенийПоОшибкам();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НастроитьПутьКВерсиямПлатформыНаСервере(Команда)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.ОбщиеНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьМетаданныеИОбработчики(Команда)
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Проект", Объект.Ссылка);
	Если Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы Тогда
		ПараметрыЗагрузки.Вставить("Режим", "МетаданныеИОбработчикиПоВсемВерсиям");
	Иначе
		ПараметрыЗагрузки.Вставить("Режим", "МетаданныеПоВсемВерсиям");
	КонецЕсли;	
	
	ОткрытьФорму("Обработка.ЗагрузкаМетаданных.Форма.ЗагрузкаМетаданных", ПараметрыЗагрузки, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКХранилищу(Команда)
	
	ПараметрыФормы = Новый Структура("Хранилище", Объект.Ссылка);
	ОткрытьФорму("Обработка.ПодключениеБазыКХранилищу.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСправку(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатРасчета = ОбновитьСправкуВХранилищеНаСервере();
	
	АдресХранилища = Неопределено;
	
	Если РезультатРасчета.ЗаданиеВыполнено Тогда
		ОбновитьСправкуВХранилищеЗавершение();
	Иначе
		ИдентификаторЗадания = РезультатРасчета.ИдентификаторЗадания;
		АдресХранилища       = РезультатРасчета.АдресХранилища;
		ОткрытьФормуДлительнойОперации();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекстПредупрежденияКтоПривнес(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаСтрокиПредупреждениеКтоПривнес", ЭтотОбъект, Неопределено);
	ПоказатьВводСтроки(ОписаниеОповещения, Объект.ТекстПредупрежденияНеУказанКтоПривнес,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтрокиПредупреждениеКтоПривнес(Строка, Параметры) Экспорт
	
	Если Строка <> Неопределено Тогда
		Объект.ТекстПредупрежденияНеУказанКтоПривнес = Строка;
		ТекстПредупрежденияНеБудуРасследовать();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКоммита(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВводаСтрокиТекстКоммита", ЭтотОбъект, Неопределено);
	ПоказатьВводСтроки(ОписаниеОповещения, Объект.ТекстКоммитаДляЗагрузкиСправки,,, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтрокиТекстКоммита(Строка, Параметры) Экспорт
	
	Если Строка <> Неопределено Тогда
		Объект.ТекстКоммитаДляЗагрузкиСправки = Строка;
		ТекстКоммитаЗаголовок();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПриоритеты(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.ПриоритетыРабот.ФормаСписка", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках(Команда)
	
	РедактированиеРасписанияРегламентногоЗаданияЗагрузкиИзмененийВВетках();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПроверитьУстановкуGITКомпонент()
	
	Если НЕ (Объект.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПодсказки = "";
	
	ИспользуетсяLFS = Ложь;
	
	ВерсииКомпонент = ОбщегоНазначенияСППР.КлиентGITНаСервереУстановлен();
	
	ТекстПодсказки = НСтр("ru=
		|'Для корректной загрузки метаданных из git репозитория, на сервере необходимы:
		| - клиент: %ВерсияGIT%,
		| - компонента large file storage: %ВерсияGITLFS%.'");
	
	ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%ВерсияGIT%", 
		?(ЗначениеЗаполнено(ВерсииКомпонент.ВерсияGIT), ВерсииКомпонент.ВерсияGIT + " " + НСтр("ru='установлен'"), 
		НСтр("ru='не установлен'")));
		
	ФайлАтрибутыGit = Объект.КаталогGitРепозитория + ПолучитьРазделительПутиСервера() + ".gitattributes";
	НовыйФайл = Новый Файл(ФайлАтрибутыGit);
	
	Если НовыйФайл.Существует() Тогда
		
		АтрибутыGit = Новый ТекстовыйДокумент;
		АтрибутыGit.Прочитать(ФайлАтрибутыGit);
			
		АтрибутGit = АтрибутыGit.ПолучитьСтроку(1);
		ИспользуетсяLFS = НЕ СтрНайти(АтрибутGit, "filter=lfs") = 0;
		
	КонецЕсли;
	
	ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%ВерсияGITLFS%", 
		?(ЗначениеЗаполнено(ВерсииКомпонент.ВерсияGITLFS), ВерсииКомпонент.ВерсияGITLFS + " " + НСтр("ru='установлена'"), 
		?(ИспользуетсяLFS, НСтр("ru='не установлена'"), НСтр("ru='не требуется'"))));
	
	Элементы.ГруппаРазработкаВEDT.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользуютсяПриоритетыРабот = ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот");
	
	Если Объект.ИспользоватьЗакрытиеОшибок Тогда
		Если Объект.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями Тогда
			ВариантИспользованияЗакрытияОшибок = 2;
		Иначе
			ВариантИспользованияЗакрытияОшибок = 1;
		КонецЕсли;
	Иначе
		ВариантИспользованияЗакрытияОшибок = 0;
	КонецЕсли;
	
	ЗаполнитьТаблицуНормОтработкиОшибок();
	
	ВестиОписанияОбработчиковОбновленияИнформационнойБазыПриЧтенииСоздании = Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы;
	
	УстановитьДоступностьПроверяющегоОшибки(Элементы, Объект.ВариантНаправленияОшибокНаПроверку);
	УстановитьДоступностьРеквизитовЗакрытия(Элементы, Объект.ИспользоватьЗакрытиеОшибок, Объект.ВариантНаправленияОшибокНаЗакрытие);
	УправлениеДоступностьюПриоритеты(ЭтотОбъект);
	
	НастроитьФормуПоИспользованиюОбработчиковОбновления();
	НастроитьФормуПоФлагуВПроектеРазрабатываютсяНесколькоКонфигураций();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРазделыУдаленногоПроекта()
	
	СтруктураОтбора = Новый Структура("Проект", УдаляемыйПроект);
	МассивСтрок = Объект.ИспользуемыеРазделыВключаемыхПроектов.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрокаТЧ из МассивСтрок Цикл
		Объект.ИспользуемыеРазделыВключаемыхПроектов.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРазделов()
	
	Дерево = Справочники.РазделыПроекта.ДеревоРазделовПроекта(ТекущийПроект);
	
	Для Каждого СтрокаТЧ из Объект.ИспользуемыеРазделыВключаемыхПроектов Цикл
		
		СтрокаДерева = Дерево.Строки.Найти(СтрокаТЧ.РазделПроекта, "РазделПроекта", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.Использование = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьОтметкиГруппРекурсивно(Дерево.Строки);
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРазделов");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()

	СтрокиДерева = ДеревоРазделов.ПолучитьЭлементы();
	
	Для Каждого Строка из СтрокиДерева Цикл
		Элементы.ДеревоРазделов.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиВключаемыхПроектов()
	
	Если Элементы.ВключаемыеПроекты.ТекущиеДанные <> Неопределено Тогда
		ТекущийПроект = Элементы.ВключаемыеПроекты.ТекущиеДанные.Проект;
		ЗаполнитьДеревоРазделов();
		РазвернутьДерево();
	Иначе
		ТекущийПроект = Неопределено;
		ДеревоРазделов.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеИспользованияРаздела(СтрокаДерева)
		
	РазделПроекта = СтрокаДерева.РазделПроекта;
	
	СтруктураОтбора = Новый Структура("РазделПроекта", РазделПроекта);
	МассивСтрок = Объект.ИспользуемыеРазделыВключаемыхПроектов.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрок.Количество()>0 Тогда
		Если СтрокаДерева.Использование=0 Тогда
			Объект.ИспользуемыеРазделыВключаемыхПроектов.Удалить(МассивСтрок[0]);
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Использование=1 Тогда
			НоваяСтрокаТЧ = Объект.ИспользуемыеРазделыВключаемыхПроектов.Добавить();
			НоваяСтрокаТЧ.РазделПроекта = СтрокаДерева.РазделПроекта;
			НоваяСтрокаТЧ.Проект = СтрокаДерева.Проект;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПроектВТЧИспользуемыхРазделов()
	
	Если Объект.ИспользуемыеРазделыВключаемыхПроектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивРазделов = Объект.ИспользуемыеРазделыВключаемыхПроектов.Выгрузить().ВыгрузитьКолонку("РазделПроекта");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазделыПроекта.Ссылка КАК РазделПроекта,
	|	РазделыПроекта.Владелец КАК Проект
	|ИЗ
	|	Справочник.РазделыПроекта КАК РазделыПроекта
	|ГДЕ
	|	РазделыПроекта.Ссылка В(&МассивРазделов)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивРазделов", МассивРазделов);
	
	ТаблицаРазделов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ из Объект.ИспользуемыеРазделыВключаемыхПроектов Цикл
		
		СтрокаТаблицы = ТаблицаРазделов.Найти(СтрокаТЧ.РазделПроекта, "РазделПроекта");
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТЧ.Проект = СтрокаТаблицы.Проект;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиРекурсивно(Строки, Отметка)
	
	Для Каждого Строка из Строки Цикл
		Строка.Использование = Отметка;
		
		Если НЕ Строка.ЭтоГруппа Тогда
			ОбработатьИзменениеИспользованияРаздела(Строка);
		КонецЕсли;
		
		УстановитьОтметкиРекурсивно(Строка.ПолучитьЭлементы(), Отметка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкиРодителейРекурсивно(СтрокаДерева)
	
	Родитель = СтрокаДерева.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда
		
		Подчиненные = Родитель.ПолучитьЭлементы();
		
		ЕстьИспользуемые = Ложь;
		ЕстьНеиспользуемые = Ложь;
		
		Для Каждого Элемент из Подчиненные Цикл
			Если Элемент.Использование = 1 Тогда
				ЕстьИспользуемые = Истина;
			ИначеЕсли Элемент.Использование = 0 Тогда
				ЕстьНеиспользуемые = Истина;
			Иначе
				ЕстьИспользуемые = Истина;
				ЕстьНеиспользуемые = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИспользуемые И ЕстьНеиспользуемые Тогда
			Родитель.Использование = 2;
		ИначеЕсли Не ЕстьИспользуемые Тогда
			Родитель.Использование = 0;
		Иначе
			Родитель.Использование = 1;
		КонецЕсли;
		
		УстановитьОтметкиРодителейРекурсивно(Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкиГруппРекурсивно(Строки)
	
	Для Каждого Строка из Строки Цикл
		
		Если Не Строка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбораИспользуемых = Новый Структура;
		СтруктураОтбораНеиспользуемых = Новый Структура;
		
		СтруктураОтбораИспользуемых.Вставить("Использование", 1);
		СтруктураОтбораИспользуемых.Вставить("ЭтоГруппа", Ложь);
		
		СтруктураОтбораНеиспользуемых.Вставить("Использование", 0);
		СтруктураОтбораНеиспользуемых.Вставить("ЭтоГруппа", Ложь);
		
		МассивИспользуемыхСтрок = Строка.Строки.НайтиСтроки(СтруктураОтбораИспользуемых, Истина);
		МассивНеиспользуемыхСтрок = Строка.Строки.НайтиСтроки(СтруктураОтбораНеиспользуемых, Истина);
		
		Если МассивИспользуемыхСтрок.Количество()=0 Тогда
			Строка.Использование = 0;
		ИначеЕсли МассивИспользуемыхСтрок.Количество()>0 И МассивНеиспользуемыхСтрок.Количество()=0 Тогда
			Строка.Использование = 1;
		Иначе
			Строка.Использование = 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПроверяющегоОшибки(Элементы, ВариантНаправленияОшибокНаПроверку)
	
	Элементы.ПроверяющийОшибки.Доступность = 
		(ВариантНаправленияОшибокНаПроверку = ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаПроверку.УказанномуПользователю"));
		
КонецПроцедуры
	
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЗакрывающегоОшибки(Элементы, ВариантНаправленияОшибокНаЗакрытие)
	
	Элементы.ЗакрывающийОшибки.Доступность = 
		(ВариантНаправленияОшибокНаЗакрытие = ПредопределенноеЗначение("Перечисление.ВариантыНаправленияОшибокНаЗакрытие.УказанномуПользователю"));
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРеквизитовЗакрытия(Элементы, ИспользоватьЗакрытиеОшибок, ВариантНаправленияОшибокНаЗакрытие)
	
	Элементы.ВариантНаправленияОшибокНаЗакрытие.Доступность = ИспользоватьЗакрытиеОшибок;
	УстановитьДоступностьЗакрывающегоОшибки(Элементы, ВариантНаправленияОшибокНаЗакрытие);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ОпределитьДоступностьВыгрузкиСправкиВХранилище();
	
	ДоступноПланированиеОтработкиОшибок = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ПланированиеОтработкиОшибок", Объект.Ссылка);
		
	Элементы.ПорядокВоспроизведенияИИсправленияОшибок.ТолькоПросмотр = НЕ ДоступноПланированиеОтработкиОшибок;
	
	Если Элементы.Найти("ОписаниеРедактироватьОписание") <> Неопределено Тогда
		Элементы.ОписаниеРедактироватьОписание.Доступность = ДоступноИзменениеПроекта;
	КонецЕсли;
	
	Элементы.НастроитьПутьКВерсиямПлатформыНаСервере.Видимость =
		ПравоДоступа("Просмотр", Метаданные.Обработки.ПанельАдминистрированияБСП);
	
	Элементы.УровеньБиблиотеки.Видимость = Объект.Библиотека;
	
	Элементы.ВыгружатьСправкуПриЗагрузкеМетаданных.Доступность = ДоступнаВыгрузкаСправкиВХранилище;
	
	РазработкаВХранилище      = (Объект.РежимРазработки = Перечисления.РежимРазработки.ВХранилище);
	РазработкаВGitРепозитории = (Объект.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории);
	
	Элементы.ИмяПарольПользователяХранилища.Видимость = РазработкаВХранилище;
	Элементы.ГруппаВерсияПлатформа.Видимость = РазработкаВХранилище;
	Элементы.ПодключениеКИнформационнойБазе.Видимость = РазработкаВХранилище 
		ИЛИ Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы;
		
	Элементы.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных.Видимость = РазработкаВХранилище;
	Элементы.ВыгружатьСправкуПриЗагрузкеМетаданных.Видимость = РазработкаВХранилище ИЛИ РазработкаВGitРепозитории;
	
	Элементы.ГруппаХранилищаТехническихПроектов.Видимость = РазработкаВХранилище;
	Элементы.ГруппаРазработкаВEDT.Видимость = (Объект.РежимРазработки <> Перечисления.РежимРазработки.БезИзменений);
	
	Элементы.СтраницаОбработчикиОбновления.Видимость = Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы;
	
	Элементы.АдресСервераСценарииРаботыПользователя.Видимость = РазработкаВGitРепозитории;
	Элементы.РедактированиеСценариевВGitИмяПроекта.Видимость = РазработкаВGitРепозитории;
	Элементы.РезультатыВыполненияТестовТокен.Видимость = РазработкаВGitРепозитории;
	Элементы.КаталогТестовРепозитория.Видимость = Объект.ХранитьСценарииРаботыПользователейВРепозитории;
	
	Элементы.ГруппаТестирование.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьТестирование");
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Проекты.ХранилищеШаблонаОписанияТехническогоПроекта КАК ХранилищеШаблонаОписанияТехническогоПроекта,
	|	Проекты.ХранилищеОписания КАК ХранилищеОписания
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", КопируемыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ШаблонИзХранилища = Выборка.ХранилищеШаблонаОписанияТехническогоПроекта.Получить();
		Если ТипЗнч(ШаблонИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			ШаблонОписанияТехническогоПроекта = ШаблонИзХранилища;
		КонецЕсли;
		
		ОписаниеИзХранилища = Выборка.ХранилищеОписания.Получить();
		Если ТипЗнч(ОписаниеИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Описание = ОписаниеИзХранилища;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШрифтФорматированногоТекста()

	ШрифтФорматированногоТекста = РаботаСФорматированнымДокументом.ШрифтФорматированногоТекста();
	Элементы.Описание.Шрифт = ШрифтФорматированногоТекста;

КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияСинхронизацииКонфигурации()
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое
	Если РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации = Неопределено Тогда
		РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации);
	
	// Открываем диалог для редактирования Расписания
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияСинхронизацииКонфигурацииЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияСинхронизацииКонфигурацииЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации = Расписание;
		
	КонецЕсли;
	
	ОбновитьПредставлениеРасписанияСинхронизацииКонфигурации();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияСообщенийПоОшибкам()
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое
	Если РасписаниеРегламентногоЗаданияСообщенийПоОшибкам = Неопределено Тогда
		РасписаниеРегламентногоЗаданияСообщенийПоОшибкам = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияСообщенийПоОшибкам);
	
	// Открываем диалог для редактирования Расписания
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияСообщенийПоОшибкамЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияСообщенийПоОшибкамЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеРегламентногоЗаданияСообщенийПоОшибкам = Расписание;
		
	КонецЕсли;
	
	ОбновитьПредставлениеРасписанияСообщенийПоОшибкам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписанияСинхронизацииКонфигурации()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияСинхронизацииКонфигурации);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРегламентногоЗаданияСинхронизацииКонфигурации.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписанияСообщенийПоОшибкам()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияСообщенийПоОШибкам);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРегламентногоЗаданияСообщенийПоОшибкам.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовНастройкиРасписанияСинхронизацииКонфигурации()
	
	Элементы.НастроитьРасписаниеРегламентногоЗаданияСинхронизацииКонфигурации.Доступность = Объект.ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурации;
	
	Элементы.КаталогИБДляЗагрузкиМетаданных.АвтоОтметкаНезаполненного = Объект.ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурации;
	Элементы.КаталогИБДляЗагрузкиМетаданных.АвтоВыборНезаполненного = Объект.ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурации;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовНастройкиРасписанияСообщенийПоОшибкам()
	
	Элементы.НастроитьРасписаниеРегламентногоЗаданияСообщенийПоОшибкам.Доступность = Объект.ИспользоватьРегламентноеЗаданиеСообщенийПоОшибкам;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНадписьВерсияПроектаВВетке()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииПроекта.Ссылка КАК Ссылка,
	|	ВерсииПроекта.ПубликуемыйНомерВерсии КАК НомерВерсии
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Владелец
	|	И ВерсииПроекта.Ветка = ВерсииПроекта.Владелец.Ветка";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'В основной ветке разрабатывается версия'"),,ЦветаСтиля.ТекстИнформационнойНадписи));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Выборка.НомерВерсии,,,,"ОткрытьВерсиюОсновнойВетки"));
		
		ТекстЗаголовка = Новый ФорматированнаяСтрока(МассивСтрок);
		
		ВерсияОсновнойВетки = Выборка.Ссылка;
	Иначе
		
		ТекстЗаголовка = Новый ФорматированнаяСтрока(НСтр("ru = 'Нет информации о версии, которая разрабатывается в основной ветке.'"),,ЦветаСтиля.ТекстИнформационнойНадписи);
		ВерсияОсновнойВетки = Справочники.ВерсииПроекта.ПустаяСсылка();
		
	КонецЕсли;

	Элементы.ВерсияПроектаВВетке.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПоляЗакрытогоКлюча()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ЗакрытыеКлючиБазовыхВерсий КАК ЗакрытыеКлючиБазовыхВерсий
		|ГДЕ
		|	ЗакрытыеКлючиБазовыхВерсий.Проект = &Проект";
	УстановитьПривилегированныйРежим(Истина);
	КлючДобавлен = (Запрос.Выполнить().Выгрузить().Количество() > 0);
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивСтрок = Новый Массив;
	Если КлючДобавлен Тогда
		ЗакрытыйКлючДляПодписанияПатча = СтроковыеФункции.ФорматированнаяСтрока("<a href='изменить'>изменить</a> <a href='удалить'>удалить</a>");
	Иначе
		ЗакрытыйКлючДляПодписанияПатча = СтроковыеФункции.ФорматированнаяСтрока("<a href='добавить'>добавить</a>");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытыйКлючДляПодписанияПатчаЗавершение(ПомещенныйФайл, ДополнительныеПараметры) Экспорт
	Если ПомещенныйФайл <> Неопределено Тогда
		ДобавитьЗакрытыйКлючБазовойВерсии(ПомещенныйФайл.Хранение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗакрытыйКлючБазовойВерсии(АдресФайла)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.ЗакрытыеКлючиБазовыхВерсий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Проект.Установить(Объект.Ссылка);
	Запись = НаборЗаписей.Добавить();
	Запись.Проект = Объект.Ссылка;
	Запись.КлючЭлектроннойПодписи = Новый ХранилищеЗначения(ДвоичныеДанные);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Очистка временного хранилища.
	ПоместитьВоВременноеХранилище(Неопределено, АдресФайла);
	
	УстановитьТекстПоляЗакрытогоКлюча();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗакрытыйКлючДляПодписанияПатча()
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.ЗакрытыеКлючиБазовыхВерсий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Проект.Установить(Объект.Ссылка);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	УстановитьТекстПоляЗакрытогоКлюча();
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоИспользованиюОбработчиковОбновления()
	
	Элементы.МодулиОбновленияИнформационнойБазы.Видимость = Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы;
	
	Если Объект.ВестиОписанияОбработчиковОбновленияИнформационнойБазы Тогда
		Элементы.ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурации.Заголовок = НСтр("ru = 'Загружать метаданные и информацию по обработчикам обновления по расписанию:'");
		Элементы.ЗагрузкаПоРасписаниюРасширеннаяПодсказка.Заголовок = НСтр("ru = '1. Из основного хранилища будут загружаться метаданные и обработчики обновления. Из хранилищ поддерживаемых версий - только обработчики обновления.
                                                                           |2. В клиент-серверном режим СППР 1С:Конфигуратор указанной версии платформы должен быть установлен на каждом рабочем сервере СППР. Для выгрузки конфигурации в файлы требуется наличие свободного места на диске.'");
		Элементы.ЗагрузитьМетаданныеИОбработчики.Заголовок = НСтр("ru = 'Загрузить метаданные и обработчики'");
	Иначе
		Элементы.ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурации.Заголовок = НСтр("ru = 'Загружать метаданные по расписанию:'");
		Элементы.ЗагрузкаПоРасписаниюРасширеннаяПодсказка.Заголовок = НСтр("ru = '1. Метаданные загружаются только из основного хранилища.
                                                                           |2. В клиент-серверном режим СППР 1С:Конфигуратор указанной версии платформы должен быть установлен на каждом рабочем сервере СППР. Для выгрузки конфигурации в файлы требуется наличие свободного места на диске.'");
		Элементы.ЗагрузитьМетаданныеИОбработчики.Заголовок = НСтр("ru = 'Загрузить метаданные'");
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
		
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоФлагуВПроектеРазрабатываютсяНесколькоКонфигураций()
	
	Элементы.ПодсистемыВходящиеВКонфигурацию.Видимость = Объект.ВПроектеРазрабатываютсяНесколькоКонфигураций;
	Элементы.КонфигурацииРазрабатываемыеВПроекте.Видимость = Объект.ВПроектеРазрабатываютсяНесколькоКонфигураций;
	Элементы.МодулиОбновленияИнформационнойБазыПодсистема.Видимость = Объект.ВПроектеРазрабатываютсяНесколькоКонфигураций;
	
КонецПроцедуры

&НаКлиенте
Процедура ВерсияПроектаВХранилищеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьВерсиюОсновнойВетки" Тогда
		
		ПоказатьЗначение(,ВерсияОсновнойВетки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВерсииПоОбъекту()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СборкиВерсии.Владелец КАК Версия,
	|	СборкиВерсии.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПоследняяСборкаВерсии
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Владелец.Владелец = &Проект
	|	И СборкиВерсии.Владелец.ДатаНачалаРазработки <= &ТекущаяДата
	|	И СборкиВерсии.Владелец.ДатаНачалаРазработки > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И НЕ СборкиВерсии.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СборкиВерсии.Владелец.ПорядковыйНомер УБЫВ,
	|	СборкиВерсии.ДатаСборки УБЫВ,
	|	СборкиВерсии.Код УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка.Владелец.Владелец.Ссылка КАК Проект,
	|	СборкиВерсииСборкиВключаемыхПроектов.Сборка КАК Сборка
	|ПОМЕСТИТЬ ПоследниеСборкиВерсий
	|ИЗ
	|	Справочник.СборкиВерсии.СборкиВключаемыхПроектов КАК СборкиВерсииСборкиВключаемыхПроектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследняяСборкаВерсии КАК ПоследняяСборкаВерсии
	|		ПО СборкиВерсииСборкиВключаемыхПроектов.Ссылка = ПоследняяСборкаВерсии.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроектыВключаемыеПроекты.Проект КАК Проект,
	|	ПоследниеСборкиВерсий.Сборка КАК ВстроеннаяСборка,
	|	ПроектыВключаемыеПроекты.СправкаВедетсяВБиблиотеке КАК СправкаВедетсяВБиблиотеке
	|ИЗ
	|	Справочник.Проекты.ВключаемыеПроекты КАК ПроектыВключаемыеПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеСборкиВерсий КАК ПоследниеСборкиВерсий
	|		ПО ПроектыВключаемыеПроекты.Проект = ПоследниеСборкиВерсий.Проект
	|ГДЕ
	|	ПроектыВключаемыеПроекты.Ссылка = &Проект";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект",      Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ТаблицаВерсий = Запрос.Выполнить().Выгрузить();
	ВключаемыеПроекты.Загрузить(ТаблицаВерсий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоследнююСборку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СборкиВерсии.Ссылка КАК Сборка
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|ГДЕ
		|	СборкиВерсии.Владелец.Владелец = &Проект
		|	И СборкиВерсии.Владелец.ДатаНачалаРазработки <= &ТекущаяДата
		|	И СборкиВерсии.Владелец.ДатаНачалаРазработки > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ СборкиВерсии.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	СборкиВерсии.Владелец.ПорядковыйНомер УБЫВ,
		|	СборкиВерсии.ДатаСборки УБЫВ,
		|	СборкиВерсии.Код УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект",      Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СсылкаНаПоследнююСборку = Выборка.Сборка;
	КонецЕсли

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНормОтработкиОшибок()
	
	НормыДлительностиОтработкиОшибок.Очистить();
	
	СтрокаРегистрация 	= ДобавитьСтрокуТаблицыНормОтработкиОшибок("Регистрация");
	СтрокаРассмотрение	= ДобавитьСтрокуТаблицыНормОтработкиОшибок("Рассмотрение");
	СтрокаИсправление	= ДобавитьСтрокуТаблицыНормОтработкиОшибок("Исправление");
	СтрокаПроверка		= ДобавитьСтрокуТаблицыНормОтработкиОшибок("Проверка");
	СтрокаОтзыв			= ДобавитьСтрокуТаблицыНормОтработкиОшибок("Отзыв");
	
	Если Объект.ИспользоватьЗакрытиеОшибок Тогда
		СтрокаЗакрытие = ДобавитьСтрокуТаблицыНормОтработкиОшибок("Закрытие");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Для Каждого СтрокаТЧ из Объект.НормыДлительностиОтработкиОшибок Цикл
			
			Если СтрокаТЧ.СтатусОшибки = Перечисления.СтатусыОшибок.НеЗарегистрирована Тогда
				
				ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаРегистрация);
				
			ИначеЕсли СтрокаТЧ.СтатусОшибки = Перечисления.СтатусыОшибок.Зарегистрирована Тогда
				
				ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаРассмотрение);
				
			ИначеЕсли СтрокаТЧ.СтатусОшибки = Перечисления.СтатусыОшибок.Признана Тогда
				
				ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаИсправление);
				
			ИначеЕсли СтрокаТЧ.СтатусОшибки = Перечисления.СтатусыОшибок.НеПризнана Тогда
				
				ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаОтзыв);
				
			ИначеЕсли СтрокаТЧ.СтатусОшибки = Перечисления.СтатусыОшибок.Исправлена Тогда
				
				ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаПроверка);
				
			ИначеЕсли СтрокаТЧ.СтатусОшибки = Перечисления.СтатусыОшибок.Отозвана
				И Объект.ИспользоватьЗакрытиеОшибок Тогда
				
				ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаЗакрытие);
				
			ИначеЕсли СтрокаТЧ.СтатусОшибки = Перечисления.СтатусыОшибок.ПроверенаИсправлена
				И Объект.ИспользоватьЗакрытиеОшибок Тогда
				
				ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаЗакрытие);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуТаблицыНормОтработкиОшибок(Этап)
	
	НоваяСтрока = НормыДлительностиОтработкиОшибок.Добавить();
	НоваяСтрока.ЭтапРаботыСОшибкой = Этап;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ДобавитьДанныеСтрокиВТаблицуНорм(СтрокаТЧ, СтрокаТаблицы)
	
	Если СтрокаТЧ.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.Немедленно Тогда
		
		СтрокаТаблицы.Немедленно = СтрокаТЧ.Норма;
		
	ИначеЕсли СтрокаТЧ.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее Тогда
		
		СтрокаТаблицы.ЖелательноБыстрее = СтрокаТЧ.Норма;
		
	ИначеЕсли СтрокаТЧ.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке Тогда
		
		СтрокаТаблицы.ВПлановомПорядке = СтрокаТЧ.Норма;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНормыОтработкиОшибокВТабличнуюЧасть(ТекущийОбъект)
	
	ТекущийОбъект.НормыДлительностиОтработкиОшибок.Очистить();
	
	Для Каждого СтрокаТаблицы из НормыДлительностиОтработкиОшибок Цикл
		
		Если СтрокаТаблицы.ЭтапРаботыСОшибкой = "Регистрация" Тогда
			
			ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, Перечисления.СтатусыОшибок.НеЗарегистрирована, СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ЭтапРаботыСОшибкой = "Рассмотрение" Тогда
			
			ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, Перечисления.СтатусыОшибок.Зарегистрирована, СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ЭтапРаботыСОшибкой = "Исправление" Тогда
			
			ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, Перечисления.СтатусыОшибок.Признана, СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ЭтапРаботыСОшибкой = "Отзыв" Тогда
			
			ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, Перечисления.СтатусыОшибок.НеПризнана, СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ЭтапРаботыСОшибкой = "Проверка" Тогда
			
			ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, Перечисления.СтатусыОшибок.Исправлена, СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.ЭтапРаботыСОшибкой = "Закрытие" Тогда
			
			ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, Перечисления.СтатусыОшибок.ПроверенаИсправлена, СтрокаТаблицы);
			ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, Перечисления.СтатусыОшибок.Отозвана, СтрокаТаблицы);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиТабличнойЧастиНорм(ТекущийОбъект, СтатусОшибки, СтрокаТаблицы)
	
	НоваяСтрока = ТекущийОбъект.НормыДлительностиОтработкиОшибок.Добавить();
	НоваяСтрока.СтатусОшибки = СтатусОшибки;
	НоваяСтрока.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.Немедленно;
	НоваяСТрока.Норма = СтрокаТаблицы.Немедленно;
	
	НоваяСтрока = ТекущийОбъект.НормыДлительностиОтработкиОшибок.Добавить();
	НоваяСтрока.СтатусОшибки = СтатусОшибки;
	НоваяСтрока.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ЖелательноБыстрее;
	НоваяСТрока.Норма = СтрокаТаблицы.ЖелательноБыстрее;
	
	НоваяСтрока = ТекущийОбъект.НормыДлительностиОтработкиОшибок.Добавить();
	НоваяСтрока.СтатусОшибки = СтатусОшибки;
	НоваяСтрока.СрочностьИсправления = Перечисления.СрочностьИсправленияОшибок.ВПлановомПорядке;
	НоваяСТрока.Норма = СтрокаТаблицы.ВПлановомПорядке;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВерсияСтарше838(Знач ВерсияПлатформы)
	
	Если Не ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	КонецЕсли; 
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.8.0") > 0;
	
КонецФункции

&НаСервере
Процедура ОпределитьДоступностьВыгрузкиСправкиВХранилище()
	
	ДоступнаВыгрузкаСправкиВХранилище = Объект.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории
	                                ИЛИ (Объект.ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных
	                                      И ВерсияСтарше838(Объект.ВерсияПлатформы));
	
	Если Не ДоступнаВыгрузкаСправкиВХранилище Тогда
		Объект.ВыгружатьСправкуПриЗагрузкеМетаданных = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСправкуВХранилищеНаСервере()
	
	НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Обновление справки проекта %1 в хранилище'"), Объект.Ссылка);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Режим",  "МетаданныеИОбновлениеСправки");
	ПараметрыЗадания.Вставить("Проект", Объект.Ссылка);
	ПараметрыЗадания.Вставить("ВыгружатьСправкуПриЗагрузкеМетаданных", Истина);
	
	РезультатРасчета = ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ЗагрузкаМетаданных.ЗагрузитьМетаданныеИОбработчикиОбновленияПроекта",
			ПараметрыЗадания,
			НаименованиеЗадания,
			Строка(Объект.Ссылка.УникальныйИдентификатор()));
			
	Возврат РезультатРасчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуДлительнойОперации()
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
 
	Попытка
		
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				ОбновитьСправкуВХранилищеЗавершение();
				
			Иначе
				
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		
	Исключение
		
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
		
			ТекстовыйДокумент = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если ТипЗнч(ТекстовыйДокумент) = Тип("ТекстовыйДокумент") Тогда
				ТекстовыйДокумент.Показать();
			КонецЕсли; 
		
		КонецЕсли; 
		
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
		
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСправкуВХранилищеЗавершение()
	
	Если ЗначениеЗаполнено(АдресХранилища) Тогда
	
		ТекстовыйДокумент = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ТипЗнч(ТекстовыйДокумент) = Тип("ТекстовыйДокумент") Тогда
			ТекстовыйДокумент.Показать();
		КонецЕсли; 
	
	КонецЕсли; 
	
	ТекстСообщения = НСтр("ru='Обновление справки в хранилище версии завершено'");
	ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
// Запускает выполнение процедуры в фоновом задании.
// 
// Параметры:
//  ИдентификаторФормы     - УникальныйИдентификатор - идентификатор формы, 
//                           из которой выполняется запуск длительной операции. 
//  ИмяЭкспортнойПроцедуры - Строка - имя экспортной процедуры, 
//                           которую необходимо выполнить в фоне.
//  Параметры              - Структура - все необходимые параметры для 
//                           выполнения процедуры ИмяЭкспортнойПроцедуры.
//  НаименованиеЗадания    - Строка - наименование фонового задания. 
//                           Если не задано, то будет равно ИмяЭкспортнойПроцедуры. 
//  ИспользоватьДополнительноеВременноеХранилище - Булево - признак использования
//                           дополнительного временного хранилища для передачи данных
//                           в родительский сеанс из фонового задания. По умолчанию - Ложь.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, Знач Параметры,
	Знач НаименованиеЗадания = "", Знач КлючФоновогоЗадания, ИспользоватьДополнительноеВременноеХранилище = Ложь) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресХранилища",       АдресХранилища);
	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	
	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
	КонецЕсли;
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		АдресХранилищаДополнительный = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
		ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилищаДополнительный);
	КонецЕсли;
	
	ЗапущеноЗаданий = 0;
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		ЗапущеноЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.РежимОтладки()
		Или ЗапущеноЗаданий > 0 Тогда
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры);
		Результат.ЗаданиеВыполнено = Истина;
	Иначе
		ВремяОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 4, 2);
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Неопределено);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.КлючФоновогоЗадания = КлючФоновогоЗадания;
		
		Задание = ДлительныеОперации.ЗапуститьФоновоеЗаданиеСКонтекстомКлиента(ИмяЭкспортнойПроцедуры,	ПараметрыВыполнения, ПараметрыЭкспортнойПроцедуры);
		Попытка
			Задание.ОжидатьЗавершения(ВремяОжидания);
		Исключение
			// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
		КонецПопытки;
		
		Результат.ЗаданиеВыполнено = ЗаданиеВыполнено(Задание.УникальныйИдентификатор);
		Результат.ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИспользоватьДополнительноеВременноеХранилище Тогда
		Результат.Вставить("АдресХранилищаДополнительный", АдресХранилищаДополнительный);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ТекстПоясненияКОбновлениюХранилища()
	
	Элементы.ВыгрузитьСправку.Доступность = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Отбор.Вставить("Ключ",      Строка(Объект.Ссылка.УникальныйИдентификатор()));
	
	МассивЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	ЕстьАктивноеЗадание = (МассивЗаданий.Количество() > 0);
	Элементы.ПояснениеКОбновлениюСправки.Видимость = ЕстьАктивноеЗадание;
	
	Если ЕстьАктивноеЗадание Тогда
	
		ПояснениеКОбновлениюСправки = СтрШаблон(НСтр("ru = 'Выполняется задание по загрузке метаданных/обновлению справки с %1. Повторный запуск не возможен.'"), МассивЗаданий[0].Начало);
		Элементы.ВыгрузитьСправку.Доступность = Ложь;
		
	Иначе
		ПояснениеКОбновлениюСправки = "";
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ИзмененныеБиблиотеки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БиблиотекиПроекта.Библиотека КАК Библиотека,
	|	БиблиотекиПроекта.ЭтоПодсистемаТекущегоПроекта КАК ЭтоПодсистемаТекущегоПроекта,
	|	БиблиотекиПроекта.РежимВыполненияОтложенныхОбработчиков КАК РежимВыполненияОтложенныхОбработчиков,
	|	ВЫРАЗИТЬ(БиблиотекиПроекта.ПараллельноеОтложенноеОбновлениеСВерсии КАК СТРОКА(30)) КАК ДействуетСВерсии
	|ПОМЕСТИТЬ БиблиотекиПроектаДляЗапроса
	|ИЗ
	|	&БиблиотекиПроекта КАК БиблиотекиПроекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МодулиОбновленияИБ.Библиотека КАК Библиотека
	|ИЗ
	|	БиблиотекиПроектаДляЗапроса КАК БиблиотекиПроектаДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты.МодулиОбновленияИнформационнойБазы КАК МодулиОбновленияИБ
	|		ПО БиблиотекиПроектаДляЗапроса.Библиотека = МодулиОбновленияИБ.Библиотека
	|ГДЕ
	|	МодулиОбновленияИБ.Ссылка = &Проект
	|	И (БиблиотекиПроектаДляЗапроса.ЭтоПодсистемаТекущегоПроекта <> МодулиОбновленияИБ.ЭтоПодсистемаТекущегоПроекта
	|			ИЛИ БиблиотекиПроектаДляЗапроса.РежимВыполненияОтложенныхОбработчиков <> МодулиОбновленияИБ.РежимВыполненияОтложенныхОбработчиков
	|			ИЛИ БиблиотекиПроектаДляЗапроса.ДействуетСВерсии <> ВЫРАЗИТЬ(МодулиОбновленияИБ.ПараллельноеОтложенноеОбновлениеСВерсии КАК СТРОКА(30)))";
	
	Запрос.УстановитьПараметр("Проект", Объект.Ссылка);
	Запрос.УстановитьПараметр("БиблиотекиПроекта", Объект.МодулиОбновленияИнформационнойБазы.Выгрузить());
	
	ИзмененныеБиблиотеки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Библиотека");
	
	Возврат ИзмененныеБиблиотеки;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьТаблицуНормОтработкиОшибок()
	
	Если Объект.ИспользоватьЗакрытиеОшибок Тогда
		
		СтруктураОтбора = Новый Структура("ЭтапРаботыСОшибкой", "Закрытие");
		МассивСтрок = НормыДлительностиОтработкиОшибок.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = НормыДлительностиОтработкиОшибок.Добавить();
			НоваяСтрока.ЭтапРаботыСОшибкой = "Закрытие";
		КонецЕсли;
		
	Иначе
	    СтруктураОтбора = Новый Структура("ЭтапРаботыСОшибкой", "Закрытие");
		МассивСтрок = НормыДлительностиОтработкиОшибок.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаТаблицы из МассивСтрок Цикл
			НормыДлительностиОтработкиОшибок.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТекущейПодсистемеВСпискеПодсистемыВходящиеВКонфигурацию()
	
	ТекущиеДанные = Элементы.КонфигурацииРазрабатываемыеВПроекте.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура;
	ОтборСтрок.Вставить("ОсновнаяПодсистема", ТекущиеДанные.Подсистема);
	
	Элементы.ПодсистемыВходящиеВКонфигурацию.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		
КонецПроцедуры

&НаСервере
Процедура КонфигурацииРазрабатываемыеВПроектеПодсистемаПриИзмененииНаСервере(ТекущаяКонфигурацияКэш, ТекущаяПодсистема)
	НайденныеСтроки = Объект.ПодсистемыВходящиеВКонфигурацию.НайтиСтроки(Новый Структура("ОсновнаяПодсистема",ТекущаяКонфигурацияКэш));
	
	Для Каждого СтрТабл из НайденныеСтроки Цикл
		СтрТабл.ОсновнаяПодсистема = ТекущаяПодсистема;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонфигурацииРазрабатываемыеВПроектеПослеУдаленияНаСервере(ТекущаяКонфигурацияКэш)
	
	НайденныеСтроки = Объект.ПодсистемыВходящиеВКонфигурацию.НайтиСтроки(Новый Структура("ОсновнаяПодсистема",ТекущаяКонфигурацияКэш));
	
	Для Каждого СтрТабл из НайденныеСтроки Цикл
		Объект.ПодсистемыВходящиеВКонфигурацию.Удалить(СтрТабл);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТекстПредупрежденияНеБудуРасследовать()
	
	Элементы.ТекстПредупреждения.Заголовок = НСтр("ru = 'Текст предупреждения, при выборе ""Не буду расследовать""'")
	                                       + ?(ЗначениеЗаполнено(Объект.ТекстПредупрежденияНеУказанКтоПривнес), 
	                                                             НСтр("ru = ' (заполнено)'"), 
	                                                             НСтр("ru = ' (не заполнено)'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	Объект.ВключаемыеПроекты.Очистить();
	
	Для Каждого СтрокаТаблицы из ВключаемыеПроекты Цикл
		
		НоваяСтрока = Объект.ВключаемыеПроекты.Добавить();
		НоваяСтрока.Проект = СтрокаТаблицы.Проект;
		НоваяСтрока.СправкаВедетсяВБиблиотеке = СтрокаТаблицы.СправкаВедетсяВБиблиотеке;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ТекстКоммитаЗаголовок()
	
	Элементы.ТекстКоммита.Заголовок = НСтр("ru = 'Текст коммита'")
	                                + ?(ЗначениеЗаполнено(Объект.ТекстКоммитаДляЗагрузкиСправки), 
	                                                             НСтр("ru = ' (заполнен)'"), 
	                                                             НСтр("ru = ' (не заполнен)'"));
	
КонецПроцедуры

&НаСервере
Процедура ТекстКомандыВыгрузитьСправку()
	
	Элементы.ВыгрузитьСправку.Заголовок = ?(Объект.РежимРазработки = Перечисления.РежимРазработки.ВGitРепозитории, 
	                                        НСтр("ru = 'Выгрузить справку в git репозиторий'"), 
	                                        НСтр("ru = 'Выгрузить справку в хранилище проекта'"));
	
КонецПроцедуры

&НаСервере
Процедура РежимРазработкиПриИзмененииНаСервере()
	
	УстановитьДоступностьЭлементов();
	ТекстКомандыВыгрузитьСправку();
	Если ЗначениеЗаполнено(Объект.Ветка) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Ветка = Объект.Ветка.ПолучитьОбъект();
		Ветка.РежимРазработки = Объект.РежимРазработки;
		Ветка.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВеткуПроекта()
	
	ЗначениеЗаполнения = Новый Структура("РазрабатываемыйОбъект", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, РежимВыбора", ЗначениеЗаполнения, Истина);

	ОткрытьФорму(
		"Справочник.Ветки.ФормаОбъекта",
		ПараметрыФормы, 
		Элементы.Ветка,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьВеткуПроектаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВеткуПроектаПослеЗаписи", ЭтотОбъект);
		СтруктураПараметровЗаписи = Новый Структура;
		СтруктураПараметровЗаписи.Вставить("ДействиеПослеЗаписи", ОписаниеОповещения);
		
		Отказ = Ложь;
		ОбщегоНазначенияСППРКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, СтруктураПараметровЗаписи, Отказ);
	Иначе
		СоздатьВеткуПроекта();
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВеткуПроектаПослеЗаписи(РезультатДействия, ДополнительныеПараметры) Экспорт
	
	СоздатьВеткуПроекта();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПроверкиПатчаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИнструкцияПоПроверкеПатча = Результат;
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(Объект.ИнструкцияПоПроверкеПатча) Тогда
		УстановкаИнструкцииПроверкиПатча = СтроковыеФункцииКлиент.ФорматированнаяСтрока("<a href='ссылка'>изменена</a>");
	Иначе
		УстановкаИнструкцииПроверкиПатча = СтроковыеФункцииКлиент.ФорматированнаяСтрока("<a href='ссылка'>по умолчанию</a>");
	КонецЕсли;
	
КонецПроцедуры

#Область Приоритеты

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюПриоритеты(Форма)

	ЭлементыФормы = Форма.Элементы;
	
	Если Не Форма.ИспользуютсяПриоритетыРабот Тогда
		
		ЭлементыФормы.ГруппаПриоритетыРабот.Видимость = Ложь;
		
	Иначе
		
		Если Форма.Объект.ИспользоватьПриоритеты
			И Не Форма.Объект.Ссылка.Пустая() Тогда
			ЭлементыФормы.НастроитьПриоритеты.Видимость = Истина;
			ДанныеЗаголовка = ДанныеЗаголовкаНастроеныПриоритеты(Форма.Объект.Ссылка);
			ЭлементыФормы.НастроитьПриоритеты.Заголовок  = ДанныеЗаголовка.ТекстЗаголовка;
			ЭлементыФормы.НастроитьПриоритеты.ЦветТекста = ДанныеЗаголовка.ЦветЗаголовка;
		Иначе
			ЭлементыФормы.НастроитьПриоритеты.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.НастроитьПриоритеты.Доступность = Форма.Объект.ИспользоватьПриоритеты;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЗаголовкаНастроеныПриоритеты(Проект)
	
	Возврат Справочники.ПриоритетыРабот.ДанныеЗаголовкаНастроеныПриоритеты(Проект);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗагрузкиИзмененийВВетках()
	
	// Если расписание не инициализировано в форме на сервере, то создаем новое
	Если РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках = Неопределено Тогда
		РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках);
	
	// Открываем диалог для редактирования Расписания
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРасписанияРегламентногоЗаданияЗагрузкиИзмененийВВеткахЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗаданияЗагрузкиИзмененийВВеткахЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках = Расписание;
		
	КонецЕсли;
	
	ОбновитьПредставлениеРасписанияЗагрузкиИзмененийВВетках();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписанияЗагрузкиИзмененийВВетках()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках);
	
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
		
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовНастройкиРасписанияЗагрузкиИзмененийВВетках()
	
	Элементы.НастроитьРасписаниеРегламентногоЗаданияЗагрузкиИзмененийВВетках.Доступность = Объект.ЗагружатьИзмененияВВетках;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеЗаПубликациюНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	ОтветственныеЗаПубликацию.Очистить();
	Для Каждого Элемент Из Результат Цикл
		Если Элемент.Пометка Тогда
			ЗаполнитьЗначенияСвойств(ОтветственныеЗаПубликацию.Добавить(), Элемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти