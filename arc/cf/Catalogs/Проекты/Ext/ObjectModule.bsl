#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ТехническиеПроекты", "НаборСвойствДляТехническихПроектов");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_Идеи", "НаборСвойствДляИдей");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ЗадачиПроцесса", "НаборСвойствДляЗадачиПроцесса");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_Ошибки", "НаборСвойствДляОшибок");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ОбъектыМетаданных", "НаборСвойствДляОбъектовМетаданных");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_Подсистемы", "НаборСвойствДляПодсистем");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ФормыОбъектовМетаданных", "НаборСвойствДляФормОбъектовМетаданных");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_МакетыОбъектовМетаданных", "НаборСвойствДляМакетовОбъектовМетаданных");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_КомандыОбъектовМетаданных", "НаборСвойствДляКомандОбъектовМетаданных");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_РазделыПроекта", "НаборСвойствДляРазделовПроекта");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ЦелевыеЗадачи", "НаборСвойствДляЦелевыхЗадач");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ВерсииПроекта", "НаборСвойствДляВерсийПроекта");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_СборкиВерсии", "НаборСвойствДляСборокВерсий");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_Ветки", "НаборСвойствДляВеток");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_ФункцииСистемы", "НаборСвойствДляФункцийСистемы");
		УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект, "Справочник_РеквизитыОбъектовМетаданных", "НаборСвойствДляРеквизитовОбъектовМетаданных");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьТестирование") Тогда
			ТекущееНаименование = ЭтотОбъект.Наименование;
			
			ЭтотОбъект.Наименование = ТекущееНаименование + " Выгружаемые во внешние системы";
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_Процессы", "НаборСвойствДляПроцессовВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_СценарииРаботыПользователей", "НаборСвойствДляСценариевРаботыПользователейВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_НастройкиЗапускаПроцессов", "НаборСвойствДляНастроекЗапускаПроцессовВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_НастройкиЗапускаСценариев", "НаборСвойствДляНастроекЗапускаСценариевВыгружаемый");
			
			ЭтотОбъект.Наименование = ТекущееНаименование + " Невыгружаемые во внешние системы";
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_Процессы", "НаборСвойствДляПроцессовНеВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_СценарииРаботыПользователей", "НаборСвойствДляСценариевРаботыПользователейНеВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_НастройкиЗапускаПроцессов", "НаборСвойствДляНастроекЗапускаПроцессовНеВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_НастройкиЗапускаСценариев", "НаборСвойствДляНастроекЗапускаСценариевНеВыгружаемый");
			
			ЭтотОбъект.Наименование = ТекущееНаименование;
		Иначе	
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_Процессы", "НаборСвойствДляПроцессовНеВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_СценарииРаботыПользователей", "НаборСвойствДляСценариевРаботыПользователейНеВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_НастройкиЗапускаПроцессов", "НаборСвойствДляНастроекЗапускаПроцессовНеВыгружаемый");
			УправлениеСвойствами.ПередЗаписьюВидаОбъекта(ЭтотОбъект,
				"Справочник_НастройкиЗапускаСценариев", "НаборСвойствДляНастроекЗапускаСценариевНеВыгружаемый");
		КонецЕсли;	 
		
		//Конец СтандартныеПодсистемы.Свойства
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если НЕ Библиотека И ЗначениеЗаполнено(УровеньБиблиотеки) Тогда
		УровеньБиблиотеки = 0;
	КонецЕсли;
	
	Если НЕ ИспользоватьЗакрытиеОшибок И ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями Тогда
		ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями = Ложь;
	КонецЕсли;
	
	Если Не ВестиОписанияОбработчиковОбновленияИнформационнойБазы Тогда
		МодулиОбновленияИнформационнойБазы.Очистить();
	Иначе
		ЗаполнитьРеквизитыТЧМодулиОбновленияИнформационнойБазы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	КаталогИБДляЗагрузкиМетаданных = "";
	ИмяПользователяИБДляЗагрузкиМетаданных = "";
	ИмяПользователяХранилищаДляЗагрузкиМетаданных = "";
	ИмяКонфигурации = "";
	ПарольПользователяИБДляЗагрузкиМетаданных = "";
	ПарольПользователяХранилищаДляЗагрузкиМетаданных = "";
	Ветка = Справочники.Ветки.ПустаяСсылка();
	РегламентноеЗаданиеСинхронизацииКонфигурацииGUID = "";
	РегламентноеЗаданиеСообщенийПоОшибкамGUID = "";
	РегламентноеЗаданиеЗагрузкиИзмененийВВеткахGUID = "";
	ПутьКПроектуВРепозитории = "";
	
	НаборСвойствДляТехническихПроектов = Неопределено;
	НаборСвойствДляИдей = Неопределено;
	НаборСвойствДляЗадачиПроцесса = Неопределено;
	НаборСвойствДляОшибок = Неопределено;
	НаборСвойствДляОбъектовМетаданных = Неопределено;
	НаборСвойствДляПодсистем = Неопределено;
	НаборСвойствДляФормОбъектовМетаданных = Неопределено;
	НаборСвойствДляМакетовОбъектовМетаданных = Неопределено;
	НаборСвойствДляКомандОбъектовМетаданных = Неопределено;
	НаборСвойствДляРазделовПроекта = Неопределено;
	НаборСвойствДляЦелевыхЗадач = Неопределено;
	НаборСвойствДляВерсийПроекта = Неопределено;
	НаборСвойствДляВеток = Неопределено;
	НаборСвойствДляСборокВерсий = Неопределено;
	НаборСвойствДляПроцессовВыгружаемый = Неопределено;
	НаборСвойствДляПроцессовНеВыгружаемый = Неопределено;
	НаборСвойствДляСценариевРаботыПользователейВыгружаемый = Неопределено;
	НаборСвойствДляСценариевРаботыПользователейНеВыгружаемый = Неопределено;
	НаборСвойствДляНастроекЗапускаПроцессовВыгружаемый = Неопределено;
	НаборСвойствДляНастроекЗапускаПроцессовНеВыгружаемый = Неопределено;
	НаборСвойствДляНастроекЗапускаСценариевВыгружаемый = Неопределено;
	НаборСвойствДляНастроекЗапускаСценариевНеВыгружаемый = Неопределено;
	НаборСвойствДляФункцийСистемы = Неопределено;
	НаборСвойствДляРеквизитовОбъектовМетаданных = Неопределено;
	НаборСвойств = Неопределено;
	
	ДополнительныеРеквизиты.Очистить();
	ПорядокВоспроизведенияИИсправленияОшибок.Очистить();
	ВключаемыеПроекты.Очистить();
	ИспользуемыеРазделыВключаемыхПроектов.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ПроверитьОтсутствиеСсылкиВоВключаемыхПроектах(Отказ);
	ПроверитьЗаполнениеРазделовИспользуемыхПроектов(Отказ);
	ПроверитьДублиВерсииВоспроизведения(Отказ);
	ПроверитьЗаполнениеВариантаНаправленияОшибокНаПроверку(Отказ);
	ПроверитьЗаполнениеВариантаНаправленияОшибокНаЗакрытие(Отказ);
	
	Если НЕ ИспользоватьЗакрытиеОшибок Тогда
		НепроверяемыеРеквизиты.Добавить("ВариантНаправленияОшибокНаЗакрытие");
	КонецЕсли;
	
	Если НЕ ИспользоватьРегламентноеЗаданиеСинхронизацииКонфигурации 
	     ИЛИ РежимРазработки <> Перечисления.РежимРазработки.ВХранилище Тогда
		НепроверяемыеРеквизиты.Добавить("КаталогИБДляЗагрузкиМетаданных");
	КонецЕсли;
	Если НЕ ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных
		ИЛИ РежимРазработки <> Перечисления.РежимРазработки.ВХранилище Тогда
		НепроверяемыеРеквизиты.Добавить("ИмяПользователяХранилищаДляЗагрузкиМетаданных");
	КонецЕсли;
	
	Если Не ВПроектеРазрабатываютсяНесколькоКонфигураций Тогда
		НепроверяемыеРеквизиты.Добавить("МодулиОбновленияИнформационнойБазы.Подсистема");
		НепроверяемыеРеквизиты.Добавить("ПодсистемыВходящиеВКонфигурацию");
		НепроверяемыеРеквизиты.Добавить("ПодсистемыВходящиеВКонфигурацию.ДополнительнаяПодсистема");
		НепроверяемыеРеквизиты.Добавить("ПодсистемыВходящиеВКонфигурацию.ОсновнаяПодсистема");
		НепроверяемыеРеквизиты.Добавить("КонфигурацииРазрабатываемыеВПроекте");
		НепроверяемыеРеквизиты.Добавить("КонфигурацииРазрабатываемыеВПроекте.Подсистема");
		НепроверяемыеРеквизиты.Добавить("КонфигурацииРазрабатываемыеВПроекте.ЗакрывающийТэг");
		НепроверяемыеРеквизиты.Добавить("КонфигурацииРазрабатываемыеВПроекте.ОткрывающийТэг");
		НепроверяемыеРеквизиты.Добавить("КонфигурацииРазрабатываемыеВПроекте.ИмяКонфигурации");
	Иначе
		
		НепроверяемыеРеквизиты.Добавить("МодулиОбновленияИнформационнойБазы.Подсистема");
		
		Для Каждого СтрТабл из МодулиОбновленияИнформационнойБазы Цикл
			Если СтрТабл.ЭтоПодсистемаТекущегоПроекта
				И Не ЗначениеЗаполнено(СтрТабл.Подсистема) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Подсистема"" в строке %НомерСтроки% списка ""Модули обновления информационной базы""'");	
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрТабл.НомерСтроки);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МодулиОбновленияИнформационнойБазы", СтрТабл.НомерСтроки, "Подсистема");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
			КонецЕсли;
		КонецЦикла;
		
		КлючевыеРеквизиты = Новый Массив;
		КлючевыеРеквизиты.Добавить("ДополнительнаяПодсистема");
		КлючевыеРеквизиты.Добавить("ОсновнаяПодсистема");
		
		ОбщегоНазначенияСППР.ПроверитьНаличиеДублейСтрокТЧ(ЭтотОбъект, "ПодсистемыВходящиеВКонфигурацию", КлючевыеРеквизиты, Отказ);
		
		КлючевыеРеквизиты = Новый Массив;
		КлючевыеРеквизиты.Добавить("Подсистема");
		
		ОбщегоНазначенияСППР.ПроверитьНаличиеДублейСтрокТЧ(ЭтотОбъект, "КонфигурацииРазрабатываемыеВПроекте", КлючевыеРеквизиты, Отказ);
		
	КонецЕсли;
	
	Если РежимРазработки <> Перечисления.РежимРазработки.ВGitРепозитории Тогда
		НепроверяемыеРеквизиты.Добавить("АдресGitСервера");
		НепроверяемыеРеквизиты.Добавить("ПутьКПроектуВРепозитории");
	КонецЕсли;
	
	Если НЕ ИспользоватьРегламентноеЗаданиеСообщенийПоОшибкам Тогда
		НепроверяемыеРеквизиты.Добавить("ПользовательАвторСообщенийСистемыВзаимодействия");
	КонецЕсли;
	
	Если РежимРазработки <> Перечисления.РежимРазработки.ВGitРепозитории 
	   ИЛИ НЕ ВыгружатьСправкуПриЗагрузкеМетаданных Тогда
		НепроверяемыеРеквизиты.Добавить("ИмяВеткиДляВыгрузкиСправки");
	КонецЕсли;
	
	Если ЭтоНовый() ИЛИ РежимРазработки = Перечисления.РежимРазработки.БезИзменений Тогда
		НепроверяемыеРеквизиты.Добавить("Ветка");
	КонецЕсли;
	
	Если НепроверяемыеРеквизиты.Количество() > 0 Тогда
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	КонецЕсли;
	
	ПроверитьНаличиеДублей(Отказ);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РаботаСОбъектамиМетаданных.СоздатьЗаполнитьГруппыОбъектовМетаданных(Ссылка);
	РаботаСОбъектамиМетаданных.СоздатьЭлементыВСправочникеОбъектыМетаданных(Ссылка);
	Справочники.ВидыДоступа.СоздатьПредустановленныеВидыДоступа(Ссылка);
	Справочники.ПрофилиПользователей.СоздатьПрофильСистема(Ссылка);
	
	Если ДополнительныеСвойства.Свойство("ИзмененныеБиблиотеки") Тогда
		Библиотеки = ДополнительныеСвойства.ИзмененныеБиблиотеки;
		ЗаполнитьРеквизитВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно(Отказ, Ссылка, Библиотеки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеРазделовИспользуемыхПроектов(Отказ)
	
	МассивРазделов = ИспользуемыеРазделыВключаемыхПроектов.Выгрузить().ВыгрузитьКолонку("РазделПроекта");
	ТаблицаРазделов = Справочники.РазделыПроекта.ТаблицаРазделовСПроектами(МассивРазделов);
	
	ЕстьОшибкиПроверкиРазделов = Ложь;
	// Проверка на отсутствие разделов, относящихся к неиспользуемым проектам
	Для Каждого СтрокаТаблицы из ТаблицаРазделов Цикл
		
		Если ВключаемыеПроекты.Найти(СтрокаТаблицы.Проект, "Проект") = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru='Раздел проекта ""%Раздел%"" таблицы разделов не относится к включаемым проектам'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Раздел%", СтрокаТаблицы.Раздел);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ЕстьОшибкиПроверкиРазделов = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибкиПроверкиРазделов Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОтсутствиеСсылкиВоВключаемыхПроектах(Отказ)
	
	Если Не ЭтоНовый() Тогда
		СтрокаТЧ = ВключаемыеПроекты.Найти(Ссылка, "Проект");
		Если СтрокаТЧ <> Неопределено Тогда
			ТекстСообщения = НСтр("ru='В качестве используемого проекта нельзя указывать этот же проект'");
			ПутьКРеквизиту = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВключаемыеПроекты", СтрокаТЧ.НомерСтроки, "Проект");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, ПутьКРеквизиту);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВариантаНаправленияОшибокНаПроверку(Отказ)
	
	Если НЕ УказыватьВОшибкахРазделПроекта 
		И ВариантНаправленияОшибокНаПроверку = Перечисления.ВариантыНаправленияОшибокНаПроверку.ОтветственномуЗаРаздел Тогда
		
		ТекстСообщения = НСтр("ru='Неверно заполнено поле ""Направление ошибок на проверку"":
						|по данному проекту разделы в ошибках не указываются'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВариантНаправленияОшибокНаПроверку");
		Отказ = Истина;
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеВариантаНаправленияОшибокНаЗакрытие(Отказ)
	
	Если НЕ УказыватьВОшибкахРазделПроекта 
		И ВариантНаправленияОшибокНаЗакрытие = Перечисления.ВариантыНаправленияОшибокНаЗакрытие.ОтветственномуЗаРаздел Тогда
		
		ТекстСообщения = НСтр("ru='Неверно заполнено поле ""Направление ошибок на закрытие"":
						|по данному проекту разделы в ошибках не указываются'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ВариантНаправленияОшибокНаЗакрытие");
		Отказ = Истина;
			
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьДублиВерсииВоспроизведения(Отказ)
	
	ТаблицаВерсий = ПорядокВоспроизведенияИИсправленияОшибок.Выгрузить();	
	КоличествоСтрок = ТаблицаВерсий.Количество();
	
	ТаблицаВерсий.Свернуть("ВерсияВоспроизведения");
	КоличествоСтрокПослеСвертки = ТаблицаВерсий.Количество();
	
	Если КоличествоСтрок <> КоличествоСтрокПослеСвертки Тогда
		ТекстСообщения = НСтр("ru='В настройках порядка воспроизведения и исправления ошибок дублируются версии воспроизведения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПорядокВоспроизведенияИИсправленияОшибок");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеДублей(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса=
	"ВЫБРАТЬ
	|	Проекты.Ссылка КАК ОбъектыМетаданных
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	Проекты.ИмяКонфигурации ПОДОБНО &ИмяКонфигурации И НЕ Проекты.ИмяКонфигурации Подобно """"
	|	И Проекты.Ссылка <> &Ссылка"
	;
			
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИмяКонфигурации", ИмяКонфигурации);
	
	Запрос.Текст = ТекстЗапроса;
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ТекстСообщения = НСтр("ru='В информационной базе уже существует проект с именем конфигурации %ИмяКонфигурации%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяКонфигурации%", ИмяКонфигурации);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект, "ИмяКонфигурации",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыТЧМодулиОбновленияИнформационнойБазы()
	
	Для Каждого МодульОбновления Из МодулиОбновленияИнформационнойБазы Цикл
		
		МассивВерсий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			МодульОбновления.ПараллельноеОтложенноеОбновлениеСВерсии, ".");
		
		Если МассивВерсий.Количество() = 4 Тогда
			МодульОбновления.ПараллельноеОтложенноеОбновлениеСВерсииЧислом = Число(МассивВерсий[0]) * 10000000 +
				Число(МассивВерсий[1]) * 1000000 + Число(МассивВерсий[2]) * 10000 + Число(МассивВерсий[3]);
		Иначе
			МодульОбновления.ПараллельноеОтложенноеОбновлениеСВерсииЧислом = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно(Отказ, Проект, Библиотеки)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработчикиОбновления.Библиотека КАК Библиотека,
	|	ОбработчикиОбновления.Ссылка КАК ОбработчикОбновления,
	|	ОбработчикиОбновления.СборкаЧислом КАК НомерСборки,
	|	ОбработчикиОбновления.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно КАК ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|ПОМЕСТИТЬ ОбработчикиОбновленияДляЗапроса
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновления
	|ГДЕ
	|	ОбработчикиОбновления.Владелец = &Проект
	|	И ОбработчикиОбновления.Библиотека В(&Библиотеки)
	|	И НЕ ОбработчикиОбновления.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбработчикиОбновления.ОбработчикОбновления КАК ОбработчикОбновления,
	|	ВЫБОР
	|		КОГДА МодулиОбновленияИБ.ЭтоПодсистемаТекущегоПроекта
	|				ИЛИ МодулиОбновленияИБ.РежимВыполненияОтложенныхОбработчиков = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОтложенныхОбработчиковОбновления.Параллельно)
	|					И ОбработчикиОбновления.НомерСборки >= МодулиОбновленияИБ.ПараллельноеОтложенноеОбновлениеСВерсииЧислом
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|ПОМЕСТИТЬ ИзменяемыеОбработчикиОбновления
	|ИЗ
	|	ОбработчикиОбновленияДляЗапроса КАК ОбработчикиОбновления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты.МодулиОбновленияИнформационнойБазы КАК МодулиОбновленияИБ
	|		ПО ОбработчикиОбновления.Библиотека = МодулиОбновленияИБ.Библиотека
	|ГДЕ
	|	МодулиОбновленияИБ.Ссылка = &Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбработчикиОбновленияДляЗапроса.ОбработчикОбновления КАК ОбработчикОбновления,
	|	ОбработчикиОбновленияДляЗапроса.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно,
	|	ИзменяемыеОбработчикиОбновления.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно КАК ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно1
	|ИЗ
	|	ОбработчикиОбновленияДляЗапроса КАК ОбработчикиОбновленияДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзменяемыеОбработчикиОбновления КАК ИзменяемыеОбработчикиОбновления
	|		ПО ОбработчикиОбновленияДляЗапроса.ОбработчикОбновления = ИзменяемыеОбработчикиОбновления.ОбработчикОбновления
	|ГДЕ
	|	ОбработчикиОбновленияДляЗапроса.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно <> ИзменяемыеОбработчикиОбновления.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("Библиотеки", Библиотеки);
	
	ИзменяемыеОбработчики = Запрос.Выполнить().Выгрузить();
	
	Если ИзменяемыеОбработчики.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Для Каждого СтрокаОбработчиков Из ИзменяемыеОбработчики Цикл
			ОбработчикОбъект = СтрокаОбработчиков.ОбработчикОбновления.ПолучитьОбъект();
			ОбработчикОбъект.Заблокировать();
			
			ОбработчикОбъект.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно = 
				Не ОбработчикОбъект.ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно;
			
			ОбработчикОбъект.Записать();
			ОбработчикОбъект.Разблокировать();
		КонецЦикла;
		
	Исключение
		
		Отказ = Истина;
		КодОсновногоЯзыка = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка();
		ТекстСообщения = НСтр("ru = 'Не удалось записать изменения по проекту: %Проект%'", КодОсновногоЯзыка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Проект%", Проект);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось обновить данные обработчиков обновления информационной базы'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли