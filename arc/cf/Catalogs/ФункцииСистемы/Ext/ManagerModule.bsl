#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает список реквизитов, которые не нужно редактировать
// с помощью обработки группового изменения объектов
//
// Возвращаемое значение:
//  НеРедактируемыеРеквизиты - Массив - массив имен реквизитов, не подлежащих редактированию.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив;
	
	НеРедактируемыеРеквизиты.Добавить("ПолныйКод");
	НеРедактируемыеРеквизиты.Добавить("ХранилищеОписания");
	
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

// Получает и возвращает дочерние функции для указанной функции
//
// Параметры:
//  ФункцияРодитель - СправочникСсылка.ФункцииСистемы - функция, для которой требуется получить дочерние
//
// Возвращаемое значение:
//  ДочерниеФункции - Массив - массив, содержащий ссылки на дочерние функции
//
Функция ДочерниеФункции(ФункцияРодитель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФункцияРодитель) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемы.Ссылка КАК Ссылка,
	|	ФункцииСистемы.ПолныйКод КАК ПолныйКод
	|ИЗ
	|	Справочник.ФункцииСистемы КАК ФункцииСистемы
	|ГДЕ
	|	ФункцииСистемы.Родитель = &Родитель
	|	И НЕ ФункцииСистемы.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолныйКод"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Родитель", ФункцияРодитель);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СформироватьПечатныеФормы(МассивОбъектов, СУчетомПриемника=Ложь, ДанныеСоответствия=Неопределено) Экспорт
	
	ПечатныеФормы = Новый Соответствие;
	
	ТекстЗапроса = ТекстЗапросаДляФормированияОписания(СУчетомПриемника);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Если СУчетомПриемника Тогда
		Запрос.УстановитьПараметр("ТаблицаСоответствияФункций", ДанныеСоответствия.Функции);
	КонецЕсли;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если СУчетомПриемника Тогда
		ДочерниеФункции = МассивРезультатов[2].Выгрузить();
		ВыборкаФункций = МассивРезультатов[1].Выбрать();
	Иначе
		ДочерниеФункции = МассивРезультатов[1].Выгрузить();
		ВыборкаФункций = МассивРезультатов[0].Выбрать();
	КонецЕсли;
	
	СхемыФункций = СхемыФункций(МассивОбъектов);
	
	Пока ВыборкаФункций.Следующий() Цикл
		
		Документ = Новый ТабличныйДокумент;
		
		ОбработатьЭлементВыборки(ВыборкаФункций, Документ, ДочерниеФункции,
		                         СУчетомПриемника, Ложь, ДанныеСоответствия);
		
		СтруктураПечатныхФорм = Новый Структура;
		СтруктураПечатныхФорм.Вставить("Описание", Документ);
		СтруктураПечатныхФорм.Вставить("ОписаниеПриемника", Неопределено);
		
		СхемаФункции = СхемыФункций.Получить(ВыборкаФункций.Ссылка);
		
		Если СхемаФункции <> Неопределено Тогда
			СтруктураПечатныхФорм.Вставить("Схема", СхемаФункции);
		КонецЕсли;

		Если СУчетомПриемника И ЗначениеЗаполнено(ВыборкаФункций.ПриемникСсылка) Тогда
			ДокументПриемника = Новый ТабличныйДокумент;
			ОбработатьЭлементВыборки(ВыборкаФункций, ДокументПриемника, ДочерниеФункции,
			                         СУчетомПриемника, Истина, ДанныеСоответствия);
			СтруктураПечатныхФорм.Вставить("ОписаниеПриемника", ДокументПриемника);
		КонецЕсли;
		
		ПечатныеФормы.Вставить(ВыборкаФункций.Ссылка, СтруктураПечатныхФорм);
		
	КонецЦикла;
	
	Возврат ПечатныеФормы;
	
КонецФункции

// Выполняет печать описаний и схем переданных функций
//
// Параметры:
//  МассивОбъектов - массив функций, подлежащих печати
//
Процедура Печать(МассивОбъектов, ПечатныеФормы) Экспорт
	
	ПечатныеФормы = СформироватьПечатныеФормы(МассивОбъектов);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ПодборПоРезультату") Тогда
		Если Параметры.ПодборПоРезультату Тогда
			ДанныеВыбора = ФункцииСПодборомПоРезультату(Параметры);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаДляФормированияОписания(СУчетомПриемника)
	
	Если СУчетомПриемника Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСоответствияФункций.Источник КАК Источник,
		|	ТаблицаСоответствияФункций.Приемник КАК Приемник
		|ПОМЕСТИТЬ ВТСоответствиеФункций
		|ИЗ
		|	&ТаблицаСоответствияФункций КАК ТаблицаСоответствияФункций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Функции.Ссылка КАК Ссылка,
		|	ФункцииПриемник.Ссылка КАК ПриемникСсылка,
		|	Функции.Родитель КАК РодительскаяФункция,
		|	ФункцииПриемник.Родитель КАК ПриемникРодительскаяФункция,
		|	Функции.Код КАК Код,
		|	ФункцииПриемник.Код КАК ПриемникКод,
		|	Функции.Наименование КАК Наименование,
		|	ФункцииПриемник.Наименование КАК ПриемникНаименование,
		|	НЕ Функции.ЭтоГруппа КАК КонечнаяФункция,
		|	НЕ ЕСТЬNULL(ФункцииПриемник.ЭтоГруппа, ЛОЖЬ) КАК ПриемникКонечнаяФункция,
		|	Функции.ПолныйКод КАК ПолныйКод,
		|	ФункцииПриемник.ПолныйКод КАК ПриемникПолныйКод,
		|	Функции.ОтображаетсяВИнтерфейсе КАК ОтображаетсяВИнтерфейсе,
		|	ЕСТЬNULL(ФункцииПриемник.ОтображаетсяВИнтерфейсе, ЛОЖЬ) КАК ПриемникОтображаетсяВИнтерфейсе,
		|	Функции.НаименованиеВИнтерфейсе КАК НаименованиеВИнтерфейсе,
		|	ФункцииПриемник.НаименованиеВИнтерфейсе КАК ПриемникНаименованиеВИнтерфейсе,
		|	Функции.Описание КАК Описание,
		|	ФункцииПриемник.Описание КАК ПриемникОписание,
		|	Функции.Результат КАК Результат,
		|	ФункцииПриемник.Результат КАК ПриемникРезультат,
		|	Функции.Ответственный КАК Ответственный,
		|	ФункцииПриемник.Ответственный КАК ПриемникОтветственный,
		|	Функции.ТипФункции КАК ТипФункции,
		|	ФункцииПриемник.ТипФункции КАК ПриемникТипФункции,
		|	Функции.ВходящиеДанные.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСвязи КАК ВидСвязи,
		|		Функция КАК Ссылка,
		|		Функция.Наименование КАК Представление,
		|       Комментарий КАК Комментарий
		|	) КАК ВходящиеДанные,
		|	ФункцииПриемник.ВходящиеДанные.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСвязи КАК ВидСвязи,
		|		Функция КАК Ссылка,
		|		Функция.Наименование КАК Представление,
		|       Комментарий КАК Комментарий
		|	) КАК ПриемникВходящиеДанные,
		|	Функции.Исполнители.(
		|		НомерСтроки КАК НомерСтроки,
		|		Исполнитель КАК Ссылка,
		|		Исполнитель.Наименование КАК Представление,
		|       Комментарий КАК Комментарий
		|	) КАК Исполнители,
		|	ФункцииПриемник.Исполнители.(
		|		НомерСтроки КАК НомерСтроки,
		|		Исполнитель КАК Ссылка,
		|		Исполнитель.Наименование КАК Представление,
		|       Комментарий КАК Комментарий
		|	) КАК ПриемникИсполнители,
		|	Функции.ИсходящиеОбъектыМетаданных.(
		|		ОбъектМетаданных КАК Ссылка,
		|		ОбъектМетаданных.Наименование КАК Представление
		|	) КАК ИсходящиеОбъектыМетаданных,
		|	ФункцииПриемник.ИсходящиеОбъектыМетаданных.(
		|		ОбъектМетаданных КАК Ссылка,
		|		ОбъектМетаданных.Наименование КАК Представление
		|	) КАК ПриемникИсходящиеОбъектыМетаданных,
		|	Функции.ОтчетыСервисныеОбъекты.(
		|		ОбъектМетаданных КАК Ссылка,
		|		ОбъектМетаданных.Наименование КАК Представление
		|	) КАК ОтчетыСервисныеОбъекты,
		|	ФункцииПриемник.ОтчетыСервисныеОбъекты.(
		|		ОбъектМетаданных КАК Ссылка,
		|		ОбъектМетаданных.Наименование КАК Представление
		|	) КАК ПриемникОтчетыСервисныеОбъекты
		|ИЗ
		|	Справочник.ФункцииСистемы КАК Функции
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеФункций КАК ВТСоответствиеФункций
		|		ПО Функции.Ссылка = ВТСоответствиеФункций.Источник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФункцииСистемы КАК ФункцииПриемник
		|		ПО (ВТСоответствиеФункций.Приемник = ФункцииПриемник.Ссылка)
		|ГДЕ
		|	Функции.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолныйКод ИЕРАРХИЯ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Функции.Код КАК Код,
		|	Функции.ПолныйКод КАК ПолныйКод,
		|	Функции.Наименование КАК Наименование,
		|	Функции.ПолныйКод + ""."" + Функции.Наименование КАК Представление,
		|	Функции.Родитель КАК Родитель,
		|	Функции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФункцииСистемы КАК Функции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеФункций КАК ВТСоответствиеФункций
		|		ПО Функции.Родитель = ВТСоответствиеФункций.Источник
		|ГДЕ
		|	Функции.Родитель В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФункцииПриемника.Код,
		|	ФункцииПриемника.ПолныйКод,
		|	ФункцииПриемника.Наименование,
		|	ФункцииПриемника.ПолныйКод + ""."" + ФункцииПриемника.Наименование КАК Представление,
		|	ФункцииПриемника.Родитель,
		|	ФункцииПриемника.Ссылка
		|ИЗ
		|	Справочник.ФункцииСистемы КАК ФункцииПриемника
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеФункций КАК ВТСоответствиеФункций
		|		ПО ФункцииПриемника.Родитель = ВТСоответствиеФункций.Приемник
		|			И (ВТСоответствиеФункций.Источник В (&МассивОбъектов))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код"
		;
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Функции.Ссылка КАК Ссылка,
		|	Функции.Родитель КАК РодительскаяФункция,
		|	Функции.Код КАК Код,
		|	Функции.Наименование КАК Наименование,
		|	НЕ Функции.ЭтоГруппа КАК КонечнаяФункция,
		|	Функции.ПолныйКод КАК ПолныйКод,
		|	Функции.ОтображаетсяВИнтерфейсе КАК ОтображаетсяВИнтерфейсе,
		|	Функции.НаименованиеВИнтерфейсе КАК НаименованиеВИнтерфейсе,
		|	Функции.Описание КАК Описание,
		|	Функции.Результат КАК Результат,
		|	Функции.Ответственный КАК Ответственный,
		|	Функции.ТипФункции КАК ТипФункции,
		|	Функции.ВходящиеДанные.(
		|		НомерСтроки КАК НомерСтроки,
		|		ВидСвязи КАК ВидСвязи,
		|		Функция КАК Ссылка,
		|		Функция.Наименование КАК Представление,
		|       Комментарий КАК Комментарий
		|	) КАК ВходящиеДанные,
		|	Функции.Исполнители.(
		|		НомерСтроки КАК НомерСтроки,
		|		Исполнитель КАК Ссылка,
		|		Исполнитель.Наименование КАК Представление,
		|       Комментарий КАК Комментарий
		|	) КАК Исполнители,
		|	Функции.ИсходящиеОбъектыМетаданных.(
		|		ОбъектМетаданных КАК Ссылка,
		|		ОбъектМетаданных.Наименование КАК Представление
		|	) КАК ИсходящиеОбъектыМетаданных,
		|	Функции.ОтчетыСервисныеОбъекты.(
		|		ОбъектМетаданных КАК Ссылка,
		|		ОбъектМетаданных.Наименование КАК Представление
		|	) КАК ОтчетыСервисныеОбъекты
		|ИЗ
		|	Справочник.ФункцииСистемы КАК Функции
		|ГДЕ
		|	Функции.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолныйКод ИЕРАРХИЯ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Функции.Код КАК Код,
		|	Функции.ПолныйКод КАК ПолныйКод,
		|	Функции.Наименование КАК Наименование,
		|	Функции.ПолныйКод + ""."" + Функции.Наименование КАК Представление,
		|	Функции.Родитель КАК Родитель,
		|	Функции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ФункцииСистемы КАК Функции
		|ГДЕ
		|	Функции.Родитель В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код"
		;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ФункцииСПодборомПоРезультату(Параметры)
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		Проект = Параметры.Отбор.Владелец;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ФункцииСистемы.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ФункцииСистемы.Ссылка) КАК Представление,
	|	ВЫБОР
	|		КОГДА &ОтбиратьПоКоду
	|				И ФункцииСистемы.Наименование ПОДОБНО &СтрокаПоиска
	|			ТОГДА ФункцииСистемы.Наименование
	|		КОГДА &ОтбиратьПоКоду
	|				И ФункцииСистемы.НаименованиеВИнтерфейсе ПОДОБНО &СтрокаПоиска
	|			ТОГДА ФункцииСистемы.НаименованиеВИнтерфейсе
	|		КОГДА &ОтбиратьПоКоду
	|				И ФункцииСистемы.Результат ПОДОБНО &СтрокаПоиска
	|			ТОГДА ФункцииСистемы.Результат
	|		КОГДА &ОтбиратьПоКоду
	|				И ФункцииСистемы.ПолныйКод ПОДОБНО &СтрокаПоиска
	|			ТОГДА ФункцииСистемы.ПолныйКод
	|	КОНЕЦ КАК ПолеПоиска
	|ИЗ
	|	Справочник.ФункцииСистемы КАК ФункцииСистемы
	|ГДЕ
	|	ФункцииСистемы.Владелец = &Проект
	|	И (НЕ &ОтбиратьПоКоду
	|			ИЛИ ФункцииСистемы.Наименование ПОДОБНО &СтрокаПоиска
	|			ИЛИ ФункцииСистемы.НаименованиеВИнтерфейсе ПОДОБНО &СтрокаПоиска
	|			ИЛИ ФункцииСистемы.Результат ПОДОБНО &СтрокаПоиска
	|			ИЛИ ФункцииСистемы.ПолныйКод ПОДОБНО &СтрокаПоиска)
	|	И НЕ ФункцииСистемы.ПометкаУдаления
	|	И НЕ ФункцииСистемы.ЭтоГруппа
	|	И (НЕ &ИсключатьПриемник
	|			ИЛИ ФункцииСистемы.Ссылка <> &ФункцияПриемник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФункцииСистемы.ПолныйКод"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Проект);
	
	СтрокаПоиска = Параметры.СтрокаПоиска;
		
	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ОтбиратьПоКоду", Истина);
	Иначе
		Запрос.УстановитьПараметр("СтрокаПоиска", "");
		Запрос.УстановитьПараметр("ОтбиратьПоКоду", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ФункцияПриемник") Тогда
		ИсключатьПриемник = Истина;
		ФункцияПриемник = Параметры.ФункцияПриемник;
	Иначе
		ИсключатьПриемник = Ложь;
		ФуецмяПриемник = Справочники.ФункцииСистемы.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсключатьПриемник", ИсключатьПриемник);
	Запрос.УстановитьПараметр("ФункцияПриемник", ФункцияПриемник);
		
	СписокВыбора = Новый СписокЗначений;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СписокВыбора;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПолеПоиска) Тогда
			Представление = СокрЛП(Выборка.ПолеПоиска);
			Если Выборка.ПолеПоиска <> Выборка.Представление Тогда
				Представление = Представление + " (" + СОКРЛП(Выборка.Представление) + ")";
			КонецЕсли;
		Иначе
			Представление = Выборка.Представление;
		КонецЕсли;
		
		СписокВыбора.Добавить(Выборка.Ссылка, Представление);
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура СформироватьОписаниеОбъекта(Выборка, ДочерниеДляИсточника, ДочерниеДляПриемника, Документ, СУчетомПриемника, ДляПриемника, ДанныеСоответствия)
	
	НастройкиВывода = Новый Структура;
	НастройкиВывода.Вставить("ДляПриемника", ДляПриемника);
	НастройкиВывода.Вставить("СУчетомПриемника", СучетомПриемника);
	
	КонечнаяФункция = ?(ДляПриемника, Выборка.ПриемникКонечнаяФункция, Выборка.КонечнаяФункция);
	
	ИмяПоляСсылка = ?(ДляПриемника, "ПриемникСсылка", "Ссылка");
	ИмяПоляПолныйКОд = ?(ДляПриемника, "ПриемникПолныйКод", "ПолныйКод");
	
	// Заголовок документа
	Если КонечнаяФункция Тогда
		ОписаниеОбъектов.ВывестиЗаголовокОбъекта(НСтр("ru='Конечная функция'"),
		                                         Выборка[ИмяПоляСсылка], Выборка[ИмяПоляПолныйКод], Документ);
	Иначе
		ОписаниеОбъектов.ВывестиЗаголовокОбъекта(НСтр("ru='Функциональный блок'"),
		                                         Выборка[ИмяПоляСсылка],Выборка[ИмяПоляПолныйКод],Документ);
	КонецЕсли;
	
	ОписаниеОбъектов.ВывестиЗаголовокТекста("", , Документ);
	
	Если КонечнаяФункция Тогда
		
		ИмяПоля = ?(ДляПриемника, "ПриемникТипФункции", "ТипФункции");
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Тип функции: '") + Выборка[ИмяПоля], 1, Документ);
		
		ИмяПоля = ?(ДляПриемника, "ПриемникОтветственный", "Ответственный");
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Ответственный: '") + Выборка[ИмяПоля], 1, Документ);
		
	КонецЕсли;
	
	ИмяПоля = ?(ДляПриемника, "ПриемникРодительскаяФункция", "РодительскаяФункция");
	
	Если ЗначениеЗаполнено(Выборка[ИмяПоля]) Тогда
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Родительская функция: '") + Выборка[ИмяПоля], 1, Документ);
	КонецЕсли;
	
	ИмяПоля = ?(ДляПриемника, "ПриемникОтображаетсяВИнтерфейсе", "ОтображаетсяВИнтерфейсе");
	
	Если Выборка[ИмяПоля] Тогда
		
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(НСтр("ru='Отображается в интерфейсе'"), 1, Документ);
		
		ИмяПоля = ?(ДляПриемника, "ПриемникНаименованиеВИнтерфейсе", "НаименованиеВИнтерфейсе");
		
		Если ЗначениеЗаполнено(Выборка[ИмяПоля]) Тогда
			ОписаниеОбъектов.ВывестиТекстПоАбзацам(Выборка[ИмяПоля], 1, Документ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Описание
	ИмяПоля = ?(ДляПриемника, "ПриемникОписание", "Описание");
	
	Если ЗначениеЗаполнено(Выборка[ИмяПоля]) Тогда
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Описание'"), Документ);
		ОписаниеОбъектов.ВывестиТекстПоАбзацам(Выборка[ИмяПоля],, Документ);
	КонецЕсли;
	
	Если СУчетомПриемника Тогда
		СоответствиеФункций  = ДанныеСоответствия.Функции;
		СоответствиеПрофилей = ДанныеСоответствия.Профили;
	Иначе
		СоответствиеФункций  = Неопределено;
		СоответствиеПрофилей = Неопределено;
	Конецесли;
	
	ВывестиДочерниеФункции(ДочерниеДляПриемника, ДочерниеДляИсточника,
	                       СоответствиеФункций, Документ, НастройкиВывода);
	
	Если НЕ КонечнаяФункция Тогда
		// Для групп больше ничего не выводится
		Возврат;
	КонецЕсли;
	
	//Входящие данные
	ЗаголовокРаздела = НСтр("ru='Входящие данные'");
	ЗаголовокСсылки = НСтр("ru='Функция'");
	
	Колонки = Новый Структура;
	Колонки.Вставить("ВидСвязи", НСтр("ru='Вид связи'"));
	Колонки.Вставить("Комментарий", НСтр("ru='Комментарий'"));
	НастройкиВывода.Вставить("Колонки", Колонки);
	
	ОписаниеОбъектов.ВывестиТаблицуТЧ(Выборка, "ВходящиеДанные", ЗаголовокРаздела,
		                              СоответствиеФункций, Документ, ЗаголовокСсылки, НастройкиВывода);
	
	//Исполнители
	ЗаголовокРаздела = НСтр("ru='Исполнители'");
	ЗаголовокСсылки = НСтр("ru='Профиль'");
	
	Колонки = Новый Структура;
	Колонки.Вставить("Комментарий", НСтр("ru='Комментарий'"));
	НастройкиВывода.Вставить("Колонки", Колонки);
	
	ОписаниеОбъектов.ВывестиТаблицуТЧ(Выборка, "Исполнители", ЗаголовокРаздела,
		                              СоответствиеПрофилей, Документ, ЗаголовокСсылки, НастройкиВывода);
	
	// Исходящие объекты метаданных
	ИмяТЧ = ?(ДляПриемника, "ПриемникИсходящиеОбъектыМетаданных", "ИсходящиеОбъектыМетаданных");
	ИсходящиеОМ = Выборка[ИмяТЧ].Выгрузить();
	
	Если ИсходящиеОМ.Количество() > 0 Тогда
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Исходящие объекты метаданных'"), Документ);
		Для Каждого СтрокаТЧ из ИсходящиеОМ Цикл
			ОписаниеОбъектов.ВывестиТекстПоАбзацам(СтрокаТЧ.Представление, 1, Документ, СтрокаТЧ.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// Отчеты, сервисные объекты
	ИмяТЧ = ?(ДляПриемника, "ПриемникОтчетыСервисныеОбъекты", "ОтчетыСервисныеОбъекты");
	ОтчетыСервисныеОбъекты = Выборка[ИмяТЧ].Выгрузить();
	
	Если ОтчетыСервисныеОбъекты.Количество() > 0 Тогда
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Отчеты, сервисные объекты'"), Документ);
		Для Каждого СтрокаТЧ из ОтчетыСервисныеОбъекты Цикл
			ОписаниеОбъектов.ВывестиТекстПоАбзацам(СтрокаТЧ.Представление, 1, Документ, СтрокаТЧ.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьЭлементВыборки(Выборка, Документ, ДочерниеФункции, СУчетомПриемника, ДляПриемника, ДанныеСоответствия)
	
	ОписаниеОбъектов.НастроитьОписаниеОбъекта(Документ);
	Документ.НачатьАвтогруппировкуСтрок();
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Родитель", Выборка.Ссылка);
	
	ДочерниеДляИсточника = ОписаниеОбъектов.ТаблицаОбъектаПоОбщейТаблице(ДочерниеФункции, СтруктураОтбора);
	
	Если СУчетомПриемника Тогда
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Родитель", Выборка.ПриемникСсылка);
		
		ДочерниеДляПриемника = ОписаниеОбъектов.ТаблицаОбъектаПоОбщейТаблице(ДочерниеФункции, СтруктураОтбора);
	Иначе
		ДочерниеДляПриемника = Новый ТаблицаЗначений;
	КонецЕсли;
		
	СформироватьОписаниеОбъекта(Выборка, ДочерниеДляИсточника, ДочерниеДляПриемника,
	                            Документ, СУчетомПриемника, ДляПриемника, ДанныеСоответствия);
		
	Документ.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

Процедура ВывестиДочерниеФункции(ДочерниеДляПриемника, ДочерниеДляИсточника, СоответствиеФункций, Документ, НастройкиВывода)
	
	ДляПриемника = НастройкиВывода.ДляПриемника;
	СУчетомПриемника = НастройкиВывода.СУчетомПриемника;
	
	Если ДляПриемника Тогда
		ТаблицаДочерних = ДочерниеДляПриемника;
		ТаблицаДляСоответствия = ДочерниеДляИсточника;
	Иначе
		ТаблицаДочерних = ДочерниеДляИсточника;
		
		Если СУчетомПриемника Тогда
			ТаблицаДляСоответствия = ДочерниеДляПриемника;
		Иначе
			ТаблицаДляСоответствия = Новый ТаблицаЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаДочерних.Количество()>0 Тогда
		
		ОписаниеОбъектов.ВывестиЗаголовокРаздела(НСтр("ru='Дочерние функции'"), Документ);
		
		НомерСтроки = 0;
		Для Каждого СтрокаТаблицы из ТаблицаДочерних Цикл
			НомерСтроки = НомерСтроки +1;
			ОписаниеОбъектов.ВывестиСтрокуТаблицы(СтрокаТаблицы, СоответствиеФункций, ТаблицаДляСоответствия,
			                                      Документ, "", НомерСтроки, НастройкиВывода);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СхемыФункций(МассивОбъектов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемы.Ссылка КАК Функция,
	|	ФункцииСистемы.Родитель КАК Родитель,
	|	ФункцииСистемы.ПолныйКод КАК ПолныйКод,
	|	ФункцииСистемы.Наименование КАК Наименование,
	|	ФункцииСистемы.Результат КАК Результат,
	|	ФункцииСистемы.ТипФункции КАК ТипФункции,
	|	ВЫРАЗИТЬ(ФункцииСистемы.Описание КАК СТРОКА(1000)) КАК Описание,
	|	ФункцииСистемы.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ ВТФункции
	|ИЗ
	|	Справочник.ФункцииСистемы КАК ФункцииСистемы
	|ГДЕ
	|	ФункцииСистемы.Ссылка В(&МассивОбЪектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыВходящиеДанные.Ссылка КАК Функция,
	|	ФункцииСистемыВходящиеДанные.НомерСтроки КАК НомерСтроки,
	|	ФункцииСистемыВходящиеДанные.Комментарий КАК Комментарий,
	|	ФункцииСистемыВходящиеДанные.Функция КАК Ссылка,
	|	ФункцииСистемыВходящиеДанные.Функция.Наименование КАК Наименование,
	|	ФункцииСистемыВходящиеДанные.Функция.ПолныйКод КАК ПолныйКод,
	|	ФункцииСистемыВходящиеДанные.Функция.Результат КАК Результат,
	|	ФункцииСистемыВходящиеДанные.Функция.ТипФункции КАК ТипФункции,
	|	ФункцииСистемыВходящиеДанные.ВидСвязи КАК ВидСвязи
	|ПОМЕСТИТЬ ВТВходящиеДанные
	|ИЗ
	|	Справочник.ФункцииСистемы.ВходящиеДанные КАК ФункцииСистемыВходящиеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФункции КАК ВТФункции
	|		ПО ФункцииСистемыВходящиеДанные.Функция = ВТФункции.Функция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТВходящиеДанные.Функция КАК Функция,
	|	ВТВходящиеДанные.НомерСтроки КАК НомерСтроки,
	|	ВТВходящиеДанные.Комментарий КАК Комментарий,
	|	ВТВходящиеДанные.Ссылка КАК Ссылка,
	|	ВТВходящиеДанные.Наименование КАК Наименование,
	|	ВТВходящиеДанные.ПолныйКод КАК ПолныйКод,
	|	ВТВходящиеДанные.Результат КАК Результат,
	|	ВТВходящиеДанные.ТипФункции КАК ТипФункции
	|ПОМЕСТИТЬ ВТДанныеВходов
	|ИЗ
	|	ВТВходящиеДанные КАК ВТВходящиеДанные
	|ГДЕ
	|	ВТВходящиеДанные.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыВходящихСвязейФункций.Вход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТВходящиеДанные.Функция КАК Функция,
	|	ВТВходящиеДанные.НомерСтроки КАК НомерСтроки,
	|	ВТВходящиеДанные.Комментарий КАК Комментарий,
	|	ВТВходящиеДанные.Ссылка КАК Ссылка,
	|	ВТВходящиеДанные.Наименование КАК Наименование,
	|	ВТВходящиеДанные.ПолныйКод КАК ПолныйКод,
	|	ВТВходящиеДанные.Результат КАК Результат,
	|	ВТВходящиеДанные.ТипФункции КАК ТипФункции
	|ПОМЕСТИТЬ ВТДанныеУправления
	|ИЗ
	|	ВТВходящиеДанные КАК ВТВходящиеДанные
	|ГДЕ
	|	ВТВходящиеДанные.ВидСвязи = ЗНАЧЕНИЕ(Перечисление.ВидыВходящихСвязейФункций.Управление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФункцииСистемыИсполнители.Ссылка КАК Функция,
	|	ФункцииСистемыИсполнители.Исполнитель КАК Ссылка,
	|	ФункцииСистемыИсполнители.Исполнитель.Наименование КАК Наименование,
	|	ФункцииСистемыИсполнители.НомерСтроки КАК НомерСтроки,
	|	ФункцииСистемыИсполнители.Комментарий КАК Комментарий
	|ИЗ
	|	Справочник.ФункцииСистемы.Исполнители КАК ФункцииСистемыИсполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФункции КАК ВТФункции
	|		ПО ФункцииСистемыИсполнители.Ссылка = ВТФункции.Функция"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеИсполнителей = Запрос.Выполнить().Выгрузить();
	
	ДанныеФункций = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТФункции"].ПолучитьДанные().Выгрузить();
	ДанныеВходов = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТДанныеВходов"].ПолучитьДанные().Выгрузить();
	ДанныеУправления = Запрос.МенеджерВременныхТаблиц.Таблицы["ВТДанныеУправления"].ПолучитьДанные().Выгрузить();
	
	СформированныеСхемы = Новый Соответствие;
	
	Для Каждого СтрокаФункции из ДанныеФункций Цикл
		
		РеквизитыФункции = Новый Структура;
		РеквизитыФункции.Вставить("Ссылка",СтрокаФункции.Функция);
		РеквизитыФункции.Вставить("Родитель", СтрокаФункции.Родитель);
		РеквизитыФункции.Вставить("Наименование", СтрокаФункции.Наименование);
		РеквизитыФункции.Вставить("ПолныйКод", СтрокаФункции.ПолныйКод);
		
		Если НЕ СтрокаФункции.ЭтоГруппа Тогда
			РеквизитыФункции.Вставить("Результат", СтрокаФункции.Результат);
			РеквизитыФункции.Вставить("ТипФункции", СтрокаФункции.ТИпФункции);
			РеквизитыФункции.Вставить("Описание", СтрокаФункции.Описание);
		КонецЕсли;
		
		Входы = Новый Массив;
		Управление = Новый Массив;
		Исполнители = Новый Массив;
		
		СтруктураОтбора = Новый Структура("Функция", СтрокаФункции.Функция);
		
		СтрокиВходов = ДанныеВходов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаВхода из СтрокиВходов Цикл
			Входы.Добавить(ДанныеРеквизитов(СтрокаВхода));
		КонецЦикла;
		
		СтрокиУправления = ДанныеУправления.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаУправления из СтрокиУправления Цикл
			Управление.Добавить(ДанныеРеквизитов(СтрокаУправления));
		КонецЦикла;
		
		СтрокиИсполнителей = ДанныеИсполнителей.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаИсполнителя из СтрокиИсполнителей Цикл
			
			ДанныеРеквизитов = Новый Структура;
			ДанныеРеквизитов.Вставить("Ссылка", СтрокаИсполнителя.Ссылка);
			ДанныеРеквизитов.Вставить("Наименование", СтрокаИсполнителя.Наименование);
			ДанныеРеквизитов.Вставить("НомерСтроки", СтрокаИсполнителя.НомерСтроки);
			ДанныеРеквизитов.Вставить("Комментарий", СтрокаИсполнителя.Комментарий);
			
			Исполнители.Добавить(ДанныеРеквизитов);
			
		КонецЦикла;
		
		ГиперссылкиСвязей = Новый Структура;
		
		Если СтрокаФункции.ЭтоГруппа Тогда
			СхемаФункции = ГрафическиеСхемыСервер.СхемаНеконечнойФункции(РеквизитыФункции, ГиперссылкиСвязей);
		Иначе
			СхемаФункции = ГрафическиеСхемыСервер.СхемаКонечнойФункции(РеквизитыФункции, ДанныеВходов,
	                                                           ДанныеУправления, ДанныеИсполнителей, ГиперссылкиСвязей);
		КонецЕсли;
		
		СформированныеСхемы.Вставить(СтрокаФункции.Функция, СхемаФункции);
		
	КонецЦикла;
	
	Возврат СформированныеСхемы;
	
КонецФункции

Функция ДанныеРеквизитов(СтрокаДанных)
	
	ДанныеРеквизитов = Новый Структура;
	
	ДанныеРеквизитов.Вставить("Ссылка", СтрокаДанных.Ссылка);
	ДанныеРеквизитов.Вставить("Наименование", СтрокаДанных.Наименование);
	ДанныеРеквизитов.Вставить("ПолныйКод", СтрокаДанных.ПолныйКод);
	ДанныеРеквизитов.Вставить("Результат", СтрокаДанных.Результат);
	ДанныеРеквизитов.Вставить("ТипФункции", СтрокаДанных.ТипФункции);
	ДанныеРеквизитов.Вставить("НомерСтроки", СтрокаДанных.НомерСтроки);
	ДанныеРеквизитов.Вставить("Комментарий", СтрокаДанных.Комментарий);
	
	Возврат ДанныеРеквизитов;
	
КонецФункции

#КонецОбласти

#КонецЕсли