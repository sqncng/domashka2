#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
	КонецЕсли;
	
	Если Параметры.ФормаОткрытаИзСхемы Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСхема;
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НастройкиСервер.УстановитьТекущуюСтраницу("Справочник.ФункцииСистемы.ФормаЭлемента",
	                                              Элементы.ГруппаСтраницы,
											      "ТекущаяСтраницаФормыФункцииСистемы");
	КонецЕсли;
	
	УстановитьШрифтФорматированногоТекста();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Описание, РедактируемыйОбъект.ХранилищеОписания);
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Описание, ТекущийОбъект.ХранилищеОписания);
	ТекущийОбъект.Описание = Описание.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ЗаписатьДанныеСогласующихРесурсыПредмета(ЭтотОбъект, Объект.Ссылка);
	// Конец ЗадачиПроцессов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ФункцииСистемы", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеИнформацииОбИспользованииИсточника" И Параметр= Объект.Ссылка Тогда
		ПриИзмененииДанныхОбИспользованииИсточникаНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если Объект.Владелец <> Проект Тогда
		ПриИзмененииВладельцаНаСервере();
		Проект = Объект.Владелец;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СформироватьСхемуФункции();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаФункцииВыбор(Элемент)
	
	Если Элемент.ТекущийЭлемент <> Неопределено Тогда
		
		СоответствиеСсылок = Новый Соответствие;
		Для Каждого СтрокаТаблицы из ПризнакиГиперссылок Цикл
			СоответствиеСсылок.Вставить(СтрокаТаблицы.Гиперссылка, СтрокаТаблицы.ЭтоГруппа);
		КонецЦикла;
		
		ГрафическиеСхемыКлиент.ОткрытьГиперссылкуИзСхемыФункции(Элемент.ТекущийЭлемент, ГиперссылкиСвязей,
		                                                        СоответствиеСсылок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаетсяВИнтерфейсеПриИзменении(Элемент)
	
	Если НЕ Объект.ОтображаетсяВИнтерфейсе Тогда
		
		Если  ЗначениеЗаполнено(Объект.НаименованиеВИнтерфейсе) Тогда
			Объект.НаименованиеВИнтерфейсе = "";
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(Объект.Подсистема) Тогда
			Объект.Подсистема = ПредопределенноеЗначение("Справочник.Подсистемы.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьОтображенияВИнтерфейсе();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипФункцииПриИзменении(Элемент)
	
	ПриИзмененииТипаФункции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИсточникаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ОбъектИсточник) Тогда
		ПоказатьЗначение(,ОбъектИсточник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьВходящиеДанные(Команда)
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Владелец);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ФункцияПриемник", Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ВыборСвязейФункции");
	ПараметрыФормы.Вставить("ВыборСвязейФункции", Истина);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ФункцииСистемы.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.ВходящиеДанные,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителей(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.Владелец);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ПрофилиПользователей.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.Исполнители,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОбъектыМетаданных(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	Если Объект.ТипФункции = ПредопределенноеЗначение("Перечисление.ТипыФункций.Функция") Тогда
		ПараметрыФормы.Вставить("ОтбиратьИсходящиеМетаданныеФункции", Истина);
	ИначеЕсли Объект.ТипФункции = ПредопределенноеЗначение("Перечисление.ТипыФункций.УчетныйМеханизм") Тогда
		ПараметрыФормы.Вставить("ОтбиратьМетаданныеУчетныхМеханизмов", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ОбъектыМетаданных.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.ИсходящиеОбъектыМетаданных,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОтчетыСервисныеОбъекты(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	Если Объект.ТипФункции = ПредопределенноеЗначение("Перечисление.ТипыФункций.Отчет") Тогда
		ПараметрыФормы.Вставить("ОтбиратьОтчетыИСервисныеОбъекты", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ОбъектыМетаданных.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.ОтчетыСервисныеОбъекты,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПотребителей(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = НСтр("ru='Функция еще не записана. Записать?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьПотребителяЗавершениеЗаписи", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьДобавлениеПотребителя();
	КонецЕсли;
				 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПотребителяЗавершениеЗаписи(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
	Иначе
		ОбъектЗаписан = Записать();
		
		Если ОбъектЗаписан Тогда
        	ВыполнитьДобавлениеПотребителя();
		КонецЕсли;
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Родитель(Команда)
	
	Если НЕ Объект.Родитель.Пустая() Тогда
		ПараметрыФормы = Новый Структура("Ключ", Объект.Родитель);
		ОткрытьФорму("Справочник.ФункцииСистемы.ФормаГруппы", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСхему(Команда)
	
	СформироватьСхемуФункции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоИспользованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Приемник", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Источник", ОбъектИсточник);
	ПараметрыОткрытия.Вставить("ПравилоИспользования", ПравилоИспользования);
	
	ОткрытьФорму("ОбщаяФорма.ИнформацияОбИспользованииОбъектаИсточника", ПараметрыОткрытия);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОбработчикиСобытийТаблицыВходящиеДанные

&НаКлиенте
Процедура ВходящиеДанныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для Каждого Значение из ВыбранноеЗначение Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Функция", Значение);
			
			МассивСтрок = Объект.ВходящиеДанные.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСтрок.Количество()=0 Тогда
				НоваяСтрока = Объект.ВходящиеДанные.Добавить();
				НоваяСтрока.Функция = Значение;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Функция", ВыбранноеЗначение);
		
		МассивСтрок = Объект.ВходящиеДанные.НайтиСтроки(СтруктураПоиска);
			
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = Объект.ВходящиеДанные.Добавить();
			НоваяСтрока.Функция = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьСхемуФункции();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеДанныеПослеУдаления(Элемент)
	
	СформироватьСхемуФункции();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИсходящиеДанные

&НаКлиенте
Процедура ИсходящиеДанныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.Ссылка);
	
	ОткрытьФорму("Справочник.ФункцииСистемы.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИсполнители

&НаКлиенте
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого Значение из ВыбранноеЗначение Цикл
		
		СтруктураПоиска = Новый Структура("Исполнитель", Значение);
		МассивСтрок = Объект.Исполнители.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = Объект.Исполнители.Добавить();
			НоваяСтрока.Исполнитель = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьСхемуФункции();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьСхемуФункции();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПослеУдаления(Элемент)
	
	СформироватьСхемуФункции();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИсходящиеОбъектыМетаданных

&НаКлиенте
Процедура ИсходящиеОбъектыМетаданныхОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.Владелец);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Если Объект.ТипФункции = ПредопределенноеЗначение("Перечисление.ТипыФункций.Функция") Тогда
		ПараметрыФормы.Вставить("ОтбиратьИсходящиеМетаданныеФункции", Истина);
	ИначеЕсли Объект.ТипФункции = ПредопределенноеЗначение("Перечисление.ТипыФункций.УчетныйМеханизм") Тогда
		ПараметрыФормы.Вставить("ОтбиратьМетаданныеУчетныхМеханизмов", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ОбъектыМетаданных.ФормаВыбора", ПараметрыФормы, Элемент,,,, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеОбъектыМетаданныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого Значение из ВыбранноеЗначение Цикл
		
		СтруктураПоиска = Новый Структура("ОбъектМетаданных", Значение);
		МассивСтрок = Объект.ИсходящиеОбъектыМетаданных.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = Объект.ИсходящиеОбъектыМетаданных.Добавить();
			НоваяСтрока.ОбъектМетаданных = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОтчетыСервисныеОбъекты

&НаКлиенте
Процедура ОтчетыСервисныеОбъектыОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.Владелец);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	Если Объект.ТипФункции = ПредопределенноеЗначение("Перечисление.ТипыФункций.Отчет") Тогда
		ПараметрыФормы.Вставить("ОтбиратьОтчетыИСервисныеОбъекты", Истина);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ОбъектыМетаданных.ФормаВыбора", ПараметрыФормы, Элемент,,,, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыСервисныеОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого Значение из ВыбранноеЗначение Цикл
		
		СтруктураПоиска = Новый Структура("ОбъектМетаданных", Значение);
		МассивСтрок = Объект.ОтчетыСервисныеОбъекты.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = Объект.ОтчетыСервисныеОбъекты.Добавить();
			НоваяСтрока.ОбъектМетаданных = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Проект = Объект.Владелец;
	
	ИсходящиеДанные.Параметры.УстановитьЗначениеПараметра("Ссылка", Объект.Ссылка);
	
	ДоступноИзменениеФункции = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеФункцийСистемы", Объект.Владелец);
		
	ДоступноИзменениеИнформацииПоИспользованиюОбъектов =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеИнформацииОбИспользованииОбъектов", Объект.Владелец);
		
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
		
	РассчитатьКоличествоПотребителей();
	СформироватьСхемуФункции();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДанныеОбИспользованииОбъектаИсточника();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектИсточник)
		И ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
		ТребуетсяБлокировкаПоИспользованиюИсточника = Истина;
	Иначе
		ТребуетсяБлокировкаПоИспользованиюИсточника = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьОтображенияВИнтерфейсе();
	УстановитьВидимостьСтраницИсходящихОбъектов();
	УстановитьВидимостьДанныхОбИспользованииИсточника();
	УстановитьДоступностьИзмененияПравилаИспользования();
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ОтобразитьИнформациюПоСогласующимВФорме(ЭтотОбъект, Объект.Ссылка, "СтраницаОписание");
	// Конец ЗадачиПроцессов
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначения()
	
	НастройкиСервер.СохранитьТекущуюСтраницу("Справочник.ФункцииСистемы.ФормаЭлемента",
	                                         Элементы.ГруппаСтраницы,
											 "ТекущаяСтраницаФормыФункцииСистемы");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВладельцаНаСервере()
	
	Объект.ВходящиеДанные.Очистить();
	Объект.Исполнители.Очистить();
	Объект.ИсходящиеОбъектыМетаданных.Очистить();
	
	ДоступноИзменениеФункции = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеФункцийСистемы", Объект.Владелец);
		
	ДоступноИзменениеИнформацииПоИспользованиюОбъектов =
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеИнформацииОбИспользованииОбъектов", Объект.Владелец);
	
	УстановитьДоступностьИзмененияПравилаИспользования();
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ФункцииСистемы.ХранилищеОписания КАК ХранилищеОписания
	|ИЗ
	|	Справочник.ФункцииСистемы КАК ФункцииСистемы
	|ГДЕ
	|	ФункцииСистемы.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", КопируемыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОписаниеИзХранилища = Выборка.ХранилищеОписания.Получить();
		Если ТипЗнч(ОписаниеИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Описание = ОписаниеИзХранилища;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШрифтФорматированногоТекста()

	ШрифтФорматированногоТекста = РаботаСФорматированнымДокументом.ШрифтФорматированногоТекста();
	Элементы.Описание.Шрифт = ШрифтФорматированногоТекста;

КонецПроцедуры

&НаСервере
Процедура СформироватьСхемуФункции()
	
	РеквизитыФункции = Новый Структура;
	РеквизитыФункции.Вставить("Ссылка",       Объект.Ссылка);
	РеквизитыФункции.Вставить("Родитель",     Объект.Родитель);
	РеквизитыФункции.Вставить("ПолныйКод",    Объект.ПолныйКод);
	РеквизитыФункции.Вставить("Наименование", Объект.Наименование);
	РеквизитыФункции.Вставить("Результат",    Объект.Результат);
	РеквизитыФункции.Вставить("ТипФункции",   Объект.ТипФункции);
	РеквизитыФункции.Вставить("Описание",     Лев(Описание.ПолучитьТекст(),1000));
	
	ВходящиеДанные   = Новый Массив;
	ДанныеУправления = Новый Массив;
	Исполнители      = Новый Массив;
	
	ПодготовитьДанныеВходовИУправления(ВходящиеДанные, ДанныеУправления);
	ПодготовитьДанныеИсполнителей(Исполнители);
	
	СхемаФункции = ГрафическиеСхемыСервер.СхемаКонечнойФункции(РеквизитыФункции, ВходящиеДанные,
	                                                           ДанныеУправления, Исполнители, ГиперссылкиСвязей);
															   
	МассивСсылок = Новый Массив;
	ПризнакиГиперссылок.Очистить();
	
	Если ТипЗнч(ГиперссылкиСвязей) = Тип("Структура") Тогда
		Для Каждого ЭлементСтруктуры из ГиперссылкиСвязей Цикл
			Если (ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СправочникСсылка.ФункцииСистемы")
				ИЛИ ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СправочникСсылка.ПрофилиПользователей"))
				И ЗначениеЗаполнено(ЭлементСтруктуры.Значение) Тогда
				
				МассивСсылок.Добавить(ЭлементСтруктуры.Значение);
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСсылок, "ЭтоГруппа");
	
	Для Каждого ЭлементСоответствия из ЗначенияРеквизитов Цикл
		СтрокаТаблицы = ПризнакиГиперссылок.Добавить();
		СтрокаТаблицы.Гиперссылка = ЭлементСоответствия.Ключ;
		СтрокаТаблицы.ЭтоГруппа = ЭлементСоответствия.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыФункций()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкиФункций = Новый Массив;
	Для Каждого СтрокаТЧ из Объект.ВходящиеДанные Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Функция) Тогда
			СсылкиФункций.Добавить(СтрокаТЧ.Функция);
		КонецЕсли;
	КонецЦикла;
	
	НужныеРеквизиты = "Ссылка,Наименование,ПолныйКод,Результат,ТипФункции";;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СсылкиФункций, НужныеРеквизиты);
	
КонецФункции

&НаСервере
Функция РеквизитыИсполнителей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкиПрофилей = Новый Массив;
	Для Каждого СтрокаТЧ из Объект.Исполнители Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Исполнитель) Тогда
			СсылкиПрофилей.Добавить(СтрокаТЧ.Исполнитель);
		КонецЕсли;
	КонецЦикла;
	
	НужныеРеквизиты = "Ссылка,Наименование";;
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СсылкиПрофилей, НужныеРеквизиты);
	
КонецФункции

&НаСервере
Функция СтруктураРеквизитовФункций()
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка", Справочники.ФункцииСистемы.ПустаяСсылка());
	Структура.Вставить("Наименование", "");
	Структура.Вставить("ПолныйКод", "");
	Структура.Вставить("Результат", "");
	Структура.Вставить("ТипФункции", Перечисления.ТипыФункций.ПустаяСсылка());
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Функция СтруктураРеквизитовИсполнителей()
	
	Структура = Новый Структура;
	Структура.Вставить("Ссылка", Справочники.ПрофилиПользователей.ПустаяСсылка());
	Структура.Вставить("Наименование", "");
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ПодготовитьДанныеВходовИУправления(ВходящиеДанные, данныеУправления)
	
	РеквизитыФункций = РеквизитыФункций();
	
	Для Каждого СтрокаТЧ из Объект.ВходящиеДанные Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Функция) Тогда
			СтруктураРеквизитов = РеквизитыФункций[СтрокаТЧ.Функция];
		Иначе
			СтруктураРеквизитов = СтруктураРеквизитовФункций();
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("НомерСтроки", СтрокаТЧ.НомерСтроки);
		СтруктураРеквизитов.Вставить("Комментарий", СтрокаТЧ.Комментарий);
		
		Если СтрокаТЧ.ВидСвязи = Перечисления.ВидыВходящихСвязейФункций.Вход Тогда
			ВходящиеДанные.Добавить(СтруктураРеквизитов);
		ИначеЕсли СтрокаТЧ.ВидСвязи = Перечисления.ВидыВходящихСвязейФункций.Управление Тогда
			ДанныеУправления.Добавить(СтруктураРеквизитов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеИсполнителей(Исполнители)
	
	РеквизитыИсполнителей = РеквизитыИсполнителей();
	
	Для Каждого СтрокаТЧ из Объект.Исполнители Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Исполнитель) Тогда
			СтруктураРеквизитов = РеквизитыИсполнителей[СтрокаТЧ.Исполнитель];
		Иначе
			СтруктураРеквизитов = СтруктураРеквизитовИсполнителей();
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("НомерСтроки", СтрокаТЧ.НомерСтроки);
		СтруктураРеквизитов.Вставить("Комментарий", СтрокаТЧ.Комментарий);
		
		Исполнители.Добавить(СтруктураРеквизитов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПотребителяЗавершениеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеДобавленияПотребителяСервер();	
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияПотребителяСервер()
	
	Элементы.ИсходящиеДанные.Обновить();
	РассчитатьКОличествоПотребителей();
	СформироватьСхемуФункции();
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьДобавлениеПотребителя()
	
	СтруктураОтбора = Новый Структура("Владелец", Объект.Владелец);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПотребителяЗавершениеВыбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("ПотребляемаяФункция", Объект.Ссылка);
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ФункцииСистемы.Форма.ФормаВыбораПотребителя",
				 ПараметрыФормы,
				 Элементы.ИсходящиеДанные,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаСервере
Процедура РассчитатьКоличествоПотребителей()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		КоличествоПотребителей = 0;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ФункцииСистемыВходящиеДанные.Ссылка) КАК КоличествоПотребителей
	|ИЗ
	|	Справочник.ФункцииСистемы.ВходящиеДанные КАК ФункцииСистемыВходящиеДанные
	|ГДЕ
	|	ФункцииСистемыВходящиеДанные.Функция = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоПотребителей = Выборка.КоличествоПотребителей;
	Иначе
		КоличествоПотребителей = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьОтображенияВИнтерфейсе()
	
	Элементы.НаименованиеВИнтерфейсе.Доступность = Объект.ОтображаетсяВИнтерфейсе;
	Элементы.Подсистема.Доступность = Объект.ОтображаетсяВИнтерфейсе;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницИсходящихОбъектов()
	
	Элементы.СтраницаИсходящиеОбъектыМетаданных.Видимость =
	    (Объект.ТипФункции = Перечисления.ТипыФункций.Функция
	    ИЛИ Объект.ТипФункции = Перечисления.ТипыФункций.УчетныйМеханизм);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаФункции()
	
	Если (Объект.ТипФункции = Перечисления.ТипыФункций.Функция
	    ИЛИ Объект.ТипФункции = Перечисления.ТипыФункций.УчетныйМеханизм)
		И Объект.ОтчетыСервисныеОбъекты.Количество()>0 Тогда
		
		Объект.ОтчетыСервисныеОбъекты.Очистить();
	КонецЕсли;
	
	Если (Объект.ТипФункции = Перечисления.ТипыФункций.Отчет
		И Объект.ИсходящиеОбъектыМетаданных.Количество()>0) Тогда
		
		Объект.ИсходящиеОбъектыМетаданных.Очистить();
	КонецЕсли;
		
	УстановитьВидимостьСтраницИсходящихОбъектов();
	
КонецПроцедуры

// ЗадачиПроцессов

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиСогласующиеРесурс(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗадачиПроцессовКлиент.ОбработкаНавигационнойСсылкиСогласующиеРесурс(ЭтотОбъект,
	                                                                    Элемент,
	                                                                    НавигационнаяСсылкаФорматированнойСтроки,
	                                                                    СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработатьИзменениеСогласующихРесурсыПоПредмету()
	
	ЗадачиПроцессов.ОбработатьИзменениеСогласующихРесурсыПоПредмету(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СогласующийРесурсПриИзменении()

	ЗадачиПроцессовКлиент.ОтразитьИзменениеЕдинственногоСогласующегоРесурса(ЭтотОбъект);

КонецПроцедуры

// Конец ЗадачиПроцессов

&НаСервере
Процедура ЗаполнитьДанныеОбИспользованииОбъектаИсточника()
	
	ДанныеОбИспользовании = РегистрыСведений.ИспользованиеОбъектов.ДанныеОбИспользованииОбъектаИсточника(Объект.Ссылка);
	
	ОбъектИсточник = ДанныеОбИспользовании.Источник;
	ПравилоИспользования = ДанныеОбИспользовании.ПравилоИспользования;
	
	Элементы.ПредставлениеИсточника.Заголовок = ДанныеОбИспользовании.НаименованиеИсточника;
	УстановитьКартинкуИспользованияИсточника();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДанныхОбИспользованииИсточника()

	Элементы.ГруппаПравилоИспользования.Видимость = ЗначениеЗаполнено(ПравилоИспользования);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДанныхОбИспользованииИсточникаНаСервере()
	
	ЗаполнитьДанныеОбИспользованииОбъектаИсточника();
	УстановитьВидимостьДанныхОбИспользованииИсточника();
	
	Если ЗначениеЗаполнено(ОбъектИсточник)
		И ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.БезИзменений Тогда
		ТребуетсяБлокировкаПоИспользованиюИсточника = Истина;
	Иначе
		ТребуетсяБлокировкаПоИспользованиюИсточника = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуИспользованияИсточника()
	
	Если ПравилоИспользования = Перечисления.ПравилаИспользованияОбъектов.СИзменениями Тогда
		Элементы.КартинкаПравилоИспользованияИсточника.Картинка = БиблиотекаКартинок.ОбъектИспользуетсяСИзменениями;
	Иначе
		Элементы.КартинкаПравилоИспользованияИсточника.Картинка = БиблиотекаКартинок.ОбъектИспользуетсяБезИзменений;
	КонецЕсли;
	
КОнецПроцедуры

&НаСервере
Процедура УстановитьДоступностьИзмененияПравилаИспользования()
	
	Элементы.ПравилоИспользования.Гиперссылка = ДоступноИзменениеИнформацииПоИспользованиюОбъектов;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ИспользуемыеЭлементы = ИспользуемыеПоляОбъектаИсточника();
	
	Для Каждого ИспользуемыйЭлемент из ИспользуемыеЭлементы Цикл
		
		Если НЕ Доступность ИЛИ ТолькоПросмотр ИЛИ НЕ ДоступноИзменениеФункции Тогда
			ИспользуемыйЭлемент.ТолькоПросмотр = Истина;
			Продолжить;
		КонецЕсли;
		
		ИспользуемыйЭлемент.ТолькоПросмотр = ТребуетсяБлокировкаПоИспользованиюИсточника;
		
	КонецЦикла;
	
	Если НЕ Доступность ИЛИ ТолькоПросмотр ИЛИ НЕ ДоступноИзменениеФункции
		ИЛИ ТребуетсяБлокировкаПоИспользованиюИсточника Тогда
		ДоступностьКоманд = Ложь;
	Иначе
		ДоступностьКоманд = Истина;
	КонецЕсли;
	
	Элементы.ВходящиеДанныеПодобратьВходящиеДанные.Доступность = ДоступностьКоманд;
	Элементы.ИсходящиеДанныеДобавитьПотребителя.Доступность = ДоступностьКоманд;
	Элементы.ИсполнителиПодобратьИсполнителей.Доступность = ДоступностьКоманд;
	Элементы.ИсходящиеОбъектыМетаданныхПодобратьОбъектыМетаданных.Доступность = ДоступностьКоманд;
	Элементы.ПодобратьОтчетыСервисныеОбъекты.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

&НаСервере
Функция ИспользуемыеПоляОбъектаИсточника()
	
	Поля = Новый Массив;
	
	Поля.Добавить(Элементы.Наименование);
	Поля.Добавить(Элементы.Код);
	Поля.Добавить(Элементы.Описание);
	Поля.Добавить(Элементы.ОтображаетсяВИнтерфейсе);
	Поля.Добавить(Элементы.НаименованиеВИнтерфейсе);
	Поля.Добавить(Элементы.Результат);
	Поля.Добавить(Элементы.ТипФункции);
	Поля.Добавить(Элементы.ВходящиеДанные);
	Поля.Добавить(Элементы.Исполнители);
	Поля.Добавить(Элементы.ИсходящиеОбъектыМетаданных);
	Поля.Добавить(Элементы.ОтчетыСервисныеОбъекты);
	
	Возврат Поля;
	
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти