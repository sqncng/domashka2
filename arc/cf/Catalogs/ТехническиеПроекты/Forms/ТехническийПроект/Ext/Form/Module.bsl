
&НаКлиенте
Перем ДанныеФормыРазблокированы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НеопределеннаяДлительность = 99;
	
	ЦветОсобогоТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		ПрименитьШаблонОписания();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	Иначе
		ЗаполнитьДополнительнуюИнформациюКлючевыхОпераций();
	КонецЕсли;
	
	УстановитьТекущиеСтраницы();
	УстановитьДоступностьКомандБуфераОбмена();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.КомандыФормы);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаОтчеты;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	ПослеДобавленияПодключаемыхОтчетов();
	
	УстановитьДоступностьЭлементов();
	
	КаталогБазыРазработки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Объект.Ссылка, "КаталогБазыРазработки");
	ИмяПользователяБазыРазработки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Объект.Ссылка, "ИмяПользователяБазыРазработки");
	ПарольПользователяБазыРазработки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Объект.Ссылка, "ПарольПользователяБазыРазработки");
	
	УстановитьШрифтФорматированногоТекста();
	
	Элементы.ГруппаСценарииПользователей.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьТестирование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	УстановитьПризнакСтрокаЗаписана();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Описание, РедактируемыйОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Цели, РедактируемыйОбъект.ХранилищеЦелей);
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Концепция, РедактируемыйОбъект.ХранилищеКонцепции);
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Заметки, РедактируемыйОбъект.ХранилищеЗаметок);
	
	УстановитьДоступностьЭлементов();
	
	// ОбъектыНаКонтроле
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаОбъектыНаКонтроле");
	// Конец ОбъектыНаКонтроле
	
	// Приоритеты
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаПриоритеты");
	// Конец Приоритеты
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАктивизации(АктивныйОбъект, Источник)
	
	Если ДанныеФормыРазблокированы Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ДанныеФормыРазблокированы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("РазблокироватьДанныеФормы", 5 * 60, Истина);
	
	Оповестить("ЗаписанТехническийПроект", Объект.Ссылка, ЭтаФорма);
	
	Если Объект.ИдеиИОшибки.Количество()>0 Тогда
		
		Массив = Новый Массив;
		Для Каждого Идея из Объект.ИдеиИОшибки Цикл
			Массив.Добавить(Идея);
		КонецЦикла;
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Ссылка", Объект.Ссылка);
		СтруктураОповещения.Вставить("Идеи", Массив);
		
		Оповестить("ЗаписанТехническийПроектСИдеями", СтруктураОповещения, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Описание, ТекущийОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Цели, ТекущийОбъект.ХранилищеЦелей);
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Концепция, ТекущийОбъект.ХранилищеКонцепции);
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Заметки, ТекущийОбъект.ХранилищеЗаметок);
	
	ТекущийОбъект.ЦелиПроекта = Цели.ПолучитьТекст();
	ТекущийОбъект.КонцепцияПроекта = Концепция.ПолучитьТекст();
	ТекущийОбъект.Заметки = Заметки.ПолучитьТекст();
	
	ПеренестиРазделыПроектаВОбъект(ТекущийОбъект);
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
		Объект.РазделыПроекта.Количество());
		
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыЗаписи.Вставить("НовыйОбъект", Истина);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьВФорме", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ЗаписатьДанныеСогласующихРесурсыПредмета(ЭтотОбъект, Объект.Ссылка);
	// Конец ЗадачиПроцессов
	
	ЗаполнитьКэшируемыеЗначения();
	УстановитьПризнакСтрокаЗаписана();
	
	УчетВремени.НастроитьКомандуХронометража(ЭтаФорма);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Приоритеты
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеЭлемента(ЭтотОбъект, Объект.Ссылка, "ФормаГруппаПриоритеты");
	// Конец Приоритеты
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	МассивОбновляемыхПолей = Новый Массив;
	
	Если ИмяСобытия = "СозданиеХранилищаТехПроектаЗавершено" И Параметр.ТехническийПроект = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("КаталогХранилищаДляЗагрузкиМетаданных") 
			И КаталогХранилищаДляЗагрузкиМетаданных <> Параметр.КаталогХранилищаДляЗагрузкиМетаданных Тогда
			Если ЗначениеЗаполнено(Объект.Ветка) И ТипВетки = ПредопределенноеЗначение("Перечисление.ТипыВеток.ВеткаТехническогоПроекта") Тогда
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбновленияИмениВетки", 
													  ЭтаФорма, 
													  Новый Структура("Имя", Параметр.КаталогХранилищаДляЗагрузкиМетаданных));
				ПоказатьВопрос(Оповещение, НСтр("ru='Обновить адрес хранилища в ветке?'"), РежимДиалогаВопрос.ДаНет);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаСозданияВетки",
													  ЭтаФорма, 
													  Новый Структура("Имя", Параметр.КаталогХранилищаДляЗагрузкиМетаданных));

				ПоказатьВопрос(Оповещение, НСтр("ru='Создать ветку для технического проекта?'"), РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметр);
		
		Модифицированность = Истина;

	КонецЕсли;
	
	Если ИмяСобытия = "ОшибкаЗарегистрирована"
		ИЛИ ИмяСобытия = "ОшибкаПризнана"
		ИЛИ ИмяСобытия = "ОшибкаИсправлена"
		ИЛИ ИмяСобытия = "ОшибкаПроверена"
		ИЛИ ИмяСобытия = "ОшибкаЗакрыта"
		ИЛИ ИмяСобытия = "Запись_Ошибки" Тогда
		
		ОбработатьОповещениеОбИзмененииОшибки(ИмяСобытия, Параметр, МассивОбновляемыхПолей);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИдеяИзменено" Тогда
		ОбработатьОповещениеОбИзмененииИдеи(ИмяСобытия, Параметр, МассивОбновляемыхПолей)
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_РезультатыПроверкиОбъектов"
		ИЛИ ИмяСобытия = "ПрименениеПравилПроверки" Тогда
		
		ЗаполнитьКоличествоИПоказатьНаличиеОшибок();
		
		МассивОбновляемыхПолей.Добавить(Элементы.ПроцессыКоличествоОшибок);
		МассивОбновляемыхПолей.Добавить(Элементы.ФункцииКоличествоОшибок);
		МассивОбновляемыхПолей.Добавить(Элементы.ПрофилиПользователейКоличествоОшибок);
		МассивОбновляемыхПолей.Добавить(Элементы.РазделыПроектаКоличествоОшибок);
		
		Элементы.РезультатыПроверки.Обновить();
		
	КонецЕсли; 
	
	Если ИмяСобытия = "Запись_ОбработчикиОбновленияИнформационнойБазы"
		Или ИмяСобытия = "Запись_ПриоритетыВыполненияОбработчиковОбновления" Тогда
		
		Обработчики = Новый Массив;
		
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			Обработчики.Добавить(Параметр.Обработчик1);	
			Обработчики.Добавить(Параметр.Обработчик2);	
		ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы") Тогда
			Обработчики.Добавить(Параметр);	
		Иначе
			Обработчики = Неопределено;	
		КонецЕсли;
		
		ЗаполнитьКоличествоИПоказатьНаличиеОшибок(Обработчики);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
	КонецЕсли;
	
	Если ИмяСобытия = "ПереключенХронометраж" Тогда
		УчетВремениКлиентСервер.ОбработатьПереключениеХронометража(Параметр, ЭтаФорма, Объект.Ссылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьОтображениеДанных(МассивОбновляемыхПолей);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Файлы.Форма.ФормаВыбора"
	 И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Если Объект.ДополнительныйПубликуемыйФайл <> ВыбранноеЗначение Тогда
			Объект.ДополнительныйПубликуемыйФайл = ВыбранноеЗначение;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ПриИзмененииВладельцаСервер();
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы, 
		Объект.РазделыПроекта.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ПриИзмененииСтатусаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогДемонстрационнойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Каталог   = Объект.КаталогДемонстрационнойБазы;
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога демонстрационной базы'");
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Объект.КаталогДемонстрационнойБазы = ДиалогВыбораФайла.Каталог;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦелеваяЗадачаПриИзменении(Элемент)
	
	ПриИзмененииЦелевойЗадачиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ПроектныеРешения Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтраницаПроектныхРешений)
			И Элементы.Найти(ТекущаяСтраницаПроектныхРешений) <> Неопределено Тогда
			
			Элементы.ГруппаСтраницыПроектныхРешений.ТекущаяСтраница = Элементы[ТекущаяСтраницаПроектныхРешений];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПроектныхРешенийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущаяСтраницаПроектныхРешений = Элементы.ГруппаСтраницыПроектныхРешений.ТекущаяСтраница.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйПубликуемыйФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбораФайла = Новый Структура;
	ПараметрыВыбораФайла.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыбораФайла.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыВыбораФайла.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыВыбораФайла, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПубликуетсяПриИзменении(Элемент)
	
	УстановитьДоступностьРаботыСРеквизитамиПубликации(Элементы, Объект.Публикуется);
	
КонецПроцедуры

// ЗадачиПроцессов

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиСогласующиеРесурс(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗадачиПроцессовКлиент.ОбработкаНавигационнойСсылкиСогласующиеРесурс(ЭтотОбъект,
	                                                                    Элемент,
	                                                                    НавигационнаяСсылкаФорматированнойСтроки,
	                                                                    СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработатьИзменениеСогласующихРесурсыПоПредмету()
	
	ЗадачиПроцессов.ОбработатьИзменениеСогласующихРесурсыПоПредмету(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СогласующийРесурсПриИзменении()

	ЗадачиПроцессовКлиент.ОтразитьИзменениеЕдинственногоСогласующегоРесурса(ЭтотОбъект);

КонецПроцедуры

// Конец ЗадачиПроцессов

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыОбъекта(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

// Приоритеты
&НаКлиенте
Процедура Подключаемый_УстановитьПриоритет(Команда)
	
	ПриоритетыОчередиРаботыКлиент.ВыполнитьКомандуИзмененияПриоритетаИзФормыОбъекта(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец Приоритеты

&НаКлиенте
Процедура ВеткаПриИзменении(Элемент)
	
	ПриИзмененииВеткиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВеткаСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СоздатьИВыбратьВетку();

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТекущегоЭтапаПроцессаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "ПерейтиВПланЗанятостиТехПроект") Тогда
		
		ПланированиеКлиент.ОткрытьПланЗанятостиПоТехПроекту(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыУчастники

&НаКлиенте
Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого Значение из ВыбранноеЗначение Цикл
		НоваяСтрока = Объект.Участники.Добавить();
		НоваяСтрока.Участник = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("УчастникиКомментарийНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение, Элементы.УчастникиКомментарий.ТекстРедактирования, НСтр("ru='Текст комментария'"));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИдеиИОшибки

&НаКлиенте
Процедура ИдеиПриИзменении(Элемент)
	
	ЗаголовокИдеи = ОбновитьЗаголовокИдеи(Объект.ИдеиИОшибки, СтатусыРеализованныхИдей); 
	
КонецПроцедуры

&НаКлиенте
Процедура ИдеиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Идеи.ТекущиеДанные;
	Если Поле.Имя = "ИдеиИдея" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекущиеДанные.Идея) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Идея);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИдеиПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьКомандРаботыСОшибками();
	УстановитьДоступностьКомандРаботыСИдеями();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдеиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого Значение из ВыбранноеЗначение Цикл
			Если ТипЗнч(Значение) = Тип("СправочникСсылка.Идеи") 
				ИЛИ ТипЗнч(Значение) = Тип("СправочникСсылка.Ошибки") Тогда
				ДобавитьИдеяОшибку(Значение);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Идеи") 
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Ошибки")  Тогда
		ДобавитьИдеяОшибку(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдеиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ИндексКартинкиСтатусаИдеи = 99;
		Элемент.ТекущиеДанные.ИндексКартинкиИдеяОшибка = 99;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдеиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Идеи.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Реквизиты = РеквизитыИдеиОшибки(ТекущиеДанные.Идея);
		ТекущиеДанные.СтатусИдеи = Реквизиты.Статус;
		ТекущиеДанные.ОписаниеИдеи = Реквизиты.ОписаниеИдеи;
		ТекущиеДанные.ДоступноЗакрытие = Реквизиты.ДоступноЗакрытие;
		ТекущиеДанные.ИндексКартинкиСтатусаИдеи = ИндексКартинкиСтатусаИдеиОшибки(ТекущиеДанные.СтатусИдеи);
		
		Если ТипЗнч(ТекущиеДанные.Идея) = Тип("СправочникСсылка.Идеи") Тогда
			Элемент.ТекущиеДанные.ИндексКартинкиИдеяОшибка = 0;
		ИначеЕсли ТипЗнч(ТекущиеДанные.Идея) = Тип("СправочникСсылка.Ошибки") Тогда
			Элемент.ТекущиеДанные.ИндексКартинкиИдеяОшибка = 1;
		Иначе
			Элемент.ТекущиеДанные.ИндексКартинкиИдеяОшибка = 99;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьКомандРаботыСОшибками();
	УстановитьДоступностьКомандРаботыСИдеями();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдеиПередУдалением(Элемент, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Для нового объекта пользователь может удалять то, что добавил сам
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ДоступноУдалениеИдей =
		(Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТехническихПроектов.НеЗапланирован"))
		ИЛИ ДоступноУправлениеТехническимПроектом;
		
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Идея = Элемент.ТекущиеДанные.Идея;
	Иначе
		Возврат;
	КонецЕсли;
								
	Если НЕ ДоступноУдалениеИдей И Элемент.ТекущиеДанные.СтрокаЗаписана Тогда
	    ТекстСообщения = НСтр("ru='Текущему пользователю запрещено удаление идей и ошибок в техническом проекте'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
								
КонецПроцедуры

&НаКлиенте
Процедура ИдеиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.Идеи.ТекущиеДанные <> Неопределено Тогда
		Если НЕ ДоступноУправлениеТехническимПроектом И Элементы.Идеи.ТекущиеДанные.СтрокаЗаписана Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
 КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиСобытийТаблицыПроцессы

&НаКлиенте
Процедура ПроцессыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Процессы.ТекущиеДанные;
	ОбработатьВыборСтрокиПроектныхРешений("Процессы", ТекущиеДанные, Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцессыПослеУдаления(Элемент)
	
	УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	ПоказатьНаличиеОшибок(Объект, Элементы, БиблиотекаКартинок.Предупреждение);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроцессыГиперссылкаПриИзменении(Элемент)
	
	ОбновитьКоличествоОшибокНаСервере("Процессы");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейГиперссылкаПриИзменении(Элемент)
	
	ОбновитьКоличествоОшибокНаСервере("ПрофилиПользователей");
	
КонецПроцедуры

#Область ОбработчикиСобытийТаблицыФункции

&НаКлиенте
Процедура ФункцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Функции.ТекущиеДанные;
	ОбработатьВыборСтрокиПроектныхРешений("Функции", ТекущиеДанные, Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцииПослеУдаления(Элемент)
	
	УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	ПоказатьНаличиеОшибок(Объект, Элементы, БиблиотекаКартинок.Предупреждение);
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцииГиперссылкаПриИзменении(Элемент)
	
	ОбновитьКоличествоОшибокНаСервере("Функции");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПрофилиПользователей

&НаКлиенте
Процедура ПрофилиПользователейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПрофилиПользователей.ТекущиеДанные;
	ОбработатьВыборСтрокиПроектныхРешений("ПрофилиПользователей", ТекущиеДанные, Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПользователейПослеУдаления(Элемент)
	
	УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	ПоказатьНаличиеОшибок(Объект, Элементы, БиблиотекаКартинок.Предупреждение);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыРазделыПроекта

&НаКлиенте
Процедура РазделыПроектаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПроектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РазделыПроекта.ТекущиеДанные;
	ОбработатьВыборСтрокиПроектныхРешений("РазделыПроекта", ТекущиеДанные, Поле.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПроектаПослеУдаления(Элемент)
	
	УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	ПоказатьНаличиеОшибок(Объект, Элементы, БиблиотекаКартинок.Предупреждение);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПроектаУстановитьОтметки(Команда)
	
	Строки = РазделыПроекта.ПолучитьЭлементы();
	УстановитьОтметкиРекурсивно(Строки, Истина);
	
	ОбработатьУстановкуОтметокРазделовПроектаСервер();
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
		Объект.РазделыПроекта.Количество());
КонецПроцедуры

&НаКлиенте
Процедура РазделыПроектаСнятьОтметки(Команда)
	
	Строки = РазделыПроекта.ПолучитьЭлементы();
	УстановитьОтметкиРекурсивно(Строки, Ложь);
	
	ОбработатьУстановкуОтметокРазделовПроектаСервер();
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
		Объект.РазделыПроекта.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПроектаИспользованиеПриИзменении(Элемент)
	
	СтрокаДерева = РазделыПроекта.НайтиПоИдентификатору(Элементы.РазделыПроекта.ТекущаяСтрока);
	
	Если СтрокаДерева <> Неопределено Тогда
		
		Если СтрокаДерева.Использование = 2 Тогда
			СтрокаДерева.Использование = 0;
		КонецЕсли;
		
		УстановитьОтметкиРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокаДерева.Использование);
		УстановитьОтметкиРодителейРекурсивно(СтрокаДерева);
		
	КонецЕсли;
	
	ПриИзмененииОтметкиРазделаСервер();
	
	Если Не СтрокаДерева.Использование Тогда
		СтрокаДерева.КоличествоОшибок = 0;
	КонецЕсли;
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
		Объект.РазделыПроекта.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыОбработчикиОбновления

&НаКлиенте
Процедура ОбработчикиОбновленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = Элементы.ОбработчикиОбновления.ТекущиеДанные;
		ЗаполнитьКоличествоИПоказатьНаличиеОшибок(ТекущиеДанные.Гиперссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикиОбновленияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущиеДанные = Элементы.ОбработчикиОбновления.ТекущиеДанные;
	
	Если ОтменаРедактирования 
		И Не ЗначениеЗаполнено(ТекущиеДанные.Гиперссылка) Тогда
		ТекущиеДанные.СтатусПроблемы = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикиОбновленияПослеУдаления(Элемент)
	
	ПоказатьНаличиеОшибок(Объект, Элементы, БиблиотекаКартинок.Предупреждение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикиОбновленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОбработчикиОбновления.ТекущиеДанные;
	ОбработатьВыборСтрокиПроектныхРешений("ОбработчикиОбновления", ТекущиеДанные, Поле.Имя, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыКлючевыеОперации

&НаКлиенте
Процедура КлючевыеОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ЗаполнитьКоличествоИПоказатьНаличиеОшибок(Элементы.КлючевыеОперации.ТекущиеДанные.КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииПослеУдаления(Элемент)
	
	ПоказатьНаличиеОшибок(Объект, Элементы, БиблиотекаКартинок.Предупреждение);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииКлючеваяОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КлючевыеОперации.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьДополнительнуюИнформациюКлючевыхОпераций(ТекущиеДанные.КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииКлючеваяОперацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриИзмененииКлючевойОперации(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииКлючеваяОперацияОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииКлючевойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииОбъектМетаданныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриИзмененииКлючевойОперации(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииОбъектМетаданныхОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииКлючевойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииОписаниеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КлючевыеОперации.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПризнакНаличияОписанияКлючевойОперации(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеОперацииФактическоеВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КлючевыеОперации.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		УстановитьПревышениеЦелевогоВремениКлючевойОперации(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыРезультатыПроверкиОбъектов

&НаКлиенте
Процедура РезультатыПроверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока<>Неопределено Тогда
		Если Поле.Имя = "РезультатыПроверкиПравилоПроверкиОбъектов" Тогда
			ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.ПравилоПроверкиОбъектов);
		ИначеЕсли Поле.Имя = "РезультатыПроверкиОшибка" Тогда
			ОткрытьФорму("Справочник.Ошибки.ФормаОбъекта",Новый Структура("Ключ", Элемент.ТекущиеДанные.Ошибка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьИдеи(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Владелец));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьИдеиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.Идеи.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.Идеи,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИдеиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьРеквизитыИдей();

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОшибки(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.Владелец);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("КлючНазначенияиспользования", "ПодборДляТехническихПроектов");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодобратьОшибкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Ошибки.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.Идеи,
				 ,
				 ,
				 ,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОшибкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗаполнитьРеквизитыИдей();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокПрофилей(Команда)
	
	Если Объект.Процессы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокПрофилейСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокФункций(Команда)
	
	Если Объект.Процессы.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокФункцийСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборУчастников(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",
				 ПараметрыФормы,
				 Элементы.Участники,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекстОписанияИзШаблона(Команда)
	
	ПрименитьШаблонОписания();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРазделы(Команда)
	
	ПараметрыФормы = Новый Структура;
	МассивРазделов = Новый Массив;
	
	Для Каждого СтрокаТЧ из Объект.РазделыПроекта Цикл
		МассивРазделов.Добавить(СтрокаТЧ.Раздел);
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Проект", Объект.Владелец);
	ПараметрыФормы.Вставить("МассивРазделов", МассивРазделов);
	ПараметрыФормы.Вставить("ИзмененияДоступны", ДоступноИзменениеТехническогоПроекта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДополнительныеРазделыЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.РазделыПроекта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРазделыЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатДействия;
    
    Если ТипЗнч(Результат) = Тип("Массив") Тогда
        
        Объект.РазделыПроекта.Очистить();
        
        КоличествоРазделов = 0;
        Для Каждого Раздел из Результат Цикл
            НоваяСтрока = Объект.РазделыПроекта.Добавить();
            НоваяСтрока.Раздел = Раздел;
            
            КоличествоРазделов = КоличествоРазделов + 1;
        КонецЦикла;
		
		ЗаполнитьДеревоРазделовПроекта();
		
        ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
			КоличествоРазделов);
			
		Модифицированность = Истина;
		
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьОписаниеВФайл(Команда)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.ПолноеИмяФайла = "Технический проект " + Объект.Код + " " + Объект.Наименование;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.Расширение = "htm";
	ДиалогВыбораФайла.Фильтр = "Файлы html (*.htm)|*.htm";
	
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Описание.Записать(ДиалогВыбораФайла.ПолноеИмяФайла, ТипФайлаФорматированногоДокумента.HTML);
	
	ТекстОповещения = НСтр("ru='Сохранение описания в файл'");
	ТекстПояснения = НСтр("ru='Описание технического проекта сохранено в файл'");
	ПоказатьОповещениеПользователя(ТекстОповещения, , ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИсправлениеОшибки(Команда)
	
	ТекущиеДанные = Элементы.Идеи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Идея);
	ПараметрыФормы.Вставить("ДействиеСОшибкой", "ПодтверждениеИсправления");
		
	ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьИсправлениеОшибки(Команда)
	
	ТекущиеДанные = Элементы.Идеи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Идея);
	ПараметрыФормы.Вставить("ДействиеСОшибкой", "Исправление");
	ПараметрыФормы.Вставить("ОписаниеИзменений", ТекущиеДанные.РеализацияИдеи);
		
	ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОшибку(Команда)
	
	ТекущиеДанные = Элементы.Идеи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Идея);
	ПараметрыФормы.Вставить("ДействиеСОшибкой", "Закрытие");
		
	ОткрытьФорму("Справочник.Ошибки.Форма.ПомощникРегистрацииИОбработкиОшибки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусРеализована(Команда)
	
	УстановитьСтатусИдей(ПредопределенноеЗначение("Перечисление.СтатусыИдей.Реализована"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтклонена(Команда)
	
	УстановитьСтатусИдей(ПредопределенноеЗначение("Перечисление.СтатусыИдей.Отклонена"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеИзЦелей(Команда)
	
	ОбщегоНазначенияСППРКлиент.ПерейтиПоСсылкеФорматированногоДокумента(Элементы.ЦелиПроекта, Цели);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПоСсылкеИзКонцепции(Команда)
	
	ОбщегоНазначенияСППРКлиент.ПерейтиПоСсылкеФорматированногоДокумента(Элементы.КонцепцияПроекта, Концепция);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьХранилищеТехническогоПроекта(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Ответственный"" не заполнено.'"),
			Объект.Ссылка,
			"Ответственный",
			"Объект");
		Возврат;
	
	КонецЕсли; 
	Оповещение = Новый ОписаниеОповещения("СоздатьХранилищеТехническогоПроектаЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьХранилищеТехническогоПроектаЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТехническийПроект", Объект.Ссылка);
	ПараметрыФормы.Вставить("КаталогХранилищаДляЗагрузкиМетаданных", КаталогХранилищаДляЗагрузкиМетаданных);
	ПараметрыФормы.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", Объект.ИмяПользователяХранилищаДляЗагрузкиМетаданных);
	ПараметрыФормы.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", Объект.ПарольПользователяХранилищаДляЗагрузкиМетаданных);
	ПараметрыФормы.Вставить("КаталогБазыРазработки", КаталогБазыРазработки);
	ПараметрыФормы.Вставить("ИмяПользователяБазыРазработки", ИмяПользователяБазыРазработки);
	ПараметрыФормы.Вставить("ПарольПользователяБазыРазработки", ПарольПользователяБазыРазработки);
	
	ОткрытьФорму("Обработка.СозданиеХранилища.Форма.ТехническогоПроекта", 
		ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоСтрокДоВставки = Объект.ИдеиИОшибки.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.ИдеиИОшибки.Количество()-КоличествоСтрокДоВставки;
	ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если Элементы.Идеи.ТекущаяСтрока <> Неопределено Тогда
		СкопироватьСтрокиНаСервере();
		ОповеститьПользователяОКопированииСтрок(Элементы.Идеи.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуВсехПравил(Команда)
	
	ТекстЗаголовка = НСтр("ru='Выполнение правил проверки'");
	ТекстСостояния = НСтр("ru='Выполняется применение правил проверки'");
	Состояние(ТекстЗаголовка,,ТекстСостояния);
	
	ВыполнитьПроверкуВсехПравилСервер();
	
	Оповестить("Запись_РезультатыПроверкиОбъектов");
	
	ТекстЗаголовка = НСтр("ru='Выполнение правил проверки'");
	ТекстПояснения = НСтр("ru='Выполнено применение всех правил проверки'");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОшибки(Команда)
	
	ВыделенныеСтроки = Элементы.РезультатыПроверки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьОшибкиСервер(ВыделенныеСтроки);
	
	ТекстЗаголовка = НСтр("ru='Регистрация ошибок'");
	ТекстПояснения = НСтр("ru='По выделенным строкам зарегистрированы ошибки'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуИсключения(Команда)
	
	ВыделенныеСтроки = Элементы.РезультатыПроверки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтметкиИсключенияСервер(ВыделенныеСтроки, Ложь);
	
	Оповестить("Запись_РезультатыПроверкиОбъектов");
	
	ТекстЗаголовка = НСтр("ru='Снятие отметок'");
	ТекстПояснения = НСтр("ru='Для выделенных строк сняты отметки исключения'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуИсключения(Команда)
	
	ВыделенныеСтроки = Элементы.РезультатыПроверки.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтметкиИсключенияСервер(ВыделенныеСтроки, Истина);
	
	Оповестить("Запись_РезультатыПроверкиОбъектов");
	
	ТекстЗаголовка = НСтр("ru='Установка отметок'");
	ТекстПояснения = НСтр("ru='Для выделенных строк установлены отметки исключения'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,,ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	ДанныеХронометража = ПереключитьХронометражНаСервере(Объект.Ссылка);
	
	Элементы.ПереключитьХронометраж.Пометка = НЕ Элементы.ПереключитьХронометраж.Пометка;
	
	Оповестить("ПереключенХронометраж", ДанныеХронометража, ЭтотОбъект);
	
	Если ДанныеХронометража.ХронометражЗавершен Тогда
		ДанныеОповещения = Новый Структура;
		ДанныеОповещения.Вставить("Начало", ДанныеХронометража.НачалоЗавершеннойРаботы);
		ДанныеОповещения.Вставить("Окончание", ДанныеХронометража.ОкончаниеЗавершеннойРаботы);
		
		Оповестить("ЗаписаныДанныеКалендаря", ДанныеОповещения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦелиОчиститьФормат(Команда)
	
	ОчищенныйТекст = Цели.ПолучитьТекст();
	Цели.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ОчищенныйТекст));
	
КонецПроцедуры

&НаКлиенте
Процедура КонцепцияОчиститьФормат(Команда)
	
	ОчищенныйТекст = Концепция.ПолучитьТекст();
	Концепция.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ОчищенныйТекст));
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированноеОписаниеОчиститьФормат(Команда)
	
	ОчищенныйТекст = Описание.ПолучитьТекст();
	Описание.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ОчищенныйТекст));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаметкиОчиститьФормат(Команда)
	
	ОчищенныйТекст = Заметки.ПолучитьТекст();
	Заметки.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(ОчищенныйТекст));
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	Если Элементы.ГруппаСтраницыПроектныхРешений.ТекущаяСтраница = Элементы.ГруппаПроцессы Тогда
	
		Таблица = Объект.Процессы;
		ВыделенныеСтроки = Элементы.Процессы.ВыделенныеСтроки;
		
	ИначеЕсли Элементы.ГруппаСтраницыПроектныхРешений.ТекущаяСтраница = Элементы.ГруппаПрофилиПользователей Тогда
	
		Таблица = Объект.ПрофилиПользователей;
		ВыделенныеСтроки = Элементы.ПрофилиПользователей.ВыделенныеСтроки;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Необходимо выделить стороки в списке!'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("Таблица", Таблица);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьОтветственногоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.Ответственный);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормы.Вставить("РазрешитьВыборКорня", Ложь);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КоличествоОбъектов = ДополнительныеПараметры.ВыделенныеСтроки.Количество();
	КоличествоОбработанных = УстановитьОтветственногоСервер(ДополнительныеПараметры.Таблица, 
		ДополнительныеПараметры.ВыделенныеСтроки, 
		РезультатВыбора);
	
	ТекстЗаголовка = НСтр("ru='Ответственный установлен'");
	ТекстСообщения = НСтр("ru = 'Уставлен ответственный ""%Ответственный%"" для %КоличествоОбработанных% из %КоличествоОбъектов% объектов'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбъектов%",     КоличествоОбъектов);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ответственный%",          РезультатВыбора);
	
	Если КоличествоОбработанных > 0 Тогда
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКХранилищу(Команда)
	
	ПараметрыФормы = Новый Структура("Хранилище", Объект.Ссылка);
	ОткрытьФорму("Обработка.ПодключениеБазыКХранилищу.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСценарии(Команда)
	ПараметрыФормы = Новый Структура;
	
	ПараметрПроцессы = Новый Массив;
	Для Каждого СтрокаПроцессы Из Объект.Процессы Цикл
		ПараметрПроцессы.Добавить(СтрокаПроцессы.Гиперссылка);
	КонецЦикла;	 
	
 	ПараметрыФормы.Вставить("Процессы", ПараметрПроцессы);
	ОткрытьФорму("Справочник.ТехническиеПроекты.Форма.СценарииПользователейДляШаговПроцессов", ПараметрыФормы,Элементы.СценарииПользователей, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура СтатусТестов(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ветка) Тогда
		ТекстСообщения = НСтр("ru = 'Не указана ветка разработки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,
			"Ветка",
			"Объект");
		Возврат;
	КонецЕсли;	 
	
	ПараметрыФормы = Новый Структура("КлючВарианта, Ветка, СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов", 
		"СтатусПрохожденияТестовВВеткеПоОшибкам",
		Объект.Ветка, 
		Истина,
		Истина);
		
	ОткрытьФорму(
		"Отчет.СтатусПрохожденияТестовВВетке.Форма",
		ПараметрыФормы, ,
		Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВетку(Команда)
	СоздатьИВыбратьВетку();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСценарииПользователей

&НаКлиенте
Процедура СценарииПользователейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ДанныеСценариев") Тогда
			ДанныеСценариев = ВыбранноеЗначение.ДанныеСценариев;
			ОбновитьДанныеСценариевПользователейПослеПривязкиСценаревКШагамПроцесса(ДанныеСценариев);
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура СценарииПользователейПриАктивизацииСтроки(Элемент)
	ОбновитьГиперссылкиНаШагиПроцессов();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПояснениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Найти(НавигационнаяСсылкаФорматированнойСтроки,"Процесс_") > 0 Тогда
		НавигационнаяСсылкаФорматированнойСтроки = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"Процесс_","");
		УИД = Новый УникальныйИдентификатор(НавигационнаяСсылкаФорматированнойСтроки);
		Процесс = ПроцессПоУИД(УИД);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",Процесс);
		ОткрытьФорму("Справочник.Процессы.Форма.Процесс",ПараметрыФормы);
	ИначеЕсли Найти(НавигационнаяСсылкаФорматированнойСтроки,"ШагПроцесса_") > 0 Тогда
		НавигационнаяСсылкаФорматированнойСтроки = СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки,"ШагПроцесса_","");
		УИД = Новый УникальныйИдентификатор(НавигационнаяСсылкаФорматированнойСтроки);
		ШагПроцесса = ШагПроцессаПоУИД(УИД);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",ШагПроцесса);
		ОткрытьФорму("Справочник.ШагиПроцесса.Форма.ФормаЭлемента",ПараметрыФормы);
	КонецЕсли;	 
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	СтатусыРеализованныхИдей.Очистить();
	СтатусыРеализованныхИдей.Добавить(Перечисления.СтатусыИдей.Реализована);
	СтатусыРеализованныхИдей.Добавить(Перечисления.СтатусыИдей.Отклонена);
	СтатусыРеализованныхИдей.Добавить(Перечисления.СтатусыОшибок.ПроверенаИсправлена);
	СтатусыРеализованныхИдей.Добавить(Перечисления.СтатусыОшибок.НеПризнана);
	СтатусыРеализованныхИдей.Добавить(Перечисления.СтатусыОшибок.Отозвана);
	СтатусыРеализованныхИдей.Добавить(Перечисления.СтатусыОшибок.Закрыта);
	СтатусыРеализованныхИдей.Добавить(Перечисления.СтатусыОшибок.НеПланируетсяИсправлять);
	
	ДоступноУправлениеТехническимПроектом = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ПланированиеИУправлениеТехническимиПроектами", Объект.Владелец);
		
	ДоступенКонтрольАктуальностиСправки = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("КонтрольАктуальностиСправки", Объект.Владелец);
		
	ДоступноИзменениеТехническогоПроекта = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеТехническихПроектов", Объект.Владелец);
		
	ДоступноИзменениеОшибок = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеОшибок", Объект.Владелец);
		
	ДоступноИзменениеИдей = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеИдей", Объект.Владелец);
		
	ДоступноИзменениеХронометража = УправлениеДоступом.ЕстьРоль("ИзменениеДанныхХронометража");
		
	УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	
	ЗаполнитьДеревоРазделовПроекта();
	ЗаполнитьКэшируемыеЗначения();
	ЗаполнитьРеквизитыВетки();
	ПрочитатьИнформациюОСборках();
	РассчитатьПлановыеЗатратыВремени();
	РассчитатьФактическиеЗатратыВремени();
	
	СтатусЦелевойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЦелеваяЗадача, "Статус");
	ОтобразитьСтатусЦелевойЗадачи();
	
	ЗаголовокИдеи = ОбновитьЗаголовокИдеи(Объект.ИдеиИОшибки, СтатусыРеализованныхИдей); 
	
	ОбщегоНазначенияСППРКлиентСервер.СформироватьТекстГиперссылкиДополнительныеРазделы(Элементы.ДополнительныеРазделы,
		Объект.РазделыПроекта.Количество());
	
	УстановитьДоступностьРаботыСОтдельнымХранилищем();
	
	УстановитьДоступностьФлагаПубликуется();
	УстановитьДоступностьРаботыСРеквизитамиПубликации(Элементы, Объект.Публикуется);
	УстановитьДоступностьРаботыСВеткой();
	УстановитьВидимостьИнформацииОСборках();
	УстановитьДоступностьЭлементов();
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Проект",Объект.Владелец));
	НастрокитьЭлементыФормыПоТипуИспользуемыхЗадач();
	
	УчетВремени.НастроитьКомандуХронометража(ЭтаФорма);
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ОтобразитьИнформациюПоСогласующимВФорме(ЭтотОбъект, Объект.Ссылка, "ГруппаСогласующиеПоПредмету");
	// Конец ЗадачиПроцессов
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокФункцийСервер()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ШагиПроцесса.ФункцияСистемы КАК Гиперссылка
	|ИЗ
	|	Справочник.ШагиПроцесса КАК ШагиПроцесса
	|ГДЕ
	|	ШагиПроцесса.ФункцияСистемы <> ЗНАЧЕНИЕ(Справочник.ФункцииСистемы.ПустаяСсылка)
	|	И ШагиПроцесса.Владелец В (&МассивПроцессов)"
	;
	
	МассивПроцессов = Объект.Процессы.Выгрузить().ВыгрузитьКолонку("Гиперссылка");
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивПроцессов", МассивПроцессов);
	
	ТаблицаФункций = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы из ТаблицаФункций Цикл
		
		СтруктураОтбора = Новый Структура("Гиперссылка", СтрокаТаблицы.Гиперссылка);
		НайденныеСтроки = Объект.Функции.НайтиСтроки(СтруктураОтбора);
		
		Если  НайденныеСтроки.КОличество()=0 Тогда
			НоваяСтрока = Объект.Функции.Добавить();
			НоваяСтрока.Гиперссылка = СтрокаТаблицы.Гиперссылка;
		КонецЕсли;
		
	КонецЦИкла;
	
	ЗаполнитьКэшируемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПрофилейСервер()
	
	ОбъектПроекта = РеквизитФормыВЗначение("Объект");
	ОбъектПроекта.ЗаполнитьСписокПрофилей();
	ЗначениеВРеквизитФормы(ОбъектПроекта, "Объект");
	
	ЗаполнитьКэшируемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначения()
	
	НастройкиСервер.СохранитьТекущуюСтраницу("Справочник.ТехническиеПроекты.ФормаЭлемента", Элементы.ГруппаСтраницы, "ТекущаяСтраницаФормыТехническогоПроекта");
	НастройкиСервер.СохранитьТекущуюСтраницу("Справочник.ТехническиеПроекты.ФормаЭлемента", Элементы.ГруппаСтраницыПроектныхРешений, "ТекущаяСтраницаПроектныхРешений");
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Объект.Ссылка, "КаталогБазыРазработки", КаталогБазыРазработки);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Объект.Ссылка, "ИмяПользователяБазыРазработки", ИмяПользователяБазыРазработки);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Объект.Ссылка, "ПарольПользователяБазыРазработки", ПарольПользователяБазыРазработки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	УстановитьДоступностьЭлементовПланирования(Элементы, Объект.Статус, ДоступноУправлениеТехническимПроектом);
	УстановитьДоступностьРедактированияСоставаИдей();
	УстановитьДоступностьКомандБуфераОбмена();
	Элементы.Статус.Доступность = ДоступноУправлениеТехническимПроектом;
	
	КонтрольАктуальностиСправки = ДоступноИзменениеТехническогоПроекта ИЛИ ДоступенКонтрольАктуальностиСправки;
	
	Элементы.ИзмененияВДокументациюВнесены.ТолькоПросмотр = НЕ КонтрольАктуальностиСправки;
	Элементы.ИзмененияВСправкуВнесены.ТолькоПросмотр = НЕ КонтрольАктуальностиСправки;
		
	Если Элементы.Найти("ВыполнитьПроверкуВсехПравил") <> Неопределено Тогда
		Элементы.ВыполнитьПроверкуВсехПравил.Видимость = ДоступноИзменениеТехническогоПроекта;
	КонецЕсли;
	
	Если Элементы.Найти("УстановитьОтметкуИсключения") <> Неопределено Тогда
		Элементы.УстановитьОтметкуИсключения.Видимость = ДоступноИзменениеТехническогоПроекта;
	КонецЕсли;
	
	Если Элементы.Найти("СнятьОтметкуИсключения") <> Неопределено Тогда
		Элементы.СнятьОтметкуИсключения.Видимость = ДоступноИзменениеТехническогоПроекта;
	КонецЕсли;
	
	Если Элементы.Найти("ЗарегистрироватьОшибки") <> Неопределено Тогда
		Элементы.ЗарегистрироватьОшибки.Видимость = ДоступноИзменениеОшибок;
	КонецЕсли;
	
	Элементы.ЦелиПроекта.ТолькоПросмотр = НЕ ДоступноИзменениеТехническогоПроекта;
	Элементы.КонцепцияПроекта.ТолькоПросмотр = НЕ ДоступноИзменениеТехническогоПроекта;
	Элементы.ФорматированноеОписание.ТолькоПросмотр = НЕ ДоступноИзменениеТехническогоПроекта;
	Элементы.Заметки.ТолькоПросмотр = НЕ ДоступноИзменениеТехническогоПроекта;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыИдей()
	
	МассивИдейИОшибок = Объект.ИдеиИОшибки.Выгрузить().ВыгрузитьКолонку("Идея");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Идеи.Ссылка КАК Идея,
	|	Идеи.Статус КАК Статус,
	|	Идеи.Владелец КАК Проект,
	|	ЛОЖЬ КАК ОшибкаПодлежитЗакрытию,
	|   Идеи.ПодробноеОписание КАК ОписаниеИдеи
	|ИЗ
	|	Справочник.Идеи КАК Идеи
	|ГДЕ
	|	Идеи.Ссылка В(&МассивИдейИОшибок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ошибки.Ссылка,
	|	Ошибки.Статус,
	|   Ошибки.Владелец,
	|ВЫБОР
	|	КОГДА Ошибки.Владелец.ИспользоватьЗакрытиеОшибок
	|				И НЕ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|			ИЛИ Ошибки.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
	|				И Ошибки.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|КОНЕЦ,
	|   Ошибки.ПорядокВоспроизведения
	|ИЗ
	|	Справочник.Ошибки КАК Ошибки
	|ГДЕ
	|	Ошибки.Ссылка В(&МассивИдейИОшибок)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивИдейИОшибок", МассивИдейИОшибок);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
				
	Для Каждого СтрокаТЧ из Объект.ИдеиИОшибки Цикл
		
		СтрокаТаблицы = ТаблицаРезультата.Найти(СтрокаТЧ.Идея, "Идея");
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТЧ.СтатусИдеи = СтрокаТаблицы.Статус;
			СтрокаТЧ.ОписаниеИдеи = СтрокаТаблицы.ОписаниеИдеи;
			СтрокаТЧ.ИндексКартинкиСтатусаИдеи = ИндексКартинкиСтатусаИдеиОшибки(СтрокаТЧ.СтатусИдеи);
			
			ЕстьРольЗакрытия = УправлениеДоступомСППР.РольДоступнаПоПроекту("ЗакрытиеОшибок", СтрокаТаблицы.Проект);
			ДоступноЗакрытие = ЕстьРольЗакрытия И СтрокаТаблицы.ОшибкаПодлежитЗакрытию;
			
			СтрокаТЧ.ДоступноЗакрытие = ДоступноЗакрытие;
			
			Если ТипЗнч(СтрокаТЧ.Идея) = Тип("СправочникСсылка.Идеи") Тогда
				СтрокаТЧ.ИндексКартинкиИдеяОшибка = 0;
			ИначеЕсли ТипЗнч(СтрокаТЧ.Идея) = Тип("СправочникСсылка.Ошибки") Тогда
				СтрокаТЧ.ИндексКартинкиИдеяОшибка = 1;
			Иначе
				СтрокаТЧ.ИндексКартинкиИдеяОшибка = 99;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаголовокИдеи = ОбновитьЗаголовокИдеи(Объект.ИдеиИОшибки, СтатусыРеализованныхИдей); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКэшируемыеЗначения()
	
	ЗаполнитьРеквизитыИдей();
	ЗаполнитьКоличествоИПоказатьНаличиеОшибок();
	ЗаполнитьДополнительнуюИнформациюКлючевыхОпераций();
	УстановитьПризнакСтрокаЗаписана();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВладельцаСервер()
	
	ТекстОписания = Описание.ПолучитьТекст();
	Если НЕ ЗначениеЗаполнено(ТекстОписания) Тогда
		ПрименитьШаблонОписания();
	КонецЕсли;
	
	Объект.РазделыПроекта.Очистить();
	ЗаполнитьДеревоРазделовПроекта();
	ПрочитатьИнформациюОСборках();
	
	ДоступноУправлениеТехническимПроектом = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ПланированиеИУправлениеТехническимиПроектами", Объект.Владелец);
		
	ДоступенКонтрольАктуальностиСправки = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("КонтрольАктуальностиСправки", Объект.Владелец);
		
	ДоступноИзменениеТехническогоПроекта = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеТехническихПроектов", Объект.Владелец);
		
	ДоступноИзменениеОшибок = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеОшибок", Объект.Владелец);
		
	ДоступноИзменениеИдей = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеИдей", Объект.Владелец);
		
	СтатусЦелевойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЦелеваяЗадача, "Статус");
	ОтобразитьСтатусЦелевойЗадачи();
	
	УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки);
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьИнформацииОСборках();
	УстановитьДоступностьЭлементов();
	УстановитьДоступностьФлагаПубликуется();
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Проект",Объект.Владелец));
	Объект.ОбработчикиОбновления.Очистить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыИдеиОшибки(Идея)
	
	Структура = Новый Структура;
	Структура.Вставить("Статус", Неопределено);
	Структура.Вставить("ДоступноЗакрытие", Ложь);
	Структура.Вставить("ОписаниеИдеи", "");
	
	Если ЗначениеЗаполнено(Идея) Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Статус КАК Статус,
		|	Таблица.Владелец КАК Проект,
		|ВЫБОР
		|	КОГДА Таблица.Владелец.ИспользоватьЗакрытиеОшибок
		|				И НЕ Таблица.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		|			ИЛИ Таблица.Владелец.ИспользоватьЗакрытиеТолькоДляОшибокСПроектнымиИзменениями
		|				И Таблица.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ОшибкаПодлежитЗакрытию,
		|   Таблица.ПолеОписания КАК ОписаниеИдеи
		|
		|ИЗ
		|	Справочник.ИмяСправочника КАК Таблица
		|ГДЕ Таблица.Ссылка = &Идея"
		;
		
		Если ТипЗнч(Идея) = Тип("СправочникСсылка.Идеи") Тогда
			ИмяСправочника = "Идеи";
			ПолеОписания = "ПодробноеОписание";
		Иначе
			ИмяСправочника = "Ошибки";
			ПолеОписания = "ПорядокВоспроизведения";
		КонецЕсли;
		
		Если ТипЗнч(Идея) <> Тип("СправочникСсылка.Ошибки") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Таблица.ЕстьИзмененияПоСравнениюСРанееПринятымиПроектнымиРешениями", "");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяСправочника", ИмяСправочника);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолеОписания", ПолеОписания);
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Идея", Идея);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЕстьРольЗакрытия = УправлениеДоступомСППР.РольДоступнаПоПроекту("ЗакрытиеОшибок", Выборка.Проект);
			ДоступноЗакрытие = ЕстьРольЗакрытия И Выборка.ОшибкаПодлежитЗакрытию;
			
			Структура.Вставить("Статус", Выборка.Статус);
			Структура.Вставить("ДоступноЗакрытие", ДоступноЗакрытие);
			Структура.Вставить("ОписаниеИдеи", Выборка.ОписаниеИдеи);
	    КонецЕсли;
	
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ПрименитьШаблонОписания()
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Описание = ШаблонОписания(Объект.Владелец);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ШаблонОписания(Проект)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ХранилищеШаблонаОписанияТехническогоПроекта").Получить();
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИдеяОшибку(Идея)
	
	СтруктураОтбора = Новый Структура("Идея", Идея);
	МассивСтрок = Объект.ИдеиИОшибки.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = Объект.ИдеиИОшибки.Добавить();
		НоваяСтрока.Идея = Идея;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовПланирования(Элементы, Статус, ДоступноУправлениеТехническимПроектом)
	
	ДоступноУправлениеПланом = (Статус = ПредопределенноеЗначение("Перечисление.СтатусыТехническихПроектов.НеЗапланирован"))
								ИЛИ ДоступноУправлениеТехническимПроектом;
								
	ДоступноУправлениеДатами = (Статус = ПредопределенноеЗначение("Перечисление.СтатусыТехническихПроектов.НеЗапланирован")
								ИЛИ Статус = ПредопределенноеЗначение("Перечисление.СтатусыТехническихПроектов.Запланирован"))
								ИЛИ ДоступноУправлениеТехническимПроектом;
	
	Элементы.Очередность.ТолькоПросмотр = Не ДоступноУправлениеПланом;
	Элементы.Версия.ТолькоПросмотр = Не ДоступноУправлениеПланом;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРедактированияСоставаИдей()
	
	ДоступноУправлениеИдеями = (Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыТехническихПроектов.Выполнен"))
								ИЛИ ДоступноУправлениеТехническимПроектом;
	
	Элементы.Идеи.ИзменятьСоставСтрок = ДоступноУправлениеИдеями;
	Элементы.Идеи.ИзменятьПорядокСтрок = ДоступноУправлениеИдеями;
	
	Если Элементы.Найти("ИдеиПодобратьИдеи")<>Неопределено Тогда
		Элементы.ИдеиПодобратьИдеи.Доступность = ДоступноУправлениеИдеями;
	КонецЕсли;

	Если Элементы.Найти("ИдеиПодобратьОшибки")<>Неопределено Тогда
		Элементы.ИдеиПодобратьОшибки.Доступность = ДоступноУправлениеИдеями;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущиеСтраницы()
	
	ИмяОбъекта = "Справочник.ТехническиеПроекты.ФормаЭлемента";
	
	НастройкиСервер.УстановитьТекущуюСтраницу(ИмяОбъекта, 
												Элементы.ГруппаСтраницы, 
												"ТекущаяСтраницаФормыТехническогоПроекта");
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ПроектныеРешения Тогда
		НастройкиСервер.УстановитьТекущуюСтраницу(ИмяОбъекта, 
													Элементы.ГруппаСтраницыПроектныхРешений,
													"ТекущаяСтраницаПроектныхРешений");
	КонецЕсли;
	
	ИмяСтраницыПроектныхРешений =
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта, "ТекущаяСтраницаПроектныхРешений");
	
	Если ИмяСтраницыПроектныхРешений <> Неопределено Тогда
		ТекущаяСтраницаПроектныхРешений = ИмяСтраницыПроектныхРешений;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТехническиеПроекты.ХранилищеОписания КАК ХранилищеОписания,
	|	ТехническиеПроекты.ХранилищеЗаметок КАК ХранилищеЗаметок,
	|	ТехническиеПроекты.ХранилищеЦелей КАК ХранилищеЦелей,
	|	ТехническиеПроекты.ХранилищеКонцепции КАК ХранилищеКонцепции
	|ИЗ
	|	Справочник.ТехническиеПроекты КАК ТехническиеПроекты
	|ГДЕ
	|	ТехническиеПроекты.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", КопируемыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОписаниеИзХранилища = Выборка.ХранилищеОписания.Получить();
		Если ТипЗнч(ОписаниеИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Описание = ОписаниеИзХранилища;
		КонецЕсли;
		
		ЗаметкиИзХранилища = Выборка.ХранилищеЗаметок.Получить();
		Если ТипЗнч(ЗаметкиИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Заметки = ЗаметкиИзХранилища;
		КонецЕсли;
		
		ЦелиИзХранилища = Выборка.ХранилищеЦелей.Получить();
		Если ТипЗнч(ЦелиИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Цели = ЦелиИзХранилища;
		КонецЕсли;
		
		КонцепцияИзХранилища = Выборка.ХранилищеКонцепции.Получить();
		Если ТипЗнч(КонцепцияИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Концепция = КонцепцияИзХранилища;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексКартинкиСтатусаИдеиОшибки(Статус)
	
	ИндексКартинки = 0;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеЗарегистрирована") Тогда
		ИндексКартинки = 0;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована") Тогда
		ИндексКартинки = 1;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана") Тогда
		ИндексКартинки = 2;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Отозвана") Тогда
		ИндексКартинки = 3;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена") Тогда
		ИндексКартинки = 4;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена") Тогда
		ИндексКартинки = 5;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПризнана") Тогда
		ИндексКартинки = 6;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта") Тогда
		ИндексКартинки = 8;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.НеПланируетсяИсправлять") Тогда
		ИндексКартинки = 9;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ОжидаетИсправленияПовторяемойОшибки") Тогда
		ИндексКартинки = 10;	
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыИдей.Зарегистрирована") Тогда
		ИндексКартинки = 11;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыИдей.Реализована") Тогда
		ИндексКартинки = 12;
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыИдей.Отклонена") Тогда
		ИндексКартинки = 13;
	Иначе
		ИндексКартинки = 99;
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСОшибками()
	
	ТекущиеДанные = Элементы.Идеи.ТекущиеДанные;
	
	ДоступностьВозможна = Ложь;
	Статус = Неопределено;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Идея) = Тип("СправочникСсылка.Ошибки")
			И ЗначениеЗаполнено(ТекущиеДанные.Идея) Тогда
			
			ДоступностьВозможна = Истина;
			Статус = ТекущиеДанные.СтатусИдеи;
		КонецЕсли;
	КонецЕСли;
	
	Если Элементы.Найти("ИдеиОтметитьИсправлениеОшибки") <> Неопределено Тогда
		Элементы.ИдеиОтметитьИсправлениеОшибки.Доступность = 
			ДоступностьВозможна И Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана")
			И ДоступноИзменениеОшибок;
		Элементы.ИдеиИОшибкиОтметитьИсправлениеОшибки.Доступность = Элементы.ИдеиОтметитьИсправлениеОшибки.Доступность;
	КонецЕсли;
	
	Если Элементы.Найти("ИдеиПодтвердитьИсправлениеОшибки") <> Неопределено Тогда
		Элементы.ИдеиПодтвердитьИсправлениеОшибки.Доступность = 
			ДоступностьВозможна И Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена")
			И ДоступноИзменениеОшибок;
		Элементы.ИдеиИОшибкиПодтвердитьИсправлениеОшибки.Доступность = Элементы.ИдеиПодтвердитьИсправлениеОшибки.Доступность;
	КонецЕсли;
	
	Если Элементы.Найти("ИдеиЗакрытьОшибку") <> Неопределено Тогда
		Элементы.ИдеиЗакрытьОшибку.Доступность = 
			ДоступностьВозможна И Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена")
			И ТекущиеДанные.ДоступноЗакрытие;
		Элементы.ИдеиИОшибкиЗакрытьОшибку.Доступность = Элементы.ИдеиЗакрытьОшибку.Доступность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСИдеями()
	
	ВыделенныеСтроки = Элементы.Идеи.ВыделенныеСтроки;
	
	ЕстьИдеи = Ложь;
	
	Для Каждого Идентификатор из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ИдеиИОшибки.НайтиПоИдентификатору(Идентификатор);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			Если ТипЗнч(СтрокаТаблицы.Идея) = Тип("СправочникСсылка.Идеи")
				И ЗначениеЗаполнено(СтрокаТаблицы.Идея) Тогда
				ЕстьИдеи = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.Найти("ИдеиУстановитьСтатусРеализовано") <> Неопределено Тогда
		Элементы.ИдеиУстановитьСтатусРеализовано.Доступность = ЕстьИдеи И ДоступноИзменениеИдей;
		Элементы.ИдеиУстановитьСтатусРеализовано1.Доступность = ЕстьИдеи И ДоступноИзменениеИдей;
	КонецЕсли;
	
	Если Элементы.Найти("ИдеиУстановитьСтатусОтклонено") <> Неопределено Тогда
		Элементы.ИдеиУстановитьСтатусОтклонено.Доступность = ЕстьИдеи И ДоступноИзменениеИдей;
		Элементы.ИдеиУстановитьСтатусОтклонено1.Доступность = ЕстьИдеи И ДоступноИзменениеИдей;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииОшибки(ИмяСобытия, Параметр, МассивОбновляемыхПолей)
	
	Ошибка = Неопределено;
	Статус = Неопределено;
	
	Если ИмяСобытия = "ОшибкаЗарегистрирована" Тогда
		Ошибка = Параметр;
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Зарегистрирована");
	ИначеЕсли ИмяСобытия = "ОшибкаПризнана" Тогда
		Ошибка = Параметр;
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Признана");
	ИначеЕсли ИмяСобытия = "ОшибкаИсправлена" Тогда
		Ошибка = Параметр;
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Исправлена");
	ИначеЕсли ИмяСобытия = "ОшибкаПроверена" Тогда
		Ошибка = Параметр;
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.ПроверенаИсправлена");
	ИначеЕсли ИмяСобытия = "ОшибкаЗакрыта" Тогда
		Ошибка = Параметр;
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыОшибок.Закрыта");
	ИначеЕсли ИмяСобытия = "Запись_Ошибки" Тогда
		Ошибка = Параметр.Ссылка;
		Статус = Параметр.Статус;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идея", Ошибка);
	
	МассивСтрок = Объект.ИдеиИОшибки.НайтиСтроки(СтруктураОтбора);
	
	Если ТипЗнч(Ошибка) = Тип("СправочникСсылка.Ошибки") Тогда
		ПорядокВоспроизведения = ПорядокВоспроизведенияОшибки(Ошибка);
	Иначе
		ПорядокВоспроизведения = "";
	КонецЕсли;
	
	ЕстьИзменения = Ложь;
	
	Для Каждого СтрокаТЧ из МассивСтрок Цикл
		Если СтрокаТЧ.СтатусИдеи <> Статус Тогда
			СтрокаТЧ.СтатусИдеи = Статус;
			СтрокаТЧ.ОписаниеИдеи = ПорядокВоспроизведения;
			СтрокаТЧ.ИндексКартинкиСтатусаИдеи = ИндексКартинкиСтатусаИдеиОшибки(Статус);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		УстановитьДоступностьКомандРаботыСОшибками();
		
		МассивОбновляемыхПолей.Добавить(Элементы.ИдеиИндексКартинкиСтатусаИдеи);
		МассивОбновляемыхПолей.Добавить(Элементы.ИдеиИдеяСсылкаСтатус);
		МассивОбновляемыхПолей.Добавить(Элементы.ИдеиИдеяПодробноеОписание);
	КонецЕсли;
	
	Если Элементы.Идеи.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.Идеи.ТекущиеДанные.Идея = Ошибка Тогда
			МассивОбновляемыхПолей.Добавить(Элементы.ПодробноеОписаниеИдеи);
			МассивОбновляемыхПолей.Добавить(Элементы.РеализацияИдеи);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииИдеи(ИмяСобытия, Параметр, МассивОбновляемыхПолей)
	
	Идея = Параметр.Ссылка;
	Статус = Параметр.Статус;
	ОписаниеИдеи = Параметр.ПодробноеОписание;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Идея", Идея);
	
	МассивСтрок = Объект.ИдеиИОшибки.НайтиСтроки(СтруктураОтбора);
	
	ЕстьИзменения = Ложь;
	
	Для Каждого СтрокаТЧ из МассивСтрок Цикл
		Если СтрокаТЧ.СтатусИдеи <> Статус Тогда
			СтрокаТЧ.СтатусИдеи = Статус;
			СтрокаТЧ.ОписаниеИдеи = ОписаниеИдеи;
			СтрокаТЧ.ИндексКартинкиСтатусаИдеи = ИндексКартинкиСтатусаИдеиОшибки(Статус);
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		УстановитьДоступностьКомандРаботыСИдеями();
		
		МассивОбновляемыхПолей.Добавить(Элементы.ИдеиИндексКартинкиСтатусаИдеи);
		МассивОбновляемыхПолей.Добавить(Элементы.ИдеиИдеяСсылкаСтатус);
		МассивОбновляемыхПолей.Добавить(Элементы.ИдеиИдеяПодробноеОписание);
	КонецЕсли;
	
	Если Элементы.Идеи.ТекущиеДанные <> Неопределено Тогда
		Если Элементы.Идеи.ТекущиеДанные.Идея = Идея Тогда
			МассивОбновляемыхПолей.Добавить(Элементы.ПодробноеОписаниеИдеи);
			МассивОбновляемыхПолей.Добавить(Элементы.РеализацияИдеи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПорядокВоспроизведенияОшибки(Ошибка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ошибка, "ПорядокВоспроизведения");
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатусИдей(Статус)
	
	МассивИдей = Новый Массив;
	
	ВыделенныеСтроки = Элементы.Идеи.ВыделенныеСтроки;
	
	Для Каждого Идентификатор из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ИдеиИОшибки.НайтиПоИдентификатору(Идентификатор);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			Если ТипЗнч(СтрокаТаблицы.Идея) = Тип("СправочникСсылка.Идеи")
				И ЗначениеЗаполнено(СтрокаТаблицы.Идея) Тогда
				МассивИдей.Добавить(СтрокаТаблицы.Идея);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивИдей.Количество()>0 Тогда
		
		ОбработанныеИдеи = УстановитьСтатусИдейСервер(МассивИдей, Статус);
		КоличествоОбработанных = ОбработанныеИдеи.Количество();
		
		Если КоличествоОбработанных>0 Тогда
			
			Для Каждого Идея из ОбработанныеИдеи Цикл
				
				СтруктураОтбора = Новый Структура("Идея", Идея);
				МассивСтрок = Объект.ИдеиИОшибки.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого СтрокаТЧ из МассивСтрок Цикл
					СтрокаТЧ.СтатусИдеи = Статус;
				КонецЦикла;
				
			КонецЦикла;
			
			ТекстЗаголовка = НСтр("ru='Обработка идей'");
			ТекстСообщения = НСтр("ru='Обработано идей: %1%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", КоличествоОбработанных);
			ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, Библиотекакартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаголовокИдеи = ОбновитьЗаголовокИдеи(Объект.ИдеиИОшибки, СтатусыРеализованныхИдей); 
	
КонецПроцедуры

&НаСервере
Функция УстановитьСтатусИдейСервер(Идеи, Статус)
	
	МассивОбработанных = Новый Массив;
	
	Для Каждого Идея из Идеи Цикл
		
		Попытка
			ИдеяОбъект = Идея.ПолучитьОбъект();
			Если ИдеяОбъект.Статус <> Статус Тогда
				 ИдеяОбъект.Статус = Статус;
				 ИдеяОбъект.Записать();
				 МассивОбработанных.Добавить(Идея);
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru='Не удалось изменить статус идеи %1% по причине: %2%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", Идея);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2%", ОписаниеОшибки());
			Сообщить(ТекстСообщения);
		КонецПопытки;		
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыИдей();
	
	Возврат МассивОбработанных;
	
КонецФункции

&НаСервере
Процедура УстановитьШрифтФорматированногоТекста()

	ШрифтФорматированногоТекста = РаботаСФорматированнымДокументом.ШрифтФорматированногоТекста();
	Элементы.ЦелиПроекта.Шрифт = ШрифтФорматированногоТекста;
	Элементы.КонцепцияПроекта.Шрифт = ШрифтФорматированногоТекста;
	Элементы.ФорматированноеОписание.Шрифт = ШрифтФорматированногоТекста;
	Элементы.Заметки.Шрифт = ШрифтФорматированногоТекста;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоИПоказатьНаличиеОшибок(ОбъектПроверки = Неопределено)

	НужноЗаполнитьКоличествоОшибок = Ложь;
	
	ОбъектыПроверки = Новый Массив;
	Если ОбъектПроверки = Неопределено Тогда
		НужноЗаполнитьКоличествоОшибок = Истина;
		ДобавитьГиперссылкиИзТаблицы(Объект.Процессы, ОбъектыПроверки);
		ДобавитьГиперссылкиИзТаблицы(Объект.Функции, ОбъектыПроверки);
		ДобавитьГиперссылкиИзТаблицы(Объект.ПрофилиПользователей, ОбъектыПроверки);
		ДобавитьГиперссылкиИзТаблицы(Объект.РазделыПроекта, ОбъектыПроверки, "Раздел");
		ЗаполнитьСтатусыПроблемОбработчиковОбновления();
		ЗаполнитьКоличествоПроблемКлючевыхОпераций();
	ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("Массив") Тогда
		Если ОбъектПроверки.Количество() = 0
			Или ТипЗнч(ОбъектПроверки[0]) <> Тип("СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы") Тогда
			ТекстИслючения = НСтр("ru = 'Неправильное значение параметра ОбъектПроверки процедуры ЗаполнитьКоличествоИПоказатьНаличиеОшибок'");
			ВызватьИсключение ТекстИслючения;
		КонецЕсли;
		ЗаполнитьСтатусыПроблемОбработчиковОбновления(ОбъектПроверки);
	ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("СправочникСсылка.ОбработчикиОбновленияИнформационнойБазы") Тогда
		ЗаполнитьСтатусыПроблемОбработчиковОбновления(ОбъектПроверки);
	ИначеЕсли ТипЗнч(ОбъектПроверки) = Тип("СправочникСсылка.КлючевыеОперации") Тогда
		ЗаполнитьКоличествоПроблемКлючевыхОпераций(ОбъектПроверки);
	Иначе
		НужноЗаполнитьКоличествоОшибок = Истина;
		ОбъектыПроверки.Добавить(ОбъектПроверки);
	КонецЕсли; 
	
	Если НужноЗаполнитьКоличествоОшибок Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыПроверкиОбъектов.ОбъектПроверки,
		|	КОЛИЧЕСТВО(РезультатыПроверкиОбъектов.ОбъектПроверки) КАК КоличествоОшибок
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиОбъектов КАК РезультатыПроверкиОбъектов
		|ГДЕ
		|	РезультатыПроверкиОбъектов.ОбъектПроверки В(&ОбъектыПроверки)
		|	И РезультатыПроверкиОбъектов.ПравилоПроверкиОбъектов.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПравилПроверки.Ошибка)
		|	И НЕ РезультатыПроверкиОбъектов.Исключение
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатыПроверкиОбъектов.ОбъектПроверки";
		
		Запрос.УстановитьПараметр("ОбъектыПроверки", ОбъектыПроверки);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.ОбъектПроверки) = Тип("СправочникСсылка.Процессы") Тогда
				ЗаполнитьКоличествоОшибокОбъекта(Выборка.ОбъектПроверки, Выборка.КоличествоОшибок, Объект.Процессы);
			ИначеЕсли ТипЗнч(Выборка.ОбъектПроверки) = Тип("СправочникСсылка.ФункцииСистемы") Тогда
				ЗаполнитьКоличествоОшибокОбъекта(Выборка.ОбъектПроверки, Выборка.КоличествоОшибок, Объект.Функции);
			ИначеЕсли ТипЗнч(Выборка.ОбъектПроверки) = Тип("СправочникСсылка.ПрофилиПользователей") Тогда
				ЗаполнитьКоличествоОшибокОбъекта(Выборка.ОбъектПроверки, Выборка.КоличествоОшибок, Объект.ПрофилиПользователей);
			ИначеЕсли ТипЗнч(Выборка.ОбъектПроверки) = Тип("СправочникСсылка.РазделыПроекта") Тогда
				ЗаполнитьКоличествоОшибокОбъекта(Выборка.ОбъектПроверки, Выборка.КоличествоОшибок, Объект.РазделыПроекта, "Раздел");
				ЗаполнитьКоличествоОшибокВДеревераделов(Выборка.ОбъектПроверки, Выборка.КоличествоОшибок, РазделыПроекта);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

	ПоказатьНаличиеОшибок(Объект, Элементы, БиблиотекаКартинок.Предупреждение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьГиперссылкиИзТаблицы(Таблица, СписокГиперссылок, ИмяПоля = "", ОчищатьКоличествоОшибок = Истина)

	Если ИмяПоля = "" Тогда
		ИмяПоля = "Гиперссылка";
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Таблица Цикл
		
		Если ОчищатьКоличествоОшибок Тогда
			ЭлементКоллекции.КоличествоОшибок = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементКоллекции[ИмяПоля]) Тогда
			СписокГиперссылок.Добавить(ЭлементКоллекции[ИмяПоля]);
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоОшибокОбъекта(ОбъектПроверки, КоличествоОшибок, Таблица, ИмяПоля="")

	Если ИмяПоля = "" Тогда
		ИмяПоля = "Гиперссылка";
	КонецЕсли;
		
	СтруктураПоиска = Новый Структура(ИмяПоля, ОбъектПроверки);
 	СписокСтрок = Таблица.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 Тогда
		СписокСтрок[0].КоличествоОшибок = КоличествоОшибок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоОшибокВДеревераделов(ОбъектПроверки, КоличествоОшибок, РазделыПроекта);
	
	СтрокиДерева = РазделыПроекта.ПолучитьЭлементы();
	
	ЗаполнитьКоличествоОшибокВСтрокеДерева(ОбъектПроверки, КоличествоОшибок, СтрокиДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоОшибокВСтрокеДерева(ОбъектПроверки, КоличествоОшибок, СтрокиДерева)
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если СтрокаДерева.РазделПроекта = ОбъектПроверки Тогда
			СтрокаДерева.КоличествоОшибок = КоличествоОшибок;
			Возврат;
		КонецЕсли;
		
		ЗаполнитьКоличествоОшибокВСтрокеДерева(ОбъектПроверки, КоличествоОшибок, СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьНаличиеОшибокВТаблицеСтраницы(Таблица, СтраницаТаблицы, Картинка)

	ЕстьОшибкиВТаблице = Ложь;
	Для каждого ДанныеСтроки Из Таблица Цикл
		Если ДанныеСтроки.КоличествоОшибок <> 0 Тогда
			ЕстьОшибкиВТаблице = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибкиВТаблице Тогда
		СтраницаТаблицы.Картинка = Картинка;
	Иначе
		СтраницаТаблицы.Картинка = Новый Картинка;
	КонецЕсли;

	Возврат ЕстьОшибкиВТаблице;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьНаличиеОшибокВТаблицеОбработчикиОбновления(Таблица, СтраницаТаблицы, Картинка)
	
	ЕстьОшибкиВТаблице = Ложь;
	Для каждого ДанныеСтроки Из Таблица Цикл
		Если Не ЗначениеЗаполнено(ДанныеСтроки.СтатусПроблемы)
			Или ДанныеСтроки.СтатусПроблемы = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ")
			Или ДанныеСтроки.СтатусПроблемы = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики") Тогда
			ЕстьОшибкиВТаблице = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибкиВТаблице Тогда
		СтраницаТаблицы.Картинка = Картинка;
	Иначе
		СтраницаТаблицы.Картинка = Новый Картинка;
	КонецЕсли;

	Возврат ЕстьОшибкиВТаблице;
	
КонецФункции

&НаСервере
Процедура ОбновитьКоличествоОшибокНаСервере(ИмяТаблицы, ИмяПоля="")

	Если ИмяПоля = "" Тогда
		ИмяПоля = "Гиперссылка";
	КонецЕсли;
	
	ТекущаяСтрока = Элементы[ИмяТаблицы].ТекущаяСтрока;
	
	Если ИмяТаблицы = "РазделыПроекта" Тогда
		ТекущиеДанные = РазделыПроекта.НайтиПоИдентификатору(ТекущаяСтрока);
	Иначе
		ТекущиеДанные = Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	ТекущиеДанные.КоличествоОшибок = 0;
	Если ЗначениеЗаполнено(ТекущиеДанные[ИмяПоля]) Тогда
		ЗаполнитьКоличествоИПоказатьНаличиеОшибок(ТекущиеДанные[ИмяПоля]);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатыПроверкиОбъектов(ИмяТаблицы)

	Если ИмяТаблицы = "РазделыПроекта" Тогда
		ИмяПоля = "РазделПроекта";
	Иначе
		ИмяПоля = "Гиперссылка";
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные[ИмяПоля])
		ИЛИ ТекущиеДанные.КоличествоОшибок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ОбъектПроверки", ТекущиеДанные[ИмяПоля]);
	СтруктураОтбора.Вставить("Важность", ПредопределенноеЗначение("Перечисление.ВажностьПравилПроверки.Ошибка"));
	СтруктураОтбора.Вставить("Исключение", Ложь);
	
	ПараметрыФормы = Новый Структура;
 	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
 	ПараметрыФормы.Вставить("ОбъектПроверкиВЗаголовке", ТекущиеДанные[ИмяПоля]);
	ОткрытьФорму("РегистрСведений.РезультатыПроверкиОбъектов.ФормаСписка", ПараметрыФормы,, ТекущиеДанные[ИмяПоля]);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтрокиПроектныхРешений(ИмяТаблицы, ТекущиеДанные, ИмяПоля, СтандартнаяОбработка)

	Если Найти(ИмяПоля, "КоличествоОшибок") <> 0 Тогда
		ОткрытьРезультатыПроверкиОбъектов(ИмяТаблицы);
	ИначеЕсли Найти(ИмяПоля, "Гиперссылка") <> 0 И ЗначениеЗаполнено(ТекущиеДанные.Гиперссылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Гиперссылка);
	КонецЕсли; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьЗаголовокИдеи(ИдеиИОшибки, СтатусыРеализованныхИдей)
	
	ВсегоИдейОшибок = 0;
	РеализованоИдейОшибок = 0;
	Для каждого ДанныеСтроки Из ИдеиИОшибки Цикл
		ВсегоИдейОшибок = ВсегоИдейОшибок + 1;
		Если СтатусыРеализованныхИдей.НайтиПоЗначению(ДанныеСтроки.СтатусИдеи) <> Неопределено Тогда
			РеализованоИдейОшибок = РеализованоИдейОшибок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсегоИдейОшибок <> 0 Тогда
		ЗаголовокИдеи = Формат(РеализованоИдейОшибок, "ЧН=0") + "/" + Строка(ВсегоИдейОшибок);
	Иначе
		ЗаголовокИдеи = "";
	КонецЕсли;
	
	Возврат ЗаголовокИдеи;
	
КонецФункции

&НаСервере
Функция УстановитьОтветственногоСервер(Таблица, ВыделенныеСтроки, Ответственный) Экспорт

	КоличествоИзмененныхОбъектов = 0;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
	
		СтрокаТЧ = Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Гиперссылка) Тогда
			Продолжить;
		КонецЕсли; 
		
		ОбъектМодификации = СтрокаТЧ.Гиперссылка.ПолучитьОбъект();
		Если ОбъектМодификации.Ответственный = Ответственный Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМодификации.Ответственный = Ответственный;
		
		Если СтрокаТЧ.Свойство("Ответственный") Тогда
			СтрокаТЧ.Ответственный = Ответственный;
		КонецЕсли;
		
		Попытка
			ОбъектМодификации.Заблокировать();
			ОбъектМодификации.Записать();
			КоличествоИзмененныхОбъектов = КоличествоИзмененныхОбъектов + 1;
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка ответственного'", Метаданные.ОсновнойЯзык.КодЯзыка),
				УровеньЖурналаРегистрации.Ошибка,, ОбъектМодификации, ОписаниеОшибки());
		КонецПопытки; 
	
	КонецЦикла; 
	
	Возврат КоличествоИзмененныхОбъектов;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьРаботыСОтдельнымХранилищем()
	
	ТекущийРежимРазработки = ?(ЗначениеЗаполнено(Объект.Ветка),  
							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ветка, "РежимРазработки"), 
							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "РежимРазработки"));
	ВХранилищеКонфигураций = ТекущийРежимРазработки = Перечисления.РежимРазработки.ВХранилище;
	
	Если Элементы.Найти("СоздатьХранилищеТехническогоПроекта") <> Неопределено Тогда
		Элементы.СоздатьХранилищеТехническогоПроекта.Видимость = ВХранилищеКонфигураций;
	КонецЕсли;
	
	Элементы.ПодключитьсяКХранилищу.Видимость = ВХранилищеКонфигураций;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРаботыСРеквизитамиПубликации(Элементы, Публикуется)
	
	Элементы.ДополнительныйПубликуемыйФайл.Доступность = Публикуется;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиКомментарийНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
		ТекущиеДанные.Комментарий = РезультатЗакрытия;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатусаСервер()
	
	УстановитьДоступностьЭлементовПланирования(Элементы, Объект.Статус, ДоступноУправлениеТехническимПроектом);
	УстановитьДоступностьРедактированияСоставаИдей();
	УстановитьДоступностьКомандБуфераОбмена();
	УстановитьДоступностьФлагаПубликуется();
	ЗаполнитьДатуНачала();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуНачала()
	
	Если НЕ ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) 
		И Объект.Статус = Перечисления.СтатусыТехническихПроектов.Активен Тогда
		
		Объект.ПлановаяДатаНачала = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСтатусЦелевойЗадачи()
	
	Если СтатусЦелевойЗадачи = Перечисления.СтатусыЦелевыхЗадач.Запланирована Тогда
		Элементы.ГруппаОтображениеСтатусаЦелевойЗадачи.ТекущаяСтраница = Элементы.СтраницаЦелеваяЗадачаЗапланирована;
	ИначеЕсли СтатусЦелевойЗадачи = Перечисления.СтатусыЦелевыхЗадач.Активна Тогда
		Элементы.ГруппаОтображениеСтатусаЦелевойЗадачи.ТекущаяСтраница = Элементы.СтраницаЦелеваяЗадачаАктивна;
	ИначеЕсли СтатусЦелевойЗадачи = Перечисления.СтатусыЦелевыхЗадач.Выполнена Тогда
		Элементы.ГруппаОтображениеСтатусаЦелевойЗадачи.ТекущаяСтраница = Элементы.СтраницаЦелеваяЗадачаВыполнена;
	ИначеЕсли СтатусЦелевойЗадачи = Перечисления.СтатусыЦелевыхЗадач.Отменена Тогда
		Элементы.ГруппаОтображениеСтатусаЦелевойЗадачи.ТекущаяСтраница = Элементы.СтраницаЦелеваяЗадачаОтменена;
	Иначе
		Элементы.ГруппаОтображениеСтатусаЦелевойЗадачи.ТекущаяСтраница = Элементы.СтраницаЦелеваяЗадачаОтсутствует;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЦелевойЗадачиСервер()
	
	СтатусЦелевойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЦелеваяЗадача, "Статус");
	ОтобразитьСтатусЦелевойЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьОшибкуПоАудиту(Команда)
	
	ИмяТЧ = "ОбработчикиОбновления";
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Выделите строки, по которым нужно зарегистрировать ошибку.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ИмяТЧ);
		Возврат;
	КонецЕсли;	
	
	МассивОбъектов = Новый Массив;
	Для Каждого ИндексСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект[ИмяТЧ].НайтиПоИдентификатору(ИндексСтроки);
		МассивОбъектов.Добавить(Строкатаблицы.Гиперссылка);
	КонецЦикла;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ТехническийПроект", Объект.Ссылка);
	ЗначенияЗаполнения.Вставить(ИмяТЧ, МассивОбъектов);
	ЗначенияЗаполнения.Вставить("МетодВыявленияОшибки", ПредопределенноеЗначение("Перечисление.МетодыВыявленияОшибок.АудитКода"));
	
	ОткрытьФорму("Справочник.Ошибки.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыПроблемОбработчиковОбновления(Обработчик = Неопределено)
	
	Если Объект.ОбработчикиОбновления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Обработчик <> Неопределено
		И Не ЗначениеЗаполнено(Обработчик) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Обработчик КАК Обработчик,
	|	ВЫБОР
	|		КОГДА ПорядокПомещенияОбработчиковВОчередь.Ссылка В (ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ), ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики))
	|			ТОГДА ПорядокПомещенияОбработчиковВОчередь.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)
	|	КОНЕЦ КАК СтатусПроблемы
	|ПОМЕСТИТЬ Проблемы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Конфликты.Обработчик1 КАК Обработчик,
	|		МИНИМУМ(Конфликты.ПорядокПомещенияВОчередь.Порядок) КАК СтатусПорядок
	|	ИЗ
	|		РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК Конфликты
	|	ГДЕ
	|		Конфликты.Обработчик1 В(&Обработчики)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Конфликты.Обработчик1) КАК ВложенныйЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ПорядокПомещенияОбработчиковВОчередь КАК ПорядокПомещенияОбработчиковВОчередь
	|		ПО ВложенныйЗапрос.СтатусПорядок = ПорядокПомещенияОбработчиковВОчередь.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обработчики.Ссылка КАК Обработчик,
	|	ВЫБОР
	|		КОГДА Обработчики.ПометкаУдаления
	|				ИЛИ Обработчики.НачальноеЗаполнение
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)
	|		КОГДА НЕ Обработчики.МонопольныйРежимОправдан
	|				И Обработчики.РежимВыполнения = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОбработчиковОбновления.Монопольно)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики)
	|		КОГДА Проблемы.СтатусПроблемы ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА Обработчики.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ)
	|				КОНЕЦ
	|		ИНАЧЕ Проблемы.СтатусПроблемы
	|	КОНЕЦ КАК СтатусПроблемы
	|ИЗ
	|	Справочник.ОбработчикиОбновленияИнформационнойБазы КАК Обработчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Проблемы КАК Проблемы
	|		ПО Обработчики.Ссылка = Проблемы.Обработчик
	|ГДЕ
	|	Обработчики.Ссылка В(&Обработчики)";
	
	Если Обработчик <> Неопределено Тогда
		Запрос.УстановитьПараметр("Обработчики", Обработчик);
	Иначе
		Запрос.УстановитьПараметр("Обработчики", Объект.ОбработчикиОбновления.Выгрузить().ВыгрузитьКолонку("Гиперссылка"));
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.ОбработчикиОбновления.НайтиСтроки(Новый Структура("Гиперссылка", Выборка.Обработчик));
		
		Для Каждого СтрМас из НайденныеСтроки Цикл
			
			СтрМас.СтатусПроблемы = Выборка.СтатусПроблемы;	
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоПроблемКлючевыхОпераций(КлючеваяОперация = Неопределено)
	
	РедактируемыеКлючевыеОперации = Новый ТаблицаЗначений;
	Колонки = РедактируемыеКлючевыеОперации.Колонки;
	Колонки.Добавить("КлючеваяОперация", Новый ОписаниеТипов("СправочникСсылка.КлючевыеОперации"));
	Колонки.Добавить("ФактическоеВремя", Новый ОписаниеТипов("Число"));
	Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	
	Если КлючеваяОперация = Неопределено Тогда
		СтрокиКлючевыхОпераций = Объект.КлючевыеОперации;
	Иначе
		Отбор = Новый Структура("КлючеваяОперация", КлючеваяОперация);
		СтрокиКлючевыхОпераций = Объект.КлючевыеОперации.НайтиСтроки(Отбор);
	КонецЕсли;
	
	Для каждого СтрокаКлючевойОперации Из СтрокиКлючевыхОпераций Цикл
		СтрокаТаблицы = РедактируемыеКлючевыеОперации.Добавить();
		СтрокаТаблицы.КлючеваяОперация = СтрокаКлючевойОперации.КлючеваяОперация;
		СтрокаТаблицы.ФактическоеВремя = СтрокаКлючевойОперации.ФактическоеВремя;
		СтрокаТаблицы.Идентификатор = СтрокаКлючевойОперации.ПолучитьИдентификатор();
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РедактируемыеКлючевыеОперации.КлючеваяОперация КАК КлючеваяОперация,
		|	РедактируемыеКлючевыеОперации.ФактическоеВремя КАК ФактическоеВремя,
		|	РедактируемыеКлючевыеОперации.Идентификатор КАК Идентификатор
		|ПОМЕСТИТЬ РедактируемыеКлючевыеОперации
		|ИЗ
		|	&РедактируемыеКлючевыеОперации КАК РедактируемыеКлючевыеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РедактируемыеКлючевыеОперации.Идентификатор КАК Идентификатор,
		|	ВЫБОР
		|		КОГДА РедактируемыеКлючевыеОперации.ФактическоеВремя > 0
		|				И РедактируемыеКлючевыеОперации.ФактическоеВремя > КлючевыеОперации.ЦелевоеВремя
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоОшибок
		|ИЗ
		|	РедактируемыеКлючевыеОперации КАК РедактируемыеКлючевыеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючевыеОперации КАК КлючевыеОперации
		|		ПО РедактируемыеКлючевыеОперации.КлючеваяОперация = КлючевыеОперации.Ссылка");
	Запрос.УстановитьПараметр("РедактируемыеКлючевыеОперации", РедактируемыеКлючевыеОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = Объект.КлючевыеОперации.НайтиПоИдентификатору(Выборка.Идентификатор);
		СтрокаТаблицы.КоличествоОшибок = Выборка.КоличествоОшибок;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьДанныеФормы()

	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	ДанныеФормыРазблокированы = Истина;
	РазблокироватьДанныеФормыДляРедактирования();

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьФлагаПубликуется()
	
	Если ДоступноУправлениеТехническимПроектом Тогда
		Элементы.Публикуется.Доступность = Истина;
	Иначе
		Элементы.Публикуется.Доступность =
			(Объект.Статус = Перечисления.СтатусыТехническихПроектов.НеЗапланирован);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастрокитьЭлементыФормыПоТипуИспользуемыхЗадач()
	
	ПредставлениеТекущегоЭтапаПроцесса = ЗадачиПроцессов.ПредставлениеТекущегоЭтапаПроцесса(Объект.Ссылка);
		
	Если ПредставлениеТекущегоЭтапаПроцесса = "" Тогда
		Элементы.ПредставлениеТекущегоЭтапаПроцесса.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнуюИнформациюКлючевыхОпераций(КлючеваяОперация = Неопределено)
	
	КлючевыеОперацииТЧ = Объект.КлючевыеОперации;
	
	Если КлючевыеОперацииТЧ.Количество() > 0 Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	КлючевыеОперации.Владелец КАК ОбъектМетаданных,
			|	КлючевыеОперации.Ссылка КАК КлючеваяОперация,
			|	КлючевыеОперации.ЦелевоеВремя КАК ЦелевоеВремя
			|ИЗ
			|	Справочник.КлючевыеОперации КАК КлючевыеОперации
			|ГДЕ
			|	КлючевыеОперации.Ссылка В(&КлючевыеОперации)");
		
		Если КлючеваяОперация <> Неопределено Тогда
			КлючевыеОперацииПараметр = КлючеваяОперация;
		Иначе
			КлючевыеОперацииПараметр = КлючевыеОперацииТЧ.Выгрузить().ВыгрузитьКолонку("КлючеваяОперация");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КлючевыеОперации", КлючевыеОперацииПараметр);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("КлючеваяОперация", Выборка.КлючеваяОперация);
			НайденныеОперации = КлючевыеОперацииТЧ.НайтиСтроки(Отбор);
			
			Для каждого НайденнаяСтрока Из НайденныеОперации Цикл
				ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка);
				УстановитьПревышениеЦелевогоВремениКлючевойОперации(НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого Строка Из КлючевыеОперацииТЧ Цикл
			УстановитьПризнакНаличияОписанияКлючевойОперации(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПревышениеЦелевогоВремениКлючевойОперации(ТекущиеДанные)
	
	ТекущиеДанные.ПревышениеВремени = ТекущиеДанные.ФактическоеВремя - ТекущиеДанные.ЦелевоеВремя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПризнакНаличияОписанияКлючевойОперации(ТекущиеДанные)
	
	ТекущиеДанные.ЕстьОписание = ?(ПустаяСтрока(ТекущиеДанные.Описание), 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКлючевойОперации(ВыбранноеЗначение = Неопределено)
	
	ТекущиеДанные = Элементы.КлючевыеОперации.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ВыбранноеЗначение = Неопределено Или ТекущиеДанные.КлючеваяОперация <> ВыбранноеЗначение Тогда
			ТекущиеДанные.ПревышениеВремени = 0;
			ТекущиеДанные.ФактическоеВремя = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ОбщегоНазначения.СкопироватьСтрокиВБуферОбмена(Объект.ИдеиИОшибки, Элементы.Идеи.ВыделенныеСтроки, "ИдеиИОшибки");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	СтрокиИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	Если СтрокиИзБуфераОбмена.Источник = "ИдеиИОшибки" Тогда
		СтрокиДляВставки = СтрокиИзБуфераОбмена.Данные;
	Иначе
		Возврат
	КонецЕсли;
	
	Для каждого ВставляемаяСтрока Из СтрокиДляВставки Цикл
		НайденныеСтроки = Объект.ИдеиИОшибки.НайтиСтроки(Новый Структура("Идея", ВставляемаяСтрока.Идея));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.ИдеиИОшибки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВставляемаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	ПустойБуферОбмена = ОбщегоНазначения.ПустойБуферОбмена("ИдеиИОшибки");
	
	Элементы.ИдеиВставитьСтроки.Доступность = НЕ ПустойБуферОбмена И ДоступноУправлениеИдеями;
	Элементы.ИдеиКонтекстноеМенюВставитьСтроки.Доступность = НЕ ПустойБуферОбмена И ДоступноУправлениеИдеями;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	Элементы.ИдеиВставитьСтроки.Доступность = ДоступноУправлениеИдеями;
	Элементы.ИдеиКонтекстноеМенюВставитьСтроки.Доступность = ДоступноУправлениеИдеями;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОВставкеСтрок(КоличествоВставленных) Экспорт
	
	ТекстСообщения = НСтр("ru='Из буфера обмена вставлено строк (%КоличествоВставленных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВставленных%", КоличествоВставленных);
	
	ТекстЗаголовка = НСтр("ru='Строки вставлены'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОКопированииСтрок(КоличествоВыделенных) Экспорт
	
	ТекстСообщения = НСтр("ru='В буфер обмена скопировано строк (%КоличествоВыделенных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВыделенных%", КоличествоВыделенных);
	
	ТекстЗаголовка = НСтр("ru='Строки скопированы'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	Оповестить("КопированиеСтрокВБуферОбмена");
	
КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакСтрокаЗаписана()
	
	Для Каждого СтрокаТЧ из Объект.ИдеиИОшибки Цикл
		СтрокаТЧ.СтрокаЗаписана = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкиРекурсивно(Строки, Отметка)
	
	Для Каждого Строка из Строки Цикл
		Строка.Использование = Отметка;
		
		Если Не Отметка Тогда
			Строка.КОличествоОшибок = 0;
		КонецЕсли;
		
		УстановитьОтметкиРекурсивно(Строка.ПолучитьЭлементы(), Отметка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтметкиРодителейРекурсивно(СтрокаДерева)
	
	Родитель = СтрокаДерева.ПолучитьРодителя();
	
	Если Родитель <> Неопределено Тогда
		
		Подчиненные = Родитель.ПолучитьЭлементы();
		
		ЕстьИспользуемые = Ложь;
		ЕстьНеиспользуемые = Ложь;
		
		Для Каждого Элемент из Подчиненные Цикл
			Если Элемент.Использование = 1 Тогда
				ЕстьИспользуемые = Истина;
			ИначеЕсли Элемент.Использование = 0 Тогда
				ЕстьНеиспользуемые = Истина;
			Иначе
				ЕстьИспользуемые = Истина;
				ЕстьНеиспользуемые = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИспользуемые И ЕстьНеиспользуемые Тогда
			Родитель.Использование = 2;
		ИначеЕсли Не ЕстьИспользуемые Тогда
			Родитель.Использование = 0;
		Иначе
			Родитель.Использование = 1;
		КонецЕсли;
		
		УстановитьОтметкиРодителейРекурсивно(Родитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкиГруппРекурсивно(Строки)
	
	Для Каждого Строка из Строки Цикл
		
		Если Не Строка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбораИспользуемых = Новый Структура;
		СтруктураОтбораНеиспользуемых = Новый Структура;
		
		СтруктураОтбораИспользуемых.Вставить("Использование", 1);
		СтруктураОтбораИспользуемых.Вставить("ЭтоГруппа", Ложь);
		
		СтруктураОтбораНеиспользуемых.Вставить("Использование", 0);
		СтруктураОтбораНеиспользуемых.Вставить("ЭтоГруппа", Ложь);
		
		МассивИспользуемыхСтрок = Строка.Строки.НайтиСтроки(СтруктураОтбораИспользуемых, Истина);
		МассивНеиспользуемыхСтрок = Строка.Строки.НайтиСтроки(СтруктураОтбораНеиспользуемых, Истина);
		
		Если МассивИспользуемыхСтрок.Количество()=0 Тогда
			Строка.Использование = 0;
		ИначеЕсли МассивИспользуемыхСтрок.Количество()>0 И МассивНеиспользуемыхСтрок.Количество()=0 Тогда
			Строка.Использование = 1;
		Иначе
			Строка.Использование = 2;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРазделовПроекта()
	
	МассивРазделов = Новый Массив;
	
	Для Каждого СтрокаТЧ из Объект.РазделыПроекта Цикл
		МассивРазделов.Добавить(СтрокаТЧ.Раздел);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		
		ДеревоРазделов = Справочники.РазделыПроекта.ДеревоРазделовПроекта(Объект.Владелец);
		
		ТипКолонкиКОличествоОшибок = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный));
		ДеревоРазделов.Колонки.Добавить("КоличествоОшибок", ТипКолонкиКоличествоОшибок);
		УстановитьОтметкиИспользованияРазделов(МассивРазделов, ДеревоРазделов);
		ЗначениеВРеквизитФормы(ДеревоРазделов, "РазделыПроекта");
	Иначе
		РазделыПроекта.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкиИспользованияРазделов(МассивРазделов, ДеревоРазделов)
	
	Если ТипЗнч(МассивРазделов) = Тип("Массив") Тогда
		
		Для Каждого Раздел из МассивРазделов Цикл
			СтруктураОтбора = Новый Структура("РазделПроекта", Раздел);
			МассивСтрок = ДеревоРазделов.Строки.НайтиСтроки(СтруктураОтбора, Истина);
			
			Если МассивСтрок.Количество()>0 Тогда
				СтрокаДерева = МассивСтрок[0];
				СтрокаДерева.Использование = 1;
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьОтметкиГруппРекурсивно(ДеревоРазделов.Строки);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПеренестиРазделыПроектаВОбъект(ОбъектДляЗаписи=Неопределено)
	
	Если ОбъектДляЗаписи = Неопределено Тогда
		ОбъектДляЗаписи = Объект;
	КонецЕсли;
	
	ОбъектДляЗаписи.РазделыПроекта.Очистить();
	
	ВыбранныеРазделы = Новый Массив;
	
	ЗаполнитьВыбранныеРазделы(РазделыПроекта.ПолучитьЭлементы(), ВыбранныеРазделы);
	
	Для Каждого ВыбранныйРаздел из ВыбранныеРазделы Цикл
		НоваяСтрока = ОбъектДляЗаписи.РазделыПроекта.Добавить();
		НоваяСтрока.Раздел = ВыбранныйРаздел;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыбранныеРазделы(СтрокиДерева, ВыбранныеРазделы)
	
	Для Каждого СтрокаДерева из СтрокиДерева Цикл
		
		Если СтрокаДерева.Использование = 1 И НЕ СтрокаДерева.ЭтоГруппа Тогда
			ВыбранныеРазделы.Добавить(СтрокаДерева.РазделПроекта);
		КонецЕсли;
		
		ЗаполнитьВыбранныеРазделы(СтрокаДерева.ПолучитьЭлементы(), ВыбранныеРазделы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСпискаРезультатыПроверки(Объект, РезультатыПроверки)
	
	ОбъектыПроверки = Новый Массив;
	
	ДобавитьГиперссылкиИзТаблицы(Объект.Процессы, ОбъектыПроверки,, Ложь);
	ДобавитьГиперссылкиИзТаблицы(Объект.Функции, ОбъектыПроверки,, Ложь);
	ДобавитьГиперссылкиИзТаблицы(Объект.ПрофилиПользователей, ОбъектыПроверки,, Ложь);
	ДобавитьГиперссылкиИзТаблицы(Объект.РазделыПроекта, ОбъектыПроверки, "Раздел", Ложь);
	
	РезультатыПроверки.Параметры.УстановитьЗначениеПараметра("ОбъектыПроверки", ОбъектыПроверки);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьНаличиеОшибок(Объект, Элементы, Картинка)
	
	ЕстьОшибкиВТаблице = ПоказатьНаличиеОшибокВТаблицеСтраницы(Объект.Процессы, Элементы.ГруппаПроцессы, Картинка);
	ЕстьОшибкиВТаблице = ПоказатьНаличиеОшибокВТаблицеСтраницы(Объект.ПрофилиПользователей, Элементы.ГруппаПрофилиПользователей, Картинка) ИЛИ ЕстьОшибкиВТаблице;
	ЕстьОшибкиВТаблице = ПоказатьНаличиеОшибокВТаблицеСтраницы(Объект.РазделыПроекта, Элементы.ГруппаРазделыПроекта, Картинка) ИЛИ ЕстьОшибкиВТаблице;
	ЕстьОшибкиВТаблице = ПоказатьНаличиеОшибокВТаблицеОбработчикиОбновления(Объект.ОбработчикиОбновления, Элементы.ГруппаОбработчикиОбновления, Картинка) ИЛИ ЕстьОшибкиВТаблице;
	ЕстьОшибкиВТаблице = ПоказатьНаличиеОшибокВТаблицеСтраницы(Объект.КлючевыеОперации, Элементы.ГруппаКлючевыеОперации, Картинка) ИЛИ ЕстьОшибкиВТаблице;
	
	Если ЕстьОшибкиВТаблице Тогда
		Элементы.ПроектныеРешения.Картинка = Картинка;
		Элементы.ГруппаРезультатыПроверкиОбъектов.Картинка = Картинка;
	Иначе
		Элементы.ПроектныеРешения.Картинка = Новый Картинка;
		Элементы.ГруппаРезультатыПроверкиОбъектов.Картинка = Новый Картинка;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьУстановкуОтметокРазделовПроектаСервер()
	
	ПеренестиРазделыПроектаВОбъект();
	ЗаполнитьКоличествоИПоказатьНаличиеОшибок();
	
Конецпроцедуры

&НаСервере
Процедура ПриИзмененииОтметкиРазделаСервер()
	
	ПеренестиРазделыПроектаВОбъект();
	ОбновитьКоличествоОшибокНаСервере("РазделыПроекта", "РазделПроекта");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуВсехПравилСервер()
	
	ПроверкаОбъектов.ВыполнитьПроверкуОбъектов();
	Элементы.РезультатыПроверки.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкиИсключенияСервер(ВыделенныеСтроки, ЗначениеОтметки)
	
	ПроверкаОбъектов.УстановитьСнятьОтметкуИсключения(ВыделенныеСтроки, ЗначениеОтметки);
	Элементы.РезультатыПроверки.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьОшибкиСервер(ВыделенныеЗаписи)
	
	РегистрыСведений.РезультатыПроверкиОбъектов.ЗарегистрироватьОшибки(ВыделенныеЗаписи);
	Элементы.РезультатыПроверки.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСценарииВШагахПроцесса(ДанныеСценариев)
	Для Каждого СтрокаДанныеСценариев Из ДанныеСценариев Цикл
		Если НЕ СтрокаДанныеСценариев.СтрокаИзменена Тогда
			Продолжить;
		КонецЕсли;	 
		
		ОбъектШагПроцесса = СтрокаДанныеСценариев.ШагПроцесса.ПолучитьОбъект();
		ОбъектШагПроцесса.Заблокировать();
		ОбъектШагПроцесса.СценарийРаботыПользователя = СтрокаДанныеСценариев.СценарийРаботыПользователя;
		ОбъектШагПроцесса.Записать();
		ОбъектШагПроцесса.Разблокировать();
	КонецЦикла;	 
КонецПроцедуры 

&НаСервере
Процедура ОбновитьДанныеСценариевПользователейПослеПривязкиСценаревКШагамПроцессаСеврер(ДанныеСценариев)
	Попытка
		ЗаполнитьСценарииВШагахПроцесса(ДанныеСценариев);
	Исключение
		ТекстИслючения = 
		    СтрШаблон(НСтр("ru = 'Не получилось обновить данные в шагах процесса. Подробная информация об ошибке: %1'"),
			    Символы.ПС + ОписаниеОшибки());
		ВызватьИсключение ТекстИслючения;
	КонецПопытки;
	
	Для Каждого СтрокаДанныеСценариев Из ДанныеСценариев Цикл
		СтрокиСценарииПользователей = 
			Объект.СценарииПользователей.НайтиСтроки(Новый Структура("ШагПроцесса",СтрокаДанныеСценариев.ШагПроцесса));
			
		Если СтрокиСценарииПользователей.Количество() = 0 Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаДанныеСценариев.СценарийРаботыПользователя) Тогда
				Продолжить;
			КонецЕсли;	 
			СтрокаСценарииПользователей = Объект.СценарииПользователей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСценарииПользователей,СтрокаДанныеСценариев);
			СтрокаСценарииПользователей.Описание = СтрокаДанныеСценариев.ИмяШага;
			СтрокаСценарииПользователей.Сценарий = СтрокаДанныеСценариев.СценарийРаботыПользователя;
			СтрокаСценарииПользователей.ЭтоШагПроцесса = Истина;
		Иначе		
			СтрокиСценарииПользователей[0].Сценарий = СтрокаДанныеСценариев.СценарийРаботыПользователя;
		КонецЕсли;	 
	КонецЦикла;	 
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДанныеСценариевПользователейПослеПривязкиСценаревКШагамПроцесса(ДанныеСценариев)
	ОбновитьДанныеСценариевПользователейПослеПривязкиСценаревКШагамПроцессаСеврер(ДанныеСценариев);
	Модифицированность = Истина;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПроцессыТехпроектаСДаннымСценарием(Сценарий,Процессы)
	Данные = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцесса.Ссылка КАК ШагПроцесса,
		|	ШагиПроцесса.Владелец КАК Процесс,
		|	ШагиПроцесса.Наименование КАК Наименование,
		|	ШагиПроцесса.Код КАК Код,
		|	ШагиПроцесса.Владелец.Наименование КАК ПроцессНаименование
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	НЕ ШагиПроцесса.ПометкаУдаления
		|	И ШагиПроцесса.СценарийРаботыПользователя = &СценарийРаботыПользователя
		|	И ШагиПроцесса.Владелец В ИЕРАРХИИ(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", Процессы);
	Запрос.УстановитьПараметр("СценарийРаботыПользователя", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Структура = Новый Структура;
		Структура.Вставить("ШагПроцесса",ВыборкаДетальныеЗаписи.ШагПроцесса);
		Структура.Вставить("ШагНаименование",ВыборкаДетальныеЗаписи.Наименование);
		Структура.Вставить("ПроцессНаименование",ВыборкаДетальныеЗаписи.ПроцессНаименование);
		Структура.Вставить("Процесс",ВыборкаДетальныеЗаписи.Процесс);
		Структура.Вставить("Код",ВыборкаДетальныеЗаписи.Код);
		Данные.Добавить(Структура);
	КонецЦикла;
	
	Возврат Данные;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПроцессПоУИД(УИД)
	Возврат Справочники.Процессы.ПолучитьСсылку(УИД); 
КонецФункции	  

&НаСервереБезКонтекста
Функция ШагПроцессаПоУИД(УИД)
	Возврат Справочники.ШагиПроцесса.ПолучитьСсылку(УИД); 
КонецФункции	 

&НаКлиенте
Процедура ОбновитьГиперссылкиНаШагиПроцессов()
	Если Элементы.СценарииПользователей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	Сценарий = Элементы.СценарииПользователей.ТекущиеДанные.Сценарий;
	
	Процессы = Новый Массив;
	Для Каждого СтрокаПроцессы Из Объект.Процессы Цикл
		Процессы.Добавить(СтрокаПроцессы.Гиперссылка);
	КонецЦикла;	 
	
	ДанныеПроцессов = ПроцессыТехпроектаСДаннымСценарием(Сценарий,Процессы);
	ЧастиСтроки = Новый Массив;
	Ном = 0;
	Для Каждого СтрокаДанныеПроцессов Из ДанныеПроцессов Цикл
		Ном = Ном + 1;
		Стр = СтрШаблон(НСтр("ru = 'Шаг №%1 '"),СтрокаДанныеПроцессов.Код);
			
		ЧастиСтроки.Добавить(Стр);
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(
		    СтрокаДанныеПроцессов.ШагНаименование,
			,
			,
			,
			"ШагПроцесса_" + Строка(СтрокаДанныеПроцессов.ШагПроцесса.УникальныйИдентификатор())));
			
		ЧастиСтроки.Добавить(НСтр("ru = ' процесса '"));
		ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(
		    СтрокаДанныеПроцессов.ПроцессНаименование,
			,
			,
			,
			"Процесс_" + Строка(СтрокаДанныеПроцессов.Процесс.УникальныйИдентификатор())));
		ЧастиСтроки.Добавить("." + Символы.ПС);
		
		Если Ном >=5 Тогда
			Прервать;
		КонецЕсли;	 
	КонецЦикла;	 
	
	Элементы.ДекорацияГиперссылкиШагиПроцессов.Заголовок = Новый ФорматированнаяСтрока(ЧастиСтроки);
КонецПроцедуры 

&НаСервере
Процедура УстановитьДоступностьРаботыСВеткой()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ветка) ИЛИ Объект.Ветка.Тип <> Перечисления.ТипыВеток.ВеткаТехническогоПроекта Тогда
		Элементы.ГруппаДействияСВетками.Видимость = Истина;
		Элементы.ГруппаДействияСВетками.ТекущаяСтраница = Элементы.ГруппаСоздатьВетку;
	Иначе
		Элементы.ГруппаДействияСВетками.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаСозданияВетки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоздатьИВыбратьВетку(Параметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбновленияИмениВетки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьИмяВетки(Объект.Ветка, Параметры.Имя);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьИВыбратьВетку(Параметры=Неопределено)
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	Параметры.Вставить("РазрабатываемыйОбъект", Объект);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, РежимВыбора", Параметры, Истина);

	ОткрытьФорму(
		"Справочник.Ветки.ФормаОбъекта",
		ПараметрыФормы, 
		Элементы.Ветка,
		Истина);

КонецПроцедуры

&НаСервере
Процедура ОбновитьИмяВетки(Ветка, Имя)
	
	ВеткаОбъект = Ветка.ПолучитьОбъект();
	ВеткаОбъект.Имя = Имя; 
	ВеткаОбъект.Записать();
	ЗаполнитьРеквизитыВетки();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыВетки()
	
	Если ЗначениеЗаполнено(Объект.Ветка) Тогда
		РеквизитыВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Ветка, "РежимРазработки, Тип, Имя");
		ТипВетки = РеквизитыВетки.Тип;
		РежимРазработки = РеквизитыВетки.РежимРазработки;
		КаталогХранилищаДляЗагрузкиМетаданных = ?(РеквизитыВетки.РежимРазработки = Перечисления.РежимРазработки.ВХранилище, РеквизитыВетки.Имя, ""); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПереключитьХронометражНаСервере(Ссылка)
	
	Возврат УчетВремени.ПереключитьХронометраж(Ссылка);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииВеткиНаСервере()
	
	ЗаполнитьРеквизитыВетки();
	ПрочитатьИнформациюОСборках();
	УстановитьВидимостьИнформацииОСборках();
	УстановитьДоступностьРаботыСВеткой();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИнформациюОСборках()
	
	ИнформацияОСборках = Справочники.Ветки.ИнформацияОСборкахВключающихИзмененияВетки(Объект.Ветка);
	
	СборкаВключающаяИзменения = ИнформацияОСборках.Сборка;
	ПубликуемаяСборкаВключающаяИзменения = ИнформацияОСборках.ПубликуемаяСборка;
	ДатаСборки = ИнформацияОСборках.ДатаСборки;
	ДатаПубликуемойСборки = ИнформацияОСборках.ДатаПубликацииСборки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформацииОСборках()
	
	ИмеетсяСборка = ЗначениеЗаполнено(СборкаВключающаяИзменения);
	ИмеетсяПубликуемаяСборка = ЗначениеЗаполнено(ПубликуемаяСборкаВключающаяИзменения);
	
	Элементы.ДекорацияИзмененияВключеныВСборку.Видимость = ИмеетсяСборка;
	Элементы.СборкаВключающаяИзменения.Видимость = ИмеетсяСборка;
	Элементы.ДатаСборки.Видимость = ИмеетсяСборка;
	
	Элементы.ДекорацияИзмененияОпубликованыВСборке.Видимость = ИмеетсяПубликуемаяСборка;
	Элементы.ПубликуемаяСборкаВключающаяИзменения.Видимость = ИмеетсяПубликуемаяСборка;
	Элементы.ДатаПубликуемойСборки.Видимость = ИмеетсяПубликуемаяСборка;
	
КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияПодключаемыхОтчетов()
	
	СозданноеПодменю = Элементы.Найти("ПодменюОтчеты");
	
	Если СозданноеПодменю <> Неопределено Тогда
		
		СозданноеПодменю.Заголовок = НСтр("ru = 'Дополнительно'");
		Если СозданноеПодменю.Вид = ВидГруппыФормы.Подменю Тогда
			СозданноеПодменю.Картинка = Новый Картинка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПлановыеЗатратыВремени()

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов")
		ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ИтогиСогласованияЗадачРесурсов.Запланировано),0) КАК ПлановоеВремя
	|ИЗ
	|	РегистрСведений.ИтогиСогласованияЗадачРесурсов КАК ИтогиСогласованияЗадачРесурсов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
	|		ПО (ЗадачиПроцесса.Предмет = &ТехническийПроект)
	|			И ИтогиСогласованияЗадачРесурсов.ЗадачаПроцесса = ЗадачиПроцесса.Ссылка
	|			И (ЗадачиПроцесса.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадачПроцессов.Отменена))
	|ГДЕ
	|	ИтогиСогласованияЗадачРесурсов.ВидРесурса.Основной"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТехническийПроект", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПланируемыеЗатратыВремени = ЦЕЛ(Выборка.ПлановоеВремя) + (Выборка.ПлановоеВремя-Цел(Выборка.ПлановоеВремя))*60/100;
	Иначе
		ПланируемыеЗатратыВремени = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьФактическиеЗатратыВремени()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУчетВремени")
		ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УчетВремениОбороты.ДлительностьОборот КАК Время
	|ИЗ
	|	РегистрНакопления.УчетВремени.Обороты(, , , ТехническийПроект = &ТехническийПроект) КАК УчетВремениОбороты"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТехническийПроект", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ФактическиеЗатратыВремени = ЦЕЛ(Выборка.Время/3600) + Цел(((Выборка.Время%3600)/60))/100;
	Иначе
		ФактическиеЗатратыВремени = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
