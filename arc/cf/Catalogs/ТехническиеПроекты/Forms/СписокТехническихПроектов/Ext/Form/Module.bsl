
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	НуженОтборПоУчастнику = 
		ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("ОтветственныйУчастник", ОтветственныйУчастник, СтруктураБыстрогоОтбора);
		
	НуженОтборПоСтепениУчастия = 
		ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("СтепеньУчастия", СтепеньУчастия, СтруктураБыстрогоОтбора);
		
	Если НуженОтборПоУчастнику ИЛИ НуженОтборПоСтепениУчастия Тогда
		УстановитьОтборПоУчастнику();
	КонецЕсли;
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("Статус", СписокСтатусов, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоСтатусу();
	КонецЕсли;
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("СрокОтработки", СписокСроков, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоСрокуОтработки();
	КонецЕсли;
	
	РазделПроекта = Параметры.РазделПроекта;
	УстановитьПараметрРаздел(Список, РазделПроекта);
	
	Список.Параметры.УстановитьЗначениеПараметра("УчастникТехническогоПроекта", ОтветственныйУчастник);
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	
	Если ТипЗнч(СтруктураБыстрогоОтбора) <> Тип("Структура") Тогда
		
		УстановитьОтборПоПроектуСервер();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтепеньУчастия) Тогда
		СтепеньУчастия = НСтр("ru='Ответственный/участник'");
	КонецЕсли;
	
	НуженОтборПоВерсии = 
		ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПриСозданииНаСервере("Версия", Версия, СтруктураБыстрогоОтбора);
		
	Если НЕ ЗначениеЗаполнено(Версия) Тогда
		Версия = "Все";
	КонецЕсли;
	
	ВерсияУказана = (Версия <> "Все" И Версия <> "Актуальные");
	
	Если ЗначениеЗаполнено(ВерсияДляОтбора) И НЕ ВерсияУказана Тогда
		ВерсияДляОтбора = Неопределено;
		Если НуженОтборПоВерсии Тогда
			УстановитьОтборПоВерсии();
		КонецЕсли;
	КонецЕсли;
	
	РежимОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Справочник.ТехническиеПроекты.ФормаСписка", "РежимОтображения");
	Если РежимОтображения<>Неопределено Тогда
		Элементы.Список.Отображение = РежимОтображения;
	КонецЕсли;
	
	УстановитьУсловноеОформлениеСписка();
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаКомандыФормы);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокОтчеты;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки  
	
	ПослеДобавленияПодключаемыхОтчетов();
	
	// ОбъектыНаКонтроле
	СпискиДляВыводаКомандКонтроля = Новый Массив;
	СпискиДляВыводаКомандКонтроля.Добавить(
		ОбъектыНаКонтроле.ДанныеСпискаДляВыводаКомандКонтроля(
		"Список", "СписокГруппаКонтроль", "СписокКонтекстноеМенюГруппаКонтроль"));
	ОбъектыНаКонтроле.НастроитьЭлементыПоставитьНаКонтрольВФормеСписка(ЭтотОбъект, СпискиДляВыводаКомандКонтроля);
	// Конец ОбъектыНаКонтроле
	
	// ПриоритетыРабот
	СпискиДляВыводаКомандПриоритета = Новый Массив;
	СпискиДляВыводаКомандПриоритета.Добавить(
		ПриоритетыОчередиРабот.ДанныеСпискаДляВыводаКомандПриоритета(
		"Список", "СписокГруппаПриоритет", "СписокКонтекстноеМенюГруппаПриоритет", "Приоритет"));
	ПриоритетыОчередиРабот.НастроитьЭлементыПриоритетыВФормеСписка(ЭтотОбъект, 
	                                                               СпискиДляВыводаКомандПриоритета, 
	                                                               Справочники.ТехническиеПроекты.ПустаяСсылка())
	// Конец ПриоритетыРабот
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("Статус",
			"СписокСтатусов",
			СписокСтатусов,
			СтруктураБыстрогоОтбора,
			Настройки) Тогда
			
		УстановитьОтборПоСтатусу();
	КонецЕсли;
	
	Если ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("СрокОтработки",
			"СписокСроков",
			СписокСроков,
			СтруктураБыстрогоОтбора,
			Настройки) Тогда
			
		УстановитьОтборПоСрокуОтработки();
	КонецЕсли;
	
	НуженОтборПоУчастнику =
		ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("ОтветственныйУчастник",
							"ОтветственныйУчастник",
							ОтветственныйУчастник,
							СтруктураБыстрогоОтбора,
							Настройки);
							
	НуженОтборПоСтепениУчастия =
		ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("СтепеньУчастия",
							"СтепеньУчастия",
							СтепеньУчастия,
							СтруктураБыстрогоОтбора,
							Настройки);
	
	Если НуженОтборПоУчастнику ИЛИ НуженОтборПоСтепениУчастия Тогда
		УстановитьОтборПоУчастнику();
	КонецЕсли;
	
	НуженОтборПоВерсии =
		ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("Версия",
							"Версия",
							Версия,
							СтруктураБыстрогоОтбора,
							Настройки);
							
	НуженОтборПоУказаннойВерсии =
		ОбщегоНазначенияСППРКлиентСервер.НеобходимОтборПоКолонкеПередЗагрузкойИзНастроек("ВерсияДляОтбора",
							"ВерсияДляОтбора",
							ВерсияДляОтбора,
							СтруктураБыстрогоОтбора,
							Настройки);
		
	Если Версия = "" Тогда
		Версия = "Все";
	КонецЕсли;
		
	ВерсияУказана = (Версия <> "Все" И Версия <> "Актуальные");
	
	Если НуженОтборПоВерсии Тогда
		
		Если ЗначениеЗаполнено(ВерсияДляОтбора) И НЕ ВерсияУказана Тогда
			ВерсияДляОтбора = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НуженОтборПоВерсии Тогда
		УстановитьОтборПоВерсии();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.РазделПроекта) Тогда
		РазделПроекта = Параметры.РазделПроекта;
	Иначе
		Если ТипЗнч(СтруктураБыстрогоОтбора) <> Тип("Структура") Тогда
			РазделПроектаИзНастроек = Настройки.Получить("РазделПроекта");
			Если РазделПроектаИзНастроек <> Неопределено Тогда
				УстановитьПараметрРаздел(Список, РазделПроектаИзНастроек);
			КонецЕсли;
		Иначе
			Если Настройки.Получить("РазделПроекта")<>Неопределено Тогда
				Настройки.Удалить("РазделПроекта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененТекущийПроект" Тогда
		УстановитьОтборПоПроектуСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборРазделПроектаПриИзменении(Элемент)
	
	УстановитьПараметрРаздел(Список, РазделПроекта);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовПриИзменении(Элемент)
	
	УстановитьОтборПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокСтатусов);
	
	ОткрытьФорму("Перечисление.СтатусыТехническихПроектов.Форма.ВыборСпискаСтатусов", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСтатусовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокСтатусов = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура СтепеньУчастияПриИзменении(Элемент)
	
	УстановитьОтборПоУчастнику();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйУчастникПриИзменении(Элемент)
	
	УстановитьОтборПоУчастнику();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВерсияПриИзменении(Элемент)
	
	ВерсияУказана = (Версия <> "" И Версия <> "Все" И Версия <> "Актуальные");
	
	Если ЗначениеЗаполнено(ВерсияДляОтбора) И НЕ ВерсияУказана Тогда
		ВерсияДляОтбора = Неопределено;
	КонецЕсли;
	
	УстановитьОтборПоВерсии();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВерсияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Указанная" Тогда
		
		ПолеОтбораВладелец = Новый ПолеКомпоновкиДанных("Владелец");
		Проект = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		
		Для Каждого ЭлементОтбора из Список.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбора.ЛевоеЗначение = ПолеОтбораВладелец
					И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
					
					Проект = ЭлементОтбора.ПравоеЗначение;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		Если ЗначениеЗаполнено(Проект) Тогда
			СтруктураОтбора = Новый Структура("Владелец", Проект);
			ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтборВерсияЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.ВерсииПроекта.ФормаВыбора", 
						ПараметрыФормы, 
						ЭтаФорма,,,, 
						ОписаниеОповещения, 
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВерсияЗавершение(РезультатДействия, ДополнительныеПараметры) Экспорт
    
    ЗначениеВыбора = РезультатДействия;
    
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		ВерсияДляОтбора = ЗначениеВыбора;
		Версия = ЗначениеВыбора;
		ОтборВерсияПриИзменении(Элементы.Версия);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтепеньУчастияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВерсияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Версия <> "Все" Тогда
		Версия = НСтр("ru='Все'");
		УстановитьОтборПоВерсии();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСроковПриИзменении(Элемент)
	
	УстановитьОтборПоСрокуОтработки();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСроковНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("СписокВыбора", СписокСроков);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСроковОтработки", СтруктураПараметров, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСроковОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокСроков = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначаемуюКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ОбъектыНаКонтроле
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПостановкиНаКонтроль(Команда)
	
	ОбъектыНаКонтролеКлиент.ВыполнитьКомандуПостановкиНаКонтрольИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

// Приоритеты
&НаКлиенте
Процедура Подключаемый_УстановитьПриоритет(Команда)
	
	ПриоритетыОчередиРаботыКлиент.ВыполнитьКомандуИзмененияПриоритетаИзФормыСписка(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец ОбъектыНаКонтроле

&НаСервере
Процедура УстановитьОтборПоСтатусу()
	
	ИспользоватьОтбор = СписокСтатусов.Количество()>0;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Статус",
																			СписокСтатусов,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ИспользоватьОтбор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоУчастнику()
	
	Список.Параметры.УстановитьЗначениеПараметра("УчастникТехническогоПроекта", ОтветственныйУчастник);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВходитВКритерийОтбораПоУчастникуИлиОтветственному",Истина,ВидСравненияКомпоновкиДанных.Равно,,СтепеньУчастия = "Ответственный/участник" И ЗначениеЗаполнено(ОтветственныйУчастник));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный",ОтветственныйУчастник,ВидСравненияКомпоновкиДанных.Равно,,СтепеньУчастия = "Ответственный" И ЗначениеЗаполнено(ОтветственныйУчастник));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВходитВКритерийОтбораПоУчастнику",Истина,ВидСравненияКомпоновкиДанных.Равно,,СтепеньУчастия = "Участник" И ЗначениеЗаполнено(ОтветственныйУчастник));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВерсии()
	
	ВерсияУказана = (Версия <> "" И Версия <> "Все" И Версия <> "Актуальные");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВерсияАктуальна",Истина,ВидСравненияКомпоновкиДанных.Равно,,Версия = "Актуальные");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Версия",ВерсияДляОтбора,ВидСравненияКомпоновкиДанных.Равно,,ВерсияУказана И ЗначениеЗаполнено(ВерсияДляОтбора));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСрокуОтработки()
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	
	ДатаЗавтра = ОбщегоНазначенияСППР.СледующаяДатаПоОсновномуКалендарю();
	
	ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
																			"Отбор по сроку отработки",
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
																			
	ГруппаИСегодня = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ГруппаИЛИ,
																			"Отбор по сроку отработки на сегодня",
																			ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ЕстьОтборПоВчера	= (СписокСроков.НайтиПоЗначению("Вчера") <> Неопределено);
	ЕстьОтборПоСегодня	= (СписокСроков.НайтиПоЗначению("Сегодня") <> Неопределено);
	ЕстьОтборПоЗавтра	= (СписокСроков.НайтиПоЗначению("Завтра") <> Неопределено);
	ЕстьОтборПоПотом	= (СписокСроков.НайтиПоЗначению("Потом") <> Неопределено);
	
	ГруппаИЛИ.Использование = ЕстьОтборПоВчера ИЛИ ЕстьОтборПоСегодня ИЛИ ЕстьОтборПоЗавтра ИЛИ ЕстьОтборПоПотом;
	ГруппаИСегодня.Использование = ЕстьОтборПоСегодня;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "СрокОтработки", ВидСравненияКомпоновкиДанных.Меньше, ТекущаяДата,,ЕстьОтборПоВчера);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИСегодня, "СрокОтработки", ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ТекущаяДата,,ЕстьОтборПоСегодня);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИСегодня, "СрокОтработки", ВидСравненияКомпоновкиДанных.Меньше, ДатаЗавтра,,ЕстьОтборПоСегодня);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "СрокОтработки", ВидСравненияКомпоновкиДанных.Равно, ДатаЗавтра,,ЕстьОтборПоЗавтра);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаИЛИ, "СрокОтработки", ВидСравненияКомпоновкиДанных.Больше, ДатаЗавтра,,ЕстьОтборПоПотом);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрРаздел(Список, РазделПроекта)

	Список.Параметры.УстановитьЗначениеПараметра("Раздел", РазделПроекта);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервер()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Справочник.ТехническиеПроекты.ФормаСписка", "РежимОтображения", Элементы.Список.Отображение);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПроектуСервер()
	
	ТекущийПроект = ПараметрыСеанса.ТекущийПроект;
	
	Проекты.УстановитьОтборВСпискеПоПроекту(Список, ТекущийПроект);
	
	// Установка параметров выбора для раздела проекта
	Если ЗначениеЗаполнено(ТекущийПроект) Тогда
		ПараметрВыбораРаздела = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПроект);
		ПараметрыВыбораРаздела = Новый Массив;
		ПараметрыВыбораРаздела.Добавить(ПараметрВыбораРаздела);
		Элементы.ОтборРазделПроекта.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораРаздела);
	Иначе
		Элементы.ОтборРазделПроекта.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка()
	
	УсловноеОформлениеСписка = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеСписка.Элементы.Очистить();
	
	ОбщегоНазначенияСППР.УстановитьУсловноеОформлениеСпискаОтветственный(УсловноеОформлениеСписка);
	ПриоритетыОчередиРабот.УстановитьУсловноеОформлениеСписка(Список);
	
	УстановитьУсловноеОформлениеДатОкончанияСписка(УсловноеОформлениеСписка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДатОкончанияСписка(УсловноеОформлениеСписка)

	СтатусыАктивныеТехПроекты = Новый СписокЗначений;
	СтатусыАктивныеТехПроекты.Добавить(Перечисления.СтатусыТехническихПроектов.Активен);
	СтатусыАктивныеТехПроекты.Добавить(Перечисления.СтатусыТехническихПроектов.Запланирован);

#Область СрокПроектаУказанИБольшеЧемДатаВерсии
	
	Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПлановаяДатаОкончания.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыАктивныеТехПроекты;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаОкончания");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПлановаяДатаОкончания");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончанияРазработкиВерсиии");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
#КонецОбласти

#Область СрокПроектаУказанИЕстьЭтапыСДатойОкончанияБольше
	
	Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОкончанияПоследнегоЭтапа.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыАктивныеТехПроекты;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаОкончания");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаОкончанияПоследнегоЭтапа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаОкончания");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
#КонецОбласти

#Область СрокПроектаНеУказанИЕстьЭтапыСДатойОкончанияБольшеСрокаВерсии
	
	Элемент = УсловноеОформлениеСписка.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОкончанияПоследнегоЭтапа.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыАктивныеТехПроекты;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаОкончания");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаОкончанияПоследнегоЭтапа");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончанияРазработкиВерсиии");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗонаЗадачиКрасный);
	
#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура ПослеДобавленияПодключаемыхОтчетов()
	
	СозданноеПодменю = Элементы.Найти("ПодменюОтчеты");
	
	Если СозданноеПодменю <> Неопределено Тогда
		
		СозданноеПодменю.Заголовок = НСтр("ru = 'Дополнительно'");
		Если СозданноеПодменю.Вид = ВидГруппыФормы.Подменю Тогда
			СозданноеПодменю.Картинка = Новый Картинка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти