
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусКонтроля = "Добавлено";
		ПриЧтенииСозданииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СкопироватьДанныеКопируемогоОбъекта(Параметры.ЗначениеКопирования);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
	НастройкиСервер.УстановитьТекущуюСтраницу("Справочник.ШагиПроцесса.ФормаЭлемента", Элементы.ГруппаСтраницы, "ТекущаяСтраницаФормыШагаПроцесса");
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница;
	
	Если НЕ ТекущаяСтраница.Доступность Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОписание;
	КонецЕсли;
	
	Элементы.ПараметрыСценария.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьТестирование");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ПриЧтенииСозданииНаСервере();
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Описание, РедактируемыйОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.УстановитьФорматированноеОписаниеИзХранилища(Заметки, РедактируемыйОбъект.ХранилищеЗаметок);
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Описание, ТекущийОбъект.ХранилищеОписания);
	ОбщегоНазначенияСППР.ПоместитьФорматированноеОписаниеВХранилище(Заметки, ТекущийОбъект.ХранилищеЗаметок);
	ТекущийОбъект.Описание = Описание.ПолучитьТекст();
	ТекущийОбъект.Заметки = Заметки.ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ПриИзмененииВладельцаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипШагаПриИзменении(Элемент)
	
	УстановитьОтображениеПоТипуШага(Объект.ТипШага, Элементы);
			
	Если ЗначениеЗаполнено(Объект.ВложенныйПроцесс) И Объект.ТипШага = 0 Тогда
		Объект.ВложенныйПроцесс = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(Объект.СценарийРаботыПользователя) И Объект.ТипШага = 1 Тогда
		Объект.СценарийРаботыПользователя = Неопределено;
	КонецЕсли;
	
	Если Объект.ТипШага <> 0 Тогда
		Объект.ИспользуемыеФормы.Очистить();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ТипШагаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыИспользуемыеФормы

&НаКлиенте
Процедура ИспользуемыеФормыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Если ВыбранноеЗначение.Количество()>0 Тогда
			
			СтандартнаяОбработка = Ложь;
			ЭлементМассива = ВыбранноеЗначение[0];
			
			Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ОбъектыМетаданных") Тогда
				ОбработататьПодборОбъектовМетаданныхВИспользуемыеФормы(ВыбранноеЗначение);
				АктивизироватьПоследнююСтроку(Элемент, Объект.ИспользуемыеФормы);
			ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ФормыОбъектовМетаданных") Тогда
				ОбработататьПодборФормОбъектовМетаданныхВИспользуемыеФормы(ВыбранноеЗначение);
				АктивизироватьПоследнююСтроку(Элемент, Объект.ИспользуемыеФормы);
			КонецЕсли;
				
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение.ТипФормы)
			И НЕ ЗначениеЗаполнено(ВыбранноеЗначение.ФормаОбъектаМетаданных) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ОбъектМетаданных", ВыбранноеЗначение.ОбъектМетаданных);
		СтруктураПоиска.Вставить("ТипФормы", ВыбранноеЗначение.ТипФормы);
		СтруктураПоиска.Вставить("ФормаОбъектаМетаданных", ВыбранноеЗначение.ФормаОбъектаметаданных);
		
		МассивСтрок = Объект.ИспользуемыеФормы.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрок.Количество()=0 Тогда
			
			НоваяСтрока = Объект.ИспользуемыеФормы.Добавить();
			НоваяСтрока.ОбъектМетаданных = ВыбранноеЗначение.ОбъектМетаданных;
			НоваяСтрока.ТипФормы = ВыбранноеЗначение.ТипФормы;
			НоваяСтрока.ФормаОбъектаМетаданных = ВыбранноеЗначение.ФормаОбъектаМетаданных;
			Модифицированность = Истина;
			
			АктивизироватьПоследнююСтроку(Элемент, Объект.ИспользуемыеФормы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеФормыОбъектМетаданныхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИспользуемыеФормы.ТекущиеДанные;
	
	ОбработатьИзменениеФормы(ТекущиеДанные);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ОбъектМетаданных) Тогда
		ТекущиеДанные.ТипФормы 				 = Неопределено;
		ТекущиеДанные.ФормаОбъектаМетаданных = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ФормаОбъектаМетаданных) Тогда
		ТекущиеДанные.ТипФормы = ПредопределенноеЗначение("Перечисление.ТипыФорм.ПроизвольнаяФорма");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеФормыОбъектМетаданныхОчистка(Элемент, СтандартнаяОбработка)
	
	ИспользуемыеФормыОбъектМетаданныхПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеФормыФормаОбъектаМетаданныхПриИзменении(Элемент)
	
	ИспользуемыеФормыОбъектМетаданныхПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеФормыОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаОбъектаМетаданных = Элементы.ИспользуемыеФормы.ТекущиеДанные.ФормаОбъектаМетаданных;
	ПараметрыВыбораСсылки = Новый Структура;
	ПараметрыВыбораСсылки.Вставить("ВыборОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("ВыборФормОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("ВыборОсновныхФормОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("Функция", Объект.ФункцияСистемы);
	
	ОбщегоНазначенияСППРКлиент.ОткрытьФормуВыбораГиперссылки(Элемент, Проект, ПараметрыВыбораСсылки, ФормаОбъектаМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеФормыОбъектМетаданныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыборФормы(ВыбранноеЗначение, "ОбъектМетаданных");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеФормыФормаОбъектаМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = Элементы.ИспользуемыеФормы.ТекущиеДанные.ФормаОбъектаМетаданных;
	Если НЕ ЗначениеЗаполнено(НачальноеЗначение) Тогда
		НачальноеЗначение = Элементы.ИспользуемыеФормы.ТекущиеДанные.ОбъектМетаданных;
	КонецЕсли;
	
	ПараметрыВыбораСсылки = Новый Структура;
	ПараметрыВыбораСсылки.Вставить("ВыборОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("ВыборФормОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("ВыборОсновныхФормОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("Функция", Объект.ФункцияСистемы);
	
	ОбщегоНазначенияСППРКлиент.ОткрытьФормуВыбораГиперссылки(Элемент, Проект, ПараметрыВыбораСсылки, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуемыеФормыФормаОбъектаМетаданныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработатьВыборФормы(ВыбранноеЗначение, "ФормаОбъектаМетаданных");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыПараметрыСценария

&НаКлиенте
Процедура СценарийРаботыПользователяПриИзменении(Элемент)
	ОбновитьТаблицуПараметровСценария();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные = Элементы.ПараметрыСценария.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ИсходящийПараметр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
	
	Если Поле.Имя = "ПараметрыСценарияЗначениеПоСсылке" Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьПараметрыШага();
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ЗначениеТаблицы") Тогда
			Элементы.ПараметрыСценария.ТекущиеДанные.ЗначениеПроизвольное = ВыбранноеЗначение.ЗначениеТаблицы;
			Модифицированность = Истина;
		ИначеЕсли ВыбранноеЗначение.Свойство("УстановкаПараметра") Тогда
			Значение = ВыбранноеЗначение.УстановкаПараметра;
			Элементы.ПараметрыСценария.ТекущиеДанные.ЗначениеПоСсылке = ПредставлениеСсылкиНаПараметр(Значение);
			Элементы.ПараметрыСценария.ТекущиеДанные.ЗначениеПроизвольное = Неопределено;
			Элементы.ПараметрыСценария.ТекущиеДанные.ШагПроцессаЗначениеПоСсылке = Значение.Источник;
			Элементы.ПараметрыСценария.ТекущиеДанные.ИмяПараметраПоСсылке = Значение.Имя;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияЗначениеПроизвольноеПриИзменении(Элемент)
	Элементы.ПараметрыСценария.ТекущиеДанные.ЗначениеПоСсылке = Неопределено;
	Элементы.ПараметрыСценария.ТекущиеДанные.ИмяПараметраПоСсылке = Неопределено;
	Элементы.ПараметрыСценария.ТекущиеДанные.ШагПроцессаЗначениеПоСсылке = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ПараметрыСценария.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.ТипПараметра = ПредопределенноеЗначение("Перечисление.ТипПараметраСценарияИлиПроцесса.Таблица") Тогда
		ПараметрыФормы = Новый Структура("ЗначениеТаблицы", ТекущиеДанные.ЗначениеПроизвольное);
		ОткрытьФорму("Справочник.СценарииРаботыПользователей.Форма.ФормаУстановкиЗначенияТаблицы",
		    ПараметрыФормы,Элементы.ПараметрыСценария,УникальныйИдентификатор);	
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
	
	Если ТекущиеДанные.ИсходящийПараметр Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	 
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборИспользуемыхФорм(Команда)
	
	ПараметрыВыбораСсылки = Новый Структура;
	ПараметрыВыбораСсылки.Вставить("ВыборОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("ВыборФормОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("ВыборОсновныхФормОбъектовМетаданных", Истина);
	ПараметрыВыбораСсылки.Вставить("МножественныйВыбор", Истина);
	ПараметрыВыбораСсылки.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыВыбораСсылки.Вставить("Функция", Объект.ФункцияСистемы);
	
	ОбщегоНазначенияСППРКлиент.ОткрытьФормуВыбораГиперссылки(Элементы.ИспользуемыеФормы, Проект, ПараметрыВыбораСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПараметровСценария(Команда)
	ОбновитьТаблицуПараметровСценария();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Владелец");
	
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	УстановитьОтображениеПоТипуШага(Объект.ТипШага, Элементы);
	
	ДоступноИзменениеШага = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеПроцессов", Проект);
		
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначения()
	
	НастройкиСервер.СохранитьТекущуюСтраницу("Справочник.ШагиПроцесса.ФормаЭлемента", Элементы.ГруппаСтраницы, "ТекущаяСтраницаФормыШагаПроцесса");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтображениеПоТипуШага(ТипШага, Элементы)
	
	Если ТипШага = 0 Тогда
		Элементы.ГруппаСтраницыШагаВложенногоПроцесса.ТекущаяСтраница = Элементы.СтраницаШаг;
		Элементы.ВложенныйПроцесс.Доступность = Ложь;
		Элементы.СценарийРаботыПользователя.Доступность = Истина;
		Элементы.СтраницаОперации.Доступность = Истина;
		Элементы.СтраницаИнтерфейс.Доступность = Истина;
	Иначе
		Элементы.ГруппаСтраницыШагаВложенногоПроцесса.ТекущаяСтраница = Элементы.СтраницаВложенныйПроцесс;
		Элементы.ВложенныйПроцесс.Доступность = Истина;
		Элементы.СценарийРаботыПользователя.Доступность = Ложь;
		Элементы.СтраницаОперации.Доступность = Ложь;
		Элементы.СтраницаИнтерфейс.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработататьПодборОбъектовМетаданныхВИспользуемыеФормы(МассивОбъектов)
	
	ДобавленыСтроки = Ложь;
	Для Каждого ОбъектМетаданных из МассивОбъектов Цикл
		
		ПараметрыОтбора = Новый Структура("ОбъектМетаданных", ОбъектМетаданных);
		
		МассивСтрок = Объект.ИспользуемыеФормы.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = Объект.ИспользуемыеФормы.Добавить();
			НоваяСтрока.ОбъектМетаданных = ОбъектМетаданных;
			ДобавленыСтроки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленыСтроки Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработататьПодборФормОбъектовМетаданныхВИспользуемыеФормы(МассивОбъектов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФормыОбъектовМетаданных.Ссылка КАК ФормаОбъектаМетаданных,
	|	ФормыОбъектовМетаданных.Владелец КАК ОбъектМетаданных
	|ИЗ
	|	Справочник.ФормыОбъектовМетаданных КАК ФормыОбъектовМетаданных
	|ГДЕ
	|	ФормыОбъектовМетаданных.Ссылка В(&МассивФорм)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектМетаданных"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивФорм", МассивОбъектов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДобавленыСтроки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("ФормаОбъектаМетаданных", Выборка.ФормаОбъектаМетаданных);
		
		МассивСтрок = Объект.ИспользуемыеФормы.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивСтрок.Количество()=0 Тогда
			НоваяСтрока = Объект.ИспользуемыеФормы.Добавить();
			НоваяСтрока.ОбъектМетаданных = Выборка.ОбъектМетаданных;
			НоваяСтрока.ФормаОбъектаМетаданных = Выборка.ФормаОбъектаМетаданных;
			НоваяСтрока.ТипФормы = Перечисления.ТипыФорм.ПроизвольнаяФорма;
			ДобавленыСтроки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленыСтроки Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФормы(ВыбранноеЗначение, ИмяРеквизита)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		// Сохраним значение, полученное из формы выбора
		ЗначениеВыбораФормы = Новый ФиксированнаяСтруктура(ВыбранноеЗначение);
		ВыбранноеЗначение = ВыбранноеЗначение[ИмяРеквизита];
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ТипыФорм") Тогда
		ЗначениеВыбораФормы = Новый ФиксированнаяСтруктура(
			"ТипФормы, ФормаОбъектаМетаданных", ВыбранноеЗначение, Неопределено);
		ВыбранноеЗначение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеФормы(ТекущиеДанные)
	
	Если ЗначениеЗаполнено(ЗначениеВыбораФормы) Тогда
		// Заполним выбранными ранее значениями
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЗначениеВыбораФормы);
		ЗначениеВыбораФормы = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьПоследнююСтроку(Элемент, ТаблицаДанных)
	
	КоличествоСтрок = ТаблицаДанных.Количество();
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ПоследняяСтрока = ТаблицаДанных[КоличествоСтрок-1];
	Элемент.ТекущаяСтрока = ПоследняяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.Описание.ТолькоПросмотр = НЕ ДоступноИзменениеШага;
	Элементы.Заметки.ТолькоПросмотр = НЕ ДоступноИзменениеШага;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВладельцаНаСервере()
	
	Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "Владелец");
	
	ДоступноИзменениеШага = 
		УправлениеДоступомСППР.РольДоступнаПоПроекту("ДобавлениеИзменениеПроцессов", Проект);
		
	УстановитьДоступностьЭлементов();
		
КонецПроцедуры

&НаСервере
Процедура СкопироватьДанныеКопируемогоОбъекта(КопируемыйОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ШагиПроцесса.ХранилищеОписания КАК ХранилищеОписания,
	|	ШагиПроцесса.ХранилищеЗаметок КАК ХранилищеЗаметок
	|ИЗ
	|	Справочник.ШагиПроцесса КАК ШагиПроцесса
	|ГДЕ
	|	ШагиПроцесса.Ссылка = &Ссылка"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", КопируемыйОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОписаниеИзХранилища = Выборка.ХранилищеОписания.Получить();
		Если ТипЗнч(ОписаниеИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Описание = ОписаниеИзХранилища;
		КонецЕсли;
		
		ЗаметкиИзХранилища = Выборка.ХранилищеЗаметок.Получить();
		Если ТипЗнч(ЗаметкиИзХранилища) = Тип("ФорматированныйДокумент") Тогда
			Заметки = ЗаметкиИзХранилища;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыВложенногоПроцесса(ВложенныйПроцесс)
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроцессыПараметрыПроцесса.Ссылка КАК Ссылка,
		|	ПроцессыПараметрыПроцесса.НомерСтроки КАК НомерСтроки,
		|	ПроцессыПараметрыПроцесса.Значение КАК Значение,
		|	ПроцессыПараметрыПроцесса.Имя КАК Имя,
		|	ПроцессыПараметрыПроцесса.ИсходящийПараметр КАК ИсходящийПараметр,
		|	ПроцессыПараметрыПроцесса.ТипПараметра КАК ТипПараметра
		|ИЗ
		|	Справочник.Процессы.ПараметрыПроцесса КАК ПроцессыПараметрыПроцесса
		|ГДЕ
		|	ПроцессыПараметрыПроцесса.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ВложенныйПроцесс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеПараметра = Новый Структура;
		ДанныеПараметра.Вставить("НомерСтроки",ВыборкаДетальныеЗаписи.НомерСтроки);
		ДанныеПараметра.Вставить("Имя",ВыборкаДетальныеЗаписи.Имя);
		ДанныеПараметра.Вставить("Значение",ВыборкаДетальныеЗаписи.Значение);
		ДанныеПараметра.Вставить("ТипПараметра",ВыборкаДетальныеЗаписи.ТипПараметра);
		ДанныеПараметра.Вставить("ИсходящийПараметр",ВыборкаДетальныеЗаписи.ИсходящийПараметр);
		Результат.Добавить(ДанныеПараметра);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	 

&НаСервереБезКонтекста
Функция ПараметрыСценария(Сценарий)
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка КАК Ссылка,
		|	СценарииРаботыПользователейПараметрыВходящие.НомерСтроки КАК НомерСтроки,
		|	СценарииРаботыПользователейПараметрыВходящие.Имя КАК Имя,
		|	СценарииРаботыПользователейПараметрыВходящие.Значение КАК Значение,
		|	СценарииРаботыПользователейПараметрыВходящие.ФО КАК ФО,
		|	СценарииРаботыПользователейПараметрыВходящие.ТипПараметра КАК ТипПараметра,
		|	СценарииРаботыПользователейПараметрыВходящие.ИсходящийПараметр КАК ИсходящийПараметр
		|ИЗ
		|	Справочник.СценарииРаботыПользователей.ПараметрыВходящие КАК СценарииРаботыПользователейПараметрыВходящие
		|ГДЕ
		|	СценарииРаботыПользователейПараметрыВходящие.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сценарий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеПараметра = Новый Структура;
		ДанныеПараметра.Вставить("НомерСтроки",ВыборкаДетальныеЗаписи.НомерСтроки);
		ДанныеПараметра.Вставить("Имя",ВыборкаДетальныеЗаписи.Имя);
		ДанныеПараметра.Вставить("Значение",ВыборкаДетальныеЗаписи.Значение);
		ДанныеПараметра.Вставить("ФО",ВыборкаДетальныеЗаписи.ФО);
		ДанныеПараметра.Вставить("ТипПараметра",ВыборкаДетальныеЗаписи.ТипПараметра);
		ДанныеПараметра.Вставить("ИсходящийПараметр",ВыборкаДетальныеЗаписи.ИсходящийПараметр);
		Результат.Добавить(ДанныеПараметра);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции	 

&НаКлиенте
Процедура РедактироватьПараметрыШага()
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ШагПроцессаЗначениеПоСсылке",Элементы.ПараметрыСценария.ТекущиеДанные.ШагПроцессаЗначениеПоСсылке);
	ПараметрыФормы.Вставить("ИмяПараметраПоСсылке",Элементы.ПараметрыСценария.ТекущиеДанные.ИмяПараметраПоСсылке);
	ПараметрыФормы.Вставить("Процесс",Объект.Владелец);
	ПараметрыФормы.Вставить("ШагПроцесса",Объект.Ссылка);
	
	ОткрытьФорму("Справочник.ШагиПроцесса.Форма.УстановкаЗначенияПараметра",
		ПараметрыФормы,
		Элементы.ПараметрыСценария,
		УникальныйИдентификатор,
		,
		,
		, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуПараметровСценарияСеврер()
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	
	ПараметрыСценария = Неопределено;
	Если ЗначениеЗаполнено(ОбъектСервер.СценарийРаботыПользователя) Тогда
		ПараметрыСценария = ПараметрыСценария(ОбъектСервер.СценарийРаботыПользователя);
	ИначеЕсли ОбъектСервер.ТипШага = 1 Тогда
		ПараметрыСценария = ПараметрыВложенногоПроцесса(ОбъектСервер.ВложенныйПроцесс);
	КонецЕсли;	
	
	Если ПараметрыСценария = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	
	КопияПараметрыСценария = ОбъектСервер.ПараметрыСценария.Выгрузить().Скопировать();
	ОбъектСервер.ПараметрыСценария.Очистить();
	
	Для Каждого Элем Из ПараметрыСценария Цикл
		СтрокаПараметрыСценария = ОбъектСервер.ПараметрыСценария.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметрыСценария,Элем);
		Если НЕ СтрокаПараметрыСценария.ИсходящийПараметр Тогда
			СтрокаПараметрыСценария.ЗначениеПроизвольное = Элем.Значение;
		КонецЕсли;
		
		СтрокаКопияПараметрыСценария = КопияПараметрыСценария.Найти(СтрокаПараметрыСценария.Имя,"Имя");
		Если СтрокаКопияПараметрыСценария <> Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаКопияПараметрыСценария.ЗначениеПроизвольное) Тогда
				СтрокаПараметрыСценария.ЗначениеПроизвольное = СтрокаКопияПараметрыСценария.ЗначениеПроизвольное;
			ИначеЕсли ЗначениеЗаполнено(СтрокаКопияПараметрыСценария.ЗначениеПоСсылке) Тогда
				СтрокаПараметрыСценария.ЗначениеПоСсылке = СтрокаКопияПараметрыСценария.ЗначениеПоСсылке;
				СтрокаПараметрыСценария.ИмяПараметраПоСсылке = СтрокаКопияПараметрыСценария.ИмяПараметраПоСсылке;
				СтрокаПараметрыСценария.ШагПроцессаЗначениеПоСсылке = СтрокаКопияПараметрыСценария.ШагПроцессаЗначениеПоСсылке;
			КонецЕсли;	 
		КонецЕсли;	 
	КонецЦикла;	 
	
	ЗначениеВРеквизитФормы(ОбъектСервер,"Объект"); 
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьТаблицуПараметровСценария()
	ОбновитьТаблицуПараметровСценарияСеврер();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры 

&НаКлиенте
Функция ПредставлениеСсылкиНаПараметр(Структура)
	Если ТипЗнч(Структура.Источник) = Тип("Строка") Тогда
		Возврат Структура.Источник + "." + Структура.Имя; 
	Иначе	
		Возврат ИмяСценарияПоСсылке(Структура.Источник) + "." + Структура.Имя; 
	КонецЕсли;	 
КонецФункции	 

&НаСервереБезКонтекста
Функция ИмяСценарияПоСсылке(Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШагиПроцесса.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ШагиПроцесса КАК ШагиПроцесса
		|ГДЕ
		|	ШагиПроцесса.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Наименование; 
	КонецЦикла;
КонецФункции	 

#КонецОбласти
