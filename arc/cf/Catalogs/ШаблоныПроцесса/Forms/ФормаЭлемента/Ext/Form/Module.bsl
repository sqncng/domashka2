
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗадачиШаблонаПроцесса.Ссылка,
	|	ЗадачиШаблонаПроцесса.ПометкаУдаления
	|ИЗ
	|	Справочник.ЗадачиШаблонаПроцесса КАК ЗадачиШаблонаПроцесса
	|ГДЕ
	|	ЗадачиШаблонаПроцесса.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	
	ТаблицаИмеющихсяЗадач = Запрос.Выполнить().Выгрузить();
	
	ДеревоЗадачЗначение =  РеквизитФормыВЗначение("ДеревоЗадач");
	
	МассивОбработанныхИмеющихсяЗадач = Новый Массив;
	ЗаписатьСтрокиДереваЗадач(ДеревоЗадачЗначение.Строки[0].Строки,
	                          МассивОбработанныхИмеющихсяЗадач,
	                          ДеревоЗадачЗначение,
	                          ТекущийОбъект.Ссылка);
	
	Для Каждого СтрокаСуществующаяЗадача Из ТаблицаИмеющихсяЗадач Цикл
		Если МассивОбработанныхИмеющихсяЗадач.Найти(СтрокаСуществующаяЗадача.Ссылка) = Неопределено Тогда
			Если НЕ СтрокаСуществующаяЗадача.ПометкаУдаления Тогда
				ЗадачаШаблонаОбъект = СтрокаСуществующаяЗадача.Ссылка.ПолучитьОбъект();
				ЗадачаШаблонаОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("РазвернутьВерхнийУровеньДереваЕслиНеобходимо", 1, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Объект.Статус = Перечисления.СтатусыШаблонаПроцесса.Действует Тогда
	
		ДеревоЗадачПустое = Ложь;
	
		ЭлементыДерева = ДеревоЗадач.ПолучитьЭлементы();
		Если ЭлементыДерева.Количество() = 0 Тогда
			
			ДеревоЗадачПустое = Истина;
			
		Иначе
			
			Если ЭлементыДерева[0].ПолучитьЭлементы().Количество() = 0 Тогда
				
				ДеревоЗадачПустое = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДеревоЗадачПустое Тогда
			
			ТекстСообщения = НСтр("ru = 'Шаблон в статусе ""Действует"" не может быть записан без задач.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДеревоЗадач",,Отказ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантНазначенияПриИзменении(Элемент)
	
	Объект.ПредназначенДляОпределенногоТипаПредмета = (ВариантНазначения = 1);
	УправлениеДоступностью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеИмяТипаПредметаПриИзменении(Элемент)
	
	Объект.ТипПредметаПредставление = Элемент.СписокВыбора.НайтиПоЗначению(Объект.ТипПредмета).Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ОпределитьДанныеПриоритетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыСогласуемыхРесурсов

&НаКлиенте
Процедура ВидыСогласуемыхРесурсовПриИзменении(Элемент)
	
	ЗаполнитьЗависимыеПоляДерева();
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОткрытьФормуЗадачиШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуЗадачиШаблона();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрыОткрытияФормыЗадачиШаблонаНаСервере(ПараметрыОткрытия,
	                                                           Знач ПредшествующиеЗадачи, 
	                                                           Знач ПланируемыеРесурсы,
	                                                           Знач ДополнительныеРеквизиты)
	
	ПараметрыОткрытия.Вставить("АдресДереваЗадач", ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ДеревоЗадач"), УникальныйИдентификатор));
	ПараметрыОткрытия.Вставить("АдресПредшествующиеЗадачи", ПоместитьВоВременноеХранилище(ПредшествующиеЗадачи.Выгрузить(), УникальныйИдентификатор));
	ПараметрыОткрытия.Вставить("АдресПланируемыеРесурсы", ПоместитьВоВременноеХранилище(ПланируемыеРесурсы(ПланируемыеРесурсы), УникальныйИдентификатор));
	ПараметрыОткрытия.Вставить("АдресДополнительныеРеквизиты", ПоместитьВоВременноеХранилище(ДополнительныеРеквизиты.Выгрузить(), УникальныйИдентификатор));
	
КонецПроцедуры

&НаСервере
Функция ПланируемыеРесурсы(Знач ПланируемыеРесурсы)

	ТаблицаПланируемыхРесурсов = Новый ТаблицаЗначений;
	ТаблицаПланируемыхРесурсов.Колонки.Добавить("Ресурс",      Новый ОписаниеТипов("СправочникСсылка.ВидыСогласуемыхРесурсов"));
	ТаблицаПланируемыхРесурсов.Колонки.Добавить("Планируется", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаСогласуемыйРесурс Из Объект.ВидыСогласуемыхРесурсов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСогласуемыйРесурс.СогласуемыйРесурс) Тогда
			Продолжить;
		КонецЕсли;
	
		НоваяСтрока = ТаблицаПланируемыхРесурсов.Добавить();
		НоваяСтрока.Ресурс = СтрокаСогласуемыйРесурс.СогласуемыйРесурс;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Ресурс", СтрокаСогласуемыйРесурс.СогласуемыйРесурс);
		
		НайденныеСтроки = ПланируемыеРесурсы.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			НоваяСтрока.Планируется = НайденныеСтроки[0].Планируется;
		Иначе
			НоваяСтрока.Планируется = 0;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаПланируемыхРесурсов;

КонецФункции

&НаКлиенте
Процедура ДеревоЗадачПриИзменении(Элемент)
	
	ЗаполнитьЗависимыеПоляДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗадачу(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ЗадачаПриУдаленииНаСервере(СоответствиеУдаляемыхЗадач)
	
	ОчиститьПредшествующиеЗадачиСогластноУдаленнымЗадачам(ДеревоЗадач.ПолучитьЭлементы()[0], СоответствиеУдаляемыхЗадач);
	ЗаполнитьЗависимыеПоляДерева();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПредшествующиеЗадачиСогластноУдаленнымЗадачам(СтрокаДерева, СоответствиеУдаляемыхЗадач)

	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Инд = ПодчиненнаяСтрока.ПредшествующиеЗадачи.Количество() - 1;
		
		МассивУдаленныхПредшествующихЗадач = Новый Массив;
		
		Пока Инд <> -1 Цикл
			ПредшествующаяЗадача = ПодчиненнаяСтрока.ПредшествующиеЗадачи[Инд];
			НайденнаяЗадача = СоответствиеУдаляемыхЗадач.Получить(ПредшествующаяЗадача.ЗадачаШаблона);
			Если НайденнаяЗадача <> Неопределено Тогда
				МассивУдаленныхПредшествующихЗадач.Добавить(ПредшествующаяЗадача.ЗадачаШаблона);
				ПодчиненнаяСтрока.ПредшествующиеЗадачи.Удалить(ПредшествующаяЗадача);
			КонецЕсли;
			Инд = Инд - 1;
		КонецЦикла;
		
		Для Каждого УдаленнаяПредшествующаяЗадача Из МассивУдаленныхПредшествующихЗадач Цикл
			
			МассивПредшествующихЗадач = СоответствиеУдаляемыхЗадач.Получить(УдаленнаяПредшествующаяЗадача);
			Если МассивПредшествующихЗадач = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Для Каждого ПредшествующаяЗадача Из МассивПредшествующихЗадач  Цикл
				
				ПараметрыПоиска = Новый Структура;
				ПараметрыПоиска.Вставить("ЗадачаШаблона", ПредшествующаяЗадача);
				НайденныеСтроки = ПодчиненнаяСтрока.ПредшествующиеЗадачи.НайтиСтроки(ПараметрыПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ПодчиненнаяСтрока.ПредшествующиеЗадачи.Добавить();
					НоваяСтрока.ЗадачаШаблона = ПредшествующаяЗадача;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОчиститьПредшествующиеЗадачиСогластноУдаленнымЗадачам(ПодчиненнаяСтрока, СоответствиеУдаляемыхЗадач);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено 
		Или ТипЗнч(ТекущиеДанные.Описание) <> Тип("ФорматированныйДокумент") Тогда
		
		ОписаниеЗадачи = Неопределено;
		
	Иначе
		
		ОписаниеЗадачи = ТекущиеДанные.Описание;
		
	КонецЕсли;
	
КонецПроцедуры


#Область Перетаскивание

&НаКлиенте
Процедура ДеревоЗадачНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если Элементы.ДеревоЗадач.ТолькоПросмотр Тогда
		Выполнение = Ложь;
	КонецЕсли;
	
	СтрокаПеретаскивание = ДеревоЗадач.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	Если ТипЗнч(СтрокаПеретаскивание) = Тип("Неопределено") Тогда
		Выполнение = Ложь;
	Иначе
		Если Не ЗначениеЗаполнено(СтрокаПеретаскивание.ЗадачаШаблона) Тогда
			Выполнение = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если (Строка = Неопределено) Или (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Число") Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	СтрокаНазначение     = ДеревоЗадач.НайтиПоИдентификатору(Строка);
	СтрокаПеретаскивание = ДеревоЗадач.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	
	Родитель = СтрокаНазначение.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Пока ЗначениеЗаполнено(Родитель.ЗадачаШаблона) Цикл
			Если Родитель = СтрокаПеретаскивание Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
				Возврат;
			Иначе
				Родитель = Родитель.ПолучитьРодителя();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если  ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтрокаНазначение     = ДеревоЗадач.НайтиПоИдентификатору(Строка);
		СтрокаПеретаскивание = ДеревоЗадач.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
		
		ПеретащитьЭлементДерева(СтрокаНазначение,СтрокаПеретаскивание,Ложь);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если  ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда

		ЗаполнитьЗависимыеПоляДерева();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПодчиненнуюЗадачу(Команда)
	
	ДобавитьЗадачу("Подчиненная");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПаралельнуюЗадачу(Команда)
	
	ДобавитьЗадачу("Паралельная");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачуПредшественника(Команда)
	
	ДобавитьЗадачу("Предшествующая");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоследующуюЗадачу(Команда)
	
	ДобавитьЗадачу("Последующая");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьЗадачу(ВидЗадачи)

	Если ВидЗадачи = "" Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Родитель = Неопределено;
	ИначеЕсли ВидЗадачи = "Подчиненная" Тогда
		Родитель = ТекущиеДанные;
	Иначе
		Родитель = ТекущиеДанные.ПолучитьРодителя();
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		ЭлементыДерева = ДеревоЗадач.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		ВидЗадачи = "Подчиненная";
	Иначе
		ЭлементыДерева = Родитель.ПолучитьЭлементы()
	КонецЕсли;
	
	Если ВидЗадачи = "Последующая" Или  ВидЗадачи = "Паралельная" Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(ЭлементыДерева.Индекс(ТекущиеДанные) + 1);
	ИначеЕсли  ВидЗадачи = "Предшествующая" Тогда
		ИндексТекущиеДанные = ЭлементыДерева.Индекс(ТекущиеДанные);
		Если ИндексТекущиеДанные = - 1 Тогда
			ИндексТекущиеДанные = 0;
		КонецЕсли;
		НоваяСтрока = ЭлементыДерева.Вставить(ИндексТекущиеДанные);
	Иначе
		НоваяСтрока = ЭлементыДерева.Добавить();
	КонецЕсли;
	
	Если ВидЗадачи = "Последующая" Тогда
		
		СтрокаПредшествующиеЗадачи = НоваяСтрока.ПредшествующиеЗадачи.Добавить();
		СтрокаПредшествующиеЗадачи.ЗадачаШаблона       = ТекущиеДанные.ЗадачаШаблона;
		СтрокаПредшествующиеЗадачи.ПредставлениеЗадачи = ТекущиеДанные.ПолныйКод + " " + ТекущиеДанные.Наименование;
		НоваяСтрока.ПредставлениеПредшествующиеЗадачи  = ПредставлениеПредшествующиеЗадачи(НоваяСтрока.ПредшествующиеЗадачи);
		
	ИначеЕсли ВидЗадачи = "Предшествующая" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТекущиеДанные.ПредшествующиеЗадачи, НоваяСтрока.ПредшествующиеЗадачи);
		
		ТекущиеДанные.ПредшествующиеЗадачи.Очистить();
		НоваяСтрока.ПредставлениеПредшествующиеЗадачи = ПредставлениеПредшествующиеЗадачи(НоваяСтрока.ПредшествующиеЗадачи);
		
	КонецЕсли;
	
	НоваяСтрока.ПлановаяДлительность = 1;
	НоваяСтрока.ЭтоНоваяЗадача       = Истина;
	НоваяСтрока.ИндексКартинки       = 1;
	
	Если ИспользуютсяПриоритеты Тогда
		НоваяСтрока.Приоритет = ПриоритетПоУмолчанию;
	КонецЕсли;
	
	ИдентификаторСтроки =  НоваяСтрока.ПолучитьИдентификатор();
	ПриДобавленииЗадачиСервер(ИдентификаторСтроки);
	
	Если ВидЗадачи = "Последующая" Тогда
		
		ЗаменитьЗадачуПредшественника(ДеревоЗадач.ПолучитьЭлементы()[0], ТекущиеДанные, НоваяСтрока);
		
	ИначеЕсли ВидЗадачи = "Предшествующая" Тогда
		
		ПредшествующаяЗадачаТекущаяСтрока = ТекущиеДанные.ПредшествующиеЗадачи.Добавить();
		ПредшествующаяЗадачаТекущаяСтрока.ЗадачаШаблона = НоваяСтрока.ЗадачаШаблона;
		ТекущиеДанные.ПредставлениеПредшествующиеЗадачи = ПредставлениеПредшествующиеЗадачи(ТекущиеДанные.ПредшествующиеЗадачи);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	Элементы.ДеревоЗадач.ТекущаяСтрока = ИдентификаторСтроки;
	Элементы.ДеревоЗадач.ИзменитьСтроку();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ПравоИзмененияШаблона = ПравоДоступа("Изменение", Метаданные.Справочники.ШаблоныПроцесса);
	Элементы.ДеревоЗадач.РазрешитьПеретаскивание = ПравоИзмененияШаблона;
	
	ИспользоватьСогласованиеРесурсов = ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов");
	
	ЗадачиПроцессов.ЗаполнитьСписокВыбораДоступныхПредметовШаблона(Элементы.ПолноеИмяТипаПредмета);
	
	ЗначениеКопирования = ?(Параметры.Свойство("ЗначениеКопирования"), Параметры.ЗначениеКопирования, Неопределено);
	ЗаполнитьДеревоЗадачШаблона(ЗначениеКопирования);

	ВариантНазначения = ?(Объект.ПредназначенДляОпределенногоТипаПредмета, 1, 0);
	УправлениеДоступностью(ЭтотОбъект);
	
	НеобходимоРазвернутьВерхнийУровеньДерева = Истина;
	
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
	ОпределитьДанныеПриоритетов();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	Форма.Элементы.ПолноеИмяТипаПредмета.Доступность = Форма.Объект.ПредназначенДляОпределенногоТипаПредмета;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область ТипПредмета
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПолноеИмяТипаПредмета.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредназначенДляОпределенногоТипаПредмета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипПредмета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	
#КонецОбласти
	
	ПриоритетыОчередиРабот.УстановитьУсловноеЭлементаФормы(УсловноеОформление, "ДеревоЗадачПриоритет", "ДеревоЗадач.Приоритет");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаШаблонаПослеЗакрытия(Знач Результат, ДополнительныеПараметры) Экспорт

	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если Результат = Неопределено
		Или ТипЗнч(Результат) <> Тип("Структура") Тогда
		
		Если ТекущиеДанные.ЭтоНоваяЗадача Тогда
			УдалитьЗадачу(ТекущиеДанные);
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если ТекущиеДанные.ЗадачаШаблона <> Результат.ЗадачаШаблона Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		ТекущиеДанные.ЭтоНоваяЗадача = Ложь;
	
		ПослеИзмененияЗадачиШаблона(Результат.АдресПредшествующиеЗадачи,
		                            Результат.АдресПланируемыеРесурсы,
		                            Результат.АдресДополнительныеРеквизиты,
		                            ИдентификаторТекущейСтроки,
		                            Результат.ВышестоящаяЗадача);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияЗадачиШаблона(АдресПредшествующиеЗадачи, АдресПланируемыеРесурсы,
	                                  АдресДополнительныеРеквизиты, ИдентификаторТекущейСтроки, ВышестоящаяЗадача)
	
	ТекущиеДанные = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если АдресПредшествующиеЗадачи = Неопределено Тогда
		ТекущиеДанные.ПредшествующиеЗадачи.Очистить();
	Иначе
		ЗаполнитьПредшествующиеЗадачи(ИдентификаторТекущейСтроки, АдресПредшествующиеЗадачи);
	КонецЕсли;
	
	Если АдресПланируемыеРесурсы = Неопределено Тогда
		ТекущиеДанные.ПланируемыеРесурсы.Очистить();
	Иначе
		ЗаполнитьПланируемыеРесурсы(ИдентификаторТекущейСтроки, АдресПланируемыеРесурсы);
	КонецЕсли;
	
	Если АдресДополнительныеРеквизиты = Неопределено Тогда
		ТекущиеДанные.ДополнительныеРеквизиты.Очистить();
	Иначе
		ЗаполнитьДополнительныеРеквизиты(ИдентификаторТекущейСтроки, АдресДополнительныеРеквизиты);
	КонецЕсли;
	
	РодительТекущейСтроки = ТекущиеДанные.ПолучитьРодителя();
	ЗадачаШаблонаРодителя = ?(РодительТекущейСтроки = Неопределено,
	                          Справочники.ЗадачиШаблонаПроцесса.ПустаяСсылка(),
	                          РодительТекущейСтроки.ЗадачаШаблона);
	
	Если ЗадачаШаблонаРодителя <> ВышестоящаяЗадача Тогда
		ИдентификаторСтрокиРодителя = ЗадачиПроцессовКлиентСервер.НайтиСтрокуВДанныхФормыДерево(ДеревоЗадач, ВышестоящаяЗадача, "ЗадачаШаблона", Истина);
		ИзменитьРодителяУСтрокиДерева(ИдентификаторТекущейСтроки, ИдентификаторСтрокиРодителя);
	КонецЕсли;
	
	Если ИспользуютсяПриоритеты Тогда
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Приоритет) Тогда
			ТекущиеДанные.Приоритет = ПриоритетПоУмолчанию;
		КонецЕсли;
		ТекущиеДанные.СдвигПриоритета = ПриоритетыОчередиРаботыКлиентСервер.СдвигПоПриоритету(ПриоритетыВладельца,
		                                                                                      ПриоритетПоУмолчанию,
		                                                                                      ТекущиеДанные.Приоритет);
		
	Иначе
		ТекущиеДанные.Приоритет = ПредопределенноеЗначение("Справочник.ПриоритетыРабот.ПустаяСсылка");
		ТекущиеДанные.СдвигПриоритета = 0;
	КонецЕсли;
	
	ЗаполнитьЗависимыеПоляДерева();
	РассчитатьИтоговыеПоказатели(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРодителяУСтрокиДерева(ИдентификаторПереносимойСтроки, ИдентификаторСтрокиРодителя)
	
	ПереносимаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторПереносимойСтроки);
	Если ПереносимаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйРодитель       = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторСтрокиРодителя);
	
	Если НовыйРодитель = Неопределено Тогда
		НовыйРодитель = ДеревоЗадач;
	КонецЕсли;
	
	НоваяСтрока = НовыйРодитель.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПереносимаяСтрока,,"ПредшествующиеЗадачи, ПланируемыеРесурсы, ДополнительныеРеквизиты");
	НоваяСтрока.ПредшествующиеЗадачи.Загрузить(ПереносимаяСтрока.ПредшествующиеЗадачи.Выгрузить());
	НоваяСтрока.ПланируемыеРесурсы.Загрузить(ПереносимаяСтрока.ПланируемыеРесурсы.Выгрузить());
	НоваяСтрока.ДополнительныеРеквизиты.Загрузить(ПереносимаяСтрока.ДополнительныеРеквизиты.Выгрузить());
	
	ПодчиненныеСтроки = ПереносимаяСтрока.ПолучитьЭлементы();
	КоличествоПодчиненныхСтрок = ПодчиненныеСтроки.Количество();
	Пока КоличествоПодчиненныхСтрок <> 0 Цикл
		ИзменитьРодителяУСтрокиДерева(ПодчиненныеСтроки[КоличествоПодчиненныхСтрок - 1].ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор());
		КоличествоПодчиненныхСтрок = КоличествоПодчиненныхСтрок -1;
	КонецЦикла;
	
	РодительТекущейСтроки = ПереносимаяСтрока.ПолучитьРодителя();
	Если РодительТекущейСтроки = Неопределено Тогда
		РодительТекущейСтроки = ДеревоЗадач;
	КонецЕсли;
	
	РодительТекущейСтроки.ПолучитьЭлементы().Удалить(ПереносимаяСтрока);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредшествующиеЗадачи(ИдентификаторСтрокиДерева, АдресПредшествующиеЗадачи)

	ТекущиеДанные = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПредыдущиеЗадачи = ПолучитьИзВременногоХранилища(АдресПредшествующиеЗадачи);
	
	Если ДанныеПредыдущиеЗадачи = Неопределено Тогда
		ТекущиеДанные.ПредшествующиеЗадачи.Очистить();
	Иначе
		ТекущиеДанные.ПредшествующиеЗадачи.Загрузить(ДанныеПредыдущиеЗадачи);
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеПредшествующиеЗадачи = ПредставлениеПредшествующиеЗадачи(ТекущиеДанные.ПредшествующиеЗадачи);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПланируемыеРесурсы(ИдентификаторСтрокиДерева, АдресПредшествующиеЗадачи)

	ТекущиеДанные = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПланируемыеРесурсы = ПолучитьИзВременногоХранилища(АдресПредшествующиеЗадачи);
	
	Если ДанныеПланируемыеРесурсы = Неопределено Тогда
		ТекущиеДанные.ПланируемыеРесурсы.Очистить();
	Иначе
		ТекущиеДанные.ПланируемыеРесурсы.Загрузить(ДанныеПланируемыеРесурсы);
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеПланируемыеРесурсы = ПредставлениеПланируемыеРесурсы(ТекущиеДанные.ПланируемыеРесурсы);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты(ИдентификаторСтрокиДерева, АдресДополнительныеРеквизиты)

	ТекущиеДанные = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеДополнительныеРеквизиты = ПолучитьИзВременногоХранилища(АдресДополнительныеРеквизиты);
	
	Если ДанныеДополнительныеРеквизиты = Неопределено Тогда
		ТекущиеДанные.ДополнительныеРеквизиты.Очистить();
	Иначе
		ТекущиеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеДополнительныеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПредшествующиеЗадачи(ПредшествующиеЗадачи)
	
	ПредставлениеПредшествующиеЗадачи = "";
	Для Каждого ПредшествующаяЗадача Из ПредшествующиеЗадачи Цикл
		Если Не ПустаяСтрока(ПредставлениеПредшествующиеЗадачи) Тогда
			ПредставлениеПредшествующиеЗадачи =  ПредставлениеПредшествующиеЗадачи + ", ";
		КонецЕсли;
		ПредставлениеПредшествующиеЗадачи = ПредставлениеПредшествующиеЗадачи + ПредшествующаяЗадача.ПредставлениеЗадачи;
	КонецЦикла;
	
	Возврат ПредставлениеПредшествующиеЗадачи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПланируемыеРесурсы(ПланируемыеРесурсы)
	
	ПредставлениеПланируемыеРесурсы = "";
	Для Каждого СтрокаПланируемыеРесурсы Из ПланируемыеРесурсы Цикл
		Если Не ПустаяСтрока(ПредставлениеПланируемыеРесурсы) Тогда
			ПредставлениеПланируемыеРесурсы =  ПредставлениеПланируемыеРесурсы + ", ";
		КонецЕсли;
		ПредставлениеПланируемыеРесурсы = ПредставлениеПланируемыеРесурсы + СтрокаПланируемыеРесурсы.ПредставлениеРесурса;
	КонецЦикла;
	
	Возврат ПредставлениеПланируемыеРесурсы;
	
КонецФункции

&НаКлиенте
Процедура СформироватьСоответствиеПодчиненныхЗадач(ДанныеЗадачи, СоответствиеЗадач) 
	
	МассивПредшествующихЗадач = Новый Массив;
	Для Каждого СтрокаПредшестующие Из ДанныеЗадачи.ПредшествующиеЗадачи Цикл
		МассивПредшествующихЗадач.Добавить(СтрокаПредшестующие.ЗадачаШаблона);
	КонецЦикла;
	
	СоответствиеЗадач.Вставить(ДанныеЗадачи.ЗадачаШаблона, МассивПредшествующихЗадач);
	
	Для Каждого ПодчиненнаяЗадача Из ДанныеЗадачи.ПолучитьЭлементы() Цикл
		СформироватьСоответствиеПодчиненныхЗадач(ПодчиненнаяЗадача, СоответствиеЗадач)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокиДереваЗадач(СтрокиДерева, МассивОбработанныхИмеющихсяЗадач, ДеревоЗадачЗначение, СсылкаНаШаблон)
	
	ЗначениеУпорядочивания = 0;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ЗаписатьЗадачуШаблонаПоСтрокеДерева(СтрокаДерева, МассивОбработанныхИмеющихсяЗадач, ДеревоЗадачЗначение, ЗначениеУпорядочивания, СсылкаНаШаблон);
		ЗаписатьСтрокиДереваЗадач(СтрокаДерева.Строки, МассивОбработанныхИмеющихсяЗадач, ДеревоЗадачЗначение, СсылкаНаШаблон);
		
		ЗначениеУпорядочивания = ЗначениеУпорядочивания + 1;
		
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗадачуШаблонаПоСтрокеДерева(СтрокаДерева, МассивОбработанныхИмеющихсяЗадач, ДеревоЗадачЗначение, ЗначениеУпорядочивания, СсылкаНаШаблон)

	ЗадачаШаблонаОбъект = СтрокаДерева.ЗадачаШаблона.ПолучитьОбъект();
	
	Если ЗадачаШаблонаОбъект = Неопределено Тогда
		ЗадачаШаблонаОбъект = Справочники.ЗадачиШаблонаПроцесса.СоздатьЭлемент();
		ЗадачаШаблонаОбъект.УстановитьСсылкуНового(СтрокаДерева.ЗадачаШаблона);
		ЗадачаШаблонаОбъект.Владелец = СсылкаНаШаблон;
	Иначе
		МассивОбработанныхИмеющихсяЗадач.Добавить(СтрокаДерева.ЗадачаШаблона);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗадачаШаблонаОбъект, СтрокаДерева, , "ПредшествующиеЗадачи, Описание");
	ЗадачаШаблонаОбъект.ЗначениеУпорядочивания = ЗначениеУпорядочивания;
	
	Если СтрокаДерева.Родитель <> Неопределено Тогда
		ЗадачаШаблонаОбъект.Родитель = СтрокаДерева.Родитель.ЗадачаШаблона;
	КонецЕсли;
	ЗадачаШаблонаОбъект.Описание = Новый ХранилищеЗначения(СтрокаДерева.Описание);
	
	Если Не ИспользуютсяПриоритеты Тогда
		ЗадачаШаблонаОбъект.СдвигПриоритета = 0;
	КонецЕсли;
	
	ЗадачаШаблонаОбъект.ПредшествующиеЗадачи.Очистить();
	Для Каждого СтрокаПредшествующаяЗадача Из СтрокаДерева.ПредшествующиеЗадачи Цикл
		НоваяПредшествующаяЗадача = ЗадачаШаблонаОбъект.ПредшествующиеЗадачи.Добавить();
		НоваяПредшествующаяЗадача.ПредшествующаяЗадача = СтрокаПредшествующаяЗадача.ЗадачаШаблона;
	КонецЦикла;
	
	ЗадачаШаблонаОбъект.ПланируемыеРесурсы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаДерева.ПланируемыеРесурсы, ЗадачаШаблонаОбъект.ПланируемыеРесурсы);
	
	ЗадачаШаблонаОбъект.ДополнительныеРеквизиты.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаДерева.ДополнительныеРеквизиты, ЗадачаШаблонаОбъект.ДополнительныеРеквизиты);
	
	ЗадачаШаблонаОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадачШаблона(ЗначениеКопирования)

	ДеревоЗадачЗначение = РеквизитФормыВЗначение("ДеревоЗадач");
	ДеревоЗадачЗначение.Строки.Очистить();
	ЗадачиПроцессов.УстановитьКорневойЭлементДерева(ДеревоЗадачЗначение);
	ЗадачиПроцессов.ЗаполнитьДеревоЗадачШаблонаПроцесса(ДеревоЗадачЗначение,
	                                                    ?(ЗначениеЗаполнено(ЗначениеКопирования), ЗначениеКопирования, Объект.Ссылка));
	ЗначениеВРеквизитФормы(ДеревоЗадачЗначение, "ДеревоЗадач");
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		ЗаменитьСсылкиНаЗадачиПослеКопирования();
	КонецЕсли;
	
	ЗаполнитьЗависимыеПоляДерева();
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСсылкиНаЗадачиПослеКопирования()
	
	СоответствиеЗадач = Новый Соответствие;
	
	ЗаменитьСсылкиНаЗадачиВСтрокахДерева(ДеревоЗадач.ПолучитьЭлементы()[0], СоответствиеЗадач);
	ЗаменитьСсылкиВПодчиненныхЗадачах(ДеревоЗадач.ПолучитьЭлементы()[0], СоответствиеЗадач);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСсылкиНаЗадачиВСтрокахДерева(СтрокаДерева, СоответствиеЗадач)

	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		ПредыдущаяСсылка = ПодчиненнаяСтрока.ЗадачаШаблона;
		Если Не ЗначениеЗаполнено(ПредыдущаяСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСсылка = Справочники.ЗадачиШаблонаПроцесса.ПолучитьСсылку(Новый УникальныйИдентификатор);
		СоответствиеЗадач.Вставить(ПредыдущаяСсылка, НоваяСсылка);
		ПодчиненнаяСтрока.ЗадачаШаблона = НоваяСсылка;
		
		ЗаменитьСсылкиНаЗадачиВСтрокахДерева(ПодчиненнаяСтрока, СоответствиеЗадач)
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаменитьСсылкиВПодчиненныхЗадачах(СтрокаДерева, СоответствиеЗадач)

	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл

		Если ПодчиненнаяСтрока.ПредшествующиеЗадачи.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПредшествующаяЗадача Из ПодчиненнаяСтрока.ПредшествующиеЗадачи Цикл
			ПредшествующаяЗадача.ЗадачаШаблона = СоответствиеЗадач.Получить(ПредшествующаяЗадача.ЗадачаШаблона);
		КонецЦикла;
		
		ЗаменитьСсылкиВПодчиненныхЗадачах(ПодчиненнаяСтрока, СоответствиеЗадач);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриДобавленииЗадачиСервер(ИдентификаторСтроки)
	
	ДобавляемаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(ИдентификаторСтроки);
	ДобавляемаяСтрока.ЗадачаШаблона = Справочники.ЗадачиШаблонаПроцесса.ПолучитьСсылку(Новый УникальныйИдентификатор);
	ЗаполнитьЗависимыеПоляДерева();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеПоляДерева()
	
	ПредставленияЗадач = Новый Соответствие;
	
	ЗадачиПроцессов.РассчитатьМинимальнуюПродолжительностьЗадачи(ДеревоЗадач.ПолучитьЭлементы()[0], ДеревоЗадач);
	ЗадачиПроцессов.СформироватьНумерациюДерева(ДеревоЗадач, ПредставленияЗадач);
	
	МассивСогласуемыхРесурсов = Объект.ВидыСогласуемыхРесурсов.Выгрузить().ВыгрузитьКолонку("СогласуемыйРесурс");
	ПредставленияСогласуемыхРесурсов = ЗадачиПроцессов.ПредставленияСогласуемыхРесурсов(МассивСогласуемыхРесурсов);
	ЗаполнитьПредставленияВСтрокахДерева(ДеревоЗадач.ПолучитьЭлементы()[0], ПредставленияЗадач, ПредставленияСогласуемыхРесурсов);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВерхнийУровеньДереваЕслиНеобходимо()

	Если НеобходимоРазвернутьВерхнийУровеньДерева Тогда
		ЗадачиПроцессовКлиент.РаскрытьСтрокиВерхнегоУровня(ЭтотОбъект, "ДеревоЗадач");
		НеобходимоРазвернутьВерхнийУровеньДерева = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма)
	
	Форма.КоличествоСтрокДерева = 0;
	ПодсчитатьКоличествоСтрокДерева(Форма.ДеревоЗадач.ПолучитьЭлементы()[0], Форма);
	
	Если Форма.ИспользоватьСогласованиеРесурсов Тогда
		Форма.КоличествоВидовСогласуемыхРесурсов = Форма.Объект.ВидыСогласуемыхРесурсов.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодсчитатьКоличествоСтрокДерева(ДеревоЗадач, Форма);

	СтрокиДерева = ДеревоЗадач.ПолучитьЭлементы();
	Форма.КоличествоСтрокДерева = Форма.КоличествоСтрокДерева + СтрокиДерева.Количество();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ПодсчитатьКоличествоСтрокДерева(СтрокаДерева, Форма);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставленияВСтрокахДерева(СтрокаРодитель, ПредставленияЗадач, ПредставленияСогласуемыхРесурсов)
	
	Для Каждого СтрокаДерева Из СтрокаРодитель.ПолучитьЭлементы() Цикл
		ЗаполнитьПредставленияВСтрокеДерева(СтрокаДерева, ПредставленияЗадач, ПредставленияСогласуемыхРесурсов);
		ЗаполнитьПредставленияВСтрокахДерева(СтрокаДерева, ПредставленияЗадач, ПредставленияСогласуемыхРесурсов);
	КонецЦикла;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставленияВСтрокеДерева(СтрокаДерева, ПредставленияЗадач, ПредставленияСогласуемыхРесурсов)

	ТекстПредставленияПредшествующиеЗадачи = "";
	
	Для Каждого ПредшествующаяЗадача Из СтрокаДерева.ПредшествующиеЗадачи Цикл
		
		ПредставлениеПредшествующейЗадачи = ПредставленияЗадач.Получить(ПредшествующаяЗадача.ЗадачаШаблона);
		Если ПредставлениеПредшествующейЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредшествующаяЗадача.ПредставлениеЗадачи = ПредставлениеПредшествующейЗадачи;
		
		ТекстПредставленияПредшествующиеЗадачи =  ТекстПредставленияПредшествующиеЗадачи
		                                          + ?(ПустаяСтрока(ТекстПредставленияПредшествующиеЗадачи), "", ", ")
		                                          + ПредставлениеПредшествующейЗадачи;
		
	КонецЦикла;
	
	СтрокаДерева.ПредставлениеПредшествующиеЗадачи = ТекстПредставленияПредшествующиеЗадачи;
	
	ТекстПредставленияПланируемыеРесурсы = "";
	Если ПредставленияСогласуемыхРесурсов = Неопределено Тогда
		СтрокаДерева.ПланируемыеРесурсы.Очистить();
	КонецЕсли;
	
	Инд = СтрокаДерева.ПланируемыеРесурсы.Количество();
	
	Пока Инд > 0 Цикл
		
		Инд = Инд - 1;
		
		СтрокаПланируемыеРесурсы = СтрокаДерева.ПланируемыеРесурсы[Инд];
		
		Если СтрокаПланируемыеРесурсы.Планируется = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСписка = ПредставленияСогласуемыхРесурсов.НайтиПоЗначению(СтрокаПланируемыеРесурсы.Ресурс);
		Если ЭлементСписка = Неопределено Тогда
			СтрокаДерева.ПланируемыеРесурсы.Удалить(Инд);
			Продолжить;
		КонецЕсли;
		
		ПредставлениеСогласуемогоРесурса = СтрШаблон("%1 : %2", ЭлементСписка.Представление, СтрокаПланируемыеРесурсы.Планируется);
		
		ТекстПредставленияПланируемыеРесурсы =  ТекстПредставленияПланируемыеРесурсы
		                                        + ?(ПустаяСтрока(ТекстПредставленияПланируемыеРесурсы), "", ", ")
		                                        + ПредставлениеСогласуемогоРесурса;
		
	КонецЦикла;
		
	СтрокаДерева.ПредставлениеПланируемыеРесурсы = ТекстПредставленияПланируемыеРесурсы;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьЗадачуПредшественника(СтрокаДерева, ЗаменяемаяЗадача, НоваяЗадача)

	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.ПредшествующиеЗадачи.Количество() > 0
			И ПодчиненнаяСтрока.ЗадачаШаблона <> НоваяЗадача.ЗадачаШаблона Тогда
			
			НайденныеСтроки = ПодчиненнаяСтрока.ПредшествующиеЗадачи.НайтиСтроки(Новый Структура("ЗадачаШаблона", ЗаменяемаяЗадача.ЗадачаШаблона));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ЗадачаШаблона = НоваяЗадача.ЗадачаШаблона;
				НайденнаяСтрока.ПредставлениеЗадачи = "";
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаменитьЗадачуПредшественника(ПодчиненнаяСтрока, ЗаменяемаяЗадача, НоваяЗадача);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗадачиШаблона()

	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЗадачаШаблона) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Наименование",                         ТекущиеДанные.Наименование);
	ПараметрыОткрытия.Вставить("ЗадачаШаблона",                        ТекущиеДанные.ЗадачаШаблона);
	ПараметрыОткрытия.Вставить("Исполнитель",                          ТекущиеДанные.Исполнитель);
	ПараметрыОткрытия.Вставить("Контролирующий",                       ТекущиеДанные.Контролирующий);
	ПараметрыОткрытия.Вставить("ПлановаяДлительность",                 ТекущиеДанные.ПлановаяДлительность);
	ПараметрыОткрытия.Вставить("Описание",                             ТекущиеДанные.Описание);
	ПараметрыОткрытия.Вставить("ВидДеятельности",                      ТекущиеДанные.ВидДеятельности);
	ПараметрыОткрытия.Вставить("ВладелецШаблона",                      Объект.ВладелецШаблона);
	ПараметрыОткрытия.Вставить("ВозможнаОтменаОтветственнымЗаПредмет", ТекущиеДанные.ВозможнаОтменаОтветственнымЗаПредмет);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр",                       ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("ИспользуютсяПриоритеты",               ИспользуютсяПриоритеты);
	ПараметрыОткрытия.Вставить("Приоритет",                            ТекущиеДанные.Приоритет);
	ПараметрыОткрытия.Вставить("ПриоритетыВладельца",                  ПриоритетыВладельца);
	ПараметрыОткрытия.Вставить("ТипПредмета",                          Объект.ТипПредмета);
	ВышестоящаяЗадача = ТекущиеДанные.ПолучитьРодителя();
	Если ВышестоящаяЗадача <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ПредставлениеВышестоящейЗадачи", ВышестоящаяЗадача.ПолныйКод + " " + ВышестоящаяЗадача.Наименование);
		ПараметрыОткрытия.Вставить("ВышестоящаяЗадача",              ВышестоящаяЗадача.ЗадачаШаблона);
	КонецЕсли;
	ДобавитьПараметрыОткрытияФормыЗадачиШаблонаНаСервере(ПараметрыОткрытия,
	                                                     ТекущиеДанные.ПредшествующиеЗадачи,
	                                                     ТекущиеДанные.ПланируемыеРесурсы,
	                                                     ТекущиеДанные.ДополнительныеРеквизиты);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗадачаШаблонаПослеЗакрытия",ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныПроцесса.Форма.ФормаЗадачиШаблона", ПараметрыОткрытия, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗадачу(ТекущиеДанные)

	СоответствиеПодчинненныхЗадач = Новый Соответствие;
	СформироватьСоответствиеПодчиненныхЗадач(ТекущиеДанные, СоответствиеПодчинненныхЗадач);
	РодительУдаляемогоЭлемента = ДеревоЗадач.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()).ПолучитьРодителя();
	РодительУдаляемогоЭлемента.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	ЗадачаПриУдаленииНаСервере(СоответствиеПодчинненныхЗадач);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПеретащитьЭлементДерева(СтрокаНазначение,СтрокаПеретаскивание, ИспользоватьРодителяСтрокиНазначения = ЛОЖЬ, УдалятьПослеДобавления = Истина);
	
	Если ИспользоватьРодителяСтрокиНазначения Тогда
		НоваяСтрока = СтрокаНазначение.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = СтрокаНазначение.ПолучитьЭлементы().Добавить();
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПеретаскивание,,"ПредшествующиеЗадачи, ПланируемыеРесурсы, ДополнительныеРеквизиты");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаПеретаскивание.ПредшествующиеЗадачи,НоваяСтрока.ПредшествующиеЗадачи);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаПеретаскивание.ПланируемыеРесурсы,НоваяСтрока.ПланируемыеРесурсы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаПеретаскивание.ПланируемыеРесурсы,НоваяСтрока.ПланируемыеРесурсы);
	
	Для каждого Элемент Из СтрокаПеретаскивание.ПолучитьЭлементы() Цикл
		ПеретащитьЭлементДерева(НоваяСтрока,Элемент,Ложь,Ложь);
	КонецЦикла;
	
	Если УдалятьПослеДобавления Тогда
		СтрокаПеретаскивание.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаПеретаскивание);
	КонецЕсли;
	
	Если ИспользоватьРодителяСтрокиНазначения Тогда
		Элементы.ДеревоЗадач.Развернуть(СтрокаНазначение.ПолучитьРодителя().ПолучитьИдентификатор(),Ложь);
	Иначе	
		Элементы.ДеревоЗадач.Развернуть(СтрокаНазначение.ПолучитьИдентификатор(),Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДанныеПриоритетов()

	ИспользуютсяПриоритетыФО = ПолучитьФункциональнуюОпцию("ИспользоватьПриоритетыРабот");
	Если Не ИспользуютсяПриоритетыФО Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВладелецШаблона) Тогда
		
		ИспользуютсяПриоритеты = Ложь;
		ПриоритетПоУмолчанию   = Справочники.ПриоритетыРабот.ПустаяСсылка();
		ПриоритетыВладельца.Очистить();
		
	Иначе
		
		ПриоритетПоУмолчанию = Справочники.ПриоритетыРабот.ПриоритетПоУмолчанию(Объект.ВладелецШаблона);
		Если ЗначениеЗаполнено(ПриоритетПоУмолчанию) Тогда
			ИспользуютсяПриоритеты = Истина;
			ДанныеПриоритетов = Справочники.ПриоритетыРабот.ДанныеДействующихПриоритетов(Объект.ВладелецШаблона);
			Для Каждого ДанныеПриоритета Из ДанныеПриоритетов Цикл
				ПриоритетыВладельца.Добавить(ДанныеПриоритета.Приоритет);
			КонецЦикла;
		Иначе
			ПриоритетыВладельца.Очистить();
			ИспользуютсяПриоритеты = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДеревоЗадачПриоритет.Видимость = ИспользуютсяПриоритеты;
	
	ЗаполнитьПриоритетыВДеревеЗадач();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриоритетыВДеревеЗадач()

	Если Не ИспользуютсяПриоритеты Тогда
		ОчиститьПриоритетыСдвигиВСтрокахДерева(ДеревоЗадач.ПолучитьЭлементы()[0]);
	Иначе
		ЗаполнитьПриоритетыСогласноСдвигамВСтрокахДерева(ДеревоЗадач.ПолучитьЭлементы()[0],
		                                                 ПриоритетыОчередиРаботыКлиентСервер.СдвигиПриоритетов(ПриоритетыВладельца, ПриоритетПоУмолчанию));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриоритетыСогласноСдвигамВСтрокахДерева(СтрокаРодитель, СдвигиПриоритетов)
	
	Для Каждого СтрокаДерева Из СтрокаРодитель.ПолучитьЭлементы() Цикл
		ЗаполнитьПриоритетыСогласноСдвигамВСтрокеДерева(СтрокаДерева, СдвигиПриоритетов);
		ЗаполнитьПриоритетыСогласноСдвигамВСтрокахДерева(СтрокаДерева, СдвигиПриоритетов);
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПриоритетыСогласноСдвигамВСтрокеДерева(СтрокаДерева, СдвигиПриоритетов)
	
	Приоритет = СдвигиПриоритетов.Получить(СтрокаДерева.СдвигПриоритета);
	Если Приоритет = Неопределено Тогда
		
		МассивПриоритетов = Новый Массив;
		Для Каждого ЭлементСоответствия Из СдвигиПриоритетов Цикл
			МассивПриоритетов.Добавить(ЭлементСоответствия.Значение);
		КонецЦикла;
		
		Если СтрокаДерева.СдвигПриоритета < 0 Тогда
			Приоритет = МассивПриоритетов[0];
		ИначеЕсли СтрокаДерева.СдвигПриоритета = 0 Тогда
			Приоритет = ПриоритетПоУмолчанию;
		Иначе
			Приоритет = МассивПриоритетов[МассивПриоритетов.Количество() -1];
		КонецЕсли;
	КонецЕсли;
	СтрокаДерева.Приоритет       = Приоритет;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПриоритетыСдвигиВСтрокахДерева(СтрокаРодитель)
	
	Для Каждого СтрокаДерева Из СтрокаРодитель.ПолучитьЭлементы() Цикл
		ОчиститьПриоритетыСдвигиВСтрокеДерева(СтрокаДерева);
		ОчиститьПриоритетыСдвигиВСтрокахДерева(СтрокаДерева);
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ОчиститьПриоритетыСдвигиВСтрокеДерева(СтрокаДерева)

	СтрокаДерева.Приоритет       = Справочники.ПриоритетыРабот.ПустаяСсылка();
	СтрокаДерева.СдвигПриоритета = 0;
	
КонецПроцедуры

#КонецОбласти

