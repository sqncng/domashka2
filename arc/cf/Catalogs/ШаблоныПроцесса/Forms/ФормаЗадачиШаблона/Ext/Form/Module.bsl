
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользоватьСогласованиеРесурсов = ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеРесурсов");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
	                         "Наименование, ЗадачаШаблона, Исполнитель, ВидДеятельности,
	                         |Контролирующий, ПлановаяДлительность, Описание, АдресДереваЗадач,
	                         |ВышестоящаяЗадача, ПредставлениеВышестоящейЗадачи, ВладелецШаблона,
	                         |ВозможнаОтменаОтветственнымЗаПредмет");
	
	Если Не ЗначениеЗаполнено(ЗадачаШаблона) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВышестоящаяЗадача) Тогда
		ПредставлениеВышестоящейЗадачи = "";
	КонецЕсли;
	
	ДанныеПредшествующиеЗадачи = ПолучитьИзВременногоХранилища(Параметры.АдресПредшествующиеЗадачи); 
	Если ДанныеПредшествующиеЗадачи <> Неопределено Тогда
		ПредшествующиеЗадачи.Загрузить(ДанныеПредшествующиеЗадачи);
	КонецЕсли;
	
	ДанныеПланируемыеРесурсы = ПолучитьИзВременногоХранилища(Параметры.АдресПланируемыеРесурсы);
	Если ДанныеПланируемыеРесурсы <> Неопределено Тогда
		ПланируемыеРесурсы.Загрузить(ДанныеПланируемыеРесурсы);
	КонецЕсли;
	
	ДанныеДополнительныеРеквизиты = ПолучитьИзВременногоХранилища(Параметры.АдресДополнительныеРеквизиты);
	Если ДанныеДополнительныеРеквизиты <> Неопределено Тогда
		ДополнительныеРеквизиты.Загрузить(ДанныеДополнительныеРеквизиты);
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ФормаЗавершитьРедактирование.Заголовок = НСтр("ru = 'Закрыть'");
	КонецЕсли;
	
	Если Не Параметры.ИспользуютсяПриоритеты Тогда
		Элементы.Приоритет.Видимость = Ложь;
	Иначе
		Элементы.Приоритет.Видимость    = Истина;
		Приоритет                       = Параметры.Приоритет;
		Элементы.Приоритет.СписокВыбора.ЗагрузитьЗначения(Параметры.ПриоритетыВладельца.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если Параметры.ТипПредмета <> "Справочник.ТехническиеПроекты" Тогда
		Элементы.ВозможнаОтменаОтветственнымЗаПредмет.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительно");
	ДополнительныеПараметры.Вставить("Объект", ЭтотОбъект);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеВышестоящейЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = СтруктураПараметровОткрытияФормыВыбораПредшествующихЗадач(Истина);
	ПараметрыФормы.Вставить("НедоступенВыборПодчиненныхЗадачТекущейЗадачи", Истина);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВышестоящаяЗадачаПослеВыбора",ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныПроцесса.Форма.ФормаВыбораЗадачиШаблона", ПараметрыФормы,ЭтотОбъект,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВышестоящейЗадачиОчистка(Элемент, СтандартнаяОбработка)
	
	ВышестоящаяЗадача  = ПредопределенноеЗначение("Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка");
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшествующиеЗадачи

&НаКлиенте
Процедура ПредшествующиеЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ПараметрыФормы = СтруктураПараметровОткрытияФормыВыбораПредшествующихЗадач();
	ОткрытьФормуВыбораПредыщущейЗадачи(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеЗадачиПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеЗадачиПредставлениеЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПредшествующиеЗадачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = СтруктураПараметровОткрытияФормыВыбораПредшествующихЗадач();
	ПараметрыФормы.Вставить("ВыбраннаяЗадача", ТекущиеДанные.ЗадачаШаблона);
	ОткрытьФормуВыбораПредыщущейЗадачи(ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланируемыеРесурсы

&НаКлиенте
Процедура ПланируемыеРесурсыПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланируемыеРесурсыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	Если ТолькоПросмотр Тогда
		Закрыть();
	Иначе
		
		ПередЗавершениемРедактированияНаСервере();
		
		СтруктураВозврата = СтруктураВозврата();
		
		Закрыть(СтруктураВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиФормы(Форма)

	ЗаголовокПредшествующиеСтраницы = НСтр("ru = 'Предшествующие задачи'");
	КоличествоЗадачСтрокой = "";
	КоличествоЗадач = Форма.ПредшествующиеЗадачи.Количество();
	
	Если КоличествоЗадач > 0 Тогда
		КоличествоЗадачСтрокой = " (" + Строка(КоличествоЗадач) + ")";
	КонецЕсли;
	
	Форма.Элементы.СтраницаПредшествующиеЗадачи.Заголовок = ЗаголовокПредшествующиеСтраницы + КоличествоЗадачСтрокой;
	
	Если Форма.ИспользоватьСогласованиеРесурсов Тогда
		
		ЗаголовокПланируемыеРесурсыСтраницы = НСтр("ru = 'Планируемые ресурсы'");
		КоличествоПланируемыхРесурсов = 0;
		КоличествоПланируемыхРесурсовСтрокой = "";
		
		Для Каждого СтрокаПланируемыйРесурсы Из Форма.ПланируемыеРесурсы Цикл
			Если СтрокаПланируемыйРесурсы.Планируется > 0 Тогда
				КоличествоПланируемыхРесурсов = КоличествоПланируемыхРесурсов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПланируемыхРесурсов > 0 Тогда
			КоличествоПланируемыхРесурсовСтрокой = " (" + Строка(КоличествоПланируемыхРесурсов) + ")";
		КонецЕсли;
		
		Форма.Элементы.СтраницаПланируемыеРесурсы.Заголовок = ЗаголовокПланируемыеРесурсыСтраницы + КоличествоПланируемыхРесурсовСтрокой;
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПередЗавершениемРедактированияНаСервере()

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Функция СтруктураВозврата()
	
	СтруктураВозврата = Новый Структура;
	
	СтруктураВозврата.Вставить("Наименование",                         Наименование);
	СтруктураВозврата.Вставить("ЗадачаШаблона",                        ЗадачаШаблона);
	СтруктураВозврата.Вставить("Исполнитель",                          Исполнитель);
	СтруктураВозврата.Вставить("Контролирующий",                       Контролирующий);
	СтруктураВозврата.Вставить("ПлановаяДлительность",                 ПлановаяДлительность);
	СтруктураВозврата.Вставить("Описание",                             Описание);
	СтруктураВозврата.Вставить("ВышестоящаяЗадача",                    ВышестоящаяЗадача);
	СтруктураВозврата.Вставить("ВидДеятельности",                      ВидДеятельности);
	СтруктураВозврата.Вставить("Приоритет",                            Приоритет);
	СтруктураВозврата.Вставить("ВозможнаОтменаОтветственнымЗаПредмет", ВозможнаОтменаОтветственнымЗаПредмет);
	
	ПодготовитьТаблицуПланируемыеРесурсы();
	
	Если ПредшествующиеЗадачи.Количество() = 0
		И ПланируемыеРесурсы.Количество() = 0
		И ДополнительныеРеквизиты.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("АдресПредшествующиеЗадачи", Неопределено);
		СтруктураВозврата.Вставить("АдресПланируемыеРесурсы", Неопределено);
		СтруктураВозврата.Вставить("АдресДополнительныеРеквизиты", Неопределено);
	Иначе
		ДобавитьПараметрыОткрытияФормыЗадачиШаблонаНаСервере(СтруктураВозврата, ВладелецФормы.УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции 

&НаКлиенте
Процедура ПодготовитьТаблицуПланируемыеРесурсы()

	Инд = ПланируемыеРесурсы.Количество();
	Пока Инд > 0 Цикл
		
		Если ПланируемыеРесурсы[Инд - 1].Планируется = 0 Тогда
			ПланируемыеРесурсы.Удалить(Инд - 1);
		КонецЕсли;
		
		Инд = Инд - 1;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрыОткрытияФормыЗадачиШаблонаНаСервере(СтруктураВозврата, ИдентификаторФормыВладельца)
	
	
	СтруктураВозврата.Вставить("АдресПредшествующиеЗадачи",
	                           ?(ПредшествующиеЗадачи.Количество() = 0,
	                             Неопределено,
	                             ПоместитьВоВременноеХранилище(ПредшествующиеЗадачи.Выгрузить(), ИдентификаторФормыВладельца)));
	СтруктураВозврата.Вставить("АдресПланируемыеРесурсы",
	                           ?(ПланируемыеРесурсы.Количество() = 0,
	                             Неопределено,
	                             ПоместитьВоВременноеХранилище(ПланируемыеРесурсы.Выгрузить(), ИдентификаторФормыВладельца)));
	СтруктураВозврата.Вставить("АдресДополнительныеРеквизиты",
	                           ?(ДополнительныеРеквизиты.Количество() = 0,
	                             Неопределено,
	                             ПоместитьВоВременноеХранилище(ДополнительныеРеквизиты.Выгрузить(), ИдентификаторФормыВладельца)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующаяЗадачаПослеВыбора(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ЗадачаШаблона", Результат.ЗадачаШаблона);
	НайденныеСтроки = ПредшествующиеЗадачи.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(Результат.ВыбраннаяЗадача) Тогда
			ТекущиеДанные = Элементы.ПредшествующиеЗадачи.ТекущиеДанные;
			Если ТекущиеДанные <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
			КонецЕсли;
		Иначе
			НоваяСтрока = ПредшествующиеЗадачи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВышестоящаяЗадачаПослеВыбора(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВышестоящаяЗадача = Результат.ЗадачаШаблона;
	ПредставлениеВышестоящейЗадачи = Результат.ПредставлениеЗадачи;

КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровОткрытияФормыВыбораПредшествующихЗадач(ВыборВышестоящейЗадачи = Ложь)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресДереваЗадач",                             АдресДереваЗадач);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",                           Истина);
	ПараметрыФормы.Вставить("НаименованиеТекущейЗадачи",                    Наименование);
	ПараметрыФормы.Вставить("ЗадачаШаблона",                                ЗадачаШаблона);
	ПараметрыФормы.Вставить("СписокПодобранныхЗадач",                       СписокУжеПодобранныхЗадач(ВыборВышестоящейЗадачи));
	ПараметрыФормы.Вставить("НедоступенВыборПодчиненныхЗадачТекущейЗадачи", Истина);

	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораПредыщущейЗадачи(ПараметрыФормы)

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПредшествующаяЗадачаПослеВыбора",ЭтотОбъект);
	ОткрытьФорму("Справочник.ШаблоныПроцесса.Форма.ФормаВыбораЗадачиШаблона", ПараметрыФормы,ЭтотОбъект,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Функция СписокУжеПодобранныхЗадач(ВыборВышестоящейЗадачи);
	
	СписокПодобранныхЗадач = Новый СписокЗначений;
	
	Если Не ВыборВышестоящейЗадачи Тогда
		СписокПодобранныхЗадач.Добавить(ПредопределенноеЗначение("Справочник.ЗадачиШаблонаПроцесса.ПустаяСсылка"));
	КонецЕсли;
	
	Для Каждого ПредшествующаяЗадача Из ПредшествующиеЗадачи Цикл
		Если СписокПодобранныхЗадач.НайтиПоЗначению(ПредшествующаяЗадача.ЗадачаШаблона) = Неопределено Тогда
			СписокПодобранныхЗадач.Добавить(ПредшествующаяЗадача.ЗадачаШаблона);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПодобранныхЗадач;
	
КонецФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект, ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
