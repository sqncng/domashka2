
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УстановитьПараметрРаздел(Список, РазделПроекта);
	
	Проект = ПараметрыСеанса.ТекущийПроект;
	Проекты.УстановитьОтборВСпискеПоПроекту(Список);
	
	ИнициализироватьКомпоновщикНастроек();
	ОбновитьДеревоГрупп();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДеревоГрупп();
	
	Если Настройки.Получить("РазделПроекта")<>Неопределено Тогда
		УстановитьПараметрРаздел(Список, РазделПроекта);
	КонецЕсли;
	
	Если Настройки.Получить("Ответственный")<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Ответственный));
	КонецЕсли;
	
	Если Настройки.Получить("Зарегистрировал")<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Зарегистрировал", Зарегистрировал, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Зарегистрировал));
	КонецЕсли;
	
	Если Настройки.Получить("Статус")<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Статус));
	КонецЕсли;
	
	Если Настройки.Получить("Важность")<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Важность", Важность, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Важность));
	КонецЕсли;
	
	Если Настройки.Получить("Источник")<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Источник", Источник, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Источник));
	КонецЕсли;
	
	Если Настройки.Получить("ТолькоКПросмотру")<>Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "КПросмотру", Истина, ВидСравненияКомпоновкиДанных.Равно,,ТолькоКПросмотру = Истина);
	КонецЕсли;
	
	Если Настройки.Получить("ВключениеВТехническиеПроекты")<>Неопределено Тогда
		
		Если ВключениеВТехническиеПроекты = "Включенные" Тогда
			ВидСравненияДляТехПроектов = ВидСравненияКомпоновкиДанных.Заполнено;
		Иначе
			ВидСравненияДляТехПроектов = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ТехническиеПроекты", 0, ВидСравненияДляТехПроектов,,ЗначениеЗаполнено(ВключениеВТехническиеПроекты));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Идея" Тогда
		
		СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
		
		ОбновитьДеревоГрупп();
		
		РазвернутьДерево();
		ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
		
	ИначеЕсли ИмяСобытия = "ИзмененТекущийПроект" Тогда
		
		Проект = Параметр;
		
		СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
		
		ОбработатьИзменениеТекущегоПроектаСервер();
		
		РазвернутьДерево();
		ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборРазделПроектаПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	ПриИзмененииРазделаСервер();
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ИзменитьОтбор("Ответственный", Ответственный);
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗарегистрировалПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ИзменитьОтбор("Зарегистрировал", Зарегистрировал);
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ИзменитьОтбор("Статус", Статус);
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВажностьПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ИзменитьОтбор("Важность", Важность);
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИсточникПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ИзменитьОтбор("Источник", Источник);
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоКПросмотруПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ИзменитьОтбор("КПросмотру", ТолькоКПросмотру);
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключениеВТехническиеПроектыПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ИзменитьОтбор("ТехническиеПроекты", ВключениеВТехническиеПроекты);
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыДеревоГрупп

&НаКлиенте
Процедура ДеревоГруппПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиДереваГрупп",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГруппПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = ДеревоГрупп.НайтиПоИдентификатору(Строка);	
	
	Если СтрокаДерева.Уровень = 1 ИЛИ СтрокаДерева.РазделПроектаЭтоГруппа ИЛИ СтрокаДерева.ЦелеваяЗадачаЭтоГруппа Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Иначе
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоГруппПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		СтруктураДанных = СтруктураДанныхСтрокиДерева();
		
		ПеренестиИдеиВРаздел(ПараметрыПеретаскивания.Значение, Строка);
		
		РазвернутьДерево();
		ВосстановитьСтрокуДерева(СтруктураДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	СтруктураДанныхСтроки = СтруктураДанныхСтрокиДерева();
	
	ОбновитьДеревоГрупп();
	
	РазвернутьДерево();
	ВосстановитьСтрокуДерева(СтруктураДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если НЕ ДоступноИзмененияИдеи() Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтнестиКТематике(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		Тематика = "";
		ЗаголовокДиалога = НСтр("ru='Укажите тематику'");
		
		Структура = Новый Структура("Тематика", Тематика);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтнестиКТематикеЗавершение", ЭтотОбъект, Структура);
		ПоказатьВводСтроки(ОписаниеОповещения, Тематика, ЗаголовокДиалога, 200);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтнестиКТематикеЗавершение(Строка, ДополнительныеПараметры) Экспорт
    
    Тематика = ?(Строка = Неопределено, ДополнительныеПараметры.Тематика, Строка);
    
    
    Если (Строка <> Неопределено) Тогда
        
        СтруктураДанных = СтруктураДанныхСтрокиДерева();
        
        МассивИдей = Элементы.Список.ВыделенныеСтроки;
        ОтнестиИдеиКТематике(МассивИдей, Тематика);
        
        РазвернутьДерево();
        ВосстановитьСтрокуДерева(СтруктураДанных);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакКПросмотру(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		СтруктураДанных = СтруктураДанныхСтрокиДерева();
		
		МассивИдей = Элементы.Список.ВыделенныеСтроки;
		УстановитьПризнакКПросмотруСервер(МассивИдей, Истина);
		
		РазвернутьДерево();
		ВосстановитьСтрокуДерева(СтруктураДанных);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПризнакКПросмотру(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество()>0 Тогда
		
		СтруктураДанных = СтруктураДанныхСтрокиДерева();
		
		МассивИдей = Элементы.Список.ВыделенныеСтроки;
		УстановитьПризнакКПросмотруСервер(МассивИдей, Ложь);
		
		РазвернутьДерево();
		ВосстановитьСтрокуДерева(СтруктураДанных);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РазвернутьДерево()
	
	ЭлементыДерева = ДеревоГрупп.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество()>0 Тогда
		Корень = ЭлементыДерева.Получить(0);
		Попытка
			Если НЕ Элементы.ДеревоГрупп.Развернут(Корень.ПолучитьИдентификатор()) Тогда
				Элементы.ДеревоГрупп.Развернуть(Корень.ПолучитьИдентификатор(), Истина);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СтруктураДанныхСтрокиДерева()
	
	ТекущийУровень = 0;
	ТекущийОтветственный = Неопределено;
	ТекущийРаздел = Неопределено;
	ТекущаяЦелеваяЗадача = Неопределено;
	ТекущаяТематика = "";
	
	ТекущиеДанные = Элементы.ДеревоГрупп.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийУровень = ТекущиеДанные.Уровень;
		ТекущаяТематика = ТекущиеДанные.Тематика;
		ТекущийРаздел = ТекущиеДанные.РазделПроекта;
		ТекущийОтветственный = ТекущиеДанные.Ответственный;
		ТекущаяЦелеваяЗадача = ТекущиеДанные.ЦелеваяЗадача;
	КонецЕсли;
	
	Структура = Новый Структура();
	
	Структура.Вставить("Уровень", ТекущийУровень);
	Структура.Вставить("Ответственный", ТекущийОтветственный);
	Структура.Вставить("РазделПроекта", ТекущийРаздел);
	Структура.Вставить("Тематика", ТекущаяТематика);
	Структура.Вставить("ЦелеваяЗадача", ТекущаяЦелеваяЗадача);
	
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСтрокуДерева(СтруктураДанныхСтроки)
	
	ИскомаяСтрока = Неопределено;
	
	Если СтруктураДанныхСтроки.Уровень>0 Тогда
		
		СтрокиДерева = ДеревоГрупп.ПолучитьЭлементы();
		
		ИскомаяСтрока = ВосстановленнаяСтрока(СтрокиДерева, СтруктураДанныхСтроки);
		
		Если ИскомаяСтрока <> Неопределено Тогда
			Элементы.ДеревоГрупп.ТекущаяСтрока = ИскомаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВосстановленнаяСтрока(СтрокиДерева, СтруктураДанныхСтроки)
	
	ИскомаяСтрока = Неопределено;
	
	Для Каждого Строка из СтрокиДерева Цикл
		
		Если Строка.Уровень = СтруктураДанныхСтроки.Уровень Тогда
			
			Если Строка.Ответственный = СтруктураДанныхСтроки.Ответственный
				И Строка.РазделПроекта = СтруктураДанныхСтроки.РазделПроекта
				И Строка.Тематика = СтруктураДанныхСтроки.Тематика
				И Строка.ЦелеваяЗадача = СтруктураДанныхСтроки.ЦелеваяЗадача Тогда
				
				ИскомаяСтрока = Строка;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
		ИскомаяСтрока = ВосстановленнаяСтрока(Строка.ПолучитьЭлементы(), СтруктураДанныхСтроки);
		
		Если ИскомаяСтрока <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИскомаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиДереваГрупп();
	
	ТекущиеДанные = Элементы.ДеревоГрупп.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Уровень = 1 Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тематика", "", ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Ответственный));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "РазделПроекта", ТекущиеДанные.РазделПроекта, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦелеваяЗадача", ТекущиеДанные.ЦелеваяЗадача, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,,Ложь);
																				
	Иначе
		
		Если ТекущиеДанные.РазделПроектаЭтоГруппа Тогда
			ВидСравненияДляРаздела = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		Иначе
			ВидСравненияДляРаздела = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		Если ТекущиеДанные.ЦелеваяЗадачаЭтоГруппа Тогда
			ВидСравненияДляЦелевойЗадачи = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		Иначе
			ВидСравненияДляЦелевойЗадачи = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		Если ТекущиеДанные.ГруппировкаРаздела Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тематика", "", ВидСравненияКомпоновкиДанных.Равно,, Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Ответственный));
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "РазделПроекта", ТекущиеДанные.РазделПроекта, ВидСравненияДляРаздела,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦелеваяЗадача", ТекущиеДанные.ЦелеваяЗадача, ВидСравненияДляЦелевойЗадачи,,Ложь);
			
		ИначеЕсли ТекущиеДанные.ГруппировкаОтветственного Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тематика", "", ВидСравненияКомпоновкиДанных.Равно,,Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ТекущиеДанные.Ответственный, ВидСравненияКомпоновкиДанных.Равно,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "РазделПроекта",, ВидСравненияКомпоновкиДанных.НеЗаполнено,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦелеваяЗадача", ТекущиеДанные.ЦелеваяЗадача, ВидСравненияДляЦелевойЗадачи,,Ложь);
			
		ИначеЕсли ТекущиеДанные.ГруппировкаЦелевойЗадачи Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦелеваяЗадача", ТекущиеДанные.ЦелеваяЗадача, ВидСравненияДляЦелевойЗадачи,,Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тематика", ТекущиеДанные.Тематика, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
			
			ОтветственныйДляОтбора = Неопределено;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Ответственный) Тогда
				ОтветственныйДляОтбора = ТекущиеДанные.Ответственный;
			Иначе
				ОтветственныйДляОтбора = Ответственный;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "РазделПроекта", ТекущиеДанные.РазделПроекта, ВидСравненияДляРаздела,, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ОтветственныйДляОтбора, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтветственныйДляОтбора));
			
		ИначеЕсли ТекущиеДанные.ГруппировкаТематики Тогда

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Тематика", ТекущиеДанные.Тематика, ВидСравненияКомпоновкиДанных.Равно,,Истина);
			
			ОтветственныйДляОтбора = Неопределено;
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Ответственный) Тогда
				ОтветственныйДляОтбора = ТекущиеДанные.Ответственный;
			Иначе
				ОтветственныйДляОтбора = Ответственный;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЦелеваяЗадача", Неопределено, ВидСравненияКомпоновкиДанных.НеЗаполнено,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "РазделПроекта", ТекущиеДанные.РазделПроекта, ВидСравненияДляРаздела,, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ответственный", ОтветственныйДляОтбора, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ОтветственныйДляОтбора));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоГрупп()
	
	СхемаКомпоновки = Справочники.Идеи.ПолучитьМакет("СхемаКомпоновкиДляФормированияДерева");
	
	ДобавитьОтборыДляДереваГрупп(КомпоновщикНастроек.Настройки.Отбор);
	УстановитьПараметрыДляДереваГрупп(КомпоновщикНастроек.Настройки.ПараметрыДанных);
	
	МакетКомпоновки = ОбщегоНазначенияСППР.ПолучитьМакетКомпоновки(СхемаКомпоновки, КомпоновщикНастроек.Настройки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	
	ДеревоРезультата = Новый ДеревоЗначений();
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультата);
	
	ДеревоРезультата = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Если ДеревоРезультата.Колонки.Найти("Ответственный") = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
		ДеревоРезультата.Колонки.Добавить("Ответственный", ОписаниеТипов);
	КонецЕсли;
	
	Если ДеревоРезультата.Колонки.Найти("РазделПроекта") = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.РазделыПроекта");
		ДеревоРезультата.Колонки.Добавить("РазделПроекта", ОписаниеТипов);
	КонецЕсли;
	
	Если ДеревоРезультата.Колонки.Найти("Тематика") = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
		ДеревоРезультата.Колонки.Добавить("Тематика", ОписаниеТипов);
	КонецЕсли;
	
	Если ДеревоРезультата.Колонки.Найти("ЦелеваяЗадача") = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ЦелевыеЗадачи");
		ДеревоРезультата.Колонки.Добавить("Тематика", ОписаниеТипов);
	КонецЕсли;
	
	Если ДеревоРезультата.Колонки.Найти("РазделПроектаЭтоГруппа") = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Булево");
		ДеревоРезультата.Колонки.Добавить("РазделПроектаЭтоГруппа", ОписаниеТипов);
	КонецЕсли;
	
	Если ДеревоРезультата.Колонки.Найти("ЦелеваяЗадачаЭтоГруппа") = Неопределено Тогда
		ОписаниеТипов = Новый ОписаниеТипов("Булево");
		ДеревоРезультата.Колонки.Добавить("ЦелеваяЗадачаЭтоГруппа", ОписаниеТипов);
	КонецЕсли;
	
	ДеревоРезультата.Колонки.Добавить("ГруппировкаРаздела", Новый ОписаниеТипов("Булево"));
	ДеревоРезультата.Колонки.Добавить("ГруппировкаОтветственного", Новый ОписаниеТипов("Булево"));
	ДеревоРезультата.Колонки.Добавить("ГруппировкаТематики", Новый ОписаниеТипов("Булево"));
	ДеревоРезультата.Колонки.Добавить("ГруппировкаЦелевойЗадачи", Новый ОписаниеТипов("Булево"));
	
	Если ДеревоРезультата.Строки.Количество() = 0 Тогда
		ДеревоРезультата.Строки.Добавить();
	КонецЕсли;
	
	Уровень = 1;
	Для Каждого СтрокаИерархии из ДеревоРезультата.Строки Цикл
		СтрокаИерархии.Уровень = Уровень;
		СтрокаИерархии.ИндексКартинки = 2;
		ЗаполнитьПризнакиГруппировок(СтрокаИерархии.Строки, Уровень);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоРезультата, "ДеревоГрупп");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтбор(ИмяЭлементаОтбора, ЗначениеОтбора)
	
	ОбновитьДеревоГрупп();
	
	Если ИмяЭлементаОтбора = "КПросмотру" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяЭлементаОтбора, Истина, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеОтбора = Истина);
		
	ИначеЕсли ИмяЭлементаОтбора = "ТехническиеПроекты" Тогда
		
		Если ВключениеВТехническиеПроекты = "Включенные" Тогда
			ВидСравненияДляТехПроектов = ВидСравненияКомпоновкиДанных.Заполнено;
		Иначе
			ВидСравненияДляТехПроектов = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяЭлементаОтбора, 0, ВидСравненияДляТехПроектов,,ЗначениеЗаполнено(ВключениеВТехническиеПроекты));
		
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяЭлементаОтбора, ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(ЗначениеОтбора));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборыДляДереваГрупп(Отбор)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Ответственный));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Зарегистрировал", Зарегистрировал, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Зарегистрировал));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Статус));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Важность", Важность, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Важность));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Источник", Источник, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Источник));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "КПросмотру", Истина, ВидСравненияКомпоновкиДанных.Равно,,ТолькоКПросмотру = Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "Владелец", Проект, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Проект));
	
	Если ВключениеВТехническиеПроекты = "Включенные" Тогда
		ВидСравненияДляТехПроектов = ВидСравненияКомпоновкиДанных.Заполнено;
	Иначе
		ВидСравненияДляТехПроектов = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, "ТехническиеПроекты", 0, ВидСравненияДляТехПроектов,,ЗначениеЗаполнено(ВключениеВТехническиеПроекты));
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДляДереваГрупп(ПараметрыДанных)
	
	ПараметрыДанных.УстановитьЗначениеПараметра("Раздел", РазделПроекта);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиИдеиВРаздел(МассивИдей, ИдентификаторСтрокиДерева)
	
	СтрокаДерева = ДеревоГрупп.НайтиПоИдентификатору(ИдентификаторСтрокиДерева);
	
	Для Каждого Идея из МассивИдей Цикл
		
		Объект = Идея.ПолучитьОбъект();
		
		Попытка
			Объект.Заблокировать();
		Исключение
			Сообщение = НСтр(" ru= ""Не удалось отнести идея %Идея% к тематике: %Тематика%
							 |по причине: %ОписаниеОшибки%""; ");
							 
			Сообщение = СтрЗаменить(Сообщение, "%Идея%", Идея);
			Сообщение = СтрЗаменить(Сообщение, "%Тематика%", СтрокаДерева.Тематика);
			Сообщение = СтрЗаменить(Сообщение, "%ОписаниеОшибки%", ОписаниеОшибки());
			Сообщить(Сообщение);
		КонецПопытки;
		
		Попытка
			
			Если СтрокаДерева.ГруппировкаТематики Тогда
				Объект.Тематика = СтрокаДерева.Тематика;
			ИначеЕсли СтрокаДерева.ГруппировкаЦелевойЗадачи Тогда
				Объект.ЦелеваяЗадача = СтрокаДерева.ЦелеваяЗадача;
			КонецЕсли;
			
			СтрокаРодителя = СтрокаДерева.ПолучитьРодителя();
			
			Если СтрокаДерева.ГруппировкаОтветственного
				ИЛИ (СтрокаДерева.ГруппировкаТематики И СтрокаРодителя <> Неопределено И СтрокаРодителя.ГруппировкаОтветственного) Тогда
				
				Объект.Ответственный = СтрокаДерева.Ответственный;
			КонецЕсли;
			
			Если СтрокаДерева.ГруппировкаРаздела
				ИЛИ (СтрокаДерева.ГруппировкаТематики И СтрокаРодителя <> Неопределено И СтрокаРодителя.ГруппировкаРаздела) Тогда
				Объект.РазделПроекта = СтрокаДерева.РазделПроекта;
			КонецЕсли;
			
			Если СтрокаДерева.ГруппировкаТематики И ЗначениеЗаполнено(Объект.ЦелеваяЗадача) Тогда
				Объект.ЦелеваяЗадача = Справочники.ЦелевыеЗадачи.ПустаяСсылка();
			КонецЕсли;
			
			Если Объект.Ответственный <> СтрокаДерева.Ответственный Тогда
				Объект.КПросмотру = Истина;
			КонецЕсли;
			
			Объект.Записать();
			Объект.Разблокировать();
		Исключение
			Сообщение = НСтр(" ru= ""Не удалось отнести идея %Идея% к тематике: %Тематика%
							 |по причине: %ОписаниеОшибки%""; ");
							 
			Сообщение = СтрЗаменить(Сообщение, "%Идея%", Идея);
			Сообщение = СтрЗаменить(Сообщение, "%Тематика%", СтрокаДерева.Тематика);
			Сообщение = СтрЗаменить(Сообщение, "%ОписаниеОшибки%", ОписаниеОшибки());
			Сообщить(Сообщение);
		КонецПопытки;
		
	КонецЦикла;

	ОбновитьДеревоГрупп();
	
КонецПроцедуры

&НаСервере
Процедура ОтнестиИдеиКТематике(МассивИдей, Тематика)
	
	Для Каждого Идея из МассивИдей Цикл
		
		Объект = Идея.ПолучитьОбъект();
		
		Попытка
			Объект.Заблокировать();
		Исключение
			Сообщение = НСтр(" ru= ""Не удалось отнести идея %Идея% к тематике: %Тематика% по причине: %ОписаниеОшибки%""; ");
			Сообщение = СтрЗаменить(Сообщение, "%Идея%", Идея);
			Сообщение = СтрЗаменить(Сообщение, "%Тематика%", Тематика);
			Сообщение = СтрЗаменить(Сообщение, "%ОписаниеОшибки%", ОписаниеОшибки());
			Сообщить(Сообщение);
		КонецПопытки;
		
		Попытка
			Объект.Тематика = Тематика;
			Объект.Записать();
			Объект.Разблокировать();
		Исключение
			Сообщение = НСтр(" ru= ""Не удалось отнести идея %Идея% к тематике: %Тематика% по причине: %ОписаниеОшибки%""; ");
			Сообщение = СтрЗаменить(Сообщение, "%Идея%", Идея);
			Сообщение = СтрЗаменить(Сообщение, "%Тематика%", Тематика);
			Сообщение = СтрЗаменить(Сообщение, "%ОписаниеОшибки%", ОписаниеОшибки());
			Сообщить(Сообщение);
		КонецПопытки;
		
	КонецЦикла;

	ОбновитьДеревоГрупп();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакКПросмотруСервер(МассивИдей, Признак)
	
	Для Каждого Идея из МассивИдей Цикл
		
		Объект = Идея.ПолучитьОбъект();
		Если Объект.КПросмотру = Признак Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Объект.Заблокировать();
		Исключение
			Сообщение = НСтр(" ru= ""Не удалось изменить признак ""К просмотру"" для Идеи %Идея% по причине: %ОписаниеОшибки%""; ");
			Сообщение = СтрЗаменить(Сообщение, "%Идея%", Идея);
			Сообщение = СтрЗаменить(Сообщение, "%ОписаниеОшибки%", ОписаниеОшибки());
			Сообщить(Сообщение);
		КонецПопытки;
		
		Попытка
			Объект.КПросмотру = Признак;
			Объект.Записать();
			Объект.Разблокировать();
		Исключение
			Сообщение = НСтр(" ru= ""Не удалось изменить признак ""К просмотру"" для Идеи: %Идея% по причине: %ОписаниеОшибки%""; ");
			Сообщение = СтрЗаменить(Сообщение, "%Идея%", Идея);
			Сообщение = СтрЗаменить(Сообщение, "%ОписаниеОшибки%", ОписаниеОшибки());
			Сообщить(Сообщение);
		КонецПопытки;
		
	КонецЦикла;

	ОбновитьДеревоГрупп();
	
КонецПроцедуры

&НаСервере
Функция ДоступноИзмененияИдеи()
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.Идеи);
		
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СхемаКомпоновки = Справочники.Идеи.ПолучитьМакет("СхемаКомпоновкиДляФормированияДерева");
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеТекущегоПроектаСервер()
	
	Проекты.УстановитьОтборВСпискеПоПроекту(Список);
	ОбновитьДеревоГрупп();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрРаздел(Список, РазделПроекта)

	Список.Параметры.УстановитьЗначениеПараметра("Раздел", РазделПроекта);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРазделаСервер()
	
	ОбновитьДеревоГрупп();
	УстановитьПараметрРаздел(Список, РазделПроекта);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиГруппировок(Строки, Знач Уровень)
	        
	Уровень = Уровень + 1;
	
	Для Каждого Строка из Строки Цикл
		
		Строка.Уровень = Уровень;
		
		Если ТипЗнч(Строка.ДанныеПоТематикам) = Тип("Число") И Строка.ДанныеПоТематикам>0 Тогда
			Строка.ГруппировкаТематики = Истина;
			Строка.ИндексКартинки = 4;
		ИначеЕсли
			ТипЗнч(Строка.ДанныеПоЦелевымЗадачам) = Тип("Число") И Строка.ДанныеПоЦелевымЗадачам>0 Тогда
			Строка.ГруппировкаЦелевойЗадачи = Истина;
			Строка.ИндексКартинки = 3;
		Иначе
			Если ТипЗнч(Строка.ДанныеПоРазделам) = Тип("Число") И Строка.ДанныеПоРазделам>0 Тогда
				
				Строка.ГруппировкаРаздела = Истина;
				Если ТипЗнч(Строка.РазделПроектаЭтоГруппа) = Тип("Булево") И Строка.РазделПроектаЭтоГруппа Тогда
					Строка.ИндексКартинки = 0;
				Иначе
					Строка.ИндексКартинки = 1;
				КонецЕсли;
			
			ИначеЕсли ТипЗнч(Строка.ДанныеПоОтветственным) = Тип("Число") И Строка.ДанныеПоОтветственным>0 Тогда
				
				Строка.ГруппировкаОтветственного = Истина;
				Строка.ИндексКартинки = 5;
				
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПризнакиГруппировок(Строка.Строки, Уровень);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
