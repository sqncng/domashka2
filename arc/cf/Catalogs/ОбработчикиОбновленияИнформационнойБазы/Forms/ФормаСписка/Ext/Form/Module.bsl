
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь =Пользователи.ТекущийПользователь();
	Список.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	Список.Параметры.УстановитьЗначениеПараметра("ВидОбъекта",
		Версионирование.ВидВерсионируемогоОбъекта(Справочники.ОбработчикиОбновленияИнформационнойБазы.ПустаяСсылка()));
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Владелец") Тогда
			Проект = Параметры.Отбор.Владелец;
			Параметры.Отбор.Удалить("Владелец");
		ИначеЕсли Параметры.Отбор.Свойство("Проект") Тогда
			Проект = Параметры.Отбор.Проект;
			Параметры.Отбор.Удалить("Проект");	
		КонецЕсли;
		
		Если Параметры.Отбор.Свойство("Версия") Тогда
			Версия = Параметры.Отбор.Версия;
			
			Если Не ЗначениеЗаполнено(Проект) Тогда
				Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Версия, "Владелец");
			КонецЕсли;
			
			Параметры.Отбор.Удалить("Версия");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Проект) Тогда
		Проект = ПараметрыСеанса.ТекущийПроект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект)
		И Не ЗначениеЗаполнено(Версия) Тогда
		Версия = РаботаСОбъектамиМетаданных.ВерсияОсновногоХранилищаПроекта(Проект);
	КонецЕсли;
	
	ФильтрПоБиблиотекам = "ОписываемыеВТекущемПроектеИВыполняемыеПараллельно";
	Элементы.Проект.Видимость = Не ЗначениеЗаполнено(Проект);
	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	УстановитьОтборПоПроекту();
	УстановитьОтборПоФильтруБиблиотек();
	УстановитьОтборПоВерсии();
	
	УстановитьУсловноеОформлениеСписка();

	ОбновитьСообщение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_Задачи"
		Или ИмяСобытия = "Запись_ПриоритетыВыполненияОбработчиковОбновления" Тогда
		ОбновитьНаСервере();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбъектМетаданныхИзменениеПриИзменении(Элемент)
	УстановитьОтборПоОбъектамМетаданных();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектМетаданныхЧтениеПриИзменении(Элемент)
	УстановитьОтборПоОбъектамМетаданных();
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ПроектПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоБиблиотекамПриИзменении(Элемент)
	ФильтрПоБиблиотекамПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВерсияПриИзменении(Элемент)
	ОтборВерсияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибки" Тогда
		
		ОчиститьСообщения();
		ПоказатьОшибкиПостроенияОчереди(Проект, Версия);	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("Проект", Проект);
	ПараметрыЗагрузки.Вставить("Версия", Версия);
	ПараметрыЗагрузки.Вставить("Режим", "ТолькоОбработчики");
	
	ОткрытьФорму("Обработка.ЗагрузкаМетаданных.Форма.ЗагрузкаМетаданных", ПараметрыЗагрузки, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьОчередьВыполненияОтложенныхОбработчиков(Команда)
	ОчиститьСообщения();
	ПараметрыФормыДействия = Новый Структура;
	ПараметрыФормыДействия.Вставить("Проект", Проект);
	ПараметрыФормыДействия.Вставить("Версия", Версия);
	ПараметрыФормыДействия.Вставить("Режим", "ПостроениеОчереди");
	
	ОткрытьФорму("Обработка.ПостроениеОчередиОтложенныхОбработчиков.Форма.ЗапускПостроенияОчереди",
				 ПараметрыФормыДействия,
				 ЭтотОбъект,
				 ,
				 ,
				 ,
				 Новый ОписаниеОповещения("ОбновитьСообщениеКлиенте", ЭтотОбъект),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				 
КонецПроцедуры

&НаКлиенте
Процедура МожноНачинатьСтроитьОчередь(Команда)
	ОчиститьСообщения();
	ПараметрыФормыДействия = Новый Структура;
	ПараметрыФормыДействия.Вставить("Проект", Проект);
	ПараметрыФормыДействия.Вставить("Версия", Версия);
	ПараметрыФормыДействия.Вставить("Режим", "МожноСтроитьОчередь");
	
	ОткрытьФорму("Обработка.ПостроениеОчередиОтложенныхОбработчиков.Форма.ЗапускПостроенияОчереди",
				 ПараметрыФормыДействия,
				 ЭтотОбъект,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьКод(Команда)
	ОчиститьСообщения();
	ПараметрыФормыДействия = Новый Структура;
	ПараметрыФормыДействия.Вставить("Проект", Проект);
	ПараметрыФормыДействия.Вставить("Версия", Версия);
	ПараметрыФормыДействия.Вставить("Режим", "ГенерацияКода");
	
	ОткрытьФорму("Обработка.ПостроениеОчередиОтложенныхОбработчиков.Форма.ЗапускПостроенияОчереди",
				 ПараметрыФормыДействия,
				 ЭтотОбъект,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроцедуруПроверки(Команда)
	ОчиститьСообщения();
	ПараметрыФормыДействия = Новый Структура;
	ПараметрыФормыДействия.Вставить("Проект", Проект);
	ПараметрыФормыДействия.Вставить("Версия", Версия);
	ПараметрыФормыДействия.Вставить("Режим", "ЗаполнитьПроцедуруПроверки");
	
	ОткрытьФорму("Обработка.ПостроениеОчередиОтложенныхОбработчиков.Форма.ЗапускПостроенияОчереди",
				 ПараметрыФормыДействия,
				 ЭтотОбъект,
				 ,
				 ,
				 ,
				 ,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьОчередьСгенерироватьКод(Команда)
	ОчиститьСообщения();
	
	ПараметрыФормыДействия = Новый Структура;
	ПараметрыФормыДействия.Вставить("Проект", Проект);
	ПараметрыФормыДействия.Вставить("Версия", Версия);
	ПараметрыФормыДействия.Вставить("Режим", "ПостроениеОчередиГенерацияКода");
	
	ОткрытьФорму("Обработка.ПостроениеОчередиОтложенныхОбработчиков.Форма.ЗапускПостроенияОчереди",
				 ПараметрыФормыДействия,
				 ЭтотОбъект,
				 ,
				 ,
				 ,
				 Новый ОписаниеОповещения("ОбновитьСообщениеКлиенте", ЭтотОбъект),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.СтатусПроблемы Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		Если ОбщегоНазначенияСППРКлиентСервер.ЕстьРеквизитОбъекта(ТекущиеДанные, "Ссылка") Тогда
			Если (ТекущиеДанные.СтатусПроблемы = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики")
				И ТекущиеДанные.РежимВыполнения = ПредопределенноеЗначение("Перечисление.РежимыВыполненияОбработчиковОбновления.Монопольно")
				И Не ТекущиеДанные.МонопольныйРежимОправдан)
				Или (ТекущиеДанные.СтатусПроблемы = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ")
					И Не ТекущиеДанные.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено) Тогда
				
				ПоказатьЗначение(, ТекущиеДанные.Ссылка);
			ИначеЕсли ТекущиеДанные.СтатусПроблемы = ПредопределенноеЗначение("Перечисление.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы")
				И ТекущиеДанные.ПометкаУдаления Тогда
				
				ТекстСообщения = НСтр("ru = 'Такого обработчика нет в хранилище.'");
				ПоказатьПредупреждение(,ТекстСообщения);
			Иначе 
				ОткрытьФорму("РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления.Форма.ФормаСписка",
							Новый Структура("Обработчик", ТекущиеДанные.Ссылка),
							ЭтотОбъект,
							ТекущиеДанные.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборПоОбъектамМетаданных()
	
	СписокОбработчиков = Новый СписокЗначений;
	
	ИспользоватьОтбор = ЗначениеЗаполнено(ОбъектМетаданныхИзменение)
							Или ЗначениеЗаполнено(ОбъектМетаданныхЧтение);
		
	Если ИспользоватьОтбор Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбработчикиОбновленияИнформационнойБазыИзменяемыеДанные.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ОбработчикиОбновленияИнформационнойБазыИзменяемыеДанные
		|ГДЕ
		|	ОбработчикиОбновленияИнформационнойБазыИзменяемыеДанные.ОбъектМетаданных = &ОбъектМетаданныхИзменение
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОбработчикиОбновленияИнформационнойБазыЧитаемыеДанные.Ссылка
		|ИЗ
		|	Справочник.ОбработчикиОбновленияИнформационнойБазы.ЧитаемыеДанные КАК ОбработчикиОбновленияИнформационнойБазыЧитаемыеДанные
		|ГДЕ
		|	ОбработчикиОбновленияИнформационнойБазыЧитаемыеДанные.ОбъектМетаданных = &ОбъектМетаданныхЧтение";
		
		Запрос.УстановитьПараметр("ОбъектМетаданныхИзменение", ОбъектМетаданныхИзменение);
		Запрос.УстановитьПараметр("ОбъектМетаданныхЧтение", ОбъектМетаданныхЧтение);
		
		СписокОбработчиков.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Ссылка",
																			СписокОбработчиков,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			ИспользоватьОтбор);
КонецПроцедуры

&НаСервере
Процедура ПроектПриИзмененииСервер()
	УстановитьОтборПоПроекту();
	УстановитьОтборПоФильтруБиблиотек();
	ОбновитьСообщение();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПроекту()
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																		"Владелец",
																		Проект,
																		ВидСравненияКомпоновкиДанных.Равно,
																		,
																		ЗначениеЗаполнено(Проект));
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоФильтруБиблиотек()
	
	Если ФильтрПоБиблиотекам = "Все"
		Или Не ЗначениеЗаполнено(Проект) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Библиотека",
																			Новый СписокЗначений,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно",
																			РежимыВыполненияОтложенныхОбработчиков(),
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			Ложь);
		
	ИначеЕсли ФильтрПоБиблиотекам = "ТолькоОписываемыеВТекущемПроекте" Тогда
		
		СписокБиблиотек = Новый СписокЗначений;
		СписокБиблиотек.ЗагрузитьЗначения(РаботаСОбъектамиМетаданных.ОбрабатываемыеБиблиотекиОбработчиковОбновления(Проект));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Библиотека",
																			СписокБиблиотек,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно",
																			РежимыВыполненияОтложенныхОбработчиков(),
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			Ложь);
		
	ИначеЕсли ФильтрПоБиблиотекам = "ОписываемыеВТекущемПроектеИВыполняемыеПараллельно" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"Библиотека",
																			Новый СписокЗначений,
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																			"ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно",
																			РежимыВыполненияОтложенныхОбработчиков(Истина),
																			ВидСравненияКомпоновкиДанных.ВСписке,
																			,
																			Истина);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Невозможно установить фильтр по библиотекам: неизвестное значение фильтра.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РежимыВыполненияОтложенныхОбработчиков(ИспользоватьОтбор = Ложь)
	
	РежимыВыполненияОтложенныхОбработчиков = Новый СписокЗначений;
	
	Если Не ИспользоватьОтбор Тогда
		РежимыВыполненияОтложенныхОбработчиков.Добавить(Ложь);
	КонецЕсли;
	
	РежимыВыполненияОтложенныхОбработчиков.Добавить(Истина);
	
	Возврат РежимыВыполненияОтложенныхОбработчиков;
	
КонецФункции

&НаСервере
Процедура ФильтрПоБиблиотекамПриИзмененииНаСервере()
	УстановитьОтборПоФильтруБиблиотек();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВерсии()
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
																		"Версия",
																		Версия,
																		ВидСравненияКомпоновкиДанных.Равно,
																		,
																		ЗначениеЗаполнено(Версия));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСообщениеКлиенте(Результат, ДополнительныеПараметы) Экспорт
	
	ОбновитьСообщение();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСообщение()
	
	Если Не ЗначениеЗаполнено(Проект)
		Или Не ЗначениеЗаполнено(Версия) Тогда
		Сообщение = Новый ФорматированнаяСтрока("");
		Возврат;
	КонецЕсли;
	
	ЕстьПроблема = Обработки.ПостроениеОчередиОтложенныхОбработчиков.ЕстьОшибкиВПостроенииОчереди(Проект, Версия, Ложь);
	
	Если ЕстьПроблема Тогда
		МассивСтрок = Новый Массив;
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Есть'"),
												,
												ЦветаСтиля.ЦветОсобогоТекста));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'ошибки'"),
												,
												,
												,
												"ПоказатьОшибки"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'в построении очереди отложенных обработчиков обновления.'"),
												,
												ЦветаСтиля.ЦветОсобогоТекста));
												
		Сообщение = Новый ФорматированнаяСтрока(МассивСтрок);											
	Иначе
		Сообщение = Новый ФорматированнаяСтрока(НСтр("ru = 'Очередь выполнения отложенных обработчиков обновления построена корректно'"),
												,
												ЦветаСтиля.РезультатУспехЦвет);
	КонецЕсли;
											
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	Элементы.Список.Обновить();
	ОбновитьСообщение();
КонецПроцедуры

&НаСервере
Процедура ОтборВерсияПриИзмененииНаСервере()
	УстановитьОтборПоВерсии();
	ОбновитьСообщение();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоказатьОшибкиПостроенияОчереди(Проект, Версия)
	
	Обработки.ПостроениеОчередиОтложенныхОбработчиков.ЕстьОшибкиВПостроенииОчереди(Проект, Версия);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеОбработчиковВХранилищеВерсии(Команда)
	ПараметрыФормы = Новый Структура();
 	ПараметрыФормы.Вставить("Проект", Проект);
  	ПараметрыФормы.Вставить("ВерсияПроекта", Версия);
	ПараметрыФормы.Вставить("РежимЗапуска", "ОбновлениеОписанияОбработчиковВХранилищеВерсии");
 	ОткрытьФорму("Обработка.РаботаСХранилищем.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСписка()
	
	УсловноеОформлениеСписка = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеСписка.Элементы.Очистить();
	
	ОбщегоНазначенияСППР.УстановитьУсловноеОформлениеСпискаОтветственный(УсловноеОформлениеСписка);
	КонтрольИзменений.УстановитьУсловноеОформлениеСпискаСостояниеКонтроля(УсловноеОформлениеСписка);
	
КонецПроцедуры

#КонецОбласти
