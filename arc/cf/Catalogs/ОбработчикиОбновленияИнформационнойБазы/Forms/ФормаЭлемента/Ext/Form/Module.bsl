
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Автотест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтатусКонтроля = "Добавлено";
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОбработчикиОбновленияИнформационнойБазы", Объект.Ссылка); 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ЗаписатьДанныеСогласующихРесурсыПредмета(ЭтотОбъект, Объект.Ссылка);
	// Конец ЗадачиПроцессов
	
	СтатусКонтроля = КонтрольИзменений.СтатусКонтроля(Объект.Ссылка);
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	ЗаполнитьИндексыКартинок();
	ОбновитьИнформациюОПересеченияхСДругимиОбработчиками();
	
    // СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ПриоритетыВыполненияОбработчиковОбновления" Тогда
		Если Параметр.Обработчик1 = Объект.Ссылка
			Или Параметр.Обработчик2 = Объект.Ссылка Тогда
			
			ОбновитьИнформациюОПересеченияхСДругимиОбработчиками();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПересеченияСДругимиОбработчикамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПросмотрКонфликтовСОбработчиками" Тогда
		
		ОткрытьФорму("РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы.Форма.ПросмотрКонфликтовПоОбработчику",
					Новый Структура("Обработчик", Объект.Ссылка),
					ЭтотОбъект,
					Объект.Ссылка);
					
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПересечения" Тогда
					
		ОткрытьФорму("РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления.Форма.ФормаСписка",
					Новый Структура("Обработчик", Объект.Ссылка),
					ЭтотОбъект,
					Объект.Ссылка);
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МонопольныйРежимОправданПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийСлужебныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("КомментарийСлужебныйНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияМногострочногоТекста(
		Оповещение, Элементы.КомментарийСлужебный.ТекстРедактирования, НСтр("ru='Служебный комментарий'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПроверкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ЧитаемыеДанные.НайтиСтроки(Новый Структура("БлокироватьИнтерфейс", Истина)).Количество() > 0
		Или Объект.ПрочиеБлокируемыеОбъекты.Количество() > 0 Тогда
		ТекстСообщения = НСтр("ru = 'Процедура ""ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы"" не предназначена для проверки блокировки в обработчиках, которые контролируют блокировку читаемых данных или прочих объектов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ПроцедураПроверки","Объект");
		Возврат;	
	КонецЕсли;

	Объект.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Элементы.ПроцедураПроверки.ОтметкаНезаполненного = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцедураПроверкиПриИзменении(Элемент)
	
	Элементы.ПроцедураПроверки.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Объект.ПроцедураПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимВыполненияПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура НачальноеЗаполнениеПриИзменении(Элемент)
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура УказаниеОтветственнногоПриИзменении(Элемент)
	Объект.ОтветственныйУказанВручную = УказаниеОтветственнного = "Вручную";
	НастроитьФорму();
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	ВладелецПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Объект.Идентификатор = Строка(Новый УникальныйИдентификатор);
КонецПроцедуры

// ЗадачиПроцессов

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылкиСогласующиеРесурс(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ЗадачиПроцессовКлиент.ОбработкаНавигационнойСсылкиСогласующиеРесурс(ЭтотОбъект,
	                                                                    Элемент,
	                                                                    НавигационнаяСсылкаФорматированнойСтроки,
	                                                                    СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработатьИзменениеСогласующихРесурсыПоПредмету()
	
	ЗадачиПроцессов.ОбработатьИзменениеСогласующихРесурсыПоПредмету(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СогласующийРесурсПриИзменении()

	ЗадачиПроцессовКлиент.ОтразитьИзменениеЕдинственногоСогласующегоРесурса(ЭтотОбъект);

КонецПроцедуры

// Конец ЗадачиПроцессов

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьИзменяемыйОбъектВЧитаемые(Команда)
	ТекущиеДанные = Элементы.ИзменяемыеДанные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите изменяемый объект, который нужно перенести в читаемые данные.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	//Ищем на клиенте, т.к. строк чаще всего меньше 20
	НайденныеСтроки = Объект.ЧитаемыеДанные.НайтиСтроки(Новый Структура("ОбъектМетаданных", ТекущиеДанные.ОбъектМетаданных));
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = Объект.ЧитаемыеДанные.Добавить();
		НоваяСтрока.ОбъектМетаданных = ТекущиеДанные.ОбъектМетаданных;
		ПриОкончанииРедактированияСтрокиСервер(НоваяСтрока.ОбъектМетаданных, НоваяСтрока.ИндексКартинки);
	Иначе
		
		Элементы.ЧитаемыеДанные.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипыРеквизитаЧитаемогоОбъектаВЧитаемыеДанные(Команда)
	ТекущиеДанные = Элементы.ЧитаемыеДанные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите читаемый объект, типы реквизита которого нужно добавить.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьТипыРеквизитаОбъектаВЧитаемыеДанные(ТекущиеДанные.ОбъектМетаданных);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзменяемыйОбъектПоИмениОбработчика(Команда)
	ЧастиИмени = СтрРазделить(Объект.Процедура, ".");
	
	Если ЧастиИмени.Количество() < 3 Тогда
		ТекстСообщения = НСтр("ru = 'Обработчик расположен в общем модуле. Определить изменяемый объект невозможно.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ОбщегоНазначенияСППРКлиентСервер.ТипОбъектаВЕдинственномЧисле(ЧастиИмени[0]);
	
	Если ПустаяСтрока(ТипОбъекта) Тогда
		ТекстСообщения = НСтр("ru = 'Обработчик в объекте, который не может быть изменяемым.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьИзменяемыйОбъектПоИмениОбработчикаСервер(ТипОбъекта + "." + ЧастиИмени[1]);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипыРеквизитаИзменяемогоОбъектаВЧитаемыеДанные(Команда)
	ТекущиеДанные = Элементы.ИзменяемыеДанные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите изменяемый объект, типы реквизита которого нужно добавить.'");
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДобавитьТипыРеквизитаОбъектаВЧитаемыеДанные(ТекущиеДанные.ОбъектМетаданных);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыЧитаемыеДанные

&НаКлиенте
Процедура ЧитаемыеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элементы.ЧитаемыеДанные.ТекущиеДанные.ИндексКартинки = 1000;
КонецПроцедуры

&НаКлиенте
Процедура ЧитаемыеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.ЧитаемыеДанные.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПриОкончанииРедактированияСтрокиСервер(ТекущиеДанные.ОбъектМетаданных, ТекущиеДанные.ИндексКартинки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧитаемыеДанныеОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбъектМетаданныхНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧитаемыеДанныеПослеУдаления(Элемент)
	УстановитьОтметкуНезаполненногоПроцедураПроверки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыИзменяемыеДанные

&НаКлиенте
Процедура ИзменяемыеДанныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элементы.ИзменяемыеДанные.ТекущиеДанные.ИндексКартинки = 1000;
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыеДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.ИзменяемыеДанные.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПриОкончанииРедактированияСтрокиСервер(ТекущиеДанные.ОбъектМетаданных, ТекущиеДанные.ИндексКартинки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыеДанныеОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбъектМетаданныхНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыеДанныеПослеУдаления(Элемент)
	УстановитьОтметкуНезаполненногоПроцедураПроверки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыИзменяемыеДанные

&НаКлиенте
Процедура ПрочиеБлокируемыеОбъектыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Элементы.ПрочиеБлокируемыеОбъекты.ТекущиеДанные.ИндексКартинки = 1000;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеБлокируемыеОбъектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.ПрочиеБлокируемыеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ПриОкончанииРедактированияСтрокиСервер(ТекущиеДанные.ОбъектМетаданных, ТекущиеДанные.ИндексКартинки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеБлокируемыеОбъектыПослеУдаления(Элемент)
	УстановитьОтметкуНезаполненногоПроцедураПроверки();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИзменяемыеДанныеОбъектМетаданныхПриИзмененииНаСервере(ТекущийИдентификатор)
	ТекущиеДанные = Объект.ИзменяемыеДанные.НайтиПоИдентификатору(ТекущийИдентификатор);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОбъектМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ИзменяемыеДанныеУстановитьЗначенияРеквизитовПоУмолчанию(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ИзменяемыеДанныеУстановитьЗначенияРеквизитовПоУмолчанию(ТекущиеДанные)
	
	ПутьКРеквизитам = Новый Структура("ТипДанных,РегистрПодчиненРегистратору","Родитель.Имя","РегистрПодчиненРегистратору");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.ОбъектМетаданных, ПутьКРеквизитам);
	
	Если Реквизиты.ТипДанных = "Справочники"
		Или Реквизиты.ТипДанных = "Документы"
		Или Реквизиты.ТипДанных = "ПланыВидовХарактеристик"
		Или Реквизиты.ТипДанных = "ПланыВидовСчетов"
		Или Реквизиты.ТипДанных = "ПланыВидовРасчета"
		Или Реквизиты.ТипДанных = "Задачи"
		Или Реквизиты.ТипДанных = "БизнесПроцессы" Тогда
		ТекущиеДанные.БлокироватьИнтерфейс = Истина;
	Иначе
		ТекущиеДанные.ДобавляютсяНовыеСсылки = Ложь;
	КонецЕсли;	
	
	Если Реквизиты.ТипДанных = "РегистрыСведений"
		И Не Реквизиты.РегистрПодчиненРегистратору Тогда
		ТекущиеДанные.БлокироватьИнтерфейс = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	
	Монопольный  = Объект.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно;
	Отложенный = Объект.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Отложенно;
	Оперативный  = Объект.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Оперативно;
	
	Элементы.МонопольныйРежимОправдан.Видимость               = Монопольный
																И Не Объект.НачальноеЗаполнение;
	Элементы.ПричинаИспользованияМонопольногоРежима.Видимость = Монопольный
																И Не Объект.НачальноеЗаполнение;
	
	Элементы.ОчередьОтложеннойОбработкиЗаголовок.Видимость   = Отложенный;
	Элементы.ОчередьОтложеннойОбработкиЗагружено.Видимость   = Отложенный;
	Элементы.ОчередьОтложеннойОбработкиУстановлено.Видимость = Отложенный;
	
	Элементы.ОбщиеДанныеЗаголовок.Видимость                  = Монопольный Или Оперативный;
	Элементы.ОбщиеДанныеЗагружено.Видимость                  = Монопольный Или Оперативный;
	Элементы.ОбщиеДанныеУстановлено.Видимость                = Монопольный Или Оперативный;
	
	Элементы.УправлениеОбработчикамиЗаголовок.Видимость      = Монопольный Или Оперативный;
	Элементы.УправлениеОбработчикамиЗагружено.Видимость      = Монопольный Или Оперативный;
	Элементы.УправлениеОбработчикамиУстановлено.Видимость    = Монопольный Или Оперативный;
	
	Элементы.МногопоточныйЗаголовок.Видимость                = Отложенный;
	Элементы.МногопоточныйЗагружено.Видимость                = Отложенный;
	Элементы.МногопоточныйУстановлено.Видимость              = Отложенный;
	
	Элементы.ПричинаИспользованияМонопольногоРежима.Доступность = Объект.МонопольныйРежимОправдан;
	Элементы.ПричинаИспользованияМонопольногоРежима.АвтоОтметкаНезаполненного = Объект.МонопольныйРежимОправдан;
	
	Элементы.ПроцедураПроверки.Доступность                   = Отложенный;
	Элементы.ПроцедураЗаполненияДанныхОбновления.Доступность = Отложенный;
	
	Элементы.ПрочиеБлокируемыеОбъекты.Видимость = Отложенный;
	
	Элементы.Ответственный.Доступность = Объект.ОтветственныйУказанВручную;
	
	УстановитьОтметкуНезаполненногоПроцедураПроверки();
	
КонецПроцедуры

Процедура ПриЧтенииСозданииНаСервере()
	
	ОбщегоНазначенияСППРКлиентСервер.УстановитьОтображениеСостоянияКонтроля(ЭтаФорма);
	
	// ЗадачиПроцессов
	ЗадачиПроцессов.ОтобразитьИнформациюПоСогласующимВФорме(ЭтотОбъект, Объект.Ссылка, "ГруппаОтветственныйСогласующий");
	// Конец ЗадачиПроцессов
	
	Если Объект.ОтветственныйУказанВручную Тогда
		УказаниеОтветственнного = "Вручную";
	Иначе
		УказаниеОтветственнного = "РассчитыватьПоТехПроектам";
	КонецЕсли;
	
	ЗаполнитьСписокВыбораБиблиотек();
	НастроитьФорму();	
	ЗаполнитьИндексыКартинок();
	ОбновитьИнформациюОПересеченияхСДругимиОбработчиками();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИндексыКартинок()
	
	МассивОбъектов =  Объект.ЧитаемыеДанные.Выгрузить().ВыгрузитьКолонку("ОбъектМетаданных");
	СоответствиеКартинок = РаботаСОбъектамиМетаданных.ПолучитьСоответствиеКартинок(МассивОбъектов);
	
	Для Каждого СтрокаТЧ из Объект.ЧитаемыеДанные Цикл
		
		ИндексКартинки = СоответствиеКартинок.Получить(СтрокаТЧ.ОбъектМетаданных);
		Если ИндексКартинки <>Неопределено Тогда
			СтрокаТЧ.ИндексКартинки = ИндексКартинки;
		Иначе
			СтрокаТЧ.ИндексКартинки = 1000;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивОбъектов =  Объект.ИзменяемыеДанные.Выгрузить().ВыгрузитьКолонку("ОбъектМетаданных");
	СоответствиеКартинок = РаботаСОбъектамиМетаданных.ПолучитьСоответствиеКартинок(МассивОбъектов);
	
	Для Каждого СтрокаТЧ из Объект.ИзменяемыеДанные Цикл
		
		ИндексКартинки = СоответствиеКартинок.Получить(СтрокаТЧ.ОбъектМетаданных);
		Если ИндексКартинки <> Неопределено Тогда
			СтрокаТЧ.ИндексКартинки = ИндексКартинки;
		Иначе
			СтрокаТЧ.ИндексКартинки = 1000;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивОбъектов =  Объект.ПрочиеБлокируемыеОбъекты.Выгрузить().ВыгрузитьКолонку("ОбъектМетаданных");
	СоответствиеКартинок = РаботаСОбъектамиМетаданных.ПолучитьСоответствиеКартинок(МассивОбъектов);
	
	Для Каждого СтрокаТЧ из Объект.ПрочиеБлокируемыеОбъекты Цикл
		
		ИндексКартинки = СоответствиеКартинок.Получить(СтрокаТЧ.ОбъектМетаданных);
		Если ИндексКартинки <> Неопределено Тогда
			СтрокаТЧ.ИндексКартинки = ИндексКартинки;
		Иначе
			СтрокаТЧ.ИндексКартинки = 1000;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриОкончанииРедактированияСтрокиСервер(ОбъектМетаданных, ИндексКартинки)
	
	СоответствиеКартинок = РаботаСОбъектамиМетаданных.ПолучитьСоответствиеКартинок(ОбъектМетаданных);
	
	Индекс = СоответствиеКартинок.Получить(ОбъектМетаданных);
	Если Индекс <>Неопределено Тогда
		ИндексКартинки = Индекс;
	Иначе
		ИндексКартинки = 1000;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненногоПроцедураПроверки();	
КонецПроцедуры

&НаСервере
Функция СписокРодителейДляВыбораМетаданныхСервер()
	
	МассивКлассов = РаботаСОбъектамиМетаданных.ДоступныеКлассыОбъектовМетаданныхОбъектаДанных();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОбъектыМетаданных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Владелец = &Проект
	|	И ОбъектыМетаданных.ЭтоГруппа
	|	И ОбъектыМетаданных.Имя В(&МассивКлассов)"
	;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проект", Объект.Владелец);
	Запрос.УстановитьПараметр("МассивКлассов", МассивКлассов);
	
	СписокРодителей = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокРодителей.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокРодителей;
	
КонецФункции

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокРодителей = СписокРодителейДляВыбораМетаданныхСервер();
	
	ПараметрыФормы = Новый Структура();
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.Владелец);
	СтруктураОтбора.Вставить("Родитель", СписокРодителей);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ОбъектыМетаданных.ФормаВыбора", ПараметрыФормы, Элемент,,,, Неопределено);

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОПересеченияхСДругимиОбработчиками()
	
	ТекстЗаголовка = "";
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Этого обработчика уже нет в конфигурации.'");
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Обработчик не записан - анализ пересечения по данным с другими обработчиками не проводился.'");
			
	ИначеЕсли Объект.НачальноеЗаполнение Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Для обработчика начального заполнения анализ пересечений по данным с другими обработчиками не делается.'");
		
	Иначе	                  
		МассивСтрок = Новый Массив;
		
		Если Не Объект.ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнение читаемых и изменяемых данных не завершено.'"),
																	,
																	ЦветаСтиля.ЦветОсобогоТекста));
			МассивСтрок.Добавить(" ");
		КонецЕсли;
		
		Пересечения = РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.ПересеченияПоДаннымСДругимиОбработчиками(Объект.Ссылка);
		
					
		МассивСтрок.Добавить(НСтр("ru = 'Статус обработки конфликтов:'"));
		МассивСтрок.Добавить(" ");
		
		Если Пересечения.СтатусКонфликтов = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ Тогда
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Пересечения.СтатусКонфликтов),
																Новый Шрифт(,,Истина),
																ЦветаСтиля.ЦветОсобогоТекста,
																,
																"ОткрытьПересечения"));
			
		ИначеЕсли Пересечения.СтатусКонфликтов = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НетПроблемы Тогда	
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Пересечения.СтатусКонфликтов),
																Новый Шрифт(,,Истина),
																ЦветаСтиля.РезультатУспехЦвет,
																,
																"ОткрытьПересечения"));
			
		ИначеЕсли Пересечения.СтатусКонфликтов = Перечисления.ПорядокПомещенияОбработчиковВОчередь.НужноПеределатьОбработчики Тогда	
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Пересечения.СтатусКонфликтов),
																Новый Шрифт(,,Истина),
																ЦветаСтиля.ЦветТекстаВысокийПриоритет,
																,
																"ОткрытьПересечения"));
			
		КонецЕсли;
		
		МассивСтрок.Добавить(". ");
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Символы.ПС);
		
		Если Объект.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно Тогда
			Если Не Объект.МонопольныйРежимОправдан Тогда
				
				МассивСтрок.Добавить(НСтр("ru = 'Обработчик'"));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'не должен быть монопольным'"),
										Новый Шрифт(,,Истина),
										ЦветаСтиля.ЦветОсобогоТекста));
										МассивСтрок.Добавить(", ");
				МассивСтрок.Добавить(НСтр("ru = 'т.к. не указана причина использования этого режима.'"));
				
				МассивСтрок.Добавить(Символы.ПС);
				МассивСтрок.Добавить(Символы.ПС);
			КонецЕсли;
		Иначе
			Если Пересечения.ЕстьПересеченияСЧитателями Тогда
				
				МассивСтрок.Добавить(НСтр("ru = 'Есть'"));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'данные'"),
																	,
																	,
																	,
																	"ПросмотрКонфликтовСОбработчиками"));
				МассивСтрок.Добавить(", ");
				МассивСтрок.Добавить(НСтр("ru = 'которые изменяются этим обработчиком и читаются другими обработчиками.'"));
				МассивСтрок.Добавить(": ");
				
			Иначе
				
				МассивСтрок.Добавить(НСтр("ru = 'Данные, которые изменяются этим обработчиком не читаются другими обработчиками.'"));
				
			КонецЕсли;
			
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(Символы.ПС);
			
			Если Пересечения.ЕстьПересеченияСПисателями Тогда
				
				МассивСтрок.Добавить(НСтр("ru = 'Есть'"));
				МассивСтрок.Добавить(" ");
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'данные'"),
																		,
																		,
																		,
																		"ПросмотрКонфликтовСОбработчиками"));
				МассивСтрок.Добавить(", ");
				МассивСтрок.Добавить(НСтр("ru = 'которые читаются этим обработчиком и изменяются другими обработчиками.'"));
				
			Иначе
				
				МассивСтрок.Добавить(НСтр("ru = 'Данные, которые читаются этим обработчиком не изменяются другими обработчиками.'"));
				
			КонецЕсли;
			
			МассивСтрок.Добавить(Символы.ПС);
			МассивСтрок.Добавить(Символы.ПС);
		
		КонецЕсли;
			
		Если Пересечения.ЕстьПовторнаяЗапись Тогда
			
			МассивСтрок.Добавить(НСтр("ru = 'Есть'"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'данные'"),
															,
															,
															,
															"ПросмотрКонфликтовСОбработчиками"));
			МассивСтрок.Добавить(", ");
			МассивСтрок.Добавить(НСтр("ru = 'записываемые и этим, и другими обработчиками'"));
				
		Иначе
			
			МассивСтрок.Добавить(НСтр("ru = 'Данные, которые изменяются этим обработчиком, другими обработчиками не записываются.'"));
			
		КонецЕсли;
			
		ТекстЗаголовка = Новый ФорматированнаяСтрока(МассивСтрок);
		
	КонецЕсли;
	
	Элементы.ПересеченияСДругимиОбработчиками.Заголовок = ТекстЗаголовка;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипыРеквизитаОбъектаВЧитаемыеДанные(ОбъектМетаданных)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьТипыРеквизитаОбъектаВЧитаемыеДанныеЗавершение", ЭтотОбъект);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("Отбор", Новый Структура("Владелец", ОбъектМетаданных)); 	
	
	ОткрытьФорму("Справочник.РеквизитыОбъектовМетаданных.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТипыРеквизитаОбъектаВЧитаемыеДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ДобавитьТипыРеквизитаОбъектаВЧитаемыеДанныеСервер(Результат);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТипыРеквизитаОбъектаВЧитаемыеДанныеСервер(Реквизит)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.ТипЗначенияРеквизита КАК ОбъектМетаданных
	|ИЗ
	|	Справочник.РеквизитыОбъектовМетаданных.ТипыЗначенияРеквизита КАК РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита
	|ГДЕ
	|	РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.Ссылка = &Ссылка
	|	И РеквизитыОбъектовМетаданныхТипыЗначенияРеквизита.ТипЗначенияРеквизита ССЫЛКА Справочник.ОбъектыМетаданных";
	
	Запрос.УстановитьПараметр("Ссылка", Реквизит);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ЧитаемыеДанные.НайтиСтроки(Новый Структура("ОбъектМетаданных", Выборка.ОбъектМетаданных));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ЧитаемыеДанные.Добавить();
			НоваяСтрока.ОбъектМетаданных = Выборка.ОбъектМетаданных;
			ПриОкончанииРедактированияСтрокиСервер(НоваяСтрока.ОбъектМетаданных, НоваяСтрока.ИндексКартинки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИзменяемыйОбъектПоИмениОбработчикаСервер(НаименованиеОбъекта)
	ОбъектМетаданных = РаботаСОбъектамиМетаданных.ОбъектМетаданныхПоИменниМетода(Объект.Процедура, Объект.Владелец);
	
	Если Не ЗначениеЗаполнено(ОбъектМетаданных) Тогда
		ТекстСообщения = НСтр("ru = 'Объект %ИмяОбъекта% не найден.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяОбъекта%", НаименованиеОбъекта);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ИзменяемыеДанные.НайтиСтроки(Новый Структура("ОбъектМетаданных", ОбъектМетаданных));
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = Объект.ИзменяемыеДанные.Добавить();
		НоваяСтрока.ОбъектМетаданных = ОбъектМетаданных;
		ИзменяемыеДанныеУстановитьЗначенияРеквизитовПоУмолчанию(НоваяСтрока);
		ПриОкончанииРедактированияСтрокиСервер(НоваяСтрока.ОбъектМетаданных, НоваяСтрока.ИндексКартинки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийСлужебныйНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		Объект.КомментарийСлужебный = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыеДанныеОбъектМетаданныхПриИзменении(Элемент)
	ТекущийИдентификатор = Элементы.ИзменяемыеДанные.ТекущиеДанные.ПолучитьИдентификатор();
	ИзменяемыеДанныеОбъектМетаданныхПриИзмененииНаСервере(ТекущийИдентификатор);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненногоПроцедураПроверки()
	
	Отметка = Истина;
	
	Если ЗначениеЗаполнено(Объект.Процедура)
		Или Объект.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно
		Или Объект.РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Оперативно
		Или Не (Объект.ПрочиеБлокируемыеОбъекты.Количество() > 0
				Или Объект.ЧитаемыеДанные.НайтиСтроки(Новый Структура("БлокироватьИнтерфейс", Истина)).Количество() > 0
				Или Объект.ИзменяемыеДанные.НайтиСтроки(Новый Структура("БлокироватьИнтерфейс", Истина)).Количество() > 0) Тогда
		Отметка = Ложь;
	КонецЕсли;
	
	Элементы.ПроцедураПроверки.ОтметкаНезаполненного = Отметка;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораБиблиотек()
	
	Элементы.Библиотека.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроектыМодулиОбновленияИнформационнойБазы.Библиотека КАК Библиотека 
	|ИЗ
	|	Справочник.Проекты.МодулиОбновленияИнформационнойБазы КАК ПроектыМодулиОбновленияИнформационнойБазы
	|ГДЕ
	|	ПроектыМодулиОбновленияИнформационнойБазы.Ссылка = &Ссылка
	|	И ПроектыМодулиОбновленияИнформационнойБазы.ЭтоПодсистемаТекущегоПроекта";
	Запрос.УстановитьПараметр("Ссылка", Объект.Владелец);
	Значения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Библиотека");

	Элементы.Библиотека.СписокВыбора.ЗагрузитьЗначения(Значения);
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	ЗаполнитьСписокВыбораБиблиотек();
КонецПроцедуры

#КонецОбласти
