#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Наименование = ЭтотОбъект.Процедура;
	
	Если ИзменяемыеДанные.Количество() = 0 Тогда
		ЗаполнениеИнформацииОбИзменяемыхИЧитаемыхДанныхЗавершено = Ложь;
	КонецЕсли;
	
	Если РежимВыполнения <> Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно
		Или НачальноеЗаполнение Тогда
		МонопольныйРежимОправдан = Ложь;
	КонецЕсли;
	
	Если Не МонопольныйРежимОправдан Тогда
		ПричинаИспользованияМонопольногоРежима = Справочники.ПричиныОсобогоПорядкаРазработкиОбработчиковОбновления.ПустаяСсылка();
	КонецЕсли;
	
	МассивВерсий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СборкаНомер, ".");
	
	Если МассивВерсий.Количество() = 4 Тогда
		СборкаЧислом = Число(МассивВерсий[0]) * 10000000 + Число(МассивВерсий[1]) * 1000000 +
			Число(МассивВерсий[2]) * 10000 + Число(МассивВерсий[3]);
		ВерсияНомер = МассивВерсий[0] + "." + МассивВерсий[1] + "." + МассивВерсий[2];
	Иначе
		СборкаЧислом = 0;
		ВерсияНомер = СборкаНомер;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ИзмененныеОбъектыМетаданных = Новый Массив;
	Иначе
		ИзмененныеОбъектыМетаданных = ИзмененныеОбъектыМетаданных();
	КонецЕсли;
	
	Если РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Отложенно Тогда
		ОбщиеДанныеЗагружено               = Ложь;
		ОбщиеДанныеУстановлено             = Ложь;
		УправлениеОбработчикамиЗагружено   = Ложь;
		УправлениеОбработчикамиУстановлено = Ложь;
	Иначе
		МногопоточныйЗагружено             = Ложь;
		МногопоточныйУстановлено           = Ложь;
	КонецЕсли;
	
	ДобавляютсяНовыеСсылки = Ложь;
	
	ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно =
		ОбработчикВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно();
	
	Для Каждого СтрТабл из ИзменяемыеДанные Цикл
		Если СтрТабл.ДобавляютсяНовыеСсылки Тогда
			ДобавляютсяНовыеСсылки = Истина;
			Если Не МонопольныйРежимОправдан Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если МонопольныйРежимОправдан Тогда
			СтрТабл.БлокироватьИнтерфейс = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если МонопольныйРежимОправдан Тогда
		Для Каждого СтрТабл из ЧитаемыеДанные Цикл
			СтрТабл.БлокироватьИнтерфейс = Ложь;
		КонецЦикла;
		
		ПрочиеБлокируемыеОбъекты.Очистить();
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		ОбъектМетаданных = Неопределено;
	Иначе
		ОбъектМетаданныхНовый = РаботаСОбъектамиМетаданных.ОбъектМетаданныхПоИменниМетода(ЭтотОбъект.Процедура, Владелец);
		Если ЗначениеЗаполнено(ОбъектМетаданныхНовый) Тогда
			ОбъектМетаданных = ОбъектМетаданныхНовый;
		КонецЕсли;
	КонецЕсли;	
	ДополнительныеСвойства.Вставить("ИзмененныеОбъектыМетаданных", ИзмененныеОбъектыМетаданных);
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
	ДополнительныеСвойства.Вставить("КоллекцияИзмененныхОбъектов", Новый Массив);
	Версионирование.ЗарегистрироватьИзмененияОбъекта(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ОбработчикПисатель", Ссылка);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ОбработчикЧитательИлиПисатель", Ссылка);
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Обработчик1", Ссылка);
	
	Блокировка.Заблокировать();
	
	Если ПометкаУдаления Тогда
		
		НаборЗаписей = РегистрыСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбработчикПисатель.Установить(Ссылка);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбработчикЧитательИлиПисатель.Установить(Ссылка);
		НаборЗаписей.Записать();
		
		НаборЗаписей = РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Обработчик1.Установить(Ссылка);
		НаборЗаписей.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОбработчикПисатель КАК ОбработчикПисатель,
	|	ВложенныйЗапрос.ОбработчикЧитательИлиПисатель КАК ОбработчикЧитательИлиПисатель,
	|	ВложенныйЗапрос.ОбъектМетаданных КАК ОбъектМетаданных,
	|	МАКСИМУМ(ВложенныйЗапрос.КонфликтЧтенияЗаписи) КАК КонфликтЧтенияЗаписи,
	|	МАКСИМУМ(ВложенныйЗапрос.ПовторнаяЗаписьОбъекта) КАК ПовторнаяЗаписьОбъекта
	|ПОМЕСТИТЬ ЧитателиПисатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		&Ссылка КАК ОбработчикПисатель,
	|		ЧитаемыеДанные.Ссылка КАК ОбработчикЧитательИлиПисатель,
	|		ЧитаемыеДанные.ОбъектМетаданных КАК ОбъектМетаданных,
	|		ИСТИНА КАК КонфликтЧтенияЗаписи,
	|		ЛОЖЬ КАК ПовторнаяЗаписьОбъекта
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ЧитаемыеДанные КАК ЧитаемыеДанные
	|	ГДЕ
	|		ЧитаемыеДанные.Ссылка <> &Ссылка
	|		И ЧитаемыеДанные.ОбъектМетаданных В(&ИзменяемыеДанные)
	|		И ЧитаемыеДанные.Ссылка.МонопольныйРежимОправдан = &МонопольныйРежимОправдан
	|		И ЧитаемыеДанные.Ссылка.Версия = &Версия
	|		И НЕ ЧитаемыеДанные.Ссылка.ПометкаУдаления
	|		И НЕ ЧитаемыеДанные.Ссылка.НачальноеЗаполнение
	|		И ЧитаемыеДанные.Ссылка.РежимВыполнения = &РежимВыполнения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзменяемыеДанные.Ссылка,
	|		&Ссылка,
	|		ИзменяемыеДанные.ОбъектМетаданных,
	|		ИСТИНА,
	|		ЛОЖЬ
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ИзменяемыеДанные
	|	ГДЕ
	|		ИзменяемыеДанные.Ссылка <> &Ссылка
	|		И ИзменяемыеДанные.ОбъектМетаданных В(&ЧитаемыеДанные)
	|		И ИзменяемыеДанные.Ссылка.МонопольныйРежимОправдан = &МонопольныйРежимОправдан
	|		И ИзменяемыеДанные.Ссылка.Версия = &Версия
	|		И НЕ ИзменяемыеДанные.Ссылка.ПометкаУдаления
	|		И НЕ ИзменяемыеДанные.Ссылка.НачальноеЗаполнение
	|		И ИзменяемыеДанные.Ссылка.РежимВыполнения = &РежимВыполнения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&Ссылка,
	|		ИзменяемыеДанные.Ссылка,
	|		ИзменяемыеДанные.ОбъектМетаданных,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ИзменяемыеДанные
	|	ГДЕ
	|		ИзменяемыеДанные.Ссылка <> &Ссылка
	|		И ИзменяемыеДанные.Ссылка.МонопольныйРежимОправдан = &МонопольныйРежимОправдан
	|		И ИзменяемыеДанные.ОбъектМетаданных В(&ИзменяемыеДанные)
	|		И ИзменяемыеДанные.Ссылка.Версия = &Версия
	|		И НЕ ИзменяемыеДанные.Ссылка.ПометкаУдаления
	|		И НЕ ИзменяемыеДанные.Ссылка.НачальноеЗаполнение
	|		И ИзменяемыеДанные.Ссылка.РежимВыполнения = &РежимВыполнения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИзменяемыеДанные.Ссылка,
	|		&Ссылка,
	|		ИзменяемыеДанные.ОбъектМетаданных,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ИзменяемыеДанные
	|	ГДЕ
	|		ИзменяемыеДанные.Ссылка <> &Ссылка
	|		И ИзменяемыеДанные.Ссылка.МонопольныйРежимОправдан = &МонопольныйРежимОправдан
	|		И ИзменяемыеДанные.ОбъектМетаданных В(&ИзменяемыеДанные)
	|		И ИзменяемыеДанные.Ссылка.Версия = &Версия
	|		И НЕ ИзменяемыеДанные.Ссылка.ПометкаУдаления
	|		И НЕ ИзменяемыеДанные.Ссылка.НачальноеЗаполнение
	|		И ИзменяемыеДанные.Ссылка.РежимВыполнения = &РежимВыполнения) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОбъектМетаданных,
	|	ВложенныйЗапрос.ОбработчикЧитательИлиПисатель,
	|	ВложенныйЗапрос.ОбработчикПисатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧитателиПисатели.ОбработчикПисатель КАК ОбработчикПисатель,
	|	ЧитателиПисатели.ОбработчикЧитательИлиПисатель КАК ОбработчикЧитательИлиПисатель,
	|	ЧитателиПисатели.ОбъектМетаданных КАК ОбъектМетаданных,
	|	ЧитателиПисатели.КонфликтЧтенияЗаписи КАК КонфликтЧтенияЗаписи,
	|	ЧитателиПисатели.ПовторнаяЗаписьОбъекта КАК ПовторнаяЗаписьОбъекта,
	|	ЕСТЬNULL(ПроблемыОбработчиковОбновленияИнформационнойБазы.Комментарий, """") КАК Комментарий,
	|	ВЫБОР
	|		КОГДА &ЭтоНовый
	|			ТОГДА ИСТИНА
	|		КОГДА ЧитателиПисатели.ОбъектМетаданных В (&ИзмененныеОбъектыМетаданных)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьИзмененияПоОбъектуМетаданных
	|ИЗ
	|	ЧитателиПисатели КАК ЧитателиПисатели
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы КАК ПроблемыОбработчиковОбновленияИнформационнойБазы
	|		ПО ЧитателиПисатели.ОбработчикПисатель = ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикПисатель
	|			И ЧитателиПисатели.ОбработчикЧитательИлиПисатель = ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбработчикЧитательИлиПисатель
	|			И ЧитателиПисатели.ОбъектМетаданных = ПроблемыОбработчиковОбновленияИнформационнойБазы.ОбъектМетаданных";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Версия", Версия);
	Запрос.УстановитьПараметр("ЧитаемыеДанные", ЧитаемыеДанные.ВыгрузитьКолонку("ОбъектМетаданных"));
	Запрос.УстановитьПараметр("ИзменяемыеДанные", ИзменяемыеДанные.ВыгрузитьКолонку("ОбъектМетаданных"));
	Запрос.УстановитьПараметр("МонопольныйРежимОправдан", МонопольныйРежимОправдан);
	Запрос.УстановитьПараметр("РежимВыполнения", РежимВыполнения);
	Запрос.УстановитьПараметр("ЭтоНовый", ДополнительныеСвойства.ЭтоНовый);
	Запрос.УстановитьПараметр("ИзмененныеОбъектыМетаданных", ДополнительныеСвойства.ИзмененныеОбъектыМетаданных);
	
	ДанныеДляЗаписи = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбработчикПисатель.Установить(Ссылка);
	НаборЗаписей.Загрузить(ДанныеДляЗаписи.Скопировать(Новый Структура("ОбработчикПисатель", Ссылка)));
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ПроблемыОбработчиковОбновленияИнформационнойБазы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбработчикЧитательИлиПисатель.Установить(Ссылка);
	НаборЗаписей.Загрузить(ДанныеДляЗаписи.Скопировать(Новый Структура("ОбработчикЧитательИлиПисатель", Ссылка)));
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДляАнализа.ОбработчикЧитательИлиПисатель = &Ссылка
	|			ТОГДА ДляАнализа.ОбработчикПисатель
	|		ИНАЧЕ ДляАнализа.ОбработчикЧитательИлиПисатель
	|	КОНЕЦ КАК СвязанныйОбработчик,
	|	ДляАнализа.ПовторнаяЗаписьОбъекта КАК ПовторнаяЗаписьОбъекта,
	|	ДляАнализа.ЕстьИзмененияПоОбъектуМетаданных КАК ЕстьИзмененияПоОбъектуМетаданных
	|ПОМЕСТИТЬ ДляАнализаДляЗапроса
	|ИЗ
	|	&ДляАнализа КАК ДляАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДляАнализаДляЗапроса.СвязанныйОбработчик,
	|	МАКСИМУМ(ДляАнализаДляЗапроса.ПовторнаяЗаписьОбъекта) КАК ПовторнаяЗаписьОбъекта,
	|	МАКСИМУМ(ДляАнализаДляЗапроса.ЕстьИзмененияПоОбъектуМетаданных) КАК ЕстьИзмененияПоОбъектуМетаданных
	|ПОМЕСТИТЬ ДляАнализа
	|ИЗ
	|	ДляАнализаДляЗапроса КАК ДляАнализаДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	ДляАнализаДляЗапроса.СвязанныйОбработчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если ДополнительныеСвойства.Свойство("ПриоритетыВыполнения") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ПриоритетыВыполнения.Идентификатор КАК Ссылка,
		|	ПриоритетыВыполнения.Порядок КАК ПорядокПомещенияВОчередь
		|ПОМЕСТИТЬ ПриоритетыВыполненияДляЗапроса
		|ИЗ
		|	&ПриоритетыВыполнения КАК ПриоритетыВыполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбработчикиОбновления.Ссылка КАК СвязанныйОбработчик,
		|	ПриоритетыВыполненияДляЗапроса.ПорядокПомещенияВОчередь КАК ПорядокПомещенияВОчередь
		|ПОМЕСТИТЬ ПриоритетыВыполнения
		|ИЗ
		|	ПриоритетыВыполненияДляЗапроса КАК ПриоритетыВыполненияДляЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбработчикиОбновленияИнформационнойБазы КАК ОбработчикиОбновления
		|		ПО ПриоритетыВыполненияДляЗапроса.Ссылка = ОбработчикиОбновления.Ссылка
		|ГДЕ
		|	НЕ ОбработчикиОбновления.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Ссылка КАК Обработчик1,
		|	ДляАнализа.СвязанныйОбработчик КАК Обработчик2,
		|	ДляАнализа.ПовторнаяЗаписьОбъекта КАК ПовторнаяЗаписьОбъекта,
		|	ВЫБОР
		|		КОГДА ДляАнализа.ЕстьИзмененияПоОбъектуМетаданных
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ)
		|		КОГДА ЕСТЬNULL(ПриоритетыВыполнения.ПорядокПомещенияВОчередь, ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.ПустаяСсылка)
		|			ТОГДА ПриоритетыВыполнения.ПорядокПомещенияВОчередь
		|		ИНАЧЕ ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь, ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ))
		|	КОНЕЦ КАК ПорядокПомещенияВОчередь,
		|	ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.Комментарий, """") КАК Комментарий,
		|	ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.ПричинаПовторнойЗаписи, ЗНАЧЕНИЕ(Справочник.ПричиныОсобогоПорядкаРазработкиОбработчиковОбновления.ПустаяСсылка)) КАК ПричинаПовторнойЗаписи,
		|	ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.ПорядокОтличаетсяОтДефолтного, ЛОЖЬ) КАК ПорядокОтличаетсяОтДефолтного
		|ИЗ
		|	ДляАнализа КАК ДляАнализа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПриоритетыВыполнения КАК ПриоритетыВыполнения
		|		ПО ДляАнализа.СвязанныйОбработчик = ПриоритетыВыполнения.СвязанныйОбработчик
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетВыполненияОбработчиковОбновления
		|		ПО ДляАнализа.СвязанныйОбработчик = ПриоритетВыполненияОбработчиковОбновления.Обработчик2
		|			И (ПриоритетВыполненияОбработчиковОбновления.Обработчик1 = &Ссылка)";
		
		Запрос.УстановитьПараметр("ПриоритетыВыполнения", ДополнительныеСвойства.ПриоритетыВыполнения);
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&Ссылка КАК Обработчик1,
		|	ДляАнализа.СвязанныйОбработчик КАК Обработчик2,
		|	ДляАнализа.ПовторнаяЗаписьОбъекта КАК ПовторнаяЗаписьОбъекта,
		|	ВЫБОР
		|		КОГДА ДляАнализа.ЕстьИзмененияПоОбъектуМетаданных
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ)
		|		ИНАЧЕ ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.ПорядокПомещенияВОчередь, ЗНАЧЕНИЕ(Перечисление.ПорядокПомещенияОбработчиковВОчередь.НеобходимАнализ))
		|	КОНЕЦ КАК ПорядокПомещенияВОчередь,
		|	ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.Комментарий, """") КАК Комментарий,
		|	ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.ПричинаПовторнойЗаписи, ЗНАЧЕНИЕ(Справочник.ПричиныОсобогоПорядкаРазработкиОбработчиковОбновления.ПустаяСсылка)) КАК ПричинаПовторнойЗаписи,
		|	ЕСТЬNULL(ПриоритетВыполненияОбработчиковОбновления.ПорядокОтличаетсяОтДефолтного, ЛОЖЬ) КАК ПорядокОтличаетсяОтДефолтного
		|ИЗ
		|	ДляАнализа КАК ДляАнализа
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриоритетыВыполненияОбработчиковОбновления КАК ПриоритетВыполненияОбработчиковОбновления
		|		ПО ДляАнализа.СвязанныйОбработчик = ПриоритетВыполненияОбработчиковОбновления.Обработчик2
		|			И (ПриоритетВыполненияОбработчиковОбновления.Обработчик1 = &Ссылка)";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДляАнализа", ДанныеДляЗаписи);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ДанныеДляЗаписи = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.ПриоритетыВыполненияОбработчиковОбновления.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Обработчик1.Установить(Ссылка);
	НаборЗаписей.Загрузить(ДанныеДляЗаписи);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Если ЭтоНовый() Тогда
		Владелец = Проекты.ПроектПоУмолчанию();
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	НепроверяемыеРеквизиты = Новый Массив;

	Если Не МонопольныйРежимОправдан Тогда
		НепроверяемыеРеквизиты.Добавить("ПричинаИспользованияМонопольногоРежима")
	КонецЕсли;
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("ОбъектМетаданных");
	
	ОбщегоНазначенияСППР.ПроверитьНаличиеДублейСтрокТЧ(ЭтотОбъект, "ЧитаемыеДанные", КлючевыеРеквизиты, Отказ);
	ОбщегоНазначенияСППР.ПроверитьНаличиеДублейСтрокТЧ(ЭтотОбъект, "ИзменяемыеДанные", КлючевыеРеквизиты, Отказ);
	ОбщегоНазначенияСППР.ПроверитьНаличиеДублейСтрокТЧ(ЭтотОбъект, "ПрочиеБлокируемыеОбъекты", КлючевыеРеквизиты, Отказ);
	
	Если ЗапускатьТолькоВГлавномУзлеУстановлено
		И ЗапускатьИВПодчиненномУзлеРИБСФильтрамиУстановлено Тогда
		
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Нельзя одновременно установить оба признака: ""Запускать только в главном узле"" и ""Запускать и в подчиненном узле РИБ с фильтрами""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Если РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно
		И МонопольныйРежимОправдан
		И ЗапускатьТолькоВГлавномУзлеУстановлено Тогда
		
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Монопольный обработчик не может выполнятся только в главном узле.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ЕстьБлокируемыеЧитаемыеДанные = ЧитаемыеДанные.Найти(Истина, "БлокироватьИнтерфейс") <> Неопределено;
	ЕстьПрочиеБлокируемыеОбъекты  = ПрочиеБлокируемыеОбъекты.Количество() > 0;
	ЕстьБлокируемыеИзменяемыеДанные = ИзменяемыеДанные.Найти(Истина, "БлокироватьИнтерфейс") <> Неопределено;
	
	Если СокрЛП(ПроцедураПроверки) = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы" 
		И (ЕстьБлокируемыеЧитаемыеДанные
		Или ЕстьПрочиеБлокируемыеОбъекты) Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Процедура ""ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы"" не предназначена для проверки блокировки в обработчиках, которые контролируют блокировку читаемых данных или прочих объектов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ПроцедураПроверки","Объект");
	КонецЕсли;
	
	Если РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно                     
		Или РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Оперативно
		Или Не(ЕстьБлокируемыеЧитаемыеДанные
		Или ЕстьПрочиеБлокируемыеОбъекты
		Или ЕстьБлокируемыеИзменяемыеДанные) Тогда
		НепроверяемыеРеквизиты.Добавить("ПроцедураПроверки");
	КонецЕсли;	
	
	Если РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Монопольно                     
		Или РежимВыполнения = Перечисления.РежимыВыполненияОбработчиковОбновления.Оперативно Тогда
		НепроверяемыеРеквизиты.Добавить("ПроцедураЗаполненияДанныхОбновления");
	КонецЕсли;	
	
	Если ЕстьБлокируемыеЧитаемыеДанные Тогда
		
		Для Каждого СтрТабл из ЧитаемыеДанные Цикл
			Если СтрТабл.БлокироватьИнтерфейс
				И ИзменяемыеДанные.Найти(СтрТабл.ОбъектМетаданных, "ОбъектМетаданных") <> Неопределено Тогда
				
				ТекстСообщения = НСтр("ru = 'Объект ""%ОбъектМетаданных%"" перечислен в списке изменяемых данных. Если нужно блокировать интерфейс - достаточно установить соответствующий флаг в ТЧ ""Изменяемые данные"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектМетаданных%", СтрТабл.ОбъектМетаданных); 
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЧитаемыеДанные", СтрТабл.НомерСтроки, "БлокироватьИнтерфейс");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрТабл из ПрочиеБлокируемыеОбъекты Цикл
		Если ИзменяемыеДанные.Найти(СтрТабл.ОбъектМетаданных, "ОбъектМетаданных") <> Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Объект ""%ОбъектМетаданных%"" уже перечислен в списке изменяемых данных. Если нужно блокировать интерфейс - достаточно установить соответствующий флаг в ТЧ ""Изменяемые данные"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектМетаданных%", СтрТабл.ОбъектМетаданных); 
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеБлокируемыеОбъекты", СтрТабл.НомерСтроки, "ОбъектМетаданных");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		ИначеЕсли ЧитаемыеДанные.Найти(СтрТабл.ОбъектМетаданных, "ОбъектМетаданных") <> Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Объект ""%ОбъектМетаданных%"" уже перечислен в списке читаемых данных. Если нужно блокировать интерфейс - достаточно установить соответствующий флаг в ТЧ ""Читаемые данные"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектМетаданных%", СтрТабл.ОбъектМетаданных); 
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПрочиеБлокируемыеОбъекты", СтрТабл.НомерСтроки, "ОбъектМетаданных");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЕсли;	
	КонецЦикла;
			
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзмененныеОбъектыМетаданных()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЧитаемыеДанныеОбъект.ОбъектМетаданных
	|ПОМЕСТИТЬ ЧитаемыеДанныеОбъект
	|ИЗ
	|	&ЧитаемыеДанныеОбъект КАК ЧитаемыеДанныеОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзменяемыеДанныеОбъект.ОбъектМетаданных
	|ПОМЕСТИТЬ ИзменяемыеДанныеОбъект
	|ИЗ
	|	&ИзменяемыеДанныеОбъект КАК ИзменяемыеДанныеОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.ОбъектМетаданных КАК ОбъектМетаданных
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.ОбъектМетаданных КАК ОбъектМетаданных,
	|		СУММА(ВложенныйЗапрос.Контроль) КАК Контроль,
	|		ВложенныйЗапрос.Операция КАК Операция
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЧитаемыеДанныеОбъект.ОбъектМетаданных КАК ОбъектМетаданных,
	|			-1 КАК Контроль,
	|			""Чтение"" КАК Операция
	|		ИЗ
	|			ЧитаемыеДанныеОбъект КАК ЧитаемыеДанныеОбъект
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ИзменяемыеДанныеОбъект.ОбъектМетаданных,
	|			-1,
	|			""Изменение""
	|		ИЗ
	|			ИзменяемыеДанныеОбъект КАК ИзменяемыеДанныеОбъект
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОбработчикиОбновленияИнформационнойБазыЧитаемыеДанные.ОбъектМетаданных,
	|			1,
	|			""Чтение""
	|		ИЗ
	|			Справочник.ОбработчикиОбновленияИнформационнойБазы.ЧитаемыеДанные КАК ОбработчикиОбновленияИнформационнойБазыЧитаемыеДанные
	|		ГДЕ
	|			ОбработчикиОбновленияИнформационнойБазыЧитаемыеДанные.Ссылка = &Ссылка
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ОбработчикиОбновленияИнформационнойБазыИзменяемыеДанные.ОбъектМетаданных,
	|			1,
	|			""Изменение""
	|		ИЗ
	|			Справочник.ОбработчикиОбновленияИнформационнойБазы.ИзменяемыеДанные КАК ОбработчикиОбновленияИнформационнойБазыИзменяемыеДанные
	|		ГДЕ
	|			ОбработчикиОбновленияИнформационнойБазыИзменяемыеДанные.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.ОбъектМетаданных,
	|		ВложенныйЗапрос.Операция
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(ВложенныйЗапрос.Контроль) <> 0) КАК ВложенныйЗапрос";	
	
	Запрос.УстановитьПараметр("ЧитаемыеДанныеОбъект", ЧитаемыеДанные.Выгрузить());
	Запрос.УстановитьПараметр("ИзменяемыеДанныеОбъект", ИзменяемыеДанные.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектМетаданных");
	
КонецФункции

Функция ОбработчикВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ВключенВПодсистемуТекущегоПроектаВыполняетсяПараллельно
	|ИЗ
	|	Справочник.Проекты.МодулиОбновленияИнформационнойБазы КАК ПроектыМодулиОбновленияИнформационнойБазы
	|ГДЕ
	|	ПроектыМодулиОбновленияИнформационнойБазы.Ссылка = &Проект
	|	И ПроектыМодулиОбновленияИнформационнойБазы.Библиотека = &Библиотека
	|	И (ПроектыМодулиОбновленияИнформационнойБазы.ЭтоПодсистемаТекущегоПроекта
	|			ИЛИ ПроектыМодулиОбновленияИнформационнойБазы.РежимВыполненияОтложенныхОбработчиков = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОтложенныхОбработчиковОбновления.Параллельно)
	|				И &Сборка >= ПроектыМодулиОбновленияИнформационнойБазы.ПараллельноеОтложенноеОбновлениеСВерсииЧислом)
	|				И &РежимВыполнения = ЗНАЧЕНИЕ(Перечисление.РежимыВыполненияОбработчиковОбновления.Отложенно)";
	
	Запрос.УстановитьПараметр("Проект", Владелец);
	Запрос.УстановитьПараметр("Библиотека", Библиотека);
	Запрос.УстановитьПараметр("Сборка", СборкаЧислом);
	Запрос.УстановитьПараметр("РежимВыполнения", РежимВыполнения);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли
