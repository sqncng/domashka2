#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно);
	СформироватьОтчет();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьОтчет()
	
	ТекущаяДата = ТекущаяДата();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	ТаблицаРезультата = ОтчетОбъект.ТаблицаДанных;
	
	Макет = ОтчетОбъект.ПолучитьМакет("Макет");
	
	ЦветВыделенияЯчейки = WebЦвета.Желтый;
	ЦветСлабогоВыделенияЯчейки = WebЦвета.СветлоЖелтый;
	ЦветВыделенияЯчейкиСКомментарием = WebЦвета.СветлоЗолотистый;
	
	ТабДок = Новый ТабличныйДокумент;
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка|ИнформацияОПроекте");
	ТабДок.Вывести(ОбластьШапка);
	
	ТаблицаВключаемыхПроектов = ТаблицаРезультата.Скопировать(, "ВключаемыйПроект,УровеньБиблиотеки");
	ТаблицаВключаемыхПроектов.Свернуть("ВключаемыйПроект,УровеньБиблиотеки");
	ТаблицаВключаемыхПроектов.Сортировать("УровеньБиблиотеки");
	
	МассивВключаемыхПроектов = Новый Массив;
	
	Для Каждого СтрокаТаблицы из ТаблицаВключаемыхПроектов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВключаемыйПроект) Тогда
			МассивВключаемыхПроектов.Добавить(СтрокаТаблицы.ВключаемыйПроект);
		КонецЕсли;
	КонецЦикла;
	
	ОбластьШапкаВключаемыйПроект = Макет.ПолучитьОбласть("Шапка|ИнформацияОВключаемойБиблиотеке");
	
	ТабДок.ФиксацияСлева = ТабДок.ШиринаТаблицы;
	
	// Вывод включаемых библиотек в шапке
	Для Каждого ВключаемыйПроект из МассивВключаемыхПроектов Цикл
		ОбластьШапкаВключаемыйПроект.Параметры.ВключаемаяБиблиотека = ВключаемыйПроект;
		ТабДок.Присоединить(ОбластьШапкаВключаемыйПроект);
	КонецЦикла;
	
	ТабДок.ФиксацияСверху = ТабДок.ВысотаТаблицы;
	
	// Вывод строк по библиотекам и конфигурациям
	
	ТекущийПроект = Неопределено;
	ТекущаяВерсия = Неопределено;
	
	Для Каждого СтрокаТаблицы из ТаблицаРезультата Цикл
		
		Если СтрокаТаблицы.Проект = ТекущийПроект И СтрокаТаблицы.Версия = ТекущаяВерсия Тогда
			Продолжить;
		Иначе
			ТекущийПроект = СтрокаТаблицы.Проект;
			ТекущаяВерсия = СтрокаТаблицы.Версия;
		КонецЕсли;
		
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка|ИнформацияОПроекте");
		ОбластьСтрокаДополнительно = Макет.ПолучитьОбласть("СтрокаДополнительно|ИнформацияОПроекте");
		
		ОбластьСтрокаДополнительно.Параметры.Проект =  СтрокаТаблицы.Проект;
		ОбластьСтрокаДополнительно.Параметры.Версия =  СтрокаТаблицы.Версия;
		ОбластьСтрокаДополнительно.Параметры.Ответственный =  СтрокаТаблицы.Ответственный;
		ОбластьСтрокаДополнительно.Параметры.ИнформацияОФактическомВыпуске = ИнформацияоСборках(СтрокаТаблицы);
		
		ВыведеннаяОбласть = ВывестиСтроку(СтрокаТаблицы, ТабДок, ОбластьСтрока);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Проект", СтрокаТаблицы.Проект);
		СтруктураОтбора.Вставить("Версия", СтрокаТаблицы.Версия);
		
		МассивСтрок = ТаблицаРезультата.НайтиСтроки(СтруктураОтбора);
		ВключаетПроекты = Ложь;
		Для Каждого ОтобраннаяСтрока из МассивСтрок Цикл
			Если ЗначениеЗаполнено(ОтобраннаяСтрока.ВключаемыйПроект) Тогда
				ВключаетПроекты = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаВключенияБиблиотек) И ВключаетПроекты Тогда
			ОбластьПоля = ТабДок.Область(ВыведеннаяОбласть.Верх, 4, ВыведеннаяОбласть.Низ, 4);
			ОбластьПоля.ЦветФона = ЦветВыделенияЯчейки;
			ОбластьПоля.Примечание.Текст = НСтр("ru='Не заполнено'");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяДатаВыпуска) Тогда
			ОбластьПоля = ТабДок.Область(ВыведеннаяОбласть.Верх, 8, ВыведеннаяОбласть.Низ, 8);
			ОбластьПоля.ЦветФона = ЦветВыделенияЯчейки;
			ОбластьПоля.Примечание.Текст = НСтр("ru='Не заполнено'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяДатаВыпуска) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаПервойФинальнойСборкиПроекта) Тогда
				// Если фактический выпуск состоялся, то анализируется только отставание отплана
				Если НачалоДня(СтрокаТаблицы.ДатаПервойФинальнойСборкиПроекта) > СтрокаТаблицы.ПлановаяДатаВыпуска Тогда
					
					ОбластьПоля = ТабДок.Область(ВыведеннаяОбласть.Верх, 9, ВыведеннаяОбласть.Низ, 9);
					ОбластьПоля.ЦветФона = ЦветСлабогоВыделенияЯчейки;
					ОбластьПоля.Примечание.Текст = НСтр("ru='Фактическая дата выпуска позже запланированной'");
				КонецЕсли;
				
			Иначе
				// Если фактического выпуска еще не состоялось, анализируется состояние плана
				Если СтрокаТаблицы.ПлановаяДатаВыпуска <= НачалоДня(ТекущаяДата()) Тогда
					ОбластьПоля = ТабДок.Область(ВыведеннаяОбласть.Верх, 8, ВыведеннаяОбласть.Низ, 8);
					ОбластьПоля.ЦветФона = ЦветВыделенияЯчейки;
					ОбластьПоля.Примечание.Текст = НСтр("ru='Плановый срок выпуска истек'");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДатаПрекращенияПоддержки) Тогда
			ОбластьПоля = ТабДок.Область(ВыведеннаяОбласть.Верх, 10, ВыведеннаяОбласть.Низ, 10);
			ОбластьПоля.ЦветФона = ЦветВыделенияЯчейки;
			ОбластьПоля.Примечание.Текст = НСтр("ru='Не заполнено'");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВерсияПлатформы) Тогда
			ОбластьПоля = ТабДок.Область(ВыведеннаяОбласть.Верх, 11, ВыведеннаяОбласть.Низ, 11);
			ОбластьПоля.ЦветФона = ЦветВыделенияЯчейки;
			ОбластьПоля.Примечание.Текст = НСтр("ru='Не заполнено'");
		КонецЕсли;
		
		МассивПоБиблиотекам = Новый Массив;
		
		Для Каждого ВключаемыйПроект из МассивВключаемыхПроектов Цикл
			
			ОбластьСтрокаВключаемойБиблиотеки = Макет.ПолучитьОбласть("Строка|ИнформацияОВключаемойБиблиотеке");
			
			НеВключенаВерсияБиблиотеки = Ложь;
			НеЗаполненаДатаВыпускаБиблиотеки = Ложь;
			ВключенаНеПоследняяВерсияБиблиотеки = Ложь;
			ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек = Ложь;
			ДатаПрекращенияПоддержкиБиблиотекиРанее = Ложь;
			РазныеВерсииПлатформы = Ложь;
			КонфликтыБиблиотек = Новый Массив;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Проект", СтрокаТаблицы.Проект);
			СтруктураОтбора.Вставить("Версия", СтрокаТаблицы.Версия);
			СтруктураОтбора.Вставить("ВключаемыйПроект", ВключаемыйПроект);
			
			// Формируется информация о включаемых библиотеках
			
			МассивСтрок = ТаблицаРезультата.НайтиСтроки(СтруктураОтбора);
			
			ПлатформаВключаемойВерсии = "";
			ДатаВключаемойВерсииТекст = "";
			ДатаПрекращенияПоддержки = "";
			ДополнительнаяИнформацияОВключаемойВерсии = "";
			
			Если МассивСтрок.Количество()>0 Тогда
				
				СтрокаДляВключаемогоПроекта = МассивСтрок[0];
				
				Если ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ВключаемаяВерсия) Тогда
					
					Если ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ПубликуемыйНомерВключаемойВерсии) Тогда
						НомерВерсии = СтрокаДляВключаемогоПроекта.ПубликуемыйНомерВключаемойВерсии;
					Иначе
						НомерВерсии = СтрокаДляВключаемогоПроекта.НомерВключаемойВерсии;
					КонецЕсли;
					
					ОбластьСтрокаВключаемойБиблиотеки.Параметры.ВключаемаяВерсия =
						Строка(СтрокаДляВключаемогоПроекта.ВключаемыйПроект) + " " + НомерВерсии;
						
					ОбластьСтрокаВключаемойБиблиотеки.Параметры.Версия = СтрокаДляВключаемогоПроекта.ВключаемаяВерсия;
				Иначе
					ОбластьСтрокаВключаемойБиблиотеки.Параметры.ВключаемаяВерсия = "";
				КонецЕсли;
				
				ПлатформаВключаемойВерсии = СтрокаДляВключаемогоПроекта.ВерсияПлатформыВключаемойВерсии;
				
				Если ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ДатаСборкиВключаемойВерсии) Тогда
					ДатаВключаемойВерсии = СтрокаДляВключаемогоПроекта.ДатаСборкиВключаемойВерсии;
					ДатаВключаемойВерсииТекст = Формат(СтрокаДляВключаемогоПроекта.ДатаСборкиВключаемойВерсии, "ДФ=дд.ММ.гг");
				Иначе
					ДатаВключаемойВерсии = СтрокаДляВключаемогоПроекта.ПлановаяДатаВыпускаВключаемойВерсии;
					ДатаВключаемойВерсииТекст = Формат(СтрокаДляВключаемогоПроекта.ПлановаяДатаВыпускаВключаемойВерсии, "ДФ=дд.ММ.гг");
				КонецЕсли;
				
				ДатаПрекращенияПоддержки = Формат(СтрокаДляВключаемогоПроекта.ДатаПрекращенияПоддержкиВключаемойВерсии, "ДФ=дд.ММ.гг");
				
				Для Каждого СтрокаИнформацииПоВключаемойВерсии из МассивСтрок Цикл
					Если ЗначениеЗаполнено(СтрокаИнформацииПоВключаемойВерсии.ВерсияВключаемаяВБиблиотеку) Тогда
						
						Если ЗначениеЗаполнено(СтрокаИнформацииПоВключаемойВерсии.ПубликуемыйНомерВерсииВключаемойВБиблиотеку) Тогда
							НомерВерсииВключаемойВБиблиотеку = СтрокаИнформацииПоВключаемойВерсии.ПубликуемыйНомерВерсииВключаемойВБиблиотеку;
						Иначе
							НомерВерсииВключаемойВБиблиотеку = СтрокаИнформацииПоВключаемойВерсии.НомерВерсииВключаемойВБиблиотеку;
						КонецЕсли;
						
						ДополнительнаяИнформацияОВключаемойВерсии = ДополнительнаяИнформацияОВключаемойВерсии
							+ ?(ЗначениеЗаполнено(ДополнительнаяИнформацияОВключаемойВерсии), Символы.ПС, "")
							+ Строка(СтрокаИнформацииПоВключаемойВерсии.ПроектВерсииВключаемойВБиблиотеку)
							+ " " + НомерВерсииВключаемойВБиблиотеку;
							
					КонецЕсли;
				КонецЦикла;
				
				// Выполняется расчет контрольных показателей, на основе которых в отчете
				// сигнализируется о наличии ситуаций, считающихся проблемными.
				
				// В проект не включена версия библиотеки
				
				Если НЕ ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ВключаемаяВерсия) Тогда
					НеВключенаВерсияБиблиотеки = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ВключаемаяВерсия) Тогда
					
					// Не указана плановая дата выпуска для библиотеки
					Если НЕ ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ПлановаяДатаВыпускаВключаемойВерсии)Тогда
						НеЗаполненаДатаВыпускаБиблиотеки = Истина;
					КонецЕсли;
					
					// В проект встроена не последняя версия библиотеки
					Если ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ПлановаяДатаВыпускаВключаемойВерсии) 
						И ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ДатаВключенияБиблиотек)
						И СтрокаДляВключаемогоПроекта.ПлановаяДатаВыпускаВключаемойВерсии <> СтрокаДляВключаемогоПроекта.ПлановаяДатаВыпускаПоследнейВерсииБиблиотеки Тогда
						ВключенаНеПоследняяВерсияБиблиотеки = Истина;
					КонецЕсли;
						
					// Для проекта и библиотеки указаны разные версии платформы
					Если СтрокаДляВключаемогоПроекта.ВерсияПлатформы <> СтрокаДляВключаемогоПроекта.ВерсияПлатформыВключаемойВерсии Тогда
						РазныеВерсииПлатформы = Истина;
					КонецЕсли;
						
					// Дата выпуска библиотеки позже даты включения библиотек в проект
					Если ДатаВключаемойВерсии > СтрокаДляВключаемогоПроекта.ДатаВключенияБиблиотек
						И НЕ ЗначениеЗаполнено(СтрокаДляВключаемогоПроекта.ДатаСборкиВключаемойВерсии) Тогда
						ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек = Истина;
					КонецЕсли;
					
					// Дата окончания поддержки версии библиотеки ранее даты окончания поддержки версии конфигурации
					Если СтрокаДляВключаемогоПроекта.ДатаПрекращенияПоддержкиВключаемойВерсии < СтрокаДляВключаемогоПроекта.ДатаПрекращенияПоддержки
						И СтрокаДляВключаемогоПроекта.ДатаПрекращенияПоддержкиВключаемойВерсии <> '00010101' Тогда
						
						ДатаПрекращенияПоддержкиБиблиотекиРанее = Истина;
					КонецЕсли;
					
					// Версия библиотеки, включенной в проект, конфликтует с версиями этой библиотеки,
					// включенной в состав других библиотек, включаемых в проект.
					СтруктураОтбораПоБиблиотеке = Новый Структура;
					СтруктураОтбораПоБиблиотеке.Вставить("Проект", СтрокаТаблицы.Проект);
					СтруктураОтбораПоБиблиотеке.Вставить("Версия", СтрокаТаблицы.Версия);
					СтруктураОтбораПоБиблиотеке.Вставить("ВключаемыйПроект", СтрокаДляВключаемогоПроекта.ВключаемыйПроект);
					
					МассивСтрокПоБиблиотеке = ТаблицаРезультата.НайтиСтроки(СтруктураОтбораПоБиблиотеке);
					
					Для Каждого СтрокаПоБиблиотеке из МассивСтрокПоБиблиотеке Цикл
						Если ЗначениеЗаполнено(СтрокаПоБиблиотеке.ВерсияВключаемаяВБиблиотеку) Тогда
							
							СтруктураОтбораПроектовВключаемыхВБмблиотеку = Новый Структура;
							СтруктураОтбораПроектовВключаемыхВБмблиотеку.Вставить("Проект", СтрокаТаблицы.Проект);
							СтруктураОтбораПроектовВключаемыхВБмблиотеку.Вставить("Версия", СтрокаТаблицы.Версия);
							СтруктураОтбораПроектовВключаемыхВБмблиотеку.Вставить("ВключаемыйПроект", СтрокаПоБиблиотеке.ПроектВерсииВключаемойВБиблиотеку);
							
							МассивСтрокДляПроверкиКонфликта = ТаблицаРезультата.НайтиСтроки(СтруктураОтбораПроектовВключаемыхВБмблиотеку);
							
							Для Каждого СтрокаДляПроеркиКонфликта из МассивСтрокДляПроверкиКонфликта Цикл
								Если ЗначениеЗаполнено(СтрокаДляПроеркиКонфликта.ВключаемаяВерсия) Тогда
									Если ВерсииБиблиотекКонфликтуют(СтрокаДляПроеркиКонфликта, СтрокаПоБиблиотеке) Тогда
										
										СтруктураКонфликта = Новый Структура;
										СтруктураКонфликта.Вставить("Библиотека", СтрокаДляПроеркиКонфликта.ВключаемыйПроект);
										СтруктураКонфликта.Вставить("ВерсияВключаемаяВПроект", СтрокаДляПроеркиКонфликта.ВключаемаяВерсия);
										СтруктураКонфликта.Вставить("ВерсияВключаемаяВБиблиотеку", СтрокаПоБиблиотеке.ВерсияВключаемаяВБиблиотеку);
										
										КонфликтыБиблиотек.Добавить(СтруктураКонфликта);
										
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ОписаниеПроблем = "";
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("НеВключенаВерсияБиблиотеки", НеВключенаВерсияБиблиотеки);
				ДополнительныеПараметры.Вставить("ВключенаНеПоследняяВерсияБиблиотеки", ВключенаНеПоследняяВерсияБиблиотеки);
				ДополнительныеПараметры.Вставить("ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек", ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек);
				ДополнительныеПараметры.Вставить("РазныеВерсииПлатформы", РазныеВерсииПлатформы);
				ДополнительныеПараметры.Вставить("ДатаПрекращенияПоддержкиБиблиотекиРанее", ДатаПрекращенияПоддержкиБиблиотекиРанее);
				ДополнительныеПараметры.Вставить("КонфликтыБиблиотек", КонфликтыБиблиотек);
				ДополнительныеПараметры.Вставить("НеЗаполненаДатаВыпускаБиблиотеки", НеЗаполненаДатаВыпускаБиблиотеки);
				ДополнительныеПараметры.Вставить("КомментарийВключаемойВерсии", СтрокаДляВключаемогоПроекта.КомментарийВключаемойВерсии);
				
				
				НаличиеПроблем = ПроблемыДляВыделения(ОписаниеПроблем, СтрокаДляВключаемогоПроекта, ДополнительныеПараметры);
				
				СтруктураДанныхПрБиблиотеке = Новый Структура;
				СтруктураДанныхПрБиблиотеке.Вставить("ПроектБиблиотеки", ВключаемыйПроект);
				СтруктураДанныхПрБиблиотеке.Вставить("ВерсияБиблиотеки", СтрокаДляВключаемогоПроекта.ВключаемаяВерсия);
				СтруктураДанныхПрБиблиотеке.Вставить("ТребуетсяВыделениеОшибок", НаличиеПроблем.ЕстьОшибки);
				СтруктураДанныхПрБиблиотеке.Вставить("ТребуетсяВыделениеИнформации", НаличиеПроблем.ЕстьИнформация);
				СтруктураДанныхПрБиблиотеке.Вставить("ЕстьКомментарийВключаемойВерсии", НаличиеПроблем.ЕстьКомментарийВключаемойВерсии);
				СтруктураДанныхПрБиблиотеке.Вставить("ПлатформаВключаемойВерсии", ПлатформаВключаемойВерсии);
				СтруктураДанныхПрБиблиотеке.Вставить("ДатаВключаемойВерсииТекст", ДатаВключаемойВерсииТекст);
				СтруктураДанныхПрБиблиотеке.Вставить("ДатаПрекращенияПоддержки", ДатаПрекращенияПоддержки);
				СтруктураДанныхПрБиблиотеке.Вставить("ДополнительнаяИнформацияОВключаемойВерсии", ДополнительнаяИнформацияОВключаемойВерсии);
				
				МассивПоБиблиотекам.Добавить(СтруктураДанныхПрБиблиотеке);
			
			Иначе
				
				НаличиеПроблем = Новый Структура;
				НаличиеПроблем.Вставить("ЕстьОшибки",Ложь);
				НаличиеПроблем.Вставить("ЕстьИнформация", Ложь);
				НаличиеПроблем.Вставить("ЕстьКомментарийВключамеойВерсии", Ложь);
				
				ОписаниеПроблем = "";
				ТребуетсяВыделениеОбласти = Ложь;
				ОбластьСтрокаВключаемойБиблиотеки.Параметры.ВключаемаяВерсия = "";
				
				СтруктураДанныхПрБиблиотеке = Новый Структура;
				СтруктураДанныхПрБиблиотеке.Вставить("ПроектБиблиотеки", ВключаемыйПроект);
				СтруктураДанныхПрБиблиотеке.Вставить("ВерсияБиблиотеки", "");
				СтруктураДанныхПрБиблиотеке.Вставить("ТребуетсяВыделениеОшибок", НаличиеПроблем.ЕстьОшибки);
				СтруктураДанныхПрБиблиотеке.Вставить("ТребуетсяВыделениеИнформации", НаличиеПроблем.ЕстьИнформация);
				СтруктураДанныхПрБиблиотеке.Вставить("ЕстьКомментарийВключамеойВерсии", НаличиеПроблем.ЕстьКомментарийВключамеойВерсии);
				СтруктураДанныхПрБиблиотеке.Вставить("ПлатформаВключаемойВерсии", "");
				СтруктураДанныхПрБиблиотеке.Вставить("ДатаВключаемойВерсииТекст", "");
				СтруктураДанныхПрБиблиотеке.Вставить("ДатаПрекращенияПоддержки", "");
				СтруктураДанныхПрБиблиотеке.Вставить("ДополнительнаяИнформацияОВключаемойВерсии", "");
				
				МассивПоБиблиотекам.Добавить(СтруктураДанныхПрБиблиотеке);
				
			КонецЕсли;
			
			Область = ТабДок.Присоединить(ОбластьСтрокаВключаемойБиблиотеки);
				
			Если НаличиеПроблем.ЕстьОшибки Тогда
				
				Если НаличиеПроблем.ЕстьКомментарийВключаемойВерсии Тогда
					Область.ЦветФона = ЦветВыделенияЯчейкиСКомментарием;
				Иначе
					Область.ЦветФона = ЦветВыделенияЯчейки;
				КонецЕсли;
				
				Область.Примечание.Текст = ОписаниеПроблем;
				
			ИначеЕсли НаличиеПроблем.ЕстьИнформация Тогда
				
				Если НаличиеПроблем.ЕстьКомментарийВключаемойВерсии Тогда
					Область.ЦветФона = ЦветВыделенияЯчейкиСКомментарием;
				Иначе
					Область.ЦветФона = ЦветСлабогоВыделенияЯчейки;
				КонецЕсли;
				
				Область.Примечание.Текст = ОписаниеПроблем;
				
			Иначе
				
				Если ЗначениеЗаполнено(ОписаниеПроблем) Тогда
					Область.Примечание.Текст = ОписаниеПроблем;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Вывод дополнительной информации по включаемым библиотекам
		
		ТабДок.НачатьГруппуСтрок();
		
		ТабДок.Вывести(ОбластьСтрокаДополнительно);
		
		Для Каждого СтруктураИнформации из МассивПоБиблиотекам Цикл
			
			ОбластьСтрокаДополнительноВключаемыйПроект = Макет.ПолучитьОбласть("СтрокаДополнительно|ИнформацияОВключаемойБиблиотеке");
			
			СтрокаИнформации = "";
			
			Если ЗначениеЗаполнено(СтруктураИнформации.ВерсияБиблиотеки) Тогда
				
				СтрокаИнформации = НСтр("ru='Вып:'") + " " + СтруктураИнформации.ДатаВключаемойВерсииТекст + Символы.ПС;
				
				СтрокаИнформации = СтрокаИнформации + НСтр("ru='Под:'") + " " + СтруктураИнформации.ДатаПрекращенияПоддержки
					+ Символы.ПС;
					
				СтрокаИнформации = СтрокаИнформации + НСтр("ru='Пл:'") + " " + СтруктураИнформации.ПлатформаВключаемойВерсии;
				
				Если ЗначениеЗаполнено(СтруктураИнформации.ДополнительнаяИнформацияОВключаемойВерсии) Тогда
					СтрокаИнформации = СтрокаИнформации + Символы.ПС + СтруктураИнформации.ДополнительнаяИнформацияОВключаемойВерсии;
				КонецЕсли;
				
				ОбластьСтрокаДополнительноВключаемыйПроект.Параметры.ДополнительнаяИнформацияОВключаемойБиблиотеке = СтрокаИнформации;
				ОбластьСтрокаДополнительноВключаемыйПроект.Параметры.Версия = СтруктураИнформации.ВерсияБиблиотеки;
				
			КонецЕсли;
			
			Область = ТабДок.Присоединить(ОбластьСтрокаДополнительноВключаемыйПроект);
			
			Если СтруктураИнформации.ТребуетсяВыделениеОшибок Тогда
				Если СтруктураИнформации.ЕстьКомментарийВключаемойВерсии Тогда
					Область.ЦветФона = ЦветВыделенияЯчейкиСКомментарием;
				Иначе
					Область.ЦветФона = ЦветВыделенияЯчейки;
				КонецЕсли;
			ИначеЕсли СтруктураИнформации.ТребуетсяВыделениеИнформации Тогда
				Если СтруктураИнформации.ЕстьКомментарийВключаемойВерсии Тогда
					Область.ЦветФона = ЦветВыделенияЯчейкиСКомментарием;
				Иначе
					Область.ЦветФона = ЦветСлабогоВыделенияЯчейки;	
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДок.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
	Результат = ТабДок;
	
КонецПроцедуры

&НаСервере
Функция ПроблемыДляВыделения(ОписаниеПроблем, СтрокаТаблицы, ДополнительныеПараметры)
	
	НаличиеПроблем = Новый Структура;
	НаличиеПроблем.Вставить("ЕстьОшибки", Ложь);
	НаличиеПроблем.Вставить("ЕстьИнформация", Ложь);
	НаличиеПроблем.Вставить("ЕстьКомментарийВключаемойВерсии", Ложь);
	
	ТекстПроект = СОКРЛП(Строка(СтрокаТаблицы.Проект));
	ТекстВерсияПроекта = СОКРЛП(Строка(СтрокаТаблицы.Версия));
	ТекстВключаемыйПроект = СОКРЛП(Строка(СтрокаТаблицы.ВключаемыйПроект));
	ТекстВключаемаяВерсия = СОКРЛП(Строка(СтрокаТаблицы.ВключаемаяВерсия));
	
	Если ДополнительныеПараметры.НеВключенаВерсияБиблиотеки Тогда
		ТекстПроблемы = НСтр("ru='Не включена версия используемой библиотеки %ВключаемыйПроект%'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		НаличиеПроблем.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.НеЗаполненаДатаВыпускаБиблиотеки Тогда
		ТекстПроблемы = НСтр("ru='Не указана дата выпуска используемой версии библиотеки %ВключаемыйПроект% %ВключаемаяВерсия%'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		НаличиеПроблем.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ВключенаНеПоследняяВерсияБиблиотеки
		И НЕ ДополнительныеПараметры.ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек 
		И ЗначениеЗаполнено(СтрокаТаблицы.ПоследняяВерсияБиблиотеки) Тогда
		
		ТекстПроблемы = НСтр("ru='В %Проект% %ВерсияПроекта% включена не последняя версия библиотеки %ВключаемыйПроект% %ПоследняяВерсияБиблиотеки%'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%Проект%", ТекстПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияПроекта%", ТекстВерсияПроекта);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ПоследняяВерсияБиблиотеки%", "(" + СОКРЛП(Строка(СтрокаТаблицы.ПоследняяВерсияБиблиотеки)) + ")");
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПоследняяВерсияБиблиотеки) Тогда
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ПубликуемыйНомерПоследнейВерсииБиблиотеки) Тогда
				НомерВерсии = СтрокаТаблицы.ПубликуемыйНомерПоследнейВерсииБиблиотеки;
			Иначе
				НомерВерсии = СтрокаТаблицы.НомерПоследнейВерсииБиблиотеки;
			КонецЕсли;
			
			ОписаниеПроблем = ОписаниеПроблем + " (" + НомерВерсии + НСтр("ru=' выпуск '")
							  + Формат(СтрокаТаблицы.ПлановаяДатаВыпускаПоследнейВерсииБиблиотеки, "ДФ=дд.ММ.гг") + ")";
			
		КонецЕсли;
		
		Если СтрокаТаблицы.ДатаВключенияБиблиотек > НачалоДня(ТекущаяДата()) Тогда
			НаличиеПроблем.ЕстьОшибки = Истина;
		Иначе
			НаличиеПроблем.ЕстьИнформация = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ДополнительныеПараметры.ДатаВыпускаБиблиотекиПозжеДатыВключенияБиблиотек Тогда
		
		ТекстПроблемы = НСтр("ru='Дата выпуска %ВключаемыйПроект% %ВключаемаяВерсия%%ДатаВыпуска% позже срока включения библиотек%ДатаВключенияБиблиотек% в %Проект% %ВерсияПроекта%'");
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ПлановаяДатаВыпускаВключаемойВерсии) Тогда
			ПлановаяДатаВыпуска = " (" + Формат(СтрокаТаблицы.ПлановаяДатаВыпускаВключаемойВерсии, "ДФ=дд.ММ.гг") + ")";
		Иначе
			ПлановаяДатаВыпуска = "";
		КонецЕсли;
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ДатаВыпуска%", ПлановаяДатаВыпуска);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаВключенияБиблиотек) Тогда
			ДатаВключенияБиблиотек = " (" + Формат(СтрокаТаблицы.ДатаВключенияБиблиотек, "ДФ=дд.ММ.гг") + ")";
		Иначе
			ДатаВключенияБиблиотек = "";
		КонецЕсли;
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ДатаВключенияБиблиотек%", ДатаВключенияБиблиотек);
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%Проект%", ТекстПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияПроекта%", ТекстВерсияПроекта);
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаПервойФинальнойСборкиПроекта) Тогда
			НаличиеПроблем.ЕстьИнформация = Истина;
		Иначе
			НаличиеПроблем.ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ДатаПрекращенияПоддержкиБиблиотекиРанее Тогда
		
		ТекстПроблемы = НСтр("ru='Дата окончания поддержки %ВключаемыйПроект% %ВключаемаяВерсия%%ДатаОкончанияПоддержкиБиблиотеки% ранее даты окончания
		|  поддержки %Проект% %ВерсияПроекта%%ДатаОкончанияПоддержкиПроекта%'");
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%Проект%", ТекстПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияПроекта%", ТекстВерсияПроекта);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаПрекращенияПоддержкиВключаемойВерсии) Тогда
			ДатаОкончанияПоддержкиБиблиотеки = " (" + Формат(СтрокаТаблицы.ДатаПрекращенияПоддержкиВключаемойВерсии, "ДФ=дд.ММ.гг") + ")";
		Иначе
			ДатаОкончанияПоддержкиБиблиотеки = "";
		КонецЕсли;
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ДатаОкончанияПоддержкиБиблиотеки%", ДатаОкончанияПоддержкиБиблиотеки);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаПрекращенияПоддержки) Тогда
			ДатаОкончанияПоддержкиПроекта = " (" + Формат(СтрокаТаблицы.ДатаПрекращенияПоддержки, "ДФ=дд.ММ.гг") + ")";
		Иначе
			ДатаОкончанияПоддержкиПроекта = "";
		КонецЕсли;
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ДатаОкончанияПоддержкиПроекта%", ДатаОкончанияПоддержкиПроекта);
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		
		Если СтрокаТаблицы.ДатаПрекращенияПоддержки > НачалоДня(ТекущаяДата()) Тогда
			НаличиеПроблем.ЕстьОшибки = Истина;
		Иначе
			НаличиеПроблем.ЕстьИнформация = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.РазныеВерсииПлатформы Тогда

		ТекстПроблемы = НСтр("ru='Для %Проект% %ВерсияПроекта% и %ВключаемыйПроект% %ВключаемаяВерсия% указаны разные версии платформы (%ВерсияДляПроекта% и %ВерсияДляБиблиотеки%)'");
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%Проект%", ТекстПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияПроекта%", ТекстВерсияПроекта);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияДляПроекта%", СОКРЛП(Строка(СтрокаТаблицы.ВерсияПлатформы)));
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияДляБиблиотеки%", СОКРЛП(Строка(СтрокаТаблицы.ВерсияПлатформыВключаемойВерсии)));
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаПервойФинальнойСборкиПроекта) Тогда
			НаличиеПроблем.ЕстьИнформация = Истина;
		Иначе
			НаличиеПроблем.ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	КонфликтыБиблиотек = ДополнительныеПараметры.КонфликтыБиблиотек;
	
	Если КонфликтыБиблиотек.Количество()>0 Тогда
		
		ТекстПроблемы = НСтр("ru='Несовместимы версии библиотек, включаемых в %Проект% %ВерсияПроекта% и %ВключаемыйПроект% %ВключаемаяВерсия%:'");
		
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемыйПроект%", ТекстВключаемыйПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВключаемаяВерсия%", ТекстВключаемаяВерсия);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%Проект%", ТекстПроект);
		ТекстПроблемы = СтрЗаменить(ТекстПроблемы, "%ВерсияПроекта%", ТекстВерсияПроекта);
		
		СформироватьОписаниеПроблем(ОписаниеПроблем, ТекстПроблемы);
		
		Для Каждого ДанныеОКонфликтующейБиблиотеке из КонфликтыБиблиотек Цикл
			ОписаниеПроблем = ОписаниеПроблем + Символы.ПС + "   "
			                  + СОКРЛП(Строка(ДанныеОКонфликтующейБиблиотеке.Библиотека))
							  + " (" + СОКРЛП(Строка(ДанныеОКонфликтующейБиблиотеке.ВерсияВключаемаяВПроект))
							  + ", " + СОКРЛП(Строка(ДанныеОКонфликтующейБиблиотеке.ВерсияВключаемаяВБиблиотеку)) + ")";
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДатаПервойФинальнойСборкиПроекта) Тогда
			НаличиеПроблем.ЕстьИнформация = Истина;
		Иначе
			НаличиеПроблем.ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.КомментарийВключаемойВерсии) Тогда
		СформироватьОписаниеПроблем(ОписаниеПроблем, ДополнительныеПараметры.КомментарийВключаемойВерсии);
		НаличиеПроблем.ЕстьКомментарийВключаемойВерсии = Истина;
	КонецЕсли;
		
	Возврат НаличиеПроблем;
	
КонецФункции

&НаСервере
Процедура СформироватьОписаниеПроблем(ПолноеОписаниеПроблем, ОписаниеПроблемы)
	
	Если ЗначениеЗаполнено(ПолноеОписаниеПроблем) Тогда
		ПолноеОписаниеПроблем = ПолноеОписаниеПроблем + Символы.ПС;
	КонецЕсли;
	
	ПолноеОписаниеПроблем = ПолноеОписаниеПроблем + "- " + ОписаниеПроблемы;
		
КонецПроцедуры

&НаСервере
Функция ВывестиСтроку(СтрокаТаблицы, ТабДок, ОбластьСтрока)
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ПубликуемыйНомерВерсии) Тогда
		НомерВерсии = СтрокаТаблицы.ПубликуемыйНомерВерсии;
	Иначе
		НомерВерсии = СтрокаТаблицы.НомерВерсии;
	КонецЕсли;
		
	ОбластьСтрока.Параметры.Проект = СтрокаТаблицы.Проект;
	ОбластьСтрока.Параметры.Версия = СтрокаТаблицы.Версия;
	ОбластьСтрока.Параметры.НомерВерсии = НомерВерсии;
	
	ОбластьСтрока.Параметры.ДатаВключенияБиблиотек = СтрокаТаблицы.ДатаВключенияБиблиотек;
	ОбластьСтрока.Параметры.ДатаОкончанияРазработки = СтрокаТаблицы.ДатаОкончанияРазработки;
	ОбластьСтрока.Параметры.ПлановаяДатаВыпуска = СтрокаТаблицы.ПлановаяДатаВыпуска;
	ОбластьСтрока.Параметры.ФактическаяДатаВыпуска = СтрокаТаблицы.ДатаПервойФинальнойСборкиПроекта;
	
	Если СтрокаТаблицы.Библиотека Тогда
		ОбластьСтрока.Параметры.ДатаГотовностиКТестированиюВстраиваниюПлан =
		   СтрокаТаблицы.ДатаГотовностиКПредварительномуВстраиванию;
	Иначе
		ОбластьСтрока.Параметры.ДатаГотовностиКТестированиюВстраиваниюПлан =
		   СтрокаТаблицы.ДатаНачалаВнешнегоТестирования;
	КонецЕсли;
	
	ГотовностьФакт = СтрокаТаблицы.ДатаПервойТестовойСборкиПроекта;
	ОбластьСтрока.Параметры.ДатаГотовностиКТестированиюВстраиваниюФакт = ГотовностьФакт;
		
	ОбластьСтрока.Параметры.ДатаПрекращенияПоддержки = СтрокаТаблицы.ДатаПрекращенияПоддержки;
	ОбластьСтрока.Параметры.ВерсияПлатформы = СтрокаТаблицы.ВерсияПлатформы;
	
	Возврат ТабДок.Вывести(ОбластьСтрока);
	
КонецФункции

&НаСервере
Функция ИнформацияоСборках(СтрокаТаблицы)
	
	СтрокаИнформации = "";
	НомерСборки = "";
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ПерваяФинальнаяСборкаПроекта) Тогда
		
		НомерСборки = ?(ЗначениеЗаполнено(СтрокаТаблицы.ПубликуемыйНомерПервойФинальнойСборкиПроекта),
							СокрЛП(СтрокаТаблицы.ПубликуемыйНомерПервойФинальнойСборкиПроекта),
							СокрЛП(СтрокаТаблицы.КодПервойФинальнойСборкиПроекта));
							
		ДатаСборки = Формат(СтрокаТаблицы.ДатаПервойФинальнойСборкиПроекта, "ДФ=дд.ММ.гг");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерСборки) Тогда
		СтрокаИнформации = СтрокаИнформации + НомерСборки + Символы.ПС + ДатаСборки;
	КонецЕсли;
	
	Возврат СтрокаИнформации;
	
КонецФункции

&НаСервере
Функция ВерсииБиблиотекКонфликтуют(ДанныеВключаемойВерсии, ДанныеВерсииВключаемойВБиблиотеку)
	
	Если ДанныеВключаемойВерсии.ВключаемаяВерсияНомерРедакции = ДанныеВерсииВключаемойВБиблиотеку.ВерсияВключаемаяВбиблиотекуНомерРедакции
		И ДанныеВключаемойВерсии.ВключаемаяВерсияНомерПодредакции = ДанныеВерсииВключаемойВБиблиотеку.ВерсияВключаемаяВбиблиотекуНомерПодредакции
		И ДанныеВключаемойВерсии.ВключаемаяВерсияНомерВерсии >= ДанныеВерсииВключаемойВБиблиотеку.ВерсияВключаемаяВбиблиотекуНомерВерсии Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти