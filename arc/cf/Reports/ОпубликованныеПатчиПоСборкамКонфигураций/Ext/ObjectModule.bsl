///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	
	СборкиКонфигурации = НастройкиКД.ПараметрыДанных.Элементы.Найти("СборкиКонфигурации");
	Сборки = Новый Массив;
	Если СборкиКонфигурации.Использование Тогда
		Если ТипЗнч(СборкиКонфигурации.Значение) = Тип("СписокЗначений")
			И СборкиКонфигурации.Значение.Количество() > 0 Тогда
			Сборки = СборкиКонфигурации.Значение.ВыгрузитьЗначения();
		ИначеЕсли ТипЗнч(СборкиКонфигурации.Значение) = Тип("СправочникСсылка.СборкиВерсии") Тогда
			Сборки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СборкиКонфигурации.Значение);
		КонецЕсли;
	КонецЕсли;
	
	// Установка отбора по дате.
	ОтборИнтервал      = НастройкиКД.ПараметрыДанных.Элементы.Найти("Интервал");
	ОтборДатаНачала    = Неопределено;
	ОтборДатаОкончания = Неопределено;
	Если ОтборИнтервал.Использование Тогда
		ОтборДатаНачала    = ОтборИнтервал.Значение.ДатаНачала;
		ОтборДатаОкончания = ОтборИнтервал.Значение.ДатаОкончания;
		
		ОтборПоДатеСборки = "";
		Если ЗначениеЗаполнено(ОтборДатаНачала) Тогда
			ОтборПоДатеСборки = "СборкиВерсии.ДатаПубликации > &ДатаНачала";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтборДатаОкончания) Тогда
			ОтборПоДатеСборки = ОтборПоДатеСборки + ?(ЗначениеЗаполнено(ОтборПоДатеСборки), " И ", "")
				+ "СборкиВерсии.ДатаПубликации < &ДатаОкончания";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ОтборПоДатеСборки) Тогда
			ОтборПоДатеСборки = "ИСТИНА";
		КонецЕсли;
	Иначе
		ОтборПоДатеСборки = "ИСТИНА";
	КонецЕсли;
	
	Если Сборки.Количество() = 0 Тогда
		ВерсииКонфигурации = НастройкиКД.ПараметрыДанных.Элементы.Найти("ВерсииКонфигурации");
		Если ВерсииКонфигурации.Использование Тогда
			Версии = Новый Массив;
			Если ТипЗнч(ВерсииКонфигурации.Значение) = Тип("СписокЗначений")
				И ВерсииКонфигурации.Значение.Количество() > 0 Тогда
				Версии = ВерсииКонфигурации.Значение.ВыгрузитьЗначения();
			ИначеЕсли ТипЗнч(ВерсииКонфигурации.Значение) = Тип("СправочникСсылка.ВерсииПроекта") Тогда
				Версии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВерсииКонфигурации.Значение);
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Версии", Версии);
			Запрос.УстановитьПараметр("ДатаНачала", ОтборДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ОтборДатаОкончания);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	СборкиВерсии.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СборкиВерсии КАК СборкиВерсии
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
				|		ПО СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
				|ГДЕ
				|	СборкиВерсии.Опубликована = Истина
				|	И ВерсииПроекта.Ссылка В (&Версии)
				|	И &ОтборПоДатеСборки";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоДатеСборки", ОтборПоДатеСборки);
			
			Сборки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
	КонецЕсли;
	
	Если Сборки.Количество() = 0 Тогда
		ПроектОтбор = НастройкиКД.ПараметрыДанных.Элементы.Найти("ПроектОтбор");
		Если ПроектОтбор.Использование Тогда
			Проект = ПроектОтбор.Значение;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Проект", Проект);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
			Запрос.УстановитьПараметр("ДатаНачала", ОтборДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ОтборДатаОкончания);
			
			Запрос.Текст =
				"ВЫБРАТЬ
				|	СборкиВерсии.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СборкиВерсии КАК СборкиВерсии
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
				|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
				|		ПО СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
				|ГДЕ
				|	Проекты.Ссылка = &Проект
				|	И ВерсииПроекта.ДатаПрекращенияПоддержки < &ТекущаяДата
				|	И СборкиВерсии.Опубликована = ИСТИНА
				|	И &ОтборПоДатеСборки";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоДатеСборки", ОтборПоДатеСборки);
			Сборки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
	КонецЕсли;
	
	Если Сборки.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Требуется указать отбор по параметру ""Проект"", ""Версии"" или ""Сборки"".'");
	КонецЕсли;
	
	СборкиОтбор = Новый СписокЗначений;
	СборкиОтбор.ЗагрузитьЗначения(Сборки);
	
	// Заполнение признака, базовой конфигурации
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СборкиВерсии КАК СборкиВерсии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|		ПО СборкиВерсии.Владелец = ВерсииПроекта.Ссылка
		|ГДЕ
		|	СборкиВерсии.Ссылка = &Сборка";
	ПризнакЭтоБазовая = Ложь;
	Для Каждого Сборка Из Сборки Цикл
		Запрос.УстановитьПараметр("Сборка", Сборка);
		Результат = Запрос.Выполнить().Выгрузить();
		Проект = Результат[0].Ссылка;
		
		ЭтоКонфигурацияБазовая = ПатчиСлужебный.ЭтоКонфигурацияБазовая(Проект);
		ПризнакЭтоБазовая = ЭтоКонфигурацияБазовая;
		Прервать;
	КонецЦикла;;
	
	Состояние = НастройкиКД.ПараметрыДанных.Элементы.Найти("Состояние").Значение;
	ТаблицаРезультата = ДанныеДляОтчета(Состояние, СборкиОтбор, ПризнакЭтоБазовая);
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаРезультата", ТаблицаРезультата);
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКД, ДанныеРасшифровки, , , Ложь);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(2);
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ТаблицаРезультата.Количество() = 0);
	
КонецПроцедуры

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//         - Неопределено
//   КлючВарианта - Строка
//                - Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.СкрытьКомандыРассылки                              = Ложь;
	Настройки.ФормироватьСразу                                   = Ложь;
	
	Настройки.События.ПриСозданииНаСервере = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляОтчета(Состояние, СборкиОтбор, ЭтоБазовая)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состояние", Состояние);
	Запрос.УстановитьПараметр("СборкиОтбор", СборкиОтбор);
	Запрос.УстановитьПараметр("ЭтоБазовая", ЭтоБазовая);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВерсииПатчей.Патч) КАК ПредставлениеПатча,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВерсииПатчей.Версия) КАК Версия,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Проекты.Ссылка) КАК Проект,
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.УникальныйИдентификатор КАК УникальныйИдентификатор,
		|	ВерсииПатчей.ДатаПубликации КАК ДатаПубликации,
		|	ВерсииПатчей.ДатаОтзыва КАК ДатаОтзыва,
		|	ВерсииПатчей.ПодписанДляКонфигурации КАК ПодписанДляКонфигурации,
		|	ВерсииПатчей.Состояние КАК Состояние,
		|	ВерсииПатчей.ПричинаОтзыва КАК ПричинаОтзыва,
		|	ПрименимостьПатчей.Сборка КАК Сборка,
		|	1 КАК Итого
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименимостьПатчей КАК ПрименимостьПатчей
		|		ПО ВерсииПатчей.УникальныйИдентификатор = ПрименимостьПатчей.Патч
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|		ПО ВерсииПатчей.Версия = ВерсииПроекта.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патчи КАК Патчи
		|		ПО ВерсииПатчей.Патч = Патчи.Ссылка
		|ГДЕ
		|	НЕ Патчи.ПометкаУдаления
		|	И ВерсииПатчей.Состояние В(&Состояние)
		|	И ПрименимостьПатчей.Сборка В (&СборкиОтбор)
		|	И (&ЭтоБазовая
		|				И ВерсииПатчей.ПодписанДляКонфигурации <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|			ИЛИ НЕ &ЭтоБазовая
		|				И ВерсииПатчей.ПодписанДляКонфигурации = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))";
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("ИмяПатча");
	Для Каждого СтрокаПатч Из Результат Цикл
		СтрокаПатч.ИмяПатча = ПатчиСлужебный.ИмяПатча(СтрокаПатч.Патч, ПатчиСлужебный.НомерПатча(СтрокаПатч.УникальныйИдентификатор), Ложь);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли