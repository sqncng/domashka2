
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьЦвета();
	НастроитьДиаграмму();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	СерияПлан = Диаграмма.Серии.Получить(ИндексСерииПлан);
	СерияФакт = Диаграмма.Серии.Получить(ИндексСерииФакт);
	СерияРасхождения = Диаграмма.Серии.Получить(ИндексСерииРасхождения);
	
	Диаграмма.Обновление = Ложь;
	
	Интервал.Начало = НачалоДня(Интервал.Начало);
	Интервал.Конец = КонецДня(Интервал.Конец);
	
	СтрокаДерева = ПолучитьСтрокуДереваДляИнтервала(Интервал);
	
	ОтразитьИзмененияВДереве(Интервал, СтрокаДерева);	
	ПересчитатьИнтервалыРасхождений(Интервал, СтрокаДерева);
	
	ДобавитьИнтервалыФона(Диаграмма, СерияПлан, СерияФакт, СерияРасхождения, ЦветТекущейДаты, ЦветВыходных);
	
	Диаграмма.Обновление = Истина;
	
	ПлановыеИнтервалыИзменены = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СтруктураПараметровВывода = СтруктураПараметровВыводаСерий();
	
	ПараметрыВыбраны = Ложь;;
	Для Каждого ЭлементСтруктуры из СтруктураПараметровВывода Цикл
		Если (ЭлементСтруктуры.Значение) Тогда
			ПараметрыВыбраны = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрыВыбраны Тогда
		ТекстСообщения = НСтр("ru='Не выбраны показателя для отображения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СкомпоноватьРезультат(РежимКомпоновкиРезультата.Непосредственно);
	СФормироватьДиаграммуГанта(СтруктураПараметровВывода);
	
	ПлановыеИнтервалыИзменены = Ложь;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьИзменениеПлановВПроектах(Команда)
	
	Если НЕ ПлановыеИнтервалыИзменены Тогда
		ТекстСообщения = НСтр("ru='Нет изменений для отражения'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОшибкаПриУстановкеПланов = Ложь;
	
	ОтразитьИзменениеПлановВПроектахСервер(ОшибкаПриУстановкеПланов);
	
	Если ОшибкаПриУстановкеПланов Тогда
		Возврат;
	КонецЕсли;
	
	ПлановыеИнтервалыИзменены = Ложь;
	Модифицированность = Ложь;
	
	ТекстЗаголовка = НСтр("ru='Отражение изменение'");
	ТекстСообщения = НСтр("ru='Изменения сроков отражены в проектах'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьСтрокуДереваДляИнтервала(Интервал)
	
	ТехническийПроект = Интервал.Значение.Точка.Значение;
	
	СтрокиОтветственных = Отчет.ДеревоПроектов.ПолучитьЭлементы();
	
	Для Каждого СтрокаОтветственного из СтрокиОтветственных Цикл
		
		СтрокиПроекта = СтрокаОтветственного.ПолучитьЭлементы();
		Для Каждого СтрокаПроекта из СтрокиПроекта Цикл
			Если СтрокаПроекта.ТехническийПроект = ТехническийПроект Тогда
				Возврат СтрокаПроекта;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла
	
КонецФункции

&НаКлиенте
Процедура ОтразитьИзмененияВДереве(Интервал, СтрокаДерева)
	
	СтрокаДерева.ПлановаяДатаНачала = Интервал.Начало;
	СтрокаДерева.ПлановаяДатаОкончания = Интервал.Конец;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИнтервалыРасхождений(ИнтервалПлан, СтрокаДерева)
	
	СтруктураПараметровВывода = СтруктураПараметровВыводаСерий();
	
	Точка = ИнтервалПлан.Значение.Точка;
	
	СерияРасхождения = Диаграмма.Серии.Получить(ИндексСерииРасхождения);
	
	ЗначениеРасхождения = Диаграмма.ПолучитьЗначение(Точка, СерияРасхождения);
	ЗначениеРасхождения.Очистить();
			
	Если СтруктураПараметровВывода.ВыводитьПросрочку Тогда
		ДобавитьИнтервалыПоРасхождениям(Диаграмма, Точка, СерияРасхождения, СтрокаДерева, СтрокаДерева.ПолучитьЭлементы(), ЦветРасхождений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СФормироватьДиаграммуГанта(СтруктураПараметровВывода)
	
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	
	// Определяем серии - отлельно на план, факт и расхождения
	СерияПлан = Диаграмма.Серии.Добавить();
	СерияПлан.Цвет = ЦветПлановыхИнтервалов;
	
	СерияФакт = Диаграмма.Серии.Добавить();
	СерияФакт.Цвет = ЦветФактическихИнтервалов;
	СерияФакт.ДополнительныйЦвет = ЦветВажныхОтметок;
	
	СерияРасхождения = Диаграмма.Серии.Добавить();
	СерияРасхождения.Цвет = ЦветРасхождений;
	
	ИндексСерииПлан = Диаграмма.Серии.Индекс(СерияПлан);
	ИндексСерииФакт = Диаграмма.Серии.Индекс(СерияФакт);
	ИндексСерииРасхождения = Диаграмма.Серии.Индекс(СерияРасхождения);
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ДеревоПроектов = ОтчетОбъект.ДеревоПроектов;
	
	Для Каждого ВетвьОтветственного из ДеревоПроектов.Строки Цикл
		
		Если ВетвьОтветственного.Строки.Количество()>0 Тогда
			Идентификатор = Новый УникальныйИдентификатор();
			ТочкаОтветственного = Диаграмма.УстановитьТочку(Идентификатор, Неопределено);
			ТочкаОтветственного.Текст = Строка(ВетвьОтветственного.Ответственный) + " ( " + ВетвьОтветственного.Очередность + " оч. )";
			ТочкаОтветственного.Расшифровка = ВетвьОтветственного.Ответственный;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДерева из ВетвьОтветственного.Строки Цикл
			
			Точка = Диаграмма.УстановитьТочку(СтрокаДерева.ТехническийПроект, ТочкаОтветственного.Значение);
			Точка.Текст = СтрокаДерева.Наименование;
			Точка.Расшифровка = СтрокаДерева.ТехническийПроект;
			
			Если СтруктураПараметровВывода.ВыводитьПлановыеСроки Тогда
				ДобавитьПлановыйИнтервал(Диаграмма, Точка, СерияПлан, СтрокаДерева);
			КонецЕсли;
			
			Если СтруктураПараметровВывода.ВыводитьКонтрольныеТочки Тогда
				ДобавитьФактическиеИнтервалы(Диаграмма, Точка, СерияФакт, СтрокаДерева);
			КонецЕсли;
			
			Если СтруктураПараметровВывода.ВыводитьПросрочку Тогда
				ДобавитьИнтервалыПоРасхождениям(Диаграмма, Точка, СерияРасхождения, СтрокаДерева, СтрокаДерева.Строки, ЦветРасхождений);
			КонецЕсли;
			
		КонецЦикла;
		
		Диаграмма.РазвернутьТочку(ТочкаОтветственного, Истина);
		
	КонецЦикла;
	
	ДобавитьИнтервалыФона(Диаграмма, СерияПлан, СерияФакт, СерияРасхождения, ЦветТекущейДаты, ЦветВыходных);
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПлановыйИнтервал(Диаграмма, Точка, Серия, СтрокаДерева)
	
	Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
	Значение.Расшифровка = СтрокаДерева.ТехническийПроект;
	
	Если СтрокаДерева.Статус = Перечисления.СтатусыТехническихПроектов.Выполнен Тогда
		Значение.Редактирование = Ложь;
	Иначе
		Значение.Редактирование = Истина;
	КонецЕсли;
	
	Интервал = Значение.Добавить();
	
	Если ЗначениеЗаполнено(СтрокаДерева.ПлановаяДатаНачала) Тогда
		Интервал.Начало = СтрокаДерева.ПлановаяДатаНачала;
	Иначе
		Интервал.Начало = СтрокаДерева.НачалоВерсии;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.ПлановаяДатаОкончания) Тогда
		КонецИнтервала = КонецДня(СтрокаДерева.ПлановаяДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ОкончаниеВерсии) Тогда
		КонецИнтервала = КонецДня(СтрокаДерева.ОкончаниеВерсии);
	Иначе
		КонецИнтервала = ? (ЗначениеЗаполнено(СтрокаДерева.ПлановаяДатаНачала),КонецДня(СтрокаДерева.ПлановаяДатаНачала), СтрокаДерева.ПлановаяДатаОкончания);
	КонецЕсли;
	
	Интервал.Конец = КонецИнтервала;
	Интервал.Цвет = ЦветПлановыхИнтервалов;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФактическиеИнтервалы(Диаграмма, Точка, Серия, СтрокаДерева)
	
	Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
	Значение.Редактирование = Ложь;
	Значение.Расшифровка = СтрокаДерева.ТехническийПроект;
	
	СчетчикНепропущенных = 0;
	СчетчикПройденных = 0;
	СчетчикОтображаемых = 0;
	
	ОкончаниеПредыдущейТочки = '00010101';
	
	Для Каждого СтрокаТаблицы из СтрокаДерева.Строки Цикл
		
		Если СтрокаТаблицы.СтатусКонтрольнойТочки = Перечисления.СтатусыЗадачПроцессов.Отменена Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикНепропущенных = СчетчикНепропущенных +1;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СрокПрохожденияКонтрольнойТочки) Тогда
			
			Интервал = Значение.Добавить();
			
			Если НЕ ЗначениеЗаполнено(ОкончаниеПредыдущейТочки) Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.НачалоПрохожденияКонтрольнойТочки) Тогда
					Интервал.Начало = НачалоДня(СтрокаТаблицы.НачалоПрохожденияКонтрольнойТочки);
				Иначе
					Интервал.Начало = НачалоДня(СтрокаТаблицы.СрокПрохожденияКонтрольнойТочки);
				КонецЕсли;
			Иначе
				Интервал.Начало = КонецДня(ОкончаниеПредыдущейТочки);
			КонецЕсли;
			
			Интервал.Конец = КонецДня(СтрокаТаблицы.СрокПрохожденияКонтрольнойТочки);
			
			Если СтрокаТаблицы.СтатусКонтрольнойТочки = Перечисления.СтатусыЗадачПроцессов.Запланирована
				Или СтрокаТаблицы.СтатусКонтрольнойТочки = Перечисления.СтатусыЗадачПроцессов.ПринятаКВыполнению Тогда
				
				Если СтрокаТаблицы.СрокПрохожденияКонтрольнойТочки < НачалоДня(ТекущаяДата()) Тогда
					Интервал.Цвет = ЦветВажныхОтметок;
				Иначе
					Интервал.Цвет = ЦветФактическихНепройденныхИнтервалов;
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.СтатусКонтрольнойТочки = Перечисления.СтатусыЗадачПроцессов.Выполнена Тогда
				Интервал.Цвет = ЦветФактическихИнтервалов;
				СчетчикПройденных = СчетчикПройденных +1;
			КонецЕсли;
			
			ОкончаниеПредыдущейТочки = КонецДня(СтрокаТаблицы.СрокПрохожденияКонтрольнойТочки);
			
			СчетчикОтображаемых = СчетчикОтображаемых + 1;
			
			Интервал.Текст = Строка(СчетчикОтображаемых) + " : " + Формат(Интервал.Начало,"ДФ=дд.ММ") + " - " + Формат(Интервал.Конец, "ДФ=дд.ММ");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева.Статус = Перечисления.СтатусыТехническихПроектов.Выполнен 
		ИЛИ СтрокаДерева.Статус = Перечисления.СтатусыТехническихПроектов.НеЗапланирован Тогда
		Значение.Текст = СтрокаДерева.Статус;
	Иначе
		Если СчетчикНепропущенных > 0 Тогда
			Значение.Текст = Строка(СчетчикПройденных) + "/" + СчетчикНепропущенных;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзменениеПлановВПроектахСервер(ЕстьОшибки)
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетОбъект.ОтразитьИзмененияПлановВПроектах(ЕстьОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЦвета()
	
	ЦветПлановыхИнтервалов = WebЦвета.НейтральноЗеленый;
	ЦветФактическихИнтервалов = WebЦвета.ЦветМорскойВолныТемный;
	ЦветФактическихНепройденныхИнтервалов = WebЦвета.ГолубойСоСтальнымОттенком;
	ЦветВажныхОтметок = WebЦвета.Лосось;
	ЦветРасхождений = Новый Цвет(255,255, 153);
	ЦветВыходных = Новый Цвет(250,240,230);
	ЦветТекущейДаты = WebЦвета.СветлоКоричневый;

КонецПроцедуры

&НаСервере
Процедура НастроитьДиаграмму()
	
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	Диаграмма.ОтображатьПустыеЗначения = Ложь;
	
	Диаграмма.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	Диаграмма.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Градиент;
		
	ОбластьПостроения = Диаграмма.ОбластьПостроения;
	ШкалаВремени = ОбластьПостроения.ШкалаВремени;
	
	ЭлементНеделя = ШкалаВремени.Элементы.Вставить(0);
	
	ЭлементНеделя.Видимость = Истина;
	ЭлементНеделя.Единица = ТипЕдиницыШкалыВремени.Неделя;
	ЭлементНеделя.Кратность = 1;
	ЭлементНеделя.ОтображатьПериодическиеМетки = Истина;
	
КонецПроцедуры

&НаСервере
Функция СтруктураПараметровВыводаСерий()
	
	Структура = Новый Структура();
	Структура.Вставить("ВыводитьПлановыеСроки", ПолучитьЗначениеПараметра("ВыводитьПлановыеСроки"));
	Структура.Вставить("ВыводитьКонтрольныеТочки", ПолучитьЗначениеПараметра("ВыводитьКонтрольныеТочки"));
	Структура.Вставить("ВыводитьПросрочку", ПолучитьЗначениеПараметра("ВыводитьПросрочку"));
	
	Возврат Структура;
		
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПараметра(ИмяПараметра)
	
	Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	ИспользуемыеНастройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	ЗначениеПараметра = ИспользуемыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Параметр);
	
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат ЗначениеПараметра.Значение;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьИнтервалыФона(Диаграмма, СерияПлан, СерияФакт, СерияРасхождения, ЦветТекущейДаты, ЦветВыходных)
	
	Диаграмма.ИнтервалыФона.Очистить();
	
	// Отмечаем фоном текущую дату
	Интервал = Диаграмма.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДата()), КонецДня(ТекущаяДата()));
	Интервал.Цвет = ЦветТекущейДаты;
	
	ГраницыВывода = ПолучитьГраницыВывода(Диаграмма, СерияПлан, СерияФакт, СерияРасхождения);
	
	// Отмечаем фоном выходные
	Если ЗначениеЗаполнено(ГраницыВывода.Начало) И ЗначениеЗаполнено(ГраницыВывода.Конец) Тогда
		
		Неделя = 3600 * 24 * 7;
		Выходные = 3600 * 48;
		ТекДата = ГраницыВывода.Начало;
		Пока ТекДата <= ГраницыВывода.Конец Цикл;
			Конец = НачалоНедели(ТекДата);
			Начало = Конец - Выходные;
			Интервал = Диаграмма.ИнтервалыФона.Добавить(Начало, Конец);
			Интервал.Цвет = ЦветВыходных;
			
			ТекДата = ТекДата + Неделя;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьИнтервалыПоРасхождениям(Диаграмма, Точка, СерияРасхождения, СтрокаДерева, СтрокиТаблицы, ЦветРасхождений)
	
	ПлановыйИнтервал = ПолучитьСтруктуруПлановогоИнтервала(СтрокаДерева);
	ФактическийИнтервал = ПолучитьСтруктуруФактическогоИнтервала(СтрокаДерева, СтрокиТаблицы);
	
	ЗначениеРасхождения = Диаграмма.ПолучитьЗначение(Точка, СерияРасхождения);
	ЗначениеРасхождения.Редактирование = Ложь;
	ЗначениеРасхождения.Цвет = ЦветРасхождений;
	
	ИнтервалРасхождений = ЗначениеРасхождения.Добавить();
	
	Если ФактическийИнтервал.Конец > ПлановыйИнтервал.Конец Тогда
		
		Если ЗначениеЗаполнено(ПлановыйИнтервал.Конец) Тогда
			ИнтервалРасхождений.Начало = КонецДня(ПлановыйИнтервал.Конец);
		Иначе
			ИнтервалРасхождений.Начало = ПлановыйИнтервал.Конец;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФактическийИнтервал.Конец) Тогда
			ИнтервалРасхождений.Конец = КонецДня(ФактическийИнтервал.Конец);
		Иначе
			ИнтервалРасхождений.Конец = ФактическийИнтервал.Конец;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПлановогоИнтервала(СтрокаДерева)
	
	Интервал = Новый Структура();
	
	Если ЗначениеЗаполнено(СтрокаДерева.ПлановаяДатаНачала) Тогда
		Интервал.Вставить("Начало", СтрокаДерева.ПлановаяДатаНачала);
	Иначе
		Интервал.Вставить("Начало", СтрокаДерева.НачалоВерсии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДерева.ПлановаяДатаОкончания) Тогда
		Интервал.Вставить("Конец", СтрокаДерева.ПлановаяДатаОкончания);
	Иначе
		Интервал.Вставить("Конец", СтрокаДерева.ОкончаниеВерсии);
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруФактическогоИнтервала(СтрокаДерева, СтрокиТаблицы)
	
	Интервал = Новый Структура();
	
	Интервал.Вставить("Начало", '00010101');
	Интервал.Вставить("Конец", '00010101');
	
	СрокПоследнейУказаннойКонтрольнойТочки = '00010101';
	Статус = Неопределено;
		
	Для Каждого СтрокаТаблицы из СтрокиТаблицы Цикл
		
		Если СтрокаТаблицы.СтатусКонтрольнойТочки = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Отменена") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СрокПрохожденияКонтрольнойТочки) Тогда
			СрокПоследнейУказаннойКонтрольнойТочки = СтрокаТаблицы.СрокПрохожденияКонтрольнойТочки;
			Статус = СтрокаТаблицы.СтатусКонтрольнойТочки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СрокПоследнейУказаннойКонтрольнойТочки) Тогда
		Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗадачПроцессов.Выполнена") Тогда
			Интервал.Вставить("Конец",СрокПоследнейУказаннойКонтрольнойТочки);
		Иначе
			Если СрокПоследнейУказаннойКонтрольнойТочки < НачалоДня(ТекущаяДата()) Тогда
				Интервал.Вставить("Конец",КонецДня(ТекущаяДата()));
			Иначе
				Интервал.Вставить("Конец",СрокПоследнейУказаннойКонтрольнойТочки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьГраницыВывода(Диаграмма, СерияПлан, СерияФакт, СерияРасхождения)
	
	Структура = Новый Структура();
	Структура.Вставить("Начало", '00010101');
	Структура.Вставить("Конец", '00010101');
	
	МинимальнаяГраница = Диаграмма.НачалоПолногоИнтервала;
	МаксимальнаяГраница = Диаграмма.НачалоПолногоИнтервала;
	
	Для Каждого ТочкаОтветственного из Диаграмма.Точки Цикл
		Для Каждого ТочкаПроекта из ТочкаОтветственного.Точки Цикл
			
			ЗначениеПлан = Диаграмма.ПолучитьЗначение(ТочкаПроекта, СерияПлан);
			ЗначениеФакт = Диаграмма.ПолучитьЗначение(ТочкаПроекта, СерияФакт);
			
			Для Каждого ПлановыйИнтервал из ЗначениеПлан Цикл
				Если ЗначениеЗаполнено(ПлановыйИнтервал.Начало) И ПлановыйИнтервал.Начало < МинимальнаяГраница Тогда
					МинимальнаяГраница = ПлановыйИнтервал.Начало;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПлановыйИнтервал.Конец) И ПлановыйИнтервал.Конец > МаксимальнаяГраница Тогда
					МаксимальнаяГраница = ПлановыйИнтервал.Конец;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ФактическийИнтервал из ЗначениеФакт Цикл
				Если ЗначениеЗаполнено(ФактическийИнтервал.Начало) И ФактическийИнтервал.Начало < МинимальнаяГраница Тогда
					МинимальнаяГраница = ФактическийИнтервал.Начало;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ФактическийИнтервал.Конец) И ФактическийИнтервал.Конец > МаксимальнаяГраница Тогда
					МаксимальнаяГраница = ФактическийИнтервал.Конец;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Структура.Начало = МинимальнаяГраница;
	Структура.Конец = МаксимальнаяГраница;
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти
