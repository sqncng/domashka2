///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиКД = КомпоновщикНастроек.ПолучитьНастройки();
	
	ОтборИнтервал      = НастройкиКД.ПараметрыДанных.Элементы.Найти("Интервал");
	ОтборДатаНачала    = Неопределено;
	ОтборДатаОкончания = Неопределено;
	Если ОтборИнтервал.Использование Тогда
		ОтборДатаНачала    = ОтборИнтервал.Значение.ДатаНачала;
		ОтборДатаОкончания = ОтборИнтервал.Значение.ДатаОкончания;
	КонецЕсли;
	
	ТаблицаРезультата = ДанныеДляОтчета(ОтборДатаНачала, ОтборДатаОкончания);
	
	ВнешниеНаборыДанных = Новый Структура("ИсходныеДанные", ТаблицаРезультата);
	
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, НастройкиКД, ДанныеРасшифровки, , , Ложь);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаРезультатаКД.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаРезультатаКД.Вывести(ПроцессорКД);
	
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(2);
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ТаблицаРезультата.Количество() = 0);
	
КонецПроцедуры

// Задать настройки формы отчета.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения
//         - Неопределено
//   КлючВарианта - Строка
//                - Неопределено
//   Настройки - см. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.СкрытьКомандыРассылки = Ложь;
	Настройки.ФормироватьСразу      = Ложь;
	
	Настройки.События.ПриСозданииНаСервере = Ложь;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
	
КонецПроцедуры

Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	ПараметрКД = Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ГраницаУстареванияПервая");
	ПараметрКД.Значение = ТекущаяДатаСеанса() - 60 * 60 * 24 * 14;
	
	ПараметрКД = Форма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ГраницаУстареванияВторая");
	ПараметрКД.Значение = ТекущаяДатаСеанса() - 60 * 60 * 24 * 30;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеДляОтчета(ДатаНачала, ДатаОкончания)
	
	// Выбор патчей по сборкам выпущенным в выбранном интервале.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("ПодписанДляКонфигурации", Справочники.Проекты.ПустаяСсылка());
	Запрос.УстановитьПараметр("Опубликован", Перечисления.СтатусыПатчей.Опубликован);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииПатчей.КонечнаяСборка КАК Ссылка,
		|	СборкиВерсии.ДатаПубликации КАК ДатаПубликации,
		|	ВерсииПатчей.Версия КАК Версия
		|ПОМЕСТИТЬ втСборкиВИнтервале
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
		|		ПО ВерсииПатчей.КонечнаяСборка = СборкиВерсии.Ссылка
		|ГДЕ
		|	ВерсииПатчей.ДатаПубликации >= &ДатаНачала
		|	И ВерсииПатчей.ДатаПубликации <= &ДатаОкончания
		|	И ВерсииПатчей.ПодписанДляКонфигурации = &ПодписанДляКонфигурации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СборкиВерсии.Ссылка КАК Ссылка,
		|	СборкиВерсии.ДатаПубликации КАК ДатаПубликации
		|ПОМЕСТИТЬ втСборкиВИнтервалеОтобранные
		|ИЗ
		|	втСборкиВИнтервале КАК СборкиВерсии
		|ГДЕ
		|	(СборкиВерсии.ДатаПубликации >= &ДатаНачала
		|				И СборкиВерсии.ДатаПубликации <= &ДатаОкончания
		|			ИЛИ СборкиВерсии.Ссылка В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Сборки.Ссылка
		|				ИЗ
		|					Справочник.СборкиВерсии КАК Сборки
		|				ГДЕ
		|					Сборки.Владелец = СборкиВерсии.Версия
		|					И Сборки.ДатаСборки < &ДатаНачала
		|				УПОРЯДОЧИТЬ ПО
		|					Сборки.ДатаСборки УБЫВ))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВерсииПатчей.Патч КАК Патч,
		|	ВерсииПатчей.КонечнаяСборка КАК Сборка,
		|	СборкиВИнтервале.ДатаПубликации КАК ДатаПубликации,
		|	ВерсииПатчей.ДатаПубликации КАК ДатаПубликацииПатча,
		|	ВерсииПатчей.ДатаОтзыва КАК ДатаОтзываПатча,
		|	ВерсииПатчей.Версия КАК Версия,
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Библиотека КАК ЭтоБиблиотека
		|ИЗ
		|	РегистрСведений.ВерсииПатчей КАК ВерсииПатчей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСборкиВИнтервалеОтобранные КАК СборкиВИнтервале
		|		ПО ВерсииПатчей.КонечнаяСборка = СборкиВИнтервале.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииПроекта КАК ВерсииПроекта
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|			ПО ВерсииПроекта.Владелец = Проекты.Ссылка
		|		ПО ВерсииПатчей.Версия = ВерсииПроекта.Ссылка
		|ГДЕ
		|	ВерсииПатчей.ПодписанДляКонфигурации = &ПодписанДляКонфигурации
		|	И ВерсииПатчей.Состояние = &Опубликован
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииПатчей.Патч";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаСборок = Результат.Скопировать(, "Сборка, ДатаПубликации, Версия");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СборкиИВерсии", ТаблицаСборок);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СборкиИВерсии.Сборка КАК Сборка,
		|	СборкиИВерсии.ДатаПубликации КАК ДатаПубликации,
		|	СборкиИВерсии.Версия КАК Версия
		|ПОМЕСТИТЬ втСборкиИВерсииВИнтервале
		|ИЗ
		|	&СборкиИВерсии КАК СборкиИВерсии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СборкиИВерсии.Сборка КАК Сборка,
		|	СборкиВерсии.Ссылка КАК СледующаяСборка,
		|	СборкиВерсии.ДатаПубликации КАК ДатаСледующейСборки
		|ИЗ
		|	Справочник.ВерсииПроекта КАК ВерсииПроекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСборкиИВерсииВИнтервале КАК СборкиИВерсии
		|		ПО ВерсииПроекта.Ссылка = СборкиИВерсии.Версия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СборкиВерсии КАК СборкиВерсии
		|		ПО ВерсииПроекта.Ссылка = СборкиВерсии.Владелец
		|ГДЕ
		|	СборкиВерсии.Ссылка В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				Сборки.Ссылка
		|			ИЗ
		|				Справочник.СборкиВерсии КАК Сборки
		|			ГДЕ
		|				Сборки.ДатаПубликации > СборкиИВерсии.ДатаПубликации
		|				И Сборки.Владелец = СборкиИВерсии.Версия
		|			УПОРЯДОЧИТЬ ПО
		|				Сборки.ДатаПубликации)";
	УстановитьПривилегированныйРежим(Истина);
	УточнениеПоСборкам = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Уточнение = Новый Соответствие;
	Для Каждого Строка Из УточнениеПоСборкам Цикл
		Уточнение.Вставить(Строка.Сборка, Новый Структура("СледующаяСборка, ДатаСледующейСборки", Строка.СледующаяСборка, Строка.ДатаСледующейСборки));
	КонецЦикла;
	
	Результат.Колонки.Добавить("СледующаяСборка", Новый ОписаниеТипов("СправочникСсылка.СборкиВерсии"));
	Результат.Колонки.Добавить("ДатаСледующейСборки", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка Из Результат Цикл
		УточненияСборки = Уточнение[Строка.Сборка];
		Если УточненияСборки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Строка.СледующаяСборка = УточненияСборки.СледующаяСборка;
		Строка.ДатаСледующейСборки = УточненияСборки.ДатаСледующейСборки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли