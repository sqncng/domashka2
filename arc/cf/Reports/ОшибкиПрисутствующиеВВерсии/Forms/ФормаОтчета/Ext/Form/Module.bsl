
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ВидимостьКомандВариантовОтчетов") Тогда
		ДоступенВыборВарианта = Параметры.ВидимостьКомандВариантовОтчетов;
	Иначе
		ДоступенВыборВарианта = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементов(Элементы, ВидОтчета, ДоступенВыборВарианта);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьДоступностьЭлементов(Элементы, ВидОтчета, ДоступенВыборВарианта);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойВариантаНаСервере(Настройки)
	
	ОтчетыПереопределяемый.УстановитьМакетОформленияВРежимеТакси(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОтчетаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементов(Элементы, ВидОтчета, ДоступенВыборВарианта);
	ОтчетТабличныйДокумент = Новый ТабличныйДокумент;
	ТекстHTML="";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	СформироватьОтчетСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Расширение = "htm";
	Диалог.Фильтр = "htm";
	
	Диалог.ПолноеИмяФайла = Диалог.Каталог + ИмяФайла;
	
	Если Диалог.Выбрать() Тогда
		
		ВыбранноеИмяФайла = Диалог.ПолноеИмяФайла;
		ОтчетТХТ.Записать(ВыбранноеИмяФайла);
		
		ТекстОповещения = НСтр("ru='Отчет сохранен в файл'");
		ПоказатьОповещениеПользователя(ТекстОповещения,,, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьОтчетСервер()	
	
	Если ВидОтчета = 0 Тогда
		СкомпоноватьРезультат();
	Иначе
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		
		МакетТХТ = ОтчетОбъект.ПолучитьМакет("МакетHTML");
		СхемаКомпоновки = ОтчетОбъект.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
		
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, Отчет.КомпоновщикНастроек.ПолучитьНастройки(),,,ТипГенератора);
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		
		ТаблицаОшибок = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		СформироватьHTML(ТаблицаОшибок, МакетТХТ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьHTML(ТаблицаОшибок, МакетТХТ)
	
	Проект = Справочники.Проекты.ПустаяСсылка();
	Версия = Справочники.ВерсииПроекта.ПустаяСсылка();
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПроект = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Проект"));
	Если ПараметрПроект <> Неопределено Тогда
		Проект = ПараметрПроект.Значение;
	КонецЕсли;
	
	ПараметрВерсия = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Версия"));
	Если ПараметрВерсия <> Неопределено Тогда
		Версия = ПараметрВерсия.Значение;
	КонецЕсли;
	
	ПараметрСборка = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Сборка"));
	Если ПараметрСборка <> Неопределено Тогда
		Сборка = ПараметрСборка.Значение;
	КонецЕсли;
	
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "ИмяКонфигурации, НаименованиеКонфигурации");
	
	ПроектИмя = РеквизитыПроекта.ИмяКонфигурации;
	ПроектНаименование = РеквизитыПроекта.НаименованиеКонфигурации;
	
	РеквизитыВерсии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Версия, "Код, ПубликуемыйНомерВерсии");
	РеквизитыСборки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Сборка, "Код, ПубликуемыйНомерСборки");
	
	ВерсияПроектаКод = ?(ЗначениеЗаполнено(РеквизитыВерсии.ПубликуемыйНомерВерсии),
		РеквизитыВерсии.ПубликуемыйНомерВерсии, РеквизитыВерсии.Код);
	
	СборкаВерсииКод = ?(ЗначениеЗаполнено(РеквизитыСборки.ПубликуемыйНомерСборки),
		РеквизитыСборки.ПубликуемыйНомерСборки, РеквизитыСборки.Код);
	
	ИмяФайла = ПроектИмя + ". Версия " + СборкаВерсииКод + ". Информация об ошибках";
	
	ОтчетТХТ.Очистить();
	
	ОбластьЗаголовокНачало = МакетТХТ.ПолучитьОбласть("ЗаголовокНачало");
	ОбластьЗаголовокНачало.УдалитьСтроку(7);
	ОбластьЗаголовокНачало.УдалитьСтроку(1);
	ОтчетТХТ.ДобавитьСтроку(ОбластьЗаголовокНачало.ПолучитьТекст());
	
	ОбластьЗаголовокКонец = МакетТХТ. ПолучитьОбласть("ЗаголовокКонец");
	ОбластьЗаголовокКонец.УдалитьСтроку(3);
	ОбластьЗаголовокКонец.УдалитьСтроку(1);
	ОтчетТХТ.ДобавитьСтроку(ОбластьЗаголовокКонец.ПолучитьТекст());
	
	ОбластьНачалоТела = МакетТХТ.ПолучитьОбласть("НачалоТела");
	ОбластьНачалоТела.УдалитьСтроку(10);
	ОбластьНачалоТела.УдалитьСтроку(1);
	ТекстОбласти = ОбластьНачалоТела.ПолучитьТекст();
	ТекстОбласти = СтрЗаменить(ТекстОбласти, "[НаименованиеПроекта]", ПроектНаименование);
	ТекстОбласти = СтрЗаменить(ТекстОбласти, "[НомерВерсии]"        , СборкаВерсииКод);
	ОтчетТХТ.ДобавитьСтроку(ТекстОбласти);
	
	ОбластьЗаголовокОшибки = МакетТХТ.ПолучитьОбласть("ЗаголовокОшибки");
	ОбластьОписаниеОшибки = МакетТХТ.ПолучитьОбласть("ОписаниеОшибки");
	
	ОбластьЗаголовокОшибки.УдалитьСтроку(12);
	ОбластьЗаголовокОшибки.УдалитьСтроку(1);
	
	ОбластьОписаниеОшибки.УдалитьСтроку(7);
	ОбластьОписаниеОшибки.УдалитьСтроку(1);
	
	Для Каждого Ошибка из ТаблицаОшибок Цикл
	
		СтрокаОшибки = СтрЗаменить(ОбластьЗаголовокОшибки.ПолучитьТекст(), "[КодОшибки]", Ошибка.Код);
		ОтчетТХТ.ДобавитьСтроку(СтрокаОшибки);
		
		СтрокаПубликации = СтрЗаменить(ОбластьОписаниеОшибки.ПолучитьТекст(), "[Раздел]", "Дата&nbsp;публикации");
		СтрокаПубликации = СтрЗаменить(СтрокаПубликации, "[Описание]", Формат(Ошибка.ДатаПервойПубликации,"ДЛФ=ДД"));
		ОтчетТХТ.ДобавитьСтроку(СтрокаПубликации);
		
		Если ЗначениеЗаполнено(Ошибка.ДатаПоследнегоИзменения) Тогда
			СтрокаПубликации = СтрЗаменить(ОбластьОписаниеОшибки.ПолучитьТекст(), "[Раздел]", "Дата&nbsp;последнего&nbsp;изменения");
			СтрокаПубликации = СтрЗаменить(СтрокаПубликации, "[Описание]", Формат(Ошибка.ДатаПоследнегоИзменения,"ДЛФ=ДД"));
			ОтчетТХТ.ДобавитьСтроку(СтрокаПубликации);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Ошибка.ПубликуемоеОписаниеОшибки) Тогда
			СтрокаПубликации = СтрЗаменить(ОбластьОписаниеОшибки.ПолучитьТекст(), "[Раздел]", "Описание");
			ТекстОписания = Ошибка.ПубликуемоеОписаниеОшибки;
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ВК, Символы.ПС);
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ПС + Символы.ПС, Символы.ПС);
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ПС, "<BR>");
			СтрокаПубликации = СтрЗаменить(СтрокаПубликации, "[Описание]", ТекстОписания);
			ОтчетТХТ.ДобавитьСтроку(СтрокаПубликации);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Ошибка.СпособИсправления) Тогда
			СтрокаПубликации = СтрЗаменить(ОбластьОписаниеОшибки.ПолучитьТекст(), "[Раздел]", "Способ&nbsp;исправления");
			ТекстОписания = Ошибка.СпособИсправления;
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ВК, Символы.ПС);
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ПС + Символы.ПС, Символы.ПС);
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ПС, "<BR>");
			СтрокаПубликации = СтрЗаменить(СтрокаПубликации, "[Описание]", ТекстОписания);
			ОтчетТХТ.ДобавитьСтроку(СтрокаПубликации);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Ошибка.СпособОбхода) Тогда
			СтрокаПубликации = СтрЗаменить(ОбластьОписаниеОшибки.ПолучитьТекст(), "[Раздел]", "Способ&nbsp;обхода");
			ТекстОписания = Ошибка.СпособОбхода;
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ВК, Символы.ПС);
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ПС + Символы.ПС, Символы.ПС);
			ТекстОписания = СтрЗаменить(ТекстОписания, Символы.ПС, "<BR>");
			СтрокаПубликации = СтрЗаменить(СтрокаПубликации, "[Описание]", ТекстОписания);
			ОтчетТХТ.ДобавитьСтроку(СтрокаПубликации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ошибка.ВерсияИсправления) ИЛИ ЗначениеЗаполнено(Ошибка.СборкаИсправления) Тогда
			Если ((Ошибка.Проверена И НЕ Ошибка.ИспользоватьЗакрытиеОшибок)
				ИЛИ (Ошибка.Закрыта И Ошибка.ИспользоватьЗакрытиеОшибок))
				И ЗначениеЗаполнено(Ошибка.СборкаИсправления) Тогда
				ПланируетсяИсправлено = "Исправлено&nbsp;в&nbsp;релизе";
				ВерсияИсправления = Ошибка.КодСборкиИсправления;
			Иначе
				ПланируетсяИсправлено = "Планируется&nbsp;исправить&nbsp;в&nbsp;релизе";
				ВерсияИсправления = Ошибка.КодВерсииИсправления;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ВерсияИсправления) Тогда
				СтрокаПубликации = СтрЗаменить(ОбластьОписаниеОшибки.ПолучитьТекст(), "[Раздел]", ПланируетсяИсправлено);
				СтрокаПубликации = СтрЗаменить(СтрокаПубликации, "[Описание]", ВерсияИсправления);
				ОтчетТХТ.ДобавитьСтроку(СтрокаПубликации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьОкончаниеТела = МакетТХТ.ПолучитьОбласть("ОкончаниеТела");
	ОбластьОкончаниеТела.УдалитьСтроку(7);
	ОбластьОкончаниеТела.УдалитьСтроку(1);
	ОтчетТХТ.ДобавитьСтроку(ОбластьОкончаниеТела.ПолучитьТекст());
	
	ТекстHTML = ОтчетТХТ.ПолучитьТекст();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементов(Элементы, ВидОтчета, ДоступенВыборВарианта)
	
	Если ВидОтчета=0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ТабличныйДокумент;
		Элементы.СохранитьВФайл.Доступность = Ложь;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.HTMLДокумент;
		Элементы.СохранитьВФайл.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ЗагрузитьВариант.Доступность = ДоступенВыборВарианта;
	
КонецПроцедуры

#КонецОбласти
