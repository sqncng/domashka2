
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьДанныеФормы();
	ОбработатьПереданныеПараметры();
	ЗагрузитьСохраненныеВариантыПользователя();
	СформироватьПредставлениеОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнвертироватьФлагиНастроек(ЭтотОбъект);
	
	Если СформироватьПриОткрытии Тогда
		
		Если Не ЗначениеЗаполнено(ПланЗанятости) 
			Или Не ЗначениеЗаполнено(ПериодОтчета) Тогда
			
			ОпределитьПараметрыФормированияПоУмолчанию();
			
		КонецЕсли;
		
		СформироватьОтчетНаКлиенте();
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)

	Если Параметры.КлючНазначенияИспользования = "ИзРабочегоМестаПланЗанятостиОтСотрудников"
		Или Параметры.КлючНазначенияИспользования = "ИзРабочегоМестаПланЗанятостиОтТехПроектов" Тогда
		
		Настройки.Удалить("ПланЗанятости");
		
		СохраненныйПериодОтчета = Настройки.Получить("ПериодОтчета");
		Если СохраненныйПериодОтчета <> Неопределено
			И СохраненныйПериодОтчета.ДатаНачала <> Дата(1,1,1) Тогда
			ПериодОтчета.ДатаНачала = СохраненныйПериодОтчета.ДатаНачала;
		КонецЕсли;
		
		Настройки.Удалить("ПериодОтчета");
		
	Иначе
		
		ПланЗанятости = Настройки.Получить("ПланЗанятости");
		Настройки.Удалить("ПланЗанятости");
		
		ПериодОтчета = Настройки.Получить("ПериодОтчета");
		Настройки.Удалить("ПериодОтчета");
		
	КонецЕсли; 
	
	ДопустимыйПроцентОтклонения = Настройки.Получить("ДопустимыйПроцентОтклонения");
	Настройки.Удалить("ДопустимыйПроцентОтклонения");
	
	ТолькоСОтклонениемМеньшеНорматива = Настройки.Получить("ТолькоСОтклонениемМеньшеНорматива");
	Настройки.Удалить("ТолькоСОтклонениемМеньшеНорматива");
	
	ТолькоСОтклонениемПревышениеНорматива = Настройки.Получить("ТолькоСОтклонениемПревышениеНорматива");
	Настройки.Удалить("ТолькоСОтклонениемПревышениеНорматива");
	
	ТолькоСОтклонениемРабочиеПланы = Настройки.Получить("ТолькоСОтклонениемРабочиеПланы");
	Настройки.Удалить("ТолькоСОтклонениемРабочиеПланы");
	
	ТолькоСОтклонениемФакт = Настройки.Получить("ТолькоСОтклонениемФакт");
	Настройки.Удалить("ТолькоСОтклонениемФакт");
	
	НеВыделятьДопустимыеДаты = Настройки.Получить("НеВыделятьДопустимыеДаты");
	Настройки.Удалить("НеВыделятьДопустимыеДаты");
	
	НеВыделятьНераспределено = Настройки.Получить("НеВыделятьНераспределено");
	Настройки.Удалить("НеВыделятьНераспределено");
	
	НеВыделятьРезерв = Настройки.Получить("НеВыделятьРезерв");
	Настройки.Удалить("НеВыделятьРезерв");
	
	НеВыделятьФактМинусПЗ = Настройки.Получить("НеВыделятьФактМинусПЗ");
	Настройки.Удалить("НеВыделятьФактМинусПЗ"); 
	
	НеВыделятьСроки = Настройки.Получить("НеВыделятьСроки");
	Настройки.Удалить("НеВыделятьСроки"); 
	
	НеВыводитьПроект = Настройки.Получить("НеВыводитьПроект");
	Настройки.Удалить("НеВыводитьПроект");
	
	НеВыводитьВерсию = Настройки.Получить("НеВыводитьВерсию");
	Настройки.Удалить("НеВыводитьВерсию");
	
	НеВыводитьСроки = Настройки.Получить("НеВыводитьСроки");
	Настройки.Удалить("НеВыводитьСроки");
	
	НеВыводитьФактВПериодах = Настройки.Получить("НеВыводитьФактВПериодах");
	Настройки.Удалить("НеВыводитьФактВПериодах");
	
	НеВыводитьРПВПериодах = Настройки.Получить("НеВыводитьРПВПериодах");
	Настройки.Удалить("НеВыводитьРПВПериодах");
	
	СкрыватьПериодыНеСоотствующиеОтбору = Настройки.Получить("СкрыватьПериодыНеСоотствующиеОтбору");
	Настройки.Удалить("СкрыватьПериодыНеСоотствующиеОтбору");
	
	СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору = Настройки.Получить("СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору");
	Настройки.Удалить("СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору");
	
	СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору = Настройки.Получить("СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору");
	Настройки.Удалить("СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору");
	
	АбсолютноеДопустимоеОтлонение = Настройки.Получить("АбсолютноеДопустимоеОтлонение");
	Настройки.Удалить("АбсолютноеДопустимоеОтлонение");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = ПериодОтчета;
	Диалог.Показать(ОбработчикОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	СформироватьОтчетНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьНастройки(Команда)
	
	ОчиститьСообщения();
	
	ПостфиксКоманды = ПостфиксКомандыБезИмени(Команда.Имя, "ЗагрузитьНастройки_");
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИмяКомандыЗагрузить", Команда.Имя);
	
	НайденныеСтроки = СохраненныеВарианты.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		РезультатЗагрузки = РезультатЗагрузкиВариантаОтчетаНаСервере(НайденныеСтроки[0].Идентификатор);
	КонецЕсли;
	
	Если РезультатЗагрузки.Успешно Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗагрузки.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьНастройки(Команда)
	
	ОчиститьСообщения();
	
	ПостфиксКоманды = ПостфиксКомандыБезИмени(Команда.Имя, "УдалитьНастройки_");
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИмяКомандыУдалить", Команда.Имя);
	
	НайденныеСтроки = СохраненныеВарианты.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 1 Тогда
		РезультатУдаления = РезультатУдаленияВариантаОтчетаНаСервере(НайденныеСтроки[0].Идентификатор);
	КонецЕсли;
	
	Если РезультатУдаления.Успешно Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Удаление варианта отчета'"), , НСтр("ru = 'Вариант отчета успешно удален'"));
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатУдаления.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьНастройки(Команда)
	
	ПостфиксКоманды = ПостфиксКомандыБезИмени(Команда.Имя, "СохранитьНастройки_");
	
	Если ПостфиксКоманды = "Новый" Тогда
		
		ПослеВводаНаименованияВарианта = Новый ОписаниеОповещения("ПослеВводаНаименованияВарианта", ЭтотОбъект);
		ПоказатьВводСтроки(ПослеВводаНаименованияВарианта, , НСтр("ru = 'Наименование варианта отчета'"), 100, Ложь);
		
	Иначе
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяКомандыСохранить", Команда.Имя);
		
		НайденныеСтроки = СохраненныеВарианты.НайтиСтроки(ПараметрыПоиска);
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			СохранитьВариантОтчетаНаСервере(НайденныеСтроки[0].Представление, НайденныеСтроки[0].Идентификатор)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура ПланЗанятостиПриИзменении(Элемент)
	
	ПриИзмененииВидаПланаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланЗанятостиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыВидовПланов.Действует"));
	СтруктураБыстрогоОтбора.Вставить("ПоказыватьВидыПланов", "УчастникИлиВладелец");
	СтруктураБыстрогоОтбора.Вставить("ТипПлана", ПредопределенноеЗначение("Перечисление.ТипыПланов.Занятости"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОповещениеПослеВыбораПлана = Новый ОписаниеОповещения("ПослеВыбораПланаЗанятости", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыПланов.ФормаВыбора",
	             ПараметрыФормы,
	             ЭтотОбъект,,,, 
	             ОповещениеПослеВыбораПлана, 
	             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПодборТехПроектов" Тогда
		
		ПараметрыФормы = ПланированиеКлиентСервер.НовыйПараметрыОткрытияФормыОтбораСКД();
		ПараметрыФормы.ИмяСхемыКомпоновкиДанных          = "ОтборПоТехническимПроектам";
		ПараметрыФормы.НастройкиКомпоновки               = НастройкиОтбора;
		ПараметрыФормы.УникальныйИдентификаторВладельца  = УникальныйИдентификатор;
		
		ОповещениеПослеЗакрытияПодбора = Новый ОписаниеОповещения("ПослеЗакрытияОтбораТехническиеПроекты", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ОтборПоСКД", ПараметрыФормы, ЭтотОбъект,,,,
		             ОповещениеПослеЗакрытияПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПодборСотрудников" Тогда
		
		ПараметрыФормы = ПланированиеКлиентСервер.НовыйПараметрыОткрытияФормыОтбораСКД();
		ПараметрыФормы.ИмяСхемыКомпоновкиДанных          = "ОтборПоСотрудникам";
		ПараметрыФормы.НастройкиКомпоновки               = НастройкиОтбора;
		ПараметрыФормы.УникальныйИдентификаторВладельца  = УникальныйИдентификатор;
		
		ОповещениеПослеЗакрытияПодбора = Новый ОписаниеОповещения("ПослеЗакрытияВыбораУчастников", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.Планирование.Форма.ОтборПоСКД", ПараметрыФормы, ЭтотОбъект,,,,
		             ОповещениеПослеЗакрытияПодбора,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопустимыйПроцентОтклоненияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОтклонениемРабочиеПланыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОтклонениемФактПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры 

&НаКлиенте
Процедура ТолькоСОтклонениемПревышениеНормативаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСОтклонениемМеньшеНормативаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьДопустимыеДатыПриИзменении(Элемент)
	
	НеВыделятьДопустимыеДаты = Не ВыделятьДопустимыеДаты;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьСрокиПриИзменении(Элемент)
	
	НеВыделятьСроки = Не ВыделятьСроки;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьРезервПриИзменении(Элемент)
	
	НеВыделятьРезерв = Не ВыделятьРезерв;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьНераспределеноПриИзменении(Элемент)
	
	НеВыделятьНераспределено = Не ВыделятьНераспределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделятьФактМинусПЗПриИзменении(Элемент)
	
	НеВыделятьФактМинусПЗ = Не ВыделятьФактМинусПЗ;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьПроектПриИзменении(Элемент)
	
	НеВыводитьПроект = Не ВыводитьПроект;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВерсиюПриИзменении(Элемент)
	
	НеВыводитьВерсию = Не ВыводитьВерсию;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьСрокиПриИзменении(Элемент)
	
	НеВыводитьСроки = Не ВыводитьСроки;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьРПВПериодахПриИзменении(Элемент)
	
	НеВыводитьРПВПериодах = Не ВыводитьРПВПериодах;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьФактВПериодахПриИзменении(Элемент)
	
	НеВыводитьФактВПериодах = Не ВыводитьФактВПериодах;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры 

&НаКлиенте
Процедура СкрыватьПериодыНеСоотствующиеОтборуПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");

КонецПроцедуры

&НаКлиенте
Процедура СкрыватьСтрокиССотрудникамиНеСоответствующимиОтборуПриИзменении(Элемент) 
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьСтрокиСЭтапамиНеСоответствующимиОтборуПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФОРМИРОВАНИЕОТЧЕТА");
	
	ПараметрыФормирования = ПланированиеКлиентСервер.НовыйПараметрыФормированияОтчетаКонтрольПланирования();
	
	ПараметрыФормирования.ВариантГруппировки                                  = ВариантГруппировки;
	ПараметрыФормирования.ПланЗанятости                                       = ПланЗанятости;
	ПараметрыФормирования.ПериодОтчета                                        = ПериодОтчета;
	ПараметрыФормирования.ПредставлениеОтбора                                 = ПредставлениеОтбораПолное;
	ПараметрыФормирования.ОтборПоУчастникам                                   = ОтборПоУчастникамВидаПлана;
	ПараметрыФормирования.ОтборПоТехническимПроектам                          = ОтборПоТехническимПроектам;
	ПараметрыФормирования.ДопустимыйПроцентОтклонения                         = ДопустимыйПроцентОтклонения;
	ПараметрыФормирования.АбсолютноеДопустимоеОтлонение                       = АбсолютноеДопустимоеОтлонение;
	ПараметрыФормирования.ТолькоСОтклонениемРабочиеПланы                      = ТолькоСОтклонениемРабочиеПланы;
	ПараметрыФормирования.ТолькоСОтклонениемФакт                              = ТолькоСОтклонениемФакт;
	ПараметрыФормирования.ТолькоСОтклонениемМеньшеНорматива                   = ТолькоСОтклонениемМеньшеНорматива;
	ПараметрыФормирования.ТолькоСОтклонениемПревышениеНорматива               = ТолькоСОтклонениемПревышениеНорматива;
	ПараметрыФормирования.НеВыделятьДопустимыеДаты                            = НеВыделятьДопустимыеДаты;
	ПараметрыФормирования.НеВыделятьНераспределено                            = НеВыделятьНераспределено;
	ПараметрыФормирования.НеВыделятьРезерв                                    = НеВыделятьРезерв;
	ПараметрыФормирования.НеВыделятьФактМинусПЗ                               = НеВыделятьФактМинусПЗ;
	ПараметрыФормирования.НеВыделятьСроки                                     = НеВыделятьСроки;
	ПараметрыФормирования.НеВыводитьПроект                                    = НеВыводитьПроект;
	ПараметрыФормирования.НеВыводитьВерсию                                    = НеВыводитьВерсию;
	ПараметрыФормирования.НеВыводитьСроки                                     = НеВыводитьСроки;
	ПараметрыФормирования.НеВыводитьРПВПериодах                               = НеВыводитьРПВПериодах;
	ПараметрыФормирования.НеВыводитьФактВПериодах                             = НеВыводитьФактВПериодах;
	ПараметрыФормирования.СкрыватьПериодыНеСоотствующиеОтбору                 = СкрыватьПериодыНеСоотствующиеОтбору;
	ПараметрыФормирования.СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору = СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору;
	ПараметрыФормирования.СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору      = СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору; 
	
	ДлительнаяОперация = ДлительнаяОперацияФормированиеОтчета(ПараметрыФормирования, УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ВывестиПолученныеДанныеВТабличныйДокумент(ДлительнаяОперация, ДополнительныеПараметры);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФОРМИРОВАНИЕОТЧЕТА");
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ФормированиеОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПолученныеДанныеВТабличныйДокумент(Результат, ДополнительныеПараметры)
	
	Если Не ЭтоАдресВременногоХранилища(Результат.АдресРезультата) Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатФормированияОтчета = ДанныеВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатФормированияОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатФормированияОтчета.Успешно Тогда
		ТабличныйДокументОтчета = РезультатФормированияОтчета.ТабличныйДокумент;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕИСПОЛЬЗОВАТЬ");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
		Для Каждого СообщениеОбОшибке Из РезультатФормированияОтчета.СообщенияОбОшибках Цикл
			 ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке.ТекстОшибки , , СообщениеОбОшибке.ИмяРеквизита);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеВременногоХранилища(АдресВременногоХранилища)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецФункции

&НаКлиенте
Процедура ФормированиеОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		ВывестиПолученныеДанныеВТабличныйДокумент(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияФормированиеОтчета(ПараметрыФормирования, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПараметрыФормирования", ПараметрыФормирования);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование отчета ""Контроль планирования""'");
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Отчеты.КонтрольПланирования.СформироватьОтчет",
		                                                    ПараметрыПроцедуры, ПараметрыВыполнения);
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если Не ТипЗнч(РезультатВыбора) = Тип("СтандартныйПериод") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПериодОтчета, РезультатВыбора);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры()

	Если ЗначениеЗаполнено(Параметры.ВариантГруппировки) Тогда
		ВариантГруппировки = Параметры.ВариантГруппировки;
	Иначе
		ВариантГруппировки = "ОтСотрудников";
	КонецЕсли;
	
	ПланЗанятости = Параметры.ПланЗанятости;
	ДанныеВидаПлана = Справочники.ВидыПланов.ДанныеВидаПлана(ПланЗанятости); 
	Элементы.ДекорацияЕдИзмеренияВидаРесурса.Заголовок = ДанныеВидаПлана.ЕдиницаИзмеренияВидРесурса;
	
	ЗаполнитьЗначенияСвойств(ПериодОтчета, Параметры.ПериодОтчета);
	ОтборПоУчастникамВидаПараметры      = Параметры.ОтборПоУчастникам.Скопировать();
	ОтборПоУчастникамВидаПараметры.ЗаполнитьПометки(Истина);
	ОтборПоТехническимПроектамПараметры = Параметры.ОтборПоТехническимПроектам;
	ОтборПоТехническимПроектамПараметры.ЗаполнитьПометки(Истина);
	
	Если ВариантГруппировки = "ОтСотрудников" Тогда
		
		ПредставлениеОтбораПолное = Планирование.УстановитьНастройкиОтбораСКДПоСписку(
			ЭтотОбъект,
			ОтборПоУчастникамВидаПлана,
			ОтборПоУчастникамВидаПараметры,
			"НастройкиОтбора",
			"ОтборПоСотрудникам", 
			"ПредставлениеОтбора", 
			"ОткрытьПодборСотрудников");
		
	Иначе
		
		ПредставлениеОтбораПолное = Планирование.УстановитьНастройкиОтбораСКДПоСписку(
			ЭтотОбъект,
			ОтборПоТехническимПроектам,
			ОтборПоТехническимПроектамПараметры,
			"НастройкиОтбора",
			"ОтборПоТехническимПроектам", 
			"ПредставлениеОтбора", 
			"ОткрытьПодборТехПроектов");
		
	КонецЕсли;
	
	СформироватьПриОткрытии    = Параметры.СформироватьПриОткрытии;
	
	ТекстПояснениеОтклонение = НСтр("ru = 'Применяется к следующим показателям отчета:
	                                 |- РП (анализируется отклонение запланированного в рабочем  плане, от плана занятости)
	                                 |- Факт (анализируется отклонение фактических трудозатрат от плана занятости)'");
	
	Если ВариантГруппировки = "ОтТехПроектов" Тогда 
		
		Элементы.ТолькоСОтклонениемМеньшеНорматива.Видимость              = Ложь;
		Элементы.ТолькоСОтклонениемПревышениеНорматива.Видимость          = Ложь;
		Элементы.СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору.Видимость = Ложь;
		
	Иначе 
		
		Элементы.СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору.Видимость = Ложь;
		
		ДополнительныйТекстПояснениеОтклонение = НСтр("ru = '
		                                              |- Превышение норматива рабочего времени (относительно заданного в виде плана)
		                                              |- Меньше норматива рабочего времени (относительно заданного в виде плана)'");
		
		ТекстПояснениеОтклонение = ТекстПояснениеОтклонение + ДополнительныйТекстПояснениеОтклонение;
		
	КонецЕсли;
	
	ТекстПояснениеОтклонение = ТекстПояснениеОтклонение + 
	          НСтр("ru = '
	          |Если отклонение не превышает допустимый процент, то:
	          |- К данным показателям не будет применяться условное оформление
	          |- Они не будут учитываться при установке отборов.'"); 
	
	ТекстПояснениеОтклонение = Новый ФорматированнаяСтрока(ТекстПояснениеОтклонение, , ЦветаСтиля.ПоясняющийТекст);
	Элементы.ДекорацияПояснениеПроцентОтклонения.Заголовок = ТекстПояснениеОтклонение; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПланаЗанятости(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПланЗанятости = Результат;
		
	ПриИзмененииВидаПланаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаПланаНаКлиенте()

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

	Если ВариантГруппировки = "ОтСотрудников" Тогда
		
		СформироватьПредставлениеОтбора();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы()
	
	ЦветТекстаГиперссылки = ЦветаСтиля.ЦветГиперссылкиЗадачи;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеОтбора()

	Если ВариантГруппировки = "ОтСотрудников" Тогда
		
		Элементы.ГруппаОтборыПоОтклонениям.Заголовок = НСтр("ru = 'Выводить в отчет только сотрудников с превышением отклонения по показателю:'");
		
	ИначеЕсли ВариантГруппировки = "ОтТехПроектов" Тогда
		
		Элементы.ГруппаОтборыПоОтклонениям.Заголовок = НСтр("ru = 'Выводить в отчет только этапы технических проектов с превышением отклонения по показателю:'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияОтбораТехническиеПроекты(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
	РезультатПолученияОтбораПоСКД = РезультатПолученияОтбораПоСКД(Результат, "НастройкиОтбора");
	ПредставлениеОтбораПолное = РезультатПолученияОтбораПоСКД.ПредставлениеОтбораПолное;
	
	ПланированиеКлиентСервер.ВывестиПредставлениеОткрытьПодбор(ЭтотОбъект, "ПредставлениеОтбора", "ОткрытьПодборТехПроектов", РезультатПолученияОтбораПоСКД.ПредставлениеОтбораСокр);
	ОтборПоТехническимПроектам = РезультатПолученияОтбораПоСКД.СписокОтбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВыбораУчастников(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НЕАКТУАЛЬНОСТЬ");
	
	РезультатПолученияОтбораПоСКД = РезультатПолученияОтбораПоСКД(Результат, "НастройкиОтбора");
	ПредставлениеОтбораПолное = РезультатПолученияОтбораПоСКД.ПредставлениеОтбораПолное;
	
	ПланированиеКлиентСервер.ВывестиПредставлениеОткрытьПодбор(ЭтотОбъект, "ПредставлениеОтбора", "ОткрытьПодборСотрудников", РезультатПолученияОтбораПоСКД.ПредставлениеОтбораСокр);
	ОтборПоУчастникамВидаПлана = РезультатПолученияОтбораПоСКД.СписокОтбора;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПараметрыФормированияПоУмолчанию()

	Если Не ЗначениеЗаполнено(ПланЗанятости) Тогда
		
		ПланЗанятости = Справочники.ВидыПланов.ВидПланаПользователяПоУмолчанию(Пользователи.ТекущийПользователь(),
		                                                                       Перечисления.ТипыПланов.Занятости);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПланЗанятости)
		И Не ЗначениеЗаполнено(ПериодОтчета) Тогда
		
		ДанныеПланаЗанятости = Справочники.ВидыПланов.ДанныеВидаПлана(ПланЗанятости);
		
		ПараметрыПолученияПлановПоПериоду = Справочники.ВидыПланов.НовыйПараметрыПолученияДанныхПлановПоПериоду();
		ПараметрыПолученияПлановПоПериоду.ВидПлана              = ПланЗанятости;
		ПараметрыПолученияПлановПоПериоду.ДатаНачала            = ТекущаяДатаСеанса();
		ПараметрыПолученияПлановПоПериоду.НастройкиПланирования = ДанныеПланаЗанятости.ВсеНастройкиПланирования[0];
		ПараметрыПолученияПлановПоПериоду.КоличествоПериодов    = 5;
		
		ТаблицаПланов = Справочники.ВидыПланов.ДанныеПлановПоЗаданномуПериоду(ПараметрыПолученияПлановПоПериоду);
		
		ПериодОтчета = Справочники.ВидыПланов.ПериодПлановПоТаблицеПланов(ТаблицаПланов);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РезультатПолученияОтбораПоСКД(ДанныеСхемыКомпоновки, ИмяРеквизитаСохраняемыеНастройки)
	
	Возврат Планирование.РезультатПолученияОтбораПоСКД(ЭтотОбъект, ПланЗанятости, ДанныеСхемыКомпоновки, ИмяРеквизитаСохраняемыеНастройки);
	
КонецФункции

#Область СохранениеЗагрузкаНастроек

 &НаКлиенте
Процедура ПослеВводаНаименованияВарианта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена
		Или ПустаяСтрока(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьВариантОтчетаНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьВариантОтчетаНаСервере(Результат, ИдентификаторВарианта = Неопределено) 
	
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтчетКонтрольПланирования", "ВариантыОтчетаПользователей", Неопределено);
	
	Если СохраненныеНастройки = Неопределено Тогда
		
		СохраненныеНастройки = Новый Соответствие;
		
	КонецЕсли;
	
	НастройкаОтчета = СохраненныеНастройки.Получить(ИдентификаторВарианта);
	Если НастройкаОтчета = Неопределено Тогда
		
		ИдентификаторВарианта = Новый УникальныйИдентификатор();
		
	КонецЕсли;
	
	ДанныеВарианта = ДанныеВариантаОтчета();
	ДанныеВарианта.Вставить("Представление", Результат);
	СохраненныеНастройки.Вставить(ИдентификаторВарианта, ДанныеВарианта);
	
	СохранитьВариантыОтчетаПользователя(СохраненныеНастройки);
	ОчиститьРанееСозданныеКоманды();
	ЗагрузитьСохраненныеВариантыПользователя();
	
КонецПроцедуры

&НаСервере
Функция ДанныеВариантаОтчета()
	
	ДанныеВариантаОтчета = Новый Структура;
	ДанныеВариантаОтчета.Вставить("ВариантГруппировки",                                  ВариантГруппировки);
	ДанныеВариантаОтчета.Вставить("ДопустимыйПроцентОтклонения",                         ДопустимыйПроцентОтклонения);
	ДанныеВариантаОтчета.Вставить("НеВыводитьВерсию",                                    НеВыводитьВерсию);
	ДанныеВариантаОтчета.Вставить("НеВыводитьПроект",                                    НеВыводитьПроект);
	ДанныеВариантаОтчета.Вставить("НеВыводитьРПВПериодах",                               НеВыводитьРПВПериодах);
	ДанныеВариантаОтчета.Вставить("НеВыводитьСроки",                                     НеВыводитьСроки);
	ДанныеВариантаОтчета.Вставить("НеВыводитьФактВПериодах",                             НеВыводитьФактВПериодах);
	ДанныеВариантаОтчета.Вставить("НеВыделятьДопустимыеДаты",                            НеВыделятьДопустимыеДаты);
	ДанныеВариантаОтчета.Вставить("НеВыделятьНераспределено",                            НеВыделятьНераспределено);
	ДанныеВариантаОтчета.Вставить("НеВыделятьРезерв",                                    НеВыделятьРезерв);
	ДанныеВариантаОтчета.Вставить("НеВыделятьСроки",                                     НеВыделятьСроки);
	ДанныеВариантаОтчета.Вставить("НеВыделятьФактМинусПЗ",                               НеВыделятьФактМинусПЗ);
	ДанныеВариантаОтчета.Вставить("СкрыватьПериодыНеСоотствующиеОтбору",                 СкрыватьПериодыНеСоотствующиеОтбору);
	ДанныеВариантаОтчета.Вставить("СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору", СкрыватьСтрокиССотрудникамиНеСоответствующимиОтбору);
	ДанныеВариантаОтчета.Вставить("СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору",      СкрыватьСтрокиСЭтапамиНеСоответствующимиОтбору);
	ДанныеВариантаОтчета.Вставить("ТолькоСОтклонениемМеньшеНорматива",                   ТолькоСОтклонениемМеньшеНорматива);
	ДанныеВариантаОтчета.Вставить("ТолькоСОтклонениемПревышениеНорматива",               ТолькоСОтклонениемПревышениеНорматива);
	ДанныеВариантаОтчета.Вставить("ТолькоСОтклонениемРабочиеПланы",                      ТолькоСОтклонениемРабочиеПланы);
	ДанныеВариантаОтчета.Вставить("ТолькоСОтклонениемФакт",                              ТолькоСОтклонениемФакт);
	ДанныеВариантаОтчета.Вставить("АбсолютноеДопустимоеОтлонение",                       АбсолютноеДопустимоеОтлонение);
	
	
	Возврат ДанныеВариантаОтчета;
	
КонецФункции

Процедура ЗагрузитьСохраненныеВариантыПользователя()
	
	СохраненныеВарианты.Очистить();
	
	СохраненныеВариантыИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтчетКонтрольПланирования", "ВариантыОтчетаПользователей", Неопределено);
	
	Если СохраненныеВариантыИзХранилища <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СохраненныеВариантыИзХранилища Цикл
			
			Если Не КлючИЗначение.Значение.ВариантГруппировки = ВариантГруппировки Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СохраненныеВарианты.Добавить();
			НоваяСтрока.Идентификатор = КлючИЗначение.Ключ;
			Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(КлючИЗначение.Значение, "Представление")
				Или ПустаяСтрока(КлючИЗначение.Значение.Представление) Тогда 
				НоваяСтрока.Представление = НСтр("ru = 'Без названия'");
			Иначе
				НоваяСтрока.Представление = КлючИЗначение.Значение.Представление;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	СохраненныеВарианты.Сортировать("Представление");
	
	СформироватьКомандыНастроек();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКомандыНастроек()

	ОчиститьРанееСозданныеКоманды();
	
	ИндексКоманды = 0;
	
	Для Каждого СтрокаТаблицы Из СохраненныеВарианты Цикл
		
		ГруппаРазмещения = Элементы.ГруппаСохранить;
	
		НоваяКоманда = Команды.Добавить("СохранитьНастройки_" + Строка(ИндексКоманды));
		НоваяКоманда.Действие = "Подключаемый_СохранитьНастройки";
		
		КнопкаПодменю = Элементы.Добавить("СохранитьНастройки_" + Строка(ИндексКоманды),
		                                   Тип("КнопкаФормы"),
		                                   ГруппаРазмещения);
		
		КнопкаПодменю.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаПодменю.ИмяКоманды = НоваяКоманда.Имя;
		КнопкаПодменю.Заголовок  = СтрокаТаблицы.Представление;
		
		СтрокаТаблицы.ИмяКомандыСохранить = НоваяКоманда.Имя;
		
		ГруппаРазмещения = Элементы.ГруппаЗагрузить;
	
		НоваяКоманда = Команды.Добавить("ЗагрузитьНастройки_" + Строка(ИндексКоманды));
		НоваяКоманда.Действие = "Подключаемый_ЗагрузитьНастройки";
		
		КнопкаПодменю = Элементы.Добавить("ЗагрузитьНастройки_" + Строка(ИндексКоманды),
		                                   Тип("КнопкаФормы"),
		                                   ГруппаРазмещения);
		
		КнопкаПодменю.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаПодменю.ИмяКоманды = НоваяКоманда.Имя;
		КнопкаПодменю.Заголовок  = СтрокаТаблицы.Представление;
		
		СтрокаТаблицы.ИмяКомандыЗагрузить = НоваяКоманда.Имя;
		
		ГруппаРазмещения = Элементы.ГруппаУдалить;
	
		НоваяКоманда = Команды.Добавить("УдалитьНастройки_" + Строка(ИндексКоманды));
		НоваяКоманда.Действие = "Подключаемый_УдалитьНастройки";
		
		КнопкаПодменю = Элементы.Добавить("УдалитьНастройки_" + Строка(ИндексКоманды),
		                                   Тип("КнопкаФормы"),
		                                   ГруппаРазмещения);
		
		КнопкаПодменю.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаПодменю.ИмяКоманды = НоваяКоманда.Имя;
		КнопкаПодменю.Заголовок  = СтрокаТаблицы.Представление;
		
		СтрокаТаблицы.ИмяКомандыУдалить = НоваяКоманда.Имя;
		
		ИндексКоманды = ИндексКоманды + 1;
		
	КонецЦикла;
	
	ГруппаРазмещения = Элементы.ГруппаСохранить;
	
	НоваяКоманда = Команды.Добавить("СохранитьНастройки_Новый");
	НоваяКоманда.Действие = "Подключаемый_СохранитьНастройки";
	
	КнопкаПодменю = Элементы.Добавить("СохранитьНастройки_Новый",
	                                  Тип("КнопкаФормы"),
	                                  ГруппаРазмещения);
	
	КнопкаПодменю.Вид                   = ВидКнопкиФормы.КнопкаКоманднойПанели;
	КнопкаПодменю.ИмяКоманды            = НоваяКоманда.Имя;
	КнопкаПодменю.Картинка              = БиблиотекаКартинок.Добавлено;
	КнопкаПодменю.Заголовок             = НСтр("ru = 'Новый вариант...'");

КонецПроцедуры

&НаСервере
Процедура ОчиститьРанееСозданныеКоманды()

	Для Каждого СтрокаТаблицы Из СохраненныеВарианты Цикл
		
		НайденнаяКоманда = Команды.Найти(СтрокаТаблицы.ИмяКомандыСохранить);
		Если НайденнаяКоманда <> Неопределено Тогда
			Команды.Удалить(НайденнаяКоманда);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти(СтрокаТаблицы.ИмяКомандыСохранить);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
		НайденнаяКоманда = Команды.Найти(СтрокаТаблицы.ИмяКомандыЗагрузить);
		Если НайденнаяКоманда <> Неопределено Тогда
			Команды.Удалить(НайденнаяКоманда);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти(СтрокаТаблицы.ИмяКомандыЗагрузить);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли; 
		
		НайденнаяКоманда = Команды.Найти(СтрокаТаблицы.ИмяКомандыУдалить);
		Если НайденнаяКоманда <> Неопределено Тогда
			Команды.Удалить(НайденнаяКоманда);
		КонецЕсли;
		
		НайденныйЭлемент = Элементы.Найти(СтрокаТаблицы.ИмяКомандыУдалить);
		Если НайденныйЭлемент <> Неопределено Тогда
			Элементы.Удалить(НайденныйЭлемент);
		КонецЕсли;
		
	КонецЦикла;
	
	НайденнаяКоманда = Команды.Найти("СохранитьНастройки_Новый");
	Если НайденнаяКоманда <> Неопределено Тогда
		Команды.Удалить(НайденнаяКоманда);
	КонецЕсли;
	
	НайденныйЭлемент = Элементы.Найти("СохранитьНастройки_Новый");
	Если НайденныйЭлемент <> Неопределено Тогда
		Элементы.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатЗагрузкиВариантаОтчетаНаСервере(Идентификатор)
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Успешно",          Ложь);
	РезультатЗагрузки.Вставить("СообщениеОбОшибке", "");
	
	СохраненныеВариантыИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтчетКонтрольПланирования", "ВариантыОтчетаПользователей", Неопределено);
	
	Если СохраненныеВариантыИзХранилища <> Неопределено Тогда
		
		ЗагружаемыйВариант = СохраненныеВариантыИзХранилища.Получить(Идентификатор); 
		
		Если ЗагружаемыйВариант <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗагружаемыйВариант, , "ВариантГруппировки");
			ИнвертироватьФлагиНастроек(ЭтотОбъект);
			
			РезультатЗагрузки.Успешно = Истина;
			
		Иначе
			
			РезультатЗагрузки.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить сохраненный вариант отчета'");
			
		КонецЕсли; 
		
	Иначе
		
		РезультатЗагрузки.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить сохраненные настройки отчета'");
		
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

&НаСервере
Функция РезультатУдаленияВариантаОтчетаНаСервере(Идентификатор)
	
	РезультатУдаления = Новый Структура;
	РезультатУдаления.Вставить("Успешно",          Ложь);
	РезультатУдаления.Вставить("СообщениеОбОшибке", "");
	
	СохраненныеВариантыИзХранилища = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОтчетКонтрольПланирования", "ВариантыОтчетаПользователей", Неопределено);
	
	Если СохраненныеВариантыИзХранилища <> Неопределено Тогда
		
		УдаляемыйВариант = СохраненныеВариантыИзХранилища.Получить(Идентификатор); 
		
		Если УдаляемыйВариант <> Неопределено Тогда
			
			СохраненныеВариантыИзХранилища.Удалить(Идентификатор);
			ОчиститьРанееСозданныеКоманды();
			СохранитьВариантыОтчетаПользователя(СохраненныеВариантыИзХранилища);
			ЗагрузитьСохраненныеВариантыПользователя(); 
			РезультатУдаления.Успешно = Истина;
			
		Иначе
			
			РезультатУдаления.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить сохраненный вариант отчета'");
			
		КонецЕсли; 
		
	Иначе
		
		РезультатУдаления.СообщениеОбОшибке = НСтр("ru = 'Не удалось получить сохраненные настройки отчета'");
		
	КонецЕсли;
	
	Возврат РезультатУдаления;
	
КонецФункции

&НаКлиенте
Функция ПостфиксКомандыБезИмени(ИмяКоманды, Префикс)

	Возврат Прав(ИмяКоманды, СтрДлина(ИмяКоманды) - СтрДлина(Префикс));
	
КонецФункции

&НаСервере
Процедура СохранитьВариантыОтчетаПользователя(СохраненныеНастройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОтчетКонтрольПланирования", "ВариантыОтчетаПользователей", СохраненныеНастройки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнвертироватьФлагиНастроек(Форма);
	
	Форма.ВыводитьВерсию         = НЕ Форма.НеВыводитьВерсию;
	Форма.ВыводитьПроект         = НЕ Форма.НеВыводитьПроект;
	Форма.ВыводитьРПВПериодах    = НЕ Форма.НеВыводитьРПВПериодах;
	Форма.ВыводитьСроки          = НЕ Форма.НеВыводитьСроки;
	Форма.ВыводитьФактВПериодах  = НЕ Форма.НеВыводитьФактВПериодах;
	Форма.ВыделятьДопустимыеДаты = НЕ Форма.НеВыделятьДопустимыеДаты;
	Форма.ВыделятьНераспределено = НЕ Форма.НеВыделятьНераспределено;
	Форма.ВыделятьРезерв         = НЕ Форма.НеВыделятьРезерв;
	Форма.ВыделятьСроки          = НЕ Форма.НеВыделятьСроки;
	Форма.ВыделятьФактМинусПЗ    = НЕ Форма.НеВыделятьФактМинусПЗ;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


