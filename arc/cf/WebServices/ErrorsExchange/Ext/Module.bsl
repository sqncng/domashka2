
#Область ПрограммныйИнтерфейс

// Возвращает номер версии сервиса.
//
Функция GetInterfaceVersion()
	
	Возврат ИнтеграцияСАПК.ВернутьХранилищеЗначения(СокрЛП(Метаданные.Версия));
	
КонецФункции

// Возвращает информацию об ответственных за метаданные в СППР.
// 
// Параметры:
//	Project - Строка - имя конфигурации, соответствующей проекту
//	MetadataTable - ХранилищеЗначения, содержит ТаблицаЗначений
//		Объект - Строка - имя объекта метаданных в АПК
//		ОтветственныйАПК - Структура("Имя, УИД")
//			если УИД заполнен, то ищем соответствие в СППР по имени, иначе ищем ответственного за метаданные
//
// Возвращаемое значение:
//	Структура - сводная информация по ошибкам АПК, ключи ОбщееКоличество, КоличествоОтработано
//
Функция GetMetadataResponsibles(Project, MetadataTable)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Входящие данные
	Проект = ИнтеграцияСАПКПовтИсп.ПодобратьПроектПоИмениКонфигурации(СокрЛП(Project));
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Проект не найден'"), СокрЛП(Project));
	КонецЕсли;
	
	// Вспомогательные данные
	ОтветственныйПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ОтветственныйЗаМетаданныеПоУмолчанию");
	Если НЕ ЗначениеЗаполнено(ОтветственныйПоУмолчанию) Тогда
		Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Не назначен ответственный за метаданные по умолчанию'"), "");
	КонецЕсли;
	
	ТипыМетаданных 	  = Новый Соответствие;
	ОбъектыМетаданных = Новый Соответствие;
	
	// Исходящие данные
	ТаблицаМетаданных = MetadataTable.Получить();
	ТаблицаМетаданных.Колонки.Добавить("ОбъектСППР"); // Структура (Имя, УИД); если УИД не заполнено - объект не найден в СППР
	ТаблицаМетаданных.Колонки.Добавить("ОтветственныйСППР"); // Структура (Имя, УИД)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыМетаданных.Наименование КАК ИмяМнЧисло,
	|	ОбъектыМетаданных.ВидОбъектаМетаданныхВЕдЧисле КАК ИмяЕдЧисло
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Владелец = &Проект
	|	И ОбъектыМетаданных.ЭтоГруппа
	|	И НЕ ОбъектыМетаданных.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Подсистемы"",
	|	""Подсистема""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыМетаданных.Наименование КАК ИмяЕдЧисло,
	|	ОбъектыМетаданных.Ссылка,
	|	ОбъектыМетаданных.Ответственный
	|ИЗ
	|	Справочник.ОбъектыМетаданных КАК ОбъектыМетаданных
	|ГДЕ
	|	ОбъектыМетаданных.Владелец = &Проект
	|	И НЕ ОбъектыМетаданных.ЭтоГруппа
	|	И НЕ ОбъектыМетаданных.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(""Подсистема."" + Подсистемы.Наименование КАК СТРОКА(150)),
	|	Подсистемы.Ссылка,
	|	Подсистемы.Ответственный
	|ИЗ
	|	Справочник.Подсистемы КАК Подсистемы
	|ГДЕ
	|	Подсистемы.Владелец = &Проект
	|	И Подсистемы.Родитель = ЗНАЧЕНИЕ(Справочник.Подсистемы.ПустаяСсылка)
	|	И НЕ Подсистемы.ПометкаУдаления";
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	Выборка = ПакетЗапросов[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипыМетаданных.Вставить(
			НРег(СокрЛП(СтрЗаменить(Выборка.ИмяМнЧисло, " ", ""))),
			СокрЛП(Выборка.ИмяЕдЧисло));
	КонецЦикла;
	
	Выборка = ПакетЗапросов[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ответственный = ?(НЕ ЗначениеЗаполнено(Выборка.Ответственный), ОтветственныйПоУмолчанию, Выборка.Ответственный);
		
		ОбъектыМетаданных.Вставить(
			НРег(СокрЛП(Выборка.ИмяЕдЧисло)),
			Новый Структура(
				"УИДОбъекта, Ответственный",
				ИнтеграцияСАПК.ИдентификаторПоСсылке(Выборка.Ссылка), Ответственный));
		
	КонецЦикла;
	
	ИмяОтветственного = СокрЛП(ОтветственныйПоУмолчанию);
	УИДОтветственного = ИнтеграцияСАПК.ИдентификаторПоСсылке(ОтветственныйПоУмолчанию);
	
	Для Каждого ТекСтр Из ТаблицаМетаданных Цикл
		
		ТекСтр.ОбъектСППР = Новый Структура("Имя, УИД");
		ТекСтр.ОтветственныйСППР = Новый Структура("Имя, УИД", ИмяОтветственного, УИДОтветственного);
		
		ИмяОбъектаАПК = ТекСтр.Объект;
		Если НРег(Лев(ИмяОбъектаАПК, 6)) = "общие." Тогда
			ИмяОбъектаАПК = Сред(ИмяОбъектаАПК, 7);
		КонецЕсли;
		МассивИмениОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъектаАПК, ".");
		
		Если МассивИмениОбъекта.Количество() < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		ТипОбъекта = ТипыМетаданных.Получить(НРег(СокрЛП(МассивИмениОбъекта[0])));
		Если НЕ ЗначениеЗаполнено(ТипОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъектаСППР = ТипОбъекта + "." + СокрЛП(МассивИмениОбъекта[1]);
		ОбъектМетаданныхСППР = ОбъектыМетаданных.Получить(НРег(СокрЛП(ИмяОбъектаСППР)));
		
		Если ЗначениеЗаполнено(ОбъектМетаданныхСППР) Тогда
			
			ТекСтр.ОбъектСППР.Имя = ИмяОбъектаСППР;
			ТекСтр.ОбъектСППР.УИД = ОбъектМетаданныхСППР.УИДОбъекта;
			
			Если ЗначениеЗаполнено(ТекСтр.ОтветственныйАПК.УИД) Тогда
				
				Ответственный = ИнтеграцияСАПК.НайтиПользователя(ТекСтр.ОтветственныйАПК.Имя);
				Если ЗначениеЗаполнено(Ответственный) Тогда
					ТекСтр.ОтветственныйСППР.Имя = СокрЛП(Ответственный);
					ТекСтр.ОтветственныйСППР.УИД = ИнтеграцияСАПК.ИдентификаторПоСсылке(Ответственный);
				КонецЕсли;
				
			ИначеЕсли ОтветственныйПоУмолчанию <> ОбъектМетаданныхСППР.Ответственный Тогда
				
				ТекСтр.ОтветственныйСППР.Имя = СокрЛП(ОбъектМетаданныхСППР.Ответственный);
				ТекСтр.ОтветственныйСППР.УИД = ИнтеграцияСАПК.ИдентификаторПоСсылке(ОбъектМетаданныхСППР.Ответственный);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИнтеграцияСАПК.ВернутьХранилищеЗначения(ТаблицаМетаданных);
	
КонецФункции

// Возвращает информацию о номерах версий и сборок проекта СППР.
// 
// Параметры:
//	Project - Строка - имя конфигурации, соответствующей проекту
//
// Возвращаемое значение:
//	Массив - номера версий и сборок проекта
//
Функция GetProjectVersions(Project)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Входящие данные
	Проект = ИнтеграцияСАПКПовтИсп.ПодобратьПроектПоИмениКонфигурации(СокрЛП(Project));
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Проект не найден'"), СокрЛП(Project));
	КонецЕсли;
	
	// Исходящие данные
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(""Версия "" + ВерсииПроекта.Код КАК СТРОКА(100)) КАК Код
	|ИЗ
	|	Справочник.ВерсииПроекта КАК ВерсииПроекта
	|ГДЕ
	|	ВерсииПроекта.Владелец = &Проект
	|	И (ВерсииПроекта.ДатаПрекращенияПоддержки > &ТекущаяДата
	|	ИЛИ ВерсииПроекта.ДатаПрекращенияПоддержки = ДАТАВРЕМЯ(1,1,1))
	|	И НЕ ВерсииПроекта.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(""Сборка "" + СборкиВерсии.Код КАК СТРОКА(100))
	|ИЗ
	|	Справочник.СборкиВерсии КАК СборкиВерсии
	|ГДЕ
	|	СборкиВерсии.Владелец.Владелец = &Проект
	|	И (СборкиВерсии.Владелец.ДатаПрекращенияПоддержки > &ТекущаяДата
	|	ИЛИ СборкиВерсии.Владелец.ДатаПрекращенияПоддержки = ДАТАВРЕМЯ(1,1,1))
	|	И НЕ СборкиВерсии.Владелец.ПометкаУдаления
	|	И НЕ СборкиВерсии.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	МассивНомеров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
	Возврат ИнтеграцияСАПК.ВернутьХранилищеЗначения(МассивНомеров);
	
КонецФункции

// Регистрирует новую ошибку.
// 
// Параметры:
//	CommonData - Структура("ИмяКонфигурации, ВерсияКонфигурации, ДатаСоздания")
//	ErrorsTable - ХранилищеЗначения, содержит ТаблицаЗначений
//		Наименование - Строка
//		СрочностьИсправления - Строка
//		УИДОтветственного - Строка - идентификатор пользователя в СППР, на которого регистрируется ошибка
//		ОбъектыСППР - Соответствие, ключи - идентификаторы объектов метаданных в СППР, на которых регистрируется ошибка
//		СлужебноеНомераСтрок - Массив
//
// Возвращаемое значение:
//	ХранилищеЗначения, содержит ТаблицаЗначений
//		структура колонок аналогична входному параметру ErrorsTable
//		+ колонка УИДОшибки - Строка - идентификатор ошибки, зарегистрированной в СППР
//
Функция RegisterErrors(CommonData, ErrorsTable)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Данные = CommonData.Получить();
	
	ТаблицаОшибок = ErrorsTable.Получить();
	ТаблицаОшибок.Колонки.Добавить("УИДОшибки");
	
	Если ТаблицаОшибок.Колонки.Найти("Уточнение") = Неопределено Тогда
		
		НачатьТранзакцию();
		
		//Старый вариант регистрации ошибок из АПК
		
		Для Каждого ТекСтр Из ТаблицаОшибок Цикл
			
			Данные.Вставить("КомуНаправлена",       ИнтеграцияСАПК.СсылкаПоИдентификатору(Справочники.Пользователи, ТекСтр.УИДОтветственного));
			Данные.Вставить("Наименование",         НСтр("ru='Проверка АПК: '") + ТекСтр.Наименование);
			Данные.Вставить("СрочностьИсправления", Перечисления.СрочностьИсправленияОшибок[ТекСтр.СрочностьИсправления]);
			
			Попытка
				НоваяОшибка = ИнтеграцияСАПК.ЗарегистрироватьОшибку(Данные, ТекСтр.ОбъектыСППР);
			Исключение
				ОтменитьТранзакцию();
				Инфо = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с АПК'"),
					УровеньЖурналаРегистрации.Ошибка,,, 
					ПодробноеПредставлениеОшибки(Инфо));
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(Инфо);
				Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Не удалось зарегистрировать ошибку'"), ОписаниеОшибки);
			КонецПопытки;
			
			ТекСтр.УИДОшибки = ИнтеграцияСАПК.ИдентификаторПоСсылке(НоваяОшибка);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Иначе
		
		Проект = ИнтеграцияСАПКПовтИсп.ПодобратьПроектПоИмениКонфигурации(Данные.ИмяКонфигурации);
		Если НЕ ЗначениеЗаполнено(Проект) Тогда
			Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Не удалось определить проект ошибки'"),"");
		КонецЕсли;
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "ОтветственныйЗаМетаданныеПоУмолчанию, Ответственный");
		Если ЗначениеЗаполнено(Реквизиты.ОтветственныйЗаМетаданныеПоУмолчанию) Тогда
			ОтветственныйЗаМетаданныеПроекта = Реквизиты.ОтветственныйЗаМетаданныеПоУмолчанию;
		Иначе
			ОтветственныйЗаМетаданныеПроекта = Реквизиты.Ответственный;
		КонецЕсли; 
		
		МестоОбнаружения = ИнтеграцияСАПКПовтИсп.ОпределитьМестоОбнаруженияОшибки(
			Проект,
			Данные.ВерсияКонфигурации,
			Данные.ДатаСоздания);
		
		Если НЕ ЗначениеЗаполнено(МестоОбнаружения.СборкаОбнаружения)
			И НЕ ЗначениеЗаполнено(МестоОбнаружения.ВеткаОбнаружения) Тогда
			Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Не удалось определить сборку или ветку обнаружения ошибки'"),"");
		КонецЕсли;
		
		ТаблицаОписанийОшибок = Справочники.Ошибки.СоздатьТаблицуОписанийОшибок();
		
		ТаблицаИменОбъектов = Новый ТаблицаЗначений;
		ТаблицаИменОбъектов.Колонки.Добавить("ПолноеИмяОбъекта", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
		
		Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
			
			СтрокаОшибки.ПолноеИмяОбъекта = ИнтеграцияСАПК.ПреобразоватьНаименованиеОбъектаМетаданныхКЕдинственномуЧислу(СтрокаОшибки.ПолноеИмяОбъекта);
			
			СтрокаТаблицыИмен = ТаблицаИменОбъектов.Добавить();
			СтрокаТаблицыИмен.ПолноеИмяОбъекта = СтрокаОшибки.ПолноеИмяОбъекта;
			
			КорневойОбъектМетаданного = ПолучитьКорневойОбъектМетаданного(СтрокаТаблицыИмен.ПолноеИмяОбъекта);
			Если КорневойОбъектМетаданного <> СтрокаОшибки.ПолноеИмяОбъекта Тогда
				СтрокаТаблицыИмен = ТаблицаИменОбъектов.Добавить();
				СтрокаТаблицыИмен.ПолноеИмяОбъекта = КорневойОбъектМетаданного;
			КонецЕсли; 
			
		КонецЦикла;
		ТаблицаИменОбъектов.Свернуть("ПолноеИмяОбъекта");
		
		СоответствиеМетаданныхИменам = ИнтеграцияСАПК.ПолучитьСоответствиеМетаданныхИменам(ТаблицаИменОбъектов,Проект);
		
		Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
			
			СрочностьСсылка = ПредопределенноеЗначение("Перечисление.СрочностьИсправленияОшибок." 
			                                           + СтрокаОшибки.СрочностьИсправления);
			ПорядокВоспроизведенияОшибки = СтрЗаменить(НСтр("ru='В результате проверки АПК найдены ошибки.
			                                                |%ДополнениеКТекстуОшибки'"),
			                                           "%ДополнениеКТекстуОшибки",
			                                           Данные.ДополнениеКТекстуОшибки);
			
			СтрокаОписанияОшибки = ТаблицаОписанийОшибок.Добавить();
			СтрокаОписанияОшибки.ИсходнаяИнформацияОбОшибке = СтрокаОшибки.Ошибка;
			СтрокаОписанияОшибки.ПорядокВоспроизведения     = ПорядокВоспроизведенияОшибки;
			СтрокаОписанияОшибки.Наименование               = НСтр("ru='Проверка АПК: '") + СтрокаОшибки.Ошибка;
			СтрокаОписанияОшибки.Стандарт                   = СтандартРазработкиПоСсылкеНаИТС(СтрокаОшибки.СсылкаНаСтандарт);
			СтрокаОписанияОшибки.СрочностьИсправления       = СрочностьСсылка;
			СтрокаОписанияОшибки.ПолноеИмяОбъекта           = СтрокаОшибки.ПолноеИмяОбъекта;
			СтрокаОписанияОшибки.МестоОбнаружения           = СтрокаОшибки.МестоОбнаружения;
			СтрокаОписанияОшибки.Уточнение                  = СтрокаОшибки.Уточнение;
			
			Если ТаблицаОшибок.Колонки.Найти("Ответственный") <> Неопределено
				И ЗначениеЗаполнено(СтрокаОшибки.Ответственный) Тогда
				
				Пользователь = Справочники.Пользователи.НайтиПоНаименованию(СтрокаОшибки.Ответственный);
				СтрокаОписанияОшибки.КомуНаправлена = Пользователь;
				
			КонецЕсли;
			
			МетаданныеПоИмени                 = СоответствиеМетаданныхИменам.Найти(СтрокаОшибки.ПолноеИмяОбъекта);
			КорневойОбъектМетаданного         = ПолучитьКорневойОбъектМетаданного(СтрокаОшибки.ПолноеИмяОбъекта);
			МетаданныеПоИмениКорневогоОбъекта = СоответствиеМетаданныхИменам.Найти(КорневойОбъектМетаданного);
			
			Если МетаданныеПоИмени <> Неопределено Тогда
				
				ЗаполнитьСтрокуОписания(СтрокаОписанияОшибки, МетаданныеПоИмени);
				
			ИначеЕсли МетаданныеПоИмениКорневогоОбъекта <> Неопределено Тогда
				
				ЗаполнитьСтрокуОписания(СтрокаОписанияОшибки, МетаданныеПоИмениКорневогоОбъекта);
				СтрокаОписанияОшибки.Уточнение = СтрокаОшибки.ПолноеИмяОбъекта 
				                               + Символы.ПС + СтрокаОшибки.Уточнение;
			Иначе 
				СтрокаОписанияОшибки.Уточнение = СтрокаОшибки.ПолноеИмяОбъекта 
				                               + Символы.ПС + СтрокаОшибки.Уточнение;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаОписанияОшибки.Уточнение) Тогда
				СтрокаОписанияОшибки.Уточнение = СтрокаОшибки.Ошибка;
			КонецЕсли; 
			
			ПодчиненныйОбъектИзУточнения = Неопределено;
			Если ЗначениеЗаполнено(СтрокаОшибки.МестоОбнаружения) Тогда
				ПодчиненныйОбъектИзУточнения = Лев(СтрокаОшибки.МестоОбнаружения,СтрНайти(Строка(СтрокаОшибки.МестоОбнаружения),",")-1);
				ПодчиненныйОбъектИзУточнения = СтрЗаменить(ПодчиненныйОбъектИзУточнения," ","");
				ПодчиненныйОбъектИзУточнения = СокрЛП(ПодчиненныйОбъектИзУточнения); 
				Если ЗначениеЗаполнено(ПодчиненныйОбъектИзУточнения) Тогда
					Попытка
						ПодчиненныйОбъектИзУточнения = ПредопределенноеЗначение("Перечисление.ТипыМодулейОбъектовМетаданных."+ПодчиненныйОбъектИзУточнения);
					Исключение
						ПодчиненныйОбъектИзУточнения = Неопределено;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
	
			Если ПодчиненныйОбъектИзУточнения <> Неопределено Тогда
				СтрокаОписанияОшибки.ПодчиненныйОбъект = ПодчиненныйОбъектИзУточнения;
				
				НовоеМесто = СтрокаОшибки.МестоОбнаружения;
				НовоеМесто = СокрЛП(Прав(НовоеМесто, СтрДлина(НовоеМесто) - СтрНайти(НовоеМесто, ",")));
				СтрокаОписанияОшибки.Комментарий = НовоеМесто;
			Иначе
				СтрокаОписанияОшибки.Комментарий = СтрокаОшибки.МестоОбнаружения;
			КонецЕсли;
			
			Если ТаблицаОшибок.Колонки.Найти("Комментарий") <> Неопределено И ЗначениеЗаполнено(СтрокаОшибки.Комментарий) Тогда
				
				Если ЗначениеЗаполнено(СтрокаОписанияОшибки.Комментарий) Тогда
					СтрокаОписанияОшибки.Комментарий = СтрокаОписанияОшибки.Комментарий + Символы.ПС;
				КонецЕсли; 
				СтрокаОписанияОшибки.Комментарий =  СтрокаОписанияОшибки.Комментарий + СтрокаОшибки.Комментарий;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаОписанияОшибки.КомуНаправлена) И ЗначениеЗаполнено(ОтветственныйЗаМетаданныеПроекта) Тогда
				СтрокаОписанияОшибки.КомуНаправлена = ОтветственныйЗаМетаданныеПроекта;
			КонецЕсли;
			
		КонецЦикла;
		
		МестоВозникновения = ?(ЗначениеЗаполнено(МестоОбнаружения.СборкаОбнаружения),
		                       МестоОбнаружения.СборкаОбнаружения,
		                       МестоОбнаружения.ВеткаОбнаружения);
		
		ПараметрыОшибки = Новый Структура;
		
		ПараметрыОшибки.Вставить("ДатаОбнаружения",      Данные.ДатаСоздания);
		ПараметрыОшибки.Вставить("МетодВыявленияОшибки", Перечисления.МетодыВыявленияОшибок.АудитКода);
		
		НачатьТранзакцию();
		
		Попытка
			Справочники.Ошибки.ЗарегистрироватьОшибкиСУчетомДублей(ТаблицаОписанийОшибок, МестоВозникновения, ПараметрыОшибки,
		                                                         "Наименование,КомуНаправлена,СрочностьИсправления");
		Исключение
			ОтменитьТранзакцию();
			Инфо = ИнформацияОбОшибке();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с АПК'"),
				УровеньЖурналаРегистрации.Ошибка,,, 
				ПодробноеПредставлениеОшибки(Инфо));
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(Инфо);
			Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Не удалось зарегистрировать ошибки:'"), ОписаниеОшибки);
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Возврат ИнтеграцияСАПК.ВернутьХранилищеЗначения(ТаблицаОшибок);
	
КонецФункции

// Помечает на удаление ошибки.
// 
// Параметры:
//	ErrorsTable - ХранилищеЗначения, содержит ТаблицаЗначений
//		УИДОшибки - Строка - уникальный идентификатор ошибки СППР
//
// Возвращаемое значение:
//	ХранилищеЗначения, содержит Истина
//
Функция DeleteErrors(ErrorsTable)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаОшибок = ErrorsTable.Получить();
	
	Для Каждого ТекСтр Из ТаблицаОшибок Цикл
		
		Ошибка = ИнтеграцияСАПК.СсылкаПоИдентификатору(Справочники.Ошибки, ТекСтр.УИДОшибки);
		Попытка
			ОшибкаОбъект = Ошибка.ПолучитьОбъект();
			ОшибкаОбъект.ПометкаУдаления = Истина;
			ОшибкаОбъект.Записать();
		Исключение
			Инфо = ИнформацияОбОшибке();
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(Инфо);
			Возврат ИнтеграцияСАПК.ВернутьОшибкуСервиса(НСтр("ru='Не удалось удалить ошибку'"), ОписаниеОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ИнтеграцияСАПК.ВернутьХранилищеЗначения(Истина);
	
КонецФункции

// Функция - Регистрирует ошибку
//
// Параметры:
//  Project            - Строка - Имя проекта
//  Description        - Строка - Наименование
//  DetectionType      - Строка - Метод выявления ошибки
//  SourceInformation  - Строка - Исходная информация
//  StepsToReproduce   - Строка - Порядок воспроизведения
//  Urgency            - Строка - Срочность исправления
//  Assembly           - Строка - Номер сборки
//  DetectionDate      - Дата - Дата обнаружения
//  ProjectVersion     - Строка - Номер версии проекта
//  TechProject        - Строка - Номер технического проекта
//  Responsible        - Строка - Ответсвенный
//  MetadataObjects    - XDTO.ErrorsExchange.ListOfMetadataObjects - Объекты метаданных
// 
// Возвращаемое значение:
//  UUID - Уникальный идентификатор ошибки.
//
Функция RegisterError(Project, Description, DetectionType, SourceInformation, 
                      StepsToReproduce, Urgency=Неопределено, Assembly=Неопределено, DetectionDate=Неопределено, 
                      ProjectVersion=Неопределено, ProjectSection=Неопределено, TechProject=Неопределено, 
                      Responsible=Неопределено, MetadataObjects=Неопределено, Scenario=Неопределено, DBPath=Неопределено,
                      CreateDBPath = Ложь)
	
	ТаблицаМетаданных = ИнтеграцияСВнешнимиСистемами.ПолучитьТаблицуМетаданных();
	
	Если MetadataObjects <> Неопределено 
			И MetadataObjects.MetadataObject.Количество() > 0 Тогда
		
		Для Каждого MetadataObject Из MetadataObjects.MetadataObject Цикл
		
			НоваяСтрока = ТаблицаМетаданных.Добавить();
			НоваяСтрока.ИмяМетаданного = MetadataObject.Name;
			НоваяСтрока.Уточнение      = MetadataObject.LocationClarification;
			НоваяСтрока.Комментарий    = MetadataObject.Comment;
		КонецЦикла; 
		
	КонецЕсли; 

	ОбъектыМетаданных = ИнтеграцияСВнешнимиСистемами.НайтиОбъектыМетаданных(ТаблицаМетаданных, Project);
	ПараметрыОшибки   = ИнтеграцияСВнешнимиСистемами.ИнициироватьПараметрыОшибки();
	
	ПараметрыОшибки.ИмяПроекта               = Project;
	ПараметрыОшибки.Наименование             = Description;
	ПараметрыОшибки.МетодВыявленияОшибки     = DetectionType;
	ПараметрыОшибки.ИсходнаяИнформация       = SourceInformation;
	ПараметрыОшибки.ПорядокВоспроизведения   = StepsToReproduce;
	ПараметрыОшибки.Сборка                   = Assembly;
	ПараметрыОшибки.ДатаОбнаружения          = DetectionDate;
	ПараметрыОшибки.ВерсияПроекта            = ProjectVersion;
	ПараметрыОшибки.ИмяРазделаПроекта        = ProjectSection;
	ПараметрыОшибки.НомерТехническогоПроекта = TechProject;
	ПараметрыОшибки.СрочностьИсправления     = Urgency;
	ПараметрыОшибки.КомуНаправлена           = Responsible;
	ПараметрыОшибки.КодСценария              = Scenario;
	ПараметрыОшибки.ИнформационнаяБазаДляВоспроизведения               = DBPath;
	ПараметрыОшибки.ГенерироватьЗначениеДляПоляПутьКИнформационнойБазе = CreateDBPath;
	
	Ошибка = ИнтеграцияСВнешнимиСистемами.ЗарегистрироватьОшибку(ПараметрыОшибки, ОбъектыМетаданных);
	
	Если ЗначениеЗаполнено(ПараметрыОшибки.ИнформационнаяБазаДляВоспроизведения) Тогда
		DBPath = ПараметрыОшибки.ИнформационнаяБазаДляВоспроизведения;
	КонецЕсли;
	
	УникальныйИдентификаторОшибки = ?(ЗначениеЗаполнено(Ошибка.СсылкаНаОшибку), 
	                                  Ошибка.СсылкаНаОшибку.УникальныйИдентификатор(), Неопределено);
	Ответ = Новый Структура;
	Ответ.Вставить("УникальныйИдентификатор", УникальныйИдентификаторОшибки);
	Ответ.Вставить("Код",                     Ошибка.КодОшибки);
	
	Возврат СериализаторXDTO.ЗаписатьXDTO(Ответ);
	
КонецФункции

Функция ErrorStatus(ErrorUUID)
	
	Запрос = Новый Запрос;
	
	Запрос.Параметры.Вставить("Ссылка", Справочники.Ошибки.ПолучитьСсылку(ErrorUUID));
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПРЕДСТАВЛЕНИЕССЫЛКИ(ОшибкиПротокол.Статус) КАК Статус,
	               |	ОшибкиПротокол.Дата КАК Дата
	               |ИЗ
	               |	Справочник.Ошибки.Протокол КАК ОшибкиПротокол
	               |ГДЕ
	               |	ОшибкиПротокол.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ,
	               |	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТипСтатуса = ФабрикаXDTO.Тип("http://www.1c.ru/Modeling/ErrorsExchange", "ErrorStatus");
		Статус = ФабрикаXDTO.Создать(ТипСтатуса);
		Статус.Status = Выборка.Статус;
		Статус.Date = Выборка.Дата;
		
		Возврат Статус;
		
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКорневойОбъектМетаданного(СтрокаМетаданное)
	
	КомпонентыИмени = СтрРазделить(СтрокаМетаданное, ".");
	
	Возврат ?(КомпонентыИмени.Количество() > 1, 
	          СтрШаблон("%1.%2", КомпонентыИмени[0], КомпонентыИмени[1]), 
	          СтрокаМетаданное)
	
КонецФункции

Процедура ЗаполнитьСтрокуОписания(Строка, ИнформацияПоМетаданному)
	
	Если Не ЗначениеЗаполнено(Строка.КомуНаправлена) Тогда
		Строка.КомуНаправлена = ИнформацияПоМетаданному.Ответственный;
	КонецЕсли;
	
	Если ИнформацияПоМетаданному.ОбъектВладелец <> NULL Тогда
		Строка.ПроблемныйОбъект = ИнформацияПоМетаданному.ОбъектВладелец;
		Строка.ПодчиненныйОбъект = ИнформацияПоМетаданному.Ссылка;
	Иначе
		Строка.ПроблемныйОбъект = ИнформацияПоМетаданному.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИнформацияПоМетаданному.РазделПроекта) Тогда
		Строка.РазделПроекта = ИнформацияПоМетаданному.РазделПроекта;
	КонецЕсли;
	
КонецПроцедуры

// Разбирает ссылки на статьи ИТС, получает из них код стандарта и ищет его в справочнике.
// Поддерживаются ссылки вида:
// "http://its.1c.ru/db/translate/?db=v8std&path=src/d810/i8100640.htm".
// "http://its.1c.ru/db/v8std#content:640:hdoc"
//
// Параметры:
//  Ссылка - Строка, ссылка на стандарт в ИТС.
//
// Возвращаемое значение:
//  СправочникСсылка.СтандартыРазработки - найденный стандарт.
//  Неопределено - если стандарт не найден.
//
Функция СтандартРазработкиПоСсылкеНаИТС(Ссылка)
	
	Если СтрНайти(Ссылка, "its.1c.ru") > 0 Тогда
		
		//Ищем по шаблону its.1c.ru...:<NUM>:hdoc
		Постфикс = ":hdoc";
		Если СтрЗаканчиваетсяНа(Ссылка, Постфикс) Тогда
			
			АдресСтрока = Лев(Ссылка, СтрДлина(Ссылка) - СтрДлина(Постфикс));
			НачалоКода = СтрНайти(АдресСтрока, ":", НаправлениеПоиска.СКонца);
			Если НачалоКода > 0 Тогда
				
				СтрокаКода = Сред(АдресСтрока, НачалоКода + 1);
				Возврат СтадартРазработкиПоКоду(СтрокаКода);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		//Ищем по шаблону "its.1c.ru/../i81<NUM>.htm"
		Начало = СтрНайти(Ссылка, "/", НаправлениеПоиска.СКонца);
		Если Начало > 0 Тогда
			Файл = Прав(Ссылка, СтрДлина(Ссылка) - Начало);
			Расширение = СтрНайти(Файл, ".");
			
			Если Расширение > 0 Тогда
				ИмяФайла = Лев(Файл, Расширение - 1);
				ПрефиксКода = "i81";
				ДлинаПрефикса = СтрДлина(ПрефиксКода);
				
				Если Лев(ИмяФайла, ДлинаПрефикса) = ПрефиксКода Тогда
					
					СтрокаКода = Прав(ИмяФайла, СтрДлина(ИмяФайла) - ДлинаПрефикса);
					Возврат СтадартРазработкиПоКоду(СтрокаКода);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СтадартРазработкиПоКоду(Код)
	
	Попытка
		КодЧисло = Число(Код);
	Исключение
		КодЧисло = Неопределено;
	КонецПопытки;
	
	Возврат ?(Код <> Неопределено, Справочники.СтандартыРазработки.НайтиПоКоду(КодЧисло), Неопределено);
	
КонецФункции

Функция AddFile(ErrorUUID, FileName, FileExtension, FileBinaryData, FileUUID = Неопределено)
	
	ОшибкаСсылка  = Справочники.Ошибки.ПолучитьСсылку(ErrorUUID);
	Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОшибкаСсылка, "Представление");
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось найти ошибку по ссылке.'");
	КонецЕсли; 
	
	ФайлСсылка = Неопределено;
	Если ЗначениеЗаполнено(FileUUID) Тогда
		
		ФайлСсылка = Справочники.Файлы.ПолучитьСсылку(FileUUID);
		ПредставлениеФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "Представление");
		
		Если Не ЗначениеЗаполнено(ПредставлениеФайла) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось найти файл по ссылке.'");
		КонецЕсли; 
	
	КонецЕсли; 
	
	ВремяИзменения = ТекущаяДатаСеанса();
	ВремяИзмененияУниверсальное = УниверсальноеВремя(ТекущаяДата());
	ДвоичныеДанные = FileBinaryData;
	Если ДвоичныеДанные.Размер() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не корректные двоичные данные.'");
	КонецЕсли;	
	
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ОписаниеФайла = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	ОписаниеФайла.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ОписаниеФайла.ИмяБезРасширения              = FileName;
	ОписаниеФайла.РасширениеБезТочки            = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(FileExtension);
	ОписаниеФайла.Размер                        = ДвоичныеДанные.Размер();
	ОписаниеФайла.ВремяИзменения                = ВремяИзменения;
	ОписаниеФайла.ВремяИзмененияУниверсальное   = ВремяИзмененияУниверсальное;
	
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		РаботаСФайламиСлужебный.СоздатьВерсию(ФайлСсылка, ОписаниеФайла);
	Иначе
		ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(ОшибкаСсылка, ОписаниеФайла);
	КонецЕсли; 
	
	СведенияОФайле = ФабрикаXDTO.Создать(
		ФабрикаXDTO.Тип("http://www.1c.ru/Modeling/ErrorsExchange", "FileInfo"));
	
	Если ФайлСсылка <> Неопределено И Не ФайлСсылка.Пустая() Тогда	
		СведенияОФайле.UUID        = ФайлСсылка.УникальныйИдентификатор();
		СведенияОФайле.Name        = ФайлСсылка.Наименование;	
		СведенияОФайле.Extension   = ФайлСсылка.Расширение;
		СведенияОФайле.Description = ФайлСсылка.Описание;
		СведенияОФайле.Size        = ФайлСсылка.Размер;
	КонецЕсли;
	
	Возврат СведенияОФайле;
	
КонецФункции

// Соответствует операции Ping.
Функция Ping()
	// Проверка связи.
	Возврат "";
КонецФункции

#КонецОбласти

