#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	ОбменДаннымиСервер.ФормаУзлаПриСозданииНаСервере(ЭтаФорма, "РИБСОтборами");
	
	Если ОбменДаннымиСППР.ЭтоПредопределенныйУзелПланаОбмена(Объект.Ссылка) Тогда
		
		КоманднаяПанель.ПодчиненныеЭлементы.ФормаВыполнениеОбменаДанными.Видимость = Ложь;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаСоставДанных",
		"Доступность",
		ПланыОбмена.ГлавныйУзел() = Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НастройкаОтборов",
		"Доступность",
		ПланыОбмена.ГлавныйУзел() = Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СинхронизироватьДополнительныеОтчетыИОбработки",
		"Видимость",
		Константы.ИспользоватьДополнительныеОтчетыИОбработки.Получить());
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СинхронизироватьДанныеУчетаВремени",
		"Видимость",
		Константы.ИспользоватьУчетВремени.Получить());

	ИсточникЗаполнения = ОбменДаннымиСППР.ИсточникЗаполненияНастроекСоставаИОтборов();
	
	ЗаполнитьЗначенияСвойств(ИсточникЗаполнения, Объект,,"Пользователи,ПапкиФайлов,ГруппыДоступа,РазделыПроектов");
	ИсточникЗаполнения.Пользователи = Объект.Пользователи.Выгрузить();
	ИсточникЗаполнения.ПапкиФайлов = Объект.ПапкиФайлов.Выгрузить();
	ИсточникЗаполнения.ГруппыДоступа = Объект.ГруппыДоступа.Выгрузить();
	ИсточникЗаполнения.РазделыПроектов = Объект.РазделыПроектов.Выгрузить();
	
	РезультатЗаполнения = Новый Структура("НастройкаОтборов", 
							РеквизитФормыВЗначение("НастройкаОтборов", Тип("ТаблицаЗначений")));
	
	ОбменДаннымиСППР.ЗаполнитьНастройкиСоставаИОтборов(ИсточникЗаполнения, РезультатЗаполнения);
	
	ЗначениеВРеквизитФормы(РезультатЗаполнения.НастройкаОтборов, "НастройкаОтборов");
	ПланыОбмена.РИБСОтборами.ЗаполнитьТаблицуСинхронизацияПоПроекту(СинхронизацияПоПроекту);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьОписаниеОграничений();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	Если ВыбранноеЗначение.ТаблицаЗаполнения = "Проекты" Тогда
		ОбновитьДанныеТаблицыСинхронизации();
		Модифицированность = Истина;
		ОбновитьОписаниеОграничений();
	КонецЕсли;
	
	НастройкаОтборовДанные = Элементы.НастройкаОтборов.ТекущиеДанные;
	Если НастройкаОтборовДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбменДаннымиСППРКлиент.ЗаполнитьПредставлениеОтбора(Объект,НастройкаОтборовДанные);
	Модифицированность = Истина;
	ОбновитьОписаниеОграничений();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПреобразоватьТаблицыВДанныеОбъекта(Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПроекты(Команда)
	ИменаРеквизитовОтбора = ОбменДаннымиСППРКлиент.ИменаРеквизитовДляОтбора("По проектам");
	Если ИменаРеквизитовОтбора.ИмяТЧ = "" Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВыбираемыйСправочник",     ИменаРеквизитовОтбора.ИмяСправочника);
	ПараметрыФормы.Вставить("ТаблицаЗаполнения",        ИменаРеквизитовОтбора.ИмяТЧ);
	ПараметрыФормы.Вставить("КолонкаЗаполнения",        ИменаРеквизитовОтбора.ИмяРеквизитаТЧ);
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",     ИменаРеквизитовОтбора.ЗаголовокФормыВыбора);
	ПараметрыФормы.Вставить("ТаблицаВыбранныхЗначений", СформироватьТаблицуВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("РежимУпорядочивания",      ИменаРеквизитовОтбора.РежимУпорядочивания);
	
	ОткрытьФорму("ПланОбмена.РИБСОтборами.Форма.ФормаВыбораЗначений", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаОтборов
&НаКлиенте
Процедура НастройкаОтборовИспользоватьПриИзменении(Элемент)
	НастройкаОтборовДанные = Элементы.НастройкаОтборов.ТекущиеДанные;
	Если НастройкаОтборовДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	ОбменДаннымиСППРКлиент.ЗаполнитьПредставлениеОтбора(Объект, НастройкаОтборовДанные);
	ОбновитьОписаниеОграничений();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Найти(Поле.Имя, "СоставФильтра") = 0 Тогда
		Возврат;
	КонецЕсли;
	НастройкаОтборовДанные = Элементы.НастройкаОтборов.ТекущиеДанные;
	Если НастройкаОтборовДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ НастройкаОтборовДанные.Использовать Тогда
		Возврат;
	КонецЕсли;
	ИменаРеквизитовОтбора = ОбменДаннымиСППРКлиент.ИменаРеквизитовДляОтбора(НастройкаОтборовДанные.ВидФильтра);
	Если ИменаРеквизитовОтбора.ИмяТЧ = "" Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВыбираемыйСправочник",     ИменаРеквизитовОтбора.ИмяСправочника);
	ПараметрыФормы.Вставить("ТаблицаЗаполнения",        ИменаРеквизитовОтбора.ИмяТЧ);
	ПараметрыФормы.Вставить("КолонкаЗаполнения",        ИменаРеквизитовОтбора.ИмяРеквизитаТЧ);
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора",     ИменаРеквизитовОтбора.ЗаголовокФормыВыбора);
	ПараметрыФормы.Вставить("ТаблицаВыбранныхЗначений", СформироватьТаблицуВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("РежимУпорядочивания",      ИменаРеквизитовОтбора.РежимУпорядочивания);
	
	ОткрытьФорму("ПланОбмена.РИБСОтборами.Форма.ФормаВыбораЗначений", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСинхронизацияПоПроекту

&НаКлиенте
Процедура СинхронизацияПоПроектуСинхронизироватьПриИзменении(Элемент)
	ОбновитьТекущиеДанныеПроекта("Синхронизировать");
КонецПроцедуры

&НаКлиенте
Процедура СинхронизацияПоПроектуТолькоПубликуемыеПриИзменении(Элемент)
	ОбновитьТекущиеДанныеПроекта("ТолькоПубликуемые");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СинхронизироватьВсе(Команда)
	ИзменитьФлагиСинхронизацииПоПроекту(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НеСинхронизироватьВсе(Команда)
	ИзменитьФлагиСинхронизацииПоПроекту(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ПроектыПриАктивизацииЯчейки(Элемент)
	ОбновитьДанныеТаблицыСинхронизации();
КонецПроцедуры

&НаКлиенте
Процедура СоставДанныхПометкаПриИзменении(Элемент)
	ОбновитьОписаниеОграничений();
	ОбновитьДанныеТаблицыСинхронизации();
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть           = Объект[ПараметрыФормы.ТаблицаЗаполнения];
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(,ПараметрыФормы.КолонкаЗаполнения);
	Возврат ПоместитьВоВременноеХранилище(ТаблицаВыбранныхЗначений, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище);
	Если СписокВыбранныхЗначений.Количество() = 0 Тогда
		Объект[СтруктураПараметров.ТаблицаЗаполнения].Очистить();
		Возврат;
	КонецЕсли;
	СписокВыбранныхЗначений.Колонки.Представление.Имя = СтруктураПараметров.КолонкаЗаполнения;
	Если СтруктураПараметров.ТаблицаЗаполнения = "Проекты" Тогда
		// Для проектов - надо сохранить существующие строки в таблице чтобы не сбились настройки.
		// 1. Удалим лишние.
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого СтрПроект Из Объект.Проекты Цикл
			Если СписокВыбранныхЗначений.Найти(СтрПроект.Проект) = Неопределено Тогда
				МассивСтрокКУДалению.Добавить(СтрПроект);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрПроект Из МассивСтрокКУдалению Цикл
			Объект.Проекты.Удалить(СтрПроект);
		КонецЦикла;
		// 2. Добавим недостающее.
		Для Каждого СтрПроект Из СписокВыбранныхЗначений Цикл
			РезультатПоиска = Объект.Проекты.НайтиСтроки(Новый Структура("Проект", СтрПроект.Проект));
			Если РезультатПоиска.Количество() = 0 Тогда
				СтрНовая = Объект.Проекты.Добавить();
				СтрНовая.Проект = СтрПроект.Проект;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Объект[СтруктураПараметров.ТаблицаЗаполнения].Очистить();
		Объект[СтруктураПараметров.ТаблицаЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПреобразоватьТаблицыВДанныеОбъекта(ОбъектПолучатель, ВыгружатьПроекты = Ложь)
	ЭтоСамОбъект = (ТипЗнч(ОбъектПолучатель) <> Тип("Структура"));
	Для Каждого СтрокаОтборы Из НастройкаОтборов Цикл
		ИменаРеквизитовОтбора = ОбменДаннымиСППРКлиент.ИменаРеквизитовДляОтбора(СтрокаОтборы.ВидФильтра);
		ОбъектПолучатель[ИменаРеквизитовОтбора.ИмяРеквизитаОтбор] = СтрокаОтборы.Использовать;
		Если ИменаРеквизитовОтбора.ИмяТЧ = "" Тогда
			Продолжить;
		ИначеЕсли ЭтоСамОбъект Тогда
			Если НЕ СтрокаОтборы.Использовать Тогда
				Объект[ИменаРеквизитовОтбора.ИмяТЧ].Очистить();
			КонецЕсли;
		Иначе
			// Заполнение данных ТЧ в настройке отборов на узле.
			МассивЗначений = Новый Массив;
			Для Каждого СтрокаТЧ Из Объект[ИменаРеквизитовОтбора.ИмяТЧ] Цикл
				МассивЗначений.Добавить(СтрокаТЧ[ИменаРеквизитовОтбора.ИмяРеквизитаТЧ]);
			КонецЦикла;
			ОбъектПолучатель[ИменаРеквизитовОтбора.ИмяТЧ][ИменаРеквизитовОтбора.ИмяРеквизитаТЧ] = МассивЗначений;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЭтоСамОбъект Тогда
		ЗаполнитьЗначенияСвойств(ОбъектПолучатель, Объект, "СинхронизироватьДополнительныеОтчетыИОбработки, СинхронизироватьРезультатыПроверкиОбъектов, СинхронизироватьДанныеУчетаВремени");
	КонецЕсли;

	// Данные ТЧ Проекты.
	Если ВыгружатьПроекты Тогда
		Для Каждого КлючИЗначение Из ОбъектПолучатель.Проекты Цикл
			ИмяКолонки = КлючИЗначение.Ключ;
			МассивЗначений = Новый Массив;
			Для Каждого СтрокаТЧ Из Объект.Проекты Цикл
				МассивЗначений.Добавить(СтрокаТЧ[ИмяКолонки]);
			КонецЦикла;
			ОбъектПолучатель.Проекты[ИмяКолонки] = МассивЗначений;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеОграничений()
	НастройкаОтборовНаУзле = ОбменДаннымиСППРКлиентСервер.НастройкаОтборовНаУзле();
	ПреобразоватьТаблицыВДанныеОбъекта(НастройкаОтборовНаУзле, Истина);
	ТекстОписанияОграниченийПередачиДанных = ОбменДаннымиСППРКлиентСервер.ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеТаблицыСинхронизации()
	ДанныеПроекта = Элементы.Проекты.ТекущиеДанные;
	Если ДанныеПроекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрТаб Из СинхронизацияПоПроекту Цикл
		СтрТаб.Синхронизировать = ДанныеПроекта["Синхронизировать"+СтрТаб.Постфикс];
		Если СтрТаб.ЕстьПубликуемые Тогда
			СтрТаб.ТолькоПубликуемые = ДанныеПроекта["ТолькоПубликуемые"+СтрТаб.Постфикс];
		Иначе
			СтрТаб.ТолькоПубликуемые = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущиеДанныеПроекта(ИмяКолонки)
	Если Элементы.Проекты.ТекущиеДанные = Неопределено Тогда
		Если Объект.Проекты.Количество() = 1 Тогда
			СтрокаТЧПроекты = Объект.Проекты[0];
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран текущий проект.'"));
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаТЧПроекты = Объект.Проекты.НайтиПоИдентификатору(Элементы.Проекты.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	СтрокаСинхронизации = Элементы.СинхронизацияПоПроекту.ТекущиеДанные;
	ИмяКолонкиПроекты = ИмяКолонки + СтрокаСинхронизации.Постфикс;
	СтрокаТЧПроекты[ИмяКолонкиПроекты] = СтрокаСинхронизации[ИмяКолонки];
	ОбновитьОписаниеОграничений();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагиСинхронизацииПоПроекту(НовыйФлаг)
	Если Элементы.Проекты.ТекущиеДанные = Неопределено Тогда
		Если Объект.Проекты.Количество() = 1 Тогда
			СтрокаТЧПроекты = Объект.Проекты[0];
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран текущий проект.'"));
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаТЧПроекты = Объект.Проекты.НайтиПоИдентификатору(Элементы.Проекты.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	Для Каждого Строка Из СинхронизацияПоПроекту Цикл
		ИмяКолонкиПроекты = "Синхронизировать" + Строка.Постфикс;
		Строка.Синхронизировать = НовыйФлаг;
		СтрокаТЧПроекты[ИмяКолонкиПроекты] = НовыйФлаг;
	КонецЦикла;
	ОбновитьОписаниеОграничений();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти