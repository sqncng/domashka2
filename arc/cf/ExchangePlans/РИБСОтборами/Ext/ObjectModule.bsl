#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ПриПолученииДанныхФайла(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад)
	
	ПриПолученииДанныхФайла(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЭтотУзел Тогда
		Возврат;
	КонецЕсли;
	
	Если Проекты.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбраны проекты для синхронизации.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Реквизит оставлен для совместимости с логикой ограничения доступа.
	ИспользоватьОтборПоПроектам = Истина;
	
	// Очистка лишних ТЧ, сброс лишних флагов.
	Если ИспользоватьОтборПоПапкамФайлов И ПапкиФайлов.Количество() = 0 Тогда
		ИспользоватьОтборПоПапкамФайлов = Ложь;
	ИначеЕсли Не ИспользоватьОтборПоПапкамФайлов И ПапкиФайлов.Количество() > 0 Тогда
		ПапкиФайлов.Очистить();
	КонецЕсли;
	
	Если ИспользоватьОтборПоРазделамПроектов И РазделыПроектов.Количество() = 0 Тогда
		ИспользоватьОтборПоРазделамПроектов = Ложь;
	ИначеЕсли Не ИспользоватьОтборПоРазделамПроектов И РазделыПроектов.Количество() > 0 Тогда
		РазделыПроектов.Очистить();
	КонецЕсли;
	
	Если ИспользоватьОтборПоГруппамДоступа И ГруппыДоступа.Количество() = 0 Тогда
		ИспользоватьОтборПоГруппамДоступа = Ложь;
	ИначеЕсли Не ИспользоватьОтборПоГруппамДоступа И ГруппыДоступа.Количество() > 0 Тогда
		ГруппыДоступа.Очистить();
	КонецЕсли;
	
	Если ИспользоватьСкрытиеИменПользователей И Пользователи.Количество() = 0 Тогда
		ИспользоватьСкрытиеИменПользователей = Ложь;
	ИначеЕсли Не ИспользоватьСкрытиеИменПользователей И Пользователи.Количество() > 0 Тогда
		Пользователи.Очистить();
	КонецЕсли;
	
	// Сброс флагов "Только публикуемые" если выключена синхронизация.
	Для Каждого СтрПроекты Из Проекты Цикл
		
		Если Не СтрПроекты.СинхронизироватьЗадачи Тогда
			СтрПроекты.ТолькоПубликуемыеЗадачи = Ложь;
		КонецЕсли;
		
		Если Не СтрПроекты.СинхронизироватьОшибки Тогда
			СтрПроекты.ТолькоПубликуемыеОшибки = Ложь;
		КонецЕсли;
		
		Если Не СтрПроекты.СинхронизироватьТехническиеПроекты Тогда
			СтрПроекты.ТолькоПубликуемыеТехническиеПроекты = Ложь;
		КонецЕсли;
		
		Если Не СтрПроекты.СинхронизироватьЦелевыеЗадачи Тогда
			СтрПроекты.ТолькоПубликуемыеЦелевыеЗадачи = Ложь;
		КонецЕсли;
		Если Не СтрПроекты.СинхронизироватьИдеи Тогда
			СтрПроекты.ТолькоПубликуемыеИдеи = Ложь;
		КонецЕсли;
		
		Если Не СтрПроекты.СинхронизироватьРегламенты Тогда
			СтрПроекты.ТолькоПубликуемыеРегламенты = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	Если ОбменДаннымиСервер.НадоВыполнитьОбработчикПослеЗагрузкиДанных(ЭтотОбъект, ЭтотОбъект.Ссылка) Тогда
		ПослеЗагрузкиДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента)
	
	ТипЗначенияОбъекта = ТипЗнч(ЭлементДанных);

	Если ОтправкаЭлемента <> ОтправкаЭлементаДанных.Удалить Тогда
		
		Если ТипЗначенияОбъекта <> Тип("УдалениеОбъекта") Тогда
		
			ОбъектМетаданных = ЭлементДанных.Метаданные();
			
			Если ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных) Тогда
				ПереопределитьНаборЗаписей(ЭлементДанных, ТипЗначенияОбъекта, Ссылка);
			ИначеЕсли ОтправкаЭлемента <> ОтправкаЭлементаДанных.Игнорировать
				И (ТипЗначенияОбъекта = Тип("СправочникОбъект.Пользователи")
				Или ТипЗначенияОбъекта = Тип("СправочникОбъект.ВнешниеПользователи")) Тогда
					
				УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЭлементДанных,ТипЗначенияОбъекта);
				
				Если Не (УзлыДляОбъекта <> Неопределено И УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) <> Неопределено) Тогда
					// Сброс настроек аутенфикации.
					ЭлементДанных.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
					ЭлементДанных.Подготовлен = Ложь;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		Или ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияОбъекта = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЭлементДанных,ТипЗначенияОбъекта);
		
		Если УзлыДляОбъекта <> Неопределено И УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьОтправкуРегистраНаличиеФайлов(ТипЗначенияОбъекта, ЭтотОбъект.Ссылка, ЭлементДанных);
	
КонецПроцедуры

Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза)
	
	ТипЗначенияОбъекта = ТипЗнч(ЭлементДанных);
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		Или ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияОбъекта = Тип("СправочникОбъект.УчетныеЗаписиЭлектроннойПочты")
		И ЗначениеЗаполнено(ЭлементДанных.ИмяПредопределенныхДанных) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Пользователи")
		Или ТипЗначенияОбъекта = Тип("СправочникОбъект.ВнешниеПользователи") Тогда
		
		ЭлементДанных.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ЭлементДанных.Подготовлен = Ложь;
		
		УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЭлементДанных,ТипЗначенияОбъекта);
		
		Если УзлыДляОбъекта <> Неопределено И УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
			ЭлементДанных.Наименование = СокрЛП(ЭлементДанных.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ГруппыПользователей") Тогда
		
		УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЭлементДанных,ТипЗначенияОбъекта);
		
		Если УзлыДляОбъекта <> Неопределено И УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
			ЭлементДанных.Наименование = СокрЛП(ЭлементДанных.Ссылка.УникальныйИдентификатор());
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		
		СтруктураОчищаемыхРеквизитов = РеквизитыРассинхронизацииПроектов();
		ОчиститьРеквизитыПриОтправкеДанных(ЭлементДанных, СтруктураОчищаемыхРеквизитов, ТипЗначенияОбъекта, ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ВерсииПроекта") Тогда
		
		СтруктураОчищаемыхРеквизитов = РеквизитыРассинхронизацииВерсииПроекта();
		ОчиститьРеквизитыПриОтправкеДанных(ЭлементДанных, СтруктураОчищаемыхРеквизитов, ТипЗначенияОбъекта, ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ТехническиеПроекты") Тогда
		
		СтруктураОчищаемыхРеквизитов = РеквизитыРассинхронизацииТехническихПроектов();
		ОчиститьРеквизитыПриОтправкеДанных(ЭлементДанных, СтруктураОчищаемыхРеквизитов, ТипЗначенияОбъекта, ЭтотОбъект);
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.ВерсииОбъектов") Тогда
		
		Если СозданиеНачальногоОбраза
			И ЭтотОбъект.ИгнорироватьВерсииОбъектовПриСозданииНачальногоОбраза 
			И ЭлементДанных.Отбор.Период.Значение < ЭтотОбъект.ДатаИгнорированияВерсийОбъектовПриСозданииНачальногоОбраза Тогда
			
			УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЭлементДанных[0],Тип("РегистрСведенийЗапись.ВерсииОбъектов"));
			
			Если УзлыДляОбъекта <> Неопределено И УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
				
				ЭлементДанных.Очистить();
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
				
			КонецЕсли;
			
		Иначе
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		Если СозданиеНачальногоОбраза
			И ЭтотОбъект.ИгнорироватьВерсииФайловПриСозданииНачальногоОбраза 
			И ЭлементДанных.ДатаМодификацииФайла < ЭтотОбъект.ДатаИгнорированияВерсийФайловПриСозданииНачальногоОбраза Тогда
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		Иначе
			
			УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЭлементДанных,ТипЗначенияОбъекта);
			
			Если УзлыДляОбъекта <> Неопределено И УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа") Тогда
		ОбработатьОтправкуРегистраНаборыЗначенийДоступа(ЭлементДанных, ОтправкаЭлемента);
	КонецЕсли;
	
	ОбработатьОтправкуРегистраНаличиеФайлов(ТипЗначенияОбъекта, ЭтотОбъект.Ссылка, ЭлементДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Переопределяет стандартное поведение при загрузке данных;
//
Процедура ПриПолученииДанныхФайла(ЭлементДанных, ПолучениеЭлемента)
	
	ТипПолучаемогоОбъекта = ТипЗнч(ЭлементДанных);
	Отправитель           = Неопределено;
	
	Если (ТипПолучаемогоОбъекта = Тип("СправочникОбъект.Пользователи")
		Или ТипПолучаемогоОбъекта = Тип("СправочникОбъект.ВнешниеПользователи"))
		И Не ОбщегоНазначения.РазделениеВключено() Тогда
			
			СписокСвойств =
				"ИдентификаторПользователяИБ,
				|Подготовлен";
			
			ЗначенияРеквизитовСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЭлементДанных.Ссылка, СписокСвойств + ",Наименование");
				
			Если Не ОбменДаннымиПовтИспСППР.ЭтоПодчиненныйУзелРИБСОтбором()
				И (ЭтотОбъект.ИспользоватьСкрытиеИменПользователей 
				И ЭтотОбъект.Пользователи.Найти(ЭлементДанных.Ссылка) = Неопределено) Тогда
				
				// Если загружается новый пользователь, наименование должно загрузиться.
				// Для существующего пользователя наименование должно сохраниться.
				Если Не ПустаяСтрока(ЗначенияРеквизитовСсылки.Наименование) Тогда 
					СписокСвойств = СписокСвойств + ",Наименование";
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементДанных, ЗначенияРеквизитовСсылки, СписокСвойств);
			
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("СправочникОбъект.ГруппыПользователей")
		И Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если Не ОбменДаннымиПовтИспСППР.ЭтоПодчиненныйУзелРИБСОтбором()
			И ЭтотОбъект.ИспользоватьСкрытиеИменПользователей
			И ЗначениеЗаполнено(ЭлементДанных.Ссылка) Тогда
			
			ЗаполнитьЗначенияСвойств(ЭлементДанных, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЭлементДанных.Ссылка, "Наименование"));
				
		КонецЕсли;
			
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("СправочникОбъект.Проекты") Тогда
		
		СтруктураСохраняемыхРеквизитов = РеквизитыРассинхронизацииПроектов();
		ВосстановитьРеквизитыПриПолученииДанных(СтруктураСохраняемыхРеквизитов, ЭлементДанных);
		
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("СправочникОбъект.ВерсииПроекта") Тогда
		
		СтруктураСохраняемыхРеквизитов = РеквизитыРассинхронизацииВерсииПроекта();
		ВосстановитьРеквизитыПриПолученииДанных(СтруктураСохраняемыхРеквизитов, ЭлементДанных);
		
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("СправочникОбъект.ТехническиеПроекты") Тогда
		
		СтруктураСохраняемыхРеквизитов = РеквизитыРассинхронизацииТехническихПроектов();
		ВосстановитьРеквизитыПриПолученииДанных(СтруктураСохраняемыхРеквизитов, ЭлементДанных);
		
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("РегистрСведенийНаборЗаписей.ЭтапыПроцесса")
		Или ТипПолучаемогоОбъекта = Тип("РегистрСведенийНаборЗаписей.СостоянияЗадачПроцессов") Тогда
		
		// Сами наборы записей не загружаются.
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
		Если ТипПолучаемогоОбъекта = Тип("РегистрСведенийНаборЗаписей.ЭтапыПроцесса") Тогда
			
			Предмет = ЭлементДанных.Отбор.Предмет.Значение;
			ДобавитьПредметКПерерасчетуСостояний(Предмет, "ЭтапыПроцесса");
			
		Иначе
			
			Задача = ЭлементДанных.Отбор.ЗадачаПроцесса.Значение;
			ДобавитьЗадачуПредментаКПерерасчетуСостояний(Задача, "СостоянияЗадачПроцессов")

		КонецЕсли;
		
	ИначеЕсли ТипПолучаемогоОбъекта = Тип("РегистрСведенийНаборЗаписей.ПротоколСогласованияРесурсов") Тогда
			
		Задача = ЭлементДанных.Отбор.Задача.Значение;
		ДобавитьЗадачуПредментаКПерерасчетуСостояний(Задача, "ИтогиСогласованияЗадачРесурсов");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПредметКПерерасчетуСостояний(Предмет, ИмяРегистра)
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат;
	КонецЕсли;
	
	ПредметыДляПересчетаСостояний = Неопределено;	
	ИмяСвойства                   = "Предметы_" + ИмяРегистра; 
	ЭтотОбъект.ДополнительныеСвойства.Свойство(ИмяСвойства, ПредметыДляПересчетаСостояний);
	
	Если ПредметыДляПересчетаСостояний = Неопределено Тогда
		ПредметыДляПересчетаСостояний = Новый Соответствие();
	КонецЕсли;
	
	ПредметыДляПересчетаСостояний.Вставить(Предмет);
	ЭтотОбъект.ДополнительныеСвойства.Вставить(ИмяСвойства, ПредметыДляПересчетаСостояний);
	
КонецПроцедуры

Процедура ДобавитьЗадачуПредментаКПерерасчетуСостояний(ЗадачаПроцесса, ИмяРегистра)
	
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиПредметаДляПересчетаСостояний = Неопределено;	
	ИмяСвойства                         = "ЗадачиПредмета_" + ИмяРегистра; 
	ЭтотОбъект.ДополнительныеСвойства.Свойство(ИмяСвойства, ЗадачиПредметаДляПересчетаСостояний);
	
	Если ЗадачиПредметаДляПересчетаСостояний = Неопределено Тогда
		ЗадачиПредметаДляПересчетаСостояний = Новый Массив();
	КонецЕсли;
	
	Если ЗадачиПредметаДляПересчетаСостояний.Найти(ЗадачаПроцесса) = Неопределено Тогда
		ЗадачиПредметаДляПересчетаСостояний.Добавить(ЗадачаПроцесса);
	КонецЕсли;
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить(ИмяСвойства, ЗадачиПредметаДляПересчетаСостояний);
	
КонецПроцедуры

Процедура ПереопределитьНаборЗаписей(ЭлементДанных, ТипЗначенияОбъекта, УзелПланаОбмена)
	
	КоличествоЗаписейВНаборе = ЭлементДанных.Количество() - 1;
	
	ВременныйТип = Неопределено;
	
	Пока КоличествоЗаписейВНаборе >= 0 Цикл
		
		ЗаписьНабора = ЭлементДанных[КоличествоЗаписейВНаборе];
		
		Если ВременныйТип = Неопределено Тогда
			ВременныйТип = ТипЗнч(ЗаписьНабора);
		КонецЕсли;
		
		УзлыПолучатели = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЗаписьНабора, ВременныйТип);
		
		Если УзлыПолучатели.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
			ЭлементДанных.Удалить(ЗаписьНабора);
		КонецЕсли;
		
		КоличествоЗаписейВНаборе = КоличествоЗаписейВНаборе - 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыРассинхронизацииПроектов()
	
	Результат = Новый Структура;
	Результат.Вставить("КаталогИБДляЗагрузкиМетаданных",                        "");
	Результат.Вставить("КаталогИБПрикладываемыхКОшибкам",                       "");
	Результат.Вставить("КаталогХранилищТехническихПроектов",                    "");
	Результат.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных",                "");
	Результат.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных",         "");
	Результат.Вставить("ИспользоватьРегламентноеЗаданиеСообщенийПоОшибкам",     Ложь);
	Результат.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных",             "");
	Результат.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных",      "");
	Результат.Вставить("ВерсияПлатформы",                                       "");
	Результат.Вставить("ОбновлятьКонфигурациюИзХранилищаПриЗагрузкеМетаданных", Ложь);
	Результат.Вставить("Описание",                                              "");
	Результат.Вставить("ОтветственныйЗаМетаданныеПоУмолчанию",                  Справочники.Пользователи.ПустаяСсылка());
	Результат.Вставить("ПользовательАвторСообщенийСистемыВзаимодействия",                   Справочники.Пользователи.ПустаяСсылка());
	Результат.Вставить("РасположениеДистрибутивов",                             "");
	Результат.Вставить("РассылатьУведомленияПоЗадачам",                         Ложь);
	Результат.Вставить("РассылатьУведомленияПоОшибкам",                         Ложь);
	Результат.Вставить("РассылатьУведомленияПоТехническимПроектам",             Ложь);
	Результат.Вставить("РегламентноеЗаданиеСинхронизацииКонфигурацииGUID",      "");
	Результат.Вставить("РегламентноеЗаданиеСообщенийПоОшибкамGUID",             "");
	Результат.Вставить("ХранилищеОписания",                                     Новый ХранилищеЗначения(Неопределено));
	Результат.Вставить("ХранилищеШаблонаОписанияТехническогоПроекта",           Новый ХранилищеЗначения(Неопределено));
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыРассинхронизацииВерсииПроекта()
	
	Результат = Новый Структура;
	Результат.Вставить("КаталогИБДляЗагрузкиМетаданных",					"");
	Результат.Вставить("ИмяПользователяИБДляЗагрузкиМетаданных", 			"");
	Результат.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", 	"");
	Результат.Вставить("ПарольПользователяИБДляЗагрузкиМетаданных", 		"");
	Результат.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных", 	"");
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыРассинхронизацииТехническихПроектов()
	
	Результат = Новый Структура;
	Результат.Вставить("КаталогДемонстрационнойБазы", 					"");
	Результат.Вставить("ПарольПользователяХранилищаДляЗагрузкиМетаданных","");
	Результат.Вставить("ИмяПользователяХранилищаДляЗагрузкиМетаданных", "");
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьРеквизитыПриОтправкеДанных(ЭлементДанных, СтруктураОчищаемыхРеквизитов, ТипЗначенияОбъекта, ЭтотОбъект)
	
	Если ЭлементДанных.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОчищаемыйРеквизит Из СтруктураОчищаемыхРеквизитов Цикл
		ЭлементДанных[ОчищаемыйРеквизит.Ключ] = ОчищаемыйРеквизит.Значение;
	КонецЦикла;
	
	УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ЭлементДанных,ТипЗначенияОбъекта);
	
	Если УзлыДляОбъекта <> Неопределено И УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьРеквизитыПриПолученииДанных(СтруктураСохраняемыхРеквизитов, ЭлементДанных)
	
	Если ЭлементДанных.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	СписокСвойств = "";
	
	Для Каждого СохраняемыйРеквизит Из СтруктураСохраняемыхРеквизитов Цикл
		СписокСвойств = СписокСвойств + ?(СписокСвойств = "","",",
			|") + СохраняемыйРеквизит.Ключ;
	КонецЦикла;
		
	ЗаполнитьЗначенияСвойств(ЭлементДанных, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭлементДанных.Ссылка, СписокСвойств));
		
КонецПроцедуры

Процедура ОбработатьОтправкуРегистраНаличиеФайлов(ТипЗначенияОбъекта, УзелСсылка, ЭлементДанных)
	
	Если ТипЗначенияОбъекта = Тип("РегистрСведенийНаборЗаписей.НаличиеФайлов")
		И ЭлементДанных.Количество() > 0 Тогда
		
		ВладелецФайла = ЭлементДанных.Отбор.ОбъектСФайлами.Значение;
		ФильтрУзлов = Новый Массив;
		ФильтрУзлов.Добавить(УзелСсылка);
		
		Если ОбменДаннымиСППР.УзлыФильтрПоПубликацииДляСсылки(ВладелецФайла, ФильтрУзлов) = Неопределено Тогда
			// Нет фильтра по публикации, не требуются изменения в наборе записей.
			Возврат;
		КонецЕсли;
		
		// Признак наличия файлов определяется наличием публикуемых файлов у объекта.
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
			|ИЗ Справочник.Файлы
			|ГДЕ Публикуется И ВладелецФайла = &ВладелецФайла");
		
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
		ЕстьПубликуемыеФайлы = Не Запрос.Выполнить().Пустой();
		
		Если Не ЕстьПубликуемыеФайлы Тогда
			// Меняем содержимое набора записей.
			ЭлементДанных[0].ЕстьФайлы = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтправкуРегистраНаборыЗначенийДоступа(ЭлементДанных, ОтправкаЭлемента)
	
	СсылкаНаОбъект     = ЭлементДанных.Отбор.Объект.Значение;
	ОбъектВЗаписи      = СсылкаНаОбъект.ПолучитьОбъект();
	ТипЗначенияОбъекта = ТипЗнч(ОбъектВЗаписи);
	
	УзлыДляОбъекта = ОбменДаннымиСППР.ПолучитьУзлыДляОбъекта(ОбъектВЗаписи,ТипЗначенияОбъекта);
	
	Если УзлыДляОбъекта = Неопределено Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	ИначеЕсли УзлыДляОбъекта.Найти(ЭтотОбъект.Ссылка) = Неопределено Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗагрузкиДанных()
	
	// Взведем специальный параметр сеанса синхронизации данных.
	УстановитьПараметрОтключитьРегистрациюСостоянийЗадач(Истина);
	
	ДополнитьПредметыПерерасчетаПоЗадачам();
	
	// Пересчет состояний по предметам для разных регистров.
	ПредметыДляПересчетаСостояний = Неопределено;
	ЭтотОбъект.ДополнительныеСвойства.Свойство("Предметы_ЭтапыПроцесса", ПредметыДляПересчетаСостояний);
	
	Если ПредметыДляПересчетаСостояний <> Неопределено Тогда
		Для Каждого Предмет Из ПредметыДляПересчетаСостояний Цикл
			РегистрыСведений.ЭтапыПроцесса.РасчитатьЭтапыПроцессаПоПредмету(Предмет.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	ПредметыДляПересчетаСостояний = Неопределено;
	ЭтотОбъект.ДополнительныеСвойства.Свойство("Предметы_ИтогиСогласованияЗадачРесурсов", ПредметыДляПересчетаСостояний);
	
	Если ПредметыДляПересчетаСостояний <> Неопределено Тогда
		Для Каждого Предмет Из ПредметыДляПересчетаСостояний Цикл
			РегистрыСведений.ИтогиСогласованияЗадачРесурсов.РассчитатьСогласованиеРесурсовЗадачПоПредмету(Предмет.Ключ, Истина);
		КонецЦикла;
	КонецЕсли;
	
	ПредметыДляПересчетаСостояний = Неопределено;
	ЭтотОбъект.ДополнительныеСвойства.Свойство("Предметы_СостоянияЗадачПроцессов", ПредметыДляПересчетаСостояний);
	
	Если ПредметыДляПересчетаСостояний <> Неопределено Тогда
		
		Для Каждого Предмет Из ПредметыДляПересчетаСостояний Цикл
			
			РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьМаксимальныйСтатусЗадачПоПредмету(Предмет.Ключ, Ложь);
			РегистрыСведений.СостоянияЗадачПроцессов.РассчитатьЗонуЗадачПоПредмету(Предмет.Ключ);
			РегистрыСведений.СостоянияЗадачПроцессов.УпорядочитьЗадачиПоПредмету(Предмет.Ключ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сброс специального параметра сеанса.
	УстановитьПараметрОтключитьРегистрациюСостоянийЗадач(Ложь); 
	
КонецПроцедуры

Процедура ДополнитьПредметыПерерасчетаПоЗадачам() 
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЕСТЬNULL(ЗадачиПроцесса.Предмет, ЗНАЧЕНИЕ(Справочник.ТехническиеПроекты.ПустаяСсылка)) КАК Предмет
		|ИЗ
		|	Справочник.ЗадачиПроцесса КАК ЗадачиПроцесса
		|ГДЕ
		|	ЗадачиПроцесса.Ссылка В(&ЗадачиПроцесса)");
	
	ЗадачиПредметаСогласованиеРесурсовЗадачПроцессов = Неопределено;
	ЭтотОбъект.ДополнительныеСвойства.Свойство("ЗадачиПредмета_ИтогиСогласованияЗадачРесурсов", ЗадачиПредметаСогласованиеРесурсовЗадачПроцессов);
	
	Если ЗадачиПредметаСогласованиеРесурсовЗадачПроцессов <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ЗадачиПроцесса", ЗадачиПредметаСогласованиеРесурсовЗадачПроцессов);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из РезультатЗапроса Цикл
			ДобавитьПредметКПерерасчетуСостояний(Строка.Предмет, "ИтогиСогласованияЗадачРесурсов");
		КонецЦикла;
		
	КонецЕсли;
		
	ЗадачиПредметаСостоянияЗадачПроцессов = Неопределено;
	ЭтотОбъект.ДополнительныеСвойства.Свойство("ЗадачиПредмета_СостоянияЗадачПроцессов", ЗадачиПредметаСостоянияЗадачПроцессов);
	
	Если ЗадачиПредметаСостоянияЗадачПроцессов <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ЗадачиПроцесса", ЗадачиПредметаСостоянияЗадачПроцессов);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из РезультатЗапроса Цикл
			ДобавитьПредметКПерерасчетуСостояний(Строка.Предмет, "СостоянияЗадачПроцессов");
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьПараметрОтключитьРегистрациюСостоянийЗадач(ЗначениеПараметра)
	
	ПараметрыСеансаСинхронизацииДанных = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ТекущийПараметрСеанса = ПараметрыСеанса.ПараметрыСеансаСинхронизацииДанных.Получить();
	Исключение
		ТекущийПараметрСеанса = Неопределено;
	КонецПопытки;
	
	ТекущееЗначениеПараметра = Неопределено;
	
	Если ТипЗнч(ТекущийПараметрСеанса) = Тип("Соответствие") Тогда
		
		Для Каждого Элемент Из ТекущийПараметрСеанса Цикл
			
			ПараметрыСеансаСинхронизацииДанных.Вставить(Элемент.Ключ, Элемент.Значение);
			
			Если Элемент.Ключ = "ОтключитьРегистрациюСостоянийЗадач" Тогда
				ТекущееЗначениеПараметра = Элемент.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТекущееЗначениеПараметра = Неопределено Тогда
		ТекущееЗначениеПараметра = Новый Соответствие;
	КонецЕсли;
	
	ТекущееЗначениеПараметра.Вставить(ЭтотОбъект.Ссылка, ЗначениеПараметра);
	
	ПараметрыСеансаСинхронизацииДанных.Вставить("ОтключитьРегистрациюСостоянийЗадач", ТекущееЗначениеПараметра);
	ПараметрыСеанса.ПараметрыСеансаСинхронизацииДанных = Новый ХранилищеЗначения(ПараметрыСеансаСинхронизацииДанных);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли